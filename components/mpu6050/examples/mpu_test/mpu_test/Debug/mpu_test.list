
mpu_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a64  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002b70  08002b70  00012b70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b9c  08002b9c  00020040  2**0
                  CONTENTS
  4 .ARM          00000000  08002b9c  08002b9c  00020040  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b9c  08002b9c  00020040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b9c  08002b9c  00012b9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ba0  08002ba0  00012ba0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  08002ba4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  20000040  08002be4  00020040  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000b4  08002be4  000200b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020069  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006696  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001374  00000000  00000000  00026742  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006e0  00000000  00000000  00027ab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000542  00000000  00000000  00028198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016d52  00000000  00000000  000286da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009158  00000000  00000000  0003f42c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00082a40  00000000  00000000  00048584  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001ba4  00000000  00000000  000cafc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000089  00000000  00000000  000ccb68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000040 	.word	0x20000040
 8000128:	00000000 	.word	0x00000000
 800012c:	08002b58 	.word	0x08002b58

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000044 	.word	0x20000044
 8000148:	08002b58 	.word	0x08002b58

0800014c <__aeabi_fmul>:
 800014c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000150:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000154:	bf1e      	ittt	ne
 8000156:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015a:	ea92 0f0c 	teqne	r2, ip
 800015e:	ea93 0f0c 	teqne	r3, ip
 8000162:	d06f      	beq.n	8000244 <__aeabi_fmul+0xf8>
 8000164:	441a      	add	r2, r3
 8000166:	ea80 0c01 	eor.w	ip, r0, r1
 800016a:	0240      	lsls	r0, r0, #9
 800016c:	bf18      	it	ne
 800016e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000172:	d01e      	beq.n	80001b2 <__aeabi_fmul+0x66>
 8000174:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000178:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800017c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000180:	fba0 3101 	umull	r3, r1, r0, r1
 8000184:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000188:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800018c:	bf3e      	ittt	cc
 800018e:	0049      	lslcc	r1, r1, #1
 8000190:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000194:	005b      	lslcc	r3, r3, #1
 8000196:	ea40 0001 	orr.w	r0, r0, r1
 800019a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800019e:	2afd      	cmp	r2, #253	; 0xfd
 80001a0:	d81d      	bhi.n	80001de <__aeabi_fmul+0x92>
 80001a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001a6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001aa:	bf08      	it	eq
 80001ac:	f020 0001 	biceq.w	r0, r0, #1
 80001b0:	4770      	bx	lr
 80001b2:	f090 0f00 	teq	r0, #0
 80001b6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ba:	bf08      	it	eq
 80001bc:	0249      	lsleq	r1, r1, #9
 80001be:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001c6:	3a7f      	subs	r2, #127	; 0x7f
 80001c8:	bfc2      	ittt	gt
 80001ca:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001ce:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d2:	4770      	bxgt	lr
 80001d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001d8:	f04f 0300 	mov.w	r3, #0
 80001dc:	3a01      	subs	r2, #1
 80001de:	dc5d      	bgt.n	800029c <__aeabi_fmul+0x150>
 80001e0:	f112 0f19 	cmn.w	r2, #25
 80001e4:	bfdc      	itt	le
 80001e6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ea:	4770      	bxle	lr
 80001ec:	f1c2 0200 	rsb	r2, r2, #0
 80001f0:	0041      	lsls	r1, r0, #1
 80001f2:	fa21 f102 	lsr.w	r1, r1, r2
 80001f6:	f1c2 0220 	rsb	r2, r2, #32
 80001fa:	fa00 fc02 	lsl.w	ip, r0, r2
 80001fe:	ea5f 0031 	movs.w	r0, r1, rrx
 8000202:	f140 0000 	adc.w	r0, r0, #0
 8000206:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020a:	bf08      	it	eq
 800020c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000210:	4770      	bx	lr
 8000212:	f092 0f00 	teq	r2, #0
 8000216:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021a:	bf02      	ittt	eq
 800021c:	0040      	lsleq	r0, r0, #1
 800021e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000222:	3a01      	subeq	r2, #1
 8000224:	d0f9      	beq.n	800021a <__aeabi_fmul+0xce>
 8000226:	ea40 000c 	orr.w	r0, r0, ip
 800022a:	f093 0f00 	teq	r3, #0
 800022e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000232:	bf02      	ittt	eq
 8000234:	0049      	lsleq	r1, r1, #1
 8000236:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023a:	3b01      	subeq	r3, #1
 800023c:	d0f9      	beq.n	8000232 <__aeabi_fmul+0xe6>
 800023e:	ea41 010c 	orr.w	r1, r1, ip
 8000242:	e78f      	b.n	8000164 <__aeabi_fmul+0x18>
 8000244:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000248:	ea92 0f0c 	teq	r2, ip
 800024c:	bf18      	it	ne
 800024e:	ea93 0f0c 	teqne	r3, ip
 8000252:	d00a      	beq.n	800026a <__aeabi_fmul+0x11e>
 8000254:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000258:	bf18      	it	ne
 800025a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800025e:	d1d8      	bne.n	8000212 <__aeabi_fmul+0xc6>
 8000260:	ea80 0001 	eor.w	r0, r0, r1
 8000264:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000268:	4770      	bx	lr
 800026a:	f090 0f00 	teq	r0, #0
 800026e:	bf17      	itett	ne
 8000270:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000274:	4608      	moveq	r0, r1
 8000276:	f091 0f00 	teqne	r1, #0
 800027a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800027e:	d014      	beq.n	80002aa <__aeabi_fmul+0x15e>
 8000280:	ea92 0f0c 	teq	r2, ip
 8000284:	d101      	bne.n	800028a <__aeabi_fmul+0x13e>
 8000286:	0242      	lsls	r2, r0, #9
 8000288:	d10f      	bne.n	80002aa <__aeabi_fmul+0x15e>
 800028a:	ea93 0f0c 	teq	r3, ip
 800028e:	d103      	bne.n	8000298 <__aeabi_fmul+0x14c>
 8000290:	024b      	lsls	r3, r1, #9
 8000292:	bf18      	it	ne
 8000294:	4608      	movne	r0, r1
 8000296:	d108      	bne.n	80002aa <__aeabi_fmul+0x15e>
 8000298:	ea80 0001 	eor.w	r0, r0, r1
 800029c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002a8:	4770      	bx	lr
 80002aa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002ae:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b2:	4770      	bx	lr

080002b4 <__aeabi_frsub>:
 80002b4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80002b8:	e002      	b.n	80002c0 <__addsf3>
 80002ba:	bf00      	nop

080002bc <__aeabi_fsub>:
 80002bc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080002c0 <__addsf3>:
 80002c0:	0042      	lsls	r2, r0, #1
 80002c2:	bf1f      	itttt	ne
 80002c4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80002c8:	ea92 0f03 	teqne	r2, r3
 80002cc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80002d0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002d4:	d06a      	beq.n	80003ac <__addsf3+0xec>
 80002d6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80002da:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80002de:	bfc1      	itttt	gt
 80002e0:	18d2      	addgt	r2, r2, r3
 80002e2:	4041      	eorgt	r1, r0
 80002e4:	4048      	eorgt	r0, r1
 80002e6:	4041      	eorgt	r1, r0
 80002e8:	bfb8      	it	lt
 80002ea:	425b      	neglt	r3, r3
 80002ec:	2b19      	cmp	r3, #25
 80002ee:	bf88      	it	hi
 80002f0:	4770      	bxhi	lr
 80002f2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80002f6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002fa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80002fe:	bf18      	it	ne
 8000300:	4240      	negne	r0, r0
 8000302:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000306:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800030a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800030e:	bf18      	it	ne
 8000310:	4249      	negne	r1, r1
 8000312:	ea92 0f03 	teq	r2, r3
 8000316:	d03f      	beq.n	8000398 <__addsf3+0xd8>
 8000318:	f1a2 0201 	sub.w	r2, r2, #1
 800031c:	fa41 fc03 	asr.w	ip, r1, r3
 8000320:	eb10 000c 	adds.w	r0, r0, ip
 8000324:	f1c3 0320 	rsb	r3, r3, #32
 8000328:	fa01 f103 	lsl.w	r1, r1, r3
 800032c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000330:	d502      	bpl.n	8000338 <__addsf3+0x78>
 8000332:	4249      	negs	r1, r1
 8000334:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000338:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800033c:	d313      	bcc.n	8000366 <__addsf3+0xa6>
 800033e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000342:	d306      	bcc.n	8000352 <__addsf3+0x92>
 8000344:	0840      	lsrs	r0, r0, #1
 8000346:	ea4f 0131 	mov.w	r1, r1, rrx
 800034a:	f102 0201 	add.w	r2, r2, #1
 800034e:	2afe      	cmp	r2, #254	; 0xfe
 8000350:	d251      	bcs.n	80003f6 <__addsf3+0x136>
 8000352:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000356:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800035a:	bf08      	it	eq
 800035c:	f020 0001 	biceq.w	r0, r0, #1
 8000360:	ea40 0003 	orr.w	r0, r0, r3
 8000364:	4770      	bx	lr
 8000366:	0049      	lsls	r1, r1, #1
 8000368:	eb40 0000 	adc.w	r0, r0, r0
 800036c:	3a01      	subs	r2, #1
 800036e:	bf28      	it	cs
 8000370:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000374:	d2ed      	bcs.n	8000352 <__addsf3+0x92>
 8000376:	fab0 fc80 	clz	ip, r0
 800037a:	f1ac 0c08 	sub.w	ip, ip, #8
 800037e:	ebb2 020c 	subs.w	r2, r2, ip
 8000382:	fa00 f00c 	lsl.w	r0, r0, ip
 8000386:	bfaa      	itet	ge
 8000388:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800038c:	4252      	neglt	r2, r2
 800038e:	4318      	orrge	r0, r3
 8000390:	bfbc      	itt	lt
 8000392:	40d0      	lsrlt	r0, r2
 8000394:	4318      	orrlt	r0, r3
 8000396:	4770      	bx	lr
 8000398:	f092 0f00 	teq	r2, #0
 800039c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80003a0:	bf06      	itte	eq
 80003a2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80003a6:	3201      	addeq	r2, #1
 80003a8:	3b01      	subne	r3, #1
 80003aa:	e7b5      	b.n	8000318 <__addsf3+0x58>
 80003ac:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003b0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003b4:	bf18      	it	ne
 80003b6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003ba:	d021      	beq.n	8000400 <__addsf3+0x140>
 80003bc:	ea92 0f03 	teq	r2, r3
 80003c0:	d004      	beq.n	80003cc <__addsf3+0x10c>
 80003c2:	f092 0f00 	teq	r2, #0
 80003c6:	bf08      	it	eq
 80003c8:	4608      	moveq	r0, r1
 80003ca:	4770      	bx	lr
 80003cc:	ea90 0f01 	teq	r0, r1
 80003d0:	bf1c      	itt	ne
 80003d2:	2000      	movne	r0, #0
 80003d4:	4770      	bxne	lr
 80003d6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80003da:	d104      	bne.n	80003e6 <__addsf3+0x126>
 80003dc:	0040      	lsls	r0, r0, #1
 80003de:	bf28      	it	cs
 80003e0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80003e4:	4770      	bx	lr
 80003e6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80003ea:	bf3c      	itt	cc
 80003ec:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80003f0:	4770      	bxcc	lr
 80003f2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80003f6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80003fa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003fe:	4770      	bx	lr
 8000400:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000404:	bf16      	itet	ne
 8000406:	4608      	movne	r0, r1
 8000408:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800040c:	4601      	movne	r1, r0
 800040e:	0242      	lsls	r2, r0, #9
 8000410:	bf06      	itte	eq
 8000412:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000416:	ea90 0f01 	teqeq	r0, r1
 800041a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800041e:	4770      	bx	lr

08000420 <__aeabi_ui2f>:
 8000420:	f04f 0300 	mov.w	r3, #0
 8000424:	e004      	b.n	8000430 <__aeabi_i2f+0x8>
 8000426:	bf00      	nop

08000428 <__aeabi_i2f>:
 8000428:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	ea5f 0c00 	movs.w	ip, r0
 8000434:	bf08      	it	eq
 8000436:	4770      	bxeq	lr
 8000438:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 800043c:	4601      	mov	r1, r0
 800043e:	f04f 0000 	mov.w	r0, #0
 8000442:	e01c      	b.n	800047e <__aeabi_l2f+0x2a>

08000444 <__aeabi_ul2f>:
 8000444:	ea50 0201 	orrs.w	r2, r0, r1
 8000448:	bf08      	it	eq
 800044a:	4770      	bxeq	lr
 800044c:	f04f 0300 	mov.w	r3, #0
 8000450:	e00a      	b.n	8000468 <__aeabi_l2f+0x14>
 8000452:	bf00      	nop

08000454 <__aeabi_l2f>:
 8000454:	ea50 0201 	orrs.w	r2, r0, r1
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000460:	d502      	bpl.n	8000468 <__aeabi_l2f+0x14>
 8000462:	4240      	negs	r0, r0
 8000464:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000468:	ea5f 0c01 	movs.w	ip, r1
 800046c:	bf02      	ittt	eq
 800046e:	4684      	moveq	ip, r0
 8000470:	4601      	moveq	r1, r0
 8000472:	2000      	moveq	r0, #0
 8000474:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000478:	bf08      	it	eq
 800047a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800047e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000482:	fabc f28c 	clz	r2, ip
 8000486:	3a08      	subs	r2, #8
 8000488:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800048c:	db10      	blt.n	80004b0 <__aeabi_l2f+0x5c>
 800048e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000492:	4463      	add	r3, ip
 8000494:	fa00 fc02 	lsl.w	ip, r0, r2
 8000498:	f1c2 0220 	rsb	r2, r2, #32
 800049c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004a0:	fa20 f202 	lsr.w	r2, r0, r2
 80004a4:	eb43 0002 	adc.w	r0, r3, r2
 80004a8:	bf08      	it	eq
 80004aa:	f020 0001 	biceq.w	r0, r0, #1
 80004ae:	4770      	bx	lr
 80004b0:	f102 0220 	add.w	r2, r2, #32
 80004b4:	fa01 fc02 	lsl.w	ip, r1, r2
 80004b8:	f1c2 0220 	rsb	r2, r2, #32
 80004bc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004c0:	fa21 f202 	lsr.w	r2, r1, r2
 80004c4:	eb43 0002 	adc.w	r0, r3, r2
 80004c8:	bf08      	it	eq
 80004ca:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004ce:	4770      	bx	lr

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d6:	f000 fbb7 	bl	8000c48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004da:	f000 f821 	bl	8000520 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004de:	f000 f889 	bl	80005f4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004e2:	f000 f859 	bl	8000598 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  MPU6050_Handle_t handle = {
 80004e6:	2307      	movs	r3, #7
 80004e8:	713b      	strb	r3, [r7, #4]
 80004ea:	2300      	movs	r3, #0
 80004ec:	717b      	strb	r3, [r7, #5]
 80004ee:	2300      	movs	r3, #0
 80004f0:	71bb      	strb	r3, [r7, #6]
		  .rate_div = Rate_1KHz_Div,
		  .gyro_range = Gyro_Range_250s,
		  .accel_range = Accel_Range_2g
  };
  MPU6050_Init(&hi2c1, &my_mpu, handle, 0);
 80004f2:	2300      	movs	r3, #0
 80004f4:	687a      	ldr	r2, [r7, #4]
 80004f6:	4908      	ldr	r1, [pc, #32]	; (8000518 <main+0x48>)
 80004f8:	4808      	ldr	r0, [pc, #32]	; (800051c <main+0x4c>)
 80004fa:	f000 f8f4 	bl	80006e6 <MPU6050_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_Delay(10);
 80004fe:	200a      	movs	r0, #10
 8000500:	f000 fc04 	bl	8000d0c <HAL_Delay>
	  MPU6050_ReadAccelerometer(&hi2c1, &my_mpu);
 8000504:	4904      	ldr	r1, [pc, #16]	; (8000518 <main+0x48>)
 8000506:	4805      	ldr	r0, [pc, #20]	; (800051c <main+0x4c>)
 8000508:	f000 fa72 	bl	80009f0 <MPU6050_ReadAccelerometer>
	  MPU6050_ReadGyroscope(&hi2c1, &my_mpu);
 800050c:	4902      	ldr	r1, [pc, #8]	; (8000518 <main+0x48>)
 800050e:	4803      	ldr	r0, [pc, #12]	; (800051c <main+0x4c>)
 8000510:	f000 fa06 	bl	8000920 <MPU6050_ReadGyroscope>
	  HAL_Delay(10);
 8000514:	e7f3      	b.n	80004fe <main+0x2e>
 8000516:	bf00      	nop
 8000518:	20000000 	.word	0x20000000
 800051c:	2000005c 	.word	0x2000005c

08000520 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b090      	sub	sp, #64	; 0x40
 8000524:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000526:	f107 0318 	add.w	r3, r7, #24
 800052a:	2228      	movs	r2, #40	; 0x28
 800052c:	2100      	movs	r1, #0
 800052e:	4618      	mov	r0, r3
 8000530:	f002 fae6 	bl	8002b00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000534:	1d3b      	adds	r3, r7, #4
 8000536:	2200      	movs	r2, #0
 8000538:	601a      	str	r2, [r3, #0]
 800053a:	605a      	str	r2, [r3, #4]
 800053c:	609a      	str	r2, [r3, #8]
 800053e:	60da      	str	r2, [r3, #12]
 8000540:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000542:	2302      	movs	r3, #2
 8000544:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000546:	2301      	movs	r3, #1
 8000548:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800054a:	2310      	movs	r3, #16
 800054c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800054e:	2300      	movs	r3, #0
 8000550:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000552:	f107 0318 	add.w	r3, r7, #24
 8000556:	4618      	mov	r0, r3
 8000558:	f001 fed6 	bl	8002308 <HAL_RCC_OscConfig>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d001      	beq.n	8000566 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000562:	f000 f89f 	bl	80006a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000566:	230f      	movs	r3, #15
 8000568:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800056a:	2300      	movs	r3, #0
 800056c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800056e:	2300      	movs	r3, #0
 8000570:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000572:	2300      	movs	r3, #0
 8000574:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000576:	2300      	movs	r3, #0
 8000578:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800057a:	1d3b      	adds	r3, r7, #4
 800057c:	2100      	movs	r1, #0
 800057e:	4618      	mov	r0, r3
 8000580:	f002 f944 	bl	800280c <HAL_RCC_ClockConfig>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800058a:	f000 f88b 	bl	80006a4 <Error_Handler>
  }
}
 800058e:	bf00      	nop
 8000590:	3740      	adds	r7, #64	; 0x40
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
	...

08000598 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800059c:	4b12      	ldr	r3, [pc, #72]	; (80005e8 <MX_I2C1_Init+0x50>)
 800059e:	4a13      	ldr	r2, [pc, #76]	; (80005ec <MX_I2C1_Init+0x54>)
 80005a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80005a2:	4b11      	ldr	r3, [pc, #68]	; (80005e8 <MX_I2C1_Init+0x50>)
 80005a4:	4a12      	ldr	r2, [pc, #72]	; (80005f0 <MX_I2C1_Init+0x58>)
 80005a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005a8:	4b0f      	ldr	r3, [pc, #60]	; (80005e8 <MX_I2C1_Init+0x50>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005ae:	4b0e      	ldr	r3, [pc, #56]	; (80005e8 <MX_I2C1_Init+0x50>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005b4:	4b0c      	ldr	r3, [pc, #48]	; (80005e8 <MX_I2C1_Init+0x50>)
 80005b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80005ba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005bc:	4b0a      	ldr	r3, [pc, #40]	; (80005e8 <MX_I2C1_Init+0x50>)
 80005be:	2200      	movs	r2, #0
 80005c0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80005c2:	4b09      	ldr	r3, [pc, #36]	; (80005e8 <MX_I2C1_Init+0x50>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005c8:	4b07      	ldr	r3, [pc, #28]	; (80005e8 <MX_I2C1_Init+0x50>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005ce:	4b06      	ldr	r3, [pc, #24]	; (80005e8 <MX_I2C1_Init+0x50>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005d4:	4804      	ldr	r0, [pc, #16]	; (80005e8 <MX_I2C1_Init+0x50>)
 80005d6:	f000 fe3d 	bl	8001254 <HAL_I2C_Init>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80005e0:	f000 f860 	bl	80006a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005e4:	bf00      	nop
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	2000005c 	.word	0x2000005c
 80005ec:	40005400 	.word	0x40005400
 80005f0:	00061a80 	.word	0x00061a80

080005f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b088      	sub	sp, #32
 80005f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005fa:	f107 0310 	add.w	r3, r7, #16
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
 8000602:	605a      	str	r2, [r3, #4]
 8000604:	609a      	str	r2, [r3, #8]
 8000606:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000608:	4b24      	ldr	r3, [pc, #144]	; (800069c <MX_GPIO_Init+0xa8>)
 800060a:	699b      	ldr	r3, [r3, #24]
 800060c:	4a23      	ldr	r2, [pc, #140]	; (800069c <MX_GPIO_Init+0xa8>)
 800060e:	f043 0310 	orr.w	r3, r3, #16
 8000612:	6193      	str	r3, [r2, #24]
 8000614:	4b21      	ldr	r3, [pc, #132]	; (800069c <MX_GPIO_Init+0xa8>)
 8000616:	699b      	ldr	r3, [r3, #24]
 8000618:	f003 0310 	and.w	r3, r3, #16
 800061c:	60fb      	str	r3, [r7, #12]
 800061e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000620:	4b1e      	ldr	r3, [pc, #120]	; (800069c <MX_GPIO_Init+0xa8>)
 8000622:	699b      	ldr	r3, [r3, #24]
 8000624:	4a1d      	ldr	r2, [pc, #116]	; (800069c <MX_GPIO_Init+0xa8>)
 8000626:	f043 0320 	orr.w	r3, r3, #32
 800062a:	6193      	str	r3, [r2, #24]
 800062c:	4b1b      	ldr	r3, [pc, #108]	; (800069c <MX_GPIO_Init+0xa8>)
 800062e:	699b      	ldr	r3, [r3, #24]
 8000630:	f003 0320 	and.w	r3, r3, #32
 8000634:	60bb      	str	r3, [r7, #8]
 8000636:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000638:	4b18      	ldr	r3, [pc, #96]	; (800069c <MX_GPIO_Init+0xa8>)
 800063a:	699b      	ldr	r3, [r3, #24]
 800063c:	4a17      	ldr	r2, [pc, #92]	; (800069c <MX_GPIO_Init+0xa8>)
 800063e:	f043 0304 	orr.w	r3, r3, #4
 8000642:	6193      	str	r3, [r2, #24]
 8000644:	4b15      	ldr	r3, [pc, #84]	; (800069c <MX_GPIO_Init+0xa8>)
 8000646:	699b      	ldr	r3, [r3, #24]
 8000648:	f003 0304 	and.w	r3, r3, #4
 800064c:	607b      	str	r3, [r7, #4]
 800064e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000650:	4b12      	ldr	r3, [pc, #72]	; (800069c <MX_GPIO_Init+0xa8>)
 8000652:	699b      	ldr	r3, [r3, #24]
 8000654:	4a11      	ldr	r2, [pc, #68]	; (800069c <MX_GPIO_Init+0xa8>)
 8000656:	f043 0308 	orr.w	r3, r3, #8
 800065a:	6193      	str	r3, [r2, #24]
 800065c:	4b0f      	ldr	r3, [pc, #60]	; (800069c <MX_GPIO_Init+0xa8>)
 800065e:	699b      	ldr	r3, [r3, #24]
 8000660:	f003 0308 	and.w	r3, r3, #8
 8000664:	603b      	str	r3, [r7, #0]
 8000666:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000668:	2200      	movs	r2, #0
 800066a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800066e:	480c      	ldr	r0, [pc, #48]	; (80006a0 <MX_GPIO_Init+0xac>)
 8000670:	f000 fdd8 	bl	8001224 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000674:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000678:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800067a:	2301      	movs	r3, #1
 800067c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067e:	2300      	movs	r3, #0
 8000680:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000682:	2302      	movs	r3, #2
 8000684:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000686:	f107 0310 	add.w	r3, r7, #16
 800068a:	4619      	mov	r1, r3
 800068c:	4804      	ldr	r0, [pc, #16]	; (80006a0 <MX_GPIO_Init+0xac>)
 800068e:	f000 fc45 	bl	8000f1c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000692:	bf00      	nop
 8000694:	3720      	adds	r7, #32
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	40021000 	.word	0x40021000
 80006a0:	40011000 	.word	0x40011000

080006a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006a8:	b672      	cpsid	i
}
 80006aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006ac:	e7fe      	b.n	80006ac <Error_Handler+0x8>

080006ae <MPU6050_ReadWhoAmI>:
#include "mpu6050.h"

status_t MPU6050_ReadWhoAmI(I2C_HandleTypeDef *hi2c, MPU6050_t *mpu, uint8_t is_high_addr, uint8_t *buffer)
{
 80006ae:	b580      	push	{r7, lr}
 80006b0:	b088      	sub	sp, #32
 80006b2:	af04      	add	r7, sp, #16
 80006b4:	60f8      	str	r0, [r7, #12]
 80006b6:	60b9      	str	r1, [r7, #8]
 80006b8:	603b      	str	r3, [r7, #0]
 80006ba:	4613      	mov	r3, r2
 80006bc:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Read(hi2c, mpu->address, (uint8_t)MPU6050_REG_WHO_AM_I, 1, buffer, 1, MPU6050_DEFAULT_TIMEOUT);
 80006be:	68bb      	ldr	r3, [r7, #8]
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	b299      	uxth	r1, r3
 80006c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006c8:	9302      	str	r3, [sp, #8]
 80006ca:	2301      	movs	r3, #1
 80006cc:	9301      	str	r3, [sp, #4]
 80006ce:	683b      	ldr	r3, [r7, #0]
 80006d0:	9300      	str	r3, [sp, #0]
 80006d2:	2301      	movs	r3, #1
 80006d4:	2275      	movs	r2, #117	; 0x75
 80006d6:	68f8      	ldr	r0, [r7, #12]
 80006d8:	f000 fffa 	bl	80016d0 <HAL_I2C_Mem_Read>
    return STATUS_OK;
 80006dc:	2300      	movs	r3, #0
}
 80006de:	4618      	mov	r0, r3
 80006e0:	3710      	adds	r7, #16
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}

080006e6 <MPU6050_Init>:

status_t MPU6050_Init(I2C_HandleTypeDef *hi2c, MPU6050_t* mpu, MPU6050_Handle_t handle , uint8_t is_high_addr)
{
 80006e6:	b580      	push	{r7, lr}
 80006e8:	b08a      	sub	sp, #40	; 0x28
 80006ea:	af04      	add	r7, sp, #16
 80006ec:	60f8      	str	r0, [r7, #12]
 80006ee:	60b9      	str	r1, [r7, #8]
 80006f0:	607a      	str	r2, [r7, #4]
 80006f2:	70fb      	strb	r3, [r7, #3]
    uint8_t tmp_byte;
    uint8_t check_buffer;

    MPU6050_ReadWhoAmI(hi2c, mpu, is_high_addr, &check_buffer);
 80006f4:	f107 0316 	add.w	r3, r7, #22
 80006f8:	78fa      	ldrb	r2, [r7, #3]
 80006fa:	68b9      	ldr	r1, [r7, #8]
 80006fc:	68f8      	ldr	r0, [r7, #12]
 80006fe:	f7ff ffd6 	bl	80006ae <MPU6050_ReadWhoAmI>

    /* Check WHO_AM_I value */
    if (check_buffer == (0x68 << is_high_addr))
 8000702:	7dbb      	ldrb	r3, [r7, #22]
 8000704:	4619      	mov	r1, r3
 8000706:	78fb      	ldrb	r3, [r7, #3]
 8000708:	2268      	movs	r2, #104	; 0x68
 800070a:	fa02 f303 	lsl.w	r3, r2, r3
 800070e:	4299      	cmp	r1, r3
 8000710:	d125      	bne.n	800075e <MPU6050_Init+0x78>
    {
        // TODO: Implement intialization process

        /* Wake-up routine */
        tmp_byte = 0x00;
 8000712:	2300      	movs	r3, #0
 8000714:	75fb      	strb	r3, [r7, #23]
        HAL_I2C_Mem_Write(hi2c, mpu->address, (uint8_t)MPU6050_REG_PWR_MGMT_1, 1, &tmp_byte, 1, MPU6050_DEFAULT_TIMEOUT);
 8000716:	68bb      	ldr	r3, [r7, #8]
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	b299      	uxth	r1, r3
 800071c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000720:	9302      	str	r3, [sp, #8]
 8000722:	2301      	movs	r3, #1
 8000724:	9301      	str	r3, [sp, #4]
 8000726:	f107 0317 	add.w	r3, r7, #23
 800072a:	9300      	str	r3, [sp, #0]
 800072c:	2301      	movs	r3, #1
 800072e:	226b      	movs	r2, #107	; 0x6b
 8000730:	68f8      	ldr	r0, [r7, #12]
 8000732:	f000 fed3 	bl	80014dc <HAL_I2C_Mem_Write>

        /* Set the sample rate */
        MPU6050_SetSampleRate(hi2c, mpu, handle.rate_div);
 8000736:	793b      	ldrb	r3, [r7, #4]
 8000738:	461a      	mov	r2, r3
 800073a:	68b9      	ldr	r1, [r7, #8]
 800073c:	68f8      	ldr	r0, [r7, #12]
 800073e:	f000 f814 	bl	800076a <MPU6050_SetSampleRate>
        /* Set the gyroscope range */
        MPU6050_SetGyroscope(hi2c, mpu, handle.gyro_range);
 8000742:	797b      	ldrb	r3, [r7, #5]
 8000744:	461a      	mov	r2, r3
 8000746:	68b9      	ldr	r1, [r7, #8]
 8000748:	68f8      	ldr	r0, [r7, #12]
 800074a:	f000 f82d 	bl	80007a8 <MPU6050_SetGyroscope>
        /* Set the accelerometer range */
        MPU6050_SetAccelerometer(hi2c, mpu, handle.accel_range); 
 800074e:	79bb      	ldrb	r3, [r7, #6]
 8000750:	461a      	mov	r2, r3
 8000752:	68b9      	ldr	r1, [r7, #8]
 8000754:	68f8      	ldr	r0, [r7, #12]
 8000756:	f000 f885 	bl	8000864 <MPU6050_SetAccelerometer>

        return STATUS_OK;
 800075a:	2300      	movs	r3, #0
 800075c:	e001      	b.n	8000762 <MPU6050_Init+0x7c>
    }
    
    return STATUS_FAIL;
 800075e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000762:	4618      	mov	r0, r3
 8000764:	3718      	adds	r7, #24
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}

0800076a <MPU6050_SetSampleRate>:

status_t MPU6050_SetSampleRate(I2C_HandleTypeDef *hi2c, MPU6050_t* mpu, MPU6050_SampleRateDiv_t rate_div)
{
 800076a:	b580      	push	{r7, lr}
 800076c:	b08a      	sub	sp, #40	; 0x28
 800076e:	af04      	add	r7, sp, #16
 8000770:	60f8      	str	r0, [r7, #12]
 8000772:	60b9      	str	r1, [r7, #8]
 8000774:	4613      	mov	r3, r2
 8000776:	71fb      	strb	r3, [r7, #7]
    uint8_t tmp_byte = (uint8_t)rate_div;
 8000778:	79fb      	ldrb	r3, [r7, #7]
 800077a:	75fb      	strb	r3, [r7, #23]

    // Write the SMPRT_DIV setting to the register
    HAL_I2C_Mem_Write(hi2c, mpu->address, (uint8_t)MPU6050_REG_SMPRT_DIV, 1, &tmp_byte, 1, MPU6050_DEFAULT_TIMEOUT);
 800077c:	68bb      	ldr	r3, [r7, #8]
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	b299      	uxth	r1, r3
 8000782:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000786:	9302      	str	r3, [sp, #8]
 8000788:	2301      	movs	r3, #1
 800078a:	9301      	str	r3, [sp, #4]
 800078c:	f107 0317 	add.w	r3, r7, #23
 8000790:	9300      	str	r3, [sp, #0]
 8000792:	2301      	movs	r3, #1
 8000794:	2219      	movs	r2, #25
 8000796:	68f8      	ldr	r0, [r7, #12]
 8000798:	f000 fea0 	bl	80014dc <HAL_I2C_Mem_Write>

    return STATUS_OK;
 800079c:	2300      	movs	r3, #0
}
 800079e:	4618      	mov	r0, r3
 80007a0:	3718      	adds	r7, #24
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
	...

080007a8 <MPU6050_SetGyroscope>:

status_t MPU6050_SetGyroscope(I2C_HandleTypeDef *hi2c, MPU6050_t *mpu, MPU6050_GyroscopeRange_t gyro_range)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b08a      	sub	sp, #40	; 0x28
 80007ac:	af04      	add	r7, sp, #16
 80007ae:	60f8      	str	r0, [r7, #12]
 80007b0:	60b9      	str	r1, [r7, #8]
 80007b2:	4613      	mov	r3, r2
 80007b4:	71fb      	strb	r3, [r7, #7]
    uint8_t tmp_byte;

    // Read the current register value
    HAL_I2C_Mem_Read(hi2c, mpu->address, (uint8_t)MPU6050_REG_GYRO_CONFIG, 1, &tmp_byte, 1, MPU6050_DEFAULT_TIMEOUT);
 80007b6:	68bb      	ldr	r3, [r7, #8]
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	b299      	uxth	r1, r3
 80007bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007c0:	9302      	str	r3, [sp, #8]
 80007c2:	2301      	movs	r3, #1
 80007c4:	9301      	str	r3, [sp, #4]
 80007c6:	f107 0317 	add.w	r3, r7, #23
 80007ca:	9300      	str	r3, [sp, #0]
 80007cc:	2301      	movs	r3, #1
 80007ce:	221b      	movs	r2, #27
 80007d0:	68f8      	ldr	r0, [r7, #12]
 80007d2:	f000 ff7d 	bl	80016d0 <HAL_I2C_Mem_Read>

    // Bit-masking 
    tmp_byte &= !(0x03 << 3);
 80007d6:	2300      	movs	r3, #0
 80007d8:	75fb      	strb	r3, [r7, #23]
    tmp_byte |=  (uint8_t)gyro_range << 3;
 80007da:	79fb      	ldrb	r3, [r7, #7]
 80007dc:	00db      	lsls	r3, r3, #3
 80007de:	b25a      	sxtb	r2, r3
 80007e0:	7dfb      	ldrb	r3, [r7, #23]
 80007e2:	b25b      	sxtb	r3, r3
 80007e4:	4313      	orrs	r3, r2
 80007e6:	b25b      	sxtb	r3, r3
 80007e8:	b2db      	uxtb	r3, r3
 80007ea:	75fb      	strb	r3, [r7, #23]

    // Write the FS_SEL setting to the register
    HAL_I2C_Mem_Write(hi2c, mpu->address, (uint8_t)MPU6050_REG_GYRO_CONFIG, 1, &tmp_byte, 1, MPU6050_DEFAULT_TIMEOUT);
 80007ec:	68bb      	ldr	r3, [r7, #8]
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	b299      	uxth	r1, r3
 80007f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007f6:	9302      	str	r3, [sp, #8]
 80007f8:	2301      	movs	r3, #1
 80007fa:	9301      	str	r3, [sp, #4]
 80007fc:	f107 0317 	add.w	r3, r7, #23
 8000800:	9300      	str	r3, [sp, #0]
 8000802:	2301      	movs	r3, #1
 8000804:	221b      	movs	r2, #27
 8000806:	68f8      	ldr	r0, [r7, #12]
 8000808:	f000 fe68 	bl	80014dc <HAL_I2C_Mem_Write>

    // Set the scaling factor for true data
    switch (gyro_range)
 800080c:	79fb      	ldrb	r3, [r7, #7]
 800080e:	2b03      	cmp	r3, #3
 8000810:	d81a      	bhi.n	8000848 <MPU6050_SetGyroscope+0xa0>
 8000812:	a201      	add	r2, pc, #4	; (adr r2, 8000818 <MPU6050_SetGyroscope+0x70>)
 8000814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000818:	08000829 	.word	0x08000829
 800081c:	08000831 	.word	0x08000831
 8000820:	08000839 	.word	0x08000839
 8000824:	08000841 	.word	0x08000841
    {
    case Gyro_Range_250s:
        mpu->gyro_scaling_factor = 1 / 131.0f;
 8000828:	68bb      	ldr	r3, [r7, #8]
 800082a:	4a0a      	ldr	r2, [pc, #40]	; (8000854 <MPU6050_SetGyroscope+0xac>)
 800082c:	605a      	str	r2, [r3, #4]
        break;
 800082e:	e00c      	b.n	800084a <MPU6050_SetGyroscope+0xa2>
    case Gyro_Range_500s:
        mpu->gyro_scaling_factor = 1 / 65.5f;
 8000830:	68bb      	ldr	r3, [r7, #8]
 8000832:	4a09      	ldr	r2, [pc, #36]	; (8000858 <MPU6050_SetGyroscope+0xb0>)
 8000834:	605a      	str	r2, [r3, #4]
        break;
 8000836:	e008      	b.n	800084a <MPU6050_SetGyroscope+0xa2>
    case Gyro_Range_1000s:
        mpu->gyro_scaling_factor = 1 / 32.8f;
 8000838:	68bb      	ldr	r3, [r7, #8]
 800083a:	4a08      	ldr	r2, [pc, #32]	; (800085c <MPU6050_SetGyroscope+0xb4>)
 800083c:	605a      	str	r2, [r3, #4]
        break;
 800083e:	e004      	b.n	800084a <MPU6050_SetGyroscope+0xa2>
    case Gyro_Range_2000s:
        mpu->gyro_scaling_factor = 1 / 16.4f;
 8000840:	68bb      	ldr	r3, [r7, #8]
 8000842:	4a07      	ldr	r2, [pc, #28]	; (8000860 <MPU6050_SetGyroscope+0xb8>)
 8000844:	605a      	str	r2, [r3, #4]
        break;
 8000846:	e000      	b.n	800084a <MPU6050_SetGyroscope+0xa2>
    default:
        break;
 8000848:	bf00      	nop
    }

    return STATUS_OK;
 800084a:	2300      	movs	r3, #0
}
 800084c:	4618      	mov	r0, r3
 800084e:	3718      	adds	r7, #24
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	3bfa232d 	.word	0x3bfa232d
 8000858:	3c7a232d 	.word	0x3c7a232d
 800085c:	3cf9c190 	.word	0x3cf9c190
 8000860:	3d79c190 	.word	0x3d79c190

08000864 <MPU6050_SetAccelerometer>:

status_t MPU6050_SetAccelerometer(I2C_HandleTypeDef *hi2c, MPU6050_t *mpu, MPU6050_AccelerometerRange_t accel_range)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b08a      	sub	sp, #40	; 0x28
 8000868:	af04      	add	r7, sp, #16
 800086a:	60f8      	str	r0, [r7, #12]
 800086c:	60b9      	str	r1, [r7, #8]
 800086e:	4613      	mov	r3, r2
 8000870:	71fb      	strb	r3, [r7, #7]
    uint8_t tmp_byte;

    // Read the current register value
    HAL_I2C_Mem_Read(hi2c, mpu->address, (uint8_t)MPU6050_REG_ACCEL_CONFIG, 1, &tmp_byte, 1, MPU6050_DEFAULT_TIMEOUT);
 8000872:	68bb      	ldr	r3, [r7, #8]
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	b299      	uxth	r1, r3
 8000878:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800087c:	9302      	str	r3, [sp, #8]
 800087e:	2301      	movs	r3, #1
 8000880:	9301      	str	r3, [sp, #4]
 8000882:	f107 0317 	add.w	r3, r7, #23
 8000886:	9300      	str	r3, [sp, #0]
 8000888:	2301      	movs	r3, #1
 800088a:	221c      	movs	r2, #28
 800088c:	68f8      	ldr	r0, [r7, #12]
 800088e:	f000 ff1f 	bl	80016d0 <HAL_I2C_Mem_Read>

    // Bit-masking 
    tmp_byte &= !(0x03 << 3);
 8000892:	2300      	movs	r3, #0
 8000894:	75fb      	strb	r3, [r7, #23]
    tmp_byte |=  (uint8_t)accel_range << 3;
 8000896:	79fb      	ldrb	r3, [r7, #7]
 8000898:	00db      	lsls	r3, r3, #3
 800089a:	b25a      	sxtb	r2, r3
 800089c:	7dfb      	ldrb	r3, [r7, #23]
 800089e:	b25b      	sxtb	r3, r3
 80008a0:	4313      	orrs	r3, r2
 80008a2:	b25b      	sxtb	r3, r3
 80008a4:	b2db      	uxtb	r3, r3
 80008a6:	75fb      	strb	r3, [r7, #23]

    // Write the FS_SEL setting to the register
    HAL_I2C_Mem_Write(hi2c, mpu->address, (uint8_t)MPU6050_REG_ACCEL_CONFIG, 1, &tmp_byte, 1, MPU6050_DEFAULT_TIMEOUT);
 80008a8:	68bb      	ldr	r3, [r7, #8]
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	b299      	uxth	r1, r3
 80008ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008b2:	9302      	str	r3, [sp, #8]
 80008b4:	2301      	movs	r3, #1
 80008b6:	9301      	str	r3, [sp, #4]
 80008b8:	f107 0317 	add.w	r3, r7, #23
 80008bc:	9300      	str	r3, [sp, #0]
 80008be:	2301      	movs	r3, #1
 80008c0:	221c      	movs	r2, #28
 80008c2:	68f8      	ldr	r0, [r7, #12]
 80008c4:	f000 fe0a 	bl	80014dc <HAL_I2C_Mem_Write>

    // Set the scaling factor for true data
    switch (accel_range)
 80008c8:	79fb      	ldrb	r3, [r7, #7]
 80008ca:	2b03      	cmp	r3, #3
 80008cc:	d81a      	bhi.n	8000904 <MPU6050_SetAccelerometer+0xa0>
 80008ce:	a201      	add	r2, pc, #4	; (adr r2, 80008d4 <MPU6050_SetAccelerometer+0x70>)
 80008d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008d4:	080008e5 	.word	0x080008e5
 80008d8:	080008ed 	.word	0x080008ed
 80008dc:	080008f5 	.word	0x080008f5
 80008e0:	080008fd 	.word	0x080008fd
    {
    case Accel_Range_2g:
        mpu->accel_scaling_factor = G / 16384.0;
 80008e4:	68bb      	ldr	r3, [r7, #8]
 80008e6:	4a0a      	ldr	r2, [pc, #40]	; (8000910 <MPU6050_SetAccelerometer+0xac>)
 80008e8:	609a      	str	r2, [r3, #8]
        break;
 80008ea:	e00c      	b.n	8000906 <MPU6050_SetAccelerometer+0xa2>
    case Accel_Range_4g:
        mpu->accel_scaling_factor = G / 8192.0;
 80008ec:	68bb      	ldr	r3, [r7, #8]
 80008ee:	4a09      	ldr	r2, [pc, #36]	; (8000914 <MPU6050_SetAccelerometer+0xb0>)
 80008f0:	609a      	str	r2, [r3, #8]
        break;
 80008f2:	e008      	b.n	8000906 <MPU6050_SetAccelerometer+0xa2>
    case Accel_Range_8g:
        mpu->accel_scaling_factor = G / 4096.0;
 80008f4:	68bb      	ldr	r3, [r7, #8]
 80008f6:	4a08      	ldr	r2, [pc, #32]	; (8000918 <MPU6050_SetAccelerometer+0xb4>)
 80008f8:	609a      	str	r2, [r3, #8]
        break;
 80008fa:	e004      	b.n	8000906 <MPU6050_SetAccelerometer+0xa2>
    case Accel_Range_16g:
        mpu->accel_scaling_factor = G / 2048.0;
 80008fc:	68bb      	ldr	r3, [r7, #8]
 80008fe:	4a07      	ldr	r2, [pc, #28]	; (800091c <MPU6050_SetAccelerometer+0xb8>)
 8000900:	609a      	str	r2, [r3, #8]
        break;
 8000902:	e000      	b.n	8000906 <MPU6050_SetAccelerometer+0xa2>
    default:
        break;
 8000904:	bf00      	nop
    }

    return STATUS_OK;
 8000906:	2300      	movs	r3, #0
}
 8000908:	4618      	mov	r0, r3
 800090a:	3718      	adds	r7, #24
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	3a1cf5c3 	.word	0x3a1cf5c3
 8000914:	3a9cf5c3 	.word	0x3a9cf5c3
 8000918:	3b1cf5c3 	.word	0x3b1cf5c3
 800091c:	3b9cf5c3 	.word	0x3b9cf5c3

08000920 <MPU6050_ReadGyroscope>:

status_t MPU6050_ReadGyroscope(I2C_HandleTypeDef *hi2c, MPU6050_t *mpu)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b088      	sub	sp, #32
 8000924:	af04      	add	r7, sp, #16
 8000926:	6078      	str	r0, [r7, #4]
 8000928:	6039      	str	r1, [r7, #0]
    uint8_t data[6];

    // Read 6 bytes of RAW data starting from ACCEL_XOUT_H register.
    HAL_I2C_Mem_Read(hi2c, mpu->address, MPU6050_REG_GYRO_XOUT_H, 1, data, 6, MPU6050_DEFAULT_TIMEOUT);
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	b299      	uxth	r1, r3
 8000930:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000934:	9302      	str	r3, [sp, #8]
 8000936:	2306      	movs	r3, #6
 8000938:	9301      	str	r3, [sp, #4]
 800093a:	f107 0308 	add.w	r3, r7, #8
 800093e:	9300      	str	r3, [sp, #0]
 8000940:	2301      	movs	r3, #1
 8000942:	2243      	movs	r2, #67	; 0x43
 8000944:	6878      	ldr	r0, [r7, #4]
 8000946:	f000 fec3 	bl	80016d0 <HAL_I2C_Mem_Read>

    mpu->gyro_raw.x_axis = (int16_t)(data[0] << 8 | data[1]);
 800094a:	7a3b      	ldrb	r3, [r7, #8]
 800094c:	021b      	lsls	r3, r3, #8
 800094e:	b21a      	sxth	r2, r3
 8000950:	7a7b      	ldrb	r3, [r7, #9]
 8000952:	b21b      	sxth	r3, r3
 8000954:	4313      	orrs	r3, r2
 8000956:	b21a      	sxth	r2, r3
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	819a      	strh	r2, [r3, #12]
    mpu->gyro_raw.y_axis = (int16_t)(data[2] << 8 | data[3]);
 800095c:	7abb      	ldrb	r3, [r7, #10]
 800095e:	021b      	lsls	r3, r3, #8
 8000960:	b21a      	sxth	r2, r3
 8000962:	7afb      	ldrb	r3, [r7, #11]
 8000964:	b21b      	sxth	r3, r3
 8000966:	4313      	orrs	r3, r2
 8000968:	b21a      	sxth	r2, r3
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	81da      	strh	r2, [r3, #14]
    mpu->gyro_raw.z_axis = (int16_t)(data[4] << 8 | data[5]);
 800096e:	7b3b      	ldrb	r3, [r7, #12]
 8000970:	021b      	lsls	r3, r3, #8
 8000972:	b21a      	sxth	r2, r3
 8000974:	7b7b      	ldrb	r3, [r7, #13]
 8000976:	b21b      	sxth	r3, r3
 8000978:	4313      	orrs	r3, r2
 800097a:	b21a      	sxth	r2, r3
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	821a      	strh	r2, [r3, #16]

    // Convert the RAW data into angular acceleration in 'deg/s'
    mpu->gyro_scaled.x_axis = mpu->gyro_raw.x_axis * mpu->gyro_scaling_factor;
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000986:	4618      	mov	r0, r3
 8000988:	f7ff fd4e 	bl	8000428 <__aeabi_i2f>
 800098c:	4602      	mov	r2, r0
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	685b      	ldr	r3, [r3, #4]
 8000992:	4619      	mov	r1, r3
 8000994:	4610      	mov	r0, r2
 8000996:	f7ff fbd9 	bl	800014c <__aeabi_fmul>
 800099a:	4603      	mov	r3, r0
 800099c:	461a      	mov	r2, r3
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	61da      	str	r2, [r3, #28]
    mpu->gyro_scaled.y_axis = mpu->gyro_raw.y_axis * mpu->gyro_scaling_factor;
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80009a8:	4618      	mov	r0, r3
 80009aa:	f7ff fd3d 	bl	8000428 <__aeabi_i2f>
 80009ae:	4602      	mov	r2, r0
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	685b      	ldr	r3, [r3, #4]
 80009b4:	4619      	mov	r1, r3
 80009b6:	4610      	mov	r0, r2
 80009b8:	f7ff fbc8 	bl	800014c <__aeabi_fmul>
 80009bc:	4603      	mov	r3, r0
 80009be:	461a      	mov	r2, r3
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	621a      	str	r2, [r3, #32]
    mpu->gyro_scaled.z_axis = mpu->gyro_raw.z_axis * mpu->gyro_scaling_factor;
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80009ca:	4618      	mov	r0, r3
 80009cc:	f7ff fd2c 	bl	8000428 <__aeabi_i2f>
 80009d0:	4602      	mov	r2, r0
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	685b      	ldr	r3, [r3, #4]
 80009d6:	4619      	mov	r1, r3
 80009d8:	4610      	mov	r0, r2
 80009da:	f7ff fbb7 	bl	800014c <__aeabi_fmul>
 80009de:	4603      	mov	r3, r0
 80009e0:	461a      	mov	r2, r3
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	625a      	str	r2, [r3, #36]	; 0x24

    return STATUS_OK;
 80009e6:	2300      	movs	r3, #0
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	3710      	adds	r7, #16
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}

080009f0 <MPU6050_ReadAccelerometer>:

status_t MPU6050_ReadAccelerometer(I2C_HandleTypeDef *hi2c, MPU6050_t *mpu)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b088      	sub	sp, #32
 80009f4:	af04      	add	r7, sp, #16
 80009f6:	6078      	str	r0, [r7, #4]
 80009f8:	6039      	str	r1, [r7, #0]
    uint8_t data[6];

    // Read 6 bytes of RAW data starting from ACCEL_XOUT_H register.
    HAL_I2C_Mem_Read(hi2c, mpu->address, MPU6050_REG_ACCEL_XOUT_H, 1, data, 6, MPU6050_DEFAULT_TIMEOUT);
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	b299      	uxth	r1, r3
 8000a00:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a04:	9302      	str	r3, [sp, #8]
 8000a06:	2306      	movs	r3, #6
 8000a08:	9301      	str	r3, [sp, #4]
 8000a0a:	f107 0308 	add.w	r3, r7, #8
 8000a0e:	9300      	str	r3, [sp, #0]
 8000a10:	2301      	movs	r3, #1
 8000a12:	223b      	movs	r2, #59	; 0x3b
 8000a14:	6878      	ldr	r0, [r7, #4]
 8000a16:	f000 fe5b 	bl	80016d0 <HAL_I2C_Mem_Read>

    mpu->accel_raw.x_axis = (int16_t)(data[0] << 8 | data[1]);
 8000a1a:	7a3b      	ldrb	r3, [r7, #8]
 8000a1c:	021b      	lsls	r3, r3, #8
 8000a1e:	b21a      	sxth	r2, r3
 8000a20:	7a7b      	ldrb	r3, [r7, #9]
 8000a22:	b21b      	sxth	r3, r3
 8000a24:	4313      	orrs	r3, r2
 8000a26:	b21a      	sxth	r2, r3
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	825a      	strh	r2, [r3, #18]
    mpu->accel_raw.y_axis = (int16_t)(data[2] << 8 | data[3]);
 8000a2c:	7abb      	ldrb	r3, [r7, #10]
 8000a2e:	021b      	lsls	r3, r3, #8
 8000a30:	b21a      	sxth	r2, r3
 8000a32:	7afb      	ldrb	r3, [r7, #11]
 8000a34:	b21b      	sxth	r3, r3
 8000a36:	4313      	orrs	r3, r2
 8000a38:	b21a      	sxth	r2, r3
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	829a      	strh	r2, [r3, #20]
    mpu->accel_raw.z_axis = (int16_t)(data[4] << 8 | data[5]);
 8000a3e:	7b3b      	ldrb	r3, [r7, #12]
 8000a40:	021b      	lsls	r3, r3, #8
 8000a42:	b21a      	sxth	r2, r3
 8000a44:	7b7b      	ldrb	r3, [r7, #13]
 8000a46:	b21b      	sxth	r3, r3
 8000a48:	4313      	orrs	r3, r2
 8000a4a:	b21a      	sxth	r2, r3
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	82da      	strh	r2, [r3, #22]

    // Convert the RAW data into linear acceleration in 'm/s^2'
    mpu->accel_scaled.x_axis = mpu->accel_raw.x_axis * mpu->accel_scaling_factor;
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000a56:	4618      	mov	r0, r3
 8000a58:	f7ff fce6 	bl	8000428 <__aeabi_i2f>
 8000a5c:	4602      	mov	r2, r0
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	689b      	ldr	r3, [r3, #8]
 8000a62:	4619      	mov	r1, r3
 8000a64:	4610      	mov	r0, r2
 8000a66:	f7ff fb71 	bl	800014c <__aeabi_fmul>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	461a      	mov	r2, r3
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	629a      	str	r2, [r3, #40]	; 0x28
    mpu->accel_scaled.y_axis = mpu->accel_raw.y_axis * mpu->accel_scaling_factor;
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f7ff fcd5 	bl	8000428 <__aeabi_i2f>
 8000a7e:	4602      	mov	r2, r0
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	689b      	ldr	r3, [r3, #8]
 8000a84:	4619      	mov	r1, r3
 8000a86:	4610      	mov	r0, r2
 8000a88:	f7ff fb60 	bl	800014c <__aeabi_fmul>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	461a      	mov	r2, r3
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	62da      	str	r2, [r3, #44]	; 0x2c
    mpu->accel_scaled.z_axis = mpu->accel_raw.z_axis * mpu->accel_scaling_factor;
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f7ff fcc4 	bl	8000428 <__aeabi_i2f>
 8000aa0:	4602      	mov	r2, r0
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	689b      	ldr	r3, [r3, #8]
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4610      	mov	r0, r2
 8000aaa:	f7ff fb4f 	bl	800014c <__aeabi_fmul>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	461a      	mov	r2, r3
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	631a      	str	r2, [r3, #48]	; 0x30

    return STATUS_OK;
 8000ab6:	2300      	movs	r3, #0
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	3710      	adds	r7, #16
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}

08000ac0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b085      	sub	sp, #20
 8000ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ac6:	4b15      	ldr	r3, [pc, #84]	; (8000b1c <HAL_MspInit+0x5c>)
 8000ac8:	699b      	ldr	r3, [r3, #24]
 8000aca:	4a14      	ldr	r2, [pc, #80]	; (8000b1c <HAL_MspInit+0x5c>)
 8000acc:	f043 0301 	orr.w	r3, r3, #1
 8000ad0:	6193      	str	r3, [r2, #24]
 8000ad2:	4b12      	ldr	r3, [pc, #72]	; (8000b1c <HAL_MspInit+0x5c>)
 8000ad4:	699b      	ldr	r3, [r3, #24]
 8000ad6:	f003 0301 	and.w	r3, r3, #1
 8000ada:	60bb      	str	r3, [r7, #8]
 8000adc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ade:	4b0f      	ldr	r3, [pc, #60]	; (8000b1c <HAL_MspInit+0x5c>)
 8000ae0:	69db      	ldr	r3, [r3, #28]
 8000ae2:	4a0e      	ldr	r2, [pc, #56]	; (8000b1c <HAL_MspInit+0x5c>)
 8000ae4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ae8:	61d3      	str	r3, [r2, #28]
 8000aea:	4b0c      	ldr	r3, [pc, #48]	; (8000b1c <HAL_MspInit+0x5c>)
 8000aec:	69db      	ldr	r3, [r3, #28]
 8000aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000af2:	607b      	str	r3, [r7, #4]
 8000af4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000af6:	4b0a      	ldr	r3, [pc, #40]	; (8000b20 <HAL_MspInit+0x60>)
 8000af8:	685b      	ldr	r3, [r3, #4]
 8000afa:	60fb      	str	r3, [r7, #12]
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b0a:	60fb      	str	r3, [r7, #12]
 8000b0c:	4a04      	ldr	r2, [pc, #16]	; (8000b20 <HAL_MspInit+0x60>)
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b12:	bf00      	nop
 8000b14:	3714      	adds	r7, #20
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bc80      	pop	{r7}
 8000b1a:	4770      	bx	lr
 8000b1c:	40021000 	.word	0x40021000
 8000b20:	40010000 	.word	0x40010000

08000b24 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b088      	sub	sp, #32
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2c:	f107 0310 	add.w	r3, r7, #16
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
 8000b34:	605a      	str	r2, [r3, #4]
 8000b36:	609a      	str	r2, [r3, #8]
 8000b38:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4a15      	ldr	r2, [pc, #84]	; (8000b94 <HAL_I2C_MspInit+0x70>)
 8000b40:	4293      	cmp	r3, r2
 8000b42:	d123      	bne.n	8000b8c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b44:	4b14      	ldr	r3, [pc, #80]	; (8000b98 <HAL_I2C_MspInit+0x74>)
 8000b46:	699b      	ldr	r3, [r3, #24]
 8000b48:	4a13      	ldr	r2, [pc, #76]	; (8000b98 <HAL_I2C_MspInit+0x74>)
 8000b4a:	f043 0308 	orr.w	r3, r3, #8
 8000b4e:	6193      	str	r3, [r2, #24]
 8000b50:	4b11      	ldr	r3, [pc, #68]	; (8000b98 <HAL_I2C_MspInit+0x74>)
 8000b52:	699b      	ldr	r3, [r3, #24]
 8000b54:	f003 0308 	and.w	r3, r3, #8
 8000b58:	60fb      	str	r3, [r7, #12]
 8000b5a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b5c:	23c0      	movs	r3, #192	; 0xc0
 8000b5e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b60:	2312      	movs	r3, #18
 8000b62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b64:	2303      	movs	r3, #3
 8000b66:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b68:	f107 0310 	add.w	r3, r7, #16
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	480b      	ldr	r0, [pc, #44]	; (8000b9c <HAL_I2C_MspInit+0x78>)
 8000b70:	f000 f9d4 	bl	8000f1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b74:	4b08      	ldr	r3, [pc, #32]	; (8000b98 <HAL_I2C_MspInit+0x74>)
 8000b76:	69db      	ldr	r3, [r3, #28]
 8000b78:	4a07      	ldr	r2, [pc, #28]	; (8000b98 <HAL_I2C_MspInit+0x74>)
 8000b7a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b7e:	61d3      	str	r3, [r2, #28]
 8000b80:	4b05      	ldr	r3, [pc, #20]	; (8000b98 <HAL_I2C_MspInit+0x74>)
 8000b82:	69db      	ldr	r3, [r3, #28]
 8000b84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b88:	60bb      	str	r3, [r7, #8]
 8000b8a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b8c:	bf00      	nop
 8000b8e:	3720      	adds	r7, #32
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	40005400 	.word	0x40005400
 8000b98:	40021000 	.word	0x40021000
 8000b9c:	40010c00 	.word	0x40010c00

08000ba0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ba4:	e7fe      	b.n	8000ba4 <NMI_Handler+0x4>

08000ba6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000baa:	e7fe      	b.n	8000baa <HardFault_Handler+0x4>

08000bac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bb0:	e7fe      	b.n	8000bb0 <MemManage_Handler+0x4>

08000bb2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bb6:	e7fe      	b.n	8000bb6 <BusFault_Handler+0x4>

08000bb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bbc:	e7fe      	b.n	8000bbc <UsageFault_Handler+0x4>

08000bbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bc80      	pop	{r7}
 8000bc8:	4770      	bx	lr

08000bca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bc80      	pop	{r7}
 8000bd4:	4770      	bx	lr

08000bd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bc80      	pop	{r7}
 8000be0:	4770      	bx	lr

08000be2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000be2:	b580      	push	{r7, lr}
 8000be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000be6:	f000 f875 	bl	8000cd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}

08000bee <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bf2:	bf00      	nop
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bc80      	pop	{r7}
 8000bf8:	4770      	bx	lr
	...

08000bfc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bfc:	f7ff fff7 	bl	8000bee <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c00:	480b      	ldr	r0, [pc, #44]	; (8000c30 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000c02:	490c      	ldr	r1, [pc, #48]	; (8000c34 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000c04:	4a0c      	ldr	r2, [pc, #48]	; (8000c38 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000c06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c08:	e002      	b.n	8000c10 <LoopCopyDataInit>

08000c0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c0e:	3304      	adds	r3, #4

08000c10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c14:	d3f9      	bcc.n	8000c0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c16:	4a09      	ldr	r2, [pc, #36]	; (8000c3c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000c18:	4c09      	ldr	r4, [pc, #36]	; (8000c40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c1c:	e001      	b.n	8000c22 <LoopFillZerobss>

08000c1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c20:	3204      	adds	r2, #4

08000c22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c24:	d3fb      	bcc.n	8000c1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c26:	f001 ff73 	bl	8002b10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c2a:	f7ff fc51 	bl	80004d0 <main>
  bx lr
 8000c2e:	4770      	bx	lr
  ldr r0, =_sdata
 8000c30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c34:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 8000c38:	08002ba4 	.word	0x08002ba4
  ldr r2, =_sbss
 8000c3c:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 8000c40:	200000b4 	.word	0x200000b4

08000c44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c44:	e7fe      	b.n	8000c44 <ADC1_2_IRQHandler>
	...

08000c48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c4c:	4b08      	ldr	r3, [pc, #32]	; (8000c70 <HAL_Init+0x28>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a07      	ldr	r2, [pc, #28]	; (8000c70 <HAL_Init+0x28>)
 8000c52:	f043 0310 	orr.w	r3, r3, #16
 8000c56:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c58:	2003      	movs	r0, #3
 8000c5a:	f000 f92b 	bl	8000eb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c5e:	200f      	movs	r0, #15
 8000c60:	f000 f808 	bl	8000c74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c64:	f7ff ff2c 	bl	8000ac0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c68:	2300      	movs	r3, #0
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40022000 	.word	0x40022000

08000c74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c7c:	4b12      	ldr	r3, [pc, #72]	; (8000cc8 <HAL_InitTick+0x54>)
 8000c7e:	681a      	ldr	r2, [r3, #0]
 8000c80:	4b12      	ldr	r3, [pc, #72]	; (8000ccc <HAL_InitTick+0x58>)
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	4619      	mov	r1, r3
 8000c86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c92:	4618      	mov	r0, r3
 8000c94:	f000 f935 	bl	8000f02 <HAL_SYSTICK_Config>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	e00e      	b.n	8000cc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	2b0f      	cmp	r3, #15
 8000ca6:	d80a      	bhi.n	8000cbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	6879      	ldr	r1, [r7, #4]
 8000cac:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb0:	f000 f90b 	bl	8000eca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cb4:	4a06      	ldr	r2, [pc, #24]	; (8000cd0 <HAL_InitTick+0x5c>)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	e000      	b.n	8000cc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cbe:	2301      	movs	r3, #1
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3708      	adds	r7, #8
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	20000034 	.word	0x20000034
 8000ccc:	2000003c 	.word	0x2000003c
 8000cd0:	20000038 	.word	0x20000038

08000cd4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cd8:	4b05      	ldr	r3, [pc, #20]	; (8000cf0 <HAL_IncTick+0x1c>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	461a      	mov	r2, r3
 8000cde:	4b05      	ldr	r3, [pc, #20]	; (8000cf4 <HAL_IncTick+0x20>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4413      	add	r3, r2
 8000ce4:	4a03      	ldr	r2, [pc, #12]	; (8000cf4 <HAL_IncTick+0x20>)
 8000ce6:	6013      	str	r3, [r2, #0]
}
 8000ce8:	bf00      	nop
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bc80      	pop	{r7}
 8000cee:	4770      	bx	lr
 8000cf0:	2000003c 	.word	0x2000003c
 8000cf4:	200000b0 	.word	0x200000b0

08000cf8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  return uwTick;
 8000cfc:	4b02      	ldr	r3, [pc, #8]	; (8000d08 <HAL_GetTick+0x10>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bc80      	pop	{r7}
 8000d06:	4770      	bx	lr
 8000d08:	200000b0 	.word	0x200000b0

08000d0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d14:	f7ff fff0 	bl	8000cf8 <HAL_GetTick>
 8000d18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d24:	d005      	beq.n	8000d32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d26:	4b0a      	ldr	r3, [pc, #40]	; (8000d50 <HAL_Delay+0x44>)
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	4413      	add	r3, r2
 8000d30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d32:	bf00      	nop
 8000d34:	f7ff ffe0 	bl	8000cf8 <HAL_GetTick>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	68bb      	ldr	r3, [r7, #8]
 8000d3c:	1ad3      	subs	r3, r2, r3
 8000d3e:	68fa      	ldr	r2, [r7, #12]
 8000d40:	429a      	cmp	r2, r3
 8000d42:	d8f7      	bhi.n	8000d34 <HAL_Delay+0x28>
  {
  }
}
 8000d44:	bf00      	nop
 8000d46:	bf00      	nop
 8000d48:	3710      	adds	r7, #16
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	2000003c 	.word	0x2000003c

08000d54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b085      	sub	sp, #20
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	f003 0307 	and.w	r3, r3, #7
 8000d62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d64:	4b0c      	ldr	r3, [pc, #48]	; (8000d98 <__NVIC_SetPriorityGrouping+0x44>)
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d6a:	68ba      	ldr	r2, [r7, #8]
 8000d6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d70:	4013      	ands	r3, r2
 8000d72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d86:	4a04      	ldr	r2, [pc, #16]	; (8000d98 <__NVIC_SetPriorityGrouping+0x44>)
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	60d3      	str	r3, [r2, #12]
}
 8000d8c:	bf00      	nop
 8000d8e:	3714      	adds	r7, #20
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bc80      	pop	{r7}
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	e000ed00 	.word	0xe000ed00

08000d9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000da0:	4b04      	ldr	r3, [pc, #16]	; (8000db4 <__NVIC_GetPriorityGrouping+0x18>)
 8000da2:	68db      	ldr	r3, [r3, #12]
 8000da4:	0a1b      	lsrs	r3, r3, #8
 8000da6:	f003 0307 	and.w	r3, r3, #7
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bc80      	pop	{r7}
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	e000ed00 	.word	0xe000ed00

08000db8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	6039      	str	r1, [r7, #0]
 8000dc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	db0a      	blt.n	8000de2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	b2da      	uxtb	r2, r3
 8000dd0:	490c      	ldr	r1, [pc, #48]	; (8000e04 <__NVIC_SetPriority+0x4c>)
 8000dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd6:	0112      	lsls	r2, r2, #4
 8000dd8:	b2d2      	uxtb	r2, r2
 8000dda:	440b      	add	r3, r1
 8000ddc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000de0:	e00a      	b.n	8000df8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	b2da      	uxtb	r2, r3
 8000de6:	4908      	ldr	r1, [pc, #32]	; (8000e08 <__NVIC_SetPriority+0x50>)
 8000de8:	79fb      	ldrb	r3, [r7, #7]
 8000dea:	f003 030f 	and.w	r3, r3, #15
 8000dee:	3b04      	subs	r3, #4
 8000df0:	0112      	lsls	r2, r2, #4
 8000df2:	b2d2      	uxtb	r2, r2
 8000df4:	440b      	add	r3, r1
 8000df6:	761a      	strb	r2, [r3, #24]
}
 8000df8:	bf00      	nop
 8000dfa:	370c      	adds	r7, #12
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bc80      	pop	{r7}
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	e000e100 	.word	0xe000e100
 8000e08:	e000ed00 	.word	0xe000ed00

08000e0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b089      	sub	sp, #36	; 0x24
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	60f8      	str	r0, [r7, #12]
 8000e14:	60b9      	str	r1, [r7, #8]
 8000e16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	f003 0307 	and.w	r3, r3, #7
 8000e1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e20:	69fb      	ldr	r3, [r7, #28]
 8000e22:	f1c3 0307 	rsb	r3, r3, #7
 8000e26:	2b04      	cmp	r3, #4
 8000e28:	bf28      	it	cs
 8000e2a:	2304      	movcs	r3, #4
 8000e2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	3304      	adds	r3, #4
 8000e32:	2b06      	cmp	r3, #6
 8000e34:	d902      	bls.n	8000e3c <NVIC_EncodePriority+0x30>
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	3b03      	subs	r3, #3
 8000e3a:	e000      	b.n	8000e3e <NVIC_EncodePriority+0x32>
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e40:	f04f 32ff 	mov.w	r2, #4294967295
 8000e44:	69bb      	ldr	r3, [r7, #24]
 8000e46:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4a:	43da      	mvns	r2, r3
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	401a      	ands	r2, r3
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e54:	f04f 31ff 	mov.w	r1, #4294967295
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e5e:	43d9      	mvns	r1, r3
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e64:	4313      	orrs	r3, r2
         );
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3724      	adds	r7, #36	; 0x24
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bc80      	pop	{r7}
 8000e6e:	4770      	bx	lr

08000e70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	3b01      	subs	r3, #1
 8000e7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e80:	d301      	bcc.n	8000e86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e82:	2301      	movs	r3, #1
 8000e84:	e00f      	b.n	8000ea6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e86:	4a0a      	ldr	r2, [pc, #40]	; (8000eb0 <SysTick_Config+0x40>)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	3b01      	subs	r3, #1
 8000e8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e8e:	210f      	movs	r1, #15
 8000e90:	f04f 30ff 	mov.w	r0, #4294967295
 8000e94:	f7ff ff90 	bl	8000db8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e98:	4b05      	ldr	r3, [pc, #20]	; (8000eb0 <SysTick_Config+0x40>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e9e:	4b04      	ldr	r3, [pc, #16]	; (8000eb0 <SysTick_Config+0x40>)
 8000ea0:	2207      	movs	r2, #7
 8000ea2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ea4:	2300      	movs	r3, #0
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	e000e010 	.word	0xe000e010

08000eb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ebc:	6878      	ldr	r0, [r7, #4]
 8000ebe:	f7ff ff49 	bl	8000d54 <__NVIC_SetPriorityGrouping>
}
 8000ec2:	bf00      	nop
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	b086      	sub	sp, #24
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	60b9      	str	r1, [r7, #8]
 8000ed4:	607a      	str	r2, [r7, #4]
 8000ed6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000edc:	f7ff ff5e 	bl	8000d9c <__NVIC_GetPriorityGrouping>
 8000ee0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ee2:	687a      	ldr	r2, [r7, #4]
 8000ee4:	68b9      	ldr	r1, [r7, #8]
 8000ee6:	6978      	ldr	r0, [r7, #20]
 8000ee8:	f7ff ff90 	bl	8000e0c <NVIC_EncodePriority>
 8000eec:	4602      	mov	r2, r0
 8000eee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ef2:	4611      	mov	r1, r2
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f7ff ff5f 	bl	8000db8 <__NVIC_SetPriority>
}
 8000efa:	bf00      	nop
 8000efc:	3718      	adds	r7, #24
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b082      	sub	sp, #8
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f0a:	6878      	ldr	r0, [r7, #4]
 8000f0c:	f7ff ffb0 	bl	8000e70 <SysTick_Config>
 8000f10:	4603      	mov	r3, r0
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
	...

08000f1c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b08b      	sub	sp, #44	; 0x2c
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f26:	2300      	movs	r3, #0
 8000f28:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f2e:	e169      	b.n	8001204 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f30:	2201      	movs	r2, #1
 8000f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	69fa      	ldr	r2, [r7, #28]
 8000f40:	4013      	ands	r3, r2
 8000f42:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	f040 8158 	bne.w	80011fe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	4a9a      	ldr	r2, [pc, #616]	; (80011bc <HAL_GPIO_Init+0x2a0>)
 8000f54:	4293      	cmp	r3, r2
 8000f56:	d05e      	beq.n	8001016 <HAL_GPIO_Init+0xfa>
 8000f58:	4a98      	ldr	r2, [pc, #608]	; (80011bc <HAL_GPIO_Init+0x2a0>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d875      	bhi.n	800104a <HAL_GPIO_Init+0x12e>
 8000f5e:	4a98      	ldr	r2, [pc, #608]	; (80011c0 <HAL_GPIO_Init+0x2a4>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d058      	beq.n	8001016 <HAL_GPIO_Init+0xfa>
 8000f64:	4a96      	ldr	r2, [pc, #600]	; (80011c0 <HAL_GPIO_Init+0x2a4>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d86f      	bhi.n	800104a <HAL_GPIO_Init+0x12e>
 8000f6a:	4a96      	ldr	r2, [pc, #600]	; (80011c4 <HAL_GPIO_Init+0x2a8>)
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	d052      	beq.n	8001016 <HAL_GPIO_Init+0xfa>
 8000f70:	4a94      	ldr	r2, [pc, #592]	; (80011c4 <HAL_GPIO_Init+0x2a8>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d869      	bhi.n	800104a <HAL_GPIO_Init+0x12e>
 8000f76:	4a94      	ldr	r2, [pc, #592]	; (80011c8 <HAL_GPIO_Init+0x2ac>)
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	d04c      	beq.n	8001016 <HAL_GPIO_Init+0xfa>
 8000f7c:	4a92      	ldr	r2, [pc, #584]	; (80011c8 <HAL_GPIO_Init+0x2ac>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d863      	bhi.n	800104a <HAL_GPIO_Init+0x12e>
 8000f82:	4a92      	ldr	r2, [pc, #584]	; (80011cc <HAL_GPIO_Init+0x2b0>)
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d046      	beq.n	8001016 <HAL_GPIO_Init+0xfa>
 8000f88:	4a90      	ldr	r2, [pc, #576]	; (80011cc <HAL_GPIO_Init+0x2b0>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d85d      	bhi.n	800104a <HAL_GPIO_Init+0x12e>
 8000f8e:	2b12      	cmp	r3, #18
 8000f90:	d82a      	bhi.n	8000fe8 <HAL_GPIO_Init+0xcc>
 8000f92:	2b12      	cmp	r3, #18
 8000f94:	d859      	bhi.n	800104a <HAL_GPIO_Init+0x12e>
 8000f96:	a201      	add	r2, pc, #4	; (adr r2, 8000f9c <HAL_GPIO_Init+0x80>)
 8000f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f9c:	08001017 	.word	0x08001017
 8000fa0:	08000ff1 	.word	0x08000ff1
 8000fa4:	08001003 	.word	0x08001003
 8000fa8:	08001045 	.word	0x08001045
 8000fac:	0800104b 	.word	0x0800104b
 8000fb0:	0800104b 	.word	0x0800104b
 8000fb4:	0800104b 	.word	0x0800104b
 8000fb8:	0800104b 	.word	0x0800104b
 8000fbc:	0800104b 	.word	0x0800104b
 8000fc0:	0800104b 	.word	0x0800104b
 8000fc4:	0800104b 	.word	0x0800104b
 8000fc8:	0800104b 	.word	0x0800104b
 8000fcc:	0800104b 	.word	0x0800104b
 8000fd0:	0800104b 	.word	0x0800104b
 8000fd4:	0800104b 	.word	0x0800104b
 8000fd8:	0800104b 	.word	0x0800104b
 8000fdc:	0800104b 	.word	0x0800104b
 8000fe0:	08000ff9 	.word	0x08000ff9
 8000fe4:	0800100d 	.word	0x0800100d
 8000fe8:	4a79      	ldr	r2, [pc, #484]	; (80011d0 <HAL_GPIO_Init+0x2b4>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d013      	beq.n	8001016 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000fee:	e02c      	b.n	800104a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	623b      	str	r3, [r7, #32]
          break;
 8000ff6:	e029      	b.n	800104c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	3304      	adds	r3, #4
 8000ffe:	623b      	str	r3, [r7, #32]
          break;
 8001000:	e024      	b.n	800104c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	68db      	ldr	r3, [r3, #12]
 8001006:	3308      	adds	r3, #8
 8001008:	623b      	str	r3, [r7, #32]
          break;
 800100a:	e01f      	b.n	800104c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	330c      	adds	r3, #12
 8001012:	623b      	str	r3, [r7, #32]
          break;
 8001014:	e01a      	b.n	800104c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d102      	bne.n	8001024 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800101e:	2304      	movs	r3, #4
 8001020:	623b      	str	r3, [r7, #32]
          break;
 8001022:	e013      	b.n	800104c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	689b      	ldr	r3, [r3, #8]
 8001028:	2b01      	cmp	r3, #1
 800102a:	d105      	bne.n	8001038 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800102c:	2308      	movs	r3, #8
 800102e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	69fa      	ldr	r2, [r7, #28]
 8001034:	611a      	str	r2, [r3, #16]
          break;
 8001036:	e009      	b.n	800104c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001038:	2308      	movs	r3, #8
 800103a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	69fa      	ldr	r2, [r7, #28]
 8001040:	615a      	str	r2, [r3, #20]
          break;
 8001042:	e003      	b.n	800104c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001044:	2300      	movs	r3, #0
 8001046:	623b      	str	r3, [r7, #32]
          break;
 8001048:	e000      	b.n	800104c <HAL_GPIO_Init+0x130>
          break;
 800104a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800104c:	69bb      	ldr	r3, [r7, #24]
 800104e:	2bff      	cmp	r3, #255	; 0xff
 8001050:	d801      	bhi.n	8001056 <HAL_GPIO_Init+0x13a>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	e001      	b.n	800105a <HAL_GPIO_Init+0x13e>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	3304      	adds	r3, #4
 800105a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800105c:	69bb      	ldr	r3, [r7, #24]
 800105e:	2bff      	cmp	r3, #255	; 0xff
 8001060:	d802      	bhi.n	8001068 <HAL_GPIO_Init+0x14c>
 8001062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	e002      	b.n	800106e <HAL_GPIO_Init+0x152>
 8001068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800106a:	3b08      	subs	r3, #8
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	210f      	movs	r1, #15
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	fa01 f303 	lsl.w	r3, r1, r3
 800107c:	43db      	mvns	r3, r3
 800107e:	401a      	ands	r2, r3
 8001080:	6a39      	ldr	r1, [r7, #32]
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	fa01 f303 	lsl.w	r3, r1, r3
 8001088:	431a      	orrs	r2, r3
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001096:	2b00      	cmp	r3, #0
 8001098:	f000 80b1 	beq.w	80011fe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800109c:	4b4d      	ldr	r3, [pc, #308]	; (80011d4 <HAL_GPIO_Init+0x2b8>)
 800109e:	699b      	ldr	r3, [r3, #24]
 80010a0:	4a4c      	ldr	r2, [pc, #304]	; (80011d4 <HAL_GPIO_Init+0x2b8>)
 80010a2:	f043 0301 	orr.w	r3, r3, #1
 80010a6:	6193      	str	r3, [r2, #24]
 80010a8:	4b4a      	ldr	r3, [pc, #296]	; (80011d4 <HAL_GPIO_Init+0x2b8>)
 80010aa:	699b      	ldr	r3, [r3, #24]
 80010ac:	f003 0301 	and.w	r3, r3, #1
 80010b0:	60bb      	str	r3, [r7, #8]
 80010b2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80010b4:	4a48      	ldr	r2, [pc, #288]	; (80011d8 <HAL_GPIO_Init+0x2bc>)
 80010b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b8:	089b      	lsrs	r3, r3, #2
 80010ba:	3302      	adds	r3, #2
 80010bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010c0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80010c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c4:	f003 0303 	and.w	r3, r3, #3
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	220f      	movs	r2, #15
 80010cc:	fa02 f303 	lsl.w	r3, r2, r3
 80010d0:	43db      	mvns	r3, r3
 80010d2:	68fa      	ldr	r2, [r7, #12]
 80010d4:	4013      	ands	r3, r2
 80010d6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	4a40      	ldr	r2, [pc, #256]	; (80011dc <HAL_GPIO_Init+0x2c0>)
 80010dc:	4293      	cmp	r3, r2
 80010de:	d013      	beq.n	8001108 <HAL_GPIO_Init+0x1ec>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	4a3f      	ldr	r2, [pc, #252]	; (80011e0 <HAL_GPIO_Init+0x2c4>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d00d      	beq.n	8001104 <HAL_GPIO_Init+0x1e8>
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	4a3e      	ldr	r2, [pc, #248]	; (80011e4 <HAL_GPIO_Init+0x2c8>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d007      	beq.n	8001100 <HAL_GPIO_Init+0x1e4>
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	4a3d      	ldr	r2, [pc, #244]	; (80011e8 <HAL_GPIO_Init+0x2cc>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d101      	bne.n	80010fc <HAL_GPIO_Init+0x1e0>
 80010f8:	2303      	movs	r3, #3
 80010fa:	e006      	b.n	800110a <HAL_GPIO_Init+0x1ee>
 80010fc:	2304      	movs	r3, #4
 80010fe:	e004      	b.n	800110a <HAL_GPIO_Init+0x1ee>
 8001100:	2302      	movs	r3, #2
 8001102:	e002      	b.n	800110a <HAL_GPIO_Init+0x1ee>
 8001104:	2301      	movs	r3, #1
 8001106:	e000      	b.n	800110a <HAL_GPIO_Init+0x1ee>
 8001108:	2300      	movs	r3, #0
 800110a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800110c:	f002 0203 	and.w	r2, r2, #3
 8001110:	0092      	lsls	r2, r2, #2
 8001112:	4093      	lsls	r3, r2
 8001114:	68fa      	ldr	r2, [r7, #12]
 8001116:	4313      	orrs	r3, r2
 8001118:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800111a:	492f      	ldr	r1, [pc, #188]	; (80011d8 <HAL_GPIO_Init+0x2bc>)
 800111c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800111e:	089b      	lsrs	r3, r3, #2
 8001120:	3302      	adds	r3, #2
 8001122:	68fa      	ldr	r2, [r7, #12]
 8001124:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001130:	2b00      	cmp	r3, #0
 8001132:	d006      	beq.n	8001142 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001134:	4b2d      	ldr	r3, [pc, #180]	; (80011ec <HAL_GPIO_Init+0x2d0>)
 8001136:	689a      	ldr	r2, [r3, #8]
 8001138:	492c      	ldr	r1, [pc, #176]	; (80011ec <HAL_GPIO_Init+0x2d0>)
 800113a:	69bb      	ldr	r3, [r7, #24]
 800113c:	4313      	orrs	r3, r2
 800113e:	608b      	str	r3, [r1, #8]
 8001140:	e006      	b.n	8001150 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001142:	4b2a      	ldr	r3, [pc, #168]	; (80011ec <HAL_GPIO_Init+0x2d0>)
 8001144:	689a      	ldr	r2, [r3, #8]
 8001146:	69bb      	ldr	r3, [r7, #24]
 8001148:	43db      	mvns	r3, r3
 800114a:	4928      	ldr	r1, [pc, #160]	; (80011ec <HAL_GPIO_Init+0x2d0>)
 800114c:	4013      	ands	r3, r2
 800114e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001158:	2b00      	cmp	r3, #0
 800115a:	d006      	beq.n	800116a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800115c:	4b23      	ldr	r3, [pc, #140]	; (80011ec <HAL_GPIO_Init+0x2d0>)
 800115e:	68da      	ldr	r2, [r3, #12]
 8001160:	4922      	ldr	r1, [pc, #136]	; (80011ec <HAL_GPIO_Init+0x2d0>)
 8001162:	69bb      	ldr	r3, [r7, #24]
 8001164:	4313      	orrs	r3, r2
 8001166:	60cb      	str	r3, [r1, #12]
 8001168:	e006      	b.n	8001178 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800116a:	4b20      	ldr	r3, [pc, #128]	; (80011ec <HAL_GPIO_Init+0x2d0>)
 800116c:	68da      	ldr	r2, [r3, #12]
 800116e:	69bb      	ldr	r3, [r7, #24]
 8001170:	43db      	mvns	r3, r3
 8001172:	491e      	ldr	r1, [pc, #120]	; (80011ec <HAL_GPIO_Init+0x2d0>)
 8001174:	4013      	ands	r3, r2
 8001176:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001180:	2b00      	cmp	r3, #0
 8001182:	d006      	beq.n	8001192 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001184:	4b19      	ldr	r3, [pc, #100]	; (80011ec <HAL_GPIO_Init+0x2d0>)
 8001186:	685a      	ldr	r2, [r3, #4]
 8001188:	4918      	ldr	r1, [pc, #96]	; (80011ec <HAL_GPIO_Init+0x2d0>)
 800118a:	69bb      	ldr	r3, [r7, #24]
 800118c:	4313      	orrs	r3, r2
 800118e:	604b      	str	r3, [r1, #4]
 8001190:	e006      	b.n	80011a0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001192:	4b16      	ldr	r3, [pc, #88]	; (80011ec <HAL_GPIO_Init+0x2d0>)
 8001194:	685a      	ldr	r2, [r3, #4]
 8001196:	69bb      	ldr	r3, [r7, #24]
 8001198:	43db      	mvns	r3, r3
 800119a:	4914      	ldr	r1, [pc, #80]	; (80011ec <HAL_GPIO_Init+0x2d0>)
 800119c:	4013      	ands	r3, r2
 800119e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d021      	beq.n	80011f0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80011ac:	4b0f      	ldr	r3, [pc, #60]	; (80011ec <HAL_GPIO_Init+0x2d0>)
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	490e      	ldr	r1, [pc, #56]	; (80011ec <HAL_GPIO_Init+0x2d0>)
 80011b2:	69bb      	ldr	r3, [r7, #24]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	600b      	str	r3, [r1, #0]
 80011b8:	e021      	b.n	80011fe <HAL_GPIO_Init+0x2e2>
 80011ba:	bf00      	nop
 80011bc:	10320000 	.word	0x10320000
 80011c0:	10310000 	.word	0x10310000
 80011c4:	10220000 	.word	0x10220000
 80011c8:	10210000 	.word	0x10210000
 80011cc:	10120000 	.word	0x10120000
 80011d0:	10110000 	.word	0x10110000
 80011d4:	40021000 	.word	0x40021000
 80011d8:	40010000 	.word	0x40010000
 80011dc:	40010800 	.word	0x40010800
 80011e0:	40010c00 	.word	0x40010c00
 80011e4:	40011000 	.word	0x40011000
 80011e8:	40011400 	.word	0x40011400
 80011ec:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80011f0:	4b0b      	ldr	r3, [pc, #44]	; (8001220 <HAL_GPIO_Init+0x304>)
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	69bb      	ldr	r3, [r7, #24]
 80011f6:	43db      	mvns	r3, r3
 80011f8:	4909      	ldr	r1, [pc, #36]	; (8001220 <HAL_GPIO_Init+0x304>)
 80011fa:	4013      	ands	r3, r2
 80011fc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80011fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001200:	3301      	adds	r3, #1
 8001202:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800120a:	fa22 f303 	lsr.w	r3, r2, r3
 800120e:	2b00      	cmp	r3, #0
 8001210:	f47f ae8e 	bne.w	8000f30 <HAL_GPIO_Init+0x14>
  }
}
 8001214:	bf00      	nop
 8001216:	bf00      	nop
 8001218:	372c      	adds	r7, #44	; 0x2c
 800121a:	46bd      	mov	sp, r7
 800121c:	bc80      	pop	{r7}
 800121e:	4770      	bx	lr
 8001220:	40010400 	.word	0x40010400

08001224 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	460b      	mov	r3, r1
 800122e:	807b      	strh	r3, [r7, #2]
 8001230:	4613      	mov	r3, r2
 8001232:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001234:	787b      	ldrb	r3, [r7, #1]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d003      	beq.n	8001242 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800123a:	887a      	ldrh	r2, [r7, #2]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001240:	e003      	b.n	800124a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001242:	887b      	ldrh	r3, [r7, #2]
 8001244:	041a      	lsls	r2, r3, #16
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	611a      	str	r2, [r3, #16]
}
 800124a:	bf00      	nop
 800124c:	370c      	adds	r7, #12
 800124e:	46bd      	mov	sp, r7
 8001250:	bc80      	pop	{r7}
 8001252:	4770      	bx	lr

08001254 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d101      	bne.n	8001266 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e12b      	b.n	80014be <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800126c:	b2db      	uxtb	r3, r3
 800126e:	2b00      	cmp	r3, #0
 8001270:	d106      	bne.n	8001280 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2200      	movs	r2, #0
 8001276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f7ff fc52 	bl	8000b24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2224      	movs	r2, #36	; 0x24
 8001284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f022 0201 	bic.w	r2, r2, #1
 8001296:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80012a6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80012b6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80012b8:	f001 fbf0 	bl	8002a9c <HAL_RCC_GetPCLK1Freq>
 80012bc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	4a81      	ldr	r2, [pc, #516]	; (80014c8 <HAL_I2C_Init+0x274>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d807      	bhi.n	80012d8 <HAL_I2C_Init+0x84>
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	4a80      	ldr	r2, [pc, #512]	; (80014cc <HAL_I2C_Init+0x278>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	bf94      	ite	ls
 80012d0:	2301      	movls	r3, #1
 80012d2:	2300      	movhi	r3, #0
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	e006      	b.n	80012e6 <HAL_I2C_Init+0x92>
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	4a7d      	ldr	r2, [pc, #500]	; (80014d0 <HAL_I2C_Init+0x27c>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	bf94      	ite	ls
 80012e0:	2301      	movls	r3, #1
 80012e2:	2300      	movhi	r3, #0
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e0e7      	b.n	80014be <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	4a78      	ldr	r2, [pc, #480]	; (80014d4 <HAL_I2C_Init+0x280>)
 80012f2:	fba2 2303 	umull	r2, r3, r2, r3
 80012f6:	0c9b      	lsrs	r3, r3, #18
 80012f8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	68ba      	ldr	r2, [r7, #8]
 800130a:	430a      	orrs	r2, r1
 800130c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	6a1b      	ldr	r3, [r3, #32]
 8001314:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	4a6a      	ldr	r2, [pc, #424]	; (80014c8 <HAL_I2C_Init+0x274>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d802      	bhi.n	8001328 <HAL_I2C_Init+0xd4>
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	3301      	adds	r3, #1
 8001326:	e009      	b.n	800133c <HAL_I2C_Init+0xe8>
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800132e:	fb02 f303 	mul.w	r3, r2, r3
 8001332:	4a69      	ldr	r2, [pc, #420]	; (80014d8 <HAL_I2C_Init+0x284>)
 8001334:	fba2 2303 	umull	r2, r3, r2, r3
 8001338:	099b      	lsrs	r3, r3, #6
 800133a:	3301      	adds	r3, #1
 800133c:	687a      	ldr	r2, [r7, #4]
 800133e:	6812      	ldr	r2, [r2, #0]
 8001340:	430b      	orrs	r3, r1
 8001342:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	69db      	ldr	r3, [r3, #28]
 800134a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800134e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	495c      	ldr	r1, [pc, #368]	; (80014c8 <HAL_I2C_Init+0x274>)
 8001358:	428b      	cmp	r3, r1
 800135a:	d819      	bhi.n	8001390 <HAL_I2C_Init+0x13c>
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	1e59      	subs	r1, r3, #1
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	fbb1 f3f3 	udiv	r3, r1, r3
 800136a:	1c59      	adds	r1, r3, #1
 800136c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001370:	400b      	ands	r3, r1
 8001372:	2b00      	cmp	r3, #0
 8001374:	d00a      	beq.n	800138c <HAL_I2C_Init+0x138>
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	1e59      	subs	r1, r3, #1
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	fbb1 f3f3 	udiv	r3, r1, r3
 8001384:	3301      	adds	r3, #1
 8001386:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800138a:	e051      	b.n	8001430 <HAL_I2C_Init+0x1dc>
 800138c:	2304      	movs	r3, #4
 800138e:	e04f      	b.n	8001430 <HAL_I2C_Init+0x1dc>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	689b      	ldr	r3, [r3, #8]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d111      	bne.n	80013bc <HAL_I2C_Init+0x168>
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	1e58      	subs	r0, r3, #1
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6859      	ldr	r1, [r3, #4]
 80013a0:	460b      	mov	r3, r1
 80013a2:	005b      	lsls	r3, r3, #1
 80013a4:	440b      	add	r3, r1
 80013a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80013aa:	3301      	adds	r3, #1
 80013ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	bf0c      	ite	eq
 80013b4:	2301      	moveq	r3, #1
 80013b6:	2300      	movne	r3, #0
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	e012      	b.n	80013e2 <HAL_I2C_Init+0x18e>
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	1e58      	subs	r0, r3, #1
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6859      	ldr	r1, [r3, #4]
 80013c4:	460b      	mov	r3, r1
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	440b      	add	r3, r1
 80013ca:	0099      	lsls	r1, r3, #2
 80013cc:	440b      	add	r3, r1
 80013ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80013d2:	3301      	adds	r3, #1
 80013d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013d8:	2b00      	cmp	r3, #0
 80013da:	bf0c      	ite	eq
 80013dc:	2301      	moveq	r3, #1
 80013de:	2300      	movne	r3, #0
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <HAL_I2C_Init+0x196>
 80013e6:	2301      	movs	r3, #1
 80013e8:	e022      	b.n	8001430 <HAL_I2C_Init+0x1dc>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d10e      	bne.n	8001410 <HAL_I2C_Init+0x1bc>
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	1e58      	subs	r0, r3, #1
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6859      	ldr	r1, [r3, #4]
 80013fa:	460b      	mov	r3, r1
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	440b      	add	r3, r1
 8001400:	fbb0 f3f3 	udiv	r3, r0, r3
 8001404:	3301      	adds	r3, #1
 8001406:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800140a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800140e:	e00f      	b.n	8001430 <HAL_I2C_Init+0x1dc>
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	1e58      	subs	r0, r3, #1
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6859      	ldr	r1, [r3, #4]
 8001418:	460b      	mov	r3, r1
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	440b      	add	r3, r1
 800141e:	0099      	lsls	r1, r3, #2
 8001420:	440b      	add	r3, r1
 8001422:	fbb0 f3f3 	udiv	r3, r0, r3
 8001426:	3301      	adds	r3, #1
 8001428:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800142c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001430:	6879      	ldr	r1, [r7, #4]
 8001432:	6809      	ldr	r1, [r1, #0]
 8001434:	4313      	orrs	r3, r2
 8001436:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	69da      	ldr	r2, [r3, #28]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6a1b      	ldr	r3, [r3, #32]
 800144a:	431a      	orrs	r2, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	430a      	orrs	r2, r1
 8001452:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800145e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	6911      	ldr	r1, [r2, #16]
 8001466:	687a      	ldr	r2, [r7, #4]
 8001468:	68d2      	ldr	r2, [r2, #12]
 800146a:	4311      	orrs	r1, r2
 800146c:	687a      	ldr	r2, [r7, #4]
 800146e:	6812      	ldr	r2, [r2, #0]
 8001470:	430b      	orrs	r3, r1
 8001472:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	68db      	ldr	r3, [r3, #12]
 800147a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	695a      	ldr	r2, [r3, #20]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	699b      	ldr	r3, [r3, #24]
 8001486:	431a      	orrs	r2, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	430a      	orrs	r2, r1
 800148e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f042 0201 	orr.w	r2, r2, #1
 800149e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2200      	movs	r2, #0
 80014a4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2220      	movs	r2, #32
 80014aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2200      	movs	r2, #0
 80014b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2200      	movs	r2, #0
 80014b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80014bc:	2300      	movs	r3, #0
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3710      	adds	r7, #16
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	000186a0 	.word	0x000186a0
 80014cc:	001e847f 	.word	0x001e847f
 80014d0:	003d08ff 	.word	0x003d08ff
 80014d4:	431bde83 	.word	0x431bde83
 80014d8:	10624dd3 	.word	0x10624dd3

080014dc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b088      	sub	sp, #32
 80014e0:	af02      	add	r7, sp, #8
 80014e2:	60f8      	str	r0, [r7, #12]
 80014e4:	4608      	mov	r0, r1
 80014e6:	4611      	mov	r1, r2
 80014e8:	461a      	mov	r2, r3
 80014ea:	4603      	mov	r3, r0
 80014ec:	817b      	strh	r3, [r7, #10]
 80014ee:	460b      	mov	r3, r1
 80014f0:	813b      	strh	r3, [r7, #8]
 80014f2:	4613      	mov	r3, r2
 80014f4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80014f6:	f7ff fbff 	bl	8000cf8 <HAL_GetTick>
 80014fa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001502:	b2db      	uxtb	r3, r3
 8001504:	2b20      	cmp	r3, #32
 8001506:	f040 80d9 	bne.w	80016bc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	9300      	str	r3, [sp, #0]
 800150e:	2319      	movs	r3, #25
 8001510:	2201      	movs	r2, #1
 8001512:	496d      	ldr	r1, [pc, #436]	; (80016c8 <HAL_I2C_Mem_Write+0x1ec>)
 8001514:	68f8      	ldr	r0, [r7, #12]
 8001516:	f000 fcc1 	bl	8001e9c <I2C_WaitOnFlagUntilTimeout>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001520:	2302      	movs	r3, #2
 8001522:	e0cc      	b.n	80016be <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800152a:	2b01      	cmp	r3, #1
 800152c:	d101      	bne.n	8001532 <HAL_I2C_Mem_Write+0x56>
 800152e:	2302      	movs	r3, #2
 8001530:	e0c5      	b.n	80016be <HAL_I2C_Mem_Write+0x1e2>
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	2201      	movs	r2, #1
 8001536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 0301 	and.w	r3, r3, #1
 8001544:	2b01      	cmp	r3, #1
 8001546:	d007      	beq.n	8001558 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f042 0201 	orr.w	r2, r2, #1
 8001556:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001566:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	2221      	movs	r2, #33	; 0x21
 800156c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	2240      	movs	r2, #64	; 0x40
 8001574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	2200      	movs	r2, #0
 800157c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	6a3a      	ldr	r2, [r7, #32]
 8001582:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001588:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800158e:	b29a      	uxth	r2, r3
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	4a4d      	ldr	r2, [pc, #308]	; (80016cc <HAL_I2C_Mem_Write+0x1f0>)
 8001598:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800159a:	88f8      	ldrh	r0, [r7, #6]
 800159c:	893a      	ldrh	r2, [r7, #8]
 800159e:	8979      	ldrh	r1, [r7, #10]
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	9301      	str	r3, [sp, #4]
 80015a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015a6:	9300      	str	r3, [sp, #0]
 80015a8:	4603      	mov	r3, r0
 80015aa:	68f8      	ldr	r0, [r7, #12]
 80015ac:	f000 faf8 	bl	8001ba0 <I2C_RequestMemoryWrite>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d052      	beq.n	800165c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e081      	b.n	80016be <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015ba:	697a      	ldr	r2, [r7, #20]
 80015bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80015be:	68f8      	ldr	r0, [r7, #12]
 80015c0:	f000 fd86 	bl	80020d0 <I2C_WaitOnTXEFlagUntilTimeout>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d00d      	beq.n	80015e6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ce:	2b04      	cmp	r3, #4
 80015d0:	d107      	bne.n	80015e2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015e0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e06b      	b.n	80016be <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ea:	781a      	ldrb	r2, [r3, #0]
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f6:	1c5a      	adds	r2, r3, #1
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001600:	3b01      	subs	r3, #1
 8001602:	b29a      	uxth	r2, r3
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800160c:	b29b      	uxth	r3, r3
 800160e:	3b01      	subs	r3, #1
 8001610:	b29a      	uxth	r2, r3
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	695b      	ldr	r3, [r3, #20]
 800161c:	f003 0304 	and.w	r3, r3, #4
 8001620:	2b04      	cmp	r3, #4
 8001622:	d11b      	bne.n	800165c <HAL_I2C_Mem_Write+0x180>
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001628:	2b00      	cmp	r3, #0
 800162a:	d017      	beq.n	800165c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001630:	781a      	ldrb	r2, [r3, #0]
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800163c:	1c5a      	adds	r2, r3, #1
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001646:	3b01      	subs	r3, #1
 8001648:	b29a      	uxth	r2, r3
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001652:	b29b      	uxth	r3, r3
 8001654:	3b01      	subs	r3, #1
 8001656:	b29a      	uxth	r2, r3
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001660:	2b00      	cmp	r3, #0
 8001662:	d1aa      	bne.n	80015ba <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001664:	697a      	ldr	r2, [r7, #20]
 8001666:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001668:	68f8      	ldr	r0, [r7, #12]
 800166a:	f000 fd79 	bl	8002160 <I2C_WaitOnBTFFlagUntilTimeout>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d00d      	beq.n	8001690 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001678:	2b04      	cmp	r3, #4
 800167a:	d107      	bne.n	800168c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800168a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	e016      	b.n	80016be <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800169e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	2220      	movs	r2, #32
 80016a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	2200      	movs	r2, #0
 80016ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	2200      	movs	r2, #0
 80016b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80016b8:	2300      	movs	r3, #0
 80016ba:	e000      	b.n	80016be <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80016bc:	2302      	movs	r3, #2
  }
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3718      	adds	r7, #24
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	00100002 	.word	0x00100002
 80016cc:	ffff0000 	.word	0xffff0000

080016d0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b08c      	sub	sp, #48	; 0x30
 80016d4:	af02      	add	r7, sp, #8
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	4608      	mov	r0, r1
 80016da:	4611      	mov	r1, r2
 80016dc:	461a      	mov	r2, r3
 80016de:	4603      	mov	r3, r0
 80016e0:	817b      	strh	r3, [r7, #10]
 80016e2:	460b      	mov	r3, r1
 80016e4:	813b      	strh	r3, [r7, #8]
 80016e6:	4613      	mov	r3, r2
 80016e8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80016ea:	2300      	movs	r3, #0
 80016ec:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80016ee:	f7ff fb03 	bl	8000cf8 <HAL_GetTick>
 80016f2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	2b20      	cmp	r3, #32
 80016fe:	f040 8244 	bne.w	8001b8a <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001704:	9300      	str	r3, [sp, #0]
 8001706:	2319      	movs	r3, #25
 8001708:	2201      	movs	r2, #1
 800170a:	4982      	ldr	r1, [pc, #520]	; (8001914 <HAL_I2C_Mem_Read+0x244>)
 800170c:	68f8      	ldr	r0, [r7, #12]
 800170e:	f000 fbc5 	bl	8001e9c <I2C_WaitOnFlagUntilTimeout>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8001718:	2302      	movs	r3, #2
 800171a:	e237      	b.n	8001b8c <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001722:	2b01      	cmp	r3, #1
 8001724:	d101      	bne.n	800172a <HAL_I2C_Mem_Read+0x5a>
 8001726:	2302      	movs	r3, #2
 8001728:	e230      	b.n	8001b8c <HAL_I2C_Mem_Read+0x4bc>
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	2201      	movs	r2, #1
 800172e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 0301 	and.w	r3, r3, #1
 800173c:	2b01      	cmp	r3, #1
 800173e:	d007      	beq.n	8001750 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f042 0201 	orr.w	r2, r2, #1
 800174e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800175e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	2222      	movs	r2, #34	; 0x22
 8001764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	2240      	movs	r2, #64	; 0x40
 800176c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	2200      	movs	r2, #0
 8001774:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800177a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001780:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001786:	b29a      	uxth	r2, r3
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	4a62      	ldr	r2, [pc, #392]	; (8001918 <HAL_I2C_Mem_Read+0x248>)
 8001790:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001792:	88f8      	ldrh	r0, [r7, #6]
 8001794:	893a      	ldrh	r2, [r7, #8]
 8001796:	8979      	ldrh	r1, [r7, #10]
 8001798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179a:	9301      	str	r3, [sp, #4]
 800179c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800179e:	9300      	str	r3, [sp, #0]
 80017a0:	4603      	mov	r3, r0
 80017a2:	68f8      	ldr	r0, [r7, #12]
 80017a4:	f000 fa92 	bl	8001ccc <I2C_RequestMemoryRead>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e1ec      	b.n	8001b8c <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d113      	bne.n	80017e2 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80017ba:	2300      	movs	r3, #0
 80017bc:	61fb      	str	r3, [r7, #28]
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	695b      	ldr	r3, [r3, #20]
 80017c4:	61fb      	str	r3, [r7, #28]
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	699b      	ldr	r3, [r3, #24]
 80017cc:	61fb      	str	r3, [r7, #28]
 80017ce:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	e1c0      	b.n	8001b64 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d11e      	bne.n	8001828 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017f8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80017fa:	b672      	cpsid	i
}
 80017fc:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80017fe:	2300      	movs	r3, #0
 8001800:	61bb      	str	r3, [r7, #24]
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	695b      	ldr	r3, [r3, #20]
 8001808:	61bb      	str	r3, [r7, #24]
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	699b      	ldr	r3, [r3, #24]
 8001810:	61bb      	str	r3, [r7, #24]
 8001812:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001822:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001824:	b662      	cpsie	i
}
 8001826:	e035      	b.n	8001894 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800182c:	2b02      	cmp	r3, #2
 800182e:	d11e      	bne.n	800186e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800183e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001840:	b672      	cpsid	i
}
 8001842:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001844:	2300      	movs	r3, #0
 8001846:	617b      	str	r3, [r7, #20]
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	695b      	ldr	r3, [r3, #20]
 800184e:	617b      	str	r3, [r7, #20]
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	699b      	ldr	r3, [r3, #24]
 8001856:	617b      	str	r3, [r7, #20]
 8001858:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001868:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800186a:	b662      	cpsie	i
}
 800186c:	e012      	b.n	8001894 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800187c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800187e:	2300      	movs	r3, #0
 8001880:	613b      	str	r3, [r7, #16]
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	695b      	ldr	r3, [r3, #20]
 8001888:	613b      	str	r3, [r7, #16]
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	699b      	ldr	r3, [r3, #24]
 8001890:	613b      	str	r3, [r7, #16]
 8001892:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001894:	e166      	b.n	8001b64 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800189a:	2b03      	cmp	r3, #3
 800189c:	f200 811f 	bhi.w	8001ade <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d123      	bne.n	80018f0 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018aa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80018ac:	68f8      	ldr	r0, [r7, #12]
 80018ae:	f000 fc9f 	bl	80021f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	e167      	b.n	8001b8c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	691a      	ldr	r2, [r3, #16]
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c6:	b2d2      	uxtb	r2, r2
 80018c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ce:	1c5a      	adds	r2, r3, #1
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018d8:	3b01      	subs	r3, #1
 80018da:	b29a      	uxth	r2, r3
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	3b01      	subs	r3, #1
 80018e8:	b29a      	uxth	r2, r3
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	855a      	strh	r2, [r3, #42]	; 0x2a
 80018ee:	e139      	b.n	8001b64 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	d152      	bne.n	800199e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80018f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fa:	9300      	str	r3, [sp, #0]
 80018fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018fe:	2200      	movs	r2, #0
 8001900:	4906      	ldr	r1, [pc, #24]	; (800191c <HAL_I2C_Mem_Read+0x24c>)
 8001902:	68f8      	ldr	r0, [r7, #12]
 8001904:	f000 faca 	bl	8001e9c <I2C_WaitOnFlagUntilTimeout>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d008      	beq.n	8001920 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e13c      	b.n	8001b8c <HAL_I2C_Mem_Read+0x4bc>
 8001912:	bf00      	nop
 8001914:	00100002 	.word	0x00100002
 8001918:	ffff0000 	.word	0xffff0000
 800191c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001920:	b672      	cpsid	i
}
 8001922:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001932:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	691a      	ldr	r2, [r3, #16]
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800193e:	b2d2      	uxtb	r2, r2
 8001940:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001946:	1c5a      	adds	r2, r3, #1
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001950:	3b01      	subs	r3, #1
 8001952:	b29a      	uxth	r2, r3
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800195c:	b29b      	uxth	r3, r3
 800195e:	3b01      	subs	r3, #1
 8001960:	b29a      	uxth	r2, r3
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001966:	b662      	cpsie	i
}
 8001968:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	691a      	ldr	r2, [r3, #16]
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001974:	b2d2      	uxtb	r2, r2
 8001976:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197c:	1c5a      	adds	r2, r3, #1
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001986:	3b01      	subs	r3, #1
 8001988:	b29a      	uxth	r2, r3
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001992:	b29b      	uxth	r3, r3
 8001994:	3b01      	subs	r3, #1
 8001996:	b29a      	uxth	r2, r3
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800199c:	e0e2      	b.n	8001b64 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800199e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a0:	9300      	str	r3, [sp, #0]
 80019a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019a4:	2200      	movs	r2, #0
 80019a6:	497b      	ldr	r1, [pc, #492]	; (8001b94 <HAL_I2C_Mem_Read+0x4c4>)
 80019a8:	68f8      	ldr	r0, [r7, #12]
 80019aa:	f000 fa77 	bl	8001e9c <I2C_WaitOnFlagUntilTimeout>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e0e9      	b.n	8001b8c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019c6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80019c8:	b672      	cpsid	i
}
 80019ca:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	691a      	ldr	r2, [r3, #16]
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d6:	b2d2      	uxtb	r2, r2
 80019d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019de:	1c5a      	adds	r2, r3, #1
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019e8:	3b01      	subs	r3, #1
 80019ea:	b29a      	uxth	r2, r3
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	3b01      	subs	r3, #1
 80019f8:	b29a      	uxth	r2, r3
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80019fe:	4b66      	ldr	r3, [pc, #408]	; (8001b98 <HAL_I2C_Mem_Read+0x4c8>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	08db      	lsrs	r3, r3, #3
 8001a04:	4a65      	ldr	r2, [pc, #404]	; (8001b9c <HAL_I2C_Mem_Read+0x4cc>)
 8001a06:	fba2 2303 	umull	r2, r3, r2, r3
 8001a0a:	0a1a      	lsrs	r2, r3, #8
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	4413      	add	r3, r2
 8001a12:	00da      	lsls	r2, r3, #3
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001a18:	6a3b      	ldr	r3, [r7, #32]
 8001a1a:	3b01      	subs	r3, #1
 8001a1c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8001a1e:	6a3b      	ldr	r3, [r7, #32]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d118      	bne.n	8001a56 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	2200      	movs	r2, #0
 8001a28:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	2220      	movs	r2, #32
 8001a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	2200      	movs	r2, #0
 8001a36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3e:	f043 0220 	orr.w	r2, r3, #32
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001a46:	b662      	cpsie	i
}
 8001a48:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e09a      	b.n	8001b8c <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	695b      	ldr	r3, [r3, #20]
 8001a5c:	f003 0304 	and.w	r3, r3, #4
 8001a60:	2b04      	cmp	r3, #4
 8001a62:	d1d9      	bne.n	8001a18 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	691a      	ldr	r2, [r3, #16]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7e:	b2d2      	uxtb	r2, r2
 8001a80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a86:	1c5a      	adds	r2, r3, #1
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a90:	3b01      	subs	r3, #1
 8001a92:	b29a      	uxth	r2, r3
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a9c:	b29b      	uxth	r3, r3
 8001a9e:	3b01      	subs	r3, #1
 8001aa0:	b29a      	uxth	r2, r3
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001aa6:	b662      	cpsie	i
}
 8001aa8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	691a      	ldr	r2, [r3, #16]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab4:	b2d2      	uxtb	r2, r2
 8001ab6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001abc:	1c5a      	adds	r2, r3, #1
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ac6:	3b01      	subs	r3, #1
 8001ac8:	b29a      	uxth	r2, r3
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	3b01      	subs	r3, #1
 8001ad6:	b29a      	uxth	r2, r3
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001adc:	e042      	b.n	8001b64 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ade:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ae0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001ae2:	68f8      	ldr	r0, [r7, #12]
 8001ae4:	f000 fb84 	bl	80021f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e04c      	b.n	8001b8c <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	691a      	ldr	r2, [r3, #16]
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001afc:	b2d2      	uxtb	r2, r2
 8001afe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b04:	1c5a      	adds	r2, r3, #1
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b0e:	3b01      	subs	r3, #1
 8001b10:	b29a      	uxth	r2, r3
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	3b01      	subs	r3, #1
 8001b1e:	b29a      	uxth	r2, r3
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	695b      	ldr	r3, [r3, #20]
 8001b2a:	f003 0304 	and.w	r3, r3, #4
 8001b2e:	2b04      	cmp	r3, #4
 8001b30:	d118      	bne.n	8001b64 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	691a      	ldr	r2, [r3, #16]
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3c:	b2d2      	uxtb	r2, r2
 8001b3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b44:	1c5a      	adds	r2, r3, #1
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b4e:	3b01      	subs	r3, #1
 8001b50:	b29a      	uxth	r2, r3
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	3b01      	subs	r3, #1
 8001b5e:	b29a      	uxth	r2, r3
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	f47f ae94 	bne.w	8001896 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	2220      	movs	r2, #32
 8001b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	2200      	movs	r2, #0
 8001b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001b86:	2300      	movs	r3, #0
 8001b88:	e000      	b.n	8001b8c <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8001b8a:	2302      	movs	r3, #2
  }
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3728      	adds	r7, #40	; 0x28
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	00010004 	.word	0x00010004
 8001b98:	20000034 	.word	0x20000034
 8001b9c:	14f8b589 	.word	0x14f8b589

08001ba0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b088      	sub	sp, #32
 8001ba4:	af02      	add	r7, sp, #8
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	4608      	mov	r0, r1
 8001baa:	4611      	mov	r1, r2
 8001bac:	461a      	mov	r2, r3
 8001bae:	4603      	mov	r3, r0
 8001bb0:	817b      	strh	r3, [r7, #10]
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	813b      	strh	r3, [r7, #8]
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001bc8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bcc:	9300      	str	r3, [sp, #0]
 8001bce:	6a3b      	ldr	r3, [r7, #32]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001bd6:	68f8      	ldr	r0, [r7, #12]
 8001bd8:	f000 f960 	bl	8001e9c <I2C_WaitOnFlagUntilTimeout>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d00d      	beq.n	8001bfe <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001bf0:	d103      	bne.n	8001bfa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bf8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e05f      	b.n	8001cbe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001bfe:	897b      	ldrh	r3, [r7, #10]
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	461a      	mov	r2, r3
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001c0c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c10:	6a3a      	ldr	r2, [r7, #32]
 8001c12:	492d      	ldr	r1, [pc, #180]	; (8001cc8 <I2C_RequestMemoryWrite+0x128>)
 8001c14:	68f8      	ldr	r0, [r7, #12]
 8001c16:	f000 f9bb 	bl	8001f90 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e04c      	b.n	8001cbe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c24:	2300      	movs	r3, #0
 8001c26:	617b      	str	r3, [r7, #20]
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	695b      	ldr	r3, [r3, #20]
 8001c2e:	617b      	str	r3, [r7, #20]
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	699b      	ldr	r3, [r3, #24]
 8001c36:	617b      	str	r3, [r7, #20]
 8001c38:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c3c:	6a39      	ldr	r1, [r7, #32]
 8001c3e:	68f8      	ldr	r0, [r7, #12]
 8001c40:	f000 fa46 	bl	80020d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d00d      	beq.n	8001c66 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4e:	2b04      	cmp	r3, #4
 8001c50:	d107      	bne.n	8001c62 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c60:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e02b      	b.n	8001cbe <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001c66:	88fb      	ldrh	r3, [r7, #6]
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d105      	bne.n	8001c78 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001c6c:	893b      	ldrh	r3, [r7, #8]
 8001c6e:	b2da      	uxtb	r2, r3
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	611a      	str	r2, [r3, #16]
 8001c76:	e021      	b.n	8001cbc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001c78:	893b      	ldrh	r3, [r7, #8]
 8001c7a:	0a1b      	lsrs	r3, r3, #8
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	b2da      	uxtb	r2, r3
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c88:	6a39      	ldr	r1, [r7, #32]
 8001c8a:	68f8      	ldr	r0, [r7, #12]
 8001c8c:	f000 fa20 	bl	80020d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d00d      	beq.n	8001cb2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9a:	2b04      	cmp	r3, #4
 8001c9c:	d107      	bne.n	8001cae <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e005      	b.n	8001cbe <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001cb2:	893b      	ldrh	r3, [r7, #8]
 8001cb4:	b2da      	uxtb	r2, r3
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3718      	adds	r7, #24
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	00010002 	.word	0x00010002

08001ccc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b088      	sub	sp, #32
 8001cd0:	af02      	add	r7, sp, #8
 8001cd2:	60f8      	str	r0, [r7, #12]
 8001cd4:	4608      	mov	r0, r1
 8001cd6:	4611      	mov	r1, r2
 8001cd8:	461a      	mov	r2, r3
 8001cda:	4603      	mov	r3, r0
 8001cdc:	817b      	strh	r3, [r7, #10]
 8001cde:	460b      	mov	r3, r1
 8001ce0:	813b      	strh	r3, [r7, #8]
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001cf4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d04:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d08:	9300      	str	r3, [sp, #0]
 8001d0a:	6a3b      	ldr	r3, [r7, #32]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001d12:	68f8      	ldr	r0, [r7, #12]
 8001d14:	f000 f8c2 	bl	8001e9c <I2C_WaitOnFlagUntilTimeout>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d00d      	beq.n	8001d3a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d2c:	d103      	bne.n	8001d36 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d34:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e0aa      	b.n	8001e90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001d3a:	897b      	ldrh	r3, [r7, #10]
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	461a      	mov	r2, r3
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001d48:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4c:	6a3a      	ldr	r2, [r7, #32]
 8001d4e:	4952      	ldr	r1, [pc, #328]	; (8001e98 <I2C_RequestMemoryRead+0x1cc>)
 8001d50:	68f8      	ldr	r0, [r7, #12]
 8001d52:	f000 f91d 	bl	8001f90 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d001      	beq.n	8001d60 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e097      	b.n	8001e90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d60:	2300      	movs	r3, #0
 8001d62:	617b      	str	r3, [r7, #20]
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	695b      	ldr	r3, [r3, #20]
 8001d6a:	617b      	str	r3, [r7, #20]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	699b      	ldr	r3, [r3, #24]
 8001d72:	617b      	str	r3, [r7, #20]
 8001d74:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d78:	6a39      	ldr	r1, [r7, #32]
 8001d7a:	68f8      	ldr	r0, [r7, #12]
 8001d7c:	f000 f9a8 	bl	80020d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d00d      	beq.n	8001da2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8a:	2b04      	cmp	r3, #4
 8001d8c:	d107      	bne.n	8001d9e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d9c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e076      	b.n	8001e90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001da2:	88fb      	ldrh	r3, [r7, #6]
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d105      	bne.n	8001db4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001da8:	893b      	ldrh	r3, [r7, #8]
 8001daa:	b2da      	uxtb	r2, r3
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	611a      	str	r2, [r3, #16]
 8001db2:	e021      	b.n	8001df8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001db4:	893b      	ldrh	r3, [r7, #8]
 8001db6:	0a1b      	lsrs	r3, r3, #8
 8001db8:	b29b      	uxth	r3, r3
 8001dba:	b2da      	uxtb	r2, r3
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001dc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dc4:	6a39      	ldr	r1, [r7, #32]
 8001dc6:	68f8      	ldr	r0, [r7, #12]
 8001dc8:	f000 f982 	bl	80020d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d00d      	beq.n	8001dee <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd6:	2b04      	cmp	r3, #4
 8001dd8:	d107      	bne.n	8001dea <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001de8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e050      	b.n	8001e90 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001dee:	893b      	ldrh	r3, [r7, #8]
 8001df0:	b2da      	uxtb	r2, r3
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001df8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dfa:	6a39      	ldr	r1, [r7, #32]
 8001dfc:	68f8      	ldr	r0, [r7, #12]
 8001dfe:	f000 f967 	bl	80020d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d00d      	beq.n	8001e24 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0c:	2b04      	cmp	r3, #4
 8001e0e:	d107      	bne.n	8001e20 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e1e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e035      	b.n	8001e90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e32:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e36:	9300      	str	r3, [sp, #0]
 8001e38:	6a3b      	ldr	r3, [r7, #32]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001e40:	68f8      	ldr	r0, [r7, #12]
 8001e42:	f000 f82b 	bl	8001e9c <I2C_WaitOnFlagUntilTimeout>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d00d      	beq.n	8001e68 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e5a:	d103      	bne.n	8001e64 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e62:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001e64:	2303      	movs	r3, #3
 8001e66:	e013      	b.n	8001e90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001e68:	897b      	ldrh	r3, [r7, #10]
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	f043 0301 	orr.w	r3, r3, #1
 8001e70:	b2da      	uxtb	r2, r3
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7a:	6a3a      	ldr	r2, [r7, #32]
 8001e7c:	4906      	ldr	r1, [pc, #24]	; (8001e98 <I2C_RequestMemoryRead+0x1cc>)
 8001e7e:	68f8      	ldr	r0, [r7, #12]
 8001e80:	f000 f886 	bl	8001f90 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e000      	b.n	8001e90 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8001e8e:	2300      	movs	r3, #0
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3718      	adds	r7, #24
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	00010002 	.word	0x00010002

08001e9c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	60f8      	str	r0, [r7, #12]
 8001ea4:	60b9      	str	r1, [r7, #8]
 8001ea6:	603b      	str	r3, [r7, #0]
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001eac:	e048      	b.n	8001f40 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eb4:	d044      	beq.n	8001f40 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001eb6:	f7fe ff1f 	bl	8000cf8 <HAL_GetTick>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	69bb      	ldr	r3, [r7, #24]
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	683a      	ldr	r2, [r7, #0]
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d302      	bcc.n	8001ecc <I2C_WaitOnFlagUntilTimeout+0x30>
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d139      	bne.n	8001f40 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	0c1b      	lsrs	r3, r3, #16
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d10d      	bne.n	8001ef2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	695b      	ldr	r3, [r3, #20]
 8001edc:	43da      	mvns	r2, r3
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	b29b      	uxth	r3, r3
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	bf0c      	ite	eq
 8001ee8:	2301      	moveq	r3, #1
 8001eea:	2300      	movne	r3, #0
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	461a      	mov	r2, r3
 8001ef0:	e00c      	b.n	8001f0c <I2C_WaitOnFlagUntilTimeout+0x70>
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	699b      	ldr	r3, [r3, #24]
 8001ef8:	43da      	mvns	r2, r3
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	4013      	ands	r3, r2
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	bf0c      	ite	eq
 8001f04:	2301      	moveq	r3, #1
 8001f06:	2300      	movne	r3, #0
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	79fb      	ldrb	r3, [r7, #7]
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d116      	bne.n	8001f40 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2200      	movs	r2, #0
 8001f16:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2220      	movs	r2, #32
 8001f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2200      	movs	r2, #0
 8001f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2c:	f043 0220 	orr.w	r2, r3, #32
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2200      	movs	r2, #0
 8001f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e023      	b.n	8001f88 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	0c1b      	lsrs	r3, r3, #16
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d10d      	bne.n	8001f66 <I2C_WaitOnFlagUntilTimeout+0xca>
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	695b      	ldr	r3, [r3, #20]
 8001f50:	43da      	mvns	r2, r3
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	4013      	ands	r3, r2
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	bf0c      	ite	eq
 8001f5c:	2301      	moveq	r3, #1
 8001f5e:	2300      	movne	r3, #0
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	461a      	mov	r2, r3
 8001f64:	e00c      	b.n	8001f80 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	699b      	ldr	r3, [r3, #24]
 8001f6c:	43da      	mvns	r2, r3
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	4013      	ands	r3, r2
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	bf0c      	ite	eq
 8001f78:	2301      	moveq	r3, #1
 8001f7a:	2300      	movne	r3, #0
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	461a      	mov	r2, r3
 8001f80:	79fb      	ldrb	r3, [r7, #7]
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d093      	beq.n	8001eae <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001f86:	2300      	movs	r3, #0
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3710      	adds	r7, #16
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	60f8      	str	r0, [r7, #12]
 8001f98:	60b9      	str	r1, [r7, #8]
 8001f9a:	607a      	str	r2, [r7, #4]
 8001f9c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001f9e:	e071      	b.n	8002084 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	695b      	ldr	r3, [r3, #20]
 8001fa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001faa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fae:	d123      	bne.n	8001ff8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fbe:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001fc8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2220      	movs	r2, #32
 8001fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe4:	f043 0204 	orr.w	r2, r3, #4
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e067      	b.n	80020c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ffe:	d041      	beq.n	8002084 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002000:	f7fe fe7a 	bl	8000cf8 <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	429a      	cmp	r2, r3
 800200e:	d302      	bcc.n	8002016 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d136      	bne.n	8002084 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	0c1b      	lsrs	r3, r3, #16
 800201a:	b2db      	uxtb	r3, r3
 800201c:	2b01      	cmp	r3, #1
 800201e:	d10c      	bne.n	800203a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	695b      	ldr	r3, [r3, #20]
 8002026:	43da      	mvns	r2, r3
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	4013      	ands	r3, r2
 800202c:	b29b      	uxth	r3, r3
 800202e:	2b00      	cmp	r3, #0
 8002030:	bf14      	ite	ne
 8002032:	2301      	movne	r3, #1
 8002034:	2300      	moveq	r3, #0
 8002036:	b2db      	uxtb	r3, r3
 8002038:	e00b      	b.n	8002052 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	699b      	ldr	r3, [r3, #24]
 8002040:	43da      	mvns	r2, r3
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	4013      	ands	r3, r2
 8002046:	b29b      	uxth	r3, r3
 8002048:	2b00      	cmp	r3, #0
 800204a:	bf14      	ite	ne
 800204c:	2301      	movne	r3, #1
 800204e:	2300      	moveq	r3, #0
 8002050:	b2db      	uxtb	r3, r3
 8002052:	2b00      	cmp	r3, #0
 8002054:	d016      	beq.n	8002084 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2200      	movs	r2, #0
 800205a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2220      	movs	r2, #32
 8002060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2200      	movs	r2, #0
 8002068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002070:	f043 0220 	orr.w	r2, r3, #32
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2200      	movs	r2, #0
 800207c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e021      	b.n	80020c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	0c1b      	lsrs	r3, r3, #16
 8002088:	b2db      	uxtb	r3, r3
 800208a:	2b01      	cmp	r3, #1
 800208c:	d10c      	bne.n	80020a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	695b      	ldr	r3, [r3, #20]
 8002094:	43da      	mvns	r2, r3
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	4013      	ands	r3, r2
 800209a:	b29b      	uxth	r3, r3
 800209c:	2b00      	cmp	r3, #0
 800209e:	bf14      	ite	ne
 80020a0:	2301      	movne	r3, #1
 80020a2:	2300      	moveq	r3, #0
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	e00b      	b.n	80020c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	699b      	ldr	r3, [r3, #24]
 80020ae:	43da      	mvns	r2, r3
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	4013      	ands	r3, r2
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	bf14      	ite	ne
 80020ba:	2301      	movne	r3, #1
 80020bc:	2300      	moveq	r3, #0
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	f47f af6d 	bne.w	8001fa0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80020c6:	2300      	movs	r3, #0
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3710      	adds	r7, #16
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	60b9      	str	r1, [r7, #8]
 80020da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80020dc:	e034      	b.n	8002148 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80020de:	68f8      	ldr	r0, [r7, #12]
 80020e0:	f000 f8e3 	bl	80022aa <I2C_IsAcknowledgeFailed>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e034      	b.n	8002158 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020f4:	d028      	beq.n	8002148 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020f6:	f7fe fdff 	bl	8000cf8 <HAL_GetTick>
 80020fa:	4602      	mov	r2, r0
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	68ba      	ldr	r2, [r7, #8]
 8002102:	429a      	cmp	r2, r3
 8002104:	d302      	bcc.n	800210c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d11d      	bne.n	8002148 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	695b      	ldr	r3, [r3, #20]
 8002112:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002116:	2b80      	cmp	r3, #128	; 0x80
 8002118:	d016      	beq.n	8002148 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2200      	movs	r2, #0
 800211e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2220      	movs	r2, #32
 8002124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2200      	movs	r2, #0
 800212c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002134:	f043 0220 	orr.w	r2, r3, #32
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2200      	movs	r2, #0
 8002140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e007      	b.n	8002158 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	695b      	ldr	r3, [r3, #20]
 800214e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002152:	2b80      	cmp	r3, #128	; 0x80
 8002154:	d1c3      	bne.n	80020de <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002156:	2300      	movs	r3, #0
}
 8002158:	4618      	mov	r0, r3
 800215a:	3710      	adds	r7, #16
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}

08002160 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	60f8      	str	r0, [r7, #12]
 8002168:	60b9      	str	r1, [r7, #8]
 800216a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800216c:	e034      	b.n	80021d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800216e:	68f8      	ldr	r0, [r7, #12]
 8002170:	f000 f89b 	bl	80022aa <I2C_IsAcknowledgeFailed>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e034      	b.n	80021e8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002184:	d028      	beq.n	80021d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002186:	f7fe fdb7 	bl	8000cf8 <HAL_GetTick>
 800218a:	4602      	mov	r2, r0
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	68ba      	ldr	r2, [r7, #8]
 8002192:	429a      	cmp	r2, r3
 8002194:	d302      	bcc.n	800219c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d11d      	bne.n	80021d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	695b      	ldr	r3, [r3, #20]
 80021a2:	f003 0304 	and.w	r3, r3, #4
 80021a6:	2b04      	cmp	r3, #4
 80021a8:	d016      	beq.n	80021d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2200      	movs	r2, #0
 80021ae:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2220      	movs	r2, #32
 80021b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2200      	movs	r2, #0
 80021bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c4:	f043 0220 	orr.w	r2, r3, #32
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2200      	movs	r2, #0
 80021d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e007      	b.n	80021e8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	695b      	ldr	r3, [r3, #20]
 80021de:	f003 0304 	and.w	r3, r3, #4
 80021e2:	2b04      	cmp	r3, #4
 80021e4:	d1c3      	bne.n	800216e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80021e6:	2300      	movs	r3, #0
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3710      	adds	r7, #16
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}

080021f0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	60b9      	str	r1, [r7, #8]
 80021fa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80021fc:	e049      	b.n	8002292 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	695b      	ldr	r3, [r3, #20]
 8002204:	f003 0310 	and.w	r3, r3, #16
 8002208:	2b10      	cmp	r3, #16
 800220a:	d119      	bne.n	8002240 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f06f 0210 	mvn.w	r2, #16
 8002214:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2200      	movs	r2, #0
 800221a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2220      	movs	r2, #32
 8002220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2200      	movs	r2, #0
 8002228:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2200      	movs	r2, #0
 8002238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e030      	b.n	80022a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002240:	f7fe fd5a 	bl	8000cf8 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	68ba      	ldr	r2, [r7, #8]
 800224c:	429a      	cmp	r2, r3
 800224e:	d302      	bcc.n	8002256 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d11d      	bne.n	8002292 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	695b      	ldr	r3, [r3, #20]
 800225c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002260:	2b40      	cmp	r3, #64	; 0x40
 8002262:	d016      	beq.n	8002292 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2200      	movs	r2, #0
 8002268:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2220      	movs	r2, #32
 800226e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2200      	movs	r2, #0
 8002276:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227e:	f043 0220 	orr.w	r2, r3, #32
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2200      	movs	r2, #0
 800228a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e007      	b.n	80022a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	695b      	ldr	r3, [r3, #20]
 8002298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800229c:	2b40      	cmp	r3, #64	; 0x40
 800229e:	d1ae      	bne.n	80021fe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3710      	adds	r7, #16
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}

080022aa <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80022aa:	b480      	push	{r7}
 80022ac:	b083      	sub	sp, #12
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	695b      	ldr	r3, [r3, #20]
 80022b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022c0:	d11b      	bne.n	80022fa <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80022ca:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2200      	movs	r2, #0
 80022d0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2220      	movs	r2, #32
 80022d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e6:	f043 0204 	orr.w	r2, r3, #4
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e000      	b.n	80022fc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80022fa:	2300      	movs	r3, #0
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	370c      	adds	r7, #12
 8002300:	46bd      	mov	sp, r7
 8002302:	bc80      	pop	{r7}
 8002304:	4770      	bx	lr
	...

08002308 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b086      	sub	sp, #24
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d101      	bne.n	800231a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e272      	b.n	8002800 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0301 	and.w	r3, r3, #1
 8002322:	2b00      	cmp	r3, #0
 8002324:	f000 8087 	beq.w	8002436 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002328:	4b92      	ldr	r3, [pc, #584]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f003 030c 	and.w	r3, r3, #12
 8002330:	2b04      	cmp	r3, #4
 8002332:	d00c      	beq.n	800234e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002334:	4b8f      	ldr	r3, [pc, #572]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f003 030c 	and.w	r3, r3, #12
 800233c:	2b08      	cmp	r3, #8
 800233e:	d112      	bne.n	8002366 <HAL_RCC_OscConfig+0x5e>
 8002340:	4b8c      	ldr	r3, [pc, #560]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002348:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800234c:	d10b      	bne.n	8002366 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800234e:	4b89      	ldr	r3, [pc, #548]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d06c      	beq.n	8002434 <HAL_RCC_OscConfig+0x12c>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d168      	bne.n	8002434 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e24c      	b.n	8002800 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800236e:	d106      	bne.n	800237e <HAL_RCC_OscConfig+0x76>
 8002370:	4b80      	ldr	r3, [pc, #512]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a7f      	ldr	r2, [pc, #508]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 8002376:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800237a:	6013      	str	r3, [r2, #0]
 800237c:	e02e      	b.n	80023dc <HAL_RCC_OscConfig+0xd4>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d10c      	bne.n	80023a0 <HAL_RCC_OscConfig+0x98>
 8002386:	4b7b      	ldr	r3, [pc, #492]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a7a      	ldr	r2, [pc, #488]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 800238c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002390:	6013      	str	r3, [r2, #0]
 8002392:	4b78      	ldr	r3, [pc, #480]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a77      	ldr	r2, [pc, #476]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 8002398:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800239c:	6013      	str	r3, [r2, #0]
 800239e:	e01d      	b.n	80023dc <HAL_RCC_OscConfig+0xd4>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023a8:	d10c      	bne.n	80023c4 <HAL_RCC_OscConfig+0xbc>
 80023aa:	4b72      	ldr	r3, [pc, #456]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a71      	ldr	r2, [pc, #452]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 80023b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023b4:	6013      	str	r3, [r2, #0]
 80023b6:	4b6f      	ldr	r3, [pc, #444]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a6e      	ldr	r2, [pc, #440]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 80023bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023c0:	6013      	str	r3, [r2, #0]
 80023c2:	e00b      	b.n	80023dc <HAL_RCC_OscConfig+0xd4>
 80023c4:	4b6b      	ldr	r3, [pc, #428]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a6a      	ldr	r2, [pc, #424]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 80023ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023ce:	6013      	str	r3, [r2, #0]
 80023d0:	4b68      	ldr	r3, [pc, #416]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a67      	ldr	r2, [pc, #412]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 80023d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d013      	beq.n	800240c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e4:	f7fe fc88 	bl	8000cf8 <HAL_GetTick>
 80023e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ea:	e008      	b.n	80023fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023ec:	f7fe fc84 	bl	8000cf8 <HAL_GetTick>
 80023f0:	4602      	mov	r2, r0
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	2b64      	cmp	r3, #100	; 0x64
 80023f8:	d901      	bls.n	80023fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e200      	b.n	8002800 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023fe:	4b5d      	ldr	r3, [pc, #372]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d0f0      	beq.n	80023ec <HAL_RCC_OscConfig+0xe4>
 800240a:	e014      	b.n	8002436 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800240c:	f7fe fc74 	bl	8000cf8 <HAL_GetTick>
 8002410:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002412:	e008      	b.n	8002426 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002414:	f7fe fc70 	bl	8000cf8 <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	2b64      	cmp	r3, #100	; 0x64
 8002420:	d901      	bls.n	8002426 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e1ec      	b.n	8002800 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002426:	4b53      	ldr	r3, [pc, #332]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d1f0      	bne.n	8002414 <HAL_RCC_OscConfig+0x10c>
 8002432:	e000      	b.n	8002436 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002434:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	2b00      	cmp	r3, #0
 8002440:	d063      	beq.n	800250a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002442:	4b4c      	ldr	r3, [pc, #304]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f003 030c 	and.w	r3, r3, #12
 800244a:	2b00      	cmp	r3, #0
 800244c:	d00b      	beq.n	8002466 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800244e:	4b49      	ldr	r3, [pc, #292]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f003 030c 	and.w	r3, r3, #12
 8002456:	2b08      	cmp	r3, #8
 8002458:	d11c      	bne.n	8002494 <HAL_RCC_OscConfig+0x18c>
 800245a:	4b46      	ldr	r3, [pc, #280]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d116      	bne.n	8002494 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002466:	4b43      	ldr	r3, [pc, #268]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0302 	and.w	r3, r3, #2
 800246e:	2b00      	cmp	r3, #0
 8002470:	d005      	beq.n	800247e <HAL_RCC_OscConfig+0x176>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	691b      	ldr	r3, [r3, #16]
 8002476:	2b01      	cmp	r3, #1
 8002478:	d001      	beq.n	800247e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e1c0      	b.n	8002800 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800247e:	4b3d      	ldr	r3, [pc, #244]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	695b      	ldr	r3, [r3, #20]
 800248a:	00db      	lsls	r3, r3, #3
 800248c:	4939      	ldr	r1, [pc, #228]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 800248e:	4313      	orrs	r3, r2
 8002490:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002492:	e03a      	b.n	800250a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	691b      	ldr	r3, [r3, #16]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d020      	beq.n	80024de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800249c:	4b36      	ldr	r3, [pc, #216]	; (8002578 <HAL_RCC_OscConfig+0x270>)
 800249e:	2201      	movs	r2, #1
 80024a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a2:	f7fe fc29 	bl	8000cf8 <HAL_GetTick>
 80024a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024a8:	e008      	b.n	80024bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024aa:	f7fe fc25 	bl	8000cf8 <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d901      	bls.n	80024bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e1a1      	b.n	8002800 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024bc:	4b2d      	ldr	r3, [pc, #180]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0302 	and.w	r3, r3, #2
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d0f0      	beq.n	80024aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024c8:	4b2a      	ldr	r3, [pc, #168]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	695b      	ldr	r3, [r3, #20]
 80024d4:	00db      	lsls	r3, r3, #3
 80024d6:	4927      	ldr	r1, [pc, #156]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 80024d8:	4313      	orrs	r3, r2
 80024da:	600b      	str	r3, [r1, #0]
 80024dc:	e015      	b.n	800250a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024de:	4b26      	ldr	r3, [pc, #152]	; (8002578 <HAL_RCC_OscConfig+0x270>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e4:	f7fe fc08 	bl	8000cf8 <HAL_GetTick>
 80024e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024ea:	e008      	b.n	80024fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024ec:	f7fe fc04 	bl	8000cf8 <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d901      	bls.n	80024fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e180      	b.n	8002800 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024fe:	4b1d      	ldr	r3, [pc, #116]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0302 	and.w	r3, r3, #2
 8002506:	2b00      	cmp	r3, #0
 8002508:	d1f0      	bne.n	80024ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0308 	and.w	r3, r3, #8
 8002512:	2b00      	cmp	r3, #0
 8002514:	d03a      	beq.n	800258c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	699b      	ldr	r3, [r3, #24]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d019      	beq.n	8002552 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800251e:	4b17      	ldr	r3, [pc, #92]	; (800257c <HAL_RCC_OscConfig+0x274>)
 8002520:	2201      	movs	r2, #1
 8002522:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002524:	f7fe fbe8 	bl	8000cf8 <HAL_GetTick>
 8002528:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800252a:	e008      	b.n	800253e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800252c:	f7fe fbe4 	bl	8000cf8 <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	2b02      	cmp	r3, #2
 8002538:	d901      	bls.n	800253e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	e160      	b.n	8002800 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800253e:	4b0d      	ldr	r3, [pc, #52]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 8002540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002542:	f003 0302 	and.w	r3, r3, #2
 8002546:	2b00      	cmp	r3, #0
 8002548:	d0f0      	beq.n	800252c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800254a:	2001      	movs	r0, #1
 800254c:	f000 faba 	bl	8002ac4 <RCC_Delay>
 8002550:	e01c      	b.n	800258c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002552:	4b0a      	ldr	r3, [pc, #40]	; (800257c <HAL_RCC_OscConfig+0x274>)
 8002554:	2200      	movs	r2, #0
 8002556:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002558:	f7fe fbce 	bl	8000cf8 <HAL_GetTick>
 800255c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800255e:	e00f      	b.n	8002580 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002560:	f7fe fbca 	bl	8000cf8 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	2b02      	cmp	r3, #2
 800256c:	d908      	bls.n	8002580 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e146      	b.n	8002800 <HAL_RCC_OscConfig+0x4f8>
 8002572:	bf00      	nop
 8002574:	40021000 	.word	0x40021000
 8002578:	42420000 	.word	0x42420000
 800257c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002580:	4b92      	ldr	r3, [pc, #584]	; (80027cc <HAL_RCC_OscConfig+0x4c4>)
 8002582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002584:	f003 0302 	and.w	r3, r3, #2
 8002588:	2b00      	cmp	r3, #0
 800258a:	d1e9      	bne.n	8002560 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0304 	and.w	r3, r3, #4
 8002594:	2b00      	cmp	r3, #0
 8002596:	f000 80a6 	beq.w	80026e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800259a:	2300      	movs	r3, #0
 800259c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800259e:	4b8b      	ldr	r3, [pc, #556]	; (80027cc <HAL_RCC_OscConfig+0x4c4>)
 80025a0:	69db      	ldr	r3, [r3, #28]
 80025a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d10d      	bne.n	80025c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025aa:	4b88      	ldr	r3, [pc, #544]	; (80027cc <HAL_RCC_OscConfig+0x4c4>)
 80025ac:	69db      	ldr	r3, [r3, #28]
 80025ae:	4a87      	ldr	r2, [pc, #540]	; (80027cc <HAL_RCC_OscConfig+0x4c4>)
 80025b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025b4:	61d3      	str	r3, [r2, #28]
 80025b6:	4b85      	ldr	r3, [pc, #532]	; (80027cc <HAL_RCC_OscConfig+0x4c4>)
 80025b8:	69db      	ldr	r3, [r3, #28]
 80025ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025be:	60bb      	str	r3, [r7, #8]
 80025c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025c2:	2301      	movs	r3, #1
 80025c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025c6:	4b82      	ldr	r3, [pc, #520]	; (80027d0 <HAL_RCC_OscConfig+0x4c8>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d118      	bne.n	8002604 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025d2:	4b7f      	ldr	r3, [pc, #508]	; (80027d0 <HAL_RCC_OscConfig+0x4c8>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a7e      	ldr	r2, [pc, #504]	; (80027d0 <HAL_RCC_OscConfig+0x4c8>)
 80025d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025de:	f7fe fb8b 	bl	8000cf8 <HAL_GetTick>
 80025e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025e4:	e008      	b.n	80025f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025e6:	f7fe fb87 	bl	8000cf8 <HAL_GetTick>
 80025ea:	4602      	mov	r2, r0
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	2b64      	cmp	r3, #100	; 0x64
 80025f2:	d901      	bls.n	80025f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	e103      	b.n	8002800 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025f8:	4b75      	ldr	r3, [pc, #468]	; (80027d0 <HAL_RCC_OscConfig+0x4c8>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002600:	2b00      	cmp	r3, #0
 8002602:	d0f0      	beq.n	80025e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	2b01      	cmp	r3, #1
 800260a:	d106      	bne.n	800261a <HAL_RCC_OscConfig+0x312>
 800260c:	4b6f      	ldr	r3, [pc, #444]	; (80027cc <HAL_RCC_OscConfig+0x4c4>)
 800260e:	6a1b      	ldr	r3, [r3, #32]
 8002610:	4a6e      	ldr	r2, [pc, #440]	; (80027cc <HAL_RCC_OscConfig+0x4c4>)
 8002612:	f043 0301 	orr.w	r3, r3, #1
 8002616:	6213      	str	r3, [r2, #32]
 8002618:	e02d      	b.n	8002676 <HAL_RCC_OscConfig+0x36e>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d10c      	bne.n	800263c <HAL_RCC_OscConfig+0x334>
 8002622:	4b6a      	ldr	r3, [pc, #424]	; (80027cc <HAL_RCC_OscConfig+0x4c4>)
 8002624:	6a1b      	ldr	r3, [r3, #32]
 8002626:	4a69      	ldr	r2, [pc, #420]	; (80027cc <HAL_RCC_OscConfig+0x4c4>)
 8002628:	f023 0301 	bic.w	r3, r3, #1
 800262c:	6213      	str	r3, [r2, #32]
 800262e:	4b67      	ldr	r3, [pc, #412]	; (80027cc <HAL_RCC_OscConfig+0x4c4>)
 8002630:	6a1b      	ldr	r3, [r3, #32]
 8002632:	4a66      	ldr	r2, [pc, #408]	; (80027cc <HAL_RCC_OscConfig+0x4c4>)
 8002634:	f023 0304 	bic.w	r3, r3, #4
 8002638:	6213      	str	r3, [r2, #32]
 800263a:	e01c      	b.n	8002676 <HAL_RCC_OscConfig+0x36e>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	2b05      	cmp	r3, #5
 8002642:	d10c      	bne.n	800265e <HAL_RCC_OscConfig+0x356>
 8002644:	4b61      	ldr	r3, [pc, #388]	; (80027cc <HAL_RCC_OscConfig+0x4c4>)
 8002646:	6a1b      	ldr	r3, [r3, #32]
 8002648:	4a60      	ldr	r2, [pc, #384]	; (80027cc <HAL_RCC_OscConfig+0x4c4>)
 800264a:	f043 0304 	orr.w	r3, r3, #4
 800264e:	6213      	str	r3, [r2, #32]
 8002650:	4b5e      	ldr	r3, [pc, #376]	; (80027cc <HAL_RCC_OscConfig+0x4c4>)
 8002652:	6a1b      	ldr	r3, [r3, #32]
 8002654:	4a5d      	ldr	r2, [pc, #372]	; (80027cc <HAL_RCC_OscConfig+0x4c4>)
 8002656:	f043 0301 	orr.w	r3, r3, #1
 800265a:	6213      	str	r3, [r2, #32]
 800265c:	e00b      	b.n	8002676 <HAL_RCC_OscConfig+0x36e>
 800265e:	4b5b      	ldr	r3, [pc, #364]	; (80027cc <HAL_RCC_OscConfig+0x4c4>)
 8002660:	6a1b      	ldr	r3, [r3, #32]
 8002662:	4a5a      	ldr	r2, [pc, #360]	; (80027cc <HAL_RCC_OscConfig+0x4c4>)
 8002664:	f023 0301 	bic.w	r3, r3, #1
 8002668:	6213      	str	r3, [r2, #32]
 800266a:	4b58      	ldr	r3, [pc, #352]	; (80027cc <HAL_RCC_OscConfig+0x4c4>)
 800266c:	6a1b      	ldr	r3, [r3, #32]
 800266e:	4a57      	ldr	r2, [pc, #348]	; (80027cc <HAL_RCC_OscConfig+0x4c4>)
 8002670:	f023 0304 	bic.w	r3, r3, #4
 8002674:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d015      	beq.n	80026aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800267e:	f7fe fb3b 	bl	8000cf8 <HAL_GetTick>
 8002682:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002684:	e00a      	b.n	800269c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002686:	f7fe fb37 	bl	8000cf8 <HAL_GetTick>
 800268a:	4602      	mov	r2, r0
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	f241 3288 	movw	r2, #5000	; 0x1388
 8002694:	4293      	cmp	r3, r2
 8002696:	d901      	bls.n	800269c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e0b1      	b.n	8002800 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800269c:	4b4b      	ldr	r3, [pc, #300]	; (80027cc <HAL_RCC_OscConfig+0x4c4>)
 800269e:	6a1b      	ldr	r3, [r3, #32]
 80026a0:	f003 0302 	and.w	r3, r3, #2
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d0ee      	beq.n	8002686 <HAL_RCC_OscConfig+0x37e>
 80026a8:	e014      	b.n	80026d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026aa:	f7fe fb25 	bl	8000cf8 <HAL_GetTick>
 80026ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026b0:	e00a      	b.n	80026c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026b2:	f7fe fb21 	bl	8000cf8 <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d901      	bls.n	80026c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80026c4:	2303      	movs	r3, #3
 80026c6:	e09b      	b.n	8002800 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026c8:	4b40      	ldr	r3, [pc, #256]	; (80027cc <HAL_RCC_OscConfig+0x4c4>)
 80026ca:	6a1b      	ldr	r3, [r3, #32]
 80026cc:	f003 0302 	and.w	r3, r3, #2
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d1ee      	bne.n	80026b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80026d4:	7dfb      	ldrb	r3, [r7, #23]
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d105      	bne.n	80026e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026da:	4b3c      	ldr	r3, [pc, #240]	; (80027cc <HAL_RCC_OscConfig+0x4c4>)
 80026dc:	69db      	ldr	r3, [r3, #28]
 80026de:	4a3b      	ldr	r2, [pc, #236]	; (80027cc <HAL_RCC_OscConfig+0x4c4>)
 80026e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026e4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	69db      	ldr	r3, [r3, #28]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	f000 8087 	beq.w	80027fe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026f0:	4b36      	ldr	r3, [pc, #216]	; (80027cc <HAL_RCC_OscConfig+0x4c4>)
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f003 030c 	and.w	r3, r3, #12
 80026f8:	2b08      	cmp	r3, #8
 80026fa:	d061      	beq.n	80027c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	69db      	ldr	r3, [r3, #28]
 8002700:	2b02      	cmp	r3, #2
 8002702:	d146      	bne.n	8002792 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002704:	4b33      	ldr	r3, [pc, #204]	; (80027d4 <HAL_RCC_OscConfig+0x4cc>)
 8002706:	2200      	movs	r2, #0
 8002708:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800270a:	f7fe faf5 	bl	8000cf8 <HAL_GetTick>
 800270e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002710:	e008      	b.n	8002724 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002712:	f7fe faf1 	bl	8000cf8 <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	2b02      	cmp	r3, #2
 800271e:	d901      	bls.n	8002724 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e06d      	b.n	8002800 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002724:	4b29      	ldr	r3, [pc, #164]	; (80027cc <HAL_RCC_OscConfig+0x4c4>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d1f0      	bne.n	8002712 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6a1b      	ldr	r3, [r3, #32]
 8002734:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002738:	d108      	bne.n	800274c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800273a:	4b24      	ldr	r3, [pc, #144]	; (80027cc <HAL_RCC_OscConfig+0x4c4>)
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	4921      	ldr	r1, [pc, #132]	; (80027cc <HAL_RCC_OscConfig+0x4c4>)
 8002748:	4313      	orrs	r3, r2
 800274a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800274c:	4b1f      	ldr	r3, [pc, #124]	; (80027cc <HAL_RCC_OscConfig+0x4c4>)
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6a19      	ldr	r1, [r3, #32]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275c:	430b      	orrs	r3, r1
 800275e:	491b      	ldr	r1, [pc, #108]	; (80027cc <HAL_RCC_OscConfig+0x4c4>)
 8002760:	4313      	orrs	r3, r2
 8002762:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002764:	4b1b      	ldr	r3, [pc, #108]	; (80027d4 <HAL_RCC_OscConfig+0x4cc>)
 8002766:	2201      	movs	r2, #1
 8002768:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800276a:	f7fe fac5 	bl	8000cf8 <HAL_GetTick>
 800276e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002770:	e008      	b.n	8002784 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002772:	f7fe fac1 	bl	8000cf8 <HAL_GetTick>
 8002776:	4602      	mov	r2, r0
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	2b02      	cmp	r3, #2
 800277e:	d901      	bls.n	8002784 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	e03d      	b.n	8002800 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002784:	4b11      	ldr	r3, [pc, #68]	; (80027cc <HAL_RCC_OscConfig+0x4c4>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d0f0      	beq.n	8002772 <HAL_RCC_OscConfig+0x46a>
 8002790:	e035      	b.n	80027fe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002792:	4b10      	ldr	r3, [pc, #64]	; (80027d4 <HAL_RCC_OscConfig+0x4cc>)
 8002794:	2200      	movs	r2, #0
 8002796:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002798:	f7fe faae 	bl	8000cf8 <HAL_GetTick>
 800279c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800279e:	e008      	b.n	80027b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027a0:	f7fe faaa 	bl	8000cf8 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d901      	bls.n	80027b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e026      	b.n	8002800 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027b2:	4b06      	ldr	r3, [pc, #24]	; (80027cc <HAL_RCC_OscConfig+0x4c4>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d1f0      	bne.n	80027a0 <HAL_RCC_OscConfig+0x498>
 80027be:	e01e      	b.n	80027fe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	69db      	ldr	r3, [r3, #28]
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d107      	bne.n	80027d8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e019      	b.n	8002800 <HAL_RCC_OscConfig+0x4f8>
 80027cc:	40021000 	.word	0x40021000
 80027d0:	40007000 	.word	0x40007000
 80027d4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80027d8:	4b0b      	ldr	r3, [pc, #44]	; (8002808 <HAL_RCC_OscConfig+0x500>)
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6a1b      	ldr	r3, [r3, #32]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d106      	bne.n	80027fa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d001      	beq.n	80027fe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e000      	b.n	8002800 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80027fe:	2300      	movs	r3, #0
}
 8002800:	4618      	mov	r0, r3
 8002802:	3718      	adds	r7, #24
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	40021000 	.word	0x40021000

0800280c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d101      	bne.n	8002820 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e0d0      	b.n	80029c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002820:	4b6a      	ldr	r3, [pc, #424]	; (80029cc <HAL_RCC_ClockConfig+0x1c0>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0307 	and.w	r3, r3, #7
 8002828:	683a      	ldr	r2, [r7, #0]
 800282a:	429a      	cmp	r2, r3
 800282c:	d910      	bls.n	8002850 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800282e:	4b67      	ldr	r3, [pc, #412]	; (80029cc <HAL_RCC_ClockConfig+0x1c0>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f023 0207 	bic.w	r2, r3, #7
 8002836:	4965      	ldr	r1, [pc, #404]	; (80029cc <HAL_RCC_ClockConfig+0x1c0>)
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	4313      	orrs	r3, r2
 800283c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800283e:	4b63      	ldr	r3, [pc, #396]	; (80029cc <HAL_RCC_ClockConfig+0x1c0>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0307 	and.w	r3, r3, #7
 8002846:	683a      	ldr	r2, [r7, #0]
 8002848:	429a      	cmp	r2, r3
 800284a:	d001      	beq.n	8002850 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e0b8      	b.n	80029c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0302 	and.w	r3, r3, #2
 8002858:	2b00      	cmp	r3, #0
 800285a:	d020      	beq.n	800289e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0304 	and.w	r3, r3, #4
 8002864:	2b00      	cmp	r3, #0
 8002866:	d005      	beq.n	8002874 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002868:	4b59      	ldr	r3, [pc, #356]	; (80029d0 <HAL_RCC_ClockConfig+0x1c4>)
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	4a58      	ldr	r2, [pc, #352]	; (80029d0 <HAL_RCC_ClockConfig+0x1c4>)
 800286e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002872:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0308 	and.w	r3, r3, #8
 800287c:	2b00      	cmp	r3, #0
 800287e:	d005      	beq.n	800288c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002880:	4b53      	ldr	r3, [pc, #332]	; (80029d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	4a52      	ldr	r2, [pc, #328]	; (80029d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002886:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800288a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800288c:	4b50      	ldr	r3, [pc, #320]	; (80029d0 <HAL_RCC_ClockConfig+0x1c4>)
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	494d      	ldr	r1, [pc, #308]	; (80029d0 <HAL_RCC_ClockConfig+0x1c4>)
 800289a:	4313      	orrs	r3, r2
 800289c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0301 	and.w	r3, r3, #1
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d040      	beq.n	800292c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d107      	bne.n	80028c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028b2:	4b47      	ldr	r3, [pc, #284]	; (80029d0 <HAL_RCC_ClockConfig+0x1c4>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d115      	bne.n	80028ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e07f      	b.n	80029c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d107      	bne.n	80028da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028ca:	4b41      	ldr	r3, [pc, #260]	; (80029d0 <HAL_RCC_ClockConfig+0x1c4>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d109      	bne.n	80028ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e073      	b.n	80029c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028da:	4b3d      	ldr	r3, [pc, #244]	; (80029d0 <HAL_RCC_ClockConfig+0x1c4>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d101      	bne.n	80028ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e06b      	b.n	80029c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028ea:	4b39      	ldr	r3, [pc, #228]	; (80029d0 <HAL_RCC_ClockConfig+0x1c4>)
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	f023 0203 	bic.w	r2, r3, #3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	4936      	ldr	r1, [pc, #216]	; (80029d0 <HAL_RCC_ClockConfig+0x1c4>)
 80028f8:	4313      	orrs	r3, r2
 80028fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028fc:	f7fe f9fc 	bl	8000cf8 <HAL_GetTick>
 8002900:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002902:	e00a      	b.n	800291a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002904:	f7fe f9f8 	bl	8000cf8 <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002912:	4293      	cmp	r3, r2
 8002914:	d901      	bls.n	800291a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e053      	b.n	80029c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800291a:	4b2d      	ldr	r3, [pc, #180]	; (80029d0 <HAL_RCC_ClockConfig+0x1c4>)
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f003 020c 	and.w	r2, r3, #12
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	429a      	cmp	r2, r3
 800292a:	d1eb      	bne.n	8002904 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800292c:	4b27      	ldr	r3, [pc, #156]	; (80029cc <HAL_RCC_ClockConfig+0x1c0>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0307 	and.w	r3, r3, #7
 8002934:	683a      	ldr	r2, [r7, #0]
 8002936:	429a      	cmp	r2, r3
 8002938:	d210      	bcs.n	800295c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800293a:	4b24      	ldr	r3, [pc, #144]	; (80029cc <HAL_RCC_ClockConfig+0x1c0>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f023 0207 	bic.w	r2, r3, #7
 8002942:	4922      	ldr	r1, [pc, #136]	; (80029cc <HAL_RCC_ClockConfig+0x1c0>)
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	4313      	orrs	r3, r2
 8002948:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800294a:	4b20      	ldr	r3, [pc, #128]	; (80029cc <HAL_RCC_ClockConfig+0x1c0>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0307 	and.w	r3, r3, #7
 8002952:	683a      	ldr	r2, [r7, #0]
 8002954:	429a      	cmp	r2, r3
 8002956:	d001      	beq.n	800295c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e032      	b.n	80029c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0304 	and.w	r3, r3, #4
 8002964:	2b00      	cmp	r3, #0
 8002966:	d008      	beq.n	800297a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002968:	4b19      	ldr	r3, [pc, #100]	; (80029d0 <HAL_RCC_ClockConfig+0x1c4>)
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	4916      	ldr	r1, [pc, #88]	; (80029d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002976:	4313      	orrs	r3, r2
 8002978:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0308 	and.w	r3, r3, #8
 8002982:	2b00      	cmp	r3, #0
 8002984:	d009      	beq.n	800299a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002986:	4b12      	ldr	r3, [pc, #72]	; (80029d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	691b      	ldr	r3, [r3, #16]
 8002992:	00db      	lsls	r3, r3, #3
 8002994:	490e      	ldr	r1, [pc, #56]	; (80029d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002996:	4313      	orrs	r3, r2
 8002998:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800299a:	f000 f821 	bl	80029e0 <HAL_RCC_GetSysClockFreq>
 800299e:	4602      	mov	r2, r0
 80029a0:	4b0b      	ldr	r3, [pc, #44]	; (80029d0 <HAL_RCC_ClockConfig+0x1c4>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	091b      	lsrs	r3, r3, #4
 80029a6:	f003 030f 	and.w	r3, r3, #15
 80029aa:	490a      	ldr	r1, [pc, #40]	; (80029d4 <HAL_RCC_ClockConfig+0x1c8>)
 80029ac:	5ccb      	ldrb	r3, [r1, r3]
 80029ae:	fa22 f303 	lsr.w	r3, r2, r3
 80029b2:	4a09      	ldr	r2, [pc, #36]	; (80029d8 <HAL_RCC_ClockConfig+0x1cc>)
 80029b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80029b6:	4b09      	ldr	r3, [pc, #36]	; (80029dc <HAL_RCC_ClockConfig+0x1d0>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7fe f95a 	bl	8000c74 <HAL_InitTick>

  return HAL_OK;
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3710      	adds	r7, #16
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	40022000 	.word	0x40022000
 80029d0:	40021000 	.word	0x40021000
 80029d4:	08002b70 	.word	0x08002b70
 80029d8:	20000034 	.word	0x20000034
 80029dc:	20000038 	.word	0x20000038

080029e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b087      	sub	sp, #28
 80029e4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80029e6:	2300      	movs	r3, #0
 80029e8:	60fb      	str	r3, [r7, #12]
 80029ea:	2300      	movs	r3, #0
 80029ec:	60bb      	str	r3, [r7, #8]
 80029ee:	2300      	movs	r3, #0
 80029f0:	617b      	str	r3, [r7, #20]
 80029f2:	2300      	movs	r3, #0
 80029f4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80029f6:	2300      	movs	r3, #0
 80029f8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80029fa:	4b1e      	ldr	r3, [pc, #120]	; (8002a74 <HAL_RCC_GetSysClockFreq+0x94>)
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f003 030c 	and.w	r3, r3, #12
 8002a06:	2b04      	cmp	r3, #4
 8002a08:	d002      	beq.n	8002a10 <HAL_RCC_GetSysClockFreq+0x30>
 8002a0a:	2b08      	cmp	r3, #8
 8002a0c:	d003      	beq.n	8002a16 <HAL_RCC_GetSysClockFreq+0x36>
 8002a0e:	e027      	b.n	8002a60 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a10:	4b19      	ldr	r3, [pc, #100]	; (8002a78 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a12:	613b      	str	r3, [r7, #16]
      break;
 8002a14:	e027      	b.n	8002a66 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	0c9b      	lsrs	r3, r3, #18
 8002a1a:	f003 030f 	and.w	r3, r3, #15
 8002a1e:	4a17      	ldr	r2, [pc, #92]	; (8002a7c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002a20:	5cd3      	ldrb	r3, [r2, r3]
 8002a22:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d010      	beq.n	8002a50 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a2e:	4b11      	ldr	r3, [pc, #68]	; (8002a74 <HAL_RCC_GetSysClockFreq+0x94>)
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	0c5b      	lsrs	r3, r3, #17
 8002a34:	f003 0301 	and.w	r3, r3, #1
 8002a38:	4a11      	ldr	r2, [pc, #68]	; (8002a80 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002a3a:	5cd3      	ldrb	r3, [r2, r3]
 8002a3c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a0d      	ldr	r2, [pc, #52]	; (8002a78 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a42:	fb03 f202 	mul.w	r2, r3, r2
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a4c:	617b      	str	r3, [r7, #20]
 8002a4e:	e004      	b.n	8002a5a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	4a0c      	ldr	r2, [pc, #48]	; (8002a84 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002a54:	fb02 f303 	mul.w	r3, r2, r3
 8002a58:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	613b      	str	r3, [r7, #16]
      break;
 8002a5e:	e002      	b.n	8002a66 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a60:	4b05      	ldr	r3, [pc, #20]	; (8002a78 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a62:	613b      	str	r3, [r7, #16]
      break;
 8002a64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a66:	693b      	ldr	r3, [r7, #16]
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	371c      	adds	r7, #28
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bc80      	pop	{r7}
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	40021000 	.word	0x40021000
 8002a78:	007a1200 	.word	0x007a1200
 8002a7c:	08002b88 	.word	0x08002b88
 8002a80:	08002b98 	.word	0x08002b98
 8002a84:	003d0900 	.word	0x003d0900

08002a88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a8c:	4b02      	ldr	r3, [pc, #8]	; (8002a98 <HAL_RCC_GetHCLKFreq+0x10>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bc80      	pop	{r7}
 8002a96:	4770      	bx	lr
 8002a98:	20000034 	.word	0x20000034

08002a9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002aa0:	f7ff fff2 	bl	8002a88 <HAL_RCC_GetHCLKFreq>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	4b05      	ldr	r3, [pc, #20]	; (8002abc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	0a1b      	lsrs	r3, r3, #8
 8002aac:	f003 0307 	and.w	r3, r3, #7
 8002ab0:	4903      	ldr	r1, [pc, #12]	; (8002ac0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ab2:	5ccb      	ldrb	r3, [r1, r3]
 8002ab4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	40021000 	.word	0x40021000
 8002ac0:	08002b80 	.word	0x08002b80

08002ac4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b085      	sub	sp, #20
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002acc:	4b0a      	ldr	r3, [pc, #40]	; (8002af8 <RCC_Delay+0x34>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a0a      	ldr	r2, [pc, #40]	; (8002afc <RCC_Delay+0x38>)
 8002ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad6:	0a5b      	lsrs	r3, r3, #9
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	fb02 f303 	mul.w	r3, r2, r3
 8002ade:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002ae0:	bf00      	nop
  }
  while (Delay --);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	1e5a      	subs	r2, r3, #1
 8002ae6:	60fa      	str	r2, [r7, #12]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d1f9      	bne.n	8002ae0 <RCC_Delay+0x1c>
}
 8002aec:	bf00      	nop
 8002aee:	bf00      	nop
 8002af0:	3714      	adds	r7, #20
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bc80      	pop	{r7}
 8002af6:	4770      	bx	lr
 8002af8:	20000034 	.word	0x20000034
 8002afc:	10624dd3 	.word	0x10624dd3

08002b00 <memset>:
 8002b00:	4603      	mov	r3, r0
 8002b02:	4402      	add	r2, r0
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d100      	bne.n	8002b0a <memset+0xa>
 8002b08:	4770      	bx	lr
 8002b0a:	f803 1b01 	strb.w	r1, [r3], #1
 8002b0e:	e7f9      	b.n	8002b04 <memset+0x4>

08002b10 <__libc_init_array>:
 8002b10:	b570      	push	{r4, r5, r6, lr}
 8002b12:	2600      	movs	r6, #0
 8002b14:	4d0c      	ldr	r5, [pc, #48]	; (8002b48 <__libc_init_array+0x38>)
 8002b16:	4c0d      	ldr	r4, [pc, #52]	; (8002b4c <__libc_init_array+0x3c>)
 8002b18:	1b64      	subs	r4, r4, r5
 8002b1a:	10a4      	asrs	r4, r4, #2
 8002b1c:	42a6      	cmp	r6, r4
 8002b1e:	d109      	bne.n	8002b34 <__libc_init_array+0x24>
 8002b20:	f000 f81a 	bl	8002b58 <_init>
 8002b24:	2600      	movs	r6, #0
 8002b26:	4d0a      	ldr	r5, [pc, #40]	; (8002b50 <__libc_init_array+0x40>)
 8002b28:	4c0a      	ldr	r4, [pc, #40]	; (8002b54 <__libc_init_array+0x44>)
 8002b2a:	1b64      	subs	r4, r4, r5
 8002b2c:	10a4      	asrs	r4, r4, #2
 8002b2e:	42a6      	cmp	r6, r4
 8002b30:	d105      	bne.n	8002b3e <__libc_init_array+0x2e>
 8002b32:	bd70      	pop	{r4, r5, r6, pc}
 8002b34:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b38:	4798      	blx	r3
 8002b3a:	3601      	adds	r6, #1
 8002b3c:	e7ee      	b.n	8002b1c <__libc_init_array+0xc>
 8002b3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b42:	4798      	blx	r3
 8002b44:	3601      	adds	r6, #1
 8002b46:	e7f2      	b.n	8002b2e <__libc_init_array+0x1e>
 8002b48:	08002b9c 	.word	0x08002b9c
 8002b4c:	08002b9c 	.word	0x08002b9c
 8002b50:	08002b9c 	.word	0x08002b9c
 8002b54:	08002ba0 	.word	0x08002ba0

08002b58 <_init>:
 8002b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b5a:	bf00      	nop
 8002b5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b5e:	bc08      	pop	{r3}
 8002b60:	469e      	mov	lr, r3
 8002b62:	4770      	bx	lr

08002b64 <_fini>:
 8002b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b66:	bf00      	nop
 8002b68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b6a:	bc08      	pop	{r3}
 8002b6c:	469e      	mov	lr, r3
 8002b6e:	4770      	bx	lr
