
mpu_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c4c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002d58  08002d58  00003d58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d84  08002d84  00004054  2**0
                  CONTENTS
  4 .ARM          00000000  08002d84  08002d84  00004054  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d84  08002d84  00004054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d84  08002d84  00003d84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d88  08002d88  00003d88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000054  20000000  08002d8c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000008c  20000054  08002de0  00004054  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e0  08002de0  000040e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004054  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006d22  00000000  00000000  0000407d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014d2  00000000  00000000  0000ad9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000710  00000000  00000000  0000c278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000578  00000000  00000000  0000c988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016dae  00000000  00000000  0000cf00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000952f  00000000  00000000  00023cae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082da7  00000000  00000000  0002d1dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000aff84  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c8c  00000000  00000000  000affc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000089  00000000  00000000  000b1c54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000054 	.word	0x20000054
 8000128:	00000000 	.word	0x00000000
 800012c:	08002d40 	.word	0x08002d40

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000058 	.word	0x20000058
 8000148:	08002d40 	.word	0x08002d40

0800014c <__aeabi_fmul>:
 800014c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000150:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000154:	bf1e      	ittt	ne
 8000156:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015a:	ea92 0f0c 	teqne	r2, ip
 800015e:	ea93 0f0c 	teqne	r3, ip
 8000162:	d06f      	beq.n	8000244 <__aeabi_fmul+0xf8>
 8000164:	441a      	add	r2, r3
 8000166:	ea80 0c01 	eor.w	ip, r0, r1
 800016a:	0240      	lsls	r0, r0, #9
 800016c:	bf18      	it	ne
 800016e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000172:	d01e      	beq.n	80001b2 <__aeabi_fmul+0x66>
 8000174:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000178:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800017c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000180:	fba0 3101 	umull	r3, r1, r0, r1
 8000184:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000188:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 800018c:	bf3e      	ittt	cc
 800018e:	0049      	lslcc	r1, r1, #1
 8000190:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000194:	005b      	lslcc	r3, r3, #1
 8000196:	ea40 0001 	orr.w	r0, r0, r1
 800019a:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 800019e:	2afd      	cmp	r2, #253	@ 0xfd
 80001a0:	d81d      	bhi.n	80001de <__aeabi_fmul+0x92>
 80001a2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001a6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001aa:	bf08      	it	eq
 80001ac:	f020 0001 	biceq.w	r0, r0, #1
 80001b0:	4770      	bx	lr
 80001b2:	f090 0f00 	teq	r0, #0
 80001b6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001ba:	bf08      	it	eq
 80001bc:	0249      	lsleq	r1, r1, #9
 80001be:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001c6:	3a7f      	subs	r2, #127	@ 0x7f
 80001c8:	bfc2      	ittt	gt
 80001ca:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001ce:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d2:	4770      	bxgt	lr
 80001d4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001d8:	f04f 0300 	mov.w	r3, #0
 80001dc:	3a01      	subs	r2, #1
 80001de:	dc5d      	bgt.n	800029c <__aeabi_fmul+0x150>
 80001e0:	f112 0f19 	cmn.w	r2, #25
 80001e4:	bfdc      	itt	le
 80001e6:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80001ea:	4770      	bxle	lr
 80001ec:	f1c2 0200 	rsb	r2, r2, #0
 80001f0:	0041      	lsls	r1, r0, #1
 80001f2:	fa21 f102 	lsr.w	r1, r1, r2
 80001f6:	f1c2 0220 	rsb	r2, r2, #32
 80001fa:	fa00 fc02 	lsl.w	ip, r0, r2
 80001fe:	ea5f 0031 	movs.w	r0, r1, rrx
 8000202:	f140 0000 	adc.w	r0, r0, #0
 8000206:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020a:	bf08      	it	eq
 800020c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000210:	4770      	bx	lr
 8000212:	f092 0f00 	teq	r2, #0
 8000216:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800021a:	bf02      	ittt	eq
 800021c:	0040      	lsleq	r0, r0, #1
 800021e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000222:	3a01      	subeq	r2, #1
 8000224:	d0f9      	beq.n	800021a <__aeabi_fmul+0xce>
 8000226:	ea40 000c 	orr.w	r0, r0, ip
 800022a:	f093 0f00 	teq	r3, #0
 800022e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000232:	bf02      	ittt	eq
 8000234:	0049      	lsleq	r1, r1, #1
 8000236:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800023a:	3b01      	subeq	r3, #1
 800023c:	d0f9      	beq.n	8000232 <__aeabi_fmul+0xe6>
 800023e:	ea41 010c 	orr.w	r1, r1, ip
 8000242:	e78f      	b.n	8000164 <__aeabi_fmul+0x18>
 8000244:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000248:	ea92 0f0c 	teq	r2, ip
 800024c:	bf18      	it	ne
 800024e:	ea93 0f0c 	teqne	r3, ip
 8000252:	d00a      	beq.n	800026a <__aeabi_fmul+0x11e>
 8000254:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000258:	bf18      	it	ne
 800025a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800025e:	d1d8      	bne.n	8000212 <__aeabi_fmul+0xc6>
 8000260:	ea80 0001 	eor.w	r0, r0, r1
 8000264:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000268:	4770      	bx	lr
 800026a:	f090 0f00 	teq	r0, #0
 800026e:	bf17      	itett	ne
 8000270:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000274:	4608      	moveq	r0, r1
 8000276:	f091 0f00 	teqne	r1, #0
 800027a:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800027e:	d014      	beq.n	80002aa <__aeabi_fmul+0x15e>
 8000280:	ea92 0f0c 	teq	r2, ip
 8000284:	d101      	bne.n	800028a <__aeabi_fmul+0x13e>
 8000286:	0242      	lsls	r2, r0, #9
 8000288:	d10f      	bne.n	80002aa <__aeabi_fmul+0x15e>
 800028a:	ea93 0f0c 	teq	r3, ip
 800028e:	d103      	bne.n	8000298 <__aeabi_fmul+0x14c>
 8000290:	024b      	lsls	r3, r1, #9
 8000292:	bf18      	it	ne
 8000294:	4608      	movne	r0, r1
 8000296:	d108      	bne.n	80002aa <__aeabi_fmul+0x15e>
 8000298:	ea80 0001 	eor.w	r0, r0, r1
 800029c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002a0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002a4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002a8:	4770      	bx	lr
 80002aa:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002ae:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002b2:	4770      	bx	lr

080002b4 <__aeabi_frsub>:
 80002b4:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80002b8:	e002      	b.n	80002c0 <__addsf3>
 80002ba:	bf00      	nop

080002bc <__aeabi_fsub>:
 80002bc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080002c0 <__addsf3>:
 80002c0:	0042      	lsls	r2, r0, #1
 80002c2:	bf1f      	itttt	ne
 80002c4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80002c8:	ea92 0f03 	teqne	r2, r3
 80002cc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80002d0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002d4:	d06a      	beq.n	80003ac <__addsf3+0xec>
 80002d6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80002da:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80002de:	bfc1      	itttt	gt
 80002e0:	18d2      	addgt	r2, r2, r3
 80002e2:	4041      	eorgt	r1, r0
 80002e4:	4048      	eorgt	r0, r1
 80002e6:	4041      	eorgt	r1, r0
 80002e8:	bfb8      	it	lt
 80002ea:	425b      	neglt	r3, r3
 80002ec:	2b19      	cmp	r3, #25
 80002ee:	bf88      	it	hi
 80002f0:	4770      	bxhi	lr
 80002f2:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80002f6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002fa:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80002fe:	bf18      	it	ne
 8000300:	4240      	negne	r0, r0
 8000302:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000306:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800030a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 800030e:	bf18      	it	ne
 8000310:	4249      	negne	r1, r1
 8000312:	ea92 0f03 	teq	r2, r3
 8000316:	d03f      	beq.n	8000398 <__addsf3+0xd8>
 8000318:	f1a2 0201 	sub.w	r2, r2, #1
 800031c:	fa41 fc03 	asr.w	ip, r1, r3
 8000320:	eb10 000c 	adds.w	r0, r0, ip
 8000324:	f1c3 0320 	rsb	r3, r3, #32
 8000328:	fa01 f103 	lsl.w	r1, r1, r3
 800032c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000330:	d502      	bpl.n	8000338 <__addsf3+0x78>
 8000332:	4249      	negs	r1, r1
 8000334:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000338:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 800033c:	d313      	bcc.n	8000366 <__addsf3+0xa6>
 800033e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000342:	d306      	bcc.n	8000352 <__addsf3+0x92>
 8000344:	0840      	lsrs	r0, r0, #1
 8000346:	ea4f 0131 	mov.w	r1, r1, rrx
 800034a:	f102 0201 	add.w	r2, r2, #1
 800034e:	2afe      	cmp	r2, #254	@ 0xfe
 8000350:	d251      	bcs.n	80003f6 <__addsf3+0x136>
 8000352:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000356:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800035a:	bf08      	it	eq
 800035c:	f020 0001 	biceq.w	r0, r0, #1
 8000360:	ea40 0003 	orr.w	r0, r0, r3
 8000364:	4770      	bx	lr
 8000366:	0049      	lsls	r1, r1, #1
 8000368:	eb40 0000 	adc.w	r0, r0, r0
 800036c:	3a01      	subs	r2, #1
 800036e:	bf28      	it	cs
 8000370:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000374:	d2ed      	bcs.n	8000352 <__addsf3+0x92>
 8000376:	fab0 fc80 	clz	ip, r0
 800037a:	f1ac 0c08 	sub.w	ip, ip, #8
 800037e:	ebb2 020c 	subs.w	r2, r2, ip
 8000382:	fa00 f00c 	lsl.w	r0, r0, ip
 8000386:	bfaa      	itet	ge
 8000388:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800038c:	4252      	neglt	r2, r2
 800038e:	4318      	orrge	r0, r3
 8000390:	bfbc      	itt	lt
 8000392:	40d0      	lsrlt	r0, r2
 8000394:	4318      	orrlt	r0, r3
 8000396:	4770      	bx	lr
 8000398:	f092 0f00 	teq	r2, #0
 800039c:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80003a0:	bf06      	itte	eq
 80003a2:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80003a6:	3201      	addeq	r2, #1
 80003a8:	3b01      	subne	r3, #1
 80003aa:	e7b5      	b.n	8000318 <__addsf3+0x58>
 80003ac:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003b0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003b4:	bf18      	it	ne
 80003b6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003ba:	d021      	beq.n	8000400 <__addsf3+0x140>
 80003bc:	ea92 0f03 	teq	r2, r3
 80003c0:	d004      	beq.n	80003cc <__addsf3+0x10c>
 80003c2:	f092 0f00 	teq	r2, #0
 80003c6:	bf08      	it	eq
 80003c8:	4608      	moveq	r0, r1
 80003ca:	4770      	bx	lr
 80003cc:	ea90 0f01 	teq	r0, r1
 80003d0:	bf1c      	itt	ne
 80003d2:	2000      	movne	r0, #0
 80003d4:	4770      	bxne	lr
 80003d6:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 80003da:	d104      	bne.n	80003e6 <__addsf3+0x126>
 80003dc:	0040      	lsls	r0, r0, #1
 80003de:	bf28      	it	cs
 80003e0:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80003e4:	4770      	bx	lr
 80003e6:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80003ea:	bf3c      	itt	cc
 80003ec:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 80003f0:	4770      	bxcc	lr
 80003f2:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80003f6:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80003fa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003fe:	4770      	bx	lr
 8000400:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000404:	bf16      	itet	ne
 8000406:	4608      	movne	r0, r1
 8000408:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800040c:	4601      	movne	r1, r0
 800040e:	0242      	lsls	r2, r0, #9
 8000410:	bf06      	itte	eq
 8000412:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000416:	ea90 0f01 	teqeq	r0, r1
 800041a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 800041e:	4770      	bx	lr

08000420 <__aeabi_ui2f>:
 8000420:	f04f 0300 	mov.w	r3, #0
 8000424:	e004      	b.n	8000430 <__aeabi_i2f+0x8>
 8000426:	bf00      	nop

08000428 <__aeabi_i2f>:
 8000428:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	ea5f 0c00 	movs.w	ip, r0
 8000434:	bf08      	it	eq
 8000436:	4770      	bxeq	lr
 8000438:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 800043c:	4601      	mov	r1, r0
 800043e:	f04f 0000 	mov.w	r0, #0
 8000442:	e01c      	b.n	800047e <__aeabi_l2f+0x2a>

08000444 <__aeabi_ul2f>:
 8000444:	ea50 0201 	orrs.w	r2, r0, r1
 8000448:	bf08      	it	eq
 800044a:	4770      	bxeq	lr
 800044c:	f04f 0300 	mov.w	r3, #0
 8000450:	e00a      	b.n	8000468 <__aeabi_l2f+0x14>
 8000452:	bf00      	nop

08000454 <__aeabi_l2f>:
 8000454:	ea50 0201 	orrs.w	r2, r0, r1
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000460:	d502      	bpl.n	8000468 <__aeabi_l2f+0x14>
 8000462:	4240      	negs	r0, r0
 8000464:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000468:	ea5f 0c01 	movs.w	ip, r1
 800046c:	bf02      	ittt	eq
 800046e:	4684      	moveq	ip, r0
 8000470:	4601      	moveq	r1, r0
 8000472:	2000      	moveq	r0, #0
 8000474:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000478:	bf08      	it	eq
 800047a:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800047e:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000482:	fabc f28c 	clz	r2, ip
 8000486:	3a08      	subs	r2, #8
 8000488:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800048c:	db10      	blt.n	80004b0 <__aeabi_l2f+0x5c>
 800048e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000492:	4463      	add	r3, ip
 8000494:	fa00 fc02 	lsl.w	ip, r0, r2
 8000498:	f1c2 0220 	rsb	r2, r2, #32
 800049c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004a0:	fa20 f202 	lsr.w	r2, r0, r2
 80004a4:	eb43 0002 	adc.w	r0, r3, r2
 80004a8:	bf08      	it	eq
 80004aa:	f020 0001 	biceq.w	r0, r0, #1
 80004ae:	4770      	bx	lr
 80004b0:	f102 0220 	add.w	r2, r2, #32
 80004b4:	fa01 fc02 	lsl.w	ip, r1, r2
 80004b8:	f1c2 0220 	rsb	r2, r2, #32
 80004bc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004c0:	fa21 f202 	lsr.w	r2, r1, r2
 80004c4:	eb43 0002 	adc.w	r0, r3, r2
 80004c8:	bf08      	it	eq
 80004ca:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004ce:	4770      	bx	lr

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b086      	sub	sp, #24
 80004d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d6:	f000 fccf 	bl	8000e78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004da:	f000 f859 	bl	8000590 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004de:	f000 f8c1 	bl	8000664 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004e2:	f000 f891 	bl	8000608 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
   MPU6050_Handle_t handle = {
 80004e6:	2300      	movs	r3, #0
 80004e8:	607b      	str	r3, [r7, #4]
 80004ea:	2307      	movs	r3, #7
 80004ec:	713b      	strb	r3, [r7, #4]
 		  .rate_div = Rate_1KHz_Div,
 		  .gyro_range = Gyro_Range_250s,
 		  .accel_range = Accel_Range_2g
   };
   while (MPU6050_Init(&hi2c1, &my_mpu, handle, 0) != STATUS_OK);
 80004ee:	bf00      	nop
 80004f0:	2300      	movs	r3, #0
 80004f2:	687a      	ldr	r2, [r7, #4]
 80004f4:	491d      	ldr	r1, [pc, #116]	@ (800056c <main+0x9c>)
 80004f6:	481e      	ldr	r0, [pc, #120]	@ (8000570 <main+0xa0>)
 80004f8:	f000 f930 	bl	800075c <MPU6050_Init>
 80004fc:	4603      	mov	r3, r0
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d1f6      	bne.n	80004f0 <main+0x20>
   // MPU6050_Calibrate(&hi2c1, &my_mpu);
   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000502:	2200      	movs	r2, #0
 8000504:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000508:	481a      	ldr	r0, [pc, #104]	@ (8000574 <main+0xa4>)
 800050a:	f000 ff7f 	bl	800140c <HAL_GPIO_WritePin>
   uint32_t freq = 100;
 800050e:	2364      	movs	r3, #100	@ 0x64
 8000510:	617b      	str	r3, [r7, #20]
   uint32_t t = 0, dt = 1000 / freq , prev_time = 0;
 8000512:	2300      	movs	r3, #0
 8000514:	613b      	str	r3, [r7, #16]
 8000516:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800051a:	697b      	ldr	r3, [r7, #20]
 800051c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000520:	60fb      	str	r3, [r7, #12]
 8000522:	2300      	movs	r3, #0
 8000524:	60bb      	str	r3, [r7, #8]
   while (1)
   {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  MPU6050_ReadAccelerometer(&hi2c1, &my_mpu);
 8000526:	4911      	ldr	r1, [pc, #68]	@ (800056c <main+0x9c>)
 8000528:	4811      	ldr	r0, [pc, #68]	@ (8000570 <main+0xa0>)
 800052a:	f000 fb59 	bl	8000be0 <MPU6050_ReadAccelerometer>
	  ax = my_mpu.accel_scaled.x;
 800052e:	4b0f      	ldr	r3, [pc, #60]	@ (800056c <main+0x9c>)
 8000530:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000532:	4a11      	ldr	r2, [pc, #68]	@ (8000578 <main+0xa8>)
 8000534:	6013      	str	r3, [r2, #0]
	  ay = my_mpu.accel_scaled.y;
 8000536:	4b0d      	ldr	r3, [pc, #52]	@ (800056c <main+0x9c>)
 8000538:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800053a:	4a10      	ldr	r2, [pc, #64]	@ (800057c <main+0xac>)
 800053c:	6013      	str	r3, [r2, #0]
	  az = my_mpu.accel_scaled.z;
 800053e:	4b0b      	ldr	r3, [pc, #44]	@ (800056c <main+0x9c>)
 8000540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000542:	4a0f      	ldr	r2, [pc, #60]	@ (8000580 <main+0xb0>)
 8000544:	6013      	str	r3, [r2, #0]
	  MPU6050_ReadGyroscope(&hi2c1, &my_mpu);
 8000546:	4909      	ldr	r1, [pc, #36]	@ (800056c <main+0x9c>)
 8000548:	4809      	ldr	r0, [pc, #36]	@ (8000570 <main+0xa0>)
 800054a:	f000 fac6 	bl	8000ada <MPU6050_ReadGyroscope>
	  gx = my_mpu.gyro_scaled.x;
 800054e:	4b07      	ldr	r3, [pc, #28]	@ (800056c <main+0x9c>)
 8000550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000552:	4a0c      	ldr	r2, [pc, #48]	@ (8000584 <main+0xb4>)
 8000554:	6013      	str	r3, [r2, #0]
	  gy = my_mpu.gyro_scaled.y;
 8000556:	4b05      	ldr	r3, [pc, #20]	@ (800056c <main+0x9c>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800055a:	4a0b      	ldr	r2, [pc, #44]	@ (8000588 <main+0xb8>)
 800055c:	6013      	str	r3, [r2, #0]
	  gz = my_mpu.gyro_scaled.z;
 800055e:	4b03      	ldr	r3, [pc, #12]	@ (800056c <main+0x9c>)
 8000560:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000562:	4a0a      	ldr	r2, [pc, #40]	@ (800058c <main+0xbc>)
 8000564:	6013      	str	r3, [r2, #0]
	  MPU6050_ReadAccelerometer(&hi2c1, &my_mpu);
 8000566:	bf00      	nop
 8000568:	e7dd      	b.n	8000526 <main+0x56>
 800056a:	bf00      	nop
 800056c:	20000000 	.word	0x20000000
 8000570:	20000070 	.word	0x20000070
 8000574:	40011000 	.word	0x40011000
 8000578:	200000c4 	.word	0x200000c4
 800057c:	200000c8 	.word	0x200000c8
 8000580:	200000cc 	.word	0x200000cc
 8000584:	200000d0 	.word	0x200000d0
 8000588:	200000d4 	.word	0x200000d4
 800058c:	200000d8 	.word	0x200000d8

08000590 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b090      	sub	sp, #64	@ 0x40
 8000594:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000596:	f107 0318 	add.w	r3, r7, #24
 800059a:	2228      	movs	r2, #40	@ 0x28
 800059c:	2100      	movs	r1, #0
 800059e:	4618      	mov	r0, r3
 80005a0:	f002 fba2 	bl	8002ce8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a4:	1d3b      	adds	r3, r7, #4
 80005a6:	2200      	movs	r2, #0
 80005a8:	601a      	str	r2, [r3, #0]
 80005aa:	605a      	str	r2, [r3, #4]
 80005ac:	609a      	str	r2, [r3, #8]
 80005ae:	60da      	str	r2, [r3, #12]
 80005b0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005b2:	2302      	movs	r3, #2
 80005b4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005b6:	2301      	movs	r3, #1
 80005b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ba:	2310      	movs	r3, #16
 80005bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005be:	2300      	movs	r3, #0
 80005c0:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c2:	f107 0318 	add.w	r3, r7, #24
 80005c6:	4618      	mov	r0, r3
 80005c8:	f001 ff92 	bl	80024f0 <HAL_RCC_OscConfig>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80005d2:	f000 f89f 	bl	8000714 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d6:	230f      	movs	r3, #15
 80005d8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005da:	2300      	movs	r3, #0
 80005dc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005de:	2300      	movs	r3, #0
 80005e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005e2:	2300      	movs	r3, #0
 80005e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e6:	2300      	movs	r3, #0
 80005e8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005ea:	1d3b      	adds	r3, r7, #4
 80005ec:	2100      	movs	r1, #0
 80005ee:	4618      	mov	r0, r3
 80005f0:	f002 fa00 	bl	80029f4 <HAL_RCC_ClockConfig>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80005fa:	f000 f88b 	bl	8000714 <Error_Handler>
  }
}
 80005fe:	bf00      	nop
 8000600:	3740      	adds	r7, #64	@ 0x40
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
	...

08000608 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800060c:	4b12      	ldr	r3, [pc, #72]	@ (8000658 <MX_I2C1_Init+0x50>)
 800060e:	4a13      	ldr	r2, [pc, #76]	@ (800065c <MX_I2C1_Init+0x54>)
 8000610:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000612:	4b11      	ldr	r3, [pc, #68]	@ (8000658 <MX_I2C1_Init+0x50>)
 8000614:	4a12      	ldr	r2, [pc, #72]	@ (8000660 <MX_I2C1_Init+0x58>)
 8000616:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000618:	4b0f      	ldr	r3, [pc, #60]	@ (8000658 <MX_I2C1_Init+0x50>)
 800061a:	2200      	movs	r2, #0
 800061c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800061e:	4b0e      	ldr	r3, [pc, #56]	@ (8000658 <MX_I2C1_Init+0x50>)
 8000620:	2200      	movs	r2, #0
 8000622:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000624:	4b0c      	ldr	r3, [pc, #48]	@ (8000658 <MX_I2C1_Init+0x50>)
 8000626:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800062a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800062c:	4b0a      	ldr	r3, [pc, #40]	@ (8000658 <MX_I2C1_Init+0x50>)
 800062e:	2200      	movs	r2, #0
 8000630:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000632:	4b09      	ldr	r3, [pc, #36]	@ (8000658 <MX_I2C1_Init+0x50>)
 8000634:	2200      	movs	r2, #0
 8000636:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000638:	4b07      	ldr	r3, [pc, #28]	@ (8000658 <MX_I2C1_Init+0x50>)
 800063a:	2200      	movs	r2, #0
 800063c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800063e:	4b06      	ldr	r3, [pc, #24]	@ (8000658 <MX_I2C1_Init+0x50>)
 8000640:	2200      	movs	r2, #0
 8000642:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000644:	4804      	ldr	r0, [pc, #16]	@ (8000658 <MX_I2C1_Init+0x50>)
 8000646:	f000 fef9 	bl	800143c <HAL_I2C_Init>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000650:	f000 f860 	bl	8000714 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000654:	bf00      	nop
 8000656:	bd80      	pop	{r7, pc}
 8000658:	20000070 	.word	0x20000070
 800065c:	40005400 	.word	0x40005400
 8000660:	00061a80 	.word	0x00061a80

08000664 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b088      	sub	sp, #32
 8000668:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066a:	f107 0310 	add.w	r3, r7, #16
 800066e:	2200      	movs	r2, #0
 8000670:	601a      	str	r2, [r3, #0]
 8000672:	605a      	str	r2, [r3, #4]
 8000674:	609a      	str	r2, [r3, #8]
 8000676:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000678:	4b24      	ldr	r3, [pc, #144]	@ (800070c <MX_GPIO_Init+0xa8>)
 800067a:	699b      	ldr	r3, [r3, #24]
 800067c:	4a23      	ldr	r2, [pc, #140]	@ (800070c <MX_GPIO_Init+0xa8>)
 800067e:	f043 0310 	orr.w	r3, r3, #16
 8000682:	6193      	str	r3, [r2, #24]
 8000684:	4b21      	ldr	r3, [pc, #132]	@ (800070c <MX_GPIO_Init+0xa8>)
 8000686:	699b      	ldr	r3, [r3, #24]
 8000688:	f003 0310 	and.w	r3, r3, #16
 800068c:	60fb      	str	r3, [r7, #12]
 800068e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000690:	4b1e      	ldr	r3, [pc, #120]	@ (800070c <MX_GPIO_Init+0xa8>)
 8000692:	699b      	ldr	r3, [r3, #24]
 8000694:	4a1d      	ldr	r2, [pc, #116]	@ (800070c <MX_GPIO_Init+0xa8>)
 8000696:	f043 0320 	orr.w	r3, r3, #32
 800069a:	6193      	str	r3, [r2, #24]
 800069c:	4b1b      	ldr	r3, [pc, #108]	@ (800070c <MX_GPIO_Init+0xa8>)
 800069e:	699b      	ldr	r3, [r3, #24]
 80006a0:	f003 0320 	and.w	r3, r3, #32
 80006a4:	60bb      	str	r3, [r7, #8]
 80006a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a8:	4b18      	ldr	r3, [pc, #96]	@ (800070c <MX_GPIO_Init+0xa8>)
 80006aa:	699b      	ldr	r3, [r3, #24]
 80006ac:	4a17      	ldr	r2, [pc, #92]	@ (800070c <MX_GPIO_Init+0xa8>)
 80006ae:	f043 0304 	orr.w	r3, r3, #4
 80006b2:	6193      	str	r3, [r2, #24]
 80006b4:	4b15      	ldr	r3, [pc, #84]	@ (800070c <MX_GPIO_Init+0xa8>)
 80006b6:	699b      	ldr	r3, [r3, #24]
 80006b8:	f003 0304 	and.w	r3, r3, #4
 80006bc:	607b      	str	r3, [r7, #4]
 80006be:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006c0:	4b12      	ldr	r3, [pc, #72]	@ (800070c <MX_GPIO_Init+0xa8>)
 80006c2:	699b      	ldr	r3, [r3, #24]
 80006c4:	4a11      	ldr	r2, [pc, #68]	@ (800070c <MX_GPIO_Init+0xa8>)
 80006c6:	f043 0308 	orr.w	r3, r3, #8
 80006ca:	6193      	str	r3, [r2, #24]
 80006cc:	4b0f      	ldr	r3, [pc, #60]	@ (800070c <MX_GPIO_Init+0xa8>)
 80006ce:	699b      	ldr	r3, [r3, #24]
 80006d0:	f003 0308 	and.w	r3, r3, #8
 80006d4:	603b      	str	r3, [r7, #0]
 80006d6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80006d8:	2201      	movs	r2, #1
 80006da:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006de:	480c      	ldr	r0, [pc, #48]	@ (8000710 <MX_GPIO_Init+0xac>)
 80006e0:	f000 fe94 	bl	800140c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80006e4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ea:	2301      	movs	r3, #1
 80006ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ee:	2300      	movs	r3, #0
 80006f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f2:	2302      	movs	r3, #2
 80006f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006f6:	f107 0310 	add.w	r3, r7, #16
 80006fa:	4619      	mov	r1, r3
 80006fc:	4804      	ldr	r0, [pc, #16]	@ (8000710 <MX_GPIO_Init+0xac>)
 80006fe:	f000 fd01 	bl	8001104 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000702:	bf00      	nop
 8000704:	3720      	adds	r7, #32
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	40021000 	.word	0x40021000
 8000710:	40011000 	.word	0x40011000

08000714 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000718:	b672      	cpsid	i
}
 800071a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800071c:	bf00      	nop
 800071e:	e7fd      	b.n	800071c <Error_Handler+0x8>

08000720 <MPU6050_ReadWhoAmI>:
int16_t offset_ax = 0, offset_ay = 0, offset_az = 0, offset_gx = 0, offset_gy = 0, offset_gz = 0;

int16_t g_accel_val = (int16_t)16384;

status_t MPU6050_ReadWhoAmI(I2C_HandleTypeDef *hi2c, MPU6050_t *mpu, uint8_t is_high_addr, uint8_t *buffer)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b088      	sub	sp, #32
 8000724:	af04      	add	r7, sp, #16
 8000726:	60f8      	str	r0, [r7, #12]
 8000728:	60b9      	str	r1, [r7, #8]
 800072a:	603b      	str	r3, [r7, #0]
 800072c:	4613      	mov	r3, r2
 800072e:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Read(hi2c, (mpu->address << 1), (uint8_t)MPU6050_REG_WHO_AM_I, 1, buffer, 1, MPU6050_DEFAULT_TIMEOUT);
 8000730:	68bb      	ldr	r3, [r7, #8]
 8000732:	791b      	ldrb	r3, [r3, #4]
 8000734:	005b      	lsls	r3, r3, #1
 8000736:	b299      	uxth	r1, r3
 8000738:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800073c:	9302      	str	r3, [sp, #8]
 800073e:	2301      	movs	r3, #1
 8000740:	9301      	str	r3, [sp, #4]
 8000742:	683b      	ldr	r3, [r7, #0]
 8000744:	9300      	str	r3, [sp, #0]
 8000746:	2301      	movs	r3, #1
 8000748:	2275      	movs	r2, #117	@ 0x75
 800074a:	68f8      	ldr	r0, [r7, #12]
 800074c:	f001 f8b4 	bl	80018b8 <HAL_I2C_Mem_Read>
    return STATUS_OK;
 8000750:	2300      	movs	r3, #0
}
 8000752:	4618      	mov	r0, r3
 8000754:	3710      	adds	r7, #16
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
	...

0800075c <MPU6050_Init>:

status_t MPU6050_Init(I2C_HandleTypeDef *hi2c, MPU6050_t* mpu, MPU6050_Handle_t handle , uint8_t is_high_addr)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b08a      	sub	sp, #40	@ 0x28
 8000760:	af04      	add	r7, sp, #16
 8000762:	60f8      	str	r0, [r7, #12]
 8000764:	60b9      	str	r1, [r7, #8]
 8000766:	607a      	str	r2, [r7, #4]
 8000768:	70fb      	strb	r3, [r7, #3]
    uint8_t tmp_byte;
    uint8_t check_buffer=0;
 800076a:	2300      	movs	r3, #0
 800076c:	757b      	strb	r3, [r7, #21]

    MPU6050_ReadWhoAmI(hi2c, mpu, is_high_addr, &check_buffer);
 800076e:	f107 0315 	add.w	r3, r7, #21
 8000772:	78fa      	ldrb	r2, [r7, #3]
 8000774:	68b9      	ldr	r1, [r7, #8]
 8000776:	68f8      	ldr	r0, [r7, #12]
 8000778:	f7ff ffd2 	bl	8000720 <MPU6050_ReadWhoAmI>

    /* Check WHO_AM_I value */
    if (check_buffer == (0x68 | is_high_addr))
 800077c:	78fb      	ldrb	r3, [r7, #3]
 800077e:	f043 0368 	orr.w	r3, r3, #104	@ 0x68
 8000782:	b2da      	uxtb	r2, r3
 8000784:	7d7b      	ldrb	r3, [r7, #21]
 8000786:	429a      	cmp	r2, r3
 8000788:	d13d      	bne.n	8000806 <MPU6050_Init+0xaa>
    {
        // TODO: Implement intialization process

        /* Wake-up routine */
        tmp_byte = 0x00;
 800078a:	2300      	movs	r3, #0
 800078c:	75bb      	strb	r3, [r7, #22]
        HAL_StatusTypeDef wkup_status = HAL_I2C_Mem_Write(hi2c, (mpu->address << 1), (uint8_t)MPU6050_REG_PWR_MGMT_1, 1, &tmp_byte, 1, MPU6050_DEFAULT_TIMEOUT);
 800078e:	68bb      	ldr	r3, [r7, #8]
 8000790:	791b      	ldrb	r3, [r3, #4]
 8000792:	005b      	lsls	r3, r3, #1
 8000794:	b299      	uxth	r1, r3
 8000796:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800079a:	9302      	str	r3, [sp, #8]
 800079c:	2301      	movs	r3, #1
 800079e:	9301      	str	r3, [sp, #4]
 80007a0:	f107 0316 	add.w	r3, r7, #22
 80007a4:	9300      	str	r3, [sp, #0]
 80007a6:	2301      	movs	r3, #1
 80007a8:	226b      	movs	r2, #107	@ 0x6b
 80007aa:	68f8      	ldr	r0, [r7, #12]
 80007ac:	f000 ff8a 	bl	80016c4 <HAL_I2C_Mem_Write>
 80007b0:	4603      	mov	r3, r0
 80007b2:	75fb      	strb	r3, [r7, #23]

        //uint8_t debug = 0xFF;
        //HAL_I2C_Mem_Read(hi2c, (mpu->address << 1), (uint8_t)MPU6050_REG_PWR_MGMT_1, 1, &debug, 1, MPU6050_DEFAULT_TIMEOUT);

        /* Set the sample rate */
        MPU6050_ConfigSampleRate(hi2c, mpu, handle.rate_div);
 80007b4:	793b      	ldrb	r3, [r7, #4]
 80007b6:	461a      	mov	r2, r3
 80007b8:	68b9      	ldr	r1, [r7, #8]
 80007ba:	68f8      	ldr	r0, [r7, #12]
 80007bc:	f000 f82e 	bl	800081c <MPU6050_ConfigSampleRate>
        //HAL_I2C_Mem_Read(hi2c, (mpu->address << 1), (uint8_t)MPU6050_REG_SMPRT_DIV, 1, &debug, 1, MPU6050_DEFAULT_TIMEOUT);

        /* Set the gyroscope range */
        MPU6050_ConfigGyroscope(hi2c, mpu, handle.gyro_range);
 80007c0:	797b      	ldrb	r3, [r7, #5]
 80007c2:	461a      	mov	r2, r3
 80007c4:	68b9      	ldr	r1, [r7, #8]
 80007c6:	68f8      	ldr	r0, [r7, #12]
 80007c8:	f000 f848 	bl	800085c <MPU6050_ConfigGyroscope>
        //HAL_I2C_Mem_Read(hi2c, (mpu->address << 1), (uint8_t)MPU6050_REG_GYRO_CONFIG, 1, &debug, 1, MPU6050_DEFAULT_TIMEOUT);

        /* Set the accelerometer range */
        MPU6050_ConfigAccelerometer(hi2c, mpu, handle.accel_range);
 80007cc:	79bb      	ldrb	r3, [r7, #6]
 80007ce:	461a      	mov	r2, r3
 80007d0:	68b9      	ldr	r1, [r7, #8]
 80007d2:	68f8      	ldr	r0, [r7, #12]
 80007d4:	f000 f8a2 	bl	800091c <MPU6050_ConfigAccelerometer>
        //HAL_I2C_Mem_Read(hi2c, (mpu->address << 1), (uint8_t)MPU6050_REG_ACCEL_CONFIG, 1, &debug, 1, MPU6050_DEFAULT_TIMEOUT);

        /* Set the internal Digital Low-Pass Filter bandwidth */
        MPU6050_ConfigDLFP(hi2c, mpu, handle.filter_bandwidth);
 80007d8:	79fb      	ldrb	r3, [r7, #7]
 80007da:	461a      	mov	r2, r3
 80007dc:	68b9      	ldr	r1, [r7, #8]
 80007de:	68f8      	ldr	r0, [r7, #12]
 80007e0:	f000 f90e 	bl	8000a00 <MPU6050_ConfigDLFP>

        MPU6050_SetAccelerometerOffset(mpu, MPU6050_OFFSET_AX, MPU6050_OFFSET_AY, MPU6050_OFFSET_AZ);
 80007e4:	4b0b      	ldr	r3, [pc, #44]	@ (8000814 <MPU6050_Init+0xb8>)
 80007e6:	f240 1281 	movw	r2, #385	@ 0x181
 80007ea:	f06f 0194 	mvn.w	r1, #148	@ 0x94
 80007ee:	68b8      	ldr	r0, [r7, #8]
 80007f0:	f000 f957 	bl	8000aa2 <MPU6050_SetAccelerometerOffset>
        MPU6050_SetGyroscopeOffset(mpu, MPU6050_OFFSET_GX, MPU6050_OFFSET_GY, MPU6050_OFFSET_GZ);
 80007f4:	4b08      	ldr	r3, [pc, #32]	@ (8000818 <MPU6050_Init+0xbc>)
 80007f6:	22c1      	movs	r2, #193	@ 0xc1
 80007f8:	f240 1119 	movw	r1, #281	@ 0x119
 80007fc:	68b8      	ldr	r0, [r7, #8]
 80007fe:	f000 f934 	bl	8000a6a <MPU6050_SetGyroscopeOffset>

        return STATUS_OK;
 8000802:	2300      	movs	r3, #0
 8000804:	e001      	b.n	800080a <MPU6050_Init+0xae>
    }
    
    return STATUS_FAIL;
 8000806:	f04f 33ff 	mov.w	r3, #4294967295
}
 800080a:	4618      	mov	r0, r3
 800080c:	3718      	adds	r7, #24
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	ffffba50 	.word	0xffffba50
 8000818:	fffffe1a 	.word	0xfffffe1a

0800081c <MPU6050_ConfigSampleRate>:

status_t MPU6050_ConfigSampleRate(I2C_HandleTypeDef *hi2c, MPU6050_t* mpu, MPU6050_SampleRateDiv_t rate_div)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b08a      	sub	sp, #40	@ 0x28
 8000820:	af04      	add	r7, sp, #16
 8000822:	60f8      	str	r0, [r7, #12]
 8000824:	60b9      	str	r1, [r7, #8]
 8000826:	4613      	mov	r3, r2
 8000828:	71fb      	strb	r3, [r7, #7]
    uint8_t tmp_byte = (uint8_t)rate_div;
 800082a:	79fb      	ldrb	r3, [r7, #7]
 800082c:	75fb      	strb	r3, [r7, #23]

    // Write the SMPRT_DIV setting to the register
    HAL_I2C_Mem_Write(hi2c, (mpu->address << 1), (uint8_t)MPU6050_REG_SMPRT_DIV, 1, &tmp_byte, 1, MPU6050_DEFAULT_TIMEOUT);
 800082e:	68bb      	ldr	r3, [r7, #8]
 8000830:	791b      	ldrb	r3, [r3, #4]
 8000832:	005b      	lsls	r3, r3, #1
 8000834:	b299      	uxth	r1, r3
 8000836:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800083a:	9302      	str	r3, [sp, #8]
 800083c:	2301      	movs	r3, #1
 800083e:	9301      	str	r3, [sp, #4]
 8000840:	f107 0317 	add.w	r3, r7, #23
 8000844:	9300      	str	r3, [sp, #0]
 8000846:	2301      	movs	r3, #1
 8000848:	2219      	movs	r2, #25
 800084a:	68f8      	ldr	r0, [r7, #12]
 800084c:	f000 ff3a 	bl	80016c4 <HAL_I2C_Mem_Write>

    return STATUS_OK;
 8000850:	2300      	movs	r3, #0
}
 8000852:	4618      	mov	r0, r3
 8000854:	3718      	adds	r7, #24
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
	...

0800085c <MPU6050_ConfigGyroscope>:

status_t MPU6050_ConfigGyroscope(I2C_HandleTypeDef *hi2c, MPU6050_t *mpu, MPU6050_GyroscopeRange_t gyro_range)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b08a      	sub	sp, #40	@ 0x28
 8000860:	af04      	add	r7, sp, #16
 8000862:	60f8      	str	r0, [r7, #12]
 8000864:	60b9      	str	r1, [r7, #8]
 8000866:	4613      	mov	r3, r2
 8000868:	71fb      	strb	r3, [r7, #7]
    uint8_t tmp_byte;

    // Read the current register value
    HAL_I2C_Mem_Read(hi2c, (mpu->address << 1), (uint8_t)MPU6050_REG_GYRO_CONFIG, 1, &tmp_byte, 1, MPU6050_DEFAULT_TIMEOUT);
 800086a:	68bb      	ldr	r3, [r7, #8]
 800086c:	791b      	ldrb	r3, [r3, #4]
 800086e:	005b      	lsls	r3, r3, #1
 8000870:	b299      	uxth	r1, r3
 8000872:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000876:	9302      	str	r3, [sp, #8]
 8000878:	2301      	movs	r3, #1
 800087a:	9301      	str	r3, [sp, #4]
 800087c:	f107 0317 	add.w	r3, r7, #23
 8000880:	9300      	str	r3, [sp, #0]
 8000882:	2301      	movs	r3, #1
 8000884:	221b      	movs	r2, #27
 8000886:	68f8      	ldr	r0, [r7, #12]
 8000888:	f001 f816 	bl	80018b8 <HAL_I2C_Mem_Read>

    // Bit-masking 
    tmp_byte &= !(0x03 << 3);
 800088c:	2300      	movs	r3, #0
 800088e:	75fb      	strb	r3, [r7, #23]
    tmp_byte |=  (uint8_t)gyro_range << 3;
 8000890:	79fb      	ldrb	r3, [r7, #7]
 8000892:	00db      	lsls	r3, r3, #3
 8000894:	b25a      	sxtb	r2, r3
 8000896:	7dfb      	ldrb	r3, [r7, #23]
 8000898:	b25b      	sxtb	r3, r3
 800089a:	4313      	orrs	r3, r2
 800089c:	b25b      	sxtb	r3, r3
 800089e:	b2db      	uxtb	r3, r3
 80008a0:	75fb      	strb	r3, [r7, #23]

    // Write the FS_SEL setting to the register
    HAL_I2C_Mem_Write(hi2c, (mpu->address << 1), (uint8_t)MPU6050_REG_GYRO_CONFIG, 1, &tmp_byte, 1, MPU6050_DEFAULT_TIMEOUT);
 80008a2:	68bb      	ldr	r3, [r7, #8]
 80008a4:	791b      	ldrb	r3, [r3, #4]
 80008a6:	005b      	lsls	r3, r3, #1
 80008a8:	b299      	uxth	r1, r3
 80008aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008ae:	9302      	str	r3, [sp, #8]
 80008b0:	2301      	movs	r3, #1
 80008b2:	9301      	str	r3, [sp, #4]
 80008b4:	f107 0317 	add.w	r3, r7, #23
 80008b8:	9300      	str	r3, [sp, #0]
 80008ba:	2301      	movs	r3, #1
 80008bc:	221b      	movs	r2, #27
 80008be:	68f8      	ldr	r0, [r7, #12]
 80008c0:	f000 ff00 	bl	80016c4 <HAL_I2C_Mem_Write>

    // Set the scaling factor for true data
    switch (gyro_range)
 80008c4:	79fb      	ldrb	r3, [r7, #7]
 80008c6:	2b03      	cmp	r3, #3
 80008c8:	d81a      	bhi.n	8000900 <MPU6050_ConfigGyroscope+0xa4>
 80008ca:	a201      	add	r2, pc, #4	@ (adr r2, 80008d0 <MPU6050_ConfigGyroscope+0x74>)
 80008cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008d0:	080008e1 	.word	0x080008e1
 80008d4:	080008e9 	.word	0x080008e9
 80008d8:	080008f1 	.word	0x080008f1
 80008dc:	080008f9 	.word	0x080008f9
    {
    case Gyro_Range_250s:
        mpu->gyro_scaling_factor = 1.0 / 131.0 * DEG2RAD;
 80008e0:	68bb      	ldr	r3, [r7, #8]
 80008e2:	4a0a      	ldr	r2, [pc, #40]	@ (800090c <MPU6050_ConfigGyroscope+0xb0>)
 80008e4:	609a      	str	r2, [r3, #8]
        break;
 80008e6:	e00c      	b.n	8000902 <MPU6050_ConfigGyroscope+0xa6>
    case Gyro_Range_500s:
        mpu->gyro_scaling_factor = 1.0 / 65.5 * DEG2RAD;
 80008e8:	68bb      	ldr	r3, [r7, #8]
 80008ea:	4a09      	ldr	r2, [pc, #36]	@ (8000910 <MPU6050_ConfigGyroscope+0xb4>)
 80008ec:	609a      	str	r2, [r3, #8]
        break;
 80008ee:	e008      	b.n	8000902 <MPU6050_ConfigGyroscope+0xa6>
    case Gyro_Range_1000s:
        mpu->gyro_scaling_factor = 1.0 / 32.8 * DEG2RAD;
 80008f0:	68bb      	ldr	r3, [r7, #8]
 80008f2:	4a08      	ldr	r2, [pc, #32]	@ (8000914 <MPU6050_ConfigGyroscope+0xb8>)
 80008f4:	609a      	str	r2, [r3, #8]
        break;
 80008f6:	e004      	b.n	8000902 <MPU6050_ConfigGyroscope+0xa6>
    case Gyro_Range_2000s:
        mpu->gyro_scaling_factor = 1.0 / 16.4 * DEG2RAD;
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	4a07      	ldr	r2, [pc, #28]	@ (8000918 <MPU6050_ConfigGyroscope+0xbc>)
 80008fc:	609a      	str	r2, [r3, #8]
        break;
 80008fe:	e000      	b.n	8000902 <MPU6050_ConfigGyroscope+0xa6>
    default:
        break;
 8000900:	bf00      	nop
    }

    return STATUS_OK;
 8000902:	2300      	movs	r3, #0
}
 8000904:	4618      	mov	r0, r3
 8000906:	3718      	adds	r7, #24
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	390bb3fd 	.word	0x390bb3fd
 8000910:	398bb3fd 	.word	0x398bb3fd
 8000914:	3a0b7d78 	.word	0x3a0b7d78
 8000918:	3a8b7d78 	.word	0x3a8b7d78

0800091c <MPU6050_ConfigAccelerometer>:

status_t MPU6050_ConfigAccelerometer(I2C_HandleTypeDef *hi2c, MPU6050_t *mpu, MPU6050_AccelerometerRange_t accel_range)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b08a      	sub	sp, #40	@ 0x28
 8000920:	af04      	add	r7, sp, #16
 8000922:	60f8      	str	r0, [r7, #12]
 8000924:	60b9      	str	r1, [r7, #8]
 8000926:	4613      	mov	r3, r2
 8000928:	71fb      	strb	r3, [r7, #7]
    uint8_t tmp_byte;

    // Read the current register value
    HAL_I2C_Mem_Read(hi2c, (mpu->address << 1), (uint8_t)MPU6050_REG_ACCEL_CONFIG, 1, &tmp_byte, 1, MPU6050_DEFAULT_TIMEOUT);
 800092a:	68bb      	ldr	r3, [r7, #8]
 800092c:	791b      	ldrb	r3, [r3, #4]
 800092e:	005b      	lsls	r3, r3, #1
 8000930:	b299      	uxth	r1, r3
 8000932:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000936:	9302      	str	r3, [sp, #8]
 8000938:	2301      	movs	r3, #1
 800093a:	9301      	str	r3, [sp, #4]
 800093c:	f107 0317 	add.w	r3, r7, #23
 8000940:	9300      	str	r3, [sp, #0]
 8000942:	2301      	movs	r3, #1
 8000944:	221c      	movs	r2, #28
 8000946:	68f8      	ldr	r0, [r7, #12]
 8000948:	f000 ffb6 	bl	80018b8 <HAL_I2C_Mem_Read>

    // Bit-masking 
    tmp_byte &= !(0x03 << 3);
 800094c:	2300      	movs	r3, #0
 800094e:	75fb      	strb	r3, [r7, #23]
    tmp_byte |=  (uint8_t)accel_range << 3;
 8000950:	79fb      	ldrb	r3, [r7, #7]
 8000952:	00db      	lsls	r3, r3, #3
 8000954:	b25a      	sxtb	r2, r3
 8000956:	7dfb      	ldrb	r3, [r7, #23]
 8000958:	b25b      	sxtb	r3, r3
 800095a:	4313      	orrs	r3, r2
 800095c:	b25b      	sxtb	r3, r3
 800095e:	b2db      	uxtb	r3, r3
 8000960:	75fb      	strb	r3, [r7, #23]

    // Write the AFS_SEL setting to the register
    HAL_I2C_Mem_Write(hi2c, (mpu->address << 1), (uint8_t)MPU6050_REG_ACCEL_CONFIG, 1, &tmp_byte, 1, MPU6050_DEFAULT_TIMEOUT);
 8000962:	68bb      	ldr	r3, [r7, #8]
 8000964:	791b      	ldrb	r3, [r3, #4]
 8000966:	005b      	lsls	r3, r3, #1
 8000968:	b299      	uxth	r1, r3
 800096a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800096e:	9302      	str	r3, [sp, #8]
 8000970:	2301      	movs	r3, #1
 8000972:	9301      	str	r3, [sp, #4]
 8000974:	f107 0317 	add.w	r3, r7, #23
 8000978:	9300      	str	r3, [sp, #0]
 800097a:	2301      	movs	r3, #1
 800097c:	221c      	movs	r2, #28
 800097e:	68f8      	ldr	r0, [r7, #12]
 8000980:	f000 fea0 	bl	80016c4 <HAL_I2C_Mem_Write>

    // Set the scaling factor for true data
    switch (accel_range)
 8000984:	79fb      	ldrb	r3, [r7, #7]
 8000986:	2b03      	cmp	r3, #3
 8000988:	d82a      	bhi.n	80009e0 <MPU6050_ConfigAccelerometer+0xc4>
 800098a:	a201      	add	r2, pc, #4	@ (adr r2, 8000990 <MPU6050_ConfigAccelerometer+0x74>)
 800098c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000990:	080009a1 	.word	0x080009a1
 8000994:	080009b1 	.word	0x080009b1
 8000998:	080009c1 	.word	0x080009c1
 800099c:	080009d1 	.word	0x080009d1
    {
    case Accel_Range_2g:
        mpu->accel_scaling_factor = G / 16384.0;
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	4a12      	ldr	r2, [pc, #72]	@ (80009ec <MPU6050_ConfigAccelerometer+0xd0>)
 80009a4:	60da      	str	r2, [r3, #12]
        g_accel_val = (int16_t)16384;
 80009a6:	4b12      	ldr	r3, [pc, #72]	@ (80009f0 <MPU6050_ConfigAccelerometer+0xd4>)
 80009a8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80009ac:	801a      	strh	r2, [r3, #0]
        break;
 80009ae:	e018      	b.n	80009e2 <MPU6050_ConfigAccelerometer+0xc6>
    case Accel_Range_4g:
        mpu->accel_scaling_factor = G / 8192.0;
 80009b0:	68bb      	ldr	r3, [r7, #8]
 80009b2:	4a10      	ldr	r2, [pc, #64]	@ (80009f4 <MPU6050_ConfigAccelerometer+0xd8>)
 80009b4:	60da      	str	r2, [r3, #12]
        g_accel_val = (int16_t)8192;
 80009b6:	4b0e      	ldr	r3, [pc, #56]	@ (80009f0 <MPU6050_ConfigAccelerometer+0xd4>)
 80009b8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80009bc:	801a      	strh	r2, [r3, #0]
        break;
 80009be:	e010      	b.n	80009e2 <MPU6050_ConfigAccelerometer+0xc6>
    case Accel_Range_8g:
        mpu->accel_scaling_factor = G / 4096.0;
 80009c0:	68bb      	ldr	r3, [r7, #8]
 80009c2:	4a0d      	ldr	r2, [pc, #52]	@ (80009f8 <MPU6050_ConfigAccelerometer+0xdc>)
 80009c4:	60da      	str	r2, [r3, #12]
        g_accel_val = (int16_t)4096;
 80009c6:	4b0a      	ldr	r3, [pc, #40]	@ (80009f0 <MPU6050_ConfigAccelerometer+0xd4>)
 80009c8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80009cc:	801a      	strh	r2, [r3, #0]
        break;
 80009ce:	e008      	b.n	80009e2 <MPU6050_ConfigAccelerometer+0xc6>
    case Accel_Range_16g:
        mpu->accel_scaling_factor = G / 2048.0;
 80009d0:	68bb      	ldr	r3, [r7, #8]
 80009d2:	4a0a      	ldr	r2, [pc, #40]	@ (80009fc <MPU6050_ConfigAccelerometer+0xe0>)
 80009d4:	60da      	str	r2, [r3, #12]
        g_accel_val = (int16_t)2048;
 80009d6:	4b06      	ldr	r3, [pc, #24]	@ (80009f0 <MPU6050_ConfigAccelerometer+0xd4>)
 80009d8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80009dc:	801a      	strh	r2, [r3, #0]
        break;
 80009de:	e000      	b.n	80009e2 <MPU6050_ConfigAccelerometer+0xc6>
    default:
        break;
 80009e0:	bf00      	nop
    }

    return STATUS_OK;
 80009e2:	2300      	movs	r3, #0
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	3718      	adds	r7, #24
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	3a1cf5c3 	.word	0x3a1cf5c3
 80009f0:	20000044 	.word	0x20000044
 80009f4:	3a9cf5c3 	.word	0x3a9cf5c3
 80009f8:	3b1cf5c3 	.word	0x3b1cf5c3
 80009fc:	3b9cf5c3 	.word	0x3b9cf5c3

08000a00 <MPU6050_ConfigDLFP>:

status_t MPU6050_ConfigDLFP(I2C_HandleTypeDef *hi2c, MPU6050_t *mpu, MPU6050_DLFP_t filter_bandwidth)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b08a      	sub	sp, #40	@ 0x28
 8000a04:	af04      	add	r7, sp, #16
 8000a06:	60f8      	str	r0, [r7, #12]
 8000a08:	60b9      	str	r1, [r7, #8]
 8000a0a:	4613      	mov	r3, r2
 8000a0c:	71fb      	strb	r3, [r7, #7]
    uint8_t tmp_byte;

    // Read the current register value
    HAL_I2C_Mem_Read(hi2c, (mpu->address << 1), (uint8_t)MPU6050_REG_CONFIG, 1, &tmp_byte, 1, MPU6050_DEFAULT_TIMEOUT);
 8000a0e:	68bb      	ldr	r3, [r7, #8]
 8000a10:	791b      	ldrb	r3, [r3, #4]
 8000a12:	005b      	lsls	r3, r3, #1
 8000a14:	b299      	uxth	r1, r3
 8000a16:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a1a:	9302      	str	r3, [sp, #8]
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	9301      	str	r3, [sp, #4]
 8000a20:	f107 0317 	add.w	r3, r7, #23
 8000a24:	9300      	str	r3, [sp, #0]
 8000a26:	2301      	movs	r3, #1
 8000a28:	221a      	movs	r2, #26
 8000a2a:	68f8      	ldr	r0, [r7, #12]
 8000a2c:	f000 ff44 	bl	80018b8 <HAL_I2C_Mem_Read>

    // Bit-masking 
    tmp_byte &= !(0x07 << 0);
 8000a30:	2300      	movs	r3, #0
 8000a32:	75fb      	strb	r3, [r7, #23]
    tmp_byte |=  (uint8_t)filter_bandwidth;
 8000a34:	7dfa      	ldrb	r2, [r7, #23]
 8000a36:	79fb      	ldrb	r3, [r7, #7]
 8000a38:	4313      	orrs	r3, r2
 8000a3a:	b2db      	uxtb	r3, r3
 8000a3c:	75fb      	strb	r3, [r7, #23]

    // Write the DLFP bandwidth to the register
    HAL_I2C_Mem_Write(hi2c, (mpu->address << 1), (uint8_t)MPU6050_REG_CONFIG, 1, &tmp_byte, 1, MPU6050_DEFAULT_TIMEOUT);
 8000a3e:	68bb      	ldr	r3, [r7, #8]
 8000a40:	791b      	ldrb	r3, [r3, #4]
 8000a42:	005b      	lsls	r3, r3, #1
 8000a44:	b299      	uxth	r1, r3
 8000a46:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a4a:	9302      	str	r3, [sp, #8]
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	9301      	str	r3, [sp, #4]
 8000a50:	f107 0317 	add.w	r3, r7, #23
 8000a54:	9300      	str	r3, [sp, #0]
 8000a56:	2301      	movs	r3, #1
 8000a58:	221a      	movs	r2, #26
 8000a5a:	68f8      	ldr	r0, [r7, #12]
 8000a5c:	f000 fe32 	bl	80016c4 <HAL_I2C_Mem_Write>

    return STATUS_OK;
 8000a60:	2300      	movs	r3, #0
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	3718      	adds	r7, #24
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}

08000a6a <MPU6050_SetGyroscopeOffset>:

    return STATUS_OK;
}

status_t MPU6050_SetGyroscopeOffset(MPU6050_t *mpu, int16_t offset_x, int16_t offset_y, int16_t offset_z)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	b085      	sub	sp, #20
 8000a6e:	af00      	add	r7, sp, #0
 8000a70:	60f8      	str	r0, [r7, #12]
 8000a72:	4608      	mov	r0, r1
 8000a74:	4611      	mov	r1, r2
 8000a76:	461a      	mov	r2, r3
 8000a78:	4603      	mov	r3, r0
 8000a7a:	817b      	strh	r3, [r7, #10]
 8000a7c:	460b      	mov	r3, r1
 8000a7e:	813b      	strh	r3, [r7, #8]
 8000a80:	4613      	mov	r3, r2
 8000a82:	80fb      	strh	r3, [r7, #6]
    mpu->gyro_offset.x = offset_x;
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	897a      	ldrh	r2, [r7, #10]
 8000a88:	839a      	strh	r2, [r3, #28]
    mpu->gyro_offset.y = offset_y;
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	893a      	ldrh	r2, [r7, #8]
 8000a8e:	83da      	strh	r2, [r3, #30]
    mpu->gyro_offset.z = offset_z;
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	88fa      	ldrh	r2, [r7, #6]
 8000a94:	841a      	strh	r2, [r3, #32]

    return STATUS_OK;
 8000a96:	2300      	movs	r3, #0
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	3714      	adds	r7, #20
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bc80      	pop	{r7}
 8000aa0:	4770      	bx	lr

08000aa2 <MPU6050_SetAccelerometerOffset>:

status_t MPU6050_SetAccelerometerOffset(MPU6050_t *mpu, int16_t offset_x, int16_t offset_y, int16_t offset_z)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	b085      	sub	sp, #20
 8000aa6:	af00      	add	r7, sp, #0
 8000aa8:	60f8      	str	r0, [r7, #12]
 8000aaa:	4608      	mov	r0, r1
 8000aac:	4611      	mov	r1, r2
 8000aae:	461a      	mov	r2, r3
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	817b      	strh	r3, [r7, #10]
 8000ab4:	460b      	mov	r3, r1
 8000ab6:	813b      	strh	r3, [r7, #8]
 8000ab8:	4613      	mov	r3, r2
 8000aba:	80fb      	strh	r3, [r7, #6]
    mpu->accel_offset.x = offset_x;
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	897a      	ldrh	r2, [r7, #10]
 8000ac0:	845a      	strh	r2, [r3, #34]	@ 0x22
    mpu->accel_offset.y = offset_y;
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	893a      	ldrh	r2, [r7, #8]
 8000ac6:	849a      	strh	r2, [r3, #36]	@ 0x24
    mpu->accel_offset.z = offset_z;
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	88fa      	ldrh	r2, [r7, #6]
 8000acc:	84da      	strh	r2, [r3, #38]	@ 0x26

    return STATUS_OK;
 8000ace:	2300      	movs	r3, #0
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	3714      	adds	r7, #20
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bc80      	pop	{r7}
 8000ad8:	4770      	bx	lr

08000ada <MPU6050_ReadGyroscope>:
    
    return 0;
}

status_t MPU6050_ReadGyroscope(I2C_HandleTypeDef *hi2c, MPU6050_t *mpu)
{
 8000ada:	b580      	push	{r7, lr}
 8000adc:	b088      	sub	sp, #32
 8000ade:	af04      	add	r7, sp, #16
 8000ae0:	6078      	str	r0, [r7, #4]
 8000ae2:	6039      	str	r1, [r7, #0]
    uint8_t data[6];

    HAL_StatusTypeDef gyro_read_status;
    // Read 6 bytes of RAW data starting from ACCEL_XOUT_H register.
    gyro_read_status = HAL_I2C_Mem_Read(hi2c, (mpu->address << 1), (uint8_t)MPU6050_REG_GYRO_XOUT_H, 1, data, 6, MPU6050_DEFAULT_TIMEOUT);
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	791b      	ldrb	r3, [r3, #4]
 8000ae8:	005b      	lsls	r3, r3, #1
 8000aea:	b299      	uxth	r1, r3
 8000aec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000af0:	9302      	str	r3, [sp, #8]
 8000af2:	2306      	movs	r3, #6
 8000af4:	9301      	str	r3, [sp, #4]
 8000af6:	f107 0308 	add.w	r3, r7, #8
 8000afa:	9300      	str	r3, [sp, #0]
 8000afc:	2301      	movs	r3, #1
 8000afe:	2243      	movs	r2, #67	@ 0x43
 8000b00:	6878      	ldr	r0, [r7, #4]
 8000b02:	f000 fed9 	bl	80018b8 <HAL_I2C_Mem_Read>
 8000b06:	4603      	mov	r3, r0
 8000b08:	73fb      	strb	r3, [r7, #15]

    mpu->gyro_raw.x = (int16_t)(data[0] << 8 | data[1]) + mpu->gyro_offset.x;
 8000b0a:	7a3b      	ldrb	r3, [r7, #8]
 8000b0c:	021b      	lsls	r3, r3, #8
 8000b0e:	b21a      	sxth	r2, r3
 8000b10:	7a7b      	ldrb	r3, [r7, #9]
 8000b12:	b21b      	sxth	r3, r3
 8000b14:	4313      	orrs	r3, r2
 8000b16:	b21b      	sxth	r3, r3
 8000b18:	b29a      	uxth	r2, r3
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8000b20:	b29b      	uxth	r3, r3
 8000b22:	4413      	add	r3, r2
 8000b24:	b29b      	uxth	r3, r3
 8000b26:	b21a      	sxth	r2, r3
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	821a      	strh	r2, [r3, #16]
    mpu->gyro_raw.y = (int16_t)(data[2] << 8 | data[3]) + mpu->gyro_offset.y;
 8000b2c:	7abb      	ldrb	r3, [r7, #10]
 8000b2e:	021b      	lsls	r3, r3, #8
 8000b30:	b21a      	sxth	r2, r3
 8000b32:	7afb      	ldrb	r3, [r7, #11]
 8000b34:	b21b      	sxth	r3, r3
 8000b36:	4313      	orrs	r3, r2
 8000b38:	b21b      	sxth	r3, r3
 8000b3a:	b29a      	uxth	r2, r3
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8000b42:	b29b      	uxth	r3, r3
 8000b44:	4413      	add	r3, r2
 8000b46:	b29b      	uxth	r3, r3
 8000b48:	b21a      	sxth	r2, r3
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	825a      	strh	r2, [r3, #18]
    mpu->gyro_raw.z = (int16_t)(data[4] << 8 | data[5]) + mpu->gyro_offset.z;
 8000b4e:	7b3b      	ldrb	r3, [r7, #12]
 8000b50:	021b      	lsls	r3, r3, #8
 8000b52:	b21a      	sxth	r2, r3
 8000b54:	7b7b      	ldrb	r3, [r7, #13]
 8000b56:	b21b      	sxth	r3, r3
 8000b58:	4313      	orrs	r3, r2
 8000b5a:	b21b      	sxth	r3, r3
 8000b5c:	b29a      	uxth	r2, r3
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8000b64:	b29b      	uxth	r3, r3
 8000b66:	4413      	add	r3, r2
 8000b68:	b29b      	uxth	r3, r3
 8000b6a:	b21a      	sxth	r2, r3
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	829a      	strh	r2, [r3, #20]

    // Convert the RAW data into angular acceleration in 'deg/s'
    mpu->gyro_scaled.x = mpu->gyro_raw.x * mpu->gyro_scaling_factor;
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000b76:	4618      	mov	r0, r3
 8000b78:	f7ff fc56 	bl	8000428 <__aeabi_i2f>
 8000b7c:	4602      	mov	r2, r0
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	689b      	ldr	r3, [r3, #8]
 8000b82:	4619      	mov	r1, r3
 8000b84:	4610      	mov	r0, r2
 8000b86:	f7ff fae1 	bl	800014c <__aeabi_fmul>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	62da      	str	r2, [r3, #44]	@ 0x2c
    mpu->gyro_scaled.y = mpu->gyro_raw.y * mpu->gyro_scaling_factor;
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f7ff fc45 	bl	8000428 <__aeabi_i2f>
 8000b9e:	4602      	mov	r2, r0
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	689b      	ldr	r3, [r3, #8]
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4610      	mov	r0, r2
 8000ba8:	f7ff fad0 	bl	800014c <__aeabi_fmul>
 8000bac:	4603      	mov	r3, r0
 8000bae:	461a      	mov	r2, r3
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	631a      	str	r2, [r3, #48]	@ 0x30
    mpu->gyro_scaled.z = mpu->gyro_raw.z * mpu->gyro_scaling_factor;
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f7ff fc34 	bl	8000428 <__aeabi_i2f>
 8000bc0:	4602      	mov	r2, r0
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	689b      	ldr	r3, [r3, #8]
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4610      	mov	r0, r2
 8000bca:	f7ff fabf 	bl	800014c <__aeabi_fmul>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	461a      	mov	r2, r3
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	635a      	str	r2, [r3, #52]	@ 0x34

    return STATUS_OK;
 8000bd6:	2300      	movs	r3, #0
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	3710      	adds	r7, #16
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <MPU6050_ReadAccelerometer>:

status_t MPU6050_ReadAccelerometer(I2C_HandleTypeDef *hi2c, MPU6050_t *mpu)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b088      	sub	sp, #32
 8000be4:	af04      	add	r7, sp, #16
 8000be6:	6078      	str	r0, [r7, #4]
 8000be8:	6039      	str	r1, [r7, #0]
    uint8_t data[6];

    HAL_StatusTypeDef accel_read_status;
    // Read 6 bytes of RAW data starting from ACCEL_XOUT_H register.
    accel_read_status = HAL_I2C_Mem_Read(hi2c, (mpu->address << 1), (uint8_t)MPU6050_REG_ACCEL_XOUT_H, 1, data, 6, MPU6050_DEFAULT_TIMEOUT);
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	791b      	ldrb	r3, [r3, #4]
 8000bee:	005b      	lsls	r3, r3, #1
 8000bf0:	b299      	uxth	r1, r3
 8000bf2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bf6:	9302      	str	r3, [sp, #8]
 8000bf8:	2306      	movs	r3, #6
 8000bfa:	9301      	str	r3, [sp, #4]
 8000bfc:	f107 0308 	add.w	r3, r7, #8
 8000c00:	9300      	str	r3, [sp, #0]
 8000c02:	2301      	movs	r3, #1
 8000c04:	223b      	movs	r2, #59	@ 0x3b
 8000c06:	6878      	ldr	r0, [r7, #4]
 8000c08:	f000 fe56 	bl	80018b8 <HAL_I2C_Mem_Read>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	73fb      	strb	r3, [r7, #15]

    mpu->accel_raw.x = (int16_t)(data[0] << 8 | data[1]) + mpu->accel_offset.x;
 8000c10:	7a3b      	ldrb	r3, [r7, #8]
 8000c12:	021b      	lsls	r3, r3, #8
 8000c14:	b21a      	sxth	r2, r3
 8000c16:	7a7b      	ldrb	r3, [r7, #9]
 8000c18:	b21b      	sxth	r3, r3
 8000c1a:	4313      	orrs	r3, r2
 8000c1c:	b21b      	sxth	r3, r3
 8000c1e:	b29a      	uxth	r2, r3
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 8000c26:	b29b      	uxth	r3, r3
 8000c28:	4413      	add	r3, r2
 8000c2a:	b29b      	uxth	r3, r3
 8000c2c:	b21a      	sxth	r2, r3
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	82da      	strh	r2, [r3, #22]
    mpu->accel_raw.y = (int16_t)(data[2] << 8 | data[3]) + mpu->accel_offset.y;
 8000c32:	7abb      	ldrb	r3, [r7, #10]
 8000c34:	021b      	lsls	r3, r3, #8
 8000c36:	b21a      	sxth	r2, r3
 8000c38:	7afb      	ldrb	r3, [r7, #11]
 8000c3a:	b21b      	sxth	r3, r3
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	b21b      	sxth	r3, r3
 8000c40:	b29a      	uxth	r2, r3
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 8000c48:	b29b      	uxth	r3, r3
 8000c4a:	4413      	add	r3, r2
 8000c4c:	b29b      	uxth	r3, r3
 8000c4e:	b21a      	sxth	r2, r3
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	831a      	strh	r2, [r3, #24]
    mpu->accel_raw.z = (int16_t)(data[4] << 8 | data[5]) + mpu->accel_offset.z;
 8000c54:	7b3b      	ldrb	r3, [r7, #12]
 8000c56:	021b      	lsls	r3, r3, #8
 8000c58:	b21a      	sxth	r2, r3
 8000c5a:	7b7b      	ldrb	r3, [r7, #13]
 8000c5c:	b21b      	sxth	r3, r3
 8000c5e:	4313      	orrs	r3, r2
 8000c60:	b21b      	sxth	r3, r3
 8000c62:	b29a      	uxth	r2, r3
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	@ 0x26
 8000c6a:	b29b      	uxth	r3, r3
 8000c6c:	4413      	add	r3, r2
 8000c6e:	b29b      	uxth	r3, r3
 8000c70:	b21a      	sxth	r2, r3
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	835a      	strh	r2, [r3, #26]

    // Convert the RAW data into linear acceleration in 'm/s^2'
    mpu->accel_scaled.x = mpu->accel_raw.x * mpu->accel_scaling_factor;
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff fbd3 	bl	8000428 <__aeabi_i2f>
 8000c82:	4602      	mov	r2, r0
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	68db      	ldr	r3, [r3, #12]
 8000c88:	4619      	mov	r1, r3
 8000c8a:	4610      	mov	r0, r2
 8000c8c:	f7ff fa5e 	bl	800014c <__aeabi_fmul>
 8000c90:	4603      	mov	r3, r0
 8000c92:	461a      	mov	r2, r3
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	639a      	str	r2, [r3, #56]	@ 0x38
    mpu->accel_scaled.y = mpu->accel_raw.y * mpu->accel_scaling_factor;
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f7ff fbc2 	bl	8000428 <__aeabi_i2f>
 8000ca4:	4602      	mov	r2, r0
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	68db      	ldr	r3, [r3, #12]
 8000caa:	4619      	mov	r1, r3
 8000cac:	4610      	mov	r0, r2
 8000cae:	f7ff fa4d 	bl	800014c <__aeabi_fmul>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	63da      	str	r2, [r3, #60]	@ 0x3c
    mpu->accel_scaled.z = mpu->accel_raw.z * mpu->accel_scaling_factor;
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff fbb1 	bl	8000428 <__aeabi_i2f>
 8000cc6:	4602      	mov	r2, r0
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	68db      	ldr	r3, [r3, #12]
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4610      	mov	r0, r2
 8000cd0:	f7ff fa3c 	bl	800014c <__aeabi_fmul>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	641a      	str	r2, [r3, #64]	@ 0x40

    return STATUS_OK;
 8000cdc:	2300      	movs	r3, #0
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3710      	adds	r7, #16
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
	...

08000ce8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b085      	sub	sp, #20
 8000cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000cee:	4b15      	ldr	r3, [pc, #84]	@ (8000d44 <HAL_MspInit+0x5c>)
 8000cf0:	699b      	ldr	r3, [r3, #24]
 8000cf2:	4a14      	ldr	r2, [pc, #80]	@ (8000d44 <HAL_MspInit+0x5c>)
 8000cf4:	f043 0301 	orr.w	r3, r3, #1
 8000cf8:	6193      	str	r3, [r2, #24]
 8000cfa:	4b12      	ldr	r3, [pc, #72]	@ (8000d44 <HAL_MspInit+0x5c>)
 8000cfc:	699b      	ldr	r3, [r3, #24]
 8000cfe:	f003 0301 	and.w	r3, r3, #1
 8000d02:	60bb      	str	r3, [r7, #8]
 8000d04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d06:	4b0f      	ldr	r3, [pc, #60]	@ (8000d44 <HAL_MspInit+0x5c>)
 8000d08:	69db      	ldr	r3, [r3, #28]
 8000d0a:	4a0e      	ldr	r2, [pc, #56]	@ (8000d44 <HAL_MspInit+0x5c>)
 8000d0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d10:	61d3      	str	r3, [r2, #28]
 8000d12:	4b0c      	ldr	r3, [pc, #48]	@ (8000d44 <HAL_MspInit+0x5c>)
 8000d14:	69db      	ldr	r3, [r3, #28]
 8000d16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d1a:	607b      	str	r3, [r7, #4]
 8000d1c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d48 <HAL_MspInit+0x60>)
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	60fb      	str	r3, [r7, #12]
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000d2a:	60fb      	str	r3, [r7, #12]
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000d32:	60fb      	str	r3, [r7, #12]
 8000d34:	4a04      	ldr	r2, [pc, #16]	@ (8000d48 <HAL_MspInit+0x60>)
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	3714      	adds	r7, #20
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bc80      	pop	{r7}
 8000d42:	4770      	bx	lr
 8000d44:	40021000 	.word	0x40021000
 8000d48:	40010000 	.word	0x40010000

08000d4c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b088      	sub	sp, #32
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d54:	f107 0310 	add.w	r3, r7, #16
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	605a      	str	r2, [r3, #4]
 8000d5e:	609a      	str	r2, [r3, #8]
 8000d60:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4a15      	ldr	r2, [pc, #84]	@ (8000dbc <HAL_I2C_MspInit+0x70>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d123      	bne.n	8000db4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d6c:	4b14      	ldr	r3, [pc, #80]	@ (8000dc0 <HAL_I2C_MspInit+0x74>)
 8000d6e:	699b      	ldr	r3, [r3, #24]
 8000d70:	4a13      	ldr	r2, [pc, #76]	@ (8000dc0 <HAL_I2C_MspInit+0x74>)
 8000d72:	f043 0308 	orr.w	r3, r3, #8
 8000d76:	6193      	str	r3, [r2, #24]
 8000d78:	4b11      	ldr	r3, [pc, #68]	@ (8000dc0 <HAL_I2C_MspInit+0x74>)
 8000d7a:	699b      	ldr	r3, [r3, #24]
 8000d7c:	f003 0308 	and.w	r3, r3, #8
 8000d80:	60fb      	str	r3, [r7, #12]
 8000d82:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d84:	23c0      	movs	r3, #192	@ 0xc0
 8000d86:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d88:	2312      	movs	r3, #18
 8000d8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d8c:	2303      	movs	r3, #3
 8000d8e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d90:	f107 0310 	add.w	r3, r7, #16
 8000d94:	4619      	mov	r1, r3
 8000d96:	480b      	ldr	r0, [pc, #44]	@ (8000dc4 <HAL_I2C_MspInit+0x78>)
 8000d98:	f000 f9b4 	bl	8001104 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d9c:	4b08      	ldr	r3, [pc, #32]	@ (8000dc0 <HAL_I2C_MspInit+0x74>)
 8000d9e:	69db      	ldr	r3, [r3, #28]
 8000da0:	4a07      	ldr	r2, [pc, #28]	@ (8000dc0 <HAL_I2C_MspInit+0x74>)
 8000da2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000da6:	61d3      	str	r3, [r2, #28]
 8000da8:	4b05      	ldr	r3, [pc, #20]	@ (8000dc0 <HAL_I2C_MspInit+0x74>)
 8000daa:	69db      	ldr	r3, [r3, #28]
 8000dac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000db0:	60bb      	str	r3, [r7, #8]
 8000db2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000db4:	bf00      	nop
 8000db6:	3720      	adds	r7, #32
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	40005400 	.word	0x40005400
 8000dc0:	40021000 	.word	0x40021000
 8000dc4:	40010c00 	.word	0x40010c00

08000dc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dcc:	bf00      	nop
 8000dce:	e7fd      	b.n	8000dcc <NMI_Handler+0x4>

08000dd0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dd4:	bf00      	nop
 8000dd6:	e7fd      	b.n	8000dd4 <HardFault_Handler+0x4>

08000dd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ddc:	bf00      	nop
 8000dde:	e7fd      	b.n	8000ddc <MemManage_Handler+0x4>

08000de0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000de4:	bf00      	nop
 8000de6:	e7fd      	b.n	8000de4 <BusFault_Handler+0x4>

08000de8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dec:	bf00      	nop
 8000dee:	e7fd      	b.n	8000dec <UsageFault_Handler+0x4>

08000df0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000df4:	bf00      	nop
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bc80      	pop	{r7}
 8000dfa:	4770      	bx	lr

08000dfc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e00:	bf00      	nop
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bc80      	pop	{r7}
 8000e06:	4770      	bx	lr

08000e08 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e0c:	bf00      	nop
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bc80      	pop	{r7}
 8000e12:	4770      	bx	lr

08000e14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e18:	f000 f874 	bl	8000f04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e1c:	bf00      	nop
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e24:	bf00      	nop
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bc80      	pop	{r7}
 8000e2a:	4770      	bx	lr

08000e2c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e2c:	f7ff fff8 	bl	8000e20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e30:	480b      	ldr	r0, [pc, #44]	@ (8000e60 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000e32:	490c      	ldr	r1, [pc, #48]	@ (8000e64 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000e34:	4a0c      	ldr	r2, [pc, #48]	@ (8000e68 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000e36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e38:	e002      	b.n	8000e40 <LoopCopyDataInit>

08000e3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e3e:	3304      	adds	r3, #4

08000e40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e44:	d3f9      	bcc.n	8000e3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e46:	4a09      	ldr	r2, [pc, #36]	@ (8000e6c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000e48:	4c09      	ldr	r4, [pc, #36]	@ (8000e70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e4c:	e001      	b.n	8000e52 <LoopFillZerobss>

08000e4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e50:	3204      	adds	r2, #4

08000e52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e54:	d3fb      	bcc.n	8000e4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e56:	f001 ff4f 	bl	8002cf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e5a:	f7ff fb39 	bl	80004d0 <main>
  bx lr
 8000e5e:	4770      	bx	lr
  ldr r0, =_sdata
 8000e60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e64:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8000e68:	08002d8c 	.word	0x08002d8c
  ldr r2, =_sbss
 8000e6c:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8000e70:	200000e0 	.word	0x200000e0

08000e74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e74:	e7fe      	b.n	8000e74 <ADC1_2_IRQHandler>
	...

08000e78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e7c:	4b08      	ldr	r3, [pc, #32]	@ (8000ea0 <HAL_Init+0x28>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a07      	ldr	r2, [pc, #28]	@ (8000ea0 <HAL_Init+0x28>)
 8000e82:	f043 0310 	orr.w	r3, r3, #16
 8000e86:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e88:	2003      	movs	r0, #3
 8000e8a:	f000 f907 	bl	800109c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e8e:	200f      	movs	r0, #15
 8000e90:	f000 f808 	bl	8000ea4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e94:	f7ff ff28 	bl	8000ce8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e98:	2300      	movs	r3, #0
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	40022000 	.word	0x40022000

08000ea4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000eac:	4b12      	ldr	r3, [pc, #72]	@ (8000ef8 <HAL_InitTick+0x54>)
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	4b12      	ldr	r3, [pc, #72]	@ (8000efc <HAL_InitTick+0x58>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000eba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f000 f911 	bl	80010ea <HAL_SYSTICK_Config>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	e00e      	b.n	8000ef0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2b0f      	cmp	r3, #15
 8000ed6:	d80a      	bhi.n	8000eee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	6879      	ldr	r1, [r7, #4]
 8000edc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ee0:	f000 f8e7 	bl	80010b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ee4:	4a06      	ldr	r2, [pc, #24]	@ (8000f00 <HAL_InitTick+0x5c>)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eea:	2300      	movs	r3, #0
 8000eec:	e000      	b.n	8000ef0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3708      	adds	r7, #8
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	20000048 	.word	0x20000048
 8000efc:	20000050 	.word	0x20000050
 8000f00:	2000004c 	.word	0x2000004c

08000f04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f08:	4b05      	ldr	r3, [pc, #20]	@ (8000f20 <HAL_IncTick+0x1c>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	4b05      	ldr	r3, [pc, #20]	@ (8000f24 <HAL_IncTick+0x20>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4413      	add	r3, r2
 8000f14:	4a03      	ldr	r2, [pc, #12]	@ (8000f24 <HAL_IncTick+0x20>)
 8000f16:	6013      	str	r3, [r2, #0]
}
 8000f18:	bf00      	nop
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bc80      	pop	{r7}
 8000f1e:	4770      	bx	lr
 8000f20:	20000050 	.word	0x20000050
 8000f24:	200000dc 	.word	0x200000dc

08000f28 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f2c:	4b02      	ldr	r3, [pc, #8]	@ (8000f38 <HAL_GetTick+0x10>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bc80      	pop	{r7}
 8000f36:	4770      	bx	lr
 8000f38:	200000dc 	.word	0x200000dc

08000f3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b085      	sub	sp, #20
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	f003 0307 	and.w	r3, r3, #7
 8000f4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000f80 <__NVIC_SetPriorityGrouping+0x44>)
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f52:	68ba      	ldr	r2, [r7, #8]
 8000f54:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f58:	4013      	ands	r3, r2
 8000f5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f64:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f6e:	4a04      	ldr	r2, [pc, #16]	@ (8000f80 <__NVIC_SetPriorityGrouping+0x44>)
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	60d3      	str	r3, [r2, #12]
}
 8000f74:	bf00      	nop
 8000f76:	3714      	adds	r7, #20
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bc80      	pop	{r7}
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	e000ed00 	.word	0xe000ed00

08000f84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f88:	4b04      	ldr	r3, [pc, #16]	@ (8000f9c <__NVIC_GetPriorityGrouping+0x18>)
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	0a1b      	lsrs	r3, r3, #8
 8000f8e:	f003 0307 	and.w	r3, r3, #7
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bc80      	pop	{r7}
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	e000ed00 	.word	0xe000ed00

08000fa0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	6039      	str	r1, [r7, #0]
 8000faa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	db0a      	blt.n	8000fca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	b2da      	uxtb	r2, r3
 8000fb8:	490c      	ldr	r1, [pc, #48]	@ (8000fec <__NVIC_SetPriority+0x4c>)
 8000fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fbe:	0112      	lsls	r2, r2, #4
 8000fc0:	b2d2      	uxtb	r2, r2
 8000fc2:	440b      	add	r3, r1
 8000fc4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fc8:	e00a      	b.n	8000fe0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	b2da      	uxtb	r2, r3
 8000fce:	4908      	ldr	r1, [pc, #32]	@ (8000ff0 <__NVIC_SetPriority+0x50>)
 8000fd0:	79fb      	ldrb	r3, [r7, #7]
 8000fd2:	f003 030f 	and.w	r3, r3, #15
 8000fd6:	3b04      	subs	r3, #4
 8000fd8:	0112      	lsls	r2, r2, #4
 8000fda:	b2d2      	uxtb	r2, r2
 8000fdc:	440b      	add	r3, r1
 8000fde:	761a      	strb	r2, [r3, #24]
}
 8000fe0:	bf00      	nop
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bc80      	pop	{r7}
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	e000e100 	.word	0xe000e100
 8000ff0:	e000ed00 	.word	0xe000ed00

08000ff4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b089      	sub	sp, #36	@ 0x24
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	60f8      	str	r0, [r7, #12]
 8000ffc:	60b9      	str	r1, [r7, #8]
 8000ffe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	f003 0307 	and.w	r3, r3, #7
 8001006:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	f1c3 0307 	rsb	r3, r3, #7
 800100e:	2b04      	cmp	r3, #4
 8001010:	bf28      	it	cs
 8001012:	2304      	movcs	r3, #4
 8001014:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	3304      	adds	r3, #4
 800101a:	2b06      	cmp	r3, #6
 800101c:	d902      	bls.n	8001024 <NVIC_EncodePriority+0x30>
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	3b03      	subs	r3, #3
 8001022:	e000      	b.n	8001026 <NVIC_EncodePriority+0x32>
 8001024:	2300      	movs	r3, #0
 8001026:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001028:	f04f 32ff 	mov.w	r2, #4294967295
 800102c:	69bb      	ldr	r3, [r7, #24]
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	43da      	mvns	r2, r3
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	401a      	ands	r2, r3
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800103c:	f04f 31ff 	mov.w	r1, #4294967295
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	fa01 f303 	lsl.w	r3, r1, r3
 8001046:	43d9      	mvns	r1, r3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800104c:	4313      	orrs	r3, r2
         );
}
 800104e:	4618      	mov	r0, r3
 8001050:	3724      	adds	r7, #36	@ 0x24
 8001052:	46bd      	mov	sp, r7
 8001054:	bc80      	pop	{r7}
 8001056:	4770      	bx	lr

08001058 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	3b01      	subs	r3, #1
 8001064:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001068:	d301      	bcc.n	800106e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800106a:	2301      	movs	r3, #1
 800106c:	e00f      	b.n	800108e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800106e:	4a0a      	ldr	r2, [pc, #40]	@ (8001098 <SysTick_Config+0x40>)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	3b01      	subs	r3, #1
 8001074:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001076:	210f      	movs	r1, #15
 8001078:	f04f 30ff 	mov.w	r0, #4294967295
 800107c:	f7ff ff90 	bl	8000fa0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001080:	4b05      	ldr	r3, [pc, #20]	@ (8001098 <SysTick_Config+0x40>)
 8001082:	2200      	movs	r2, #0
 8001084:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001086:	4b04      	ldr	r3, [pc, #16]	@ (8001098 <SysTick_Config+0x40>)
 8001088:	2207      	movs	r2, #7
 800108a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800108c:	2300      	movs	r3, #0
}
 800108e:	4618      	mov	r0, r3
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	e000e010 	.word	0xe000e010

0800109c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	f7ff ff49 	bl	8000f3c <__NVIC_SetPriorityGrouping>
}
 80010aa:	bf00      	nop
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b086      	sub	sp, #24
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	4603      	mov	r3, r0
 80010ba:	60b9      	str	r1, [r7, #8]
 80010bc:	607a      	str	r2, [r7, #4]
 80010be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010c0:	2300      	movs	r3, #0
 80010c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010c4:	f7ff ff5e 	bl	8000f84 <__NVIC_GetPriorityGrouping>
 80010c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ca:	687a      	ldr	r2, [r7, #4]
 80010cc:	68b9      	ldr	r1, [r7, #8]
 80010ce:	6978      	ldr	r0, [r7, #20]
 80010d0:	f7ff ff90 	bl	8000ff4 <NVIC_EncodePriority>
 80010d4:	4602      	mov	r2, r0
 80010d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010da:	4611      	mov	r1, r2
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff5f 	bl	8000fa0 <__NVIC_SetPriority>
}
 80010e2:	bf00      	nop
 80010e4:	3718      	adds	r7, #24
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f7ff ffb0 	bl	8001058 <SysTick_Config>
 80010f8:	4603      	mov	r3, r0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
	...

08001104 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001104:	b480      	push	{r7}
 8001106:	b08b      	sub	sp, #44	@ 0x2c
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800110e:	2300      	movs	r3, #0
 8001110:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001112:	2300      	movs	r3, #0
 8001114:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001116:	e169      	b.n	80013ec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001118:	2201      	movs	r2, #1
 800111a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	69fa      	ldr	r2, [r7, #28]
 8001128:	4013      	ands	r3, r2
 800112a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	429a      	cmp	r2, r3
 8001132:	f040 8158 	bne.w	80013e6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	4a9a      	ldr	r2, [pc, #616]	@ (80013a4 <HAL_GPIO_Init+0x2a0>)
 800113c:	4293      	cmp	r3, r2
 800113e:	d05e      	beq.n	80011fe <HAL_GPIO_Init+0xfa>
 8001140:	4a98      	ldr	r2, [pc, #608]	@ (80013a4 <HAL_GPIO_Init+0x2a0>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d875      	bhi.n	8001232 <HAL_GPIO_Init+0x12e>
 8001146:	4a98      	ldr	r2, [pc, #608]	@ (80013a8 <HAL_GPIO_Init+0x2a4>)
 8001148:	4293      	cmp	r3, r2
 800114a:	d058      	beq.n	80011fe <HAL_GPIO_Init+0xfa>
 800114c:	4a96      	ldr	r2, [pc, #600]	@ (80013a8 <HAL_GPIO_Init+0x2a4>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d86f      	bhi.n	8001232 <HAL_GPIO_Init+0x12e>
 8001152:	4a96      	ldr	r2, [pc, #600]	@ (80013ac <HAL_GPIO_Init+0x2a8>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d052      	beq.n	80011fe <HAL_GPIO_Init+0xfa>
 8001158:	4a94      	ldr	r2, [pc, #592]	@ (80013ac <HAL_GPIO_Init+0x2a8>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d869      	bhi.n	8001232 <HAL_GPIO_Init+0x12e>
 800115e:	4a94      	ldr	r2, [pc, #592]	@ (80013b0 <HAL_GPIO_Init+0x2ac>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d04c      	beq.n	80011fe <HAL_GPIO_Init+0xfa>
 8001164:	4a92      	ldr	r2, [pc, #584]	@ (80013b0 <HAL_GPIO_Init+0x2ac>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d863      	bhi.n	8001232 <HAL_GPIO_Init+0x12e>
 800116a:	4a92      	ldr	r2, [pc, #584]	@ (80013b4 <HAL_GPIO_Init+0x2b0>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d046      	beq.n	80011fe <HAL_GPIO_Init+0xfa>
 8001170:	4a90      	ldr	r2, [pc, #576]	@ (80013b4 <HAL_GPIO_Init+0x2b0>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d85d      	bhi.n	8001232 <HAL_GPIO_Init+0x12e>
 8001176:	2b12      	cmp	r3, #18
 8001178:	d82a      	bhi.n	80011d0 <HAL_GPIO_Init+0xcc>
 800117a:	2b12      	cmp	r3, #18
 800117c:	d859      	bhi.n	8001232 <HAL_GPIO_Init+0x12e>
 800117e:	a201      	add	r2, pc, #4	@ (adr r2, 8001184 <HAL_GPIO_Init+0x80>)
 8001180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001184:	080011ff 	.word	0x080011ff
 8001188:	080011d9 	.word	0x080011d9
 800118c:	080011eb 	.word	0x080011eb
 8001190:	0800122d 	.word	0x0800122d
 8001194:	08001233 	.word	0x08001233
 8001198:	08001233 	.word	0x08001233
 800119c:	08001233 	.word	0x08001233
 80011a0:	08001233 	.word	0x08001233
 80011a4:	08001233 	.word	0x08001233
 80011a8:	08001233 	.word	0x08001233
 80011ac:	08001233 	.word	0x08001233
 80011b0:	08001233 	.word	0x08001233
 80011b4:	08001233 	.word	0x08001233
 80011b8:	08001233 	.word	0x08001233
 80011bc:	08001233 	.word	0x08001233
 80011c0:	08001233 	.word	0x08001233
 80011c4:	08001233 	.word	0x08001233
 80011c8:	080011e1 	.word	0x080011e1
 80011cc:	080011f5 	.word	0x080011f5
 80011d0:	4a79      	ldr	r2, [pc, #484]	@ (80013b8 <HAL_GPIO_Init+0x2b4>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d013      	beq.n	80011fe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80011d6:	e02c      	b.n	8001232 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	623b      	str	r3, [r7, #32]
          break;
 80011de:	e029      	b.n	8001234 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	3304      	adds	r3, #4
 80011e6:	623b      	str	r3, [r7, #32]
          break;
 80011e8:	e024      	b.n	8001234 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	68db      	ldr	r3, [r3, #12]
 80011ee:	3308      	adds	r3, #8
 80011f0:	623b      	str	r3, [r7, #32]
          break;
 80011f2:	e01f      	b.n	8001234 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	330c      	adds	r3, #12
 80011fa:	623b      	str	r3, [r7, #32]
          break;
 80011fc:	e01a      	b.n	8001234 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d102      	bne.n	800120c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001206:	2304      	movs	r3, #4
 8001208:	623b      	str	r3, [r7, #32]
          break;
 800120a:	e013      	b.n	8001234 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	2b01      	cmp	r3, #1
 8001212:	d105      	bne.n	8001220 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001214:	2308      	movs	r3, #8
 8001216:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	69fa      	ldr	r2, [r7, #28]
 800121c:	611a      	str	r2, [r3, #16]
          break;
 800121e:	e009      	b.n	8001234 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001220:	2308      	movs	r3, #8
 8001222:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	69fa      	ldr	r2, [r7, #28]
 8001228:	615a      	str	r2, [r3, #20]
          break;
 800122a:	e003      	b.n	8001234 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800122c:	2300      	movs	r3, #0
 800122e:	623b      	str	r3, [r7, #32]
          break;
 8001230:	e000      	b.n	8001234 <HAL_GPIO_Init+0x130>
          break;
 8001232:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001234:	69bb      	ldr	r3, [r7, #24]
 8001236:	2bff      	cmp	r3, #255	@ 0xff
 8001238:	d801      	bhi.n	800123e <HAL_GPIO_Init+0x13a>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	e001      	b.n	8001242 <HAL_GPIO_Init+0x13e>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	3304      	adds	r3, #4
 8001242:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001244:	69bb      	ldr	r3, [r7, #24]
 8001246:	2bff      	cmp	r3, #255	@ 0xff
 8001248:	d802      	bhi.n	8001250 <HAL_GPIO_Init+0x14c>
 800124a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	e002      	b.n	8001256 <HAL_GPIO_Init+0x152>
 8001250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001252:	3b08      	subs	r3, #8
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	210f      	movs	r1, #15
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	fa01 f303 	lsl.w	r3, r1, r3
 8001264:	43db      	mvns	r3, r3
 8001266:	401a      	ands	r2, r3
 8001268:	6a39      	ldr	r1, [r7, #32]
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	fa01 f303 	lsl.w	r3, r1, r3
 8001270:	431a      	orrs	r2, r3
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800127e:	2b00      	cmp	r3, #0
 8001280:	f000 80b1 	beq.w	80013e6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001284:	4b4d      	ldr	r3, [pc, #308]	@ (80013bc <HAL_GPIO_Init+0x2b8>)
 8001286:	699b      	ldr	r3, [r3, #24]
 8001288:	4a4c      	ldr	r2, [pc, #304]	@ (80013bc <HAL_GPIO_Init+0x2b8>)
 800128a:	f043 0301 	orr.w	r3, r3, #1
 800128e:	6193      	str	r3, [r2, #24]
 8001290:	4b4a      	ldr	r3, [pc, #296]	@ (80013bc <HAL_GPIO_Init+0x2b8>)
 8001292:	699b      	ldr	r3, [r3, #24]
 8001294:	f003 0301 	and.w	r3, r3, #1
 8001298:	60bb      	str	r3, [r7, #8]
 800129a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800129c:	4a48      	ldr	r2, [pc, #288]	@ (80013c0 <HAL_GPIO_Init+0x2bc>)
 800129e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012a0:	089b      	lsrs	r3, r3, #2
 80012a2:	3302      	adds	r3, #2
 80012a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012a8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80012aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012ac:	f003 0303 	and.w	r3, r3, #3
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	220f      	movs	r2, #15
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	43db      	mvns	r3, r3
 80012ba:	68fa      	ldr	r2, [r7, #12]
 80012bc:	4013      	ands	r3, r2
 80012be:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	4a40      	ldr	r2, [pc, #256]	@ (80013c4 <HAL_GPIO_Init+0x2c0>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d013      	beq.n	80012f0 <HAL_GPIO_Init+0x1ec>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	4a3f      	ldr	r2, [pc, #252]	@ (80013c8 <HAL_GPIO_Init+0x2c4>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d00d      	beq.n	80012ec <HAL_GPIO_Init+0x1e8>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	4a3e      	ldr	r2, [pc, #248]	@ (80013cc <HAL_GPIO_Init+0x2c8>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d007      	beq.n	80012e8 <HAL_GPIO_Init+0x1e4>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	4a3d      	ldr	r2, [pc, #244]	@ (80013d0 <HAL_GPIO_Init+0x2cc>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d101      	bne.n	80012e4 <HAL_GPIO_Init+0x1e0>
 80012e0:	2303      	movs	r3, #3
 80012e2:	e006      	b.n	80012f2 <HAL_GPIO_Init+0x1ee>
 80012e4:	2304      	movs	r3, #4
 80012e6:	e004      	b.n	80012f2 <HAL_GPIO_Init+0x1ee>
 80012e8:	2302      	movs	r3, #2
 80012ea:	e002      	b.n	80012f2 <HAL_GPIO_Init+0x1ee>
 80012ec:	2301      	movs	r3, #1
 80012ee:	e000      	b.n	80012f2 <HAL_GPIO_Init+0x1ee>
 80012f0:	2300      	movs	r3, #0
 80012f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012f4:	f002 0203 	and.w	r2, r2, #3
 80012f8:	0092      	lsls	r2, r2, #2
 80012fa:	4093      	lsls	r3, r2
 80012fc:	68fa      	ldr	r2, [r7, #12]
 80012fe:	4313      	orrs	r3, r2
 8001300:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001302:	492f      	ldr	r1, [pc, #188]	@ (80013c0 <HAL_GPIO_Init+0x2bc>)
 8001304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001306:	089b      	lsrs	r3, r3, #2
 8001308:	3302      	adds	r3, #2
 800130a:	68fa      	ldr	r2, [r7, #12]
 800130c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001318:	2b00      	cmp	r3, #0
 800131a:	d006      	beq.n	800132a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800131c:	4b2d      	ldr	r3, [pc, #180]	@ (80013d4 <HAL_GPIO_Init+0x2d0>)
 800131e:	689a      	ldr	r2, [r3, #8]
 8001320:	492c      	ldr	r1, [pc, #176]	@ (80013d4 <HAL_GPIO_Init+0x2d0>)
 8001322:	69bb      	ldr	r3, [r7, #24]
 8001324:	4313      	orrs	r3, r2
 8001326:	608b      	str	r3, [r1, #8]
 8001328:	e006      	b.n	8001338 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800132a:	4b2a      	ldr	r3, [pc, #168]	@ (80013d4 <HAL_GPIO_Init+0x2d0>)
 800132c:	689a      	ldr	r2, [r3, #8]
 800132e:	69bb      	ldr	r3, [r7, #24]
 8001330:	43db      	mvns	r3, r3
 8001332:	4928      	ldr	r1, [pc, #160]	@ (80013d4 <HAL_GPIO_Init+0x2d0>)
 8001334:	4013      	ands	r3, r2
 8001336:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001340:	2b00      	cmp	r3, #0
 8001342:	d006      	beq.n	8001352 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001344:	4b23      	ldr	r3, [pc, #140]	@ (80013d4 <HAL_GPIO_Init+0x2d0>)
 8001346:	68da      	ldr	r2, [r3, #12]
 8001348:	4922      	ldr	r1, [pc, #136]	@ (80013d4 <HAL_GPIO_Init+0x2d0>)
 800134a:	69bb      	ldr	r3, [r7, #24]
 800134c:	4313      	orrs	r3, r2
 800134e:	60cb      	str	r3, [r1, #12]
 8001350:	e006      	b.n	8001360 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001352:	4b20      	ldr	r3, [pc, #128]	@ (80013d4 <HAL_GPIO_Init+0x2d0>)
 8001354:	68da      	ldr	r2, [r3, #12]
 8001356:	69bb      	ldr	r3, [r7, #24]
 8001358:	43db      	mvns	r3, r3
 800135a:	491e      	ldr	r1, [pc, #120]	@ (80013d4 <HAL_GPIO_Init+0x2d0>)
 800135c:	4013      	ands	r3, r2
 800135e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001368:	2b00      	cmp	r3, #0
 800136a:	d006      	beq.n	800137a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800136c:	4b19      	ldr	r3, [pc, #100]	@ (80013d4 <HAL_GPIO_Init+0x2d0>)
 800136e:	685a      	ldr	r2, [r3, #4]
 8001370:	4918      	ldr	r1, [pc, #96]	@ (80013d4 <HAL_GPIO_Init+0x2d0>)
 8001372:	69bb      	ldr	r3, [r7, #24]
 8001374:	4313      	orrs	r3, r2
 8001376:	604b      	str	r3, [r1, #4]
 8001378:	e006      	b.n	8001388 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800137a:	4b16      	ldr	r3, [pc, #88]	@ (80013d4 <HAL_GPIO_Init+0x2d0>)
 800137c:	685a      	ldr	r2, [r3, #4]
 800137e:	69bb      	ldr	r3, [r7, #24]
 8001380:	43db      	mvns	r3, r3
 8001382:	4914      	ldr	r1, [pc, #80]	@ (80013d4 <HAL_GPIO_Init+0x2d0>)
 8001384:	4013      	ands	r3, r2
 8001386:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001390:	2b00      	cmp	r3, #0
 8001392:	d021      	beq.n	80013d8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001394:	4b0f      	ldr	r3, [pc, #60]	@ (80013d4 <HAL_GPIO_Init+0x2d0>)
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	490e      	ldr	r1, [pc, #56]	@ (80013d4 <HAL_GPIO_Init+0x2d0>)
 800139a:	69bb      	ldr	r3, [r7, #24]
 800139c:	4313      	orrs	r3, r2
 800139e:	600b      	str	r3, [r1, #0]
 80013a0:	e021      	b.n	80013e6 <HAL_GPIO_Init+0x2e2>
 80013a2:	bf00      	nop
 80013a4:	10320000 	.word	0x10320000
 80013a8:	10310000 	.word	0x10310000
 80013ac:	10220000 	.word	0x10220000
 80013b0:	10210000 	.word	0x10210000
 80013b4:	10120000 	.word	0x10120000
 80013b8:	10110000 	.word	0x10110000
 80013bc:	40021000 	.word	0x40021000
 80013c0:	40010000 	.word	0x40010000
 80013c4:	40010800 	.word	0x40010800
 80013c8:	40010c00 	.word	0x40010c00
 80013cc:	40011000 	.word	0x40011000
 80013d0:	40011400 	.word	0x40011400
 80013d4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80013d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001408 <HAL_GPIO_Init+0x304>)
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	43db      	mvns	r3, r3
 80013e0:	4909      	ldr	r1, [pc, #36]	@ (8001408 <HAL_GPIO_Init+0x304>)
 80013e2:	4013      	ands	r3, r2
 80013e4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80013e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013e8:	3301      	adds	r3, #1
 80013ea:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013f2:	fa22 f303 	lsr.w	r3, r2, r3
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	f47f ae8e 	bne.w	8001118 <HAL_GPIO_Init+0x14>
  }
}
 80013fc:	bf00      	nop
 80013fe:	bf00      	nop
 8001400:	372c      	adds	r7, #44	@ 0x2c
 8001402:	46bd      	mov	sp, r7
 8001404:	bc80      	pop	{r7}
 8001406:	4770      	bx	lr
 8001408:	40010400 	.word	0x40010400

0800140c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	460b      	mov	r3, r1
 8001416:	807b      	strh	r3, [r7, #2]
 8001418:	4613      	mov	r3, r2
 800141a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800141c:	787b      	ldrb	r3, [r7, #1]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d003      	beq.n	800142a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001422:	887a      	ldrh	r2, [r7, #2]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001428:	e003      	b.n	8001432 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800142a:	887b      	ldrh	r3, [r7, #2]
 800142c:	041a      	lsls	r2, r3, #16
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	611a      	str	r2, [r3, #16]
}
 8001432:	bf00      	nop
 8001434:	370c      	adds	r7, #12
 8001436:	46bd      	mov	sp, r7
 8001438:	bc80      	pop	{r7}
 800143a:	4770      	bx	lr

0800143c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d101      	bne.n	800144e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e12b      	b.n	80016a6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001454:	b2db      	uxtb	r3, r3
 8001456:	2b00      	cmp	r3, #0
 8001458:	d106      	bne.n	8001468 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2200      	movs	r2, #0
 800145e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f7ff fc72 	bl	8000d4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2224      	movs	r2, #36	@ 0x24
 800146c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f022 0201 	bic.w	r2, r2, #1
 800147e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800148e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800149e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80014a0:	f001 fbf0 	bl	8002c84 <HAL_RCC_GetPCLK1Freq>
 80014a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	4a81      	ldr	r2, [pc, #516]	@ (80016b0 <HAL_I2C_Init+0x274>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d807      	bhi.n	80014c0 <HAL_I2C_Init+0x84>
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	4a80      	ldr	r2, [pc, #512]	@ (80016b4 <HAL_I2C_Init+0x278>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	bf94      	ite	ls
 80014b8:	2301      	movls	r3, #1
 80014ba:	2300      	movhi	r3, #0
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	e006      	b.n	80014ce <HAL_I2C_Init+0x92>
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	4a7d      	ldr	r2, [pc, #500]	@ (80016b8 <HAL_I2C_Init+0x27c>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	bf94      	ite	ls
 80014c8:	2301      	movls	r3, #1
 80014ca:	2300      	movhi	r3, #0
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e0e7      	b.n	80016a6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	4a78      	ldr	r2, [pc, #480]	@ (80016bc <HAL_I2C_Init+0x280>)
 80014da:	fba2 2303 	umull	r2, r3, r2, r3
 80014de:	0c9b      	lsrs	r3, r3, #18
 80014e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	68ba      	ldr	r2, [r7, #8]
 80014f2:	430a      	orrs	r2, r1
 80014f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	6a1b      	ldr	r3, [r3, #32]
 80014fc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	4a6a      	ldr	r2, [pc, #424]	@ (80016b0 <HAL_I2C_Init+0x274>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d802      	bhi.n	8001510 <HAL_I2C_Init+0xd4>
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	3301      	adds	r3, #1
 800150e:	e009      	b.n	8001524 <HAL_I2C_Init+0xe8>
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001516:	fb02 f303 	mul.w	r3, r2, r3
 800151a:	4a69      	ldr	r2, [pc, #420]	@ (80016c0 <HAL_I2C_Init+0x284>)
 800151c:	fba2 2303 	umull	r2, r3, r2, r3
 8001520:	099b      	lsrs	r3, r3, #6
 8001522:	3301      	adds	r3, #1
 8001524:	687a      	ldr	r2, [r7, #4]
 8001526:	6812      	ldr	r2, [r2, #0]
 8001528:	430b      	orrs	r3, r1
 800152a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	69db      	ldr	r3, [r3, #28]
 8001532:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001536:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	495c      	ldr	r1, [pc, #368]	@ (80016b0 <HAL_I2C_Init+0x274>)
 8001540:	428b      	cmp	r3, r1
 8001542:	d819      	bhi.n	8001578 <HAL_I2C_Init+0x13c>
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	1e59      	subs	r1, r3, #1
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001552:	1c59      	adds	r1, r3, #1
 8001554:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001558:	400b      	ands	r3, r1
 800155a:	2b00      	cmp	r3, #0
 800155c:	d00a      	beq.n	8001574 <HAL_I2C_Init+0x138>
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	1e59      	subs	r1, r3, #1
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	005b      	lsls	r3, r3, #1
 8001568:	fbb1 f3f3 	udiv	r3, r1, r3
 800156c:	3301      	adds	r3, #1
 800156e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001572:	e051      	b.n	8001618 <HAL_I2C_Init+0x1dc>
 8001574:	2304      	movs	r3, #4
 8001576:	e04f      	b.n	8001618 <HAL_I2C_Init+0x1dc>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d111      	bne.n	80015a4 <HAL_I2C_Init+0x168>
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	1e58      	subs	r0, r3, #1
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6859      	ldr	r1, [r3, #4]
 8001588:	460b      	mov	r3, r1
 800158a:	005b      	lsls	r3, r3, #1
 800158c:	440b      	add	r3, r1
 800158e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001592:	3301      	adds	r3, #1
 8001594:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001598:	2b00      	cmp	r3, #0
 800159a:	bf0c      	ite	eq
 800159c:	2301      	moveq	r3, #1
 800159e:	2300      	movne	r3, #0
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	e012      	b.n	80015ca <HAL_I2C_Init+0x18e>
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	1e58      	subs	r0, r3, #1
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6859      	ldr	r1, [r3, #4]
 80015ac:	460b      	mov	r3, r1
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	440b      	add	r3, r1
 80015b2:	0099      	lsls	r1, r3, #2
 80015b4:	440b      	add	r3, r1
 80015b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80015ba:	3301      	adds	r3, #1
 80015bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	bf0c      	ite	eq
 80015c4:	2301      	moveq	r3, #1
 80015c6:	2300      	movne	r3, #0
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <HAL_I2C_Init+0x196>
 80015ce:	2301      	movs	r3, #1
 80015d0:	e022      	b.n	8001618 <HAL_I2C_Init+0x1dc>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d10e      	bne.n	80015f8 <HAL_I2C_Init+0x1bc>
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	1e58      	subs	r0, r3, #1
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6859      	ldr	r1, [r3, #4]
 80015e2:	460b      	mov	r3, r1
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	440b      	add	r3, r1
 80015e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80015ec:	3301      	adds	r3, #1
 80015ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80015f6:	e00f      	b.n	8001618 <HAL_I2C_Init+0x1dc>
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	1e58      	subs	r0, r3, #1
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6859      	ldr	r1, [r3, #4]
 8001600:	460b      	mov	r3, r1
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	440b      	add	r3, r1
 8001606:	0099      	lsls	r1, r3, #2
 8001608:	440b      	add	r3, r1
 800160a:	fbb0 f3f3 	udiv	r3, r0, r3
 800160e:	3301      	adds	r3, #1
 8001610:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001614:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001618:	6879      	ldr	r1, [r7, #4]
 800161a:	6809      	ldr	r1, [r1, #0]
 800161c:	4313      	orrs	r3, r2
 800161e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	69da      	ldr	r2, [r3, #28]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6a1b      	ldr	r3, [r3, #32]
 8001632:	431a      	orrs	r2, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	430a      	orrs	r2, r1
 800163a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001646:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	6911      	ldr	r1, [r2, #16]
 800164e:	687a      	ldr	r2, [r7, #4]
 8001650:	68d2      	ldr	r2, [r2, #12]
 8001652:	4311      	orrs	r1, r2
 8001654:	687a      	ldr	r2, [r7, #4]
 8001656:	6812      	ldr	r2, [r2, #0]
 8001658:	430b      	orrs	r3, r1
 800165a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	68db      	ldr	r3, [r3, #12]
 8001662:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	695a      	ldr	r2, [r3, #20]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	699b      	ldr	r3, [r3, #24]
 800166e:	431a      	orrs	r2, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	430a      	orrs	r2, r1
 8001676:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f042 0201 	orr.w	r2, r2, #1
 8001686:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2200      	movs	r2, #0
 800168c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2220      	movs	r2, #32
 8001692:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2200      	movs	r2, #0
 800169a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2200      	movs	r2, #0
 80016a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80016a4:	2300      	movs	r3, #0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3710      	adds	r7, #16
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	000186a0 	.word	0x000186a0
 80016b4:	001e847f 	.word	0x001e847f
 80016b8:	003d08ff 	.word	0x003d08ff
 80016bc:	431bde83 	.word	0x431bde83
 80016c0:	10624dd3 	.word	0x10624dd3

080016c4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b088      	sub	sp, #32
 80016c8:	af02      	add	r7, sp, #8
 80016ca:	60f8      	str	r0, [r7, #12]
 80016cc:	4608      	mov	r0, r1
 80016ce:	4611      	mov	r1, r2
 80016d0:	461a      	mov	r2, r3
 80016d2:	4603      	mov	r3, r0
 80016d4:	817b      	strh	r3, [r7, #10]
 80016d6:	460b      	mov	r3, r1
 80016d8:	813b      	strh	r3, [r7, #8]
 80016da:	4613      	mov	r3, r2
 80016dc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80016de:	f7ff fc23 	bl	8000f28 <HAL_GetTick>
 80016e2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	2b20      	cmp	r3, #32
 80016ee:	f040 80d9 	bne.w	80018a4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	9300      	str	r3, [sp, #0]
 80016f6:	2319      	movs	r3, #25
 80016f8:	2201      	movs	r2, #1
 80016fa:	496d      	ldr	r1, [pc, #436]	@ (80018b0 <HAL_I2C_Mem_Write+0x1ec>)
 80016fc:	68f8      	ldr	r0, [r7, #12]
 80016fe:	f000 fcc1 	bl	8002084 <I2C_WaitOnFlagUntilTimeout>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001708:	2302      	movs	r3, #2
 800170a:	e0cc      	b.n	80018a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001712:	2b01      	cmp	r3, #1
 8001714:	d101      	bne.n	800171a <HAL_I2C_Mem_Write+0x56>
 8001716:	2302      	movs	r3, #2
 8001718:	e0c5      	b.n	80018a6 <HAL_I2C_Mem_Write+0x1e2>
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	2201      	movs	r2, #1
 800171e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 0301 	and.w	r3, r3, #1
 800172c:	2b01      	cmp	r3, #1
 800172e:	d007      	beq.n	8001740 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f042 0201 	orr.w	r2, r2, #1
 800173e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800174e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	2221      	movs	r2, #33	@ 0x21
 8001754:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	2240      	movs	r2, #64	@ 0x40
 800175c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	2200      	movs	r2, #0
 8001764:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	6a3a      	ldr	r2, [r7, #32]
 800176a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001770:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001776:	b29a      	uxth	r2, r3
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	4a4d      	ldr	r2, [pc, #308]	@ (80018b4 <HAL_I2C_Mem_Write+0x1f0>)
 8001780:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001782:	88f8      	ldrh	r0, [r7, #6]
 8001784:	893a      	ldrh	r2, [r7, #8]
 8001786:	8979      	ldrh	r1, [r7, #10]
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	9301      	str	r3, [sp, #4]
 800178c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800178e:	9300      	str	r3, [sp, #0]
 8001790:	4603      	mov	r3, r0
 8001792:	68f8      	ldr	r0, [r7, #12]
 8001794:	f000 faf8 	bl	8001d88 <I2C_RequestMemoryWrite>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d052      	beq.n	8001844 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e081      	b.n	80018a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017a2:	697a      	ldr	r2, [r7, #20]
 80017a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80017a6:	68f8      	ldr	r0, [r7, #12]
 80017a8:	f000 fd86 	bl	80022b8 <I2C_WaitOnTXEFlagUntilTimeout>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d00d      	beq.n	80017ce <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b6:	2b04      	cmp	r3, #4
 80017b8:	d107      	bne.n	80017ca <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80017c8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e06b      	b.n	80018a6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017d2:	781a      	ldrb	r2, [r3, #0]
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017de:	1c5a      	adds	r2, r3, #1
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017e8:	3b01      	subs	r3, #1
 80017ea:	b29a      	uxth	r2, r3
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017f4:	b29b      	uxth	r3, r3
 80017f6:	3b01      	subs	r3, #1
 80017f8:	b29a      	uxth	r2, r3
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	695b      	ldr	r3, [r3, #20]
 8001804:	f003 0304 	and.w	r3, r3, #4
 8001808:	2b04      	cmp	r3, #4
 800180a:	d11b      	bne.n	8001844 <HAL_I2C_Mem_Write+0x180>
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001810:	2b00      	cmp	r3, #0
 8001812:	d017      	beq.n	8001844 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001818:	781a      	ldrb	r2, [r3, #0]
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001824:	1c5a      	adds	r2, r3, #1
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800182e:	3b01      	subs	r3, #1
 8001830:	b29a      	uxth	r2, r3
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800183a:	b29b      	uxth	r3, r3
 800183c:	3b01      	subs	r3, #1
 800183e:	b29a      	uxth	r2, r3
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001848:	2b00      	cmp	r3, #0
 800184a:	d1aa      	bne.n	80017a2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800184c:	697a      	ldr	r2, [r7, #20]
 800184e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001850:	68f8      	ldr	r0, [r7, #12]
 8001852:	f000 fd79 	bl	8002348 <I2C_WaitOnBTFFlagUntilTimeout>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d00d      	beq.n	8001878 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001860:	2b04      	cmp	r3, #4
 8001862:	d107      	bne.n	8001874 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001872:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	e016      	b.n	80018a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001886:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	2220      	movs	r2, #32
 800188c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	2200      	movs	r2, #0
 8001894:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	2200      	movs	r2, #0
 800189c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80018a0:	2300      	movs	r3, #0
 80018a2:	e000      	b.n	80018a6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80018a4:	2302      	movs	r3, #2
  }
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3718      	adds	r7, #24
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	00100002 	.word	0x00100002
 80018b4:	ffff0000 	.word	0xffff0000

080018b8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b08c      	sub	sp, #48	@ 0x30
 80018bc:	af02      	add	r7, sp, #8
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	4608      	mov	r0, r1
 80018c2:	4611      	mov	r1, r2
 80018c4:	461a      	mov	r2, r3
 80018c6:	4603      	mov	r3, r0
 80018c8:	817b      	strh	r3, [r7, #10]
 80018ca:	460b      	mov	r3, r1
 80018cc:	813b      	strh	r3, [r7, #8]
 80018ce:	4613      	mov	r3, r2
 80018d0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80018d2:	2300      	movs	r3, #0
 80018d4:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80018d6:	f7ff fb27 	bl	8000f28 <HAL_GetTick>
 80018da:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	2b20      	cmp	r3, #32
 80018e6:	f040 8244 	bne.w	8001d72 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80018ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ec:	9300      	str	r3, [sp, #0]
 80018ee:	2319      	movs	r3, #25
 80018f0:	2201      	movs	r2, #1
 80018f2:	4982      	ldr	r1, [pc, #520]	@ (8001afc <HAL_I2C_Mem_Read+0x244>)
 80018f4:	68f8      	ldr	r0, [r7, #12]
 80018f6:	f000 fbc5 	bl	8002084 <I2C_WaitOnFlagUntilTimeout>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8001900:	2302      	movs	r3, #2
 8001902:	e237      	b.n	8001d74 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800190a:	2b01      	cmp	r3, #1
 800190c:	d101      	bne.n	8001912 <HAL_I2C_Mem_Read+0x5a>
 800190e:	2302      	movs	r3, #2
 8001910:	e230      	b.n	8001d74 <HAL_I2C_Mem_Read+0x4bc>
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	2201      	movs	r2, #1
 8001916:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0301 	and.w	r3, r3, #1
 8001924:	2b01      	cmp	r3, #1
 8001926:	d007      	beq.n	8001938 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f042 0201 	orr.w	r2, r2, #1
 8001936:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001946:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	2222      	movs	r2, #34	@ 0x22
 800194c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	2240      	movs	r2, #64	@ 0x40
 8001954:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	2200      	movs	r2, #0
 800195c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001962:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001968:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800196e:	b29a      	uxth	r2, r3
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	4a62      	ldr	r2, [pc, #392]	@ (8001b00 <HAL_I2C_Mem_Read+0x248>)
 8001978:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800197a:	88f8      	ldrh	r0, [r7, #6]
 800197c:	893a      	ldrh	r2, [r7, #8]
 800197e:	8979      	ldrh	r1, [r7, #10]
 8001980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001982:	9301      	str	r3, [sp, #4]
 8001984:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001986:	9300      	str	r3, [sp, #0]
 8001988:	4603      	mov	r3, r0
 800198a:	68f8      	ldr	r0, [r7, #12]
 800198c:	f000 fa92 	bl	8001eb4 <I2C_RequestMemoryRead>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e1ec      	b.n	8001d74 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d113      	bne.n	80019ca <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019a2:	2300      	movs	r3, #0
 80019a4:	61fb      	str	r3, [r7, #28]
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	695b      	ldr	r3, [r3, #20]
 80019ac:	61fb      	str	r3, [r7, #28]
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	699b      	ldr	r3, [r3, #24]
 80019b4:	61fb      	str	r3, [r7, #28]
 80019b6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80019c6:	601a      	str	r2, [r3, #0]
 80019c8:	e1c0      	b.n	8001d4c <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d11e      	bne.n	8001a10 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80019e0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80019e2:	b672      	cpsid	i
}
 80019e4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019e6:	2300      	movs	r3, #0
 80019e8:	61bb      	str	r3, [r7, #24]
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	695b      	ldr	r3, [r3, #20]
 80019f0:	61bb      	str	r3, [r7, #24]
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	699b      	ldr	r3, [r3, #24]
 80019f8:	61bb      	str	r3, [r7, #24]
 80019fa:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a0a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001a0c:	b662      	cpsie	i
}
 8001a0e:	e035      	b.n	8001a7c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d11e      	bne.n	8001a56 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001a26:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001a28:	b672      	cpsid	i
}
 8001a2a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	617b      	str	r3, [r7, #20]
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	695b      	ldr	r3, [r3, #20]
 8001a36:	617b      	str	r3, [r7, #20]
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	699b      	ldr	r3, [r3, #24]
 8001a3e:	617b      	str	r3, [r7, #20]
 8001a40:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001a50:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001a52:	b662      	cpsie	i
}
 8001a54:	e012      	b.n	8001a7c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001a64:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a66:	2300      	movs	r3, #0
 8001a68:	613b      	str	r3, [r7, #16]
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	695b      	ldr	r3, [r3, #20]
 8001a70:	613b      	str	r3, [r7, #16]
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	699b      	ldr	r3, [r3, #24]
 8001a78:	613b      	str	r3, [r7, #16]
 8001a7a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001a7c:	e166      	b.n	8001d4c <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a82:	2b03      	cmp	r3, #3
 8001a84:	f200 811f 	bhi.w	8001cc6 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d123      	bne.n	8001ad8 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a92:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001a94:	68f8      	ldr	r0, [r7, #12]
 8001a96:	f000 fc9f 	bl	80023d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e167      	b.n	8001d74 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	691a      	ldr	r2, [r3, #16]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aae:	b2d2      	uxtb	r2, r2
 8001ab0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ab6:	1c5a      	adds	r2, r3, #1
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ac0:	3b01      	subs	r3, #1
 8001ac2:	b29a      	uxth	r2, r3
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	3b01      	subs	r3, #1
 8001ad0:	b29a      	uxth	r2, r3
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001ad6:	e139      	b.n	8001d4c <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d152      	bne.n	8001b86 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ae2:	9300      	str	r3, [sp, #0]
 8001ae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	4906      	ldr	r1, [pc, #24]	@ (8001b04 <HAL_I2C_Mem_Read+0x24c>)
 8001aea:	68f8      	ldr	r0, [r7, #12]
 8001aec:	f000 faca 	bl	8002084 <I2C_WaitOnFlagUntilTimeout>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d008      	beq.n	8001b08 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e13c      	b.n	8001d74 <HAL_I2C_Mem_Read+0x4bc>
 8001afa:	bf00      	nop
 8001afc:	00100002 	.word	0x00100002
 8001b00:	ffff0000 	.word	0xffff0000
 8001b04:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001b08:	b672      	cpsid	i
}
 8001b0a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b1a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	691a      	ldr	r2, [r3, #16]
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b26:	b2d2      	uxtb	r2, r2
 8001b28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b2e:	1c5a      	adds	r2, r3, #1
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b38:	3b01      	subs	r3, #1
 8001b3a:	b29a      	uxth	r2, r3
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b44:	b29b      	uxth	r3, r3
 8001b46:	3b01      	subs	r3, #1
 8001b48:	b29a      	uxth	r2, r3
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001b4e:	b662      	cpsie	i
}
 8001b50:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	691a      	ldr	r2, [r3, #16]
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b5c:	b2d2      	uxtb	r2, r2
 8001b5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b64:	1c5a      	adds	r2, r3, #1
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b6e:	3b01      	subs	r3, #1
 8001b70:	b29a      	uxth	r2, r3
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	3b01      	subs	r3, #1
 8001b7e:	b29a      	uxth	r2, r3
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001b84:	e0e2      	b.n	8001d4c <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b88:	9300      	str	r3, [sp, #0]
 8001b8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	497b      	ldr	r1, [pc, #492]	@ (8001d7c <HAL_I2C_Mem_Read+0x4c4>)
 8001b90:	68f8      	ldr	r0, [r7, #12]
 8001b92:	f000 fa77 	bl	8002084 <I2C_WaitOnFlagUntilTimeout>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e0e9      	b.n	8001d74 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001bae:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001bb0:	b672      	cpsid	i
}
 8001bb2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	691a      	ldr	r2, [r3, #16]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bbe:	b2d2      	uxtb	r2, r2
 8001bc0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bc6:	1c5a      	adds	r2, r3, #1
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bd0:	3b01      	subs	r3, #1
 8001bd2:	b29a      	uxth	r2, r3
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bdc:	b29b      	uxth	r3, r3
 8001bde:	3b01      	subs	r3, #1
 8001be0:	b29a      	uxth	r2, r3
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001be6:	4b66      	ldr	r3, [pc, #408]	@ (8001d80 <HAL_I2C_Mem_Read+0x4c8>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	08db      	lsrs	r3, r3, #3
 8001bec:	4a65      	ldr	r2, [pc, #404]	@ (8001d84 <HAL_I2C_Mem_Read+0x4cc>)
 8001bee:	fba2 2303 	umull	r2, r3, r2, r3
 8001bf2:	0a1a      	lsrs	r2, r3, #8
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	4413      	add	r3, r2
 8001bfa:	00da      	lsls	r2, r3, #3
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001c00:	6a3b      	ldr	r3, [r7, #32]
 8001c02:	3b01      	subs	r3, #1
 8001c04:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8001c06:	6a3b      	ldr	r3, [r7, #32]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d118      	bne.n	8001c3e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2220      	movs	r2, #32
 8001c16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c26:	f043 0220 	orr.w	r2, r3, #32
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001c2e:	b662      	cpsie	i
}
 8001c30:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2200      	movs	r2, #0
 8001c36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e09a      	b.n	8001d74 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	695b      	ldr	r3, [r3, #20]
 8001c44:	f003 0304 	and.w	r3, r3, #4
 8001c48:	2b04      	cmp	r3, #4
 8001c4a:	d1d9      	bne.n	8001c00 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c5a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	691a      	ldr	r2, [r3, #16]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c66:	b2d2      	uxtb	r2, r2
 8001c68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c6e:	1c5a      	adds	r2, r3, #1
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c78:	3b01      	subs	r3, #1
 8001c7a:	b29a      	uxth	r2, r3
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c84:	b29b      	uxth	r3, r3
 8001c86:	3b01      	subs	r3, #1
 8001c88:	b29a      	uxth	r2, r3
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001c8e:	b662      	cpsie	i
}
 8001c90:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	691a      	ldr	r2, [r3, #16]
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c9c:	b2d2      	uxtb	r2, r2
 8001c9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ca4:	1c5a      	adds	r2, r3, #1
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cae:	3b01      	subs	r3, #1
 8001cb0:	b29a      	uxth	r2, r3
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	3b01      	subs	r3, #1
 8001cbe:	b29a      	uxth	r2, r3
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001cc4:	e042      	b.n	8001d4c <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cc8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001cca:	68f8      	ldr	r0, [r7, #12]
 8001ccc:	f000 fb84 	bl	80023d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e04c      	b.n	8001d74 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	691a      	ldr	r2, [r3, #16]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ce4:	b2d2      	uxtb	r2, r2
 8001ce6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cec:	1c5a      	adds	r2, r3, #1
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cf6:	3b01      	subs	r3, #1
 8001cf8:	b29a      	uxth	r2, r3
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	3b01      	subs	r3, #1
 8001d06:	b29a      	uxth	r2, r3
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	695b      	ldr	r3, [r3, #20]
 8001d12:	f003 0304 	and.w	r3, r3, #4
 8001d16:	2b04      	cmp	r3, #4
 8001d18:	d118      	bne.n	8001d4c <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	691a      	ldr	r2, [r3, #16]
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d24:	b2d2      	uxtb	r2, r2
 8001d26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d2c:	1c5a      	adds	r2, r3, #1
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d36:	3b01      	subs	r3, #1
 8001d38:	b29a      	uxth	r2, r3
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	3b01      	subs	r3, #1
 8001d46:	b29a      	uxth	r2, r3
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	f47f ae94 	bne.w	8001a7e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	2220      	movs	r2, #32
 8001d5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2200      	movs	r2, #0
 8001d62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	e000      	b.n	8001d74 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8001d72:	2302      	movs	r3, #2
  }
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3728      	adds	r7, #40	@ 0x28
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	00010004 	.word	0x00010004
 8001d80:	20000048 	.word	0x20000048
 8001d84:	14f8b589 	.word	0x14f8b589

08001d88 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b088      	sub	sp, #32
 8001d8c:	af02      	add	r7, sp, #8
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	4608      	mov	r0, r1
 8001d92:	4611      	mov	r1, r2
 8001d94:	461a      	mov	r2, r3
 8001d96:	4603      	mov	r3, r0
 8001d98:	817b      	strh	r3, [r7, #10]
 8001d9a:	460b      	mov	r3, r1
 8001d9c:	813b      	strh	r3, [r7, #8]
 8001d9e:	4613      	mov	r3, r2
 8001da0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001db0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001db4:	9300      	str	r3, [sp, #0]
 8001db6:	6a3b      	ldr	r3, [r7, #32]
 8001db8:	2200      	movs	r2, #0
 8001dba:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001dbe:	68f8      	ldr	r0, [r7, #12]
 8001dc0:	f000 f960 	bl	8002084 <I2C_WaitOnFlagUntilTimeout>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d00d      	beq.n	8001de6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dd4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001dd8:	d103      	bne.n	8001de2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001de0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e05f      	b.n	8001ea6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001de6:	897b      	ldrh	r3, [r7, #10]
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	461a      	mov	r2, r3
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001df4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001df8:	6a3a      	ldr	r2, [r7, #32]
 8001dfa:	492d      	ldr	r1, [pc, #180]	@ (8001eb0 <I2C_RequestMemoryWrite+0x128>)
 8001dfc:	68f8      	ldr	r0, [r7, #12]
 8001dfe:	f000 f9bb 	bl	8002178 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e04c      	b.n	8001ea6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	617b      	str	r3, [r7, #20]
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	695b      	ldr	r3, [r3, #20]
 8001e16:	617b      	str	r3, [r7, #20]
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	699b      	ldr	r3, [r3, #24]
 8001e1e:	617b      	str	r3, [r7, #20]
 8001e20:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e24:	6a39      	ldr	r1, [r7, #32]
 8001e26:	68f8      	ldr	r0, [r7, #12]
 8001e28:	f000 fa46 	bl	80022b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d00d      	beq.n	8001e4e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e36:	2b04      	cmp	r3, #4
 8001e38:	d107      	bne.n	8001e4a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e48:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e02b      	b.n	8001ea6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001e4e:	88fb      	ldrh	r3, [r7, #6]
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d105      	bne.n	8001e60 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001e54:	893b      	ldrh	r3, [r7, #8]
 8001e56:	b2da      	uxtb	r2, r3
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	611a      	str	r2, [r3, #16]
 8001e5e:	e021      	b.n	8001ea4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001e60:	893b      	ldrh	r3, [r7, #8]
 8001e62:	0a1b      	lsrs	r3, r3, #8
 8001e64:	b29b      	uxth	r3, r3
 8001e66:	b2da      	uxtb	r2, r3
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e70:	6a39      	ldr	r1, [r7, #32]
 8001e72:	68f8      	ldr	r0, [r7, #12]
 8001e74:	f000 fa20 	bl	80022b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d00d      	beq.n	8001e9a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e82:	2b04      	cmp	r3, #4
 8001e84:	d107      	bne.n	8001e96 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e94:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e005      	b.n	8001ea6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001e9a:	893b      	ldrh	r3, [r7, #8]
 8001e9c:	b2da      	uxtb	r2, r3
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001ea4:	2300      	movs	r3, #0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3718      	adds	r7, #24
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	00010002 	.word	0x00010002

08001eb4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b088      	sub	sp, #32
 8001eb8:	af02      	add	r7, sp, #8
 8001eba:	60f8      	str	r0, [r7, #12]
 8001ebc:	4608      	mov	r0, r1
 8001ebe:	4611      	mov	r1, r2
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	817b      	strh	r3, [r7, #10]
 8001ec6:	460b      	mov	r3, r1
 8001ec8:	813b      	strh	r3, [r7, #8]
 8001eca:	4613      	mov	r3, r2
 8001ecc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001edc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001eec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ef0:	9300      	str	r3, [sp, #0]
 8001ef2:	6a3b      	ldr	r3, [r7, #32]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001efa:	68f8      	ldr	r0, [r7, #12]
 8001efc:	f000 f8c2 	bl	8002084 <I2C_WaitOnFlagUntilTimeout>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d00d      	beq.n	8001f22 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f14:	d103      	bne.n	8001f1e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f1c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e0aa      	b.n	8002078 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001f22:	897b      	ldrh	r3, [r7, #10]
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	461a      	mov	r2, r3
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001f30:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f34:	6a3a      	ldr	r2, [r7, #32]
 8001f36:	4952      	ldr	r1, [pc, #328]	@ (8002080 <I2C_RequestMemoryRead+0x1cc>)
 8001f38:	68f8      	ldr	r0, [r7, #12]
 8001f3a:	f000 f91d 	bl	8002178 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e097      	b.n	8002078 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f48:	2300      	movs	r3, #0
 8001f4a:	617b      	str	r3, [r7, #20]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	695b      	ldr	r3, [r3, #20]
 8001f52:	617b      	str	r3, [r7, #20]
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	699b      	ldr	r3, [r3, #24]
 8001f5a:	617b      	str	r3, [r7, #20]
 8001f5c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f60:	6a39      	ldr	r1, [r7, #32]
 8001f62:	68f8      	ldr	r0, [r7, #12]
 8001f64:	f000 f9a8 	bl	80022b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d00d      	beq.n	8001f8a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f72:	2b04      	cmp	r3, #4
 8001f74:	d107      	bne.n	8001f86 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f84:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e076      	b.n	8002078 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001f8a:	88fb      	ldrh	r3, [r7, #6]
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d105      	bne.n	8001f9c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001f90:	893b      	ldrh	r3, [r7, #8]
 8001f92:	b2da      	uxtb	r2, r3
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	611a      	str	r2, [r3, #16]
 8001f9a:	e021      	b.n	8001fe0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001f9c:	893b      	ldrh	r3, [r7, #8]
 8001f9e:	0a1b      	lsrs	r3, r3, #8
 8001fa0:	b29b      	uxth	r3, r3
 8001fa2:	b2da      	uxtb	r2, r3
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001faa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fac:	6a39      	ldr	r1, [r7, #32]
 8001fae:	68f8      	ldr	r0, [r7, #12]
 8001fb0:	f000 f982 	bl	80022b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d00d      	beq.n	8001fd6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fbe:	2b04      	cmp	r3, #4
 8001fc0:	d107      	bne.n	8001fd2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001fd0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e050      	b.n	8002078 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001fd6:	893b      	ldrh	r3, [r7, #8]
 8001fd8:	b2da      	uxtb	r2, r3
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fe0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fe2:	6a39      	ldr	r1, [r7, #32]
 8001fe4:	68f8      	ldr	r0, [r7, #12]
 8001fe6:	f000 f967 	bl	80022b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d00d      	beq.n	800200c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff4:	2b04      	cmp	r3, #4
 8001ff6:	d107      	bne.n	8002008 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002006:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e035      	b.n	8002078 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800201a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800201c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800201e:	9300      	str	r3, [sp, #0]
 8002020:	6a3b      	ldr	r3, [r7, #32]
 8002022:	2200      	movs	r2, #0
 8002024:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002028:	68f8      	ldr	r0, [r7, #12]
 800202a:	f000 f82b 	bl	8002084 <I2C_WaitOnFlagUntilTimeout>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d00d      	beq.n	8002050 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800203e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002042:	d103      	bne.n	800204c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800204a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	e013      	b.n	8002078 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002050:	897b      	ldrh	r3, [r7, #10]
 8002052:	b2db      	uxtb	r3, r3
 8002054:	f043 0301 	orr.w	r3, r3, #1
 8002058:	b2da      	uxtb	r2, r3
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002062:	6a3a      	ldr	r2, [r7, #32]
 8002064:	4906      	ldr	r1, [pc, #24]	@ (8002080 <I2C_RequestMemoryRead+0x1cc>)
 8002066:	68f8      	ldr	r0, [r7, #12]
 8002068:	f000 f886 	bl	8002178 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e000      	b.n	8002078 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002076:	2300      	movs	r3, #0
}
 8002078:	4618      	mov	r0, r3
 800207a:	3718      	adds	r7, #24
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	00010002 	.word	0x00010002

08002084 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b084      	sub	sp, #16
 8002088:	af00      	add	r7, sp, #0
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	60b9      	str	r1, [r7, #8]
 800208e:	603b      	str	r3, [r7, #0]
 8002090:	4613      	mov	r3, r2
 8002092:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002094:	e048      	b.n	8002128 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800209c:	d044      	beq.n	8002128 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800209e:	f7fe ff43 	bl	8000f28 <HAL_GetTick>
 80020a2:	4602      	mov	r2, r0
 80020a4:	69bb      	ldr	r3, [r7, #24]
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	683a      	ldr	r2, [r7, #0]
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d302      	bcc.n	80020b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d139      	bne.n	8002128 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	0c1b      	lsrs	r3, r3, #16
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d10d      	bne.n	80020da <I2C_WaitOnFlagUntilTimeout+0x56>
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	695b      	ldr	r3, [r3, #20]
 80020c4:	43da      	mvns	r2, r3
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	4013      	ands	r3, r2
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	bf0c      	ite	eq
 80020d0:	2301      	moveq	r3, #1
 80020d2:	2300      	movne	r3, #0
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	461a      	mov	r2, r3
 80020d8:	e00c      	b.n	80020f4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	699b      	ldr	r3, [r3, #24]
 80020e0:	43da      	mvns	r2, r3
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	4013      	ands	r3, r2
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	bf0c      	ite	eq
 80020ec:	2301      	moveq	r3, #1
 80020ee:	2300      	movne	r3, #0
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	461a      	mov	r2, r3
 80020f4:	79fb      	ldrb	r3, [r7, #7]
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d116      	bne.n	8002128 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2200      	movs	r2, #0
 80020fe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2220      	movs	r2, #32
 8002104:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2200      	movs	r2, #0
 800210c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002114:	f043 0220 	orr.w	r2, r3, #32
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2200      	movs	r2, #0
 8002120:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e023      	b.n	8002170 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	0c1b      	lsrs	r3, r3, #16
 800212c:	b2db      	uxtb	r3, r3
 800212e:	2b01      	cmp	r3, #1
 8002130:	d10d      	bne.n	800214e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	695b      	ldr	r3, [r3, #20]
 8002138:	43da      	mvns	r2, r3
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	4013      	ands	r3, r2
 800213e:	b29b      	uxth	r3, r3
 8002140:	2b00      	cmp	r3, #0
 8002142:	bf0c      	ite	eq
 8002144:	2301      	moveq	r3, #1
 8002146:	2300      	movne	r3, #0
 8002148:	b2db      	uxtb	r3, r3
 800214a:	461a      	mov	r2, r3
 800214c:	e00c      	b.n	8002168 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	699b      	ldr	r3, [r3, #24]
 8002154:	43da      	mvns	r2, r3
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	4013      	ands	r3, r2
 800215a:	b29b      	uxth	r3, r3
 800215c:	2b00      	cmp	r3, #0
 800215e:	bf0c      	ite	eq
 8002160:	2301      	moveq	r3, #1
 8002162:	2300      	movne	r3, #0
 8002164:	b2db      	uxtb	r3, r3
 8002166:	461a      	mov	r2, r3
 8002168:	79fb      	ldrb	r3, [r7, #7]
 800216a:	429a      	cmp	r2, r3
 800216c:	d093      	beq.n	8002096 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800216e:	2300      	movs	r3, #0
}
 8002170:	4618      	mov	r0, r3
 8002172:	3710      	adds	r7, #16
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}

08002178 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	60f8      	str	r0, [r7, #12]
 8002180:	60b9      	str	r1, [r7, #8]
 8002182:	607a      	str	r2, [r7, #4]
 8002184:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002186:	e071      	b.n	800226c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	695b      	ldr	r3, [r3, #20]
 800218e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002192:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002196:	d123      	bne.n	80021e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021a6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80021b0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2200      	movs	r2, #0
 80021b6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2220      	movs	r2, #32
 80021bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2200      	movs	r2, #0
 80021c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021cc:	f043 0204 	orr.w	r2, r3, #4
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2200      	movs	r2, #0
 80021d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e067      	b.n	80022b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021e6:	d041      	beq.n	800226c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021e8:	f7fe fe9e 	bl	8000f28 <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d302      	bcc.n	80021fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d136      	bne.n	800226c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	0c1b      	lsrs	r3, r3, #16
 8002202:	b2db      	uxtb	r3, r3
 8002204:	2b01      	cmp	r3, #1
 8002206:	d10c      	bne.n	8002222 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	695b      	ldr	r3, [r3, #20]
 800220e:	43da      	mvns	r2, r3
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	4013      	ands	r3, r2
 8002214:	b29b      	uxth	r3, r3
 8002216:	2b00      	cmp	r3, #0
 8002218:	bf14      	ite	ne
 800221a:	2301      	movne	r3, #1
 800221c:	2300      	moveq	r3, #0
 800221e:	b2db      	uxtb	r3, r3
 8002220:	e00b      	b.n	800223a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	699b      	ldr	r3, [r3, #24]
 8002228:	43da      	mvns	r2, r3
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	4013      	ands	r3, r2
 800222e:	b29b      	uxth	r3, r3
 8002230:	2b00      	cmp	r3, #0
 8002232:	bf14      	ite	ne
 8002234:	2301      	movne	r3, #1
 8002236:	2300      	moveq	r3, #0
 8002238:	b2db      	uxtb	r3, r3
 800223a:	2b00      	cmp	r3, #0
 800223c:	d016      	beq.n	800226c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2200      	movs	r2, #0
 8002242:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2220      	movs	r2, #32
 8002248:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2200      	movs	r2, #0
 8002250:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002258:	f043 0220 	orr.w	r2, r3, #32
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2200      	movs	r2, #0
 8002264:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e021      	b.n	80022b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	0c1b      	lsrs	r3, r3, #16
 8002270:	b2db      	uxtb	r3, r3
 8002272:	2b01      	cmp	r3, #1
 8002274:	d10c      	bne.n	8002290 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	695b      	ldr	r3, [r3, #20]
 800227c:	43da      	mvns	r2, r3
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	4013      	ands	r3, r2
 8002282:	b29b      	uxth	r3, r3
 8002284:	2b00      	cmp	r3, #0
 8002286:	bf14      	ite	ne
 8002288:	2301      	movne	r3, #1
 800228a:	2300      	moveq	r3, #0
 800228c:	b2db      	uxtb	r3, r3
 800228e:	e00b      	b.n	80022a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	699b      	ldr	r3, [r3, #24]
 8002296:	43da      	mvns	r2, r3
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	4013      	ands	r3, r2
 800229c:	b29b      	uxth	r3, r3
 800229e:	2b00      	cmp	r3, #0
 80022a0:	bf14      	ite	ne
 80022a2:	2301      	movne	r3, #1
 80022a4:	2300      	moveq	r3, #0
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	f47f af6d 	bne.w	8002188 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80022ae:	2300      	movs	r3, #0
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3710      	adds	r7, #16
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	60b9      	str	r1, [r7, #8]
 80022c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022c4:	e034      	b.n	8002330 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80022c6:	68f8      	ldr	r0, [r7, #12]
 80022c8:	f000 f8e3 	bl	8002492 <I2C_IsAcknowledgeFailed>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d001      	beq.n	80022d6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e034      	b.n	8002340 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022dc:	d028      	beq.n	8002330 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022de:	f7fe fe23 	bl	8000f28 <HAL_GetTick>
 80022e2:	4602      	mov	r2, r0
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	68ba      	ldr	r2, [r7, #8]
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d302      	bcc.n	80022f4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d11d      	bne.n	8002330 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	695b      	ldr	r3, [r3, #20]
 80022fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022fe:	2b80      	cmp	r3, #128	@ 0x80
 8002300:	d016      	beq.n	8002330 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2200      	movs	r2, #0
 8002306:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2220      	movs	r2, #32
 800230c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2200      	movs	r2, #0
 8002314:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800231c:	f043 0220 	orr.w	r2, r3, #32
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2200      	movs	r2, #0
 8002328:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e007      	b.n	8002340 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	695b      	ldr	r3, [r3, #20]
 8002336:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800233a:	2b80      	cmp	r3, #128	@ 0x80
 800233c:	d1c3      	bne.n	80022c6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800233e:	2300      	movs	r3, #0
}
 8002340:	4618      	mov	r0, r3
 8002342:	3710      	adds	r7, #16
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}

08002348 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	60f8      	str	r0, [r7, #12]
 8002350:	60b9      	str	r1, [r7, #8]
 8002352:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002354:	e034      	b.n	80023c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002356:	68f8      	ldr	r0, [r7, #12]
 8002358:	f000 f89b 	bl	8002492 <I2C_IsAcknowledgeFailed>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d001      	beq.n	8002366 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e034      	b.n	80023d0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800236c:	d028      	beq.n	80023c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800236e:	f7fe fddb 	bl	8000f28 <HAL_GetTick>
 8002372:	4602      	mov	r2, r0
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	68ba      	ldr	r2, [r7, #8]
 800237a:	429a      	cmp	r2, r3
 800237c:	d302      	bcc.n	8002384 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d11d      	bne.n	80023c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	695b      	ldr	r3, [r3, #20]
 800238a:	f003 0304 	and.w	r3, r3, #4
 800238e:	2b04      	cmp	r3, #4
 8002390:	d016      	beq.n	80023c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2200      	movs	r2, #0
 8002396:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2220      	movs	r2, #32
 800239c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2200      	movs	r2, #0
 80023a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ac:	f043 0220 	orr.w	r2, r3, #32
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2200      	movs	r2, #0
 80023b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e007      	b.n	80023d0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	695b      	ldr	r3, [r3, #20]
 80023c6:	f003 0304 	and.w	r3, r3, #4
 80023ca:	2b04      	cmp	r3, #4
 80023cc:	d1c3      	bne.n	8002356 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80023ce:	2300      	movs	r3, #0
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3710      	adds	r7, #16
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af00      	add	r7, sp, #0
 80023de:	60f8      	str	r0, [r7, #12]
 80023e0:	60b9      	str	r1, [r7, #8]
 80023e2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80023e4:	e049      	b.n	800247a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	695b      	ldr	r3, [r3, #20]
 80023ec:	f003 0310 	and.w	r3, r3, #16
 80023f0:	2b10      	cmp	r3, #16
 80023f2:	d119      	bne.n	8002428 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f06f 0210 	mvn.w	r2, #16
 80023fc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2200      	movs	r2, #0
 8002402:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2220      	movs	r2, #32
 8002408:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2200      	movs	r2, #0
 8002410:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2200      	movs	r2, #0
 8002420:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e030      	b.n	800248a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002428:	f7fe fd7e 	bl	8000f28 <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	68ba      	ldr	r2, [r7, #8]
 8002434:	429a      	cmp	r2, r3
 8002436:	d302      	bcc.n	800243e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d11d      	bne.n	800247a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	695b      	ldr	r3, [r3, #20]
 8002444:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002448:	2b40      	cmp	r3, #64	@ 0x40
 800244a:	d016      	beq.n	800247a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2200      	movs	r2, #0
 8002450:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2220      	movs	r2, #32
 8002456:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2200      	movs	r2, #0
 800245e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002466:	f043 0220 	orr.w	r2, r3, #32
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2200      	movs	r2, #0
 8002472:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e007      	b.n	800248a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	695b      	ldr	r3, [r3, #20]
 8002480:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002484:	2b40      	cmp	r3, #64	@ 0x40
 8002486:	d1ae      	bne.n	80023e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002488:	2300      	movs	r3, #0
}
 800248a:	4618      	mov	r0, r3
 800248c:	3710      	adds	r7, #16
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}

08002492 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002492:	b480      	push	{r7}
 8002494:	b083      	sub	sp, #12
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	695b      	ldr	r3, [r3, #20]
 80024a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024a8:	d11b      	bne.n	80024e2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80024b2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2220      	movs	r2, #32
 80024be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ce:	f043 0204 	orr.w	r2, r3, #4
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e000      	b.n	80024e4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80024e2:	2300      	movs	r3, #0
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	370c      	adds	r7, #12
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bc80      	pop	{r7}
 80024ec:	4770      	bx	lr
	...

080024f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b086      	sub	sp, #24
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d101      	bne.n	8002502 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e272      	b.n	80029e8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	2b00      	cmp	r3, #0
 800250c:	f000 8087 	beq.w	800261e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002510:	4b92      	ldr	r3, [pc, #584]	@ (800275c <HAL_RCC_OscConfig+0x26c>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f003 030c 	and.w	r3, r3, #12
 8002518:	2b04      	cmp	r3, #4
 800251a:	d00c      	beq.n	8002536 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800251c:	4b8f      	ldr	r3, [pc, #572]	@ (800275c <HAL_RCC_OscConfig+0x26c>)
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f003 030c 	and.w	r3, r3, #12
 8002524:	2b08      	cmp	r3, #8
 8002526:	d112      	bne.n	800254e <HAL_RCC_OscConfig+0x5e>
 8002528:	4b8c      	ldr	r3, [pc, #560]	@ (800275c <HAL_RCC_OscConfig+0x26c>)
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002530:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002534:	d10b      	bne.n	800254e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002536:	4b89      	ldr	r3, [pc, #548]	@ (800275c <HAL_RCC_OscConfig+0x26c>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d06c      	beq.n	800261c <HAL_RCC_OscConfig+0x12c>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d168      	bne.n	800261c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e24c      	b.n	80029e8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002556:	d106      	bne.n	8002566 <HAL_RCC_OscConfig+0x76>
 8002558:	4b80      	ldr	r3, [pc, #512]	@ (800275c <HAL_RCC_OscConfig+0x26c>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a7f      	ldr	r2, [pc, #508]	@ (800275c <HAL_RCC_OscConfig+0x26c>)
 800255e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002562:	6013      	str	r3, [r2, #0]
 8002564:	e02e      	b.n	80025c4 <HAL_RCC_OscConfig+0xd4>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d10c      	bne.n	8002588 <HAL_RCC_OscConfig+0x98>
 800256e:	4b7b      	ldr	r3, [pc, #492]	@ (800275c <HAL_RCC_OscConfig+0x26c>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a7a      	ldr	r2, [pc, #488]	@ (800275c <HAL_RCC_OscConfig+0x26c>)
 8002574:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002578:	6013      	str	r3, [r2, #0]
 800257a:	4b78      	ldr	r3, [pc, #480]	@ (800275c <HAL_RCC_OscConfig+0x26c>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a77      	ldr	r2, [pc, #476]	@ (800275c <HAL_RCC_OscConfig+0x26c>)
 8002580:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002584:	6013      	str	r3, [r2, #0]
 8002586:	e01d      	b.n	80025c4 <HAL_RCC_OscConfig+0xd4>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002590:	d10c      	bne.n	80025ac <HAL_RCC_OscConfig+0xbc>
 8002592:	4b72      	ldr	r3, [pc, #456]	@ (800275c <HAL_RCC_OscConfig+0x26c>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a71      	ldr	r2, [pc, #452]	@ (800275c <HAL_RCC_OscConfig+0x26c>)
 8002598:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800259c:	6013      	str	r3, [r2, #0]
 800259e:	4b6f      	ldr	r3, [pc, #444]	@ (800275c <HAL_RCC_OscConfig+0x26c>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a6e      	ldr	r2, [pc, #440]	@ (800275c <HAL_RCC_OscConfig+0x26c>)
 80025a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025a8:	6013      	str	r3, [r2, #0]
 80025aa:	e00b      	b.n	80025c4 <HAL_RCC_OscConfig+0xd4>
 80025ac:	4b6b      	ldr	r3, [pc, #428]	@ (800275c <HAL_RCC_OscConfig+0x26c>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a6a      	ldr	r2, [pc, #424]	@ (800275c <HAL_RCC_OscConfig+0x26c>)
 80025b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025b6:	6013      	str	r3, [r2, #0]
 80025b8:	4b68      	ldr	r3, [pc, #416]	@ (800275c <HAL_RCC_OscConfig+0x26c>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a67      	ldr	r2, [pc, #412]	@ (800275c <HAL_RCC_OscConfig+0x26c>)
 80025be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025c2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d013      	beq.n	80025f4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025cc:	f7fe fcac 	bl	8000f28 <HAL_GetTick>
 80025d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025d2:	e008      	b.n	80025e6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025d4:	f7fe fca8 	bl	8000f28 <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	2b64      	cmp	r3, #100	@ 0x64
 80025e0:	d901      	bls.n	80025e6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e200      	b.n	80029e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025e6:	4b5d      	ldr	r3, [pc, #372]	@ (800275c <HAL_RCC_OscConfig+0x26c>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d0f0      	beq.n	80025d4 <HAL_RCC_OscConfig+0xe4>
 80025f2:	e014      	b.n	800261e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f4:	f7fe fc98 	bl	8000f28 <HAL_GetTick>
 80025f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025fa:	e008      	b.n	800260e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025fc:	f7fe fc94 	bl	8000f28 <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	2b64      	cmp	r3, #100	@ 0x64
 8002608:	d901      	bls.n	800260e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e1ec      	b.n	80029e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800260e:	4b53      	ldr	r3, [pc, #332]	@ (800275c <HAL_RCC_OscConfig+0x26c>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d1f0      	bne.n	80025fc <HAL_RCC_OscConfig+0x10c>
 800261a:	e000      	b.n	800261e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800261c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0302 	and.w	r3, r3, #2
 8002626:	2b00      	cmp	r3, #0
 8002628:	d063      	beq.n	80026f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800262a:	4b4c      	ldr	r3, [pc, #304]	@ (800275c <HAL_RCC_OscConfig+0x26c>)
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f003 030c 	and.w	r3, r3, #12
 8002632:	2b00      	cmp	r3, #0
 8002634:	d00b      	beq.n	800264e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002636:	4b49      	ldr	r3, [pc, #292]	@ (800275c <HAL_RCC_OscConfig+0x26c>)
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f003 030c 	and.w	r3, r3, #12
 800263e:	2b08      	cmp	r3, #8
 8002640:	d11c      	bne.n	800267c <HAL_RCC_OscConfig+0x18c>
 8002642:	4b46      	ldr	r3, [pc, #280]	@ (800275c <HAL_RCC_OscConfig+0x26c>)
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d116      	bne.n	800267c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800264e:	4b43      	ldr	r3, [pc, #268]	@ (800275c <HAL_RCC_OscConfig+0x26c>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0302 	and.w	r3, r3, #2
 8002656:	2b00      	cmp	r3, #0
 8002658:	d005      	beq.n	8002666 <HAL_RCC_OscConfig+0x176>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	2b01      	cmp	r3, #1
 8002660:	d001      	beq.n	8002666 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e1c0      	b.n	80029e8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002666:	4b3d      	ldr	r3, [pc, #244]	@ (800275c <HAL_RCC_OscConfig+0x26c>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	695b      	ldr	r3, [r3, #20]
 8002672:	00db      	lsls	r3, r3, #3
 8002674:	4939      	ldr	r1, [pc, #228]	@ (800275c <HAL_RCC_OscConfig+0x26c>)
 8002676:	4313      	orrs	r3, r2
 8002678:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800267a:	e03a      	b.n	80026f2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	691b      	ldr	r3, [r3, #16]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d020      	beq.n	80026c6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002684:	4b36      	ldr	r3, [pc, #216]	@ (8002760 <HAL_RCC_OscConfig+0x270>)
 8002686:	2201      	movs	r2, #1
 8002688:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800268a:	f7fe fc4d 	bl	8000f28 <HAL_GetTick>
 800268e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002690:	e008      	b.n	80026a4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002692:	f7fe fc49 	bl	8000f28 <HAL_GetTick>
 8002696:	4602      	mov	r2, r0
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	2b02      	cmp	r3, #2
 800269e:	d901      	bls.n	80026a4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80026a0:	2303      	movs	r3, #3
 80026a2:	e1a1      	b.n	80029e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026a4:	4b2d      	ldr	r3, [pc, #180]	@ (800275c <HAL_RCC_OscConfig+0x26c>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0302 	and.w	r3, r3, #2
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d0f0      	beq.n	8002692 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026b0:	4b2a      	ldr	r3, [pc, #168]	@ (800275c <HAL_RCC_OscConfig+0x26c>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	695b      	ldr	r3, [r3, #20]
 80026bc:	00db      	lsls	r3, r3, #3
 80026be:	4927      	ldr	r1, [pc, #156]	@ (800275c <HAL_RCC_OscConfig+0x26c>)
 80026c0:	4313      	orrs	r3, r2
 80026c2:	600b      	str	r3, [r1, #0]
 80026c4:	e015      	b.n	80026f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026c6:	4b26      	ldr	r3, [pc, #152]	@ (8002760 <HAL_RCC_OscConfig+0x270>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026cc:	f7fe fc2c 	bl	8000f28 <HAL_GetTick>
 80026d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026d2:	e008      	b.n	80026e6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026d4:	f7fe fc28 	bl	8000f28 <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d901      	bls.n	80026e6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e180      	b.n	80029e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026e6:	4b1d      	ldr	r3, [pc, #116]	@ (800275c <HAL_RCC_OscConfig+0x26c>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0302 	and.w	r3, r3, #2
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d1f0      	bne.n	80026d4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0308 	and.w	r3, r3, #8
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d03a      	beq.n	8002774 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	699b      	ldr	r3, [r3, #24]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d019      	beq.n	800273a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002706:	4b17      	ldr	r3, [pc, #92]	@ (8002764 <HAL_RCC_OscConfig+0x274>)
 8002708:	2201      	movs	r2, #1
 800270a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800270c:	f7fe fc0c 	bl	8000f28 <HAL_GetTick>
 8002710:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002712:	e008      	b.n	8002726 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002714:	f7fe fc08 	bl	8000f28 <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	2b02      	cmp	r3, #2
 8002720:	d901      	bls.n	8002726 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e160      	b.n	80029e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002726:	4b0d      	ldr	r3, [pc, #52]	@ (800275c <HAL_RCC_OscConfig+0x26c>)
 8002728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800272a:	f003 0302 	and.w	r3, r3, #2
 800272e:	2b00      	cmp	r3, #0
 8002730:	d0f0      	beq.n	8002714 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002732:	2001      	movs	r0, #1
 8002734:	f000 faba 	bl	8002cac <RCC_Delay>
 8002738:	e01c      	b.n	8002774 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800273a:	4b0a      	ldr	r3, [pc, #40]	@ (8002764 <HAL_RCC_OscConfig+0x274>)
 800273c:	2200      	movs	r2, #0
 800273e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002740:	f7fe fbf2 	bl	8000f28 <HAL_GetTick>
 8002744:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002746:	e00f      	b.n	8002768 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002748:	f7fe fbee 	bl	8000f28 <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	2b02      	cmp	r3, #2
 8002754:	d908      	bls.n	8002768 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e146      	b.n	80029e8 <HAL_RCC_OscConfig+0x4f8>
 800275a:	bf00      	nop
 800275c:	40021000 	.word	0x40021000
 8002760:	42420000 	.word	0x42420000
 8002764:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002768:	4b92      	ldr	r3, [pc, #584]	@ (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 800276a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800276c:	f003 0302 	and.w	r3, r3, #2
 8002770:	2b00      	cmp	r3, #0
 8002772:	d1e9      	bne.n	8002748 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0304 	and.w	r3, r3, #4
 800277c:	2b00      	cmp	r3, #0
 800277e:	f000 80a6 	beq.w	80028ce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002782:	2300      	movs	r3, #0
 8002784:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002786:	4b8b      	ldr	r3, [pc, #556]	@ (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 8002788:	69db      	ldr	r3, [r3, #28]
 800278a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d10d      	bne.n	80027ae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002792:	4b88      	ldr	r3, [pc, #544]	@ (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 8002794:	69db      	ldr	r3, [r3, #28]
 8002796:	4a87      	ldr	r2, [pc, #540]	@ (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 8002798:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800279c:	61d3      	str	r3, [r2, #28]
 800279e:	4b85      	ldr	r3, [pc, #532]	@ (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 80027a0:	69db      	ldr	r3, [r3, #28]
 80027a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027a6:	60bb      	str	r3, [r7, #8]
 80027a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027aa:	2301      	movs	r3, #1
 80027ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ae:	4b82      	ldr	r3, [pc, #520]	@ (80029b8 <HAL_RCC_OscConfig+0x4c8>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d118      	bne.n	80027ec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027ba:	4b7f      	ldr	r3, [pc, #508]	@ (80029b8 <HAL_RCC_OscConfig+0x4c8>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a7e      	ldr	r2, [pc, #504]	@ (80029b8 <HAL_RCC_OscConfig+0x4c8>)
 80027c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027c6:	f7fe fbaf 	bl	8000f28 <HAL_GetTick>
 80027ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027cc:	e008      	b.n	80027e0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027ce:	f7fe fbab 	bl	8000f28 <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	2b64      	cmp	r3, #100	@ 0x64
 80027da:	d901      	bls.n	80027e0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	e103      	b.n	80029e8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027e0:	4b75      	ldr	r3, [pc, #468]	@ (80029b8 <HAL_RCC_OscConfig+0x4c8>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d0f0      	beq.n	80027ce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d106      	bne.n	8002802 <HAL_RCC_OscConfig+0x312>
 80027f4:	4b6f      	ldr	r3, [pc, #444]	@ (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 80027f6:	6a1b      	ldr	r3, [r3, #32]
 80027f8:	4a6e      	ldr	r2, [pc, #440]	@ (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 80027fa:	f043 0301 	orr.w	r3, r3, #1
 80027fe:	6213      	str	r3, [r2, #32]
 8002800:	e02d      	b.n	800285e <HAL_RCC_OscConfig+0x36e>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d10c      	bne.n	8002824 <HAL_RCC_OscConfig+0x334>
 800280a:	4b6a      	ldr	r3, [pc, #424]	@ (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 800280c:	6a1b      	ldr	r3, [r3, #32]
 800280e:	4a69      	ldr	r2, [pc, #420]	@ (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 8002810:	f023 0301 	bic.w	r3, r3, #1
 8002814:	6213      	str	r3, [r2, #32]
 8002816:	4b67      	ldr	r3, [pc, #412]	@ (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 8002818:	6a1b      	ldr	r3, [r3, #32]
 800281a:	4a66      	ldr	r2, [pc, #408]	@ (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 800281c:	f023 0304 	bic.w	r3, r3, #4
 8002820:	6213      	str	r3, [r2, #32]
 8002822:	e01c      	b.n	800285e <HAL_RCC_OscConfig+0x36e>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	2b05      	cmp	r3, #5
 800282a:	d10c      	bne.n	8002846 <HAL_RCC_OscConfig+0x356>
 800282c:	4b61      	ldr	r3, [pc, #388]	@ (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 800282e:	6a1b      	ldr	r3, [r3, #32]
 8002830:	4a60      	ldr	r2, [pc, #384]	@ (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 8002832:	f043 0304 	orr.w	r3, r3, #4
 8002836:	6213      	str	r3, [r2, #32]
 8002838:	4b5e      	ldr	r3, [pc, #376]	@ (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 800283a:	6a1b      	ldr	r3, [r3, #32]
 800283c:	4a5d      	ldr	r2, [pc, #372]	@ (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 800283e:	f043 0301 	orr.w	r3, r3, #1
 8002842:	6213      	str	r3, [r2, #32]
 8002844:	e00b      	b.n	800285e <HAL_RCC_OscConfig+0x36e>
 8002846:	4b5b      	ldr	r3, [pc, #364]	@ (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 8002848:	6a1b      	ldr	r3, [r3, #32]
 800284a:	4a5a      	ldr	r2, [pc, #360]	@ (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 800284c:	f023 0301 	bic.w	r3, r3, #1
 8002850:	6213      	str	r3, [r2, #32]
 8002852:	4b58      	ldr	r3, [pc, #352]	@ (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 8002854:	6a1b      	ldr	r3, [r3, #32]
 8002856:	4a57      	ldr	r2, [pc, #348]	@ (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 8002858:	f023 0304 	bic.w	r3, r3, #4
 800285c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d015      	beq.n	8002892 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002866:	f7fe fb5f 	bl	8000f28 <HAL_GetTick>
 800286a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800286c:	e00a      	b.n	8002884 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800286e:	f7fe fb5b 	bl	8000f28 <HAL_GetTick>
 8002872:	4602      	mov	r2, r0
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	f241 3288 	movw	r2, #5000	@ 0x1388
 800287c:	4293      	cmp	r3, r2
 800287e:	d901      	bls.n	8002884 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002880:	2303      	movs	r3, #3
 8002882:	e0b1      	b.n	80029e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002884:	4b4b      	ldr	r3, [pc, #300]	@ (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 8002886:	6a1b      	ldr	r3, [r3, #32]
 8002888:	f003 0302 	and.w	r3, r3, #2
 800288c:	2b00      	cmp	r3, #0
 800288e:	d0ee      	beq.n	800286e <HAL_RCC_OscConfig+0x37e>
 8002890:	e014      	b.n	80028bc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002892:	f7fe fb49 	bl	8000f28 <HAL_GetTick>
 8002896:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002898:	e00a      	b.n	80028b0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800289a:	f7fe fb45 	bl	8000f28 <HAL_GetTick>
 800289e:	4602      	mov	r2, r0
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d901      	bls.n	80028b0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80028ac:	2303      	movs	r3, #3
 80028ae:	e09b      	b.n	80029e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028b0:	4b40      	ldr	r3, [pc, #256]	@ (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 80028b2:	6a1b      	ldr	r3, [r3, #32]
 80028b4:	f003 0302 	and.w	r3, r3, #2
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d1ee      	bne.n	800289a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80028bc:	7dfb      	ldrb	r3, [r7, #23]
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d105      	bne.n	80028ce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028c2:	4b3c      	ldr	r3, [pc, #240]	@ (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 80028c4:	69db      	ldr	r3, [r3, #28]
 80028c6:	4a3b      	ldr	r2, [pc, #236]	@ (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 80028c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028cc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	69db      	ldr	r3, [r3, #28]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	f000 8087 	beq.w	80029e6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028d8:	4b36      	ldr	r3, [pc, #216]	@ (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f003 030c 	and.w	r3, r3, #12
 80028e0:	2b08      	cmp	r3, #8
 80028e2:	d061      	beq.n	80029a8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	69db      	ldr	r3, [r3, #28]
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d146      	bne.n	800297a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028ec:	4b33      	ldr	r3, [pc, #204]	@ (80029bc <HAL_RCC_OscConfig+0x4cc>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f2:	f7fe fb19 	bl	8000f28 <HAL_GetTick>
 80028f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028f8:	e008      	b.n	800290c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028fa:	f7fe fb15 	bl	8000f28 <HAL_GetTick>
 80028fe:	4602      	mov	r2, r0
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	2b02      	cmp	r3, #2
 8002906:	d901      	bls.n	800290c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002908:	2303      	movs	r3, #3
 800290a:	e06d      	b.n	80029e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800290c:	4b29      	ldr	r3, [pc, #164]	@ (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d1f0      	bne.n	80028fa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6a1b      	ldr	r3, [r3, #32]
 800291c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002920:	d108      	bne.n	8002934 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002922:	4b24      	ldr	r3, [pc, #144]	@ (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	4921      	ldr	r1, [pc, #132]	@ (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 8002930:	4313      	orrs	r3, r2
 8002932:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002934:	4b1f      	ldr	r3, [pc, #124]	@ (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6a19      	ldr	r1, [r3, #32]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002944:	430b      	orrs	r3, r1
 8002946:	491b      	ldr	r1, [pc, #108]	@ (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 8002948:	4313      	orrs	r3, r2
 800294a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800294c:	4b1b      	ldr	r3, [pc, #108]	@ (80029bc <HAL_RCC_OscConfig+0x4cc>)
 800294e:	2201      	movs	r2, #1
 8002950:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002952:	f7fe fae9 	bl	8000f28 <HAL_GetTick>
 8002956:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002958:	e008      	b.n	800296c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800295a:	f7fe fae5 	bl	8000f28 <HAL_GetTick>
 800295e:	4602      	mov	r2, r0
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	2b02      	cmp	r3, #2
 8002966:	d901      	bls.n	800296c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	e03d      	b.n	80029e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800296c:	4b11      	ldr	r3, [pc, #68]	@ (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d0f0      	beq.n	800295a <HAL_RCC_OscConfig+0x46a>
 8002978:	e035      	b.n	80029e6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800297a:	4b10      	ldr	r3, [pc, #64]	@ (80029bc <HAL_RCC_OscConfig+0x4cc>)
 800297c:	2200      	movs	r2, #0
 800297e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002980:	f7fe fad2 	bl	8000f28 <HAL_GetTick>
 8002984:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002986:	e008      	b.n	800299a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002988:	f7fe face 	bl	8000f28 <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	2b02      	cmp	r3, #2
 8002994:	d901      	bls.n	800299a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e026      	b.n	80029e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800299a:	4b06      	ldr	r3, [pc, #24]	@ (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d1f0      	bne.n	8002988 <HAL_RCC_OscConfig+0x498>
 80029a6:	e01e      	b.n	80029e6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	69db      	ldr	r3, [r3, #28]
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d107      	bne.n	80029c0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e019      	b.n	80029e8 <HAL_RCC_OscConfig+0x4f8>
 80029b4:	40021000 	.word	0x40021000
 80029b8:	40007000 	.word	0x40007000
 80029bc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80029c0:	4b0b      	ldr	r3, [pc, #44]	@ (80029f0 <HAL_RCC_OscConfig+0x500>)
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6a1b      	ldr	r3, [r3, #32]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d106      	bne.n	80029e2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029de:	429a      	cmp	r2, r3
 80029e0:	d001      	beq.n	80029e6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e000      	b.n	80029e8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80029e6:	2300      	movs	r3, #0
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3718      	adds	r7, #24
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	40021000 	.word	0x40021000

080029f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d101      	bne.n	8002a08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e0d0      	b.n	8002baa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a08:	4b6a      	ldr	r3, [pc, #424]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0307 	and.w	r3, r3, #7
 8002a10:	683a      	ldr	r2, [r7, #0]
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d910      	bls.n	8002a38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a16:	4b67      	ldr	r3, [pc, #412]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f023 0207 	bic.w	r2, r3, #7
 8002a1e:	4965      	ldr	r1, [pc, #404]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a26:	4b63      	ldr	r3, [pc, #396]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0307 	and.w	r3, r3, #7
 8002a2e:	683a      	ldr	r2, [r7, #0]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d001      	beq.n	8002a38 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e0b8      	b.n	8002baa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0302 	and.w	r3, r3, #2
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d020      	beq.n	8002a86 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0304 	and.w	r3, r3, #4
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d005      	beq.n	8002a5c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a50:	4b59      	ldr	r3, [pc, #356]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	4a58      	ldr	r2, [pc, #352]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a56:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002a5a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0308 	and.w	r3, r3, #8
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d005      	beq.n	8002a74 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a68:	4b53      	ldr	r3, [pc, #332]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	4a52      	ldr	r2, [pc, #328]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a6e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002a72:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a74:	4b50      	ldr	r3, [pc, #320]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	494d      	ldr	r1, [pc, #308]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a82:	4313      	orrs	r3, r2
 8002a84:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0301 	and.w	r3, r3, #1
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d040      	beq.n	8002b14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d107      	bne.n	8002aaa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a9a:	4b47      	ldr	r3, [pc, #284]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d115      	bne.n	8002ad2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e07f      	b.n	8002baa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d107      	bne.n	8002ac2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ab2:	4b41      	ldr	r3, [pc, #260]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d109      	bne.n	8002ad2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e073      	b.n	8002baa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ac2:	4b3d      	ldr	r3, [pc, #244]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d101      	bne.n	8002ad2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e06b      	b.n	8002baa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ad2:	4b39      	ldr	r3, [pc, #228]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f023 0203 	bic.w	r2, r3, #3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	4936      	ldr	r1, [pc, #216]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ae4:	f7fe fa20 	bl	8000f28 <HAL_GetTick>
 8002ae8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aea:	e00a      	b.n	8002b02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002aec:	f7fe fa1c 	bl	8000f28 <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d901      	bls.n	8002b02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e053      	b.n	8002baa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b02:	4b2d      	ldr	r3, [pc, #180]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f003 020c 	and.w	r2, r3, #12
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d1eb      	bne.n	8002aec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b14:	4b27      	ldr	r3, [pc, #156]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0307 	and.w	r3, r3, #7
 8002b1c:	683a      	ldr	r2, [r7, #0]
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d210      	bcs.n	8002b44 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b22:	4b24      	ldr	r3, [pc, #144]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f023 0207 	bic.w	r2, r3, #7
 8002b2a:	4922      	ldr	r1, [pc, #136]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b32:	4b20      	ldr	r3, [pc, #128]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0307 	and.w	r3, r3, #7
 8002b3a:	683a      	ldr	r2, [r7, #0]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d001      	beq.n	8002b44 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e032      	b.n	8002baa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0304 	and.w	r3, r3, #4
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d008      	beq.n	8002b62 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b50:	4b19      	ldr	r3, [pc, #100]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	4916      	ldr	r1, [pc, #88]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0308 	and.w	r3, r3, #8
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d009      	beq.n	8002b82 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b6e:	4b12      	ldr	r3, [pc, #72]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	691b      	ldr	r3, [r3, #16]
 8002b7a:	00db      	lsls	r3, r3, #3
 8002b7c:	490e      	ldr	r1, [pc, #56]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b82:	f000 f821 	bl	8002bc8 <HAL_RCC_GetSysClockFreq>
 8002b86:	4602      	mov	r2, r0
 8002b88:	4b0b      	ldr	r3, [pc, #44]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	091b      	lsrs	r3, r3, #4
 8002b8e:	f003 030f 	and.w	r3, r3, #15
 8002b92:	490a      	ldr	r1, [pc, #40]	@ (8002bbc <HAL_RCC_ClockConfig+0x1c8>)
 8002b94:	5ccb      	ldrb	r3, [r1, r3]
 8002b96:	fa22 f303 	lsr.w	r3, r2, r3
 8002b9a:	4a09      	ldr	r2, [pc, #36]	@ (8002bc0 <HAL_RCC_ClockConfig+0x1cc>)
 8002b9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b9e:	4b09      	ldr	r3, [pc, #36]	@ (8002bc4 <HAL_RCC_ClockConfig+0x1d0>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7fe f97e 	bl	8000ea4 <HAL_InitTick>

  return HAL_OK;
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3710      	adds	r7, #16
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	40022000 	.word	0x40022000
 8002bb8:	40021000 	.word	0x40021000
 8002bbc:	08002d58 	.word	0x08002d58
 8002bc0:	20000048 	.word	0x20000048
 8002bc4:	2000004c 	.word	0x2000004c

08002bc8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b087      	sub	sp, #28
 8002bcc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	60fb      	str	r3, [r7, #12]
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	60bb      	str	r3, [r7, #8]
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	617b      	str	r3, [r7, #20]
 8002bda:	2300      	movs	r3, #0
 8002bdc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002bde:	2300      	movs	r3, #0
 8002be0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002be2:	4b1e      	ldr	r3, [pc, #120]	@ (8002c5c <HAL_RCC_GetSysClockFreq+0x94>)
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f003 030c 	and.w	r3, r3, #12
 8002bee:	2b04      	cmp	r3, #4
 8002bf0:	d002      	beq.n	8002bf8 <HAL_RCC_GetSysClockFreq+0x30>
 8002bf2:	2b08      	cmp	r3, #8
 8002bf4:	d003      	beq.n	8002bfe <HAL_RCC_GetSysClockFreq+0x36>
 8002bf6:	e027      	b.n	8002c48 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002bf8:	4b19      	ldr	r3, [pc, #100]	@ (8002c60 <HAL_RCC_GetSysClockFreq+0x98>)
 8002bfa:	613b      	str	r3, [r7, #16]
      break;
 8002bfc:	e027      	b.n	8002c4e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	0c9b      	lsrs	r3, r3, #18
 8002c02:	f003 030f 	and.w	r3, r3, #15
 8002c06:	4a17      	ldr	r2, [pc, #92]	@ (8002c64 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002c08:	5cd3      	ldrb	r3, [r2, r3]
 8002c0a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d010      	beq.n	8002c38 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c16:	4b11      	ldr	r3, [pc, #68]	@ (8002c5c <HAL_RCC_GetSysClockFreq+0x94>)
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	0c5b      	lsrs	r3, r3, #17
 8002c1c:	f003 0301 	and.w	r3, r3, #1
 8002c20:	4a11      	ldr	r2, [pc, #68]	@ (8002c68 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002c22:	5cd3      	ldrb	r3, [r2, r3]
 8002c24:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a0d      	ldr	r2, [pc, #52]	@ (8002c60 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c2a:	fb03 f202 	mul.w	r2, r3, r2
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c34:	617b      	str	r3, [r7, #20]
 8002c36:	e004      	b.n	8002c42 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	4a0c      	ldr	r2, [pc, #48]	@ (8002c6c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002c3c:	fb02 f303 	mul.w	r3, r2, r3
 8002c40:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	613b      	str	r3, [r7, #16]
      break;
 8002c46:	e002      	b.n	8002c4e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c48:	4b05      	ldr	r3, [pc, #20]	@ (8002c60 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c4a:	613b      	str	r3, [r7, #16]
      break;
 8002c4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c4e:	693b      	ldr	r3, [r7, #16]
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	371c      	adds	r7, #28
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bc80      	pop	{r7}
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop
 8002c5c:	40021000 	.word	0x40021000
 8002c60:	007a1200 	.word	0x007a1200
 8002c64:	08002d70 	.word	0x08002d70
 8002c68:	08002d80 	.word	0x08002d80
 8002c6c:	003d0900 	.word	0x003d0900

08002c70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c70:	b480      	push	{r7}
 8002c72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c74:	4b02      	ldr	r3, [pc, #8]	@ (8002c80 <HAL_RCC_GetHCLKFreq+0x10>)
 8002c76:	681b      	ldr	r3, [r3, #0]
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bc80      	pop	{r7}
 8002c7e:	4770      	bx	lr
 8002c80:	20000048 	.word	0x20000048

08002c84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c88:	f7ff fff2 	bl	8002c70 <HAL_RCC_GetHCLKFreq>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	4b05      	ldr	r3, [pc, #20]	@ (8002ca4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	0a1b      	lsrs	r3, r3, #8
 8002c94:	f003 0307 	and.w	r3, r3, #7
 8002c98:	4903      	ldr	r1, [pc, #12]	@ (8002ca8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c9a:	5ccb      	ldrb	r3, [r1, r3]
 8002c9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	40021000 	.word	0x40021000
 8002ca8:	08002d68 	.word	0x08002d68

08002cac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b085      	sub	sp, #20
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002cb4:	4b0a      	ldr	r3, [pc, #40]	@ (8002ce0 <RCC_Delay+0x34>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a0a      	ldr	r2, [pc, #40]	@ (8002ce4 <RCC_Delay+0x38>)
 8002cba:	fba2 2303 	umull	r2, r3, r2, r3
 8002cbe:	0a5b      	lsrs	r3, r3, #9
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	fb02 f303 	mul.w	r3, r2, r3
 8002cc6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002cc8:	bf00      	nop
  }
  while (Delay --);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	1e5a      	subs	r2, r3, #1
 8002cce:	60fa      	str	r2, [r7, #12]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d1f9      	bne.n	8002cc8 <RCC_Delay+0x1c>
}
 8002cd4:	bf00      	nop
 8002cd6:	bf00      	nop
 8002cd8:	3714      	adds	r7, #20
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bc80      	pop	{r7}
 8002cde:	4770      	bx	lr
 8002ce0:	20000048 	.word	0x20000048
 8002ce4:	10624dd3 	.word	0x10624dd3

08002ce8 <memset>:
 8002ce8:	4603      	mov	r3, r0
 8002cea:	4402      	add	r2, r0
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d100      	bne.n	8002cf2 <memset+0xa>
 8002cf0:	4770      	bx	lr
 8002cf2:	f803 1b01 	strb.w	r1, [r3], #1
 8002cf6:	e7f9      	b.n	8002cec <memset+0x4>

08002cf8 <__libc_init_array>:
 8002cf8:	b570      	push	{r4, r5, r6, lr}
 8002cfa:	2600      	movs	r6, #0
 8002cfc:	4d0c      	ldr	r5, [pc, #48]	@ (8002d30 <__libc_init_array+0x38>)
 8002cfe:	4c0d      	ldr	r4, [pc, #52]	@ (8002d34 <__libc_init_array+0x3c>)
 8002d00:	1b64      	subs	r4, r4, r5
 8002d02:	10a4      	asrs	r4, r4, #2
 8002d04:	42a6      	cmp	r6, r4
 8002d06:	d109      	bne.n	8002d1c <__libc_init_array+0x24>
 8002d08:	f000 f81a 	bl	8002d40 <_init>
 8002d0c:	2600      	movs	r6, #0
 8002d0e:	4d0a      	ldr	r5, [pc, #40]	@ (8002d38 <__libc_init_array+0x40>)
 8002d10:	4c0a      	ldr	r4, [pc, #40]	@ (8002d3c <__libc_init_array+0x44>)
 8002d12:	1b64      	subs	r4, r4, r5
 8002d14:	10a4      	asrs	r4, r4, #2
 8002d16:	42a6      	cmp	r6, r4
 8002d18:	d105      	bne.n	8002d26 <__libc_init_array+0x2e>
 8002d1a:	bd70      	pop	{r4, r5, r6, pc}
 8002d1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d20:	4798      	blx	r3
 8002d22:	3601      	adds	r6, #1
 8002d24:	e7ee      	b.n	8002d04 <__libc_init_array+0xc>
 8002d26:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d2a:	4798      	blx	r3
 8002d2c:	3601      	adds	r6, #1
 8002d2e:	e7f2      	b.n	8002d16 <__libc_init_array+0x1e>
 8002d30:	08002d84 	.word	0x08002d84
 8002d34:	08002d84 	.word	0x08002d84
 8002d38:	08002d84 	.word	0x08002d84
 8002d3c:	08002d88 	.word	0x08002d88

08002d40 <_init>:
 8002d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d42:	bf00      	nop
 8002d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d46:	bc08      	pop	{r3}
 8002d48:	469e      	mov	lr, r3
 8002d4a:	4770      	bx	lr

08002d4c <_fini>:
 8002d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d4e:	bf00      	nop
 8002d50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d52:	bc08      	pop	{r3}
 8002d54:	469e      	mov	lr, r3
 8002d56:	4770      	bx	lr
