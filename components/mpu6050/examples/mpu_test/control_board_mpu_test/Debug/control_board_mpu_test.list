
control_board_mpu_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ed4  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080030b8  080030b8  000040b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030e8  080030e8  00005054  2**0
                  CONTENTS
  4 .ARM          00000000  080030e8  080030e8  00005054  2**0
                  CONTENTS
  5 .preinit_array 00000000  080030e8  080030e8  00005054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030e8  080030e8  000040e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080030ec  080030ec  000040ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000054  20000000  080030f0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000098  20000054  08003144  00005054  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ec  08003144  000050ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005054  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006e15  00000000  00000000  0000507d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014d3  00000000  00000000  0000be92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000710  00000000  00000000  0000d368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000579  00000000  00000000  0000da78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018d65  00000000  00000000  0000dff1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009654  00000000  00000000  00026d56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000910ee  00000000  00000000  000303aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c1498  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ca0  00000000  00000000  000c14dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000097  00000000  00000000  000c317c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000054 	.word	0x20000054
 8000200:	00000000 	.word	0x00000000
 8000204:	080030a0 	.word	0x080030a0

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000058 	.word	0x20000058
 8000220:	080030a0 	.word	0x080030a0

08000224 <__aeabi_frsub>:
 8000224:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000228:	e002      	b.n	8000230 <__addsf3>
 800022a:	bf00      	nop

0800022c <__aeabi_fsub>:
 800022c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000230 <__addsf3>:
 8000230:	0042      	lsls	r2, r0, #1
 8000232:	bf1f      	itttt	ne
 8000234:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000238:	ea92 0f03 	teqne	r2, r3
 800023c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000240:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000244:	d06a      	beq.n	800031c <__addsf3+0xec>
 8000246:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800024a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800024e:	bfc1      	itttt	gt
 8000250:	18d2      	addgt	r2, r2, r3
 8000252:	4041      	eorgt	r1, r0
 8000254:	4048      	eorgt	r0, r1
 8000256:	4041      	eorgt	r1, r0
 8000258:	bfb8      	it	lt
 800025a:	425b      	neglt	r3, r3
 800025c:	2b19      	cmp	r3, #25
 800025e:	bf88      	it	hi
 8000260:	4770      	bxhi	lr
 8000262:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000266:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800026a:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 800026e:	bf18      	it	ne
 8000270:	4240      	negne	r0, r0
 8000272:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000276:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800027a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 800027e:	bf18      	it	ne
 8000280:	4249      	negne	r1, r1
 8000282:	ea92 0f03 	teq	r2, r3
 8000286:	d03f      	beq.n	8000308 <__addsf3+0xd8>
 8000288:	f1a2 0201 	sub.w	r2, r2, #1
 800028c:	fa41 fc03 	asr.w	ip, r1, r3
 8000290:	eb10 000c 	adds.w	r0, r0, ip
 8000294:	f1c3 0320 	rsb	r3, r3, #32
 8000298:	fa01 f103 	lsl.w	r1, r1, r3
 800029c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80002a0:	d502      	bpl.n	80002a8 <__addsf3+0x78>
 80002a2:	4249      	negs	r1, r1
 80002a4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80002a8:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80002ac:	d313      	bcc.n	80002d6 <__addsf3+0xa6>
 80002ae:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80002b2:	d306      	bcc.n	80002c2 <__addsf3+0x92>
 80002b4:	0840      	lsrs	r0, r0, #1
 80002b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80002ba:	f102 0201 	add.w	r2, r2, #1
 80002be:	2afe      	cmp	r2, #254	@ 0xfe
 80002c0:	d251      	bcs.n	8000366 <__addsf3+0x136>
 80002c2:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80002c6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80002ca:	bf08      	it	eq
 80002cc:	f020 0001 	biceq.w	r0, r0, #1
 80002d0:	ea40 0003 	orr.w	r0, r0, r3
 80002d4:	4770      	bx	lr
 80002d6:	0049      	lsls	r1, r1, #1
 80002d8:	eb40 0000 	adc.w	r0, r0, r0
 80002dc:	3a01      	subs	r2, #1
 80002de:	bf28      	it	cs
 80002e0:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 80002e4:	d2ed      	bcs.n	80002c2 <__addsf3+0x92>
 80002e6:	fab0 fc80 	clz	ip, r0
 80002ea:	f1ac 0c08 	sub.w	ip, ip, #8
 80002ee:	ebb2 020c 	subs.w	r2, r2, ip
 80002f2:	fa00 f00c 	lsl.w	r0, r0, ip
 80002f6:	bfaa      	itet	ge
 80002f8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80002fc:	4252      	neglt	r2, r2
 80002fe:	4318      	orrge	r0, r3
 8000300:	bfbc      	itt	lt
 8000302:	40d0      	lsrlt	r0, r2
 8000304:	4318      	orrlt	r0, r3
 8000306:	4770      	bx	lr
 8000308:	f092 0f00 	teq	r2, #0
 800030c:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000310:	bf06      	itte	eq
 8000312:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000316:	3201      	addeq	r2, #1
 8000318:	3b01      	subne	r3, #1
 800031a:	e7b5      	b.n	8000288 <__addsf3+0x58>
 800031c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000320:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000324:	bf18      	it	ne
 8000326:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800032a:	d021      	beq.n	8000370 <__addsf3+0x140>
 800032c:	ea92 0f03 	teq	r2, r3
 8000330:	d004      	beq.n	800033c <__addsf3+0x10c>
 8000332:	f092 0f00 	teq	r2, #0
 8000336:	bf08      	it	eq
 8000338:	4608      	moveq	r0, r1
 800033a:	4770      	bx	lr
 800033c:	ea90 0f01 	teq	r0, r1
 8000340:	bf1c      	itt	ne
 8000342:	2000      	movne	r0, #0
 8000344:	4770      	bxne	lr
 8000346:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 800034a:	d104      	bne.n	8000356 <__addsf3+0x126>
 800034c:	0040      	lsls	r0, r0, #1
 800034e:	bf28      	it	cs
 8000350:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000354:	4770      	bx	lr
 8000356:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 800035a:	bf3c      	itt	cc
 800035c:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000360:	4770      	bxcc	lr
 8000362:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000366:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 800036a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800036e:	4770      	bx	lr
 8000370:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000374:	bf16      	itet	ne
 8000376:	4608      	movne	r0, r1
 8000378:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800037c:	4601      	movne	r1, r0
 800037e:	0242      	lsls	r2, r0, #9
 8000380:	bf06      	itte	eq
 8000382:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000386:	ea90 0f01 	teqeq	r0, r1
 800038a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 800038e:	4770      	bx	lr

08000390 <__aeabi_ui2f>:
 8000390:	f04f 0300 	mov.w	r3, #0
 8000394:	e004      	b.n	80003a0 <__aeabi_i2f+0x8>
 8000396:	bf00      	nop

08000398 <__aeabi_i2f>:
 8000398:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 800039c:	bf48      	it	mi
 800039e:	4240      	negmi	r0, r0
 80003a0:	ea5f 0c00 	movs.w	ip, r0
 80003a4:	bf08      	it	eq
 80003a6:	4770      	bxeq	lr
 80003a8:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80003ac:	4601      	mov	r1, r0
 80003ae:	f04f 0000 	mov.w	r0, #0
 80003b2:	e01c      	b.n	80003ee <__aeabi_l2f+0x2a>

080003b4 <__aeabi_ul2f>:
 80003b4:	ea50 0201 	orrs.w	r2, r0, r1
 80003b8:	bf08      	it	eq
 80003ba:	4770      	bxeq	lr
 80003bc:	f04f 0300 	mov.w	r3, #0
 80003c0:	e00a      	b.n	80003d8 <__aeabi_l2f+0x14>
 80003c2:	bf00      	nop

080003c4 <__aeabi_l2f>:
 80003c4:	ea50 0201 	orrs.w	r2, r0, r1
 80003c8:	bf08      	it	eq
 80003ca:	4770      	bxeq	lr
 80003cc:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80003d0:	d502      	bpl.n	80003d8 <__aeabi_l2f+0x14>
 80003d2:	4240      	negs	r0, r0
 80003d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003d8:	ea5f 0c01 	movs.w	ip, r1
 80003dc:	bf02      	ittt	eq
 80003de:	4684      	moveq	ip, r0
 80003e0:	4601      	moveq	r1, r0
 80003e2:	2000      	moveq	r0, #0
 80003e4:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 80003e8:	bf08      	it	eq
 80003ea:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 80003ee:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 80003f2:	fabc f28c 	clz	r2, ip
 80003f6:	3a08      	subs	r2, #8
 80003f8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80003fc:	db10      	blt.n	8000420 <__aeabi_l2f+0x5c>
 80003fe:	fa01 fc02 	lsl.w	ip, r1, r2
 8000402:	4463      	add	r3, ip
 8000404:	fa00 fc02 	lsl.w	ip, r0, r2
 8000408:	f1c2 0220 	rsb	r2, r2, #32
 800040c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000410:	fa20 f202 	lsr.w	r2, r0, r2
 8000414:	eb43 0002 	adc.w	r0, r3, r2
 8000418:	bf08      	it	eq
 800041a:	f020 0001 	biceq.w	r0, r0, #1
 800041e:	4770      	bx	lr
 8000420:	f102 0220 	add.w	r2, r2, #32
 8000424:	fa01 fc02 	lsl.w	ip, r1, r2
 8000428:	f1c2 0220 	rsb	r2, r2, #32
 800042c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000430:	fa21 f202 	lsr.w	r2, r1, r2
 8000434:	eb43 0002 	adc.w	r0, r3, r2
 8000438:	bf08      	it	eq
 800043a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800043e:	4770      	bx	lr

08000440 <__aeabi_fmul>:
 8000440:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000444:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000448:	bf1e      	ittt	ne
 800044a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800044e:	ea92 0f0c 	teqne	r2, ip
 8000452:	ea93 0f0c 	teqne	r3, ip
 8000456:	d06f      	beq.n	8000538 <__aeabi_fmul+0xf8>
 8000458:	441a      	add	r2, r3
 800045a:	ea80 0c01 	eor.w	ip, r0, r1
 800045e:	0240      	lsls	r0, r0, #9
 8000460:	bf18      	it	ne
 8000462:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000466:	d01e      	beq.n	80004a6 <__aeabi_fmul+0x66>
 8000468:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800046c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000470:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000474:	fba0 3101 	umull	r3, r1, r0, r1
 8000478:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800047c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000480:	bf3e      	ittt	cc
 8000482:	0049      	lslcc	r1, r1, #1
 8000484:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000488:	005b      	lslcc	r3, r3, #1
 800048a:	ea40 0001 	orr.w	r0, r0, r1
 800048e:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000492:	2afd      	cmp	r2, #253	@ 0xfd
 8000494:	d81d      	bhi.n	80004d2 <__aeabi_fmul+0x92>
 8000496:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800049a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800049e:	bf08      	it	eq
 80004a0:	f020 0001 	biceq.w	r0, r0, #1
 80004a4:	4770      	bx	lr
 80004a6:	f090 0f00 	teq	r0, #0
 80004aa:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80004ae:	bf08      	it	eq
 80004b0:	0249      	lsleq	r1, r1, #9
 80004b2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80004b6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80004ba:	3a7f      	subs	r2, #127	@ 0x7f
 80004bc:	bfc2      	ittt	gt
 80004be:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80004c2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80004c6:	4770      	bxgt	lr
 80004c8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004cc:	f04f 0300 	mov.w	r3, #0
 80004d0:	3a01      	subs	r2, #1
 80004d2:	dc5d      	bgt.n	8000590 <__aeabi_fmul+0x150>
 80004d4:	f112 0f19 	cmn.w	r2, #25
 80004d8:	bfdc      	itt	le
 80004da:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80004de:	4770      	bxle	lr
 80004e0:	f1c2 0200 	rsb	r2, r2, #0
 80004e4:	0041      	lsls	r1, r0, #1
 80004e6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ea:	f1c2 0220 	rsb	r2, r2, #32
 80004ee:	fa00 fc02 	lsl.w	ip, r0, r2
 80004f2:	ea5f 0031 	movs.w	r0, r1, rrx
 80004f6:	f140 0000 	adc.w	r0, r0, #0
 80004fa:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80004fe:	bf08      	it	eq
 8000500:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000504:	4770      	bx	lr
 8000506:	f092 0f00 	teq	r2, #0
 800050a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800050e:	bf02      	ittt	eq
 8000510:	0040      	lsleq	r0, r0, #1
 8000512:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000516:	3a01      	subeq	r2, #1
 8000518:	d0f9      	beq.n	800050e <__aeabi_fmul+0xce>
 800051a:	ea40 000c 	orr.w	r0, r0, ip
 800051e:	f093 0f00 	teq	r3, #0
 8000522:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000526:	bf02      	ittt	eq
 8000528:	0049      	lsleq	r1, r1, #1
 800052a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800052e:	3b01      	subeq	r3, #1
 8000530:	d0f9      	beq.n	8000526 <__aeabi_fmul+0xe6>
 8000532:	ea41 010c 	orr.w	r1, r1, ip
 8000536:	e78f      	b.n	8000458 <__aeabi_fmul+0x18>
 8000538:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800053c:	ea92 0f0c 	teq	r2, ip
 8000540:	bf18      	it	ne
 8000542:	ea93 0f0c 	teqne	r3, ip
 8000546:	d00a      	beq.n	800055e <__aeabi_fmul+0x11e>
 8000548:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800054c:	bf18      	it	ne
 800054e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000552:	d1d8      	bne.n	8000506 <__aeabi_fmul+0xc6>
 8000554:	ea80 0001 	eor.w	r0, r0, r1
 8000558:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800055c:	4770      	bx	lr
 800055e:	f090 0f00 	teq	r0, #0
 8000562:	bf17      	itett	ne
 8000564:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000568:	4608      	moveq	r0, r1
 800056a:	f091 0f00 	teqne	r1, #0
 800056e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000572:	d014      	beq.n	800059e <__aeabi_fmul+0x15e>
 8000574:	ea92 0f0c 	teq	r2, ip
 8000578:	d101      	bne.n	800057e <__aeabi_fmul+0x13e>
 800057a:	0242      	lsls	r2, r0, #9
 800057c:	d10f      	bne.n	800059e <__aeabi_fmul+0x15e>
 800057e:	ea93 0f0c 	teq	r3, ip
 8000582:	d103      	bne.n	800058c <__aeabi_fmul+0x14c>
 8000584:	024b      	lsls	r3, r1, #9
 8000586:	bf18      	it	ne
 8000588:	4608      	movne	r0, r1
 800058a:	d108      	bne.n	800059e <__aeabi_fmul+0x15e>
 800058c:	ea80 0001 	eor.w	r0, r0, r1
 8000590:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000594:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000598:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800059c:	4770      	bx	lr
 800059e:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80005a2:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80005a6:	4770      	bx	lr

080005a8 <__aeabi_fdiv>:
 80005a8:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80005b0:	bf1e      	ittt	ne
 80005b2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80005b6:	ea92 0f0c 	teqne	r2, ip
 80005ba:	ea93 0f0c 	teqne	r3, ip
 80005be:	d069      	beq.n	8000694 <__aeabi_fdiv+0xec>
 80005c0:	eba2 0203 	sub.w	r2, r2, r3
 80005c4:	ea80 0c01 	eor.w	ip, r0, r1
 80005c8:	0249      	lsls	r1, r1, #9
 80005ca:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80005ce:	d037      	beq.n	8000640 <__aeabi_fdiv+0x98>
 80005d0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80005d4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80005d8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80005dc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80005e0:	428b      	cmp	r3, r1
 80005e2:	bf38      	it	cc
 80005e4:	005b      	lslcc	r3, r3, #1
 80005e6:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 80005ea:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 80005ee:	428b      	cmp	r3, r1
 80005f0:	bf24      	itt	cs
 80005f2:	1a5b      	subcs	r3, r3, r1
 80005f4:	ea40 000c 	orrcs.w	r0, r0, ip
 80005f8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80005fc:	bf24      	itt	cs
 80005fe:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000602:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000606:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800060a:	bf24      	itt	cs
 800060c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000610:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000614:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000618:	bf24      	itt	cs
 800061a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800061e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000622:	011b      	lsls	r3, r3, #4
 8000624:	bf18      	it	ne
 8000626:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800062a:	d1e0      	bne.n	80005ee <__aeabi_fdiv+0x46>
 800062c:	2afd      	cmp	r2, #253	@ 0xfd
 800062e:	f63f af50 	bhi.w	80004d2 <__aeabi_fmul+0x92>
 8000632:	428b      	cmp	r3, r1
 8000634:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000638:	bf08      	it	eq
 800063a:	f020 0001 	biceq.w	r0, r0, #1
 800063e:	4770      	bx	lr
 8000640:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000644:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000648:	327f      	adds	r2, #127	@ 0x7f
 800064a:	bfc2      	ittt	gt
 800064c:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000650:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000654:	4770      	bxgt	lr
 8000656:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800065a:	f04f 0300 	mov.w	r3, #0
 800065e:	3a01      	subs	r2, #1
 8000660:	e737      	b.n	80004d2 <__aeabi_fmul+0x92>
 8000662:	f092 0f00 	teq	r2, #0
 8000666:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800066a:	bf02      	ittt	eq
 800066c:	0040      	lsleq	r0, r0, #1
 800066e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000672:	3a01      	subeq	r2, #1
 8000674:	d0f9      	beq.n	800066a <__aeabi_fdiv+0xc2>
 8000676:	ea40 000c 	orr.w	r0, r0, ip
 800067a:	f093 0f00 	teq	r3, #0
 800067e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000682:	bf02      	ittt	eq
 8000684:	0049      	lsleq	r1, r1, #1
 8000686:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800068a:	3b01      	subeq	r3, #1
 800068c:	d0f9      	beq.n	8000682 <__aeabi_fdiv+0xda>
 800068e:	ea41 010c 	orr.w	r1, r1, ip
 8000692:	e795      	b.n	80005c0 <__aeabi_fdiv+0x18>
 8000694:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000698:	ea92 0f0c 	teq	r2, ip
 800069c:	d108      	bne.n	80006b0 <__aeabi_fdiv+0x108>
 800069e:	0242      	lsls	r2, r0, #9
 80006a0:	f47f af7d 	bne.w	800059e <__aeabi_fmul+0x15e>
 80006a4:	ea93 0f0c 	teq	r3, ip
 80006a8:	f47f af70 	bne.w	800058c <__aeabi_fmul+0x14c>
 80006ac:	4608      	mov	r0, r1
 80006ae:	e776      	b.n	800059e <__aeabi_fmul+0x15e>
 80006b0:	ea93 0f0c 	teq	r3, ip
 80006b4:	d104      	bne.n	80006c0 <__aeabi_fdiv+0x118>
 80006b6:	024b      	lsls	r3, r1, #9
 80006b8:	f43f af4c 	beq.w	8000554 <__aeabi_fmul+0x114>
 80006bc:	4608      	mov	r0, r1
 80006be:	e76e      	b.n	800059e <__aeabi_fmul+0x15e>
 80006c0:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80006c4:	bf18      	it	ne
 80006c6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80006ca:	d1ca      	bne.n	8000662 <__aeabi_fdiv+0xba>
 80006cc:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80006d0:	f47f af5c 	bne.w	800058c <__aeabi_fmul+0x14c>
 80006d4:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 80006d8:	f47f af3c 	bne.w	8000554 <__aeabi_fmul+0x114>
 80006dc:	e75f      	b.n	800059e <__aeabi_fmul+0x15e>
 80006de:	bf00      	nop

080006e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b086      	sub	sp, #24
 80006e4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006e6:	f000 fd67 	bl	80011b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ea:	f000 f8df 	bl	80008ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ee:	f000 f947 	bl	8000980 <MX_GPIO_Init>
  MX_I2C1_Init();
 80006f2:	f000 f917 	bl	8000924 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  MPU6050_Handle_t handle = {
 80006f6:	4b5d      	ldr	r3, [pc, #372]	@ (800086c <main+0x18c>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	607b      	str	r3, [r7, #4]
  		  .rate_div = Rate_1KHz_Div,
  		  .gyro_range = Gyro_Range_250s,
  		  .accel_range = Accel_Range_2g,
		  .filter_bandwidth = DLPF_21A_20G_Hz
  };
  while (MPU6050_Init(&hi2c1, &my_mpu, handle, 0) != STATUS_OK);
 80006fc:	bf00      	nop
 80006fe:	2300      	movs	r3, #0
 8000700:	687a      	ldr	r2, [r7, #4]
 8000702:	495b      	ldr	r1, [pc, #364]	@ (8000870 <main+0x190>)
 8000704:	485b      	ldr	r0, [pc, #364]	@ (8000874 <main+0x194>)
 8000706:	f000 f9b7 	bl	8000a78 <MPU6050_Init>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d1f6      	bne.n	80006fe <main+0x1e>
  //MPU6050_Calibrate(&hi2c1, &my_mpu);
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000710:	2200      	movs	r2, #0
 8000712:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000716:	4858      	ldr	r0, [pc, #352]	@ (8000878 <main+0x198>)
 8000718:	f001 f828 	bl	800176c <HAL_GPIO_WritePin>
  uint32_t freq = 20;
 800071c:	2314      	movs	r3, #20
 800071e:	613b      	str	r3, [r7, #16]
  uint32_t t = 0, dt = 1000 / freq , t_prev = 0;
 8000720:	2300      	movs	r3, #0
 8000722:	60fb      	str	r3, [r7, #12]
 8000724:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000728:	693b      	ldr	r3, [r7, #16]
 800072a:	fbb2 f3f3 	udiv	r3, r2, r3
 800072e:	60bb      	str	r3, [r7, #8]
 8000730:	2300      	movs	r3, #0
 8000732:	617b      	str	r3, [r7, #20]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
 	  t = HAL_GetTick();
 8000734:	f000 fd98 	bl	8001268 <HAL_GetTick>
 8000738:	60f8      	str	r0, [r7, #12]

 	  if ((t-t_prev) >= dt)
 800073a:	68fa      	ldr	r2, [r7, #12]
 800073c:	697b      	ldr	r3, [r7, #20]
 800073e:	1ad3      	subs	r3, r2, r3
 8000740:	68ba      	ldr	r2, [r7, #8]
 8000742:	429a      	cmp	r2, r3
 8000744:	d8f6      	bhi.n	8000734 <main+0x54>
 	  {
 		  MPU6050_ReadAccelerometer(&hi2c1, &my_mpu);
 8000746:	494a      	ldr	r1, [pc, #296]	@ (8000870 <main+0x190>)
 8000748:	484a      	ldr	r0, [pc, #296]	@ (8000874 <main+0x194>)
 800074a:	f000 fbd7 	bl	8000efc <MPU6050_ReadAccelerometer>
 		  ax = my_mpu.accel_scaled.x;
 800074e:	4b48      	ldr	r3, [pc, #288]	@ (8000870 <main+0x190>)
 8000750:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000752:	4a4a      	ldr	r2, [pc, #296]	@ (800087c <main+0x19c>)
 8000754:	6013      	str	r3, [r2, #0]
 		  ay = my_mpu.accel_scaled.y;
 8000756:	4b46      	ldr	r3, [pc, #280]	@ (8000870 <main+0x190>)
 8000758:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800075a:	4a49      	ldr	r2, [pc, #292]	@ (8000880 <main+0x1a0>)
 800075c:	6013      	str	r3, [r2, #0]
 		  az = my_mpu.accel_scaled.z;
 800075e:	4b44      	ldr	r3, [pc, #272]	@ (8000870 <main+0x190>)
 8000760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000762:	4a48      	ldr	r2, [pc, #288]	@ (8000884 <main+0x1a4>)
 8000764:	6013      	str	r3, [r2, #0]
 		  MPU6050_ReadGyroscope(&hi2c1, &my_mpu);
 8000766:	4942      	ldr	r1, [pc, #264]	@ (8000870 <main+0x190>)
 8000768:	4842      	ldr	r0, [pc, #264]	@ (8000874 <main+0x194>)
 800076a:	f000 fb44 	bl	8000df6 <MPU6050_ReadGyroscope>
 		  gx = my_mpu.gyro_scaled.x;
 800076e:	4b40      	ldr	r3, [pc, #256]	@ (8000870 <main+0x190>)
 8000770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000772:	4a45      	ldr	r2, [pc, #276]	@ (8000888 <main+0x1a8>)
 8000774:	6013      	str	r3, [r2, #0]
 		  gy = my_mpu.gyro_scaled.y;
 8000776:	4b3e      	ldr	r3, [pc, #248]	@ (8000870 <main+0x190>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077a:	4a44      	ldr	r2, [pc, #272]	@ (800088c <main+0x1ac>)
 800077c:	6013      	str	r3, [r2, #0]
 		  gz = my_mpu.gyro_scaled.z;
 800077e:	4b3c      	ldr	r3, [pc, #240]	@ (8000870 <main+0x190>)
 8000780:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000782:	4a43      	ldr	r2, [pc, #268]	@ (8000890 <main+0x1b0>)
 8000784:	6013      	str	r3, [r2, #0]
 		  //MadgwickFilter_Update_IMU(&my_madgwick, gx, gy, gz, ax, ay, az);
 		  //Quaternion_to_RPY(my_madgwick.q.q0, my_madgwick.q.q1, my_madgwick.q.q2, my_madgwick.q.q3);
 		  roll += gx * (float)dt/1000.0f * 180 / PI;
 8000786:	68b8      	ldr	r0, [r7, #8]
 8000788:	f7ff fe02 	bl	8000390 <__aeabi_ui2f>
 800078c:	4602      	mov	r2, r0
 800078e:	4b3e      	ldr	r3, [pc, #248]	@ (8000888 <main+0x1a8>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	4619      	mov	r1, r3
 8000794:	4610      	mov	r0, r2
 8000796:	f7ff fe53 	bl	8000440 <__aeabi_fmul>
 800079a:	4603      	mov	r3, r0
 800079c:	493d      	ldr	r1, [pc, #244]	@ (8000894 <main+0x1b4>)
 800079e:	4618      	mov	r0, r3
 80007a0:	f7ff ff02 	bl	80005a8 <__aeabi_fdiv>
 80007a4:	4603      	mov	r3, r0
 80007a6:	493c      	ldr	r1, [pc, #240]	@ (8000898 <main+0x1b8>)
 80007a8:	4618      	mov	r0, r3
 80007aa:	f7ff fe49 	bl	8000440 <__aeabi_fmul>
 80007ae:	4603      	mov	r3, r0
 80007b0:	493a      	ldr	r1, [pc, #232]	@ (800089c <main+0x1bc>)
 80007b2:	4618      	mov	r0, r3
 80007b4:	f7ff fef8 	bl	80005a8 <__aeabi_fdiv>
 80007b8:	4603      	mov	r3, r0
 80007ba:	461a      	mov	r2, r3
 80007bc:	4b38      	ldr	r3, [pc, #224]	@ (80008a0 <main+0x1c0>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4619      	mov	r1, r3
 80007c2:	4610      	mov	r0, r2
 80007c4:	f7ff fd34 	bl	8000230 <__addsf3>
 80007c8:	4603      	mov	r3, r0
 80007ca:	461a      	mov	r2, r3
 80007cc:	4b34      	ldr	r3, [pc, #208]	@ (80008a0 <main+0x1c0>)
 80007ce:	601a      	str	r2, [r3, #0]
 		  pitch += gy * (float)dt/1000.0f * 180 / PI;
 80007d0:	68b8      	ldr	r0, [r7, #8]
 80007d2:	f7ff fddd 	bl	8000390 <__aeabi_ui2f>
 80007d6:	4602      	mov	r2, r0
 80007d8:	4b2c      	ldr	r3, [pc, #176]	@ (800088c <main+0x1ac>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4619      	mov	r1, r3
 80007de:	4610      	mov	r0, r2
 80007e0:	f7ff fe2e 	bl	8000440 <__aeabi_fmul>
 80007e4:	4603      	mov	r3, r0
 80007e6:	492b      	ldr	r1, [pc, #172]	@ (8000894 <main+0x1b4>)
 80007e8:	4618      	mov	r0, r3
 80007ea:	f7ff fedd 	bl	80005a8 <__aeabi_fdiv>
 80007ee:	4603      	mov	r3, r0
 80007f0:	4929      	ldr	r1, [pc, #164]	@ (8000898 <main+0x1b8>)
 80007f2:	4618      	mov	r0, r3
 80007f4:	f7ff fe24 	bl	8000440 <__aeabi_fmul>
 80007f8:	4603      	mov	r3, r0
 80007fa:	4928      	ldr	r1, [pc, #160]	@ (800089c <main+0x1bc>)
 80007fc:	4618      	mov	r0, r3
 80007fe:	f7ff fed3 	bl	80005a8 <__aeabi_fdiv>
 8000802:	4603      	mov	r3, r0
 8000804:	461a      	mov	r2, r3
 8000806:	4b27      	ldr	r3, [pc, #156]	@ (80008a4 <main+0x1c4>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	4619      	mov	r1, r3
 800080c:	4610      	mov	r0, r2
 800080e:	f7ff fd0f 	bl	8000230 <__addsf3>
 8000812:	4603      	mov	r3, r0
 8000814:	461a      	mov	r2, r3
 8000816:	4b23      	ldr	r3, [pc, #140]	@ (80008a4 <main+0x1c4>)
 8000818:	601a      	str	r2, [r3, #0]
 		  yaw += gz * (float)dt/1000.0f * 180 / PI;
 800081a:	68b8      	ldr	r0, [r7, #8]
 800081c:	f7ff fdb8 	bl	8000390 <__aeabi_ui2f>
 8000820:	4602      	mov	r2, r0
 8000822:	4b1b      	ldr	r3, [pc, #108]	@ (8000890 <main+0x1b0>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	4619      	mov	r1, r3
 8000828:	4610      	mov	r0, r2
 800082a:	f7ff fe09 	bl	8000440 <__aeabi_fmul>
 800082e:	4603      	mov	r3, r0
 8000830:	4918      	ldr	r1, [pc, #96]	@ (8000894 <main+0x1b4>)
 8000832:	4618      	mov	r0, r3
 8000834:	f7ff feb8 	bl	80005a8 <__aeabi_fdiv>
 8000838:	4603      	mov	r3, r0
 800083a:	4917      	ldr	r1, [pc, #92]	@ (8000898 <main+0x1b8>)
 800083c:	4618      	mov	r0, r3
 800083e:	f7ff fdff 	bl	8000440 <__aeabi_fmul>
 8000842:	4603      	mov	r3, r0
 8000844:	4915      	ldr	r1, [pc, #84]	@ (800089c <main+0x1bc>)
 8000846:	4618      	mov	r0, r3
 8000848:	f7ff feae 	bl	80005a8 <__aeabi_fdiv>
 800084c:	4603      	mov	r3, r0
 800084e:	461a      	mov	r2, r3
 8000850:	4b15      	ldr	r3, [pc, #84]	@ (80008a8 <main+0x1c8>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4619      	mov	r1, r3
 8000856:	4610      	mov	r0, r2
 8000858:	f7ff fcea 	bl	8000230 <__addsf3>
 800085c:	4603      	mov	r3, r0
 800085e:	461a      	mov	r2, r3
 8000860:	4b11      	ldr	r3, [pc, #68]	@ (80008a8 <main+0x1c8>)
 8000862:	601a      	str	r2, [r3, #0]

 		  t_prev = t;
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	617b      	str	r3, [r7, #20]
 	  t = HAL_GetTick();
 8000868:	e764      	b.n	8000734 <main+0x54>
 800086a:	bf00      	nop
 800086c:	080030b8 	.word	0x080030b8
 8000870:	20000000 	.word	0x20000000
 8000874:	20000094 	.word	0x20000094
 8000878:	40011000 	.word	0x40011000
 800087c:	2000007c 	.word	0x2000007c
 8000880:	20000080 	.word	0x20000080
 8000884:	20000084 	.word	0x20000084
 8000888:	20000088 	.word	0x20000088
 800088c:	2000008c 	.word	0x2000008c
 8000890:	20000090 	.word	0x20000090
 8000894:	447a0000 	.word	0x447a0000
 8000898:	43340000 	.word	0x43340000
 800089c:	40490fdb 	.word	0x40490fdb
 80008a0:	20000070 	.word	0x20000070
 80008a4:	20000074 	.word	0x20000074
 80008a8:	20000078 	.word	0x20000078

080008ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b090      	sub	sp, #64	@ 0x40
 80008b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008b2:	f107 0318 	add.w	r3, r7, #24
 80008b6:	2228      	movs	r2, #40	@ 0x28
 80008b8:	2100      	movs	r1, #0
 80008ba:	4618      	mov	r0, r3
 80008bc:	f002 fbc4 	bl	8003048 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008c0:	1d3b      	adds	r3, r7, #4
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	609a      	str	r2, [r3, #8]
 80008ca:	60da      	str	r2, [r3, #12]
 80008cc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008ce:	2302      	movs	r3, #2
 80008d0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008d2:	2301      	movs	r3, #1
 80008d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008d6:	2310      	movs	r3, #16
 80008d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008da:	2300      	movs	r3, #0
 80008dc:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008de:	f107 0318 	add.w	r3, r7, #24
 80008e2:	4618      	mov	r0, r3
 80008e4:	f001 ffb4 	bl	8002850 <HAL_RCC_OscConfig>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80008ee:	f000 f89f 	bl	8000a30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008f2:	230f      	movs	r3, #15
 80008f4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008f6:	2300      	movs	r3, #0
 80008f8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008fa:	2300      	movs	r3, #0
 80008fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008fe:	2300      	movs	r3, #0
 8000900:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000902:	2300      	movs	r3, #0
 8000904:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000906:	1d3b      	adds	r3, r7, #4
 8000908:	2100      	movs	r1, #0
 800090a:	4618      	mov	r0, r3
 800090c:	f002 fa22 	bl	8002d54 <HAL_RCC_ClockConfig>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000916:	f000 f88b 	bl	8000a30 <Error_Handler>
  }
}
 800091a:	bf00      	nop
 800091c:	3740      	adds	r7, #64	@ 0x40
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
	...

08000924 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000928:	4b12      	ldr	r3, [pc, #72]	@ (8000974 <MX_I2C1_Init+0x50>)
 800092a:	4a13      	ldr	r2, [pc, #76]	@ (8000978 <MX_I2C1_Init+0x54>)
 800092c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800092e:	4b11      	ldr	r3, [pc, #68]	@ (8000974 <MX_I2C1_Init+0x50>)
 8000930:	4a12      	ldr	r2, [pc, #72]	@ (800097c <MX_I2C1_Init+0x58>)
 8000932:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000934:	4b0f      	ldr	r3, [pc, #60]	@ (8000974 <MX_I2C1_Init+0x50>)
 8000936:	2200      	movs	r2, #0
 8000938:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800093a:	4b0e      	ldr	r3, [pc, #56]	@ (8000974 <MX_I2C1_Init+0x50>)
 800093c:	2200      	movs	r2, #0
 800093e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000940:	4b0c      	ldr	r3, [pc, #48]	@ (8000974 <MX_I2C1_Init+0x50>)
 8000942:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000946:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000948:	4b0a      	ldr	r3, [pc, #40]	@ (8000974 <MX_I2C1_Init+0x50>)
 800094a:	2200      	movs	r2, #0
 800094c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800094e:	4b09      	ldr	r3, [pc, #36]	@ (8000974 <MX_I2C1_Init+0x50>)
 8000950:	2200      	movs	r2, #0
 8000952:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000954:	4b07      	ldr	r3, [pc, #28]	@ (8000974 <MX_I2C1_Init+0x50>)
 8000956:	2200      	movs	r2, #0
 8000958:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800095a:	4b06      	ldr	r3, [pc, #24]	@ (8000974 <MX_I2C1_Init+0x50>)
 800095c:	2200      	movs	r2, #0
 800095e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000960:	4804      	ldr	r0, [pc, #16]	@ (8000974 <MX_I2C1_Init+0x50>)
 8000962:	f000 ff1b 	bl	800179c <HAL_I2C_Init>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800096c:	f000 f860 	bl	8000a30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000970:	bf00      	nop
 8000972:	bd80      	pop	{r7, pc}
 8000974:	20000094 	.word	0x20000094
 8000978:	40005400 	.word	0x40005400
 800097c:	00061a80 	.word	0x00061a80

08000980 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b088      	sub	sp, #32
 8000984:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000986:	f107 0310 	add.w	r3, r7, #16
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
 800098e:	605a      	str	r2, [r3, #4]
 8000990:	609a      	str	r2, [r3, #8]
 8000992:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000994:	4b24      	ldr	r3, [pc, #144]	@ (8000a28 <MX_GPIO_Init+0xa8>)
 8000996:	699b      	ldr	r3, [r3, #24]
 8000998:	4a23      	ldr	r2, [pc, #140]	@ (8000a28 <MX_GPIO_Init+0xa8>)
 800099a:	f043 0310 	orr.w	r3, r3, #16
 800099e:	6193      	str	r3, [r2, #24]
 80009a0:	4b21      	ldr	r3, [pc, #132]	@ (8000a28 <MX_GPIO_Init+0xa8>)
 80009a2:	699b      	ldr	r3, [r3, #24]
 80009a4:	f003 0310 	and.w	r3, r3, #16
 80009a8:	60fb      	str	r3, [r7, #12]
 80009aa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ac:	4b1e      	ldr	r3, [pc, #120]	@ (8000a28 <MX_GPIO_Init+0xa8>)
 80009ae:	699b      	ldr	r3, [r3, #24]
 80009b0:	4a1d      	ldr	r2, [pc, #116]	@ (8000a28 <MX_GPIO_Init+0xa8>)
 80009b2:	f043 0320 	orr.w	r3, r3, #32
 80009b6:	6193      	str	r3, [r2, #24]
 80009b8:	4b1b      	ldr	r3, [pc, #108]	@ (8000a28 <MX_GPIO_Init+0xa8>)
 80009ba:	699b      	ldr	r3, [r3, #24]
 80009bc:	f003 0320 	and.w	r3, r3, #32
 80009c0:	60bb      	str	r3, [r7, #8]
 80009c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c4:	4b18      	ldr	r3, [pc, #96]	@ (8000a28 <MX_GPIO_Init+0xa8>)
 80009c6:	699b      	ldr	r3, [r3, #24]
 80009c8:	4a17      	ldr	r2, [pc, #92]	@ (8000a28 <MX_GPIO_Init+0xa8>)
 80009ca:	f043 0304 	orr.w	r3, r3, #4
 80009ce:	6193      	str	r3, [r2, #24]
 80009d0:	4b15      	ldr	r3, [pc, #84]	@ (8000a28 <MX_GPIO_Init+0xa8>)
 80009d2:	699b      	ldr	r3, [r3, #24]
 80009d4:	f003 0304 	and.w	r3, r3, #4
 80009d8:	607b      	str	r3, [r7, #4]
 80009da:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009dc:	4b12      	ldr	r3, [pc, #72]	@ (8000a28 <MX_GPIO_Init+0xa8>)
 80009de:	699b      	ldr	r3, [r3, #24]
 80009e0:	4a11      	ldr	r2, [pc, #68]	@ (8000a28 <MX_GPIO_Init+0xa8>)
 80009e2:	f043 0308 	orr.w	r3, r3, #8
 80009e6:	6193      	str	r3, [r2, #24]
 80009e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000a28 <MX_GPIO_Init+0xa8>)
 80009ea:	699b      	ldr	r3, [r3, #24]
 80009ec:	f003 0308 	and.w	r3, r3, #8
 80009f0:	603b      	str	r3, [r7, #0]
 80009f2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80009f4:	2201      	movs	r2, #1
 80009f6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009fa:	480c      	ldr	r0, [pc, #48]	@ (8000a2c <MX_GPIO_Init+0xac>)
 80009fc:	f000 feb6 	bl	800176c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a00:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a06:	2301      	movs	r3, #1
 8000a08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a12:	f107 0310 	add.w	r3, r7, #16
 8000a16:	4619      	mov	r1, r3
 8000a18:	4804      	ldr	r0, [pc, #16]	@ (8000a2c <MX_GPIO_Init+0xac>)
 8000a1a:	f000 fd13 	bl	8001444 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a1e:	bf00      	nop
 8000a20:	3720      	adds	r7, #32
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	40021000 	.word	0x40021000
 8000a2c:	40011000 	.word	0x40011000

08000a30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a34:	b672      	cpsid	i
}
 8000a36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a38:	bf00      	nop
 8000a3a:	e7fd      	b.n	8000a38 <Error_Handler+0x8>

08000a3c <MPU6050_ReadWhoAmI>:
int16_t offset_ax = 0, offset_ay = 0, offset_az = 0, offset_gx = 0, offset_gy = 0, offset_gz = 0;

int16_t g_accel_val = (int16_t)16384;

status_t MPU6050_ReadWhoAmI(I2C_HandleTypeDef *hi2c, MPU6050_t *mpu, uint8_t is_high_addr, uint8_t *buffer)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b088      	sub	sp, #32
 8000a40:	af04      	add	r7, sp, #16
 8000a42:	60f8      	str	r0, [r7, #12]
 8000a44:	60b9      	str	r1, [r7, #8]
 8000a46:	603b      	str	r3, [r7, #0]
 8000a48:	4613      	mov	r3, r2
 8000a4a:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Read(hi2c, (mpu->address << 1), (uint8_t)MPU6050_REG_WHO_AM_I, 1, buffer, 1, MPU6050_DEFAULT_TIMEOUT);
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	791b      	ldrb	r3, [r3, #4]
 8000a50:	005b      	lsls	r3, r3, #1
 8000a52:	b299      	uxth	r1, r3
 8000a54:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a58:	9302      	str	r3, [sp, #8]
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	9301      	str	r3, [sp, #4]
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	9300      	str	r3, [sp, #0]
 8000a62:	2301      	movs	r3, #1
 8000a64:	2275      	movs	r2, #117	@ 0x75
 8000a66:	68f8      	ldr	r0, [r7, #12]
 8000a68:	f001 f8d6 	bl	8001c18 <HAL_I2C_Mem_Read>
    return STATUS_OK;
 8000a6c:	2300      	movs	r3, #0
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	3710      	adds	r7, #16
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
	...

08000a78 <MPU6050_Init>:

status_t MPU6050_Init(I2C_HandleTypeDef *hi2c, MPU6050_t* mpu, MPU6050_Handle_t handle , uint8_t is_high_addr)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b08a      	sub	sp, #40	@ 0x28
 8000a7c:	af04      	add	r7, sp, #16
 8000a7e:	60f8      	str	r0, [r7, #12]
 8000a80:	60b9      	str	r1, [r7, #8]
 8000a82:	607a      	str	r2, [r7, #4]
 8000a84:	70fb      	strb	r3, [r7, #3]
    uint8_t tmp_byte;
    uint8_t check_buffer=0;
 8000a86:	2300      	movs	r3, #0
 8000a88:	757b      	strb	r3, [r7, #21]

    MPU6050_ReadWhoAmI(hi2c, mpu, is_high_addr, &check_buffer);
 8000a8a:	f107 0315 	add.w	r3, r7, #21
 8000a8e:	78fa      	ldrb	r2, [r7, #3]
 8000a90:	68b9      	ldr	r1, [r7, #8]
 8000a92:	68f8      	ldr	r0, [r7, #12]
 8000a94:	f7ff ffd2 	bl	8000a3c <MPU6050_ReadWhoAmI>

    /* Check WHO_AM_I value */
    if (check_buffer == (0x68 | is_high_addr))
 8000a98:	78fb      	ldrb	r3, [r7, #3]
 8000a9a:	f043 0368 	orr.w	r3, r3, #104	@ 0x68
 8000a9e:	b2da      	uxtb	r2, r3
 8000aa0:	7d7b      	ldrb	r3, [r7, #21]
 8000aa2:	429a      	cmp	r2, r3
 8000aa4:	d13d      	bne.n	8000b22 <MPU6050_Init+0xaa>
    {
        // TODO: Implement intialization process

        /* Wake-up routine */
        tmp_byte = 0x00;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	75bb      	strb	r3, [r7, #22]
        HAL_StatusTypeDef wkup_status = HAL_I2C_Mem_Write(hi2c, (mpu->address << 1), (uint8_t)MPU6050_REG_PWR_MGMT_1, 1, &tmp_byte, 1, MPU6050_DEFAULT_TIMEOUT);
 8000aaa:	68bb      	ldr	r3, [r7, #8]
 8000aac:	791b      	ldrb	r3, [r3, #4]
 8000aae:	005b      	lsls	r3, r3, #1
 8000ab0:	b299      	uxth	r1, r3
 8000ab2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ab6:	9302      	str	r3, [sp, #8]
 8000ab8:	2301      	movs	r3, #1
 8000aba:	9301      	str	r3, [sp, #4]
 8000abc:	f107 0316 	add.w	r3, r7, #22
 8000ac0:	9300      	str	r3, [sp, #0]
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	226b      	movs	r2, #107	@ 0x6b
 8000ac6:	68f8      	ldr	r0, [r7, #12]
 8000ac8:	f000 ffac 	bl	8001a24 <HAL_I2C_Mem_Write>
 8000acc:	4603      	mov	r3, r0
 8000ace:	75fb      	strb	r3, [r7, #23]

        //uint8_t debug = 0xFF;
        //HAL_I2C_Mem_Read(hi2c, (mpu->address << 1), (uint8_t)MPU6050_REG_PWR_MGMT_1, 1, &debug, 1, MPU6050_DEFAULT_TIMEOUT);

        /* Set the sample rate */
        MPU6050_ConfigSampleRate(hi2c, mpu, handle.rate_div);
 8000ad0:	793b      	ldrb	r3, [r7, #4]
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	68b9      	ldr	r1, [r7, #8]
 8000ad6:	68f8      	ldr	r0, [r7, #12]
 8000ad8:	f000 f82e 	bl	8000b38 <MPU6050_ConfigSampleRate>
        //HAL_I2C_Mem_Read(hi2c, (mpu->address << 1), (uint8_t)MPU6050_REG_SMPRT_DIV, 1, &debug, 1, MPU6050_DEFAULT_TIMEOUT);

        /* Set the gyroscope range */
        MPU6050_ConfigGyroscope(hi2c, mpu, handle.gyro_range);
 8000adc:	797b      	ldrb	r3, [r7, #5]
 8000ade:	461a      	mov	r2, r3
 8000ae0:	68b9      	ldr	r1, [r7, #8]
 8000ae2:	68f8      	ldr	r0, [r7, #12]
 8000ae4:	f000 f848 	bl	8000b78 <MPU6050_ConfigGyroscope>
        //HAL_I2C_Mem_Read(hi2c, (mpu->address << 1), (uint8_t)MPU6050_REG_GYRO_CONFIG, 1, &debug, 1, MPU6050_DEFAULT_TIMEOUT);

        /* Set the accelerometer range */
        MPU6050_ConfigAccelerometer(hi2c, mpu, handle.accel_range);
 8000ae8:	79bb      	ldrb	r3, [r7, #6]
 8000aea:	461a      	mov	r2, r3
 8000aec:	68b9      	ldr	r1, [r7, #8]
 8000aee:	68f8      	ldr	r0, [r7, #12]
 8000af0:	f000 f8a2 	bl	8000c38 <MPU6050_ConfigAccelerometer>
        //HAL_I2C_Mem_Read(hi2c, (mpu->address << 1), (uint8_t)MPU6050_REG_ACCEL_CONFIG, 1, &debug, 1, MPU6050_DEFAULT_TIMEOUT);

        /* Set the internal Digital Low-Pass Filter bandwidth */
        MPU6050_ConfigDLFP(hi2c, mpu, handle.filter_bandwidth);
 8000af4:	79fb      	ldrb	r3, [r7, #7]
 8000af6:	461a      	mov	r2, r3
 8000af8:	68b9      	ldr	r1, [r7, #8]
 8000afa:	68f8      	ldr	r0, [r7, #12]
 8000afc:	f000 f90e 	bl	8000d1c <MPU6050_ConfigDLFP>

        MPU6050_SetAccelerometerOffset(mpu, MPU6050_OFFSET_AX, MPU6050_OFFSET_AY, MPU6050_OFFSET_AZ);
 8000b00:	4b0b      	ldr	r3, [pc, #44]	@ (8000b30 <MPU6050_Init+0xb8>)
 8000b02:	f240 1281 	movw	r2, #385	@ 0x181
 8000b06:	f06f 0194 	mvn.w	r1, #148	@ 0x94
 8000b0a:	68b8      	ldr	r0, [r7, #8]
 8000b0c:	f000 f957 	bl	8000dbe <MPU6050_SetAccelerometerOffset>
        MPU6050_SetGyroscopeOffset(mpu, MPU6050_OFFSET_GX, MPU6050_OFFSET_GY, MPU6050_OFFSET_GZ);
 8000b10:	4b08      	ldr	r3, [pc, #32]	@ (8000b34 <MPU6050_Init+0xbc>)
 8000b12:	22c1      	movs	r2, #193	@ 0xc1
 8000b14:	f240 1119 	movw	r1, #281	@ 0x119
 8000b18:	68b8      	ldr	r0, [r7, #8]
 8000b1a:	f000 f934 	bl	8000d86 <MPU6050_SetGyroscopeOffset>

        return STATUS_OK;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	e001      	b.n	8000b26 <MPU6050_Init+0xae>
    }
    
    return STATUS_FAIL;
 8000b22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	3718      	adds	r7, #24
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	ffffba50 	.word	0xffffba50
 8000b34:	fffffe1a 	.word	0xfffffe1a

08000b38 <MPU6050_ConfigSampleRate>:

status_t MPU6050_ConfigSampleRate(I2C_HandleTypeDef *hi2c, MPU6050_t* mpu, MPU6050_SampleRateDiv_t rate_div)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b08a      	sub	sp, #40	@ 0x28
 8000b3c:	af04      	add	r7, sp, #16
 8000b3e:	60f8      	str	r0, [r7, #12]
 8000b40:	60b9      	str	r1, [r7, #8]
 8000b42:	4613      	mov	r3, r2
 8000b44:	71fb      	strb	r3, [r7, #7]
    uint8_t tmp_byte = (uint8_t)rate_div;
 8000b46:	79fb      	ldrb	r3, [r7, #7]
 8000b48:	75fb      	strb	r3, [r7, #23]

    // Write the SMPRT_DIV setting to the register
    HAL_I2C_Mem_Write(hi2c, (mpu->address << 1), (uint8_t)MPU6050_REG_SMPRT_DIV, 1, &tmp_byte, 1, MPU6050_DEFAULT_TIMEOUT);
 8000b4a:	68bb      	ldr	r3, [r7, #8]
 8000b4c:	791b      	ldrb	r3, [r3, #4]
 8000b4e:	005b      	lsls	r3, r3, #1
 8000b50:	b299      	uxth	r1, r3
 8000b52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b56:	9302      	str	r3, [sp, #8]
 8000b58:	2301      	movs	r3, #1
 8000b5a:	9301      	str	r3, [sp, #4]
 8000b5c:	f107 0317 	add.w	r3, r7, #23
 8000b60:	9300      	str	r3, [sp, #0]
 8000b62:	2301      	movs	r3, #1
 8000b64:	2219      	movs	r2, #25
 8000b66:	68f8      	ldr	r0, [r7, #12]
 8000b68:	f000 ff5c 	bl	8001a24 <HAL_I2C_Mem_Write>

    return STATUS_OK;
 8000b6c:	2300      	movs	r3, #0
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	3718      	adds	r7, #24
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
	...

08000b78 <MPU6050_ConfigGyroscope>:

status_t MPU6050_ConfigGyroscope(I2C_HandleTypeDef *hi2c, MPU6050_t *mpu, MPU6050_GyroscopeRange_t gyro_range)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b08a      	sub	sp, #40	@ 0x28
 8000b7c:	af04      	add	r7, sp, #16
 8000b7e:	60f8      	str	r0, [r7, #12]
 8000b80:	60b9      	str	r1, [r7, #8]
 8000b82:	4613      	mov	r3, r2
 8000b84:	71fb      	strb	r3, [r7, #7]
    uint8_t tmp_byte;

    // Read the current register value
    HAL_I2C_Mem_Read(hi2c, (mpu->address << 1), (uint8_t)MPU6050_REG_GYRO_CONFIG, 1, &tmp_byte, 1, MPU6050_DEFAULT_TIMEOUT);
 8000b86:	68bb      	ldr	r3, [r7, #8]
 8000b88:	791b      	ldrb	r3, [r3, #4]
 8000b8a:	005b      	lsls	r3, r3, #1
 8000b8c:	b299      	uxth	r1, r3
 8000b8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b92:	9302      	str	r3, [sp, #8]
 8000b94:	2301      	movs	r3, #1
 8000b96:	9301      	str	r3, [sp, #4]
 8000b98:	f107 0317 	add.w	r3, r7, #23
 8000b9c:	9300      	str	r3, [sp, #0]
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	221b      	movs	r2, #27
 8000ba2:	68f8      	ldr	r0, [r7, #12]
 8000ba4:	f001 f838 	bl	8001c18 <HAL_I2C_Mem_Read>

    // Bit-masking 
    tmp_byte &= !(0x03 << 3);
 8000ba8:	2300      	movs	r3, #0
 8000baa:	75fb      	strb	r3, [r7, #23]
    tmp_byte |=  (uint8_t)gyro_range << 3;
 8000bac:	79fb      	ldrb	r3, [r7, #7]
 8000bae:	00db      	lsls	r3, r3, #3
 8000bb0:	b25a      	sxtb	r2, r3
 8000bb2:	7dfb      	ldrb	r3, [r7, #23]
 8000bb4:	b25b      	sxtb	r3, r3
 8000bb6:	4313      	orrs	r3, r2
 8000bb8:	b25b      	sxtb	r3, r3
 8000bba:	b2db      	uxtb	r3, r3
 8000bbc:	75fb      	strb	r3, [r7, #23]

    // Write the FS_SEL setting to the register
    HAL_I2C_Mem_Write(hi2c, (mpu->address << 1), (uint8_t)MPU6050_REG_GYRO_CONFIG, 1, &tmp_byte, 1, MPU6050_DEFAULT_TIMEOUT);
 8000bbe:	68bb      	ldr	r3, [r7, #8]
 8000bc0:	791b      	ldrb	r3, [r3, #4]
 8000bc2:	005b      	lsls	r3, r3, #1
 8000bc4:	b299      	uxth	r1, r3
 8000bc6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bca:	9302      	str	r3, [sp, #8]
 8000bcc:	2301      	movs	r3, #1
 8000bce:	9301      	str	r3, [sp, #4]
 8000bd0:	f107 0317 	add.w	r3, r7, #23
 8000bd4:	9300      	str	r3, [sp, #0]
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	221b      	movs	r2, #27
 8000bda:	68f8      	ldr	r0, [r7, #12]
 8000bdc:	f000 ff22 	bl	8001a24 <HAL_I2C_Mem_Write>

    // Set the scaling factor for true data
    switch (gyro_range)
 8000be0:	79fb      	ldrb	r3, [r7, #7]
 8000be2:	2b03      	cmp	r3, #3
 8000be4:	d81a      	bhi.n	8000c1c <MPU6050_ConfigGyroscope+0xa4>
 8000be6:	a201      	add	r2, pc, #4	@ (adr r2, 8000bec <MPU6050_ConfigGyroscope+0x74>)
 8000be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bec:	08000bfd 	.word	0x08000bfd
 8000bf0:	08000c05 	.word	0x08000c05
 8000bf4:	08000c0d 	.word	0x08000c0d
 8000bf8:	08000c15 	.word	0x08000c15
    {
    case Gyro_Range_250s:
        mpu->gyro_scaling_factor = 1.0 / 131.0 * DEG2RAD;
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	4a0a      	ldr	r2, [pc, #40]	@ (8000c28 <MPU6050_ConfigGyroscope+0xb0>)
 8000c00:	609a      	str	r2, [r3, #8]
        break;
 8000c02:	e00c      	b.n	8000c1e <MPU6050_ConfigGyroscope+0xa6>
    case Gyro_Range_500s:
        mpu->gyro_scaling_factor = 1.0 / 65.5 * DEG2RAD;
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	4a09      	ldr	r2, [pc, #36]	@ (8000c2c <MPU6050_ConfigGyroscope+0xb4>)
 8000c08:	609a      	str	r2, [r3, #8]
        break;
 8000c0a:	e008      	b.n	8000c1e <MPU6050_ConfigGyroscope+0xa6>
    case Gyro_Range_1000s:
        mpu->gyro_scaling_factor = 1.0 / 32.8 * DEG2RAD;
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	4a08      	ldr	r2, [pc, #32]	@ (8000c30 <MPU6050_ConfigGyroscope+0xb8>)
 8000c10:	609a      	str	r2, [r3, #8]
        break;
 8000c12:	e004      	b.n	8000c1e <MPU6050_ConfigGyroscope+0xa6>
    case Gyro_Range_2000s:
        mpu->gyro_scaling_factor = 1.0 / 16.4 * DEG2RAD;
 8000c14:	68bb      	ldr	r3, [r7, #8]
 8000c16:	4a07      	ldr	r2, [pc, #28]	@ (8000c34 <MPU6050_ConfigGyroscope+0xbc>)
 8000c18:	609a      	str	r2, [r3, #8]
        break;
 8000c1a:	e000      	b.n	8000c1e <MPU6050_ConfigGyroscope+0xa6>
    default:
        break;
 8000c1c:	bf00      	nop
    }

    return STATUS_OK;
 8000c1e:	2300      	movs	r3, #0
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	3718      	adds	r7, #24
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	390bb3fd 	.word	0x390bb3fd
 8000c2c:	398bb3fd 	.word	0x398bb3fd
 8000c30:	3a0b7d78 	.word	0x3a0b7d78
 8000c34:	3a8b7d78 	.word	0x3a8b7d78

08000c38 <MPU6050_ConfigAccelerometer>:

status_t MPU6050_ConfigAccelerometer(I2C_HandleTypeDef *hi2c, MPU6050_t *mpu, MPU6050_AccelerometerRange_t accel_range)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b08a      	sub	sp, #40	@ 0x28
 8000c3c:	af04      	add	r7, sp, #16
 8000c3e:	60f8      	str	r0, [r7, #12]
 8000c40:	60b9      	str	r1, [r7, #8]
 8000c42:	4613      	mov	r3, r2
 8000c44:	71fb      	strb	r3, [r7, #7]
    uint8_t tmp_byte;

    // Read the current register value
    HAL_I2C_Mem_Read(hi2c, (mpu->address << 1), (uint8_t)MPU6050_REG_ACCEL_CONFIG, 1, &tmp_byte, 1, MPU6050_DEFAULT_TIMEOUT);
 8000c46:	68bb      	ldr	r3, [r7, #8]
 8000c48:	791b      	ldrb	r3, [r3, #4]
 8000c4a:	005b      	lsls	r3, r3, #1
 8000c4c:	b299      	uxth	r1, r3
 8000c4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c52:	9302      	str	r3, [sp, #8]
 8000c54:	2301      	movs	r3, #1
 8000c56:	9301      	str	r3, [sp, #4]
 8000c58:	f107 0317 	add.w	r3, r7, #23
 8000c5c:	9300      	str	r3, [sp, #0]
 8000c5e:	2301      	movs	r3, #1
 8000c60:	221c      	movs	r2, #28
 8000c62:	68f8      	ldr	r0, [r7, #12]
 8000c64:	f000 ffd8 	bl	8001c18 <HAL_I2C_Mem_Read>

    // Bit-masking 
    tmp_byte &= !(0x03 << 3);
 8000c68:	2300      	movs	r3, #0
 8000c6a:	75fb      	strb	r3, [r7, #23]
    tmp_byte |=  (uint8_t)accel_range << 3;
 8000c6c:	79fb      	ldrb	r3, [r7, #7]
 8000c6e:	00db      	lsls	r3, r3, #3
 8000c70:	b25a      	sxtb	r2, r3
 8000c72:	7dfb      	ldrb	r3, [r7, #23]
 8000c74:	b25b      	sxtb	r3, r3
 8000c76:	4313      	orrs	r3, r2
 8000c78:	b25b      	sxtb	r3, r3
 8000c7a:	b2db      	uxtb	r3, r3
 8000c7c:	75fb      	strb	r3, [r7, #23]

    // Write the AFS_SEL setting to the register
    HAL_I2C_Mem_Write(hi2c, (mpu->address << 1), (uint8_t)MPU6050_REG_ACCEL_CONFIG, 1, &tmp_byte, 1, MPU6050_DEFAULT_TIMEOUT);
 8000c7e:	68bb      	ldr	r3, [r7, #8]
 8000c80:	791b      	ldrb	r3, [r3, #4]
 8000c82:	005b      	lsls	r3, r3, #1
 8000c84:	b299      	uxth	r1, r3
 8000c86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c8a:	9302      	str	r3, [sp, #8]
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	9301      	str	r3, [sp, #4]
 8000c90:	f107 0317 	add.w	r3, r7, #23
 8000c94:	9300      	str	r3, [sp, #0]
 8000c96:	2301      	movs	r3, #1
 8000c98:	221c      	movs	r2, #28
 8000c9a:	68f8      	ldr	r0, [r7, #12]
 8000c9c:	f000 fec2 	bl	8001a24 <HAL_I2C_Mem_Write>

    // Set the scaling factor for true data
    switch (accel_range)
 8000ca0:	79fb      	ldrb	r3, [r7, #7]
 8000ca2:	2b03      	cmp	r3, #3
 8000ca4:	d82a      	bhi.n	8000cfc <MPU6050_ConfigAccelerometer+0xc4>
 8000ca6:	a201      	add	r2, pc, #4	@ (adr r2, 8000cac <MPU6050_ConfigAccelerometer+0x74>)
 8000ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cac:	08000cbd 	.word	0x08000cbd
 8000cb0:	08000ccd 	.word	0x08000ccd
 8000cb4:	08000cdd 	.word	0x08000cdd
 8000cb8:	08000ced 	.word	0x08000ced
    {
    case Accel_Range_2g:
        mpu->accel_scaling_factor = G / 16384.0;
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	4a12      	ldr	r2, [pc, #72]	@ (8000d08 <MPU6050_ConfigAccelerometer+0xd0>)
 8000cc0:	60da      	str	r2, [r3, #12]
        g_accel_val = (int16_t)16384;
 8000cc2:	4b12      	ldr	r3, [pc, #72]	@ (8000d0c <MPU6050_ConfigAccelerometer+0xd4>)
 8000cc4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000cc8:	801a      	strh	r2, [r3, #0]
        break;
 8000cca:	e018      	b.n	8000cfe <MPU6050_ConfigAccelerometer+0xc6>
    case Accel_Range_4g:
        mpu->accel_scaling_factor = G / 8192.0;
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	4a10      	ldr	r2, [pc, #64]	@ (8000d10 <MPU6050_ConfigAccelerometer+0xd8>)
 8000cd0:	60da      	str	r2, [r3, #12]
        g_accel_val = (int16_t)8192;
 8000cd2:	4b0e      	ldr	r3, [pc, #56]	@ (8000d0c <MPU6050_ConfigAccelerometer+0xd4>)
 8000cd4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000cd8:	801a      	strh	r2, [r3, #0]
        break;
 8000cda:	e010      	b.n	8000cfe <MPU6050_ConfigAccelerometer+0xc6>
    case Accel_Range_8g:
        mpu->accel_scaling_factor = G / 4096.0;
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	4a0d      	ldr	r2, [pc, #52]	@ (8000d14 <MPU6050_ConfigAccelerometer+0xdc>)
 8000ce0:	60da      	str	r2, [r3, #12]
        g_accel_val = (int16_t)4096;
 8000ce2:	4b0a      	ldr	r3, [pc, #40]	@ (8000d0c <MPU6050_ConfigAccelerometer+0xd4>)
 8000ce4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000ce8:	801a      	strh	r2, [r3, #0]
        break;
 8000cea:	e008      	b.n	8000cfe <MPU6050_ConfigAccelerometer+0xc6>
    case Accel_Range_16g:
        mpu->accel_scaling_factor = G / 2048.0;
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	4a0a      	ldr	r2, [pc, #40]	@ (8000d18 <MPU6050_ConfigAccelerometer+0xe0>)
 8000cf0:	60da      	str	r2, [r3, #12]
        g_accel_val = (int16_t)2048;
 8000cf2:	4b06      	ldr	r3, [pc, #24]	@ (8000d0c <MPU6050_ConfigAccelerometer+0xd4>)
 8000cf4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000cf8:	801a      	strh	r2, [r3, #0]
        break;
 8000cfa:	e000      	b.n	8000cfe <MPU6050_ConfigAccelerometer+0xc6>
    default:
        break;
 8000cfc:	bf00      	nop
    }

    return STATUS_OK;
 8000cfe:	2300      	movs	r3, #0
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	3718      	adds	r7, #24
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	3a1cf5c3 	.word	0x3a1cf5c3
 8000d0c:	20000044 	.word	0x20000044
 8000d10:	3a9cf5c3 	.word	0x3a9cf5c3
 8000d14:	3b1cf5c3 	.word	0x3b1cf5c3
 8000d18:	3b9cf5c3 	.word	0x3b9cf5c3

08000d1c <MPU6050_ConfigDLFP>:

status_t MPU6050_ConfigDLFP(I2C_HandleTypeDef *hi2c, MPU6050_t *mpu, MPU6050_DLFP_t filter_bandwidth)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b08a      	sub	sp, #40	@ 0x28
 8000d20:	af04      	add	r7, sp, #16
 8000d22:	60f8      	str	r0, [r7, #12]
 8000d24:	60b9      	str	r1, [r7, #8]
 8000d26:	4613      	mov	r3, r2
 8000d28:	71fb      	strb	r3, [r7, #7]
    uint8_t tmp_byte;

    // Read the current register value
    HAL_I2C_Mem_Read(hi2c, (mpu->address << 1), (uint8_t)MPU6050_REG_CONFIG, 1, &tmp_byte, 1, MPU6050_DEFAULT_TIMEOUT);
 8000d2a:	68bb      	ldr	r3, [r7, #8]
 8000d2c:	791b      	ldrb	r3, [r3, #4]
 8000d2e:	005b      	lsls	r3, r3, #1
 8000d30:	b299      	uxth	r1, r3
 8000d32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d36:	9302      	str	r3, [sp, #8]
 8000d38:	2301      	movs	r3, #1
 8000d3a:	9301      	str	r3, [sp, #4]
 8000d3c:	f107 0317 	add.w	r3, r7, #23
 8000d40:	9300      	str	r3, [sp, #0]
 8000d42:	2301      	movs	r3, #1
 8000d44:	221a      	movs	r2, #26
 8000d46:	68f8      	ldr	r0, [r7, #12]
 8000d48:	f000 ff66 	bl	8001c18 <HAL_I2C_Mem_Read>

    // Bit-masking 
    tmp_byte &= !(0x07 << 0);
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	75fb      	strb	r3, [r7, #23]
    tmp_byte |=  (uint8_t)filter_bandwidth;
 8000d50:	7dfa      	ldrb	r2, [r7, #23]
 8000d52:	79fb      	ldrb	r3, [r7, #7]
 8000d54:	4313      	orrs	r3, r2
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	75fb      	strb	r3, [r7, #23]

    // Write the DLFP bandwidth to the register
    HAL_I2C_Mem_Write(hi2c, (mpu->address << 1), (uint8_t)MPU6050_REG_CONFIG, 1, &tmp_byte, 1, MPU6050_DEFAULT_TIMEOUT);
 8000d5a:	68bb      	ldr	r3, [r7, #8]
 8000d5c:	791b      	ldrb	r3, [r3, #4]
 8000d5e:	005b      	lsls	r3, r3, #1
 8000d60:	b299      	uxth	r1, r3
 8000d62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d66:	9302      	str	r3, [sp, #8]
 8000d68:	2301      	movs	r3, #1
 8000d6a:	9301      	str	r3, [sp, #4]
 8000d6c:	f107 0317 	add.w	r3, r7, #23
 8000d70:	9300      	str	r3, [sp, #0]
 8000d72:	2301      	movs	r3, #1
 8000d74:	221a      	movs	r2, #26
 8000d76:	68f8      	ldr	r0, [r7, #12]
 8000d78:	f000 fe54 	bl	8001a24 <HAL_I2C_Mem_Write>

    return STATUS_OK;
 8000d7c:	2300      	movs	r3, #0
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3718      	adds	r7, #24
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}

08000d86 <MPU6050_SetGyroscopeOffset>:

    return STATUS_OK;
}

status_t MPU6050_SetGyroscopeOffset(MPU6050_t *mpu, int16_t offset_x, int16_t offset_y, int16_t offset_z)
{
 8000d86:	b480      	push	{r7}
 8000d88:	b085      	sub	sp, #20
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	60f8      	str	r0, [r7, #12]
 8000d8e:	4608      	mov	r0, r1
 8000d90:	4611      	mov	r1, r2
 8000d92:	461a      	mov	r2, r3
 8000d94:	4603      	mov	r3, r0
 8000d96:	817b      	strh	r3, [r7, #10]
 8000d98:	460b      	mov	r3, r1
 8000d9a:	813b      	strh	r3, [r7, #8]
 8000d9c:	4613      	mov	r3, r2
 8000d9e:	80fb      	strh	r3, [r7, #6]
    mpu->gyro_offset.x = offset_x;
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	897a      	ldrh	r2, [r7, #10]
 8000da4:	839a      	strh	r2, [r3, #28]
    mpu->gyro_offset.y = offset_y;
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	893a      	ldrh	r2, [r7, #8]
 8000daa:	83da      	strh	r2, [r3, #30]
    mpu->gyro_offset.z = offset_z;
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	88fa      	ldrh	r2, [r7, #6]
 8000db0:	841a      	strh	r2, [r3, #32]

    return STATUS_OK;
 8000db2:	2300      	movs	r3, #0
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	3714      	adds	r7, #20
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bc80      	pop	{r7}
 8000dbc:	4770      	bx	lr

08000dbe <MPU6050_SetAccelerometerOffset>:

status_t MPU6050_SetAccelerometerOffset(MPU6050_t *mpu, int16_t offset_x, int16_t offset_y, int16_t offset_z)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	b085      	sub	sp, #20
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	60f8      	str	r0, [r7, #12]
 8000dc6:	4608      	mov	r0, r1
 8000dc8:	4611      	mov	r1, r2
 8000dca:	461a      	mov	r2, r3
 8000dcc:	4603      	mov	r3, r0
 8000dce:	817b      	strh	r3, [r7, #10]
 8000dd0:	460b      	mov	r3, r1
 8000dd2:	813b      	strh	r3, [r7, #8]
 8000dd4:	4613      	mov	r3, r2
 8000dd6:	80fb      	strh	r3, [r7, #6]
    mpu->accel_offset.x = offset_x;
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	897a      	ldrh	r2, [r7, #10]
 8000ddc:	845a      	strh	r2, [r3, #34]	@ 0x22
    mpu->accel_offset.y = offset_y;
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	893a      	ldrh	r2, [r7, #8]
 8000de2:	849a      	strh	r2, [r3, #36]	@ 0x24
    mpu->accel_offset.z = offset_z;
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	88fa      	ldrh	r2, [r7, #6]
 8000de8:	84da      	strh	r2, [r3, #38]	@ 0x26

    return STATUS_OK;
 8000dea:	2300      	movs	r3, #0
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	3714      	adds	r7, #20
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bc80      	pop	{r7}
 8000df4:	4770      	bx	lr

08000df6 <MPU6050_ReadGyroscope>:
    
    return 0;
}

status_t MPU6050_ReadGyroscope(I2C_HandleTypeDef *hi2c, MPU6050_t *mpu)
{
 8000df6:	b580      	push	{r7, lr}
 8000df8:	b088      	sub	sp, #32
 8000dfa:	af04      	add	r7, sp, #16
 8000dfc:	6078      	str	r0, [r7, #4]
 8000dfe:	6039      	str	r1, [r7, #0]
    uint8_t data[6];

    HAL_StatusTypeDef gyro_read_status;
    // Read 6 bytes of RAW data starting from ACCEL_XOUT_H register.
    gyro_read_status = HAL_I2C_Mem_Read(hi2c, (mpu->address << 1), (uint8_t)MPU6050_REG_GYRO_XOUT_H, 1, data, 6, MPU6050_DEFAULT_TIMEOUT);
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	791b      	ldrb	r3, [r3, #4]
 8000e04:	005b      	lsls	r3, r3, #1
 8000e06:	b299      	uxth	r1, r3
 8000e08:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e0c:	9302      	str	r3, [sp, #8]
 8000e0e:	2306      	movs	r3, #6
 8000e10:	9301      	str	r3, [sp, #4]
 8000e12:	f107 0308 	add.w	r3, r7, #8
 8000e16:	9300      	str	r3, [sp, #0]
 8000e18:	2301      	movs	r3, #1
 8000e1a:	2243      	movs	r2, #67	@ 0x43
 8000e1c:	6878      	ldr	r0, [r7, #4]
 8000e1e:	f000 fefb 	bl	8001c18 <HAL_I2C_Mem_Read>
 8000e22:	4603      	mov	r3, r0
 8000e24:	73fb      	strb	r3, [r7, #15]

    mpu->gyro_raw.x = (int16_t)(data[0] << 8 | data[1]) + mpu->gyro_offset.x;
 8000e26:	7a3b      	ldrb	r3, [r7, #8]
 8000e28:	021b      	lsls	r3, r3, #8
 8000e2a:	b21a      	sxth	r2, r3
 8000e2c:	7a7b      	ldrb	r3, [r7, #9]
 8000e2e:	b21b      	sxth	r3, r3
 8000e30:	4313      	orrs	r3, r2
 8000e32:	b21b      	sxth	r3, r3
 8000e34:	b29a      	uxth	r2, r3
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8000e3c:	b29b      	uxth	r3, r3
 8000e3e:	4413      	add	r3, r2
 8000e40:	b29b      	uxth	r3, r3
 8000e42:	b21a      	sxth	r2, r3
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	821a      	strh	r2, [r3, #16]
    mpu->gyro_raw.y = (int16_t)(data[2] << 8 | data[3]) + mpu->gyro_offset.y;
 8000e48:	7abb      	ldrb	r3, [r7, #10]
 8000e4a:	021b      	lsls	r3, r3, #8
 8000e4c:	b21a      	sxth	r2, r3
 8000e4e:	7afb      	ldrb	r3, [r7, #11]
 8000e50:	b21b      	sxth	r3, r3
 8000e52:	4313      	orrs	r3, r2
 8000e54:	b21b      	sxth	r3, r3
 8000e56:	b29a      	uxth	r2, r3
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8000e5e:	b29b      	uxth	r3, r3
 8000e60:	4413      	add	r3, r2
 8000e62:	b29b      	uxth	r3, r3
 8000e64:	b21a      	sxth	r2, r3
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	825a      	strh	r2, [r3, #18]
    mpu->gyro_raw.z = (int16_t)(data[4] << 8 | data[5]) + mpu->gyro_offset.z;
 8000e6a:	7b3b      	ldrb	r3, [r7, #12]
 8000e6c:	021b      	lsls	r3, r3, #8
 8000e6e:	b21a      	sxth	r2, r3
 8000e70:	7b7b      	ldrb	r3, [r7, #13]
 8000e72:	b21b      	sxth	r3, r3
 8000e74:	4313      	orrs	r3, r2
 8000e76:	b21b      	sxth	r3, r3
 8000e78:	b29a      	uxth	r2, r3
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8000e80:	b29b      	uxth	r3, r3
 8000e82:	4413      	add	r3, r2
 8000e84:	b29b      	uxth	r3, r3
 8000e86:	b21a      	sxth	r2, r3
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	829a      	strh	r2, [r3, #20]

    // Convert the RAW data into angular acceleration in 'deg/s'
    mpu->gyro_scaled.x = mpu->gyro_raw.x * mpu->gyro_scaling_factor;
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000e92:	4618      	mov	r0, r3
 8000e94:	f7ff fa80 	bl	8000398 <__aeabi_i2f>
 8000e98:	4602      	mov	r2, r0
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	689b      	ldr	r3, [r3, #8]
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4610      	mov	r0, r2
 8000ea2:	f7ff facd 	bl	8000440 <__aeabi_fmul>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	62da      	str	r2, [r3, #44]	@ 0x2c
    mpu->gyro_scaled.y = mpu->gyro_raw.y * mpu->gyro_scaling_factor;
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff fa6f 	bl	8000398 <__aeabi_i2f>
 8000eba:	4602      	mov	r2, r0
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	689b      	ldr	r3, [r3, #8]
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4610      	mov	r0, r2
 8000ec4:	f7ff fabc 	bl	8000440 <__aeabi_fmul>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	461a      	mov	r2, r3
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	631a      	str	r2, [r3, #48]	@ 0x30
    mpu->gyro_scaled.z = mpu->gyro_raw.z * mpu->gyro_scaling_factor;
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f7ff fa5e 	bl	8000398 <__aeabi_i2f>
 8000edc:	4602      	mov	r2, r0
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	689b      	ldr	r3, [r3, #8]
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4610      	mov	r0, r2
 8000ee6:	f7ff faab 	bl	8000440 <__aeabi_fmul>
 8000eea:	4603      	mov	r3, r0
 8000eec:	461a      	mov	r2, r3
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	635a      	str	r2, [r3, #52]	@ 0x34

    return STATUS_OK;
 8000ef2:	2300      	movs	r3, #0
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3710      	adds	r7, #16
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}

08000efc <MPU6050_ReadAccelerometer>:

status_t MPU6050_ReadAccelerometer(I2C_HandleTypeDef *hi2c, MPU6050_t *mpu)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b088      	sub	sp, #32
 8000f00:	af04      	add	r7, sp, #16
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	6039      	str	r1, [r7, #0]
    uint8_t data[6];

    HAL_StatusTypeDef accel_read_status;
    // Read 6 bytes of RAW data starting from ACCEL_XOUT_H register.
    accel_read_status = HAL_I2C_Mem_Read(hi2c, (mpu->address << 1), (uint8_t)MPU6050_REG_ACCEL_XOUT_H, 1, data, 6, MPU6050_DEFAULT_TIMEOUT);
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	791b      	ldrb	r3, [r3, #4]
 8000f0a:	005b      	lsls	r3, r3, #1
 8000f0c:	b299      	uxth	r1, r3
 8000f0e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f12:	9302      	str	r3, [sp, #8]
 8000f14:	2306      	movs	r3, #6
 8000f16:	9301      	str	r3, [sp, #4]
 8000f18:	f107 0308 	add.w	r3, r7, #8
 8000f1c:	9300      	str	r3, [sp, #0]
 8000f1e:	2301      	movs	r3, #1
 8000f20:	223b      	movs	r2, #59	@ 0x3b
 8000f22:	6878      	ldr	r0, [r7, #4]
 8000f24:	f000 fe78 	bl	8001c18 <HAL_I2C_Mem_Read>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	73fb      	strb	r3, [r7, #15]

    mpu->accel_raw.x = (int16_t)(data[0] << 8 | data[1]) + mpu->accel_offset.x;
 8000f2c:	7a3b      	ldrb	r3, [r7, #8]
 8000f2e:	021b      	lsls	r3, r3, #8
 8000f30:	b21a      	sxth	r2, r3
 8000f32:	7a7b      	ldrb	r3, [r7, #9]
 8000f34:	b21b      	sxth	r3, r3
 8000f36:	4313      	orrs	r3, r2
 8000f38:	b21b      	sxth	r3, r3
 8000f3a:	b29a      	uxth	r2, r3
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 8000f42:	b29b      	uxth	r3, r3
 8000f44:	4413      	add	r3, r2
 8000f46:	b29b      	uxth	r3, r3
 8000f48:	b21a      	sxth	r2, r3
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	82da      	strh	r2, [r3, #22]
    mpu->accel_raw.y = (int16_t)(data[2] << 8 | data[3]) + mpu->accel_offset.y;
 8000f4e:	7abb      	ldrb	r3, [r7, #10]
 8000f50:	021b      	lsls	r3, r3, #8
 8000f52:	b21a      	sxth	r2, r3
 8000f54:	7afb      	ldrb	r3, [r7, #11]
 8000f56:	b21b      	sxth	r3, r3
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	b21b      	sxth	r3, r3
 8000f5c:	b29a      	uxth	r2, r3
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 8000f64:	b29b      	uxth	r3, r3
 8000f66:	4413      	add	r3, r2
 8000f68:	b29b      	uxth	r3, r3
 8000f6a:	b21a      	sxth	r2, r3
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	831a      	strh	r2, [r3, #24]
    mpu->accel_raw.z = (int16_t)(data[4] << 8 | data[5]) + mpu->accel_offset.z;
 8000f70:	7b3b      	ldrb	r3, [r7, #12]
 8000f72:	021b      	lsls	r3, r3, #8
 8000f74:	b21a      	sxth	r2, r3
 8000f76:	7b7b      	ldrb	r3, [r7, #13]
 8000f78:	b21b      	sxth	r3, r3
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	b21b      	sxth	r3, r3
 8000f7e:	b29a      	uxth	r2, r3
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	@ 0x26
 8000f86:	b29b      	uxth	r3, r3
 8000f88:	4413      	add	r3, r2
 8000f8a:	b29b      	uxth	r3, r3
 8000f8c:	b21a      	sxth	r2, r3
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	835a      	strh	r2, [r3, #26]

    // Convert the RAW data into linear acceleration in 'm/s^2'
    mpu->accel_scaled.x = mpu->accel_raw.x * mpu->accel_scaling_factor;
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff f9fd 	bl	8000398 <__aeabi_i2f>
 8000f9e:	4602      	mov	r2, r0
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4610      	mov	r0, r2
 8000fa8:	f7ff fa4a 	bl	8000440 <__aeabi_fmul>
 8000fac:	4603      	mov	r3, r0
 8000fae:	461a      	mov	r2, r3
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	639a      	str	r2, [r3, #56]	@ 0x38
    mpu->accel_scaled.y = mpu->accel_raw.y * mpu->accel_scaling_factor;
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f7ff f9ec 	bl	8000398 <__aeabi_i2f>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	68db      	ldr	r3, [r3, #12]
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	4610      	mov	r0, r2
 8000fca:	f7ff fa39 	bl	8000440 <__aeabi_fmul>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	63da      	str	r2, [r3, #60]	@ 0x3c
    mpu->accel_scaled.z = mpu->accel_raw.z * mpu->accel_scaling_factor;
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff f9db 	bl	8000398 <__aeabi_i2f>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4610      	mov	r0, r2
 8000fec:	f7ff fa28 	bl	8000440 <__aeabi_fmul>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	641a      	str	r2, [r3, #64]	@ 0x40

    return STATUS_OK;
 8000ff8:	2300      	movs	r3, #0
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3710      	adds	r7, #16
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
	...

08001004 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001004:	b480      	push	{r7}
 8001006:	b085      	sub	sp, #20
 8001008:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800100a:	4b15      	ldr	r3, [pc, #84]	@ (8001060 <HAL_MspInit+0x5c>)
 800100c:	699b      	ldr	r3, [r3, #24]
 800100e:	4a14      	ldr	r2, [pc, #80]	@ (8001060 <HAL_MspInit+0x5c>)
 8001010:	f043 0301 	orr.w	r3, r3, #1
 8001014:	6193      	str	r3, [r2, #24]
 8001016:	4b12      	ldr	r3, [pc, #72]	@ (8001060 <HAL_MspInit+0x5c>)
 8001018:	699b      	ldr	r3, [r3, #24]
 800101a:	f003 0301 	and.w	r3, r3, #1
 800101e:	60bb      	str	r3, [r7, #8]
 8001020:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001022:	4b0f      	ldr	r3, [pc, #60]	@ (8001060 <HAL_MspInit+0x5c>)
 8001024:	69db      	ldr	r3, [r3, #28]
 8001026:	4a0e      	ldr	r2, [pc, #56]	@ (8001060 <HAL_MspInit+0x5c>)
 8001028:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800102c:	61d3      	str	r3, [r2, #28]
 800102e:	4b0c      	ldr	r3, [pc, #48]	@ (8001060 <HAL_MspInit+0x5c>)
 8001030:	69db      	ldr	r3, [r3, #28]
 8001032:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001036:	607b      	str	r3, [r7, #4]
 8001038:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800103a:	4b0a      	ldr	r3, [pc, #40]	@ (8001064 <HAL_MspInit+0x60>)
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800104e:	60fb      	str	r3, [r7, #12]
 8001050:	4a04      	ldr	r2, [pc, #16]	@ (8001064 <HAL_MspInit+0x60>)
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001056:	bf00      	nop
 8001058:	3714      	adds	r7, #20
 800105a:	46bd      	mov	sp, r7
 800105c:	bc80      	pop	{r7}
 800105e:	4770      	bx	lr
 8001060:	40021000 	.word	0x40021000
 8001064:	40010000 	.word	0x40010000

08001068 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b08a      	sub	sp, #40	@ 0x28
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001070:	f107 0314 	add.w	r3, r7, #20
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	605a      	str	r2, [r3, #4]
 800107a:	609a      	str	r2, [r3, #8]
 800107c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a1d      	ldr	r2, [pc, #116]	@ (80010f8 <HAL_I2C_MspInit+0x90>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d132      	bne.n	80010ee <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001088:	4b1c      	ldr	r3, [pc, #112]	@ (80010fc <HAL_I2C_MspInit+0x94>)
 800108a:	699b      	ldr	r3, [r3, #24]
 800108c:	4a1b      	ldr	r2, [pc, #108]	@ (80010fc <HAL_I2C_MspInit+0x94>)
 800108e:	f043 0308 	orr.w	r3, r3, #8
 8001092:	6193      	str	r3, [r2, #24]
 8001094:	4b19      	ldr	r3, [pc, #100]	@ (80010fc <HAL_I2C_MspInit+0x94>)
 8001096:	699b      	ldr	r3, [r3, #24]
 8001098:	f003 0308 	and.w	r3, r3, #8
 800109c:	613b      	str	r3, [r7, #16]
 800109e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010a0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80010a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010a6:	2312      	movs	r3, #18
 80010a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010aa:	2303      	movs	r3, #3
 80010ac:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ae:	f107 0314 	add.w	r3, r7, #20
 80010b2:	4619      	mov	r1, r3
 80010b4:	4812      	ldr	r0, [pc, #72]	@ (8001100 <HAL_I2C_MspInit+0x98>)
 80010b6:	f000 f9c5 	bl	8001444 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80010ba:	4b12      	ldr	r3, [pc, #72]	@ (8001104 <HAL_I2C_MspInit+0x9c>)
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	627b      	str	r3, [r7, #36]	@ 0x24
 80010c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010c2:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80010c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80010c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ca:	f043 0302 	orr.w	r3, r3, #2
 80010ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80010d0:	4a0c      	ldr	r2, [pc, #48]	@ (8001104 <HAL_I2C_MspInit+0x9c>)
 80010d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010d4:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010d6:	4b09      	ldr	r3, [pc, #36]	@ (80010fc <HAL_I2C_MspInit+0x94>)
 80010d8:	69db      	ldr	r3, [r3, #28]
 80010da:	4a08      	ldr	r2, [pc, #32]	@ (80010fc <HAL_I2C_MspInit+0x94>)
 80010dc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80010e0:	61d3      	str	r3, [r2, #28]
 80010e2:	4b06      	ldr	r3, [pc, #24]	@ (80010fc <HAL_I2C_MspInit+0x94>)
 80010e4:	69db      	ldr	r3, [r3, #28]
 80010e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010ea:	60fb      	str	r3, [r7, #12]
 80010ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80010ee:	bf00      	nop
 80010f0:	3728      	adds	r7, #40	@ 0x28
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	40005400 	.word	0x40005400
 80010fc:	40021000 	.word	0x40021000
 8001100:	40010c00 	.word	0x40010c00
 8001104:	40010000 	.word	0x40010000

08001108 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800110c:	bf00      	nop
 800110e:	e7fd      	b.n	800110c <NMI_Handler+0x4>

08001110 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001114:	bf00      	nop
 8001116:	e7fd      	b.n	8001114 <HardFault_Handler+0x4>

08001118 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800111c:	bf00      	nop
 800111e:	e7fd      	b.n	800111c <MemManage_Handler+0x4>

08001120 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001124:	bf00      	nop
 8001126:	e7fd      	b.n	8001124 <BusFault_Handler+0x4>

08001128 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800112c:	bf00      	nop
 800112e:	e7fd      	b.n	800112c <UsageFault_Handler+0x4>

08001130 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001134:	bf00      	nop
 8001136:	46bd      	mov	sp, r7
 8001138:	bc80      	pop	{r7}
 800113a:	4770      	bx	lr

0800113c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001140:	bf00      	nop
 8001142:	46bd      	mov	sp, r7
 8001144:	bc80      	pop	{r7}
 8001146:	4770      	bx	lr

08001148 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800114c:	bf00      	nop
 800114e:	46bd      	mov	sp, r7
 8001150:	bc80      	pop	{r7}
 8001152:	4770      	bx	lr

08001154 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001158:	f000 f874 	bl	8001244 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800115c:	bf00      	nop
 800115e:	bd80      	pop	{r7, pc}

08001160 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001164:	bf00      	nop
 8001166:	46bd      	mov	sp, r7
 8001168:	bc80      	pop	{r7}
 800116a:	4770      	bx	lr

0800116c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800116c:	f7ff fff8 	bl	8001160 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001170:	480b      	ldr	r0, [pc, #44]	@ (80011a0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001172:	490c      	ldr	r1, [pc, #48]	@ (80011a4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001174:	4a0c      	ldr	r2, [pc, #48]	@ (80011a8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001176:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001178:	e002      	b.n	8001180 <LoopCopyDataInit>

0800117a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800117a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800117c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800117e:	3304      	adds	r3, #4

08001180 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001180:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001182:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001184:	d3f9      	bcc.n	800117a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001186:	4a09      	ldr	r2, [pc, #36]	@ (80011ac <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001188:	4c09      	ldr	r4, [pc, #36]	@ (80011b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800118a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800118c:	e001      	b.n	8001192 <LoopFillZerobss>

0800118e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800118e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001190:	3204      	adds	r2, #4

08001192 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001192:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001194:	d3fb      	bcc.n	800118e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001196:	f001 ff5f 	bl	8003058 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800119a:	f7ff faa1 	bl	80006e0 <main>
  bx lr
 800119e:	4770      	bx	lr
  ldr r0, =_sdata
 80011a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011a4:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 80011a8:	080030f0 	.word	0x080030f0
  ldr r2, =_sbss
 80011ac:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 80011b0:	200000ec 	.word	0x200000ec

080011b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011b4:	e7fe      	b.n	80011b4 <ADC1_2_IRQHandler>
	...

080011b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011bc:	4b08      	ldr	r3, [pc, #32]	@ (80011e0 <HAL_Init+0x28>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a07      	ldr	r2, [pc, #28]	@ (80011e0 <HAL_Init+0x28>)
 80011c2:	f043 0310 	orr.w	r3, r3, #16
 80011c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011c8:	2003      	movs	r0, #3
 80011ca:	f000 f907 	bl	80013dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011ce:	200f      	movs	r0, #15
 80011d0:	f000 f808 	bl	80011e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011d4:	f7ff ff16 	bl	8001004 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011d8:	2300      	movs	r3, #0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	40022000 	.word	0x40022000

080011e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011ec:	4b12      	ldr	r3, [pc, #72]	@ (8001238 <HAL_InitTick+0x54>)
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	4b12      	ldr	r3, [pc, #72]	@ (800123c <HAL_InitTick+0x58>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	4619      	mov	r1, r3
 80011f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80011fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001202:	4618      	mov	r0, r3
 8001204:	f000 f911 	bl	800142a <HAL_SYSTICK_Config>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e00e      	b.n	8001230 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2b0f      	cmp	r3, #15
 8001216:	d80a      	bhi.n	800122e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001218:	2200      	movs	r2, #0
 800121a:	6879      	ldr	r1, [r7, #4]
 800121c:	f04f 30ff 	mov.w	r0, #4294967295
 8001220:	f000 f8e7 	bl	80013f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001224:	4a06      	ldr	r2, [pc, #24]	@ (8001240 <HAL_InitTick+0x5c>)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800122a:	2300      	movs	r3, #0
 800122c:	e000      	b.n	8001230 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
}
 8001230:	4618      	mov	r0, r3
 8001232:	3708      	adds	r7, #8
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	20000048 	.word	0x20000048
 800123c:	20000050 	.word	0x20000050
 8001240:	2000004c 	.word	0x2000004c

08001244 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001248:	4b05      	ldr	r3, [pc, #20]	@ (8001260 <HAL_IncTick+0x1c>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	461a      	mov	r2, r3
 800124e:	4b05      	ldr	r3, [pc, #20]	@ (8001264 <HAL_IncTick+0x20>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4413      	add	r3, r2
 8001254:	4a03      	ldr	r2, [pc, #12]	@ (8001264 <HAL_IncTick+0x20>)
 8001256:	6013      	str	r3, [r2, #0]
}
 8001258:	bf00      	nop
 800125a:	46bd      	mov	sp, r7
 800125c:	bc80      	pop	{r7}
 800125e:	4770      	bx	lr
 8001260:	20000050 	.word	0x20000050
 8001264:	200000e8 	.word	0x200000e8

08001268 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  return uwTick;
 800126c:	4b02      	ldr	r3, [pc, #8]	@ (8001278 <HAL_GetTick+0x10>)
 800126e:	681b      	ldr	r3, [r3, #0]
}
 8001270:	4618      	mov	r0, r3
 8001272:	46bd      	mov	sp, r7
 8001274:	bc80      	pop	{r7}
 8001276:	4770      	bx	lr
 8001278:	200000e8 	.word	0x200000e8

0800127c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800127c:	b480      	push	{r7}
 800127e:	b085      	sub	sp, #20
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	f003 0307 	and.w	r3, r3, #7
 800128a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800128c:	4b0c      	ldr	r3, [pc, #48]	@ (80012c0 <__NVIC_SetPriorityGrouping+0x44>)
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001292:	68ba      	ldr	r2, [r7, #8]
 8001294:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001298:	4013      	ands	r3, r2
 800129a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ae:	4a04      	ldr	r2, [pc, #16]	@ (80012c0 <__NVIC_SetPriorityGrouping+0x44>)
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	60d3      	str	r3, [r2, #12]
}
 80012b4:	bf00      	nop
 80012b6:	3714      	adds	r7, #20
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bc80      	pop	{r7}
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	e000ed00 	.word	0xe000ed00

080012c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012c8:	4b04      	ldr	r3, [pc, #16]	@ (80012dc <__NVIC_GetPriorityGrouping+0x18>)
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	0a1b      	lsrs	r3, r3, #8
 80012ce:	f003 0307 	and.w	r3, r3, #7
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bc80      	pop	{r7}
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	e000ed00 	.word	0xe000ed00

080012e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	6039      	str	r1, [r7, #0]
 80012ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	db0a      	blt.n	800130a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	b2da      	uxtb	r2, r3
 80012f8:	490c      	ldr	r1, [pc, #48]	@ (800132c <__NVIC_SetPriority+0x4c>)
 80012fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fe:	0112      	lsls	r2, r2, #4
 8001300:	b2d2      	uxtb	r2, r2
 8001302:	440b      	add	r3, r1
 8001304:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001308:	e00a      	b.n	8001320 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	b2da      	uxtb	r2, r3
 800130e:	4908      	ldr	r1, [pc, #32]	@ (8001330 <__NVIC_SetPriority+0x50>)
 8001310:	79fb      	ldrb	r3, [r7, #7]
 8001312:	f003 030f 	and.w	r3, r3, #15
 8001316:	3b04      	subs	r3, #4
 8001318:	0112      	lsls	r2, r2, #4
 800131a:	b2d2      	uxtb	r2, r2
 800131c:	440b      	add	r3, r1
 800131e:	761a      	strb	r2, [r3, #24]
}
 8001320:	bf00      	nop
 8001322:	370c      	adds	r7, #12
 8001324:	46bd      	mov	sp, r7
 8001326:	bc80      	pop	{r7}
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	e000e100 	.word	0xe000e100
 8001330:	e000ed00 	.word	0xe000ed00

08001334 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001334:	b480      	push	{r7}
 8001336:	b089      	sub	sp, #36	@ 0x24
 8001338:	af00      	add	r7, sp, #0
 800133a:	60f8      	str	r0, [r7, #12]
 800133c:	60b9      	str	r1, [r7, #8]
 800133e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	f003 0307 	and.w	r3, r3, #7
 8001346:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	f1c3 0307 	rsb	r3, r3, #7
 800134e:	2b04      	cmp	r3, #4
 8001350:	bf28      	it	cs
 8001352:	2304      	movcs	r3, #4
 8001354:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	3304      	adds	r3, #4
 800135a:	2b06      	cmp	r3, #6
 800135c:	d902      	bls.n	8001364 <NVIC_EncodePriority+0x30>
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	3b03      	subs	r3, #3
 8001362:	e000      	b.n	8001366 <NVIC_EncodePriority+0x32>
 8001364:	2300      	movs	r3, #0
 8001366:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001368:	f04f 32ff 	mov.w	r2, #4294967295
 800136c:	69bb      	ldr	r3, [r7, #24]
 800136e:	fa02 f303 	lsl.w	r3, r2, r3
 8001372:	43da      	mvns	r2, r3
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	401a      	ands	r2, r3
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800137c:	f04f 31ff 	mov.w	r1, #4294967295
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	fa01 f303 	lsl.w	r3, r1, r3
 8001386:	43d9      	mvns	r1, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800138c:	4313      	orrs	r3, r2
         );
}
 800138e:	4618      	mov	r0, r3
 8001390:	3724      	adds	r7, #36	@ 0x24
 8001392:	46bd      	mov	sp, r7
 8001394:	bc80      	pop	{r7}
 8001396:	4770      	bx	lr

08001398 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	3b01      	subs	r3, #1
 80013a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013a8:	d301      	bcc.n	80013ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013aa:	2301      	movs	r3, #1
 80013ac:	e00f      	b.n	80013ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013ae:	4a0a      	ldr	r2, [pc, #40]	@ (80013d8 <SysTick_Config+0x40>)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	3b01      	subs	r3, #1
 80013b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013b6:	210f      	movs	r1, #15
 80013b8:	f04f 30ff 	mov.w	r0, #4294967295
 80013bc:	f7ff ff90 	bl	80012e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013c0:	4b05      	ldr	r3, [pc, #20]	@ (80013d8 <SysTick_Config+0x40>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013c6:	4b04      	ldr	r3, [pc, #16]	@ (80013d8 <SysTick_Config+0x40>)
 80013c8:	2207      	movs	r2, #7
 80013ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013cc:	2300      	movs	r3, #0
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	e000e010 	.word	0xe000e010

080013dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f7ff ff49 	bl	800127c <__NVIC_SetPriorityGrouping>
}
 80013ea:	bf00      	nop
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b086      	sub	sp, #24
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	4603      	mov	r3, r0
 80013fa:	60b9      	str	r1, [r7, #8]
 80013fc:	607a      	str	r2, [r7, #4]
 80013fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001400:	2300      	movs	r3, #0
 8001402:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001404:	f7ff ff5e 	bl	80012c4 <__NVIC_GetPriorityGrouping>
 8001408:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800140a:	687a      	ldr	r2, [r7, #4]
 800140c:	68b9      	ldr	r1, [r7, #8]
 800140e:	6978      	ldr	r0, [r7, #20]
 8001410:	f7ff ff90 	bl	8001334 <NVIC_EncodePriority>
 8001414:	4602      	mov	r2, r0
 8001416:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800141a:	4611      	mov	r1, r2
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff ff5f 	bl	80012e0 <__NVIC_SetPriority>
}
 8001422:	bf00      	nop
 8001424:	3718      	adds	r7, #24
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}

0800142a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800142a:	b580      	push	{r7, lr}
 800142c:	b082      	sub	sp, #8
 800142e:	af00      	add	r7, sp, #0
 8001430:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f7ff ffb0 	bl	8001398 <SysTick_Config>
 8001438:	4603      	mov	r3, r0
}
 800143a:	4618      	mov	r0, r3
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
	...

08001444 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001444:	b480      	push	{r7}
 8001446:	b08b      	sub	sp, #44	@ 0x2c
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800144e:	2300      	movs	r3, #0
 8001450:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001452:	2300      	movs	r3, #0
 8001454:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001456:	e179      	b.n	800174c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001458:	2201      	movs	r2, #1
 800145a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800145c:	fa02 f303 	lsl.w	r3, r2, r3
 8001460:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	69fa      	ldr	r2, [r7, #28]
 8001468:	4013      	ands	r3, r2
 800146a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	429a      	cmp	r2, r3
 8001472:	f040 8168 	bne.w	8001746 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	4a96      	ldr	r2, [pc, #600]	@ (80016d4 <HAL_GPIO_Init+0x290>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d05e      	beq.n	800153e <HAL_GPIO_Init+0xfa>
 8001480:	4a94      	ldr	r2, [pc, #592]	@ (80016d4 <HAL_GPIO_Init+0x290>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d875      	bhi.n	8001572 <HAL_GPIO_Init+0x12e>
 8001486:	4a94      	ldr	r2, [pc, #592]	@ (80016d8 <HAL_GPIO_Init+0x294>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d058      	beq.n	800153e <HAL_GPIO_Init+0xfa>
 800148c:	4a92      	ldr	r2, [pc, #584]	@ (80016d8 <HAL_GPIO_Init+0x294>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d86f      	bhi.n	8001572 <HAL_GPIO_Init+0x12e>
 8001492:	4a92      	ldr	r2, [pc, #584]	@ (80016dc <HAL_GPIO_Init+0x298>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d052      	beq.n	800153e <HAL_GPIO_Init+0xfa>
 8001498:	4a90      	ldr	r2, [pc, #576]	@ (80016dc <HAL_GPIO_Init+0x298>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d869      	bhi.n	8001572 <HAL_GPIO_Init+0x12e>
 800149e:	4a90      	ldr	r2, [pc, #576]	@ (80016e0 <HAL_GPIO_Init+0x29c>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d04c      	beq.n	800153e <HAL_GPIO_Init+0xfa>
 80014a4:	4a8e      	ldr	r2, [pc, #568]	@ (80016e0 <HAL_GPIO_Init+0x29c>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d863      	bhi.n	8001572 <HAL_GPIO_Init+0x12e>
 80014aa:	4a8e      	ldr	r2, [pc, #568]	@ (80016e4 <HAL_GPIO_Init+0x2a0>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d046      	beq.n	800153e <HAL_GPIO_Init+0xfa>
 80014b0:	4a8c      	ldr	r2, [pc, #560]	@ (80016e4 <HAL_GPIO_Init+0x2a0>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d85d      	bhi.n	8001572 <HAL_GPIO_Init+0x12e>
 80014b6:	2b12      	cmp	r3, #18
 80014b8:	d82a      	bhi.n	8001510 <HAL_GPIO_Init+0xcc>
 80014ba:	2b12      	cmp	r3, #18
 80014bc:	d859      	bhi.n	8001572 <HAL_GPIO_Init+0x12e>
 80014be:	a201      	add	r2, pc, #4	@ (adr r2, 80014c4 <HAL_GPIO_Init+0x80>)
 80014c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014c4:	0800153f 	.word	0x0800153f
 80014c8:	08001519 	.word	0x08001519
 80014cc:	0800152b 	.word	0x0800152b
 80014d0:	0800156d 	.word	0x0800156d
 80014d4:	08001573 	.word	0x08001573
 80014d8:	08001573 	.word	0x08001573
 80014dc:	08001573 	.word	0x08001573
 80014e0:	08001573 	.word	0x08001573
 80014e4:	08001573 	.word	0x08001573
 80014e8:	08001573 	.word	0x08001573
 80014ec:	08001573 	.word	0x08001573
 80014f0:	08001573 	.word	0x08001573
 80014f4:	08001573 	.word	0x08001573
 80014f8:	08001573 	.word	0x08001573
 80014fc:	08001573 	.word	0x08001573
 8001500:	08001573 	.word	0x08001573
 8001504:	08001573 	.word	0x08001573
 8001508:	08001521 	.word	0x08001521
 800150c:	08001535 	.word	0x08001535
 8001510:	4a75      	ldr	r2, [pc, #468]	@ (80016e8 <HAL_GPIO_Init+0x2a4>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d013      	beq.n	800153e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001516:	e02c      	b.n	8001572 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	623b      	str	r3, [r7, #32]
          break;
 800151e:	e029      	b.n	8001574 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	3304      	adds	r3, #4
 8001526:	623b      	str	r3, [r7, #32]
          break;
 8001528:	e024      	b.n	8001574 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	68db      	ldr	r3, [r3, #12]
 800152e:	3308      	adds	r3, #8
 8001530:	623b      	str	r3, [r7, #32]
          break;
 8001532:	e01f      	b.n	8001574 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	330c      	adds	r3, #12
 800153a:	623b      	str	r3, [r7, #32]
          break;
 800153c:	e01a      	b.n	8001574 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d102      	bne.n	800154c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001546:	2304      	movs	r3, #4
 8001548:	623b      	str	r3, [r7, #32]
          break;
 800154a:	e013      	b.n	8001574 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	2b01      	cmp	r3, #1
 8001552:	d105      	bne.n	8001560 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001554:	2308      	movs	r3, #8
 8001556:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	69fa      	ldr	r2, [r7, #28]
 800155c:	611a      	str	r2, [r3, #16]
          break;
 800155e:	e009      	b.n	8001574 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001560:	2308      	movs	r3, #8
 8001562:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	69fa      	ldr	r2, [r7, #28]
 8001568:	615a      	str	r2, [r3, #20]
          break;
 800156a:	e003      	b.n	8001574 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800156c:	2300      	movs	r3, #0
 800156e:	623b      	str	r3, [r7, #32]
          break;
 8001570:	e000      	b.n	8001574 <HAL_GPIO_Init+0x130>
          break;
 8001572:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001574:	69bb      	ldr	r3, [r7, #24]
 8001576:	2bff      	cmp	r3, #255	@ 0xff
 8001578:	d801      	bhi.n	800157e <HAL_GPIO_Init+0x13a>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	e001      	b.n	8001582 <HAL_GPIO_Init+0x13e>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	3304      	adds	r3, #4
 8001582:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001584:	69bb      	ldr	r3, [r7, #24]
 8001586:	2bff      	cmp	r3, #255	@ 0xff
 8001588:	d802      	bhi.n	8001590 <HAL_GPIO_Init+0x14c>
 800158a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	e002      	b.n	8001596 <HAL_GPIO_Init+0x152>
 8001590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001592:	3b08      	subs	r3, #8
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	210f      	movs	r1, #15
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	fa01 f303 	lsl.w	r3, r1, r3
 80015a4:	43db      	mvns	r3, r3
 80015a6:	401a      	ands	r2, r3
 80015a8:	6a39      	ldr	r1, [r7, #32]
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	fa01 f303 	lsl.w	r3, r1, r3
 80015b0:	431a      	orrs	r2, r3
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	f000 80c1 	beq.w	8001746 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80015c4:	4b49      	ldr	r3, [pc, #292]	@ (80016ec <HAL_GPIO_Init+0x2a8>)
 80015c6:	699b      	ldr	r3, [r3, #24]
 80015c8:	4a48      	ldr	r2, [pc, #288]	@ (80016ec <HAL_GPIO_Init+0x2a8>)
 80015ca:	f043 0301 	orr.w	r3, r3, #1
 80015ce:	6193      	str	r3, [r2, #24]
 80015d0:	4b46      	ldr	r3, [pc, #280]	@ (80016ec <HAL_GPIO_Init+0x2a8>)
 80015d2:	699b      	ldr	r3, [r3, #24]
 80015d4:	f003 0301 	and.w	r3, r3, #1
 80015d8:	60bb      	str	r3, [r7, #8]
 80015da:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80015dc:	4a44      	ldr	r2, [pc, #272]	@ (80016f0 <HAL_GPIO_Init+0x2ac>)
 80015de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015e0:	089b      	lsrs	r3, r3, #2
 80015e2:	3302      	adds	r3, #2
 80015e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015e8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ec:	f003 0303 	and.w	r3, r3, #3
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	220f      	movs	r2, #15
 80015f4:	fa02 f303 	lsl.w	r3, r2, r3
 80015f8:	43db      	mvns	r3, r3
 80015fa:	68fa      	ldr	r2, [r7, #12]
 80015fc:	4013      	ands	r3, r2
 80015fe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	4a3c      	ldr	r2, [pc, #240]	@ (80016f4 <HAL_GPIO_Init+0x2b0>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d01f      	beq.n	8001648 <HAL_GPIO_Init+0x204>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	4a3b      	ldr	r2, [pc, #236]	@ (80016f8 <HAL_GPIO_Init+0x2b4>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d019      	beq.n	8001644 <HAL_GPIO_Init+0x200>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	4a3a      	ldr	r2, [pc, #232]	@ (80016fc <HAL_GPIO_Init+0x2b8>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d013      	beq.n	8001640 <HAL_GPIO_Init+0x1fc>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	4a39      	ldr	r2, [pc, #228]	@ (8001700 <HAL_GPIO_Init+0x2bc>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d00d      	beq.n	800163c <HAL_GPIO_Init+0x1f8>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	4a38      	ldr	r2, [pc, #224]	@ (8001704 <HAL_GPIO_Init+0x2c0>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d007      	beq.n	8001638 <HAL_GPIO_Init+0x1f4>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	4a37      	ldr	r2, [pc, #220]	@ (8001708 <HAL_GPIO_Init+0x2c4>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d101      	bne.n	8001634 <HAL_GPIO_Init+0x1f0>
 8001630:	2305      	movs	r3, #5
 8001632:	e00a      	b.n	800164a <HAL_GPIO_Init+0x206>
 8001634:	2306      	movs	r3, #6
 8001636:	e008      	b.n	800164a <HAL_GPIO_Init+0x206>
 8001638:	2304      	movs	r3, #4
 800163a:	e006      	b.n	800164a <HAL_GPIO_Init+0x206>
 800163c:	2303      	movs	r3, #3
 800163e:	e004      	b.n	800164a <HAL_GPIO_Init+0x206>
 8001640:	2302      	movs	r3, #2
 8001642:	e002      	b.n	800164a <HAL_GPIO_Init+0x206>
 8001644:	2301      	movs	r3, #1
 8001646:	e000      	b.n	800164a <HAL_GPIO_Init+0x206>
 8001648:	2300      	movs	r3, #0
 800164a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800164c:	f002 0203 	and.w	r2, r2, #3
 8001650:	0092      	lsls	r2, r2, #2
 8001652:	4093      	lsls	r3, r2
 8001654:	68fa      	ldr	r2, [r7, #12]
 8001656:	4313      	orrs	r3, r2
 8001658:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800165a:	4925      	ldr	r1, [pc, #148]	@ (80016f0 <HAL_GPIO_Init+0x2ac>)
 800165c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800165e:	089b      	lsrs	r3, r3, #2
 8001660:	3302      	adds	r3, #2
 8001662:	68fa      	ldr	r2, [r7, #12]
 8001664:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001670:	2b00      	cmp	r3, #0
 8001672:	d006      	beq.n	8001682 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001674:	4b25      	ldr	r3, [pc, #148]	@ (800170c <HAL_GPIO_Init+0x2c8>)
 8001676:	689a      	ldr	r2, [r3, #8]
 8001678:	4924      	ldr	r1, [pc, #144]	@ (800170c <HAL_GPIO_Init+0x2c8>)
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	4313      	orrs	r3, r2
 800167e:	608b      	str	r3, [r1, #8]
 8001680:	e006      	b.n	8001690 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001682:	4b22      	ldr	r3, [pc, #136]	@ (800170c <HAL_GPIO_Init+0x2c8>)
 8001684:	689a      	ldr	r2, [r3, #8]
 8001686:	69bb      	ldr	r3, [r7, #24]
 8001688:	43db      	mvns	r3, r3
 800168a:	4920      	ldr	r1, [pc, #128]	@ (800170c <HAL_GPIO_Init+0x2c8>)
 800168c:	4013      	ands	r3, r2
 800168e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d006      	beq.n	80016aa <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800169c:	4b1b      	ldr	r3, [pc, #108]	@ (800170c <HAL_GPIO_Init+0x2c8>)
 800169e:	68da      	ldr	r2, [r3, #12]
 80016a0:	491a      	ldr	r1, [pc, #104]	@ (800170c <HAL_GPIO_Init+0x2c8>)
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	60cb      	str	r3, [r1, #12]
 80016a8:	e006      	b.n	80016b8 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80016aa:	4b18      	ldr	r3, [pc, #96]	@ (800170c <HAL_GPIO_Init+0x2c8>)
 80016ac:	68da      	ldr	r2, [r3, #12]
 80016ae:	69bb      	ldr	r3, [r7, #24]
 80016b0:	43db      	mvns	r3, r3
 80016b2:	4916      	ldr	r1, [pc, #88]	@ (800170c <HAL_GPIO_Init+0x2c8>)
 80016b4:	4013      	ands	r3, r2
 80016b6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d025      	beq.n	8001710 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80016c4:	4b11      	ldr	r3, [pc, #68]	@ (800170c <HAL_GPIO_Init+0x2c8>)
 80016c6:	685a      	ldr	r2, [r3, #4]
 80016c8:	4910      	ldr	r1, [pc, #64]	@ (800170c <HAL_GPIO_Init+0x2c8>)
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	4313      	orrs	r3, r2
 80016ce:	604b      	str	r3, [r1, #4]
 80016d0:	e025      	b.n	800171e <HAL_GPIO_Init+0x2da>
 80016d2:	bf00      	nop
 80016d4:	10320000 	.word	0x10320000
 80016d8:	10310000 	.word	0x10310000
 80016dc:	10220000 	.word	0x10220000
 80016e0:	10210000 	.word	0x10210000
 80016e4:	10120000 	.word	0x10120000
 80016e8:	10110000 	.word	0x10110000
 80016ec:	40021000 	.word	0x40021000
 80016f0:	40010000 	.word	0x40010000
 80016f4:	40010800 	.word	0x40010800
 80016f8:	40010c00 	.word	0x40010c00
 80016fc:	40011000 	.word	0x40011000
 8001700:	40011400 	.word	0x40011400
 8001704:	40011800 	.word	0x40011800
 8001708:	40011c00 	.word	0x40011c00
 800170c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001710:	4b15      	ldr	r3, [pc, #84]	@ (8001768 <HAL_GPIO_Init+0x324>)
 8001712:	685a      	ldr	r2, [r3, #4]
 8001714:	69bb      	ldr	r3, [r7, #24]
 8001716:	43db      	mvns	r3, r3
 8001718:	4913      	ldr	r1, [pc, #76]	@ (8001768 <HAL_GPIO_Init+0x324>)
 800171a:	4013      	ands	r3, r2
 800171c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d006      	beq.n	8001738 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800172a:	4b0f      	ldr	r3, [pc, #60]	@ (8001768 <HAL_GPIO_Init+0x324>)
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	490e      	ldr	r1, [pc, #56]	@ (8001768 <HAL_GPIO_Init+0x324>)
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	4313      	orrs	r3, r2
 8001734:	600b      	str	r3, [r1, #0]
 8001736:	e006      	b.n	8001746 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001738:	4b0b      	ldr	r3, [pc, #44]	@ (8001768 <HAL_GPIO_Init+0x324>)
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	69bb      	ldr	r3, [r7, #24]
 800173e:	43db      	mvns	r3, r3
 8001740:	4909      	ldr	r1, [pc, #36]	@ (8001768 <HAL_GPIO_Init+0x324>)
 8001742:	4013      	ands	r3, r2
 8001744:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001748:	3301      	adds	r3, #1
 800174a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001752:	fa22 f303 	lsr.w	r3, r2, r3
 8001756:	2b00      	cmp	r3, #0
 8001758:	f47f ae7e 	bne.w	8001458 <HAL_GPIO_Init+0x14>
  }
}
 800175c:	bf00      	nop
 800175e:	bf00      	nop
 8001760:	372c      	adds	r7, #44	@ 0x2c
 8001762:	46bd      	mov	sp, r7
 8001764:	bc80      	pop	{r7}
 8001766:	4770      	bx	lr
 8001768:	40010400 	.word	0x40010400

0800176c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	460b      	mov	r3, r1
 8001776:	807b      	strh	r3, [r7, #2]
 8001778:	4613      	mov	r3, r2
 800177a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800177c:	787b      	ldrb	r3, [r7, #1]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d003      	beq.n	800178a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001782:	887a      	ldrh	r2, [r7, #2]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001788:	e003      	b.n	8001792 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800178a:	887b      	ldrh	r3, [r7, #2]
 800178c:	041a      	lsls	r2, r3, #16
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	611a      	str	r2, [r3, #16]
}
 8001792:	bf00      	nop
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	bc80      	pop	{r7}
 800179a:	4770      	bx	lr

0800179c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d101      	bne.n	80017ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e12b      	b.n	8001a06 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d106      	bne.n	80017c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2200      	movs	r2, #0
 80017be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f7ff fc50 	bl	8001068 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2224      	movs	r2, #36	@ 0x24
 80017cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f022 0201 	bic.w	r2, r2, #1
 80017de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80017ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80017fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001800:	f001 fbf0 	bl	8002fe4 <HAL_RCC_GetPCLK1Freq>
 8001804:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	4a81      	ldr	r2, [pc, #516]	@ (8001a10 <HAL_I2C_Init+0x274>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d807      	bhi.n	8001820 <HAL_I2C_Init+0x84>
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	4a80      	ldr	r2, [pc, #512]	@ (8001a14 <HAL_I2C_Init+0x278>)
 8001814:	4293      	cmp	r3, r2
 8001816:	bf94      	ite	ls
 8001818:	2301      	movls	r3, #1
 800181a:	2300      	movhi	r3, #0
 800181c:	b2db      	uxtb	r3, r3
 800181e:	e006      	b.n	800182e <HAL_I2C_Init+0x92>
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	4a7d      	ldr	r2, [pc, #500]	@ (8001a18 <HAL_I2C_Init+0x27c>)
 8001824:	4293      	cmp	r3, r2
 8001826:	bf94      	ite	ls
 8001828:	2301      	movls	r3, #1
 800182a:	2300      	movhi	r3, #0
 800182c:	b2db      	uxtb	r3, r3
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e0e7      	b.n	8001a06 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	4a78      	ldr	r2, [pc, #480]	@ (8001a1c <HAL_I2C_Init+0x280>)
 800183a:	fba2 2303 	umull	r2, r3, r2, r3
 800183e:	0c9b      	lsrs	r3, r3, #18
 8001840:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	68ba      	ldr	r2, [r7, #8]
 8001852:	430a      	orrs	r2, r1
 8001854:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	6a1b      	ldr	r3, [r3, #32]
 800185c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	4a6a      	ldr	r2, [pc, #424]	@ (8001a10 <HAL_I2C_Init+0x274>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d802      	bhi.n	8001870 <HAL_I2C_Init+0xd4>
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	3301      	adds	r3, #1
 800186e:	e009      	b.n	8001884 <HAL_I2C_Init+0xe8>
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001876:	fb02 f303 	mul.w	r3, r2, r3
 800187a:	4a69      	ldr	r2, [pc, #420]	@ (8001a20 <HAL_I2C_Init+0x284>)
 800187c:	fba2 2303 	umull	r2, r3, r2, r3
 8001880:	099b      	lsrs	r3, r3, #6
 8001882:	3301      	adds	r3, #1
 8001884:	687a      	ldr	r2, [r7, #4]
 8001886:	6812      	ldr	r2, [r2, #0]
 8001888:	430b      	orrs	r3, r1
 800188a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	69db      	ldr	r3, [r3, #28]
 8001892:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001896:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	495c      	ldr	r1, [pc, #368]	@ (8001a10 <HAL_I2C_Init+0x274>)
 80018a0:	428b      	cmp	r3, r1
 80018a2:	d819      	bhi.n	80018d8 <HAL_I2C_Init+0x13c>
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	1e59      	subs	r1, r3, #1
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80018b2:	1c59      	adds	r1, r3, #1
 80018b4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80018b8:	400b      	ands	r3, r1
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d00a      	beq.n	80018d4 <HAL_I2C_Init+0x138>
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	1e59      	subs	r1, r3, #1
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	005b      	lsls	r3, r3, #1
 80018c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80018cc:	3301      	adds	r3, #1
 80018ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018d2:	e051      	b.n	8001978 <HAL_I2C_Init+0x1dc>
 80018d4:	2304      	movs	r3, #4
 80018d6:	e04f      	b.n	8001978 <HAL_I2C_Init+0x1dc>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d111      	bne.n	8001904 <HAL_I2C_Init+0x168>
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	1e58      	subs	r0, r3, #1
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6859      	ldr	r1, [r3, #4]
 80018e8:	460b      	mov	r3, r1
 80018ea:	005b      	lsls	r3, r3, #1
 80018ec:	440b      	add	r3, r1
 80018ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80018f2:	3301      	adds	r3, #1
 80018f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	bf0c      	ite	eq
 80018fc:	2301      	moveq	r3, #1
 80018fe:	2300      	movne	r3, #0
 8001900:	b2db      	uxtb	r3, r3
 8001902:	e012      	b.n	800192a <HAL_I2C_Init+0x18e>
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	1e58      	subs	r0, r3, #1
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6859      	ldr	r1, [r3, #4]
 800190c:	460b      	mov	r3, r1
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	440b      	add	r3, r1
 8001912:	0099      	lsls	r1, r3, #2
 8001914:	440b      	add	r3, r1
 8001916:	fbb0 f3f3 	udiv	r3, r0, r3
 800191a:	3301      	adds	r3, #1
 800191c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001920:	2b00      	cmp	r3, #0
 8001922:	bf0c      	ite	eq
 8001924:	2301      	moveq	r3, #1
 8001926:	2300      	movne	r3, #0
 8001928:	b2db      	uxtb	r3, r3
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <HAL_I2C_Init+0x196>
 800192e:	2301      	movs	r3, #1
 8001930:	e022      	b.n	8001978 <HAL_I2C_Init+0x1dc>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d10e      	bne.n	8001958 <HAL_I2C_Init+0x1bc>
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	1e58      	subs	r0, r3, #1
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6859      	ldr	r1, [r3, #4]
 8001942:	460b      	mov	r3, r1
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	440b      	add	r3, r1
 8001948:	fbb0 f3f3 	udiv	r3, r0, r3
 800194c:	3301      	adds	r3, #1
 800194e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001952:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001956:	e00f      	b.n	8001978 <HAL_I2C_Init+0x1dc>
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	1e58      	subs	r0, r3, #1
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6859      	ldr	r1, [r3, #4]
 8001960:	460b      	mov	r3, r1
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	440b      	add	r3, r1
 8001966:	0099      	lsls	r1, r3, #2
 8001968:	440b      	add	r3, r1
 800196a:	fbb0 f3f3 	udiv	r3, r0, r3
 800196e:	3301      	adds	r3, #1
 8001970:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001974:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001978:	6879      	ldr	r1, [r7, #4]
 800197a:	6809      	ldr	r1, [r1, #0]
 800197c:	4313      	orrs	r3, r2
 800197e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	69da      	ldr	r2, [r3, #28]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6a1b      	ldr	r3, [r3, #32]
 8001992:	431a      	orrs	r2, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	430a      	orrs	r2, r1
 800199a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80019a6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	6911      	ldr	r1, [r2, #16]
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	68d2      	ldr	r2, [r2, #12]
 80019b2:	4311      	orrs	r1, r2
 80019b4:	687a      	ldr	r2, [r7, #4]
 80019b6:	6812      	ldr	r2, [r2, #0]
 80019b8:	430b      	orrs	r3, r1
 80019ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	68db      	ldr	r3, [r3, #12]
 80019c2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	695a      	ldr	r2, [r3, #20]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	699b      	ldr	r3, [r3, #24]
 80019ce:	431a      	orrs	r2, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	430a      	orrs	r2, r1
 80019d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f042 0201 	orr.w	r2, r2, #1
 80019e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2200      	movs	r2, #0
 80019ec:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2220      	movs	r2, #32
 80019f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2200      	movs	r2, #0
 80019fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2200      	movs	r2, #0
 8001a00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3710      	adds	r7, #16
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	000186a0 	.word	0x000186a0
 8001a14:	001e847f 	.word	0x001e847f
 8001a18:	003d08ff 	.word	0x003d08ff
 8001a1c:	431bde83 	.word	0x431bde83
 8001a20:	10624dd3 	.word	0x10624dd3

08001a24 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b088      	sub	sp, #32
 8001a28:	af02      	add	r7, sp, #8
 8001a2a:	60f8      	str	r0, [r7, #12]
 8001a2c:	4608      	mov	r0, r1
 8001a2e:	4611      	mov	r1, r2
 8001a30:	461a      	mov	r2, r3
 8001a32:	4603      	mov	r3, r0
 8001a34:	817b      	strh	r3, [r7, #10]
 8001a36:	460b      	mov	r3, r1
 8001a38:	813b      	strh	r3, [r7, #8]
 8001a3a:	4613      	mov	r3, r2
 8001a3c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001a3e:	f7ff fc13 	bl	8001268 <HAL_GetTick>
 8001a42:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	2b20      	cmp	r3, #32
 8001a4e:	f040 80d9 	bne.w	8001c04 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	9300      	str	r3, [sp, #0]
 8001a56:	2319      	movs	r3, #25
 8001a58:	2201      	movs	r2, #1
 8001a5a:	496d      	ldr	r1, [pc, #436]	@ (8001c10 <HAL_I2C_Mem_Write+0x1ec>)
 8001a5c:	68f8      	ldr	r0, [r7, #12]
 8001a5e:	f000 fcc1 	bl	80023e4 <I2C_WaitOnFlagUntilTimeout>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001a68:	2302      	movs	r3, #2
 8001a6a:	e0cc      	b.n	8001c06 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d101      	bne.n	8001a7a <HAL_I2C_Mem_Write+0x56>
 8001a76:	2302      	movs	r3, #2
 8001a78:	e0c5      	b.n	8001c06 <HAL_I2C_Mem_Write+0x1e2>
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0301 	and.w	r3, r3, #1
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d007      	beq.n	8001aa0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f042 0201 	orr.w	r2, r2, #1
 8001a9e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001aae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	2221      	movs	r2, #33	@ 0x21
 8001ab4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	2240      	movs	r2, #64	@ 0x40
 8001abc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	6a3a      	ldr	r2, [r7, #32]
 8001aca:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001ad0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ad6:	b29a      	uxth	r2, r3
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	4a4d      	ldr	r2, [pc, #308]	@ (8001c14 <HAL_I2C_Mem_Write+0x1f0>)
 8001ae0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001ae2:	88f8      	ldrh	r0, [r7, #6]
 8001ae4:	893a      	ldrh	r2, [r7, #8]
 8001ae6:	8979      	ldrh	r1, [r7, #10]
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	9301      	str	r3, [sp, #4]
 8001aec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001aee:	9300      	str	r3, [sp, #0]
 8001af0:	4603      	mov	r3, r0
 8001af2:	68f8      	ldr	r0, [r7, #12]
 8001af4:	f000 faf8 	bl	80020e8 <I2C_RequestMemoryWrite>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d052      	beq.n	8001ba4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e081      	b.n	8001c06 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b02:	697a      	ldr	r2, [r7, #20]
 8001b04:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001b06:	68f8      	ldr	r0, [r7, #12]
 8001b08:	f000 fd86 	bl	8002618 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d00d      	beq.n	8001b2e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b16:	2b04      	cmp	r3, #4
 8001b18:	d107      	bne.n	8001b2a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b28:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e06b      	b.n	8001c06 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b32:	781a      	ldrb	r2, [r3, #0]
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b3e:	1c5a      	adds	r2, r3, #1
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b48:	3b01      	subs	r3, #1
 8001b4a:	b29a      	uxth	r2, r3
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b54:	b29b      	uxth	r3, r3
 8001b56:	3b01      	subs	r3, #1
 8001b58:	b29a      	uxth	r2, r3
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	695b      	ldr	r3, [r3, #20]
 8001b64:	f003 0304 	and.w	r3, r3, #4
 8001b68:	2b04      	cmp	r3, #4
 8001b6a:	d11b      	bne.n	8001ba4 <HAL_I2C_Mem_Write+0x180>
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d017      	beq.n	8001ba4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b78:	781a      	ldrb	r2, [r3, #0]
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b84:	1c5a      	adds	r2, r3, #1
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b8e:	3b01      	subs	r3, #1
 8001b90:	b29a      	uxth	r2, r3
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b9a:	b29b      	uxth	r3, r3
 8001b9c:	3b01      	subs	r3, #1
 8001b9e:	b29a      	uxth	r2, r3
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d1aa      	bne.n	8001b02 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bac:	697a      	ldr	r2, [r7, #20]
 8001bae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001bb0:	68f8      	ldr	r0, [r7, #12]
 8001bb2:	f000 fd79 	bl	80026a8 <I2C_WaitOnBTFFlagUntilTimeout>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d00d      	beq.n	8001bd8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc0:	2b04      	cmp	r3, #4
 8001bc2:	d107      	bne.n	8001bd4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001bd2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e016      	b.n	8001c06 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001be6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2220      	movs	r2, #32
 8001bec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001c00:	2300      	movs	r3, #0
 8001c02:	e000      	b.n	8001c06 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001c04:	2302      	movs	r3, #2
  }
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3718      	adds	r7, #24
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	00100002 	.word	0x00100002
 8001c14:	ffff0000 	.word	0xffff0000

08001c18 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b08c      	sub	sp, #48	@ 0x30
 8001c1c:	af02      	add	r7, sp, #8
 8001c1e:	60f8      	str	r0, [r7, #12]
 8001c20:	4608      	mov	r0, r1
 8001c22:	4611      	mov	r1, r2
 8001c24:	461a      	mov	r2, r3
 8001c26:	4603      	mov	r3, r0
 8001c28:	817b      	strh	r3, [r7, #10]
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	813b      	strh	r3, [r7, #8]
 8001c2e:	4613      	mov	r3, r2
 8001c30:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8001c32:	2300      	movs	r3, #0
 8001c34:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001c36:	f7ff fb17 	bl	8001268 <HAL_GetTick>
 8001c3a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	2b20      	cmp	r3, #32
 8001c46:	f040 8244 	bne.w	80020d2 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c4c:	9300      	str	r3, [sp, #0]
 8001c4e:	2319      	movs	r3, #25
 8001c50:	2201      	movs	r2, #1
 8001c52:	4982      	ldr	r1, [pc, #520]	@ (8001e5c <HAL_I2C_Mem_Read+0x244>)
 8001c54:	68f8      	ldr	r0, [r7, #12]
 8001c56:	f000 fbc5 	bl	80023e4 <I2C_WaitOnFlagUntilTimeout>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8001c60:	2302      	movs	r3, #2
 8001c62:	e237      	b.n	80020d4 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d101      	bne.n	8001c72 <HAL_I2C_Mem_Read+0x5a>
 8001c6e:	2302      	movs	r3, #2
 8001c70:	e230      	b.n	80020d4 <HAL_I2C_Mem_Read+0x4bc>
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	2201      	movs	r2, #1
 8001c76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0301 	and.w	r3, r3, #1
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d007      	beq.n	8001c98 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f042 0201 	orr.w	r2, r2, #1
 8001c96:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ca6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2222      	movs	r2, #34	@ 0x22
 8001cac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	2240      	movs	r2, #64	@ 0x40
 8001cb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001cc2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001cc8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cce:	b29a      	uxth	r2, r3
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	4a62      	ldr	r2, [pc, #392]	@ (8001e60 <HAL_I2C_Mem_Read+0x248>)
 8001cd8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001cda:	88f8      	ldrh	r0, [r7, #6]
 8001cdc:	893a      	ldrh	r2, [r7, #8]
 8001cde:	8979      	ldrh	r1, [r7, #10]
 8001ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce2:	9301      	str	r3, [sp, #4]
 8001ce4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ce6:	9300      	str	r3, [sp, #0]
 8001ce8:	4603      	mov	r3, r0
 8001cea:	68f8      	ldr	r0, [r7, #12]
 8001cec:	f000 fa92 	bl	8002214 <I2C_RequestMemoryRead>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e1ec      	b.n	80020d4 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d113      	bne.n	8001d2a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d02:	2300      	movs	r3, #0
 8001d04:	61fb      	str	r3, [r7, #28]
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	695b      	ldr	r3, [r3, #20]
 8001d0c:	61fb      	str	r3, [r7, #28]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	699b      	ldr	r3, [r3, #24]
 8001d14:	61fb      	str	r3, [r7, #28]
 8001d16:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d26:	601a      	str	r2, [r3, #0]
 8001d28:	e1c0      	b.n	80020ac <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d11e      	bne.n	8001d70 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d40:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001d42:	b672      	cpsid	i
}
 8001d44:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d46:	2300      	movs	r3, #0
 8001d48:	61bb      	str	r3, [r7, #24]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	695b      	ldr	r3, [r3, #20]
 8001d50:	61bb      	str	r3, [r7, #24]
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	699b      	ldr	r3, [r3, #24]
 8001d58:	61bb      	str	r3, [r7, #24]
 8001d5a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d6a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001d6c:	b662      	cpsie	i
}
 8001d6e:	e035      	b.n	8001ddc <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d11e      	bne.n	8001db6 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001d86:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001d88:	b672      	cpsid	i
}
 8001d8a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	617b      	str	r3, [r7, #20]
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	695b      	ldr	r3, [r3, #20]
 8001d96:	617b      	str	r3, [r7, #20]
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	699b      	ldr	r3, [r3, #24]
 8001d9e:	617b      	str	r3, [r7, #20]
 8001da0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001db0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001db2:	b662      	cpsie	i
}
 8001db4:	e012      	b.n	8001ddc <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001dc4:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	613b      	str	r3, [r7, #16]
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	695b      	ldr	r3, [r3, #20]
 8001dd0:	613b      	str	r3, [r7, #16]
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	699b      	ldr	r3, [r3, #24]
 8001dd8:	613b      	str	r3, [r7, #16]
 8001dda:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001ddc:	e166      	b.n	80020ac <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001de2:	2b03      	cmp	r3, #3
 8001de4:	f200 811f 	bhi.w	8002026 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d123      	bne.n	8001e38 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001df0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001df2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001df4:	68f8      	ldr	r0, [r7, #12]
 8001df6:	f000 fc9f 	bl	8002738 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e167      	b.n	80020d4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	691a      	ldr	r2, [r3, #16]
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e0e:	b2d2      	uxtb	r2, r2
 8001e10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e16:	1c5a      	adds	r2, r3, #1
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e20:	3b01      	subs	r3, #1
 8001e22:	b29a      	uxth	r2, r3
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	3b01      	subs	r3, #1
 8001e30:	b29a      	uxth	r2, r3
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001e36:	e139      	b.n	80020ac <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d152      	bne.n	8001ee6 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e42:	9300      	str	r3, [sp, #0]
 8001e44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e46:	2200      	movs	r2, #0
 8001e48:	4906      	ldr	r1, [pc, #24]	@ (8001e64 <HAL_I2C_Mem_Read+0x24c>)
 8001e4a:	68f8      	ldr	r0, [r7, #12]
 8001e4c:	f000 faca 	bl	80023e4 <I2C_WaitOnFlagUntilTimeout>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d008      	beq.n	8001e68 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e13c      	b.n	80020d4 <HAL_I2C_Mem_Read+0x4bc>
 8001e5a:	bf00      	nop
 8001e5c:	00100002 	.word	0x00100002
 8001e60:	ffff0000 	.word	0xffff0000
 8001e64:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001e68:	b672      	cpsid	i
}
 8001e6a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e7a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	691a      	ldr	r2, [r3, #16]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e86:	b2d2      	uxtb	r2, r2
 8001e88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e8e:	1c5a      	adds	r2, r3, #1
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e98:	3b01      	subs	r3, #1
 8001e9a:	b29a      	uxth	r2, r3
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	b29a      	uxth	r2, r3
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001eae:	b662      	cpsie	i
}
 8001eb0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	691a      	ldr	r2, [r3, #16]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ebc:	b2d2      	uxtb	r2, r2
 8001ebe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ec4:	1c5a      	adds	r2, r3, #1
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ece:	3b01      	subs	r3, #1
 8001ed0:	b29a      	uxth	r2, r3
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001eda:	b29b      	uxth	r3, r3
 8001edc:	3b01      	subs	r3, #1
 8001ede:	b29a      	uxth	r2, r3
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001ee4:	e0e2      	b.n	80020ac <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ee8:	9300      	str	r3, [sp, #0]
 8001eea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001eec:	2200      	movs	r2, #0
 8001eee:	497b      	ldr	r1, [pc, #492]	@ (80020dc <HAL_I2C_Mem_Read+0x4c4>)
 8001ef0:	68f8      	ldr	r0, [r7, #12]
 8001ef2:	f000 fa77 	bl	80023e4 <I2C_WaitOnFlagUntilTimeout>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e0e9      	b.n	80020d4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f0e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001f10:	b672      	cpsid	i
}
 8001f12:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	691a      	ldr	r2, [r3, #16]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f1e:	b2d2      	uxtb	r2, r2
 8001f20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f26:	1c5a      	adds	r2, r3, #1
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f30:	3b01      	subs	r3, #1
 8001f32:	b29a      	uxth	r2, r3
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f3c:	b29b      	uxth	r3, r3
 8001f3e:	3b01      	subs	r3, #1
 8001f40:	b29a      	uxth	r2, r3
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001f46:	4b66      	ldr	r3, [pc, #408]	@ (80020e0 <HAL_I2C_Mem_Read+0x4c8>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	08db      	lsrs	r3, r3, #3
 8001f4c:	4a65      	ldr	r2, [pc, #404]	@ (80020e4 <HAL_I2C_Mem_Read+0x4cc>)
 8001f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f52:	0a1a      	lsrs	r2, r3, #8
 8001f54:	4613      	mov	r3, r2
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	4413      	add	r3, r2
 8001f5a:	00da      	lsls	r2, r3, #3
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001f60:	6a3b      	ldr	r3, [r7, #32]
 8001f62:	3b01      	subs	r3, #1
 8001f64:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8001f66:	6a3b      	ldr	r3, [r7, #32]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d118      	bne.n	8001f9e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2220      	movs	r2, #32
 8001f76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f86:	f043 0220 	orr.w	r2, r3, #32
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001f8e:	b662      	cpsie	i
}
 8001f90:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2200      	movs	r2, #0
 8001f96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e09a      	b.n	80020d4 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	695b      	ldr	r3, [r3, #20]
 8001fa4:	f003 0304 	and.w	r3, r3, #4
 8001fa8:	2b04      	cmp	r3, #4
 8001faa:	d1d9      	bne.n	8001f60 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001fba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	691a      	ldr	r2, [r3, #16]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fc6:	b2d2      	uxtb	r2, r2
 8001fc8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fce:	1c5a      	adds	r2, r3, #1
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fd8:	3b01      	subs	r3, #1
 8001fda:	b29a      	uxth	r2, r3
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	3b01      	subs	r3, #1
 8001fe8:	b29a      	uxth	r2, r3
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001fee:	b662      	cpsie	i
}
 8001ff0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	691a      	ldr	r2, [r3, #16]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ffc:	b2d2      	uxtb	r2, r2
 8001ffe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002004:	1c5a      	adds	r2, r3, #1
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800200e:	3b01      	subs	r3, #1
 8002010:	b29a      	uxth	r2, r3
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800201a:	b29b      	uxth	r3, r3
 800201c:	3b01      	subs	r3, #1
 800201e:	b29a      	uxth	r2, r3
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002024:	e042      	b.n	80020ac <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002026:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002028:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800202a:	68f8      	ldr	r0, [r7, #12]
 800202c:	f000 fb84 	bl	8002738 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e04c      	b.n	80020d4 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	691a      	ldr	r2, [r3, #16]
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002044:	b2d2      	uxtb	r2, r2
 8002046:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800204c:	1c5a      	adds	r2, r3, #1
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002056:	3b01      	subs	r3, #1
 8002058:	b29a      	uxth	r2, r3
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002062:	b29b      	uxth	r3, r3
 8002064:	3b01      	subs	r3, #1
 8002066:	b29a      	uxth	r2, r3
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	695b      	ldr	r3, [r3, #20]
 8002072:	f003 0304 	and.w	r3, r3, #4
 8002076:	2b04      	cmp	r3, #4
 8002078:	d118      	bne.n	80020ac <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	691a      	ldr	r2, [r3, #16]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002084:	b2d2      	uxtb	r2, r2
 8002086:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800208c:	1c5a      	adds	r2, r3, #1
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002096:	3b01      	subs	r3, #1
 8002098:	b29a      	uxth	r2, r3
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020a2:	b29b      	uxth	r3, r3
 80020a4:	3b01      	subs	r3, #1
 80020a6:	b29a      	uxth	r2, r3
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	f47f ae94 	bne.w	8001dde <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2220      	movs	r2, #32
 80020ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2200      	movs	r2, #0
 80020c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2200      	movs	r2, #0
 80020ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80020ce:	2300      	movs	r3, #0
 80020d0:	e000      	b.n	80020d4 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80020d2:	2302      	movs	r3, #2
  }
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3728      	adds	r7, #40	@ 0x28
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	00010004 	.word	0x00010004
 80020e0:	20000048 	.word	0x20000048
 80020e4:	14f8b589 	.word	0x14f8b589

080020e8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b088      	sub	sp, #32
 80020ec:	af02      	add	r7, sp, #8
 80020ee:	60f8      	str	r0, [r7, #12]
 80020f0:	4608      	mov	r0, r1
 80020f2:	4611      	mov	r1, r2
 80020f4:	461a      	mov	r2, r3
 80020f6:	4603      	mov	r3, r0
 80020f8:	817b      	strh	r3, [r7, #10]
 80020fa:	460b      	mov	r3, r1
 80020fc:	813b      	strh	r3, [r7, #8]
 80020fe:	4613      	mov	r3, r2
 8002100:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002110:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002114:	9300      	str	r3, [sp, #0]
 8002116:	6a3b      	ldr	r3, [r7, #32]
 8002118:	2200      	movs	r2, #0
 800211a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800211e:	68f8      	ldr	r0, [r7, #12]
 8002120:	f000 f960 	bl	80023e4 <I2C_WaitOnFlagUntilTimeout>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d00d      	beq.n	8002146 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002134:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002138:	d103      	bne.n	8002142 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002140:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e05f      	b.n	8002206 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002146:	897b      	ldrh	r3, [r7, #10]
 8002148:	b2db      	uxtb	r3, r3
 800214a:	461a      	mov	r2, r3
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002154:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002158:	6a3a      	ldr	r2, [r7, #32]
 800215a:	492d      	ldr	r1, [pc, #180]	@ (8002210 <I2C_RequestMemoryWrite+0x128>)
 800215c:	68f8      	ldr	r0, [r7, #12]
 800215e:	f000 f9bb 	bl	80024d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d001      	beq.n	800216c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e04c      	b.n	8002206 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800216c:	2300      	movs	r3, #0
 800216e:	617b      	str	r3, [r7, #20]
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	695b      	ldr	r3, [r3, #20]
 8002176:	617b      	str	r3, [r7, #20]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	699b      	ldr	r3, [r3, #24]
 800217e:	617b      	str	r3, [r7, #20]
 8002180:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002182:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002184:	6a39      	ldr	r1, [r7, #32]
 8002186:	68f8      	ldr	r0, [r7, #12]
 8002188:	f000 fa46 	bl	8002618 <I2C_WaitOnTXEFlagUntilTimeout>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d00d      	beq.n	80021ae <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002196:	2b04      	cmp	r3, #4
 8002198:	d107      	bne.n	80021aa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021a8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e02b      	b.n	8002206 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80021ae:	88fb      	ldrh	r3, [r7, #6]
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d105      	bne.n	80021c0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80021b4:	893b      	ldrh	r3, [r7, #8]
 80021b6:	b2da      	uxtb	r2, r3
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	611a      	str	r2, [r3, #16]
 80021be:	e021      	b.n	8002204 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80021c0:	893b      	ldrh	r3, [r7, #8]
 80021c2:	0a1b      	lsrs	r3, r3, #8
 80021c4:	b29b      	uxth	r3, r3
 80021c6:	b2da      	uxtb	r2, r3
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021d0:	6a39      	ldr	r1, [r7, #32]
 80021d2:	68f8      	ldr	r0, [r7, #12]
 80021d4:	f000 fa20 	bl	8002618 <I2C_WaitOnTXEFlagUntilTimeout>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d00d      	beq.n	80021fa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e2:	2b04      	cmp	r3, #4
 80021e4:	d107      	bne.n	80021f6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021f4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e005      	b.n	8002206 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80021fa:	893b      	ldrh	r3, [r7, #8]
 80021fc:	b2da      	uxtb	r2, r3
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002204:	2300      	movs	r3, #0
}
 8002206:	4618      	mov	r0, r3
 8002208:	3718      	adds	r7, #24
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	00010002 	.word	0x00010002

08002214 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b088      	sub	sp, #32
 8002218:	af02      	add	r7, sp, #8
 800221a:	60f8      	str	r0, [r7, #12]
 800221c:	4608      	mov	r0, r1
 800221e:	4611      	mov	r1, r2
 8002220:	461a      	mov	r2, r3
 8002222:	4603      	mov	r3, r0
 8002224:	817b      	strh	r3, [r7, #10]
 8002226:	460b      	mov	r3, r1
 8002228:	813b      	strh	r3, [r7, #8]
 800222a:	4613      	mov	r3, r2
 800222c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800223c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800224c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800224e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002250:	9300      	str	r3, [sp, #0]
 8002252:	6a3b      	ldr	r3, [r7, #32]
 8002254:	2200      	movs	r2, #0
 8002256:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800225a:	68f8      	ldr	r0, [r7, #12]
 800225c:	f000 f8c2 	bl	80023e4 <I2C_WaitOnFlagUntilTimeout>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d00d      	beq.n	8002282 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002270:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002274:	d103      	bne.n	800227e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800227c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e0aa      	b.n	80023d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002282:	897b      	ldrh	r3, [r7, #10]
 8002284:	b2db      	uxtb	r3, r3
 8002286:	461a      	mov	r2, r3
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002290:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002294:	6a3a      	ldr	r2, [r7, #32]
 8002296:	4952      	ldr	r1, [pc, #328]	@ (80023e0 <I2C_RequestMemoryRead+0x1cc>)
 8002298:	68f8      	ldr	r0, [r7, #12]
 800229a:	f000 f91d 	bl	80024d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d001      	beq.n	80022a8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e097      	b.n	80023d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022a8:	2300      	movs	r3, #0
 80022aa:	617b      	str	r3, [r7, #20]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	695b      	ldr	r3, [r3, #20]
 80022b2:	617b      	str	r3, [r7, #20]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	699b      	ldr	r3, [r3, #24]
 80022ba:	617b      	str	r3, [r7, #20]
 80022bc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80022be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022c0:	6a39      	ldr	r1, [r7, #32]
 80022c2:	68f8      	ldr	r0, [r7, #12]
 80022c4:	f000 f9a8 	bl	8002618 <I2C_WaitOnTXEFlagUntilTimeout>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d00d      	beq.n	80022ea <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d2:	2b04      	cmp	r3, #4
 80022d4:	d107      	bne.n	80022e6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022e4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e076      	b.n	80023d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80022ea:	88fb      	ldrh	r3, [r7, #6]
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d105      	bne.n	80022fc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80022f0:	893b      	ldrh	r3, [r7, #8]
 80022f2:	b2da      	uxtb	r2, r3
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	611a      	str	r2, [r3, #16]
 80022fa:	e021      	b.n	8002340 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80022fc:	893b      	ldrh	r3, [r7, #8]
 80022fe:	0a1b      	lsrs	r3, r3, #8
 8002300:	b29b      	uxth	r3, r3
 8002302:	b2da      	uxtb	r2, r3
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800230a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800230c:	6a39      	ldr	r1, [r7, #32]
 800230e:	68f8      	ldr	r0, [r7, #12]
 8002310:	f000 f982 	bl	8002618 <I2C_WaitOnTXEFlagUntilTimeout>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d00d      	beq.n	8002336 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800231e:	2b04      	cmp	r3, #4
 8002320:	d107      	bne.n	8002332 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002330:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e050      	b.n	80023d8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002336:	893b      	ldrh	r3, [r7, #8]
 8002338:	b2da      	uxtb	r2, r3
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002340:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002342:	6a39      	ldr	r1, [r7, #32]
 8002344:	68f8      	ldr	r0, [r7, #12]
 8002346:	f000 f967 	bl	8002618 <I2C_WaitOnTXEFlagUntilTimeout>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d00d      	beq.n	800236c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002354:	2b04      	cmp	r3, #4
 8002356:	d107      	bne.n	8002368 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002366:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e035      	b.n	80023d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800237a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800237c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800237e:	9300      	str	r3, [sp, #0]
 8002380:	6a3b      	ldr	r3, [r7, #32]
 8002382:	2200      	movs	r2, #0
 8002384:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002388:	68f8      	ldr	r0, [r7, #12]
 800238a:	f000 f82b 	bl	80023e4 <I2C_WaitOnFlagUntilTimeout>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d00d      	beq.n	80023b0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800239e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80023a2:	d103      	bne.n	80023ac <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80023aa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	e013      	b.n	80023d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80023b0:	897b      	ldrh	r3, [r7, #10]
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	f043 0301 	orr.w	r3, r3, #1
 80023b8:	b2da      	uxtb	r2, r3
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80023c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023c2:	6a3a      	ldr	r2, [r7, #32]
 80023c4:	4906      	ldr	r1, [pc, #24]	@ (80023e0 <I2C_RequestMemoryRead+0x1cc>)
 80023c6:	68f8      	ldr	r0, [r7, #12]
 80023c8:	f000 f886 	bl	80024d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e000      	b.n	80023d8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80023d6:	2300      	movs	r3, #0
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3718      	adds	r7, #24
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	00010002 	.word	0x00010002

080023e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	603b      	str	r3, [r7, #0]
 80023f0:	4613      	mov	r3, r2
 80023f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023f4:	e048      	b.n	8002488 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023fc:	d044      	beq.n	8002488 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023fe:	f7fe ff33 	bl	8001268 <HAL_GetTick>
 8002402:	4602      	mov	r2, r0
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	683a      	ldr	r2, [r7, #0]
 800240a:	429a      	cmp	r2, r3
 800240c:	d302      	bcc.n	8002414 <I2C_WaitOnFlagUntilTimeout+0x30>
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d139      	bne.n	8002488 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	0c1b      	lsrs	r3, r3, #16
 8002418:	b2db      	uxtb	r3, r3
 800241a:	2b01      	cmp	r3, #1
 800241c:	d10d      	bne.n	800243a <I2C_WaitOnFlagUntilTimeout+0x56>
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	695b      	ldr	r3, [r3, #20]
 8002424:	43da      	mvns	r2, r3
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	4013      	ands	r3, r2
 800242a:	b29b      	uxth	r3, r3
 800242c:	2b00      	cmp	r3, #0
 800242e:	bf0c      	ite	eq
 8002430:	2301      	moveq	r3, #1
 8002432:	2300      	movne	r3, #0
 8002434:	b2db      	uxtb	r3, r3
 8002436:	461a      	mov	r2, r3
 8002438:	e00c      	b.n	8002454 <I2C_WaitOnFlagUntilTimeout+0x70>
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	699b      	ldr	r3, [r3, #24]
 8002440:	43da      	mvns	r2, r3
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	4013      	ands	r3, r2
 8002446:	b29b      	uxth	r3, r3
 8002448:	2b00      	cmp	r3, #0
 800244a:	bf0c      	ite	eq
 800244c:	2301      	moveq	r3, #1
 800244e:	2300      	movne	r3, #0
 8002450:	b2db      	uxtb	r3, r3
 8002452:	461a      	mov	r2, r3
 8002454:	79fb      	ldrb	r3, [r7, #7]
 8002456:	429a      	cmp	r2, r3
 8002458:	d116      	bne.n	8002488 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2200      	movs	r2, #0
 800245e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2220      	movs	r2, #32
 8002464:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2200      	movs	r2, #0
 800246c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002474:	f043 0220 	orr.w	r2, r3, #32
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2200      	movs	r2, #0
 8002480:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e023      	b.n	80024d0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	0c1b      	lsrs	r3, r3, #16
 800248c:	b2db      	uxtb	r3, r3
 800248e:	2b01      	cmp	r3, #1
 8002490:	d10d      	bne.n	80024ae <I2C_WaitOnFlagUntilTimeout+0xca>
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	695b      	ldr	r3, [r3, #20]
 8002498:	43da      	mvns	r2, r3
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	4013      	ands	r3, r2
 800249e:	b29b      	uxth	r3, r3
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	bf0c      	ite	eq
 80024a4:	2301      	moveq	r3, #1
 80024a6:	2300      	movne	r3, #0
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	461a      	mov	r2, r3
 80024ac:	e00c      	b.n	80024c8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	699b      	ldr	r3, [r3, #24]
 80024b4:	43da      	mvns	r2, r3
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	4013      	ands	r3, r2
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	2b00      	cmp	r3, #0
 80024be:	bf0c      	ite	eq
 80024c0:	2301      	moveq	r3, #1
 80024c2:	2300      	movne	r3, #0
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	461a      	mov	r2, r3
 80024c8:	79fb      	ldrb	r3, [r7, #7]
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d093      	beq.n	80023f6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80024ce:	2300      	movs	r3, #0
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3710      	adds	r7, #16
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	60b9      	str	r1, [r7, #8]
 80024e2:	607a      	str	r2, [r7, #4]
 80024e4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80024e6:	e071      	b.n	80025cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	695b      	ldr	r3, [r3, #20]
 80024ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024f6:	d123      	bne.n	8002540 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002506:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002510:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2200      	movs	r2, #0
 8002516:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2220      	movs	r2, #32
 800251c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2200      	movs	r2, #0
 8002524:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800252c:	f043 0204 	orr.w	r2, r3, #4
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2200      	movs	r2, #0
 8002538:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e067      	b.n	8002610 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002546:	d041      	beq.n	80025cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002548:	f7fe fe8e 	bl	8001268 <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	429a      	cmp	r2, r3
 8002556:	d302      	bcc.n	800255e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d136      	bne.n	80025cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	0c1b      	lsrs	r3, r3, #16
 8002562:	b2db      	uxtb	r3, r3
 8002564:	2b01      	cmp	r3, #1
 8002566:	d10c      	bne.n	8002582 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	695b      	ldr	r3, [r3, #20]
 800256e:	43da      	mvns	r2, r3
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	4013      	ands	r3, r2
 8002574:	b29b      	uxth	r3, r3
 8002576:	2b00      	cmp	r3, #0
 8002578:	bf14      	ite	ne
 800257a:	2301      	movne	r3, #1
 800257c:	2300      	moveq	r3, #0
 800257e:	b2db      	uxtb	r3, r3
 8002580:	e00b      	b.n	800259a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	699b      	ldr	r3, [r3, #24]
 8002588:	43da      	mvns	r2, r3
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	4013      	ands	r3, r2
 800258e:	b29b      	uxth	r3, r3
 8002590:	2b00      	cmp	r3, #0
 8002592:	bf14      	ite	ne
 8002594:	2301      	movne	r3, #1
 8002596:	2300      	moveq	r3, #0
 8002598:	b2db      	uxtb	r3, r3
 800259a:	2b00      	cmp	r3, #0
 800259c:	d016      	beq.n	80025cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2200      	movs	r2, #0
 80025a2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2220      	movs	r2, #32
 80025a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2200      	movs	r2, #0
 80025b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b8:	f043 0220 	orr.w	r2, r3, #32
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2200      	movs	r2, #0
 80025c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e021      	b.n	8002610 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	0c1b      	lsrs	r3, r3, #16
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d10c      	bne.n	80025f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	695b      	ldr	r3, [r3, #20]
 80025dc:	43da      	mvns	r2, r3
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	4013      	ands	r3, r2
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	bf14      	ite	ne
 80025e8:	2301      	movne	r3, #1
 80025ea:	2300      	moveq	r3, #0
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	e00b      	b.n	8002608 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	699b      	ldr	r3, [r3, #24]
 80025f6:	43da      	mvns	r2, r3
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	4013      	ands	r3, r2
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	2b00      	cmp	r3, #0
 8002600:	bf14      	ite	ne
 8002602:	2301      	movne	r3, #1
 8002604:	2300      	moveq	r3, #0
 8002606:	b2db      	uxtb	r3, r3
 8002608:	2b00      	cmp	r3, #0
 800260a:	f47f af6d 	bne.w	80024e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800260e:	2300      	movs	r3, #0
}
 8002610:	4618      	mov	r0, r3
 8002612:	3710      	adds	r7, #16
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}

08002618 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	60b9      	str	r1, [r7, #8]
 8002622:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002624:	e034      	b.n	8002690 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002626:	68f8      	ldr	r0, [r7, #12]
 8002628:	f000 f8e3 	bl	80027f2 <I2C_IsAcknowledgeFailed>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e034      	b.n	80026a0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800263c:	d028      	beq.n	8002690 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800263e:	f7fe fe13 	bl	8001268 <HAL_GetTick>
 8002642:	4602      	mov	r2, r0
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	68ba      	ldr	r2, [r7, #8]
 800264a:	429a      	cmp	r2, r3
 800264c:	d302      	bcc.n	8002654 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d11d      	bne.n	8002690 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	695b      	ldr	r3, [r3, #20]
 800265a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800265e:	2b80      	cmp	r3, #128	@ 0x80
 8002660:	d016      	beq.n	8002690 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2200      	movs	r2, #0
 8002666:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2220      	movs	r2, #32
 800266c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2200      	movs	r2, #0
 8002674:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800267c:	f043 0220 	orr.w	r2, r3, #32
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2200      	movs	r2, #0
 8002688:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e007      	b.n	80026a0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	695b      	ldr	r3, [r3, #20]
 8002696:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800269a:	2b80      	cmp	r3, #128	@ 0x80
 800269c:	d1c3      	bne.n	8002626 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800269e:	2300      	movs	r3, #0
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3710      	adds	r7, #16
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	60f8      	str	r0, [r7, #12]
 80026b0:	60b9      	str	r1, [r7, #8]
 80026b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80026b4:	e034      	b.n	8002720 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80026b6:	68f8      	ldr	r0, [r7, #12]
 80026b8:	f000 f89b 	bl	80027f2 <I2C_IsAcknowledgeFailed>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d001      	beq.n	80026c6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e034      	b.n	8002730 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026cc:	d028      	beq.n	8002720 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026ce:	f7fe fdcb 	bl	8001268 <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	68ba      	ldr	r2, [r7, #8]
 80026da:	429a      	cmp	r2, r3
 80026dc:	d302      	bcc.n	80026e4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d11d      	bne.n	8002720 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	695b      	ldr	r3, [r3, #20]
 80026ea:	f003 0304 	and.w	r3, r3, #4
 80026ee:	2b04      	cmp	r3, #4
 80026f0:	d016      	beq.n	8002720 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2200      	movs	r2, #0
 80026f6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2220      	movs	r2, #32
 80026fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2200      	movs	r2, #0
 8002704:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800270c:	f043 0220 	orr.w	r2, r3, #32
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2200      	movs	r2, #0
 8002718:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e007      	b.n	8002730 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	695b      	ldr	r3, [r3, #20]
 8002726:	f003 0304 	and.w	r3, r3, #4
 800272a:	2b04      	cmp	r3, #4
 800272c:	d1c3      	bne.n	80026b6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800272e:	2300      	movs	r3, #0
}
 8002730:	4618      	mov	r0, r3
 8002732:	3710      	adds	r7, #16
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}

08002738 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	60b9      	str	r1, [r7, #8]
 8002742:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002744:	e049      	b.n	80027da <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	695b      	ldr	r3, [r3, #20]
 800274c:	f003 0310 	and.w	r3, r3, #16
 8002750:	2b10      	cmp	r3, #16
 8002752:	d119      	bne.n	8002788 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f06f 0210 	mvn.w	r2, #16
 800275c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2200      	movs	r2, #0
 8002762:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2220      	movs	r2, #32
 8002768:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2200      	movs	r2, #0
 8002770:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2200      	movs	r2, #0
 8002780:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e030      	b.n	80027ea <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002788:	f7fe fd6e 	bl	8001268 <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	68ba      	ldr	r2, [r7, #8]
 8002794:	429a      	cmp	r2, r3
 8002796:	d302      	bcc.n	800279e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d11d      	bne.n	80027da <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	695b      	ldr	r3, [r3, #20]
 80027a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027a8:	2b40      	cmp	r3, #64	@ 0x40
 80027aa:	d016      	beq.n	80027da <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2200      	movs	r2, #0
 80027b0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2220      	movs	r2, #32
 80027b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2200      	movs	r2, #0
 80027be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c6:	f043 0220 	orr.w	r2, r3, #32
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2200      	movs	r2, #0
 80027d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e007      	b.n	80027ea <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	695b      	ldr	r3, [r3, #20]
 80027e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027e4:	2b40      	cmp	r3, #64	@ 0x40
 80027e6:	d1ae      	bne.n	8002746 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80027e8:	2300      	movs	r3, #0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3710      	adds	r7, #16
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}

080027f2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80027f2:	b480      	push	{r7}
 80027f4:	b083      	sub	sp, #12
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	695b      	ldr	r3, [r3, #20]
 8002800:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002804:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002808:	d11b      	bne.n	8002842 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002812:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2220      	movs	r2, #32
 800281e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800282e:	f043 0204 	orr.w	r2, r3, #4
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e000      	b.n	8002844 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002842:	2300      	movs	r3, #0
}
 8002844:	4618      	mov	r0, r3
 8002846:	370c      	adds	r7, #12
 8002848:	46bd      	mov	sp, r7
 800284a:	bc80      	pop	{r7}
 800284c:	4770      	bx	lr
	...

08002850 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b086      	sub	sp, #24
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d101      	bne.n	8002862 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e272      	b.n	8002d48 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0301 	and.w	r3, r3, #1
 800286a:	2b00      	cmp	r3, #0
 800286c:	f000 8087 	beq.w	800297e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002870:	4b92      	ldr	r3, [pc, #584]	@ (8002abc <HAL_RCC_OscConfig+0x26c>)
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f003 030c 	and.w	r3, r3, #12
 8002878:	2b04      	cmp	r3, #4
 800287a:	d00c      	beq.n	8002896 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800287c:	4b8f      	ldr	r3, [pc, #572]	@ (8002abc <HAL_RCC_OscConfig+0x26c>)
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f003 030c 	and.w	r3, r3, #12
 8002884:	2b08      	cmp	r3, #8
 8002886:	d112      	bne.n	80028ae <HAL_RCC_OscConfig+0x5e>
 8002888:	4b8c      	ldr	r3, [pc, #560]	@ (8002abc <HAL_RCC_OscConfig+0x26c>)
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002890:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002894:	d10b      	bne.n	80028ae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002896:	4b89      	ldr	r3, [pc, #548]	@ (8002abc <HAL_RCC_OscConfig+0x26c>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d06c      	beq.n	800297c <HAL_RCC_OscConfig+0x12c>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d168      	bne.n	800297c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e24c      	b.n	8002d48 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028b6:	d106      	bne.n	80028c6 <HAL_RCC_OscConfig+0x76>
 80028b8:	4b80      	ldr	r3, [pc, #512]	@ (8002abc <HAL_RCC_OscConfig+0x26c>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a7f      	ldr	r2, [pc, #508]	@ (8002abc <HAL_RCC_OscConfig+0x26c>)
 80028be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028c2:	6013      	str	r3, [r2, #0]
 80028c4:	e02e      	b.n	8002924 <HAL_RCC_OscConfig+0xd4>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d10c      	bne.n	80028e8 <HAL_RCC_OscConfig+0x98>
 80028ce:	4b7b      	ldr	r3, [pc, #492]	@ (8002abc <HAL_RCC_OscConfig+0x26c>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a7a      	ldr	r2, [pc, #488]	@ (8002abc <HAL_RCC_OscConfig+0x26c>)
 80028d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028d8:	6013      	str	r3, [r2, #0]
 80028da:	4b78      	ldr	r3, [pc, #480]	@ (8002abc <HAL_RCC_OscConfig+0x26c>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a77      	ldr	r2, [pc, #476]	@ (8002abc <HAL_RCC_OscConfig+0x26c>)
 80028e0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028e4:	6013      	str	r3, [r2, #0]
 80028e6:	e01d      	b.n	8002924 <HAL_RCC_OscConfig+0xd4>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80028f0:	d10c      	bne.n	800290c <HAL_RCC_OscConfig+0xbc>
 80028f2:	4b72      	ldr	r3, [pc, #456]	@ (8002abc <HAL_RCC_OscConfig+0x26c>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a71      	ldr	r2, [pc, #452]	@ (8002abc <HAL_RCC_OscConfig+0x26c>)
 80028f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028fc:	6013      	str	r3, [r2, #0]
 80028fe:	4b6f      	ldr	r3, [pc, #444]	@ (8002abc <HAL_RCC_OscConfig+0x26c>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a6e      	ldr	r2, [pc, #440]	@ (8002abc <HAL_RCC_OscConfig+0x26c>)
 8002904:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002908:	6013      	str	r3, [r2, #0]
 800290a:	e00b      	b.n	8002924 <HAL_RCC_OscConfig+0xd4>
 800290c:	4b6b      	ldr	r3, [pc, #428]	@ (8002abc <HAL_RCC_OscConfig+0x26c>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a6a      	ldr	r2, [pc, #424]	@ (8002abc <HAL_RCC_OscConfig+0x26c>)
 8002912:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002916:	6013      	str	r3, [r2, #0]
 8002918:	4b68      	ldr	r3, [pc, #416]	@ (8002abc <HAL_RCC_OscConfig+0x26c>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a67      	ldr	r2, [pc, #412]	@ (8002abc <HAL_RCC_OscConfig+0x26c>)
 800291e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002922:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d013      	beq.n	8002954 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800292c:	f7fe fc9c 	bl	8001268 <HAL_GetTick>
 8002930:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002932:	e008      	b.n	8002946 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002934:	f7fe fc98 	bl	8001268 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b64      	cmp	r3, #100	@ 0x64
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e200      	b.n	8002d48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002946:	4b5d      	ldr	r3, [pc, #372]	@ (8002abc <HAL_RCC_OscConfig+0x26c>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d0f0      	beq.n	8002934 <HAL_RCC_OscConfig+0xe4>
 8002952:	e014      	b.n	800297e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002954:	f7fe fc88 	bl	8001268 <HAL_GetTick>
 8002958:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800295a:	e008      	b.n	800296e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800295c:	f7fe fc84 	bl	8001268 <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	2b64      	cmp	r3, #100	@ 0x64
 8002968:	d901      	bls.n	800296e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e1ec      	b.n	8002d48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800296e:	4b53      	ldr	r3, [pc, #332]	@ (8002abc <HAL_RCC_OscConfig+0x26c>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d1f0      	bne.n	800295c <HAL_RCC_OscConfig+0x10c>
 800297a:	e000      	b.n	800297e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800297c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0302 	and.w	r3, r3, #2
 8002986:	2b00      	cmp	r3, #0
 8002988:	d063      	beq.n	8002a52 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800298a:	4b4c      	ldr	r3, [pc, #304]	@ (8002abc <HAL_RCC_OscConfig+0x26c>)
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f003 030c 	and.w	r3, r3, #12
 8002992:	2b00      	cmp	r3, #0
 8002994:	d00b      	beq.n	80029ae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002996:	4b49      	ldr	r3, [pc, #292]	@ (8002abc <HAL_RCC_OscConfig+0x26c>)
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f003 030c 	and.w	r3, r3, #12
 800299e:	2b08      	cmp	r3, #8
 80029a0:	d11c      	bne.n	80029dc <HAL_RCC_OscConfig+0x18c>
 80029a2:	4b46      	ldr	r3, [pc, #280]	@ (8002abc <HAL_RCC_OscConfig+0x26c>)
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d116      	bne.n	80029dc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029ae:	4b43      	ldr	r3, [pc, #268]	@ (8002abc <HAL_RCC_OscConfig+0x26c>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0302 	and.w	r3, r3, #2
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d005      	beq.n	80029c6 <HAL_RCC_OscConfig+0x176>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	691b      	ldr	r3, [r3, #16]
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d001      	beq.n	80029c6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e1c0      	b.n	8002d48 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029c6:	4b3d      	ldr	r3, [pc, #244]	@ (8002abc <HAL_RCC_OscConfig+0x26c>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	695b      	ldr	r3, [r3, #20]
 80029d2:	00db      	lsls	r3, r3, #3
 80029d4:	4939      	ldr	r1, [pc, #228]	@ (8002abc <HAL_RCC_OscConfig+0x26c>)
 80029d6:	4313      	orrs	r3, r2
 80029d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029da:	e03a      	b.n	8002a52 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	691b      	ldr	r3, [r3, #16]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d020      	beq.n	8002a26 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029e4:	4b36      	ldr	r3, [pc, #216]	@ (8002ac0 <HAL_RCC_OscConfig+0x270>)
 80029e6:	2201      	movs	r2, #1
 80029e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ea:	f7fe fc3d 	bl	8001268 <HAL_GetTick>
 80029ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029f0:	e008      	b.n	8002a04 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029f2:	f7fe fc39 	bl	8001268 <HAL_GetTick>
 80029f6:	4602      	mov	r2, r0
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d901      	bls.n	8002a04 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002a00:	2303      	movs	r3, #3
 8002a02:	e1a1      	b.n	8002d48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a04:	4b2d      	ldr	r3, [pc, #180]	@ (8002abc <HAL_RCC_OscConfig+0x26c>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0302 	and.w	r3, r3, #2
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d0f0      	beq.n	80029f2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a10:	4b2a      	ldr	r3, [pc, #168]	@ (8002abc <HAL_RCC_OscConfig+0x26c>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	695b      	ldr	r3, [r3, #20]
 8002a1c:	00db      	lsls	r3, r3, #3
 8002a1e:	4927      	ldr	r1, [pc, #156]	@ (8002abc <HAL_RCC_OscConfig+0x26c>)
 8002a20:	4313      	orrs	r3, r2
 8002a22:	600b      	str	r3, [r1, #0]
 8002a24:	e015      	b.n	8002a52 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a26:	4b26      	ldr	r3, [pc, #152]	@ (8002ac0 <HAL_RCC_OscConfig+0x270>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a2c:	f7fe fc1c 	bl	8001268 <HAL_GetTick>
 8002a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a32:	e008      	b.n	8002a46 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a34:	f7fe fc18 	bl	8001268 <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e180      	b.n	8002d48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a46:	4b1d      	ldr	r3, [pc, #116]	@ (8002abc <HAL_RCC_OscConfig+0x26c>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0302 	and.w	r3, r3, #2
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d1f0      	bne.n	8002a34 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0308 	and.w	r3, r3, #8
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d03a      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	699b      	ldr	r3, [r3, #24]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d019      	beq.n	8002a9a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a66:	4b17      	ldr	r3, [pc, #92]	@ (8002ac4 <HAL_RCC_OscConfig+0x274>)
 8002a68:	2201      	movs	r2, #1
 8002a6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a6c:	f7fe fbfc 	bl	8001268 <HAL_GetTick>
 8002a70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a72:	e008      	b.n	8002a86 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a74:	f7fe fbf8 	bl	8001268 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d901      	bls.n	8002a86 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e160      	b.n	8002d48 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a86:	4b0d      	ldr	r3, [pc, #52]	@ (8002abc <HAL_RCC_OscConfig+0x26c>)
 8002a88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a8a:	f003 0302 	and.w	r3, r3, #2
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d0f0      	beq.n	8002a74 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002a92:	2001      	movs	r0, #1
 8002a94:	f000 faba 	bl	800300c <RCC_Delay>
 8002a98:	e01c      	b.n	8002ad4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a9a:	4b0a      	ldr	r3, [pc, #40]	@ (8002ac4 <HAL_RCC_OscConfig+0x274>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aa0:	f7fe fbe2 	bl	8001268 <HAL_GetTick>
 8002aa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002aa6:	e00f      	b.n	8002ac8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002aa8:	f7fe fbde 	bl	8001268 <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d908      	bls.n	8002ac8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e146      	b.n	8002d48 <HAL_RCC_OscConfig+0x4f8>
 8002aba:	bf00      	nop
 8002abc:	40021000 	.word	0x40021000
 8002ac0:	42420000 	.word	0x42420000
 8002ac4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ac8:	4b92      	ldr	r3, [pc, #584]	@ (8002d14 <HAL_RCC_OscConfig+0x4c4>)
 8002aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002acc:	f003 0302 	and.w	r3, r3, #2
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d1e9      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0304 	and.w	r3, r3, #4
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	f000 80a6 	beq.w	8002c2e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ae6:	4b8b      	ldr	r3, [pc, #556]	@ (8002d14 <HAL_RCC_OscConfig+0x4c4>)
 8002ae8:	69db      	ldr	r3, [r3, #28]
 8002aea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d10d      	bne.n	8002b0e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002af2:	4b88      	ldr	r3, [pc, #544]	@ (8002d14 <HAL_RCC_OscConfig+0x4c4>)
 8002af4:	69db      	ldr	r3, [r3, #28]
 8002af6:	4a87      	ldr	r2, [pc, #540]	@ (8002d14 <HAL_RCC_OscConfig+0x4c4>)
 8002af8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002afc:	61d3      	str	r3, [r2, #28]
 8002afe:	4b85      	ldr	r3, [pc, #532]	@ (8002d14 <HAL_RCC_OscConfig+0x4c4>)
 8002b00:	69db      	ldr	r3, [r3, #28]
 8002b02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b06:	60bb      	str	r3, [r7, #8]
 8002b08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b0e:	4b82      	ldr	r3, [pc, #520]	@ (8002d18 <HAL_RCC_OscConfig+0x4c8>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d118      	bne.n	8002b4c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b1a:	4b7f      	ldr	r3, [pc, #508]	@ (8002d18 <HAL_RCC_OscConfig+0x4c8>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a7e      	ldr	r2, [pc, #504]	@ (8002d18 <HAL_RCC_OscConfig+0x4c8>)
 8002b20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b26:	f7fe fb9f 	bl	8001268 <HAL_GetTick>
 8002b2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b2c:	e008      	b.n	8002b40 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b2e:	f7fe fb9b 	bl	8001268 <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	2b64      	cmp	r3, #100	@ 0x64
 8002b3a:	d901      	bls.n	8002b40 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e103      	b.n	8002d48 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b40:	4b75      	ldr	r3, [pc, #468]	@ (8002d18 <HAL_RCC_OscConfig+0x4c8>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d0f0      	beq.n	8002b2e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d106      	bne.n	8002b62 <HAL_RCC_OscConfig+0x312>
 8002b54:	4b6f      	ldr	r3, [pc, #444]	@ (8002d14 <HAL_RCC_OscConfig+0x4c4>)
 8002b56:	6a1b      	ldr	r3, [r3, #32]
 8002b58:	4a6e      	ldr	r2, [pc, #440]	@ (8002d14 <HAL_RCC_OscConfig+0x4c4>)
 8002b5a:	f043 0301 	orr.w	r3, r3, #1
 8002b5e:	6213      	str	r3, [r2, #32]
 8002b60:	e02d      	b.n	8002bbe <HAL_RCC_OscConfig+0x36e>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	68db      	ldr	r3, [r3, #12]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d10c      	bne.n	8002b84 <HAL_RCC_OscConfig+0x334>
 8002b6a:	4b6a      	ldr	r3, [pc, #424]	@ (8002d14 <HAL_RCC_OscConfig+0x4c4>)
 8002b6c:	6a1b      	ldr	r3, [r3, #32]
 8002b6e:	4a69      	ldr	r2, [pc, #420]	@ (8002d14 <HAL_RCC_OscConfig+0x4c4>)
 8002b70:	f023 0301 	bic.w	r3, r3, #1
 8002b74:	6213      	str	r3, [r2, #32]
 8002b76:	4b67      	ldr	r3, [pc, #412]	@ (8002d14 <HAL_RCC_OscConfig+0x4c4>)
 8002b78:	6a1b      	ldr	r3, [r3, #32]
 8002b7a:	4a66      	ldr	r2, [pc, #408]	@ (8002d14 <HAL_RCC_OscConfig+0x4c4>)
 8002b7c:	f023 0304 	bic.w	r3, r3, #4
 8002b80:	6213      	str	r3, [r2, #32]
 8002b82:	e01c      	b.n	8002bbe <HAL_RCC_OscConfig+0x36e>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	2b05      	cmp	r3, #5
 8002b8a:	d10c      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x356>
 8002b8c:	4b61      	ldr	r3, [pc, #388]	@ (8002d14 <HAL_RCC_OscConfig+0x4c4>)
 8002b8e:	6a1b      	ldr	r3, [r3, #32]
 8002b90:	4a60      	ldr	r2, [pc, #384]	@ (8002d14 <HAL_RCC_OscConfig+0x4c4>)
 8002b92:	f043 0304 	orr.w	r3, r3, #4
 8002b96:	6213      	str	r3, [r2, #32]
 8002b98:	4b5e      	ldr	r3, [pc, #376]	@ (8002d14 <HAL_RCC_OscConfig+0x4c4>)
 8002b9a:	6a1b      	ldr	r3, [r3, #32]
 8002b9c:	4a5d      	ldr	r2, [pc, #372]	@ (8002d14 <HAL_RCC_OscConfig+0x4c4>)
 8002b9e:	f043 0301 	orr.w	r3, r3, #1
 8002ba2:	6213      	str	r3, [r2, #32]
 8002ba4:	e00b      	b.n	8002bbe <HAL_RCC_OscConfig+0x36e>
 8002ba6:	4b5b      	ldr	r3, [pc, #364]	@ (8002d14 <HAL_RCC_OscConfig+0x4c4>)
 8002ba8:	6a1b      	ldr	r3, [r3, #32]
 8002baa:	4a5a      	ldr	r2, [pc, #360]	@ (8002d14 <HAL_RCC_OscConfig+0x4c4>)
 8002bac:	f023 0301 	bic.w	r3, r3, #1
 8002bb0:	6213      	str	r3, [r2, #32]
 8002bb2:	4b58      	ldr	r3, [pc, #352]	@ (8002d14 <HAL_RCC_OscConfig+0x4c4>)
 8002bb4:	6a1b      	ldr	r3, [r3, #32]
 8002bb6:	4a57      	ldr	r2, [pc, #348]	@ (8002d14 <HAL_RCC_OscConfig+0x4c4>)
 8002bb8:	f023 0304 	bic.w	r3, r3, #4
 8002bbc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d015      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bc6:	f7fe fb4f 	bl	8001268 <HAL_GetTick>
 8002bca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bcc:	e00a      	b.n	8002be4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bce:	f7fe fb4b 	bl	8001268 <HAL_GetTick>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d901      	bls.n	8002be4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002be0:	2303      	movs	r3, #3
 8002be2:	e0b1      	b.n	8002d48 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002be4:	4b4b      	ldr	r3, [pc, #300]	@ (8002d14 <HAL_RCC_OscConfig+0x4c4>)
 8002be6:	6a1b      	ldr	r3, [r3, #32]
 8002be8:	f003 0302 	and.w	r3, r3, #2
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d0ee      	beq.n	8002bce <HAL_RCC_OscConfig+0x37e>
 8002bf0:	e014      	b.n	8002c1c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bf2:	f7fe fb39 	bl	8001268 <HAL_GetTick>
 8002bf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bf8:	e00a      	b.n	8002c10 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bfa:	f7fe fb35 	bl	8001268 <HAL_GetTick>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d901      	bls.n	8002c10 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	e09b      	b.n	8002d48 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c10:	4b40      	ldr	r3, [pc, #256]	@ (8002d14 <HAL_RCC_OscConfig+0x4c4>)
 8002c12:	6a1b      	ldr	r3, [r3, #32]
 8002c14:	f003 0302 	and.w	r3, r3, #2
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d1ee      	bne.n	8002bfa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c1c:	7dfb      	ldrb	r3, [r7, #23]
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d105      	bne.n	8002c2e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c22:	4b3c      	ldr	r3, [pc, #240]	@ (8002d14 <HAL_RCC_OscConfig+0x4c4>)
 8002c24:	69db      	ldr	r3, [r3, #28]
 8002c26:	4a3b      	ldr	r2, [pc, #236]	@ (8002d14 <HAL_RCC_OscConfig+0x4c4>)
 8002c28:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c2c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	69db      	ldr	r3, [r3, #28]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	f000 8087 	beq.w	8002d46 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c38:	4b36      	ldr	r3, [pc, #216]	@ (8002d14 <HAL_RCC_OscConfig+0x4c4>)
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f003 030c 	and.w	r3, r3, #12
 8002c40:	2b08      	cmp	r3, #8
 8002c42:	d061      	beq.n	8002d08 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	69db      	ldr	r3, [r3, #28]
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d146      	bne.n	8002cda <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c4c:	4b33      	ldr	r3, [pc, #204]	@ (8002d1c <HAL_RCC_OscConfig+0x4cc>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c52:	f7fe fb09 	bl	8001268 <HAL_GetTick>
 8002c56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c58:	e008      	b.n	8002c6c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c5a:	f7fe fb05 	bl	8001268 <HAL_GetTick>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	d901      	bls.n	8002c6c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002c68:	2303      	movs	r3, #3
 8002c6a:	e06d      	b.n	8002d48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c6c:	4b29      	ldr	r3, [pc, #164]	@ (8002d14 <HAL_RCC_OscConfig+0x4c4>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d1f0      	bne.n	8002c5a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6a1b      	ldr	r3, [r3, #32]
 8002c7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c80:	d108      	bne.n	8002c94 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002c82:	4b24      	ldr	r3, [pc, #144]	@ (8002d14 <HAL_RCC_OscConfig+0x4c4>)
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	4921      	ldr	r1, [pc, #132]	@ (8002d14 <HAL_RCC_OscConfig+0x4c4>)
 8002c90:	4313      	orrs	r3, r2
 8002c92:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c94:	4b1f      	ldr	r3, [pc, #124]	@ (8002d14 <HAL_RCC_OscConfig+0x4c4>)
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6a19      	ldr	r1, [r3, #32]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ca4:	430b      	orrs	r3, r1
 8002ca6:	491b      	ldr	r1, [pc, #108]	@ (8002d14 <HAL_RCC_OscConfig+0x4c4>)
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cac:	4b1b      	ldr	r3, [pc, #108]	@ (8002d1c <HAL_RCC_OscConfig+0x4cc>)
 8002cae:	2201      	movs	r2, #1
 8002cb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb2:	f7fe fad9 	bl	8001268 <HAL_GetTick>
 8002cb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002cb8:	e008      	b.n	8002ccc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cba:	f7fe fad5 	bl	8001268 <HAL_GetTick>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d901      	bls.n	8002ccc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	e03d      	b.n	8002d48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ccc:	4b11      	ldr	r3, [pc, #68]	@ (8002d14 <HAL_RCC_OscConfig+0x4c4>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d0f0      	beq.n	8002cba <HAL_RCC_OscConfig+0x46a>
 8002cd8:	e035      	b.n	8002d46 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cda:	4b10      	ldr	r3, [pc, #64]	@ (8002d1c <HAL_RCC_OscConfig+0x4cc>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ce0:	f7fe fac2 	bl	8001268 <HAL_GetTick>
 8002ce4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ce6:	e008      	b.n	8002cfa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ce8:	f7fe fabe 	bl	8001268 <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d901      	bls.n	8002cfa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e026      	b.n	8002d48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cfa:	4b06      	ldr	r3, [pc, #24]	@ (8002d14 <HAL_RCC_OscConfig+0x4c4>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d1f0      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x498>
 8002d06:	e01e      	b.n	8002d46 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	69db      	ldr	r3, [r3, #28]
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d107      	bne.n	8002d20 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e019      	b.n	8002d48 <HAL_RCC_OscConfig+0x4f8>
 8002d14:	40021000 	.word	0x40021000
 8002d18:	40007000 	.word	0x40007000
 8002d1c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d20:	4b0b      	ldr	r3, [pc, #44]	@ (8002d50 <HAL_RCC_OscConfig+0x500>)
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6a1b      	ldr	r3, [r3, #32]
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d106      	bne.n	8002d42 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d001      	beq.n	8002d46 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e000      	b.n	8002d48 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002d46:	2300      	movs	r3, #0
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3718      	adds	r7, #24
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	40021000 	.word	0x40021000

08002d54 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d101      	bne.n	8002d68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e0d0      	b.n	8002f0a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d68:	4b6a      	ldr	r3, [pc, #424]	@ (8002f14 <HAL_RCC_ClockConfig+0x1c0>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0307 	and.w	r3, r3, #7
 8002d70:	683a      	ldr	r2, [r7, #0]
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d910      	bls.n	8002d98 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d76:	4b67      	ldr	r3, [pc, #412]	@ (8002f14 <HAL_RCC_ClockConfig+0x1c0>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f023 0207 	bic.w	r2, r3, #7
 8002d7e:	4965      	ldr	r1, [pc, #404]	@ (8002f14 <HAL_RCC_ClockConfig+0x1c0>)
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d86:	4b63      	ldr	r3, [pc, #396]	@ (8002f14 <HAL_RCC_ClockConfig+0x1c0>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0307 	and.w	r3, r3, #7
 8002d8e:	683a      	ldr	r2, [r7, #0]
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d001      	beq.n	8002d98 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e0b8      	b.n	8002f0a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0302 	and.w	r3, r3, #2
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d020      	beq.n	8002de6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0304 	and.w	r3, r3, #4
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d005      	beq.n	8002dbc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002db0:	4b59      	ldr	r3, [pc, #356]	@ (8002f18 <HAL_RCC_ClockConfig+0x1c4>)
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	4a58      	ldr	r2, [pc, #352]	@ (8002f18 <HAL_RCC_ClockConfig+0x1c4>)
 8002db6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002dba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0308 	and.w	r3, r3, #8
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d005      	beq.n	8002dd4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002dc8:	4b53      	ldr	r3, [pc, #332]	@ (8002f18 <HAL_RCC_ClockConfig+0x1c4>)
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	4a52      	ldr	r2, [pc, #328]	@ (8002f18 <HAL_RCC_ClockConfig+0x1c4>)
 8002dce:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002dd2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dd4:	4b50      	ldr	r3, [pc, #320]	@ (8002f18 <HAL_RCC_ClockConfig+0x1c4>)
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	494d      	ldr	r1, [pc, #308]	@ (8002f18 <HAL_RCC_ClockConfig+0x1c4>)
 8002de2:	4313      	orrs	r3, r2
 8002de4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0301 	and.w	r3, r3, #1
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d040      	beq.n	8002e74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d107      	bne.n	8002e0a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dfa:	4b47      	ldr	r3, [pc, #284]	@ (8002f18 <HAL_RCC_ClockConfig+0x1c4>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d115      	bne.n	8002e32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e07f      	b.n	8002f0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d107      	bne.n	8002e22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e12:	4b41      	ldr	r3, [pc, #260]	@ (8002f18 <HAL_RCC_ClockConfig+0x1c4>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d109      	bne.n	8002e32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e073      	b.n	8002f0a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e22:	4b3d      	ldr	r3, [pc, #244]	@ (8002f18 <HAL_RCC_ClockConfig+0x1c4>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0302 	and.w	r3, r3, #2
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d101      	bne.n	8002e32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e06b      	b.n	8002f0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e32:	4b39      	ldr	r3, [pc, #228]	@ (8002f18 <HAL_RCC_ClockConfig+0x1c4>)
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	f023 0203 	bic.w	r2, r3, #3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	4936      	ldr	r1, [pc, #216]	@ (8002f18 <HAL_RCC_ClockConfig+0x1c4>)
 8002e40:	4313      	orrs	r3, r2
 8002e42:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e44:	f7fe fa10 	bl	8001268 <HAL_GetTick>
 8002e48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e4a:	e00a      	b.n	8002e62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e4c:	f7fe fa0c 	bl	8001268 <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d901      	bls.n	8002e62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e053      	b.n	8002f0a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e62:	4b2d      	ldr	r3, [pc, #180]	@ (8002f18 <HAL_RCC_ClockConfig+0x1c4>)
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f003 020c 	and.w	r2, r3, #12
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d1eb      	bne.n	8002e4c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e74:	4b27      	ldr	r3, [pc, #156]	@ (8002f14 <HAL_RCC_ClockConfig+0x1c0>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0307 	and.w	r3, r3, #7
 8002e7c:	683a      	ldr	r2, [r7, #0]
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d210      	bcs.n	8002ea4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e82:	4b24      	ldr	r3, [pc, #144]	@ (8002f14 <HAL_RCC_ClockConfig+0x1c0>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f023 0207 	bic.w	r2, r3, #7
 8002e8a:	4922      	ldr	r1, [pc, #136]	@ (8002f14 <HAL_RCC_ClockConfig+0x1c0>)
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e92:	4b20      	ldr	r3, [pc, #128]	@ (8002f14 <HAL_RCC_ClockConfig+0x1c0>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0307 	and.w	r3, r3, #7
 8002e9a:	683a      	ldr	r2, [r7, #0]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d001      	beq.n	8002ea4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e032      	b.n	8002f0a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0304 	and.w	r3, r3, #4
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d008      	beq.n	8002ec2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002eb0:	4b19      	ldr	r3, [pc, #100]	@ (8002f18 <HAL_RCC_ClockConfig+0x1c4>)
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	4916      	ldr	r1, [pc, #88]	@ (8002f18 <HAL_RCC_ClockConfig+0x1c4>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0308 	and.w	r3, r3, #8
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d009      	beq.n	8002ee2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002ece:	4b12      	ldr	r3, [pc, #72]	@ (8002f18 <HAL_RCC_ClockConfig+0x1c4>)
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	691b      	ldr	r3, [r3, #16]
 8002eda:	00db      	lsls	r3, r3, #3
 8002edc:	490e      	ldr	r1, [pc, #56]	@ (8002f18 <HAL_RCC_ClockConfig+0x1c4>)
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ee2:	f000 f821 	bl	8002f28 <HAL_RCC_GetSysClockFreq>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	4b0b      	ldr	r3, [pc, #44]	@ (8002f18 <HAL_RCC_ClockConfig+0x1c4>)
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	091b      	lsrs	r3, r3, #4
 8002eee:	f003 030f 	and.w	r3, r3, #15
 8002ef2:	490a      	ldr	r1, [pc, #40]	@ (8002f1c <HAL_RCC_ClockConfig+0x1c8>)
 8002ef4:	5ccb      	ldrb	r3, [r1, r3]
 8002ef6:	fa22 f303 	lsr.w	r3, r2, r3
 8002efa:	4a09      	ldr	r2, [pc, #36]	@ (8002f20 <HAL_RCC_ClockConfig+0x1cc>)
 8002efc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002efe:	4b09      	ldr	r3, [pc, #36]	@ (8002f24 <HAL_RCC_ClockConfig+0x1d0>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4618      	mov	r0, r3
 8002f04:	f7fe f96e 	bl	80011e4 <HAL_InitTick>

  return HAL_OK;
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3710      	adds	r7, #16
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	40022000 	.word	0x40022000
 8002f18:	40021000 	.word	0x40021000
 8002f1c:	080030bc 	.word	0x080030bc
 8002f20:	20000048 	.word	0x20000048
 8002f24:	2000004c 	.word	0x2000004c

08002f28 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b087      	sub	sp, #28
 8002f2c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	60fb      	str	r3, [r7, #12]
 8002f32:	2300      	movs	r3, #0
 8002f34:	60bb      	str	r3, [r7, #8]
 8002f36:	2300      	movs	r3, #0
 8002f38:	617b      	str	r3, [r7, #20]
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002f42:	4b1e      	ldr	r3, [pc, #120]	@ (8002fbc <HAL_RCC_GetSysClockFreq+0x94>)
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f003 030c 	and.w	r3, r3, #12
 8002f4e:	2b04      	cmp	r3, #4
 8002f50:	d002      	beq.n	8002f58 <HAL_RCC_GetSysClockFreq+0x30>
 8002f52:	2b08      	cmp	r3, #8
 8002f54:	d003      	beq.n	8002f5e <HAL_RCC_GetSysClockFreq+0x36>
 8002f56:	e027      	b.n	8002fa8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f58:	4b19      	ldr	r3, [pc, #100]	@ (8002fc0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f5a:	613b      	str	r3, [r7, #16]
      break;
 8002f5c:	e027      	b.n	8002fae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	0c9b      	lsrs	r3, r3, #18
 8002f62:	f003 030f 	and.w	r3, r3, #15
 8002f66:	4a17      	ldr	r2, [pc, #92]	@ (8002fc4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002f68:	5cd3      	ldrb	r3, [r2, r3]
 8002f6a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d010      	beq.n	8002f98 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002f76:	4b11      	ldr	r3, [pc, #68]	@ (8002fbc <HAL_RCC_GetSysClockFreq+0x94>)
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	0c5b      	lsrs	r3, r3, #17
 8002f7c:	f003 0301 	and.w	r3, r3, #1
 8002f80:	4a11      	ldr	r2, [pc, #68]	@ (8002fc8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002f82:	5cd3      	ldrb	r3, [r2, r3]
 8002f84:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a0d      	ldr	r2, [pc, #52]	@ (8002fc0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f8a:	fb03 f202 	mul.w	r2, r3, r2
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f94:	617b      	str	r3, [r7, #20]
 8002f96:	e004      	b.n	8002fa2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	4a0c      	ldr	r2, [pc, #48]	@ (8002fcc <HAL_RCC_GetSysClockFreq+0xa4>)
 8002f9c:	fb02 f303 	mul.w	r3, r2, r3
 8002fa0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	613b      	str	r3, [r7, #16]
      break;
 8002fa6:	e002      	b.n	8002fae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002fa8:	4b05      	ldr	r3, [pc, #20]	@ (8002fc0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002faa:	613b      	str	r3, [r7, #16]
      break;
 8002fac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fae:	693b      	ldr	r3, [r7, #16]
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	371c      	adds	r7, #28
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bc80      	pop	{r7}
 8002fb8:	4770      	bx	lr
 8002fba:	bf00      	nop
 8002fbc:	40021000 	.word	0x40021000
 8002fc0:	007a1200 	.word	0x007a1200
 8002fc4:	080030d4 	.word	0x080030d4
 8002fc8:	080030e4 	.word	0x080030e4
 8002fcc:	003d0900 	.word	0x003d0900

08002fd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fd4:	4b02      	ldr	r3, [pc, #8]	@ (8002fe0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bc80      	pop	{r7}
 8002fde:	4770      	bx	lr
 8002fe0:	20000048 	.word	0x20000048

08002fe4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002fe8:	f7ff fff2 	bl	8002fd0 <HAL_RCC_GetHCLKFreq>
 8002fec:	4602      	mov	r2, r0
 8002fee:	4b05      	ldr	r3, [pc, #20]	@ (8003004 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	0a1b      	lsrs	r3, r3, #8
 8002ff4:	f003 0307 	and.w	r3, r3, #7
 8002ff8:	4903      	ldr	r1, [pc, #12]	@ (8003008 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ffa:	5ccb      	ldrb	r3, [r1, r3]
 8002ffc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003000:	4618      	mov	r0, r3
 8003002:	bd80      	pop	{r7, pc}
 8003004:	40021000 	.word	0x40021000
 8003008:	080030cc 	.word	0x080030cc

0800300c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800300c:	b480      	push	{r7}
 800300e:	b085      	sub	sp, #20
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003014:	4b0a      	ldr	r3, [pc, #40]	@ (8003040 <RCC_Delay+0x34>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a0a      	ldr	r2, [pc, #40]	@ (8003044 <RCC_Delay+0x38>)
 800301a:	fba2 2303 	umull	r2, r3, r2, r3
 800301e:	0a5b      	lsrs	r3, r3, #9
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	fb02 f303 	mul.w	r3, r2, r3
 8003026:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003028:	bf00      	nop
  }
  while (Delay --);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	1e5a      	subs	r2, r3, #1
 800302e:	60fa      	str	r2, [r7, #12]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d1f9      	bne.n	8003028 <RCC_Delay+0x1c>
}
 8003034:	bf00      	nop
 8003036:	bf00      	nop
 8003038:	3714      	adds	r7, #20
 800303a:	46bd      	mov	sp, r7
 800303c:	bc80      	pop	{r7}
 800303e:	4770      	bx	lr
 8003040:	20000048 	.word	0x20000048
 8003044:	10624dd3 	.word	0x10624dd3

08003048 <memset>:
 8003048:	4603      	mov	r3, r0
 800304a:	4402      	add	r2, r0
 800304c:	4293      	cmp	r3, r2
 800304e:	d100      	bne.n	8003052 <memset+0xa>
 8003050:	4770      	bx	lr
 8003052:	f803 1b01 	strb.w	r1, [r3], #1
 8003056:	e7f9      	b.n	800304c <memset+0x4>

08003058 <__libc_init_array>:
 8003058:	b570      	push	{r4, r5, r6, lr}
 800305a:	2600      	movs	r6, #0
 800305c:	4d0c      	ldr	r5, [pc, #48]	@ (8003090 <__libc_init_array+0x38>)
 800305e:	4c0d      	ldr	r4, [pc, #52]	@ (8003094 <__libc_init_array+0x3c>)
 8003060:	1b64      	subs	r4, r4, r5
 8003062:	10a4      	asrs	r4, r4, #2
 8003064:	42a6      	cmp	r6, r4
 8003066:	d109      	bne.n	800307c <__libc_init_array+0x24>
 8003068:	f000 f81a 	bl	80030a0 <_init>
 800306c:	2600      	movs	r6, #0
 800306e:	4d0a      	ldr	r5, [pc, #40]	@ (8003098 <__libc_init_array+0x40>)
 8003070:	4c0a      	ldr	r4, [pc, #40]	@ (800309c <__libc_init_array+0x44>)
 8003072:	1b64      	subs	r4, r4, r5
 8003074:	10a4      	asrs	r4, r4, #2
 8003076:	42a6      	cmp	r6, r4
 8003078:	d105      	bne.n	8003086 <__libc_init_array+0x2e>
 800307a:	bd70      	pop	{r4, r5, r6, pc}
 800307c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003080:	4798      	blx	r3
 8003082:	3601      	adds	r6, #1
 8003084:	e7ee      	b.n	8003064 <__libc_init_array+0xc>
 8003086:	f855 3b04 	ldr.w	r3, [r5], #4
 800308a:	4798      	blx	r3
 800308c:	3601      	adds	r6, #1
 800308e:	e7f2      	b.n	8003076 <__libc_init_array+0x1e>
 8003090:	080030e8 	.word	0x080030e8
 8003094:	080030e8 	.word	0x080030e8
 8003098:	080030e8 	.word	0x080030e8
 800309c:	080030ec 	.word	0x080030ec

080030a0 <_init>:
 80030a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030a2:	bf00      	nop
 80030a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030a6:	bc08      	pop	{r3}
 80030a8:	469e      	mov	lr, r3
 80030aa:	4770      	bx	lr

080030ac <_fini>:
 80030ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030ae:	bf00      	nop
 80030b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030b2:	bc08      	pop	{r3}
 80030b4:	469e      	mov	lr, r3
 80030b6:	4770      	bx	lr
