
rosserial_imu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aad8  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000450  0800abe8  0800abe8  0000bbe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b038  0800b038  0000d0b0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b038  0800b038  0000c038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b040  0800b040  0000d0b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800b040  0800b040  0000c040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b048  0800b048  0000c048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000b0  20000000  0800b04c  0000d000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004610  200000b0  0800b0fc  0000d0b0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200046c0  0800b0fc  0000d6c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d0b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014d0e  00000000  00000000  0000d0d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a03  00000000  00000000  00021de7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e38  00000000  00000000  000247f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b2d  00000000  00000000  00025628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001897e  00000000  00000000  00026155  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012ae7  00000000  00000000  0003ead3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d1cc  00000000  00000000  000515ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000de786  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004310  00000000  00000000  000de7cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000087  00000000  00000000  000e2adc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000b0 	.word	0x200000b0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800abd0 	.word	0x0800abd0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000b4 	.word	0x200000b4
 800014c:	0800abd0 	.word	0x0800abd0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2f>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a40:	bf24      	itt	cs
 8000a42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a4a:	d90d      	bls.n	8000a68 <__aeabi_d2f+0x30>
 8000a4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a60:	bf08      	it	eq
 8000a62:	f020 0001 	biceq.w	r0, r0, #1
 8000a66:	4770      	bx	lr
 8000a68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a6c:	d121      	bne.n	8000ab2 <__aeabi_d2f+0x7a>
 8000a6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a72:	bfbc      	itt	lt
 8000a74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	4770      	bxlt	lr
 8000a7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a82:	f1c2 0218 	rsb	r2, r2, #24
 8000a86:	f1c2 0c20 	rsb	ip, r2, #32
 8000a8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a92:	bf18      	it	ne
 8000a94:	f040 0001 	orrne.w	r0, r0, #1
 8000a98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aa0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000aa4:	ea40 000c 	orr.w	r0, r0, ip
 8000aa8:	fa23 f302 	lsr.w	r3, r3, r2
 8000aac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ab0:	e7cc      	b.n	8000a4c <__aeabi_d2f+0x14>
 8000ab2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ab6:	d107      	bne.n	8000ac8 <__aeabi_d2f+0x90>
 8000ab8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000abc:	bf1e      	ittt	ne
 8000abe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ac2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ac6:	4770      	bxne	lr
 8000ac8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000acc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ad0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_frsub>:
 8000ad8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000adc:	e002      	b.n	8000ae4 <__addsf3>
 8000ade:	bf00      	nop

08000ae0 <__aeabi_fsub>:
 8000ae0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000ae4 <__addsf3>:
 8000ae4:	0042      	lsls	r2, r0, #1
 8000ae6:	bf1f      	itttt	ne
 8000ae8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000aec:	ea92 0f03 	teqne	r2, r3
 8000af0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000af4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000af8:	d06a      	beq.n	8000bd0 <__addsf3+0xec>
 8000afa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000afe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b02:	bfc1      	itttt	gt
 8000b04:	18d2      	addgt	r2, r2, r3
 8000b06:	4041      	eorgt	r1, r0
 8000b08:	4048      	eorgt	r0, r1
 8000b0a:	4041      	eorgt	r1, r0
 8000b0c:	bfb8      	it	lt
 8000b0e:	425b      	neglt	r3, r3
 8000b10:	2b19      	cmp	r3, #25
 8000b12:	bf88      	it	hi
 8000b14:	4770      	bxhi	lr
 8000b16:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b1a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b1e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4240      	negne	r0, r0
 8000b26:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b2e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b32:	bf18      	it	ne
 8000b34:	4249      	negne	r1, r1
 8000b36:	ea92 0f03 	teq	r2, r3
 8000b3a:	d03f      	beq.n	8000bbc <__addsf3+0xd8>
 8000b3c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b40:	fa41 fc03 	asr.w	ip, r1, r3
 8000b44:	eb10 000c 	adds.w	r0, r0, ip
 8000b48:	f1c3 0320 	rsb	r3, r3, #32
 8000b4c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b50:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b54:	d502      	bpl.n	8000b5c <__addsf3+0x78>
 8000b56:	4249      	negs	r1, r1
 8000b58:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b5c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b60:	d313      	bcc.n	8000b8a <__addsf3+0xa6>
 8000b62:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b66:	d306      	bcc.n	8000b76 <__addsf3+0x92>
 8000b68:	0840      	lsrs	r0, r0, #1
 8000b6a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b6e:	f102 0201 	add.w	r2, r2, #1
 8000b72:	2afe      	cmp	r2, #254	@ 0xfe
 8000b74:	d251      	bcs.n	8000c1a <__addsf3+0x136>
 8000b76:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b7a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b7e:	bf08      	it	eq
 8000b80:	f020 0001 	biceq.w	r0, r0, #1
 8000b84:	ea40 0003 	orr.w	r0, r0, r3
 8000b88:	4770      	bx	lr
 8000b8a:	0049      	lsls	r1, r1, #1
 8000b8c:	eb40 0000 	adc.w	r0, r0, r0
 8000b90:	3a01      	subs	r2, #1
 8000b92:	bf28      	it	cs
 8000b94:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b98:	d2ed      	bcs.n	8000b76 <__addsf3+0x92>
 8000b9a:	fab0 fc80 	clz	ip, r0
 8000b9e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ba2:	ebb2 020c 	subs.w	r2, r2, ip
 8000ba6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000baa:	bfaa      	itet	ge
 8000bac:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bb0:	4252      	neglt	r2, r2
 8000bb2:	4318      	orrge	r0, r3
 8000bb4:	bfbc      	itt	lt
 8000bb6:	40d0      	lsrlt	r0, r2
 8000bb8:	4318      	orrlt	r0, r3
 8000bba:	4770      	bx	lr
 8000bbc:	f092 0f00 	teq	r2, #0
 8000bc0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000bc4:	bf06      	itte	eq
 8000bc6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000bca:	3201      	addeq	r2, #1
 8000bcc:	3b01      	subne	r3, #1
 8000bce:	e7b5      	b.n	8000b3c <__addsf3+0x58>
 8000bd0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bd8:	bf18      	it	ne
 8000bda:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bde:	d021      	beq.n	8000c24 <__addsf3+0x140>
 8000be0:	ea92 0f03 	teq	r2, r3
 8000be4:	d004      	beq.n	8000bf0 <__addsf3+0x10c>
 8000be6:	f092 0f00 	teq	r2, #0
 8000bea:	bf08      	it	eq
 8000bec:	4608      	moveq	r0, r1
 8000bee:	4770      	bx	lr
 8000bf0:	ea90 0f01 	teq	r0, r1
 8000bf4:	bf1c      	itt	ne
 8000bf6:	2000      	movne	r0, #0
 8000bf8:	4770      	bxne	lr
 8000bfa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bfe:	d104      	bne.n	8000c0a <__addsf3+0x126>
 8000c00:	0040      	lsls	r0, r0, #1
 8000c02:	bf28      	it	cs
 8000c04:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c08:	4770      	bx	lr
 8000c0a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c0e:	bf3c      	itt	cc
 8000c10:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c14:	4770      	bxcc	lr
 8000c16:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c1a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c1e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c22:	4770      	bx	lr
 8000c24:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c28:	bf16      	itet	ne
 8000c2a:	4608      	movne	r0, r1
 8000c2c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c30:	4601      	movne	r1, r0
 8000c32:	0242      	lsls	r2, r0, #9
 8000c34:	bf06      	itte	eq
 8000c36:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c3a:	ea90 0f01 	teqeq	r0, r1
 8000c3e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c42:	4770      	bx	lr

08000c44 <__aeabi_ui2f>:
 8000c44:	f04f 0300 	mov.w	r3, #0
 8000c48:	e004      	b.n	8000c54 <__aeabi_i2f+0x8>
 8000c4a:	bf00      	nop

08000c4c <__aeabi_i2f>:
 8000c4c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c50:	bf48      	it	mi
 8000c52:	4240      	negmi	r0, r0
 8000c54:	ea5f 0c00 	movs.w	ip, r0
 8000c58:	bf08      	it	eq
 8000c5a:	4770      	bxeq	lr
 8000c5c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c60:	4601      	mov	r1, r0
 8000c62:	f04f 0000 	mov.w	r0, #0
 8000c66:	e01c      	b.n	8000ca2 <__aeabi_l2f+0x2a>

08000c68 <__aeabi_ul2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f04f 0300 	mov.w	r3, #0
 8000c74:	e00a      	b.n	8000c8c <__aeabi_l2f+0x14>
 8000c76:	bf00      	nop

08000c78 <__aeabi_l2f>:
 8000c78:	ea50 0201 	orrs.w	r2, r0, r1
 8000c7c:	bf08      	it	eq
 8000c7e:	4770      	bxeq	lr
 8000c80:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c84:	d502      	bpl.n	8000c8c <__aeabi_l2f+0x14>
 8000c86:	4240      	negs	r0, r0
 8000c88:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c8c:	ea5f 0c01 	movs.w	ip, r1
 8000c90:	bf02      	ittt	eq
 8000c92:	4684      	moveq	ip, r0
 8000c94:	4601      	moveq	r1, r0
 8000c96:	2000      	moveq	r0, #0
 8000c98:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c9c:	bf08      	it	eq
 8000c9e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000ca2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000ca6:	fabc f28c 	clz	r2, ip
 8000caa:	3a08      	subs	r2, #8
 8000cac:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cb0:	db10      	blt.n	8000cd4 <__aeabi_l2f+0x5c>
 8000cb2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cb6:	4463      	add	r3, ip
 8000cb8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cbc:	f1c2 0220 	rsb	r2, r2, #32
 8000cc0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000cc4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cc8:	eb43 0002 	adc.w	r0, r3, r2
 8000ccc:	bf08      	it	eq
 8000cce:	f020 0001 	biceq.w	r0, r0, #1
 8000cd2:	4770      	bx	lr
 8000cd4:	f102 0220 	add.w	r2, r2, #32
 8000cd8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cdc:	f1c2 0220 	rsb	r2, r2, #32
 8000ce0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ce4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ce8:	eb43 0002 	adc.w	r0, r3, r2
 8000cec:	bf08      	it	eq
 8000cee:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cf2:	4770      	bx	lr

08000cf4 <__aeabi_fmul>:
 8000cf4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000cf8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cfc:	bf1e      	ittt	ne
 8000cfe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d02:	ea92 0f0c 	teqne	r2, ip
 8000d06:	ea93 0f0c 	teqne	r3, ip
 8000d0a:	d06f      	beq.n	8000dec <__aeabi_fmul+0xf8>
 8000d0c:	441a      	add	r2, r3
 8000d0e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d12:	0240      	lsls	r0, r0, #9
 8000d14:	bf18      	it	ne
 8000d16:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d1a:	d01e      	beq.n	8000d5a <__aeabi_fmul+0x66>
 8000d1c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d20:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d24:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d28:	fba0 3101 	umull	r3, r1, r0, r1
 8000d2c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d30:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d34:	bf3e      	ittt	cc
 8000d36:	0049      	lslcc	r1, r1, #1
 8000d38:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d3c:	005b      	lslcc	r3, r3, #1
 8000d3e:	ea40 0001 	orr.w	r0, r0, r1
 8000d42:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d46:	2afd      	cmp	r2, #253	@ 0xfd
 8000d48:	d81d      	bhi.n	8000d86 <__aeabi_fmul+0x92>
 8000d4a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d4e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d52:	bf08      	it	eq
 8000d54:	f020 0001 	biceq.w	r0, r0, #1
 8000d58:	4770      	bx	lr
 8000d5a:	f090 0f00 	teq	r0, #0
 8000d5e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d62:	bf08      	it	eq
 8000d64:	0249      	lsleq	r1, r1, #9
 8000d66:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d6a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d6e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d70:	bfc2      	ittt	gt
 8000d72:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d76:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d7a:	4770      	bxgt	lr
 8000d7c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d80:	f04f 0300 	mov.w	r3, #0
 8000d84:	3a01      	subs	r2, #1
 8000d86:	dc5d      	bgt.n	8000e44 <__aeabi_fmul+0x150>
 8000d88:	f112 0f19 	cmn.w	r2, #25
 8000d8c:	bfdc      	itt	le
 8000d8e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d92:	4770      	bxle	lr
 8000d94:	f1c2 0200 	rsb	r2, r2, #0
 8000d98:	0041      	lsls	r1, r0, #1
 8000d9a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d9e:	f1c2 0220 	rsb	r2, r2, #32
 8000da2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000da6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000daa:	f140 0000 	adc.w	r0, r0, #0
 8000dae:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000db2:	bf08      	it	eq
 8000db4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000db8:	4770      	bx	lr
 8000dba:	f092 0f00 	teq	r2, #0
 8000dbe:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000dc2:	bf02      	ittt	eq
 8000dc4:	0040      	lsleq	r0, r0, #1
 8000dc6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000dca:	3a01      	subeq	r2, #1
 8000dcc:	d0f9      	beq.n	8000dc2 <__aeabi_fmul+0xce>
 8000dce:	ea40 000c 	orr.w	r0, r0, ip
 8000dd2:	f093 0f00 	teq	r3, #0
 8000dd6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000dda:	bf02      	ittt	eq
 8000ddc:	0049      	lsleq	r1, r1, #1
 8000dde:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000de2:	3b01      	subeq	r3, #1
 8000de4:	d0f9      	beq.n	8000dda <__aeabi_fmul+0xe6>
 8000de6:	ea41 010c 	orr.w	r1, r1, ip
 8000dea:	e78f      	b.n	8000d0c <__aeabi_fmul+0x18>
 8000dec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000df0:	ea92 0f0c 	teq	r2, ip
 8000df4:	bf18      	it	ne
 8000df6:	ea93 0f0c 	teqne	r3, ip
 8000dfa:	d00a      	beq.n	8000e12 <__aeabi_fmul+0x11e>
 8000dfc:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e00:	bf18      	it	ne
 8000e02:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e06:	d1d8      	bne.n	8000dba <__aeabi_fmul+0xc6>
 8000e08:	ea80 0001 	eor.w	r0, r0, r1
 8000e0c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e10:	4770      	bx	lr
 8000e12:	f090 0f00 	teq	r0, #0
 8000e16:	bf17      	itett	ne
 8000e18:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e1c:	4608      	moveq	r0, r1
 8000e1e:	f091 0f00 	teqne	r1, #0
 8000e22:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e26:	d014      	beq.n	8000e52 <__aeabi_fmul+0x15e>
 8000e28:	ea92 0f0c 	teq	r2, ip
 8000e2c:	d101      	bne.n	8000e32 <__aeabi_fmul+0x13e>
 8000e2e:	0242      	lsls	r2, r0, #9
 8000e30:	d10f      	bne.n	8000e52 <__aeabi_fmul+0x15e>
 8000e32:	ea93 0f0c 	teq	r3, ip
 8000e36:	d103      	bne.n	8000e40 <__aeabi_fmul+0x14c>
 8000e38:	024b      	lsls	r3, r1, #9
 8000e3a:	bf18      	it	ne
 8000e3c:	4608      	movne	r0, r1
 8000e3e:	d108      	bne.n	8000e52 <__aeabi_fmul+0x15e>
 8000e40:	ea80 0001 	eor.w	r0, r0, r1
 8000e44:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e48:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e4c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e50:	4770      	bx	lr
 8000e52:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e56:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e5a:	4770      	bx	lr

08000e5c <__aeabi_fdiv>:
 8000e5c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e60:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e64:	bf1e      	ittt	ne
 8000e66:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e6a:	ea92 0f0c 	teqne	r2, ip
 8000e6e:	ea93 0f0c 	teqne	r3, ip
 8000e72:	d069      	beq.n	8000f48 <__aeabi_fdiv+0xec>
 8000e74:	eba2 0203 	sub.w	r2, r2, r3
 8000e78:	ea80 0c01 	eor.w	ip, r0, r1
 8000e7c:	0249      	lsls	r1, r1, #9
 8000e7e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e82:	d037      	beq.n	8000ef4 <__aeabi_fdiv+0x98>
 8000e84:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e88:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e8c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e90:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e94:	428b      	cmp	r3, r1
 8000e96:	bf38      	it	cc
 8000e98:	005b      	lslcc	r3, r3, #1
 8000e9a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e9e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ea2:	428b      	cmp	r3, r1
 8000ea4:	bf24      	itt	cs
 8000ea6:	1a5b      	subcs	r3, r3, r1
 8000ea8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000eac:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000eb0:	bf24      	itt	cs
 8000eb2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000eb6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eba:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ebe:	bf24      	itt	cs
 8000ec0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ec4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ec8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ecc:	bf24      	itt	cs
 8000ece:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ed2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ed6:	011b      	lsls	r3, r3, #4
 8000ed8:	bf18      	it	ne
 8000eda:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ede:	d1e0      	bne.n	8000ea2 <__aeabi_fdiv+0x46>
 8000ee0:	2afd      	cmp	r2, #253	@ 0xfd
 8000ee2:	f63f af50 	bhi.w	8000d86 <__aeabi_fmul+0x92>
 8000ee6:	428b      	cmp	r3, r1
 8000ee8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eec:	bf08      	it	eq
 8000eee:	f020 0001 	biceq.w	r0, r0, #1
 8000ef2:	4770      	bx	lr
 8000ef4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ef8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000efc:	327f      	adds	r2, #127	@ 0x7f
 8000efe:	bfc2      	ittt	gt
 8000f00:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f04:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f08:	4770      	bxgt	lr
 8000f0a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f0e:	f04f 0300 	mov.w	r3, #0
 8000f12:	3a01      	subs	r2, #1
 8000f14:	e737      	b.n	8000d86 <__aeabi_fmul+0x92>
 8000f16:	f092 0f00 	teq	r2, #0
 8000f1a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f1e:	bf02      	ittt	eq
 8000f20:	0040      	lsleq	r0, r0, #1
 8000f22:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f26:	3a01      	subeq	r2, #1
 8000f28:	d0f9      	beq.n	8000f1e <__aeabi_fdiv+0xc2>
 8000f2a:	ea40 000c 	orr.w	r0, r0, ip
 8000f2e:	f093 0f00 	teq	r3, #0
 8000f32:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f36:	bf02      	ittt	eq
 8000f38:	0049      	lsleq	r1, r1, #1
 8000f3a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f3e:	3b01      	subeq	r3, #1
 8000f40:	d0f9      	beq.n	8000f36 <__aeabi_fdiv+0xda>
 8000f42:	ea41 010c 	orr.w	r1, r1, ip
 8000f46:	e795      	b.n	8000e74 <__aeabi_fdiv+0x18>
 8000f48:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f4c:	ea92 0f0c 	teq	r2, ip
 8000f50:	d108      	bne.n	8000f64 <__aeabi_fdiv+0x108>
 8000f52:	0242      	lsls	r2, r0, #9
 8000f54:	f47f af7d 	bne.w	8000e52 <__aeabi_fmul+0x15e>
 8000f58:	ea93 0f0c 	teq	r3, ip
 8000f5c:	f47f af70 	bne.w	8000e40 <__aeabi_fmul+0x14c>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e776      	b.n	8000e52 <__aeabi_fmul+0x15e>
 8000f64:	ea93 0f0c 	teq	r3, ip
 8000f68:	d104      	bne.n	8000f74 <__aeabi_fdiv+0x118>
 8000f6a:	024b      	lsls	r3, r1, #9
 8000f6c:	f43f af4c 	beq.w	8000e08 <__aeabi_fmul+0x114>
 8000f70:	4608      	mov	r0, r1
 8000f72:	e76e      	b.n	8000e52 <__aeabi_fmul+0x15e>
 8000f74:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f78:	bf18      	it	ne
 8000f7a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f7e:	d1ca      	bne.n	8000f16 <__aeabi_fdiv+0xba>
 8000f80:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f84:	f47f af5c 	bne.w	8000e40 <__aeabi_fmul+0x14c>
 8000f88:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f8c:	f47f af3c 	bne.w	8000e08 <__aeabi_fmul+0x114>
 8000f90:	e75f      	b.n	8000e52 <__aeabi_fmul+0x15e>
 8000f92:	bf00      	nop

08000f94 <quat_mult>:

status_t MadgwickFilter_Update_MARG(MadgwickFilter_t *filter, float gx, float gy, float gz, float ax, float ay, float az, float mx, float my, float mz);

// Multiply two quaternions and return a copy of the result, prod = L * R
static Quaternion_t quat_mult(Quaternion_t L, Quaternion_t R)
{
 8000f94:	b084      	sub	sp, #16
 8000f96:	b590      	push	{r4, r7, lr}
 8000f98:	b087      	sub	sp, #28
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	6078      	str	r0, [r7, #4]
 8000f9e:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8000fa2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    Quaternion_t product;
    product.q0 = (L.q0 * R.q0) - (L.q1 * R.q1) - (L.q2 * R.q2) - (L.q3 * R.q3);
 8000fa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000fa8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000faa:	4611      	mov	r1, r2
 8000fac:	4618      	mov	r0, r3
 8000fae:	f7ff fea1 	bl	8000cf4 <__aeabi_fmul>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	461c      	mov	r4, r3
 8000fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000fb8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000fba:	4611      	mov	r1, r2
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff fe99 	bl	8000cf4 <__aeabi_fmul>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4620      	mov	r0, r4
 8000fc8:	f7ff fd8a 	bl	8000ae0 <__aeabi_fsub>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	461c      	mov	r4, r3
 8000fd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000fd2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000fd4:	4611      	mov	r1, r2
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f7ff fe8c 	bl	8000cf4 <__aeabi_fmul>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4620      	mov	r0, r4
 8000fe2:	f7ff fd7d 	bl	8000ae0 <__aeabi_fsub>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	461c      	mov	r4, r3
 8000fea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000fec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8000fee:	4611      	mov	r1, r2
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff fe7f 	bl	8000cf4 <__aeabi_fmul>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4620      	mov	r0, r4
 8000ffc:	f7ff fd70 	bl	8000ae0 <__aeabi_fsub>
 8001000:	4603      	mov	r3, r0
 8001002:	60bb      	str	r3, [r7, #8]
    product.q1 = (L.q0 * R.q1) + (L.q1 * R.q0) + (L.q2 * R.q3) - (L.q3 * R.q2);
 8001004:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001006:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001008:	4611      	mov	r1, r2
 800100a:	4618      	mov	r0, r3
 800100c:	f7ff fe72 	bl	8000cf4 <__aeabi_fmul>
 8001010:	4603      	mov	r3, r0
 8001012:	461c      	mov	r4, r3
 8001014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001016:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001018:	4611      	mov	r1, r2
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff fe6a 	bl	8000cf4 <__aeabi_fmul>
 8001020:	4603      	mov	r3, r0
 8001022:	4619      	mov	r1, r3
 8001024:	4620      	mov	r0, r4
 8001026:	f7ff fd5d 	bl	8000ae4 <__addsf3>
 800102a:	4603      	mov	r3, r0
 800102c:	461c      	mov	r4, r3
 800102e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001030:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001032:	4611      	mov	r1, r2
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff fe5d 	bl	8000cf4 <__aeabi_fmul>
 800103a:	4603      	mov	r3, r0
 800103c:	4619      	mov	r1, r3
 800103e:	4620      	mov	r0, r4
 8001040:	f7ff fd50 	bl	8000ae4 <__addsf3>
 8001044:	4603      	mov	r3, r0
 8001046:	461c      	mov	r4, r3
 8001048:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800104a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800104c:	4611      	mov	r1, r2
 800104e:	4618      	mov	r0, r3
 8001050:	f7ff fe50 	bl	8000cf4 <__aeabi_fmul>
 8001054:	4603      	mov	r3, r0
 8001056:	4619      	mov	r1, r3
 8001058:	4620      	mov	r0, r4
 800105a:	f7ff fd41 	bl	8000ae0 <__aeabi_fsub>
 800105e:	4603      	mov	r3, r0
 8001060:	60fb      	str	r3, [r7, #12]
    product.q2 = (L.q0 * R.q2) - (L.q1 * R.q3) + (L.q2 * R.q0) + (L.q3 * R.q1);
 8001062:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001064:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001066:	4611      	mov	r1, r2
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff fe43 	bl	8000cf4 <__aeabi_fmul>
 800106e:	4603      	mov	r3, r0
 8001070:	461c      	mov	r4, r3
 8001072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001074:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001076:	4611      	mov	r1, r2
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff fe3b 	bl	8000cf4 <__aeabi_fmul>
 800107e:	4603      	mov	r3, r0
 8001080:	4619      	mov	r1, r3
 8001082:	4620      	mov	r0, r4
 8001084:	f7ff fd2c 	bl	8000ae0 <__aeabi_fsub>
 8001088:	4603      	mov	r3, r0
 800108a:	461c      	mov	r4, r3
 800108c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800108e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001090:	4611      	mov	r1, r2
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff fe2e 	bl	8000cf4 <__aeabi_fmul>
 8001098:	4603      	mov	r3, r0
 800109a:	4619      	mov	r1, r3
 800109c:	4620      	mov	r0, r4
 800109e:	f7ff fd21 	bl	8000ae4 <__addsf3>
 80010a2:	4603      	mov	r3, r0
 80010a4:	461c      	mov	r4, r3
 80010a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80010a8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80010aa:	4611      	mov	r1, r2
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff fe21 	bl	8000cf4 <__aeabi_fmul>
 80010b2:	4603      	mov	r3, r0
 80010b4:	4619      	mov	r1, r3
 80010b6:	4620      	mov	r0, r4
 80010b8:	f7ff fd14 	bl	8000ae4 <__addsf3>
 80010bc:	4603      	mov	r3, r0
 80010be:	613b      	str	r3, [r7, #16]
    product.q3 = (L.q0 * R.q3) + (L.q1 * R.q2) - (L.q2 * R.q1) + (L.q3 * R.q0);
 80010c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80010c4:	4611      	mov	r1, r2
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff fe14 	bl	8000cf4 <__aeabi_fmul>
 80010cc:	4603      	mov	r3, r0
 80010ce:	461c      	mov	r4, r3
 80010d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80010d4:	4611      	mov	r1, r2
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff fe0c 	bl	8000cf4 <__aeabi_fmul>
 80010dc:	4603      	mov	r3, r0
 80010de:	4619      	mov	r1, r3
 80010e0:	4620      	mov	r0, r4
 80010e2:	f7ff fcff 	bl	8000ae4 <__addsf3>
 80010e6:	4603      	mov	r3, r0
 80010e8:	461c      	mov	r4, r3
 80010ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010ec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80010ee:	4611      	mov	r1, r2
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff fdff 	bl	8000cf4 <__aeabi_fmul>
 80010f6:	4603      	mov	r3, r0
 80010f8:	4619      	mov	r1, r3
 80010fa:	4620      	mov	r0, r4
 80010fc:	f7ff fcf0 	bl	8000ae0 <__aeabi_fsub>
 8001100:	4603      	mov	r3, r0
 8001102:	461c      	mov	r4, r3
 8001104:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001106:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001108:	4611      	mov	r1, r2
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff fdf2 	bl	8000cf4 <__aeabi_fmul>
 8001110:	4603      	mov	r3, r0
 8001112:	4619      	mov	r1, r3
 8001114:	4620      	mov	r0, r4
 8001116:	f7ff fce5 	bl	8000ae4 <__addsf3>
 800111a:	4603      	mov	r3, r0
 800111c:	617b      	str	r3, [r7, #20]
    
    return product;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	461c      	mov	r4, r3
 8001122:	f107 0308 	add.w	r3, r7, #8
 8001126:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001128:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800112c:	6878      	ldr	r0, [r7, #4]
 800112e:	371c      	adds	r7, #28
 8001130:	46bd      	mov	sp, r7
 8001132:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001136:	b004      	add	sp, #16
 8001138:	4770      	bx	lr

0800113a <quat_scalar>:

// Multiply a reference of a quaternion by a scalar, q = s*q
static Quaternion_t quat_scalar(Quaternion_t q, float scalar)
{
 800113a:	b084      	sub	sp, #16
 800113c:	b590      	push	{r4, r7, lr}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	f107 001c 	add.w	r0, r7, #28
 8001148:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    q.q0 *= scalar;
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff fdcf 	bl	8000cf4 <__aeabi_fmul>
 8001156:	4603      	mov	r3, r0
 8001158:	61fb      	str	r3, [r7, #28]
    q.q1 *= scalar;
 800115a:	6a3b      	ldr	r3, [r7, #32]
 800115c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff fdc8 	bl	8000cf4 <__aeabi_fmul>
 8001164:	4603      	mov	r3, r0
 8001166:	623b      	str	r3, [r7, #32]
    q.q2 *= scalar;
 8001168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800116a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff fdc1 	bl	8000cf4 <__aeabi_fmul>
 8001172:	4603      	mov	r3, r0
 8001174:	627b      	str	r3, [r7, #36]	@ 0x24
    q.q3 *= scalar;
 8001176:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001178:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff fdba 	bl	8000cf4 <__aeabi_fmul>
 8001180:	4603      	mov	r3, r0
 8001182:	62bb      	str	r3, [r7, #40]	@ 0x28

    return q;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	461c      	mov	r4, r3
 8001188:	f107 031c 	add.w	r3, r7, #28
 800118c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800118e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	370c      	adds	r7, #12
 8001196:	46bd      	mov	sp, r7
 8001198:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800119c:	b004      	add	sp, #16
 800119e:	4770      	bx	lr

080011a0 <quat_add>:

// Adds two quaternions together and the sum is the pointer to another quaternion, Sum = L + R
static Quaternion_t quat_add(Quaternion_t L, Quaternion_t R)
{
 80011a0:	b084      	sub	sp, #16
 80011a2:	b590      	push	{r4, r7, lr}
 80011a4:	b087      	sub	sp, #28
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	6078      	str	r0, [r7, #4]
 80011aa:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 80011ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    Quaternion_t sum;
    sum.q0 = L.q0 + R.q0;
 80011b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011b4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80011b6:	4611      	mov	r1, r2
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff fc93 	bl	8000ae4 <__addsf3>
 80011be:	4603      	mov	r3, r0
 80011c0:	60bb      	str	r3, [r7, #8]
    sum.q1 = L.q1 + R.q1;
 80011c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80011c4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80011c6:	4611      	mov	r1, r2
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff fc8b 	bl	8000ae4 <__addsf3>
 80011ce:	4603      	mov	r3, r0
 80011d0:	60fb      	str	r3, [r7, #12]
    sum.q2 = L.q2 + R.q2;
 80011d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011d4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80011d6:	4611      	mov	r1, r2
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff fc83 	bl	8000ae4 <__addsf3>
 80011de:	4603      	mov	r3, r0
 80011e0:	613b      	str	r3, [r7, #16]
    sum.q3 = L.q3 + R.q3;
 80011e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80011e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80011e6:	4611      	mov	r1, r2
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff fc7b 	bl	8000ae4 <__addsf3>
 80011ee:	4603      	mov	r3, r0
 80011f0:	617b      	str	r3, [r7, #20]

    return sum;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	461c      	mov	r4, r3
 80011f6:	f107 0308 	add.w	r3, r7, #8
 80011fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001200:	6878      	ldr	r0, [r7, #4]
 8001202:	371c      	adds	r7, #28
 8001204:	46bd      	mov	sp, r7
 8001206:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800120a:	b004      	add	sp, #16
 800120c:	4770      	bx	lr

0800120e <quat_sub>:

// Subtracts two quaternions together and the sum is the pointer to another quaternion, sum = L - R
static Quaternion_t quat_sub(Quaternion_t L, Quaternion_t R)
{
 800120e:	b084      	sub	sp, #16
 8001210:	b590      	push	{r4, r7, lr}
 8001212:	b087      	sub	sp, #28
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 800121c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    Quaternion_t sum;
    sum.q0 = L.q0 - R.q0;
 8001220:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001222:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001224:	4611      	mov	r1, r2
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff fc5a 	bl	8000ae0 <__aeabi_fsub>
 800122c:	4603      	mov	r3, r0
 800122e:	60bb      	str	r3, [r7, #8]
    sum.q1 = L.q1 - R.q1;
 8001230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001232:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001234:	4611      	mov	r1, r2
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff fc52 	bl	8000ae0 <__aeabi_fsub>
 800123c:	4603      	mov	r3, r0
 800123e:	60fb      	str	r3, [r7, #12]
    sum.q2 = L.q2 - R.q2;
 8001240:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001242:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001244:	4611      	mov	r1, r2
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff fc4a 	bl	8000ae0 <__aeabi_fsub>
 800124c:	4603      	mov	r3, r0
 800124e:	613b      	str	r3, [r7, #16]
    sum.q3 = L.q3 - R.q3;
 8001250:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001252:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001254:	4611      	mov	r1, r2
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff fc42 	bl	8000ae0 <__aeabi_fsub>
 800125c:	4603      	mov	r3, r0
 800125e:	617b      	str	r3, [r7, #20]

    return sum;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	461c      	mov	r4, r3
 8001264:	f107 0308 	add.w	r3, r7, #8
 8001268:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800126a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	371c      	adds	r7, #28
 8001272:	46bd      	mov	sp, r7
 8001274:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001278:	b004      	add	sp, #16
 800127a:	4770      	bx	lr

0800127c <quat_Norm>:

    return q;
}

static float quat_Norm (Quaternion_t q)
{
 800127c:	b590      	push	{r4, r7, lr}
 800127e:	b085      	sub	sp, #20
 8001280:	af00      	add	r7, sp, #0
 8001282:	463c      	mov	r4, r7
 8001284:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return sqrt(q.q0*q.q0 + q.q1*q.q1 + q.q2*q.q2 +q.q3*q.q3);
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	683a      	ldr	r2, [r7, #0]
 800128c:	4611      	mov	r1, r2
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff fd30 	bl	8000cf4 <__aeabi_fmul>
 8001294:	4603      	mov	r3, r0
 8001296:	461c      	mov	r4, r3
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	4611      	mov	r1, r2
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff fd28 	bl	8000cf4 <__aeabi_fmul>
 80012a4:	4603      	mov	r3, r0
 80012a6:	4619      	mov	r1, r3
 80012a8:	4620      	mov	r0, r4
 80012aa:	f7ff fc1b 	bl	8000ae4 <__addsf3>
 80012ae:	4603      	mov	r3, r0
 80012b0:	461c      	mov	r4, r3
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	68ba      	ldr	r2, [r7, #8]
 80012b6:	4611      	mov	r1, r2
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff fd1b 	bl	8000cf4 <__aeabi_fmul>
 80012be:	4603      	mov	r3, r0
 80012c0:	4619      	mov	r1, r3
 80012c2:	4620      	mov	r0, r4
 80012c4:	f7ff fc0e 	bl	8000ae4 <__addsf3>
 80012c8:	4603      	mov	r3, r0
 80012ca:	461c      	mov	r4, r3
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	68fa      	ldr	r2, [r7, #12]
 80012d0:	4611      	mov	r1, r2
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff fd0e 	bl	8000cf4 <__aeabi_fmul>
 80012d8:	4603      	mov	r3, r0
 80012da:	4619      	mov	r1, r3
 80012dc:	4620      	mov	r0, r4
 80012de:	f7ff fc01 	bl	8000ae4 <__addsf3>
 80012e2:	4603      	mov	r3, r0
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff f89f 	bl	8000428 <__aeabi_f2d>
 80012ea:	4602      	mov	r2, r0
 80012ec:	460b      	mov	r3, r1
 80012ee:	4610      	mov	r0, r2
 80012f0:	4619      	mov	r1, r3
 80012f2:	f009 f9ed 	bl	800a6d0 <sqrt>
 80012f6:	4602      	mov	r2, r0
 80012f8:	460b      	mov	r3, r1
 80012fa:	4610      	mov	r0, r2
 80012fc:	4619      	mov	r1, r3
 80012fe:	f7ff fb9b 	bl	8000a38 <__aeabi_d2f>
 8001302:	4603      	mov	r3, r0
}
 8001304:	4618      	mov	r0, r3
 8001306:	3714      	adds	r7, #20
 8001308:	46bd      	mov	sp, r7
 800130a:	bd90      	pop	{r4, r7, pc}

0800130c <quat_Normalize>:

// Normalizes pointer q by calling quat_Norm(q),
static void quat_Normalize(Quaternion_t *q)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
    float norm = quat_Norm(*q);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001318:	f7ff ffb0 	bl	800127c <quat_Norm>
 800131c:	60f8      	str	r0, [r7, #12]
    q -> q0 /= norm;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	68f9      	ldr	r1, [r7, #12]
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff fd99 	bl	8000e5c <__aeabi_fdiv>
 800132a:	4603      	mov	r3, r0
 800132c:	461a      	mov	r2, r3
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	601a      	str	r2, [r3, #0]
    q -> q1 /= norm;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	68f9      	ldr	r1, [r7, #12]
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff fd8f 	bl	8000e5c <__aeabi_fdiv>
 800133e:	4603      	mov	r3, r0
 8001340:	461a      	mov	r2, r3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	605a      	str	r2, [r3, #4]
    q -> q2 /= norm;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	68f9      	ldr	r1, [r7, #12]
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff fd85 	bl	8000e5c <__aeabi_fdiv>
 8001352:	4603      	mov	r3, r0
 8001354:	461a      	mov	r2, r3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	609a      	str	r2, [r3, #8]
    q -> q3 /= norm;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	68db      	ldr	r3, [r3, #12]
 800135e:	68f9      	ldr	r1, [r7, #12]
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff fd7b 	bl	8000e5c <__aeabi_fdiv>
 8001366:	4603      	mov	r3, r0
 8001368:	461a      	mov	r2, r3
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	60da      	str	r2, [r3, #12]
}
 800136e:	bf00      	nop
 8001370:	3710      	adds	r7, #16
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}

08001376 <MadgwickFilter_Init>:
#include "madgwick_filter.h"

status_t MadgwickFilter_Init(MadgwickFilter_t *filter, MadgwickFilter_Handle_t handle)
{
 8001376:	b580      	push	{r7, lr}
 8001378:	b084      	sub	sp, #16
 800137a:	af00      	add	r7, sp, #0
 800137c:	60f8      	str	r0, [r7, #12]
 800137e:	1d3b      	adds	r3, r7, #4
 8001380:	e883 0006 	stmia.w	r3, {r1, r2}
    filter->q.q0 = 1.0f;
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800138a:	601a      	str	r2, [r3, #0]
    filter->q.q1 = 0.0f;
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	f04f 0200 	mov.w	r2, #0
 8001392:	605a      	str	r2, [r3, #4]
    filter->q.q2 = 0.0f;
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	f04f 0200 	mov.w	r2, #0
 800139a:	609a      	str	r2, [r3, #8]
    filter->q.q3 = 0.0f;
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	f04f 0200 	mov.w	r2, #0
 80013a2:	60da      	str	r2, [r3, #12]

    MadgwickFilter_SetBeta(filter, handle.beta);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	4619      	mov	r1, r3
 80013a8:	68f8      	ldr	r0, [r7, #12]
 80013aa:	f000 f80a 	bl	80013c2 <MadgwickFilter_SetBeta>
    MadgwickFilter_SetSampleRate(filter, handle.sample_rate);
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	4619      	mov	r1, r3
 80013b2:	68f8      	ldr	r0, [r7, #12]
 80013b4:	f000 f813 	bl	80013de <MadgwickFilter_SetSampleRate>

    return STATUS_OK;
 80013b8:	2300      	movs	r3, #0
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3710      	adds	r7, #16
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}

080013c2 <MadgwickFilter_SetBeta>:

status_t MadgwickFilter_SetBeta(MadgwickFilter_t *filter, float beta)
{
 80013c2:	b480      	push	{r7}
 80013c4:	b083      	sub	sp, #12
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	6078      	str	r0, [r7, #4]
 80013ca:	6039      	str	r1, [r7, #0]
    filter->beta = beta;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	683a      	ldr	r2, [r7, #0]
 80013d0:	611a      	str	r2, [r3, #16]

    return STATUS_OK;
 80013d2:	2300      	movs	r3, #0
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	370c      	adds	r7, #12
 80013d8:	46bd      	mov	sp, r7
 80013da:	bc80      	pop	{r7}
 80013dc:	4770      	bx	lr

080013de <MadgwickFilter_SetSampleRate>:

status_t MadgwickFilter_SetSampleRate(MadgwickFilter_t *filter, float rate)
{
 80013de:	b480      	push	{r7}
 80013e0:	b083      	sub	sp, #12
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
 80013e6:	6039      	str	r1, [r7, #0]
    filter->sample_rate = rate;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	683a      	ldr	r2, [r7, #0]
 80013ec:	615a      	str	r2, [r3, #20]

    return STATUS_OK;
 80013ee:	2300      	movs	r3, #0
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	370c      	adds	r7, #12
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bc80      	pop	{r7}
 80013f8:	4770      	bx	lr
	...

080013fc <MadgwickFilter_Update_IMU>:

status_t MadgwickFilter_Update_IMU(MadgwickFilter_t *filter, float gx, float gy, float gz, float ax, float ay, float az)
{
 80013fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013fe:	b0b3      	sub	sp, #204	@ 0xcc
 8001400:	af06      	add	r7, sp, #24
 8001402:	61f8      	str	r0, [r7, #28]
 8001404:	61b9      	str	r1, [r7, #24]
 8001406:	617a      	str	r2, [r7, #20]
 8001408:	613b      	str	r3, [r7, #16]
    //Variables and constants
    Quaternion_t q_est_prev = filter->q;
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	f107 04a0 	add.w	r4, r7, #160	@ 0xa0
 8001410:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001412:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    Quaternion_t q_est_dot = {0};            // used as a place holder in equations 42 and 43
 8001416:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800141a:	2200      	movs	r2, #0
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	605a      	str	r2, [r3, #4]
 8001420:	609a      	str	r2, [r3, #8]
 8001422:	60da      	str	r2, [r3, #12]
    //const struct quaternion q_g_ref = {0, 0, 0, 1};// equation (23), reference to field of gravity for gradient descent optimization (not needed because I used eq 25 instead of eq 21
    Quaternion_t q_a = {0, ax, ay, az};    // equation (24) raw acceleration values, needs to be normalized
 8001424:	f04f 0300 	mov.w	r3, #0
 8001428:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800142c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001430:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001434:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001438:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800143c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001440:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    
    float F_g [3] = {0};                        // equation(15/21/25) objective function for gravity
 8001444:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	605a      	str	r2, [r3, #4]
 800144e:	609a      	str	r2, [r3, #8]
    float J_g [3][4] = {0};                     // jacobian matrix for gravity
 8001450:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001454:	2230      	movs	r2, #48	@ 0x30
 8001456:	2100      	movs	r1, #0
 8001458:	4618      	mov	r0, r3
 800145a:	f009 fa69 	bl	800a930 <memset>
    
    Quaternion_t gradient = {0};
 800145e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001462:	2200      	movs	r2, #0
 8001464:	601a      	str	r2, [r3, #0]
 8001466:	605a      	str	r2, [r3, #4]
 8001468:	609a      	str	r2, [r3, #8]
 800146a:	60da      	str	r2, [r3, #12]
    
    /* Integrate angluar velocity to obtain position in angles. */
    Quaternion_t q_w;                   // equation (10), places gyroscope readings in a quaternion
    q_w.q0 = 0;                              // the real component is zero, which the Madgwick uses to simplfy quat. mult.
 800146c:	f04f 0300 	mov.w	r3, #0
 8001470:	627b      	str	r3, [r7, #36]	@ 0x24
    q_w.q1 = gx;
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	62bb      	str	r3, [r7, #40]	@ 0x28
    q_w.q2 = gy;
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	62fb      	str	r3, [r7, #44]	@ 0x2c
    q_w.q3 = gz;
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	633b      	str	r3, [r7, #48]	@ 0x30
    
    q_w = quat_mult(q_est_prev, q_w);        // equation (12)
 800147e:	f107 0524 	add.w	r5, r7, #36	@ 0x24
 8001482:	ac01      	add	r4, sp, #4
 8001484:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001488:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800148a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800148e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001492:	9300      	str	r3, [sp, #0]
 8001494:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8001498:	cb0e      	ldmia	r3, {r1, r2, r3}
 800149a:	4628      	mov	r0, r5
 800149c:	f7ff fd7a 	bl	8000f94 <quat_mult>
    q_w = quat_scalar(q_w, 0.5);                  // equation (12) dq/dt = (1/2)q*w
 80014a0:	4638      	mov	r0, r7
 80014a2:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 80014a6:	9301      	str	r3, [sp, #4]
 80014a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80014aa:	9300      	str	r3, [sp, #0]
 80014ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014b2:	f7ff fe42 	bl	800113a <quat_scalar>
 80014b6:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 80014ba:	463b      	mov	r3, r7
 80014bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014be:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
     The matrix multiplcation can also be done hard coded to reduce code.
     
     Note: it is possible to compute the objective function with quaternion multiplcation functions, but it does not take into account the many zeros that cancel terms out and is not optimized like the paper shows
     */
    
    quat_Normalize(&q_a);              // normalize the acceleration quaternion to be a unit quaternion
 80014c2:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff ff20 	bl	800130c <quat_Normalize>
    //Compute the objective function for gravity, equation(15), simplified to equation (25) due to the 0's in the acceleration reference quaternion
    F_g[0] = 2*(q_est_prev.q1 * q_est_prev.q3 - q_est_prev.q0 * q_est_prev.q2) - q_a.q1;
 80014cc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80014d0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80014d4:	4611      	mov	r1, r2
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff fc0c 	bl	8000cf4 <__aeabi_fmul>
 80014dc:	4603      	mov	r3, r0
 80014de:	461c      	mov	r4, r3
 80014e0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80014e4:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80014e8:	4611      	mov	r1, r2
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7ff fc02 	bl	8000cf4 <__aeabi_fmul>
 80014f0:	4603      	mov	r3, r0
 80014f2:	4619      	mov	r1, r3
 80014f4:	4620      	mov	r0, r4
 80014f6:	f7ff faf3 	bl	8000ae0 <__aeabi_fsub>
 80014fa:	4603      	mov	r3, r0
 80014fc:	4619      	mov	r1, r3
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff faf0 	bl	8000ae4 <__addsf3>
 8001504:	4603      	mov	r3, r0
 8001506:	461a      	mov	r2, r3
 8001508:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800150c:	4619      	mov	r1, r3
 800150e:	4610      	mov	r0, r2
 8001510:	f7ff fae6 	bl	8000ae0 <__aeabi_fsub>
 8001514:	4603      	mov	r3, r0
 8001516:	677b      	str	r3, [r7, #116]	@ 0x74
    F_g[1] = 2*(q_est_prev.q0 * q_est_prev.q1 + q_est_prev.q2* q_est_prev.q3) - q_a.q2;
 8001518:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800151c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8001520:	4611      	mov	r1, r2
 8001522:	4618      	mov	r0, r3
 8001524:	f7ff fbe6 	bl	8000cf4 <__aeabi_fmul>
 8001528:	4603      	mov	r3, r0
 800152a:	461c      	mov	r4, r3
 800152c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001530:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8001534:	4611      	mov	r1, r2
 8001536:	4618      	mov	r0, r3
 8001538:	f7ff fbdc 	bl	8000cf4 <__aeabi_fmul>
 800153c:	4603      	mov	r3, r0
 800153e:	4619      	mov	r1, r3
 8001540:	4620      	mov	r0, r4
 8001542:	f7ff facf 	bl	8000ae4 <__addsf3>
 8001546:	4603      	mov	r3, r0
 8001548:	4619      	mov	r1, r3
 800154a:	4618      	mov	r0, r3
 800154c:	f7ff faca 	bl	8000ae4 <__addsf3>
 8001550:	4603      	mov	r3, r0
 8001552:	461a      	mov	r2, r3
 8001554:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001558:	4619      	mov	r1, r3
 800155a:	4610      	mov	r0, r2
 800155c:	f7ff fac0 	bl	8000ae0 <__aeabi_fsub>
 8001560:	4603      	mov	r3, r0
 8001562:	67bb      	str	r3, [r7, #120]	@ 0x78
    F_g[2] = 2*(0.5 - q_est_prev.q1 * q_est_prev.q1 - q_est_prev.q2 * q_est_prev.q2) - q_a.q3;
 8001564:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001568:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800156c:	4611      	mov	r1, r2
 800156e:	4618      	mov	r0, r3
 8001570:	f7ff fbc0 	bl	8000cf4 <__aeabi_fmul>
 8001574:	4603      	mov	r3, r0
 8001576:	4618      	mov	r0, r3
 8001578:	f7fe ff56 	bl	8000428 <__aeabi_f2d>
 800157c:	4602      	mov	r2, r0
 800157e:	460b      	mov	r3, r1
 8001580:	f04f 0000 	mov.w	r0, #0
 8001584:	49ab      	ldr	r1, [pc, #684]	@ (8001834 <MadgwickFilter_Update_IMU+0x438>)
 8001586:	f7fe fdef 	bl	8000168 <__aeabi_dsub>
 800158a:	4602      	mov	r2, r0
 800158c:	460b      	mov	r3, r1
 800158e:	4614      	mov	r4, r2
 8001590:	461d      	mov	r5, r3
 8001592:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001596:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800159a:	4611      	mov	r1, r2
 800159c:	4618      	mov	r0, r3
 800159e:	f7ff fba9 	bl	8000cf4 <__aeabi_fmul>
 80015a2:	4603      	mov	r3, r0
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7fe ff3f 	bl	8000428 <__aeabi_f2d>
 80015aa:	4602      	mov	r2, r0
 80015ac:	460b      	mov	r3, r1
 80015ae:	4620      	mov	r0, r4
 80015b0:	4629      	mov	r1, r5
 80015b2:	f7fe fdd9 	bl	8000168 <__aeabi_dsub>
 80015b6:	4602      	mov	r2, r0
 80015b8:	460b      	mov	r3, r1
 80015ba:	4610      	mov	r0, r2
 80015bc:	4619      	mov	r1, r3
 80015be:	4602      	mov	r2, r0
 80015c0:	460b      	mov	r3, r1
 80015c2:	f7fe fdd3 	bl	800016c <__adddf3>
 80015c6:	4602      	mov	r2, r0
 80015c8:	460b      	mov	r3, r1
 80015ca:	4614      	mov	r4, r2
 80015cc:	461d      	mov	r5, r3
 80015ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7fe ff28 	bl	8000428 <__aeabi_f2d>
 80015d8:	4602      	mov	r2, r0
 80015da:	460b      	mov	r3, r1
 80015dc:	4620      	mov	r0, r4
 80015de:	4629      	mov	r1, r5
 80015e0:	f7fe fdc2 	bl	8000168 <__aeabi_dsub>
 80015e4:	4602      	mov	r2, r0
 80015e6:	460b      	mov	r3, r1
 80015e8:	4610      	mov	r0, r2
 80015ea:	4619      	mov	r1, r3
 80015ec:	f7ff fa24 	bl	8000a38 <__aeabi_d2f>
 80015f0:	4603      	mov	r3, r0
 80015f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    
    //Compute the Jacobian matrix, equation (26), for gravity
    J_g[0][0] = -2 * q_est_prev.q2;
 80015f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80015f8:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7ff fb79 	bl	8000cf4 <__aeabi_fmul>
 8001602:	4603      	mov	r3, r0
 8001604:	647b      	str	r3, [r7, #68]	@ 0x44
    J_g[0][1] =  2 * q_est_prev.q3;
 8001606:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800160a:	4619      	mov	r1, r3
 800160c:	4618      	mov	r0, r3
 800160e:	f7ff fa69 	bl	8000ae4 <__addsf3>
 8001612:	4603      	mov	r3, r0
 8001614:	64bb      	str	r3, [r7, #72]	@ 0x48
    J_g[0][2] = -2 * q_est_prev.q0;
 8001616:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800161a:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 800161e:	4618      	mov	r0, r3
 8001620:	f7ff fb68 	bl	8000cf4 <__aeabi_fmul>
 8001624:	4603      	mov	r3, r0
 8001626:	64fb      	str	r3, [r7, #76]	@ 0x4c
    J_g[0][3] =  2 * q_est_prev.q1;
 8001628:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800162c:	4619      	mov	r1, r3
 800162e:	4618      	mov	r0, r3
 8001630:	f7ff fa58 	bl	8000ae4 <__addsf3>
 8001634:	4603      	mov	r3, r0
 8001636:	653b      	str	r3, [r7, #80]	@ 0x50
    
    J_g[1][0] = 2 * q_est_prev.q1;
 8001638:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800163c:	4619      	mov	r1, r3
 800163e:	4618      	mov	r0, r3
 8001640:	f7ff fa50 	bl	8000ae4 <__addsf3>
 8001644:	4603      	mov	r3, r0
 8001646:	657b      	str	r3, [r7, #84]	@ 0x54
    J_g[1][1] = 2 * q_est_prev.q0;
 8001648:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800164c:	4619      	mov	r1, r3
 800164e:	4618      	mov	r0, r3
 8001650:	f7ff fa48 	bl	8000ae4 <__addsf3>
 8001654:	4603      	mov	r3, r0
 8001656:	65bb      	str	r3, [r7, #88]	@ 0x58
    J_g[1][2] = 2 * q_est_prev.q3;
 8001658:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800165c:	4619      	mov	r1, r3
 800165e:	4618      	mov	r0, r3
 8001660:	f7ff fa40 	bl	8000ae4 <__addsf3>
 8001664:	4603      	mov	r3, r0
 8001666:	65fb      	str	r3, [r7, #92]	@ 0x5c
    J_g[1][3] = 2 * q_est_prev.q2;
 8001668:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800166c:	4619      	mov	r1, r3
 800166e:	4618      	mov	r0, r3
 8001670:	f7ff fa38 	bl	8000ae4 <__addsf3>
 8001674:	4603      	mov	r3, r0
 8001676:	663b      	str	r3, [r7, #96]	@ 0x60
    
    J_g[2][0] = 0;
 8001678:	f04f 0300 	mov.w	r3, #0
 800167c:	667b      	str	r3, [r7, #100]	@ 0x64
    J_g[2][1] = -4 * q_est_prev.q1;
 800167e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001682:	496d      	ldr	r1, [pc, #436]	@ (8001838 <MadgwickFilter_Update_IMU+0x43c>)
 8001684:	4618      	mov	r0, r3
 8001686:	f7ff fb35 	bl	8000cf4 <__aeabi_fmul>
 800168a:	4603      	mov	r3, r0
 800168c:	66bb      	str	r3, [r7, #104]	@ 0x68
    J_g[2][2] = -4 * q_est_prev.q2;
 800168e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001692:	4969      	ldr	r1, [pc, #420]	@ (8001838 <MadgwickFilter_Update_IMU+0x43c>)
 8001694:	4618      	mov	r0, r3
 8001696:	f7ff fb2d 	bl	8000cf4 <__aeabi_fmul>
 800169a:	4603      	mov	r3, r0
 800169c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    J_g[2][3] = 0;
 800169e:	f04f 0300 	mov.w	r3, #0
 80016a2:	673b      	str	r3, [r7, #112]	@ 0x70
    
    // now computer the gradient, equation (20), gradient = J_g'*F_g
    gradient.q0 = J_g[0][0] * F_g[0] + J_g[1][0] * F_g[1] + J_g[2][0] * F_g[2];
 80016a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80016a6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80016a8:	4611      	mov	r1, r2
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7ff fb22 	bl	8000cf4 <__aeabi_fmul>
 80016b0:	4603      	mov	r3, r0
 80016b2:	461c      	mov	r4, r3
 80016b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80016b6:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80016b8:	4611      	mov	r1, r2
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7ff fb1a 	bl	8000cf4 <__aeabi_fmul>
 80016c0:	4603      	mov	r3, r0
 80016c2:	4619      	mov	r1, r3
 80016c4:	4620      	mov	r0, r4
 80016c6:	f7ff fa0d 	bl	8000ae4 <__addsf3>
 80016ca:	4603      	mov	r3, r0
 80016cc:	461c      	mov	r4, r3
 80016ce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80016d0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80016d2:	4611      	mov	r1, r2
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7ff fb0d 	bl	8000cf4 <__aeabi_fmul>
 80016da:	4603      	mov	r3, r0
 80016dc:	4619      	mov	r1, r3
 80016de:	4620      	mov	r0, r4
 80016e0:	f7ff fa00 	bl	8000ae4 <__addsf3>
 80016e4:	4603      	mov	r3, r0
 80016e6:	637b      	str	r3, [r7, #52]	@ 0x34
    gradient.q1 = J_g[0][1] * F_g[0] + J_g[1][1] * F_g[1] + J_g[2][1] * F_g[2];
 80016e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80016ea:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80016ec:	4611      	mov	r1, r2
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7ff fb00 	bl	8000cf4 <__aeabi_fmul>
 80016f4:	4603      	mov	r3, r0
 80016f6:	461c      	mov	r4, r3
 80016f8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80016fa:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80016fc:	4611      	mov	r1, r2
 80016fe:	4618      	mov	r0, r3
 8001700:	f7ff faf8 	bl	8000cf4 <__aeabi_fmul>
 8001704:	4603      	mov	r3, r0
 8001706:	4619      	mov	r1, r3
 8001708:	4620      	mov	r0, r4
 800170a:	f7ff f9eb 	bl	8000ae4 <__addsf3>
 800170e:	4603      	mov	r3, r0
 8001710:	461c      	mov	r4, r3
 8001712:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001714:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001716:	4611      	mov	r1, r2
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff faeb 	bl	8000cf4 <__aeabi_fmul>
 800171e:	4603      	mov	r3, r0
 8001720:	4619      	mov	r1, r3
 8001722:	4620      	mov	r0, r4
 8001724:	f7ff f9de 	bl	8000ae4 <__addsf3>
 8001728:	4603      	mov	r3, r0
 800172a:	63bb      	str	r3, [r7, #56]	@ 0x38
    gradient.q2 = J_g[0][2] * F_g[0] + J_g[1][2] * F_g[1] + J_g[2][2] * F_g[2];
 800172c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800172e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001730:	4611      	mov	r1, r2
 8001732:	4618      	mov	r0, r3
 8001734:	f7ff fade 	bl	8000cf4 <__aeabi_fmul>
 8001738:	4603      	mov	r3, r0
 800173a:	461c      	mov	r4, r3
 800173c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800173e:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8001740:	4611      	mov	r1, r2
 8001742:	4618      	mov	r0, r3
 8001744:	f7ff fad6 	bl	8000cf4 <__aeabi_fmul>
 8001748:	4603      	mov	r3, r0
 800174a:	4619      	mov	r1, r3
 800174c:	4620      	mov	r0, r4
 800174e:	f7ff f9c9 	bl	8000ae4 <__addsf3>
 8001752:	4603      	mov	r3, r0
 8001754:	461c      	mov	r4, r3
 8001756:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001758:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800175a:	4611      	mov	r1, r2
 800175c:	4618      	mov	r0, r3
 800175e:	f7ff fac9 	bl	8000cf4 <__aeabi_fmul>
 8001762:	4603      	mov	r3, r0
 8001764:	4619      	mov	r1, r3
 8001766:	4620      	mov	r0, r4
 8001768:	f7ff f9bc 	bl	8000ae4 <__addsf3>
 800176c:	4603      	mov	r3, r0
 800176e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    gradient.q3 = J_g[0][3] * F_g[0] + J_g[1][3] * F_g[1] + J_g[2][3] * F_g[2];
 8001770:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001772:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001774:	4611      	mov	r1, r2
 8001776:	4618      	mov	r0, r3
 8001778:	f7ff fabc 	bl	8000cf4 <__aeabi_fmul>
 800177c:	4603      	mov	r3, r0
 800177e:	461c      	mov	r4, r3
 8001780:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001782:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8001784:	4611      	mov	r1, r2
 8001786:	4618      	mov	r0, r3
 8001788:	f7ff fab4 	bl	8000cf4 <__aeabi_fmul>
 800178c:	4603      	mov	r3, r0
 800178e:	4619      	mov	r1, r3
 8001790:	4620      	mov	r0, r4
 8001792:	f7ff f9a7 	bl	8000ae4 <__addsf3>
 8001796:	4603      	mov	r3, r0
 8001798:	461c      	mov	r4, r3
 800179a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800179c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800179e:	4611      	mov	r1, r2
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7ff faa7 	bl	8000cf4 <__aeabi_fmul>
 80017a6:	4603      	mov	r3, r0
 80017a8:	4619      	mov	r1, r3
 80017aa:	4620      	mov	r0, r4
 80017ac:	f7ff f99a 	bl	8000ae4 <__addsf3>
 80017b0:	4603      	mov	r3, r0
 80017b2:	643b      	str	r3, [r7, #64]	@ 0x40
    
    // Normalize the gradient, equation (44)
    quat_Normalize(&gradient);
 80017b4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff fda7 	bl	800130c <quat_Normalize>
     Eq. 36 has the filter gain Gamma, which is related to the step size and thus alpha. With alpha being very large,
        you can make assumptions to simplify the fusion equatoin of eq.36.
     Combining the simplification of the gradient descent equation with the simplification of the fusion equation gets you eq.
     41 which can be subdivided into eqs 42-44.
    */
    gradient = quat_scalar(gradient, filter->beta);             // multiply normalized gradient by beta
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	691b      	ldr	r3, [r3, #16]
 80017c2:	4638      	mov	r0, r7
 80017c4:	9301      	str	r3, [sp, #4]
 80017c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80017c8:	9300      	str	r3, [sp, #0]
 80017ca:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80017ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017d0:	f7ff fcb3 	bl	800113a <quat_scalar>
 80017d4:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 80017d8:	463b      	mov	r3, r7
 80017da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    q_est_dot = quat_sub(q_w, gradient);        // subtract above from q_w, the integrated gyro quaternion
 80017e0:	f107 0590 	add.w	r5, r7, #144	@ 0x90
 80017e4:	ac01      	add	r4, sp, #4
 80017e6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80017ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80017f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80017f2:	9300      	str	r3, [sp, #0]
 80017f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017fa:	4628      	mov	r0, r5
 80017fc:	f7ff fd07 	bl	800120e <quat_sub>
    q_est_dot = quat_scalar(q_est_dot, filter->sample_rate);
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	695b      	ldr	r3, [r3, #20]
 8001804:	4638      	mov	r0, r7
 8001806:	9301      	str	r3, [sp, #4]
 8001808:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800180c:	9300      	str	r3, [sp, #0]
 800180e:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8001812:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001814:	f7ff fc91 	bl	800113a <quat_scalar>
 8001818:	f107 0490 	add.w	r4, r7, #144	@ 0x90
 800181c:	463b      	mov	r3, r7
 800181e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001820:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    filter->q = quat_add(q_est_prev, q_est_dot);     // Integrate orientation rate to find position
 8001824:	69fe      	ldr	r6, [r7, #28]
 8001826:	463d      	mov	r5, r7
 8001828:	ac01      	add	r4, sp, #4
 800182a:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800182e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001830:	e004      	b.n	800183c <MadgwickFilter_Update_IMU+0x440>
 8001832:	bf00      	nop
 8001834:	3fe00000 	.word	0x3fe00000
 8001838:	c0800000 	.word	0xc0800000
 800183c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001840:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001844:	9300      	str	r3, [sp, #0]
 8001846:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800184a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800184c:	4628      	mov	r0, r5
 800184e:	f7ff fca7 	bl	80011a0 <quat_add>
 8001852:	4634      	mov	r4, r6
 8001854:	463b      	mov	r3, r7
 8001856:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001858:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    quat_Normalize(&filter->q);                 // normalize the orientation of the estimate
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	4618      	mov	r0, r3
 8001860:	f7ff fd54 	bl	800130c <quat_Normalize>
}
 8001864:	bf00      	nop
 8001866:	4618      	mov	r0, r3
 8001868:	37b4      	adds	r7, #180	@ 0xb4
 800186a:	46bd      	mov	sp, r7
 800186c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800186e:	bf00      	nop

08001870 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001874:	f005 fd0e 	bl	8007294 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001878:	f000 f816 	bl	80018a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800187c:	f000 f8ce 	bl	8001a1c <MX_GPIO_Init>
  MX_DMA_Init();
 8001880:	f000 f8a6 	bl	80019d0 <MX_DMA_Init>
  MX_I2C1_Init();
 8001884:	f000 f84c 	bl	8001920 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001888:	f000 f878 	bl	800197c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800188c:	2201      	movs	r2, #1
 800188e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001892:	4804      	ldr	r0, [pc, #16]	@ (80018a4 <main+0x34>)
 8001894:	f006 fab8 	bl	8007e08 <HAL_GPIO_WritePin>
  setup();
 8001898:	f004 fa2a 	bl	8005cf0 <setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  loop();
 800189c:	f004 fa7a 	bl	8005d94 <loop>
 80018a0:	e7fc      	b.n	800189c <main+0x2c>
 80018a2:	bf00      	nop
 80018a4:	40011000 	.word	0x40011000

080018a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b090      	sub	sp, #64	@ 0x40
 80018ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018ae:	f107 0318 	add.w	r3, r7, #24
 80018b2:	2228      	movs	r2, #40	@ 0x28
 80018b4:	2100      	movs	r1, #0
 80018b6:	4618      	mov	r0, r3
 80018b8:	f009 f83a 	bl	800a930 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018bc:	1d3b      	adds	r3, r7, #4
 80018be:	2200      	movs	r2, #0
 80018c0:	601a      	str	r2, [r3, #0]
 80018c2:	605a      	str	r2, [r3, #4]
 80018c4:	609a      	str	r2, [r3, #8]
 80018c6:	60da      	str	r2, [r3, #12]
 80018c8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018ca:	2302      	movs	r3, #2
 80018cc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018ce:	2301      	movs	r3, #1
 80018d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018d2:	2310      	movs	r3, #16
 80018d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80018d6:	2300      	movs	r3, #0
 80018d8:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018da:	f107 0318 	add.w	r3, r7, #24
 80018de:	4618      	mov	r0, r3
 80018e0:	f007 fb04 	bl	8008eec <HAL_RCC_OscConfig>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <SystemClock_Config+0x46>
  {
    Error_Handler();
 80018ea:	f000 f8ef 	bl	8001acc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018ee:	230f      	movs	r3, #15
 80018f0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80018f2:	2300      	movs	r3, #0
 80018f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018f6:	2300      	movs	r3, #0
 80018f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018fa:	2300      	movs	r3, #0
 80018fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018fe:	2300      	movs	r3, #0
 8001900:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001902:	1d3b      	adds	r3, r7, #4
 8001904:	2100      	movs	r1, #0
 8001906:	4618      	mov	r0, r3
 8001908:	f007 fd72 	bl	80093f0 <HAL_RCC_ClockConfig>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001912:	f000 f8db 	bl	8001acc <Error_Handler>
  }
}
 8001916:	bf00      	nop
 8001918:	3740      	adds	r7, #64	@ 0x40
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
	...

08001920 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001924:	4b12      	ldr	r3, [pc, #72]	@ (8001970 <MX_I2C1_Init+0x50>)
 8001926:	4a13      	ldr	r2, [pc, #76]	@ (8001974 <MX_I2C1_Init+0x54>)
 8001928:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800192a:	4b11      	ldr	r3, [pc, #68]	@ (8001970 <MX_I2C1_Init+0x50>)
 800192c:	4a12      	ldr	r2, [pc, #72]	@ (8001978 <MX_I2C1_Init+0x58>)
 800192e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001930:	4b0f      	ldr	r3, [pc, #60]	@ (8001970 <MX_I2C1_Init+0x50>)
 8001932:	2200      	movs	r2, #0
 8001934:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001936:	4b0e      	ldr	r3, [pc, #56]	@ (8001970 <MX_I2C1_Init+0x50>)
 8001938:	2200      	movs	r2, #0
 800193a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800193c:	4b0c      	ldr	r3, [pc, #48]	@ (8001970 <MX_I2C1_Init+0x50>)
 800193e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001942:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001944:	4b0a      	ldr	r3, [pc, #40]	@ (8001970 <MX_I2C1_Init+0x50>)
 8001946:	2200      	movs	r2, #0
 8001948:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800194a:	4b09      	ldr	r3, [pc, #36]	@ (8001970 <MX_I2C1_Init+0x50>)
 800194c:	2200      	movs	r2, #0
 800194e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001950:	4b07      	ldr	r3, [pc, #28]	@ (8001970 <MX_I2C1_Init+0x50>)
 8001952:	2200      	movs	r2, #0
 8001954:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001956:	4b06      	ldr	r3, [pc, #24]	@ (8001970 <MX_I2C1_Init+0x50>)
 8001958:	2200      	movs	r2, #0
 800195a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800195c:	4804      	ldr	r0, [pc, #16]	@ (8001970 <MX_I2C1_Init+0x50>)
 800195e:	f006 fa6b 	bl	8007e38 <HAL_I2C_Init>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001968:	f000 f8b0 	bl	8001acc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800196c:	bf00      	nop
 800196e:	bd80      	pop	{r7, pc}
 8001970:	200000cc 	.word	0x200000cc
 8001974:	40005400 	.word	0x40005400
 8001978:	00061a80 	.word	0x00061a80

0800197c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart_rosserial.Instance = USART1;
 8001980:	4b11      	ldr	r3, [pc, #68]	@ (80019c8 <MX_USART1_UART_Init+0x4c>)
 8001982:	4a12      	ldr	r2, [pc, #72]	@ (80019cc <MX_USART1_UART_Init+0x50>)
 8001984:	601a      	str	r2, [r3, #0]
  huart_rosserial.Init.BaudRate = 115200;
 8001986:	4b10      	ldr	r3, [pc, #64]	@ (80019c8 <MX_USART1_UART_Init+0x4c>)
 8001988:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800198c:	605a      	str	r2, [r3, #4]
  huart_rosserial.Init.WordLength = UART_WORDLENGTH_8B;
 800198e:	4b0e      	ldr	r3, [pc, #56]	@ (80019c8 <MX_USART1_UART_Init+0x4c>)
 8001990:	2200      	movs	r2, #0
 8001992:	609a      	str	r2, [r3, #8]
  huart_rosserial.Init.StopBits = UART_STOPBITS_1;
 8001994:	4b0c      	ldr	r3, [pc, #48]	@ (80019c8 <MX_USART1_UART_Init+0x4c>)
 8001996:	2200      	movs	r2, #0
 8001998:	60da      	str	r2, [r3, #12]
  huart_rosserial.Init.Parity = UART_PARITY_NONE;
 800199a:	4b0b      	ldr	r3, [pc, #44]	@ (80019c8 <MX_USART1_UART_Init+0x4c>)
 800199c:	2200      	movs	r2, #0
 800199e:	611a      	str	r2, [r3, #16]
  huart_rosserial.Init.Mode = UART_MODE_TX_RX;
 80019a0:	4b09      	ldr	r3, [pc, #36]	@ (80019c8 <MX_USART1_UART_Init+0x4c>)
 80019a2:	220c      	movs	r2, #12
 80019a4:	615a      	str	r2, [r3, #20]
  huart_rosserial.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019a6:	4b08      	ldr	r3, [pc, #32]	@ (80019c8 <MX_USART1_UART_Init+0x4c>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	619a      	str	r2, [r3, #24]
  huart_rosserial.Init.OverSampling = UART_OVERSAMPLING_16;
 80019ac:	4b06      	ldr	r3, [pc, #24]	@ (80019c8 <MX_USART1_UART_Init+0x4c>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart_rosserial) != HAL_OK)
 80019b2:	4805      	ldr	r0, [pc, #20]	@ (80019c8 <MX_USART1_UART_Init+0x4c>)
 80019b4:	f007 feaa 	bl	800970c <HAL_UART_Init>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80019be:	f000 f885 	bl	8001acc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80019c2:	bf00      	nop
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	20000120 	.word	0x20000120
 80019cc:	40013800 	.word	0x40013800

080019d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80019d6:	4b10      	ldr	r3, [pc, #64]	@ (8001a18 <MX_DMA_Init+0x48>)
 80019d8:	695b      	ldr	r3, [r3, #20]
 80019da:	4a0f      	ldr	r2, [pc, #60]	@ (8001a18 <MX_DMA_Init+0x48>)
 80019dc:	f043 0301 	orr.w	r3, r3, #1
 80019e0:	6153      	str	r3, [r2, #20]
 80019e2:	4b0d      	ldr	r3, [pc, #52]	@ (8001a18 <MX_DMA_Init+0x48>)
 80019e4:	695b      	ldr	r3, [r3, #20]
 80019e6:	f003 0301 	and.w	r3, r3, #1
 80019ea:	607b      	str	r3, [r7, #4]
 80019ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80019ee:	2200      	movs	r2, #0
 80019f0:	2100      	movs	r1, #0
 80019f2:	200e      	movs	r0, #14
 80019f4:	f005 fdab 	bl	800754e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80019f8:	200e      	movs	r0, #14
 80019fa:	f005 fdc4 	bl	8007586 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80019fe:	2200      	movs	r2, #0
 8001a00:	2100      	movs	r1, #0
 8001a02:	200f      	movs	r0, #15
 8001a04:	f005 fda3 	bl	800754e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001a08:	200f      	movs	r0, #15
 8001a0a:	f005 fdbc 	bl	8007586 <HAL_NVIC_EnableIRQ>

}
 8001a0e:	bf00      	nop
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	40021000 	.word	0x40021000

08001a1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b088      	sub	sp, #32
 8001a20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a22:	f107 0310 	add.w	r3, r7, #16
 8001a26:	2200      	movs	r2, #0
 8001a28:	601a      	str	r2, [r3, #0]
 8001a2a:	605a      	str	r2, [r3, #4]
 8001a2c:	609a      	str	r2, [r3, #8]
 8001a2e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a30:	4b24      	ldr	r3, [pc, #144]	@ (8001ac4 <MX_GPIO_Init+0xa8>)
 8001a32:	699b      	ldr	r3, [r3, #24]
 8001a34:	4a23      	ldr	r2, [pc, #140]	@ (8001ac4 <MX_GPIO_Init+0xa8>)
 8001a36:	f043 0310 	orr.w	r3, r3, #16
 8001a3a:	6193      	str	r3, [r2, #24]
 8001a3c:	4b21      	ldr	r3, [pc, #132]	@ (8001ac4 <MX_GPIO_Init+0xa8>)
 8001a3e:	699b      	ldr	r3, [r3, #24]
 8001a40:	f003 0310 	and.w	r3, r3, #16
 8001a44:	60fb      	str	r3, [r7, #12]
 8001a46:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a48:	4b1e      	ldr	r3, [pc, #120]	@ (8001ac4 <MX_GPIO_Init+0xa8>)
 8001a4a:	699b      	ldr	r3, [r3, #24]
 8001a4c:	4a1d      	ldr	r2, [pc, #116]	@ (8001ac4 <MX_GPIO_Init+0xa8>)
 8001a4e:	f043 0320 	orr.w	r3, r3, #32
 8001a52:	6193      	str	r3, [r2, #24]
 8001a54:	4b1b      	ldr	r3, [pc, #108]	@ (8001ac4 <MX_GPIO_Init+0xa8>)
 8001a56:	699b      	ldr	r3, [r3, #24]
 8001a58:	f003 0320 	and.w	r3, r3, #32
 8001a5c:	60bb      	str	r3, [r7, #8]
 8001a5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a60:	4b18      	ldr	r3, [pc, #96]	@ (8001ac4 <MX_GPIO_Init+0xa8>)
 8001a62:	699b      	ldr	r3, [r3, #24]
 8001a64:	4a17      	ldr	r2, [pc, #92]	@ (8001ac4 <MX_GPIO_Init+0xa8>)
 8001a66:	f043 0304 	orr.w	r3, r3, #4
 8001a6a:	6193      	str	r3, [r2, #24]
 8001a6c:	4b15      	ldr	r3, [pc, #84]	@ (8001ac4 <MX_GPIO_Init+0xa8>)
 8001a6e:	699b      	ldr	r3, [r3, #24]
 8001a70:	f003 0304 	and.w	r3, r3, #4
 8001a74:	607b      	str	r3, [r7, #4]
 8001a76:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a78:	4b12      	ldr	r3, [pc, #72]	@ (8001ac4 <MX_GPIO_Init+0xa8>)
 8001a7a:	699b      	ldr	r3, [r3, #24]
 8001a7c:	4a11      	ldr	r2, [pc, #68]	@ (8001ac4 <MX_GPIO_Init+0xa8>)
 8001a7e:	f043 0308 	orr.w	r3, r3, #8
 8001a82:	6193      	str	r3, [r2, #24]
 8001a84:	4b0f      	ldr	r3, [pc, #60]	@ (8001ac4 <MX_GPIO_Init+0xa8>)
 8001a86:	699b      	ldr	r3, [r3, #24]
 8001a88:	f003 0308 	and.w	r3, r3, #8
 8001a8c:	603b      	str	r3, [r7, #0]
 8001a8e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001a90:	2200      	movs	r2, #0
 8001a92:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001a96:	480c      	ldr	r0, [pc, #48]	@ (8001ac8 <MX_GPIO_Init+0xac>)
 8001a98:	f006 f9b6 	bl	8007e08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001a9c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001aa0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aaa:	2302      	movs	r3, #2
 8001aac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001aae:	f107 0310 	add.w	r3, r7, #16
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	4804      	ldr	r0, [pc, #16]	@ (8001ac8 <MX_GPIO_Init+0xac>)
 8001ab6:	f006 f823 	bl	8007b00 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001aba:	bf00      	nop
 8001abc:	3720      	adds	r7, #32
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	40021000 	.word	0x40021000
 8001ac8:	40011000 	.word	0x40011000

08001acc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ad0:	b672      	cpsid	i
}
 8001ad2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ad4:	bf00      	nop
 8001ad6:	e7fd      	b.n	8001ad4 <Error_Handler+0x8>

08001ad8 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	601a      	str	r2, [r3, #0]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	605a      	str	r2, [r3, #4]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	4618      	mov	r0, r3
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bc80      	pop	{r7}
 8001af6:	4770      	bx	lr

08001af8 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	4a04      	ldr	r2, [pc, #16]	@ (8001b14 <_ZN3ros3MsgC1Ev+0x1c>)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	601a      	str	r2, [r3, #0]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bc80      	pop	{r7}
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	0800affc 	.word	0x0800affc

08001b18 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
      data()
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7ff ffe8 	bl	8001af8 <_ZN3ros3MsgC1Ev>
 8001b28:	4a06      	ldr	r2, [pc, #24]	@ (8001b44 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	601a      	str	r2, [r3, #0]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	3304      	adds	r3, #4
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7ff ffd0 	bl	8001ad8 <_ZN3ros4TimeC1Ev>
    {
    }
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	0800afe4 	.word	0x0800afe4

08001b48 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001b48:	b480      	push	{r7}
 8001b4a:	b085      	sub	sp, #20
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001b52:	2300      	movs	r3, #0
 8001b54:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6859      	ldr	r1, [r3, #4]
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	683a      	ldr	r2, [r7, #0]
 8001b5e:	4413      	add	r3, r2
 8001b60:	b2ca      	uxtb	r2, r1
 8001b62:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	0a19      	lsrs	r1, r3, #8
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	683a      	ldr	r2, [r7, #0]
 8001b70:	4413      	add	r3, r2
 8001b72:	b2ca      	uxtb	r2, r1
 8001b74:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	0c19      	lsrs	r1, r3, #16
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	3302      	adds	r3, #2
 8001b80:	683a      	ldr	r2, [r7, #0]
 8001b82:	4413      	add	r3, r2
 8001b84:	b2ca      	uxtb	r2, r1
 8001b86:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	0e19      	lsrs	r1, r3, #24
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	3303      	adds	r3, #3
 8001b92:	683a      	ldr	r2, [r7, #0]
 8001b94:	4413      	add	r3, r2
 8001b96:	b2ca      	uxtb	r2, r1
 8001b98:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	3304      	adds	r3, #4
 8001b9e:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6899      	ldr	r1, [r3, #8]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	683a      	ldr	r2, [r7, #0]
 8001ba8:	4413      	add	r3, r2
 8001baa:	b2ca      	uxtb	r2, r1
 8001bac:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	0a19      	lsrs	r1, r3, #8
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	683a      	ldr	r2, [r7, #0]
 8001bba:	4413      	add	r3, r2
 8001bbc:	b2ca      	uxtb	r2, r1
 8001bbe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	0c19      	lsrs	r1, r3, #16
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	3302      	adds	r3, #2
 8001bca:	683a      	ldr	r2, [r7, #0]
 8001bcc:	4413      	add	r3, r2
 8001bce:	b2ca      	uxtb	r2, r1
 8001bd0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	0e19      	lsrs	r1, r3, #24
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	3303      	adds	r3, #3
 8001bdc:	683a      	ldr	r2, [r7, #0]
 8001bde:	4413      	add	r3, r2
 8001be0:	b2ca      	uxtb	r2, r1
 8001be2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	3304      	adds	r3, #4
 8001be8:	60fb      	str	r3, [r7, #12]
      return offset;
 8001bea:	68fb      	ldr	r3, [r7, #12]
    }
 8001bec:	4618      	mov	r0, r3
 8001bee:	3714      	adds	r7, #20
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bc80      	pop	{r7}
 8001bf4:	4770      	bx	lr

08001bf6 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001bf6:	b480      	push	{r7}
 8001bf8:	b085      	sub	sp, #20
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
 8001bfe:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001c00:	2300      	movs	r3, #0
 8001c02:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	683a      	ldr	r2, [r7, #0]
 8001c08:	4413      	add	r3, r2
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685a      	ldr	r2, [r3, #4]
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	3301      	adds	r3, #1
 8001c1a:	6839      	ldr	r1, [r7, #0]
 8001c1c:	440b      	add	r3, r1
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	021b      	lsls	r3, r3, #8
 8001c22:	431a      	orrs	r2, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	685a      	ldr	r2, [r3, #4]
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	3302      	adds	r3, #2
 8001c30:	6839      	ldr	r1, [r7, #0]
 8001c32:	440b      	add	r3, r1
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	041b      	lsls	r3, r3, #16
 8001c38:	431a      	orrs	r2, r3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	685a      	ldr	r2, [r3, #4]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	3303      	adds	r3, #3
 8001c46:	6839      	ldr	r1, [r7, #0]
 8001c48:	440b      	add	r3, r1
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	061b      	lsls	r3, r3, #24
 8001c4e:	431a      	orrs	r2, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	3304      	adds	r3, #4
 8001c58:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	683a      	ldr	r2, [r7, #0]
 8001c5e:	4413      	add	r3, r2
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	461a      	mov	r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	689a      	ldr	r2, [r3, #8]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	3301      	adds	r3, #1
 8001c70:	6839      	ldr	r1, [r7, #0]
 8001c72:	440b      	add	r3, r1
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	021b      	lsls	r3, r3, #8
 8001c78:	431a      	orrs	r2, r3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	689a      	ldr	r2, [r3, #8]
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	3302      	adds	r3, #2
 8001c86:	6839      	ldr	r1, [r7, #0]
 8001c88:	440b      	add	r3, r1
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	041b      	lsls	r3, r3, #16
 8001c8e:	431a      	orrs	r2, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	689a      	ldr	r2, [r3, #8]
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	3303      	adds	r3, #3
 8001c9c:	6839      	ldr	r1, [r7, #0]
 8001c9e:	440b      	add	r3, r1
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	061b      	lsls	r3, r3, #24
 8001ca4:	431a      	orrs	r2, r3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	3304      	adds	r3, #4
 8001cae:	60fb      	str	r3, [r7, #12]
     return offset;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
    }
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3714      	adds	r7, #20
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bc80      	pop	{r7}
 8001cba:	4770      	bx	lr

08001cbc <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	4b02      	ldr	r3, [pc, #8]	@ (8001cd0 <_ZN8std_msgs4Time7getTypeEv+0x14>)
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bc80      	pop	{r7}
 8001cce:	4770      	bx	lr
 8001cd0:	0800abe8 	.word	0x0800abe8

08001cd4 <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	4b02      	ldr	r3, [pc, #8]	@ (8001ce8 <_ZN8std_msgs4Time6getMD5Ev+0x14>)
 8001cde:	4618      	mov	r0, r3
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bc80      	pop	{r7}
 8001ce6:	4770      	bx	lr
 8001ce8:	0800abf8 	.word	0x0800abf8

08001cec <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7ff fefe 	bl	8001af8 <_ZN3ros3MsgC1Ev>
 8001cfc:	4a0b      	ldr	r2, [pc, #44]	@ (8001d2c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	601a      	str	r2, [r3, #0]
      topic_id(0),
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2200      	movs	r2, #0
 8001d06:	809a      	strh	r2, [r3, #4]
      topic_name(""),
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	4a09      	ldr	r2, [pc, #36]	@ (8001d30 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001d0c:	609a      	str	r2, [r3, #8]
      message_type(""),
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4a07      	ldr	r2, [pc, #28]	@ (8001d30 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001d12:	60da      	str	r2, [r3, #12]
      md5sum(""),
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	4a06      	ldr	r2, [pc, #24]	@ (8001d30 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001d18:	611a      	str	r2, [r3, #16]
      buffer_size(0)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	615a      	str	r2, [r3, #20]
    {
    }
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	4618      	mov	r0, r3
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	0800afcc 	.word	0x0800afcc
 8001d30:	0800ac1c 	.word	0x0800ac1c

08001d34 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b088      	sub	sp, #32
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	8899      	ldrh	r1, [r3, #4]
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	683a      	ldr	r2, [r7, #0]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	b2ca      	uxtb	r2, r1
 8001d4e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	889b      	ldrh	r3, [r3, #4]
 8001d54:	0a1b      	lsrs	r3, r3, #8
 8001d56:	b299      	uxth	r1, r3
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	683a      	ldr	r2, [r7, #0]
 8001d5e:	4413      	add	r3, r2
 8001d60:	b2ca      	uxtb	r2, r1
 8001d62:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	3302      	adds	r3, #2
 8001d68:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7fe f9ee 	bl	8000150 <strlen>
 8001d74:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	683a      	ldr	r2, [r7, #0]
 8001d7a:	4413      	add	r3, r2
 8001d7c:	69b9      	ldr	r1, [r7, #24]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f004 f816 	bl	8005db0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	3304      	adds	r3, #4
 8001d88:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	683a      	ldr	r2, [r7, #0]
 8001d8e:	18d0      	adds	r0, r2, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	4619      	mov	r1, r3
 8001d98:	f008 fdfe 	bl	800a998 <memcpy>
      offset += length_topic_name;
 8001d9c:	69fa      	ldr	r2, [r7, #28]
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	4413      	add	r3, r2
 8001da2:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7fe f9d1 	bl	8000150 <strlen>
 8001dae:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	683a      	ldr	r2, [r7, #0]
 8001db4:	4413      	add	r3, r2
 8001db6:	6979      	ldr	r1, [r7, #20]
 8001db8:	4618      	mov	r0, r3
 8001dba:	f003 fff9 	bl	8005db0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	3304      	adds	r3, #4
 8001dc2:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	683a      	ldr	r2, [r7, #0]
 8001dc8:	18d0      	adds	r0, r2, r3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	68db      	ldr	r3, [r3, #12]
 8001dce:	697a      	ldr	r2, [r7, #20]
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	f008 fde1 	bl	800a998 <memcpy>
      offset += length_message_type;
 8001dd6:	69fa      	ldr	r2, [r7, #28]
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	4413      	add	r3, r2
 8001ddc:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	691b      	ldr	r3, [r3, #16]
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7fe f9b4 	bl	8000150 <strlen>
 8001de8:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	683a      	ldr	r2, [r7, #0]
 8001dee:	4413      	add	r3, r2
 8001df0:	6939      	ldr	r1, [r7, #16]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f003 ffdc 	bl	8005db0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	3304      	adds	r3, #4
 8001dfc:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	683a      	ldr	r2, [r7, #0]
 8001e02:	18d0      	adds	r0, r2, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	691b      	ldr	r3, [r3, #16]
 8001e08:	693a      	ldr	r2, [r7, #16]
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	f008 fdc4 	bl	800a998 <memcpy>
      offset += length_md5sum;
 8001e10:	69fa      	ldr	r2, [r7, #28]
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	4413      	add	r3, r2
 8001e16:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	695b      	ldr	r3, [r3, #20]
 8001e1c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8001e1e:	68f9      	ldr	r1, [r7, #12]
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	683a      	ldr	r2, [r7, #0]
 8001e24:	4413      	add	r3, r2
 8001e26:	b2ca      	uxtb	r2, r1
 8001e28:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	0a19      	lsrs	r1, r3, #8
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	3301      	adds	r3, #1
 8001e32:	683a      	ldr	r2, [r7, #0]
 8001e34:	4413      	add	r3, r2
 8001e36:	b2ca      	uxtb	r2, r1
 8001e38:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	0c19      	lsrs	r1, r3, #16
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	3302      	adds	r3, #2
 8001e42:	683a      	ldr	r2, [r7, #0]
 8001e44:	4413      	add	r3, r2
 8001e46:	b2ca      	uxtb	r2, r1
 8001e48:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	0e19      	lsrs	r1, r3, #24
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	3303      	adds	r3, #3
 8001e52:	683a      	ldr	r2, [r7, #0]
 8001e54:	4413      	add	r3, r2
 8001e56:	b2ca      	uxtb	r2, r1
 8001e58:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	3304      	adds	r3, #4
 8001e5e:	61fb      	str	r3, [r7, #28]
      return offset;
 8001e60:	69fb      	ldr	r3, [r7, #28]
    }
 8001e62:	4618      	mov	r0, r3
 8001e64:	3720      	adds	r7, #32
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b08a      	sub	sp, #40	@ 0x28
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
 8001e72:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001e74:	2300      	movs	r3, #0
 8001e76:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	683a      	ldr	r2, [r7, #0]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	461a      	mov	r2, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	889b      	ldrh	r3, [r3, #4]
 8001e8a:	b21a      	sxth	r2, r3
 8001e8c:	69bb      	ldr	r3, [r7, #24]
 8001e8e:	3301      	adds	r3, #1
 8001e90:	6839      	ldr	r1, [r7, #0]
 8001e92:	440b      	add	r3, r1
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	021b      	lsls	r3, r3, #8
 8001e98:	b21b      	sxth	r3, r3
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	b21b      	sxth	r3, r3
 8001e9e:	b29a      	uxth	r2, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8001ea4:	69bb      	ldr	r3, [r7, #24]
 8001ea6:	3302      	adds	r3, #2
 8001ea8:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8001eaa:	69bb      	ldr	r3, [r7, #24]
 8001eac:	683a      	ldr	r2, [r7, #0]
 8001eae:	441a      	add	r2, r3
 8001eb0:	f107 0314 	add.w	r3, r7, #20
 8001eb4:	4611      	mov	r1, r2
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f003 ff98 	bl	8005dec <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001ebc:	69bb      	ldr	r3, [r7, #24]
 8001ebe:	3304      	adds	r3, #4
 8001ec0:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ec6:	e00b      	b.n	8001ee0 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x76>
          inbuffer[k-1]=inbuffer[k];
 8001ec8:	683a      	ldr	r2, [r7, #0]
 8001eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ecc:	441a      	add	r2, r3
 8001ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ed0:	3b01      	subs	r3, #1
 8001ed2:	6839      	ldr	r1, [r7, #0]
 8001ed4:	440b      	add	r3, r1
 8001ed6:	7812      	ldrb	r2, [r2, #0]
 8001ed8:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001edc:	3301      	adds	r3, #1
 8001ede:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	4413      	add	r3, r2
 8001ee6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d3ed      	bcc.n	8001ec8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5e>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	4413      	add	r3, r2
 8001ef2:	3b01      	subs	r3, #1
 8001ef4:	683a      	ldr	r2, [r7, #0]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	2200      	movs	r2, #0
 8001efa:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8001efc:	69bb      	ldr	r3, [r7, #24]
 8001efe:	3b01      	subs	r3, #1
 8001f00:	683a      	ldr	r2, [r7, #0]
 8001f02:	441a      	add	r2, r3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	4413      	add	r3, r2
 8001f0e:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8001f10:	69bb      	ldr	r3, [r7, #24]
 8001f12:	683a      	ldr	r2, [r7, #0]
 8001f14:	441a      	add	r2, r3
 8001f16:	f107 0310 	add.w	r3, r7, #16
 8001f1a:	4611      	mov	r1, r2
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f003 ff65 	bl	8005dec <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	3304      	adds	r3, #4
 8001f26:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001f28:	69bb      	ldr	r3, [r7, #24]
 8001f2a:	623b      	str	r3, [r7, #32]
 8001f2c:	e00b      	b.n	8001f46 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xdc>
          inbuffer[k-1]=inbuffer[k];
 8001f2e:	683a      	ldr	r2, [r7, #0]
 8001f30:	6a3b      	ldr	r3, [r7, #32]
 8001f32:	441a      	add	r2, r3
 8001f34:	6a3b      	ldr	r3, [r7, #32]
 8001f36:	3b01      	subs	r3, #1
 8001f38:	6839      	ldr	r1, [r7, #0]
 8001f3a:	440b      	add	r3, r1
 8001f3c:	7812      	ldrb	r2, [r2, #0]
 8001f3e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001f40:	6a3b      	ldr	r3, [r7, #32]
 8001f42:	3301      	adds	r3, #1
 8001f44:	623b      	str	r3, [r7, #32]
 8001f46:	69ba      	ldr	r2, [r7, #24]
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	4413      	add	r3, r2
 8001f4c:	6a3a      	ldr	r2, [r7, #32]
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d3ed      	bcc.n	8001f2e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc4>
      }
      inbuffer[offset+length_message_type-1]=0;
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	4413      	add	r3, r2
 8001f58:	3b01      	subs	r3, #1
 8001f5a:	683a      	ldr	r2, [r7, #0]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	2200      	movs	r2, #0
 8001f60:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	3b01      	subs	r3, #1
 8001f66:	683a      	ldr	r2, [r7, #0]
 8001f68:	441a      	add	r2, r3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8001f6e:	69ba      	ldr	r2, [r7, #24]
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	4413      	add	r3, r2
 8001f74:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	683a      	ldr	r2, [r7, #0]
 8001f7a:	441a      	add	r2, r3
 8001f7c:	f107 030c 	add.w	r3, r7, #12
 8001f80:	4611      	mov	r1, r2
 8001f82:	4618      	mov	r0, r3
 8001f84:	f003 ff32 	bl	8005dec <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001f88:	69bb      	ldr	r3, [r7, #24]
 8001f8a:	3304      	adds	r3, #4
 8001f8c:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	61fb      	str	r3, [r7, #28]
 8001f92:	e00b      	b.n	8001fac <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x142>
          inbuffer[k-1]=inbuffer[k];
 8001f94:	683a      	ldr	r2, [r7, #0]
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	441a      	add	r2, r3
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	3b01      	subs	r3, #1
 8001f9e:	6839      	ldr	r1, [r7, #0]
 8001fa0:	440b      	add	r3, r1
 8001fa2:	7812      	ldrb	r2, [r2, #0]
 8001fa4:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	3301      	adds	r3, #1
 8001faa:	61fb      	str	r3, [r7, #28]
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	4413      	add	r3, r2
 8001fb2:	69fa      	ldr	r2, [r7, #28]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d3ed      	bcc.n	8001f94 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x12a>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8001fb8:	69ba      	ldr	r2, [r7, #24]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	3b01      	subs	r3, #1
 8001fc0:	683a      	ldr	r2, [r7, #0]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	3b01      	subs	r3, #1
 8001fcc:	683a      	ldr	r2, [r7, #0]
 8001fce:	441a      	add	r2, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	4413      	add	r3, r2
 8001fda:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	69ba      	ldr	r2, [r7, #24]
 8001fe4:	6839      	ldr	r1, [r7, #0]
 8001fe6:	440a      	add	r2, r1
 8001fe8:	7812      	ldrb	r2, [r2, #0]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001fee:	68ba      	ldr	r2, [r7, #8]
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	6839      	ldr	r1, [r7, #0]
 8001ff6:	440b      	add	r3, r1
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	021b      	lsls	r3, r3, #8
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002000:	68ba      	ldr	r2, [r7, #8]
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	3302      	adds	r3, #2
 8002006:	6839      	ldr	r1, [r7, #0]
 8002008:	440b      	add	r3, r1
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	041b      	lsls	r3, r3, #16
 800200e:	4313      	orrs	r3, r2
 8002010:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002012:	68ba      	ldr	r2, [r7, #8]
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	3303      	adds	r3, #3
 8002018:	6839      	ldr	r1, [r7, #0]
 800201a:	440b      	add	r3, r1
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	061b      	lsls	r3, r3, #24
 8002020:	4313      	orrs	r3, r2
 8002022:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8002024:	68ba      	ldr	r2, [r7, #8]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	3304      	adds	r3, #4
 800202e:	61bb      	str	r3, [r7, #24]
     return offset;
 8002030:	69bb      	ldr	r3, [r7, #24]
    }
 8002032:	4618      	mov	r0, r3
 8002034:	3728      	adds	r7, #40	@ 0x28
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
	...

0800203c <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	4b02      	ldr	r3, [pc, #8]	@ (8002050 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x14>)
 8002046:	4618      	mov	r0, r3
 8002048:	370c      	adds	r7, #12
 800204a:	46bd      	mov	sp, r7
 800204c:	bc80      	pop	{r7}
 800204e:	4770      	bx	lr
 8002050:	0800ac20 	.word	0x0800ac20

08002054 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	4b02      	ldr	r3, [pc, #8]	@ (8002068 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x14>)
 800205e:	4618      	mov	r0, r3
 8002060:	370c      	adds	r7, #12
 8002062:	46bd      	mov	sp, r7
 8002064:	bc80      	pop	{r7}
 8002066:	4770      	bx	lr
 8002068:	0800ac3c 	.word	0x0800ac3c

0800206c <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	4618      	mov	r0, r3
 8002078:	f7ff fd3e 	bl	8001af8 <_ZN3ros3MsgC1Ev>
 800207c:	4a06      	ldr	r2, [pc, #24]	@ (8002098 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	601a      	str	r2, [r3, #0]
      level(0),
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	711a      	strb	r2, [r3, #4]
      msg("")
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	4a04      	ldr	r2, [pc, #16]	@ (800209c <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 800208c:	609a      	str	r2, [r3, #8]
    {
    }
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4618      	mov	r0, r3
 8002092:	3708      	adds	r7, #8
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	0800afb4 	.word	0x0800afb4
 800209c:	0800ac1c 	.word	0x0800ac1c

080020a0 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80020aa:	2300      	movs	r3, #0
 80020ac:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	683a      	ldr	r2, [r7, #0]
 80020b2:	4413      	add	r3, r2
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	7912      	ldrb	r2, [r2, #4]
 80020b8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	3301      	adds	r3, #1
 80020be:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7fe f843 	bl	8000150 <strlen>
 80020ca:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	683a      	ldr	r2, [r7, #0]
 80020d0:	4413      	add	r3, r2
 80020d2:	68b9      	ldr	r1, [r7, #8]
 80020d4:	4618      	mov	r0, r3
 80020d6:	f003 fe6b 	bl	8005db0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	3304      	adds	r3, #4
 80020de:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	683a      	ldr	r2, [r7, #0]
 80020e4:	18d0      	adds	r0, r2, r3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	68ba      	ldr	r2, [r7, #8]
 80020ec:	4619      	mov	r1, r3
 80020ee:	f008 fc53 	bl	800a998 <memcpy>
      offset += length_msg;
 80020f2:	68fa      	ldr	r2, [r7, #12]
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	4413      	add	r3, r2
 80020f8:	60fb      	str	r3, [r7, #12]
      return offset;
 80020fa:	68fb      	ldr	r3, [r7, #12]
    }
 80020fc:	4618      	mov	r0, r3
 80020fe:	3710      	adds	r7, #16
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}

08002104 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002104:	b580      	push	{r7, lr}
 8002106:	b086      	sub	sp, #24
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800210e:	2300      	movs	r3, #0
 8002110:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	683a      	ldr	r2, [r7, #0]
 8002116:	4413      	add	r3, r2
 8002118:	781a      	ldrb	r2, [r3, #0]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	3301      	adds	r3, #1
 8002122:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	683a      	ldr	r2, [r7, #0]
 8002128:	441a      	add	r2, r3
 800212a:	f107 030c 	add.w	r3, r7, #12
 800212e:	4611      	mov	r1, r2
 8002130:	4618      	mov	r0, r3
 8002132:	f003 fe5b 	bl	8005dec <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	3304      	adds	r3, #4
 800213a:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	617b      	str	r3, [r7, #20]
 8002140:	e00b      	b.n	800215a <_ZN14rosserial_msgs3Log11deserializeEPh+0x56>
          inbuffer[k-1]=inbuffer[k];
 8002142:	683a      	ldr	r2, [r7, #0]
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	441a      	add	r2, r3
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	3b01      	subs	r3, #1
 800214c:	6839      	ldr	r1, [r7, #0]
 800214e:	440b      	add	r3, r1
 8002150:	7812      	ldrb	r2, [r2, #0]
 8002152:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	3301      	adds	r3, #1
 8002158:	617b      	str	r3, [r7, #20]
 800215a:	693a      	ldr	r2, [r7, #16]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	4413      	add	r3, r2
 8002160:	697a      	ldr	r2, [r7, #20]
 8002162:	429a      	cmp	r2, r3
 8002164:	d3ed      	bcc.n	8002142 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3e>
      }
      inbuffer[offset+length_msg-1]=0;
 8002166:	693a      	ldr	r2, [r7, #16]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	4413      	add	r3, r2
 800216c:	3b01      	subs	r3, #1
 800216e:	683a      	ldr	r2, [r7, #0]
 8002170:	4413      	add	r3, r2
 8002172:	2200      	movs	r2, #0
 8002174:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	3b01      	subs	r3, #1
 800217a:	683a      	ldr	r2, [r7, #0]
 800217c:	441a      	add	r2, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8002182:	693a      	ldr	r2, [r7, #16]
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	4413      	add	r3, r2
 8002188:	613b      	str	r3, [r7, #16]
     return offset;
 800218a:	693b      	ldr	r3, [r7, #16]
    }
 800218c:	4618      	mov	r0, r3
 800218e:	3718      	adds	r7, #24
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}

08002194 <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	4b02      	ldr	r3, [pc, #8]	@ (80021a8 <_ZN14rosserial_msgs3Log7getTypeEv+0x14>)
 800219e:	4618      	mov	r0, r3
 80021a0:	370c      	adds	r7, #12
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bc80      	pop	{r7}
 80021a6:	4770      	bx	lr
 80021a8:	0800ac60 	.word	0x0800ac60

080021ac <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	4b02      	ldr	r3, [pc, #8]	@ (80021c0 <_ZN14rosserial_msgs3Log6getMD5Ev+0x14>)
 80021b6:	4618      	mov	r0, r3
 80021b8:	370c      	adds	r7, #12
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bc80      	pop	{r7}
 80021be:	4770      	bx	lr
 80021c0:	0800ac74 	.word	0x0800ac74

080021c4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	4618      	mov	r0, r3
 80021d0:	f7ff fc92 	bl	8001af8 <_ZN3ros3MsgC1Ev>
 80021d4:	4a11      	ldr	r2, [pc, #68]	@ (800221c <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	601a      	str	r2, [r3, #0]
      ints_length(0), st_ints(), ints(nullptr),
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	605a      	str	r2, [r3, #4]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	609a      	str	r2, [r3, #8]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	60da      	str	r2, [r3, #12]
      floats_length(0), st_floats(), floats(nullptr),
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2200      	movs	r2, #0
 80021f0:	611a      	str	r2, [r3, #16]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f04f 0200 	mov.w	r2, #0
 80021f8:	615a      	str	r2, [r3, #20]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2200      	movs	r2, #0
 80021fe:	619a      	str	r2, [r3, #24]
      strings_length(0), st_strings(), strings(nullptr)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	61da      	str	r2, [r3, #28]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	621a      	str	r2, [r3, #32]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	625a      	str	r2, [r3, #36]	@ 0x24
    {
    }
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4618      	mov	r0, r3
 8002216:	3708      	adds	r7, #8
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	0800af9c 	.word	0x0800af9c

08002220 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002220:	b580      	push	{r7, lr}
 8002222:	b08a      	sub	sp, #40	@ 0x28
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800222a:	2300      	movs	r3, #0
 800222c:	627b      	str	r3, [r7, #36]	@ 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6859      	ldr	r1, [r3, #4]
 8002232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002234:	683a      	ldr	r2, [r7, #0]
 8002236:	4413      	add	r3, r2
 8002238:	b2ca      	uxtb	r2, r1
 800223a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	0a19      	lsrs	r1, r3, #8
 8002242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002244:	3301      	adds	r3, #1
 8002246:	683a      	ldr	r2, [r7, #0]
 8002248:	4413      	add	r3, r2
 800224a:	b2ca      	uxtb	r2, r1
 800224c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	0c19      	lsrs	r1, r3, #16
 8002254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002256:	3302      	adds	r3, #2
 8002258:	683a      	ldr	r2, [r7, #0]
 800225a:	4413      	add	r3, r2
 800225c:	b2ca      	uxtb	r2, r1
 800225e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	0e19      	lsrs	r1, r3, #24
 8002266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002268:	3303      	adds	r3, #3
 800226a:	683a      	ldr	r2, [r7, #0]
 800226c:	4413      	add	r3, r2
 800226e:	b2ca      	uxtb	r2, r1
 8002270:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8002272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002274:	3304      	adds	r3, #4
 8002276:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002278:	2300      	movs	r3, #0
 800227a:	623b      	str	r3, [r7, #32]
 800227c:	e02a      	b.n	80022d4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xb4>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	68da      	ldr	r2, [r3, #12]
 8002282:	6a3b      	ldr	r3, [r7, #32]
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	4413      	add	r3, r2
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 800228c:	6939      	ldr	r1, [r7, #16]
 800228e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002290:	683a      	ldr	r2, [r7, #0]
 8002292:	4413      	add	r3, r2
 8002294:	b2ca      	uxtb	r2, r1
 8002296:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	0a19      	lsrs	r1, r3, #8
 800229c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800229e:	3301      	adds	r3, #1
 80022a0:	683a      	ldr	r2, [r7, #0]
 80022a2:	4413      	add	r3, r2
 80022a4:	b2ca      	uxtb	r2, r1
 80022a6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	0c19      	lsrs	r1, r3, #16
 80022ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ae:	3302      	adds	r3, #2
 80022b0:	683a      	ldr	r2, [r7, #0]
 80022b2:	4413      	add	r3, r2
 80022b4:	b2ca      	uxtb	r2, r1
 80022b6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	0e19      	lsrs	r1, r3, #24
 80022bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022be:	3303      	adds	r3, #3
 80022c0:	683a      	ldr	r2, [r7, #0]
 80022c2:	4413      	add	r3, r2
 80022c4:	b2ca      	uxtb	r2, r1
 80022c6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 80022c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ca:	3304      	adds	r3, #4
 80022cc:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80022ce:	6a3b      	ldr	r3, [r7, #32]
 80022d0:	3301      	adds	r3, #1
 80022d2:	623b      	str	r3, [r7, #32]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	6a3a      	ldr	r2, [r7, #32]
 80022da:	429a      	cmp	r2, r3
 80022dc:	d3cf      	bcc.n	800227e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6919      	ldr	r1, [r3, #16]
 80022e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022e4:	683a      	ldr	r2, [r7, #0]
 80022e6:	4413      	add	r3, r2
 80022e8:	b2ca      	uxtb	r2, r1
 80022ea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	691b      	ldr	r3, [r3, #16]
 80022f0:	0a19      	lsrs	r1, r3, #8
 80022f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022f4:	3301      	adds	r3, #1
 80022f6:	683a      	ldr	r2, [r7, #0]
 80022f8:	4413      	add	r3, r2
 80022fa:	b2ca      	uxtb	r2, r1
 80022fc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	691b      	ldr	r3, [r3, #16]
 8002302:	0c19      	lsrs	r1, r3, #16
 8002304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002306:	3302      	adds	r3, #2
 8002308:	683a      	ldr	r2, [r7, #0]
 800230a:	4413      	add	r3, r2
 800230c:	b2ca      	uxtb	r2, r1
 800230e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	691b      	ldr	r3, [r3, #16]
 8002314:	0e19      	lsrs	r1, r3, #24
 8002316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002318:	3303      	adds	r3, #3
 800231a:	683a      	ldr	r2, [r7, #0]
 800231c:	4413      	add	r3, r2
 800231e:	b2ca      	uxtb	r2, r1
 8002320:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8002322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002324:	3304      	adds	r3, #4
 8002326:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002328:	2300      	movs	r3, #0
 800232a:	61fb      	str	r3, [r7, #28]
 800232c:	e02a      	b.n	8002384 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x164>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	699a      	ldr	r2, [r3, #24]
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	4413      	add	r3, r2
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 800233c:	68f9      	ldr	r1, [r7, #12]
 800233e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002340:	683a      	ldr	r2, [r7, #0]
 8002342:	4413      	add	r3, r2
 8002344:	b2ca      	uxtb	r2, r1
 8002346:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	0a19      	lsrs	r1, r3, #8
 800234c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800234e:	3301      	adds	r3, #1
 8002350:	683a      	ldr	r2, [r7, #0]
 8002352:	4413      	add	r3, r2
 8002354:	b2ca      	uxtb	r2, r1
 8002356:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	0c19      	lsrs	r1, r3, #16
 800235c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800235e:	3302      	adds	r3, #2
 8002360:	683a      	ldr	r2, [r7, #0]
 8002362:	4413      	add	r3, r2
 8002364:	b2ca      	uxtb	r2, r1
 8002366:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	0e19      	lsrs	r1, r3, #24
 800236c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800236e:	3303      	adds	r3, #3
 8002370:	683a      	ldr	r2, [r7, #0]
 8002372:	4413      	add	r3, r2
 8002374:	b2ca      	uxtb	r2, r1
 8002376:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8002378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800237a:	3304      	adds	r3, #4
 800237c:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	3301      	adds	r3, #1
 8002382:	61fb      	str	r3, [r7, #28]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	691b      	ldr	r3, [r3, #16]
 8002388:	69fa      	ldr	r2, [r7, #28]
 800238a:	429a      	cmp	r2, r3
 800238c:	d3cf      	bcc.n	800232e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10e>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	69d9      	ldr	r1, [r3, #28]
 8002392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002394:	683a      	ldr	r2, [r7, #0]
 8002396:	4413      	add	r3, r2
 8002398:	b2ca      	uxtb	r2, r1
 800239a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	69db      	ldr	r3, [r3, #28]
 80023a0:	0a19      	lsrs	r1, r3, #8
 80023a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023a4:	3301      	adds	r3, #1
 80023a6:	683a      	ldr	r2, [r7, #0]
 80023a8:	4413      	add	r3, r2
 80023aa:	b2ca      	uxtb	r2, r1
 80023ac:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	69db      	ldr	r3, [r3, #28]
 80023b2:	0c19      	lsrs	r1, r3, #16
 80023b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023b6:	3302      	adds	r3, #2
 80023b8:	683a      	ldr	r2, [r7, #0]
 80023ba:	4413      	add	r3, r2
 80023bc:	b2ca      	uxtb	r2, r1
 80023be:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	69db      	ldr	r3, [r3, #28]
 80023c4:	0e19      	lsrs	r1, r3, #24
 80023c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023c8:	3303      	adds	r3, #3
 80023ca:	683a      	ldr	r2, [r7, #0]
 80023cc:	4413      	add	r3, r2
 80023ce:	b2ca      	uxtb	r2, r1
 80023d0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 80023d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023d4:	3304      	adds	r3, #4
 80023d6:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80023d8:	2300      	movs	r3, #0
 80023da:	61bb      	str	r3, [r7, #24]
 80023dc:	e027      	b.n	800242e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x20e>
      uint32_t length_stringsi = strlen(this->strings[i]);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	4413      	add	r3, r2
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4618      	mov	r0, r3
 80023ec:	f7fd feb0 	bl	8000150 <strlen>
 80023f0:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 80023f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023f4:	683a      	ldr	r2, [r7, #0]
 80023f6:	4413      	add	r3, r2
 80023f8:	6979      	ldr	r1, [r7, #20]
 80023fa:	4618      	mov	r0, r3
 80023fc:	f003 fcd8 	bl	8005db0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002402:	3304      	adds	r3, #4
 8002404:	627b      	str	r3, [r7, #36]	@ 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8002406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002408:	683a      	ldr	r2, [r7, #0]
 800240a:	18d0      	adds	r0, r2, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002410:	69bb      	ldr	r3, [r7, #24]
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	4413      	add	r3, r2
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	697a      	ldr	r2, [r7, #20]
 800241a:	4619      	mov	r1, r3
 800241c:	f008 fabc 	bl	800a998 <memcpy>
      offset += length_stringsi;
 8002420:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	4413      	add	r3, r2
 8002426:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002428:	69bb      	ldr	r3, [r7, #24]
 800242a:	3301      	adds	r3, #1
 800242c:	61bb      	str	r3, [r7, #24]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	69db      	ldr	r3, [r3, #28]
 8002432:	69ba      	ldr	r2, [r7, #24]
 8002434:	429a      	cmp	r2, r3
 8002436:	d3d2      	bcc.n	80023de <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1be>
      }
      return offset;
 8002438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 800243a:	4618      	mov	r0, r3
 800243c:	3728      	adds	r7, #40	@ 0x28
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}

08002442 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002442:	b580      	push	{r7, lr}
 8002444:	b08e      	sub	sp, #56	@ 0x38
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
 800244a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800244c:	2300      	movs	r3, #0
 800244e:	637b      	str	r3, [r7, #52]	@ 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002450:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002452:	683a      	ldr	r2, [r7, #0]
 8002454:	4413      	add	r3, r2
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800245a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800245c:	3301      	adds	r3, #1
 800245e:	683a      	ldr	r2, [r7, #0]
 8002460:	4413      	add	r3, r2
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	021b      	lsls	r3, r3, #8
 8002466:	6a3a      	ldr	r2, [r7, #32]
 8002468:	4313      	orrs	r3, r2
 800246a:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800246c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800246e:	3302      	adds	r3, #2
 8002470:	683a      	ldr	r2, [r7, #0]
 8002472:	4413      	add	r3, r2
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	041b      	lsls	r3, r3, #16
 8002478:	6a3a      	ldr	r2, [r7, #32]
 800247a:	4313      	orrs	r3, r2
 800247c:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800247e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002480:	3303      	adds	r3, #3
 8002482:	683a      	ldr	r2, [r7, #0]
 8002484:	4413      	add	r3, r2
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	061b      	lsls	r3, r3, #24
 800248a:	6a3a      	ldr	r2, [r7, #32]
 800248c:	4313      	orrs	r3, r2
 800248e:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8002490:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002492:	3304      	adds	r3, #4
 8002494:	637b      	str	r3, [r7, #52]	@ 0x34
      if(ints_lengthT > ints_length)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	6a3a      	ldr	r2, [r7, #32]
 800249c:	429a      	cmp	r2, r3
 800249e:	d90a      	bls.n	80024b6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	68da      	ldr	r2, [r3, #12]
 80024a4:	6a3b      	ldr	r3, [r7, #32]
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	4619      	mov	r1, r3
 80024aa:	4610      	mov	r0, r2
 80024ac:	f008 fa0a 	bl	800a8c4 <realloc>
 80024b0:	4602      	mov	r2, r0
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6a3a      	ldr	r2, [r7, #32]
 80024ba:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 80024bc:	2300      	movs	r3, #0
 80024be:	633b      	str	r3, [r7, #48]	@ 0x30
 80024c0:	e035      	b.n	800252e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xec>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 80024c2:	2300      	movs	r3, #0
 80024c4:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80024ca:	6839      	ldr	r1, [r7, #0]
 80024cc:	440a      	add	r2, r1
 80024ce:	7812      	ldrb	r2, [r2, #0]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80024d4:	697a      	ldr	r2, [r7, #20]
 80024d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024d8:	3301      	adds	r3, #1
 80024da:	6839      	ldr	r1, [r7, #0]
 80024dc:	440b      	add	r3, r1
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	021b      	lsls	r3, r3, #8
 80024e2:	4313      	orrs	r3, r2
 80024e4:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80024e6:	697a      	ldr	r2, [r7, #20]
 80024e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024ea:	3302      	adds	r3, #2
 80024ec:	6839      	ldr	r1, [r7, #0]
 80024ee:	440b      	add	r3, r1
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	041b      	lsls	r3, r3, #16
 80024f4:	4313      	orrs	r3, r2
 80024f6:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80024f8:	697a      	ldr	r2, [r7, #20]
 80024fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024fc:	3303      	adds	r3, #3
 80024fe:	6839      	ldr	r1, [r7, #0]
 8002500:	440b      	add	r3, r1
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	061b      	lsls	r3, r3, #24
 8002506:	4313      	orrs	r3, r2
 8002508:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 800250a:	697a      	ldr	r2, [r7, #20]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8002510:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002512:	3304      	adds	r3, #4
 8002514:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	68da      	ldr	r2, [r3, #12]
 800251a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	4413      	add	r3, r2
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	3208      	adds	r2, #8
 8002524:	6812      	ldr	r2, [r2, #0]
 8002526:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8002528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800252a:	3301      	adds	r3, #1
 800252c:	633b      	str	r3, [r7, #48]	@ 0x30
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002534:	429a      	cmp	r2, r3
 8002536:	d3c4      	bcc.n	80024c2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x80>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002538:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800253a:	683a      	ldr	r2, [r7, #0]
 800253c:	4413      	add	r3, r2
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002542:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002544:	3301      	adds	r3, #1
 8002546:	683a      	ldr	r2, [r7, #0]
 8002548:	4413      	add	r3, r2
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	021b      	lsls	r3, r3, #8
 800254e:	69fa      	ldr	r2, [r7, #28]
 8002550:	4313      	orrs	r3, r2
 8002552:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002554:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002556:	3302      	adds	r3, #2
 8002558:	683a      	ldr	r2, [r7, #0]
 800255a:	4413      	add	r3, r2
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	041b      	lsls	r3, r3, #16
 8002560:	69fa      	ldr	r2, [r7, #28]
 8002562:	4313      	orrs	r3, r2
 8002564:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002566:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002568:	3303      	adds	r3, #3
 800256a:	683a      	ldr	r2, [r7, #0]
 800256c:	4413      	add	r3, r2
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	061b      	lsls	r3, r3, #24
 8002572:	69fa      	ldr	r2, [r7, #28]
 8002574:	4313      	orrs	r3, r2
 8002576:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8002578:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800257a:	3304      	adds	r3, #4
 800257c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(floats_lengthT > floats_length)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	69fa      	ldr	r2, [r7, #28]
 8002584:	429a      	cmp	r2, r3
 8002586:	d90a      	bls.n	800259e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	699a      	ldr	r2, [r3, #24]
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	4619      	mov	r1, r3
 8002592:	4610      	mov	r0, r2
 8002594:	f008 f996 	bl	800a8c4 <realloc>
 8002598:	4602      	mov	r2, r0
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	69fa      	ldr	r2, [r7, #28]
 80025a2:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 80025a4:	2300      	movs	r3, #0
 80025a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80025a8:	e035      	b.n	8002616 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1d4>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 80025aa:	2300      	movs	r3, #0
 80025ac:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80025b2:	6839      	ldr	r1, [r7, #0]
 80025b4:	440a      	add	r2, r1
 80025b6:	7812      	ldrb	r2, [r2, #0]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80025bc:	693a      	ldr	r2, [r7, #16]
 80025be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025c0:	3301      	adds	r3, #1
 80025c2:	6839      	ldr	r1, [r7, #0]
 80025c4:	440b      	add	r3, r1
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	021b      	lsls	r3, r3, #8
 80025ca:	4313      	orrs	r3, r2
 80025cc:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80025ce:	693a      	ldr	r2, [r7, #16]
 80025d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025d2:	3302      	adds	r3, #2
 80025d4:	6839      	ldr	r1, [r7, #0]
 80025d6:	440b      	add	r3, r1
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	041b      	lsls	r3, r3, #16
 80025dc:	4313      	orrs	r3, r2
 80025de:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80025e0:	693a      	ldr	r2, [r7, #16]
 80025e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025e4:	3303      	adds	r3, #3
 80025e6:	6839      	ldr	r1, [r7, #0]
 80025e8:	440b      	add	r3, r1
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	061b      	lsls	r3, r3, #24
 80025ee:	4313      	orrs	r3, r2
 80025f0:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 80025f2:	693a      	ldr	r2, [r7, #16]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 80025f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025fa:	3304      	adds	r3, #4
 80025fc:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	699a      	ldr	r2, [r3, #24]
 8002602:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	4413      	add	r3, r2
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	3214      	adds	r2, #20
 800260c:	6812      	ldr	r2, [r2, #0]
 800260e:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8002610:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002612:	3301      	adds	r3, #1
 8002614:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	691b      	ldr	r3, [r3, #16]
 800261a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800261c:	429a      	cmp	r2, r3
 800261e:	d3c4      	bcc.n	80025aa <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x168>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002620:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002622:	683a      	ldr	r2, [r7, #0]
 8002624:	4413      	add	r3, r2
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800262a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800262c:	3301      	adds	r3, #1
 800262e:	683a      	ldr	r2, [r7, #0]
 8002630:	4413      	add	r3, r2
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	021b      	lsls	r3, r3, #8
 8002636:	69ba      	ldr	r2, [r7, #24]
 8002638:	4313      	orrs	r3, r2
 800263a:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800263c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800263e:	3302      	adds	r3, #2
 8002640:	683a      	ldr	r2, [r7, #0]
 8002642:	4413      	add	r3, r2
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	041b      	lsls	r3, r3, #16
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	4313      	orrs	r3, r2
 800264c:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800264e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002650:	3303      	adds	r3, #3
 8002652:	683a      	ldr	r2, [r7, #0]
 8002654:	4413      	add	r3, r2
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	061b      	lsls	r3, r3, #24
 800265a:	69ba      	ldr	r2, [r7, #24]
 800265c:	4313      	orrs	r3, r2
 800265e:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8002660:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002662:	3304      	adds	r3, #4
 8002664:	637b      	str	r3, [r7, #52]	@ 0x34
      if(strings_lengthT > strings_length)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	69db      	ldr	r3, [r3, #28]
 800266a:	69ba      	ldr	r2, [r7, #24]
 800266c:	429a      	cmp	r2, r3
 800266e:	d90a      	bls.n	8002686 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	4619      	mov	r1, r3
 800267a:	4610      	mov	r0, r2
 800267c:	f008 f922 	bl	800a8c4 <realloc>
 8002680:	4602      	mov	r2, r0
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	625a      	str	r2, [r3, #36]	@ 0x24
      strings_length = strings_lengthT;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 800268c:	2300      	movs	r3, #0
 800268e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002690:	e03e      	b.n	8002710 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2ce>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8002692:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002694:	683a      	ldr	r2, [r7, #0]
 8002696:	441a      	add	r2, r3
 8002698:	f107 030c 	add.w	r3, r7, #12
 800269c:	4611      	mov	r1, r2
 800269e:	4618      	mov	r0, r3
 80026a0:	f003 fba4 	bl	8005dec <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80026a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026a6:	3304      	adds	r3, #4
 80026a8:	637b      	str	r3, [r7, #52]	@ 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80026aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80026ae:	e00b      	b.n	80026c8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x286>
          inbuffer[k-1]=inbuffer[k];
 80026b0:	683a      	ldr	r2, [r7, #0]
 80026b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026b4:	441a      	add	r2, r3
 80026b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026b8:	3b01      	subs	r3, #1
 80026ba:	6839      	ldr	r1, [r7, #0]
 80026bc:	440b      	add	r3, r1
 80026be:	7812      	ldrb	r2, [r2, #0]
 80026c0:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80026c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c4:	3301      	adds	r3, #1
 80026c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80026c8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	4413      	add	r3, r2
 80026ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d3ed      	bcc.n	80026b0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26e>
      }
      inbuffer[offset+length_st_strings-1]=0;
 80026d4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	4413      	add	r3, r2
 80026da:	3b01      	subs	r3, #1
 80026dc:	683a      	ldr	r2, [r7, #0]
 80026de:	4413      	add	r3, r2
 80026e0:	2200      	movs	r2, #0
 80026e2:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 80026e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026e6:	3b01      	subs	r3, #1
 80026e8:	683a      	ldr	r2, [r7, #0]
 80026ea:	441a      	add	r2, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 80026f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	4413      	add	r3, r2
 80026f6:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80026fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	4413      	add	r3, r2
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	3220      	adds	r2, #32
 8002706:	6812      	ldr	r2, [r2, #0]
 8002708:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 800270a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800270c:	3301      	adds	r3, #1
 800270e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	69db      	ldr	r3, [r3, #28]
 8002714:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002716:	429a      	cmp	r2, r3
 8002718:	d3bb      	bcc.n	8002692 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x250>
      }
     return offset;
 800271a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 800271c:	4618      	mov	r0, r3
 800271e:	3738      	adds	r7, #56	@ 0x38
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}

08002724 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	4b02      	ldr	r3, [pc, #8]	@ (8002738 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x14>)
 800272e:	4618      	mov	r0, r3
 8002730:	370c      	adds	r7, #12
 8002732:	46bd      	mov	sp, r7
 8002734:	bc80      	pop	{r7}
 8002736:	4770      	bx	lr
 8002738:	0800aea8 	.word	0x0800aea8

0800273c <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	4b02      	ldr	r3, [pc, #8]	@ (8002750 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x14>)
 8002746:	4618      	mov	r0, r3
 8002748:	370c      	adds	r7, #12
 800274a:	46bd      	mov	sp, r7
 800274c:	bc80      	pop	{r7}
 800274e:	4770      	bx	lr
 8002750:	0800ac98 	.word	0x0800ac98

08002754 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8002754:	b480      	push	{r7}
 8002756:	b085      	sub	sp, #20
 8002758:	af00      	add	r7, sp, #0
 800275a:	60f8      	str	r0, [r7, #12]
 800275c:	60b9      	str	r1, [r7, #8]
 800275e:	607a      	str	r2, [r7, #4]
 8002760:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	68ba      	ldr	r2, [r7, #8]
 8002766:	601a      	str	r2, [r3, #0]
    msg_(msg),
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	605a      	str	r2, [r3, #4]
    endpoint_(endpoint) {};
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	683a      	ldr	r2, [r7, #0]
 8002772:	611a      	str	r2, [r3, #16]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	4618      	mov	r0, r3
 8002778:	3714      	adds	r7, #20
 800277a:	46bd      	mov	sp, r7
 800277c:	bc80      	pop	{r7}
 800277e:	4770      	bx	lr

08002780 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	68d8      	ldr	r0, [r3, #12]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	6891      	ldr	r1, [r2, #8]
 800279a:	683a      	ldr	r2, [r7, #0]
 800279c:	4798      	blx	r3
 800279e:	4603      	mov	r3, r0
  };
 80027a0:	4618      	mov	r0, r3
 80027a2:	3708      	adds	r7, #8
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	691b      	ldr	r3, [r3, #16]
  }
 80027b4:	4618      	mov	r0, r3
 80027b6:	370c      	adds	r7, #12
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bc80      	pop	{r7}
 80027bc:	4770      	bx	lr

080027be <_ZN10SerialCommC1ER20__UART_HandleTypeDef>:
    uint16_t tx_tail = 0;
    uint16_t rx_tail = 0;
    static constexpr uint16_t buf_mask = buffer_size - 1;

public:
    SerialComm(UART_HandleTypeDef &huart) : huart(huart)
 80027be:	b480      	push	{r7}
 80027c0:	b083      	sub	sp, #12
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
 80027c6:	6039      	str	r1, [r7, #0]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	683a      	ldr	r2, [r7, #0]
 80027cc:	601a      	str	r2, [r3, #0]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80027d4:	2201      	movs	r2, #1
 80027d6:	711a      	strb	r2, [r3, #4]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80027de:	2200      	movs	r2, #0
 80027e0:	80da      	strh	r2, [r3, #6]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80027e8:	2200      	movs	r2, #0
 80027ea:	811a      	strh	r2, [r3, #8]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80027f2:	2200      	movs	r2, #0
 80027f4:	815a      	strh	r2, [r3, #10]
    {
        // Other initialization code
    }
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4618      	mov	r0, r3
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bc80      	pop	{r7}
 8002800:	4770      	bx	lr

08002802 <_ZN10SerialComm4initEv>:

    void init(void)
 8002802:	b580      	push	{r7, lr}
 8002804:	b082      	sub	sp, #8
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]
    {
        reset_rbuf();
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f000 f90e 	bl	8002a2c <_ZN10SerialComm10reset_rbufEv>
    }
 8002810:	bf00      	nop
 8002812:	3708      	adds	r7, #8
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <_ZN10SerialComm4readEv>:

    /** @brief Read a character from the Rx buffer using the FIFO method.
     * 
     * @return The read character.
    */
    int read(void)
 8002818:	b480      	push	{r7}
 800281a:	b085      	sub	sp, #20
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
    {
       uint16_t rx_head = (buffer_size - huart.hdmarx->Instance->CNDTR) & buf_mask;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	b29b      	uxth	r3, r3
 800282c:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8002830:	b29b      	uxth	r3, r3
 8002832:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002836:	81fb      	strh	r3, [r7, #14]

        // Check for overlapping (which is bad, data will be overwritten)
        if (rx_tail == rx_head)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800283e:	895b      	ldrh	r3, [r3, #10]
 8002840:	89fa      	ldrh	r2, [r7, #14]
 8002842:	429a      	cmp	r2, r3
 8002844:	d102      	bne.n	800284c <_ZN10SerialComm4readEv+0x34>
        {
            return -1;
 8002846:	f04f 33ff 	mov.w	r3, #4294967295
 800284a:	e01d      	b.n	8002888 <_ZN10SerialComm4readEv+0x70>
        }

        // Read a value and increment the read pointer (TAIL).
        int c = (int) rx_buf[rx_tail++];
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002852:	895b      	ldrh	r3, [r3, #10]
 8002854:	1c5a      	adds	r2, r3, #1
 8002856:	b291      	uxth	r1, r2
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800285e:	8151      	strh	r1, [r2, #10]
 8002860:	461a      	mov	r2, r3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4413      	add	r3, r2
 8002866:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800286a:	3304      	adds	r3, #4
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	60bb      	str	r3, [r7, #8]
        rx_tail &= buf_mask;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002876:	895b      	ldrh	r3, [r3, #10]
 8002878:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800287c:	b29a      	uxth	r2, r3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002884:	815a      	strh	r2, [r3, #10]

        return c;
 8002886:	68bb      	ldr	r3, [r7, #8]
    }
 8002888:	4618      	mov	r0, r3
 800288a:	3714      	adds	r7, #20
 800288c:	46bd      	mov	sp, r7
 800288e:	bc80      	pop	{r7}
 8002890:	4770      	bx	lr

08002892 <_ZN10SerialComm5writeEPKhi>:
     * @param data The pointer to the data string.
     * @param length The length of the data string.
     * 
     * @return Void. 
    */
    void write(const uint8_t* const data, const int length)
 8002892:	b580      	push	{r7, lr}
 8002894:	b086      	sub	sp, #24
 8002896:	af00      	add	r7, sp, #0
 8002898:	60f8      	str	r0, [r7, #12]
 800289a:	60b9      	str	r1, [r7, #8]
 800289c:	607a      	str	r2, [r7, #4]
    {
        // Faulty data guard.
        if (length > buffer_size || length < 1)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80028a4:	dc46      	bgt.n	8002934 <_ZN10SerialComm5writeEPKhi+0xa2>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	dd43      	ble.n	8002934 <_ZN10SerialComm5writeEPKhi+0xa2>
        {
            return;
        }

        // Wait for the completion of the previous Tx transfer.
        while (!is_tx_cplt);
 80028ac:	bf00      	nop
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80028b4:	791b      	ldrb	r3, [r3, #4]
 80028b6:	f083 0301 	eor.w	r3, r3, #1
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d1f6      	bne.n	80028ae <_ZN10SerialComm5writeEPKhi+0x1c>

        // Check if the data is bigger than the remaining storage
        int w_len = (length <= (buffer_size - tx_head)) ? length : (buffer_size - tx_head);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80028c6:	88db      	ldrh	r3, [r3, #6]
 80028c8:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	4293      	cmp	r3, r2
 80028d0:	bfa8      	it	ge
 80028d2:	4613      	movge	r3, r2
 80028d4:	617b      	str	r3, [r7, #20]

        // Write the data and increment the write pointer (TX_HEAD)
        memcpy(&tx_buf[tx_head], data, w_len);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80028dc:	88db      	ldrh	r3, [r3, #6]
 80028de:	461a      	mov	r2, r3
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	4413      	add	r3, r2
 80028e4:	3304      	adds	r3, #4
 80028e6:	697a      	ldr	r2, [r7, #20]
 80028e8:	68b9      	ldr	r1, [r7, #8]
 80028ea:	4618      	mov	r0, r3
 80028ec:	f008 f854 	bl	800a998 <memcpy>
        tx_head = (tx_head + length) & buf_mask;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80028f6:	88da      	ldrh	r2, [r3, #6]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	4413      	add	r3, r2
 80028fe:	b29b      	uxth	r3, r3
 8002900:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002904:	b29a      	uxth	r2, r3
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800290c:	80da      	strh	r2, [r3, #6]

        // Reset the TX_HEAD pointer and write the remaining data
        // (If data is bigger than the previous remaining data)
        if (length != w_len)
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	429a      	cmp	r2, r3
 8002914:	d00a      	beq.n	800292c <_ZN10SerialComm5writeEPKhi+0x9a>
        {
            memcpy(tx_buf, &data[w_len], length - w_len);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	1d18      	adds	r0, r3, #4
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	68ba      	ldr	r2, [r7, #8]
 800291e:	18d1      	adds	r1, r2, r3
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	461a      	mov	r2, r3
 8002928:	f008 f836 	bl	800a998 <memcpy>
        }

        // TODO: Start transfering
        flush();
 800292c:	68f8      	ldr	r0, [r7, #12]
 800292e:	f000 f805 	bl	800293c <_ZN10SerialComm5flushEv>
 8002932:	e000      	b.n	8002936 <_ZN10SerialComm5writeEPKhi+0xa4>
            return;
 8002934:	bf00      	nop
    }
 8002936:	3718      	adds	r7, #24
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}

0800293c <_ZN10SerialComm5flushEv>:

    /** @brief Transmit the just written data in the Tx buffer
     * 
     * @return void.
    */
    void flush()
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
    {
        if (is_tx_cplt)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800294a:	791b      	ldrb	r3, [r3, #4]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d05b      	beq.n	8002a08 <_ZN10SerialComm5flushEv+0xcc>
        {
            // if HEAD == TAIL => The buffer is empty => Nothing to send.
            if (tx_head != tx_tail)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002956:	88da      	ldrh	r2, [r3, #6]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800295e:	891b      	ldrh	r3, [r3, #8]
 8002960:	429a      	cmp	r2, r3
 8002962:	d04c      	beq.n	80029fe <_ZN10SerialComm5flushEv+0xc2>
            {
                uint16_t len = 0;
 8002964:	2300      	movs	r3, #0
 8002966:	81fb      	strh	r3, [r7, #14]

                if (tx_tail < tx_head)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800296e:	891a      	ldrh	r2, [r3, #8]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002976:	88db      	ldrh	r3, [r3, #6]
 8002978:	429a      	cmp	r2, r3
 800297a:	d218      	bcs.n	80029ae <_ZN10SerialComm5flushEv+0x72>
                {
                    len = tx_head - tx_tail;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002982:	88da      	ldrh	r2, [r3, #6]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800298a:	891b      	ldrh	r3, [r3, #8]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	81fb      	strh	r3, [r7, #14]
                    HAL_UART_Transmit_DMA(&huart, &tx_buf[tx_tail], len);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6818      	ldr	r0, [r3, #0]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800299a:	891b      	ldrh	r3, [r3, #8]
 800299c:	461a      	mov	r2, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4413      	add	r3, r2
 80029a2:	3304      	adds	r3, #4
 80029a4:	89fa      	ldrh	r2, [r7, #14]
 80029a6:	4619      	mov	r1, r3
 80029a8:	f006 ff00 	bl	80097ac <HAL_UART_Transmit_DMA>
 80029ac:	e01f      	b.n	80029ee <_ZN10SerialComm5flushEv+0xb2>
                }
                else
                {
                    len = buffer_size - tx_tail;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80029b4:	891b      	ldrh	r3, [r3, #8]
 80029b6:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 80029ba:	81fb      	strh	r3, [r7, #14]
                    HAL_UART_Transmit_DMA(&huart, &tx_buf[tx_tail], len);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6818      	ldr	r0, [r3, #0]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80029c6:	891b      	ldrh	r3, [r3, #8]
 80029c8:	461a      	mov	r2, r3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4413      	add	r3, r2
 80029ce:	3304      	adds	r3, #4
 80029d0:	89fa      	ldrh	r2, [r7, #14]
 80029d2:	4619      	mov	r1, r3
 80029d4:	f006 feea 	bl	80097ac <HAL_UART_Transmit_DMA>
                    HAL_UART_Transmit_DMA(&huart, tx_buf, tx_head);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6818      	ldr	r0, [r3, #0]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	1d19      	adds	r1, r3, #4
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80029e6:	88db      	ldrh	r3, [r3, #6]
 80029e8:	461a      	mov	r2, r3
 80029ea:	f006 fedf 	bl	80097ac <HAL_UART_Transmit_DMA>
                }
                
                tx_tail = tx_head;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80029f4:	88da      	ldrh	r2, [r3, #6]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80029fc:	811a      	strh	r2, [r3, #8]
            }
            
            is_tx_cplt = false;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002a04:	2200      	movs	r2, #0
 8002a06:	711a      	strb	r2, [r3, #4]
        }
    }
 8002a08:	bf00      	nop
 8002a0a:	3710      	adds	r7, #16
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <_ZN10SerialComm11set_tx_cpltEv>:

    void set_tx_cplt(void)
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
    {
        is_tx_cplt = true;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002a1e:	2201      	movs	r2, #1
 8002a20:	711a      	strb	r2, [r3, #4]
    }
 8002a22:	bf00      	nop
 8002a24:	370c      	adds	r7, #12
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bc80      	pop	{r7}
 8002a2a:	4770      	bx	lr

08002a2c <_ZN10SerialComm10reset_rbufEv>:

    void reset_rbuf(void)
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b082      	sub	sp, #8
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
    {
        HAL_UART_Receive_DMA(&huart, (uint8_t *)rx_buf, buffer_size);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6818      	ldr	r0, [r3, #0]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a3e:	3304      	adds	r3, #4
 8002a40:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002a44:	4619      	mov	r1, r3
 8002a46:	f006 ff21 	bl	800988c <HAL_UART_Receive_DMA>
    }
 8002a4a:	bf00      	nop
 8002a4c:	3708      	adds	r7, #8
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
	...

08002a54 <_ZN13STM32HardwareC1Ev>:
class STM32Hardware {
  protected:
    SerialComm &comm;

  public:
    STM32Hardware() : comm(comm_rosserial)
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	4a04      	ldr	r2, [pc, #16]	@ (8002a70 <_ZN13STM32HardwareC1Ev+0x1c>)
 8002a60:	601a      	str	r2, [r3, #0]
    {
        // TODO:
    }
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4618      	mov	r0, r3
 8002a66:	370c      	adds	r7, #12
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bc80      	pop	{r7}
 8002a6c:	4770      	bx	lr
 8002a6e:	bf00      	nop
 8002a70:	200001f0 	.word	0x200001f0

08002a74 <_ZN13STM32Hardware4initEv>:
    STM32Hardware(SerialComm &comm) : comm(comm)
    {
        // TODO: 
    }
  
    void init()
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
    {
        comm.init();
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4618      	mov	r0, r3
 8002a82:	f7ff febe 	bl	8002802 <_ZN10SerialComm4initEv>
    }
 8002a86:	bf00      	nop
 8002a88:	3708      	adds	r7, #8
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}

08002a8e <_ZN13STM32Hardware4readEv>:

    int read()  
 8002a8e:	b580      	push	{r7, lr}
 8002a90:	b082      	sub	sp, #8
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	6078      	str	r0, [r7, #4]
    {
        return comm.read();
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7ff febc 	bl	8002818 <_ZN10SerialComm4readEv>
 8002aa0:	4603      	mov	r3, r0
    }
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3708      	adds	r7, #8
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}

08002aaa <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length)
 8002aaa:	b580      	push	{r7, lr}
 8002aac:	b084      	sub	sp, #16
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	60f8      	str	r0, [r7, #12]
 8002ab2:	60b9      	str	r1, [r7, #8]
 8002ab4:	607a      	str	r2, [r7, #4]
    {
        comm.write(data, length);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	68b9      	ldr	r1, [r7, #8]
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f7ff fee7 	bl	8002892 <_ZN10SerialComm5writeEPKhi>
    }
 8002ac4:	bf00      	nop
 8002ac6:	3710      	adds	r7, #16
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}

08002acc <_ZN13STM32Hardware4timeEv>:

    unsigned long time()
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
    { 
        return HAL_GetTick(); 
 8002ad4:	f004 fc36 	bl	8007344 <HAL_GetTick>
 8002ad8:	4603      	mov	r3, r0
    }
 8002ada:	4618      	mov	r0, r3
 8002adc:	3708      	adds	r7, #8
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
	...

08002ae4 <_ZN8std_msgs6HeaderC1Ev>:
      typedef ros::Time _stamp_type;
      _stamp_type stamp;
      typedef const char* _frame_id_type;
      _frame_id_type frame_id;

    Header():
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
      seq(0),
      stamp(),
      frame_id("")
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	4618      	mov	r0, r3
 8002af0:	f7ff f802 	bl	8001af8 <_ZN3ros3MsgC1Ev>
 8002af4:	4a09      	ldr	r2, [pc, #36]	@ (8002b1c <_ZN8std_msgs6HeaderC1Ev+0x38>)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	601a      	str	r2, [r3, #0]
      seq(0),
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	605a      	str	r2, [r3, #4]
      stamp(),
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	3308      	adds	r3, #8
 8002b04:	4618      	mov	r0, r3
 8002b06:	f7fe ffe7 	bl	8001ad8 <_ZN3ros4TimeC1Ev>
      frame_id("")
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a04      	ldr	r2, [pc, #16]	@ (8002b20 <_ZN8std_msgs6HeaderC1Ev+0x3c>)
 8002b0e:	611a      	str	r2, [r3, #16]
    {
    }
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	4618      	mov	r0, r3
 8002b14:	3708      	adds	r7, #8
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	0800af70 	.word	0x0800af70
 8002b20:	0800ac1c 	.word	0x0800ac1c

08002b24 <_ZNK8std_msgs6Header9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->seq >> (8 * 0)) & 0xFF;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6859      	ldr	r1, [r3, #4]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	683a      	ldr	r2, [r7, #0]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	b2ca      	uxtb	r2, r1
 8002b3e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->seq >> (8 * 1)) & 0xFF;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	0a19      	lsrs	r1, r3, #8
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	3301      	adds	r3, #1
 8002b4a:	683a      	ldr	r2, [r7, #0]
 8002b4c:	4413      	add	r3, r2
 8002b4e:	b2ca      	uxtb	r2, r1
 8002b50:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->seq >> (8 * 2)) & 0xFF;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	0c19      	lsrs	r1, r3, #16
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	3302      	adds	r3, #2
 8002b5c:	683a      	ldr	r2, [r7, #0]
 8002b5e:	4413      	add	r3, r2
 8002b60:	b2ca      	uxtb	r2, r1
 8002b62:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->seq >> (8 * 3)) & 0xFF;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	0e19      	lsrs	r1, r3, #24
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	3303      	adds	r3, #3
 8002b6e:	683a      	ldr	r2, [r7, #0]
 8002b70:	4413      	add	r3, r2
 8002b72:	b2ca      	uxtb	r2, r1
 8002b74:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->seq);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	3304      	adds	r3, #4
 8002b7a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stamp.sec >> (8 * 0)) & 0xFF;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6899      	ldr	r1, [r3, #8]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	683a      	ldr	r2, [r7, #0]
 8002b84:	4413      	add	r3, r2
 8002b86:	b2ca      	uxtb	r2, r1
 8002b88:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stamp.sec >> (8 * 1)) & 0xFF;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	0a19      	lsrs	r1, r3, #8
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	3301      	adds	r3, #1
 8002b94:	683a      	ldr	r2, [r7, #0]
 8002b96:	4413      	add	r3, r2
 8002b98:	b2ca      	uxtb	r2, r1
 8002b9a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stamp.sec >> (8 * 2)) & 0xFF;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	0c19      	lsrs	r1, r3, #16
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	3302      	adds	r3, #2
 8002ba6:	683a      	ldr	r2, [r7, #0]
 8002ba8:	4413      	add	r3, r2
 8002baa:	b2ca      	uxtb	r2, r1
 8002bac:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stamp.sec >> (8 * 3)) & 0xFF;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	0e19      	lsrs	r1, r3, #24
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	3303      	adds	r3, #3
 8002bb8:	683a      	ldr	r2, [r7, #0]
 8002bba:	4413      	add	r3, r2
 8002bbc:	b2ca      	uxtb	r2, r1
 8002bbe:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stamp.sec);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	3304      	adds	r3, #4
 8002bc4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stamp.nsec >> (8 * 0)) & 0xFF;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	68d9      	ldr	r1, [r3, #12]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	683a      	ldr	r2, [r7, #0]
 8002bce:	4413      	add	r3, r2
 8002bd0:	b2ca      	uxtb	r2, r1
 8002bd2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stamp.nsec >> (8 * 1)) & 0xFF;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	0a19      	lsrs	r1, r3, #8
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	3301      	adds	r3, #1
 8002bde:	683a      	ldr	r2, [r7, #0]
 8002be0:	4413      	add	r3, r2
 8002be2:	b2ca      	uxtb	r2, r1
 8002be4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stamp.nsec >> (8 * 2)) & 0xFF;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	0c19      	lsrs	r1, r3, #16
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	3302      	adds	r3, #2
 8002bf0:	683a      	ldr	r2, [r7, #0]
 8002bf2:	4413      	add	r3, r2
 8002bf4:	b2ca      	uxtb	r2, r1
 8002bf6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stamp.nsec >> (8 * 3)) & 0xFF;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	0e19      	lsrs	r1, r3, #24
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	3303      	adds	r3, #3
 8002c02:	683a      	ldr	r2, [r7, #0]
 8002c04:	4413      	add	r3, r2
 8002c06:	b2ca      	uxtb	r2, r1
 8002c08:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stamp.nsec);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	3304      	adds	r3, #4
 8002c0e:	60fb      	str	r3, [r7, #12]
      uint32_t length_frame_id = strlen(this->frame_id);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	691b      	ldr	r3, [r3, #16]
 8002c14:	4618      	mov	r0, r3
 8002c16:	f7fd fa9b 	bl	8000150 <strlen>
 8002c1a:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_frame_id);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	683a      	ldr	r2, [r7, #0]
 8002c20:	4413      	add	r3, r2
 8002c22:	68b9      	ldr	r1, [r7, #8]
 8002c24:	4618      	mov	r0, r3
 8002c26:	f003 f8c3 	bl	8005db0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	3304      	adds	r3, #4
 8002c2e:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->frame_id, length_frame_id);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	683a      	ldr	r2, [r7, #0]
 8002c34:	18d0      	adds	r0, r2, r3
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	691b      	ldr	r3, [r3, #16]
 8002c3a:	68ba      	ldr	r2, [r7, #8]
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	f007 feab 	bl	800a998 <memcpy>
      offset += length_frame_id;
 8002c42:	68fa      	ldr	r2, [r7, #12]
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	4413      	add	r3, r2
 8002c48:	60fb      	str	r3, [r7, #12]
      return offset;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
    }
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3710      	adds	r7, #16
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <_ZN8std_msgs6Header11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b086      	sub	sp, #24
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	613b      	str	r3, [r7, #16]
      this->seq =  ((uint32_t) (*(inbuffer + offset)));
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	683a      	ldr	r2, [r7, #0]
 8002c66:	4413      	add	r3, r2
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	685a      	ldr	r2, [r3, #4]
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	3301      	adds	r3, #1
 8002c78:	6839      	ldr	r1, [r7, #0]
 8002c7a:	440b      	add	r3, r1
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	021b      	lsls	r3, r3, #8
 8002c80:	431a      	orrs	r2, r3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	685a      	ldr	r2, [r3, #4]
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	3302      	adds	r3, #2
 8002c8e:	6839      	ldr	r1, [r7, #0]
 8002c90:	440b      	add	r3, r1
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	041b      	lsls	r3, r3, #16
 8002c96:	431a      	orrs	r2, r3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	685a      	ldr	r2, [r3, #4]
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	3303      	adds	r3, #3
 8002ca4:	6839      	ldr	r1, [r7, #0]
 8002ca6:	440b      	add	r3, r1
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	061b      	lsls	r3, r3, #24
 8002cac:	431a      	orrs	r2, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->seq);
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	3304      	adds	r3, #4
 8002cb6:	613b      	str	r3, [r7, #16]
      this->stamp.sec =  ((uint32_t) (*(inbuffer + offset)));
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	683a      	ldr	r2, [r7, #0]
 8002cbc:	4413      	add	r3, r2
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	689a      	ldr	r2, [r3, #8]
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	3301      	adds	r3, #1
 8002cce:	6839      	ldr	r1, [r7, #0]
 8002cd0:	440b      	add	r3, r1
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	021b      	lsls	r3, r3, #8
 8002cd6:	431a      	orrs	r2, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	689a      	ldr	r2, [r3, #8]
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	3302      	adds	r3, #2
 8002ce4:	6839      	ldr	r1, [r7, #0]
 8002ce6:	440b      	add	r3, r1
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	041b      	lsls	r3, r3, #16
 8002cec:	431a      	orrs	r2, r3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	689a      	ldr	r2, [r3, #8]
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	3303      	adds	r3, #3
 8002cfa:	6839      	ldr	r1, [r7, #0]
 8002cfc:	440b      	add	r3, r1
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	061b      	lsls	r3, r3, #24
 8002d02:	431a      	orrs	r2, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->stamp.sec);
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	3304      	adds	r3, #4
 8002d0c:	613b      	str	r3, [r7, #16]
      this->stamp.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	683a      	ldr	r2, [r7, #0]
 8002d12:	4413      	add	r3, r2
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	461a      	mov	r2, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	68da      	ldr	r2, [r3, #12]
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	3301      	adds	r3, #1
 8002d24:	6839      	ldr	r1, [r7, #0]
 8002d26:	440b      	add	r3, r1
 8002d28:	781b      	ldrb	r3, [r3, #0]
 8002d2a:	021b      	lsls	r3, r3, #8
 8002d2c:	431a      	orrs	r2, r3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	68da      	ldr	r2, [r3, #12]
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	3302      	adds	r3, #2
 8002d3a:	6839      	ldr	r1, [r7, #0]
 8002d3c:	440b      	add	r3, r1
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	041b      	lsls	r3, r3, #16
 8002d42:	431a      	orrs	r2, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	68da      	ldr	r2, [r3, #12]
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	3303      	adds	r3, #3
 8002d50:	6839      	ldr	r1, [r7, #0]
 8002d52:	440b      	add	r3, r1
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	061b      	lsls	r3, r3, #24
 8002d58:	431a      	orrs	r2, r3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->stamp.nsec);
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	3304      	adds	r3, #4
 8002d62:	613b      	str	r3, [r7, #16]
      uint32_t length_frame_id;
      arrToVar(length_frame_id, (inbuffer + offset));
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	683a      	ldr	r2, [r7, #0]
 8002d68:	441a      	add	r2, r3
 8002d6a:	f107 030c 	add.w	r3, r7, #12
 8002d6e:	4611      	mov	r1, r2
 8002d70:	4618      	mov	r0, r3
 8002d72:	f003 f83b 	bl	8005dec <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	3304      	adds	r3, #4
 8002d7a:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	617b      	str	r3, [r7, #20]
 8002d80:	e00b      	b.n	8002d9a <_ZN8std_msgs6Header11deserializeEPh+0x146>
          inbuffer[k-1]=inbuffer[k];
 8002d82:	683a      	ldr	r2, [r7, #0]
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	441a      	add	r2, r3
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	3b01      	subs	r3, #1
 8002d8c:	6839      	ldr	r1, [r7, #0]
 8002d8e:	440b      	add	r3, r1
 8002d90:	7812      	ldrb	r2, [r2, #0]
 8002d92:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	3301      	adds	r3, #1
 8002d98:	617b      	str	r3, [r7, #20]
 8002d9a:	693a      	ldr	r2, [r7, #16]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	4413      	add	r3, r2
 8002da0:	697a      	ldr	r2, [r7, #20]
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d3ed      	bcc.n	8002d82 <_ZN8std_msgs6Header11deserializeEPh+0x12e>
      }
      inbuffer[offset+length_frame_id-1]=0;
 8002da6:	693a      	ldr	r2, [r7, #16]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	4413      	add	r3, r2
 8002dac:	3b01      	subs	r3, #1
 8002dae:	683a      	ldr	r2, [r7, #0]
 8002db0:	4413      	add	r3, r2
 8002db2:	2200      	movs	r2, #0
 8002db4:	701a      	strb	r2, [r3, #0]
      this->frame_id = (char *)(inbuffer + offset-1);
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	3b01      	subs	r3, #1
 8002dba:	683a      	ldr	r2, [r7, #0]
 8002dbc:	441a      	add	r2, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	611a      	str	r2, [r3, #16]
      offset += length_frame_id;
 8002dc2:	693a      	ldr	r2, [r7, #16]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	4413      	add	r3, r2
 8002dc8:	613b      	str	r3, [r7, #16]
     return offset;
 8002dca:	693b      	ldr	r3, [r7, #16]
    }
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3718      	adds	r7, #24
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <_ZN8std_msgs6Header7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Header"; };
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	4b02      	ldr	r3, [pc, #8]	@ (8002de8 <_ZN8std_msgs6Header7getTypeEv+0x14>)
 8002dde:	4618      	mov	r0, r3
 8002de0:	370c      	adds	r7, #12
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bc80      	pop	{r7}
 8002de6:	4770      	bx	lr
 8002de8:	0800acbc 	.word	0x0800acbc

08002dec <_ZN8std_msgs6Header6getMD5Ev>:
    virtual const char * getMD5() override { return "2176decaecbce78abc3b96ef049fabed"; };
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	4b02      	ldr	r3, [pc, #8]	@ (8002e00 <_ZN8std_msgs6Header6getMD5Ev+0x14>)
 8002df6:	4618      	mov	r0, r3
 8002df8:	370c      	adds	r7, #12
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bc80      	pop	{r7}
 8002dfe:	4770      	bx	lr
 8002e00:	0800accc 	.word	0x0800accc

08002e04 <_ZN13geometry_msgs10QuaternionC1Ev>:
      typedef double _z_type;
      _z_type z;
      typedef double _w_type;
      _w_type w;

    Quaternion():
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0),
      w(0)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f7fe fe72 	bl	8001af8 <_ZN3ros3MsgC1Ev>
 8002e14:	4a11      	ldr	r2, [pc, #68]	@ (8002e5c <_ZN13geometry_msgs10QuaternionC1Ev+0x58>)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	601a      	str	r2, [r3, #0]
      x(0),
 8002e1a:	6879      	ldr	r1, [r7, #4]
 8002e1c:	f04f 0200 	mov.w	r2, #0
 8002e20:	f04f 0300 	mov.w	r3, #0
 8002e24:	e9c1 2302 	strd	r2, r3, [r1, #8]
      y(0),
 8002e28:	6879      	ldr	r1, [r7, #4]
 8002e2a:	f04f 0200 	mov.w	r2, #0
 8002e2e:	f04f 0300 	mov.w	r3, #0
 8002e32:	e9c1 2304 	strd	r2, r3, [r1, #16]
      z(0),
 8002e36:	6879      	ldr	r1, [r7, #4]
 8002e38:	f04f 0200 	mov.w	r2, #0
 8002e3c:	f04f 0300 	mov.w	r3, #0
 8002e40:	e9c1 2306 	strd	r2, r3, [r1, #24]
      w(0)
 8002e44:	6879      	ldr	r1, [r7, #4]
 8002e46:	f04f 0200 	mov.w	r2, #0
 8002e4a:	f04f 0300 	mov.w	r3, #0
 8002e4e:	e9c1 2308 	strd	r2, r3, [r1, #32]
    {
    }
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4618      	mov	r0, r3
 8002e56:	3708      	adds	r7, #8
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	0800af58 	.word	0x0800af58

08002e60 <_ZNK13geometry_msgs10Quaternion9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002e60:	b480      	push	{r7}
 8002e62:	b08d      	sub	sp, #52	@ 0x34
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002e74:	e9c7 2308 	strd	r2, r3, [r7, #32]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8002e78:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002e7c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002e7e:	6838      	ldr	r0, [r7, #0]
 8002e80:	4401      	add	r1, r0
 8002e82:	b2d3      	uxtb	r3, r2
 8002e84:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 8002e86:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002e8a:	f04f 0200 	mov.w	r2, #0
 8002e8e:	f04f 0300 	mov.w	r3, #0
 8002e92:	0a02      	lsrs	r2, r0, #8
 8002e94:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002e98:	0a0b      	lsrs	r3, r1, #8
 8002e9a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002e9c:	3101      	adds	r1, #1
 8002e9e:	6838      	ldr	r0, [r7, #0]
 8002ea0:	4401      	add	r1, r0
 8002ea2:	b2d3      	uxtb	r3, r2
 8002ea4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 8002ea6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002eaa:	f04f 0200 	mov.w	r2, #0
 8002eae:	f04f 0300 	mov.w	r3, #0
 8002eb2:	0c02      	lsrs	r2, r0, #16
 8002eb4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002eb8:	0c0b      	lsrs	r3, r1, #16
 8002eba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002ebc:	3102      	adds	r1, #2
 8002ebe:	6838      	ldr	r0, [r7, #0]
 8002ec0:	4401      	add	r1, r0
 8002ec2:	b2d3      	uxtb	r3, r2
 8002ec4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 8002ec6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002eca:	f04f 0200 	mov.w	r2, #0
 8002ece:	f04f 0300 	mov.w	r3, #0
 8002ed2:	0e02      	lsrs	r2, r0, #24
 8002ed4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002ed8:	0e0b      	lsrs	r3, r1, #24
 8002eda:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002edc:	3103      	adds	r1, #3
 8002ede:	6838      	ldr	r0, [r7, #0]
 8002ee0:	4401      	add	r1, r0
 8002ee2:	b2d3      	uxtb	r3, r2
 8002ee4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 8002ee6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002eea:	f04f 0200 	mov.w	r2, #0
 8002eee:	f04f 0300 	mov.w	r3, #0
 8002ef2:	000a      	movs	r2, r1
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002ef8:	3104      	adds	r1, #4
 8002efa:	6838      	ldr	r0, [r7, #0]
 8002efc:	4401      	add	r1, r0
 8002efe:	b2d3      	uxtb	r3, r2
 8002f00:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 8002f02:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002f06:	f04f 0200 	mov.w	r2, #0
 8002f0a:	f04f 0300 	mov.w	r3, #0
 8002f0e:	0a0a      	lsrs	r2, r1, #8
 8002f10:	2300      	movs	r3, #0
 8002f12:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002f14:	3105      	adds	r1, #5
 8002f16:	6838      	ldr	r0, [r7, #0]
 8002f18:	4401      	add	r1, r0
 8002f1a:	b2d3      	uxtb	r3, r2
 8002f1c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8002f1e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002f22:	f04f 0200 	mov.w	r2, #0
 8002f26:	f04f 0300 	mov.w	r3, #0
 8002f2a:	0c0a      	lsrs	r2, r1, #16
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002f30:	3106      	adds	r1, #6
 8002f32:	6838      	ldr	r0, [r7, #0]
 8002f34:	4401      	add	r1, r0
 8002f36:	b2d3      	uxtb	r3, r2
 8002f38:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8002f3a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002f3e:	f04f 0200 	mov.w	r2, #0
 8002f42:	f04f 0300 	mov.w	r3, #0
 8002f46:	0e0a      	lsrs	r2, r1, #24
 8002f48:	2300      	movs	r3, #0
 8002f4a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002f4c:	3107      	adds	r1, #7
 8002f4e:	6838      	ldr	r0, [r7, #0]
 8002f50:	4401      	add	r1, r0
 8002f52:	b2d3      	uxtb	r3, r2
 8002f54:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 8002f56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f58:	3308      	adds	r3, #8
 8002f5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002f62:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 8002f66:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f6a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002f6c:	6838      	ldr	r0, [r7, #0]
 8002f6e:	4401      	add	r1, r0
 8002f70:	b2d3      	uxtb	r3, r2
 8002f72:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8002f74:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002f78:	f04f 0200 	mov.w	r2, #0
 8002f7c:	f04f 0300 	mov.w	r3, #0
 8002f80:	0a02      	lsrs	r2, r0, #8
 8002f82:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002f86:	0a0b      	lsrs	r3, r1, #8
 8002f88:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002f8a:	3101      	adds	r1, #1
 8002f8c:	6838      	ldr	r0, [r7, #0]
 8002f8e:	4401      	add	r1, r0
 8002f90:	b2d3      	uxtb	r3, r2
 8002f92:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8002f94:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002f98:	f04f 0200 	mov.w	r2, #0
 8002f9c:	f04f 0300 	mov.w	r3, #0
 8002fa0:	0c02      	lsrs	r2, r0, #16
 8002fa2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002fa6:	0c0b      	lsrs	r3, r1, #16
 8002fa8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002faa:	3102      	adds	r1, #2
 8002fac:	6838      	ldr	r0, [r7, #0]
 8002fae:	4401      	add	r1, r0
 8002fb0:	b2d3      	uxtb	r3, r2
 8002fb2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8002fb4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002fb8:	f04f 0200 	mov.w	r2, #0
 8002fbc:	f04f 0300 	mov.w	r3, #0
 8002fc0:	0e02      	lsrs	r2, r0, #24
 8002fc2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002fc6:	0e0b      	lsrs	r3, r1, #24
 8002fc8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002fca:	3103      	adds	r1, #3
 8002fcc:	6838      	ldr	r0, [r7, #0]
 8002fce:	4401      	add	r1, r0
 8002fd0:	b2d3      	uxtb	r3, r2
 8002fd2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8002fd4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002fd8:	f04f 0200 	mov.w	r2, #0
 8002fdc:	f04f 0300 	mov.w	r3, #0
 8002fe0:	000a      	movs	r2, r1
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002fe6:	3104      	adds	r1, #4
 8002fe8:	6838      	ldr	r0, [r7, #0]
 8002fea:	4401      	add	r1, r0
 8002fec:	b2d3      	uxtb	r3, r2
 8002fee:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8002ff0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002ff4:	f04f 0200 	mov.w	r2, #0
 8002ff8:	f04f 0300 	mov.w	r3, #0
 8002ffc:	0a0a      	lsrs	r2, r1, #8
 8002ffe:	2300      	movs	r3, #0
 8003000:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003002:	3105      	adds	r1, #5
 8003004:	6838      	ldr	r0, [r7, #0]
 8003006:	4401      	add	r1, r0
 8003008:	b2d3      	uxtb	r3, r2
 800300a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 800300c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003010:	f04f 0200 	mov.w	r2, #0
 8003014:	f04f 0300 	mov.w	r3, #0
 8003018:	0c0a      	lsrs	r2, r1, #16
 800301a:	2300      	movs	r3, #0
 800301c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800301e:	3106      	adds	r1, #6
 8003020:	6838      	ldr	r0, [r7, #0]
 8003022:	4401      	add	r1, r0
 8003024:	b2d3      	uxtb	r3, r2
 8003026:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8003028:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800302c:	f04f 0200 	mov.w	r2, #0
 8003030:	f04f 0300 	mov.w	r3, #0
 8003034:	0e0a      	lsrs	r2, r1, #24
 8003036:	2300      	movs	r3, #0
 8003038:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800303a:	3107      	adds	r1, #7
 800303c:	6838      	ldr	r0, [r7, #0]
 800303e:	4401      	add	r1, r0
 8003040:	b2d3      	uxtb	r3, r2
 8003042:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 8003044:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003046:	3308      	adds	r3, #8
 8003048:	62fb      	str	r3, [r7, #44]	@ 0x2c
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003050:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8003054:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003058:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800305a:	6838      	ldr	r0, [r7, #0]
 800305c:	4401      	add	r1, r0
 800305e:	b2d3      	uxtb	r3, r2
 8003060:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8003062:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003066:	f04f 0200 	mov.w	r2, #0
 800306a:	f04f 0300 	mov.w	r3, #0
 800306e:	0a02      	lsrs	r2, r0, #8
 8003070:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003074:	0a0b      	lsrs	r3, r1, #8
 8003076:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003078:	3101      	adds	r1, #1
 800307a:	6838      	ldr	r0, [r7, #0]
 800307c:	4401      	add	r1, r0
 800307e:	b2d3      	uxtb	r3, r2
 8003080:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8003082:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003086:	f04f 0200 	mov.w	r2, #0
 800308a:	f04f 0300 	mov.w	r3, #0
 800308e:	0c02      	lsrs	r2, r0, #16
 8003090:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003094:	0c0b      	lsrs	r3, r1, #16
 8003096:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003098:	3102      	adds	r1, #2
 800309a:	6838      	ldr	r0, [r7, #0]
 800309c:	4401      	add	r1, r0
 800309e:	b2d3      	uxtb	r3, r2
 80030a0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 80030a2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80030a6:	f04f 0200 	mov.w	r2, #0
 80030aa:	f04f 0300 	mov.w	r3, #0
 80030ae:	0e02      	lsrs	r2, r0, #24
 80030b0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80030b4:	0e0b      	lsrs	r3, r1, #24
 80030b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80030b8:	3103      	adds	r1, #3
 80030ba:	6838      	ldr	r0, [r7, #0]
 80030bc:	4401      	add	r1, r0
 80030be:	b2d3      	uxtb	r3, r2
 80030c0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 80030c2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80030c6:	f04f 0200 	mov.w	r2, #0
 80030ca:	f04f 0300 	mov.w	r3, #0
 80030ce:	000a      	movs	r2, r1
 80030d0:	2300      	movs	r3, #0
 80030d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80030d4:	3104      	adds	r1, #4
 80030d6:	6838      	ldr	r0, [r7, #0]
 80030d8:	4401      	add	r1, r0
 80030da:	b2d3      	uxtb	r3, r2
 80030dc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 80030de:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80030e2:	f04f 0200 	mov.w	r2, #0
 80030e6:	f04f 0300 	mov.w	r3, #0
 80030ea:	0a0a      	lsrs	r2, r1, #8
 80030ec:	2300      	movs	r3, #0
 80030ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80030f0:	3105      	adds	r1, #5
 80030f2:	6838      	ldr	r0, [r7, #0]
 80030f4:	4401      	add	r1, r0
 80030f6:	b2d3      	uxtb	r3, r2
 80030f8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 80030fa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80030fe:	f04f 0200 	mov.w	r2, #0
 8003102:	f04f 0300 	mov.w	r3, #0
 8003106:	0c0a      	lsrs	r2, r1, #16
 8003108:	2300      	movs	r3, #0
 800310a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800310c:	3106      	adds	r1, #6
 800310e:	6838      	ldr	r0, [r7, #0]
 8003110:	4401      	add	r1, r0
 8003112:	b2d3      	uxtb	r3, r2
 8003114:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 8003116:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800311a:	f04f 0200 	mov.w	r2, #0
 800311e:	f04f 0300 	mov.w	r3, #0
 8003122:	0e0a      	lsrs	r2, r1, #24
 8003124:	2300      	movs	r3, #0
 8003126:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003128:	3107      	adds	r1, #7
 800312a:	6838      	ldr	r0, [r7, #0]
 800312c:	4401      	add	r1, r0
 800312e:	b2d3      	uxtb	r3, r2
 8003130:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 8003132:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003134:	3308      	adds	r3, #8
 8003136:	62fb      	str	r3, [r7, #44]	@ 0x2c
      union {
        double real;
        uint64_t base;
      } u_w;
      u_w.real = this->w;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800313e:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_w.base >> (8 * 0)) & 0xFF;
 8003142:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003146:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003148:	6838      	ldr	r0, [r7, #0]
 800314a:	4401      	add	r1, r0
 800314c:	b2d3      	uxtb	r3, r2
 800314e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_w.base >> (8 * 1)) & 0xFF;
 8003150:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003154:	f04f 0200 	mov.w	r2, #0
 8003158:	f04f 0300 	mov.w	r3, #0
 800315c:	0a02      	lsrs	r2, r0, #8
 800315e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003162:	0a0b      	lsrs	r3, r1, #8
 8003164:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003166:	3101      	adds	r1, #1
 8003168:	6838      	ldr	r0, [r7, #0]
 800316a:	4401      	add	r1, r0
 800316c:	b2d3      	uxtb	r3, r2
 800316e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_w.base >> (8 * 2)) & 0xFF;
 8003170:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003174:	f04f 0200 	mov.w	r2, #0
 8003178:	f04f 0300 	mov.w	r3, #0
 800317c:	0c02      	lsrs	r2, r0, #16
 800317e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003182:	0c0b      	lsrs	r3, r1, #16
 8003184:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003186:	3102      	adds	r1, #2
 8003188:	6838      	ldr	r0, [r7, #0]
 800318a:	4401      	add	r1, r0
 800318c:	b2d3      	uxtb	r3, r2
 800318e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_w.base >> (8 * 3)) & 0xFF;
 8003190:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003194:	f04f 0200 	mov.w	r2, #0
 8003198:	f04f 0300 	mov.w	r3, #0
 800319c:	0e02      	lsrs	r2, r0, #24
 800319e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80031a2:	0e0b      	lsrs	r3, r1, #24
 80031a4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80031a6:	3103      	adds	r1, #3
 80031a8:	6838      	ldr	r0, [r7, #0]
 80031aa:	4401      	add	r1, r0
 80031ac:	b2d3      	uxtb	r3, r2
 80031ae:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_w.base >> (8 * 4)) & 0xFF;
 80031b0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80031b4:	f04f 0200 	mov.w	r2, #0
 80031b8:	f04f 0300 	mov.w	r3, #0
 80031bc:	000a      	movs	r2, r1
 80031be:	2300      	movs	r3, #0
 80031c0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80031c2:	3104      	adds	r1, #4
 80031c4:	6838      	ldr	r0, [r7, #0]
 80031c6:	4401      	add	r1, r0
 80031c8:	b2d3      	uxtb	r3, r2
 80031ca:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_w.base >> (8 * 5)) & 0xFF;
 80031cc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80031d0:	f04f 0200 	mov.w	r2, #0
 80031d4:	f04f 0300 	mov.w	r3, #0
 80031d8:	0a0a      	lsrs	r2, r1, #8
 80031da:	2300      	movs	r3, #0
 80031dc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80031de:	3105      	adds	r1, #5
 80031e0:	6838      	ldr	r0, [r7, #0]
 80031e2:	4401      	add	r1, r0
 80031e4:	b2d3      	uxtb	r3, r2
 80031e6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_w.base >> (8 * 6)) & 0xFF;
 80031e8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80031ec:	f04f 0200 	mov.w	r2, #0
 80031f0:	f04f 0300 	mov.w	r3, #0
 80031f4:	0c0a      	lsrs	r2, r1, #16
 80031f6:	2300      	movs	r3, #0
 80031f8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80031fa:	3106      	adds	r1, #6
 80031fc:	6838      	ldr	r0, [r7, #0]
 80031fe:	4401      	add	r1, r0
 8003200:	b2d3      	uxtb	r3, r2
 8003202:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_w.base >> (8 * 7)) & 0xFF;
 8003204:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003208:	f04f 0200 	mov.w	r2, #0
 800320c:	f04f 0300 	mov.w	r3, #0
 8003210:	0e0a      	lsrs	r2, r1, #24
 8003212:	2300      	movs	r3, #0
 8003214:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003216:	3107      	adds	r1, #7
 8003218:	6838      	ldr	r0, [r7, #0]
 800321a:	4401      	add	r1, r0
 800321c:	b2d3      	uxtb	r3, r2
 800321e:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->w);
 8003220:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003222:	3308      	adds	r3, #8
 8003224:	62fb      	str	r3, [r7, #44]	@ 0x2c
      return offset;
 8003226:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
 8003228:	4618      	mov	r0, r3
 800322a:	3734      	adds	r7, #52	@ 0x34
 800322c:	46bd      	mov	sp, r7
 800322e:	bc80      	pop	{r7}
 8003230:	4770      	bx	lr

08003232 <_ZN13geometry_msgs10Quaternion11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8003232:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003236:	f5ad 7d0f 	sub.w	sp, sp, #572	@ 0x23c
 800323a:	af00      	add	r7, sp, #0
 800323c:	f8c7 020c 	str.w	r0, [r7, #524]	@ 0x20c
 8003240:	f8c7 1208 	str.w	r1, [r7, #520]	@ 0x208
    {
      int offset = 0;
 8003244:	2300      	movs	r3, #0
 8003246:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 800324a:	f04f 0200 	mov.w	r2, #0
 800324e:	f04f 0300 	mov.w	r3, #0
 8003252:	e9c7 238a 	strd	r2, r3, [r7, #552]	@ 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003256:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
 800325a:	f8d7 2234 	ldr.w	r2, [r7, #564]	@ 0x234
 800325e:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8003262:	4413      	add	r3, r2
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	b2db      	uxtb	r3, r3
 8003268:	2200      	movs	r2, #0
 800326a:	461c      	mov	r4, r3
 800326c:	4615      	mov	r5, r2
 800326e:	ea40 0804 	orr.w	r8, r0, r4
 8003272:	ea41 0905 	orr.w	r9, r1, r5
 8003276:	e9c7 898a 	strd	r8, r9, [r7, #552]	@ 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800327a:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
 800327e:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8003282:	1c5a      	adds	r2, r3, #1
 8003284:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8003288:	4413      	add	r3, r2
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	b2db      	uxtb	r3, r3
 800328e:	2200      	movs	r2, #0
 8003290:	469a      	mov	sl, r3
 8003292:	4693      	mov	fp, r2
 8003294:	f04f 0200 	mov.w	r2, #0
 8003298:	f04f 0300 	mov.w	r3, #0
 800329c:	ea4f 230b 	mov.w	r3, fp, lsl #8
 80032a0:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 80032a4:	ea4f 220a 	mov.w	r2, sl, lsl #8
 80032a8:	ea40 0402 	orr.w	r4, r0, r2
 80032ac:	f8c7 4200 	str.w	r4, [r7, #512]	@ 0x200
 80032b0:	430b      	orrs	r3, r1
 80032b2:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
 80032b6:	e9d7 3480 	ldrd	r3, r4, [r7, #512]	@ 0x200
 80032ba:	e9c7 348a 	strd	r3, r4, [r7, #552]	@ 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80032be:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
 80032c2:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 80032c6:	1c9a      	adds	r2, r3, #2
 80032c8:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 80032cc:	4413      	add	r3, r2
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	2200      	movs	r2, #0
 80032d4:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
 80032d8:	f8c7 21fc 	str.w	r2, [r7, #508]	@ 0x1fc
 80032dc:	f04f 0200 	mov.w	r2, #0
 80032e0:	f04f 0300 	mov.w	r3, #0
 80032e4:	e9d7 897e 	ldrd	r8, r9, [r7, #504]	@ 0x1f8
 80032e8:	464c      	mov	r4, r9
 80032ea:	0423      	lsls	r3, r4, #16
 80032ec:	46c4      	mov	ip, r8
 80032ee:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
 80032f2:	4644      	mov	r4, r8
 80032f4:	0422      	lsls	r2, r4, #16
 80032f6:	ea40 0402 	orr.w	r4, r0, r2
 80032fa:	f8c7 41f0 	str.w	r4, [r7, #496]	@ 0x1f0
 80032fe:	430b      	orrs	r3, r1
 8003300:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
 8003304:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	@ 0x1f0
 8003308:	e9c7 348a 	strd	r3, r4, [r7, #552]	@ 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800330c:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
 8003310:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8003314:	1cda      	adds	r2, r3, #3
 8003316:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 800331a:	4413      	add	r3, r2
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	b2db      	uxtb	r3, r3
 8003320:	2200      	movs	r2, #0
 8003322:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8003326:	f8c7 21ec 	str.w	r2, [r7, #492]	@ 0x1ec
 800332a:	e9d7 457a 	ldrd	r4, r5, [r7, #488]	@ 0x1e8
 800332e:	4623      	mov	r3, r4
 8003330:	0a1b      	lsrs	r3, r3, #8
 8003332:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8003336:	4623      	mov	r3, r4
 8003338:	061b      	lsls	r3, r3, #24
 800333a:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 800333e:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	@ 0x1e0
 8003342:	461a      	mov	r2, r3
 8003344:	4302      	orrs	r2, r0
 8003346:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 800334a:	4623      	mov	r3, r4
 800334c:	430b      	orrs	r3, r1
 800334e:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8003352:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	@ 0x1d8
 8003356:	e9c7 348a 	strd	r3, r4, [r7, #552]	@ 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800335a:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
 800335e:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8003362:	1d1a      	adds	r2, r3, #4
 8003364:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8003368:	4413      	add	r3, r2
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	b2db      	uxtb	r3, r3
 800336e:	2200      	movs	r2, #0
 8003370:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 8003374:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
 8003378:	f04f 0200 	mov.w	r2, #0
 800337c:	f04f 0300 	mov.w	r3, #0
 8003380:	f8d7 41d0 	ldr.w	r4, [r7, #464]	@ 0x1d0
 8003384:	0023      	movs	r3, r4
 8003386:	2200      	movs	r2, #0
 8003388:	ea40 0402 	orr.w	r4, r0, r2
 800338c:	f8c7 41c8 	str.w	r4, [r7, #456]	@ 0x1c8
 8003390:	430b      	orrs	r3, r1
 8003392:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 8003396:	e9d7 3472 	ldrd	r3, r4, [r7, #456]	@ 0x1c8
 800339a:	e9c7 348a 	strd	r3, r4, [r7, #552]	@ 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800339e:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
 80033a2:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 80033a6:	1d5a      	adds	r2, r3, #5
 80033a8:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 80033ac:	4413      	add	r3, r2
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	2200      	movs	r2, #0
 80033b4:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80033b8:	f8c7 21c4 	str.w	r2, [r7, #452]	@ 0x1c4
 80033bc:	f04f 0200 	mov.w	r2, #0
 80033c0:	f04f 0300 	mov.w	r3, #0
 80033c4:	f8d7 41c0 	ldr.w	r4, [r7, #448]	@ 0x1c0
 80033c8:	0223      	lsls	r3, r4, #8
 80033ca:	2200      	movs	r2, #0
 80033cc:	ea40 0402 	orr.w	r4, r0, r2
 80033d0:	f8c7 41b8 	str.w	r4, [r7, #440]	@ 0x1b8
 80033d4:	430b      	orrs	r3, r1
 80033d6:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80033da:	e9d7 346e 	ldrd	r3, r4, [r7, #440]	@ 0x1b8
 80033de:	e9c7 348a 	strd	r3, r4, [r7, #552]	@ 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80033e2:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
 80033e6:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 80033ea:	1d9a      	adds	r2, r3, #6
 80033ec:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 80033f0:	4413      	add	r3, r2
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	2200      	movs	r2, #0
 80033f8:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 80033fc:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
 8003400:	f04f 0200 	mov.w	r2, #0
 8003404:	f04f 0300 	mov.w	r3, #0
 8003408:	f8d7 41b0 	ldr.w	r4, [r7, #432]	@ 0x1b0
 800340c:	0423      	lsls	r3, r4, #16
 800340e:	2200      	movs	r2, #0
 8003410:	ea40 0402 	orr.w	r4, r0, r2
 8003414:	f8c7 41a8 	str.w	r4, [r7, #424]	@ 0x1a8
 8003418:	430b      	orrs	r3, r1
 800341a:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 800341e:	e9d7 346a 	ldrd	r3, r4, [r7, #424]	@ 0x1a8
 8003422:	e9c7 348a 	strd	r3, r4, [r7, #552]	@ 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003426:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
 800342a:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 800342e:	1dda      	adds	r2, r3, #7
 8003430:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8003434:	4413      	add	r3, r2
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	b2db      	uxtb	r3, r3
 800343a:	2200      	movs	r2, #0
 800343c:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8003440:	f8c7 21a4 	str.w	r2, [r7, #420]	@ 0x1a4
 8003444:	f04f 0200 	mov.w	r2, #0
 8003448:	f04f 0300 	mov.w	r3, #0
 800344c:	f8d7 41a0 	ldr.w	r4, [r7, #416]	@ 0x1a0
 8003450:	0623      	lsls	r3, r4, #24
 8003452:	2200      	movs	r2, #0
 8003454:	ea40 0402 	orr.w	r4, r0, r2
 8003458:	f8c7 4198 	str.w	r4, [r7, #408]	@ 0x198
 800345c:	430b      	orrs	r3, r1
 800345e:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8003462:	e9d7 3466 	ldrd	r3, r4, [r7, #408]	@ 0x198
 8003466:	e9c7 348a 	strd	r3, r4, [r7, #552]	@ 0x228
      this->x = u_x.real;
 800346a:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
 800346e:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8003472:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 8003476:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 800347a:	3308      	adds	r3, #8
 800347c:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8003480:	f04f 0200 	mov.w	r2, #0
 8003484:	f04f 0300 	mov.w	r3, #0
 8003488:	e9c7 2388 	strd	r2, r3, [r7, #544]	@ 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800348c:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 8003490:	f8d7 2234 	ldr.w	r2, [r7, #564]	@ 0x234
 8003494:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8003498:	4413      	add	r3, r2
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	b2db      	uxtb	r3, r3
 800349e:	2200      	movs	r2, #0
 80034a0:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 80034a4:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
 80034a8:	e9d7 3464 	ldrd	r3, r4, [r7, #400]	@ 0x190
 80034ac:	461a      	mov	r2, r3
 80034ae:	4302      	orrs	r2, r0
 80034b0:	f8c7 2188 	str.w	r2, [r7, #392]	@ 0x188
 80034b4:	4623      	mov	r3, r4
 80034b6:	430b      	orrs	r3, r1
 80034b8:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 80034bc:	e9d7 3462 	ldrd	r3, r4, [r7, #392]	@ 0x188
 80034c0:	e9c7 3488 	strd	r3, r4, [r7, #544]	@ 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80034c4:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 80034c8:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 80034cc:	1c5a      	adds	r2, r3, #1
 80034ce:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 80034d2:	4413      	add	r3, r2
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	2200      	movs	r2, #0
 80034da:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80034de:	f8c7 2184 	str.w	r2, [r7, #388]	@ 0x184
 80034e2:	f04f 0200 	mov.w	r2, #0
 80034e6:	f04f 0300 	mov.w	r3, #0
 80034ea:	e9d7 8960 	ldrd	r8, r9, [r7, #384]	@ 0x180
 80034ee:	464c      	mov	r4, r9
 80034f0:	0223      	lsls	r3, r4, #8
 80034f2:	46c4      	mov	ip, r8
 80034f4:	ea43 631c 	orr.w	r3, r3, ip, lsr #24
 80034f8:	4644      	mov	r4, r8
 80034fa:	0222      	lsls	r2, r4, #8
 80034fc:	ea40 0402 	orr.w	r4, r0, r2
 8003500:	f8c7 4178 	str.w	r4, [r7, #376]	@ 0x178
 8003504:	430b      	orrs	r3, r1
 8003506:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 800350a:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	@ 0x178
 800350e:	e9c7 3488 	strd	r3, r4, [r7, #544]	@ 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003512:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 8003516:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 800351a:	1c9a      	adds	r2, r3, #2
 800351c:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8003520:	4413      	add	r3, r2
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	b2db      	uxtb	r3, r3
 8003526:	2200      	movs	r2, #0
 8003528:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 800352c:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
 8003530:	f04f 0200 	mov.w	r2, #0
 8003534:	f04f 0300 	mov.w	r3, #0
 8003538:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	@ 0x170
 800353c:	464c      	mov	r4, r9
 800353e:	0423      	lsls	r3, r4, #16
 8003540:	46c4      	mov	ip, r8
 8003542:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
 8003546:	4644      	mov	r4, r8
 8003548:	0422      	lsls	r2, r4, #16
 800354a:	ea40 0402 	orr.w	r4, r0, r2
 800354e:	f8c7 4168 	str.w	r4, [r7, #360]	@ 0x168
 8003552:	430b      	orrs	r3, r1
 8003554:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 8003558:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	@ 0x168
 800355c:	e9c7 3488 	strd	r3, r4, [r7, #544]	@ 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003560:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 8003564:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8003568:	1cda      	adds	r2, r3, #3
 800356a:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 800356e:	4413      	add	r3, r2
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	b2db      	uxtb	r3, r3
 8003574:	2200      	movs	r2, #0
 8003576:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 800357a:	f8c7 2164 	str.w	r2, [r7, #356]	@ 0x164
 800357e:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	@ 0x160
 8003582:	4623      	mov	r3, r4
 8003584:	0a1b      	lsrs	r3, r3, #8
 8003586:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 800358a:	4623      	mov	r3, r4
 800358c:	061b      	lsls	r3, r3, #24
 800358e:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8003592:	e9d7 3456 	ldrd	r3, r4, [r7, #344]	@ 0x158
 8003596:	461a      	mov	r2, r3
 8003598:	4302      	orrs	r2, r0
 800359a:	f8c7 2150 	str.w	r2, [r7, #336]	@ 0x150
 800359e:	4623      	mov	r3, r4
 80035a0:	430b      	orrs	r3, r1
 80035a2:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80035a6:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	@ 0x150
 80035aa:	e9c7 3488 	strd	r3, r4, [r7, #544]	@ 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80035ae:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 80035b2:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 80035b6:	1d1a      	adds	r2, r3, #4
 80035b8:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 80035bc:	4413      	add	r3, r2
 80035be:	781b      	ldrb	r3, [r3, #0]
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	2200      	movs	r2, #0
 80035c4:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 80035c8:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 80035cc:	f04f 0200 	mov.w	r2, #0
 80035d0:	f04f 0300 	mov.w	r3, #0
 80035d4:	f8d7 4148 	ldr.w	r4, [r7, #328]	@ 0x148
 80035d8:	0023      	movs	r3, r4
 80035da:	2200      	movs	r2, #0
 80035dc:	ea40 0402 	orr.w	r4, r0, r2
 80035e0:	f8c7 4140 	str.w	r4, [r7, #320]	@ 0x140
 80035e4:	430b      	orrs	r3, r1
 80035e6:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 80035ea:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	@ 0x140
 80035ee:	e9c7 3488 	strd	r3, r4, [r7, #544]	@ 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80035f2:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 80035f6:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 80035fa:	1d5a      	adds	r2, r3, #5
 80035fc:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8003600:	4413      	add	r3, r2
 8003602:	781b      	ldrb	r3, [r3, #0]
 8003604:	b2db      	uxtb	r3, r3
 8003606:	2200      	movs	r2, #0
 8003608:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 800360c:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 8003610:	f04f 0200 	mov.w	r2, #0
 8003614:	f04f 0300 	mov.w	r3, #0
 8003618:	f8d7 4138 	ldr.w	r4, [r7, #312]	@ 0x138
 800361c:	0223      	lsls	r3, r4, #8
 800361e:	2200      	movs	r2, #0
 8003620:	ea40 0402 	orr.w	r4, r0, r2
 8003624:	f8c7 4130 	str.w	r4, [r7, #304]	@ 0x130
 8003628:	430b      	orrs	r3, r1
 800362a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 800362e:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	@ 0x130
 8003632:	e9c7 3488 	strd	r3, r4, [r7, #544]	@ 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003636:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 800363a:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 800363e:	1d9a      	adds	r2, r3, #6
 8003640:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8003644:	4413      	add	r3, r2
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	b2db      	uxtb	r3, r3
 800364a:	2200      	movs	r2, #0
 800364c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8003650:	f8c7 212c 	str.w	r2, [r7, #300]	@ 0x12c
 8003654:	f04f 0200 	mov.w	r2, #0
 8003658:	f04f 0300 	mov.w	r3, #0
 800365c:	f8d7 4128 	ldr.w	r4, [r7, #296]	@ 0x128
 8003660:	0423      	lsls	r3, r4, #16
 8003662:	2200      	movs	r2, #0
 8003664:	ea40 0402 	orr.w	r4, r0, r2
 8003668:	f8c7 4120 	str.w	r4, [r7, #288]	@ 0x120
 800366c:	430b      	orrs	r3, r1
 800366e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8003672:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	@ 0x120
 8003676:	e9c7 3488 	strd	r3, r4, [r7, #544]	@ 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800367a:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 800367e:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8003682:	1dda      	adds	r2, r3, #7
 8003684:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8003688:	4413      	add	r3, r2
 800368a:	781b      	ldrb	r3, [r3, #0]
 800368c:	b2db      	uxtb	r3, r3
 800368e:	2200      	movs	r2, #0
 8003690:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8003694:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8003698:	f04f 0200 	mov.w	r2, #0
 800369c:	f04f 0300 	mov.w	r3, #0
 80036a0:	f8d7 4118 	ldr.w	r4, [r7, #280]	@ 0x118
 80036a4:	0623      	lsls	r3, r4, #24
 80036a6:	2200      	movs	r2, #0
 80036a8:	ea40 0402 	orr.w	r4, r0, r2
 80036ac:	f8c7 4110 	str.w	r4, [r7, #272]	@ 0x110
 80036b0:	430b      	orrs	r3, r1
 80036b2:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 80036b6:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	@ 0x110
 80036ba:	e9c7 3488 	strd	r3, r4, [r7, #544]	@ 0x220
      this->y = u_y.real;
 80036be:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 80036c2:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 80036c6:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 80036ca:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 80036ce:	3308      	adds	r3, #8
 80036d0:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 80036d4:	f04f 0200 	mov.w	r2, #0
 80036d8:	f04f 0300 	mov.w	r3, #0
 80036dc:	e9c7 2386 	strd	r2, r3, [r7, #536]	@ 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80036e0:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
 80036e4:	f8d7 2234 	ldr.w	r2, [r7, #564]	@ 0x234
 80036e8:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 80036ec:	4413      	add	r3, r2
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	2200      	movs	r2, #0
 80036f4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80036f8:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 80036fc:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	@ 0x108
 8003700:	461a      	mov	r2, r3
 8003702:	4302      	orrs	r2, r0
 8003704:	f8c7 2100 	str.w	r2, [r7, #256]	@ 0x100
 8003708:	4623      	mov	r3, r4
 800370a:	430b      	orrs	r3, r1
 800370c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003710:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	@ 0x100
 8003714:	e9c7 3486 	strd	r3, r4, [r7, #536]	@ 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003718:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
 800371c:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8003720:	1c5a      	adds	r2, r3, #1
 8003722:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8003726:	4413      	add	r3, r2
 8003728:	781b      	ldrb	r3, [r3, #0]
 800372a:	b2db      	uxtb	r3, r3
 800372c:	2200      	movs	r2, #0
 800372e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003732:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 8003736:	f04f 0200 	mov.w	r2, #0
 800373a:	f04f 0300 	mov.w	r3, #0
 800373e:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	@ 0xf8
 8003742:	464c      	mov	r4, r9
 8003744:	0223      	lsls	r3, r4, #8
 8003746:	46c4      	mov	ip, r8
 8003748:	ea43 631c 	orr.w	r3, r3, ip, lsr #24
 800374c:	4644      	mov	r4, r8
 800374e:	0222      	lsls	r2, r4, #8
 8003750:	ea40 0402 	orr.w	r4, r0, r2
 8003754:	f8c7 40f0 	str.w	r4, [r7, #240]	@ 0xf0
 8003758:	430b      	orrs	r3, r1
 800375a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800375e:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	@ 0xf0
 8003762:	e9c7 3486 	strd	r3, r4, [r7, #536]	@ 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003766:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
 800376a:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 800376e:	1c9a      	adds	r2, r3, #2
 8003770:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8003774:	4413      	add	r3, r2
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	b2db      	uxtb	r3, r3
 800377a:	2200      	movs	r2, #0
 800377c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003780:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003784:	f04f 0200 	mov.w	r2, #0
 8003788:	f04f 0300 	mov.w	r3, #0
 800378c:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8003790:	464c      	mov	r4, r9
 8003792:	0423      	lsls	r3, r4, #16
 8003794:	46c4      	mov	ip, r8
 8003796:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
 800379a:	4644      	mov	r4, r8
 800379c:	0422      	lsls	r2, r4, #16
 800379e:	ea40 0402 	orr.w	r4, r0, r2
 80037a2:	f8c7 40e0 	str.w	r4, [r7, #224]	@ 0xe0
 80037a6:	430b      	orrs	r3, r1
 80037a8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80037ac:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	@ 0xe0
 80037b0:	e9c7 3486 	strd	r3, r4, [r7, #536]	@ 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80037b4:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
 80037b8:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 80037bc:	1cda      	adds	r2, r3, #3
 80037be:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 80037c2:	4413      	add	r3, r2
 80037c4:	781b      	ldrb	r3, [r3, #0]
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	2200      	movs	r2, #0
 80037ca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80037ce:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80037d2:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 80037d6:	4623      	mov	r3, r4
 80037d8:	0a1b      	lsrs	r3, r3, #8
 80037da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80037de:	4623      	mov	r3, r4
 80037e0:	061b      	lsls	r3, r3, #24
 80037e2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80037e6:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	@ 0xd0
 80037ea:	461a      	mov	r2, r3
 80037ec:	4302      	orrs	r2, r0
 80037ee:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 80037f2:	4623      	mov	r3, r4
 80037f4:	430b      	orrs	r3, r1
 80037f6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80037fa:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	@ 0xc8
 80037fe:	e9c7 3486 	strd	r3, r4, [r7, #536]	@ 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003802:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
 8003806:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 800380a:	1d1a      	adds	r2, r3, #4
 800380c:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8003810:	4413      	add	r3, r2
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	b2db      	uxtb	r3, r3
 8003816:	2200      	movs	r2, #0
 8003818:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800381c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003820:	f04f 0200 	mov.w	r2, #0
 8003824:	f04f 0300 	mov.w	r3, #0
 8003828:	f8d7 40c0 	ldr.w	r4, [r7, #192]	@ 0xc0
 800382c:	0023      	movs	r3, r4
 800382e:	2200      	movs	r2, #0
 8003830:	ea40 0402 	orr.w	r4, r0, r2
 8003834:	f8c7 40b8 	str.w	r4, [r7, #184]	@ 0xb8
 8003838:	430b      	orrs	r3, r1
 800383a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800383e:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	@ 0xb8
 8003842:	e9c7 3486 	strd	r3, r4, [r7, #536]	@ 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003846:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
 800384a:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 800384e:	1d5a      	adds	r2, r3, #5
 8003850:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8003854:	4413      	add	r3, r2
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	b2db      	uxtb	r3, r3
 800385a:	2200      	movs	r2, #0
 800385c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003860:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8003864:	f04f 0200 	mov.w	r2, #0
 8003868:	f04f 0300 	mov.w	r3, #0
 800386c:	f8d7 40b0 	ldr.w	r4, [r7, #176]	@ 0xb0
 8003870:	0223      	lsls	r3, r4, #8
 8003872:	2200      	movs	r2, #0
 8003874:	ea40 0402 	orr.w	r4, r0, r2
 8003878:	f8c7 40a8 	str.w	r4, [r7, #168]	@ 0xa8
 800387c:	430b      	orrs	r3, r1
 800387e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003882:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	@ 0xa8
 8003886:	e9c7 3486 	strd	r3, r4, [r7, #536]	@ 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800388a:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
 800388e:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8003892:	1d9a      	adds	r2, r3, #6
 8003894:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8003898:	4413      	add	r3, r2
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	b2db      	uxtb	r3, r3
 800389e:	2200      	movs	r2, #0
 80038a0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80038a4:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80038a8:	f04f 0200 	mov.w	r2, #0
 80038ac:	f04f 0300 	mov.w	r3, #0
 80038b0:	f8d7 40a0 	ldr.w	r4, [r7, #160]	@ 0xa0
 80038b4:	0423      	lsls	r3, r4, #16
 80038b6:	2200      	movs	r2, #0
 80038b8:	ea40 0402 	orr.w	r4, r0, r2
 80038bc:	f8c7 4098 	str.w	r4, [r7, #152]	@ 0x98
 80038c0:	430b      	orrs	r3, r1
 80038c2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80038c6:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	@ 0x98
 80038ca:	e9c7 3486 	strd	r3, r4, [r7, #536]	@ 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80038ce:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
 80038d2:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 80038d6:	1dda      	adds	r2, r3, #7
 80038d8:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 80038dc:	4413      	add	r3, r2
 80038de:	781b      	ldrb	r3, [r3, #0]
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	2200      	movs	r2, #0
 80038e4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80038e8:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80038ec:	f04f 0200 	mov.w	r2, #0
 80038f0:	f04f 0300 	mov.w	r3, #0
 80038f4:	f8d7 4090 	ldr.w	r4, [r7, #144]	@ 0x90
 80038f8:	0623      	lsls	r3, r4, #24
 80038fa:	2200      	movs	r2, #0
 80038fc:	ea40 0402 	orr.w	r4, r0, r2
 8003900:	f8c7 4088 	str.w	r4, [r7, #136]	@ 0x88
 8003904:	430b      	orrs	r3, r1
 8003906:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800390a:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	@ 0x88
 800390e:	e9c7 3486 	strd	r3, r4, [r7, #536]	@ 0x218
      this->z = u_z.real;
 8003912:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
 8003916:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 800391a:	e9c3 0106 	strd	r0, r1, [r3, #24]
      offset += sizeof(this->z);
 800391e:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8003922:	3308      	adds	r3, #8
 8003924:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
      union {
        double real;
        uint64_t base;
      } u_w;
      u_w.base = 0;
 8003928:	f04f 0200 	mov.w	r2, #0
 800392c:	f04f 0300 	mov.w	r3, #0
 8003930:	e9c7 2384 	strd	r2, r3, [r7, #528]	@ 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003934:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	@ 0x210
 8003938:	f8d7 2234 	ldr.w	r2, [r7, #564]	@ 0x234
 800393c:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8003940:	4413      	add	r3, r2
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	b2db      	uxtb	r3, r3
 8003946:	2200      	movs	r2, #0
 8003948:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800394c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003950:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	@ 0x80
 8003954:	461a      	mov	r2, r3
 8003956:	4302      	orrs	r2, r0
 8003958:	67ba      	str	r2, [r7, #120]	@ 0x78
 800395a:	4623      	mov	r3, r4
 800395c:	430b      	orrs	r3, r1
 800395e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003960:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	@ 0x78
 8003964:	e9c7 3484 	strd	r3, r4, [r7, #528]	@ 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003968:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	@ 0x210
 800396c:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8003970:	1c5a      	adds	r2, r3, #1
 8003972:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8003976:	4413      	add	r3, r2
 8003978:	781b      	ldrb	r3, [r3, #0]
 800397a:	b2db      	uxtb	r3, r3
 800397c:	2200      	movs	r2, #0
 800397e:	673b      	str	r3, [r7, #112]	@ 0x70
 8003980:	677a      	str	r2, [r7, #116]	@ 0x74
 8003982:	f04f 0200 	mov.w	r2, #0
 8003986:	f04f 0300 	mov.w	r3, #0
 800398a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800398e:	464c      	mov	r4, r9
 8003990:	0223      	lsls	r3, r4, #8
 8003992:	46c4      	mov	ip, r8
 8003994:	ea43 631c 	orr.w	r3, r3, ip, lsr #24
 8003998:	4644      	mov	r4, r8
 800399a:	0222      	lsls	r2, r4, #8
 800399c:	ea40 0402 	orr.w	r4, r0, r2
 80039a0:	66bc      	str	r4, [r7, #104]	@ 0x68
 80039a2:	430b      	orrs	r3, r1
 80039a4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80039a6:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	@ 0x68
 80039aa:	e9c7 3484 	strd	r3, r4, [r7, #528]	@ 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80039ae:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	@ 0x210
 80039b2:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 80039b6:	1c9a      	adds	r2, r3, #2
 80039b8:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 80039bc:	4413      	add	r3, r2
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	2200      	movs	r2, #0
 80039c4:	663b      	str	r3, [r7, #96]	@ 0x60
 80039c6:	667a      	str	r2, [r7, #100]	@ 0x64
 80039c8:	f04f 0200 	mov.w	r2, #0
 80039cc:	f04f 0300 	mov.w	r3, #0
 80039d0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80039d4:	464c      	mov	r4, r9
 80039d6:	0423      	lsls	r3, r4, #16
 80039d8:	46c4      	mov	ip, r8
 80039da:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
 80039de:	4644      	mov	r4, r8
 80039e0:	0422      	lsls	r2, r4, #16
 80039e2:	ea40 0402 	orr.w	r4, r0, r2
 80039e6:	65bc      	str	r4, [r7, #88]	@ 0x58
 80039e8:	430b      	orrs	r3, r1
 80039ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80039ec:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	@ 0x58
 80039f0:	e9c7 3484 	strd	r3, r4, [r7, #528]	@ 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80039f4:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	@ 0x210
 80039f8:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 80039fc:	1cda      	adds	r2, r3, #3
 80039fe:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8003a02:	4413      	add	r3, r2
 8003a04:	781b      	ldrb	r3, [r3, #0]
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	2200      	movs	r2, #0
 8003a0a:	653b      	str	r3, [r7, #80]	@ 0x50
 8003a0c:	657a      	str	r2, [r7, #84]	@ 0x54
 8003a0e:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8003a12:	4623      	mov	r3, r4
 8003a14:	0a1b      	lsrs	r3, r3, #8
 8003a16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a18:	4623      	mov	r3, r4
 8003a1a:	061b      	lsls	r3, r3, #24
 8003a1c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a1e:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 8003a22:	461a      	mov	r2, r3
 8003a24:	4302      	orrs	r2, r0
 8003a26:	643a      	str	r2, [r7, #64]	@ 0x40
 8003a28:	4623      	mov	r3, r4
 8003a2a:	430b      	orrs	r3, r1
 8003a2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a2e:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8003a32:	e9c7 3484 	strd	r3, r4, [r7, #528]	@ 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003a36:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	@ 0x210
 8003a3a:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8003a3e:	1d1a      	adds	r2, r3, #4
 8003a40:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8003a44:	4413      	add	r3, r2
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003a4e:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003a50:	f04f 0200 	mov.w	r2, #0
 8003a54:	f04f 0300 	mov.w	r3, #0
 8003a58:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 8003a5a:	0023      	movs	r3, r4
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	ea40 0402 	orr.w	r4, r0, r2
 8003a62:	633c      	str	r4, [r7, #48]	@ 0x30
 8003a64:	430b      	orrs	r3, r1
 8003a66:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a68:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8003a6c:	e9c7 3484 	strd	r3, r4, [r7, #528]	@ 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003a70:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	@ 0x210
 8003a74:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8003a78:	1d5a      	adds	r2, r3, #5
 8003a7a:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8003a7e:	4413      	add	r3, r2
 8003a80:	781b      	ldrb	r3, [r3, #0]
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	2200      	movs	r2, #0
 8003a86:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a88:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003a8a:	f04f 0200 	mov.w	r2, #0
 8003a8e:	f04f 0300 	mov.w	r3, #0
 8003a92:	6abc      	ldr	r4, [r7, #40]	@ 0x28
 8003a94:	0223      	lsls	r3, r4, #8
 8003a96:	2200      	movs	r2, #0
 8003a98:	ea40 0402 	orr.w	r4, r0, r2
 8003a9c:	623c      	str	r4, [r7, #32]
 8003a9e:	430b      	orrs	r3, r1
 8003aa0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003aa2:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003aa6:	e9c7 3484 	strd	r3, r4, [r7, #528]	@ 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003aaa:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	@ 0x210
 8003aae:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8003ab2:	3306      	adds	r3, #6
 8003ab4:	f8d7 2208 	ldr.w	r2, [r7, #520]	@ 0x208
 8003ab8:	4413      	add	r3, r2
 8003aba:	781b      	ldrb	r3, [r3, #0]
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	2200      	movs	r2, #0
 8003ac0:	61bb      	str	r3, [r7, #24]
 8003ac2:	61fa      	str	r2, [r7, #28]
 8003ac4:	f04f 0200 	mov.w	r2, #0
 8003ac8:	f04f 0300 	mov.w	r3, #0
 8003acc:	69bc      	ldr	r4, [r7, #24]
 8003ace:	0423      	lsls	r3, r4, #16
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	ea40 0402 	orr.w	r4, r0, r2
 8003ad6:	613c      	str	r4, [r7, #16]
 8003ad8:	430b      	orrs	r3, r1
 8003ada:	617b      	str	r3, [r7, #20]
 8003adc:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003ae0:	e9c7 3484 	strd	r3, r4, [r7, #528]	@ 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003ae4:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	@ 0x210
 8003ae8:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8003aec:	3307      	adds	r3, #7
 8003aee:	f8d7 2208 	ldr.w	r2, [r7, #520]	@ 0x208
 8003af2:	4413      	add	r3, r2
 8003af4:	781b      	ldrb	r3, [r3, #0]
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	2200      	movs	r2, #0
 8003afa:	60bb      	str	r3, [r7, #8]
 8003afc:	60fa      	str	r2, [r7, #12]
 8003afe:	f04f 0200 	mov.w	r2, #0
 8003b02:	f04f 0300 	mov.w	r3, #0
 8003b06:	68bc      	ldr	r4, [r7, #8]
 8003b08:	0623      	lsls	r3, r4, #24
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	ea40 0402 	orr.w	r4, r0, r2
 8003b10:	603c      	str	r4, [r7, #0]
 8003b12:	430b      	orrs	r3, r1
 8003b14:	607b      	str	r3, [r7, #4]
 8003b16:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003b1a:	e9c7 3484 	strd	r3, r4, [r7, #528]	@ 0x210
      this->w = u_w.real;
 8003b1e:	e9d7 2384 	ldrd	r2, r3, [r7, #528]	@ 0x210
 8003b22:	f8d7 120c 	ldr.w	r1, [r7, #524]	@ 0x20c
 8003b26:	e9c1 2308 	strd	r2, r3, [r1, #32]
      offset += sizeof(this->w);
 8003b2a:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8003b2e:	3308      	adds	r3, #8
 8003b30:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
     return offset;
 8003b34:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
    }
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f507 770f 	add.w	r7, r7, #572	@ 0x23c
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003b44:	4770      	bx	lr
	...

08003b48 <_ZN13geometry_msgs10Quaternion7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Quaternion"; };
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	4b02      	ldr	r3, [pc, #8]	@ (8003b5c <_ZN13geometry_msgs10Quaternion7getTypeEv+0x14>)
 8003b52:	4618      	mov	r0, r3
 8003b54:	370c      	adds	r7, #12
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bc80      	pop	{r7}
 8003b5a:	4770      	bx	lr
 8003b5c:	0800acf0 	.word	0x0800acf0

08003b60 <_ZN13geometry_msgs10Quaternion6getMD5Ev>:
    virtual const char * getMD5() override { return "a779879fadf0160734f906b8c19c7004"; };
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	4b02      	ldr	r3, [pc, #8]	@ (8003b74 <_ZN13geometry_msgs10Quaternion6getMD5Ev+0x14>)
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	370c      	adds	r7, #12
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bc80      	pop	{r7}
 8003b72:	4770      	bx	lr
 8003b74:	0800ad0c 	.word	0x0800ad0c

08003b78 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	4618      	mov	r0, r3
 8003b84:	f7fd ffb8 	bl	8001af8 <_ZN3ros3MsgC1Ev>
 8003b88:	4a0e      	ldr	r2, [pc, #56]	@ (8003bc4 <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	601a      	str	r2, [r3, #0]
      x(0),
 8003b8e:	6879      	ldr	r1, [r7, #4]
 8003b90:	f04f 0200 	mov.w	r2, #0
 8003b94:	f04f 0300 	mov.w	r3, #0
 8003b98:	e9c1 2302 	strd	r2, r3, [r1, #8]
      y(0),
 8003b9c:	6879      	ldr	r1, [r7, #4]
 8003b9e:	f04f 0200 	mov.w	r2, #0
 8003ba2:	f04f 0300 	mov.w	r3, #0
 8003ba6:	e9c1 2304 	strd	r2, r3, [r1, #16]
      z(0)
 8003baa:	6879      	ldr	r1, [r7, #4]
 8003bac:	f04f 0200 	mov.w	r2, #0
 8003bb0:	f04f 0300 	mov.w	r3, #0
 8003bb4:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3708      	adds	r7, #8
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	0800af40 	.word	0x0800af40

08003bc8 <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8003bc8:	b480      	push	{r7}
 8003bca:	b08b      	sub	sp, #44	@ 0x2c
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	627b      	str	r3, [r7, #36]	@ 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003bdc:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8003be0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003be4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003be6:	6838      	ldr	r0, [r7, #0]
 8003be8:	4401      	add	r1, r0
 8003bea:	b2d3      	uxtb	r3, r2
 8003bec:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 8003bee:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003bf2:	f04f 0200 	mov.w	r2, #0
 8003bf6:	f04f 0300 	mov.w	r3, #0
 8003bfa:	0a02      	lsrs	r2, r0, #8
 8003bfc:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003c00:	0a0b      	lsrs	r3, r1, #8
 8003c02:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003c04:	3101      	adds	r1, #1
 8003c06:	6838      	ldr	r0, [r7, #0]
 8003c08:	4401      	add	r1, r0
 8003c0a:	b2d3      	uxtb	r3, r2
 8003c0c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 8003c0e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003c12:	f04f 0200 	mov.w	r2, #0
 8003c16:	f04f 0300 	mov.w	r3, #0
 8003c1a:	0c02      	lsrs	r2, r0, #16
 8003c1c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003c20:	0c0b      	lsrs	r3, r1, #16
 8003c22:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003c24:	3102      	adds	r1, #2
 8003c26:	6838      	ldr	r0, [r7, #0]
 8003c28:	4401      	add	r1, r0
 8003c2a:	b2d3      	uxtb	r3, r2
 8003c2c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 8003c2e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003c32:	f04f 0200 	mov.w	r2, #0
 8003c36:	f04f 0300 	mov.w	r3, #0
 8003c3a:	0e02      	lsrs	r2, r0, #24
 8003c3c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003c40:	0e0b      	lsrs	r3, r1, #24
 8003c42:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003c44:	3103      	adds	r1, #3
 8003c46:	6838      	ldr	r0, [r7, #0]
 8003c48:	4401      	add	r1, r0
 8003c4a:	b2d3      	uxtb	r3, r2
 8003c4c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 8003c4e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003c52:	f04f 0200 	mov.w	r2, #0
 8003c56:	f04f 0300 	mov.w	r3, #0
 8003c5a:	000a      	movs	r2, r1
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003c60:	3104      	adds	r1, #4
 8003c62:	6838      	ldr	r0, [r7, #0]
 8003c64:	4401      	add	r1, r0
 8003c66:	b2d3      	uxtb	r3, r2
 8003c68:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 8003c6a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003c6e:	f04f 0200 	mov.w	r2, #0
 8003c72:	f04f 0300 	mov.w	r3, #0
 8003c76:	0a0a      	lsrs	r2, r1, #8
 8003c78:	2300      	movs	r3, #0
 8003c7a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003c7c:	3105      	adds	r1, #5
 8003c7e:	6838      	ldr	r0, [r7, #0]
 8003c80:	4401      	add	r1, r0
 8003c82:	b2d3      	uxtb	r3, r2
 8003c84:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8003c86:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003c8a:	f04f 0200 	mov.w	r2, #0
 8003c8e:	f04f 0300 	mov.w	r3, #0
 8003c92:	0c0a      	lsrs	r2, r1, #16
 8003c94:	2300      	movs	r3, #0
 8003c96:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003c98:	3106      	adds	r1, #6
 8003c9a:	6838      	ldr	r0, [r7, #0]
 8003c9c:	4401      	add	r1, r0
 8003c9e:	b2d3      	uxtb	r3, r2
 8003ca0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8003ca2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003ca6:	f04f 0200 	mov.w	r2, #0
 8003caa:	f04f 0300 	mov.w	r3, #0
 8003cae:	0e0a      	lsrs	r2, r1, #24
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003cb4:	3107      	adds	r1, #7
 8003cb6:	6838      	ldr	r0, [r7, #0]
 8003cb8:	4401      	add	r1, r0
 8003cba:	b2d3      	uxtb	r3, r2
 8003cbc:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 8003cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cc0:	3308      	adds	r3, #8
 8003cc2:	627b      	str	r3, [r7, #36]	@ 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003cca:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 8003cce:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003cd2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003cd4:	6838      	ldr	r0, [r7, #0]
 8003cd6:	4401      	add	r1, r0
 8003cd8:	b2d3      	uxtb	r3, r2
 8003cda:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8003cdc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003ce0:	f04f 0200 	mov.w	r2, #0
 8003ce4:	f04f 0300 	mov.w	r3, #0
 8003ce8:	0a02      	lsrs	r2, r0, #8
 8003cea:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003cee:	0a0b      	lsrs	r3, r1, #8
 8003cf0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003cf2:	3101      	adds	r1, #1
 8003cf4:	6838      	ldr	r0, [r7, #0]
 8003cf6:	4401      	add	r1, r0
 8003cf8:	b2d3      	uxtb	r3, r2
 8003cfa:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8003cfc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003d00:	f04f 0200 	mov.w	r2, #0
 8003d04:	f04f 0300 	mov.w	r3, #0
 8003d08:	0c02      	lsrs	r2, r0, #16
 8003d0a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003d0e:	0c0b      	lsrs	r3, r1, #16
 8003d10:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003d12:	3102      	adds	r1, #2
 8003d14:	6838      	ldr	r0, [r7, #0]
 8003d16:	4401      	add	r1, r0
 8003d18:	b2d3      	uxtb	r3, r2
 8003d1a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8003d1c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003d20:	f04f 0200 	mov.w	r2, #0
 8003d24:	f04f 0300 	mov.w	r3, #0
 8003d28:	0e02      	lsrs	r2, r0, #24
 8003d2a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003d2e:	0e0b      	lsrs	r3, r1, #24
 8003d30:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003d32:	3103      	adds	r1, #3
 8003d34:	6838      	ldr	r0, [r7, #0]
 8003d36:	4401      	add	r1, r0
 8003d38:	b2d3      	uxtb	r3, r2
 8003d3a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8003d3c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003d40:	f04f 0200 	mov.w	r2, #0
 8003d44:	f04f 0300 	mov.w	r3, #0
 8003d48:	000a      	movs	r2, r1
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003d4e:	3104      	adds	r1, #4
 8003d50:	6838      	ldr	r0, [r7, #0]
 8003d52:	4401      	add	r1, r0
 8003d54:	b2d3      	uxtb	r3, r2
 8003d56:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8003d58:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003d5c:	f04f 0200 	mov.w	r2, #0
 8003d60:	f04f 0300 	mov.w	r3, #0
 8003d64:	0a0a      	lsrs	r2, r1, #8
 8003d66:	2300      	movs	r3, #0
 8003d68:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003d6a:	3105      	adds	r1, #5
 8003d6c:	6838      	ldr	r0, [r7, #0]
 8003d6e:	4401      	add	r1, r0
 8003d70:	b2d3      	uxtb	r3, r2
 8003d72:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8003d74:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003d78:	f04f 0200 	mov.w	r2, #0
 8003d7c:	f04f 0300 	mov.w	r3, #0
 8003d80:	0c0a      	lsrs	r2, r1, #16
 8003d82:	2300      	movs	r3, #0
 8003d84:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003d86:	3106      	adds	r1, #6
 8003d88:	6838      	ldr	r0, [r7, #0]
 8003d8a:	4401      	add	r1, r0
 8003d8c:	b2d3      	uxtb	r3, r2
 8003d8e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8003d90:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003d94:	f04f 0200 	mov.w	r2, #0
 8003d98:	f04f 0300 	mov.w	r3, #0
 8003d9c:	0e0a      	lsrs	r2, r1, #24
 8003d9e:	2300      	movs	r3, #0
 8003da0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003da2:	3107      	adds	r1, #7
 8003da4:	6838      	ldr	r0, [r7, #0]
 8003da6:	4401      	add	r1, r0
 8003da8:	b2d3      	uxtb	r3, r2
 8003daa:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 8003dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dae:	3308      	adds	r3, #8
 8003db0:	627b      	str	r3, [r7, #36]	@ 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003db8:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8003dbc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003dc0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003dc2:	6838      	ldr	r0, [r7, #0]
 8003dc4:	4401      	add	r1, r0
 8003dc6:	b2d3      	uxtb	r3, r2
 8003dc8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8003dca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003dce:	f04f 0200 	mov.w	r2, #0
 8003dd2:	f04f 0300 	mov.w	r3, #0
 8003dd6:	0a02      	lsrs	r2, r0, #8
 8003dd8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003ddc:	0a0b      	lsrs	r3, r1, #8
 8003dde:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003de0:	3101      	adds	r1, #1
 8003de2:	6838      	ldr	r0, [r7, #0]
 8003de4:	4401      	add	r1, r0
 8003de6:	b2d3      	uxtb	r3, r2
 8003de8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8003dea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003dee:	f04f 0200 	mov.w	r2, #0
 8003df2:	f04f 0300 	mov.w	r3, #0
 8003df6:	0c02      	lsrs	r2, r0, #16
 8003df8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003dfc:	0c0b      	lsrs	r3, r1, #16
 8003dfe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003e00:	3102      	adds	r1, #2
 8003e02:	6838      	ldr	r0, [r7, #0]
 8003e04:	4401      	add	r1, r0
 8003e06:	b2d3      	uxtb	r3, r2
 8003e08:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8003e0a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003e0e:	f04f 0200 	mov.w	r2, #0
 8003e12:	f04f 0300 	mov.w	r3, #0
 8003e16:	0e02      	lsrs	r2, r0, #24
 8003e18:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003e1c:	0e0b      	lsrs	r3, r1, #24
 8003e1e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003e20:	3103      	adds	r1, #3
 8003e22:	6838      	ldr	r0, [r7, #0]
 8003e24:	4401      	add	r1, r0
 8003e26:	b2d3      	uxtb	r3, r2
 8003e28:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8003e2a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003e2e:	f04f 0200 	mov.w	r2, #0
 8003e32:	f04f 0300 	mov.w	r3, #0
 8003e36:	000a      	movs	r2, r1
 8003e38:	2300      	movs	r3, #0
 8003e3a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003e3c:	3104      	adds	r1, #4
 8003e3e:	6838      	ldr	r0, [r7, #0]
 8003e40:	4401      	add	r1, r0
 8003e42:	b2d3      	uxtb	r3, r2
 8003e44:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8003e46:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003e4a:	f04f 0200 	mov.w	r2, #0
 8003e4e:	f04f 0300 	mov.w	r3, #0
 8003e52:	0a0a      	lsrs	r2, r1, #8
 8003e54:	2300      	movs	r3, #0
 8003e56:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003e58:	3105      	adds	r1, #5
 8003e5a:	6838      	ldr	r0, [r7, #0]
 8003e5c:	4401      	add	r1, r0
 8003e5e:	b2d3      	uxtb	r3, r2
 8003e60:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8003e62:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003e66:	f04f 0200 	mov.w	r2, #0
 8003e6a:	f04f 0300 	mov.w	r3, #0
 8003e6e:	0c0a      	lsrs	r2, r1, #16
 8003e70:	2300      	movs	r3, #0
 8003e72:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003e74:	3106      	adds	r1, #6
 8003e76:	6838      	ldr	r0, [r7, #0]
 8003e78:	4401      	add	r1, r0
 8003e7a:	b2d3      	uxtb	r3, r2
 8003e7c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 8003e7e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003e82:	f04f 0200 	mov.w	r2, #0
 8003e86:	f04f 0300 	mov.w	r3, #0
 8003e8a:	0e0a      	lsrs	r2, r1, #24
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003e90:	3107      	adds	r1, #7
 8003e92:	6838      	ldr	r0, [r7, #0]
 8003e94:	4401      	add	r1, r0
 8003e96:	b2d3      	uxtb	r3, r2
 8003e98:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 8003e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e9c:	3308      	adds	r3, #8
 8003e9e:	627b      	str	r3, [r7, #36]	@ 0x24
      return offset;
 8003ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	372c      	adds	r7, #44	@ 0x2c
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bc80      	pop	{r7}
 8003eaa:	4770      	bx	lr

08003eac <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8003eac:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003eb0:	b0eb      	sub	sp, #428	@ 0x1ac
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	f8c7 0184 	str.w	r0, [r7, #388]	@ 0x184
 8003eb8:	f8c7 1180 	str.w	r1, [r7, #384]	@ 0x180
    {
      int offset = 0;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 8003ec2:	f04f 0200 	mov.w	r2, #0
 8003ec6:	f04f 0300 	mov.w	r3, #0
 8003eca:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003ece:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8003ed2:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 8003ed6:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003eda:	4413      	add	r3, r2
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	461c      	mov	r4, r3
 8003ee4:	4615      	mov	r5, r2
 8003ee6:	ea40 0804 	orr.w	r8, r0, r4
 8003eea:	ea41 0905 	orr.w	r9, r1, r5
 8003eee:	e9c7 8966 	strd	r8, r9, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003ef2:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8003ef6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8003efa:	1c5a      	adds	r2, r3, #1
 8003efc:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003f00:	4413      	add	r3, r2
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	2200      	movs	r2, #0
 8003f08:	469a      	mov	sl, r3
 8003f0a:	4693      	mov	fp, r2
 8003f0c:	f04f 0200 	mov.w	r2, #0
 8003f10:	f04f 0300 	mov.w	r3, #0
 8003f14:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8003f18:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8003f1c:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8003f20:	ea40 0402 	orr.w	r4, r0, r2
 8003f24:	f8c7 4178 	str.w	r4, [r7, #376]	@ 0x178
 8003f28:	430b      	orrs	r3, r1
 8003f2a:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8003f2e:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	@ 0x178
 8003f32:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003f36:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8003f3a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8003f3e:	1c9a      	adds	r2, r3, #2
 8003f40:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003f44:	4413      	add	r3, r2
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 8003f50:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
 8003f54:	f04f 0200 	mov.w	r2, #0
 8003f58:	f04f 0300 	mov.w	r3, #0
 8003f5c:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	@ 0x170
 8003f60:	464c      	mov	r4, r9
 8003f62:	0423      	lsls	r3, r4, #16
 8003f64:	46c4      	mov	ip, r8
 8003f66:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
 8003f6a:	4644      	mov	r4, r8
 8003f6c:	0422      	lsls	r2, r4, #16
 8003f6e:	ea40 0402 	orr.w	r4, r0, r2
 8003f72:	f8c7 4168 	str.w	r4, [r7, #360]	@ 0x168
 8003f76:	430b      	orrs	r3, r1
 8003f78:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 8003f7c:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	@ 0x168
 8003f80:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003f84:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8003f88:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8003f8c:	1cda      	adds	r2, r3, #3
 8003f8e:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003f92:	4413      	add	r3, r2
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 8003f9e:	f8c7 2164 	str.w	r2, [r7, #356]	@ 0x164
 8003fa2:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	@ 0x160
 8003fa6:	4623      	mov	r3, r4
 8003fa8:	0a1b      	lsrs	r3, r3, #8
 8003faa:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8003fae:	4623      	mov	r3, r4
 8003fb0:	061b      	lsls	r3, r3, #24
 8003fb2:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8003fb6:	e9d7 3456 	ldrd	r3, r4, [r7, #344]	@ 0x158
 8003fba:	461a      	mov	r2, r3
 8003fbc:	4302      	orrs	r2, r0
 8003fbe:	f8c7 2150 	str.w	r2, [r7, #336]	@ 0x150
 8003fc2:	4623      	mov	r3, r4
 8003fc4:	430b      	orrs	r3, r1
 8003fc6:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8003fca:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	@ 0x150
 8003fce:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003fd2:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8003fd6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8003fda:	1d1a      	adds	r2, r3, #4
 8003fdc:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003fe0:	4413      	add	r3, r2
 8003fe2:	781b      	ldrb	r3, [r3, #0]
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 8003fec:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8003ff0:	f04f 0200 	mov.w	r2, #0
 8003ff4:	f04f 0300 	mov.w	r3, #0
 8003ff8:	f8d7 4148 	ldr.w	r4, [r7, #328]	@ 0x148
 8003ffc:	0023      	movs	r3, r4
 8003ffe:	2200      	movs	r2, #0
 8004000:	ea40 0402 	orr.w	r4, r0, r2
 8004004:	f8c7 4140 	str.w	r4, [r7, #320]	@ 0x140
 8004008:	430b      	orrs	r3, r1
 800400a:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 800400e:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	@ 0x140
 8004012:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8004016:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 800401a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 800401e:	1d5a      	adds	r2, r3, #5
 8004020:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004024:	4413      	add	r3, r2
 8004026:	781b      	ldrb	r3, [r3, #0]
 8004028:	b2db      	uxtb	r3, r3
 800402a:	2200      	movs	r2, #0
 800402c:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8004030:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 8004034:	f04f 0200 	mov.w	r2, #0
 8004038:	f04f 0300 	mov.w	r3, #0
 800403c:	f8d7 4138 	ldr.w	r4, [r7, #312]	@ 0x138
 8004040:	0223      	lsls	r3, r4, #8
 8004042:	2200      	movs	r2, #0
 8004044:	ea40 0402 	orr.w	r4, r0, r2
 8004048:	f8c7 4130 	str.w	r4, [r7, #304]	@ 0x130
 800404c:	430b      	orrs	r3, r1
 800404e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8004052:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	@ 0x130
 8004056:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800405a:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 800405e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8004062:	1d9a      	adds	r2, r3, #6
 8004064:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004068:	4413      	add	r3, r2
 800406a:	781b      	ldrb	r3, [r3, #0]
 800406c:	b2db      	uxtb	r3, r3
 800406e:	2200      	movs	r2, #0
 8004070:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8004074:	f8c7 212c 	str.w	r2, [r7, #300]	@ 0x12c
 8004078:	f04f 0200 	mov.w	r2, #0
 800407c:	f04f 0300 	mov.w	r3, #0
 8004080:	f8d7 4128 	ldr.w	r4, [r7, #296]	@ 0x128
 8004084:	0423      	lsls	r3, r4, #16
 8004086:	2200      	movs	r2, #0
 8004088:	ea40 0402 	orr.w	r4, r0, r2
 800408c:	f8c7 4120 	str.w	r4, [r7, #288]	@ 0x120
 8004090:	430b      	orrs	r3, r1
 8004092:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8004096:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	@ 0x120
 800409a:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800409e:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 80040a2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80040a6:	1dda      	adds	r2, r3, #7
 80040a8:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80040ac:	4413      	add	r3, r2
 80040ae:	781b      	ldrb	r3, [r3, #0]
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	2200      	movs	r2, #0
 80040b4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80040b8:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 80040bc:	f04f 0200 	mov.w	r2, #0
 80040c0:	f04f 0300 	mov.w	r3, #0
 80040c4:	f8d7 4118 	ldr.w	r4, [r7, #280]	@ 0x118
 80040c8:	0623      	lsls	r3, r4, #24
 80040ca:	2200      	movs	r2, #0
 80040cc:	ea40 0402 	orr.w	r4, r0, r2
 80040d0:	f8c7 4110 	str.w	r4, [r7, #272]	@ 0x110
 80040d4:	430b      	orrs	r3, r1
 80040d6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 80040da:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	@ 0x110
 80040de:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      this->x = u_x.real;
 80040e2:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 80040e6:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80040ea:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 80040ee:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80040f2:	3308      	adds	r3, #8
 80040f4:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 80040f8:	f04f 0200 	mov.w	r2, #0
 80040fc:	f04f 0300 	mov.w	r3, #0
 8004100:	e9c7 2364 	strd	r2, r3, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8004104:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8004108:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 800410c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004110:	4413      	add	r3, r2
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	b2db      	uxtb	r3, r3
 8004116:	2200      	movs	r2, #0
 8004118:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800411c:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 8004120:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	@ 0x108
 8004124:	461a      	mov	r2, r3
 8004126:	4302      	orrs	r2, r0
 8004128:	f8c7 2100 	str.w	r2, [r7, #256]	@ 0x100
 800412c:	4623      	mov	r3, r4
 800412e:	430b      	orrs	r3, r1
 8004130:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004134:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	@ 0x100
 8004138:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800413c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8004140:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8004144:	1c5a      	adds	r2, r3, #1
 8004146:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800414a:	4413      	add	r3, r2
 800414c:	781b      	ldrb	r3, [r3, #0]
 800414e:	b2db      	uxtb	r3, r3
 8004150:	2200      	movs	r2, #0
 8004152:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004156:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 800415a:	f04f 0200 	mov.w	r2, #0
 800415e:	f04f 0300 	mov.w	r3, #0
 8004162:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	@ 0xf8
 8004166:	464c      	mov	r4, r9
 8004168:	0223      	lsls	r3, r4, #8
 800416a:	46c4      	mov	ip, r8
 800416c:	ea43 631c 	orr.w	r3, r3, ip, lsr #24
 8004170:	4644      	mov	r4, r8
 8004172:	0222      	lsls	r2, r4, #8
 8004174:	ea40 0402 	orr.w	r4, r0, r2
 8004178:	f8c7 40f0 	str.w	r4, [r7, #240]	@ 0xf0
 800417c:	430b      	orrs	r3, r1
 800417e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004182:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	@ 0xf0
 8004186:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800418a:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 800418e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8004192:	1c9a      	adds	r2, r3, #2
 8004194:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004198:	4413      	add	r3, r2
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	b2db      	uxtb	r3, r3
 800419e:	2200      	movs	r2, #0
 80041a0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80041a4:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80041a8:	f04f 0200 	mov.w	r2, #0
 80041ac:	f04f 0300 	mov.w	r3, #0
 80041b0:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 80041b4:	464c      	mov	r4, r9
 80041b6:	0423      	lsls	r3, r4, #16
 80041b8:	46c4      	mov	ip, r8
 80041ba:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
 80041be:	4644      	mov	r4, r8
 80041c0:	0422      	lsls	r2, r4, #16
 80041c2:	ea40 0402 	orr.w	r4, r0, r2
 80041c6:	f8c7 40e0 	str.w	r4, [r7, #224]	@ 0xe0
 80041ca:	430b      	orrs	r3, r1
 80041cc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80041d0:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	@ 0xe0
 80041d4:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80041d8:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 80041dc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80041e0:	1cda      	adds	r2, r3, #3
 80041e2:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80041e6:	4413      	add	r3, r2
 80041e8:	781b      	ldrb	r3, [r3, #0]
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	2200      	movs	r2, #0
 80041ee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80041f2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80041f6:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 80041fa:	4623      	mov	r3, r4
 80041fc:	0a1b      	lsrs	r3, r3, #8
 80041fe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004202:	4623      	mov	r3, r4
 8004204:	061b      	lsls	r3, r3, #24
 8004206:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800420a:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	@ 0xd0
 800420e:	461a      	mov	r2, r3
 8004210:	4302      	orrs	r2, r0
 8004212:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8004216:	4623      	mov	r3, r4
 8004218:	430b      	orrs	r3, r1
 800421a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800421e:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	@ 0xc8
 8004222:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8004226:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 800422a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 800422e:	1d1a      	adds	r2, r3, #4
 8004230:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004234:	4413      	add	r3, r2
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	b2db      	uxtb	r3, r3
 800423a:	2200      	movs	r2, #0
 800423c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004240:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004244:	f04f 0200 	mov.w	r2, #0
 8004248:	f04f 0300 	mov.w	r3, #0
 800424c:	f8d7 40c0 	ldr.w	r4, [r7, #192]	@ 0xc0
 8004250:	0023      	movs	r3, r4
 8004252:	2200      	movs	r2, #0
 8004254:	ea40 0402 	orr.w	r4, r0, r2
 8004258:	f8c7 40b8 	str.w	r4, [r7, #184]	@ 0xb8
 800425c:	430b      	orrs	r3, r1
 800425e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004262:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	@ 0xb8
 8004266:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800426a:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 800426e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8004272:	1d5a      	adds	r2, r3, #5
 8004274:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004278:	4413      	add	r3, r2
 800427a:	781b      	ldrb	r3, [r3, #0]
 800427c:	b2db      	uxtb	r3, r3
 800427e:	2200      	movs	r2, #0
 8004280:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004284:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8004288:	f04f 0200 	mov.w	r2, #0
 800428c:	f04f 0300 	mov.w	r3, #0
 8004290:	f8d7 40b0 	ldr.w	r4, [r7, #176]	@ 0xb0
 8004294:	0223      	lsls	r3, r4, #8
 8004296:	2200      	movs	r2, #0
 8004298:	ea40 0402 	orr.w	r4, r0, r2
 800429c:	f8c7 40a8 	str.w	r4, [r7, #168]	@ 0xa8
 80042a0:	430b      	orrs	r3, r1
 80042a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80042a6:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	@ 0xa8
 80042aa:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80042ae:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 80042b2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80042b6:	1d9a      	adds	r2, r3, #6
 80042b8:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80042bc:	4413      	add	r3, r2
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	2200      	movs	r2, #0
 80042c4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80042c8:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80042cc:	f04f 0200 	mov.w	r2, #0
 80042d0:	f04f 0300 	mov.w	r3, #0
 80042d4:	f8d7 40a0 	ldr.w	r4, [r7, #160]	@ 0xa0
 80042d8:	0423      	lsls	r3, r4, #16
 80042da:	2200      	movs	r2, #0
 80042dc:	ea40 0402 	orr.w	r4, r0, r2
 80042e0:	f8c7 4098 	str.w	r4, [r7, #152]	@ 0x98
 80042e4:	430b      	orrs	r3, r1
 80042e6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80042ea:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	@ 0x98
 80042ee:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80042f2:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 80042f6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80042fa:	1dda      	adds	r2, r3, #7
 80042fc:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004300:	4413      	add	r3, r2
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	b2db      	uxtb	r3, r3
 8004306:	2200      	movs	r2, #0
 8004308:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800430c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004310:	f04f 0200 	mov.w	r2, #0
 8004314:	f04f 0300 	mov.w	r3, #0
 8004318:	f8d7 4090 	ldr.w	r4, [r7, #144]	@ 0x90
 800431c:	0623      	lsls	r3, r4, #24
 800431e:	2200      	movs	r2, #0
 8004320:	ea40 0402 	orr.w	r4, r0, r2
 8004324:	f8c7 4088 	str.w	r4, [r7, #136]	@ 0x88
 8004328:	430b      	orrs	r3, r1
 800432a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800432e:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	@ 0x88
 8004332:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      this->y = u_y.real;
 8004336:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 800433a:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800433e:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8004342:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8004346:	3308      	adds	r3, #8
 8004348:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 800434c:	f04f 0200 	mov.w	r2, #0
 8004350:	f04f 0300 	mov.w	r3, #0
 8004354:	e9c7 2362 	strd	r2, r3, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8004358:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 800435c:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 8004360:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004364:	4413      	add	r3, r2
 8004366:	781b      	ldrb	r3, [r3, #0]
 8004368:	b2db      	uxtb	r3, r3
 800436a:	2200      	movs	r2, #0
 800436c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004370:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004374:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	@ 0x80
 8004378:	461a      	mov	r2, r3
 800437a:	4302      	orrs	r2, r0
 800437c:	67ba      	str	r2, [r7, #120]	@ 0x78
 800437e:	4623      	mov	r3, r4
 8004380:	430b      	orrs	r3, r1
 8004382:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004384:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	@ 0x78
 8004388:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800438c:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8004390:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8004394:	1c5a      	adds	r2, r3, #1
 8004396:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800439a:	4413      	add	r3, r2
 800439c:	781b      	ldrb	r3, [r3, #0]
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	2200      	movs	r2, #0
 80043a2:	673b      	str	r3, [r7, #112]	@ 0x70
 80043a4:	677a      	str	r2, [r7, #116]	@ 0x74
 80043a6:	f04f 0200 	mov.w	r2, #0
 80043aa:	f04f 0300 	mov.w	r3, #0
 80043ae:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80043b2:	464c      	mov	r4, r9
 80043b4:	0223      	lsls	r3, r4, #8
 80043b6:	46c4      	mov	ip, r8
 80043b8:	ea43 631c 	orr.w	r3, r3, ip, lsr #24
 80043bc:	4644      	mov	r4, r8
 80043be:	0222      	lsls	r2, r4, #8
 80043c0:	ea40 0402 	orr.w	r4, r0, r2
 80043c4:	66bc      	str	r4, [r7, #104]	@ 0x68
 80043c6:	430b      	orrs	r3, r1
 80043c8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80043ca:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	@ 0x68
 80043ce:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80043d2:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 80043d6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80043da:	1c9a      	adds	r2, r3, #2
 80043dc:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80043e0:	4413      	add	r3, r2
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	2200      	movs	r2, #0
 80043e8:	663b      	str	r3, [r7, #96]	@ 0x60
 80043ea:	667a      	str	r2, [r7, #100]	@ 0x64
 80043ec:	f04f 0200 	mov.w	r2, #0
 80043f0:	f04f 0300 	mov.w	r3, #0
 80043f4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80043f8:	464c      	mov	r4, r9
 80043fa:	0423      	lsls	r3, r4, #16
 80043fc:	46c4      	mov	ip, r8
 80043fe:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
 8004402:	4644      	mov	r4, r8
 8004404:	0422      	lsls	r2, r4, #16
 8004406:	ea40 0402 	orr.w	r4, r0, r2
 800440a:	65bc      	str	r4, [r7, #88]	@ 0x58
 800440c:	430b      	orrs	r3, r1
 800440e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004410:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	@ 0x58
 8004414:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004418:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 800441c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8004420:	1cda      	adds	r2, r3, #3
 8004422:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004426:	4413      	add	r3, r2
 8004428:	781b      	ldrb	r3, [r3, #0]
 800442a:	b2db      	uxtb	r3, r3
 800442c:	2200      	movs	r2, #0
 800442e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004430:	657a      	str	r2, [r7, #84]	@ 0x54
 8004432:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8004436:	4623      	mov	r3, r4
 8004438:	0a1b      	lsrs	r3, r3, #8
 800443a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800443c:	4623      	mov	r3, r4
 800443e:	061b      	lsls	r3, r3, #24
 8004440:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004442:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 8004446:	461a      	mov	r2, r3
 8004448:	4302      	orrs	r2, r0
 800444a:	643a      	str	r2, [r7, #64]	@ 0x40
 800444c:	4623      	mov	r3, r4
 800444e:	430b      	orrs	r3, r1
 8004450:	647b      	str	r3, [r7, #68]	@ 0x44
 8004452:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8004456:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800445a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 800445e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8004462:	1d1a      	adds	r2, r3, #4
 8004464:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004468:	4413      	add	r3, r2
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	b2db      	uxtb	r3, r3
 800446e:	2200      	movs	r2, #0
 8004470:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004472:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004474:	f04f 0200 	mov.w	r2, #0
 8004478:	f04f 0300 	mov.w	r3, #0
 800447c:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 800447e:	0023      	movs	r3, r4
 8004480:	2200      	movs	r2, #0
 8004482:	ea40 0402 	orr.w	r4, r0, r2
 8004486:	633c      	str	r4, [r7, #48]	@ 0x30
 8004488:	430b      	orrs	r3, r1
 800448a:	637b      	str	r3, [r7, #52]	@ 0x34
 800448c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8004490:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8004494:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8004498:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 800449c:	1d5a      	adds	r2, r3, #5
 800449e:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80044a2:	4413      	add	r3, r2
 80044a4:	781b      	ldrb	r3, [r3, #0]
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	2200      	movs	r2, #0
 80044aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80044ac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80044ae:	f04f 0200 	mov.w	r2, #0
 80044b2:	f04f 0300 	mov.w	r3, #0
 80044b6:	6abc      	ldr	r4, [r7, #40]	@ 0x28
 80044b8:	0223      	lsls	r3, r4, #8
 80044ba:	2200      	movs	r2, #0
 80044bc:	ea40 0402 	orr.w	r4, r0, r2
 80044c0:	623c      	str	r4, [r7, #32]
 80044c2:	430b      	orrs	r3, r1
 80044c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80044c6:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80044ca:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80044ce:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 80044d2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80044d6:	3306      	adds	r3, #6
 80044d8:	f8d7 2180 	ldr.w	r2, [r7, #384]	@ 0x180
 80044dc:	4413      	add	r3, r2
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	2200      	movs	r2, #0
 80044e4:	61bb      	str	r3, [r7, #24]
 80044e6:	61fa      	str	r2, [r7, #28]
 80044e8:	f04f 0200 	mov.w	r2, #0
 80044ec:	f04f 0300 	mov.w	r3, #0
 80044f0:	69bc      	ldr	r4, [r7, #24]
 80044f2:	0423      	lsls	r3, r4, #16
 80044f4:	2200      	movs	r2, #0
 80044f6:	ea40 0402 	orr.w	r4, r0, r2
 80044fa:	613c      	str	r4, [r7, #16]
 80044fc:	430b      	orrs	r3, r1
 80044fe:	617b      	str	r3, [r7, #20]
 8004500:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8004504:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8004508:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 800450c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8004510:	3307      	adds	r3, #7
 8004512:	f8d7 2180 	ldr.w	r2, [r7, #384]	@ 0x180
 8004516:	4413      	add	r3, r2
 8004518:	781b      	ldrb	r3, [r3, #0]
 800451a:	b2db      	uxtb	r3, r3
 800451c:	2200      	movs	r2, #0
 800451e:	60bb      	str	r3, [r7, #8]
 8004520:	60fa      	str	r2, [r7, #12]
 8004522:	f04f 0200 	mov.w	r2, #0
 8004526:	f04f 0300 	mov.w	r3, #0
 800452a:	68bc      	ldr	r4, [r7, #8]
 800452c:	0623      	lsls	r3, r4, #24
 800452e:	2200      	movs	r2, #0
 8004530:	ea40 0402 	orr.w	r4, r0, r2
 8004534:	603c      	str	r4, [r7, #0]
 8004536:	430b      	orrs	r3, r1
 8004538:	607b      	str	r3, [r7, #4]
 800453a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800453e:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      this->z = u_z.real;
 8004542:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 8004546:	f8d7 1184 	ldr.w	r1, [r7, #388]	@ 0x184
 800454a:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 800454e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8004552:	3308      	adds	r3, #8
 8004554:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
     return offset;
 8004558:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
    }
 800455c:	4618      	mov	r0, r3
 800455e:	f507 77d6 	add.w	r7, r7, #428	@ 0x1ac
 8004562:	46bd      	mov	sp, r7
 8004564:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8004568:	4770      	bx	lr
	...

0800456c <_ZN13geometry_msgs7Vector37getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Vector3"; };
 800456c:	b480      	push	{r7}
 800456e:	b083      	sub	sp, #12
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	4b02      	ldr	r3, [pc, #8]	@ (8004580 <_ZN13geometry_msgs7Vector37getTypeEv+0x14>)
 8004576:	4618      	mov	r0, r3
 8004578:	370c      	adds	r7, #12
 800457a:	46bd      	mov	sp, r7
 800457c:	bc80      	pop	{r7}
 800457e:	4770      	bx	lr
 8004580:	0800ad30 	.word	0x0800ad30

08004584 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    virtual const char * getMD5() override { return "4a842b65f413084dc2b10fb484ea7f17"; };
 8004584:	b480      	push	{r7}
 8004586:	b083      	sub	sp, #12
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	4b02      	ldr	r3, [pc, #8]	@ (8004598 <_ZN13geometry_msgs7Vector36getMD5Ev+0x14>)
 800458e:	4618      	mov	r0, r3
 8004590:	370c      	adds	r7, #12
 8004592:	46bd      	mov	sp, r7
 8004594:	bc80      	pop	{r7}
 8004596:	4770      	bx	lr
 8004598:	0800ad48 	.word	0x0800ad48

0800459c <_ZN11sensor_msgs3ImuC1Ev>:
      double angular_velocity_covariance[9];
      typedef geometry_msgs::Vector3 _linear_acceleration_type;
      _linear_acceleration_type linear_acceleration;
      double linear_acceleration_covariance[9];

    Imu():
 800459c:	b580      	push	{r7, lr}
 800459e:	b082      	sub	sp, #8
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
      orientation(),
      orientation_covariance(),
      angular_velocity(),
      angular_velocity_covariance(),
      linear_acceleration(),
      linear_acceleration_covariance()
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4618      	mov	r0, r3
 80045a8:	f7fd faa6 	bl	8001af8 <_ZN3ros3MsgC1Ev>
 80045ac:	4a24      	ldr	r2, [pc, #144]	@ (8004640 <_ZN11sensor_msgs3ImuC1Ev+0xa4>)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	601a      	str	r2, [r3, #0]
      header(),
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	3304      	adds	r3, #4
 80045b6:	4618      	mov	r0, r3
 80045b8:	f7fe fa94 	bl	8002ae4 <_ZN8std_msgs6HeaderC1Ev>
      orientation(),
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	3318      	adds	r3, #24
 80045c0:	4618      	mov	r0, r3
 80045c2:	f7fe fc1f 	bl	8002e04 <_ZN13geometry_msgs10QuaternionC1Ev>
      orientation_covariance(),
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 80045cc:	2308      	movs	r3, #8
 80045ce:	e007      	b.n	80045e0 <_ZN11sensor_msgs3ImuC1Ev+0x44>
 80045d0:	f04f 0000 	mov.w	r0, #0
 80045d4:	f04f 0100 	mov.w	r1, #0
 80045d8:	e9c2 0100 	strd	r0, r1, [r2]
 80045dc:	3b01      	subs	r3, #1
 80045de:	3208      	adds	r2, #8
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	daf5      	bge.n	80045d0 <_ZN11sensor_msgs3ImuC1Ev+0x34>
      angular_velocity(),
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	3388      	adds	r3, #136	@ 0x88
 80045e8:	4618      	mov	r0, r3
 80045ea:	f7ff fac5 	bl	8003b78 <_ZN13geometry_msgs7Vector3C1Ev>
      angular_velocity_covariance(),
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f103 02a8 	add.w	r2, r3, #168	@ 0xa8
 80045f4:	2308      	movs	r3, #8
 80045f6:	e007      	b.n	8004608 <_ZN11sensor_msgs3ImuC1Ev+0x6c>
 80045f8:	f04f 0000 	mov.w	r0, #0
 80045fc:	f04f 0100 	mov.w	r1, #0
 8004600:	e9c2 0100 	strd	r0, r1, [r2]
 8004604:	3b01      	subs	r3, #1
 8004606:	3208      	adds	r2, #8
 8004608:	2b00      	cmp	r3, #0
 800460a:	daf5      	bge.n	80045f8 <_ZN11sensor_msgs3ImuC1Ev+0x5c>
      linear_acceleration(),
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	33f0      	adds	r3, #240	@ 0xf0
 8004610:	4618      	mov	r0, r3
 8004612:	f7ff fab1 	bl	8003b78 <_ZN13geometry_msgs7Vector3C1Ev>
      linear_acceleration_covariance()
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f503 7288 	add.w	r2, r3, #272	@ 0x110
 800461c:	2308      	movs	r3, #8
 800461e:	e007      	b.n	8004630 <_ZN11sensor_msgs3ImuC1Ev+0x94>
 8004620:	f04f 0000 	mov.w	r0, #0
 8004624:	f04f 0100 	mov.w	r1, #0
 8004628:	e9c2 0100 	strd	r0, r1, [r2]
 800462c:	3b01      	subs	r3, #1
 800462e:	3208      	adds	r2, #8
 8004630:	2b00      	cmp	r3, #0
 8004632:	daf5      	bge.n	8004620 <_ZN11sensor_msgs3ImuC1Ev+0x84>
    {
    }
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	4618      	mov	r0, r3
 8004638:	3708      	adds	r7, #8
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	0800af28 	.word	0x0800af28

08004644 <_ZNK11sensor_msgs3Imu9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8004644:	b580      	push	{r7, lr}
 8004646:	b08c      	sub	sp, #48	@ 0x30
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800464e:	2300      	movs	r3, #0
 8004650:	62fb      	str	r3, [r7, #44]	@ 0x2c
      offset += this->header.serialize(outbuffer + offset);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	1d18      	adds	r0, r3, #4
 8004656:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004658:	683a      	ldr	r2, [r7, #0]
 800465a:	4413      	add	r3, r2
 800465c:	4619      	mov	r1, r3
 800465e:	f7fe fa61 	bl	8002b24 <_ZNK8std_msgs6Header9serializeEPh>
 8004662:	4602      	mov	r2, r0
 8004664:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004666:	4413      	add	r3, r2
 8004668:	62fb      	str	r3, [r7, #44]	@ 0x2c
      offset += this->orientation.serialize(outbuffer + offset);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f103 0018 	add.w	r0, r3, #24
 8004670:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004672:	683a      	ldr	r2, [r7, #0]
 8004674:	4413      	add	r3, r2
 8004676:	4619      	mov	r1, r3
 8004678:	f7fe fbf2 	bl	8002e60 <_ZNK13geometry_msgs10Quaternion9serializeEPh>
 800467c:	4602      	mov	r2, r0
 800467e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004680:	4413      	add	r3, r2
 8004682:	62fb      	str	r3, [r7, #44]	@ 0x2c
      for( uint32_t i = 0; i < 9; i++){
 8004684:	2300      	movs	r3, #0
 8004686:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004688:	e07d      	b.n	8004786 <_ZNK11sensor_msgs3Imu9serializeEPh+0x142>
      union {
        double real;
        uint64_t base;
      } u_orientation_covariancei;
      u_orientation_covariancei.real = this->orientation_covariance[i];
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800468e:	3308      	adds	r3, #8
 8004690:	00db      	lsls	r3, r3, #3
 8004692:	4413      	add	r3, r2
 8004694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004698:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_orientation_covariancei.base >> (8 * 0)) & 0xFF;
 800469c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046a0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80046a2:	6838      	ldr	r0, [r7, #0]
 80046a4:	4401      	add	r1, r0
 80046a6:	b2d3      	uxtb	r3, r2
 80046a8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_orientation_covariancei.base >> (8 * 1)) & 0xFF;
 80046aa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80046ae:	f04f 0200 	mov.w	r2, #0
 80046b2:	f04f 0300 	mov.w	r3, #0
 80046b6:	0a02      	lsrs	r2, r0, #8
 80046b8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80046bc:	0a0b      	lsrs	r3, r1, #8
 80046be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80046c0:	3101      	adds	r1, #1
 80046c2:	6838      	ldr	r0, [r7, #0]
 80046c4:	4401      	add	r1, r0
 80046c6:	b2d3      	uxtb	r3, r2
 80046c8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_orientation_covariancei.base >> (8 * 2)) & 0xFF;
 80046ca:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80046ce:	f04f 0200 	mov.w	r2, #0
 80046d2:	f04f 0300 	mov.w	r3, #0
 80046d6:	0c02      	lsrs	r2, r0, #16
 80046d8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80046dc:	0c0b      	lsrs	r3, r1, #16
 80046de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80046e0:	3102      	adds	r1, #2
 80046e2:	6838      	ldr	r0, [r7, #0]
 80046e4:	4401      	add	r1, r0
 80046e6:	b2d3      	uxtb	r3, r2
 80046e8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_orientation_covariancei.base >> (8 * 3)) & 0xFF;
 80046ea:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80046ee:	f04f 0200 	mov.w	r2, #0
 80046f2:	f04f 0300 	mov.w	r3, #0
 80046f6:	0e02      	lsrs	r2, r0, #24
 80046f8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80046fc:	0e0b      	lsrs	r3, r1, #24
 80046fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004700:	3103      	adds	r1, #3
 8004702:	6838      	ldr	r0, [r7, #0]
 8004704:	4401      	add	r1, r0
 8004706:	b2d3      	uxtb	r3, r2
 8004708:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_orientation_covariancei.base >> (8 * 4)) & 0xFF;
 800470a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800470e:	f04f 0200 	mov.w	r2, #0
 8004712:	f04f 0300 	mov.w	r3, #0
 8004716:	000a      	movs	r2, r1
 8004718:	2300      	movs	r3, #0
 800471a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800471c:	3104      	adds	r1, #4
 800471e:	6838      	ldr	r0, [r7, #0]
 8004720:	4401      	add	r1, r0
 8004722:	b2d3      	uxtb	r3, r2
 8004724:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_orientation_covariancei.base >> (8 * 5)) & 0xFF;
 8004726:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800472a:	f04f 0200 	mov.w	r2, #0
 800472e:	f04f 0300 	mov.w	r3, #0
 8004732:	0a0a      	lsrs	r2, r1, #8
 8004734:	2300      	movs	r3, #0
 8004736:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004738:	3105      	adds	r1, #5
 800473a:	6838      	ldr	r0, [r7, #0]
 800473c:	4401      	add	r1, r0
 800473e:	b2d3      	uxtb	r3, r2
 8004740:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_orientation_covariancei.base >> (8 * 6)) & 0xFF;
 8004742:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004746:	f04f 0200 	mov.w	r2, #0
 800474a:	f04f 0300 	mov.w	r3, #0
 800474e:	0c0a      	lsrs	r2, r1, #16
 8004750:	2300      	movs	r3, #0
 8004752:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004754:	3106      	adds	r1, #6
 8004756:	6838      	ldr	r0, [r7, #0]
 8004758:	4401      	add	r1, r0
 800475a:	b2d3      	uxtb	r3, r2
 800475c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_orientation_covariancei.base >> (8 * 7)) & 0xFF;
 800475e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004762:	f04f 0200 	mov.w	r2, #0
 8004766:	f04f 0300 	mov.w	r3, #0
 800476a:	0e0a      	lsrs	r2, r1, #24
 800476c:	2300      	movs	r3, #0
 800476e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004770:	3107      	adds	r1, #7
 8004772:	6838      	ldr	r0, [r7, #0]
 8004774:	4401      	add	r1, r0
 8004776:	b2d3      	uxtb	r3, r2
 8004778:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->orientation_covariance[i]);
 800477a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800477c:	3308      	adds	r3, #8
 800477e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      for( uint32_t i = 0; i < 9; i++){
 8004780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004782:	3301      	adds	r3, #1
 8004784:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004788:	2b08      	cmp	r3, #8
 800478a:	f67f af7e 	bls.w	800468a <_ZNK11sensor_msgs3Imu9serializeEPh+0x46>
      }
      offset += this->angular_velocity.serialize(outbuffer + offset);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f103 0088 	add.w	r0, r3, #136	@ 0x88
 8004794:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004796:	683a      	ldr	r2, [r7, #0]
 8004798:	4413      	add	r3, r2
 800479a:	4619      	mov	r1, r3
 800479c:	f7ff fa14 	bl	8003bc8 <_ZNK13geometry_msgs7Vector39serializeEPh>
 80047a0:	4602      	mov	r2, r0
 80047a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047a4:	4413      	add	r3, r2
 80047a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      for( uint32_t i = 0; i < 9; i++){
 80047a8:	2300      	movs	r3, #0
 80047aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80047ac:	e07d      	b.n	80048aa <_ZNK11sensor_msgs3Imu9serializeEPh+0x266>
      union {
        double real;
        uint64_t base;
      } u_angular_velocity_covariancei;
      u_angular_velocity_covariancei.real = this->angular_velocity_covariance[i];
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047b2:	3315      	adds	r3, #21
 80047b4:	00db      	lsls	r3, r3, #3
 80047b6:	4413      	add	r3, r2
 80047b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047bc:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_angular_velocity_covariancei.base >> (8 * 0)) & 0xFF;
 80047c0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80047c4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80047c6:	6838      	ldr	r0, [r7, #0]
 80047c8:	4401      	add	r1, r0
 80047ca:	b2d3      	uxtb	r3, r2
 80047cc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_angular_velocity_covariancei.base >> (8 * 1)) & 0xFF;
 80047ce:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80047d2:	f04f 0200 	mov.w	r2, #0
 80047d6:	f04f 0300 	mov.w	r3, #0
 80047da:	0a02      	lsrs	r2, r0, #8
 80047dc:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80047e0:	0a0b      	lsrs	r3, r1, #8
 80047e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80047e4:	3101      	adds	r1, #1
 80047e6:	6838      	ldr	r0, [r7, #0]
 80047e8:	4401      	add	r1, r0
 80047ea:	b2d3      	uxtb	r3, r2
 80047ec:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_angular_velocity_covariancei.base >> (8 * 2)) & 0xFF;
 80047ee:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80047f2:	f04f 0200 	mov.w	r2, #0
 80047f6:	f04f 0300 	mov.w	r3, #0
 80047fa:	0c02      	lsrs	r2, r0, #16
 80047fc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004800:	0c0b      	lsrs	r3, r1, #16
 8004802:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004804:	3102      	adds	r1, #2
 8004806:	6838      	ldr	r0, [r7, #0]
 8004808:	4401      	add	r1, r0
 800480a:	b2d3      	uxtb	r3, r2
 800480c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_angular_velocity_covariancei.base >> (8 * 3)) & 0xFF;
 800480e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004812:	f04f 0200 	mov.w	r2, #0
 8004816:	f04f 0300 	mov.w	r3, #0
 800481a:	0e02      	lsrs	r2, r0, #24
 800481c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004820:	0e0b      	lsrs	r3, r1, #24
 8004822:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004824:	3103      	adds	r1, #3
 8004826:	6838      	ldr	r0, [r7, #0]
 8004828:	4401      	add	r1, r0
 800482a:	b2d3      	uxtb	r3, r2
 800482c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_angular_velocity_covariancei.base >> (8 * 4)) & 0xFF;
 800482e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004832:	f04f 0200 	mov.w	r2, #0
 8004836:	f04f 0300 	mov.w	r3, #0
 800483a:	000a      	movs	r2, r1
 800483c:	2300      	movs	r3, #0
 800483e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004840:	3104      	adds	r1, #4
 8004842:	6838      	ldr	r0, [r7, #0]
 8004844:	4401      	add	r1, r0
 8004846:	b2d3      	uxtb	r3, r2
 8004848:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_angular_velocity_covariancei.base >> (8 * 5)) & 0xFF;
 800484a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800484e:	f04f 0200 	mov.w	r2, #0
 8004852:	f04f 0300 	mov.w	r3, #0
 8004856:	0a0a      	lsrs	r2, r1, #8
 8004858:	2300      	movs	r3, #0
 800485a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800485c:	3105      	adds	r1, #5
 800485e:	6838      	ldr	r0, [r7, #0]
 8004860:	4401      	add	r1, r0
 8004862:	b2d3      	uxtb	r3, r2
 8004864:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_angular_velocity_covariancei.base >> (8 * 6)) & 0xFF;
 8004866:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800486a:	f04f 0200 	mov.w	r2, #0
 800486e:	f04f 0300 	mov.w	r3, #0
 8004872:	0c0a      	lsrs	r2, r1, #16
 8004874:	2300      	movs	r3, #0
 8004876:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004878:	3106      	adds	r1, #6
 800487a:	6838      	ldr	r0, [r7, #0]
 800487c:	4401      	add	r1, r0
 800487e:	b2d3      	uxtb	r3, r2
 8004880:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_angular_velocity_covariancei.base >> (8 * 7)) & 0xFF;
 8004882:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004886:	f04f 0200 	mov.w	r2, #0
 800488a:	f04f 0300 	mov.w	r3, #0
 800488e:	0e0a      	lsrs	r2, r1, #24
 8004890:	2300      	movs	r3, #0
 8004892:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004894:	3107      	adds	r1, #7
 8004896:	6838      	ldr	r0, [r7, #0]
 8004898:	4401      	add	r1, r0
 800489a:	b2d3      	uxtb	r3, r2
 800489c:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->angular_velocity_covariance[i]);
 800489e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048a0:	3308      	adds	r3, #8
 80048a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      for( uint32_t i = 0; i < 9; i++){
 80048a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048a6:	3301      	adds	r3, #1
 80048a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80048aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ac:	2b08      	cmp	r3, #8
 80048ae:	f67f af7e 	bls.w	80047ae <_ZNK11sensor_msgs3Imu9serializeEPh+0x16a>
      }
      offset += this->linear_acceleration.serialize(outbuffer + offset);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f103 00f0 	add.w	r0, r3, #240	@ 0xf0
 80048b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048ba:	683a      	ldr	r2, [r7, #0]
 80048bc:	4413      	add	r3, r2
 80048be:	4619      	mov	r1, r3
 80048c0:	f7ff f982 	bl	8003bc8 <_ZNK13geometry_msgs7Vector39serializeEPh>
 80048c4:	4602      	mov	r2, r0
 80048c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048c8:	4413      	add	r3, r2
 80048ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
      for( uint32_t i = 0; i < 9; i++){
 80048cc:	2300      	movs	r3, #0
 80048ce:	623b      	str	r3, [r7, #32]
 80048d0:	e07d      	b.n	80049ce <_ZNK11sensor_msgs3Imu9serializeEPh+0x38a>
      union {
        double real;
        uint64_t base;
      } u_linear_acceleration_covariancei;
      u_linear_acceleration_covariancei.real = this->linear_acceleration_covariance[i];
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	6a3b      	ldr	r3, [r7, #32]
 80048d6:	3322      	adds	r3, #34	@ 0x22
 80048d8:	00db      	lsls	r3, r3, #3
 80048da:	4413      	add	r3, r2
 80048dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048e0:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_linear_acceleration_covariancei.base >> (8 * 0)) & 0xFF;
 80048e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80048e8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80048ea:	6838      	ldr	r0, [r7, #0]
 80048ec:	4401      	add	r1, r0
 80048ee:	b2d3      	uxtb	r3, r2
 80048f0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_linear_acceleration_covariancei.base >> (8 * 1)) & 0xFF;
 80048f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80048f6:	f04f 0200 	mov.w	r2, #0
 80048fa:	f04f 0300 	mov.w	r3, #0
 80048fe:	0a02      	lsrs	r2, r0, #8
 8004900:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8004904:	0a0b      	lsrs	r3, r1, #8
 8004906:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004908:	3101      	adds	r1, #1
 800490a:	6838      	ldr	r0, [r7, #0]
 800490c:	4401      	add	r1, r0
 800490e:	b2d3      	uxtb	r3, r2
 8004910:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_linear_acceleration_covariancei.base >> (8 * 2)) & 0xFF;
 8004912:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004916:	f04f 0200 	mov.w	r2, #0
 800491a:	f04f 0300 	mov.w	r3, #0
 800491e:	0c02      	lsrs	r2, r0, #16
 8004920:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004924:	0c0b      	lsrs	r3, r1, #16
 8004926:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004928:	3102      	adds	r1, #2
 800492a:	6838      	ldr	r0, [r7, #0]
 800492c:	4401      	add	r1, r0
 800492e:	b2d3      	uxtb	r3, r2
 8004930:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_linear_acceleration_covariancei.base >> (8 * 3)) & 0xFF;
 8004932:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004936:	f04f 0200 	mov.w	r2, #0
 800493a:	f04f 0300 	mov.w	r3, #0
 800493e:	0e02      	lsrs	r2, r0, #24
 8004940:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004944:	0e0b      	lsrs	r3, r1, #24
 8004946:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004948:	3103      	adds	r1, #3
 800494a:	6838      	ldr	r0, [r7, #0]
 800494c:	4401      	add	r1, r0
 800494e:	b2d3      	uxtb	r3, r2
 8004950:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_linear_acceleration_covariancei.base >> (8 * 4)) & 0xFF;
 8004952:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004956:	f04f 0200 	mov.w	r2, #0
 800495a:	f04f 0300 	mov.w	r3, #0
 800495e:	000a      	movs	r2, r1
 8004960:	2300      	movs	r3, #0
 8004962:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004964:	3104      	adds	r1, #4
 8004966:	6838      	ldr	r0, [r7, #0]
 8004968:	4401      	add	r1, r0
 800496a:	b2d3      	uxtb	r3, r2
 800496c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_linear_acceleration_covariancei.base >> (8 * 5)) & 0xFF;
 800496e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004972:	f04f 0200 	mov.w	r2, #0
 8004976:	f04f 0300 	mov.w	r3, #0
 800497a:	0a0a      	lsrs	r2, r1, #8
 800497c:	2300      	movs	r3, #0
 800497e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004980:	3105      	adds	r1, #5
 8004982:	6838      	ldr	r0, [r7, #0]
 8004984:	4401      	add	r1, r0
 8004986:	b2d3      	uxtb	r3, r2
 8004988:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_linear_acceleration_covariancei.base >> (8 * 6)) & 0xFF;
 800498a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800498e:	f04f 0200 	mov.w	r2, #0
 8004992:	f04f 0300 	mov.w	r3, #0
 8004996:	0c0a      	lsrs	r2, r1, #16
 8004998:	2300      	movs	r3, #0
 800499a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800499c:	3106      	adds	r1, #6
 800499e:	6838      	ldr	r0, [r7, #0]
 80049a0:	4401      	add	r1, r0
 80049a2:	b2d3      	uxtb	r3, r2
 80049a4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_linear_acceleration_covariancei.base >> (8 * 7)) & 0xFF;
 80049a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80049aa:	f04f 0200 	mov.w	r2, #0
 80049ae:	f04f 0300 	mov.w	r3, #0
 80049b2:	0e0a      	lsrs	r2, r1, #24
 80049b4:	2300      	movs	r3, #0
 80049b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80049b8:	3107      	adds	r1, #7
 80049ba:	6838      	ldr	r0, [r7, #0]
 80049bc:	4401      	add	r1, r0
 80049be:	b2d3      	uxtb	r3, r2
 80049c0:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->linear_acceleration_covariance[i]);
 80049c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049c4:	3308      	adds	r3, #8
 80049c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      for( uint32_t i = 0; i < 9; i++){
 80049c8:	6a3b      	ldr	r3, [r7, #32]
 80049ca:	3301      	adds	r3, #1
 80049cc:	623b      	str	r3, [r7, #32]
 80049ce:	6a3b      	ldr	r3, [r7, #32]
 80049d0:	2b08      	cmp	r3, #8
 80049d2:	f67f af7e 	bls.w	80048d2 <_ZNK11sensor_msgs3Imu9serializeEPh+0x28e>
      }
      return offset;
 80049d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
 80049d8:	4618      	mov	r0, r3
 80049da:	3730      	adds	r7, #48	@ 0x30
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}

080049e0 <_ZN11sensor_msgs3Imu11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80049e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049e4:	b0ed      	sub	sp, #436	@ 0x1b4
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	f8c7 0184 	str.w	r0, [r7, #388]	@ 0x184
 80049ec:	f8c7 1180 	str.w	r1, [r7, #384]	@ 0x180
    {
      int offset = 0;
 80049f0:	2300      	movs	r3, #0
 80049f2:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
      offset += this->header.deserialize(inbuffer + offset);
 80049f6:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80049fa:	1d18      	adds	r0, r3, #4
 80049fc:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8004a00:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004a04:	4413      	add	r3, r2
 8004a06:	4619      	mov	r1, r3
 8004a08:	f7fe f924 	bl	8002c54 <_ZN8std_msgs6Header11deserializeEPh>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8004a12:	4413      	add	r3, r2
 8004a14:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
      offset += this->orientation.deserialize(inbuffer + offset);
 8004a18:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8004a1c:	f103 0018 	add.w	r0, r3, #24
 8004a20:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8004a24:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004a28:	4413      	add	r3, r2
 8004a2a:	4619      	mov	r1, r3
 8004a2c:	f7fe fc01 	bl	8003232 <_ZN13geometry_msgs10Quaternion11deserializeEPh>
 8004a30:	4602      	mov	r2, r0
 8004a32:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8004a36:	4413      	add	r3, r2
 8004a38:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
      for( uint32_t i = 0; i < 9; i++){
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8004a42:	e122      	b.n	8004c8a <_ZN11sensor_msgs3Imu11deserializeEPh+0x2aa>
      union {
        double real;
        uint64_t base;
      } u_orientation_covariancei;
      u_orientation_covariancei.base = 0;
 8004a44:	f04f 0200 	mov.w	r2, #0
 8004a48:	f04f 0300 	mov.w	r3, #0
 8004a4c:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8004a50:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8004a54:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8004a58:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004a5c:	4413      	add	r3, r2
 8004a5e:	781b      	ldrb	r3, [r3, #0]
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	2200      	movs	r2, #0
 8004a64:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 8004a68:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
 8004a6c:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	@ 0x170
 8004a70:	4616      	mov	r6, r2
 8004a72:	4306      	orrs	r6, r0
 8004a74:	f8c7 6168 	str.w	r6, [r7, #360]	@ 0x168
 8004a78:	430b      	orrs	r3, r1
 8004a7a:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 8004a7e:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	@ 0x168
 8004a82:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004a86:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8004a8a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8004a8e:	1c5a      	adds	r2, r3, #1
 8004a90:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004a94:	4413      	add	r3, r2
 8004a96:	781b      	ldrb	r3, [r3, #0]
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	469a      	mov	sl, r3
 8004a9e:	4693      	mov	fp, r2
 8004aa0:	f04f 0200 	mov.w	r2, #0
 8004aa4:	f04f 0300 	mov.w	r3, #0
 8004aa8:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8004aac:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8004ab0:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8004ab4:	ea40 0602 	orr.w	r6, r0, r2
 8004ab8:	f8c7 6160 	str.w	r6, [r7, #352]	@ 0x160
 8004abc:	430b      	orrs	r3, r1
 8004abe:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8004ac2:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	@ 0x160
 8004ac6:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004aca:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8004ace:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8004ad2:	1c9a      	adds	r2, r3, #2
 8004ad4:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004ad8:	4413      	add	r3, r2
 8004ada:	781b      	ldrb	r3, [r3, #0]
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	2200      	movs	r2, #0
 8004ae0:	4698      	mov	r8, r3
 8004ae2:	4691      	mov	r9, r2
 8004ae4:	f04f 0200 	mov.w	r2, #0
 8004ae8:	f04f 0300 	mov.w	r3, #0
 8004aec:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8004af0:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8004af4:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8004af8:	ea40 0602 	orr.w	r6, r0, r2
 8004afc:	f8c7 6158 	str.w	r6, [r7, #344]	@ 0x158
 8004b00:	430b      	orrs	r3, r1
 8004b02:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8004b06:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	@ 0x158
 8004b0a:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004b0e:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8004b12:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8004b16:	1cda      	adds	r2, r3, #3
 8004b18:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004b1c:	4413      	add	r3, r2
 8004b1e:	781b      	ldrb	r3, [r3, #0]
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	2200      	movs	r2, #0
 8004b24:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 8004b28:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8004b2c:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8004b30:	0a1d      	lsrs	r5, r3, #8
 8004b32:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8004b36:	061c      	lsls	r4, r3, #24
 8004b38:	ea40 0304 	orr.w	r3, r0, r4
 8004b3c:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8004b40:	ea41 0305 	orr.w	r3, r1, r5
 8004b44:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8004b48:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 8004b4c:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8004b50:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8004b54:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8004b58:	1d1a      	adds	r2, r3, #4
 8004b5a:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004b5e:	4413      	add	r3, r2
 8004b60:	781b      	ldrb	r3, [r3, #0]
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	2200      	movs	r2, #0
 8004b66:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 8004b6a:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8004b6e:	f04f 0200 	mov.w	r2, #0
 8004b72:	f04f 0300 	mov.w	r3, #0
 8004b76:	f8d7 6148 	ldr.w	r6, [r7, #328]	@ 0x148
 8004b7a:	0033      	movs	r3, r6
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	ea40 0602 	orr.w	r6, r0, r2
 8004b82:	f8c7 6140 	str.w	r6, [r7, #320]	@ 0x140
 8004b86:	430b      	orrs	r3, r1
 8004b88:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8004b8c:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 8004b90:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8004b94:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8004b98:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8004b9c:	1d5a      	adds	r2, r3, #5
 8004b9e:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004ba2:	4413      	add	r3, r2
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8004bae:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 8004bb2:	f04f 0200 	mov.w	r2, #0
 8004bb6:	f04f 0300 	mov.w	r3, #0
 8004bba:	f8d7 6138 	ldr.w	r6, [r7, #312]	@ 0x138
 8004bbe:	0233      	lsls	r3, r6, #8
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	ea40 0602 	orr.w	r6, r0, r2
 8004bc6:	f8c7 6130 	str.w	r6, [r7, #304]	@ 0x130
 8004bca:	430b      	orrs	r3, r1
 8004bcc:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8004bd0:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 8004bd4:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8004bd8:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8004bdc:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8004be0:	1d9a      	adds	r2, r3, #6
 8004be2:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004be6:	4413      	add	r3, r2
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	b2db      	uxtb	r3, r3
 8004bec:	2200      	movs	r2, #0
 8004bee:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8004bf2:	f8c7 212c 	str.w	r2, [r7, #300]	@ 0x12c
 8004bf6:	f04f 0200 	mov.w	r2, #0
 8004bfa:	f04f 0300 	mov.w	r3, #0
 8004bfe:	f8d7 6128 	ldr.w	r6, [r7, #296]	@ 0x128
 8004c02:	0433      	lsls	r3, r6, #16
 8004c04:	2200      	movs	r2, #0
 8004c06:	ea40 0602 	orr.w	r6, r0, r2
 8004c0a:	f8c7 6120 	str.w	r6, [r7, #288]	@ 0x120
 8004c0e:	430b      	orrs	r3, r1
 8004c10:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8004c14:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8004c18:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8004c1c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8004c20:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8004c24:	1dda      	adds	r2, r3, #7
 8004c26:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004c2a:	4413      	add	r3, r2
 8004c2c:	781b      	ldrb	r3, [r3, #0]
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	2200      	movs	r2, #0
 8004c32:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8004c36:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8004c3a:	f04f 0200 	mov.w	r2, #0
 8004c3e:	f04f 0300 	mov.w	r3, #0
 8004c42:	f8d7 6118 	ldr.w	r6, [r7, #280]	@ 0x118
 8004c46:	0633      	lsls	r3, r6, #24
 8004c48:	2200      	movs	r2, #0
 8004c4a:	ea40 0602 	orr.w	r6, r0, r2
 8004c4e:	f8c7 6110 	str.w	r6, [r7, #272]	@ 0x110
 8004c52:	430b      	orrs	r3, r1
 8004c54:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8004c58:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8004c5c:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      this->orientation_covariance[i] = u_orientation_covariancei.real;
 8004c60:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8004c64:	f8d7 2184 	ldr.w	r2, [r7, #388]	@ 0x184
 8004c68:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8004c6c:	3308      	adds	r3, #8
 8004c6e:	00db      	lsls	r3, r3, #3
 8004c70:	4413      	add	r3, r2
 8004c72:	e9c3 0100 	strd	r0, r1, [r3]
      offset += sizeof(this->orientation_covariance[i]);
 8004c76:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8004c7a:	3308      	adds	r3, #8
 8004c7c:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
      for( uint32_t i = 0; i < 9; i++){
 8004c80:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8004c84:	3301      	adds	r3, #1
 8004c86:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8004c8a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8004c8e:	2b08      	cmp	r3, #8
 8004c90:	f67f aed8 	bls.w	8004a44 <_ZN11sensor_msgs3Imu11deserializeEPh+0x64>
      }
      offset += this->angular_velocity.deserialize(inbuffer + offset);
 8004c94:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8004c98:	f103 0088 	add.w	r0, r3, #136	@ 0x88
 8004c9c:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8004ca0:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004ca4:	4413      	add	r3, r2
 8004ca6:	4619      	mov	r1, r3
 8004ca8:	f7ff f900 	bl	8003eac <_ZN13geometry_msgs7Vector311deserializeEPh>
 8004cac:	4602      	mov	r2, r0
 8004cae:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8004cb2:	4413      	add	r3, r2
 8004cb4:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
      for( uint32_t i = 0; i < 9; i++){
 8004cb8:	2300      	movs	r3, #0
 8004cba:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8004cbe:	e135      	b.n	8004f2c <_ZN11sensor_msgs3Imu11deserializeEPh+0x54c>
      union {
        double real;
        uint64_t base;
      } u_angular_velocity_covariancei;
      u_angular_velocity_covariancei.base = 0;
 8004cc0:	f04f 0200 	mov.w	r2, #0
 8004cc4:	f04f 0300 	mov.w	r3, #0
 8004cc8:	e9c7 2364 	strd	r2, r3, [r7, #400]	@ 0x190
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8004ccc:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8004cd0:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8004cd4:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004cd8:	4413      	add	r3, r2
 8004cda:	781b      	ldrb	r3, [r3, #0]
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	2200      	movs	r2, #0
 8004ce0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8004ce4:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 8004ce8:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	@ 0x108
 8004cec:	461a      	mov	r2, r3
 8004cee:	4302      	orrs	r2, r0
 8004cf0:	f8c7 2100 	str.w	r2, [r7, #256]	@ 0x100
 8004cf4:	4623      	mov	r3, r4
 8004cf6:	430b      	orrs	r3, r1
 8004cf8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004cfc:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	@ 0x100
 8004d00:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004d04:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8004d08:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8004d0c:	1c5a      	adds	r2, r3, #1
 8004d0e:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004d12:	4413      	add	r3, r2
 8004d14:	781b      	ldrb	r3, [r3, #0]
 8004d16:	b2db      	uxtb	r3, r3
 8004d18:	2200      	movs	r2, #0
 8004d1a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004d1e:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 8004d22:	f04f 0200 	mov.w	r2, #0
 8004d26:	f04f 0300 	mov.w	r3, #0
 8004d2a:	e9d7 563e 	ldrd	r5, r6, [r7, #248]	@ 0xf8
 8004d2e:	4634      	mov	r4, r6
 8004d30:	0223      	lsls	r3, r4, #8
 8004d32:	462c      	mov	r4, r5
 8004d34:	4635      	mov	r5, r6
 8004d36:	4626      	mov	r6, r4
 8004d38:	ea43 6316 	orr.w	r3, r3, r6, lsr #24
 8004d3c:	0222      	lsls	r2, r4, #8
 8004d3e:	ea40 0402 	orr.w	r4, r0, r2
 8004d42:	f8c7 40f0 	str.w	r4, [r7, #240]	@ 0xf0
 8004d46:	430b      	orrs	r3, r1
 8004d48:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004d4c:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	@ 0xf0
 8004d50:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004d54:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8004d58:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8004d5c:	1c9a      	adds	r2, r3, #2
 8004d5e:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004d62:	4413      	add	r3, r2
 8004d64:	781b      	ldrb	r3, [r3, #0]
 8004d66:	b2db      	uxtb	r3, r3
 8004d68:	2200      	movs	r2, #0
 8004d6a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004d6e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004d72:	f04f 0200 	mov.w	r2, #0
 8004d76:	f04f 0300 	mov.w	r3, #0
 8004d7a:	e9d7 563a 	ldrd	r5, r6, [r7, #232]	@ 0xe8
 8004d7e:	4634      	mov	r4, r6
 8004d80:	0423      	lsls	r3, r4, #16
 8004d82:	462c      	mov	r4, r5
 8004d84:	4635      	mov	r5, r6
 8004d86:	4626      	mov	r6, r4
 8004d88:	ea43 4316 	orr.w	r3, r3, r6, lsr #16
 8004d8c:	0422      	lsls	r2, r4, #16
 8004d8e:	ea40 0402 	orr.w	r4, r0, r2
 8004d92:	f8c7 40e0 	str.w	r4, [r7, #224]	@ 0xe0
 8004d96:	430b      	orrs	r3, r1
 8004d98:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004d9c:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	@ 0xe0
 8004da0:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004da4:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8004da8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8004dac:	1cda      	adds	r2, r3, #3
 8004dae:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004db2:	4413      	add	r3, r2
 8004db4:	781b      	ldrb	r3, [r3, #0]
 8004db6:	b2db      	uxtb	r3, r3
 8004db8:	2200      	movs	r2, #0
 8004dba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004dbe:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004dc2:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8004dc6:	4623      	mov	r3, r4
 8004dc8:	0a1b      	lsrs	r3, r3, #8
 8004dca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004dce:	4623      	mov	r3, r4
 8004dd0:	061b      	lsls	r3, r3, #24
 8004dd2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004dd6:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	@ 0xd0
 8004dda:	461a      	mov	r2, r3
 8004ddc:	4302      	orrs	r2, r0
 8004dde:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8004de2:	4623      	mov	r3, r4
 8004de4:	430b      	orrs	r3, r1
 8004de6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004dea:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	@ 0xc8
 8004dee:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8004df2:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8004df6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8004dfa:	1d1a      	adds	r2, r3, #4
 8004dfc:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004e00:	4413      	add	r3, r2
 8004e02:	781b      	ldrb	r3, [r3, #0]
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	2200      	movs	r2, #0
 8004e08:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004e0c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004e10:	f04f 0200 	mov.w	r2, #0
 8004e14:	f04f 0300 	mov.w	r3, #0
 8004e18:	f8d7 40c0 	ldr.w	r4, [r7, #192]	@ 0xc0
 8004e1c:	0023      	movs	r3, r4
 8004e1e:	2200      	movs	r2, #0
 8004e20:	ea40 0402 	orr.w	r4, r0, r2
 8004e24:	f8c7 40b8 	str.w	r4, [r7, #184]	@ 0xb8
 8004e28:	430b      	orrs	r3, r1
 8004e2a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004e2e:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	@ 0xb8
 8004e32:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8004e36:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8004e3a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8004e3e:	1d5a      	adds	r2, r3, #5
 8004e40:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004e44:	4413      	add	r3, r2
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004e50:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8004e54:	f04f 0200 	mov.w	r2, #0
 8004e58:	f04f 0300 	mov.w	r3, #0
 8004e5c:	f8d7 40b0 	ldr.w	r4, [r7, #176]	@ 0xb0
 8004e60:	0223      	lsls	r3, r4, #8
 8004e62:	2200      	movs	r2, #0
 8004e64:	ea40 0402 	orr.w	r4, r0, r2
 8004e68:	f8c7 40a8 	str.w	r4, [r7, #168]	@ 0xa8
 8004e6c:	430b      	orrs	r3, r1
 8004e6e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004e72:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	@ 0xa8
 8004e76:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8004e7a:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8004e7e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8004e82:	1d9a      	adds	r2, r3, #6
 8004e84:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004e88:	4413      	add	r3, r2
 8004e8a:	781b      	ldrb	r3, [r3, #0]
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	2200      	movs	r2, #0
 8004e90:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004e94:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004e98:	f04f 0200 	mov.w	r2, #0
 8004e9c:	f04f 0300 	mov.w	r3, #0
 8004ea0:	f8d7 40a0 	ldr.w	r4, [r7, #160]	@ 0xa0
 8004ea4:	0423      	lsls	r3, r4, #16
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	ea40 0402 	orr.w	r4, r0, r2
 8004eac:	f8c7 4098 	str.w	r4, [r7, #152]	@ 0x98
 8004eb0:	430b      	orrs	r3, r1
 8004eb2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004eb6:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	@ 0x98
 8004eba:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8004ebe:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8004ec2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8004ec6:	1dda      	adds	r2, r3, #7
 8004ec8:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004ecc:	4413      	add	r3, r2
 8004ece:	781b      	ldrb	r3, [r3, #0]
 8004ed0:	b2db      	uxtb	r3, r3
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004ed8:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004edc:	f04f 0200 	mov.w	r2, #0
 8004ee0:	f04f 0300 	mov.w	r3, #0
 8004ee4:	f8d7 4090 	ldr.w	r4, [r7, #144]	@ 0x90
 8004ee8:	0623      	lsls	r3, r4, #24
 8004eea:	2200      	movs	r2, #0
 8004eec:	ea40 0402 	orr.w	r4, r0, r2
 8004ef0:	f8c7 4088 	str.w	r4, [r7, #136]	@ 0x88
 8004ef4:	430b      	orrs	r3, r1
 8004ef6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004efa:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	@ 0x88
 8004efe:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      this->angular_velocity_covariance[i] = u_angular_velocity_covariancei.real;
 8004f02:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8004f06:	f8d7 2184 	ldr.w	r2, [r7, #388]	@ 0x184
 8004f0a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8004f0e:	3315      	adds	r3, #21
 8004f10:	00db      	lsls	r3, r3, #3
 8004f12:	4413      	add	r3, r2
 8004f14:	e9c3 0100 	strd	r0, r1, [r3]
      offset += sizeof(this->angular_velocity_covariance[i]);
 8004f18:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8004f1c:	3308      	adds	r3, #8
 8004f1e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
      for( uint32_t i = 0; i < 9; i++){
 8004f22:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8004f26:	3301      	adds	r3, #1
 8004f28:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8004f2c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8004f30:	2b08      	cmp	r3, #8
 8004f32:	f67f aec5 	bls.w	8004cc0 <_ZN11sensor_msgs3Imu11deserializeEPh+0x2e0>
      }
      offset += this->linear_acceleration.deserialize(inbuffer + offset);
 8004f36:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8004f3a:	f103 00f0 	add.w	r0, r3, #240	@ 0xf0
 8004f3e:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8004f42:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004f46:	4413      	add	r3, r2
 8004f48:	4619      	mov	r1, r3
 8004f4a:	f7fe ffaf 	bl	8003eac <_ZN13geometry_msgs7Vector311deserializeEPh>
 8004f4e:	4602      	mov	r2, r0
 8004f50:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8004f54:	4413      	add	r3, r2
 8004f56:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
      for( uint32_t i = 0; i < 9; i++){
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8004f60:	e111      	b.n	8005186 <_ZN11sensor_msgs3Imu11deserializeEPh+0x7a6>
      union {
        double real;
        uint64_t base;
      } u_linear_acceleration_covariancei;
      u_linear_acceleration_covariancei.base = 0;
 8004f62:	f04f 0200 	mov.w	r2, #0
 8004f66:	f04f 0300 	mov.w	r3, #0
 8004f6a:	e9c7 2362 	strd	r2, r3, [r7, #392]	@ 0x188
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8004f6e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8004f72:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8004f76:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004f7a:	4413      	add	r3, r2
 8004f7c:	781b      	ldrb	r3, [r3, #0]
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	2200      	movs	r2, #0
 8004f82:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004f86:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004f8a:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	@ 0x80
 8004f8e:	461a      	mov	r2, r3
 8004f90:	4302      	orrs	r2, r0
 8004f92:	67ba      	str	r2, [r7, #120]	@ 0x78
 8004f94:	4623      	mov	r3, r4
 8004f96:	430b      	orrs	r3, r1
 8004f98:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004f9a:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	@ 0x78
 8004f9e:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004fa2:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8004fa6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8004faa:	1c5a      	adds	r2, r3, #1
 8004fac:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004fb0:	4413      	add	r3, r2
 8004fb2:	781b      	ldrb	r3, [r3, #0]
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	673b      	str	r3, [r7, #112]	@ 0x70
 8004fba:	677a      	str	r2, [r7, #116]	@ 0x74
 8004fbc:	f04f 0200 	mov.w	r2, #0
 8004fc0:	f04f 0300 	mov.w	r3, #0
 8004fc4:	e9d7 561c 	ldrd	r5, r6, [r7, #112]	@ 0x70
 8004fc8:	4634      	mov	r4, r6
 8004fca:	0223      	lsls	r3, r4, #8
 8004fcc:	462c      	mov	r4, r5
 8004fce:	4635      	mov	r5, r6
 8004fd0:	4626      	mov	r6, r4
 8004fd2:	ea43 6316 	orr.w	r3, r3, r6, lsr #24
 8004fd6:	0222      	lsls	r2, r4, #8
 8004fd8:	ea40 0402 	orr.w	r4, r0, r2
 8004fdc:	66bc      	str	r4, [r7, #104]	@ 0x68
 8004fde:	430b      	orrs	r3, r1
 8004fe0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004fe2:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	@ 0x68
 8004fe6:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004fea:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8004fee:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8004ff2:	1c9a      	adds	r2, r3, #2
 8004ff4:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004ff8:	4413      	add	r3, r2
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	b2db      	uxtb	r3, r3
 8004ffe:	2200      	movs	r2, #0
 8005000:	663b      	str	r3, [r7, #96]	@ 0x60
 8005002:	667a      	str	r2, [r7, #100]	@ 0x64
 8005004:	f04f 0200 	mov.w	r2, #0
 8005008:	f04f 0300 	mov.w	r3, #0
 800500c:	e9d7 5618 	ldrd	r5, r6, [r7, #96]	@ 0x60
 8005010:	4634      	mov	r4, r6
 8005012:	0423      	lsls	r3, r4, #16
 8005014:	462c      	mov	r4, r5
 8005016:	4635      	mov	r5, r6
 8005018:	4626      	mov	r6, r4
 800501a:	ea43 4316 	orr.w	r3, r3, r6, lsr #16
 800501e:	0422      	lsls	r2, r4, #16
 8005020:	ea40 0402 	orr.w	r4, r0, r2
 8005024:	65bc      	str	r4, [r7, #88]	@ 0x58
 8005026:	430b      	orrs	r3, r1
 8005028:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800502a:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	@ 0x58
 800502e:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8005032:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8005036:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 800503a:	1cda      	adds	r2, r3, #3
 800503c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005040:	4413      	add	r3, r2
 8005042:	781b      	ldrb	r3, [r3, #0]
 8005044:	b2db      	uxtb	r3, r3
 8005046:	2200      	movs	r2, #0
 8005048:	653b      	str	r3, [r7, #80]	@ 0x50
 800504a:	657a      	str	r2, [r7, #84]	@ 0x54
 800504c:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8005050:	4623      	mov	r3, r4
 8005052:	0a1b      	lsrs	r3, r3, #8
 8005054:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005056:	4623      	mov	r3, r4
 8005058:	061b      	lsls	r3, r3, #24
 800505a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800505c:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 8005060:	461a      	mov	r2, r3
 8005062:	4302      	orrs	r2, r0
 8005064:	643a      	str	r2, [r7, #64]	@ 0x40
 8005066:	4623      	mov	r3, r4
 8005068:	430b      	orrs	r3, r1
 800506a:	647b      	str	r3, [r7, #68]	@ 0x44
 800506c:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8005070:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8005074:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8005078:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 800507c:	1d1a      	adds	r2, r3, #4
 800507e:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005082:	4413      	add	r3, r2
 8005084:	781b      	ldrb	r3, [r3, #0]
 8005086:	b2db      	uxtb	r3, r3
 8005088:	2200      	movs	r2, #0
 800508a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800508c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800508e:	f04f 0200 	mov.w	r2, #0
 8005092:	f04f 0300 	mov.w	r3, #0
 8005096:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 8005098:	0023      	movs	r3, r4
 800509a:	2200      	movs	r2, #0
 800509c:	ea40 0402 	orr.w	r4, r0, r2
 80050a0:	633c      	str	r4, [r7, #48]	@ 0x30
 80050a2:	430b      	orrs	r3, r1
 80050a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80050a6:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 80050aa:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80050ae:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 80050b2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80050b6:	1d5a      	adds	r2, r3, #5
 80050b8:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80050bc:	4413      	add	r3, r2
 80050be:	781b      	ldrb	r3, [r3, #0]
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	2200      	movs	r2, #0
 80050c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80050c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80050c8:	f04f 0200 	mov.w	r2, #0
 80050cc:	f04f 0300 	mov.w	r3, #0
 80050d0:	6abc      	ldr	r4, [r7, #40]	@ 0x28
 80050d2:	0223      	lsls	r3, r4, #8
 80050d4:	2200      	movs	r2, #0
 80050d6:	ea40 0402 	orr.w	r4, r0, r2
 80050da:	623c      	str	r4, [r7, #32]
 80050dc:	430b      	orrs	r3, r1
 80050de:	627b      	str	r3, [r7, #36]	@ 0x24
 80050e0:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80050e4:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80050e8:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 80050ec:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80050f0:	1d9a      	adds	r2, r3, #6
 80050f2:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80050f6:	4413      	add	r3, r2
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	b2db      	uxtb	r3, r3
 80050fc:	2200      	movs	r2, #0
 80050fe:	61bb      	str	r3, [r7, #24]
 8005100:	61fa      	str	r2, [r7, #28]
 8005102:	f04f 0200 	mov.w	r2, #0
 8005106:	f04f 0300 	mov.w	r3, #0
 800510a:	69bc      	ldr	r4, [r7, #24]
 800510c:	0423      	lsls	r3, r4, #16
 800510e:	2200      	movs	r2, #0
 8005110:	ea40 0402 	orr.w	r4, r0, r2
 8005114:	613c      	str	r4, [r7, #16]
 8005116:	430b      	orrs	r3, r1
 8005118:	617b      	str	r3, [r7, #20]
 800511a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800511e:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8005122:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8005126:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 800512a:	1dda      	adds	r2, r3, #7
 800512c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005130:	4413      	add	r3, r2
 8005132:	781b      	ldrb	r3, [r3, #0]
 8005134:	b2db      	uxtb	r3, r3
 8005136:	2200      	movs	r2, #0
 8005138:	60bb      	str	r3, [r7, #8]
 800513a:	60fa      	str	r2, [r7, #12]
 800513c:	f04f 0200 	mov.w	r2, #0
 8005140:	f04f 0300 	mov.w	r3, #0
 8005144:	68bc      	ldr	r4, [r7, #8]
 8005146:	0623      	lsls	r3, r4, #24
 8005148:	2200      	movs	r2, #0
 800514a:	ea40 0402 	orr.w	r4, r0, r2
 800514e:	603c      	str	r4, [r7, #0]
 8005150:	430b      	orrs	r3, r1
 8005152:	607b      	str	r3, [r7, #4]
 8005154:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005158:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      this->linear_acceleration_covariance[i] = u_linear_acceleration_covariancei.real;
 800515c:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8005160:	f8d7 2184 	ldr.w	r2, [r7, #388]	@ 0x184
 8005164:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8005168:	3322      	adds	r3, #34	@ 0x22
 800516a:	00db      	lsls	r3, r3, #3
 800516c:	4413      	add	r3, r2
 800516e:	e9c3 0100 	strd	r0, r1, [r3]
      offset += sizeof(this->linear_acceleration_covariance[i]);
 8005172:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8005176:	3308      	adds	r3, #8
 8005178:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
      for( uint32_t i = 0; i < 9; i++){
 800517c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8005180:	3301      	adds	r3, #1
 8005182:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8005186:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 800518a:	2b08      	cmp	r3, #8
 800518c:	f67f aee9 	bls.w	8004f62 <_ZN11sensor_msgs3Imu11deserializeEPh+0x582>
      }
     return offset;
 8005190:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
    }
 8005194:	4618      	mov	r0, r3
 8005196:	f507 77da 	add.w	r7, r7, #436	@ 0x1b4
 800519a:	46bd      	mov	sp, r7
 800519c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080051a0 <_ZN11sensor_msgs3Imu7getTypeEv>:

    virtual const char * getType() override { return "sensor_msgs/Imu"; };
 80051a0:	b480      	push	{r7}
 80051a2:	b083      	sub	sp, #12
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
 80051a8:	4b02      	ldr	r3, [pc, #8]	@ (80051b4 <_ZN11sensor_msgs3Imu7getTypeEv+0x14>)
 80051aa:	4618      	mov	r0, r3
 80051ac:	370c      	adds	r7, #12
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bc80      	pop	{r7}
 80051b2:	4770      	bx	lr
 80051b4:	0800ad6c 	.word	0x0800ad6c

080051b8 <_ZN11sensor_msgs3Imu6getMD5Ev>:
    virtual const char * getMD5() override { return "6a62c6daae103f4ff57a132d6f95cec2"; };
 80051b8:	b480      	push	{r7}
 80051ba:	b083      	sub	sp, #12
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
 80051c0:	4b02      	ldr	r3, [pc, #8]	@ (80051cc <_ZN11sensor_msgs3Imu6getMD5Ev+0x14>)
 80051c2:	4618      	mov	r0, r3
 80051c4:	370c      	adds	r7, #12
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bc80      	pop	{r7}
 80051ca:	4770      	bx	lr
 80051cc:	0800ad7c 	.word	0x0800ad7c

080051d0 <_ZN13geometry_msgs9TransformC1Ev>:
      typedef geometry_msgs::Vector3 _translation_type;
      _translation_type translation;
      typedef geometry_msgs::Quaternion _rotation_type;
      _rotation_type rotation;

    Transform():
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b082      	sub	sp, #8
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
      translation(),
      rotation()
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	4618      	mov	r0, r3
 80051dc:	f7fc fc8c 	bl	8001af8 <_ZN3ros3MsgC1Ev>
 80051e0:	4a08      	ldr	r2, [pc, #32]	@ (8005204 <_ZN13geometry_msgs9TransformC1Ev+0x34>)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	601a      	str	r2, [r3, #0]
      translation(),
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	3308      	adds	r3, #8
 80051ea:	4618      	mov	r0, r3
 80051ec:	f7fe fcc4 	bl	8003b78 <_ZN13geometry_msgs7Vector3C1Ev>
      rotation()
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	3328      	adds	r3, #40	@ 0x28
 80051f4:	4618      	mov	r0, r3
 80051f6:	f7fd fe05 	bl	8002e04 <_ZN13geometry_msgs10QuaternionC1Ev>
    {
    }
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	4618      	mov	r0, r3
 80051fe:	3708      	adds	r7, #8
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}
 8005204:	0800af10 	.word	0x0800af10

08005208 <_ZNK13geometry_msgs9Transform9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8005208:	b580      	push	{r7, lr}
 800520a:	b084      	sub	sp, #16
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
 8005210:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8005212:	2300      	movs	r3, #0
 8005214:	60fb      	str	r3, [r7, #12]
      offset += this->translation.serialize(outbuffer + offset);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f103 0008 	add.w	r0, r3, #8
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	683a      	ldr	r2, [r7, #0]
 8005220:	4413      	add	r3, r2
 8005222:	4619      	mov	r1, r3
 8005224:	f7fe fcd0 	bl	8003bc8 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8005228:	4602      	mov	r2, r0
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	4413      	add	r3, r2
 800522e:	60fb      	str	r3, [r7, #12]
      offset += this->rotation.serialize(outbuffer + offset);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	683a      	ldr	r2, [r7, #0]
 800523a:	4413      	add	r3, r2
 800523c:	4619      	mov	r1, r3
 800523e:	f7fd fe0f 	bl	8002e60 <_ZNK13geometry_msgs10Quaternion9serializeEPh>
 8005242:	4602      	mov	r2, r0
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	4413      	add	r3, r2
 8005248:	60fb      	str	r3, [r7, #12]
      return offset;
 800524a:	68fb      	ldr	r3, [r7, #12]
    }
 800524c:	4618      	mov	r0, r3
 800524e:	3710      	adds	r7, #16
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}

08005254 <_ZN13geometry_msgs9Transform11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8005254:	b580      	push	{r7, lr}
 8005256:	b084      	sub	sp, #16
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800525e:	2300      	movs	r3, #0
 8005260:	60fb      	str	r3, [r7, #12]
      offset += this->translation.deserialize(inbuffer + offset);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f103 0008 	add.w	r0, r3, #8
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	683a      	ldr	r2, [r7, #0]
 800526c:	4413      	add	r3, r2
 800526e:	4619      	mov	r1, r3
 8005270:	f7fe fe1c 	bl	8003eac <_ZN13geometry_msgs7Vector311deserializeEPh>
 8005274:	4602      	mov	r2, r0
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	4413      	add	r3, r2
 800527a:	60fb      	str	r3, [r7, #12]
      offset += this->rotation.deserialize(inbuffer + offset);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	683a      	ldr	r2, [r7, #0]
 8005286:	4413      	add	r3, r2
 8005288:	4619      	mov	r1, r3
 800528a:	f7fd ffd2 	bl	8003232 <_ZN13geometry_msgs10Quaternion11deserializeEPh>
 800528e:	4602      	mov	r2, r0
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	4413      	add	r3, r2
 8005294:	60fb      	str	r3, [r7, #12]
     return offset;
 8005296:	68fb      	ldr	r3, [r7, #12]
    }
 8005298:	4618      	mov	r0, r3
 800529a:	3710      	adds	r7, #16
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}

080052a0 <_ZN13geometry_msgs9Transform7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Transform"; };
 80052a0:	b480      	push	{r7}
 80052a2:	b083      	sub	sp, #12
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
 80052a8:	4b02      	ldr	r3, [pc, #8]	@ (80052b4 <_ZN13geometry_msgs9Transform7getTypeEv+0x14>)
 80052aa:	4618      	mov	r0, r3
 80052ac:	370c      	adds	r7, #12
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bc80      	pop	{r7}
 80052b2:	4770      	bx	lr
 80052b4:	0800ada0 	.word	0x0800ada0

080052b8 <_ZN13geometry_msgs9Transform6getMD5Ev>:
    virtual const char * getMD5() override { return "ac9eff44abf714214112b05d54a3cf9b"; };
 80052b8:	b480      	push	{r7}
 80052ba:	b083      	sub	sp, #12
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	4b02      	ldr	r3, [pc, #8]	@ (80052cc <_ZN13geometry_msgs9Transform6getMD5Ev+0x14>)
 80052c2:	4618      	mov	r0, r3
 80052c4:	370c      	adds	r7, #12
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bc80      	pop	{r7}
 80052ca:	4770      	bx	lr
 80052cc:	0800adb8 	.word	0x0800adb8

080052d0 <_ZN13geometry_msgs16TransformStampedC1Ev>:
      typedef const char* _child_frame_id_type;
      _child_frame_id_type child_frame_id;
      typedef geometry_msgs::Transform _transform_type;
      _transform_type transform;

    TransformStamped():
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b082      	sub	sp, #8
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
      header(),
      child_frame_id(""),
      transform()
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	4618      	mov	r0, r3
 80052dc:	f7fc fc0c 	bl	8001af8 <_ZN3ros3MsgC1Ev>
 80052e0:	4a0a      	ldr	r2, [pc, #40]	@ (800530c <_ZN13geometry_msgs16TransformStampedC1Ev+0x3c>)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	601a      	str	r2, [r3, #0]
      header(),
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	3304      	adds	r3, #4
 80052ea:	4618      	mov	r0, r3
 80052ec:	f7fd fbfa 	bl	8002ae4 <_ZN8std_msgs6HeaderC1Ev>
      child_frame_id(""),
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	4a07      	ldr	r2, [pc, #28]	@ (8005310 <_ZN13geometry_msgs16TransformStampedC1Ev+0x40>)
 80052f4:	619a      	str	r2, [r3, #24]
      transform()
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	3320      	adds	r3, #32
 80052fa:	4618      	mov	r0, r3
 80052fc:	f7ff ff68 	bl	80051d0 <_ZN13geometry_msgs9TransformC1Ev>
    {
    }
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	4618      	mov	r0, r3
 8005304:	3708      	adds	r7, #8
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
 800530a:	bf00      	nop
 800530c:	0800aef8 	.word	0x0800aef8
 8005310:	0800ac1c 	.word	0x0800ac1c

08005314 <_ZNK13geometry_msgs16TransformStamped9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8005314:	b580      	push	{r7, lr}
 8005316:	b084      	sub	sp, #16
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800531e:	2300      	movs	r3, #0
 8005320:	60fb      	str	r3, [r7, #12]
      offset += this->header.serialize(outbuffer + offset);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	1d18      	adds	r0, r3, #4
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	683a      	ldr	r2, [r7, #0]
 800532a:	4413      	add	r3, r2
 800532c:	4619      	mov	r1, r3
 800532e:	f7fd fbf9 	bl	8002b24 <_ZNK8std_msgs6Header9serializeEPh>
 8005332:	4602      	mov	r2, r0
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	4413      	add	r3, r2
 8005338:	60fb      	str	r3, [r7, #12]
      uint32_t length_child_frame_id = strlen(this->child_frame_id);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	699b      	ldr	r3, [r3, #24]
 800533e:	4618      	mov	r0, r3
 8005340:	f7fa ff06 	bl	8000150 <strlen>
 8005344:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_child_frame_id);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	683a      	ldr	r2, [r7, #0]
 800534a:	4413      	add	r3, r2
 800534c:	68b9      	ldr	r1, [r7, #8]
 800534e:	4618      	mov	r0, r3
 8005350:	f000 fd2e 	bl	8005db0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	3304      	adds	r3, #4
 8005358:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->child_frame_id, length_child_frame_id);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	683a      	ldr	r2, [r7, #0]
 800535e:	18d0      	adds	r0, r2, r3
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	699b      	ldr	r3, [r3, #24]
 8005364:	68ba      	ldr	r2, [r7, #8]
 8005366:	4619      	mov	r1, r3
 8005368:	f005 fb16 	bl	800a998 <memcpy>
      offset += length_child_frame_id;
 800536c:	68fa      	ldr	r2, [r7, #12]
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	4413      	add	r3, r2
 8005372:	60fb      	str	r3, [r7, #12]
      offset += this->transform.serialize(outbuffer + offset);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f103 0020 	add.w	r0, r3, #32
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	683a      	ldr	r2, [r7, #0]
 800537e:	4413      	add	r3, r2
 8005380:	4619      	mov	r1, r3
 8005382:	f7ff ff41 	bl	8005208 <_ZNK13geometry_msgs9Transform9serializeEPh>
 8005386:	4602      	mov	r2, r0
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	4413      	add	r3, r2
 800538c:	60fb      	str	r3, [r7, #12]
      return offset;
 800538e:	68fb      	ldr	r3, [r7, #12]
    }
 8005390:	4618      	mov	r0, r3
 8005392:	3710      	adds	r7, #16
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}

08005398 <_ZN13geometry_msgs16TransformStamped11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8005398:	b580      	push	{r7, lr}
 800539a:	b086      	sub	sp, #24
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
 80053a0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80053a2:	2300      	movs	r3, #0
 80053a4:	613b      	str	r3, [r7, #16]
      offset += this->header.deserialize(inbuffer + offset);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	1d18      	adds	r0, r3, #4
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	683a      	ldr	r2, [r7, #0]
 80053ae:	4413      	add	r3, r2
 80053b0:	4619      	mov	r1, r3
 80053b2:	f7fd fc4f 	bl	8002c54 <_ZN8std_msgs6Header11deserializeEPh>
 80053b6:	4602      	mov	r2, r0
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	4413      	add	r3, r2
 80053bc:	613b      	str	r3, [r7, #16]
      uint32_t length_child_frame_id;
      arrToVar(length_child_frame_id, (inbuffer + offset));
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	683a      	ldr	r2, [r7, #0]
 80053c2:	441a      	add	r2, r3
 80053c4:	f107 030c 	add.w	r3, r7, #12
 80053c8:	4611      	mov	r1, r2
 80053ca:	4618      	mov	r0, r3
 80053cc:	f000 fd0e 	bl	8005dec <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	3304      	adds	r3, #4
 80053d4:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_child_frame_id; ++k){
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	617b      	str	r3, [r7, #20]
 80053da:	e00b      	b.n	80053f4 <_ZN13geometry_msgs16TransformStamped11deserializeEPh+0x5c>
          inbuffer[k-1]=inbuffer[k];
 80053dc:	683a      	ldr	r2, [r7, #0]
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	441a      	add	r2, r3
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	3b01      	subs	r3, #1
 80053e6:	6839      	ldr	r1, [r7, #0]
 80053e8:	440b      	add	r3, r1
 80053ea:	7812      	ldrb	r2, [r2, #0]
 80053ec:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_child_frame_id; ++k){
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	3301      	adds	r3, #1
 80053f2:	617b      	str	r3, [r7, #20]
 80053f4:	693a      	ldr	r2, [r7, #16]
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	4413      	add	r3, r2
 80053fa:	697a      	ldr	r2, [r7, #20]
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d3ed      	bcc.n	80053dc <_ZN13geometry_msgs16TransformStamped11deserializeEPh+0x44>
      }
      inbuffer[offset+length_child_frame_id-1]=0;
 8005400:	693a      	ldr	r2, [r7, #16]
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	4413      	add	r3, r2
 8005406:	3b01      	subs	r3, #1
 8005408:	683a      	ldr	r2, [r7, #0]
 800540a:	4413      	add	r3, r2
 800540c:	2200      	movs	r2, #0
 800540e:	701a      	strb	r2, [r3, #0]
      this->child_frame_id = (char *)(inbuffer + offset-1);
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	3b01      	subs	r3, #1
 8005414:	683a      	ldr	r2, [r7, #0]
 8005416:	441a      	add	r2, r3
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	619a      	str	r2, [r3, #24]
      offset += length_child_frame_id;
 800541c:	693a      	ldr	r2, [r7, #16]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	4413      	add	r3, r2
 8005422:	613b      	str	r3, [r7, #16]
      offset += this->transform.deserialize(inbuffer + offset);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f103 0020 	add.w	r0, r3, #32
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	683a      	ldr	r2, [r7, #0]
 800542e:	4413      	add	r3, r2
 8005430:	4619      	mov	r1, r3
 8005432:	f7ff ff0f 	bl	8005254 <_ZN13geometry_msgs9Transform11deserializeEPh>
 8005436:	4602      	mov	r2, r0
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	4413      	add	r3, r2
 800543c:	613b      	str	r3, [r7, #16]
     return offset;
 800543e:	693b      	ldr	r3, [r7, #16]
    }
 8005440:	4618      	mov	r0, r3
 8005442:	3718      	adds	r7, #24
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}

08005448 <_ZN13geometry_msgs16TransformStamped7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/TransformStamped"; };
 8005448:	b480      	push	{r7}
 800544a:	b083      	sub	sp, #12
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	4b02      	ldr	r3, [pc, #8]	@ (800545c <_ZN13geometry_msgs16TransformStamped7getTypeEv+0x14>)
 8005452:	4618      	mov	r0, r3
 8005454:	370c      	adds	r7, #12
 8005456:	46bd      	mov	sp, r7
 8005458:	bc80      	pop	{r7}
 800545a:	4770      	bx	lr
 800545c:	0800addc 	.word	0x0800addc

08005460 <_ZN13geometry_msgs16TransformStamped6getMD5Ev>:
    virtual const char * getMD5() override { return "b5764a33bfeb3588febc2682852579b0"; };
 8005460:	b480      	push	{r7}
 8005462:	b083      	sub	sp, #12
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	4b02      	ldr	r3, [pc, #8]	@ (8005474 <_ZN13geometry_msgs16TransformStamped6getMD5Ev+0x14>)
 800546a:	4618      	mov	r0, r3
 800546c:	370c      	adds	r7, #12
 800546e:	46bd      	mov	sp, r7
 8005470:	bc80      	pop	{r7}
 8005472:	4770      	bx	lr
 8005474:	0800adfc 	.word	0x0800adfc

08005478 <_ZN2tf9tfMessageC1Ev>:
      uint32_t transforms_length;
      typedef geometry_msgs::TransformStamped _transforms_type;
      _transforms_type st_transforms;
      _transforms_type * transforms;

    tfMessage():
 8005478:	b580      	push	{r7, lr}
 800547a:	b082      	sub	sp, #8
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
      transforms_length(0), st_transforms(), transforms(nullptr)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	4618      	mov	r0, r3
 8005484:	f7fc fb38 	bl	8001af8 <_ZN3ros3MsgC1Ev>
 8005488:	4a09      	ldr	r2, [pc, #36]	@ (80054b0 <_ZN2tf9tfMessageC1Ev+0x38>)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	601a      	str	r2, [r3, #0]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2200      	movs	r2, #0
 8005492:	605a      	str	r2, [r3, #4]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	3308      	adds	r3, #8
 8005498:	4618      	mov	r0, r3
 800549a:	f7ff ff19 	bl	80052d0 <_ZN13geometry_msgs16TransformStampedC1Ev>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2200      	movs	r2, #0
 80054a2:	679a      	str	r2, [r3, #120]	@ 0x78
    {
    }
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	4618      	mov	r0, r3
 80054a8:	3708      	adds	r7, #8
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}
 80054ae:	bf00      	nop
 80054b0:	0800aee0 	.word	0x0800aee0

080054b4 <_ZNK2tf9tfMessage9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b084      	sub	sp, #16
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80054be:	2300      	movs	r3, #0
 80054c0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->transforms_length >> (8 * 0)) & 0xFF;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6859      	ldr	r1, [r3, #4]
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	683a      	ldr	r2, [r7, #0]
 80054ca:	4413      	add	r3, r2
 80054cc:	b2ca      	uxtb	r2, r1
 80054ce:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->transforms_length >> (8 * 1)) & 0xFF;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	0a19      	lsrs	r1, r3, #8
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	3301      	adds	r3, #1
 80054da:	683a      	ldr	r2, [r7, #0]
 80054dc:	4413      	add	r3, r2
 80054de:	b2ca      	uxtb	r2, r1
 80054e0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->transforms_length >> (8 * 2)) & 0xFF;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	0c19      	lsrs	r1, r3, #16
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	3302      	adds	r3, #2
 80054ec:	683a      	ldr	r2, [r7, #0]
 80054ee:	4413      	add	r3, r2
 80054f0:	b2ca      	uxtb	r2, r1
 80054f2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->transforms_length >> (8 * 3)) & 0xFF;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	0e19      	lsrs	r1, r3, #24
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	3303      	adds	r3, #3
 80054fe:	683a      	ldr	r2, [r7, #0]
 8005500:	4413      	add	r3, r2
 8005502:	b2ca      	uxtb	r2, r1
 8005504:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->transforms_length);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	3304      	adds	r3, #4
 800550a:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < transforms_length; i++){
 800550c:	2300      	movs	r3, #0
 800550e:	60bb      	str	r3, [r7, #8]
 8005510:	e01d      	b.n	800554e <_ZNK2tf9tfMessage9serializeEPh+0x9a>
      offset += this->transforms[i].serialize(outbuffer + offset);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6f99      	ldr	r1, [r3, #120]	@ 0x78
 8005516:	68ba      	ldr	r2, [r7, #8]
 8005518:	4613      	mov	r3, r2
 800551a:	00db      	lsls	r3, r3, #3
 800551c:	1a9b      	subs	r3, r3, r2
 800551e:	011b      	lsls	r3, r3, #4
 8005520:	18c8      	adds	r0, r1, r3
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6f99      	ldr	r1, [r3, #120]	@ 0x78
 8005526:	68ba      	ldr	r2, [r7, #8]
 8005528:	4613      	mov	r3, r2
 800552a:	00db      	lsls	r3, r3, #3
 800552c:	1a9b      	subs	r3, r3, r2
 800552e:	011b      	lsls	r3, r3, #4
 8005530:	440b      	add	r3, r1
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	68fa      	ldr	r2, [r7, #12]
 8005538:	6839      	ldr	r1, [r7, #0]
 800553a:	440a      	add	r2, r1
 800553c:	4611      	mov	r1, r2
 800553e:	4798      	blx	r3
 8005540:	4602      	mov	r2, r0
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	4413      	add	r3, r2
 8005546:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < transforms_length; i++){
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	3301      	adds	r3, #1
 800554c:	60bb      	str	r3, [r7, #8]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	68ba      	ldr	r2, [r7, #8]
 8005554:	429a      	cmp	r2, r3
 8005556:	d3dc      	bcc.n	8005512 <_ZNK2tf9tfMessage9serializeEPh+0x5e>
      }
      return offset;
 8005558:	68fb      	ldr	r3, [r7, #12]
    }
 800555a:	4618      	mov	r0, r3
 800555c:	3710      	adds	r7, #16
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}

08005562 <_ZN2tf9tfMessage11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8005562:	b580      	push	{r7, lr}
 8005564:	b086      	sub	sp, #24
 8005566:	af00      	add	r7, sp, #0
 8005568:	6078      	str	r0, [r7, #4]
 800556a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800556c:	2300      	movs	r3, #0
 800556e:	617b      	str	r3, [r7, #20]
      uint32_t transforms_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	683a      	ldr	r2, [r7, #0]
 8005574:	4413      	add	r3, r2
 8005576:	781b      	ldrb	r3, [r3, #0]
 8005578:	60fb      	str	r3, [r7, #12]
      transforms_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	3301      	adds	r3, #1
 800557e:	683a      	ldr	r2, [r7, #0]
 8005580:	4413      	add	r3, r2
 8005582:	781b      	ldrb	r3, [r3, #0]
 8005584:	021b      	lsls	r3, r3, #8
 8005586:	68fa      	ldr	r2, [r7, #12]
 8005588:	4313      	orrs	r3, r2
 800558a:	60fb      	str	r3, [r7, #12]
      transforms_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	3302      	adds	r3, #2
 8005590:	683a      	ldr	r2, [r7, #0]
 8005592:	4413      	add	r3, r2
 8005594:	781b      	ldrb	r3, [r3, #0]
 8005596:	041b      	lsls	r3, r3, #16
 8005598:	68fa      	ldr	r2, [r7, #12]
 800559a:	4313      	orrs	r3, r2
 800559c:	60fb      	str	r3, [r7, #12]
      transforms_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	3303      	adds	r3, #3
 80055a2:	683a      	ldr	r2, [r7, #0]
 80055a4:	4413      	add	r3, r2
 80055a6:	781b      	ldrb	r3, [r3, #0]
 80055a8:	061b      	lsls	r3, r3, #24
 80055aa:	68fa      	ldr	r2, [r7, #12]
 80055ac:	4313      	orrs	r3, r2
 80055ae:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->transforms_length);
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	3304      	adds	r3, #4
 80055b4:	617b      	str	r3, [r7, #20]
      if(transforms_lengthT > transforms_length)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	68fa      	ldr	r2, [r7, #12]
 80055bc:	429a      	cmp	r2, r3
 80055be:	d90c      	bls.n	80055da <_ZN2tf9tfMessage11deserializeEPh+0x78>
        this->transforms = (geometry_msgs::TransformStamped*)realloc(this->transforms, transforms_lengthT * sizeof(geometry_msgs::TransformStamped));
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 80055c4:	68fa      	ldr	r2, [r7, #12]
 80055c6:	4613      	mov	r3, r2
 80055c8:	00db      	lsls	r3, r3, #3
 80055ca:	1a9b      	subs	r3, r3, r2
 80055cc:	011b      	lsls	r3, r3, #4
 80055ce:	4619      	mov	r1, r3
 80055d0:	f005 f978 	bl	800a8c4 <realloc>
 80055d4:	4602      	mov	r2, r0
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	679a      	str	r2, [r3, #120]	@ 0x78
      transforms_length = transforms_lengthT;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	68fa      	ldr	r2, [r7, #12]
 80055de:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < transforms_length; i++){
 80055e0:	2300      	movs	r3, #0
 80055e2:	613b      	str	r3, [r7, #16]
 80055e4:	e01d      	b.n	8005622 <_ZN2tf9tfMessage11deserializeEPh+0xc0>
      offset += this->st_transforms.deserialize(inbuffer + offset);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f103 0008 	add.w	r0, r3, #8
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	683a      	ldr	r2, [r7, #0]
 80055f0:	4413      	add	r3, r2
 80055f2:	4619      	mov	r1, r3
 80055f4:	f7ff fed0 	bl	8005398 <_ZN13geometry_msgs16TransformStamped11deserializeEPh>
 80055f8:	4602      	mov	r2, r0
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	4413      	add	r3, r2
 80055fe:	617b      	str	r3, [r7, #20]
        memcpy( &(this->transforms[i]), &(this->st_transforms), sizeof(geometry_msgs::TransformStamped));
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6f99      	ldr	r1, [r3, #120]	@ 0x78
 8005604:	693a      	ldr	r2, [r7, #16]
 8005606:	4613      	mov	r3, r2
 8005608:	00db      	lsls	r3, r3, #3
 800560a:	1a9b      	subs	r3, r3, r2
 800560c:	011b      	lsls	r3, r3, #4
 800560e:	18c8      	adds	r0, r1, r3
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	3308      	adds	r3, #8
 8005614:	2270      	movs	r2, #112	@ 0x70
 8005616:	4619      	mov	r1, r3
 8005618:	f005 f9be 	bl	800a998 <memcpy>
      for( uint32_t i = 0; i < transforms_length; i++){
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	3301      	adds	r3, #1
 8005620:	613b      	str	r3, [r7, #16]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	693a      	ldr	r2, [r7, #16]
 8005628:	429a      	cmp	r2, r3
 800562a:	d3dc      	bcc.n	80055e6 <_ZN2tf9tfMessage11deserializeEPh+0x84>
      }
     return offset;
 800562c:	697b      	ldr	r3, [r7, #20]
    }
 800562e:	4618      	mov	r0, r3
 8005630:	3718      	adds	r7, #24
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}
	...

08005638 <_ZN2tf9tfMessage7getTypeEv>:

    virtual const char * getType() override { return "tf/tfMessage"; };
 8005638:	b480      	push	{r7}
 800563a:	b083      	sub	sp, #12
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	4b02      	ldr	r3, [pc, #8]	@ (800564c <_ZN2tf9tfMessage7getTypeEv+0x14>)
 8005642:	4618      	mov	r0, r3
 8005644:	370c      	adds	r7, #12
 8005646:	46bd      	mov	sp, r7
 8005648:	bc80      	pop	{r7}
 800564a:	4770      	bx	lr
 800564c:	0800ae20 	.word	0x0800ae20

08005650 <_ZN2tf9tfMessage6getMD5Ev>:
    virtual const char * getMD5() override { return "94810edda583a504dfda3829e70d7eec"; };
 8005650:	b480      	push	{r7}
 8005652:	b083      	sub	sp, #12
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	4b02      	ldr	r3, [pc, #8]	@ (8005664 <_ZN2tf9tfMessage6getMD5Ev+0x14>)
 800565a:	4618      	mov	r0, r3
 800565c:	370c      	adds	r7, #12
 800565e:	46bd      	mov	sp, r7
 8005660:	bc80      	pop	{r7}
 8005662:	4770      	bx	lr
 8005664:	0800ae30 	.word	0x0800ae30

08005668 <_ZN2tf20TransformBroadcasterC1Ev>:
{

class TransformBroadcaster
{
public:
  TransformBroadcaster() : publisher_("/tf", &internal_msg) {}
 8005668:	b580      	push	{r7, lr}
 800566a:	b082      	sub	sp, #8
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	4618      	mov	r0, r3
 8005674:	f7ff ff00 	bl	8005478 <_ZN2tf9tfMessageC1Ev>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	f103 0080 	add.w	r0, r3, #128	@ 0x80
 800567e:	687a      	ldr	r2, [r7, #4]
 8005680:	2300      	movs	r3, #0
 8005682:	4904      	ldr	r1, [pc, #16]	@ (8005694 <_ZN2tf20TransformBroadcasterC1Ev+0x2c>)
 8005684:	f7fd f866 	bl	8002754 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	4618      	mov	r0, r3
 800568c:	3708      	adds	r7, #8
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
 8005692:	bf00      	nop
 8005694:	0800ae54 	.word	0x0800ae54

08005698 <_ZN2tf20TransformBroadcaster4initERN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EEE>:

  void init(ros::NodeHandle &nh)
 8005698:	b580      	push	{r7, lr}
 800569a:	b082      	sub	sp, #8
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
 80056a0:	6039      	str	r1, [r7, #0]
  {
    nh.advertise(publisher_);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	3380      	adds	r3, #128	@ 0x80
 80056a6:	4619      	mov	r1, r3
 80056a8:	6838      	ldr	r0, [r7, #0]
 80056aa:	f000 fbc4 	bl	8005e36 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE9advertiseERNS_9PublisherE>
  }
 80056ae:	bf00      	nop
 80056b0:	3708      	adds	r7, #8
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
	...

080056b8 <HAL_UART_TxCpltCallback>:
		.beta =0
};
/*** Hardware Struct definitions END ***/

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b082      	sub	sp, #8
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
	comm_rosserial.set_tx_cplt();
 80056c0:	4803      	ldr	r0, [pc, #12]	@ (80056d0 <HAL_UART_TxCpltCallback+0x18>)
 80056c2:	f7fd f9a5 	bl	8002a10 <_ZN10SerialComm11set_tx_cpltEv>
}
 80056c6:	bf00      	nop
 80056c8:	3708      	adds	r7, #8
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}
 80056ce:	bf00      	nop
 80056d0:	200001f0 	.word	0x200001f0

080056d4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b082      	sub	sp, #8
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
	comm_rosserial.reset_rbuf();
 80056dc:	4803      	ldr	r0, [pc, #12]	@ (80056ec <HAL_UART_RxCpltCallback+0x18>)
 80056de:	f7fd f9a5 	bl	8002a2c <_ZN10SerialComm10reset_rbufEv>
}
 80056e2:	bf00      	nop
 80056e4:	3708      	adds	r7, #8
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}
 80056ea:	bf00      	nop
 80056ec:	200001f0 	.word	0x200001f0

080056f0 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 80056f0:	b480      	push	{r7}
 80056f2:	b083      	sub	sp, #12
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	4a04      	ldr	r2, [pc, #16]	@ (800570c <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	601a      	str	r2, [r3, #0]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4618      	mov	r0, r3
 8005702:	370c      	adds	r7, #12
 8005704:	46bd      	mov	sp, r7
 8005706:	bc80      	pop	{r7}
 8005708:	4770      	bx	lr
 800570a:	bf00      	nop
 800570c:	0800af88 	.word	0x0800af88

08005710 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 8005710:	b580      	push	{r7, lr}
 8005712:	b082      	sub	sp, #8
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	4618      	mov	r0, r3
 800571c:	f7ff ffe8 	bl	80056f0 <_ZN3ros15NodeHandleBase_C1Ev>
 8005720:	4a43      	ldr	r2, [pc, #268]	@ (8005830 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EEC1Ev+0x120>)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	601a      	str	r2, [r3, #0]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	3304      	adds	r3, #4
 800572a:	4618      	mov	r0, r3
 800572c:	f7fd f992 	bl	8002a54 <_ZN13STM32HardwareC1Ev>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2200      	movs	r2, #0
 8005734:	609a      	str	r2, [r3, #8]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2200      	movs	r2, #0
 800573a:	60da      	str	r2, [r3, #12]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2200      	movs	r2, #0
 8005740:	611a      	str	r2, [r3, #16]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2200      	movs	r2, #0
 8005746:	615a      	str	r2, [r3, #20]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	3318      	adds	r3, #24
 800574c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005750:	2100      	movs	r1, #0
 8005752:	4618      	mov	r0, r3
 8005754:	f005 f8ec 	bl	800a930 <memset>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800575e:	3318      	adds	r3, #24
 8005760:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005764:	2100      	movs	r1, #0
 8005766:	4618      	mov	r0, r3
 8005768:	f005 f8e2 	bl	800a930 <memset>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8005772:	3318      	adds	r3, #24
 8005774:	223c      	movs	r2, #60	@ 0x3c
 8005776:	2100      	movs	r1, #0
 8005778:	4618      	mov	r0, r3
 800577a:	f005 f8d9 	bl	800a930 <memset>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8005784:	3354      	adds	r3, #84	@ 0x54
 8005786:	223c      	movs	r2, #60	@ 0x3c
 8005788:	2100      	movs	r1, #0
 800578a:	4618      	mov	r0, r3
 800578c:	f005 f8d0 	bl	800a930 <memset>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8005796:	461a      	mov	r2, r3
 8005798:	2300      	movs	r3, #0
 800579a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80057a4:	461a      	mov	r2, r3
 80057a6:	2300      	movs	r3, #0
 80057a8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80057b2:	461a      	mov	r2, r3
 80057b4:	2300      	movs	r3, #0
 80057b6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80057c0:	461a      	mov	r2, r3
 80057c2:	2300      	movs	r3, #0
 80057c4:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80057ce:	461a      	mov	r2, r3
 80057d0:	2300      	movs	r3, #0
 80057d2:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80057dc:	2200      	movs	r2, #0
 80057de:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80057e8:	461a      	mov	r2, r3
 80057ea:	2300      	movs	r3, #0
 80057ec:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80057f6:	461a      	mov	r2, r3
 80057f8:	2300      	movs	r3, #0
 80057fa:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8005804:	461a      	mov	r2, r3
 8005806:	2300      	movs	r3, #0
 8005808:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8005812:	2200      	movs	r2, #0
 8005814:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	f503 5302 	add.w	r3, r3, #8320	@ 0x2080
 800581e:	3338      	adds	r3, #56	@ 0x38
 8005820:	4618      	mov	r0, r3
 8005822:	f7fc fccf 	bl	80021c4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	4618      	mov	r0, r3
 800582a:	3708      	adds	r7, #8
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}
 8005830:	0800aecc 	.word	0x0800aecc
 8005834:	00000000 	.word	0x00000000

08005838 <_Z9updateImuv>:
char odom[] = "/odom";
geometry_msgs::TransformStamped t;
tf::TransformBroadcaster broadcaster;

sensor_msgs::Imu updateImu(void)
{
 8005838:	b590      	push	{r4, r7, lr}
 800583a:	b091      	sub	sp, #68	@ 0x44
 800583c:	af04      	add	r7, sp, #16
 800583e:	6078      	str	r0, [r7, #4]
	MPU6050_ReadAccelerometer(&hi2c1, &my_mpu);
 8005840:	49a1      	ldr	r1, [pc, #644]	@ (8005ac8 <_Z9updateImuv+0x290>)
 8005842:	48a2      	ldr	r0, [pc, #648]	@ (8005acc <_Z9updateImuv+0x294>)
 8005844:	f001 fab3 	bl	8006dae <MPU6050_ReadAccelerometer>
	MPU6050_ReadGyroscope(&hi2c1, &my_mpu);
 8005848:	499f      	ldr	r1, [pc, #636]	@ (8005ac8 <_Z9updateImuv+0x290>)
 800584a:	48a0      	ldr	r0, [pc, #640]	@ (8005acc <_Z9updateImuv+0x294>)
 800584c:	f001 fa2e 	bl	8006cac <MPU6050_ReadGyroscope>

	float 	gx = my_mpu.gyro_scaled.x,
 8005850:	4b9d      	ldr	r3, [pc, #628]	@ (8005ac8 <_Z9updateImuv+0x290>)
 8005852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005854:	62fb      	str	r3, [r7, #44]	@ 0x2c
			gy = my_mpu.gyro_scaled.y,
 8005856:	4b9c      	ldr	r3, [pc, #624]	@ (8005ac8 <_Z9updateImuv+0x290>)
 8005858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800585a:	62bb      	str	r3, [r7, #40]	@ 0x28
			gz = my_mpu.gyro_scaled.z,
 800585c:	4b9a      	ldr	r3, [pc, #616]	@ (8005ac8 <_Z9updateImuv+0x290>)
 800585e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005860:	627b      	str	r3, [r7, #36]	@ 0x24
			ax = my_mpu.accel_scaled.x,
 8005862:	4b99      	ldr	r3, [pc, #612]	@ (8005ac8 <_Z9updateImuv+0x290>)
 8005864:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005866:	623b      	str	r3, [r7, #32]
			ay = my_mpu.accel_scaled.y,
 8005868:	4b97      	ldr	r3, [pc, #604]	@ (8005ac8 <_Z9updateImuv+0x290>)
 800586a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800586c:	61fb      	str	r3, [r7, #28]
			az = my_mpu.accel_scaled.z;
 800586e:	4b96      	ldr	r3, [pc, #600]	@ (8005ac8 <_Z9updateImuv+0x290>)
 8005870:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005872:	61bb      	str	r3, [r7, #24]

	MadgwickFilter_Update_IMU(&filter, gx, gy, gz, ax, ay, az);
 8005874:	69bb      	ldr	r3, [r7, #24]
 8005876:	9302      	str	r3, [sp, #8]
 8005878:	69fb      	ldr	r3, [r7, #28]
 800587a:	9301      	str	r3, [sp, #4]
 800587c:	6a3b      	ldr	r3, [r7, #32]
 800587e:	9300      	str	r3, [sp, #0]
 8005880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005882:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005884:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005886:	4892      	ldr	r0, [pc, #584]	@ (8005ad0 <_Z9updateImuv+0x298>)
 8005888:	f7fb fdb8 	bl	80013fc <MadgwickFilter_Update_IMU>
	Quaternion_t quat = filter.q;
 800588c:	4b90      	ldr	r3, [pc, #576]	@ (8005ad0 <_Z9updateImuv+0x298>)
 800588e:	f107 0408 	add.w	r4, r7, #8
 8005892:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005894:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	sensor_msgs::Imu tmp_imu_msgs;
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f7fe fe7f 	bl	800459c <_ZN11sensor_msgs3ImuC1Ev>

    tmp_imu_msgs.angular_velocity.x = gx;
 800589e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80058a0:	f7fa fdc2 	bl	8000428 <__aeabi_f2d>
 80058a4:	4602      	mov	r2, r0
 80058a6:	460b      	mov	r3, r1
 80058a8:	6879      	ldr	r1, [r7, #4]
 80058aa:	e9c1 2324 	strd	r2, r3, [r1, #144]	@ 0x90
    tmp_imu_msgs.angular_velocity.y = gy;
 80058ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80058b0:	f7fa fdba 	bl	8000428 <__aeabi_f2d>
 80058b4:	4602      	mov	r2, r0
 80058b6:	460b      	mov	r3, r1
 80058b8:	6879      	ldr	r1, [r7, #4]
 80058ba:	e9c1 2326 	strd	r2, r3, [r1, #152]	@ 0x98
    tmp_imu_msgs.angular_velocity.z = gz;
 80058be:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80058c0:	f7fa fdb2 	bl	8000428 <__aeabi_f2d>
 80058c4:	4602      	mov	r2, r0
 80058c6:	460b      	mov	r3, r1
 80058c8:	6879      	ldr	r1, [r7, #4]
 80058ca:	e9c1 2328 	strd	r2, r3, [r1, #160]	@ 0xa0

    tmp_imu_msgs.linear_acceleration.x = ax;
 80058ce:	6a38      	ldr	r0, [r7, #32]
 80058d0:	f7fa fdaa 	bl	8000428 <__aeabi_f2d>
 80058d4:	4602      	mov	r2, r0
 80058d6:	460b      	mov	r3, r1
 80058d8:	6879      	ldr	r1, [r7, #4]
 80058da:	e9c1 233e 	strd	r2, r3, [r1, #248]	@ 0xf8
    tmp_imu_msgs.linear_acceleration.y = ay;
 80058de:	69f8      	ldr	r0, [r7, #28]
 80058e0:	f7fa fda2 	bl	8000428 <__aeabi_f2d>
 80058e4:	4602      	mov	r2, r0
 80058e6:	460b      	mov	r3, r1
 80058e8:	6879      	ldr	r1, [r7, #4]
 80058ea:	e9c1 2340 	strd	r2, r3, [r1, #256]	@ 0x100
    tmp_imu_msgs.linear_acceleration.z = az;
 80058ee:	69b8      	ldr	r0, [r7, #24]
 80058f0:	f7fa fd9a 	bl	8000428 <__aeabi_f2d>
 80058f4:	4602      	mov	r2, r0
 80058f6:	460b      	mov	r3, r1
 80058f8:	6879      	ldr	r1, [r7, #4]
 80058fa:	e9c1 2342 	strd	r2, r3, [r1, #264]	@ 0x108

    tmp_imu_msgs.orientation.w = quat.q0;
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	4618      	mov	r0, r3
 8005902:	f7fa fd91 	bl	8000428 <__aeabi_f2d>
 8005906:	4602      	mov	r2, r0
 8005908:	460b      	mov	r3, r1
 800590a:	6879      	ldr	r1, [r7, #4]
 800590c:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    tmp_imu_msgs.orientation.x = quat.q1;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	4618      	mov	r0, r3
 8005914:	f7fa fd88 	bl	8000428 <__aeabi_f2d>
 8005918:	4602      	mov	r2, r0
 800591a:	460b      	mov	r3, r1
 800591c:	6879      	ldr	r1, [r7, #4]
 800591e:	e9c1 2308 	strd	r2, r3, [r1, #32]
    tmp_imu_msgs.orientation.y = quat.q2;
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	4618      	mov	r0, r3
 8005926:	f7fa fd7f 	bl	8000428 <__aeabi_f2d>
 800592a:	4602      	mov	r2, r0
 800592c:	460b      	mov	r3, r1
 800592e:	6879      	ldr	r1, [r7, #4]
 8005930:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    tmp_imu_msgs.orientation.z = quat.q3;
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	4618      	mov	r0, r3
 8005938:	f7fa fd76 	bl	8000428 <__aeabi_f2d>
 800593c:	4602      	mov	r2, r0
 800593e:	460b      	mov	r3, r1
 8005940:	6879      	ldr	r1, [r7, #4]
 8005942:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30

    tmp_imu_msgs.angular_velocity_covariance[1] = 0;
 8005946:	6879      	ldr	r1, [r7, #4]
 8005948:	f04f 0200 	mov.w	r2, #0
 800594c:	f04f 0300 	mov.w	r3, #0
 8005950:	e9c1 232c 	strd	r2, r3, [r1, #176]	@ 0xb0
    tmp_imu_msgs.angular_velocity_covariance[2] = 0;
 8005954:	6879      	ldr	r1, [r7, #4]
 8005956:	f04f 0200 	mov.w	r2, #0
 800595a:	f04f 0300 	mov.w	r3, #0
 800595e:	e9c1 232e 	strd	r2, r3, [r1, #184]	@ 0xb8
    tmp_imu_msgs.angular_velocity_covariance[3] = 0;
 8005962:	6879      	ldr	r1, [r7, #4]
 8005964:	f04f 0200 	mov.w	r2, #0
 8005968:	f04f 0300 	mov.w	r3, #0
 800596c:	e9c1 2330 	strd	r2, r3, [r1, #192]	@ 0xc0
    tmp_imu_msgs.angular_velocity_covariance[4] = 0.02;
 8005970:	6879      	ldr	r1, [r7, #4]
 8005972:	a34f      	add	r3, pc, #316	@ (adr r3, 8005ab0 <_Z9updateImuv+0x278>)
 8005974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005978:	e9c1 2332 	strd	r2, r3, [r1, #200]	@ 0xc8
    tmp_imu_msgs.angular_velocity_covariance[5] = 0;
 800597c:	6879      	ldr	r1, [r7, #4]
 800597e:	f04f 0200 	mov.w	r2, #0
 8005982:	f04f 0300 	mov.w	r3, #0
 8005986:	e9c1 2334 	strd	r2, r3, [r1, #208]	@ 0xd0
    tmp_imu_msgs.angular_velocity_covariance[6] = 0;
 800598a:	6879      	ldr	r1, [r7, #4]
 800598c:	f04f 0200 	mov.w	r2, #0
 8005990:	f04f 0300 	mov.w	r3, #0
 8005994:	e9c1 2336 	strd	r2, r3, [r1, #216]	@ 0xd8
    tmp_imu_msgs.angular_velocity_covariance[7] = 0;
 8005998:	6879      	ldr	r1, [r7, #4]
 800599a:	f04f 0200 	mov.w	r2, #0
 800599e:	f04f 0300 	mov.w	r3, #0
 80059a2:	e9c1 2338 	strd	r2, r3, [r1, #224]	@ 0xe0
    tmp_imu_msgs.angular_velocity_covariance[8] = 0.02;
 80059a6:	6879      	ldr	r1, [r7, #4]
 80059a8:	a341      	add	r3, pc, #260	@ (adr r3, 8005ab0 <_Z9updateImuv+0x278>)
 80059aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ae:	e9c1 233a 	strd	r2, r3, [r1, #232]	@ 0xe8

    tmp_imu_msgs.linear_acceleration_covariance[0] = 0.04;
 80059b2:	6879      	ldr	r1, [r7, #4]
 80059b4:	a340      	add	r3, pc, #256	@ (adr r3, 8005ab8 <_Z9updateImuv+0x280>)
 80059b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ba:	e9c1 2344 	strd	r2, r3, [r1, #272]	@ 0x110
    tmp_imu_msgs.linear_acceleration_covariance[1] = 0;
 80059be:	6879      	ldr	r1, [r7, #4]
 80059c0:	f04f 0200 	mov.w	r2, #0
 80059c4:	f04f 0300 	mov.w	r3, #0
 80059c8:	e9c1 2346 	strd	r2, r3, [r1, #280]	@ 0x118
    tmp_imu_msgs.linear_acceleration_covariance[2] = 0;
 80059cc:	6879      	ldr	r1, [r7, #4]
 80059ce:	f04f 0200 	mov.w	r2, #0
 80059d2:	f04f 0300 	mov.w	r3, #0
 80059d6:	e9c1 2348 	strd	r2, r3, [r1, #288]	@ 0x120
    tmp_imu_msgs.linear_acceleration_covariance[3] = 0;
 80059da:	6879      	ldr	r1, [r7, #4]
 80059dc:	f04f 0200 	mov.w	r2, #0
 80059e0:	f04f 0300 	mov.w	r3, #0
 80059e4:	e9c1 234a 	strd	r2, r3, [r1, #296]	@ 0x128
    tmp_imu_msgs.linear_acceleration_covariance[4] = 0.04;
 80059e8:	6879      	ldr	r1, [r7, #4]
 80059ea:	a333      	add	r3, pc, #204	@ (adr r3, 8005ab8 <_Z9updateImuv+0x280>)
 80059ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059f0:	e9c1 234c 	strd	r2, r3, [r1, #304]	@ 0x130
    tmp_imu_msgs.linear_acceleration_covariance[5] = 0;
 80059f4:	6879      	ldr	r1, [r7, #4]
 80059f6:	f04f 0200 	mov.w	r2, #0
 80059fa:	f04f 0300 	mov.w	r3, #0
 80059fe:	e9c1 234e 	strd	r2, r3, [r1, #312]	@ 0x138
    tmp_imu_msgs.linear_acceleration_covariance[6] = 0;
 8005a02:	6879      	ldr	r1, [r7, #4]
 8005a04:	f04f 0200 	mov.w	r2, #0
 8005a08:	f04f 0300 	mov.w	r3, #0
 8005a0c:	e9c1 2350 	strd	r2, r3, [r1, #320]	@ 0x140
    tmp_imu_msgs.linear_acceleration_covariance[7] = 0;
 8005a10:	6879      	ldr	r1, [r7, #4]
 8005a12:	f04f 0200 	mov.w	r2, #0
 8005a16:	f04f 0300 	mov.w	r3, #0
 8005a1a:	e9c1 2352 	strd	r2, r3, [r1, #328]	@ 0x148
    tmp_imu_msgs.linear_acceleration_covariance[8] = 0.04;
 8005a1e:	6879      	ldr	r1, [r7, #4]
 8005a20:	a325      	add	r3, pc, #148	@ (adr r3, 8005ab8 <_Z9updateImuv+0x280>)
 8005a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a26:	e9c1 2354 	strd	r2, r3, [r1, #336]	@ 0x150

    tmp_imu_msgs.orientation_covariance[0] = 0.0025;
 8005a2a:	6879      	ldr	r1, [r7, #4]
 8005a2c:	a324      	add	r3, pc, #144	@ (adr r3, 8005ac0 <_Z9updateImuv+0x288>)
 8005a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a32:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
    tmp_imu_msgs.orientation_covariance[1] = 0;
 8005a36:	6879      	ldr	r1, [r7, #4]
 8005a38:	f04f 0200 	mov.w	r2, #0
 8005a3c:	f04f 0300 	mov.w	r3, #0
 8005a40:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
    tmp_imu_msgs.orientation_covariance[2] = 0;
 8005a44:	6879      	ldr	r1, [r7, #4]
 8005a46:	f04f 0200 	mov.w	r2, #0
 8005a4a:	f04f 0300 	mov.w	r3, #0
 8005a4e:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
    tmp_imu_msgs.orientation_covariance[3] = 0;
 8005a52:	6879      	ldr	r1, [r7, #4]
 8005a54:	f04f 0200 	mov.w	r2, #0
 8005a58:	f04f 0300 	mov.w	r3, #0
 8005a5c:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
    tmp_imu_msgs.orientation_covariance[4] = 0.0025;
 8005a60:	6879      	ldr	r1, [r7, #4]
 8005a62:	a317      	add	r3, pc, #92	@ (adr r3, 8005ac0 <_Z9updateImuv+0x288>)
 8005a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a68:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
    tmp_imu_msgs.orientation_covariance[5] = 0;
 8005a6c:	6879      	ldr	r1, [r7, #4]
 8005a6e:	f04f 0200 	mov.w	r2, #0
 8005a72:	f04f 0300 	mov.w	r3, #0
 8005a76:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
    tmp_imu_msgs.orientation_covariance[6] = 0;
 8005a7a:	6879      	ldr	r1, [r7, #4]
 8005a7c:	f04f 0200 	mov.w	r2, #0
 8005a80:	f04f 0300 	mov.w	r3, #0
 8005a84:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70
    tmp_imu_msgs.orientation_covariance[7] = 0;
 8005a88:	6879      	ldr	r1, [r7, #4]
 8005a8a:	f04f 0200 	mov.w	r2, #0
 8005a8e:	f04f 0300 	mov.w	r3, #0
 8005a92:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78
    tmp_imu_msgs.orientation_covariance[8] = 0.0025;
 8005a96:	6879      	ldr	r1, [r7, #4]
 8005a98:	a309      	add	r3, pc, #36	@ (adr r3, 8005ac0 <_Z9updateImuv+0x288>)
 8005a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a9e:	e9c1 2320 	strd	r2, r3, [r1, #128]	@ 0x80

    return tmp_imu_msgs;
 8005aa2:	bf00      	nop
}
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	3734      	adds	r7, #52	@ 0x34
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd90      	pop	{r4, r7, pc}
 8005aac:	f3af 8000 	nop.w
 8005ab0:	47ae147b 	.word	0x47ae147b
 8005ab4:	3f947ae1 	.word	0x3f947ae1
 8005ab8:	47ae147b 	.word	0x47ae147b
 8005abc:	3fa47ae1 	.word	0x3fa47ae1
 8005ac0:	47ae147b 	.word	0x47ae147b
 8005ac4:	3f647ae1 	.word	0x3f647ae1
 8005ac8:	20000000 	.word	0x20000000
 8005acc:	200000cc 	.word	0x200000cc
 8005ad0:	200021fc 	.word	0x200021fc

08005ad4 <_ZN3ros3MsgaSEOS0_>:
 8005ad4:	b480      	push	{r7}
 8005ad6:	b083      	sub	sp, #12
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	6039      	str	r1, [r7, #0]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	370c      	adds	r7, #12
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bc80      	pop	{r7}
 8005ae8:	4770      	bx	lr

08005aea <_ZN8std_msgs6HeaderaSEOS0_>:
  class Header : public ros::Msg
 8005aea:	b580      	push	{r7, lr}
 8005aec:	b082      	sub	sp, #8
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	6078      	str	r0, [r7, #4]
 8005af2:	6039      	str	r1, [r7, #0]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	683a      	ldr	r2, [r7, #0]
 8005af8:	4611      	mov	r1, r2
 8005afa:	4618      	mov	r0, r3
 8005afc:	f7ff ffea 	bl	8005ad4 <_ZN3ros3MsgaSEOS0_>
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	685a      	ldr	r2, [r3, #4]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	605a      	str	r2, [r3, #4]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	683a      	ldr	r2, [r7, #0]
 8005b0c:	3308      	adds	r3, #8
 8005b0e:	3208      	adds	r2, #8
 8005b10:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005b14:	e883 0003 	stmia.w	r3, {r0, r1}
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	691a      	ldr	r2, [r3, #16]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	611a      	str	r2, [r3, #16]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	4618      	mov	r0, r3
 8005b24:	3708      	adds	r7, #8
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}

08005b2a <_ZN13geometry_msgs10QuaternionaSEOS0_>:
  class Quaternion : public ros::Msg
 8005b2a:	b580      	push	{r7, lr}
 8005b2c:	b082      	sub	sp, #8
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	6078      	str	r0, [r7, #4]
 8005b32:	6039      	str	r1, [r7, #0]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	683a      	ldr	r2, [r7, #0]
 8005b38:	4611      	mov	r1, r2
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f7ff ffca 	bl	8005ad4 <_ZN3ros3MsgaSEOS0_>
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8005b46:	6879      	ldr	r1, [r7, #4]
 8005b48:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8005b52:	6879      	ldr	r1, [r7, #4]
 8005b54:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8005b5e:	6879      	ldr	r1, [r7, #4]
 8005b60:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005b6a:	6879      	ldr	r1, [r7, #4]
 8005b6c:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	4618      	mov	r0, r3
 8005b74:	3708      	adds	r7, #8
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}

08005b7a <_ZN13geometry_msgs7Vector3aSEOS0_>:
  class Vector3 : public ros::Msg
 8005b7a:	b580      	push	{r7, lr}
 8005b7c:	b082      	sub	sp, #8
 8005b7e:	af00      	add	r7, sp, #0
 8005b80:	6078      	str	r0, [r7, #4]
 8005b82:	6039      	str	r1, [r7, #0]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	683a      	ldr	r2, [r7, #0]
 8005b88:	4611      	mov	r1, r2
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f7ff ffa2 	bl	8005ad4 <_ZN3ros3MsgaSEOS0_>
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8005b96:	6879      	ldr	r1, [r7, #4]
 8005b98:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8005ba2:	6879      	ldr	r1, [r7, #4]
 8005ba4:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8005bae:	6879      	ldr	r1, [r7, #4]
 8005bb0:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3708      	adds	r7, #8
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}

08005bbe <_ZN11sensor_msgs3ImuaSEOS0_>:
  class Imu : public ros::Msg
 8005bbe:	b5b0      	push	{r4, r5, r7, lr}
 8005bc0:	b082      	sub	sp, #8
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	6078      	str	r0, [r7, #4]
 8005bc6:	6039      	str	r1, [r7, #0]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	683a      	ldr	r2, [r7, #0]
 8005bcc:	4611      	mov	r1, r2
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f7ff ff80 	bl	8005ad4 <_ZN3ros3MsgaSEOS0_>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	1d1a      	adds	r2, r3, #4
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	3304      	adds	r3, #4
 8005bdc:	4619      	mov	r1, r3
 8005bde:	4610      	mov	r0, r2
 8005be0:	f7ff ff83 	bl	8005aea <_ZN8std_msgs6HeaderaSEOS0_>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f103 0218 	add.w	r2, r3, #24
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	3318      	adds	r3, #24
 8005bee:	4619      	mov	r1, r3
 8005bf0:	4610      	mov	r0, r2
 8005bf2:	f7ff ff9a 	bl	8005b2a <_ZN13geometry_msgs10QuaternionaSEOS0_>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8005bfc:	2208      	movs	r2, #8
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	3340      	adds	r3, #64	@ 0x40
 8005c02:	e006      	b.n	8005c12 <_ZN11sensor_msgs3ImuaSEOS0_+0x54>
 8005c04:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005c08:	e9c1 4500 	strd	r4, r5, [r1]
 8005c0c:	3a01      	subs	r2, #1
 8005c0e:	3108      	adds	r1, #8
 8005c10:	3308      	adds	r3, #8
 8005c12:	2a00      	cmp	r2, #0
 8005c14:	daf6      	bge.n	8005c04 <_ZN11sensor_msgs3ImuaSEOS0_+0x46>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f103 0288 	add.w	r2, r3, #136	@ 0x88
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	3388      	adds	r3, #136	@ 0x88
 8005c20:	4619      	mov	r1, r3
 8005c22:	4610      	mov	r0, r2
 8005c24:	f7ff ffa9 	bl	8005b7a <_ZN13geometry_msgs7Vector3aSEOS0_>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f103 01a8 	add.w	r1, r3, #168	@ 0xa8
 8005c2e:	2208      	movs	r2, #8
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	33a8      	adds	r3, #168	@ 0xa8
 8005c34:	e006      	b.n	8005c44 <_ZN11sensor_msgs3ImuaSEOS0_+0x86>
 8005c36:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005c3a:	e9c1 4500 	strd	r4, r5, [r1]
 8005c3e:	3a01      	subs	r2, #1
 8005c40:	3108      	adds	r1, #8
 8005c42:	3308      	adds	r3, #8
 8005c44:	2a00      	cmp	r2, #0
 8005c46:	daf6      	bge.n	8005c36 <_ZN11sensor_msgs3ImuaSEOS0_+0x78>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f103 02f0 	add.w	r2, r3, #240	@ 0xf0
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	33f0      	adds	r3, #240	@ 0xf0
 8005c52:	4619      	mov	r1, r3
 8005c54:	4610      	mov	r0, r2
 8005c56:	f7ff ff90 	bl	8005b7a <_ZN13geometry_msgs7Vector3aSEOS0_>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f503 7188 	add.w	r1, r3, #272	@ 0x110
 8005c60:	2208      	movs	r2, #8
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8005c68:	e006      	b.n	8005c78 <_ZN11sensor_msgs3ImuaSEOS0_+0xba>
 8005c6a:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005c6e:	e9c1 4500 	strd	r4, r5, [r1]
 8005c72:	3a01      	subs	r2, #1
 8005c74:	3108      	adds	r1, #8
 8005c76:	3308      	adds	r3, #8
 8005c78:	2a00      	cmp	r2, #0
 8005c7a:	daf6      	bge.n	8005c6a <_ZN11sensor_msgs3ImuaSEOS0_+0xac>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3708      	adds	r7, #8
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005c88 <_Z10publishImuv>:

void publishImu(void)
{
 8005c88:	b590      	push	{r4, r7, lr}
 8005c8a:	b0d9      	sub	sp, #356	@ 0x164
 8005c8c:	af00      	add	r7, sp, #0
	imu_msg = updateImu();
 8005c8e:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8005c92:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8005c96:	4618      	mov	r0, r3
 8005c98:	f7ff fdce 	bl	8005838 <_Z9updateImuv>
 8005c9c:	f107 0308 	add.w	r3, r7, #8
 8005ca0:	4619      	mov	r1, r3
 8005ca2:	480f      	ldr	r0, [pc, #60]	@ (8005ce0 <_Z10publishImuv+0x58>)
 8005ca4:	f7ff ff8b 	bl	8005bbe <_ZN11sensor_msgs3ImuaSEOS0_>

	imu_msg.header.stamp = nh.now();
 8005ca8:	4c0d      	ldr	r4, [pc, #52]	@ (8005ce0 <_Z10publishImuv+0x58>)
 8005caa:	463b      	mov	r3, r7
 8005cac:	490d      	ldr	r1, [pc, #52]	@ (8005ce4 <_Z10publishImuv+0x5c>)
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f000 f8ee 	bl	8005e90 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE3nowEv>
 8005cb4:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8005cb8:	f5a3 72b0 	sub.w	r2, r3, #352	@ 0x160
 8005cbc:	f104 030c 	add.w	r3, r4, #12
 8005cc0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005cc4:	e883 0003 	stmia.w	r3, {r0, r1}
	imu_msg.header.frame_id = "/imu";
 8005cc8:	4b05      	ldr	r3, [pc, #20]	@ (8005ce0 <_Z10publishImuv+0x58>)
 8005cca:	4a07      	ldr	r2, [pc, #28]	@ (8005ce8 <_Z10publishImuv+0x60>)
 8005ccc:	615a      	str	r2, [r3, #20]

	/* Publish IMU messages */
	pub_imu.publish(&imu_msg);
 8005cce:	4904      	ldr	r1, [pc, #16]	@ (8005ce0 <_Z10publishImuv+0x58>)
 8005cd0:	4806      	ldr	r0, [pc, #24]	@ (8005cec <_Z10publishImuv+0x64>)
 8005cd2:	f7fc fd55 	bl	8002780 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
}
 8005cd6:	bf00      	nop
 8005cd8:	f507 77b2 	add.w	r7, r7, #356	@ 0x164
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd90      	pop	{r4, r7, pc}
 8005ce0:	200042f8 	.word	0x200042f8
 8005ce4:	20002214 	.word	0x20002214
 8005ce8:	0800ae58 	.word	0x0800ae58
 8005cec:	20004450 	.word	0x20004450

08005cf0 <setup>:

void setup()
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b084      	sub	sp, #16
 8005cf4:	af00      	add	r7, sp, #0
	MPU6050_Handle_t mpu_handle = {
 8005cf6:	2307      	movs	r3, #7
 8005cf8:	733b      	strb	r3, [r7, #12]
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	737b      	strb	r3, [r7, #13]
 8005cfe:	2300      	movs	r3, #0
 8005d00:	73bb      	strb	r3, [r7, #14]
			.rate_div = Rate_1KHz_Div,
			.gyro_range = Gyro_Range_250s,
			.accel_range = Accel_Range_2g
	};
	while (MPU6050_Init(&hi2c1, &my_mpu, mpu_handle, 0) != STATUS_OK);
 8005d02:	bf00      	nop
 8005d04:	2300      	movs	r3, #0
 8005d06:	68fa      	ldr	r2, [r7, #12]
 8005d08:	491a      	ldr	r1, [pc, #104]	@ (8005d74 <setup+0x84>)
 8005d0a:	481b      	ldr	r0, [pc, #108]	@ (8005d78 <setup+0x88>)
 8005d0c:	f000 fe52 	bl	80069b4 <MPU6050_Init>
 8005d10:	4603      	mov	r3, r0
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	bf14      	ite	ne
 8005d16:	2301      	movne	r3, #1
 8005d18:	2300      	moveq	r3, #0
 8005d1a:	b2db      	uxtb	r3, r3
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d1f1      	bne.n	8005d04 <setup+0x14>

	MadgwickFilter_Handle_t filter_handle = {
 8005d20:	4a16      	ldr	r2, [pc, #88]	@ (8005d7c <setup+0x8c>)
 8005d22:	1d3b      	adds	r3, r7, #4
 8005d24:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005d28:	e883 0003 	stmia.w	r3, {r0, r1}
			.beta = BETA,
			.sample_rate = DELTA_T
	};
	while (MadgwickFilter_Init(&filter, filter_handle) != STATUS_OK);
 8005d2c:	bf00      	nop
 8005d2e:	1d3b      	adds	r3, r7, #4
 8005d30:	e893 0006 	ldmia.w	r3, {r1, r2}
 8005d34:	4812      	ldr	r0, [pc, #72]	@ (8005d80 <setup+0x90>)
 8005d36:	f7fb fb1e 	bl	8001376 <MadgwickFilter_Init>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	bf14      	ite	ne
 8005d40:	2301      	movne	r3, #1
 8005d42:	2300      	moveq	r3, #0
 8005d44:	b2db      	uxtb	r3, r3
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d1f1      	bne.n	8005d2e <setup+0x3e>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005d50:	480c      	ldr	r0, [pc, #48]	@ (8005d84 <setup+0x94>)
 8005d52:	f002 f859 	bl	8007e08 <HAL_GPIO_WritePin>
	nh.initNode();
 8005d56:	480c      	ldr	r0, [pc, #48]	@ (8005d88 <setup+0x98>)
 8005d58:	f000 f8d4 	bl	8005f04 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8initNodeEv>
	broadcaster.init(nh);
 8005d5c:	490a      	ldr	r1, [pc, #40]	@ (8005d88 <setup+0x98>)
 8005d5e:	480b      	ldr	r0, [pc, #44]	@ (8005d8c <setup+0x9c>)
 8005d60:	f7ff fc9a 	bl	8005698 <_ZN2tf20TransformBroadcaster4initERN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EEE>
	nh.advertise(pub_imu);
 8005d64:	490a      	ldr	r1, [pc, #40]	@ (8005d90 <setup+0xa0>)
 8005d66:	4808      	ldr	r0, [pc, #32]	@ (8005d88 <setup+0x98>)
 8005d68:	f000 f865 	bl	8005e36 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE9advertiseERNS_9PublisherE>
}
 8005d6c:	bf00      	nop
 8005d6e:	3710      	adds	r7, #16
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}
 8005d74:	20000000 	.word	0x20000000
 8005d78:	200000cc 	.word	0x200000cc
 8005d7c:	0800ae60 	.word	0x0800ae60
 8005d80:	200021fc 	.word	0x200021fc
 8005d84:	40011000 	.word	0x40011000
 8005d88:	20002214 	.word	0x20002214
 8005d8c:	200044d8 	.word	0x200044d8
 8005d90:	20004450 	.word	0x20004450

08005d94 <loop>:

void loop()
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	af00      	add	r7, sp, #0

	publishImu();
 8005d98:	f7ff ff76 	bl	8005c88 <_Z10publishImuv>

	nh.spinOnce();
 8005d9c:	4803      	ldr	r0, [pc, #12]	@ (8005dac <loop+0x18>)
 8005d9e:	f000 f8da 	bl	8005f56 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv>

	HAL_Delay(100);
 8005da2:	2064      	movs	r0, #100	@ 0x64
 8005da4:	f001 fad8 	bl	8007358 <HAL_Delay>
}
 8005da8:	bf00      	nop
 8005daa:	bd80      	pop	{r7, pc}
 8005dac:	20002214 	.word	0x20002214

08005db0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8005db0:	b480      	push	{r7}
 8005db2:	b085      	sub	sp, #20
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8005dba:	2300      	movs	r3, #0
 8005dbc:	60fb      	str	r3, [r7, #12]
 8005dbe:	e00c      	b.n	8005dda <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x2a>
      arr[i] = (var >> (8 * i));
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	00db      	lsls	r3, r3, #3
 8005dc4:	683a      	ldr	r2, [r7, #0]
 8005dc6:	fa22 f103 	lsr.w	r1, r2, r3
 8005dca:	687a      	ldr	r2, [r7, #4]
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	4413      	add	r3, r2
 8005dd0:	b2ca      	uxtb	r2, r1
 8005dd2:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	3301      	adds	r3, #1
 8005dd8:	60fb      	str	r3, [r7, #12]
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2b03      	cmp	r3, #3
 8005dde:	d9ef      	bls.n	8005dc0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x10>
  }
 8005de0:	bf00      	nop
 8005de2:	bf00      	nop
 8005de4:	3714      	adds	r7, #20
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bc80      	pop	{r7}
 8005dea:	4770      	bx	lr

08005dec <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8005dec:	b480      	push	{r7}
 8005dee:	b085      	sub	sp, #20
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	60fb      	str	r3, [r7, #12]
 8005e00:	e010      	b.n	8005e24 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x38>
      var |= (arr[i] << (8 * i));
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	6839      	ldr	r1, [r7, #0]
 8005e08:	68fa      	ldr	r2, [r7, #12]
 8005e0a:	440a      	add	r2, r1
 8005e0c:	7812      	ldrb	r2, [r2, #0]
 8005e0e:	4611      	mov	r1, r2
 8005e10:	68fa      	ldr	r2, [r7, #12]
 8005e12:	00d2      	lsls	r2, r2, #3
 8005e14:	fa01 f202 	lsl.w	r2, r1, r2
 8005e18:	431a      	orrs	r2, r3
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	3301      	adds	r3, #1
 8005e22:	60fb      	str	r3, [r7, #12]
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2b03      	cmp	r3, #3
 8005e28:	d9eb      	bls.n	8005e02 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x16>
  }
 8005e2a:	bf00      	nop
 8005e2c:	bf00      	nop
 8005e2e:	3714      	adds	r7, #20
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bc80      	pop	{r7}
 8005e34:	4770      	bx	lr

08005e36 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 8005e36:	b480      	push	{r7}
 8005e38:	b085      	sub	sp, #20
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	6078      	str	r0, [r7, #4]
 8005e3e:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8005e40:	2300      	movs	r3, #0
 8005e42:	60fb      	str	r3, [r7, #12]
 8005e44:	e01b      	b.n	8005e7e <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE9advertiseERNS_9PublisherE+0x48>
    {
      if (publishers[i] == 0) // empty slot
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	68fa      	ldr	r2, [r7, #12]
 8005e4a:	f602 0206 	addw	r2, r2, #2054	@ 0x806
 8005e4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d110      	bne.n	8005e78 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE9advertiseERNS_9PublisherE+0x42>
      {
        publishers[i] = &p;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	68fa      	ldr	r2, [r7, #12]
 8005e5a:	f602 0206 	addw	r2, r2, #2054	@ 0x806
 8005e5e:	6839      	ldr	r1, [r7, #0]
 8005e60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f103 0273 	add.w	r2, r3, #115	@ 0x73
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8005e6e:	687a      	ldr	r2, [r7, #4]
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	60da      	str	r2, [r3, #12]
        return true;
 8005e74:	2301      	movs	r3, #1
 8005e76:	e006      	b.n	8005e86 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE9advertiseERNS_9PublisherE+0x50>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	3301      	adds	r3, #1
 8005e7c:	60fb      	str	r3, [r7, #12]
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2b0e      	cmp	r3, #14
 8005e82:	dde0      	ble.n	8005e46 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE9advertiseERNS_9PublisherE+0x10>
      }
    }
    return false;
 8005e84:	2300      	movs	r3, #0
  }
 8005e86:	4618      	mov	r0, r3
 8005e88:	3714      	adds	r7, #20
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bc80      	pop	{r7}
 8005e8e:	4770      	bx	lr

08005e90 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE3nowEv>:
  Time now()
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b084      	sub	sp, #16
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	3304      	adds	r3, #4
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f7fc fe14 	bl	8002acc <_ZN13STM32Hardware4timeEv>
 8005ea4:	60f8      	str	r0, [r7, #12]
    Time current_time;
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f7fb fe16 	bl	8001ad8 <_ZN3ros4TimeC1Ev>
    current_time.sec = ms / 1000 + sec_offset;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	4a13      	ldr	r2, [pc, #76]	@ (8005efc <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE3nowEv+0x6c>)
 8005eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8005eb4:	099a      	lsrs	r2, r3, #6
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	68db      	ldr	r3, [r3, #12]
 8005eba:	441a      	add	r2, r3
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	601a      	str	r2, [r3, #0]
    current_time.nsec = (ms % 1000) * 1000000UL + nsec_offset;
 8005ec0:	68fa      	ldr	r2, [r7, #12]
 8005ec2:	4b0e      	ldr	r3, [pc, #56]	@ (8005efc <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE3nowEv+0x6c>)
 8005ec4:	fba3 1302 	umull	r1, r3, r3, r2
 8005ec8:	099b      	lsrs	r3, r3, #6
 8005eca:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8005ece:	fb01 f303 	mul.w	r3, r1, r3
 8005ed2:	1ad3      	subs	r3, r2, r3
 8005ed4:	4a0a      	ldr	r2, [pc, #40]	@ (8005f00 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE3nowEv+0x70>)
 8005ed6:	fb03 f202 	mul.w	r2, r3, r2
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	691b      	ldr	r3, [r3, #16]
 8005ede:	441a      	add	r2, r3
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	605a      	str	r2, [r3, #4]
    normalizeSecNSec(current_time.sec, current_time.nsec);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	3304      	adds	r3, #4
 8005ee8:	4619      	mov	r1, r3
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f001 f980 	bl	80071f0 <_ZN3ros16normalizeSecNSecERmS0_>
    return current_time;
 8005ef0:	bf00      	nop
  }
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	3710      	adds	r7, #16
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}
 8005efa:	bf00      	nop
 8005efc:	10624dd3 	.word	0x10624dd3
 8005f00:	000f4240 	.word	0x000f4240

08005f04 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8initNodeEv>:
  void initNode()
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b082      	sub	sp, #8
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
    hardware_.init();
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	3304      	adds	r3, #4
 8005f10:	4618      	mov	r0, r3
 8005f12:	f7fc fdaf 	bl	8002a74 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8005f1c:	461a      	mov	r2, r3
 8005f1e:	2300      	movs	r3, #0
 8005f20:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    bytes_ = 0;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8005f2a:	461a      	mov	r2, r3
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    index_ = 0;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8005f38:	461a      	mov	r2, r3
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
    topic_ = 0;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8005f46:	461a      	mov	r2, r3
 8005f48:	2300      	movs	r3, #0
 8005f4a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
  };
 8005f4e:	bf00      	nop
 8005f50:	3708      	adds	r7, #8
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}

08005f56 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv>:
  virtual int spinOnce() override
 8005f56:	b580      	push	{r7, lr}
 8005f58:	b084      	sub	sp, #16
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	3304      	adds	r3, #4
 8005f62:	4618      	mov	r0, r3
 8005f64:	f7fc fdb2 	bl	8002acc <_ZN13STM32Hardware4timeEv>
 8005f68:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8005f70:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005f74:	68fa      	ldr	r2, [r7, #12]
 8005f76:	1ad3      	subs	r3, r2, r3
 8005f78:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d905      	bls.n	8005f8c <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x36>
      configured_ = false;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8005f86:	2200      	movs	r2, #0
 8005f88:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
    if (mode_ != MODE_FIRST_FF)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8005f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d00e      	beq.n	8005fb8 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x62>
      if (c_time > last_msg_timeout_time)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8005fa0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005fa4:	68fa      	ldr	r2, [r7, #12]
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d906      	bls.n	8005fb8 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8005fb0:	461a      	mov	r2, r3
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      if (spin_timeout_ > 0)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	695b      	ldr	r3, [r3, #20]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d013      	beq.n	8005fe8 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x92>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	3304      	adds	r3, #4
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f7fc fd81 	bl	8002acc <_ZN13STM32Hardware4timeEv>
 8005fca:	4602      	mov	r2, r0
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	1ad2      	subs	r2, r2, r3
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	695b      	ldr	r3, [r3, #20]
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	bf8c      	ite	hi
 8005fd8:	2301      	movhi	r3, #1
 8005fda:	2300      	movls	r3, #0
 8005fdc:	b2db      	uxtb	r3, r3
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d002      	beq.n	8005fe8 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x92>
          return SPIN_TIMEOUT;
 8005fe2:	f06f 0301 	mvn.w	r3, #1
 8005fe6:	e21d      	b.n	8006424 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x4ce>
      int data = hardware_.read();
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	3304      	adds	r3, #4
 8005fec:	4618      	mov	r0, r3
 8005fee:	f7fc fd4e 	bl	8002a8e <_ZN13STM32Hardware4readEv>
 8005ff2:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	f2c0 81f6 	blt.w	80063e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x492>
      checksum_ += data;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006002:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	4413      	add	r3, r2
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8006010:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800601a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800601e:	2b07      	cmp	r3, #7
 8006020:	d12a      	bne.n	8006078 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x122>
        message_in[index_++] = data;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006028:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800602c:	1c5a      	adds	r2, r3, #1
 800602e:	6879      	ldr	r1, [r7, #4]
 8006030:	f501 5100 	add.w	r1, r1, #8192	@ 0x2000
 8006034:	f8c1 209c 	str.w	r2, [r1, #156]	@ 0x9c
 8006038:	68ba      	ldr	r2, [r7, #8]
 800603a:	b2d1      	uxtb	r1, r2
 800603c:	687a      	ldr	r2, [r7, #4]
 800603e:	4413      	add	r3, r2
 8006040:	460a      	mov	r2, r1
 8006042:	761a      	strb	r2, [r3, #24]
        bytes_--;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800604a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800604e:	3b01      	subs	r3, #1
 8006050:	687a      	ldr	r2, [r7, #4]
 8006052:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8006056:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006060:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006064:	2b00      	cmp	r3, #0
 8006066:	d1a7      	bne.n	8005fb8 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800606e:	461a      	mov	r2, r3
 8006070:	2308      	movs	r3, #8
 8006072:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006076:	e79f      	b.n	8005fb8 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x62>
      else if (mode_ == MODE_FIRST_FF)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800607e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006082:	2b00      	cmp	r3, #0
 8006084:	d130      	bne.n	80060e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x192>
        if (data == 0xff)
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	2bff      	cmp	r3, #255	@ 0xff
 800608a:	d112      	bne.n	80060b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x15c>
          mode_++;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006092:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006096:	3301      	adds	r3, #1
 8006098:	687a      	ldr	r2, [r7, #4]
 800609a:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800609e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	3314      	adds	r3, #20
 80060a6:	687a      	ldr	r2, [r7, #4]
 80060a8:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 80060ac:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0
 80060b0:	e782      	b.n	8005fb8 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x62>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	3304      	adds	r3, #4
 80060b6:	4618      	mov	r0, r3
 80060b8:	f7fc fd08 	bl	8002acc <_ZN13STM32Hardware4timeEv>
 80060bc:	4602      	mov	r2, r0
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	1ad3      	subs	r3, r2, r3
 80060c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060c6:	4293      	cmp	r3, r2
 80060c8:	bf8c      	ite	hi
 80060ca:	2301      	movhi	r3, #1
 80060cc:	2300      	movls	r3, #0
 80060ce:	b2db      	uxtb	r3, r3
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	f43f af71 	beq.w	8005fb8 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x62>
          configured_ = false;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80060dc:	2200      	movs	r2, #0
 80060de:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
          return SPIN_TIMEOUT;
 80060e2:	f06f 0301 	mvn.w	r3, #1
 80060e6:	e19d      	b.n	8006424 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x4ce>
      else if (mode_ == MODE_PROTOCOL_VER)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80060ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060f2:	2b01      	cmp	r3, #1
 80060f4:	d121      	bne.n	800613a <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x1e4>
        if (data == PROTOCOL_VER)
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	2bfe      	cmp	r3, #254	@ 0xfe
 80060fa:	d10b      	bne.n	8006114 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x1be>
          mode_++;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006102:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006106:	3301      	adds	r3, #1
 8006108:	687a      	ldr	r2, [r7, #4]
 800610a:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800610e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006112:	e751      	b.n	8005fb8 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800611a:	461a      	mov	r2, r3
 800611c:	2300      	movs	r3, #0
 800611e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
          if (configured_ == false)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006128:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800612c:	2b00      	cmp	r3, #0
 800612e:	f47f af43 	bne.w	8005fb8 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x62>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f000 f97a 	bl	800642c <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE15requestSyncTimeEv>
 8006138:	e73e      	b.n	8005fb8 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006140:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006144:	2b02      	cmp	r3, #2
 8006146:	d120      	bne.n	800618a <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x234>
        bytes_ = data;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800614e:	461a      	mov	r2, r3
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        index_ = 0;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800615c:	461a      	mov	r2, r3
 800615e:	2300      	movs	r3, #0
 8006160:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
        mode_++;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800616a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800616e:	3301      	adds	r3, #1
 8006170:	687a      	ldr	r2, [r7, #4]
 8006172:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8006176:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        checksum_ = data;               /* first byte for calculating size checksum */
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006180:	461a      	mov	r2, r3
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
 8006188:	e716      	b.n	8005fb8 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006190:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006194:	2b03      	cmp	r3, #3
 8006196:	d118      	bne.n	80061ca <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x274>
        bytes_ += data << 8;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800619e:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	021b      	lsls	r3, r3, #8
 80061a6:	4413      	add	r3, r2
 80061a8:	687a      	ldr	r2, [r7, #4]
 80061aa:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 80061ae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        mode_++;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80061b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061bc:	3301      	adds	r3, #1
 80061be:	687a      	ldr	r2, [r7, #4]
 80061c0:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 80061c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80061c8:	e6f6      	b.n	8005fb8 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80061d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061d4:	2b04      	cmp	r3, #4
 80061d6:	d11f      	bne.n	8006218 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x2c2>
        if ((checksum_ % 256) == 255)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80061de:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80061e2:	425a      	negs	r2, r3
 80061e4:	b2db      	uxtb	r3, r3
 80061e6:	b2d2      	uxtb	r2, r2
 80061e8:	bf58      	it	pl
 80061ea:	4253      	negpl	r3, r2
 80061ec:	2bff      	cmp	r3, #255	@ 0xff
 80061ee:	d10b      	bne.n	8006208 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x2b2>
          mode_++;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80061f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061fa:	3301      	adds	r3, #1
 80061fc:	687a      	ldr	r2, [r7, #4]
 80061fe:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8006202:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006206:	e6d7      	b.n	8005fb8 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800620e:	461a      	mov	r2, r3
 8006210:	2300      	movs	r3, #0
 8006212:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006216:	e6cf      	b.n	8005fb8 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800621e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006222:	2b05      	cmp	r3, #5
 8006224:	d119      	bne.n	800625a <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x304>
        topic_ = data;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800622c:	461a      	mov	r2, r3
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
        mode_++;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800623a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800623e:	3301      	adds	r3, #1
 8006240:	687a      	ldr	r2, [r7, #4]
 8006242:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8006246:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        checksum_ = data;               /* first byte included in checksum */
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006250:	461a      	mov	r2, r3
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
 8006258:	e6ae      	b.n	8005fb8 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006260:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006264:	2b06      	cmp	r3, #6
 8006266:	d123      	bne.n	80062b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x35a>
        topic_ += data << 8;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800626e:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	021b      	lsls	r3, r3, #8
 8006276:	4413      	add	r3, r2
 8006278:	687a      	ldr	r2, [r7, #4]
 800627a:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800627e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
        mode_ = MODE_MESSAGE;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006288:	461a      	mov	r2, r3
 800628a:	2307      	movs	r3, #7
 800628c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        if (bytes_ == 0)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006296:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800629a:	2b00      	cmp	r3, #0
 800629c:	f47f ae8c 	bne.w	8005fb8 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80062a6:	461a      	mov	r2, r3
 80062a8:	2308      	movs	r3, #8
 80062aa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80062ae:	e683      	b.n	8005fb8 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x62>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80062b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062ba:	2b08      	cmp	r3, #8
 80062bc:	f47f ae7c 	bne.w	8005fb8 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80062c6:	461a      	mov	r2, r3
 80062c8:	2300      	movs	r3, #0
 80062ca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        if ((checksum_ % 256) == 255)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80062d4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80062d8:	425a      	negs	r2, r3
 80062da:	b2db      	uxtb	r3, r3
 80062dc:	b2d2      	uxtb	r2, r2
 80062de:	bf58      	it	pl
 80062e0:	4253      	negpl	r3, r2
 80062e2:	2bff      	cmp	r3, #255	@ 0xff
 80062e4:	f47f ae68 	bne.w	8005fb8 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x62>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80062ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d116      	bne.n	8006324 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x3ce>
            requestSyncTime();
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f000 f898 	bl	800642c <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE15requestSyncTimeEv>
            negotiateTopics();
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f000 f8b2 	bl	8006466 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006308:	461a      	mov	r2, r3
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
            last_sync_receive_time = c_time;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006316:	461a      	mov	r2, r3
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac
            return SPIN_ERR;
 800631e:	f04f 33ff 	mov.w	r3, #4294967295
 8006322:	e07f      	b.n	8006424 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x4ce>
          else if (topic_ == TopicInfo::ID_TIME)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800632a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800632e:	2b0a      	cmp	r3, #10
 8006330:	d106      	bne.n	8006340 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x3ea>
            syncTime(message_in);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	3318      	adds	r3, #24
 8006336:	4619      	mov	r1, r3
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f000 f977 	bl	800662c <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8syncTimeEPh>
 800633e:	e63b      	b.n	8005fb8 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006346:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800634a:	2b06      	cmp	r3, #6
 800634c:	d110      	bne.n	8006370 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x41a>
            req_param_resp.deserialize(message_in);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f503 5302 	add.w	r3, r3, #8320	@ 0x2080
 8006354:	3338      	adds	r3, #56	@ 0x38
 8006356:	687a      	ldr	r2, [r7, #4]
 8006358:	3218      	adds	r2, #24
 800635a:	4611      	mov	r1, r2
 800635c:	4618      	mov	r0, r3
 800635e:	f7fc f870 	bl	8002442 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006368:	2201      	movs	r2, #1
 800636a:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4
 800636e:	e623      	b.n	8005fb8 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006376:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800637a:	2b0b      	cmp	r3, #11
 800637c:	d106      	bne.n	800638c <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x436>
            configured_ = false;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006384:	2200      	movs	r2, #0
 8006386:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
 800638a:	e615      	b.n	8005fb8 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x62>
            if (subscribers[topic_ - 100])
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006392:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006396:	3b64      	subs	r3, #100	@ 0x64
 8006398:	687a      	ldr	r2, [r7, #4]
 800639a:	f603 0314 	addw	r3, r3, #2068	@ 0x814
 800639e:	009b      	lsls	r3, r3, #2
 80063a0:	4413      	add	r3, r2
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	f43f ae07 	beq.w	8005fb8 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x62>
              subscribers[topic_ - 100]->callback(message_in);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80063b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80063b4:	3b64      	subs	r3, #100	@ 0x64
 80063b6:	687a      	ldr	r2, [r7, #4]
 80063b8:	f603 0314 	addw	r3, r3, #2068	@ 0x814
 80063bc:	009b      	lsls	r3, r3, #2
 80063be:	4413      	add	r3, r2
 80063c0:	6858      	ldr	r0, [r3, #4]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80063c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80063cc:	3b64      	subs	r3, #100	@ 0x64
 80063ce:	687a      	ldr	r2, [r7, #4]
 80063d0:	f603 0314 	addw	r3, r3, #2068	@ 0x814
 80063d4:	009b      	lsls	r3, r3, #2
 80063d6:	4413      	add	r3, r2
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	687a      	ldr	r2, [r7, #4]
 80063e0:	3218      	adds	r2, #24
 80063e2:	4611      	mov	r1, r2
 80063e4:	4798      	blx	r3
    while (true)
 80063e6:	e5e7      	b.n	8005fb8 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x62>
        break;
 80063e8:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80063f0:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d014      	beq.n	8006422 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x4cc>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80063fe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006402:	68fa      	ldr	r2, [r7, #12]
 8006404:	1ad3      	subs	r3, r2, r3
 8006406:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 800640a:	4293      	cmp	r3, r2
 800640c:	d909      	bls.n	8006422 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x4cc>
      requestSyncTime();
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f000 f80c 	bl	800642c <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800641a:	461a      	mov	r2, r3
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
    return SPIN_OK;
 8006422:	2300      	movs	r3, #0
  }
 8006424:	4618      	mov	r0, r3
 8006426:	3710      	adds	r7, #16
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}

0800642c <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE15requestSyncTimeEv>:
  void requestSyncTime()
 800642c:	b580      	push	{r7, lr}
 800642e:	b086      	sub	sp, #24
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8006434:	f107 030c 	add.w	r3, r7, #12
 8006438:	4618      	mov	r0, r3
 800643a:	f7fb fb6d 	bl	8001b18 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f107 020c 	add.w	r2, r7, #12
 8006448:	210a      	movs	r1, #10
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	4798      	blx	r3
    rt_time = hardware_.time();
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	3304      	adds	r3, #4
 8006452:	4618      	mov	r0, r3
 8006454:	f7fc fb3a 	bl	8002acc <_ZN13STM32Hardware4timeEv>
 8006458:	4602      	mov	r2, r0
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	609a      	str	r2, [r3, #8]
  }
 800645e:	bf00      	nop
 8006460:	3718      	adds	r7, #24
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}

08006466 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 8006466:	b590      	push	{r4, r7, lr}
 8006468:	b08b      	sub	sp, #44	@ 0x2c
 800646a:	af00      	add	r7, sp, #0
 800646c:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 800646e:	f107 030c 	add.w	r3, r7, #12
 8006472:	4618      	mov	r0, r3
 8006474:	f7fb fc3a 	bl	8001cec <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8006478:	2300      	movs	r3, #0
 800647a:	627b      	str	r3, [r7, #36]	@ 0x24
 800647c:	e05a      	b.n	8006534 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE15negotiateTopicsEv+0xce>
    {
      if (publishers[i] != 0) // non-empty slot
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006482:	f602 0206 	addw	r2, r2, #2054	@ 0x806
 8006486:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d04f      	beq.n	800652e <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE15negotiateTopicsEv+0xc8>
      {
        ti.topic_id = publishers[i]->id_;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006492:	f602 0206 	addw	r2, r2, #2054	@ 0x806
 8006496:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800649a:	689b      	ldr	r3, [r3, #8]
 800649c:	b29b      	uxth	r3, r3
 800649e:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064a4:	f602 0206 	addw	r2, r2, #2054	@ 0x806
 80064a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064b4:	f602 0206 	addw	r2, r2, #2054	@ 0x806
 80064b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064bc:	6859      	ldr	r1, [r3, #4]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064c2:	f602 0206 	addw	r2, r2, #2054	@ 0x806
 80064c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	3308      	adds	r3, #8
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4608      	mov	r0, r1
 80064d4:	4798      	blx	r3
 80064d6:	4603      	mov	r3, r0
 80064d8:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064de:	f602 0206 	addw	r2, r2, #2054	@ 0x806
 80064e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064e6:	6859      	ldr	r1, [r3, #4]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064ec:	f602 0206 	addw	r2, r2, #2054	@ 0x806
 80064f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	330c      	adds	r3, #12
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4608      	mov	r0, r1
 80064fe:	4798      	blx	r3
 8006500:	4603      	mov	r3, r0
 8006502:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8006504:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006508:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	681c      	ldr	r4, [r3, #0]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006514:	f602 0206 	addw	r2, r2, #2054	@ 0x806
 8006518:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800651c:	4618      	mov	r0, r3
 800651e:	f7fc f943 	bl	80027a8 <_ZN3ros9Publisher15getEndpointTypeEv>
 8006522:	4601      	mov	r1, r0
 8006524:	f107 030c 	add.w	r3, r7, #12
 8006528:	461a      	mov	r2, r3
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 800652e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006530:	3301      	adds	r3, #1
 8006532:	627b      	str	r3, [r7, #36]	@ 0x24
 8006534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006536:	2b0e      	cmp	r3, #14
 8006538:	dda1      	ble.n	800647e <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE15negotiateTopicsEv+0x18>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 800653a:	2300      	movs	r3, #0
 800653c:	627b      	str	r3, [r7, #36]	@ 0x24
 800653e:	e067      	b.n	8006610 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE15negotiateTopicsEv+0x1aa>
    {
      if (subscribers[i] != 0) // non-empty slot
 8006540:	687a      	ldr	r2, [r7, #4]
 8006542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006544:	f603 0314 	addw	r3, r3, #2068	@ 0x814
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	4413      	add	r3, r2
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d05b      	beq.n	800660a <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE15negotiateTopicsEv+0x1a4>
      {
        ti.topic_id = subscribers[i]->id_;
 8006552:	687a      	ldr	r2, [r7, #4]
 8006554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006556:	f603 0314 	addw	r3, r3, #2068	@ 0x814
 800655a:	009b      	lsls	r3, r3, #2
 800655c:	4413      	add	r3, r2
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	b29b      	uxth	r3, r3
 8006564:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8006566:	687a      	ldr	r2, [r7, #4]
 8006568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800656a:	f603 0314 	addw	r3, r3, #2068	@ 0x814
 800656e:	009b      	lsls	r3, r3, #2
 8006570:	4413      	add	r3, r2
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	689b      	ldr	r3, [r3, #8]
 8006576:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8006578:	687a      	ldr	r2, [r7, #4]
 800657a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800657c:	f603 0314 	addw	r3, r3, #2068	@ 0x814
 8006580:	009b      	lsls	r3, r3, #2
 8006582:	4413      	add	r3, r2
 8006584:	6859      	ldr	r1, [r3, #4]
 8006586:	687a      	ldr	r2, [r7, #4]
 8006588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800658a:	f603 0314 	addw	r3, r3, #2068	@ 0x814
 800658e:	009b      	lsls	r3, r3, #2
 8006590:	4413      	add	r3, r2
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	3308      	adds	r3, #8
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4608      	mov	r0, r1
 800659c:	4798      	blx	r3
 800659e:	4603      	mov	r3, r0
 80065a0:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065a6:	f603 0314 	addw	r3, r3, #2068	@ 0x814
 80065aa:	009b      	lsls	r3, r3, #2
 80065ac:	4413      	add	r3, r2
 80065ae:	6859      	ldr	r1, [r3, #4]
 80065b0:	687a      	ldr	r2, [r7, #4]
 80065b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065b4:	f603 0314 	addw	r3, r3, #2068	@ 0x814
 80065b8:	009b      	lsls	r3, r3, #2
 80065ba:	4413      	add	r3, r2
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	330c      	adds	r3, #12
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4608      	mov	r0, r1
 80065c6:	4798      	blx	r3
 80065c8:	4603      	mov	r3, r0
 80065ca:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 80065cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80065d0:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	681c      	ldr	r4, [r3, #0]
 80065d8:	687a      	ldr	r2, [r7, #4]
 80065da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065dc:	f603 0314 	addw	r3, r3, #2068	@ 0x814
 80065e0:	009b      	lsls	r3, r3, #2
 80065e2:	4413      	add	r3, r2
 80065e4:	6859      	ldr	r1, [r3, #4]
 80065e6:	687a      	ldr	r2, [r7, #4]
 80065e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ea:	f603 0314 	addw	r3, r3, #2068	@ 0x814
 80065ee:	009b      	lsls	r3, r3, #2
 80065f0:	4413      	add	r3, r2
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	3304      	adds	r3, #4
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4608      	mov	r0, r1
 80065fc:	4798      	blx	r3
 80065fe:	4601      	mov	r1, r0
 8006600:	f107 030c 	add.w	r3, r7, #12
 8006604:	461a      	mov	r2, r3
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 800660a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800660c:	3301      	adds	r3, #1
 800660e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006612:	2b0e      	cmp	r3, #14
 8006614:	dd94      	ble.n	8006540 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE15negotiateTopicsEv+0xda>
      }
    }
    configured_ = true;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800661c:	2201      	movs	r2, #1
 800661e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
  }
 8006622:	bf00      	nop
 8006624:	372c      	adds	r7, #44	@ 0x2c
 8006626:	46bd      	mov	sp, r7
 8006628:	bd90      	pop	{r4, r7, pc}
	...

0800662c <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 800662c:	b580      	push	{r7, lr}
 800662e:	b086      	sub	sp, #24
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
 8006634:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8006636:	f107 0308 	add.w	r3, r7, #8
 800663a:	4618      	mov	r0, r3
 800663c:	f7fb fa6c 	bl	8001b18 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	3304      	adds	r3, #4
 8006644:	4618      	mov	r0, r3
 8006646:	f7fc fa41 	bl	8002acc <_ZN13STM32Hardware4timeEv>
 800664a:	4602      	mov	r2, r0
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	689b      	ldr	r3, [r3, #8]
 8006650:	1ad3      	subs	r3, r2, r3
 8006652:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8006654:	f107 0308 	add.w	r3, r7, #8
 8006658:	6839      	ldr	r1, [r7, #0]
 800665a:	4618      	mov	r0, r3
 800665c:	f7fb facb 	bl	8001bf6 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8006660:	68fa      	ldr	r2, [r7, #12]
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	4915      	ldr	r1, [pc, #84]	@ (80066bc <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8syncTimeEPh+0x90>)
 8006666:	fba1 1303 	umull	r1, r3, r1, r3
 800666a:	099b      	lsrs	r3, r3, #6
 800666c:	4413      	add	r3, r2
 800666e:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8006670:	6939      	ldr	r1, [r7, #16]
 8006672:	697a      	ldr	r2, [r7, #20]
 8006674:	4b11      	ldr	r3, [pc, #68]	@ (80066bc <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8syncTimeEPh+0x90>)
 8006676:	fba3 0302 	umull	r0, r3, r3, r2
 800667a:	099b      	lsrs	r3, r3, #6
 800667c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8006680:	fb00 f303 	mul.w	r3, r0, r3
 8006684:	1ad3      	subs	r3, r2, r3
 8006686:	4a0e      	ldr	r2, [pc, #56]	@ (80066c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8syncTimeEPh+0x94>)
 8006688:	fb02 f303 	mul.w	r3, r2, r3
 800668c:	440b      	add	r3, r1
 800668e:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8006690:	f107 0308 	add.w	r3, r7, #8
 8006694:	3304      	adds	r3, #4
 8006696:	4619      	mov	r1, r3
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f000 f8b7 	bl	800680c <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	3304      	adds	r3, #4
 80066a2:	4618      	mov	r0, r3
 80066a4:	f7fc fa12 	bl	8002acc <_ZN13STM32Hardware4timeEv>
 80066a8:	4602      	mov	r2, r0
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80066b0:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  }
 80066b4:	bf00      	nop
 80066b6:	3718      	adds	r7, #24
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}
 80066bc:	10624dd3 	.word	0x10624dd3
 80066c0:	000f4240 	.word	0x000f4240

080066c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b088      	sub	sp, #32
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	60f8      	str	r0, [r7, #12]
 80066cc:	60b9      	str	r1, [r7, #8]
 80066ce:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	2b63      	cmp	r3, #99	@ 0x63
 80066d4:	dd0b      	ble.n	80066ee <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE7publishEiPKNS_3MsgE+0x2a>
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80066dc:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 80066e0:	f083 0301 	eor.w	r3, r3, #1
 80066e4:	b2db      	uxtb	r3, r3
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d001      	beq.n	80066ee <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE7publishEiPKNS_3MsgE+0x2a>
      return 0;
 80066ea:	2300      	movs	r3, #0
 80066ec:	e087      	b.n	80067fe <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE7publishEiPKNS_3MsgE+0x13a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80066fa:	3318      	adds	r3, #24
 80066fc:	3307      	adds	r3, #7
 80066fe:	4619      	mov	r1, r3
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	4790      	blx	r2
 8006704:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800670c:	22ff      	movs	r2, #255	@ 0xff
 800670e:	761a      	strb	r2, [r3, #24]
    message_out[1] = PROTOCOL_VER;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006716:	22fe      	movs	r2, #254	@ 0xfe
 8006718:	765a      	strb	r2, [r3, #25]
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	b2da      	uxtb	r2, r3
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006724:	769a      	strb	r2, [r3, #26]
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	b29b      	uxth	r3, r3
 800672a:	0a1b      	lsrs	r3, r3, #8
 800672c:	b29b      	uxth	r3, r3
 800672e:	b2da      	uxtb	r2, r3
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006736:	76da      	strb	r2, [r3, #27]
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800673e:	7e9a      	ldrb	r2, [r3, #26]
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006746:	7edb      	ldrb	r3, [r3, #27]
 8006748:	4413      	add	r3, r2
 800674a:	b2db      	uxtb	r3, r3
 800674c:	43db      	mvns	r3, r3
 800674e:	b2da      	uxtb	r2, r3
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006756:	771a      	strb	r2, [r3, #28]
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	b2da      	uxtb	r2, r3
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006762:	775a      	strb	r2, [r3, #29]
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	b21b      	sxth	r3, r3
 8006768:	121b      	asrs	r3, r3, #8
 800676a:	b21b      	sxth	r3, r3
 800676c:	b2da      	uxtb	r2, r3
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006774:	779a      	strb	r2, [r3, #30]

    /* calculate checksum */
    int chk = 0;
 8006776:	2300      	movs	r3, #0
 8006778:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 800677a:	2305      	movs	r3, #5
 800677c:	61bb      	str	r3, [r7, #24]
 800677e:	e00d      	b.n	800679c <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE7publishEiPKNS_3MsgE+0xd8>
      chk += message_out[i];
 8006780:	68fa      	ldr	r2, [r7, #12]
 8006782:	69bb      	ldr	r3, [r7, #24]
 8006784:	4413      	add	r3, r2
 8006786:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800678a:	3318      	adds	r3, #24
 800678c:	781b      	ldrb	r3, [r3, #0]
 800678e:	461a      	mov	r2, r3
 8006790:	69fb      	ldr	r3, [r7, #28]
 8006792:	4413      	add	r3, r2
 8006794:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8006796:	69bb      	ldr	r3, [r7, #24]
 8006798:	3301      	adds	r3, #1
 800679a:	61bb      	str	r3, [r7, #24]
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	3306      	adds	r3, #6
 80067a0:	69ba      	ldr	r2, [r7, #24]
 80067a2:	429a      	cmp	r2, r3
 80067a4:	ddec      	ble.n	8006780 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE7publishEiPKNS_3MsgE+0xbc>
    l += 7;
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	3307      	adds	r3, #7
 80067aa:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 80067ac:	69fb      	ldr	r3, [r7, #28]
 80067ae:	425a      	negs	r2, r3
 80067b0:	b2db      	uxtb	r3, r3
 80067b2:	b2d2      	uxtb	r2, r2
 80067b4:	bf58      	it	pl
 80067b6:	4253      	negpl	r3, r2
 80067b8:	b2da      	uxtb	r2, r3
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	1c59      	adds	r1, r3, #1
 80067be:	6179      	str	r1, [r7, #20]
 80067c0:	43d2      	mvns	r2, r2
 80067c2:	b2d1      	uxtb	r1, r2
 80067c4:	68fa      	ldr	r2, [r7, #12]
 80067c6:	4413      	add	r3, r2
 80067c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80067cc:	3318      	adds	r3, #24
 80067ce:	460a      	mov	r2, r1
 80067d0:	701a      	strb	r2, [r3, #0]

    if (l <= OUTPUT_SIZE)
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067d8:	dc0b      	bgt.n	80067f2 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE7publishEiPKNS_3MsgE+0x12e>
    {
      hardware_.write(message_out, l);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	1d18      	adds	r0, r3, #4
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80067e4:	3318      	adds	r3, #24
 80067e6:	697a      	ldr	r2, [r7, #20]
 80067e8:	4619      	mov	r1, r3
 80067ea:	f7fc f95e 	bl	8002aaa <_ZN13STM32Hardware5writeEPhi>
      return l;
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	e005      	b.n	80067fe <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE7publishEiPKNS_3MsgE+0x13a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 80067f2:	4905      	ldr	r1, [pc, #20]	@ (8006808 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE7publishEiPKNS_3MsgE+0x144>)
 80067f4:	68f8      	ldr	r0, [r7, #12]
 80067f6:	f000 f847 	bl	8006888 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8logerrorEPKc>
      return -1;
 80067fa:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 80067fe:	4618      	mov	r0, r3
 8006800:	3720      	adds	r7, #32
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}
 8006806:	bf00      	nop
 8006808:	0800ae68 	.word	0x0800ae68

0800680c <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 800680c:	b580      	push	{r7, lr}
 800680e:	b084      	sub	sp, #16
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
 8006814:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	3304      	adds	r3, #4
 800681a:	4618      	mov	r0, r3
 800681c:	f7fc f956 	bl	8002acc <_ZN13STM32Hardware4timeEv>
 8006820:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	681a      	ldr	r2, [r3, #0]
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	4914      	ldr	r1, [pc, #80]	@ (800687c <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE6setNowERKNS_4TimeE+0x70>)
 800682a:	fba1 1303 	umull	r1, r3, r1, r3
 800682e:	099b      	lsrs	r3, r3, #6
 8006830:	1ad3      	subs	r3, r2, r3
 8006832:	1e5a      	subs	r2, r3, #1
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	60da      	str	r2, [r3, #12]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	6859      	ldr	r1, [r3, #4]
 800683c:	68fa      	ldr	r2, [r7, #12]
 800683e:	4b0f      	ldr	r3, [pc, #60]	@ (800687c <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE6setNowERKNS_4TimeE+0x70>)
 8006840:	fba3 0302 	umull	r0, r3, r3, r2
 8006844:	099b      	lsrs	r3, r3, #6
 8006846:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800684a:	fb00 f303 	mul.w	r3, r0, r3
 800684e:	1ad3      	subs	r3, r2, r3
 8006850:	4a0b      	ldr	r2, [pc, #44]	@ (8006880 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE6setNowERKNS_4TimeE+0x74>)
 8006852:	fb02 f303 	mul.w	r3, r2, r3
 8006856:	1aca      	subs	r2, r1, r3
 8006858:	4b0a      	ldr	r3, [pc, #40]	@ (8006884 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE6setNowERKNS_4TimeE+0x78>)
 800685a:	4413      	add	r3, r2
 800685c:	687a      	ldr	r2, [r7, #4]
 800685e:	6113      	str	r3, [r2, #16]
    normalizeSecNSec(sec_offset, nsec_offset);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f103 020c 	add.w	r2, r3, #12
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	3310      	adds	r3, #16
 800686a:	4619      	mov	r1, r3
 800686c:	4610      	mov	r0, r2
 800686e:	f000 fcbf 	bl	80071f0 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8006872:	bf00      	nop
 8006874:	3710      	adds	r7, #16
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}
 800687a:	bf00      	nop
 800687c:	10624dd3 	.word	0x10624dd3
 8006880:	000f4240 	.word	0x000f4240
 8006884:	3b9aca00 	.word	0x3b9aca00

08006888 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8006888:	b580      	push	{r7, lr}
 800688a:	b082      	sub	sp, #8
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
 8006890:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8006892:	683a      	ldr	r2, [r7, #0]
 8006894:	2103      	movs	r1, #3
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f000 f804 	bl	80068a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE3logEcPKc>
  }
 800689c:	bf00      	nop
 800689e:	3708      	adds	r7, #8
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}

080068a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE3logEcPKc>:
  void log(char byte, const char * msg)
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b088      	sub	sp, #32
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	60f8      	str	r0, [r7, #12]
 80068ac:	460b      	mov	r3, r1
 80068ae:	607a      	str	r2, [r7, #4]
 80068b0:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 80068b2:	f107 0314 	add.w	r3, r7, #20
 80068b6:	4618      	mov	r0, r3
 80068b8:	f7fb fbd8 	bl	800206c <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 80068bc:	7afb      	ldrb	r3, [r7, #11]
 80068be:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f107 0214 	add.w	r2, r7, #20
 80068ce:	2107      	movs	r1, #7
 80068d0:	68f8      	ldr	r0, [r7, #12]
 80068d2:	4798      	blx	r3
  }
 80068d4:	bf00      	nop
 80068d6:	3720      	adds	r7, #32
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}

080068dc <_Z41__static_initialization_and_destruction_0ii>:
 80068dc:	b580      	push	{r7, lr}
 80068de:	b082      	sub	sp, #8
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	6039      	str	r1, [r7, #0]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d11a      	bne.n	8006922 <_Z41__static_initialization_and_destruction_0ii+0x46>
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d115      	bne.n	8006922 <_Z41__static_initialization_and_destruction_0ii+0x46>
};

SerialComm comm_rosserial(huart_rosserial);
 80068f6:	490d      	ldr	r1, [pc, #52]	@ (800692c <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80068f8:	480d      	ldr	r0, [pc, #52]	@ (8006930 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 80068fa:	f7fb ff60 	bl	80027be <_ZN10SerialCommC1ER20__UART_HandleTypeDef>
ros::NodeHandle nh;
 80068fe:	480d      	ldr	r0, [pc, #52]	@ (8006934 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8006900:	f7fe ff06 	bl	8005710 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EEC1Ev>
sensor_msgs::Imu imu_msg;
 8006904:	480c      	ldr	r0, [pc, #48]	@ (8006938 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8006906:	f7fd fe49 	bl	800459c <_ZN11sensor_msgs3ImuC1Ev>
ros::Publisher pub_imu("imu", &imu_msg);
 800690a:	2300      	movs	r3, #0
 800690c:	4a0a      	ldr	r2, [pc, #40]	@ (8006938 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800690e:	490b      	ldr	r1, [pc, #44]	@ (800693c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8006910:	480b      	ldr	r0, [pc, #44]	@ (8006940 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8006912:	f7fb ff1f 	bl	8002754 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
geometry_msgs::TransformStamped t;
 8006916:	480b      	ldr	r0, [pc, #44]	@ (8006944 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8006918:	f7fe fcda 	bl	80052d0 <_ZN13geometry_msgs16TransformStampedC1Ev>
tf::TransformBroadcaster broadcaster;
 800691c:	480a      	ldr	r0, [pc, #40]	@ (8006948 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 800691e:	f7fe fea3 	bl	8005668 <_ZN2tf20TransformBroadcasterC1Ev>
}
 8006922:	bf00      	nop
 8006924:	3708      	adds	r7, #8
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}
 800692a:	bf00      	nop
 800692c:	20000120 	.word	0x20000120
 8006930:	200001f0 	.word	0x200001f0
 8006934:	20002214 	.word	0x20002214
 8006938:	200042f8 	.word	0x200042f8
 800693c:	0800aea4 	.word	0x0800aea4
 8006940:	20004450 	.word	0x20004450
 8006944:	20004468 	.word	0x20004468
 8006948:	200044d8 	.word	0x200044d8

0800694c <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE9connectedEv>:
  virtual bool connected() override
 800694c:	b480      	push	{r7}
 800694e:	b083      	sub	sp, #12
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
    return configured_;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800695a:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
  };
 800695e:	4618      	mov	r0, r3
 8006960:	370c      	adds	r7, #12
 8006962:	46bd      	mov	sp, r7
 8006964:	bc80      	pop	{r7}
 8006966:	4770      	bx	lr

08006968 <_GLOBAL__sub_I_comm_rosserial>:
 8006968:	b580      	push	{r7, lr}
 800696a:	af00      	add	r7, sp, #0
 800696c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8006970:	2001      	movs	r0, #1
 8006972:	f7ff ffb3 	bl	80068dc <_Z41__static_initialization_and_destruction_0ii>
 8006976:	bd80      	pop	{r7, pc}

08006978 <MPU6050_ReadWhoAmI>:
int16_t offset_ax = 0, offset_ay = 0, offset_az = 0, offset_gx = 0, offset_gy = 0, offset_gz = 0;

int16_t g_accel_val = (int16_t)16384;

status_t MPU6050_ReadWhoAmI(I2C_HandleTypeDef *hi2c, MPU6050_t *mpu, uint8_t is_high_addr, uint8_t *buffer)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b088      	sub	sp, #32
 800697c:	af04      	add	r7, sp, #16
 800697e:	60f8      	str	r0, [r7, #12]
 8006980:	60b9      	str	r1, [r7, #8]
 8006982:	603b      	str	r3, [r7, #0]
 8006984:	4613      	mov	r3, r2
 8006986:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Read(hi2c, (mpu->address << 1), (uint8_t)MPU6050_REG_WHO_AM_I, 1, buffer, 1, MPU6050_DEFAULT_TIMEOUT);
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	781b      	ldrb	r3, [r3, #0]
 800698c:	005b      	lsls	r3, r3, #1
 800698e:	b299      	uxth	r1, r3
 8006990:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006994:	9302      	str	r3, [sp, #8]
 8006996:	2301      	movs	r3, #1
 8006998:	9301      	str	r3, [sp, #4]
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	9300      	str	r3, [sp, #0]
 800699e:	2301      	movs	r3, #1
 80069a0:	2275      	movs	r2, #117	@ 0x75
 80069a2:	68f8      	ldr	r0, [r7, #12]
 80069a4:	f001 fc86 	bl	80082b4 <HAL_I2C_Mem_Read>
    return STATUS_OK;
 80069a8:	2300      	movs	r3, #0
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	3710      	adds	r7, #16
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}
	...

080069b4 <MPU6050_Init>:

status_t MPU6050_Init(I2C_HandleTypeDef *hi2c, MPU6050_t* mpu, MPU6050_Handle_t handle , uint8_t is_high_addr)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b08a      	sub	sp, #40	@ 0x28
 80069b8:	af04      	add	r7, sp, #16
 80069ba:	60f8      	str	r0, [r7, #12]
 80069bc:	60b9      	str	r1, [r7, #8]
 80069be:	607a      	str	r2, [r7, #4]
 80069c0:	70fb      	strb	r3, [r7, #3]
    uint8_t tmp_byte;
    uint8_t check_buffer;

    MPU6050_ReadWhoAmI(hi2c, mpu, is_high_addr, &check_buffer);
 80069c2:	f107 0316 	add.w	r3, r7, #22
 80069c6:	78fa      	ldrb	r2, [r7, #3]
 80069c8:	68b9      	ldr	r1, [r7, #8]
 80069ca:	68f8      	ldr	r0, [r7, #12]
 80069cc:	f7ff ffd4 	bl	8006978 <MPU6050_ReadWhoAmI>

    /* Check WHO_AM_I value */
    if (check_buffer == (0x68 | is_high_addr))
 80069d0:	78fb      	ldrb	r3, [r7, #3]
 80069d2:	f043 0368 	orr.w	r3, r3, #104	@ 0x68
 80069d6:	b2da      	uxtb	r2, r3
 80069d8:	7dbb      	ldrb	r3, [r7, #22]
 80069da:	429a      	cmp	r2, r3
 80069dc:	d134      	bne.n	8006a48 <MPU6050_Init+0x94>
    {
        // TODO: Implement intialization process

        /* Wake-up routine */
        tmp_byte = 0x00;
 80069de:	2300      	movs	r3, #0
 80069e0:	75fb      	strb	r3, [r7, #23]
        HAL_I2C_Mem_Write(hi2c, (mpu->address << 1), (uint8_t)MPU6050_REG_PWR_MGMT_1, 1, &tmp_byte, 1, MPU6050_DEFAULT_TIMEOUT);
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	781b      	ldrb	r3, [r3, #0]
 80069e6:	005b      	lsls	r3, r3, #1
 80069e8:	b299      	uxth	r1, r3
 80069ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80069ee:	9302      	str	r3, [sp, #8]
 80069f0:	2301      	movs	r3, #1
 80069f2:	9301      	str	r3, [sp, #4]
 80069f4:	f107 0317 	add.w	r3, r7, #23
 80069f8:	9300      	str	r3, [sp, #0]
 80069fa:	2301      	movs	r3, #1
 80069fc:	226b      	movs	r2, #107	@ 0x6b
 80069fe:	68f8      	ldr	r0, [r7, #12]
 8006a00:	f001 fb5e 	bl	80080c0 <HAL_I2C_Mem_Write>

        /* Set the sample rate */
        MPU6050_ConfigSampleRate(hi2c, mpu, handle.rate_div);
 8006a04:	793b      	ldrb	r3, [r7, #4]
 8006a06:	461a      	mov	r2, r3
 8006a08:	68b9      	ldr	r1, [r7, #8]
 8006a0a:	68f8      	ldr	r0, [r7, #12]
 8006a0c:	f000 f824 	bl	8006a58 <MPU6050_ConfigSampleRate>
        /* Set the gyroscope range */
        MPU6050_ConfigGyroscope(hi2c, mpu, handle.gyro_range);
 8006a10:	797b      	ldrb	r3, [r7, #5]
 8006a12:	461a      	mov	r2, r3
 8006a14:	68b9      	ldr	r1, [r7, #8]
 8006a16:	68f8      	ldr	r0, [r7, #12]
 8006a18:	f000 f83e 	bl	8006a98 <MPU6050_ConfigGyroscope>
        /* Set the accelerometer range */
        MPU6050_ConfigAccelerometer(hi2c, mpu, handle.accel_range); 
 8006a1c:	79bb      	ldrb	r3, [r7, #6]
 8006a1e:	461a      	mov	r2, r3
 8006a20:	68b9      	ldr	r1, [r7, #8]
 8006a22:	68f8      	ldr	r0, [r7, #12]
 8006a24:	f000 f898 	bl	8006b58 <MPU6050_ConfigAccelerometer>

        MPU6050_SetAccelerometerOffset(mpu, MPU6050_OFFSET_AX, MPU6050_OFFSET_AY, MPU6050_OFFSET_AZ);
 8006a28:	4b0a      	ldr	r3, [pc, #40]	@ (8006a54 <MPU6050_Init+0xa0>)
 8006a2a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006a2e:	f46f 715f 	mvn.w	r1, #892	@ 0x37c
 8006a32:	68b8      	ldr	r0, [r7, #8]
 8006a34:	f000 f91e 	bl	8006c74 <MPU6050_SetAccelerometerOffset>
        MPU6050_SetGyroscopeOffset(mpu, MPU6050_OFFSET_GX, MPU6050_OFFSET_GY, MPU6050_OFFSET_GZ);
 8006a38:	2363      	movs	r3, #99	@ 0x63
 8006a3a:	226a      	movs	r2, #106	@ 0x6a
 8006a3c:	214f      	movs	r1, #79	@ 0x4f
 8006a3e:	68b8      	ldr	r0, [r7, #8]
 8006a40:	f000 f8fc 	bl	8006c3c <MPU6050_SetGyroscopeOffset>

        return STATUS_OK;
 8006a44:	2300      	movs	r3, #0
 8006a46:	e001      	b.n	8006a4c <MPU6050_Init+0x98>
    }
    
    return STATUS_FAIL;
 8006a48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	3718      	adds	r7, #24
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}
 8006a54:	ffffb52d 	.word	0xffffb52d

08006a58 <MPU6050_ConfigSampleRate>:

status_t MPU6050_ConfigSampleRate(I2C_HandleTypeDef *hi2c, MPU6050_t* mpu, MPU6050_SampleRateDiv_t rate_div)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b08a      	sub	sp, #40	@ 0x28
 8006a5c:	af04      	add	r7, sp, #16
 8006a5e:	60f8      	str	r0, [r7, #12]
 8006a60:	60b9      	str	r1, [r7, #8]
 8006a62:	4613      	mov	r3, r2
 8006a64:	71fb      	strb	r3, [r7, #7]
    uint8_t tmp_byte = (uint8_t)rate_div;
 8006a66:	79fb      	ldrb	r3, [r7, #7]
 8006a68:	75fb      	strb	r3, [r7, #23]

    // Write the SMPRT_DIV setting to the register
    HAL_I2C_Mem_Write(hi2c, (mpu->address << 1), (uint8_t)MPU6050_REG_SMPRT_DIV, 1, &tmp_byte, 1, MPU6050_DEFAULT_TIMEOUT);
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	781b      	ldrb	r3, [r3, #0]
 8006a6e:	005b      	lsls	r3, r3, #1
 8006a70:	b299      	uxth	r1, r3
 8006a72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006a76:	9302      	str	r3, [sp, #8]
 8006a78:	2301      	movs	r3, #1
 8006a7a:	9301      	str	r3, [sp, #4]
 8006a7c:	f107 0317 	add.w	r3, r7, #23
 8006a80:	9300      	str	r3, [sp, #0]
 8006a82:	2301      	movs	r3, #1
 8006a84:	2219      	movs	r2, #25
 8006a86:	68f8      	ldr	r0, [r7, #12]
 8006a88:	f001 fb1a 	bl	80080c0 <HAL_I2C_Mem_Write>

    return STATUS_OK;
 8006a8c:	2300      	movs	r3, #0
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3718      	adds	r7, #24
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}
	...

08006a98 <MPU6050_ConfigGyroscope>:

status_t MPU6050_ConfigGyroscope(I2C_HandleTypeDef *hi2c, MPU6050_t *mpu, MPU6050_GyroscopeRange_t gyro_range)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b08a      	sub	sp, #40	@ 0x28
 8006a9c:	af04      	add	r7, sp, #16
 8006a9e:	60f8      	str	r0, [r7, #12]
 8006aa0:	60b9      	str	r1, [r7, #8]
 8006aa2:	4613      	mov	r3, r2
 8006aa4:	71fb      	strb	r3, [r7, #7]
    uint8_t tmp_byte;

    // Read the current register value
    HAL_I2C_Mem_Read(hi2c, (mpu->address << 1), (uint8_t)MPU6050_REG_GYRO_CONFIG, 1, &tmp_byte, 1, MPU6050_DEFAULT_TIMEOUT);
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	781b      	ldrb	r3, [r3, #0]
 8006aaa:	005b      	lsls	r3, r3, #1
 8006aac:	b299      	uxth	r1, r3
 8006aae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006ab2:	9302      	str	r3, [sp, #8]
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	9301      	str	r3, [sp, #4]
 8006ab8:	f107 0317 	add.w	r3, r7, #23
 8006abc:	9300      	str	r3, [sp, #0]
 8006abe:	2301      	movs	r3, #1
 8006ac0:	221b      	movs	r2, #27
 8006ac2:	68f8      	ldr	r0, [r7, #12]
 8006ac4:	f001 fbf6 	bl	80082b4 <HAL_I2C_Mem_Read>

    // Bit-masking 
    tmp_byte &= !(0x03 << 3);
 8006ac8:	2300      	movs	r3, #0
 8006aca:	75fb      	strb	r3, [r7, #23]
    tmp_byte |=  (uint8_t)gyro_range << 3;
 8006acc:	79fb      	ldrb	r3, [r7, #7]
 8006ace:	00db      	lsls	r3, r3, #3
 8006ad0:	b25a      	sxtb	r2, r3
 8006ad2:	7dfb      	ldrb	r3, [r7, #23]
 8006ad4:	b25b      	sxtb	r3, r3
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	b25b      	sxtb	r3, r3
 8006ada:	b2db      	uxtb	r3, r3
 8006adc:	75fb      	strb	r3, [r7, #23]

    // Write the FS_SEL setting to the register
    HAL_I2C_Mem_Write(hi2c, (mpu->address << 1), (uint8_t)MPU6050_REG_GYRO_CONFIG, 1, &tmp_byte, 1, MPU6050_DEFAULT_TIMEOUT);
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	781b      	ldrb	r3, [r3, #0]
 8006ae2:	005b      	lsls	r3, r3, #1
 8006ae4:	b299      	uxth	r1, r3
 8006ae6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006aea:	9302      	str	r3, [sp, #8]
 8006aec:	2301      	movs	r3, #1
 8006aee:	9301      	str	r3, [sp, #4]
 8006af0:	f107 0317 	add.w	r3, r7, #23
 8006af4:	9300      	str	r3, [sp, #0]
 8006af6:	2301      	movs	r3, #1
 8006af8:	221b      	movs	r2, #27
 8006afa:	68f8      	ldr	r0, [r7, #12]
 8006afc:	f001 fae0 	bl	80080c0 <HAL_I2C_Mem_Write>

    // Set the scaling factor for true data
    switch (gyro_range)
 8006b00:	79fb      	ldrb	r3, [r7, #7]
 8006b02:	2b03      	cmp	r3, #3
 8006b04:	d81a      	bhi.n	8006b3c <MPU6050_ConfigGyroscope+0xa4>
 8006b06:	a201      	add	r2, pc, #4	@ (adr r2, 8006b0c <MPU6050_ConfigGyroscope+0x74>)
 8006b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b0c:	08006b1d 	.word	0x08006b1d
 8006b10:	08006b25 	.word	0x08006b25
 8006b14:	08006b2d 	.word	0x08006b2d
 8006b18:	08006b35 	.word	0x08006b35
    {
    case Gyro_Range_250s:
        mpu->gyro_scaling_factor = 1.0 / 131.0;
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	4a0a      	ldr	r2, [pc, #40]	@ (8006b48 <MPU6050_ConfigGyroscope+0xb0>)
 8006b20:	605a      	str	r2, [r3, #4]
        break;
 8006b22:	e00c      	b.n	8006b3e <MPU6050_ConfigGyroscope+0xa6>
    case Gyro_Range_500s:
        mpu->gyro_scaling_factor = 1.0 / 65.5;
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	4a09      	ldr	r2, [pc, #36]	@ (8006b4c <MPU6050_ConfigGyroscope+0xb4>)
 8006b28:	605a      	str	r2, [r3, #4]
        break;
 8006b2a:	e008      	b.n	8006b3e <MPU6050_ConfigGyroscope+0xa6>
    case Gyro_Range_1000s:
        mpu->gyro_scaling_factor = 1.0 / 32.8;
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	4a08      	ldr	r2, [pc, #32]	@ (8006b50 <MPU6050_ConfigGyroscope+0xb8>)
 8006b30:	605a      	str	r2, [r3, #4]
        break;
 8006b32:	e004      	b.n	8006b3e <MPU6050_ConfigGyroscope+0xa6>
    case Gyro_Range_2000s:
        mpu->gyro_scaling_factor = 1.0 / 16.4;
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	4a07      	ldr	r2, [pc, #28]	@ (8006b54 <MPU6050_ConfigGyroscope+0xbc>)
 8006b38:	605a      	str	r2, [r3, #4]
        break;
 8006b3a:	e000      	b.n	8006b3e <MPU6050_ConfigGyroscope+0xa6>
    default:
        break;
 8006b3c:	bf00      	nop
    }

    return STATUS_OK;
 8006b3e:	2300      	movs	r3, #0
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	3718      	adds	r7, #24
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}
 8006b48:	3bfa232d 	.word	0x3bfa232d
 8006b4c:	3c7a232d 	.word	0x3c7a232d
 8006b50:	3cf9c190 	.word	0x3cf9c190
 8006b54:	3d79c190 	.word	0x3d79c190

08006b58 <MPU6050_ConfigAccelerometer>:

status_t MPU6050_ConfigAccelerometer(I2C_HandleTypeDef *hi2c, MPU6050_t *mpu, MPU6050_AccelerometerRange_t accel_range)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b08a      	sub	sp, #40	@ 0x28
 8006b5c:	af04      	add	r7, sp, #16
 8006b5e:	60f8      	str	r0, [r7, #12]
 8006b60:	60b9      	str	r1, [r7, #8]
 8006b62:	4613      	mov	r3, r2
 8006b64:	71fb      	strb	r3, [r7, #7]
    uint8_t tmp_byte;

    // Read the current register value
    HAL_I2C_Mem_Read(hi2c, (mpu->address << 1), (uint8_t)MPU6050_REG_ACCEL_CONFIG, 1, &tmp_byte, 1, MPU6050_DEFAULT_TIMEOUT);
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	781b      	ldrb	r3, [r3, #0]
 8006b6a:	005b      	lsls	r3, r3, #1
 8006b6c:	b299      	uxth	r1, r3
 8006b6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006b72:	9302      	str	r3, [sp, #8]
 8006b74:	2301      	movs	r3, #1
 8006b76:	9301      	str	r3, [sp, #4]
 8006b78:	f107 0317 	add.w	r3, r7, #23
 8006b7c:	9300      	str	r3, [sp, #0]
 8006b7e:	2301      	movs	r3, #1
 8006b80:	221c      	movs	r2, #28
 8006b82:	68f8      	ldr	r0, [r7, #12]
 8006b84:	f001 fb96 	bl	80082b4 <HAL_I2C_Mem_Read>

    // Bit-masking 
    tmp_byte &= !(0x03 << 3);
 8006b88:	2300      	movs	r3, #0
 8006b8a:	75fb      	strb	r3, [r7, #23]
    tmp_byte |=  (uint8_t)accel_range << 3;
 8006b8c:	79fb      	ldrb	r3, [r7, #7]
 8006b8e:	00db      	lsls	r3, r3, #3
 8006b90:	b25a      	sxtb	r2, r3
 8006b92:	7dfb      	ldrb	r3, [r7, #23]
 8006b94:	b25b      	sxtb	r3, r3
 8006b96:	4313      	orrs	r3, r2
 8006b98:	b25b      	sxtb	r3, r3
 8006b9a:	b2db      	uxtb	r3, r3
 8006b9c:	75fb      	strb	r3, [r7, #23]

    // Write the FS_SEL setting to the register
    HAL_I2C_Mem_Write(hi2c, (mpu->address << 1), (uint8_t)MPU6050_REG_ACCEL_CONFIG, 1, &tmp_byte, 1, MPU6050_DEFAULT_TIMEOUT);
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	781b      	ldrb	r3, [r3, #0]
 8006ba2:	005b      	lsls	r3, r3, #1
 8006ba4:	b299      	uxth	r1, r3
 8006ba6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006baa:	9302      	str	r3, [sp, #8]
 8006bac:	2301      	movs	r3, #1
 8006bae:	9301      	str	r3, [sp, #4]
 8006bb0:	f107 0317 	add.w	r3, r7, #23
 8006bb4:	9300      	str	r3, [sp, #0]
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	221c      	movs	r2, #28
 8006bba:	68f8      	ldr	r0, [r7, #12]
 8006bbc:	f001 fa80 	bl	80080c0 <HAL_I2C_Mem_Write>

    // Set the scaling factor for true data
    switch (accel_range)
 8006bc0:	79fb      	ldrb	r3, [r7, #7]
 8006bc2:	2b03      	cmp	r3, #3
 8006bc4:	d82a      	bhi.n	8006c1c <MPU6050_ConfigAccelerometer+0xc4>
 8006bc6:	a201      	add	r2, pc, #4	@ (adr r2, 8006bcc <MPU6050_ConfigAccelerometer+0x74>)
 8006bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bcc:	08006bdd 	.word	0x08006bdd
 8006bd0:	08006bed 	.word	0x08006bed
 8006bd4:	08006bfd 	.word	0x08006bfd
 8006bd8:	08006c0d 	.word	0x08006c0d
    {
    case Accel_Range_2g:
        mpu->accel_scaling_factor = G / 16384.0;
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	4a12      	ldr	r2, [pc, #72]	@ (8006c28 <MPU6050_ConfigAccelerometer+0xd0>)
 8006be0:	609a      	str	r2, [r3, #8]
        g_accel_val = (int16_t)16384;
 8006be2:	4b12      	ldr	r3, [pc, #72]	@ (8006c2c <MPU6050_ConfigAccelerometer+0xd4>)
 8006be4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8006be8:	801a      	strh	r2, [r3, #0]
        break;
 8006bea:	e018      	b.n	8006c1e <MPU6050_ConfigAccelerometer+0xc6>
    case Accel_Range_4g:
        mpu->accel_scaling_factor = G / 8192.0;
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	4a10      	ldr	r2, [pc, #64]	@ (8006c30 <MPU6050_ConfigAccelerometer+0xd8>)
 8006bf0:	609a      	str	r2, [r3, #8]
        g_accel_val = (int16_t)8192;
 8006bf2:	4b0e      	ldr	r3, [pc, #56]	@ (8006c2c <MPU6050_ConfigAccelerometer+0xd4>)
 8006bf4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006bf8:	801a      	strh	r2, [r3, #0]
        break;
 8006bfa:	e010      	b.n	8006c1e <MPU6050_ConfigAccelerometer+0xc6>
    case Accel_Range_8g:
        mpu->accel_scaling_factor = G / 4096.0;
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	4a0d      	ldr	r2, [pc, #52]	@ (8006c34 <MPU6050_ConfigAccelerometer+0xdc>)
 8006c00:	609a      	str	r2, [r3, #8]
        g_accel_val = (int16_t)4096;
 8006c02:	4b0a      	ldr	r3, [pc, #40]	@ (8006c2c <MPU6050_ConfigAccelerometer+0xd4>)
 8006c04:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8006c08:	801a      	strh	r2, [r3, #0]
        break;
 8006c0a:	e008      	b.n	8006c1e <MPU6050_ConfigAccelerometer+0xc6>
    case Accel_Range_16g:
        mpu->accel_scaling_factor = G / 2048.0;
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	4a0a      	ldr	r2, [pc, #40]	@ (8006c38 <MPU6050_ConfigAccelerometer+0xe0>)
 8006c10:	609a      	str	r2, [r3, #8]
        g_accel_val = (int16_t)2048;
 8006c12:	4b06      	ldr	r3, [pc, #24]	@ (8006c2c <MPU6050_ConfigAccelerometer+0xd4>)
 8006c14:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006c18:	801a      	strh	r2, [r3, #0]
        break;
 8006c1a:	e000      	b.n	8006c1e <MPU6050_ConfigAccelerometer+0xc6>
    default:
        break;
 8006c1c:	bf00      	nop
    }

    return STATUS_OK;
 8006c1e:	2300      	movs	r3, #0
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	3718      	adds	r7, #24
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}
 8006c28:	3a1cf5c3 	.word	0x3a1cf5c3
 8006c2c:	20000040 	.word	0x20000040
 8006c30:	3a9cf5c3 	.word	0x3a9cf5c3
 8006c34:	3b1cf5c3 	.word	0x3b1cf5c3
 8006c38:	3b9cf5c3 	.word	0x3b9cf5c3

08006c3c <MPU6050_SetGyroscopeOffset>:

    return STATUS_OK;
}

status_t MPU6050_SetGyroscopeOffset(MPU6050_t *mpu, int16_t offset_x, int16_t offset_y, int16_t offset_z)
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b085      	sub	sp, #20
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	60f8      	str	r0, [r7, #12]
 8006c44:	4608      	mov	r0, r1
 8006c46:	4611      	mov	r1, r2
 8006c48:	461a      	mov	r2, r3
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	817b      	strh	r3, [r7, #10]
 8006c4e:	460b      	mov	r3, r1
 8006c50:	813b      	strh	r3, [r7, #8]
 8006c52:	4613      	mov	r3, r2
 8006c54:	80fb      	strh	r3, [r7, #6]
    mpu->gyro_offset.x = offset_x;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	897a      	ldrh	r2, [r7, #10]
 8006c5a:	831a      	strh	r2, [r3, #24]
    mpu->gyro_offset.y = offset_y;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	893a      	ldrh	r2, [r7, #8]
 8006c60:	835a      	strh	r2, [r3, #26]
    mpu->gyro_offset.z = offset_z;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	88fa      	ldrh	r2, [r7, #6]
 8006c66:	839a      	strh	r2, [r3, #28]

    return STATUS_OK;
 8006c68:	2300      	movs	r3, #0
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	3714      	adds	r7, #20
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bc80      	pop	{r7}
 8006c72:	4770      	bx	lr

08006c74 <MPU6050_SetAccelerometerOffset>:

status_t MPU6050_SetAccelerometerOffset(MPU6050_t *mpu, int16_t offset_x, int16_t offset_y, int16_t offset_z)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b085      	sub	sp, #20
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	60f8      	str	r0, [r7, #12]
 8006c7c:	4608      	mov	r0, r1
 8006c7e:	4611      	mov	r1, r2
 8006c80:	461a      	mov	r2, r3
 8006c82:	4603      	mov	r3, r0
 8006c84:	817b      	strh	r3, [r7, #10]
 8006c86:	460b      	mov	r3, r1
 8006c88:	813b      	strh	r3, [r7, #8]
 8006c8a:	4613      	mov	r3, r2
 8006c8c:	80fb      	strh	r3, [r7, #6]
    mpu->accel_offset.x = offset_x;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	897a      	ldrh	r2, [r7, #10]
 8006c92:	83da      	strh	r2, [r3, #30]
    mpu->accel_offset.y = offset_y;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	893a      	ldrh	r2, [r7, #8]
 8006c98:	841a      	strh	r2, [r3, #32]
    mpu->accel_offset.z = offset_z;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	88fa      	ldrh	r2, [r7, #6]
 8006c9e:	845a      	strh	r2, [r3, #34]	@ 0x22

    return STATUS_OK;
 8006ca0:	2300      	movs	r3, #0
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3714      	adds	r7, #20
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bc80      	pop	{r7}
 8006caa:	4770      	bx	lr

08006cac <MPU6050_ReadGyroscope>:
    
    return 0;
}

status_t MPU6050_ReadGyroscope(I2C_HandleTypeDef *hi2c, MPU6050_t *mpu)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b088      	sub	sp, #32
 8006cb0:	af04      	add	r7, sp, #16
 8006cb2:	6078      	str	r0, [r7, #4]
 8006cb4:	6039      	str	r1, [r7, #0]
    uint8_t data[6];

    // Read 6 bytes of RAW data starting from ACCEL_XOUT_H register.
    HAL_I2C_Mem_Read(hi2c, (mpu->address << 1), MPU6050_REG_GYRO_XOUT_H, 1, data, 6, MPU6050_DEFAULT_TIMEOUT);
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	781b      	ldrb	r3, [r3, #0]
 8006cba:	005b      	lsls	r3, r3, #1
 8006cbc:	b299      	uxth	r1, r3
 8006cbe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006cc2:	9302      	str	r3, [sp, #8]
 8006cc4:	2306      	movs	r3, #6
 8006cc6:	9301      	str	r3, [sp, #4]
 8006cc8:	f107 0308 	add.w	r3, r7, #8
 8006ccc:	9300      	str	r3, [sp, #0]
 8006cce:	2301      	movs	r3, #1
 8006cd0:	2243      	movs	r2, #67	@ 0x43
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f001 faee 	bl	80082b4 <HAL_I2C_Mem_Read>

    mpu->gyro_raw.x = (int16_t)(data[0] << 8 | data[1]) + mpu->gyro_offset.x;
 8006cd8:	7a3b      	ldrb	r3, [r7, #8]
 8006cda:	021b      	lsls	r3, r3, #8
 8006cdc:	b21a      	sxth	r2, r3
 8006cde:	7a7b      	ldrb	r3, [r7, #9]
 8006ce0:	b21b      	sxth	r3, r3
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	b21b      	sxth	r3, r3
 8006ce6:	b29a      	uxth	r2, r3
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8006cee:	b29b      	uxth	r3, r3
 8006cf0:	4413      	add	r3, r2
 8006cf2:	b29b      	uxth	r3, r3
 8006cf4:	b21a      	sxth	r2, r3
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	819a      	strh	r2, [r3, #12]
    mpu->gyro_raw.y = (int16_t)(data[2] << 8 | data[3]) + mpu->gyro_offset.y;
 8006cfa:	7abb      	ldrb	r3, [r7, #10]
 8006cfc:	021b      	lsls	r3, r3, #8
 8006cfe:	b21a      	sxth	r2, r3
 8006d00:	7afb      	ldrb	r3, [r7, #11]
 8006d02:	b21b      	sxth	r3, r3
 8006d04:	4313      	orrs	r3, r2
 8006d06:	b21b      	sxth	r3, r3
 8006d08:	b29a      	uxth	r2, r3
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8006d10:	b29b      	uxth	r3, r3
 8006d12:	4413      	add	r3, r2
 8006d14:	b29b      	uxth	r3, r3
 8006d16:	b21a      	sxth	r2, r3
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	81da      	strh	r2, [r3, #14]
    mpu->gyro_raw.z = (int16_t)(data[4] << 8 | data[5]) + mpu->gyro_offset.z;
 8006d1c:	7b3b      	ldrb	r3, [r7, #12]
 8006d1e:	021b      	lsls	r3, r3, #8
 8006d20:	b21a      	sxth	r2, r3
 8006d22:	7b7b      	ldrb	r3, [r7, #13]
 8006d24:	b21b      	sxth	r3, r3
 8006d26:	4313      	orrs	r3, r2
 8006d28:	b21b      	sxth	r3, r3
 8006d2a:	b29a      	uxth	r2, r3
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8006d32:	b29b      	uxth	r3, r3
 8006d34:	4413      	add	r3, r2
 8006d36:	b29b      	uxth	r3, r3
 8006d38:	b21a      	sxth	r2, r3
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	821a      	strh	r2, [r3, #16]

    // Convert the RAW data into angular acceleration in 'deg/s'
    mpu->gyro_scaled.x = mpu->gyro_raw.x * mpu->gyro_scaling_factor;
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8006d44:	4618      	mov	r0, r3
 8006d46:	f7f9 ff81 	bl	8000c4c <__aeabi_i2f>
 8006d4a:	4602      	mov	r2, r0
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	4619      	mov	r1, r3
 8006d52:	4610      	mov	r0, r2
 8006d54:	f7f9 ffce 	bl	8000cf4 <__aeabi_fmul>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	461a      	mov	r2, r3
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	629a      	str	r2, [r3, #40]	@ 0x28
    mpu->gyro_scaled.y = mpu->gyro_raw.y * mpu->gyro_scaling_factor;
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8006d66:	4618      	mov	r0, r3
 8006d68:	f7f9 ff70 	bl	8000c4c <__aeabi_i2f>
 8006d6c:	4602      	mov	r2, r0
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	685b      	ldr	r3, [r3, #4]
 8006d72:	4619      	mov	r1, r3
 8006d74:	4610      	mov	r0, r2
 8006d76:	f7f9 ffbd 	bl	8000cf4 <__aeabi_fmul>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	461a      	mov	r2, r3
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	62da      	str	r2, [r3, #44]	@ 0x2c
    mpu->gyro_scaled.z = mpu->gyro_raw.z * mpu->gyro_scaling_factor;
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8006d88:	4618      	mov	r0, r3
 8006d8a:	f7f9 ff5f 	bl	8000c4c <__aeabi_i2f>
 8006d8e:	4602      	mov	r2, r0
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	4619      	mov	r1, r3
 8006d96:	4610      	mov	r0, r2
 8006d98:	f7f9 ffac 	bl	8000cf4 <__aeabi_fmul>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	461a      	mov	r2, r3
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	631a      	str	r2, [r3, #48]	@ 0x30

    return STATUS_OK;
 8006da4:	2300      	movs	r3, #0
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	3710      	adds	r7, #16
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}

08006dae <MPU6050_ReadAccelerometer>:

status_t MPU6050_ReadAccelerometer(I2C_HandleTypeDef *hi2c, MPU6050_t *mpu)
{
 8006dae:	b580      	push	{r7, lr}
 8006db0:	b088      	sub	sp, #32
 8006db2:	af04      	add	r7, sp, #16
 8006db4:	6078      	str	r0, [r7, #4]
 8006db6:	6039      	str	r1, [r7, #0]
    uint8_t data[6];

    // Read 6 bytes of RAW data starting from ACCEL_XOUT_H register.
    HAL_I2C_Mem_Read(hi2c, (mpu->address << 1), MPU6050_REG_ACCEL_XOUT_H, 1, data, 6, MPU6050_DEFAULT_TIMEOUT);
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	781b      	ldrb	r3, [r3, #0]
 8006dbc:	005b      	lsls	r3, r3, #1
 8006dbe:	b299      	uxth	r1, r3
 8006dc0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006dc4:	9302      	str	r3, [sp, #8]
 8006dc6:	2306      	movs	r3, #6
 8006dc8:	9301      	str	r3, [sp, #4]
 8006dca:	f107 0308 	add.w	r3, r7, #8
 8006dce:	9300      	str	r3, [sp, #0]
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	223b      	movs	r2, #59	@ 0x3b
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f001 fa6d 	bl	80082b4 <HAL_I2C_Mem_Read>

    mpu->accel_raw.x = (int16_t)(data[0] << 8 | data[1]) + mpu->accel_offset.x;
 8006dda:	7a3b      	ldrb	r3, [r7, #8]
 8006ddc:	021b      	lsls	r3, r3, #8
 8006dde:	b21a      	sxth	r2, r3
 8006de0:	7a7b      	ldrb	r3, [r7, #9]
 8006de2:	b21b      	sxth	r3, r3
 8006de4:	4313      	orrs	r3, r2
 8006de6:	b21b      	sxth	r3, r3
 8006de8:	b29a      	uxth	r2, r3
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8006df0:	b29b      	uxth	r3, r3
 8006df2:	4413      	add	r3, r2
 8006df4:	b29b      	uxth	r3, r3
 8006df6:	b21a      	sxth	r2, r3
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	825a      	strh	r2, [r3, #18]
    mpu->accel_raw.y = (int16_t)(data[2] << 8 | data[3]) + mpu->accel_offset.y;
 8006dfc:	7abb      	ldrb	r3, [r7, #10]
 8006dfe:	021b      	lsls	r3, r3, #8
 8006e00:	b21a      	sxth	r2, r3
 8006e02:	7afb      	ldrb	r3, [r7, #11]
 8006e04:	b21b      	sxth	r3, r3
 8006e06:	4313      	orrs	r3, r2
 8006e08:	b21b      	sxth	r3, r3
 8006e0a:	b29a      	uxth	r2, r3
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8006e12:	b29b      	uxth	r3, r3
 8006e14:	4413      	add	r3, r2
 8006e16:	b29b      	uxth	r3, r3
 8006e18:	b21a      	sxth	r2, r3
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	829a      	strh	r2, [r3, #20]
    mpu->accel_raw.z = (int16_t)(data[4] << 8 | data[5]) + mpu->accel_offset.z;
 8006e1e:	7b3b      	ldrb	r3, [r7, #12]
 8006e20:	021b      	lsls	r3, r3, #8
 8006e22:	b21a      	sxth	r2, r3
 8006e24:	7b7b      	ldrb	r3, [r7, #13]
 8006e26:	b21b      	sxth	r3, r3
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	b21b      	sxth	r3, r3
 8006e2c:	b29a      	uxth	r2, r3
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 8006e34:	b29b      	uxth	r3, r3
 8006e36:	4413      	add	r3, r2
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	b21a      	sxth	r2, r3
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	82da      	strh	r2, [r3, #22]

    // Convert the RAW data into linear acceleration in 'm/s^2'
    mpu->accel_scaled.x = mpu->accel_raw.x * mpu->accel_scaling_factor;
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8006e46:	4618      	mov	r0, r3
 8006e48:	f7f9 ff00 	bl	8000c4c <__aeabi_i2f>
 8006e4c:	4602      	mov	r2, r0
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	689b      	ldr	r3, [r3, #8]
 8006e52:	4619      	mov	r1, r3
 8006e54:	4610      	mov	r0, r2
 8006e56:	f7f9 ff4d 	bl	8000cf4 <__aeabi_fmul>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	461a      	mov	r2, r3
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	635a      	str	r2, [r3, #52]	@ 0x34
    mpu->accel_scaled.y = mpu->accel_raw.y * mpu->accel_scaling_factor;
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8006e68:	4618      	mov	r0, r3
 8006e6a:	f7f9 feef 	bl	8000c4c <__aeabi_i2f>
 8006e6e:	4602      	mov	r2, r0
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	689b      	ldr	r3, [r3, #8]
 8006e74:	4619      	mov	r1, r3
 8006e76:	4610      	mov	r0, r2
 8006e78:	f7f9 ff3c 	bl	8000cf4 <__aeabi_fmul>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	461a      	mov	r2, r3
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	639a      	str	r2, [r3, #56]	@ 0x38
    mpu->accel_scaled.z = mpu->accel_raw.z * mpu->accel_scaling_factor;
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f7f9 fede 	bl	8000c4c <__aeabi_i2f>
 8006e90:	4602      	mov	r2, r0
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	689b      	ldr	r3, [r3, #8]
 8006e96:	4619      	mov	r1, r3
 8006e98:	4610      	mov	r0, r2
 8006e9a:	f7f9 ff2b 	bl	8000cf4 <__aeabi_fmul>
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	461a      	mov	r2, r3
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	63da      	str	r2, [r3, #60]	@ 0x3c

    return STATUS_OK;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	3710      	adds	r7, #16
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}

08006eb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b085      	sub	sp, #20
 8006eb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8006eb6:	4b15      	ldr	r3, [pc, #84]	@ (8006f0c <HAL_MspInit+0x5c>)
 8006eb8:	699b      	ldr	r3, [r3, #24]
 8006eba:	4a14      	ldr	r2, [pc, #80]	@ (8006f0c <HAL_MspInit+0x5c>)
 8006ebc:	f043 0301 	orr.w	r3, r3, #1
 8006ec0:	6193      	str	r3, [r2, #24]
 8006ec2:	4b12      	ldr	r3, [pc, #72]	@ (8006f0c <HAL_MspInit+0x5c>)
 8006ec4:	699b      	ldr	r3, [r3, #24]
 8006ec6:	f003 0301 	and.w	r3, r3, #1
 8006eca:	60bb      	str	r3, [r7, #8]
 8006ecc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006ece:	4b0f      	ldr	r3, [pc, #60]	@ (8006f0c <HAL_MspInit+0x5c>)
 8006ed0:	69db      	ldr	r3, [r3, #28]
 8006ed2:	4a0e      	ldr	r2, [pc, #56]	@ (8006f0c <HAL_MspInit+0x5c>)
 8006ed4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006ed8:	61d3      	str	r3, [r2, #28]
 8006eda:	4b0c      	ldr	r3, [pc, #48]	@ (8006f0c <HAL_MspInit+0x5c>)
 8006edc:	69db      	ldr	r3, [r3, #28]
 8006ede:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ee2:	607b      	str	r3, [r7, #4]
 8006ee4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8006ee6:	4b0a      	ldr	r3, [pc, #40]	@ (8006f10 <HAL_MspInit+0x60>)
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	60fb      	str	r3, [r7, #12]
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8006ef2:	60fb      	str	r3, [r7, #12]
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006efa:	60fb      	str	r3, [r7, #12]
 8006efc:	4a04      	ldr	r2, [pc, #16]	@ (8006f10 <HAL_MspInit+0x60>)
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006f02:	bf00      	nop
 8006f04:	3714      	adds	r7, #20
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bc80      	pop	{r7}
 8006f0a:	4770      	bx	lr
 8006f0c:	40021000 	.word	0x40021000
 8006f10:	40010000 	.word	0x40010000

08006f14 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b088      	sub	sp, #32
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f1c:	f107 0310 	add.w	r3, r7, #16
 8006f20:	2200      	movs	r2, #0
 8006f22:	601a      	str	r2, [r3, #0]
 8006f24:	605a      	str	r2, [r3, #4]
 8006f26:	609a      	str	r2, [r3, #8]
 8006f28:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4a15      	ldr	r2, [pc, #84]	@ (8006f84 <HAL_I2C_MspInit+0x70>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d123      	bne.n	8006f7c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006f34:	4b14      	ldr	r3, [pc, #80]	@ (8006f88 <HAL_I2C_MspInit+0x74>)
 8006f36:	699b      	ldr	r3, [r3, #24]
 8006f38:	4a13      	ldr	r2, [pc, #76]	@ (8006f88 <HAL_I2C_MspInit+0x74>)
 8006f3a:	f043 0308 	orr.w	r3, r3, #8
 8006f3e:	6193      	str	r3, [r2, #24]
 8006f40:	4b11      	ldr	r3, [pc, #68]	@ (8006f88 <HAL_I2C_MspInit+0x74>)
 8006f42:	699b      	ldr	r3, [r3, #24]
 8006f44:	f003 0308 	and.w	r3, r3, #8
 8006f48:	60fb      	str	r3, [r7, #12]
 8006f4a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006f4c:	23c0      	movs	r3, #192	@ 0xc0
 8006f4e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006f50:	2312      	movs	r3, #18
 8006f52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006f54:	2303      	movs	r3, #3
 8006f56:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006f58:	f107 0310 	add.w	r3, r7, #16
 8006f5c:	4619      	mov	r1, r3
 8006f5e:	480b      	ldr	r0, [pc, #44]	@ (8006f8c <HAL_I2C_MspInit+0x78>)
 8006f60:	f000 fdce 	bl	8007b00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006f64:	4b08      	ldr	r3, [pc, #32]	@ (8006f88 <HAL_I2C_MspInit+0x74>)
 8006f66:	69db      	ldr	r3, [r3, #28]
 8006f68:	4a07      	ldr	r2, [pc, #28]	@ (8006f88 <HAL_I2C_MspInit+0x74>)
 8006f6a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006f6e:	61d3      	str	r3, [r2, #28]
 8006f70:	4b05      	ldr	r3, [pc, #20]	@ (8006f88 <HAL_I2C_MspInit+0x74>)
 8006f72:	69db      	ldr	r3, [r3, #28]
 8006f74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006f78:	60bb      	str	r3, [r7, #8]
 8006f7a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8006f7c:	bf00      	nop
 8006f7e:	3720      	adds	r7, #32
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}
 8006f84:	40005400 	.word	0x40005400
 8006f88:	40021000 	.word	0x40021000
 8006f8c:	40010c00 	.word	0x40010c00

08006f90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b088      	sub	sp, #32
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f98:	f107 0310 	add.w	r3, r7, #16
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	601a      	str	r2, [r3, #0]
 8006fa0:	605a      	str	r2, [r3, #4]
 8006fa2:	609a      	str	r2, [r3, #8]
 8006fa4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a47      	ldr	r2, [pc, #284]	@ (80070c8 <HAL_UART_MspInit+0x138>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	f040 8086 	bne.w	80070be <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006fb2:	4b46      	ldr	r3, [pc, #280]	@ (80070cc <HAL_UART_MspInit+0x13c>)
 8006fb4:	699b      	ldr	r3, [r3, #24]
 8006fb6:	4a45      	ldr	r2, [pc, #276]	@ (80070cc <HAL_UART_MspInit+0x13c>)
 8006fb8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006fbc:	6193      	str	r3, [r2, #24]
 8006fbe:	4b43      	ldr	r3, [pc, #268]	@ (80070cc <HAL_UART_MspInit+0x13c>)
 8006fc0:	699b      	ldr	r3, [r3, #24]
 8006fc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006fc6:	60fb      	str	r3, [r7, #12]
 8006fc8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006fca:	4b40      	ldr	r3, [pc, #256]	@ (80070cc <HAL_UART_MspInit+0x13c>)
 8006fcc:	699b      	ldr	r3, [r3, #24]
 8006fce:	4a3f      	ldr	r2, [pc, #252]	@ (80070cc <HAL_UART_MspInit+0x13c>)
 8006fd0:	f043 0304 	orr.w	r3, r3, #4
 8006fd4:	6193      	str	r3, [r2, #24]
 8006fd6:	4b3d      	ldr	r3, [pc, #244]	@ (80070cc <HAL_UART_MspInit+0x13c>)
 8006fd8:	699b      	ldr	r3, [r3, #24]
 8006fda:	f003 0304 	and.w	r3, r3, #4
 8006fde:	60bb      	str	r3, [r7, #8]
 8006fe0:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006fe2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006fe6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006fe8:	2302      	movs	r3, #2
 8006fea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006fec:	2303      	movs	r3, #3
 8006fee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ff0:	f107 0310 	add.w	r3, r7, #16
 8006ff4:	4619      	mov	r1, r3
 8006ff6:	4836      	ldr	r0, [pc, #216]	@ (80070d0 <HAL_UART_MspInit+0x140>)
 8006ff8:	f000 fd82 	bl	8007b00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006ffc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007000:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007002:	2300      	movs	r3, #0
 8007004:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007006:	2300      	movs	r3, #0
 8007008:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800700a:	f107 0310 	add.w	r3, r7, #16
 800700e:	4619      	mov	r1, r3
 8007010:	482f      	ldr	r0, [pc, #188]	@ (80070d0 <HAL_UART_MspInit+0x140>)
 8007012:	f000 fd75 	bl	8007b00 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8007016:	4b2f      	ldr	r3, [pc, #188]	@ (80070d4 <HAL_UART_MspInit+0x144>)
 8007018:	4a2f      	ldr	r2, [pc, #188]	@ (80070d8 <HAL_UART_MspInit+0x148>)
 800701a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800701c:	4b2d      	ldr	r3, [pc, #180]	@ (80070d4 <HAL_UART_MspInit+0x144>)
 800701e:	2210      	movs	r2, #16
 8007020:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007022:	4b2c      	ldr	r3, [pc, #176]	@ (80070d4 <HAL_UART_MspInit+0x144>)
 8007024:	2200      	movs	r2, #0
 8007026:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007028:	4b2a      	ldr	r3, [pc, #168]	@ (80070d4 <HAL_UART_MspInit+0x144>)
 800702a:	2280      	movs	r2, #128	@ 0x80
 800702c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800702e:	4b29      	ldr	r3, [pc, #164]	@ (80070d4 <HAL_UART_MspInit+0x144>)
 8007030:	2200      	movs	r2, #0
 8007032:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007034:	4b27      	ldr	r3, [pc, #156]	@ (80070d4 <HAL_UART_MspInit+0x144>)
 8007036:	2200      	movs	r2, #0
 8007038:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800703a:	4b26      	ldr	r3, [pc, #152]	@ (80070d4 <HAL_UART_MspInit+0x144>)
 800703c:	2200      	movs	r2, #0
 800703e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007040:	4b24      	ldr	r3, [pc, #144]	@ (80070d4 <HAL_UART_MspInit+0x144>)
 8007042:	2200      	movs	r2, #0
 8007044:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8007046:	4823      	ldr	r0, [pc, #140]	@ (80070d4 <HAL_UART_MspInit+0x144>)
 8007048:	f000 fab8 	bl	80075bc <HAL_DMA_Init>
 800704c:	4603      	mov	r3, r0
 800704e:	2b00      	cmp	r3, #0
 8007050:	d001      	beq.n	8007056 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8007052:	f7fa fd3b 	bl	8001acc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	4a1e      	ldr	r2, [pc, #120]	@ (80070d4 <HAL_UART_MspInit+0x144>)
 800705a:	639a      	str	r2, [r3, #56]	@ 0x38
 800705c:	4a1d      	ldr	r2, [pc, #116]	@ (80070d4 <HAL_UART_MspInit+0x144>)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8007062:	4b1e      	ldr	r3, [pc, #120]	@ (80070dc <HAL_UART_MspInit+0x14c>)
 8007064:	4a1e      	ldr	r2, [pc, #120]	@ (80070e0 <HAL_UART_MspInit+0x150>)
 8007066:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007068:	4b1c      	ldr	r3, [pc, #112]	@ (80070dc <HAL_UART_MspInit+0x14c>)
 800706a:	2200      	movs	r2, #0
 800706c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800706e:	4b1b      	ldr	r3, [pc, #108]	@ (80070dc <HAL_UART_MspInit+0x14c>)
 8007070:	2200      	movs	r2, #0
 8007072:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007074:	4b19      	ldr	r3, [pc, #100]	@ (80070dc <HAL_UART_MspInit+0x14c>)
 8007076:	2280      	movs	r2, #128	@ 0x80
 8007078:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800707a:	4b18      	ldr	r3, [pc, #96]	@ (80070dc <HAL_UART_MspInit+0x14c>)
 800707c:	2200      	movs	r2, #0
 800707e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007080:	4b16      	ldr	r3, [pc, #88]	@ (80070dc <HAL_UART_MspInit+0x14c>)
 8007082:	2200      	movs	r2, #0
 8007084:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8007086:	4b15      	ldr	r3, [pc, #84]	@ (80070dc <HAL_UART_MspInit+0x14c>)
 8007088:	2200      	movs	r2, #0
 800708a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800708c:	4b13      	ldr	r3, [pc, #76]	@ (80070dc <HAL_UART_MspInit+0x14c>)
 800708e:	2200      	movs	r2, #0
 8007090:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8007092:	4812      	ldr	r0, [pc, #72]	@ (80070dc <HAL_UART_MspInit+0x14c>)
 8007094:	f000 fa92 	bl	80075bc <HAL_DMA_Init>
 8007098:	4603      	mov	r3, r0
 800709a:	2b00      	cmp	r3, #0
 800709c:	d001      	beq.n	80070a2 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 800709e:	f7fa fd15 	bl	8001acc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	4a0d      	ldr	r2, [pc, #52]	@ (80070dc <HAL_UART_MspInit+0x14c>)
 80070a6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80070a8:	4a0c      	ldr	r2, [pc, #48]	@ (80070dc <HAL_UART_MspInit+0x14c>)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80070ae:	2200      	movs	r2, #0
 80070b0:	2100      	movs	r1, #0
 80070b2:	2025      	movs	r0, #37	@ 0x25
 80070b4:	f000 fa4b 	bl	800754e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80070b8:	2025      	movs	r0, #37	@ 0x25
 80070ba:	f000 fa64 	bl	8007586 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80070be:	bf00      	nop
 80070c0:	3720      	adds	r7, #32
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}
 80070c6:	bf00      	nop
 80070c8:	40013800 	.word	0x40013800
 80070cc:	40021000 	.word	0x40021000
 80070d0:	40010800 	.word	0x40010800
 80070d4:	20000168 	.word	0x20000168
 80070d8:	40020044 	.word	0x40020044
 80070dc:	200001ac 	.word	0x200001ac
 80070e0:	40020058 	.word	0x40020058

080070e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80070e4:	b480      	push	{r7}
 80070e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80070e8:	bf00      	nop
 80070ea:	e7fd      	b.n	80070e8 <NMI_Handler+0x4>

080070ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80070ec:	b480      	push	{r7}
 80070ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80070f0:	bf00      	nop
 80070f2:	e7fd      	b.n	80070f0 <HardFault_Handler+0x4>

080070f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80070f4:	b480      	push	{r7}
 80070f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80070f8:	bf00      	nop
 80070fa:	e7fd      	b.n	80070f8 <MemManage_Handler+0x4>

080070fc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80070fc:	b480      	push	{r7}
 80070fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007100:	bf00      	nop
 8007102:	e7fd      	b.n	8007100 <BusFault_Handler+0x4>

08007104 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007104:	b480      	push	{r7}
 8007106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007108:	bf00      	nop
 800710a:	e7fd      	b.n	8007108 <UsageFault_Handler+0x4>

0800710c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800710c:	b480      	push	{r7}
 800710e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007110:	bf00      	nop
 8007112:	46bd      	mov	sp, r7
 8007114:	bc80      	pop	{r7}
 8007116:	4770      	bx	lr

08007118 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007118:	b480      	push	{r7}
 800711a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800711c:	bf00      	nop
 800711e:	46bd      	mov	sp, r7
 8007120:	bc80      	pop	{r7}
 8007122:	4770      	bx	lr

08007124 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007124:	b480      	push	{r7}
 8007126:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007128:	bf00      	nop
 800712a:	46bd      	mov	sp, r7
 800712c:	bc80      	pop	{r7}
 800712e:	4770      	bx	lr

08007130 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007134:	f000 f8f4 	bl	8007320 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007138:	bf00      	nop
 800713a:	bd80      	pop	{r7, pc}

0800713c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8007140:	4802      	ldr	r0, [pc, #8]	@ (800714c <DMA1_Channel4_IRQHandler+0x10>)
 8007142:	f000 fba9 	bl	8007898 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8007146:	bf00      	nop
 8007148:	bd80      	pop	{r7, pc}
 800714a:	bf00      	nop
 800714c:	20000168 	.word	0x20000168

08007150 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8007154:	4802      	ldr	r0, [pc, #8]	@ (8007160 <DMA1_Channel5_IRQHandler+0x10>)
 8007156:	f000 fb9f 	bl	8007898 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800715a:	bf00      	nop
 800715c:	bd80      	pop	{r7, pc}
 800715e:	bf00      	nop
 8007160:	200001ac 	.word	0x200001ac

08007164 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart_rosserial);
 8007168:	4802      	ldr	r0, [pc, #8]	@ (8007174 <USART1_IRQHandler+0x10>)
 800716a:	f002 fbb5 	bl	80098d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800716e:	bf00      	nop
 8007170:	bd80      	pop	{r7, pc}
 8007172:	bf00      	nop
 8007174:	20000120 	.word	0x20000120

08007178 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b086      	sub	sp, #24
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007180:	4a14      	ldr	r2, [pc, #80]	@ (80071d4 <_sbrk+0x5c>)
 8007182:	4b15      	ldr	r3, [pc, #84]	@ (80071d8 <_sbrk+0x60>)
 8007184:	1ad3      	subs	r3, r2, r3
 8007186:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800718c:	4b13      	ldr	r3, [pc, #76]	@ (80071dc <_sbrk+0x64>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d102      	bne.n	800719a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007194:	4b11      	ldr	r3, [pc, #68]	@ (80071dc <_sbrk+0x64>)
 8007196:	4a12      	ldr	r2, [pc, #72]	@ (80071e0 <_sbrk+0x68>)
 8007198:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800719a:	4b10      	ldr	r3, [pc, #64]	@ (80071dc <_sbrk+0x64>)
 800719c:	681a      	ldr	r2, [r3, #0]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	4413      	add	r3, r2
 80071a2:	693a      	ldr	r2, [r7, #16]
 80071a4:	429a      	cmp	r2, r3
 80071a6:	d207      	bcs.n	80071b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80071a8:	f003 fbca 	bl	800a940 <__errno>
 80071ac:	4603      	mov	r3, r0
 80071ae:	220c      	movs	r2, #12
 80071b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80071b2:	f04f 33ff 	mov.w	r3, #4294967295
 80071b6:	e009      	b.n	80071cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80071b8:	4b08      	ldr	r3, [pc, #32]	@ (80071dc <_sbrk+0x64>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80071be:	4b07      	ldr	r3, [pc, #28]	@ (80071dc <_sbrk+0x64>)
 80071c0:	681a      	ldr	r2, [r3, #0]
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	4413      	add	r3, r2
 80071c6:	4a05      	ldr	r2, [pc, #20]	@ (80071dc <_sbrk+0x64>)
 80071c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80071ca:	68fb      	ldr	r3, [r7, #12]
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	3718      	adds	r7, #24
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}
 80071d4:	20005000 	.word	0x20005000
 80071d8:	00000400 	.word	0x00000400
 80071dc:	20004570 	.word	0x20004570
 80071e0:	200046c0 	.word	0x200046c0

080071e4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80071e4:	b480      	push	{r7}
 80071e6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80071e8:	bf00      	nop
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bc80      	pop	{r7}
 80071ee:	4770      	bx	lr

080071f0 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b085      	sub	sp, #20
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
 80071f8:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	0a5a      	lsrs	r2, r3, #9
 8007200:	490f      	ldr	r1, [pc, #60]	@ (8007240 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8007202:	fba1 1202 	umull	r1, r2, r1, r2
 8007206:	09d2      	lsrs	r2, r2, #7
 8007208:	490e      	ldr	r1, [pc, #56]	@ (8007244 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800720a:	fb01 f202 	mul.w	r2, r1, r2
 800720e:	1a9b      	subs	r3, r3, r2
 8007210:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	0a5b      	lsrs	r3, r3, #9
 8007218:	4a09      	ldr	r2, [pc, #36]	@ (8007240 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800721a:	fba2 2303 	umull	r2, r3, r2, r3
 800721e:	09db      	lsrs	r3, r3, #7
 8007220:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681a      	ldr	r2, [r3, #0]
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	441a      	add	r2, r3
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	68fa      	ldr	r2, [r7, #12]
 8007232:	601a      	str	r2, [r3, #0]
}
 8007234:	bf00      	nop
 8007236:	3714      	adds	r7, #20
 8007238:	46bd      	mov	sp, r7
 800723a:	bc80      	pop	{r7}
 800723c:	4770      	bx	lr
 800723e:	bf00      	nop
 8007240:	00044b83 	.word	0x00044b83
 8007244:	3b9aca00 	.word	0x3b9aca00

08007248 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8007248:	f7ff ffcc 	bl	80071e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800724c:	480b      	ldr	r0, [pc, #44]	@ (800727c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800724e:	490c      	ldr	r1, [pc, #48]	@ (8007280 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8007250:	4a0c      	ldr	r2, [pc, #48]	@ (8007284 <LoopFillZerobss+0x16>)
  movs r3, #0
 8007252:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007254:	e002      	b.n	800725c <LoopCopyDataInit>

08007256 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007256:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007258:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800725a:	3304      	adds	r3, #4

0800725c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800725c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800725e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007260:	d3f9      	bcc.n	8007256 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007262:	4a09      	ldr	r2, [pc, #36]	@ (8007288 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8007264:	4c09      	ldr	r4, [pc, #36]	@ (800728c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8007266:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007268:	e001      	b.n	800726e <LoopFillZerobss>

0800726a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800726a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800726c:	3204      	adds	r2, #4

0800726e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800726e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007270:	d3fb      	bcc.n	800726a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8007272:	f003 fb6b 	bl	800a94c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8007276:	f7fa fafb 	bl	8001870 <main>
  bx lr
 800727a:	4770      	bx	lr
  ldr r0, =_sdata
 800727c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007280:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 8007284:	0800b04c 	.word	0x0800b04c
  ldr r2, =_sbss
 8007288:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 800728c:	200046c0 	.word	0x200046c0

08007290 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007290:	e7fe      	b.n	8007290 <ADC1_2_IRQHandler>
	...

08007294 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007298:	4b08      	ldr	r3, [pc, #32]	@ (80072bc <HAL_Init+0x28>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a07      	ldr	r2, [pc, #28]	@ (80072bc <HAL_Init+0x28>)
 800729e:	f043 0310 	orr.w	r3, r3, #16
 80072a2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80072a4:	2003      	movs	r0, #3
 80072a6:	f000 f947 	bl	8007538 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80072aa:	200f      	movs	r0, #15
 80072ac:	f000 f808 	bl	80072c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80072b0:	f7ff fdfe 	bl	8006eb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80072b4:	2300      	movs	r3, #0
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	bd80      	pop	{r7, pc}
 80072ba:	bf00      	nop
 80072bc:	40022000 	.word	0x40022000

080072c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b082      	sub	sp, #8
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80072c8:	4b12      	ldr	r3, [pc, #72]	@ (8007314 <HAL_InitTick+0x54>)
 80072ca:	681a      	ldr	r2, [r3, #0]
 80072cc:	4b12      	ldr	r3, [pc, #72]	@ (8007318 <HAL_InitTick+0x58>)
 80072ce:	781b      	ldrb	r3, [r3, #0]
 80072d0:	4619      	mov	r1, r3
 80072d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80072d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80072da:	fbb2 f3f3 	udiv	r3, r2, r3
 80072de:	4618      	mov	r0, r3
 80072e0:	f000 f95f 	bl	80075a2 <HAL_SYSTICK_Config>
 80072e4:	4603      	mov	r3, r0
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d001      	beq.n	80072ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80072ea:	2301      	movs	r3, #1
 80072ec:	e00e      	b.n	800730c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2b0f      	cmp	r3, #15
 80072f2:	d80a      	bhi.n	800730a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80072f4:	2200      	movs	r2, #0
 80072f6:	6879      	ldr	r1, [r7, #4]
 80072f8:	f04f 30ff 	mov.w	r0, #4294967295
 80072fc:	f000 f927 	bl	800754e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007300:	4a06      	ldr	r2, [pc, #24]	@ (800731c <HAL_InitTick+0x5c>)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007306:	2300      	movs	r3, #0
 8007308:	e000      	b.n	800730c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800730a:	2301      	movs	r3, #1
}
 800730c:	4618      	mov	r0, r3
 800730e:	3708      	adds	r7, #8
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}
 8007314:	20000044 	.word	0x20000044
 8007318:	2000004c 	.word	0x2000004c
 800731c:	20000048 	.word	0x20000048

08007320 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007320:	b480      	push	{r7}
 8007322:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007324:	4b05      	ldr	r3, [pc, #20]	@ (800733c <HAL_IncTick+0x1c>)
 8007326:	781b      	ldrb	r3, [r3, #0]
 8007328:	461a      	mov	r2, r3
 800732a:	4b05      	ldr	r3, [pc, #20]	@ (8007340 <HAL_IncTick+0x20>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4413      	add	r3, r2
 8007330:	4a03      	ldr	r2, [pc, #12]	@ (8007340 <HAL_IncTick+0x20>)
 8007332:	6013      	str	r3, [r2, #0]
}
 8007334:	bf00      	nop
 8007336:	46bd      	mov	sp, r7
 8007338:	bc80      	pop	{r7}
 800733a:	4770      	bx	lr
 800733c:	2000004c 	.word	0x2000004c
 8007340:	20004574 	.word	0x20004574

08007344 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007344:	b480      	push	{r7}
 8007346:	af00      	add	r7, sp, #0
  return uwTick;
 8007348:	4b02      	ldr	r3, [pc, #8]	@ (8007354 <HAL_GetTick+0x10>)
 800734a:	681b      	ldr	r3, [r3, #0]
}
 800734c:	4618      	mov	r0, r3
 800734e:	46bd      	mov	sp, r7
 8007350:	bc80      	pop	{r7}
 8007352:	4770      	bx	lr
 8007354:	20004574 	.word	0x20004574

08007358 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b084      	sub	sp, #16
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007360:	f7ff fff0 	bl	8007344 <HAL_GetTick>
 8007364:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007370:	d005      	beq.n	800737e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007372:	4b0a      	ldr	r3, [pc, #40]	@ (800739c <HAL_Delay+0x44>)
 8007374:	781b      	ldrb	r3, [r3, #0]
 8007376:	461a      	mov	r2, r3
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	4413      	add	r3, r2
 800737c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800737e:	bf00      	nop
 8007380:	f7ff ffe0 	bl	8007344 <HAL_GetTick>
 8007384:	4602      	mov	r2, r0
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	1ad3      	subs	r3, r2, r3
 800738a:	68fa      	ldr	r2, [r7, #12]
 800738c:	429a      	cmp	r2, r3
 800738e:	d8f7      	bhi.n	8007380 <HAL_Delay+0x28>
  {
  }
}
 8007390:	bf00      	nop
 8007392:	bf00      	nop
 8007394:	3710      	adds	r7, #16
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}
 800739a:	bf00      	nop
 800739c:	2000004c 	.word	0x2000004c

080073a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b085      	sub	sp, #20
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f003 0307 	and.w	r3, r3, #7
 80073ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80073b0:	4b0c      	ldr	r3, [pc, #48]	@ (80073e4 <__NVIC_SetPriorityGrouping+0x44>)
 80073b2:	68db      	ldr	r3, [r3, #12]
 80073b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80073b6:	68ba      	ldr	r2, [r7, #8]
 80073b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80073bc:	4013      	ands	r3, r2
 80073be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80073c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80073cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80073d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80073d2:	4a04      	ldr	r2, [pc, #16]	@ (80073e4 <__NVIC_SetPriorityGrouping+0x44>)
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	60d3      	str	r3, [r2, #12]
}
 80073d8:	bf00      	nop
 80073da:	3714      	adds	r7, #20
 80073dc:	46bd      	mov	sp, r7
 80073de:	bc80      	pop	{r7}
 80073e0:	4770      	bx	lr
 80073e2:	bf00      	nop
 80073e4:	e000ed00 	.word	0xe000ed00

080073e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80073e8:	b480      	push	{r7}
 80073ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80073ec:	4b04      	ldr	r3, [pc, #16]	@ (8007400 <__NVIC_GetPriorityGrouping+0x18>)
 80073ee:	68db      	ldr	r3, [r3, #12]
 80073f0:	0a1b      	lsrs	r3, r3, #8
 80073f2:	f003 0307 	and.w	r3, r3, #7
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bc80      	pop	{r7}
 80073fc:	4770      	bx	lr
 80073fe:	bf00      	nop
 8007400:	e000ed00 	.word	0xe000ed00

08007404 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007404:	b480      	push	{r7}
 8007406:	b083      	sub	sp, #12
 8007408:	af00      	add	r7, sp, #0
 800740a:	4603      	mov	r3, r0
 800740c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800740e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007412:	2b00      	cmp	r3, #0
 8007414:	db0b      	blt.n	800742e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007416:	79fb      	ldrb	r3, [r7, #7]
 8007418:	f003 021f 	and.w	r2, r3, #31
 800741c:	4906      	ldr	r1, [pc, #24]	@ (8007438 <__NVIC_EnableIRQ+0x34>)
 800741e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007422:	095b      	lsrs	r3, r3, #5
 8007424:	2001      	movs	r0, #1
 8007426:	fa00 f202 	lsl.w	r2, r0, r2
 800742a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800742e:	bf00      	nop
 8007430:	370c      	adds	r7, #12
 8007432:	46bd      	mov	sp, r7
 8007434:	bc80      	pop	{r7}
 8007436:	4770      	bx	lr
 8007438:	e000e100 	.word	0xe000e100

0800743c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800743c:	b480      	push	{r7}
 800743e:	b083      	sub	sp, #12
 8007440:	af00      	add	r7, sp, #0
 8007442:	4603      	mov	r3, r0
 8007444:	6039      	str	r1, [r7, #0]
 8007446:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007448:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800744c:	2b00      	cmp	r3, #0
 800744e:	db0a      	blt.n	8007466 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	b2da      	uxtb	r2, r3
 8007454:	490c      	ldr	r1, [pc, #48]	@ (8007488 <__NVIC_SetPriority+0x4c>)
 8007456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800745a:	0112      	lsls	r2, r2, #4
 800745c:	b2d2      	uxtb	r2, r2
 800745e:	440b      	add	r3, r1
 8007460:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007464:	e00a      	b.n	800747c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	b2da      	uxtb	r2, r3
 800746a:	4908      	ldr	r1, [pc, #32]	@ (800748c <__NVIC_SetPriority+0x50>)
 800746c:	79fb      	ldrb	r3, [r7, #7]
 800746e:	f003 030f 	and.w	r3, r3, #15
 8007472:	3b04      	subs	r3, #4
 8007474:	0112      	lsls	r2, r2, #4
 8007476:	b2d2      	uxtb	r2, r2
 8007478:	440b      	add	r3, r1
 800747a:	761a      	strb	r2, [r3, #24]
}
 800747c:	bf00      	nop
 800747e:	370c      	adds	r7, #12
 8007480:	46bd      	mov	sp, r7
 8007482:	bc80      	pop	{r7}
 8007484:	4770      	bx	lr
 8007486:	bf00      	nop
 8007488:	e000e100 	.word	0xe000e100
 800748c:	e000ed00 	.word	0xe000ed00

08007490 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007490:	b480      	push	{r7}
 8007492:	b089      	sub	sp, #36	@ 0x24
 8007494:	af00      	add	r7, sp, #0
 8007496:	60f8      	str	r0, [r7, #12]
 8007498:	60b9      	str	r1, [r7, #8]
 800749a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	f003 0307 	and.w	r3, r3, #7
 80074a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80074a4:	69fb      	ldr	r3, [r7, #28]
 80074a6:	f1c3 0307 	rsb	r3, r3, #7
 80074aa:	2b04      	cmp	r3, #4
 80074ac:	bf28      	it	cs
 80074ae:	2304      	movcs	r3, #4
 80074b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80074b2:	69fb      	ldr	r3, [r7, #28]
 80074b4:	3304      	adds	r3, #4
 80074b6:	2b06      	cmp	r3, #6
 80074b8:	d902      	bls.n	80074c0 <NVIC_EncodePriority+0x30>
 80074ba:	69fb      	ldr	r3, [r7, #28]
 80074bc:	3b03      	subs	r3, #3
 80074be:	e000      	b.n	80074c2 <NVIC_EncodePriority+0x32>
 80074c0:	2300      	movs	r3, #0
 80074c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80074c4:	f04f 32ff 	mov.w	r2, #4294967295
 80074c8:	69bb      	ldr	r3, [r7, #24]
 80074ca:	fa02 f303 	lsl.w	r3, r2, r3
 80074ce:	43da      	mvns	r2, r3
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	401a      	ands	r2, r3
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80074d8:	f04f 31ff 	mov.w	r1, #4294967295
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	fa01 f303 	lsl.w	r3, r1, r3
 80074e2:	43d9      	mvns	r1, r3
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80074e8:	4313      	orrs	r3, r2
         );
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3724      	adds	r7, #36	@ 0x24
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bc80      	pop	{r7}
 80074f2:	4770      	bx	lr

080074f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b082      	sub	sp, #8
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	3b01      	subs	r3, #1
 8007500:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007504:	d301      	bcc.n	800750a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007506:	2301      	movs	r3, #1
 8007508:	e00f      	b.n	800752a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800750a:	4a0a      	ldr	r2, [pc, #40]	@ (8007534 <SysTick_Config+0x40>)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	3b01      	subs	r3, #1
 8007510:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007512:	210f      	movs	r1, #15
 8007514:	f04f 30ff 	mov.w	r0, #4294967295
 8007518:	f7ff ff90 	bl	800743c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800751c:	4b05      	ldr	r3, [pc, #20]	@ (8007534 <SysTick_Config+0x40>)
 800751e:	2200      	movs	r2, #0
 8007520:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007522:	4b04      	ldr	r3, [pc, #16]	@ (8007534 <SysTick_Config+0x40>)
 8007524:	2207      	movs	r2, #7
 8007526:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007528:	2300      	movs	r3, #0
}
 800752a:	4618      	mov	r0, r3
 800752c:	3708      	adds	r7, #8
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}
 8007532:	bf00      	nop
 8007534:	e000e010 	.word	0xe000e010

08007538 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b082      	sub	sp, #8
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f7ff ff2d 	bl	80073a0 <__NVIC_SetPriorityGrouping>
}
 8007546:	bf00      	nop
 8007548:	3708      	adds	r7, #8
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}

0800754e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800754e:	b580      	push	{r7, lr}
 8007550:	b086      	sub	sp, #24
 8007552:	af00      	add	r7, sp, #0
 8007554:	4603      	mov	r3, r0
 8007556:	60b9      	str	r1, [r7, #8]
 8007558:	607a      	str	r2, [r7, #4]
 800755a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800755c:	2300      	movs	r3, #0
 800755e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007560:	f7ff ff42 	bl	80073e8 <__NVIC_GetPriorityGrouping>
 8007564:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007566:	687a      	ldr	r2, [r7, #4]
 8007568:	68b9      	ldr	r1, [r7, #8]
 800756a:	6978      	ldr	r0, [r7, #20]
 800756c:	f7ff ff90 	bl	8007490 <NVIC_EncodePriority>
 8007570:	4602      	mov	r2, r0
 8007572:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007576:	4611      	mov	r1, r2
 8007578:	4618      	mov	r0, r3
 800757a:	f7ff ff5f 	bl	800743c <__NVIC_SetPriority>
}
 800757e:	bf00      	nop
 8007580:	3718      	adds	r7, #24
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}

08007586 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007586:	b580      	push	{r7, lr}
 8007588:	b082      	sub	sp, #8
 800758a:	af00      	add	r7, sp, #0
 800758c:	4603      	mov	r3, r0
 800758e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007590:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007594:	4618      	mov	r0, r3
 8007596:	f7ff ff35 	bl	8007404 <__NVIC_EnableIRQ>
}
 800759a:	bf00      	nop
 800759c:	3708      	adds	r7, #8
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}

080075a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80075a2:	b580      	push	{r7, lr}
 80075a4:	b082      	sub	sp, #8
 80075a6:	af00      	add	r7, sp, #0
 80075a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f7ff ffa2 	bl	80074f4 <SysTick_Config>
 80075b0:	4603      	mov	r3, r0
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	3708      	adds	r7, #8
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}
	...

080075bc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80075bc:	b480      	push	{r7}
 80075be:	b085      	sub	sp, #20
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80075c4:	2300      	movs	r3, #0
 80075c6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d101      	bne.n	80075d2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80075ce:	2301      	movs	r3, #1
 80075d0:	e043      	b.n	800765a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	461a      	mov	r2, r3
 80075d8:	4b22      	ldr	r3, [pc, #136]	@ (8007664 <HAL_DMA_Init+0xa8>)
 80075da:	4413      	add	r3, r2
 80075dc:	4a22      	ldr	r2, [pc, #136]	@ (8007668 <HAL_DMA_Init+0xac>)
 80075de:	fba2 2303 	umull	r2, r3, r2, r3
 80075e2:	091b      	lsrs	r3, r3, #4
 80075e4:	009a      	lsls	r2, r3, #2
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	4a1f      	ldr	r2, [pc, #124]	@ (800766c <HAL_DMA_Init+0xb0>)
 80075ee:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2202      	movs	r2, #2
 80075f4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8007606:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800760a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8007614:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	68db      	ldr	r3, [r3, #12]
 800761a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007620:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	695b      	ldr	r3, [r3, #20]
 8007626:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800762c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	69db      	ldr	r3, [r3, #28]
 8007632:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007634:	68fa      	ldr	r2, [r7, #12]
 8007636:	4313      	orrs	r3, r2
 8007638:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	68fa      	ldr	r2, [r7, #12]
 8007640:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2200      	movs	r2, #0
 8007646:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2201      	movs	r2, #1
 800764c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2200      	movs	r2, #0
 8007654:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8007658:	2300      	movs	r3, #0
}
 800765a:	4618      	mov	r0, r3
 800765c:	3714      	adds	r7, #20
 800765e:	46bd      	mov	sp, r7
 8007660:	bc80      	pop	{r7}
 8007662:	4770      	bx	lr
 8007664:	bffdfff8 	.word	0xbffdfff8
 8007668:	cccccccd 	.word	0xcccccccd
 800766c:	40020000 	.word	0x40020000

08007670 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b086      	sub	sp, #24
 8007674:	af00      	add	r7, sp, #0
 8007676:	60f8      	str	r0, [r7, #12]
 8007678:	60b9      	str	r1, [r7, #8]
 800767a:	607a      	str	r2, [r7, #4]
 800767c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800767e:	2300      	movs	r3, #0
 8007680:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007688:	2b01      	cmp	r3, #1
 800768a:	d101      	bne.n	8007690 <HAL_DMA_Start_IT+0x20>
 800768c:	2302      	movs	r3, #2
 800768e:	e04b      	b.n	8007728 <HAL_DMA_Start_IT+0xb8>
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	2201      	movs	r2, #1
 8007694:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800769e:	b2db      	uxtb	r3, r3
 80076a0:	2b01      	cmp	r3, #1
 80076a2:	d13a      	bne.n	800771a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	2202      	movs	r2, #2
 80076a8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	2200      	movs	r2, #0
 80076b0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	681a      	ldr	r2, [r3, #0]
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f022 0201 	bic.w	r2, r2, #1
 80076c0:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	687a      	ldr	r2, [r7, #4]
 80076c6:	68b9      	ldr	r1, [r7, #8]
 80076c8:	68f8      	ldr	r0, [r7, #12]
 80076ca:	f000 f9eb 	bl	8007aa4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d008      	beq.n	80076e8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	681a      	ldr	r2, [r3, #0]
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f042 020e 	orr.w	r2, r2, #14
 80076e4:	601a      	str	r2, [r3, #0]
 80076e6:	e00f      	b.n	8007708 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	681a      	ldr	r2, [r3, #0]
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f022 0204 	bic.w	r2, r2, #4
 80076f6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	681a      	ldr	r2, [r3, #0]
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f042 020a 	orr.w	r2, r2, #10
 8007706:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	681a      	ldr	r2, [r3, #0]
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f042 0201 	orr.w	r2, r2, #1
 8007716:	601a      	str	r2, [r3, #0]
 8007718:	e005      	b.n	8007726 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	2200      	movs	r2, #0
 800771e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8007722:	2302      	movs	r3, #2
 8007724:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8007726:	7dfb      	ldrb	r3, [r7, #23]
}
 8007728:	4618      	mov	r0, r3
 800772a:	3718      	adds	r7, #24
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}

08007730 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007730:	b480      	push	{r7}
 8007732:	b085      	sub	sp, #20
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007738:	2300      	movs	r3, #0
 800773a:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8007742:	b2db      	uxtb	r3, r3
 8007744:	2b02      	cmp	r3, #2
 8007746:	d008      	beq.n	800775a <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2204      	movs	r2, #4
 800774c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2200      	movs	r2, #0
 8007752:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8007756:	2301      	movs	r3, #1
 8007758:	e020      	b.n	800779c <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	681a      	ldr	r2, [r3, #0]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f022 020e 	bic.w	r2, r2, #14
 8007768:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	681a      	ldr	r2, [r3, #0]
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f022 0201 	bic.w	r2, r2, #1
 8007778:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007782:	2101      	movs	r1, #1
 8007784:	fa01 f202 	lsl.w	r2, r1, r2
 8007788:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2201      	movs	r2, #1
 800778e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2200      	movs	r2, #0
 8007796:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800779a:	7bfb      	ldrb	r3, [r7, #15]
}
 800779c:	4618      	mov	r0, r3
 800779e:	3714      	adds	r7, #20
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bc80      	pop	{r7}
 80077a4:	4770      	bx	lr
	...

080077a8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b084      	sub	sp, #16
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80077b0:	2300      	movs	r3, #0
 80077b2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80077ba:	b2db      	uxtb	r3, r3
 80077bc:	2b02      	cmp	r3, #2
 80077be:	d005      	beq.n	80077cc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2204      	movs	r2, #4
 80077c4:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80077c6:	2301      	movs	r3, #1
 80077c8:	73fb      	strb	r3, [r7, #15]
 80077ca:	e051      	b.n	8007870 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	681a      	ldr	r2, [r3, #0]
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f022 020e 	bic.w	r2, r2, #14
 80077da:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	681a      	ldr	r2, [r3, #0]
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f022 0201 	bic.w	r2, r2, #1
 80077ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4a22      	ldr	r2, [pc, #136]	@ (800787c <HAL_DMA_Abort_IT+0xd4>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d029      	beq.n	800784a <HAL_DMA_Abort_IT+0xa2>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a21      	ldr	r2, [pc, #132]	@ (8007880 <HAL_DMA_Abort_IT+0xd8>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d022      	beq.n	8007846 <HAL_DMA_Abort_IT+0x9e>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4a1f      	ldr	r2, [pc, #124]	@ (8007884 <HAL_DMA_Abort_IT+0xdc>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d01a      	beq.n	8007840 <HAL_DMA_Abort_IT+0x98>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4a1e      	ldr	r2, [pc, #120]	@ (8007888 <HAL_DMA_Abort_IT+0xe0>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d012      	beq.n	800783a <HAL_DMA_Abort_IT+0x92>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4a1c      	ldr	r2, [pc, #112]	@ (800788c <HAL_DMA_Abort_IT+0xe4>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d00a      	beq.n	8007834 <HAL_DMA_Abort_IT+0x8c>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4a1b      	ldr	r2, [pc, #108]	@ (8007890 <HAL_DMA_Abort_IT+0xe8>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d102      	bne.n	800782e <HAL_DMA_Abort_IT+0x86>
 8007828:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800782c:	e00e      	b.n	800784c <HAL_DMA_Abort_IT+0xa4>
 800782e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007832:	e00b      	b.n	800784c <HAL_DMA_Abort_IT+0xa4>
 8007834:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8007838:	e008      	b.n	800784c <HAL_DMA_Abort_IT+0xa4>
 800783a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800783e:	e005      	b.n	800784c <HAL_DMA_Abort_IT+0xa4>
 8007840:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007844:	e002      	b.n	800784c <HAL_DMA_Abort_IT+0xa4>
 8007846:	2310      	movs	r3, #16
 8007848:	e000      	b.n	800784c <HAL_DMA_Abort_IT+0xa4>
 800784a:	2301      	movs	r3, #1
 800784c:	4a11      	ldr	r2, [pc, #68]	@ (8007894 <HAL_DMA_Abort_IT+0xec>)
 800784e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2201      	movs	r2, #1
 8007854:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2200      	movs	r2, #0
 800785c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007864:	2b00      	cmp	r3, #0
 8007866:	d003      	beq.n	8007870 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	4798      	blx	r3
    } 
  }
  return status;
 8007870:	7bfb      	ldrb	r3, [r7, #15]
}
 8007872:	4618      	mov	r0, r3
 8007874:	3710      	adds	r7, #16
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}
 800787a:	bf00      	nop
 800787c:	40020008 	.word	0x40020008
 8007880:	4002001c 	.word	0x4002001c
 8007884:	40020030 	.word	0x40020030
 8007888:	40020044 	.word	0x40020044
 800788c:	40020058 	.word	0x40020058
 8007890:	4002006c 	.word	0x4002006c
 8007894:	40020000 	.word	0x40020000

08007898 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b084      	sub	sp, #16
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078b4:	2204      	movs	r2, #4
 80078b6:	409a      	lsls	r2, r3
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	4013      	ands	r3, r2
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d04f      	beq.n	8007960 <HAL_DMA_IRQHandler+0xc8>
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	f003 0304 	and.w	r3, r3, #4
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d04a      	beq.n	8007960 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f003 0320 	and.w	r3, r3, #32
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d107      	bne.n	80078e8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	681a      	ldr	r2, [r3, #0]
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f022 0204 	bic.w	r2, r2, #4
 80078e6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	4a66      	ldr	r2, [pc, #408]	@ (8007a88 <HAL_DMA_IRQHandler+0x1f0>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d029      	beq.n	8007946 <HAL_DMA_IRQHandler+0xae>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	4a65      	ldr	r2, [pc, #404]	@ (8007a8c <HAL_DMA_IRQHandler+0x1f4>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d022      	beq.n	8007942 <HAL_DMA_IRQHandler+0xaa>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a63      	ldr	r2, [pc, #396]	@ (8007a90 <HAL_DMA_IRQHandler+0x1f8>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d01a      	beq.n	800793c <HAL_DMA_IRQHandler+0xa4>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	4a62      	ldr	r2, [pc, #392]	@ (8007a94 <HAL_DMA_IRQHandler+0x1fc>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d012      	beq.n	8007936 <HAL_DMA_IRQHandler+0x9e>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4a60      	ldr	r2, [pc, #384]	@ (8007a98 <HAL_DMA_IRQHandler+0x200>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d00a      	beq.n	8007930 <HAL_DMA_IRQHandler+0x98>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	4a5f      	ldr	r2, [pc, #380]	@ (8007a9c <HAL_DMA_IRQHandler+0x204>)
 8007920:	4293      	cmp	r3, r2
 8007922:	d102      	bne.n	800792a <HAL_DMA_IRQHandler+0x92>
 8007924:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8007928:	e00e      	b.n	8007948 <HAL_DMA_IRQHandler+0xb0>
 800792a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800792e:	e00b      	b.n	8007948 <HAL_DMA_IRQHandler+0xb0>
 8007930:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8007934:	e008      	b.n	8007948 <HAL_DMA_IRQHandler+0xb0>
 8007936:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800793a:	e005      	b.n	8007948 <HAL_DMA_IRQHandler+0xb0>
 800793c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007940:	e002      	b.n	8007948 <HAL_DMA_IRQHandler+0xb0>
 8007942:	2340      	movs	r3, #64	@ 0x40
 8007944:	e000      	b.n	8007948 <HAL_DMA_IRQHandler+0xb0>
 8007946:	2304      	movs	r3, #4
 8007948:	4a55      	ldr	r2, [pc, #340]	@ (8007aa0 <HAL_DMA_IRQHandler+0x208>)
 800794a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007950:	2b00      	cmp	r3, #0
 8007952:	f000 8094 	beq.w	8007a7e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800795e:	e08e      	b.n	8007a7e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007964:	2202      	movs	r2, #2
 8007966:	409a      	lsls	r2, r3
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	4013      	ands	r3, r2
 800796c:	2b00      	cmp	r3, #0
 800796e:	d056      	beq.n	8007a1e <HAL_DMA_IRQHandler+0x186>
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	f003 0302 	and.w	r3, r3, #2
 8007976:	2b00      	cmp	r3, #0
 8007978:	d051      	beq.n	8007a1e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f003 0320 	and.w	r3, r3, #32
 8007984:	2b00      	cmp	r3, #0
 8007986:	d10b      	bne.n	80079a0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	681a      	ldr	r2, [r3, #0]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f022 020a 	bic.w	r2, r2, #10
 8007996:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2201      	movs	r2, #1
 800799c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4a38      	ldr	r2, [pc, #224]	@ (8007a88 <HAL_DMA_IRQHandler+0x1f0>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d029      	beq.n	80079fe <HAL_DMA_IRQHandler+0x166>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	4a37      	ldr	r2, [pc, #220]	@ (8007a8c <HAL_DMA_IRQHandler+0x1f4>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d022      	beq.n	80079fa <HAL_DMA_IRQHandler+0x162>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4a35      	ldr	r2, [pc, #212]	@ (8007a90 <HAL_DMA_IRQHandler+0x1f8>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d01a      	beq.n	80079f4 <HAL_DMA_IRQHandler+0x15c>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	4a34      	ldr	r2, [pc, #208]	@ (8007a94 <HAL_DMA_IRQHandler+0x1fc>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d012      	beq.n	80079ee <HAL_DMA_IRQHandler+0x156>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4a32      	ldr	r2, [pc, #200]	@ (8007a98 <HAL_DMA_IRQHandler+0x200>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d00a      	beq.n	80079e8 <HAL_DMA_IRQHandler+0x150>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4a31      	ldr	r2, [pc, #196]	@ (8007a9c <HAL_DMA_IRQHandler+0x204>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d102      	bne.n	80079e2 <HAL_DMA_IRQHandler+0x14a>
 80079dc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80079e0:	e00e      	b.n	8007a00 <HAL_DMA_IRQHandler+0x168>
 80079e2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80079e6:	e00b      	b.n	8007a00 <HAL_DMA_IRQHandler+0x168>
 80079e8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80079ec:	e008      	b.n	8007a00 <HAL_DMA_IRQHandler+0x168>
 80079ee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80079f2:	e005      	b.n	8007a00 <HAL_DMA_IRQHandler+0x168>
 80079f4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80079f8:	e002      	b.n	8007a00 <HAL_DMA_IRQHandler+0x168>
 80079fa:	2320      	movs	r3, #32
 80079fc:	e000      	b.n	8007a00 <HAL_DMA_IRQHandler+0x168>
 80079fe:	2302      	movs	r3, #2
 8007a00:	4a27      	ldr	r2, [pc, #156]	@ (8007aa0 <HAL_DMA_IRQHandler+0x208>)
 8007a02:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2200      	movs	r2, #0
 8007a08:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d034      	beq.n	8007a7e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8007a1c:	e02f      	b.n	8007a7e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a22:	2208      	movs	r2, #8
 8007a24:	409a      	lsls	r2, r3
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	4013      	ands	r3, r2
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d028      	beq.n	8007a80 <HAL_DMA_IRQHandler+0x1e8>
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	f003 0308 	and.w	r3, r3, #8
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d023      	beq.n	8007a80 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	681a      	ldr	r2, [r3, #0]
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f022 020e 	bic.w	r2, r2, #14
 8007a46:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a50:	2101      	movs	r1, #1
 8007a52:	fa01 f202 	lsl.w	r2, r1, r2
 8007a56:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2201      	movs	r2, #1
 8007a62:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2200      	movs	r2, #0
 8007a6a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d004      	beq.n	8007a80 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	4798      	blx	r3
    }
  }
  return;
 8007a7e:	bf00      	nop
 8007a80:	bf00      	nop
}
 8007a82:	3710      	adds	r7, #16
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}
 8007a88:	40020008 	.word	0x40020008
 8007a8c:	4002001c 	.word	0x4002001c
 8007a90:	40020030 	.word	0x40020030
 8007a94:	40020044 	.word	0x40020044
 8007a98:	40020058 	.word	0x40020058
 8007a9c:	4002006c 	.word	0x4002006c
 8007aa0:	40020000 	.word	0x40020000

08007aa4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b085      	sub	sp, #20
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	60f8      	str	r0, [r7, #12]
 8007aac:	60b9      	str	r1, [r7, #8]
 8007aae:	607a      	str	r2, [r7, #4]
 8007ab0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007aba:	2101      	movs	r1, #1
 8007abc:	fa01 f202 	lsl.w	r2, r1, r2
 8007ac0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	683a      	ldr	r2, [r7, #0]
 8007ac8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	685b      	ldr	r3, [r3, #4]
 8007ace:	2b10      	cmp	r3, #16
 8007ad0:	d108      	bne.n	8007ae4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	687a      	ldr	r2, [r7, #4]
 8007ad8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	68ba      	ldr	r2, [r7, #8]
 8007ae0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007ae2:	e007      	b.n	8007af4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	68ba      	ldr	r2, [r7, #8]
 8007aea:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	687a      	ldr	r2, [r7, #4]
 8007af2:	60da      	str	r2, [r3, #12]
}
 8007af4:	bf00      	nop
 8007af6:	3714      	adds	r7, #20
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bc80      	pop	{r7}
 8007afc:	4770      	bx	lr
	...

08007b00 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007b00:	b480      	push	{r7}
 8007b02:	b08b      	sub	sp, #44	@ 0x2c
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
 8007b08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8007b0e:	2300      	movs	r3, #0
 8007b10:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007b12:	e169      	b.n	8007de8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8007b14:	2201      	movs	r2, #1
 8007b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b18:	fa02 f303 	lsl.w	r3, r2, r3
 8007b1c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	69fa      	ldr	r2, [r7, #28]
 8007b24:	4013      	ands	r3, r2
 8007b26:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8007b28:	69ba      	ldr	r2, [r7, #24]
 8007b2a:	69fb      	ldr	r3, [r7, #28]
 8007b2c:	429a      	cmp	r2, r3
 8007b2e:	f040 8158 	bne.w	8007de2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	685b      	ldr	r3, [r3, #4]
 8007b36:	4a9a      	ldr	r2, [pc, #616]	@ (8007da0 <HAL_GPIO_Init+0x2a0>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d05e      	beq.n	8007bfa <HAL_GPIO_Init+0xfa>
 8007b3c:	4a98      	ldr	r2, [pc, #608]	@ (8007da0 <HAL_GPIO_Init+0x2a0>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d875      	bhi.n	8007c2e <HAL_GPIO_Init+0x12e>
 8007b42:	4a98      	ldr	r2, [pc, #608]	@ (8007da4 <HAL_GPIO_Init+0x2a4>)
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d058      	beq.n	8007bfa <HAL_GPIO_Init+0xfa>
 8007b48:	4a96      	ldr	r2, [pc, #600]	@ (8007da4 <HAL_GPIO_Init+0x2a4>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d86f      	bhi.n	8007c2e <HAL_GPIO_Init+0x12e>
 8007b4e:	4a96      	ldr	r2, [pc, #600]	@ (8007da8 <HAL_GPIO_Init+0x2a8>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d052      	beq.n	8007bfa <HAL_GPIO_Init+0xfa>
 8007b54:	4a94      	ldr	r2, [pc, #592]	@ (8007da8 <HAL_GPIO_Init+0x2a8>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d869      	bhi.n	8007c2e <HAL_GPIO_Init+0x12e>
 8007b5a:	4a94      	ldr	r2, [pc, #592]	@ (8007dac <HAL_GPIO_Init+0x2ac>)
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d04c      	beq.n	8007bfa <HAL_GPIO_Init+0xfa>
 8007b60:	4a92      	ldr	r2, [pc, #584]	@ (8007dac <HAL_GPIO_Init+0x2ac>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d863      	bhi.n	8007c2e <HAL_GPIO_Init+0x12e>
 8007b66:	4a92      	ldr	r2, [pc, #584]	@ (8007db0 <HAL_GPIO_Init+0x2b0>)
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d046      	beq.n	8007bfa <HAL_GPIO_Init+0xfa>
 8007b6c:	4a90      	ldr	r2, [pc, #576]	@ (8007db0 <HAL_GPIO_Init+0x2b0>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d85d      	bhi.n	8007c2e <HAL_GPIO_Init+0x12e>
 8007b72:	2b12      	cmp	r3, #18
 8007b74:	d82a      	bhi.n	8007bcc <HAL_GPIO_Init+0xcc>
 8007b76:	2b12      	cmp	r3, #18
 8007b78:	d859      	bhi.n	8007c2e <HAL_GPIO_Init+0x12e>
 8007b7a:	a201      	add	r2, pc, #4	@ (adr r2, 8007b80 <HAL_GPIO_Init+0x80>)
 8007b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b80:	08007bfb 	.word	0x08007bfb
 8007b84:	08007bd5 	.word	0x08007bd5
 8007b88:	08007be7 	.word	0x08007be7
 8007b8c:	08007c29 	.word	0x08007c29
 8007b90:	08007c2f 	.word	0x08007c2f
 8007b94:	08007c2f 	.word	0x08007c2f
 8007b98:	08007c2f 	.word	0x08007c2f
 8007b9c:	08007c2f 	.word	0x08007c2f
 8007ba0:	08007c2f 	.word	0x08007c2f
 8007ba4:	08007c2f 	.word	0x08007c2f
 8007ba8:	08007c2f 	.word	0x08007c2f
 8007bac:	08007c2f 	.word	0x08007c2f
 8007bb0:	08007c2f 	.word	0x08007c2f
 8007bb4:	08007c2f 	.word	0x08007c2f
 8007bb8:	08007c2f 	.word	0x08007c2f
 8007bbc:	08007c2f 	.word	0x08007c2f
 8007bc0:	08007c2f 	.word	0x08007c2f
 8007bc4:	08007bdd 	.word	0x08007bdd
 8007bc8:	08007bf1 	.word	0x08007bf1
 8007bcc:	4a79      	ldr	r2, [pc, #484]	@ (8007db4 <HAL_GPIO_Init+0x2b4>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d013      	beq.n	8007bfa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8007bd2:	e02c      	b.n	8007c2e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	68db      	ldr	r3, [r3, #12]
 8007bd8:	623b      	str	r3, [r7, #32]
          break;
 8007bda:	e029      	b.n	8007c30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	68db      	ldr	r3, [r3, #12]
 8007be0:	3304      	adds	r3, #4
 8007be2:	623b      	str	r3, [r7, #32]
          break;
 8007be4:	e024      	b.n	8007c30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	68db      	ldr	r3, [r3, #12]
 8007bea:	3308      	adds	r3, #8
 8007bec:	623b      	str	r3, [r7, #32]
          break;
 8007bee:	e01f      	b.n	8007c30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	68db      	ldr	r3, [r3, #12]
 8007bf4:	330c      	adds	r3, #12
 8007bf6:	623b      	str	r3, [r7, #32]
          break;
 8007bf8:	e01a      	b.n	8007c30 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	689b      	ldr	r3, [r3, #8]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d102      	bne.n	8007c08 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8007c02:	2304      	movs	r3, #4
 8007c04:	623b      	str	r3, [r7, #32]
          break;
 8007c06:	e013      	b.n	8007c30 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	689b      	ldr	r3, [r3, #8]
 8007c0c:	2b01      	cmp	r3, #1
 8007c0e:	d105      	bne.n	8007c1c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8007c10:	2308      	movs	r3, #8
 8007c12:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	69fa      	ldr	r2, [r7, #28]
 8007c18:	611a      	str	r2, [r3, #16]
          break;
 8007c1a:	e009      	b.n	8007c30 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8007c1c:	2308      	movs	r3, #8
 8007c1e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	69fa      	ldr	r2, [r7, #28]
 8007c24:	615a      	str	r2, [r3, #20]
          break;
 8007c26:	e003      	b.n	8007c30 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8007c28:	2300      	movs	r3, #0
 8007c2a:	623b      	str	r3, [r7, #32]
          break;
 8007c2c:	e000      	b.n	8007c30 <HAL_GPIO_Init+0x130>
          break;
 8007c2e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8007c30:	69bb      	ldr	r3, [r7, #24]
 8007c32:	2bff      	cmp	r3, #255	@ 0xff
 8007c34:	d801      	bhi.n	8007c3a <HAL_GPIO_Init+0x13a>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	e001      	b.n	8007c3e <HAL_GPIO_Init+0x13e>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	3304      	adds	r3, #4
 8007c3e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8007c40:	69bb      	ldr	r3, [r7, #24]
 8007c42:	2bff      	cmp	r3, #255	@ 0xff
 8007c44:	d802      	bhi.n	8007c4c <HAL_GPIO_Init+0x14c>
 8007c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c48:	009b      	lsls	r3, r3, #2
 8007c4a:	e002      	b.n	8007c52 <HAL_GPIO_Init+0x152>
 8007c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c4e:	3b08      	subs	r3, #8
 8007c50:	009b      	lsls	r3, r3, #2
 8007c52:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8007c54:	697b      	ldr	r3, [r7, #20]
 8007c56:	681a      	ldr	r2, [r3, #0]
 8007c58:	210f      	movs	r1, #15
 8007c5a:	693b      	ldr	r3, [r7, #16]
 8007c5c:	fa01 f303 	lsl.w	r3, r1, r3
 8007c60:	43db      	mvns	r3, r3
 8007c62:	401a      	ands	r2, r3
 8007c64:	6a39      	ldr	r1, [r7, #32]
 8007c66:	693b      	ldr	r3, [r7, #16]
 8007c68:	fa01 f303 	lsl.w	r3, r1, r3
 8007c6c:	431a      	orrs	r2, r3
 8007c6e:	697b      	ldr	r3, [r7, #20]
 8007c70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	685b      	ldr	r3, [r3, #4]
 8007c76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	f000 80b1 	beq.w	8007de2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8007c80:	4b4d      	ldr	r3, [pc, #308]	@ (8007db8 <HAL_GPIO_Init+0x2b8>)
 8007c82:	699b      	ldr	r3, [r3, #24]
 8007c84:	4a4c      	ldr	r2, [pc, #304]	@ (8007db8 <HAL_GPIO_Init+0x2b8>)
 8007c86:	f043 0301 	orr.w	r3, r3, #1
 8007c8a:	6193      	str	r3, [r2, #24]
 8007c8c:	4b4a      	ldr	r3, [pc, #296]	@ (8007db8 <HAL_GPIO_Init+0x2b8>)
 8007c8e:	699b      	ldr	r3, [r3, #24]
 8007c90:	f003 0301 	and.w	r3, r3, #1
 8007c94:	60bb      	str	r3, [r7, #8]
 8007c96:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8007c98:	4a48      	ldr	r2, [pc, #288]	@ (8007dbc <HAL_GPIO_Init+0x2bc>)
 8007c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c9c:	089b      	lsrs	r3, r3, #2
 8007c9e:	3302      	adds	r3, #2
 8007ca0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ca4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8007ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ca8:	f003 0303 	and.w	r3, r3, #3
 8007cac:	009b      	lsls	r3, r3, #2
 8007cae:	220f      	movs	r2, #15
 8007cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8007cb4:	43db      	mvns	r3, r3
 8007cb6:	68fa      	ldr	r2, [r7, #12]
 8007cb8:	4013      	ands	r3, r2
 8007cba:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	4a40      	ldr	r2, [pc, #256]	@ (8007dc0 <HAL_GPIO_Init+0x2c0>)
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d013      	beq.n	8007cec <HAL_GPIO_Init+0x1ec>
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	4a3f      	ldr	r2, [pc, #252]	@ (8007dc4 <HAL_GPIO_Init+0x2c4>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d00d      	beq.n	8007ce8 <HAL_GPIO_Init+0x1e8>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	4a3e      	ldr	r2, [pc, #248]	@ (8007dc8 <HAL_GPIO_Init+0x2c8>)
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	d007      	beq.n	8007ce4 <HAL_GPIO_Init+0x1e4>
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	4a3d      	ldr	r2, [pc, #244]	@ (8007dcc <HAL_GPIO_Init+0x2cc>)
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d101      	bne.n	8007ce0 <HAL_GPIO_Init+0x1e0>
 8007cdc:	2303      	movs	r3, #3
 8007cde:	e006      	b.n	8007cee <HAL_GPIO_Init+0x1ee>
 8007ce0:	2304      	movs	r3, #4
 8007ce2:	e004      	b.n	8007cee <HAL_GPIO_Init+0x1ee>
 8007ce4:	2302      	movs	r3, #2
 8007ce6:	e002      	b.n	8007cee <HAL_GPIO_Init+0x1ee>
 8007ce8:	2301      	movs	r3, #1
 8007cea:	e000      	b.n	8007cee <HAL_GPIO_Init+0x1ee>
 8007cec:	2300      	movs	r3, #0
 8007cee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007cf0:	f002 0203 	and.w	r2, r2, #3
 8007cf4:	0092      	lsls	r2, r2, #2
 8007cf6:	4093      	lsls	r3, r2
 8007cf8:	68fa      	ldr	r2, [r7, #12]
 8007cfa:	4313      	orrs	r3, r2
 8007cfc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8007cfe:	492f      	ldr	r1, [pc, #188]	@ (8007dbc <HAL_GPIO_Init+0x2bc>)
 8007d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d02:	089b      	lsrs	r3, r3, #2
 8007d04:	3302      	adds	r3, #2
 8007d06:	68fa      	ldr	r2, [r7, #12]
 8007d08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	685b      	ldr	r3, [r3, #4]
 8007d10:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d006      	beq.n	8007d26 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8007d18:	4b2d      	ldr	r3, [pc, #180]	@ (8007dd0 <HAL_GPIO_Init+0x2d0>)
 8007d1a:	689a      	ldr	r2, [r3, #8]
 8007d1c:	492c      	ldr	r1, [pc, #176]	@ (8007dd0 <HAL_GPIO_Init+0x2d0>)
 8007d1e:	69bb      	ldr	r3, [r7, #24]
 8007d20:	4313      	orrs	r3, r2
 8007d22:	608b      	str	r3, [r1, #8]
 8007d24:	e006      	b.n	8007d34 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8007d26:	4b2a      	ldr	r3, [pc, #168]	@ (8007dd0 <HAL_GPIO_Init+0x2d0>)
 8007d28:	689a      	ldr	r2, [r3, #8]
 8007d2a:	69bb      	ldr	r3, [r7, #24]
 8007d2c:	43db      	mvns	r3, r3
 8007d2e:	4928      	ldr	r1, [pc, #160]	@ (8007dd0 <HAL_GPIO_Init+0x2d0>)
 8007d30:	4013      	ands	r3, r2
 8007d32:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	685b      	ldr	r3, [r3, #4]
 8007d38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d006      	beq.n	8007d4e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8007d40:	4b23      	ldr	r3, [pc, #140]	@ (8007dd0 <HAL_GPIO_Init+0x2d0>)
 8007d42:	68da      	ldr	r2, [r3, #12]
 8007d44:	4922      	ldr	r1, [pc, #136]	@ (8007dd0 <HAL_GPIO_Init+0x2d0>)
 8007d46:	69bb      	ldr	r3, [r7, #24]
 8007d48:	4313      	orrs	r3, r2
 8007d4a:	60cb      	str	r3, [r1, #12]
 8007d4c:	e006      	b.n	8007d5c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8007d4e:	4b20      	ldr	r3, [pc, #128]	@ (8007dd0 <HAL_GPIO_Init+0x2d0>)
 8007d50:	68da      	ldr	r2, [r3, #12]
 8007d52:	69bb      	ldr	r3, [r7, #24]
 8007d54:	43db      	mvns	r3, r3
 8007d56:	491e      	ldr	r1, [pc, #120]	@ (8007dd0 <HAL_GPIO_Init+0x2d0>)
 8007d58:	4013      	ands	r3, r2
 8007d5a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	685b      	ldr	r3, [r3, #4]
 8007d60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d006      	beq.n	8007d76 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8007d68:	4b19      	ldr	r3, [pc, #100]	@ (8007dd0 <HAL_GPIO_Init+0x2d0>)
 8007d6a:	685a      	ldr	r2, [r3, #4]
 8007d6c:	4918      	ldr	r1, [pc, #96]	@ (8007dd0 <HAL_GPIO_Init+0x2d0>)
 8007d6e:	69bb      	ldr	r3, [r7, #24]
 8007d70:	4313      	orrs	r3, r2
 8007d72:	604b      	str	r3, [r1, #4]
 8007d74:	e006      	b.n	8007d84 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8007d76:	4b16      	ldr	r3, [pc, #88]	@ (8007dd0 <HAL_GPIO_Init+0x2d0>)
 8007d78:	685a      	ldr	r2, [r3, #4]
 8007d7a:	69bb      	ldr	r3, [r7, #24]
 8007d7c:	43db      	mvns	r3, r3
 8007d7e:	4914      	ldr	r1, [pc, #80]	@ (8007dd0 <HAL_GPIO_Init+0x2d0>)
 8007d80:	4013      	ands	r3, r2
 8007d82:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	685b      	ldr	r3, [r3, #4]
 8007d88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d021      	beq.n	8007dd4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8007d90:	4b0f      	ldr	r3, [pc, #60]	@ (8007dd0 <HAL_GPIO_Init+0x2d0>)
 8007d92:	681a      	ldr	r2, [r3, #0]
 8007d94:	490e      	ldr	r1, [pc, #56]	@ (8007dd0 <HAL_GPIO_Init+0x2d0>)
 8007d96:	69bb      	ldr	r3, [r7, #24]
 8007d98:	4313      	orrs	r3, r2
 8007d9a:	600b      	str	r3, [r1, #0]
 8007d9c:	e021      	b.n	8007de2 <HAL_GPIO_Init+0x2e2>
 8007d9e:	bf00      	nop
 8007da0:	10320000 	.word	0x10320000
 8007da4:	10310000 	.word	0x10310000
 8007da8:	10220000 	.word	0x10220000
 8007dac:	10210000 	.word	0x10210000
 8007db0:	10120000 	.word	0x10120000
 8007db4:	10110000 	.word	0x10110000
 8007db8:	40021000 	.word	0x40021000
 8007dbc:	40010000 	.word	0x40010000
 8007dc0:	40010800 	.word	0x40010800
 8007dc4:	40010c00 	.word	0x40010c00
 8007dc8:	40011000 	.word	0x40011000
 8007dcc:	40011400 	.word	0x40011400
 8007dd0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8007dd4:	4b0b      	ldr	r3, [pc, #44]	@ (8007e04 <HAL_GPIO_Init+0x304>)
 8007dd6:	681a      	ldr	r2, [r3, #0]
 8007dd8:	69bb      	ldr	r3, [r7, #24]
 8007dda:	43db      	mvns	r3, r3
 8007ddc:	4909      	ldr	r1, [pc, #36]	@ (8007e04 <HAL_GPIO_Init+0x304>)
 8007dde:	4013      	ands	r3, r2
 8007de0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8007de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007de4:	3301      	adds	r3, #1
 8007de6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	681a      	ldr	r2, [r3, #0]
 8007dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dee:	fa22 f303 	lsr.w	r3, r2, r3
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	f47f ae8e 	bne.w	8007b14 <HAL_GPIO_Init+0x14>
  }
}
 8007df8:	bf00      	nop
 8007dfa:	bf00      	nop
 8007dfc:	372c      	adds	r7, #44	@ 0x2c
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bc80      	pop	{r7}
 8007e02:	4770      	bx	lr
 8007e04:	40010400 	.word	0x40010400

08007e08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b083      	sub	sp, #12
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
 8007e10:	460b      	mov	r3, r1
 8007e12:	807b      	strh	r3, [r7, #2]
 8007e14:	4613      	mov	r3, r2
 8007e16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007e18:	787b      	ldrb	r3, [r7, #1]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d003      	beq.n	8007e26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007e1e:	887a      	ldrh	r2, [r7, #2]
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8007e24:	e003      	b.n	8007e2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8007e26:	887b      	ldrh	r3, [r7, #2]
 8007e28:	041a      	lsls	r2, r3, #16
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	611a      	str	r2, [r3, #16]
}
 8007e2e:	bf00      	nop
 8007e30:	370c      	adds	r7, #12
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bc80      	pop	{r7}
 8007e36:	4770      	bx	lr

08007e38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b084      	sub	sp, #16
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d101      	bne.n	8007e4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007e46:	2301      	movs	r3, #1
 8007e48:	e12b      	b.n	80080a2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007e50:	b2db      	uxtb	r3, r3
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d106      	bne.n	8007e64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2200      	movs	r2, #0
 8007e5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f7ff f858 	bl	8006f14 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2224      	movs	r2, #36	@ 0x24
 8007e68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	681a      	ldr	r2, [r3, #0]
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f022 0201 	bic.w	r2, r2, #1
 8007e7a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	681a      	ldr	r2, [r3, #0]
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007e8a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	681a      	ldr	r2, [r3, #0]
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007e9a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007e9c:	f001 fbf0 	bl	8009680 <HAL_RCC_GetPCLK1Freq>
 8007ea0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	685b      	ldr	r3, [r3, #4]
 8007ea6:	4a81      	ldr	r2, [pc, #516]	@ (80080ac <HAL_I2C_Init+0x274>)
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d807      	bhi.n	8007ebc <HAL_I2C_Init+0x84>
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	4a80      	ldr	r2, [pc, #512]	@ (80080b0 <HAL_I2C_Init+0x278>)
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	bf94      	ite	ls
 8007eb4:	2301      	movls	r3, #1
 8007eb6:	2300      	movhi	r3, #0
 8007eb8:	b2db      	uxtb	r3, r3
 8007eba:	e006      	b.n	8007eca <HAL_I2C_Init+0x92>
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	4a7d      	ldr	r2, [pc, #500]	@ (80080b4 <HAL_I2C_Init+0x27c>)
 8007ec0:	4293      	cmp	r3, r2
 8007ec2:	bf94      	ite	ls
 8007ec4:	2301      	movls	r3, #1
 8007ec6:	2300      	movhi	r3, #0
 8007ec8:	b2db      	uxtb	r3, r3
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d001      	beq.n	8007ed2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007ece:	2301      	movs	r3, #1
 8007ed0:	e0e7      	b.n	80080a2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	4a78      	ldr	r2, [pc, #480]	@ (80080b8 <HAL_I2C_Init+0x280>)
 8007ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8007eda:	0c9b      	lsrs	r3, r3, #18
 8007edc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	685b      	ldr	r3, [r3, #4]
 8007ee4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	68ba      	ldr	r2, [r7, #8]
 8007eee:	430a      	orrs	r2, r1
 8007ef0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	6a1b      	ldr	r3, [r3, #32]
 8007ef8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	685b      	ldr	r3, [r3, #4]
 8007f00:	4a6a      	ldr	r2, [pc, #424]	@ (80080ac <HAL_I2C_Init+0x274>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d802      	bhi.n	8007f0c <HAL_I2C_Init+0xd4>
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	3301      	adds	r3, #1
 8007f0a:	e009      	b.n	8007f20 <HAL_I2C_Init+0xe8>
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8007f12:	fb02 f303 	mul.w	r3, r2, r3
 8007f16:	4a69      	ldr	r2, [pc, #420]	@ (80080bc <HAL_I2C_Init+0x284>)
 8007f18:	fba2 2303 	umull	r2, r3, r2, r3
 8007f1c:	099b      	lsrs	r3, r3, #6
 8007f1e:	3301      	adds	r3, #1
 8007f20:	687a      	ldr	r2, [r7, #4]
 8007f22:	6812      	ldr	r2, [r2, #0]
 8007f24:	430b      	orrs	r3, r1
 8007f26:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	69db      	ldr	r3, [r3, #28]
 8007f2e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8007f32:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	685b      	ldr	r3, [r3, #4]
 8007f3a:	495c      	ldr	r1, [pc, #368]	@ (80080ac <HAL_I2C_Init+0x274>)
 8007f3c:	428b      	cmp	r3, r1
 8007f3e:	d819      	bhi.n	8007f74 <HAL_I2C_Init+0x13c>
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	1e59      	subs	r1, r3, #1
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	685b      	ldr	r3, [r3, #4]
 8007f48:	005b      	lsls	r3, r3, #1
 8007f4a:	fbb1 f3f3 	udiv	r3, r1, r3
 8007f4e:	1c59      	adds	r1, r3, #1
 8007f50:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8007f54:	400b      	ands	r3, r1
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d00a      	beq.n	8007f70 <HAL_I2C_Init+0x138>
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	1e59      	subs	r1, r3, #1
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	685b      	ldr	r3, [r3, #4]
 8007f62:	005b      	lsls	r3, r3, #1
 8007f64:	fbb1 f3f3 	udiv	r3, r1, r3
 8007f68:	3301      	adds	r3, #1
 8007f6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007f6e:	e051      	b.n	8008014 <HAL_I2C_Init+0x1dc>
 8007f70:	2304      	movs	r3, #4
 8007f72:	e04f      	b.n	8008014 <HAL_I2C_Init+0x1dc>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	689b      	ldr	r3, [r3, #8]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d111      	bne.n	8007fa0 <HAL_I2C_Init+0x168>
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	1e58      	subs	r0, r3, #1
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6859      	ldr	r1, [r3, #4]
 8007f84:	460b      	mov	r3, r1
 8007f86:	005b      	lsls	r3, r3, #1
 8007f88:	440b      	add	r3, r1
 8007f8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8007f8e:	3301      	adds	r3, #1
 8007f90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	bf0c      	ite	eq
 8007f98:	2301      	moveq	r3, #1
 8007f9a:	2300      	movne	r3, #0
 8007f9c:	b2db      	uxtb	r3, r3
 8007f9e:	e012      	b.n	8007fc6 <HAL_I2C_Init+0x18e>
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	1e58      	subs	r0, r3, #1
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6859      	ldr	r1, [r3, #4]
 8007fa8:	460b      	mov	r3, r1
 8007faa:	009b      	lsls	r3, r3, #2
 8007fac:	440b      	add	r3, r1
 8007fae:	0099      	lsls	r1, r3, #2
 8007fb0:	440b      	add	r3, r1
 8007fb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8007fb6:	3301      	adds	r3, #1
 8007fb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	bf0c      	ite	eq
 8007fc0:	2301      	moveq	r3, #1
 8007fc2:	2300      	movne	r3, #0
 8007fc4:	b2db      	uxtb	r3, r3
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d001      	beq.n	8007fce <HAL_I2C_Init+0x196>
 8007fca:	2301      	movs	r3, #1
 8007fcc:	e022      	b.n	8008014 <HAL_I2C_Init+0x1dc>
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	689b      	ldr	r3, [r3, #8]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d10e      	bne.n	8007ff4 <HAL_I2C_Init+0x1bc>
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	1e58      	subs	r0, r3, #1
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6859      	ldr	r1, [r3, #4]
 8007fde:	460b      	mov	r3, r1
 8007fe0:	005b      	lsls	r3, r3, #1
 8007fe2:	440b      	add	r3, r1
 8007fe4:	fbb0 f3f3 	udiv	r3, r0, r3
 8007fe8:	3301      	adds	r3, #1
 8007fea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007fee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ff2:	e00f      	b.n	8008014 <HAL_I2C_Init+0x1dc>
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	1e58      	subs	r0, r3, #1
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	6859      	ldr	r1, [r3, #4]
 8007ffc:	460b      	mov	r3, r1
 8007ffe:	009b      	lsls	r3, r3, #2
 8008000:	440b      	add	r3, r1
 8008002:	0099      	lsls	r1, r3, #2
 8008004:	440b      	add	r3, r1
 8008006:	fbb0 f3f3 	udiv	r3, r0, r3
 800800a:	3301      	adds	r3, #1
 800800c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008010:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008014:	6879      	ldr	r1, [r7, #4]
 8008016:	6809      	ldr	r1, [r1, #0]
 8008018:	4313      	orrs	r3, r2
 800801a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	69da      	ldr	r2, [r3, #28]
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6a1b      	ldr	r3, [r3, #32]
 800802e:	431a      	orrs	r2, r3
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	430a      	orrs	r2, r1
 8008036:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	689b      	ldr	r3, [r3, #8]
 800803e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8008042:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8008046:	687a      	ldr	r2, [r7, #4]
 8008048:	6911      	ldr	r1, [r2, #16]
 800804a:	687a      	ldr	r2, [r7, #4]
 800804c:	68d2      	ldr	r2, [r2, #12]
 800804e:	4311      	orrs	r1, r2
 8008050:	687a      	ldr	r2, [r7, #4]
 8008052:	6812      	ldr	r2, [r2, #0]
 8008054:	430b      	orrs	r3, r1
 8008056:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	68db      	ldr	r3, [r3, #12]
 800805e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	695a      	ldr	r2, [r3, #20]
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	699b      	ldr	r3, [r3, #24]
 800806a:	431a      	orrs	r2, r3
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	430a      	orrs	r2, r1
 8008072:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	681a      	ldr	r2, [r3, #0]
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f042 0201 	orr.w	r2, r2, #1
 8008082:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2200      	movs	r2, #0
 8008088:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2220      	movs	r2, #32
 800808e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2200      	movs	r2, #0
 8008096:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2200      	movs	r2, #0
 800809c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80080a0:	2300      	movs	r3, #0
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	3710      	adds	r7, #16
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}
 80080aa:	bf00      	nop
 80080ac:	000186a0 	.word	0x000186a0
 80080b0:	001e847f 	.word	0x001e847f
 80080b4:	003d08ff 	.word	0x003d08ff
 80080b8:	431bde83 	.word	0x431bde83
 80080bc:	10624dd3 	.word	0x10624dd3

080080c0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b088      	sub	sp, #32
 80080c4:	af02      	add	r7, sp, #8
 80080c6:	60f8      	str	r0, [r7, #12]
 80080c8:	4608      	mov	r0, r1
 80080ca:	4611      	mov	r1, r2
 80080cc:	461a      	mov	r2, r3
 80080ce:	4603      	mov	r3, r0
 80080d0:	817b      	strh	r3, [r7, #10]
 80080d2:	460b      	mov	r3, r1
 80080d4:	813b      	strh	r3, [r7, #8]
 80080d6:	4613      	mov	r3, r2
 80080d8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80080da:	f7ff f933 	bl	8007344 <HAL_GetTick>
 80080de:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80080e6:	b2db      	uxtb	r3, r3
 80080e8:	2b20      	cmp	r3, #32
 80080ea:	f040 80d9 	bne.w	80082a0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80080ee:	697b      	ldr	r3, [r7, #20]
 80080f0:	9300      	str	r3, [sp, #0]
 80080f2:	2319      	movs	r3, #25
 80080f4:	2201      	movs	r2, #1
 80080f6:	496d      	ldr	r1, [pc, #436]	@ (80082ac <HAL_I2C_Mem_Write+0x1ec>)
 80080f8:	68f8      	ldr	r0, [r7, #12]
 80080fa:	f000 fcc1 	bl	8008a80 <I2C_WaitOnFlagUntilTimeout>
 80080fe:	4603      	mov	r3, r0
 8008100:	2b00      	cmp	r3, #0
 8008102:	d001      	beq.n	8008108 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8008104:	2302      	movs	r3, #2
 8008106:	e0cc      	b.n	80082a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800810e:	2b01      	cmp	r3, #1
 8008110:	d101      	bne.n	8008116 <HAL_I2C_Mem_Write+0x56>
 8008112:	2302      	movs	r3, #2
 8008114:	e0c5      	b.n	80082a2 <HAL_I2C_Mem_Write+0x1e2>
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	2201      	movs	r2, #1
 800811a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f003 0301 	and.w	r3, r3, #1
 8008128:	2b01      	cmp	r3, #1
 800812a:	d007      	beq.n	800813c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	681a      	ldr	r2, [r3, #0]
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f042 0201 	orr.w	r2, r2, #1
 800813a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	681a      	ldr	r2, [r3, #0]
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800814a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	2221      	movs	r2, #33	@ 0x21
 8008150:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	2240      	movs	r2, #64	@ 0x40
 8008158:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	2200      	movs	r2, #0
 8008160:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	6a3a      	ldr	r2, [r7, #32]
 8008166:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800816c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008172:	b29a      	uxth	r2, r3
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	4a4d      	ldr	r2, [pc, #308]	@ (80082b0 <HAL_I2C_Mem_Write+0x1f0>)
 800817c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800817e:	88f8      	ldrh	r0, [r7, #6]
 8008180:	893a      	ldrh	r2, [r7, #8]
 8008182:	8979      	ldrh	r1, [r7, #10]
 8008184:	697b      	ldr	r3, [r7, #20]
 8008186:	9301      	str	r3, [sp, #4]
 8008188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800818a:	9300      	str	r3, [sp, #0]
 800818c:	4603      	mov	r3, r0
 800818e:	68f8      	ldr	r0, [r7, #12]
 8008190:	f000 faf8 	bl	8008784 <I2C_RequestMemoryWrite>
 8008194:	4603      	mov	r3, r0
 8008196:	2b00      	cmp	r3, #0
 8008198:	d052      	beq.n	8008240 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800819a:	2301      	movs	r3, #1
 800819c:	e081      	b.n	80082a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800819e:	697a      	ldr	r2, [r7, #20]
 80081a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80081a2:	68f8      	ldr	r0, [r7, #12]
 80081a4:	f000 fd86 	bl	8008cb4 <I2C_WaitOnTXEFlagUntilTimeout>
 80081a8:	4603      	mov	r3, r0
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d00d      	beq.n	80081ca <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081b2:	2b04      	cmp	r3, #4
 80081b4:	d107      	bne.n	80081c6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	681a      	ldr	r2, [r3, #0]
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80081c4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80081c6:	2301      	movs	r3, #1
 80081c8:	e06b      	b.n	80082a2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081ce:	781a      	ldrb	r2, [r3, #0]
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081da:	1c5a      	adds	r2, r3, #1
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80081e4:	3b01      	subs	r3, #1
 80081e6:	b29a      	uxth	r2, r3
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80081f0:	b29b      	uxth	r3, r3
 80081f2:	3b01      	subs	r3, #1
 80081f4:	b29a      	uxth	r2, r3
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	695b      	ldr	r3, [r3, #20]
 8008200:	f003 0304 	and.w	r3, r3, #4
 8008204:	2b04      	cmp	r3, #4
 8008206:	d11b      	bne.n	8008240 <HAL_I2C_Mem_Write+0x180>
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800820c:	2b00      	cmp	r3, #0
 800820e:	d017      	beq.n	8008240 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008214:	781a      	ldrb	r2, [r3, #0]
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008220:	1c5a      	adds	r2, r3, #1
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800822a:	3b01      	subs	r3, #1
 800822c:	b29a      	uxth	r2, r3
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008236:	b29b      	uxth	r3, r3
 8008238:	3b01      	subs	r3, #1
 800823a:	b29a      	uxth	r2, r3
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008244:	2b00      	cmp	r3, #0
 8008246:	d1aa      	bne.n	800819e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008248:	697a      	ldr	r2, [r7, #20]
 800824a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800824c:	68f8      	ldr	r0, [r7, #12]
 800824e:	f000 fd79 	bl	8008d44 <I2C_WaitOnBTFFlagUntilTimeout>
 8008252:	4603      	mov	r3, r0
 8008254:	2b00      	cmp	r3, #0
 8008256:	d00d      	beq.n	8008274 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800825c:	2b04      	cmp	r3, #4
 800825e:	d107      	bne.n	8008270 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	681a      	ldr	r2, [r3, #0]
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800826e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008270:	2301      	movs	r3, #1
 8008272:	e016      	b.n	80082a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	681a      	ldr	r2, [r3, #0]
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008282:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	2220      	movs	r2, #32
 8008288:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	2200      	movs	r2, #0
 8008290:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	2200      	movs	r2, #0
 8008298:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800829c:	2300      	movs	r3, #0
 800829e:	e000      	b.n	80082a2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80082a0:	2302      	movs	r3, #2
  }
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	3718      	adds	r7, #24
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bd80      	pop	{r7, pc}
 80082aa:	bf00      	nop
 80082ac:	00100002 	.word	0x00100002
 80082b0:	ffff0000 	.word	0xffff0000

080082b4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b08c      	sub	sp, #48	@ 0x30
 80082b8:	af02      	add	r7, sp, #8
 80082ba:	60f8      	str	r0, [r7, #12]
 80082bc:	4608      	mov	r0, r1
 80082be:	4611      	mov	r1, r2
 80082c0:	461a      	mov	r2, r3
 80082c2:	4603      	mov	r3, r0
 80082c4:	817b      	strh	r3, [r7, #10]
 80082c6:	460b      	mov	r3, r1
 80082c8:	813b      	strh	r3, [r7, #8]
 80082ca:	4613      	mov	r3, r2
 80082cc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80082ce:	2300      	movs	r3, #0
 80082d0:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80082d2:	f7ff f837 	bl	8007344 <HAL_GetTick>
 80082d6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80082de:	b2db      	uxtb	r3, r3
 80082e0:	2b20      	cmp	r3, #32
 80082e2:	f040 8244 	bne.w	800876e <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80082e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082e8:	9300      	str	r3, [sp, #0]
 80082ea:	2319      	movs	r3, #25
 80082ec:	2201      	movs	r2, #1
 80082ee:	4982      	ldr	r1, [pc, #520]	@ (80084f8 <HAL_I2C_Mem_Read+0x244>)
 80082f0:	68f8      	ldr	r0, [r7, #12]
 80082f2:	f000 fbc5 	bl	8008a80 <I2C_WaitOnFlagUntilTimeout>
 80082f6:	4603      	mov	r3, r0
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d001      	beq.n	8008300 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80082fc:	2302      	movs	r3, #2
 80082fe:	e237      	b.n	8008770 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008306:	2b01      	cmp	r3, #1
 8008308:	d101      	bne.n	800830e <HAL_I2C_Mem_Read+0x5a>
 800830a:	2302      	movs	r3, #2
 800830c:	e230      	b.n	8008770 <HAL_I2C_Mem_Read+0x4bc>
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	2201      	movs	r2, #1
 8008312:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f003 0301 	and.w	r3, r3, #1
 8008320:	2b01      	cmp	r3, #1
 8008322:	d007      	beq.n	8008334 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	681a      	ldr	r2, [r3, #0]
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f042 0201 	orr.w	r2, r2, #1
 8008332:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	681a      	ldr	r2, [r3, #0]
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008342:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	2222      	movs	r2, #34	@ 0x22
 8008348:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	2240      	movs	r2, #64	@ 0x40
 8008350:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	2200      	movs	r2, #0
 8008358:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800835e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8008364:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800836a:	b29a      	uxth	r2, r3
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	4a62      	ldr	r2, [pc, #392]	@ (80084fc <HAL_I2C_Mem_Read+0x248>)
 8008374:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008376:	88f8      	ldrh	r0, [r7, #6]
 8008378:	893a      	ldrh	r2, [r7, #8]
 800837a:	8979      	ldrh	r1, [r7, #10]
 800837c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800837e:	9301      	str	r3, [sp, #4]
 8008380:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008382:	9300      	str	r3, [sp, #0]
 8008384:	4603      	mov	r3, r0
 8008386:	68f8      	ldr	r0, [r7, #12]
 8008388:	f000 fa92 	bl	80088b0 <I2C_RequestMemoryRead>
 800838c:	4603      	mov	r3, r0
 800838e:	2b00      	cmp	r3, #0
 8008390:	d001      	beq.n	8008396 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8008392:	2301      	movs	r3, #1
 8008394:	e1ec      	b.n	8008770 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800839a:	2b00      	cmp	r3, #0
 800839c:	d113      	bne.n	80083c6 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800839e:	2300      	movs	r3, #0
 80083a0:	61fb      	str	r3, [r7, #28]
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	695b      	ldr	r3, [r3, #20]
 80083a8:	61fb      	str	r3, [r7, #28]
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	699b      	ldr	r3, [r3, #24]
 80083b0:	61fb      	str	r3, [r7, #28]
 80083b2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	681a      	ldr	r2, [r3, #0]
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80083c2:	601a      	str	r2, [r3, #0]
 80083c4:	e1c0      	b.n	8008748 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80083ca:	2b01      	cmp	r3, #1
 80083cc:	d11e      	bne.n	800840c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	681a      	ldr	r2, [r3, #0]
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80083dc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80083de:	b672      	cpsid	i
}
 80083e0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80083e2:	2300      	movs	r3, #0
 80083e4:	61bb      	str	r3, [r7, #24]
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	695b      	ldr	r3, [r3, #20]
 80083ec:	61bb      	str	r3, [r7, #24]
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	699b      	ldr	r3, [r3, #24]
 80083f4:	61bb      	str	r3, [r7, #24]
 80083f6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	681a      	ldr	r2, [r3, #0]
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008406:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8008408:	b662      	cpsie	i
}
 800840a:	e035      	b.n	8008478 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008410:	2b02      	cmp	r3, #2
 8008412:	d11e      	bne.n	8008452 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	681a      	ldr	r2, [r3, #0]
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008422:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8008424:	b672      	cpsid	i
}
 8008426:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008428:	2300      	movs	r3, #0
 800842a:	617b      	str	r3, [r7, #20]
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	695b      	ldr	r3, [r3, #20]
 8008432:	617b      	str	r3, [r7, #20]
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	699b      	ldr	r3, [r3, #24]
 800843a:	617b      	str	r3, [r7, #20]
 800843c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	681a      	ldr	r2, [r3, #0]
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800844c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800844e:	b662      	cpsie	i
}
 8008450:	e012      	b.n	8008478 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	681a      	ldr	r2, [r3, #0]
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008460:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008462:	2300      	movs	r3, #0
 8008464:	613b      	str	r3, [r7, #16]
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	695b      	ldr	r3, [r3, #20]
 800846c:	613b      	str	r3, [r7, #16]
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	699b      	ldr	r3, [r3, #24]
 8008474:	613b      	str	r3, [r7, #16]
 8008476:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8008478:	e166      	b.n	8008748 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800847e:	2b03      	cmp	r3, #3
 8008480:	f200 811f 	bhi.w	80086c2 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008488:	2b01      	cmp	r3, #1
 800848a:	d123      	bne.n	80084d4 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800848c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800848e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008490:	68f8      	ldr	r0, [r7, #12]
 8008492:	f000 fc9f 	bl	8008dd4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008496:	4603      	mov	r3, r0
 8008498:	2b00      	cmp	r3, #0
 800849a:	d001      	beq.n	80084a0 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800849c:	2301      	movs	r3, #1
 800849e:	e167      	b.n	8008770 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	691a      	ldr	r2, [r3, #16]
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084aa:	b2d2      	uxtb	r2, r2
 80084ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084b2:	1c5a      	adds	r2, r3, #1
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80084bc:	3b01      	subs	r3, #1
 80084be:	b29a      	uxth	r2, r3
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80084c8:	b29b      	uxth	r3, r3
 80084ca:	3b01      	subs	r3, #1
 80084cc:	b29a      	uxth	r2, r3
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80084d2:	e139      	b.n	8008748 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80084d8:	2b02      	cmp	r3, #2
 80084da:	d152      	bne.n	8008582 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80084dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084de:	9300      	str	r3, [sp, #0]
 80084e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084e2:	2200      	movs	r2, #0
 80084e4:	4906      	ldr	r1, [pc, #24]	@ (8008500 <HAL_I2C_Mem_Read+0x24c>)
 80084e6:	68f8      	ldr	r0, [r7, #12]
 80084e8:	f000 faca 	bl	8008a80 <I2C_WaitOnFlagUntilTimeout>
 80084ec:	4603      	mov	r3, r0
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d008      	beq.n	8008504 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80084f2:	2301      	movs	r3, #1
 80084f4:	e13c      	b.n	8008770 <HAL_I2C_Mem_Read+0x4bc>
 80084f6:	bf00      	nop
 80084f8:	00100002 	.word	0x00100002
 80084fc:	ffff0000 	.word	0xffff0000
 8008500:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8008504:	b672      	cpsid	i
}
 8008506:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	681a      	ldr	r2, [r3, #0]
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008516:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	691a      	ldr	r2, [r3, #16]
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008522:	b2d2      	uxtb	r2, r2
 8008524:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800852a:	1c5a      	adds	r2, r3, #1
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008534:	3b01      	subs	r3, #1
 8008536:	b29a      	uxth	r2, r3
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008540:	b29b      	uxth	r3, r3
 8008542:	3b01      	subs	r3, #1
 8008544:	b29a      	uxth	r2, r3
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800854a:	b662      	cpsie	i
}
 800854c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	691a      	ldr	r2, [r3, #16]
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008558:	b2d2      	uxtb	r2, r2
 800855a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008560:	1c5a      	adds	r2, r3, #1
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800856a:	3b01      	subs	r3, #1
 800856c:	b29a      	uxth	r2, r3
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008576:	b29b      	uxth	r3, r3
 8008578:	3b01      	subs	r3, #1
 800857a:	b29a      	uxth	r2, r3
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008580:	e0e2      	b.n	8008748 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008584:	9300      	str	r3, [sp, #0]
 8008586:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008588:	2200      	movs	r2, #0
 800858a:	497b      	ldr	r1, [pc, #492]	@ (8008778 <HAL_I2C_Mem_Read+0x4c4>)
 800858c:	68f8      	ldr	r0, [r7, #12]
 800858e:	f000 fa77 	bl	8008a80 <I2C_WaitOnFlagUntilTimeout>
 8008592:	4603      	mov	r3, r0
 8008594:	2b00      	cmp	r3, #0
 8008596:	d001      	beq.n	800859c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8008598:	2301      	movs	r3, #1
 800859a:	e0e9      	b.n	8008770 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	681a      	ldr	r2, [r3, #0]
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80085aa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80085ac:	b672      	cpsid	i
}
 80085ae:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	691a      	ldr	r2, [r3, #16]
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085ba:	b2d2      	uxtb	r2, r2
 80085bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085c2:	1c5a      	adds	r2, r3, #1
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80085cc:	3b01      	subs	r3, #1
 80085ce:	b29a      	uxth	r2, r3
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80085d8:	b29b      	uxth	r3, r3
 80085da:	3b01      	subs	r3, #1
 80085dc:	b29a      	uxth	r2, r3
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80085e2:	4b66      	ldr	r3, [pc, #408]	@ (800877c <HAL_I2C_Mem_Read+0x4c8>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	08db      	lsrs	r3, r3, #3
 80085e8:	4a65      	ldr	r2, [pc, #404]	@ (8008780 <HAL_I2C_Mem_Read+0x4cc>)
 80085ea:	fba2 2303 	umull	r2, r3, r2, r3
 80085ee:	0a1a      	lsrs	r2, r3, #8
 80085f0:	4613      	mov	r3, r2
 80085f2:	009b      	lsls	r3, r3, #2
 80085f4:	4413      	add	r3, r2
 80085f6:	00da      	lsls	r2, r3, #3
 80085f8:	1ad3      	subs	r3, r2, r3
 80085fa:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80085fc:	6a3b      	ldr	r3, [r7, #32]
 80085fe:	3b01      	subs	r3, #1
 8008600:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8008602:	6a3b      	ldr	r3, [r7, #32]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d118      	bne.n	800863a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	2200      	movs	r2, #0
 800860c:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	2220      	movs	r2, #32
 8008612:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	2200      	movs	r2, #0
 800861a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008622:	f043 0220 	orr.w	r2, r3, #32
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800862a:	b662      	cpsie	i
}
 800862c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	2200      	movs	r2, #0
 8008632:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8008636:	2301      	movs	r3, #1
 8008638:	e09a      	b.n	8008770 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	695b      	ldr	r3, [r3, #20]
 8008640:	f003 0304 	and.w	r3, r3, #4
 8008644:	2b04      	cmp	r3, #4
 8008646:	d1d9      	bne.n	80085fc <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	681a      	ldr	r2, [r3, #0]
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008656:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	691a      	ldr	r2, [r3, #16]
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008662:	b2d2      	uxtb	r2, r2
 8008664:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800866a:	1c5a      	adds	r2, r3, #1
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008674:	3b01      	subs	r3, #1
 8008676:	b29a      	uxth	r2, r3
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008680:	b29b      	uxth	r3, r3
 8008682:	3b01      	subs	r3, #1
 8008684:	b29a      	uxth	r2, r3
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800868a:	b662      	cpsie	i
}
 800868c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	691a      	ldr	r2, [r3, #16]
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008698:	b2d2      	uxtb	r2, r2
 800869a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086a0:	1c5a      	adds	r2, r3, #1
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80086aa:	3b01      	subs	r3, #1
 80086ac:	b29a      	uxth	r2, r3
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80086b6:	b29b      	uxth	r3, r3
 80086b8:	3b01      	subs	r3, #1
 80086ba:	b29a      	uxth	r2, r3
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80086c0:	e042      	b.n	8008748 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80086c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80086c4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80086c6:	68f8      	ldr	r0, [r7, #12]
 80086c8:	f000 fb84 	bl	8008dd4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80086cc:	4603      	mov	r3, r0
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d001      	beq.n	80086d6 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80086d2:	2301      	movs	r3, #1
 80086d4:	e04c      	b.n	8008770 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	691a      	ldr	r2, [r3, #16]
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086e0:	b2d2      	uxtb	r2, r2
 80086e2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086e8:	1c5a      	adds	r2, r3, #1
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80086f2:	3b01      	subs	r3, #1
 80086f4:	b29a      	uxth	r2, r3
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80086fe:	b29b      	uxth	r3, r3
 8008700:	3b01      	subs	r3, #1
 8008702:	b29a      	uxth	r2, r3
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	695b      	ldr	r3, [r3, #20]
 800870e:	f003 0304 	and.w	r3, r3, #4
 8008712:	2b04      	cmp	r3, #4
 8008714:	d118      	bne.n	8008748 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	691a      	ldr	r2, [r3, #16]
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008720:	b2d2      	uxtb	r2, r2
 8008722:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008728:	1c5a      	adds	r2, r3, #1
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008732:	3b01      	subs	r3, #1
 8008734:	b29a      	uxth	r2, r3
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800873e:	b29b      	uxth	r3, r3
 8008740:	3b01      	subs	r3, #1
 8008742:	b29a      	uxth	r2, r3
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800874c:	2b00      	cmp	r3, #0
 800874e:	f47f ae94 	bne.w	800847a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	2220      	movs	r2, #32
 8008756:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	2200      	movs	r2, #0
 800875e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	2200      	movs	r2, #0
 8008766:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800876a:	2300      	movs	r3, #0
 800876c:	e000      	b.n	8008770 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800876e:	2302      	movs	r3, #2
  }
}
 8008770:	4618      	mov	r0, r3
 8008772:	3728      	adds	r7, #40	@ 0x28
 8008774:	46bd      	mov	sp, r7
 8008776:	bd80      	pop	{r7, pc}
 8008778:	00010004 	.word	0x00010004
 800877c:	20000044 	.word	0x20000044
 8008780:	14f8b589 	.word	0x14f8b589

08008784 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b088      	sub	sp, #32
 8008788:	af02      	add	r7, sp, #8
 800878a:	60f8      	str	r0, [r7, #12]
 800878c:	4608      	mov	r0, r1
 800878e:	4611      	mov	r1, r2
 8008790:	461a      	mov	r2, r3
 8008792:	4603      	mov	r3, r0
 8008794:	817b      	strh	r3, [r7, #10]
 8008796:	460b      	mov	r3, r1
 8008798:	813b      	strh	r3, [r7, #8]
 800879a:	4613      	mov	r3, r2
 800879c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	681a      	ldr	r2, [r3, #0]
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80087ac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80087ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087b0:	9300      	str	r3, [sp, #0]
 80087b2:	6a3b      	ldr	r3, [r7, #32]
 80087b4:	2200      	movs	r2, #0
 80087b6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80087ba:	68f8      	ldr	r0, [r7, #12]
 80087bc:	f000 f960 	bl	8008a80 <I2C_WaitOnFlagUntilTimeout>
 80087c0:	4603      	mov	r3, r0
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d00d      	beq.n	80087e2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80087d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80087d4:	d103      	bne.n	80087de <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80087dc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80087de:	2303      	movs	r3, #3
 80087e0:	e05f      	b.n	80088a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80087e2:	897b      	ldrh	r3, [r7, #10]
 80087e4:	b2db      	uxtb	r3, r3
 80087e6:	461a      	mov	r2, r3
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80087f0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80087f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087f4:	6a3a      	ldr	r2, [r7, #32]
 80087f6:	492d      	ldr	r1, [pc, #180]	@ (80088ac <I2C_RequestMemoryWrite+0x128>)
 80087f8:	68f8      	ldr	r0, [r7, #12]
 80087fa:	f000 f9bb 	bl	8008b74 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80087fe:	4603      	mov	r3, r0
 8008800:	2b00      	cmp	r3, #0
 8008802:	d001      	beq.n	8008808 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8008804:	2301      	movs	r3, #1
 8008806:	e04c      	b.n	80088a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008808:	2300      	movs	r3, #0
 800880a:	617b      	str	r3, [r7, #20]
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	695b      	ldr	r3, [r3, #20]
 8008812:	617b      	str	r3, [r7, #20]
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	699b      	ldr	r3, [r3, #24]
 800881a:	617b      	str	r3, [r7, #20]
 800881c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800881e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008820:	6a39      	ldr	r1, [r7, #32]
 8008822:	68f8      	ldr	r0, [r7, #12]
 8008824:	f000 fa46 	bl	8008cb4 <I2C_WaitOnTXEFlagUntilTimeout>
 8008828:	4603      	mov	r3, r0
 800882a:	2b00      	cmp	r3, #0
 800882c:	d00d      	beq.n	800884a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008832:	2b04      	cmp	r3, #4
 8008834:	d107      	bne.n	8008846 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	681a      	ldr	r2, [r3, #0]
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008844:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008846:	2301      	movs	r3, #1
 8008848:	e02b      	b.n	80088a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800884a:	88fb      	ldrh	r3, [r7, #6]
 800884c:	2b01      	cmp	r3, #1
 800884e:	d105      	bne.n	800885c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008850:	893b      	ldrh	r3, [r7, #8]
 8008852:	b2da      	uxtb	r2, r3
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	611a      	str	r2, [r3, #16]
 800885a:	e021      	b.n	80088a0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800885c:	893b      	ldrh	r3, [r7, #8]
 800885e:	0a1b      	lsrs	r3, r3, #8
 8008860:	b29b      	uxth	r3, r3
 8008862:	b2da      	uxtb	r2, r3
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800886a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800886c:	6a39      	ldr	r1, [r7, #32]
 800886e:	68f8      	ldr	r0, [r7, #12]
 8008870:	f000 fa20 	bl	8008cb4 <I2C_WaitOnTXEFlagUntilTimeout>
 8008874:	4603      	mov	r3, r0
 8008876:	2b00      	cmp	r3, #0
 8008878:	d00d      	beq.n	8008896 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800887e:	2b04      	cmp	r3, #4
 8008880:	d107      	bne.n	8008892 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	681a      	ldr	r2, [r3, #0]
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008890:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008892:	2301      	movs	r3, #1
 8008894:	e005      	b.n	80088a2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008896:	893b      	ldrh	r3, [r7, #8]
 8008898:	b2da      	uxtb	r2, r3
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80088a0:	2300      	movs	r3, #0
}
 80088a2:	4618      	mov	r0, r3
 80088a4:	3718      	adds	r7, #24
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bd80      	pop	{r7, pc}
 80088aa:	bf00      	nop
 80088ac:	00010002 	.word	0x00010002

080088b0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b088      	sub	sp, #32
 80088b4:	af02      	add	r7, sp, #8
 80088b6:	60f8      	str	r0, [r7, #12]
 80088b8:	4608      	mov	r0, r1
 80088ba:	4611      	mov	r1, r2
 80088bc:	461a      	mov	r2, r3
 80088be:	4603      	mov	r3, r0
 80088c0:	817b      	strh	r3, [r7, #10]
 80088c2:	460b      	mov	r3, r1
 80088c4:	813b      	strh	r3, [r7, #8]
 80088c6:	4613      	mov	r3, r2
 80088c8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	681a      	ldr	r2, [r3, #0]
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80088d8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	681a      	ldr	r2, [r3, #0]
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80088e8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80088ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088ec:	9300      	str	r3, [sp, #0]
 80088ee:	6a3b      	ldr	r3, [r7, #32]
 80088f0:	2200      	movs	r2, #0
 80088f2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80088f6:	68f8      	ldr	r0, [r7, #12]
 80088f8:	f000 f8c2 	bl	8008a80 <I2C_WaitOnFlagUntilTimeout>
 80088fc:	4603      	mov	r3, r0
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d00d      	beq.n	800891e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800890c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008910:	d103      	bne.n	800891a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008918:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800891a:	2303      	movs	r3, #3
 800891c:	e0aa      	b.n	8008a74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800891e:	897b      	ldrh	r3, [r7, #10]
 8008920:	b2db      	uxtb	r3, r3
 8008922:	461a      	mov	r2, r3
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800892c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800892e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008930:	6a3a      	ldr	r2, [r7, #32]
 8008932:	4952      	ldr	r1, [pc, #328]	@ (8008a7c <I2C_RequestMemoryRead+0x1cc>)
 8008934:	68f8      	ldr	r0, [r7, #12]
 8008936:	f000 f91d 	bl	8008b74 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800893a:	4603      	mov	r3, r0
 800893c:	2b00      	cmp	r3, #0
 800893e:	d001      	beq.n	8008944 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8008940:	2301      	movs	r3, #1
 8008942:	e097      	b.n	8008a74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008944:	2300      	movs	r3, #0
 8008946:	617b      	str	r3, [r7, #20]
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	695b      	ldr	r3, [r3, #20]
 800894e:	617b      	str	r3, [r7, #20]
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	699b      	ldr	r3, [r3, #24]
 8008956:	617b      	str	r3, [r7, #20]
 8008958:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800895a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800895c:	6a39      	ldr	r1, [r7, #32]
 800895e:	68f8      	ldr	r0, [r7, #12]
 8008960:	f000 f9a8 	bl	8008cb4 <I2C_WaitOnTXEFlagUntilTimeout>
 8008964:	4603      	mov	r3, r0
 8008966:	2b00      	cmp	r3, #0
 8008968:	d00d      	beq.n	8008986 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800896e:	2b04      	cmp	r3, #4
 8008970:	d107      	bne.n	8008982 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	681a      	ldr	r2, [r3, #0]
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008980:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008982:	2301      	movs	r3, #1
 8008984:	e076      	b.n	8008a74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008986:	88fb      	ldrh	r3, [r7, #6]
 8008988:	2b01      	cmp	r3, #1
 800898a:	d105      	bne.n	8008998 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800898c:	893b      	ldrh	r3, [r7, #8]
 800898e:	b2da      	uxtb	r2, r3
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	611a      	str	r2, [r3, #16]
 8008996:	e021      	b.n	80089dc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008998:	893b      	ldrh	r3, [r7, #8]
 800899a:	0a1b      	lsrs	r3, r3, #8
 800899c:	b29b      	uxth	r3, r3
 800899e:	b2da      	uxtb	r2, r3
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80089a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80089a8:	6a39      	ldr	r1, [r7, #32]
 80089aa:	68f8      	ldr	r0, [r7, #12]
 80089ac:	f000 f982 	bl	8008cb4 <I2C_WaitOnTXEFlagUntilTimeout>
 80089b0:	4603      	mov	r3, r0
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d00d      	beq.n	80089d2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089ba:	2b04      	cmp	r3, #4
 80089bc:	d107      	bne.n	80089ce <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	681a      	ldr	r2, [r3, #0]
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80089cc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80089ce:	2301      	movs	r3, #1
 80089d0:	e050      	b.n	8008a74 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80089d2:	893b      	ldrh	r3, [r7, #8]
 80089d4:	b2da      	uxtb	r2, r3
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80089dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80089de:	6a39      	ldr	r1, [r7, #32]
 80089e0:	68f8      	ldr	r0, [r7, #12]
 80089e2:	f000 f967 	bl	8008cb4 <I2C_WaitOnTXEFlagUntilTimeout>
 80089e6:	4603      	mov	r3, r0
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d00d      	beq.n	8008a08 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089f0:	2b04      	cmp	r3, #4
 80089f2:	d107      	bne.n	8008a04 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	681a      	ldr	r2, [r3, #0]
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008a02:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008a04:	2301      	movs	r3, #1
 8008a06:	e035      	b.n	8008a74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	681a      	ldr	r2, [r3, #0]
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008a16:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a1a:	9300      	str	r3, [sp, #0]
 8008a1c:	6a3b      	ldr	r3, [r7, #32]
 8008a1e:	2200      	movs	r2, #0
 8008a20:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008a24:	68f8      	ldr	r0, [r7, #12]
 8008a26:	f000 f82b 	bl	8008a80 <I2C_WaitOnFlagUntilTimeout>
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d00d      	beq.n	8008a4c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008a3e:	d103      	bne.n	8008a48 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008a46:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008a48:	2303      	movs	r3, #3
 8008a4a:	e013      	b.n	8008a74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008a4c:	897b      	ldrh	r3, [r7, #10]
 8008a4e:	b2db      	uxtb	r3, r3
 8008a50:	f043 0301 	orr.w	r3, r3, #1
 8008a54:	b2da      	uxtb	r2, r3
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a5e:	6a3a      	ldr	r2, [r7, #32]
 8008a60:	4906      	ldr	r1, [pc, #24]	@ (8008a7c <I2C_RequestMemoryRead+0x1cc>)
 8008a62:	68f8      	ldr	r0, [r7, #12]
 8008a64:	f000 f886 	bl	8008b74 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d001      	beq.n	8008a72 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8008a6e:	2301      	movs	r3, #1
 8008a70:	e000      	b.n	8008a74 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8008a72:	2300      	movs	r3, #0
}
 8008a74:	4618      	mov	r0, r3
 8008a76:	3718      	adds	r7, #24
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	bd80      	pop	{r7, pc}
 8008a7c:	00010002 	.word	0x00010002

08008a80 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b084      	sub	sp, #16
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	60f8      	str	r0, [r7, #12]
 8008a88:	60b9      	str	r1, [r7, #8]
 8008a8a:	603b      	str	r3, [r7, #0]
 8008a8c:	4613      	mov	r3, r2
 8008a8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008a90:	e048      	b.n	8008b24 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a98:	d044      	beq.n	8008b24 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a9a:	f7fe fc53 	bl	8007344 <HAL_GetTick>
 8008a9e:	4602      	mov	r2, r0
 8008aa0:	69bb      	ldr	r3, [r7, #24]
 8008aa2:	1ad3      	subs	r3, r2, r3
 8008aa4:	683a      	ldr	r2, [r7, #0]
 8008aa6:	429a      	cmp	r2, r3
 8008aa8:	d302      	bcc.n	8008ab0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d139      	bne.n	8008b24 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	0c1b      	lsrs	r3, r3, #16
 8008ab4:	b2db      	uxtb	r3, r3
 8008ab6:	2b01      	cmp	r3, #1
 8008ab8:	d10d      	bne.n	8008ad6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	695b      	ldr	r3, [r3, #20]
 8008ac0:	43da      	mvns	r2, r3
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	4013      	ands	r3, r2
 8008ac6:	b29b      	uxth	r3, r3
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	bf0c      	ite	eq
 8008acc:	2301      	moveq	r3, #1
 8008ace:	2300      	movne	r3, #0
 8008ad0:	b2db      	uxtb	r3, r3
 8008ad2:	461a      	mov	r2, r3
 8008ad4:	e00c      	b.n	8008af0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	699b      	ldr	r3, [r3, #24]
 8008adc:	43da      	mvns	r2, r3
 8008ade:	68bb      	ldr	r3, [r7, #8]
 8008ae0:	4013      	ands	r3, r2
 8008ae2:	b29b      	uxth	r3, r3
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	bf0c      	ite	eq
 8008ae8:	2301      	moveq	r3, #1
 8008aea:	2300      	movne	r3, #0
 8008aec:	b2db      	uxtb	r3, r3
 8008aee:	461a      	mov	r2, r3
 8008af0:	79fb      	ldrb	r3, [r7, #7]
 8008af2:	429a      	cmp	r2, r3
 8008af4:	d116      	bne.n	8008b24 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	2200      	movs	r2, #0
 8008afa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	2220      	movs	r2, #32
 8008b00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	2200      	movs	r2, #0
 8008b08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b10:	f043 0220 	orr.w	r2, r3, #32
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008b20:	2301      	movs	r3, #1
 8008b22:	e023      	b.n	8008b6c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	0c1b      	lsrs	r3, r3, #16
 8008b28:	b2db      	uxtb	r3, r3
 8008b2a:	2b01      	cmp	r3, #1
 8008b2c:	d10d      	bne.n	8008b4a <I2C_WaitOnFlagUntilTimeout+0xca>
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	695b      	ldr	r3, [r3, #20]
 8008b34:	43da      	mvns	r2, r3
 8008b36:	68bb      	ldr	r3, [r7, #8]
 8008b38:	4013      	ands	r3, r2
 8008b3a:	b29b      	uxth	r3, r3
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	bf0c      	ite	eq
 8008b40:	2301      	moveq	r3, #1
 8008b42:	2300      	movne	r3, #0
 8008b44:	b2db      	uxtb	r3, r3
 8008b46:	461a      	mov	r2, r3
 8008b48:	e00c      	b.n	8008b64 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	699b      	ldr	r3, [r3, #24]
 8008b50:	43da      	mvns	r2, r3
 8008b52:	68bb      	ldr	r3, [r7, #8]
 8008b54:	4013      	ands	r3, r2
 8008b56:	b29b      	uxth	r3, r3
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	bf0c      	ite	eq
 8008b5c:	2301      	moveq	r3, #1
 8008b5e:	2300      	movne	r3, #0
 8008b60:	b2db      	uxtb	r3, r3
 8008b62:	461a      	mov	r2, r3
 8008b64:	79fb      	ldrb	r3, [r7, #7]
 8008b66:	429a      	cmp	r2, r3
 8008b68:	d093      	beq.n	8008a92 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008b6a:	2300      	movs	r3, #0
}
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	3710      	adds	r7, #16
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bd80      	pop	{r7, pc}

08008b74 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b084      	sub	sp, #16
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	60f8      	str	r0, [r7, #12]
 8008b7c:	60b9      	str	r1, [r7, #8]
 8008b7e:	607a      	str	r2, [r7, #4]
 8008b80:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008b82:	e071      	b.n	8008c68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	695b      	ldr	r3, [r3, #20]
 8008b8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008b8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008b92:	d123      	bne.n	8008bdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	681a      	ldr	r2, [r3, #0]
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008ba2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008bac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	2220      	movs	r2, #32
 8008bb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bc8:	f043 0204 	orr.w	r2, r3, #4
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8008bd8:	2301      	movs	r3, #1
 8008bda:	e067      	b.n	8008cac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008be2:	d041      	beq.n	8008c68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008be4:	f7fe fbae 	bl	8007344 <HAL_GetTick>
 8008be8:	4602      	mov	r2, r0
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	1ad3      	subs	r3, r2, r3
 8008bee:	687a      	ldr	r2, [r7, #4]
 8008bf0:	429a      	cmp	r2, r3
 8008bf2:	d302      	bcc.n	8008bfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d136      	bne.n	8008c68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	0c1b      	lsrs	r3, r3, #16
 8008bfe:	b2db      	uxtb	r3, r3
 8008c00:	2b01      	cmp	r3, #1
 8008c02:	d10c      	bne.n	8008c1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	695b      	ldr	r3, [r3, #20]
 8008c0a:	43da      	mvns	r2, r3
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	4013      	ands	r3, r2
 8008c10:	b29b      	uxth	r3, r3
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	bf14      	ite	ne
 8008c16:	2301      	movne	r3, #1
 8008c18:	2300      	moveq	r3, #0
 8008c1a:	b2db      	uxtb	r3, r3
 8008c1c:	e00b      	b.n	8008c36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	699b      	ldr	r3, [r3, #24]
 8008c24:	43da      	mvns	r2, r3
 8008c26:	68bb      	ldr	r3, [r7, #8]
 8008c28:	4013      	ands	r3, r2
 8008c2a:	b29b      	uxth	r3, r3
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	bf14      	ite	ne
 8008c30:	2301      	movne	r3, #1
 8008c32:	2300      	moveq	r3, #0
 8008c34:	b2db      	uxtb	r3, r3
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d016      	beq.n	8008c68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	2220      	movs	r2, #32
 8008c44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c54:	f043 0220 	orr.w	r2, r3, #32
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	2200      	movs	r2, #0
 8008c60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008c64:	2301      	movs	r3, #1
 8008c66:	e021      	b.n	8008cac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008c68:	68bb      	ldr	r3, [r7, #8]
 8008c6a:	0c1b      	lsrs	r3, r3, #16
 8008c6c:	b2db      	uxtb	r3, r3
 8008c6e:	2b01      	cmp	r3, #1
 8008c70:	d10c      	bne.n	8008c8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	695b      	ldr	r3, [r3, #20]
 8008c78:	43da      	mvns	r2, r3
 8008c7a:	68bb      	ldr	r3, [r7, #8]
 8008c7c:	4013      	ands	r3, r2
 8008c7e:	b29b      	uxth	r3, r3
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	bf14      	ite	ne
 8008c84:	2301      	movne	r3, #1
 8008c86:	2300      	moveq	r3, #0
 8008c88:	b2db      	uxtb	r3, r3
 8008c8a:	e00b      	b.n	8008ca4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	699b      	ldr	r3, [r3, #24]
 8008c92:	43da      	mvns	r2, r3
 8008c94:	68bb      	ldr	r3, [r7, #8]
 8008c96:	4013      	ands	r3, r2
 8008c98:	b29b      	uxth	r3, r3
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	bf14      	ite	ne
 8008c9e:	2301      	movne	r3, #1
 8008ca0:	2300      	moveq	r3, #0
 8008ca2:	b2db      	uxtb	r3, r3
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	f47f af6d 	bne.w	8008b84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8008caa:	2300      	movs	r3, #0
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	3710      	adds	r7, #16
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}

08008cb4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b084      	sub	sp, #16
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	60f8      	str	r0, [r7, #12]
 8008cbc:	60b9      	str	r1, [r7, #8]
 8008cbe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008cc0:	e034      	b.n	8008d2c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008cc2:	68f8      	ldr	r0, [r7, #12]
 8008cc4:	f000 f8e3 	bl	8008e8e <I2C_IsAcknowledgeFailed>
 8008cc8:	4603      	mov	r3, r0
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d001      	beq.n	8008cd2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008cce:	2301      	movs	r3, #1
 8008cd0:	e034      	b.n	8008d3c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008cd2:	68bb      	ldr	r3, [r7, #8]
 8008cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cd8:	d028      	beq.n	8008d2c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008cda:	f7fe fb33 	bl	8007344 <HAL_GetTick>
 8008cde:	4602      	mov	r2, r0
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	1ad3      	subs	r3, r2, r3
 8008ce4:	68ba      	ldr	r2, [r7, #8]
 8008ce6:	429a      	cmp	r2, r3
 8008ce8:	d302      	bcc.n	8008cf0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008cea:	68bb      	ldr	r3, [r7, #8]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d11d      	bne.n	8008d2c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	695b      	ldr	r3, [r3, #20]
 8008cf6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008cfa:	2b80      	cmp	r3, #128	@ 0x80
 8008cfc:	d016      	beq.n	8008d2c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	2200      	movs	r2, #0
 8008d02:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	2220      	movs	r2, #32
 8008d08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	2200      	movs	r2, #0
 8008d10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d18:	f043 0220 	orr.w	r2, r3, #32
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	2200      	movs	r2, #0
 8008d24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008d28:	2301      	movs	r3, #1
 8008d2a:	e007      	b.n	8008d3c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	695b      	ldr	r3, [r3, #20]
 8008d32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d36:	2b80      	cmp	r3, #128	@ 0x80
 8008d38:	d1c3      	bne.n	8008cc2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008d3a:	2300      	movs	r3, #0
}
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	3710      	adds	r7, #16
 8008d40:	46bd      	mov	sp, r7
 8008d42:	bd80      	pop	{r7, pc}

08008d44 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b084      	sub	sp, #16
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	60f8      	str	r0, [r7, #12]
 8008d4c:	60b9      	str	r1, [r7, #8]
 8008d4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008d50:	e034      	b.n	8008dbc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008d52:	68f8      	ldr	r0, [r7, #12]
 8008d54:	f000 f89b 	bl	8008e8e <I2C_IsAcknowledgeFailed>
 8008d58:	4603      	mov	r3, r0
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d001      	beq.n	8008d62 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008d5e:	2301      	movs	r3, #1
 8008d60:	e034      	b.n	8008dcc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d62:	68bb      	ldr	r3, [r7, #8]
 8008d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d68:	d028      	beq.n	8008dbc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d6a:	f7fe faeb 	bl	8007344 <HAL_GetTick>
 8008d6e:	4602      	mov	r2, r0
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	1ad3      	subs	r3, r2, r3
 8008d74:	68ba      	ldr	r2, [r7, #8]
 8008d76:	429a      	cmp	r2, r3
 8008d78:	d302      	bcc.n	8008d80 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008d7a:	68bb      	ldr	r3, [r7, #8]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d11d      	bne.n	8008dbc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	695b      	ldr	r3, [r3, #20]
 8008d86:	f003 0304 	and.w	r3, r3, #4
 8008d8a:	2b04      	cmp	r3, #4
 8008d8c:	d016      	beq.n	8008dbc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	2200      	movs	r2, #0
 8008d92:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	2220      	movs	r2, #32
 8008d98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	2200      	movs	r2, #0
 8008da0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008da8:	f043 0220 	orr.w	r2, r3, #32
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	2200      	movs	r2, #0
 8008db4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008db8:	2301      	movs	r3, #1
 8008dba:	e007      	b.n	8008dcc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	695b      	ldr	r3, [r3, #20]
 8008dc2:	f003 0304 	and.w	r3, r3, #4
 8008dc6:	2b04      	cmp	r3, #4
 8008dc8:	d1c3      	bne.n	8008d52 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008dca:	2300      	movs	r3, #0
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	3710      	adds	r7, #16
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}

08008dd4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b084      	sub	sp, #16
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	60f8      	str	r0, [r7, #12]
 8008ddc:	60b9      	str	r1, [r7, #8]
 8008dde:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008de0:	e049      	b.n	8008e76 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	695b      	ldr	r3, [r3, #20]
 8008de8:	f003 0310 	and.w	r3, r3, #16
 8008dec:	2b10      	cmp	r3, #16
 8008dee:	d119      	bne.n	8008e24 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f06f 0210 	mvn.w	r2, #16
 8008df8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	2220      	movs	r2, #32
 8008e04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8008e20:	2301      	movs	r3, #1
 8008e22:	e030      	b.n	8008e86 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e24:	f7fe fa8e 	bl	8007344 <HAL_GetTick>
 8008e28:	4602      	mov	r2, r0
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	1ad3      	subs	r3, r2, r3
 8008e2e:	68ba      	ldr	r2, [r7, #8]
 8008e30:	429a      	cmp	r2, r3
 8008e32:	d302      	bcc.n	8008e3a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d11d      	bne.n	8008e76 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	695b      	ldr	r3, [r3, #20]
 8008e40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e44:	2b40      	cmp	r3, #64	@ 0x40
 8008e46:	d016      	beq.n	8008e76 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	2220      	movs	r2, #32
 8008e52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	2200      	movs	r2, #0
 8008e5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e62:	f043 0220 	orr.w	r2, r3, #32
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8008e72:	2301      	movs	r3, #1
 8008e74:	e007      	b.n	8008e86 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	695b      	ldr	r3, [r3, #20]
 8008e7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e80:	2b40      	cmp	r3, #64	@ 0x40
 8008e82:	d1ae      	bne.n	8008de2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008e84:	2300      	movs	r3, #0
}
 8008e86:	4618      	mov	r0, r3
 8008e88:	3710      	adds	r7, #16
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	bd80      	pop	{r7, pc}

08008e8e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008e8e:	b480      	push	{r7}
 8008e90:	b083      	sub	sp, #12
 8008e92:	af00      	add	r7, sp, #0
 8008e94:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	695b      	ldr	r3, [r3, #20]
 8008e9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008ea0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008ea4:	d11b      	bne.n	8008ede <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008eae:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2220      	movs	r2, #32
 8008eba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008eca:	f043 0204 	orr.w	r2, r3, #4
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8008eda:	2301      	movs	r3, #1
 8008edc:	e000      	b.n	8008ee0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008ede:	2300      	movs	r3, #0
}
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	370c      	adds	r7, #12
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	bc80      	pop	{r7}
 8008ee8:	4770      	bx	lr
	...

08008eec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b086      	sub	sp, #24
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d101      	bne.n	8008efe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008efa:	2301      	movs	r3, #1
 8008efc:	e272      	b.n	80093e4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	f003 0301 	and.w	r3, r3, #1
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	f000 8087 	beq.w	800901a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008f0c:	4b92      	ldr	r3, [pc, #584]	@ (8009158 <HAL_RCC_OscConfig+0x26c>)
 8008f0e:	685b      	ldr	r3, [r3, #4]
 8008f10:	f003 030c 	and.w	r3, r3, #12
 8008f14:	2b04      	cmp	r3, #4
 8008f16:	d00c      	beq.n	8008f32 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8008f18:	4b8f      	ldr	r3, [pc, #572]	@ (8009158 <HAL_RCC_OscConfig+0x26c>)
 8008f1a:	685b      	ldr	r3, [r3, #4]
 8008f1c:	f003 030c 	and.w	r3, r3, #12
 8008f20:	2b08      	cmp	r3, #8
 8008f22:	d112      	bne.n	8008f4a <HAL_RCC_OscConfig+0x5e>
 8008f24:	4b8c      	ldr	r3, [pc, #560]	@ (8009158 <HAL_RCC_OscConfig+0x26c>)
 8008f26:	685b      	ldr	r3, [r3, #4]
 8008f28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008f2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008f30:	d10b      	bne.n	8008f4a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008f32:	4b89      	ldr	r3, [pc, #548]	@ (8009158 <HAL_RCC_OscConfig+0x26c>)
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d06c      	beq.n	8009018 <HAL_RCC_OscConfig+0x12c>
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	685b      	ldr	r3, [r3, #4]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d168      	bne.n	8009018 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008f46:	2301      	movs	r3, #1
 8008f48:	e24c      	b.n	80093e4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	685b      	ldr	r3, [r3, #4]
 8008f4e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008f52:	d106      	bne.n	8008f62 <HAL_RCC_OscConfig+0x76>
 8008f54:	4b80      	ldr	r3, [pc, #512]	@ (8009158 <HAL_RCC_OscConfig+0x26c>)
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	4a7f      	ldr	r2, [pc, #508]	@ (8009158 <HAL_RCC_OscConfig+0x26c>)
 8008f5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008f5e:	6013      	str	r3, [r2, #0]
 8008f60:	e02e      	b.n	8008fc0 <HAL_RCC_OscConfig+0xd4>
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	685b      	ldr	r3, [r3, #4]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d10c      	bne.n	8008f84 <HAL_RCC_OscConfig+0x98>
 8008f6a:	4b7b      	ldr	r3, [pc, #492]	@ (8009158 <HAL_RCC_OscConfig+0x26c>)
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	4a7a      	ldr	r2, [pc, #488]	@ (8009158 <HAL_RCC_OscConfig+0x26c>)
 8008f70:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008f74:	6013      	str	r3, [r2, #0]
 8008f76:	4b78      	ldr	r3, [pc, #480]	@ (8009158 <HAL_RCC_OscConfig+0x26c>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	4a77      	ldr	r2, [pc, #476]	@ (8009158 <HAL_RCC_OscConfig+0x26c>)
 8008f7c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008f80:	6013      	str	r3, [r2, #0]
 8008f82:	e01d      	b.n	8008fc0 <HAL_RCC_OscConfig+0xd4>
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	685b      	ldr	r3, [r3, #4]
 8008f88:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008f8c:	d10c      	bne.n	8008fa8 <HAL_RCC_OscConfig+0xbc>
 8008f8e:	4b72      	ldr	r3, [pc, #456]	@ (8009158 <HAL_RCC_OscConfig+0x26c>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	4a71      	ldr	r2, [pc, #452]	@ (8009158 <HAL_RCC_OscConfig+0x26c>)
 8008f94:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008f98:	6013      	str	r3, [r2, #0]
 8008f9a:	4b6f      	ldr	r3, [pc, #444]	@ (8009158 <HAL_RCC_OscConfig+0x26c>)
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	4a6e      	ldr	r2, [pc, #440]	@ (8009158 <HAL_RCC_OscConfig+0x26c>)
 8008fa0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008fa4:	6013      	str	r3, [r2, #0]
 8008fa6:	e00b      	b.n	8008fc0 <HAL_RCC_OscConfig+0xd4>
 8008fa8:	4b6b      	ldr	r3, [pc, #428]	@ (8009158 <HAL_RCC_OscConfig+0x26c>)
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	4a6a      	ldr	r2, [pc, #424]	@ (8009158 <HAL_RCC_OscConfig+0x26c>)
 8008fae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008fb2:	6013      	str	r3, [r2, #0]
 8008fb4:	4b68      	ldr	r3, [pc, #416]	@ (8009158 <HAL_RCC_OscConfig+0x26c>)
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	4a67      	ldr	r2, [pc, #412]	@ (8009158 <HAL_RCC_OscConfig+0x26c>)
 8008fba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008fbe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	685b      	ldr	r3, [r3, #4]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d013      	beq.n	8008ff0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008fc8:	f7fe f9bc 	bl	8007344 <HAL_GetTick>
 8008fcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008fce:	e008      	b.n	8008fe2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008fd0:	f7fe f9b8 	bl	8007344 <HAL_GetTick>
 8008fd4:	4602      	mov	r2, r0
 8008fd6:	693b      	ldr	r3, [r7, #16]
 8008fd8:	1ad3      	subs	r3, r2, r3
 8008fda:	2b64      	cmp	r3, #100	@ 0x64
 8008fdc:	d901      	bls.n	8008fe2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008fde:	2303      	movs	r3, #3
 8008fe0:	e200      	b.n	80093e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008fe2:	4b5d      	ldr	r3, [pc, #372]	@ (8009158 <HAL_RCC_OscConfig+0x26c>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d0f0      	beq.n	8008fd0 <HAL_RCC_OscConfig+0xe4>
 8008fee:	e014      	b.n	800901a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ff0:	f7fe f9a8 	bl	8007344 <HAL_GetTick>
 8008ff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008ff6:	e008      	b.n	800900a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008ff8:	f7fe f9a4 	bl	8007344 <HAL_GetTick>
 8008ffc:	4602      	mov	r2, r0
 8008ffe:	693b      	ldr	r3, [r7, #16]
 8009000:	1ad3      	subs	r3, r2, r3
 8009002:	2b64      	cmp	r3, #100	@ 0x64
 8009004:	d901      	bls.n	800900a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8009006:	2303      	movs	r3, #3
 8009008:	e1ec      	b.n	80093e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800900a:	4b53      	ldr	r3, [pc, #332]	@ (8009158 <HAL_RCC_OscConfig+0x26c>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009012:	2b00      	cmp	r3, #0
 8009014:	d1f0      	bne.n	8008ff8 <HAL_RCC_OscConfig+0x10c>
 8009016:	e000      	b.n	800901a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009018:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f003 0302 	and.w	r3, r3, #2
 8009022:	2b00      	cmp	r3, #0
 8009024:	d063      	beq.n	80090ee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009026:	4b4c      	ldr	r3, [pc, #304]	@ (8009158 <HAL_RCC_OscConfig+0x26c>)
 8009028:	685b      	ldr	r3, [r3, #4]
 800902a:	f003 030c 	and.w	r3, r3, #12
 800902e:	2b00      	cmp	r3, #0
 8009030:	d00b      	beq.n	800904a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8009032:	4b49      	ldr	r3, [pc, #292]	@ (8009158 <HAL_RCC_OscConfig+0x26c>)
 8009034:	685b      	ldr	r3, [r3, #4]
 8009036:	f003 030c 	and.w	r3, r3, #12
 800903a:	2b08      	cmp	r3, #8
 800903c:	d11c      	bne.n	8009078 <HAL_RCC_OscConfig+0x18c>
 800903e:	4b46      	ldr	r3, [pc, #280]	@ (8009158 <HAL_RCC_OscConfig+0x26c>)
 8009040:	685b      	ldr	r3, [r3, #4]
 8009042:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009046:	2b00      	cmp	r3, #0
 8009048:	d116      	bne.n	8009078 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800904a:	4b43      	ldr	r3, [pc, #268]	@ (8009158 <HAL_RCC_OscConfig+0x26c>)
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f003 0302 	and.w	r3, r3, #2
 8009052:	2b00      	cmp	r3, #0
 8009054:	d005      	beq.n	8009062 <HAL_RCC_OscConfig+0x176>
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	691b      	ldr	r3, [r3, #16]
 800905a:	2b01      	cmp	r3, #1
 800905c:	d001      	beq.n	8009062 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800905e:	2301      	movs	r3, #1
 8009060:	e1c0      	b.n	80093e4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009062:	4b3d      	ldr	r3, [pc, #244]	@ (8009158 <HAL_RCC_OscConfig+0x26c>)
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	695b      	ldr	r3, [r3, #20]
 800906e:	00db      	lsls	r3, r3, #3
 8009070:	4939      	ldr	r1, [pc, #228]	@ (8009158 <HAL_RCC_OscConfig+0x26c>)
 8009072:	4313      	orrs	r3, r2
 8009074:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009076:	e03a      	b.n	80090ee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	691b      	ldr	r3, [r3, #16]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d020      	beq.n	80090c2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009080:	4b36      	ldr	r3, [pc, #216]	@ (800915c <HAL_RCC_OscConfig+0x270>)
 8009082:	2201      	movs	r2, #1
 8009084:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009086:	f7fe f95d 	bl	8007344 <HAL_GetTick>
 800908a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800908c:	e008      	b.n	80090a0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800908e:	f7fe f959 	bl	8007344 <HAL_GetTick>
 8009092:	4602      	mov	r2, r0
 8009094:	693b      	ldr	r3, [r7, #16]
 8009096:	1ad3      	subs	r3, r2, r3
 8009098:	2b02      	cmp	r3, #2
 800909a:	d901      	bls.n	80090a0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800909c:	2303      	movs	r3, #3
 800909e:	e1a1      	b.n	80093e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80090a0:	4b2d      	ldr	r3, [pc, #180]	@ (8009158 <HAL_RCC_OscConfig+0x26c>)
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f003 0302 	and.w	r3, r3, #2
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d0f0      	beq.n	800908e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80090ac:	4b2a      	ldr	r3, [pc, #168]	@ (8009158 <HAL_RCC_OscConfig+0x26c>)
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	695b      	ldr	r3, [r3, #20]
 80090b8:	00db      	lsls	r3, r3, #3
 80090ba:	4927      	ldr	r1, [pc, #156]	@ (8009158 <HAL_RCC_OscConfig+0x26c>)
 80090bc:	4313      	orrs	r3, r2
 80090be:	600b      	str	r3, [r1, #0]
 80090c0:	e015      	b.n	80090ee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80090c2:	4b26      	ldr	r3, [pc, #152]	@ (800915c <HAL_RCC_OscConfig+0x270>)
 80090c4:	2200      	movs	r2, #0
 80090c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80090c8:	f7fe f93c 	bl	8007344 <HAL_GetTick>
 80090cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80090ce:	e008      	b.n	80090e2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80090d0:	f7fe f938 	bl	8007344 <HAL_GetTick>
 80090d4:	4602      	mov	r2, r0
 80090d6:	693b      	ldr	r3, [r7, #16]
 80090d8:	1ad3      	subs	r3, r2, r3
 80090da:	2b02      	cmp	r3, #2
 80090dc:	d901      	bls.n	80090e2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80090de:	2303      	movs	r3, #3
 80090e0:	e180      	b.n	80093e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80090e2:	4b1d      	ldr	r3, [pc, #116]	@ (8009158 <HAL_RCC_OscConfig+0x26c>)
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	f003 0302 	and.w	r3, r3, #2
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d1f0      	bne.n	80090d0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f003 0308 	and.w	r3, r3, #8
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d03a      	beq.n	8009170 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	699b      	ldr	r3, [r3, #24]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d019      	beq.n	8009136 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009102:	4b17      	ldr	r3, [pc, #92]	@ (8009160 <HAL_RCC_OscConfig+0x274>)
 8009104:	2201      	movs	r2, #1
 8009106:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009108:	f7fe f91c 	bl	8007344 <HAL_GetTick>
 800910c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800910e:	e008      	b.n	8009122 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009110:	f7fe f918 	bl	8007344 <HAL_GetTick>
 8009114:	4602      	mov	r2, r0
 8009116:	693b      	ldr	r3, [r7, #16]
 8009118:	1ad3      	subs	r3, r2, r3
 800911a:	2b02      	cmp	r3, #2
 800911c:	d901      	bls.n	8009122 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800911e:	2303      	movs	r3, #3
 8009120:	e160      	b.n	80093e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009122:	4b0d      	ldr	r3, [pc, #52]	@ (8009158 <HAL_RCC_OscConfig+0x26c>)
 8009124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009126:	f003 0302 	and.w	r3, r3, #2
 800912a:	2b00      	cmp	r3, #0
 800912c:	d0f0      	beq.n	8009110 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800912e:	2001      	movs	r0, #1
 8009130:	f000 face 	bl	80096d0 <RCC_Delay>
 8009134:	e01c      	b.n	8009170 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009136:	4b0a      	ldr	r3, [pc, #40]	@ (8009160 <HAL_RCC_OscConfig+0x274>)
 8009138:	2200      	movs	r2, #0
 800913a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800913c:	f7fe f902 	bl	8007344 <HAL_GetTick>
 8009140:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009142:	e00f      	b.n	8009164 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009144:	f7fe f8fe 	bl	8007344 <HAL_GetTick>
 8009148:	4602      	mov	r2, r0
 800914a:	693b      	ldr	r3, [r7, #16]
 800914c:	1ad3      	subs	r3, r2, r3
 800914e:	2b02      	cmp	r3, #2
 8009150:	d908      	bls.n	8009164 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8009152:	2303      	movs	r3, #3
 8009154:	e146      	b.n	80093e4 <HAL_RCC_OscConfig+0x4f8>
 8009156:	bf00      	nop
 8009158:	40021000 	.word	0x40021000
 800915c:	42420000 	.word	0x42420000
 8009160:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009164:	4b92      	ldr	r3, [pc, #584]	@ (80093b0 <HAL_RCC_OscConfig+0x4c4>)
 8009166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009168:	f003 0302 	and.w	r3, r3, #2
 800916c:	2b00      	cmp	r3, #0
 800916e:	d1e9      	bne.n	8009144 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	f003 0304 	and.w	r3, r3, #4
 8009178:	2b00      	cmp	r3, #0
 800917a:	f000 80a6 	beq.w	80092ca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800917e:	2300      	movs	r3, #0
 8009180:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009182:	4b8b      	ldr	r3, [pc, #556]	@ (80093b0 <HAL_RCC_OscConfig+0x4c4>)
 8009184:	69db      	ldr	r3, [r3, #28]
 8009186:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800918a:	2b00      	cmp	r3, #0
 800918c:	d10d      	bne.n	80091aa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800918e:	4b88      	ldr	r3, [pc, #544]	@ (80093b0 <HAL_RCC_OscConfig+0x4c4>)
 8009190:	69db      	ldr	r3, [r3, #28]
 8009192:	4a87      	ldr	r2, [pc, #540]	@ (80093b0 <HAL_RCC_OscConfig+0x4c4>)
 8009194:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009198:	61d3      	str	r3, [r2, #28]
 800919a:	4b85      	ldr	r3, [pc, #532]	@ (80093b0 <HAL_RCC_OscConfig+0x4c4>)
 800919c:	69db      	ldr	r3, [r3, #28]
 800919e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80091a2:	60bb      	str	r3, [r7, #8]
 80091a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80091a6:	2301      	movs	r3, #1
 80091a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80091aa:	4b82      	ldr	r3, [pc, #520]	@ (80093b4 <HAL_RCC_OscConfig+0x4c8>)
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d118      	bne.n	80091e8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80091b6:	4b7f      	ldr	r3, [pc, #508]	@ (80093b4 <HAL_RCC_OscConfig+0x4c8>)
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	4a7e      	ldr	r2, [pc, #504]	@ (80093b4 <HAL_RCC_OscConfig+0x4c8>)
 80091bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80091c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80091c2:	f7fe f8bf 	bl	8007344 <HAL_GetTick>
 80091c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80091c8:	e008      	b.n	80091dc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80091ca:	f7fe f8bb 	bl	8007344 <HAL_GetTick>
 80091ce:	4602      	mov	r2, r0
 80091d0:	693b      	ldr	r3, [r7, #16]
 80091d2:	1ad3      	subs	r3, r2, r3
 80091d4:	2b64      	cmp	r3, #100	@ 0x64
 80091d6:	d901      	bls.n	80091dc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80091d8:	2303      	movs	r3, #3
 80091da:	e103      	b.n	80093e4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80091dc:	4b75      	ldr	r3, [pc, #468]	@ (80093b4 <HAL_RCC_OscConfig+0x4c8>)
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d0f0      	beq.n	80091ca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	68db      	ldr	r3, [r3, #12]
 80091ec:	2b01      	cmp	r3, #1
 80091ee:	d106      	bne.n	80091fe <HAL_RCC_OscConfig+0x312>
 80091f0:	4b6f      	ldr	r3, [pc, #444]	@ (80093b0 <HAL_RCC_OscConfig+0x4c4>)
 80091f2:	6a1b      	ldr	r3, [r3, #32]
 80091f4:	4a6e      	ldr	r2, [pc, #440]	@ (80093b0 <HAL_RCC_OscConfig+0x4c4>)
 80091f6:	f043 0301 	orr.w	r3, r3, #1
 80091fa:	6213      	str	r3, [r2, #32]
 80091fc:	e02d      	b.n	800925a <HAL_RCC_OscConfig+0x36e>
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	68db      	ldr	r3, [r3, #12]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d10c      	bne.n	8009220 <HAL_RCC_OscConfig+0x334>
 8009206:	4b6a      	ldr	r3, [pc, #424]	@ (80093b0 <HAL_RCC_OscConfig+0x4c4>)
 8009208:	6a1b      	ldr	r3, [r3, #32]
 800920a:	4a69      	ldr	r2, [pc, #420]	@ (80093b0 <HAL_RCC_OscConfig+0x4c4>)
 800920c:	f023 0301 	bic.w	r3, r3, #1
 8009210:	6213      	str	r3, [r2, #32]
 8009212:	4b67      	ldr	r3, [pc, #412]	@ (80093b0 <HAL_RCC_OscConfig+0x4c4>)
 8009214:	6a1b      	ldr	r3, [r3, #32]
 8009216:	4a66      	ldr	r2, [pc, #408]	@ (80093b0 <HAL_RCC_OscConfig+0x4c4>)
 8009218:	f023 0304 	bic.w	r3, r3, #4
 800921c:	6213      	str	r3, [r2, #32]
 800921e:	e01c      	b.n	800925a <HAL_RCC_OscConfig+0x36e>
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	68db      	ldr	r3, [r3, #12]
 8009224:	2b05      	cmp	r3, #5
 8009226:	d10c      	bne.n	8009242 <HAL_RCC_OscConfig+0x356>
 8009228:	4b61      	ldr	r3, [pc, #388]	@ (80093b0 <HAL_RCC_OscConfig+0x4c4>)
 800922a:	6a1b      	ldr	r3, [r3, #32]
 800922c:	4a60      	ldr	r2, [pc, #384]	@ (80093b0 <HAL_RCC_OscConfig+0x4c4>)
 800922e:	f043 0304 	orr.w	r3, r3, #4
 8009232:	6213      	str	r3, [r2, #32]
 8009234:	4b5e      	ldr	r3, [pc, #376]	@ (80093b0 <HAL_RCC_OscConfig+0x4c4>)
 8009236:	6a1b      	ldr	r3, [r3, #32]
 8009238:	4a5d      	ldr	r2, [pc, #372]	@ (80093b0 <HAL_RCC_OscConfig+0x4c4>)
 800923a:	f043 0301 	orr.w	r3, r3, #1
 800923e:	6213      	str	r3, [r2, #32]
 8009240:	e00b      	b.n	800925a <HAL_RCC_OscConfig+0x36e>
 8009242:	4b5b      	ldr	r3, [pc, #364]	@ (80093b0 <HAL_RCC_OscConfig+0x4c4>)
 8009244:	6a1b      	ldr	r3, [r3, #32]
 8009246:	4a5a      	ldr	r2, [pc, #360]	@ (80093b0 <HAL_RCC_OscConfig+0x4c4>)
 8009248:	f023 0301 	bic.w	r3, r3, #1
 800924c:	6213      	str	r3, [r2, #32]
 800924e:	4b58      	ldr	r3, [pc, #352]	@ (80093b0 <HAL_RCC_OscConfig+0x4c4>)
 8009250:	6a1b      	ldr	r3, [r3, #32]
 8009252:	4a57      	ldr	r2, [pc, #348]	@ (80093b0 <HAL_RCC_OscConfig+0x4c4>)
 8009254:	f023 0304 	bic.w	r3, r3, #4
 8009258:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	68db      	ldr	r3, [r3, #12]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d015      	beq.n	800928e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009262:	f7fe f86f 	bl	8007344 <HAL_GetTick>
 8009266:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009268:	e00a      	b.n	8009280 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800926a:	f7fe f86b 	bl	8007344 <HAL_GetTick>
 800926e:	4602      	mov	r2, r0
 8009270:	693b      	ldr	r3, [r7, #16]
 8009272:	1ad3      	subs	r3, r2, r3
 8009274:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009278:	4293      	cmp	r3, r2
 800927a:	d901      	bls.n	8009280 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800927c:	2303      	movs	r3, #3
 800927e:	e0b1      	b.n	80093e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009280:	4b4b      	ldr	r3, [pc, #300]	@ (80093b0 <HAL_RCC_OscConfig+0x4c4>)
 8009282:	6a1b      	ldr	r3, [r3, #32]
 8009284:	f003 0302 	and.w	r3, r3, #2
 8009288:	2b00      	cmp	r3, #0
 800928a:	d0ee      	beq.n	800926a <HAL_RCC_OscConfig+0x37e>
 800928c:	e014      	b.n	80092b8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800928e:	f7fe f859 	bl	8007344 <HAL_GetTick>
 8009292:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009294:	e00a      	b.n	80092ac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009296:	f7fe f855 	bl	8007344 <HAL_GetTick>
 800929a:	4602      	mov	r2, r0
 800929c:	693b      	ldr	r3, [r7, #16]
 800929e:	1ad3      	subs	r3, r2, r3
 80092a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80092a4:	4293      	cmp	r3, r2
 80092a6:	d901      	bls.n	80092ac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80092a8:	2303      	movs	r3, #3
 80092aa:	e09b      	b.n	80093e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80092ac:	4b40      	ldr	r3, [pc, #256]	@ (80093b0 <HAL_RCC_OscConfig+0x4c4>)
 80092ae:	6a1b      	ldr	r3, [r3, #32]
 80092b0:	f003 0302 	and.w	r3, r3, #2
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d1ee      	bne.n	8009296 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80092b8:	7dfb      	ldrb	r3, [r7, #23]
 80092ba:	2b01      	cmp	r3, #1
 80092bc:	d105      	bne.n	80092ca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80092be:	4b3c      	ldr	r3, [pc, #240]	@ (80093b0 <HAL_RCC_OscConfig+0x4c4>)
 80092c0:	69db      	ldr	r3, [r3, #28]
 80092c2:	4a3b      	ldr	r2, [pc, #236]	@ (80093b0 <HAL_RCC_OscConfig+0x4c4>)
 80092c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80092c8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	69db      	ldr	r3, [r3, #28]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	f000 8087 	beq.w	80093e2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80092d4:	4b36      	ldr	r3, [pc, #216]	@ (80093b0 <HAL_RCC_OscConfig+0x4c4>)
 80092d6:	685b      	ldr	r3, [r3, #4]
 80092d8:	f003 030c 	and.w	r3, r3, #12
 80092dc:	2b08      	cmp	r3, #8
 80092de:	d061      	beq.n	80093a4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	69db      	ldr	r3, [r3, #28]
 80092e4:	2b02      	cmp	r3, #2
 80092e6:	d146      	bne.n	8009376 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80092e8:	4b33      	ldr	r3, [pc, #204]	@ (80093b8 <HAL_RCC_OscConfig+0x4cc>)
 80092ea:	2200      	movs	r2, #0
 80092ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80092ee:	f7fe f829 	bl	8007344 <HAL_GetTick>
 80092f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80092f4:	e008      	b.n	8009308 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80092f6:	f7fe f825 	bl	8007344 <HAL_GetTick>
 80092fa:	4602      	mov	r2, r0
 80092fc:	693b      	ldr	r3, [r7, #16]
 80092fe:	1ad3      	subs	r3, r2, r3
 8009300:	2b02      	cmp	r3, #2
 8009302:	d901      	bls.n	8009308 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8009304:	2303      	movs	r3, #3
 8009306:	e06d      	b.n	80093e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009308:	4b29      	ldr	r3, [pc, #164]	@ (80093b0 <HAL_RCC_OscConfig+0x4c4>)
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009310:	2b00      	cmp	r3, #0
 8009312:	d1f0      	bne.n	80092f6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	6a1b      	ldr	r3, [r3, #32]
 8009318:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800931c:	d108      	bne.n	8009330 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800931e:	4b24      	ldr	r3, [pc, #144]	@ (80093b0 <HAL_RCC_OscConfig+0x4c4>)
 8009320:	685b      	ldr	r3, [r3, #4]
 8009322:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	689b      	ldr	r3, [r3, #8]
 800932a:	4921      	ldr	r1, [pc, #132]	@ (80093b0 <HAL_RCC_OscConfig+0x4c4>)
 800932c:	4313      	orrs	r3, r2
 800932e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009330:	4b1f      	ldr	r3, [pc, #124]	@ (80093b0 <HAL_RCC_OscConfig+0x4c4>)
 8009332:	685b      	ldr	r3, [r3, #4]
 8009334:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	6a19      	ldr	r1, [r3, #32]
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009340:	430b      	orrs	r3, r1
 8009342:	491b      	ldr	r1, [pc, #108]	@ (80093b0 <HAL_RCC_OscConfig+0x4c4>)
 8009344:	4313      	orrs	r3, r2
 8009346:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009348:	4b1b      	ldr	r3, [pc, #108]	@ (80093b8 <HAL_RCC_OscConfig+0x4cc>)
 800934a:	2201      	movs	r2, #1
 800934c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800934e:	f7fd fff9 	bl	8007344 <HAL_GetTick>
 8009352:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009354:	e008      	b.n	8009368 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009356:	f7fd fff5 	bl	8007344 <HAL_GetTick>
 800935a:	4602      	mov	r2, r0
 800935c:	693b      	ldr	r3, [r7, #16]
 800935e:	1ad3      	subs	r3, r2, r3
 8009360:	2b02      	cmp	r3, #2
 8009362:	d901      	bls.n	8009368 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8009364:	2303      	movs	r3, #3
 8009366:	e03d      	b.n	80093e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009368:	4b11      	ldr	r3, [pc, #68]	@ (80093b0 <HAL_RCC_OscConfig+0x4c4>)
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009370:	2b00      	cmp	r3, #0
 8009372:	d0f0      	beq.n	8009356 <HAL_RCC_OscConfig+0x46a>
 8009374:	e035      	b.n	80093e2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009376:	4b10      	ldr	r3, [pc, #64]	@ (80093b8 <HAL_RCC_OscConfig+0x4cc>)
 8009378:	2200      	movs	r2, #0
 800937a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800937c:	f7fd ffe2 	bl	8007344 <HAL_GetTick>
 8009380:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009382:	e008      	b.n	8009396 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009384:	f7fd ffde 	bl	8007344 <HAL_GetTick>
 8009388:	4602      	mov	r2, r0
 800938a:	693b      	ldr	r3, [r7, #16]
 800938c:	1ad3      	subs	r3, r2, r3
 800938e:	2b02      	cmp	r3, #2
 8009390:	d901      	bls.n	8009396 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8009392:	2303      	movs	r3, #3
 8009394:	e026      	b.n	80093e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009396:	4b06      	ldr	r3, [pc, #24]	@ (80093b0 <HAL_RCC_OscConfig+0x4c4>)
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d1f0      	bne.n	8009384 <HAL_RCC_OscConfig+0x498>
 80093a2:	e01e      	b.n	80093e2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	69db      	ldr	r3, [r3, #28]
 80093a8:	2b01      	cmp	r3, #1
 80093aa:	d107      	bne.n	80093bc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80093ac:	2301      	movs	r3, #1
 80093ae:	e019      	b.n	80093e4 <HAL_RCC_OscConfig+0x4f8>
 80093b0:	40021000 	.word	0x40021000
 80093b4:	40007000 	.word	0x40007000
 80093b8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80093bc:	4b0b      	ldr	r3, [pc, #44]	@ (80093ec <HAL_RCC_OscConfig+0x500>)
 80093be:	685b      	ldr	r3, [r3, #4]
 80093c0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	6a1b      	ldr	r3, [r3, #32]
 80093cc:	429a      	cmp	r2, r3
 80093ce:	d106      	bne.n	80093de <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80093da:	429a      	cmp	r2, r3
 80093dc:	d001      	beq.n	80093e2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80093de:	2301      	movs	r3, #1
 80093e0:	e000      	b.n	80093e4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80093e2:	2300      	movs	r3, #0
}
 80093e4:	4618      	mov	r0, r3
 80093e6:	3718      	adds	r7, #24
 80093e8:	46bd      	mov	sp, r7
 80093ea:	bd80      	pop	{r7, pc}
 80093ec:	40021000 	.word	0x40021000

080093f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b084      	sub	sp, #16
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
 80093f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d101      	bne.n	8009404 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009400:	2301      	movs	r3, #1
 8009402:	e0d0      	b.n	80095a6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009404:	4b6a      	ldr	r3, [pc, #424]	@ (80095b0 <HAL_RCC_ClockConfig+0x1c0>)
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f003 0307 	and.w	r3, r3, #7
 800940c:	683a      	ldr	r2, [r7, #0]
 800940e:	429a      	cmp	r2, r3
 8009410:	d910      	bls.n	8009434 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009412:	4b67      	ldr	r3, [pc, #412]	@ (80095b0 <HAL_RCC_ClockConfig+0x1c0>)
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f023 0207 	bic.w	r2, r3, #7
 800941a:	4965      	ldr	r1, [pc, #404]	@ (80095b0 <HAL_RCC_ClockConfig+0x1c0>)
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	4313      	orrs	r3, r2
 8009420:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009422:	4b63      	ldr	r3, [pc, #396]	@ (80095b0 <HAL_RCC_ClockConfig+0x1c0>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f003 0307 	and.w	r3, r3, #7
 800942a:	683a      	ldr	r2, [r7, #0]
 800942c:	429a      	cmp	r2, r3
 800942e:	d001      	beq.n	8009434 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8009430:	2301      	movs	r3, #1
 8009432:	e0b8      	b.n	80095a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	f003 0302 	and.w	r3, r3, #2
 800943c:	2b00      	cmp	r3, #0
 800943e:	d020      	beq.n	8009482 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f003 0304 	and.w	r3, r3, #4
 8009448:	2b00      	cmp	r3, #0
 800944a:	d005      	beq.n	8009458 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800944c:	4b59      	ldr	r3, [pc, #356]	@ (80095b4 <HAL_RCC_ClockConfig+0x1c4>)
 800944e:	685b      	ldr	r3, [r3, #4]
 8009450:	4a58      	ldr	r2, [pc, #352]	@ (80095b4 <HAL_RCC_ClockConfig+0x1c4>)
 8009452:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8009456:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	f003 0308 	and.w	r3, r3, #8
 8009460:	2b00      	cmp	r3, #0
 8009462:	d005      	beq.n	8009470 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009464:	4b53      	ldr	r3, [pc, #332]	@ (80095b4 <HAL_RCC_ClockConfig+0x1c4>)
 8009466:	685b      	ldr	r3, [r3, #4]
 8009468:	4a52      	ldr	r2, [pc, #328]	@ (80095b4 <HAL_RCC_ClockConfig+0x1c4>)
 800946a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800946e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009470:	4b50      	ldr	r3, [pc, #320]	@ (80095b4 <HAL_RCC_ClockConfig+0x1c4>)
 8009472:	685b      	ldr	r3, [r3, #4]
 8009474:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	689b      	ldr	r3, [r3, #8]
 800947c:	494d      	ldr	r1, [pc, #308]	@ (80095b4 <HAL_RCC_ClockConfig+0x1c4>)
 800947e:	4313      	orrs	r3, r2
 8009480:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	f003 0301 	and.w	r3, r3, #1
 800948a:	2b00      	cmp	r3, #0
 800948c:	d040      	beq.n	8009510 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	685b      	ldr	r3, [r3, #4]
 8009492:	2b01      	cmp	r3, #1
 8009494:	d107      	bne.n	80094a6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009496:	4b47      	ldr	r3, [pc, #284]	@ (80095b4 <HAL_RCC_ClockConfig+0x1c4>)
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d115      	bne.n	80094ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80094a2:	2301      	movs	r3, #1
 80094a4:	e07f      	b.n	80095a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	685b      	ldr	r3, [r3, #4]
 80094aa:	2b02      	cmp	r3, #2
 80094ac:	d107      	bne.n	80094be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80094ae:	4b41      	ldr	r3, [pc, #260]	@ (80095b4 <HAL_RCC_ClockConfig+0x1c4>)
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d109      	bne.n	80094ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80094ba:	2301      	movs	r3, #1
 80094bc:	e073      	b.n	80095a6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80094be:	4b3d      	ldr	r3, [pc, #244]	@ (80095b4 <HAL_RCC_ClockConfig+0x1c4>)
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	f003 0302 	and.w	r3, r3, #2
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d101      	bne.n	80094ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80094ca:	2301      	movs	r3, #1
 80094cc:	e06b      	b.n	80095a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80094ce:	4b39      	ldr	r3, [pc, #228]	@ (80095b4 <HAL_RCC_ClockConfig+0x1c4>)
 80094d0:	685b      	ldr	r3, [r3, #4]
 80094d2:	f023 0203 	bic.w	r2, r3, #3
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	685b      	ldr	r3, [r3, #4]
 80094da:	4936      	ldr	r1, [pc, #216]	@ (80095b4 <HAL_RCC_ClockConfig+0x1c4>)
 80094dc:	4313      	orrs	r3, r2
 80094de:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80094e0:	f7fd ff30 	bl	8007344 <HAL_GetTick>
 80094e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80094e6:	e00a      	b.n	80094fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80094e8:	f7fd ff2c 	bl	8007344 <HAL_GetTick>
 80094ec:	4602      	mov	r2, r0
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	1ad3      	subs	r3, r2, r3
 80094f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80094f6:	4293      	cmp	r3, r2
 80094f8:	d901      	bls.n	80094fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80094fa:	2303      	movs	r3, #3
 80094fc:	e053      	b.n	80095a6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80094fe:	4b2d      	ldr	r3, [pc, #180]	@ (80095b4 <HAL_RCC_ClockConfig+0x1c4>)
 8009500:	685b      	ldr	r3, [r3, #4]
 8009502:	f003 020c 	and.w	r2, r3, #12
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	685b      	ldr	r3, [r3, #4]
 800950a:	009b      	lsls	r3, r3, #2
 800950c:	429a      	cmp	r2, r3
 800950e:	d1eb      	bne.n	80094e8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009510:	4b27      	ldr	r3, [pc, #156]	@ (80095b0 <HAL_RCC_ClockConfig+0x1c0>)
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	f003 0307 	and.w	r3, r3, #7
 8009518:	683a      	ldr	r2, [r7, #0]
 800951a:	429a      	cmp	r2, r3
 800951c:	d210      	bcs.n	8009540 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800951e:	4b24      	ldr	r3, [pc, #144]	@ (80095b0 <HAL_RCC_ClockConfig+0x1c0>)
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f023 0207 	bic.w	r2, r3, #7
 8009526:	4922      	ldr	r1, [pc, #136]	@ (80095b0 <HAL_RCC_ClockConfig+0x1c0>)
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	4313      	orrs	r3, r2
 800952c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800952e:	4b20      	ldr	r3, [pc, #128]	@ (80095b0 <HAL_RCC_ClockConfig+0x1c0>)
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	f003 0307 	and.w	r3, r3, #7
 8009536:	683a      	ldr	r2, [r7, #0]
 8009538:	429a      	cmp	r2, r3
 800953a:	d001      	beq.n	8009540 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800953c:	2301      	movs	r3, #1
 800953e:	e032      	b.n	80095a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	f003 0304 	and.w	r3, r3, #4
 8009548:	2b00      	cmp	r3, #0
 800954a:	d008      	beq.n	800955e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800954c:	4b19      	ldr	r3, [pc, #100]	@ (80095b4 <HAL_RCC_ClockConfig+0x1c4>)
 800954e:	685b      	ldr	r3, [r3, #4]
 8009550:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	68db      	ldr	r3, [r3, #12]
 8009558:	4916      	ldr	r1, [pc, #88]	@ (80095b4 <HAL_RCC_ClockConfig+0x1c4>)
 800955a:	4313      	orrs	r3, r2
 800955c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	f003 0308 	and.w	r3, r3, #8
 8009566:	2b00      	cmp	r3, #0
 8009568:	d009      	beq.n	800957e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800956a:	4b12      	ldr	r3, [pc, #72]	@ (80095b4 <HAL_RCC_ClockConfig+0x1c4>)
 800956c:	685b      	ldr	r3, [r3, #4]
 800956e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	691b      	ldr	r3, [r3, #16]
 8009576:	00db      	lsls	r3, r3, #3
 8009578:	490e      	ldr	r1, [pc, #56]	@ (80095b4 <HAL_RCC_ClockConfig+0x1c4>)
 800957a:	4313      	orrs	r3, r2
 800957c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800957e:	f000 f821 	bl	80095c4 <HAL_RCC_GetSysClockFreq>
 8009582:	4602      	mov	r2, r0
 8009584:	4b0b      	ldr	r3, [pc, #44]	@ (80095b4 <HAL_RCC_ClockConfig+0x1c4>)
 8009586:	685b      	ldr	r3, [r3, #4]
 8009588:	091b      	lsrs	r3, r3, #4
 800958a:	f003 030f 	and.w	r3, r3, #15
 800958e:	490a      	ldr	r1, [pc, #40]	@ (80095b8 <HAL_RCC_ClockConfig+0x1c8>)
 8009590:	5ccb      	ldrb	r3, [r1, r3]
 8009592:	fa22 f303 	lsr.w	r3, r2, r3
 8009596:	4a09      	ldr	r2, [pc, #36]	@ (80095bc <HAL_RCC_ClockConfig+0x1cc>)
 8009598:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800959a:	4b09      	ldr	r3, [pc, #36]	@ (80095c0 <HAL_RCC_ClockConfig+0x1d0>)
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	4618      	mov	r0, r3
 80095a0:	f7fd fe8e 	bl	80072c0 <HAL_InitTick>

  return HAL_OK;
 80095a4:	2300      	movs	r3, #0
}
 80095a6:	4618      	mov	r0, r3
 80095a8:	3710      	adds	r7, #16
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bd80      	pop	{r7, pc}
 80095ae:	bf00      	nop
 80095b0:	40022000 	.word	0x40022000
 80095b4:	40021000 	.word	0x40021000
 80095b8:	0800b00c 	.word	0x0800b00c
 80095bc:	20000044 	.word	0x20000044
 80095c0:	20000048 	.word	0x20000048

080095c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80095c4:	b480      	push	{r7}
 80095c6:	b087      	sub	sp, #28
 80095c8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80095ca:	2300      	movs	r3, #0
 80095cc:	60fb      	str	r3, [r7, #12]
 80095ce:	2300      	movs	r3, #0
 80095d0:	60bb      	str	r3, [r7, #8]
 80095d2:	2300      	movs	r3, #0
 80095d4:	617b      	str	r3, [r7, #20]
 80095d6:	2300      	movs	r3, #0
 80095d8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80095da:	2300      	movs	r3, #0
 80095dc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80095de:	4b1e      	ldr	r3, [pc, #120]	@ (8009658 <HAL_RCC_GetSysClockFreq+0x94>)
 80095e0:	685b      	ldr	r3, [r3, #4]
 80095e2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	f003 030c 	and.w	r3, r3, #12
 80095ea:	2b04      	cmp	r3, #4
 80095ec:	d002      	beq.n	80095f4 <HAL_RCC_GetSysClockFreq+0x30>
 80095ee:	2b08      	cmp	r3, #8
 80095f0:	d003      	beq.n	80095fa <HAL_RCC_GetSysClockFreq+0x36>
 80095f2:	e027      	b.n	8009644 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80095f4:	4b19      	ldr	r3, [pc, #100]	@ (800965c <HAL_RCC_GetSysClockFreq+0x98>)
 80095f6:	613b      	str	r3, [r7, #16]
      break;
 80095f8:	e027      	b.n	800964a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	0c9b      	lsrs	r3, r3, #18
 80095fe:	f003 030f 	and.w	r3, r3, #15
 8009602:	4a17      	ldr	r2, [pc, #92]	@ (8009660 <HAL_RCC_GetSysClockFreq+0x9c>)
 8009604:	5cd3      	ldrb	r3, [r2, r3]
 8009606:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800960e:	2b00      	cmp	r3, #0
 8009610:	d010      	beq.n	8009634 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8009612:	4b11      	ldr	r3, [pc, #68]	@ (8009658 <HAL_RCC_GetSysClockFreq+0x94>)
 8009614:	685b      	ldr	r3, [r3, #4]
 8009616:	0c5b      	lsrs	r3, r3, #17
 8009618:	f003 0301 	and.w	r3, r3, #1
 800961c:	4a11      	ldr	r2, [pc, #68]	@ (8009664 <HAL_RCC_GetSysClockFreq+0xa0>)
 800961e:	5cd3      	ldrb	r3, [r2, r3]
 8009620:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	4a0d      	ldr	r2, [pc, #52]	@ (800965c <HAL_RCC_GetSysClockFreq+0x98>)
 8009626:	fb03 f202 	mul.w	r2, r3, r2
 800962a:	68bb      	ldr	r3, [r7, #8]
 800962c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009630:	617b      	str	r3, [r7, #20]
 8009632:	e004      	b.n	800963e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	4a0c      	ldr	r2, [pc, #48]	@ (8009668 <HAL_RCC_GetSysClockFreq+0xa4>)
 8009638:	fb02 f303 	mul.w	r3, r2, r3
 800963c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800963e:	697b      	ldr	r3, [r7, #20]
 8009640:	613b      	str	r3, [r7, #16]
      break;
 8009642:	e002      	b.n	800964a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8009644:	4b05      	ldr	r3, [pc, #20]	@ (800965c <HAL_RCC_GetSysClockFreq+0x98>)
 8009646:	613b      	str	r3, [r7, #16]
      break;
 8009648:	bf00      	nop
    }
  }
  return sysclockfreq;
 800964a:	693b      	ldr	r3, [r7, #16]
}
 800964c:	4618      	mov	r0, r3
 800964e:	371c      	adds	r7, #28
 8009650:	46bd      	mov	sp, r7
 8009652:	bc80      	pop	{r7}
 8009654:	4770      	bx	lr
 8009656:	bf00      	nop
 8009658:	40021000 	.word	0x40021000
 800965c:	007a1200 	.word	0x007a1200
 8009660:	0800b024 	.word	0x0800b024
 8009664:	0800b034 	.word	0x0800b034
 8009668:	003d0900 	.word	0x003d0900

0800966c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800966c:	b480      	push	{r7}
 800966e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009670:	4b02      	ldr	r3, [pc, #8]	@ (800967c <HAL_RCC_GetHCLKFreq+0x10>)
 8009672:	681b      	ldr	r3, [r3, #0]
}
 8009674:	4618      	mov	r0, r3
 8009676:	46bd      	mov	sp, r7
 8009678:	bc80      	pop	{r7}
 800967a:	4770      	bx	lr
 800967c:	20000044 	.word	0x20000044

08009680 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009684:	f7ff fff2 	bl	800966c <HAL_RCC_GetHCLKFreq>
 8009688:	4602      	mov	r2, r0
 800968a:	4b05      	ldr	r3, [pc, #20]	@ (80096a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800968c:	685b      	ldr	r3, [r3, #4]
 800968e:	0a1b      	lsrs	r3, r3, #8
 8009690:	f003 0307 	and.w	r3, r3, #7
 8009694:	4903      	ldr	r1, [pc, #12]	@ (80096a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009696:	5ccb      	ldrb	r3, [r1, r3]
 8009698:	fa22 f303 	lsr.w	r3, r2, r3
}
 800969c:	4618      	mov	r0, r3
 800969e:	bd80      	pop	{r7, pc}
 80096a0:	40021000 	.word	0x40021000
 80096a4:	0800b01c 	.word	0x0800b01c

080096a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80096ac:	f7ff ffde 	bl	800966c <HAL_RCC_GetHCLKFreq>
 80096b0:	4602      	mov	r2, r0
 80096b2:	4b05      	ldr	r3, [pc, #20]	@ (80096c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80096b4:	685b      	ldr	r3, [r3, #4]
 80096b6:	0adb      	lsrs	r3, r3, #11
 80096b8:	f003 0307 	and.w	r3, r3, #7
 80096bc:	4903      	ldr	r1, [pc, #12]	@ (80096cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80096be:	5ccb      	ldrb	r3, [r1, r3]
 80096c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80096c4:	4618      	mov	r0, r3
 80096c6:	bd80      	pop	{r7, pc}
 80096c8:	40021000 	.word	0x40021000
 80096cc:	0800b01c 	.word	0x0800b01c

080096d0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80096d0:	b480      	push	{r7}
 80096d2:	b085      	sub	sp, #20
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80096d8:	4b0a      	ldr	r3, [pc, #40]	@ (8009704 <RCC_Delay+0x34>)
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	4a0a      	ldr	r2, [pc, #40]	@ (8009708 <RCC_Delay+0x38>)
 80096de:	fba2 2303 	umull	r2, r3, r2, r3
 80096e2:	0a5b      	lsrs	r3, r3, #9
 80096e4:	687a      	ldr	r2, [r7, #4]
 80096e6:	fb02 f303 	mul.w	r3, r2, r3
 80096ea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80096ec:	bf00      	nop
  }
  while (Delay --);
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	1e5a      	subs	r2, r3, #1
 80096f2:	60fa      	str	r2, [r7, #12]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d1f9      	bne.n	80096ec <RCC_Delay+0x1c>
}
 80096f8:	bf00      	nop
 80096fa:	bf00      	nop
 80096fc:	3714      	adds	r7, #20
 80096fe:	46bd      	mov	sp, r7
 8009700:	bc80      	pop	{r7}
 8009702:	4770      	bx	lr
 8009704:	20000044 	.word	0x20000044
 8009708:	10624dd3 	.word	0x10624dd3

0800970c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b082      	sub	sp, #8
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d101      	bne.n	800971e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800971a:	2301      	movs	r3, #1
 800971c:	e042      	b.n	80097a4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009724:	b2db      	uxtb	r3, r3
 8009726:	2b00      	cmp	r3, #0
 8009728:	d106      	bne.n	8009738 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	2200      	movs	r2, #0
 800972e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009732:	6878      	ldr	r0, [r7, #4]
 8009734:	f7fd fc2c 	bl	8006f90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2224      	movs	r2, #36	@ 0x24
 800973c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	68da      	ldr	r2, [r3, #12]
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800974e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009750:	6878      	ldr	r0, [r7, #4]
 8009752:	f000 ff2f 	bl	800a5b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	691a      	ldr	r2, [r3, #16]
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009764:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	695a      	ldr	r2, [r3, #20]
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009774:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	68da      	ldr	r2, [r3, #12]
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009784:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	2200      	movs	r2, #0
 800978a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2220      	movs	r2, #32
 8009790:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2220      	movs	r2, #32
 8009798:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2200      	movs	r2, #0
 80097a0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80097a2:	2300      	movs	r3, #0
}
 80097a4:	4618      	mov	r0, r3
 80097a6:	3708      	adds	r7, #8
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bd80      	pop	{r7, pc}

080097ac <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b08c      	sub	sp, #48	@ 0x30
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	60f8      	str	r0, [r7, #12]
 80097b4:	60b9      	str	r1, [r7, #8]
 80097b6:	4613      	mov	r3, r2
 80097b8:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80097c0:	b2db      	uxtb	r3, r3
 80097c2:	2b20      	cmp	r3, #32
 80097c4:	d156      	bne.n	8009874 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 80097c6:	68bb      	ldr	r3, [r7, #8]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d002      	beq.n	80097d2 <HAL_UART_Transmit_DMA+0x26>
 80097cc:	88fb      	ldrh	r3, [r7, #6]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d101      	bne.n	80097d6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80097d2:	2301      	movs	r3, #1
 80097d4:	e04f      	b.n	8009876 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 80097d6:	68ba      	ldr	r2, [r7, #8]
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	88fa      	ldrh	r2, [r7, #6]
 80097e0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	88fa      	ldrh	r2, [r7, #6]
 80097e6:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	2200      	movs	r2, #0
 80097ec:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	2221      	movs	r2, #33	@ 0x21
 80097f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097fa:	4a21      	ldr	r2, [pc, #132]	@ (8009880 <HAL_UART_Transmit_DMA+0xd4>)
 80097fc:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009802:	4a20      	ldr	r2, [pc, #128]	@ (8009884 <HAL_UART_Transmit_DMA+0xd8>)
 8009804:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800980a:	4a1f      	ldr	r2, [pc, #124]	@ (8009888 <HAL_UART_Transmit_DMA+0xdc>)
 800980c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009812:	2200      	movs	r2, #0
 8009814:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 8009816:	f107 0308 	add.w	r3, r7, #8
 800981a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8009820:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009822:	6819      	ldr	r1, [r3, #0]
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	3304      	adds	r3, #4
 800982a:	461a      	mov	r2, r3
 800982c:	88fb      	ldrh	r3, [r7, #6]
 800982e:	f7fd ff1f 	bl	8007670 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800983a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	3314      	adds	r3, #20
 8009842:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009844:	69bb      	ldr	r3, [r7, #24]
 8009846:	e853 3f00 	ldrex	r3, [r3]
 800984a:	617b      	str	r3, [r7, #20]
   return(result);
 800984c:	697b      	ldr	r3, [r7, #20]
 800984e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009852:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	3314      	adds	r3, #20
 800985a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800985c:	627a      	str	r2, [r7, #36]	@ 0x24
 800985e:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009860:	6a39      	ldr	r1, [r7, #32]
 8009862:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009864:	e841 2300 	strex	r3, r2, [r1]
 8009868:	61fb      	str	r3, [r7, #28]
   return(result);
 800986a:	69fb      	ldr	r3, [r7, #28]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d1e5      	bne.n	800983c <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8009870:	2300      	movs	r3, #0
 8009872:	e000      	b.n	8009876 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8009874:	2302      	movs	r3, #2
  }
}
 8009876:	4618      	mov	r0, r3
 8009878:	3730      	adds	r7, #48	@ 0x30
 800987a:	46bd      	mov	sp, r7
 800987c:	bd80      	pop	{r7, pc}
 800987e:	bf00      	nop
 8009880:	08009e49 	.word	0x08009e49
 8009884:	08009ee3 	.word	0x08009ee3
 8009888:	0800a067 	.word	0x0800a067

0800988c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b084      	sub	sp, #16
 8009890:	af00      	add	r7, sp, #0
 8009892:	60f8      	str	r0, [r7, #12]
 8009894:	60b9      	str	r1, [r7, #8]
 8009896:	4613      	mov	r3, r2
 8009898:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80098a0:	b2db      	uxtb	r3, r3
 80098a2:	2b20      	cmp	r3, #32
 80098a4:	d112      	bne.n	80098cc <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80098a6:	68bb      	ldr	r3, [r7, #8]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d002      	beq.n	80098b2 <HAL_UART_Receive_DMA+0x26>
 80098ac:	88fb      	ldrh	r3, [r7, #6]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d101      	bne.n	80098b6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80098b2:	2301      	movs	r3, #1
 80098b4:	e00b      	b.n	80098ce <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	2200      	movs	r2, #0
 80098ba:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80098bc:	88fb      	ldrh	r3, [r7, #6]
 80098be:	461a      	mov	r2, r3
 80098c0:	68b9      	ldr	r1, [r7, #8]
 80098c2:	68f8      	ldr	r0, [r7, #12]
 80098c4:	f000 fc1a 	bl	800a0fc <UART_Start_Receive_DMA>
 80098c8:	4603      	mov	r3, r0
 80098ca:	e000      	b.n	80098ce <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80098cc:	2302      	movs	r3, #2
  }
}
 80098ce:	4618      	mov	r0, r3
 80098d0:	3710      	adds	r7, #16
 80098d2:	46bd      	mov	sp, r7
 80098d4:	bd80      	pop	{r7, pc}
	...

080098d8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b0ba      	sub	sp, #232	@ 0xe8
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	68db      	ldr	r3, [r3, #12]
 80098f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	695b      	ldr	r3, [r3, #20]
 80098fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80098fe:	2300      	movs	r3, #0
 8009900:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8009904:	2300      	movs	r3, #0
 8009906:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800990a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800990e:	f003 030f 	and.w	r3, r3, #15
 8009912:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8009916:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800991a:	2b00      	cmp	r3, #0
 800991c:	d10f      	bne.n	800993e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800991e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009922:	f003 0320 	and.w	r3, r3, #32
 8009926:	2b00      	cmp	r3, #0
 8009928:	d009      	beq.n	800993e <HAL_UART_IRQHandler+0x66>
 800992a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800992e:	f003 0320 	and.w	r3, r3, #32
 8009932:	2b00      	cmp	r3, #0
 8009934:	d003      	beq.n	800993e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009936:	6878      	ldr	r0, [r7, #4]
 8009938:	f000 fd7e 	bl	800a438 <UART_Receive_IT>
      return;
 800993c:	e25b      	b.n	8009df6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800993e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009942:	2b00      	cmp	r3, #0
 8009944:	f000 80de 	beq.w	8009b04 <HAL_UART_IRQHandler+0x22c>
 8009948:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800994c:	f003 0301 	and.w	r3, r3, #1
 8009950:	2b00      	cmp	r3, #0
 8009952:	d106      	bne.n	8009962 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009954:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009958:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800995c:	2b00      	cmp	r3, #0
 800995e:	f000 80d1 	beq.w	8009b04 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009962:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009966:	f003 0301 	and.w	r3, r3, #1
 800996a:	2b00      	cmp	r3, #0
 800996c:	d00b      	beq.n	8009986 <HAL_UART_IRQHandler+0xae>
 800996e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009972:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009976:	2b00      	cmp	r3, #0
 8009978:	d005      	beq.n	8009986 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800997e:	f043 0201 	orr.w	r2, r3, #1
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009986:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800998a:	f003 0304 	and.w	r3, r3, #4
 800998e:	2b00      	cmp	r3, #0
 8009990:	d00b      	beq.n	80099aa <HAL_UART_IRQHandler+0xd2>
 8009992:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009996:	f003 0301 	and.w	r3, r3, #1
 800999a:	2b00      	cmp	r3, #0
 800999c:	d005      	beq.n	80099aa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80099a2:	f043 0202 	orr.w	r2, r3, #2
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80099aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80099ae:	f003 0302 	and.w	r3, r3, #2
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d00b      	beq.n	80099ce <HAL_UART_IRQHandler+0xf6>
 80099b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80099ba:	f003 0301 	and.w	r3, r3, #1
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d005      	beq.n	80099ce <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80099c6:	f043 0204 	orr.w	r2, r3, #4
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80099ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80099d2:	f003 0308 	and.w	r3, r3, #8
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d011      	beq.n	80099fe <HAL_UART_IRQHandler+0x126>
 80099da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80099de:	f003 0320 	and.w	r3, r3, #32
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d105      	bne.n	80099f2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80099e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80099ea:	f003 0301 	and.w	r3, r3, #1
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d005      	beq.n	80099fe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80099f6:	f043 0208 	orr.w	r2, r3, #8
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	f000 81f2 	beq.w	8009dec <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009a08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a0c:	f003 0320 	and.w	r3, r3, #32
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d008      	beq.n	8009a26 <HAL_UART_IRQHandler+0x14e>
 8009a14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009a18:	f003 0320 	and.w	r3, r3, #32
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d002      	beq.n	8009a26 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009a20:	6878      	ldr	r0, [r7, #4]
 8009a22:	f000 fd09 	bl	800a438 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	695b      	ldr	r3, [r3, #20]
 8009a2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	bf14      	ite	ne
 8009a34:	2301      	movne	r3, #1
 8009a36:	2300      	moveq	r3, #0
 8009a38:	b2db      	uxtb	r3, r3
 8009a3a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a42:	f003 0308 	and.w	r3, r3, #8
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d103      	bne.n	8009a52 <HAL_UART_IRQHandler+0x17a>
 8009a4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d04f      	beq.n	8009af2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009a52:	6878      	ldr	r0, [r7, #4]
 8009a54:	f000 fc13 	bl	800a27e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	695b      	ldr	r3, [r3, #20]
 8009a5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d041      	beq.n	8009aea <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	3314      	adds	r3, #20
 8009a6c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a70:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009a74:	e853 3f00 	ldrex	r3, [r3]
 8009a78:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009a7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009a80:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009a84:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	3314      	adds	r3, #20
 8009a8e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009a92:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009a96:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a9a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009a9e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009aa2:	e841 2300 	strex	r3, r2, [r1]
 8009aa6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009aaa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d1d9      	bne.n	8009a66 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d013      	beq.n	8009ae2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009abe:	4a7e      	ldr	r2, [pc, #504]	@ (8009cb8 <HAL_UART_IRQHandler+0x3e0>)
 8009ac0:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	f7fd fe6e 	bl	80077a8 <HAL_DMA_Abort_IT>
 8009acc:	4603      	mov	r3, r0
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d016      	beq.n	8009b00 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ad6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ad8:	687a      	ldr	r2, [r7, #4]
 8009ada:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8009adc:	4610      	mov	r0, r2
 8009ade:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ae0:	e00e      	b.n	8009b00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	f000 f99c 	bl	8009e20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ae8:	e00a      	b.n	8009b00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009aea:	6878      	ldr	r0, [r7, #4]
 8009aec:	f000 f998 	bl	8009e20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009af0:	e006      	b.n	8009b00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009af2:	6878      	ldr	r0, [r7, #4]
 8009af4:	f000 f994 	bl	8009e20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2200      	movs	r2, #0
 8009afc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8009afe:	e175      	b.n	8009dec <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b00:	bf00      	nop
    return;
 8009b02:	e173      	b.n	8009dec <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b08:	2b01      	cmp	r3, #1
 8009b0a:	f040 814f 	bne.w	8009dac <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009b0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b12:	f003 0310 	and.w	r3, r3, #16
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	f000 8148 	beq.w	8009dac <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009b1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b20:	f003 0310 	and.w	r3, r3, #16
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	f000 8141 	beq.w	8009dac <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	60bb      	str	r3, [r7, #8]
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	60bb      	str	r3, [r7, #8]
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	685b      	ldr	r3, [r3, #4]
 8009b3c:	60bb      	str	r3, [r7, #8]
 8009b3e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	695b      	ldr	r3, [r3, #20]
 8009b46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	f000 80b6 	beq.w	8009cbc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	685b      	ldr	r3, [r3, #4]
 8009b58:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009b5c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	f000 8145 	beq.w	8009df0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009b6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009b6e:	429a      	cmp	r2, r3
 8009b70:	f080 813e 	bcs.w	8009df0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009b7a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b80:	699b      	ldr	r3, [r3, #24]
 8009b82:	2b20      	cmp	r3, #32
 8009b84:	f000 8088 	beq.w	8009c98 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	330c      	adds	r3, #12
 8009b8e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b92:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009b96:	e853 3f00 	ldrex	r3, [r3]
 8009b9a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009b9e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009ba2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009ba6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	330c      	adds	r3, #12
 8009bb0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8009bb4:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009bb8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bbc:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009bc0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009bc4:	e841 2300 	strex	r3, r2, [r1]
 8009bc8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009bcc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d1d9      	bne.n	8009b88 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	3314      	adds	r3, #20
 8009bda:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bdc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009bde:	e853 3f00 	ldrex	r3, [r3]
 8009be2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009be4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009be6:	f023 0301 	bic.w	r3, r3, #1
 8009bea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	3314      	adds	r3, #20
 8009bf4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009bf8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009bfc:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bfe:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009c00:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009c04:	e841 2300 	strex	r3, r2, [r1]
 8009c08:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009c0a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d1e1      	bne.n	8009bd4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	3314      	adds	r3, #20
 8009c16:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c18:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009c1a:	e853 3f00 	ldrex	r3, [r3]
 8009c1e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009c20:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009c22:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009c26:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	3314      	adds	r3, #20
 8009c30:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009c34:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009c36:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c38:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009c3a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009c3c:	e841 2300 	strex	r3, r2, [r1]
 8009c40:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009c42:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d1e3      	bne.n	8009c10 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2220      	movs	r2, #32
 8009c4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2200      	movs	r2, #0
 8009c54:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	330c      	adds	r3, #12
 8009c5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c60:	e853 3f00 	ldrex	r3, [r3]
 8009c64:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009c66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009c68:	f023 0310 	bic.w	r3, r3, #16
 8009c6c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	330c      	adds	r3, #12
 8009c76:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8009c7a:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009c7c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c7e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009c80:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009c82:	e841 2300 	strex	r3, r2, [r1]
 8009c86:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009c88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d1e3      	bne.n	8009c56 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c92:	4618      	mov	r0, r3
 8009c94:	f7fd fd4c 	bl	8007730 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2202      	movs	r2, #2
 8009c9c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009ca6:	b29b      	uxth	r3, r3
 8009ca8:	1ad3      	subs	r3, r2, r3
 8009caa:	b29b      	uxth	r3, r3
 8009cac:	4619      	mov	r1, r3
 8009cae:	6878      	ldr	r0, [r7, #4]
 8009cb0:	f000 f8bf 	bl	8009e32 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009cb4:	e09c      	b.n	8009df0 <HAL_UART_IRQHandler+0x518>
 8009cb6:	bf00      	nop
 8009cb8:	0800a343 	.word	0x0800a343
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009cc4:	b29b      	uxth	r3, r3
 8009cc6:	1ad3      	subs	r3, r2, r3
 8009cc8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009cd0:	b29b      	uxth	r3, r3
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	f000 808e 	beq.w	8009df4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8009cd8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	f000 8089 	beq.w	8009df4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	330c      	adds	r3, #12
 8009ce8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cec:	e853 3f00 	ldrex	r3, [r3]
 8009cf0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009cf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cf4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009cf8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	330c      	adds	r3, #12
 8009d02:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8009d06:	647a      	str	r2, [r7, #68]	@ 0x44
 8009d08:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d0a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009d0c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009d0e:	e841 2300 	strex	r3, r2, [r1]
 8009d12:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009d14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d1e3      	bne.n	8009ce2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	3314      	adds	r3, #20
 8009d20:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d24:	e853 3f00 	ldrex	r3, [r3]
 8009d28:	623b      	str	r3, [r7, #32]
   return(result);
 8009d2a:	6a3b      	ldr	r3, [r7, #32]
 8009d2c:	f023 0301 	bic.w	r3, r3, #1
 8009d30:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	3314      	adds	r3, #20
 8009d3a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009d3e:	633a      	str	r2, [r7, #48]	@ 0x30
 8009d40:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d42:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009d44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d46:	e841 2300 	strex	r3, r2, [r1]
 8009d4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009d4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d1e3      	bne.n	8009d1a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	2220      	movs	r2, #32
 8009d56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	330c      	adds	r3, #12
 8009d66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d68:	693b      	ldr	r3, [r7, #16]
 8009d6a:	e853 3f00 	ldrex	r3, [r3]
 8009d6e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	f023 0310 	bic.w	r3, r3, #16
 8009d76:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	330c      	adds	r3, #12
 8009d80:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8009d84:	61fa      	str	r2, [r7, #28]
 8009d86:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d88:	69b9      	ldr	r1, [r7, #24]
 8009d8a:	69fa      	ldr	r2, [r7, #28]
 8009d8c:	e841 2300 	strex	r3, r2, [r1]
 8009d90:	617b      	str	r3, [r7, #20]
   return(result);
 8009d92:	697b      	ldr	r3, [r7, #20]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d1e3      	bne.n	8009d60 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2202      	movs	r2, #2
 8009d9c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009d9e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009da2:	4619      	mov	r1, r3
 8009da4:	6878      	ldr	r0, [r7, #4]
 8009da6:	f000 f844 	bl	8009e32 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009daa:	e023      	b.n	8009df4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009dac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009db0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d009      	beq.n	8009dcc <HAL_UART_IRQHandler+0x4f4>
 8009db8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009dbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d003      	beq.n	8009dcc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8009dc4:	6878      	ldr	r0, [r7, #4]
 8009dc6:	f000 fad0 	bl	800a36a <UART_Transmit_IT>
    return;
 8009dca:	e014      	b.n	8009df6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009dcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009dd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d00e      	beq.n	8009df6 <HAL_UART_IRQHandler+0x51e>
 8009dd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009ddc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d008      	beq.n	8009df6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8009de4:	6878      	ldr	r0, [r7, #4]
 8009de6:	f000 fb0f 	bl	800a408 <UART_EndTransmit_IT>
    return;
 8009dea:	e004      	b.n	8009df6 <HAL_UART_IRQHandler+0x51e>
    return;
 8009dec:	bf00      	nop
 8009dee:	e002      	b.n	8009df6 <HAL_UART_IRQHandler+0x51e>
      return;
 8009df0:	bf00      	nop
 8009df2:	e000      	b.n	8009df6 <HAL_UART_IRQHandler+0x51e>
      return;
 8009df4:	bf00      	nop
  }
}
 8009df6:	37e8      	adds	r7, #232	@ 0xe8
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	bd80      	pop	{r7, pc}

08009dfc <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009dfc:	b480      	push	{r7}
 8009dfe:	b083      	sub	sp, #12
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8009e04:	bf00      	nop
 8009e06:	370c      	adds	r7, #12
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	bc80      	pop	{r7}
 8009e0c:	4770      	bx	lr

08009e0e <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009e0e:	b480      	push	{r7}
 8009e10:	b083      	sub	sp, #12
 8009e12:	af00      	add	r7, sp, #0
 8009e14:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009e16:	bf00      	nop
 8009e18:	370c      	adds	r7, #12
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	bc80      	pop	{r7}
 8009e1e:	4770      	bx	lr

08009e20 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009e20:	b480      	push	{r7}
 8009e22:	b083      	sub	sp, #12
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009e28:	bf00      	nop
 8009e2a:	370c      	adds	r7, #12
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	bc80      	pop	{r7}
 8009e30:	4770      	bx	lr

08009e32 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009e32:	b480      	push	{r7}
 8009e34:	b083      	sub	sp, #12
 8009e36:	af00      	add	r7, sp, #0
 8009e38:	6078      	str	r0, [r7, #4]
 8009e3a:	460b      	mov	r3, r1
 8009e3c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009e3e:	bf00      	nop
 8009e40:	370c      	adds	r7, #12
 8009e42:	46bd      	mov	sp, r7
 8009e44:	bc80      	pop	{r7}
 8009e46:	4770      	bx	lr

08009e48 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b090      	sub	sp, #64	@ 0x40
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e54:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	f003 0320 	and.w	r3, r3, #32
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d137      	bne.n	8009ed4 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8009e64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e66:	2200      	movs	r2, #0
 8009e68:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009e6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	3314      	adds	r3, #20
 8009e70:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e74:	e853 3f00 	ldrex	r3, [r3]
 8009e78:	623b      	str	r3, [r7, #32]
   return(result);
 8009e7a:	6a3b      	ldr	r3, [r7, #32]
 8009e7c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009e80:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009e82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	3314      	adds	r3, #20
 8009e88:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009e8a:	633a      	str	r2, [r7, #48]	@ 0x30
 8009e8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e8e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009e90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e92:	e841 2300 	strex	r3, r2, [r1]
 8009e96:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009e98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d1e5      	bne.n	8009e6a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009e9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	330c      	adds	r3, #12
 8009ea4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ea6:	693b      	ldr	r3, [r7, #16]
 8009ea8:	e853 3f00 	ldrex	r3, [r3]
 8009eac:	60fb      	str	r3, [r7, #12]
   return(result);
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009eb4:	637b      	str	r3, [r7, #52]	@ 0x34
 8009eb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	330c      	adds	r3, #12
 8009ebc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009ebe:	61fa      	str	r2, [r7, #28]
 8009ec0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ec2:	69b9      	ldr	r1, [r7, #24]
 8009ec4:	69fa      	ldr	r2, [r7, #28]
 8009ec6:	e841 2300 	strex	r3, r2, [r1]
 8009eca:	617b      	str	r3, [r7, #20]
   return(result);
 8009ecc:	697b      	ldr	r3, [r7, #20]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d1e5      	bne.n	8009e9e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009ed2:	e002      	b.n	8009eda <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8009ed4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8009ed6:	f7fb fbef 	bl	80056b8 <HAL_UART_TxCpltCallback>
}
 8009eda:	bf00      	nop
 8009edc:	3740      	adds	r7, #64	@ 0x40
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	bd80      	pop	{r7, pc}

08009ee2 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009ee2:	b580      	push	{r7, lr}
 8009ee4:	b084      	sub	sp, #16
 8009ee6:	af00      	add	r7, sp, #0
 8009ee8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009eee:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009ef0:	68f8      	ldr	r0, [r7, #12]
 8009ef2:	f7ff ff83 	bl	8009dfc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009ef6:	bf00      	nop
 8009ef8:	3710      	adds	r7, #16
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bd80      	pop	{r7, pc}

08009efe <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009efe:	b580      	push	{r7, lr}
 8009f00:	b09c      	sub	sp, #112	@ 0x70
 8009f02:	af00      	add	r7, sp, #0
 8009f04:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f0a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	f003 0320 	and.w	r3, r3, #32
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d172      	bne.n	800a000 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8009f1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009f20:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	330c      	adds	r3, #12
 8009f26:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f2a:	e853 3f00 	ldrex	r3, [r3]
 8009f2e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009f30:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009f32:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009f36:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009f38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	330c      	adds	r3, #12
 8009f3e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009f40:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009f42:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f44:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009f46:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009f48:	e841 2300 	strex	r3, r2, [r1]
 8009f4c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009f4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d1e5      	bne.n	8009f20 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	3314      	adds	r3, #20
 8009f5a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f5e:	e853 3f00 	ldrex	r3, [r3]
 8009f62:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009f64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f66:	f023 0301 	bic.w	r3, r3, #1
 8009f6a:	667b      	str	r3, [r7, #100]	@ 0x64
 8009f6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	3314      	adds	r3, #20
 8009f72:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009f74:	647a      	str	r2, [r7, #68]	@ 0x44
 8009f76:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f78:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009f7a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009f7c:	e841 2300 	strex	r3, r2, [r1]
 8009f80:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009f82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d1e5      	bne.n	8009f54 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009f88:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	3314      	adds	r3, #20
 8009f8e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f92:	e853 3f00 	ldrex	r3, [r3]
 8009f96:	623b      	str	r3, [r7, #32]
   return(result);
 8009f98:	6a3b      	ldr	r3, [r7, #32]
 8009f9a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009f9e:	663b      	str	r3, [r7, #96]	@ 0x60
 8009fa0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	3314      	adds	r3, #20
 8009fa6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009fa8:	633a      	str	r2, [r7, #48]	@ 0x30
 8009faa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009fae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009fb0:	e841 2300 	strex	r3, r2, [r1]
 8009fb4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009fb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d1e5      	bne.n	8009f88 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009fbc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009fbe:	2220      	movs	r2, #32
 8009fc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009fc4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009fc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009fc8:	2b01      	cmp	r3, #1
 8009fca:	d119      	bne.n	800a000 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009fcc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	330c      	adds	r3, #12
 8009fd2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fd4:	693b      	ldr	r3, [r7, #16]
 8009fd6:	e853 3f00 	ldrex	r3, [r3]
 8009fda:	60fb      	str	r3, [r7, #12]
   return(result);
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	f023 0310 	bic.w	r3, r3, #16
 8009fe2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009fe4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	330c      	adds	r3, #12
 8009fea:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009fec:	61fa      	str	r2, [r7, #28]
 8009fee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ff0:	69b9      	ldr	r1, [r7, #24]
 8009ff2:	69fa      	ldr	r2, [r7, #28]
 8009ff4:	e841 2300 	strex	r3, r2, [r1]
 8009ff8:	617b      	str	r3, [r7, #20]
   return(result);
 8009ffa:	697b      	ldr	r3, [r7, #20]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d1e5      	bne.n	8009fcc <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a000:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a002:	2200      	movs	r2, #0
 800a004:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a006:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a00a:	2b01      	cmp	r3, #1
 800a00c:	d106      	bne.n	800a01c <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a00e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a010:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a012:	4619      	mov	r1, r3
 800a014:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a016:	f7ff ff0c 	bl	8009e32 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a01a:	e002      	b.n	800a022 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800a01c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a01e:	f7fb fb59 	bl	80056d4 <HAL_UART_RxCpltCallback>
}
 800a022:	bf00      	nop
 800a024:	3770      	adds	r7, #112	@ 0x70
 800a026:	46bd      	mov	sp, r7
 800a028:	bd80      	pop	{r7, pc}

0800a02a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a02a:	b580      	push	{r7, lr}
 800a02c:	b084      	sub	sp, #16
 800a02e:	af00      	add	r7, sp, #0
 800a030:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a036:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	2201      	movs	r2, #1
 800a03c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a042:	2b01      	cmp	r3, #1
 800a044:	d108      	bne.n	800a058 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a04a:	085b      	lsrs	r3, r3, #1
 800a04c:	b29b      	uxth	r3, r3
 800a04e:	4619      	mov	r1, r3
 800a050:	68f8      	ldr	r0, [r7, #12]
 800a052:	f7ff feee 	bl	8009e32 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a056:	e002      	b.n	800a05e <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800a058:	68f8      	ldr	r0, [r7, #12]
 800a05a:	f7ff fed8 	bl	8009e0e <HAL_UART_RxHalfCpltCallback>
}
 800a05e:	bf00      	nop
 800a060:	3710      	adds	r7, #16
 800a062:	46bd      	mov	sp, r7
 800a064:	bd80      	pop	{r7, pc}

0800a066 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a066:	b580      	push	{r7, lr}
 800a068:	b084      	sub	sp, #16
 800a06a:	af00      	add	r7, sp, #0
 800a06c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a06e:	2300      	movs	r3, #0
 800a070:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a076:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a078:	68bb      	ldr	r3, [r7, #8]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	695b      	ldr	r3, [r3, #20]
 800a07e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a082:	2b00      	cmp	r3, #0
 800a084:	bf14      	ite	ne
 800a086:	2301      	movne	r3, #1
 800a088:	2300      	moveq	r3, #0
 800a08a:	b2db      	uxtb	r3, r3
 800a08c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a08e:	68bb      	ldr	r3, [r7, #8]
 800a090:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a094:	b2db      	uxtb	r3, r3
 800a096:	2b21      	cmp	r3, #33	@ 0x21
 800a098:	d108      	bne.n	800a0ac <UART_DMAError+0x46>
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d005      	beq.n	800a0ac <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800a0a0:	68bb      	ldr	r3, [r7, #8]
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800a0a6:	68b8      	ldr	r0, [r7, #8]
 800a0a8:	f000 f8c2 	bl	800a230 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a0ac:	68bb      	ldr	r3, [r7, #8]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	695b      	ldr	r3, [r3, #20]
 800a0b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	bf14      	ite	ne
 800a0ba:	2301      	movne	r3, #1
 800a0bc:	2300      	moveq	r3, #0
 800a0be:	b2db      	uxtb	r3, r3
 800a0c0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a0c2:	68bb      	ldr	r3, [r7, #8]
 800a0c4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a0c8:	b2db      	uxtb	r3, r3
 800a0ca:	2b22      	cmp	r3, #34	@ 0x22
 800a0cc:	d108      	bne.n	800a0e0 <UART_DMAError+0x7a>
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d005      	beq.n	800a0e0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800a0d4:	68bb      	ldr	r3, [r7, #8]
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800a0da:	68b8      	ldr	r0, [r7, #8]
 800a0dc:	f000 f8cf 	bl	800a27e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a0e0:	68bb      	ldr	r3, [r7, #8]
 800a0e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a0e4:	f043 0210 	orr.w	r2, r3, #16
 800a0e8:	68bb      	ldr	r3, [r7, #8]
 800a0ea:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a0ec:	68b8      	ldr	r0, [r7, #8]
 800a0ee:	f7ff fe97 	bl	8009e20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a0f2:	bf00      	nop
 800a0f4:	3710      	adds	r7, #16
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	bd80      	pop	{r7, pc}
	...

0800a0fc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b098      	sub	sp, #96	@ 0x60
 800a100:	af00      	add	r7, sp, #0
 800a102:	60f8      	str	r0, [r7, #12]
 800a104:	60b9      	str	r1, [r7, #8]
 800a106:	4613      	mov	r3, r2
 800a108:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800a10a:	68ba      	ldr	r2, [r7, #8]
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	88fa      	ldrh	r2, [r7, #6]
 800a114:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	2200      	movs	r2, #0
 800a11a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	2222      	movs	r2, #34	@ 0x22
 800a120:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a128:	4a3e      	ldr	r2, [pc, #248]	@ (800a224 <UART_Start_Receive_DMA+0x128>)
 800a12a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a130:	4a3d      	ldr	r2, [pc, #244]	@ (800a228 <UART_Start_Receive_DMA+0x12c>)
 800a132:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a138:	4a3c      	ldr	r2, [pc, #240]	@ (800a22c <UART_Start_Receive_DMA+0x130>)
 800a13a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a140:	2200      	movs	r2, #0
 800a142:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800a144:	f107 0308 	add.w	r3, r7, #8
 800a148:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	3304      	adds	r3, #4
 800a154:	4619      	mov	r1, r3
 800a156:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a158:	681a      	ldr	r2, [r3, #0]
 800a15a:	88fb      	ldrh	r3, [r7, #6]
 800a15c:	f7fd fa88 	bl	8007670 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800a160:	2300      	movs	r3, #0
 800a162:	613b      	str	r3, [r7, #16]
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	613b      	str	r3, [r7, #16]
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	685b      	ldr	r3, [r3, #4]
 800a172:	613b      	str	r3, [r7, #16]
 800a174:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	691b      	ldr	r3, [r3, #16]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d019      	beq.n	800a1b2 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	330c      	adds	r3, #12
 800a184:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a186:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a188:	e853 3f00 	ldrex	r3, [r3]
 800a18c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a18e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a190:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a194:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	330c      	adds	r3, #12
 800a19c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a19e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800a1a0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1a2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800a1a4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a1a6:	e841 2300 	strex	r3, r2, [r1]
 800a1aa:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800a1ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d1e5      	bne.n	800a17e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	3314      	adds	r3, #20
 800a1b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1bc:	e853 3f00 	ldrex	r3, [r3]
 800a1c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a1c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1c4:	f043 0301 	orr.w	r3, r3, #1
 800a1c8:	657b      	str	r3, [r7, #84]	@ 0x54
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	3314      	adds	r3, #20
 800a1d0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a1d2:	63ba      	str	r2, [r7, #56]	@ 0x38
 800a1d4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1d6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800a1d8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a1da:	e841 2300 	strex	r3, r2, [r1]
 800a1de:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a1e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d1e5      	bne.n	800a1b2 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	3314      	adds	r3, #20
 800a1ec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1ee:	69bb      	ldr	r3, [r7, #24]
 800a1f0:	e853 3f00 	ldrex	r3, [r3]
 800a1f4:	617b      	str	r3, [r7, #20]
   return(result);
 800a1f6:	697b      	ldr	r3, [r7, #20]
 800a1f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a1fc:	653b      	str	r3, [r7, #80]	@ 0x50
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	3314      	adds	r3, #20
 800a204:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a206:	627a      	str	r2, [r7, #36]	@ 0x24
 800a208:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a20a:	6a39      	ldr	r1, [r7, #32]
 800a20c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a20e:	e841 2300 	strex	r3, r2, [r1]
 800a212:	61fb      	str	r3, [r7, #28]
   return(result);
 800a214:	69fb      	ldr	r3, [r7, #28]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d1e5      	bne.n	800a1e6 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800a21a:	2300      	movs	r3, #0
}
 800a21c:	4618      	mov	r0, r3
 800a21e:	3760      	adds	r7, #96	@ 0x60
 800a220:	46bd      	mov	sp, r7
 800a222:	bd80      	pop	{r7, pc}
 800a224:	08009eff 	.word	0x08009eff
 800a228:	0800a02b 	.word	0x0800a02b
 800a22c:	0800a067 	.word	0x0800a067

0800a230 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a230:	b480      	push	{r7}
 800a232:	b089      	sub	sp, #36	@ 0x24
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	330c      	adds	r3, #12
 800a23e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	e853 3f00 	ldrex	r3, [r3]
 800a246:	60bb      	str	r3, [r7, #8]
   return(result);
 800a248:	68bb      	ldr	r3, [r7, #8]
 800a24a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a24e:	61fb      	str	r3, [r7, #28]
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	330c      	adds	r3, #12
 800a256:	69fa      	ldr	r2, [r7, #28]
 800a258:	61ba      	str	r2, [r7, #24]
 800a25a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a25c:	6979      	ldr	r1, [r7, #20]
 800a25e:	69ba      	ldr	r2, [r7, #24]
 800a260:	e841 2300 	strex	r3, r2, [r1]
 800a264:	613b      	str	r3, [r7, #16]
   return(result);
 800a266:	693b      	ldr	r3, [r7, #16]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d1e5      	bne.n	800a238 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	2220      	movs	r2, #32
 800a270:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800a274:	bf00      	nop
 800a276:	3724      	adds	r7, #36	@ 0x24
 800a278:	46bd      	mov	sp, r7
 800a27a:	bc80      	pop	{r7}
 800a27c:	4770      	bx	lr

0800a27e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a27e:	b480      	push	{r7}
 800a280:	b095      	sub	sp, #84	@ 0x54
 800a282:	af00      	add	r7, sp, #0
 800a284:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	330c      	adds	r3, #12
 800a28c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a28e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a290:	e853 3f00 	ldrex	r3, [r3]
 800a294:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a298:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a29c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	330c      	adds	r3, #12
 800a2a4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a2a6:	643a      	str	r2, [r7, #64]	@ 0x40
 800a2a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2aa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a2ac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a2ae:	e841 2300 	strex	r3, r2, [r1]
 800a2b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a2b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d1e5      	bne.n	800a286 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	3314      	adds	r3, #20
 800a2c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2c2:	6a3b      	ldr	r3, [r7, #32]
 800a2c4:	e853 3f00 	ldrex	r3, [r3]
 800a2c8:	61fb      	str	r3, [r7, #28]
   return(result);
 800a2ca:	69fb      	ldr	r3, [r7, #28]
 800a2cc:	f023 0301 	bic.w	r3, r3, #1
 800a2d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	3314      	adds	r3, #20
 800a2d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a2da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a2dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2de:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a2e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a2e2:	e841 2300 	strex	r3, r2, [r1]
 800a2e6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a2e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d1e5      	bne.n	800a2ba <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a2f2:	2b01      	cmp	r3, #1
 800a2f4:	d119      	bne.n	800a32a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	330c      	adds	r3, #12
 800a2fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	e853 3f00 	ldrex	r3, [r3]
 800a304:	60bb      	str	r3, [r7, #8]
   return(result);
 800a306:	68bb      	ldr	r3, [r7, #8]
 800a308:	f023 0310 	bic.w	r3, r3, #16
 800a30c:	647b      	str	r3, [r7, #68]	@ 0x44
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	330c      	adds	r3, #12
 800a314:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a316:	61ba      	str	r2, [r7, #24]
 800a318:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a31a:	6979      	ldr	r1, [r7, #20]
 800a31c:	69ba      	ldr	r2, [r7, #24]
 800a31e:	e841 2300 	strex	r3, r2, [r1]
 800a322:	613b      	str	r3, [r7, #16]
   return(result);
 800a324:	693b      	ldr	r3, [r7, #16]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d1e5      	bne.n	800a2f6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	2220      	movs	r2, #32
 800a32e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	2200      	movs	r2, #0
 800a336:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800a338:	bf00      	nop
 800a33a:	3754      	adds	r7, #84	@ 0x54
 800a33c:	46bd      	mov	sp, r7
 800a33e:	bc80      	pop	{r7}
 800a340:	4770      	bx	lr

0800a342 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a342:	b580      	push	{r7, lr}
 800a344:	b084      	sub	sp, #16
 800a346:	af00      	add	r7, sp, #0
 800a348:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a34e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	2200      	movs	r2, #0
 800a354:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	2200      	movs	r2, #0
 800a35a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a35c:	68f8      	ldr	r0, [r7, #12]
 800a35e:	f7ff fd5f 	bl	8009e20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a362:	bf00      	nop
 800a364:	3710      	adds	r7, #16
 800a366:	46bd      	mov	sp, r7
 800a368:	bd80      	pop	{r7, pc}

0800a36a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a36a:	b480      	push	{r7}
 800a36c:	b085      	sub	sp, #20
 800a36e:	af00      	add	r7, sp, #0
 800a370:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a378:	b2db      	uxtb	r3, r3
 800a37a:	2b21      	cmp	r3, #33	@ 0x21
 800a37c:	d13e      	bne.n	800a3fc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	689b      	ldr	r3, [r3, #8]
 800a382:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a386:	d114      	bne.n	800a3b2 <UART_Transmit_IT+0x48>
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	691b      	ldr	r3, [r3, #16]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d110      	bne.n	800a3b2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	6a1b      	ldr	r3, [r3, #32]
 800a394:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	881b      	ldrh	r3, [r3, #0]
 800a39a:	461a      	mov	r2, r3
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a3a4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	6a1b      	ldr	r3, [r3, #32]
 800a3aa:	1c9a      	adds	r2, r3, #2
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	621a      	str	r2, [r3, #32]
 800a3b0:	e008      	b.n	800a3c4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	6a1b      	ldr	r3, [r3, #32]
 800a3b6:	1c59      	adds	r1, r3, #1
 800a3b8:	687a      	ldr	r2, [r7, #4]
 800a3ba:	6211      	str	r1, [r2, #32]
 800a3bc:	781a      	ldrb	r2, [r3, #0]
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a3c8:	b29b      	uxth	r3, r3
 800a3ca:	3b01      	subs	r3, #1
 800a3cc:	b29b      	uxth	r3, r3
 800a3ce:	687a      	ldr	r2, [r7, #4]
 800a3d0:	4619      	mov	r1, r3
 800a3d2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d10f      	bne.n	800a3f8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	68da      	ldr	r2, [r3, #12]
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a3e6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	68da      	ldr	r2, [r3, #12]
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a3f6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	e000      	b.n	800a3fe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a3fc:	2302      	movs	r3, #2
  }
}
 800a3fe:	4618      	mov	r0, r3
 800a400:	3714      	adds	r7, #20
 800a402:	46bd      	mov	sp, r7
 800a404:	bc80      	pop	{r7}
 800a406:	4770      	bx	lr

0800a408 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b082      	sub	sp, #8
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	68da      	ldr	r2, [r3, #12]
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a41e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	2220      	movs	r2, #32
 800a424:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a428:	6878      	ldr	r0, [r7, #4]
 800a42a:	f7fb f945 	bl	80056b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a42e:	2300      	movs	r3, #0
}
 800a430:	4618      	mov	r0, r3
 800a432:	3708      	adds	r7, #8
 800a434:	46bd      	mov	sp, r7
 800a436:	bd80      	pop	{r7, pc}

0800a438 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b08c      	sub	sp, #48	@ 0x30
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a446:	b2db      	uxtb	r3, r3
 800a448:	2b22      	cmp	r3, #34	@ 0x22
 800a44a:	f040 80ae 	bne.w	800a5aa <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	689b      	ldr	r3, [r3, #8]
 800a452:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a456:	d117      	bne.n	800a488 <UART_Receive_IT+0x50>
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	691b      	ldr	r3, [r3, #16]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d113      	bne.n	800a488 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a460:	2300      	movs	r3, #0
 800a462:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a468:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	685b      	ldr	r3, [r3, #4]
 800a470:	b29b      	uxth	r3, r3
 800a472:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a476:	b29a      	uxth	r2, r3
 800a478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a47a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a480:	1c9a      	adds	r2, r3, #2
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	629a      	str	r2, [r3, #40]	@ 0x28
 800a486:	e026      	b.n	800a4d6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a48c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800a48e:	2300      	movs	r3, #0
 800a490:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	689b      	ldr	r3, [r3, #8]
 800a496:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a49a:	d007      	beq.n	800a4ac <UART_Receive_IT+0x74>
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	689b      	ldr	r3, [r3, #8]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d10a      	bne.n	800a4ba <UART_Receive_IT+0x82>
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	691b      	ldr	r3, [r3, #16]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d106      	bne.n	800a4ba <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	685b      	ldr	r3, [r3, #4]
 800a4b2:	b2da      	uxtb	r2, r3
 800a4b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4b6:	701a      	strb	r2, [r3, #0]
 800a4b8:	e008      	b.n	800a4cc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	685b      	ldr	r3, [r3, #4]
 800a4c0:	b2db      	uxtb	r3, r3
 800a4c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a4c6:	b2da      	uxtb	r2, r3
 800a4c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4ca:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4d0:	1c5a      	adds	r2, r3, #1
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a4da:	b29b      	uxth	r3, r3
 800a4dc:	3b01      	subs	r3, #1
 800a4de:	b29b      	uxth	r3, r3
 800a4e0:	687a      	ldr	r2, [r7, #4]
 800a4e2:	4619      	mov	r1, r3
 800a4e4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d15d      	bne.n	800a5a6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	68da      	ldr	r2, [r3, #12]
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	f022 0220 	bic.w	r2, r2, #32
 800a4f8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	68da      	ldr	r2, [r3, #12]
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a508:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	695a      	ldr	r2, [r3, #20]
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	f022 0201 	bic.w	r2, r2, #1
 800a518:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	2220      	movs	r2, #32
 800a51e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	2200      	movs	r2, #0
 800a526:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a52c:	2b01      	cmp	r3, #1
 800a52e:	d135      	bne.n	800a59c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	2200      	movs	r2, #0
 800a534:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	330c      	adds	r3, #12
 800a53c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a53e:	697b      	ldr	r3, [r7, #20]
 800a540:	e853 3f00 	ldrex	r3, [r3]
 800a544:	613b      	str	r3, [r7, #16]
   return(result);
 800a546:	693b      	ldr	r3, [r7, #16]
 800a548:	f023 0310 	bic.w	r3, r3, #16
 800a54c:	627b      	str	r3, [r7, #36]	@ 0x24
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	330c      	adds	r3, #12
 800a554:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a556:	623a      	str	r2, [r7, #32]
 800a558:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a55a:	69f9      	ldr	r1, [r7, #28]
 800a55c:	6a3a      	ldr	r2, [r7, #32]
 800a55e:	e841 2300 	strex	r3, r2, [r1]
 800a562:	61bb      	str	r3, [r7, #24]
   return(result);
 800a564:	69bb      	ldr	r3, [r7, #24]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d1e5      	bne.n	800a536 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	f003 0310 	and.w	r3, r3, #16
 800a574:	2b10      	cmp	r3, #16
 800a576:	d10a      	bne.n	800a58e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a578:	2300      	movs	r3, #0
 800a57a:	60fb      	str	r3, [r7, #12]
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	60fb      	str	r3, [r7, #12]
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	685b      	ldr	r3, [r3, #4]
 800a58a:	60fb      	str	r3, [r7, #12]
 800a58c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a592:	4619      	mov	r1, r3
 800a594:	6878      	ldr	r0, [r7, #4]
 800a596:	f7ff fc4c 	bl	8009e32 <HAL_UARTEx_RxEventCallback>
 800a59a:	e002      	b.n	800a5a2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a59c:	6878      	ldr	r0, [r7, #4]
 800a59e:	f7fb f899 	bl	80056d4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	e002      	b.n	800a5ac <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	e000      	b.n	800a5ac <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800a5aa:	2302      	movs	r3, #2
  }
}
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	3730      	adds	r7, #48	@ 0x30
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	bd80      	pop	{r7, pc}

0800a5b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a5b4:	b580      	push	{r7, lr}
 800a5b6:	b084      	sub	sp, #16
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	691b      	ldr	r3, [r3, #16]
 800a5c2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	68da      	ldr	r2, [r3, #12]
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	430a      	orrs	r2, r1
 800a5d0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	689a      	ldr	r2, [r3, #8]
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	691b      	ldr	r3, [r3, #16]
 800a5da:	431a      	orrs	r2, r3
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	695b      	ldr	r3, [r3, #20]
 800a5e0:	4313      	orrs	r3, r2
 800a5e2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	68db      	ldr	r3, [r3, #12]
 800a5ea:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800a5ee:	f023 030c 	bic.w	r3, r3, #12
 800a5f2:	687a      	ldr	r2, [r7, #4]
 800a5f4:	6812      	ldr	r2, [r2, #0]
 800a5f6:	68b9      	ldr	r1, [r7, #8]
 800a5f8:	430b      	orrs	r3, r1
 800a5fa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	695b      	ldr	r3, [r3, #20]
 800a602:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	699a      	ldr	r2, [r3, #24]
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	430a      	orrs	r2, r1
 800a610:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	4a2c      	ldr	r2, [pc, #176]	@ (800a6c8 <UART_SetConfig+0x114>)
 800a618:	4293      	cmp	r3, r2
 800a61a:	d103      	bne.n	800a624 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800a61c:	f7ff f844 	bl	80096a8 <HAL_RCC_GetPCLK2Freq>
 800a620:	60f8      	str	r0, [r7, #12]
 800a622:	e002      	b.n	800a62a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800a624:	f7ff f82c 	bl	8009680 <HAL_RCC_GetPCLK1Freq>
 800a628:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a62a:	68fa      	ldr	r2, [r7, #12]
 800a62c:	4613      	mov	r3, r2
 800a62e:	009b      	lsls	r3, r3, #2
 800a630:	4413      	add	r3, r2
 800a632:	009a      	lsls	r2, r3, #2
 800a634:	441a      	add	r2, r3
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	685b      	ldr	r3, [r3, #4]
 800a63a:	009b      	lsls	r3, r3, #2
 800a63c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a640:	4a22      	ldr	r2, [pc, #136]	@ (800a6cc <UART_SetConfig+0x118>)
 800a642:	fba2 2303 	umull	r2, r3, r2, r3
 800a646:	095b      	lsrs	r3, r3, #5
 800a648:	0119      	lsls	r1, r3, #4
 800a64a:	68fa      	ldr	r2, [r7, #12]
 800a64c:	4613      	mov	r3, r2
 800a64e:	009b      	lsls	r3, r3, #2
 800a650:	4413      	add	r3, r2
 800a652:	009a      	lsls	r2, r3, #2
 800a654:	441a      	add	r2, r3
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	685b      	ldr	r3, [r3, #4]
 800a65a:	009b      	lsls	r3, r3, #2
 800a65c:	fbb2 f2f3 	udiv	r2, r2, r3
 800a660:	4b1a      	ldr	r3, [pc, #104]	@ (800a6cc <UART_SetConfig+0x118>)
 800a662:	fba3 0302 	umull	r0, r3, r3, r2
 800a666:	095b      	lsrs	r3, r3, #5
 800a668:	2064      	movs	r0, #100	@ 0x64
 800a66a:	fb00 f303 	mul.w	r3, r0, r3
 800a66e:	1ad3      	subs	r3, r2, r3
 800a670:	011b      	lsls	r3, r3, #4
 800a672:	3332      	adds	r3, #50	@ 0x32
 800a674:	4a15      	ldr	r2, [pc, #84]	@ (800a6cc <UART_SetConfig+0x118>)
 800a676:	fba2 2303 	umull	r2, r3, r2, r3
 800a67a:	095b      	lsrs	r3, r3, #5
 800a67c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a680:	4419      	add	r1, r3
 800a682:	68fa      	ldr	r2, [r7, #12]
 800a684:	4613      	mov	r3, r2
 800a686:	009b      	lsls	r3, r3, #2
 800a688:	4413      	add	r3, r2
 800a68a:	009a      	lsls	r2, r3, #2
 800a68c:	441a      	add	r2, r3
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	685b      	ldr	r3, [r3, #4]
 800a692:	009b      	lsls	r3, r3, #2
 800a694:	fbb2 f2f3 	udiv	r2, r2, r3
 800a698:	4b0c      	ldr	r3, [pc, #48]	@ (800a6cc <UART_SetConfig+0x118>)
 800a69a:	fba3 0302 	umull	r0, r3, r3, r2
 800a69e:	095b      	lsrs	r3, r3, #5
 800a6a0:	2064      	movs	r0, #100	@ 0x64
 800a6a2:	fb00 f303 	mul.w	r3, r0, r3
 800a6a6:	1ad3      	subs	r3, r2, r3
 800a6a8:	011b      	lsls	r3, r3, #4
 800a6aa:	3332      	adds	r3, #50	@ 0x32
 800a6ac:	4a07      	ldr	r2, [pc, #28]	@ (800a6cc <UART_SetConfig+0x118>)
 800a6ae:	fba2 2303 	umull	r2, r3, r2, r3
 800a6b2:	095b      	lsrs	r3, r3, #5
 800a6b4:	f003 020f 	and.w	r2, r3, #15
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	440a      	add	r2, r1
 800a6be:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800a6c0:	bf00      	nop
 800a6c2:	3710      	adds	r7, #16
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	bd80      	pop	{r7, pc}
 800a6c8:	40013800 	.word	0x40013800
 800a6cc:	51eb851f 	.word	0x51eb851f

0800a6d0 <sqrt>:
 800a6d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6d2:	4606      	mov	r6, r0
 800a6d4:	460f      	mov	r7, r1
 800a6d6:	f000 f81f 	bl	800a718 <__ieee754_sqrt>
 800a6da:	4632      	mov	r2, r6
 800a6dc:	4604      	mov	r4, r0
 800a6de:	460d      	mov	r5, r1
 800a6e0:	463b      	mov	r3, r7
 800a6e2:	4630      	mov	r0, r6
 800a6e4:	4639      	mov	r1, r7
 800a6e6:	f7f6 f991 	bl	8000a0c <__aeabi_dcmpun>
 800a6ea:	b990      	cbnz	r0, 800a712 <sqrt+0x42>
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	4630      	mov	r0, r6
 800a6f2:	4639      	mov	r1, r7
 800a6f4:	f7f6 f962 	bl	80009bc <__aeabi_dcmplt>
 800a6f8:	b158      	cbz	r0, 800a712 <sqrt+0x42>
 800a6fa:	f000 f921 	bl	800a940 <__errno>
 800a6fe:	2321      	movs	r3, #33	@ 0x21
 800a700:	2200      	movs	r2, #0
 800a702:	6003      	str	r3, [r0, #0]
 800a704:	2300      	movs	r3, #0
 800a706:	4610      	mov	r0, r2
 800a708:	4619      	mov	r1, r3
 800a70a:	f7f6 f80f 	bl	800072c <__aeabi_ddiv>
 800a70e:	4604      	mov	r4, r0
 800a710:	460d      	mov	r5, r1
 800a712:	4620      	mov	r0, r4
 800a714:	4629      	mov	r1, r5
 800a716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a718 <__ieee754_sqrt>:
 800a718:	4a67      	ldr	r2, [pc, #412]	@ (800a8b8 <__ieee754_sqrt+0x1a0>)
 800a71a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a71e:	438a      	bics	r2, r1
 800a720:	4606      	mov	r6, r0
 800a722:	460f      	mov	r7, r1
 800a724:	460b      	mov	r3, r1
 800a726:	4604      	mov	r4, r0
 800a728:	d10e      	bne.n	800a748 <__ieee754_sqrt+0x30>
 800a72a:	4602      	mov	r2, r0
 800a72c:	f7f5 fed4 	bl	80004d8 <__aeabi_dmul>
 800a730:	4602      	mov	r2, r0
 800a732:	460b      	mov	r3, r1
 800a734:	4630      	mov	r0, r6
 800a736:	4639      	mov	r1, r7
 800a738:	f7f5 fd18 	bl	800016c <__adddf3>
 800a73c:	4606      	mov	r6, r0
 800a73e:	460f      	mov	r7, r1
 800a740:	4630      	mov	r0, r6
 800a742:	4639      	mov	r1, r7
 800a744:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a748:	2900      	cmp	r1, #0
 800a74a:	dc0c      	bgt.n	800a766 <__ieee754_sqrt+0x4e>
 800a74c:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 800a750:	4302      	orrs	r2, r0
 800a752:	d0f5      	beq.n	800a740 <__ieee754_sqrt+0x28>
 800a754:	b189      	cbz	r1, 800a77a <__ieee754_sqrt+0x62>
 800a756:	4602      	mov	r2, r0
 800a758:	f7f5 fd06 	bl	8000168 <__aeabi_dsub>
 800a75c:	4602      	mov	r2, r0
 800a75e:	460b      	mov	r3, r1
 800a760:	f7f5 ffe4 	bl	800072c <__aeabi_ddiv>
 800a764:	e7ea      	b.n	800a73c <__ieee754_sqrt+0x24>
 800a766:	150a      	asrs	r2, r1, #20
 800a768:	d115      	bne.n	800a796 <__ieee754_sqrt+0x7e>
 800a76a:	2100      	movs	r1, #0
 800a76c:	e009      	b.n	800a782 <__ieee754_sqrt+0x6a>
 800a76e:	0ae3      	lsrs	r3, r4, #11
 800a770:	3a15      	subs	r2, #21
 800a772:	0564      	lsls	r4, r4, #21
 800a774:	2b00      	cmp	r3, #0
 800a776:	d0fa      	beq.n	800a76e <__ieee754_sqrt+0x56>
 800a778:	e7f7      	b.n	800a76a <__ieee754_sqrt+0x52>
 800a77a:	460a      	mov	r2, r1
 800a77c:	e7fa      	b.n	800a774 <__ieee754_sqrt+0x5c>
 800a77e:	005b      	lsls	r3, r3, #1
 800a780:	3101      	adds	r1, #1
 800a782:	02d8      	lsls	r0, r3, #11
 800a784:	d5fb      	bpl.n	800a77e <__ieee754_sqrt+0x66>
 800a786:	1e48      	subs	r0, r1, #1
 800a788:	1a12      	subs	r2, r2, r0
 800a78a:	f1c1 0020 	rsb	r0, r1, #32
 800a78e:	fa24 f000 	lsr.w	r0, r4, r0
 800a792:	4303      	orrs	r3, r0
 800a794:	408c      	lsls	r4, r1
 800a796:	2600      	movs	r6, #0
 800a798:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800a79c:	2116      	movs	r1, #22
 800a79e:	07d2      	lsls	r2, r2, #31
 800a7a0:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800a7a4:	4632      	mov	r2, r6
 800a7a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a7aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a7ae:	bf5c      	itt	pl
 800a7b0:	005b      	lslpl	r3, r3, #1
 800a7b2:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800a7b6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a7ba:	bf58      	it	pl
 800a7bc:	0064      	lslpl	r4, r4, #1
 800a7be:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800a7c2:	107f      	asrs	r7, r7, #1
 800a7c4:	0064      	lsls	r4, r4, #1
 800a7c6:	1815      	adds	r5, r2, r0
 800a7c8:	429d      	cmp	r5, r3
 800a7ca:	bfde      	ittt	le
 800a7cc:	182a      	addle	r2, r5, r0
 800a7ce:	1b5b      	suble	r3, r3, r5
 800a7d0:	1836      	addle	r6, r6, r0
 800a7d2:	0fe5      	lsrs	r5, r4, #31
 800a7d4:	3901      	subs	r1, #1
 800a7d6:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800a7da:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800a7de:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800a7e2:	d1f0      	bne.n	800a7c6 <__ieee754_sqrt+0xae>
 800a7e4:	460d      	mov	r5, r1
 800a7e6:	f04f 0a20 	mov.w	sl, #32
 800a7ea:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800a7ee:	429a      	cmp	r2, r3
 800a7f0:	eb01 0c00 	add.w	ip, r1, r0
 800a7f4:	db02      	blt.n	800a7fc <__ieee754_sqrt+0xe4>
 800a7f6:	d113      	bne.n	800a820 <__ieee754_sqrt+0x108>
 800a7f8:	45a4      	cmp	ip, r4
 800a7fa:	d811      	bhi.n	800a820 <__ieee754_sqrt+0x108>
 800a7fc:	f1bc 0f00 	cmp.w	ip, #0
 800a800:	eb0c 0100 	add.w	r1, ip, r0
 800a804:	da42      	bge.n	800a88c <__ieee754_sqrt+0x174>
 800a806:	2900      	cmp	r1, #0
 800a808:	db40      	blt.n	800a88c <__ieee754_sqrt+0x174>
 800a80a:	f102 0e01 	add.w	lr, r2, #1
 800a80e:	1a9b      	subs	r3, r3, r2
 800a810:	4672      	mov	r2, lr
 800a812:	45a4      	cmp	ip, r4
 800a814:	bf88      	it	hi
 800a816:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800a81a:	eba4 040c 	sub.w	r4, r4, ip
 800a81e:	4405      	add	r5, r0
 800a820:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 800a824:	f1ba 0a01 	subs.w	sl, sl, #1
 800a828:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 800a82c:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800a830:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800a834:	d1db      	bne.n	800a7ee <__ieee754_sqrt+0xd6>
 800a836:	431c      	orrs	r4, r3
 800a838:	d01a      	beq.n	800a870 <__ieee754_sqrt+0x158>
 800a83a:	4c20      	ldr	r4, [pc, #128]	@ (800a8bc <__ieee754_sqrt+0x1a4>)
 800a83c:	f8df b080 	ldr.w	fp, [pc, #128]	@ 800a8c0 <__ieee754_sqrt+0x1a8>
 800a840:	e9d4 0100 	ldrd	r0, r1, [r4]
 800a844:	e9db 2300 	ldrd	r2, r3, [fp]
 800a848:	f7f5 fc8e 	bl	8000168 <__aeabi_dsub>
 800a84c:	e9d4 8900 	ldrd	r8, r9, [r4]
 800a850:	4602      	mov	r2, r0
 800a852:	460b      	mov	r3, r1
 800a854:	4640      	mov	r0, r8
 800a856:	4649      	mov	r1, r9
 800a858:	f7f6 f8ba 	bl	80009d0 <__aeabi_dcmple>
 800a85c:	b140      	cbz	r0, 800a870 <__ieee754_sqrt+0x158>
 800a85e:	e9d4 0100 	ldrd	r0, r1, [r4]
 800a862:	e9db 2300 	ldrd	r2, r3, [fp]
 800a866:	f1b5 3fff 	cmp.w	r5, #4294967295
 800a86a:	d111      	bne.n	800a890 <__ieee754_sqrt+0x178>
 800a86c:	4655      	mov	r5, sl
 800a86e:	3601      	adds	r6, #1
 800a870:	1072      	asrs	r2, r6, #1
 800a872:	086b      	lsrs	r3, r5, #1
 800a874:	07f1      	lsls	r1, r6, #31
 800a876:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800a87a:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800a87e:	bf48      	it	mi
 800a880:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800a884:	4618      	mov	r0, r3
 800a886:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 800a88a:	e757      	b.n	800a73c <__ieee754_sqrt+0x24>
 800a88c:	4696      	mov	lr, r2
 800a88e:	e7be      	b.n	800a80e <__ieee754_sqrt+0xf6>
 800a890:	f7f5 fc6c 	bl	800016c <__adddf3>
 800a894:	e9d4 8900 	ldrd	r8, r9, [r4]
 800a898:	4602      	mov	r2, r0
 800a89a:	460b      	mov	r3, r1
 800a89c:	4640      	mov	r0, r8
 800a89e:	4649      	mov	r1, r9
 800a8a0:	f7f6 f88c 	bl	80009bc <__aeabi_dcmplt>
 800a8a4:	b120      	cbz	r0, 800a8b0 <__ieee754_sqrt+0x198>
 800a8a6:	1ca8      	adds	r0, r5, #2
 800a8a8:	bf08      	it	eq
 800a8aa:	3601      	addeq	r6, #1
 800a8ac:	3502      	adds	r5, #2
 800a8ae:	e7df      	b.n	800a870 <__ieee754_sqrt+0x158>
 800a8b0:	1c6b      	adds	r3, r5, #1
 800a8b2:	f023 0501 	bic.w	r5, r3, #1
 800a8b6:	e7db      	b.n	800a870 <__ieee754_sqrt+0x158>
 800a8b8:	7ff00000 	.word	0x7ff00000
 800a8bc:	20000058 	.word	0x20000058
 800a8c0:	20000050 	.word	0x20000050

0800a8c4 <realloc>:
 800a8c4:	4b02      	ldr	r3, [pc, #8]	@ (800a8d0 <realloc+0xc>)
 800a8c6:	460a      	mov	r2, r1
 800a8c8:	4601      	mov	r1, r0
 800a8ca:	6818      	ldr	r0, [r3, #0]
 800a8cc:	f000 b802 	b.w	800a8d4 <_realloc_r>
 800a8d0:	20000060 	.word	0x20000060

0800a8d4 <_realloc_r>:
 800a8d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8d8:	4680      	mov	r8, r0
 800a8da:	4615      	mov	r5, r2
 800a8dc:	460c      	mov	r4, r1
 800a8de:	b921      	cbnz	r1, 800a8ea <_realloc_r+0x16>
 800a8e0:	4611      	mov	r1, r2
 800a8e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a8e6:	f000 b8cf 	b.w	800aa88 <_malloc_r>
 800a8ea:	b92a      	cbnz	r2, 800a8f8 <_realloc_r+0x24>
 800a8ec:	f000 f862 	bl	800a9b4 <_free_r>
 800a8f0:	2400      	movs	r4, #0
 800a8f2:	4620      	mov	r0, r4
 800a8f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8f8:	f000 f952 	bl	800aba0 <_malloc_usable_size_r>
 800a8fc:	4285      	cmp	r5, r0
 800a8fe:	4606      	mov	r6, r0
 800a900:	d802      	bhi.n	800a908 <_realloc_r+0x34>
 800a902:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a906:	d8f4      	bhi.n	800a8f2 <_realloc_r+0x1e>
 800a908:	4629      	mov	r1, r5
 800a90a:	4640      	mov	r0, r8
 800a90c:	f000 f8bc 	bl	800aa88 <_malloc_r>
 800a910:	4607      	mov	r7, r0
 800a912:	2800      	cmp	r0, #0
 800a914:	d0ec      	beq.n	800a8f0 <_realloc_r+0x1c>
 800a916:	42b5      	cmp	r5, r6
 800a918:	462a      	mov	r2, r5
 800a91a:	4621      	mov	r1, r4
 800a91c:	bf28      	it	cs
 800a91e:	4632      	movcs	r2, r6
 800a920:	f000 f83a 	bl	800a998 <memcpy>
 800a924:	4621      	mov	r1, r4
 800a926:	4640      	mov	r0, r8
 800a928:	f000 f844 	bl	800a9b4 <_free_r>
 800a92c:	463c      	mov	r4, r7
 800a92e:	e7e0      	b.n	800a8f2 <_realloc_r+0x1e>

0800a930 <memset>:
 800a930:	4603      	mov	r3, r0
 800a932:	4402      	add	r2, r0
 800a934:	4293      	cmp	r3, r2
 800a936:	d100      	bne.n	800a93a <memset+0xa>
 800a938:	4770      	bx	lr
 800a93a:	f803 1b01 	strb.w	r1, [r3], #1
 800a93e:	e7f9      	b.n	800a934 <memset+0x4>

0800a940 <__errno>:
 800a940:	4b01      	ldr	r3, [pc, #4]	@ (800a948 <__errno+0x8>)
 800a942:	6818      	ldr	r0, [r3, #0]
 800a944:	4770      	bx	lr
 800a946:	bf00      	nop
 800a948:	20000060 	.word	0x20000060

0800a94c <__libc_init_array>:
 800a94c:	b570      	push	{r4, r5, r6, lr}
 800a94e:	2600      	movs	r6, #0
 800a950:	4d0c      	ldr	r5, [pc, #48]	@ (800a984 <__libc_init_array+0x38>)
 800a952:	4c0d      	ldr	r4, [pc, #52]	@ (800a988 <__libc_init_array+0x3c>)
 800a954:	1b64      	subs	r4, r4, r5
 800a956:	10a4      	asrs	r4, r4, #2
 800a958:	42a6      	cmp	r6, r4
 800a95a:	d109      	bne.n	800a970 <__libc_init_array+0x24>
 800a95c:	f000 f938 	bl	800abd0 <_init>
 800a960:	2600      	movs	r6, #0
 800a962:	4d0a      	ldr	r5, [pc, #40]	@ (800a98c <__libc_init_array+0x40>)
 800a964:	4c0a      	ldr	r4, [pc, #40]	@ (800a990 <__libc_init_array+0x44>)
 800a966:	1b64      	subs	r4, r4, r5
 800a968:	10a4      	asrs	r4, r4, #2
 800a96a:	42a6      	cmp	r6, r4
 800a96c:	d105      	bne.n	800a97a <__libc_init_array+0x2e>
 800a96e:	bd70      	pop	{r4, r5, r6, pc}
 800a970:	f855 3b04 	ldr.w	r3, [r5], #4
 800a974:	4798      	blx	r3
 800a976:	3601      	adds	r6, #1
 800a978:	e7ee      	b.n	800a958 <__libc_init_array+0xc>
 800a97a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a97e:	4798      	blx	r3
 800a980:	3601      	adds	r6, #1
 800a982:	e7f2      	b.n	800a96a <__libc_init_array+0x1e>
 800a984:	0800b040 	.word	0x0800b040
 800a988:	0800b040 	.word	0x0800b040
 800a98c:	0800b040 	.word	0x0800b040
 800a990:	0800b048 	.word	0x0800b048

0800a994 <__retarget_lock_acquire_recursive>:
 800a994:	4770      	bx	lr

0800a996 <__retarget_lock_release_recursive>:
 800a996:	4770      	bx	lr

0800a998 <memcpy>:
 800a998:	440a      	add	r2, r1
 800a99a:	4291      	cmp	r1, r2
 800a99c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a9a0:	d100      	bne.n	800a9a4 <memcpy+0xc>
 800a9a2:	4770      	bx	lr
 800a9a4:	b510      	push	{r4, lr}
 800a9a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a9aa:	4291      	cmp	r1, r2
 800a9ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a9b0:	d1f9      	bne.n	800a9a6 <memcpy+0xe>
 800a9b2:	bd10      	pop	{r4, pc}

0800a9b4 <_free_r>:
 800a9b4:	b538      	push	{r3, r4, r5, lr}
 800a9b6:	4605      	mov	r5, r0
 800a9b8:	2900      	cmp	r1, #0
 800a9ba:	d040      	beq.n	800aa3e <_free_r+0x8a>
 800a9bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a9c0:	1f0c      	subs	r4, r1, #4
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	bfb8      	it	lt
 800a9c6:	18e4      	addlt	r4, r4, r3
 800a9c8:	f000 f8de 	bl	800ab88 <__malloc_lock>
 800a9cc:	4a1c      	ldr	r2, [pc, #112]	@ (800aa40 <_free_r+0x8c>)
 800a9ce:	6813      	ldr	r3, [r2, #0]
 800a9d0:	b933      	cbnz	r3, 800a9e0 <_free_r+0x2c>
 800a9d2:	6063      	str	r3, [r4, #4]
 800a9d4:	6014      	str	r4, [r2, #0]
 800a9d6:	4628      	mov	r0, r5
 800a9d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a9dc:	f000 b8da 	b.w	800ab94 <__malloc_unlock>
 800a9e0:	42a3      	cmp	r3, r4
 800a9e2:	d908      	bls.n	800a9f6 <_free_r+0x42>
 800a9e4:	6820      	ldr	r0, [r4, #0]
 800a9e6:	1821      	adds	r1, r4, r0
 800a9e8:	428b      	cmp	r3, r1
 800a9ea:	bf01      	itttt	eq
 800a9ec:	6819      	ldreq	r1, [r3, #0]
 800a9ee:	685b      	ldreq	r3, [r3, #4]
 800a9f0:	1809      	addeq	r1, r1, r0
 800a9f2:	6021      	streq	r1, [r4, #0]
 800a9f4:	e7ed      	b.n	800a9d2 <_free_r+0x1e>
 800a9f6:	461a      	mov	r2, r3
 800a9f8:	685b      	ldr	r3, [r3, #4]
 800a9fa:	b10b      	cbz	r3, 800aa00 <_free_r+0x4c>
 800a9fc:	42a3      	cmp	r3, r4
 800a9fe:	d9fa      	bls.n	800a9f6 <_free_r+0x42>
 800aa00:	6811      	ldr	r1, [r2, #0]
 800aa02:	1850      	adds	r0, r2, r1
 800aa04:	42a0      	cmp	r0, r4
 800aa06:	d10b      	bne.n	800aa20 <_free_r+0x6c>
 800aa08:	6820      	ldr	r0, [r4, #0]
 800aa0a:	4401      	add	r1, r0
 800aa0c:	1850      	adds	r0, r2, r1
 800aa0e:	4283      	cmp	r3, r0
 800aa10:	6011      	str	r1, [r2, #0]
 800aa12:	d1e0      	bne.n	800a9d6 <_free_r+0x22>
 800aa14:	6818      	ldr	r0, [r3, #0]
 800aa16:	685b      	ldr	r3, [r3, #4]
 800aa18:	4408      	add	r0, r1
 800aa1a:	6010      	str	r0, [r2, #0]
 800aa1c:	6053      	str	r3, [r2, #4]
 800aa1e:	e7da      	b.n	800a9d6 <_free_r+0x22>
 800aa20:	d902      	bls.n	800aa28 <_free_r+0x74>
 800aa22:	230c      	movs	r3, #12
 800aa24:	602b      	str	r3, [r5, #0]
 800aa26:	e7d6      	b.n	800a9d6 <_free_r+0x22>
 800aa28:	6820      	ldr	r0, [r4, #0]
 800aa2a:	1821      	adds	r1, r4, r0
 800aa2c:	428b      	cmp	r3, r1
 800aa2e:	bf01      	itttt	eq
 800aa30:	6819      	ldreq	r1, [r3, #0]
 800aa32:	685b      	ldreq	r3, [r3, #4]
 800aa34:	1809      	addeq	r1, r1, r0
 800aa36:	6021      	streq	r1, [r4, #0]
 800aa38:	6063      	str	r3, [r4, #4]
 800aa3a:	6054      	str	r4, [r2, #4]
 800aa3c:	e7cb      	b.n	800a9d6 <_free_r+0x22>
 800aa3e:	bd38      	pop	{r3, r4, r5, pc}
 800aa40:	200046bc 	.word	0x200046bc

0800aa44 <sbrk_aligned>:
 800aa44:	b570      	push	{r4, r5, r6, lr}
 800aa46:	4e0f      	ldr	r6, [pc, #60]	@ (800aa84 <sbrk_aligned+0x40>)
 800aa48:	460c      	mov	r4, r1
 800aa4a:	6831      	ldr	r1, [r6, #0]
 800aa4c:	4605      	mov	r5, r0
 800aa4e:	b911      	cbnz	r1, 800aa56 <sbrk_aligned+0x12>
 800aa50:	f000 f8ae 	bl	800abb0 <_sbrk_r>
 800aa54:	6030      	str	r0, [r6, #0]
 800aa56:	4621      	mov	r1, r4
 800aa58:	4628      	mov	r0, r5
 800aa5a:	f000 f8a9 	bl	800abb0 <_sbrk_r>
 800aa5e:	1c43      	adds	r3, r0, #1
 800aa60:	d103      	bne.n	800aa6a <sbrk_aligned+0x26>
 800aa62:	f04f 34ff 	mov.w	r4, #4294967295
 800aa66:	4620      	mov	r0, r4
 800aa68:	bd70      	pop	{r4, r5, r6, pc}
 800aa6a:	1cc4      	adds	r4, r0, #3
 800aa6c:	f024 0403 	bic.w	r4, r4, #3
 800aa70:	42a0      	cmp	r0, r4
 800aa72:	d0f8      	beq.n	800aa66 <sbrk_aligned+0x22>
 800aa74:	1a21      	subs	r1, r4, r0
 800aa76:	4628      	mov	r0, r5
 800aa78:	f000 f89a 	bl	800abb0 <_sbrk_r>
 800aa7c:	3001      	adds	r0, #1
 800aa7e:	d1f2      	bne.n	800aa66 <sbrk_aligned+0x22>
 800aa80:	e7ef      	b.n	800aa62 <sbrk_aligned+0x1e>
 800aa82:	bf00      	nop
 800aa84:	200046b8 	.word	0x200046b8

0800aa88 <_malloc_r>:
 800aa88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa8c:	1ccd      	adds	r5, r1, #3
 800aa8e:	f025 0503 	bic.w	r5, r5, #3
 800aa92:	3508      	adds	r5, #8
 800aa94:	2d0c      	cmp	r5, #12
 800aa96:	bf38      	it	cc
 800aa98:	250c      	movcc	r5, #12
 800aa9a:	2d00      	cmp	r5, #0
 800aa9c:	4606      	mov	r6, r0
 800aa9e:	db01      	blt.n	800aaa4 <_malloc_r+0x1c>
 800aaa0:	42a9      	cmp	r1, r5
 800aaa2:	d904      	bls.n	800aaae <_malloc_r+0x26>
 800aaa4:	230c      	movs	r3, #12
 800aaa6:	6033      	str	r3, [r6, #0]
 800aaa8:	2000      	movs	r0, #0
 800aaaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aaae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ab84 <_malloc_r+0xfc>
 800aab2:	f000 f869 	bl	800ab88 <__malloc_lock>
 800aab6:	f8d8 3000 	ldr.w	r3, [r8]
 800aaba:	461c      	mov	r4, r3
 800aabc:	bb44      	cbnz	r4, 800ab10 <_malloc_r+0x88>
 800aabe:	4629      	mov	r1, r5
 800aac0:	4630      	mov	r0, r6
 800aac2:	f7ff ffbf 	bl	800aa44 <sbrk_aligned>
 800aac6:	1c43      	adds	r3, r0, #1
 800aac8:	4604      	mov	r4, r0
 800aaca:	d158      	bne.n	800ab7e <_malloc_r+0xf6>
 800aacc:	f8d8 4000 	ldr.w	r4, [r8]
 800aad0:	4627      	mov	r7, r4
 800aad2:	2f00      	cmp	r7, #0
 800aad4:	d143      	bne.n	800ab5e <_malloc_r+0xd6>
 800aad6:	2c00      	cmp	r4, #0
 800aad8:	d04b      	beq.n	800ab72 <_malloc_r+0xea>
 800aada:	6823      	ldr	r3, [r4, #0]
 800aadc:	4639      	mov	r1, r7
 800aade:	4630      	mov	r0, r6
 800aae0:	eb04 0903 	add.w	r9, r4, r3
 800aae4:	f000 f864 	bl	800abb0 <_sbrk_r>
 800aae8:	4581      	cmp	r9, r0
 800aaea:	d142      	bne.n	800ab72 <_malloc_r+0xea>
 800aaec:	6821      	ldr	r1, [r4, #0]
 800aaee:	4630      	mov	r0, r6
 800aaf0:	1a6d      	subs	r5, r5, r1
 800aaf2:	4629      	mov	r1, r5
 800aaf4:	f7ff ffa6 	bl	800aa44 <sbrk_aligned>
 800aaf8:	3001      	adds	r0, #1
 800aafa:	d03a      	beq.n	800ab72 <_malloc_r+0xea>
 800aafc:	6823      	ldr	r3, [r4, #0]
 800aafe:	442b      	add	r3, r5
 800ab00:	6023      	str	r3, [r4, #0]
 800ab02:	f8d8 3000 	ldr.w	r3, [r8]
 800ab06:	685a      	ldr	r2, [r3, #4]
 800ab08:	bb62      	cbnz	r2, 800ab64 <_malloc_r+0xdc>
 800ab0a:	f8c8 7000 	str.w	r7, [r8]
 800ab0e:	e00f      	b.n	800ab30 <_malloc_r+0xa8>
 800ab10:	6822      	ldr	r2, [r4, #0]
 800ab12:	1b52      	subs	r2, r2, r5
 800ab14:	d420      	bmi.n	800ab58 <_malloc_r+0xd0>
 800ab16:	2a0b      	cmp	r2, #11
 800ab18:	d917      	bls.n	800ab4a <_malloc_r+0xc2>
 800ab1a:	1961      	adds	r1, r4, r5
 800ab1c:	42a3      	cmp	r3, r4
 800ab1e:	6025      	str	r5, [r4, #0]
 800ab20:	bf18      	it	ne
 800ab22:	6059      	strne	r1, [r3, #4]
 800ab24:	6863      	ldr	r3, [r4, #4]
 800ab26:	bf08      	it	eq
 800ab28:	f8c8 1000 	streq.w	r1, [r8]
 800ab2c:	5162      	str	r2, [r4, r5]
 800ab2e:	604b      	str	r3, [r1, #4]
 800ab30:	4630      	mov	r0, r6
 800ab32:	f000 f82f 	bl	800ab94 <__malloc_unlock>
 800ab36:	f104 000b 	add.w	r0, r4, #11
 800ab3a:	1d23      	adds	r3, r4, #4
 800ab3c:	f020 0007 	bic.w	r0, r0, #7
 800ab40:	1ac2      	subs	r2, r0, r3
 800ab42:	bf1c      	itt	ne
 800ab44:	1a1b      	subne	r3, r3, r0
 800ab46:	50a3      	strne	r3, [r4, r2]
 800ab48:	e7af      	b.n	800aaaa <_malloc_r+0x22>
 800ab4a:	6862      	ldr	r2, [r4, #4]
 800ab4c:	42a3      	cmp	r3, r4
 800ab4e:	bf0c      	ite	eq
 800ab50:	f8c8 2000 	streq.w	r2, [r8]
 800ab54:	605a      	strne	r2, [r3, #4]
 800ab56:	e7eb      	b.n	800ab30 <_malloc_r+0xa8>
 800ab58:	4623      	mov	r3, r4
 800ab5a:	6864      	ldr	r4, [r4, #4]
 800ab5c:	e7ae      	b.n	800aabc <_malloc_r+0x34>
 800ab5e:	463c      	mov	r4, r7
 800ab60:	687f      	ldr	r7, [r7, #4]
 800ab62:	e7b6      	b.n	800aad2 <_malloc_r+0x4a>
 800ab64:	461a      	mov	r2, r3
 800ab66:	685b      	ldr	r3, [r3, #4]
 800ab68:	42a3      	cmp	r3, r4
 800ab6a:	d1fb      	bne.n	800ab64 <_malloc_r+0xdc>
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	6053      	str	r3, [r2, #4]
 800ab70:	e7de      	b.n	800ab30 <_malloc_r+0xa8>
 800ab72:	230c      	movs	r3, #12
 800ab74:	4630      	mov	r0, r6
 800ab76:	6033      	str	r3, [r6, #0]
 800ab78:	f000 f80c 	bl	800ab94 <__malloc_unlock>
 800ab7c:	e794      	b.n	800aaa8 <_malloc_r+0x20>
 800ab7e:	6005      	str	r5, [r0, #0]
 800ab80:	e7d6      	b.n	800ab30 <_malloc_r+0xa8>
 800ab82:	bf00      	nop
 800ab84:	200046bc 	.word	0x200046bc

0800ab88 <__malloc_lock>:
 800ab88:	4801      	ldr	r0, [pc, #4]	@ (800ab90 <__malloc_lock+0x8>)
 800ab8a:	f7ff bf03 	b.w	800a994 <__retarget_lock_acquire_recursive>
 800ab8e:	bf00      	nop
 800ab90:	200046b4 	.word	0x200046b4

0800ab94 <__malloc_unlock>:
 800ab94:	4801      	ldr	r0, [pc, #4]	@ (800ab9c <__malloc_unlock+0x8>)
 800ab96:	f7ff befe 	b.w	800a996 <__retarget_lock_release_recursive>
 800ab9a:	bf00      	nop
 800ab9c:	200046b4 	.word	0x200046b4

0800aba0 <_malloc_usable_size_r>:
 800aba0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aba4:	1f18      	subs	r0, r3, #4
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	bfbc      	itt	lt
 800abaa:	580b      	ldrlt	r3, [r1, r0]
 800abac:	18c0      	addlt	r0, r0, r3
 800abae:	4770      	bx	lr

0800abb0 <_sbrk_r>:
 800abb0:	b538      	push	{r3, r4, r5, lr}
 800abb2:	2300      	movs	r3, #0
 800abb4:	4d05      	ldr	r5, [pc, #20]	@ (800abcc <_sbrk_r+0x1c>)
 800abb6:	4604      	mov	r4, r0
 800abb8:	4608      	mov	r0, r1
 800abba:	602b      	str	r3, [r5, #0]
 800abbc:	f7fc fadc 	bl	8007178 <_sbrk>
 800abc0:	1c43      	adds	r3, r0, #1
 800abc2:	d102      	bne.n	800abca <_sbrk_r+0x1a>
 800abc4:	682b      	ldr	r3, [r5, #0]
 800abc6:	b103      	cbz	r3, 800abca <_sbrk_r+0x1a>
 800abc8:	6023      	str	r3, [r4, #0]
 800abca:	bd38      	pop	{r3, r4, r5, pc}
 800abcc:	200046b0 	.word	0x200046b0

0800abd0 <_init>:
 800abd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abd2:	bf00      	nop
 800abd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abd6:	bc08      	pop	{r3}
 800abd8:	469e      	mov	lr, r3
 800abda:	4770      	bx	lr

0800abdc <_fini>:
 800abdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abde:	bf00      	nop
 800abe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abe2:	bc08      	pop	{r3}
 800abe4:	469e      	mov	lr, r3
 800abe6:	4770      	bx	lr
