
rosserial_chatter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ad0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000254  08004bdc  08004bdc  00005bdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e30  08004e30  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  08004e30  08004e30  00005e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e38  08004e38  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08004e38  08004e38  00005e38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e40  08004e40  00005e40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08004e44  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004344  2000005c  08004ea0  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200043a0  08004ea0  000063a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e013  00000000  00000000  00006085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002231  00000000  00000000  00014098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000908  00000000  00000000  000162d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006eb  00000000  00000000  00016bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00008661  00000000  00000000  000172c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000050d8  00000000  00000000  0001f924  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  000249fc  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00002794  00000000  00000000  00024a40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 0000008b  00000000  00000000  000271d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08004bc4 	.word	0x08004bc4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08004bc4 	.word	0x08004bc4

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000160:	f002 f9cc 	bl	80024fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000164:	f000 f80c 	bl	8000180 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000168:	f000 f896 	bl	8000298 <MX_GPIO_Init>
  MX_DMA_Init();
 800016c:	f000 f86e 	bl	800024c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000170:	f000 f842 	bl	80001f8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  setup();
 8000174:	f001 fa44 	bl	8001600 <setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  loop();
 8000178:	f001 fa52 	bl	8001620 <loop>
  {
 800017c:	bf00      	nop
 800017e:	e7fb      	b.n	8000178 <main+0x1c>

08000180 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000180:	b580      	push	{r7, lr}
 8000182:	b090      	sub	sp, #64	@ 0x40
 8000184:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000186:	f107 0318 	add.w	r3, r7, #24
 800018a:	2228      	movs	r2, #40	@ 0x28
 800018c:	2100      	movs	r1, #0
 800018e:	4618      	mov	r0, r3
 8000190:	f004 fbc8 	bl	8004924 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000194:	1d3b      	adds	r3, r7, #4
 8000196:	2200      	movs	r2, #0
 8000198:	601a      	str	r2, [r3, #0]
 800019a:	605a      	str	r2, [r3, #4]
 800019c:	609a      	str	r2, [r3, #8]
 800019e:	60da      	str	r2, [r3, #12]
 80001a0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001a2:	2302      	movs	r3, #2
 80001a4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001a6:	2301      	movs	r3, #1
 80001a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001aa:	2310      	movs	r3, #16
 80001ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001ae:	2300      	movs	r3, #0
 80001b0:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001b2:	f107 0318 	add.w	r3, r7, #24
 80001b6:	4618      	mov	r0, r3
 80001b8:	f002 ff8c 	bl	80030d4 <HAL_RCC_OscConfig>
 80001bc:	4603      	mov	r3, r0
 80001be:	2b00      	cmp	r3, #0
 80001c0:	d001      	beq.n	80001c6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80001c2:	f000 f8b5 	bl	8000330 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001c6:	230f      	movs	r3, #15
 80001c8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80001ca:	2300      	movs	r3, #0
 80001cc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001ce:	2300      	movs	r3, #0
 80001d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80001d2:	2300      	movs	r3, #0
 80001d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001d6:	2300      	movs	r3, #0
 80001d8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80001da:	1d3b      	adds	r3, r7, #4
 80001dc:	2100      	movs	r1, #0
 80001de:	4618      	mov	r0, r3
 80001e0:	f003 f9fa 	bl	80035d8 <HAL_RCC_ClockConfig>
 80001e4:	4603      	mov	r3, r0
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	d001      	beq.n	80001ee <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80001ea:	f000 f8a1 	bl	8000330 <Error_Handler>
  }
}
 80001ee:	bf00      	nop
 80001f0:	3740      	adds	r7, #64	@ 0x40
 80001f2:	46bd      	mov	sp, r7
 80001f4:	bd80      	pop	{r7, pc}
	...

080001f8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart_rosserial.Instance = USART1;
 80001fc:	4b11      	ldr	r3, [pc, #68]	@ (8000244 <MX_USART1_UART_Init+0x4c>)
 80001fe:	4a12      	ldr	r2, [pc, #72]	@ (8000248 <MX_USART1_UART_Init+0x50>)
 8000200:	601a      	str	r2, [r3, #0]
  huart_rosserial.Init.BaudRate = 57600;
 8000202:	4b10      	ldr	r3, [pc, #64]	@ (8000244 <MX_USART1_UART_Init+0x4c>)
 8000204:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 8000208:	605a      	str	r2, [r3, #4]
  huart_rosserial.Init.WordLength = UART_WORDLENGTH_8B;
 800020a:	4b0e      	ldr	r3, [pc, #56]	@ (8000244 <MX_USART1_UART_Init+0x4c>)
 800020c:	2200      	movs	r2, #0
 800020e:	609a      	str	r2, [r3, #8]
  huart_rosserial.Init.StopBits = UART_STOPBITS_1;
 8000210:	4b0c      	ldr	r3, [pc, #48]	@ (8000244 <MX_USART1_UART_Init+0x4c>)
 8000212:	2200      	movs	r2, #0
 8000214:	60da      	str	r2, [r3, #12]
  huart_rosserial.Init.Parity = UART_PARITY_NONE;
 8000216:	4b0b      	ldr	r3, [pc, #44]	@ (8000244 <MX_USART1_UART_Init+0x4c>)
 8000218:	2200      	movs	r2, #0
 800021a:	611a      	str	r2, [r3, #16]
  huart_rosserial.Init.Mode = UART_MODE_TX_RX;
 800021c:	4b09      	ldr	r3, [pc, #36]	@ (8000244 <MX_USART1_UART_Init+0x4c>)
 800021e:	220c      	movs	r2, #12
 8000220:	615a      	str	r2, [r3, #20]
  huart_rosserial.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000222:	4b08      	ldr	r3, [pc, #32]	@ (8000244 <MX_USART1_UART_Init+0x4c>)
 8000224:	2200      	movs	r2, #0
 8000226:	619a      	str	r2, [r3, #24]
  huart_rosserial.Init.OverSampling = UART_OVERSAMPLING_16;
 8000228:	4b06      	ldr	r3, [pc, #24]	@ (8000244 <MX_USART1_UART_Init+0x4c>)
 800022a:	2200      	movs	r2, #0
 800022c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart_rosserial) != HAL_OK)
 800022e:	4805      	ldr	r0, [pc, #20]	@ (8000244 <MX_USART1_UART_Init+0x4c>)
 8000230:	f003 fb60 	bl	80038f4 <HAL_UART_Init>
 8000234:	4603      	mov	r3, r0
 8000236:	2b00      	cmp	r3, #0
 8000238:	d001      	beq.n	800023e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800023a:	f000 f879 	bl	8000330 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800023e:	bf00      	nop
 8000240:	bd80      	pop	{r7, pc}
 8000242:	bf00      	nop
 8000244:	20000078 	.word	0x20000078
 8000248:	40013800 	.word	0x40013800

0800024c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	b082      	sub	sp, #8
 8000250:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000252:	4b10      	ldr	r3, [pc, #64]	@ (8000294 <MX_DMA_Init+0x48>)
 8000254:	695b      	ldr	r3, [r3, #20]
 8000256:	4a0f      	ldr	r2, [pc, #60]	@ (8000294 <MX_DMA_Init+0x48>)
 8000258:	f043 0301 	orr.w	r3, r3, #1
 800025c:	6153      	str	r3, [r2, #20]
 800025e:	4b0d      	ldr	r3, [pc, #52]	@ (8000294 <MX_DMA_Init+0x48>)
 8000260:	695b      	ldr	r3, [r3, #20]
 8000262:	f003 0301 	and.w	r3, r3, #1
 8000266:	607b      	str	r3, [r7, #4]
 8000268:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800026a:	2200      	movs	r2, #0
 800026c:	2100      	movs	r1, #0
 800026e:	200e      	movs	r0, #14
 8000270:	f002 faa1 	bl	80027b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000274:	200e      	movs	r0, #14
 8000276:	f002 faba 	bl	80027ee <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800027a:	2200      	movs	r2, #0
 800027c:	2100      	movs	r1, #0
 800027e:	200f      	movs	r0, #15
 8000280:	f002 fa99 	bl	80027b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000284:	200f      	movs	r0, #15
 8000286:	f002 fab2 	bl	80027ee <HAL_NVIC_EnableIRQ>

}
 800028a:	bf00      	nop
 800028c:	3708      	adds	r7, #8
 800028e:	46bd      	mov	sp, r7
 8000290:	bd80      	pop	{r7, pc}
 8000292:	bf00      	nop
 8000294:	40021000 	.word	0x40021000

08000298 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b088      	sub	sp, #32
 800029c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800029e:	f107 0310 	add.w	r3, r7, #16
 80002a2:	2200      	movs	r2, #0
 80002a4:	601a      	str	r2, [r3, #0]
 80002a6:	605a      	str	r2, [r3, #4]
 80002a8:	609a      	str	r2, [r3, #8]
 80002aa:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002ac:	4b1e      	ldr	r3, [pc, #120]	@ (8000328 <MX_GPIO_Init+0x90>)
 80002ae:	699b      	ldr	r3, [r3, #24]
 80002b0:	4a1d      	ldr	r2, [pc, #116]	@ (8000328 <MX_GPIO_Init+0x90>)
 80002b2:	f043 0310 	orr.w	r3, r3, #16
 80002b6:	6193      	str	r3, [r2, #24]
 80002b8:	4b1b      	ldr	r3, [pc, #108]	@ (8000328 <MX_GPIO_Init+0x90>)
 80002ba:	699b      	ldr	r3, [r3, #24]
 80002bc:	f003 0310 	and.w	r3, r3, #16
 80002c0:	60fb      	str	r3, [r7, #12]
 80002c2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002c4:	4b18      	ldr	r3, [pc, #96]	@ (8000328 <MX_GPIO_Init+0x90>)
 80002c6:	699b      	ldr	r3, [r3, #24]
 80002c8:	4a17      	ldr	r2, [pc, #92]	@ (8000328 <MX_GPIO_Init+0x90>)
 80002ca:	f043 0320 	orr.w	r3, r3, #32
 80002ce:	6193      	str	r3, [r2, #24]
 80002d0:	4b15      	ldr	r3, [pc, #84]	@ (8000328 <MX_GPIO_Init+0x90>)
 80002d2:	699b      	ldr	r3, [r3, #24]
 80002d4:	f003 0320 	and.w	r3, r3, #32
 80002d8:	60bb      	str	r3, [r7, #8]
 80002da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002dc:	4b12      	ldr	r3, [pc, #72]	@ (8000328 <MX_GPIO_Init+0x90>)
 80002de:	699b      	ldr	r3, [r3, #24]
 80002e0:	4a11      	ldr	r2, [pc, #68]	@ (8000328 <MX_GPIO_Init+0x90>)
 80002e2:	f043 0304 	orr.w	r3, r3, #4
 80002e6:	6193      	str	r3, [r2, #24]
 80002e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000328 <MX_GPIO_Init+0x90>)
 80002ea:	699b      	ldr	r3, [r3, #24]
 80002ec:	f003 0304 	and.w	r3, r3, #4
 80002f0:	607b      	str	r3, [r7, #4]
 80002f2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80002f4:	2200      	movs	r2, #0
 80002f6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80002fa:	480c      	ldr	r0, [pc, #48]	@ (800032c <MX_GPIO_Init+0x94>)
 80002fc:	f002 feb8 	bl	8003070 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000300:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000304:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000306:	2301      	movs	r3, #1
 8000308:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800030a:	2300      	movs	r3, #0
 800030c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800030e:	2302      	movs	r3, #2
 8000310:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000312:	f107 0310 	add.w	r3, r7, #16
 8000316:	4619      	mov	r1, r3
 8000318:	4804      	ldr	r0, [pc, #16]	@ (800032c <MX_GPIO_Init+0x94>)
 800031a:	f002 fd25 	bl	8002d68 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800031e:	bf00      	nop
 8000320:	3720      	adds	r7, #32
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	40021000 	.word	0x40021000
 800032c:	40011000 	.word	0x40011000

08000330 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000334:	b672      	cpsid	i
}
 8000336:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000338:	bf00      	nop
 800033a:	e7fd      	b.n	8000338 <Error_Handler+0x8>

0800033c <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 800033c:	b480      	push	{r7}
 800033e:	b083      	sub	sp, #12
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	2200      	movs	r2, #0
 8000348:	601a      	str	r2, [r3, #0]
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	2200      	movs	r2, #0
 800034e:	605a      	str	r2, [r3, #4]
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	4618      	mov	r0, r3
 8000354:	370c      	adds	r7, #12
 8000356:	46bd      	mov	sp, r7
 8000358:	bc80      	pop	{r7}
 800035a:	4770      	bx	lr

0800035c <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 800035c:	b480      	push	{r7}
 800035e:	b083      	sub	sp, #12
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
 8000364:	4a04      	ldr	r2, [pc, #16]	@ (8000378 <_ZN3ros3MsgC1Ev+0x1c>)
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	601a      	str	r2, [r3, #0]
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	4618      	mov	r0, r3
 800036e:	370c      	adds	r7, #12
 8000370:	46bd      	mov	sp, r7
 8000372:	bc80      	pop	{r7}
 8000374:	4770      	bx	lr
 8000376:	bf00      	nop
 8000378:	08004df4 	.word	0x08004df4

0800037c <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 800037c:	b580      	push	{r7, lr}
 800037e:	b082      	sub	sp, #8
 8000380:	af00      	add	r7, sp, #0
 8000382:	6078      	str	r0, [r7, #4]
      data()
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	4618      	mov	r0, r3
 8000388:	f7ff ffe8 	bl	800035c <_ZN3ros3MsgC1Ev>
 800038c:	4a06      	ldr	r2, [pc, #24]	@ (80003a8 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	601a      	str	r2, [r3, #0]
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	3304      	adds	r3, #4
 8000396:	4618      	mov	r0, r3
 8000398:	f7ff ffd0 	bl	800033c <_ZN3ros4TimeC1Ev>
    {
    }
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	4618      	mov	r0, r3
 80003a0:	3708      	adds	r7, #8
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	bf00      	nop
 80003a8:	08004ddc 	.word	0x08004ddc

080003ac <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80003ac:	b480      	push	{r7}
 80003ae:	b085      	sub	sp, #20
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
 80003b4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80003b6:	2300      	movs	r3, #0
 80003b8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	6859      	ldr	r1, [r3, #4]
 80003be:	68fb      	ldr	r3, [r7, #12]
 80003c0:	683a      	ldr	r2, [r7, #0]
 80003c2:	4413      	add	r3, r2
 80003c4:	b2ca      	uxtb	r2, r1
 80003c6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	685b      	ldr	r3, [r3, #4]
 80003cc:	0a19      	lsrs	r1, r3, #8
 80003ce:	68fb      	ldr	r3, [r7, #12]
 80003d0:	3301      	adds	r3, #1
 80003d2:	683a      	ldr	r2, [r7, #0]
 80003d4:	4413      	add	r3, r2
 80003d6:	b2ca      	uxtb	r2, r1
 80003d8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	685b      	ldr	r3, [r3, #4]
 80003de:	0c19      	lsrs	r1, r3, #16
 80003e0:	68fb      	ldr	r3, [r7, #12]
 80003e2:	3302      	adds	r3, #2
 80003e4:	683a      	ldr	r2, [r7, #0]
 80003e6:	4413      	add	r3, r2
 80003e8:	b2ca      	uxtb	r2, r1
 80003ea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	685b      	ldr	r3, [r3, #4]
 80003f0:	0e19      	lsrs	r1, r3, #24
 80003f2:	68fb      	ldr	r3, [r7, #12]
 80003f4:	3303      	adds	r3, #3
 80003f6:	683a      	ldr	r2, [r7, #0]
 80003f8:	4413      	add	r3, r2
 80003fa:	b2ca      	uxtb	r2, r1
 80003fc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 80003fe:	68fb      	ldr	r3, [r7, #12]
 8000400:	3304      	adds	r3, #4
 8000402:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	6899      	ldr	r1, [r3, #8]
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	683a      	ldr	r2, [r7, #0]
 800040c:	4413      	add	r3, r2
 800040e:	b2ca      	uxtb	r2, r1
 8000410:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	689b      	ldr	r3, [r3, #8]
 8000416:	0a19      	lsrs	r1, r3, #8
 8000418:	68fb      	ldr	r3, [r7, #12]
 800041a:	3301      	adds	r3, #1
 800041c:	683a      	ldr	r2, [r7, #0]
 800041e:	4413      	add	r3, r2
 8000420:	b2ca      	uxtb	r2, r1
 8000422:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	689b      	ldr	r3, [r3, #8]
 8000428:	0c19      	lsrs	r1, r3, #16
 800042a:	68fb      	ldr	r3, [r7, #12]
 800042c:	3302      	adds	r3, #2
 800042e:	683a      	ldr	r2, [r7, #0]
 8000430:	4413      	add	r3, r2
 8000432:	b2ca      	uxtb	r2, r1
 8000434:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	689b      	ldr	r3, [r3, #8]
 800043a:	0e19      	lsrs	r1, r3, #24
 800043c:	68fb      	ldr	r3, [r7, #12]
 800043e:	3303      	adds	r3, #3
 8000440:	683a      	ldr	r2, [r7, #0]
 8000442:	4413      	add	r3, r2
 8000444:	b2ca      	uxtb	r2, r1
 8000446:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8000448:	68fb      	ldr	r3, [r7, #12]
 800044a:	3304      	adds	r3, #4
 800044c:	60fb      	str	r3, [r7, #12]
      return offset;
 800044e:	68fb      	ldr	r3, [r7, #12]
    }
 8000450:	4618      	mov	r0, r3
 8000452:	3714      	adds	r7, #20
 8000454:	46bd      	mov	sp, r7
 8000456:	bc80      	pop	{r7}
 8000458:	4770      	bx	lr

0800045a <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800045a:	b480      	push	{r7}
 800045c:	b085      	sub	sp, #20
 800045e:	af00      	add	r7, sp, #0
 8000460:	6078      	str	r0, [r7, #4]
 8000462:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000464:	2300      	movs	r3, #0
 8000466:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8000468:	68fb      	ldr	r3, [r7, #12]
 800046a:	683a      	ldr	r2, [r7, #0]
 800046c:	4413      	add	r3, r2
 800046e:	781b      	ldrb	r3, [r3, #0]
 8000470:	461a      	mov	r2, r3
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	685a      	ldr	r2, [r3, #4]
 800047a:	68fb      	ldr	r3, [r7, #12]
 800047c:	3301      	adds	r3, #1
 800047e:	6839      	ldr	r1, [r7, #0]
 8000480:	440b      	add	r3, r1
 8000482:	781b      	ldrb	r3, [r3, #0]
 8000484:	021b      	lsls	r3, r3, #8
 8000486:	431a      	orrs	r2, r3
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	685a      	ldr	r2, [r3, #4]
 8000490:	68fb      	ldr	r3, [r7, #12]
 8000492:	3302      	adds	r3, #2
 8000494:	6839      	ldr	r1, [r7, #0]
 8000496:	440b      	add	r3, r1
 8000498:	781b      	ldrb	r3, [r3, #0]
 800049a:	041b      	lsls	r3, r3, #16
 800049c:	431a      	orrs	r2, r3
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	685a      	ldr	r2, [r3, #4]
 80004a6:	68fb      	ldr	r3, [r7, #12]
 80004a8:	3303      	adds	r3, #3
 80004aa:	6839      	ldr	r1, [r7, #0]
 80004ac:	440b      	add	r3, r1
 80004ae:	781b      	ldrb	r3, [r3, #0]
 80004b0:	061b      	lsls	r3, r3, #24
 80004b2:	431a      	orrs	r2, r3
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	3304      	adds	r3, #4
 80004bc:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80004be:	68fb      	ldr	r3, [r7, #12]
 80004c0:	683a      	ldr	r2, [r7, #0]
 80004c2:	4413      	add	r3, r2
 80004c4:	781b      	ldrb	r3, [r3, #0]
 80004c6:	461a      	mov	r2, r3
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	689a      	ldr	r2, [r3, #8]
 80004d0:	68fb      	ldr	r3, [r7, #12]
 80004d2:	3301      	adds	r3, #1
 80004d4:	6839      	ldr	r1, [r7, #0]
 80004d6:	440b      	add	r3, r1
 80004d8:	781b      	ldrb	r3, [r3, #0]
 80004da:	021b      	lsls	r3, r3, #8
 80004dc:	431a      	orrs	r2, r3
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	689a      	ldr	r2, [r3, #8]
 80004e6:	68fb      	ldr	r3, [r7, #12]
 80004e8:	3302      	adds	r3, #2
 80004ea:	6839      	ldr	r1, [r7, #0]
 80004ec:	440b      	add	r3, r1
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	041b      	lsls	r3, r3, #16
 80004f2:	431a      	orrs	r2, r3
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	689a      	ldr	r2, [r3, #8]
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	3303      	adds	r3, #3
 8000500:	6839      	ldr	r1, [r7, #0]
 8000502:	440b      	add	r3, r1
 8000504:	781b      	ldrb	r3, [r3, #0]
 8000506:	061b      	lsls	r3, r3, #24
 8000508:	431a      	orrs	r2, r3
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 800050e:	68fb      	ldr	r3, [r7, #12]
 8000510:	3304      	adds	r3, #4
 8000512:	60fb      	str	r3, [r7, #12]
     return offset;
 8000514:	68fb      	ldr	r3, [r7, #12]
    }
 8000516:	4618      	mov	r0, r3
 8000518:	3714      	adds	r7, #20
 800051a:	46bd      	mov	sp, r7
 800051c:	bc80      	pop	{r7}
 800051e:	4770      	bx	lr

08000520 <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 8000520:	b480      	push	{r7}
 8000522:	b083      	sub	sp, #12
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
 8000528:	4b02      	ldr	r3, [pc, #8]	@ (8000534 <_ZN8std_msgs4Time7getTypeEv+0x14>)
 800052a:	4618      	mov	r0, r3
 800052c:	370c      	adds	r7, #12
 800052e:	46bd      	mov	sp, r7
 8000530:	bc80      	pop	{r7}
 8000532:	4770      	bx	lr
 8000534:	08004bdc 	.word	0x08004bdc

08000538 <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8000538:	b480      	push	{r7}
 800053a:	b083      	sub	sp, #12
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
 8000540:	4b02      	ldr	r3, [pc, #8]	@ (800054c <_ZN8std_msgs4Time6getMD5Ev+0x14>)
 8000542:	4618      	mov	r0, r3
 8000544:	370c      	adds	r7, #12
 8000546:	46bd      	mov	sp, r7
 8000548:	bc80      	pop	{r7}
 800054a:	4770      	bx	lr
 800054c:	08004bec 	.word	0x08004bec

08000550 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	4618      	mov	r0, r3
 800055c:	f7ff fefe 	bl	800035c <_ZN3ros3MsgC1Ev>
 8000560:	4a0b      	ldr	r2, [pc, #44]	@ (8000590 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	601a      	str	r2, [r3, #0]
      topic_id(0),
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	2200      	movs	r2, #0
 800056a:	809a      	strh	r2, [r3, #4]
      topic_name(""),
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	4a09      	ldr	r2, [pc, #36]	@ (8000594 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000570:	609a      	str	r2, [r3, #8]
      message_type(""),
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	4a07      	ldr	r2, [pc, #28]	@ (8000594 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000576:	60da      	str	r2, [r3, #12]
      md5sum(""),
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	4a06      	ldr	r2, [pc, #24]	@ (8000594 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800057c:	611a      	str	r2, [r3, #16]
      buffer_size(0)
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	2200      	movs	r2, #0
 8000582:	615a      	str	r2, [r3, #20]
    {
    }
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	4618      	mov	r0, r3
 8000588:	3708      	adds	r7, #8
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	08004dc4 	.word	0x08004dc4
 8000594:	08004c10 	.word	0x08004c10

08000598 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000598:	b580      	push	{r7, lr}
 800059a:	b088      	sub	sp, #32
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
 80005a0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80005a2:	2300      	movs	r3, #0
 80005a4:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	8899      	ldrh	r1, [r3, #4]
 80005aa:	69fb      	ldr	r3, [r7, #28]
 80005ac:	683a      	ldr	r2, [r7, #0]
 80005ae:	4413      	add	r3, r2
 80005b0:	b2ca      	uxtb	r2, r1
 80005b2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	889b      	ldrh	r3, [r3, #4]
 80005b8:	0a1b      	lsrs	r3, r3, #8
 80005ba:	b299      	uxth	r1, r3
 80005bc:	69fb      	ldr	r3, [r7, #28]
 80005be:	3301      	adds	r3, #1
 80005c0:	683a      	ldr	r2, [r7, #0]
 80005c2:	4413      	add	r3, r2
 80005c4:	b2ca      	uxtb	r2, r1
 80005c6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 80005c8:	69fb      	ldr	r3, [r7, #28]
 80005ca:	3302      	adds	r3, #2
 80005cc:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	689b      	ldr	r3, [r3, #8]
 80005d2:	4618      	mov	r0, r3
 80005d4:	f7ff fdba 	bl	800014c <strlen>
 80005d8:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 80005da:	69fb      	ldr	r3, [r7, #28]
 80005dc:	683a      	ldr	r2, [r7, #0]
 80005de:	4413      	add	r3, r2
 80005e0:	69b9      	ldr	r1, [r7, #24]
 80005e2:	4618      	mov	r0, r3
 80005e4:	f001 f836 	bl	8001654 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80005e8:	69fb      	ldr	r3, [r7, #28]
 80005ea:	3304      	adds	r3, #4
 80005ec:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 80005ee:	69fb      	ldr	r3, [r7, #28]
 80005f0:	683a      	ldr	r2, [r7, #0]
 80005f2:	18d0      	adds	r0, r2, r3
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	689b      	ldr	r3, [r3, #8]
 80005f8:	69ba      	ldr	r2, [r7, #24]
 80005fa:	4619      	mov	r1, r3
 80005fc:	f004 f9c6 	bl	800498c <memcpy>
      offset += length_topic_name;
 8000600:	69fa      	ldr	r2, [r7, #28]
 8000602:	69bb      	ldr	r3, [r7, #24]
 8000604:	4413      	add	r3, r2
 8000606:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	68db      	ldr	r3, [r3, #12]
 800060c:	4618      	mov	r0, r3
 800060e:	f7ff fd9d 	bl	800014c <strlen>
 8000612:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8000614:	69fb      	ldr	r3, [r7, #28]
 8000616:	683a      	ldr	r2, [r7, #0]
 8000618:	4413      	add	r3, r2
 800061a:	6979      	ldr	r1, [r7, #20]
 800061c:	4618      	mov	r0, r3
 800061e:	f001 f819 	bl	8001654 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000622:	69fb      	ldr	r3, [r7, #28]
 8000624:	3304      	adds	r3, #4
 8000626:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8000628:	69fb      	ldr	r3, [r7, #28]
 800062a:	683a      	ldr	r2, [r7, #0]
 800062c:	18d0      	adds	r0, r2, r3
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	68db      	ldr	r3, [r3, #12]
 8000632:	697a      	ldr	r2, [r7, #20]
 8000634:	4619      	mov	r1, r3
 8000636:	f004 f9a9 	bl	800498c <memcpy>
      offset += length_message_type;
 800063a:	69fa      	ldr	r2, [r7, #28]
 800063c:	697b      	ldr	r3, [r7, #20]
 800063e:	4413      	add	r3, r2
 8000640:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	691b      	ldr	r3, [r3, #16]
 8000646:	4618      	mov	r0, r3
 8000648:	f7ff fd80 	bl	800014c <strlen>
 800064c:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 800064e:	69fb      	ldr	r3, [r7, #28]
 8000650:	683a      	ldr	r2, [r7, #0]
 8000652:	4413      	add	r3, r2
 8000654:	6939      	ldr	r1, [r7, #16]
 8000656:	4618      	mov	r0, r3
 8000658:	f000 fffc 	bl	8001654 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800065c:	69fb      	ldr	r3, [r7, #28]
 800065e:	3304      	adds	r3, #4
 8000660:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8000662:	69fb      	ldr	r3, [r7, #28]
 8000664:	683a      	ldr	r2, [r7, #0]
 8000666:	18d0      	adds	r0, r2, r3
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	691b      	ldr	r3, [r3, #16]
 800066c:	693a      	ldr	r2, [r7, #16]
 800066e:	4619      	mov	r1, r3
 8000670:	f004 f98c 	bl	800498c <memcpy>
      offset += length_md5sum;
 8000674:	69fa      	ldr	r2, [r7, #28]
 8000676:	693b      	ldr	r3, [r7, #16]
 8000678:	4413      	add	r3, r2
 800067a:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	695b      	ldr	r3, [r3, #20]
 8000680:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8000682:	68f9      	ldr	r1, [r7, #12]
 8000684:	69fb      	ldr	r3, [r7, #28]
 8000686:	683a      	ldr	r2, [r7, #0]
 8000688:	4413      	add	r3, r2
 800068a:	b2ca      	uxtb	r2, r1
 800068c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	0a19      	lsrs	r1, r3, #8
 8000692:	69fb      	ldr	r3, [r7, #28]
 8000694:	3301      	adds	r3, #1
 8000696:	683a      	ldr	r2, [r7, #0]
 8000698:	4413      	add	r3, r2
 800069a:	b2ca      	uxtb	r2, r1
 800069c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	0c19      	lsrs	r1, r3, #16
 80006a2:	69fb      	ldr	r3, [r7, #28]
 80006a4:	3302      	adds	r3, #2
 80006a6:	683a      	ldr	r2, [r7, #0]
 80006a8:	4413      	add	r3, r2
 80006aa:	b2ca      	uxtb	r2, r1
 80006ac:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	0e19      	lsrs	r1, r3, #24
 80006b2:	69fb      	ldr	r3, [r7, #28]
 80006b4:	3303      	adds	r3, #3
 80006b6:	683a      	ldr	r2, [r7, #0]
 80006b8:	4413      	add	r3, r2
 80006ba:	b2ca      	uxtb	r2, r1
 80006bc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 80006be:	69fb      	ldr	r3, [r7, #28]
 80006c0:	3304      	adds	r3, #4
 80006c2:	61fb      	str	r3, [r7, #28]
      return offset;
 80006c4:	69fb      	ldr	r3, [r7, #28]
    }
 80006c6:	4618      	mov	r0, r3
 80006c8:	3720      	adds	r7, #32
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}

080006ce <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80006ce:	b580      	push	{r7, lr}
 80006d0:	b08a      	sub	sp, #40	@ 0x28
 80006d2:	af00      	add	r7, sp, #0
 80006d4:	6078      	str	r0, [r7, #4]
 80006d6:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80006d8:	2300      	movs	r3, #0
 80006da:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 80006dc:	69bb      	ldr	r3, [r7, #24]
 80006de:	683a      	ldr	r2, [r7, #0]
 80006e0:	4413      	add	r3, r2
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	461a      	mov	r2, r3
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	889b      	ldrh	r3, [r3, #4]
 80006ee:	b21a      	sxth	r2, r3
 80006f0:	69bb      	ldr	r3, [r7, #24]
 80006f2:	3301      	adds	r3, #1
 80006f4:	6839      	ldr	r1, [r7, #0]
 80006f6:	440b      	add	r3, r1
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	021b      	lsls	r3, r3, #8
 80006fc:	b21b      	sxth	r3, r3
 80006fe:	4313      	orrs	r3, r2
 8000700:	b21b      	sxth	r3, r3
 8000702:	b29a      	uxth	r2, r3
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8000708:	69bb      	ldr	r3, [r7, #24]
 800070a:	3302      	adds	r3, #2
 800070c:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 800070e:	69bb      	ldr	r3, [r7, #24]
 8000710:	683a      	ldr	r2, [r7, #0]
 8000712:	441a      	add	r2, r3
 8000714:	f107 0314 	add.w	r3, r7, #20
 8000718:	4611      	mov	r1, r2
 800071a:	4618      	mov	r0, r3
 800071c:	f000 ffb8 	bl	8001690 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000720:	69bb      	ldr	r3, [r7, #24]
 8000722:	3304      	adds	r3, #4
 8000724:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8000726:	69bb      	ldr	r3, [r7, #24]
 8000728:	627b      	str	r3, [r7, #36]	@ 0x24
 800072a:	e00b      	b.n	8000744 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x76>
          inbuffer[k-1]=inbuffer[k];
 800072c:	683a      	ldr	r2, [r7, #0]
 800072e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000730:	441a      	add	r2, r3
 8000732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000734:	3b01      	subs	r3, #1
 8000736:	6839      	ldr	r1, [r7, #0]
 8000738:	440b      	add	r3, r1
 800073a:	7812      	ldrb	r2, [r2, #0]
 800073c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800073e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000740:	3301      	adds	r3, #1
 8000742:	627b      	str	r3, [r7, #36]	@ 0x24
 8000744:	69ba      	ldr	r2, [r7, #24]
 8000746:	697b      	ldr	r3, [r7, #20]
 8000748:	4413      	add	r3, r2
 800074a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800074c:	429a      	cmp	r2, r3
 800074e:	d3ed      	bcc.n	800072c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5e>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8000750:	69ba      	ldr	r2, [r7, #24]
 8000752:	697b      	ldr	r3, [r7, #20]
 8000754:	4413      	add	r3, r2
 8000756:	3b01      	subs	r3, #1
 8000758:	683a      	ldr	r2, [r7, #0]
 800075a:	4413      	add	r3, r2
 800075c:	2200      	movs	r2, #0
 800075e:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8000760:	69bb      	ldr	r3, [r7, #24]
 8000762:	3b01      	subs	r3, #1
 8000764:	683a      	ldr	r2, [r7, #0]
 8000766:	441a      	add	r2, r3
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 800076c:	69ba      	ldr	r2, [r7, #24]
 800076e:	697b      	ldr	r3, [r7, #20]
 8000770:	4413      	add	r3, r2
 8000772:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8000774:	69bb      	ldr	r3, [r7, #24]
 8000776:	683a      	ldr	r2, [r7, #0]
 8000778:	441a      	add	r2, r3
 800077a:	f107 0310 	add.w	r3, r7, #16
 800077e:	4611      	mov	r1, r2
 8000780:	4618      	mov	r0, r3
 8000782:	f000 ff85 	bl	8001690 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000786:	69bb      	ldr	r3, [r7, #24]
 8000788:	3304      	adds	r3, #4
 800078a:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800078c:	69bb      	ldr	r3, [r7, #24]
 800078e:	623b      	str	r3, [r7, #32]
 8000790:	e00b      	b.n	80007aa <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xdc>
          inbuffer[k-1]=inbuffer[k];
 8000792:	683a      	ldr	r2, [r7, #0]
 8000794:	6a3b      	ldr	r3, [r7, #32]
 8000796:	441a      	add	r2, r3
 8000798:	6a3b      	ldr	r3, [r7, #32]
 800079a:	3b01      	subs	r3, #1
 800079c:	6839      	ldr	r1, [r7, #0]
 800079e:	440b      	add	r3, r1
 80007a0:	7812      	ldrb	r2, [r2, #0]
 80007a2:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80007a4:	6a3b      	ldr	r3, [r7, #32]
 80007a6:	3301      	adds	r3, #1
 80007a8:	623b      	str	r3, [r7, #32]
 80007aa:	69ba      	ldr	r2, [r7, #24]
 80007ac:	693b      	ldr	r3, [r7, #16]
 80007ae:	4413      	add	r3, r2
 80007b0:	6a3a      	ldr	r2, [r7, #32]
 80007b2:	429a      	cmp	r2, r3
 80007b4:	d3ed      	bcc.n	8000792 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc4>
      }
      inbuffer[offset+length_message_type-1]=0;
 80007b6:	69ba      	ldr	r2, [r7, #24]
 80007b8:	693b      	ldr	r3, [r7, #16]
 80007ba:	4413      	add	r3, r2
 80007bc:	3b01      	subs	r3, #1
 80007be:	683a      	ldr	r2, [r7, #0]
 80007c0:	4413      	add	r3, r2
 80007c2:	2200      	movs	r2, #0
 80007c4:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 80007c6:	69bb      	ldr	r3, [r7, #24]
 80007c8:	3b01      	subs	r3, #1
 80007ca:	683a      	ldr	r2, [r7, #0]
 80007cc:	441a      	add	r2, r3
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 80007d2:	69ba      	ldr	r2, [r7, #24]
 80007d4:	693b      	ldr	r3, [r7, #16]
 80007d6:	4413      	add	r3, r2
 80007d8:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 80007da:	69bb      	ldr	r3, [r7, #24]
 80007dc:	683a      	ldr	r2, [r7, #0]
 80007de:	441a      	add	r2, r3
 80007e0:	f107 030c 	add.w	r3, r7, #12
 80007e4:	4611      	mov	r1, r2
 80007e6:	4618      	mov	r0, r3
 80007e8:	f000 ff52 	bl	8001690 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80007ec:	69bb      	ldr	r3, [r7, #24]
 80007ee:	3304      	adds	r3, #4
 80007f0:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80007f2:	69bb      	ldr	r3, [r7, #24]
 80007f4:	61fb      	str	r3, [r7, #28]
 80007f6:	e00b      	b.n	8000810 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x142>
          inbuffer[k-1]=inbuffer[k];
 80007f8:	683a      	ldr	r2, [r7, #0]
 80007fa:	69fb      	ldr	r3, [r7, #28]
 80007fc:	441a      	add	r2, r3
 80007fe:	69fb      	ldr	r3, [r7, #28]
 8000800:	3b01      	subs	r3, #1
 8000802:	6839      	ldr	r1, [r7, #0]
 8000804:	440b      	add	r3, r1
 8000806:	7812      	ldrb	r2, [r2, #0]
 8000808:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800080a:	69fb      	ldr	r3, [r7, #28]
 800080c:	3301      	adds	r3, #1
 800080e:	61fb      	str	r3, [r7, #28]
 8000810:	69ba      	ldr	r2, [r7, #24]
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	4413      	add	r3, r2
 8000816:	69fa      	ldr	r2, [r7, #28]
 8000818:	429a      	cmp	r2, r3
 800081a:	d3ed      	bcc.n	80007f8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x12a>
      }
      inbuffer[offset+length_md5sum-1]=0;
 800081c:	69ba      	ldr	r2, [r7, #24]
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	4413      	add	r3, r2
 8000822:	3b01      	subs	r3, #1
 8000824:	683a      	ldr	r2, [r7, #0]
 8000826:	4413      	add	r3, r2
 8000828:	2200      	movs	r2, #0
 800082a:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 800082c:	69bb      	ldr	r3, [r7, #24]
 800082e:	3b01      	subs	r3, #1
 8000830:	683a      	ldr	r2, [r7, #0]
 8000832:	441a      	add	r2, r3
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8000838:	69ba      	ldr	r2, [r7, #24]
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	4413      	add	r3, r2
 800083e:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8000840:	2300      	movs	r3, #0
 8000842:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000844:	68bb      	ldr	r3, [r7, #8]
 8000846:	69ba      	ldr	r2, [r7, #24]
 8000848:	6839      	ldr	r1, [r7, #0]
 800084a:	440a      	add	r2, r1
 800084c:	7812      	ldrb	r2, [r2, #0]
 800084e:	4313      	orrs	r3, r2
 8000850:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000852:	68ba      	ldr	r2, [r7, #8]
 8000854:	69bb      	ldr	r3, [r7, #24]
 8000856:	3301      	adds	r3, #1
 8000858:	6839      	ldr	r1, [r7, #0]
 800085a:	440b      	add	r3, r1
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	021b      	lsls	r3, r3, #8
 8000860:	4313      	orrs	r3, r2
 8000862:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000864:	68ba      	ldr	r2, [r7, #8]
 8000866:	69bb      	ldr	r3, [r7, #24]
 8000868:	3302      	adds	r3, #2
 800086a:	6839      	ldr	r1, [r7, #0]
 800086c:	440b      	add	r3, r1
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	041b      	lsls	r3, r3, #16
 8000872:	4313      	orrs	r3, r2
 8000874:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000876:	68ba      	ldr	r2, [r7, #8]
 8000878:	69bb      	ldr	r3, [r7, #24]
 800087a:	3303      	adds	r3, #3
 800087c:	6839      	ldr	r1, [r7, #0]
 800087e:	440b      	add	r3, r1
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	061b      	lsls	r3, r3, #24
 8000884:	4313      	orrs	r3, r2
 8000886:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8000888:	68ba      	ldr	r2, [r7, #8]
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 800088e:	69bb      	ldr	r3, [r7, #24]
 8000890:	3304      	adds	r3, #4
 8000892:	61bb      	str	r3, [r7, #24]
     return offset;
 8000894:	69bb      	ldr	r3, [r7, #24]
    }
 8000896:	4618      	mov	r0, r3
 8000898:	3728      	adds	r7, #40	@ 0x28
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
	...

080008a0 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 80008a0:	b480      	push	{r7}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
 80008a8:	4b02      	ldr	r3, [pc, #8]	@ (80008b4 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x14>)
 80008aa:	4618      	mov	r0, r3
 80008ac:	370c      	adds	r7, #12
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bc80      	pop	{r7}
 80008b2:	4770      	bx	lr
 80008b4:	08004c14 	.word	0x08004c14

080008b8 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
 80008c0:	4b02      	ldr	r3, [pc, #8]	@ (80008cc <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x14>)
 80008c2:	4618      	mov	r0, r3
 80008c4:	370c      	adds	r7, #12
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bc80      	pop	{r7}
 80008ca:	4770      	bx	lr
 80008cc:	08004c30 	.word	0x08004c30

080008d0 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	4618      	mov	r0, r3
 80008dc:	f7ff fd3e 	bl	800035c <_ZN3ros3MsgC1Ev>
 80008e0:	4a06      	ldr	r2, [pc, #24]	@ (80008fc <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	601a      	str	r2, [r3, #0]
      level(0),
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	2200      	movs	r2, #0
 80008ea:	711a      	strb	r2, [r3, #4]
      msg("")
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	4a04      	ldr	r2, [pc, #16]	@ (8000900 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 80008f0:	609a      	str	r2, [r3, #8]
    {
    }
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	4618      	mov	r0, r3
 80008f6:	3708      	adds	r7, #8
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	08004dac 	.word	0x08004dac
 8000900:	08004c10 	.word	0x08004c10

08000904 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000904:	b580      	push	{r7, lr}
 8000906:	b084      	sub	sp, #16
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
 800090c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800090e:	2300      	movs	r3, #0
 8000910:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	683a      	ldr	r2, [r7, #0]
 8000916:	4413      	add	r3, r2
 8000918:	687a      	ldr	r2, [r7, #4]
 800091a:	7912      	ldrb	r2, [r2, #4]
 800091c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	3301      	adds	r3, #1
 8000922:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	689b      	ldr	r3, [r3, #8]
 8000928:	4618      	mov	r0, r3
 800092a:	f7ff fc0f 	bl	800014c <strlen>
 800092e:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	683a      	ldr	r2, [r7, #0]
 8000934:	4413      	add	r3, r2
 8000936:	68b9      	ldr	r1, [r7, #8]
 8000938:	4618      	mov	r0, r3
 800093a:	f000 fe8b 	bl	8001654 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	3304      	adds	r3, #4
 8000942:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	683a      	ldr	r2, [r7, #0]
 8000948:	18d0      	adds	r0, r2, r3
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	689b      	ldr	r3, [r3, #8]
 800094e:	68ba      	ldr	r2, [r7, #8]
 8000950:	4619      	mov	r1, r3
 8000952:	f004 f81b 	bl	800498c <memcpy>
      offset += length_msg;
 8000956:	68fa      	ldr	r2, [r7, #12]
 8000958:	68bb      	ldr	r3, [r7, #8]
 800095a:	4413      	add	r3, r2
 800095c:	60fb      	str	r3, [r7, #12]
      return offset;
 800095e:	68fb      	ldr	r3, [r7, #12]
    }
 8000960:	4618      	mov	r0, r3
 8000962:	3710      	adds	r7, #16
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}

08000968 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8000968:	b580      	push	{r7, lr}
 800096a:	b086      	sub	sp, #24
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
 8000970:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000972:	2300      	movs	r3, #0
 8000974:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8000976:	693b      	ldr	r3, [r7, #16]
 8000978:	683a      	ldr	r2, [r7, #0]
 800097a:	4413      	add	r3, r2
 800097c:	781a      	ldrb	r2, [r3, #0]
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8000982:	693b      	ldr	r3, [r7, #16]
 8000984:	3301      	adds	r3, #1
 8000986:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8000988:	693b      	ldr	r3, [r7, #16]
 800098a:	683a      	ldr	r2, [r7, #0]
 800098c:	441a      	add	r2, r3
 800098e:	f107 030c 	add.w	r3, r7, #12
 8000992:	4611      	mov	r1, r2
 8000994:	4618      	mov	r0, r3
 8000996:	f000 fe7b 	bl	8001690 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800099a:	693b      	ldr	r3, [r7, #16]
 800099c:	3304      	adds	r3, #4
 800099e:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80009a0:	693b      	ldr	r3, [r7, #16]
 80009a2:	617b      	str	r3, [r7, #20]
 80009a4:	e00b      	b.n	80009be <_ZN14rosserial_msgs3Log11deserializeEPh+0x56>
          inbuffer[k-1]=inbuffer[k];
 80009a6:	683a      	ldr	r2, [r7, #0]
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	441a      	add	r2, r3
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	3b01      	subs	r3, #1
 80009b0:	6839      	ldr	r1, [r7, #0]
 80009b2:	440b      	add	r3, r1
 80009b4:	7812      	ldrb	r2, [r2, #0]
 80009b6:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80009b8:	697b      	ldr	r3, [r7, #20]
 80009ba:	3301      	adds	r3, #1
 80009bc:	617b      	str	r3, [r7, #20]
 80009be:	693a      	ldr	r2, [r7, #16]
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	4413      	add	r3, r2
 80009c4:	697a      	ldr	r2, [r7, #20]
 80009c6:	429a      	cmp	r2, r3
 80009c8:	d3ed      	bcc.n	80009a6 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3e>
      }
      inbuffer[offset+length_msg-1]=0;
 80009ca:	693a      	ldr	r2, [r7, #16]
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	4413      	add	r3, r2
 80009d0:	3b01      	subs	r3, #1
 80009d2:	683a      	ldr	r2, [r7, #0]
 80009d4:	4413      	add	r3, r2
 80009d6:	2200      	movs	r2, #0
 80009d8:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 80009da:	693b      	ldr	r3, [r7, #16]
 80009dc:	3b01      	subs	r3, #1
 80009de:	683a      	ldr	r2, [r7, #0]
 80009e0:	441a      	add	r2, r3
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 80009e6:	693a      	ldr	r2, [r7, #16]
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	4413      	add	r3, r2
 80009ec:	613b      	str	r3, [r7, #16]
     return offset;
 80009ee:	693b      	ldr	r3, [r7, #16]
    }
 80009f0:	4618      	mov	r0, r3
 80009f2:	3718      	adds	r7, #24
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}

080009f8 <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 80009f8:	b480      	push	{r7}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
 8000a00:	4b02      	ldr	r3, [pc, #8]	@ (8000a0c <_ZN14rosserial_msgs3Log7getTypeEv+0x14>)
 8000a02:	4618      	mov	r0, r3
 8000a04:	370c      	adds	r7, #12
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bc80      	pop	{r7}
 8000a0a:	4770      	bx	lr
 8000a0c:	08004c54 	.word	0x08004c54

08000a10 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
 8000a18:	4b02      	ldr	r3, [pc, #8]	@ (8000a24 <_ZN14rosserial_msgs3Log6getMD5Ev+0x14>)
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	370c      	adds	r7, #12
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bc80      	pop	{r7}
 8000a22:	4770      	bx	lr
 8000a24:	08004c68 	.word	0x08004c68

08000a28 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	4618      	mov	r0, r3
 8000a34:	f7ff fc92 	bl	800035c <_ZN3ros3MsgC1Ev>
 8000a38:	4a11      	ldr	r2, [pc, #68]	@ (8000a80 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	601a      	str	r2, [r3, #0]
      ints_length(0), st_ints(), ints(nullptr),
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	2200      	movs	r2, #0
 8000a42:	605a      	str	r2, [r3, #4]
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	2200      	movs	r2, #0
 8000a48:	609a      	str	r2, [r3, #8]
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	60da      	str	r2, [r3, #12]
      floats_length(0), st_floats(), floats(nullptr),
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	2200      	movs	r2, #0
 8000a54:	611a      	str	r2, [r3, #16]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	f04f 0200 	mov.w	r2, #0
 8000a5c:	615a      	str	r2, [r3, #20]
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	2200      	movs	r2, #0
 8000a62:	619a      	str	r2, [r3, #24]
      strings_length(0), st_strings(), strings(nullptr)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	2200      	movs	r2, #0
 8000a68:	61da      	str	r2, [r3, #28]
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	621a      	str	r2, [r3, #32]
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	2200      	movs	r2, #0
 8000a74:	625a      	str	r2, [r3, #36]	@ 0x24
    {
    }
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	4618      	mov	r0, r3
 8000a7a:	3708      	adds	r7, #8
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	08004d94 	.word	0x08004d94

08000a84 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b08a      	sub	sp, #40	@ 0x28
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
 8000a8c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	627b      	str	r3, [r7, #36]	@ 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	6859      	ldr	r1, [r3, #4]
 8000a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a98:	683a      	ldr	r2, [r7, #0]
 8000a9a:	4413      	add	r3, r2
 8000a9c:	b2ca      	uxtb	r2, r1
 8000a9e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	685b      	ldr	r3, [r3, #4]
 8000aa4:	0a19      	lsrs	r1, r3, #8
 8000aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	683a      	ldr	r2, [r7, #0]
 8000aac:	4413      	add	r3, r2
 8000aae:	b2ca      	uxtb	r2, r1
 8000ab0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	685b      	ldr	r3, [r3, #4]
 8000ab6:	0c19      	lsrs	r1, r3, #16
 8000ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aba:	3302      	adds	r3, #2
 8000abc:	683a      	ldr	r2, [r7, #0]
 8000abe:	4413      	add	r3, r2
 8000ac0:	b2ca      	uxtb	r2, r1
 8000ac2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	0e19      	lsrs	r1, r3, #24
 8000aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000acc:	3303      	adds	r3, #3
 8000ace:	683a      	ldr	r2, [r7, #0]
 8000ad0:	4413      	add	r3, r2
 8000ad2:	b2ca      	uxtb	r2, r1
 8000ad4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8000ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ad8:	3304      	adds	r3, #4
 8000ada:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8000adc:	2300      	movs	r3, #0
 8000ade:	623b      	str	r3, [r7, #32]
 8000ae0:	e02a      	b.n	8000b38 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xb4>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	68da      	ldr	r2, [r3, #12]
 8000ae6:	6a3b      	ldr	r3, [r7, #32]
 8000ae8:	009b      	lsls	r3, r3, #2
 8000aea:	4413      	add	r3, r2
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8000af0:	6939      	ldr	r1, [r7, #16]
 8000af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000af4:	683a      	ldr	r2, [r7, #0]
 8000af6:	4413      	add	r3, r2
 8000af8:	b2ca      	uxtb	r2, r1
 8000afa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8000afc:	693b      	ldr	r3, [r7, #16]
 8000afe:	0a19      	lsrs	r1, r3, #8
 8000b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b02:	3301      	adds	r3, #1
 8000b04:	683a      	ldr	r2, [r7, #0]
 8000b06:	4413      	add	r3, r2
 8000b08:	b2ca      	uxtb	r2, r1
 8000b0a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8000b0c:	693b      	ldr	r3, [r7, #16]
 8000b0e:	0c19      	lsrs	r1, r3, #16
 8000b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b12:	3302      	adds	r3, #2
 8000b14:	683a      	ldr	r2, [r7, #0]
 8000b16:	4413      	add	r3, r2
 8000b18:	b2ca      	uxtb	r2, r1
 8000b1a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8000b1c:	693b      	ldr	r3, [r7, #16]
 8000b1e:	0e19      	lsrs	r1, r3, #24
 8000b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b22:	3303      	adds	r3, #3
 8000b24:	683a      	ldr	r2, [r7, #0]
 8000b26:	4413      	add	r3, r2
 8000b28:	b2ca      	uxtb	r2, r1
 8000b2a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8000b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b2e:	3304      	adds	r3, #4
 8000b30:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8000b32:	6a3b      	ldr	r3, [r7, #32]
 8000b34:	3301      	adds	r3, #1
 8000b36:	623b      	str	r3, [r7, #32]
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	685b      	ldr	r3, [r3, #4]
 8000b3c:	6a3a      	ldr	r2, [r7, #32]
 8000b3e:	429a      	cmp	r2, r3
 8000b40:	d3cf      	bcc.n	8000ae2 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	6919      	ldr	r1, [r3, #16]
 8000b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b48:	683a      	ldr	r2, [r7, #0]
 8000b4a:	4413      	add	r3, r2
 8000b4c:	b2ca      	uxtb	r2, r1
 8000b4e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	691b      	ldr	r3, [r3, #16]
 8000b54:	0a19      	lsrs	r1, r3, #8
 8000b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b58:	3301      	adds	r3, #1
 8000b5a:	683a      	ldr	r2, [r7, #0]
 8000b5c:	4413      	add	r3, r2
 8000b5e:	b2ca      	uxtb	r2, r1
 8000b60:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	691b      	ldr	r3, [r3, #16]
 8000b66:	0c19      	lsrs	r1, r3, #16
 8000b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b6a:	3302      	adds	r3, #2
 8000b6c:	683a      	ldr	r2, [r7, #0]
 8000b6e:	4413      	add	r3, r2
 8000b70:	b2ca      	uxtb	r2, r1
 8000b72:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	691b      	ldr	r3, [r3, #16]
 8000b78:	0e19      	lsrs	r1, r3, #24
 8000b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b7c:	3303      	adds	r3, #3
 8000b7e:	683a      	ldr	r2, [r7, #0]
 8000b80:	4413      	add	r3, r2
 8000b82:	b2ca      	uxtb	r2, r1
 8000b84:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8000b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b88:	3304      	adds	r3, #4
 8000b8a:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	61fb      	str	r3, [r7, #28]
 8000b90:	e02a      	b.n	8000be8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x164>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	699a      	ldr	r2, [r3, #24]
 8000b96:	69fb      	ldr	r3, [r7, #28]
 8000b98:	009b      	lsls	r3, r3, #2
 8000b9a:	4413      	add	r3, r2
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8000ba0:	68f9      	ldr	r1, [r7, #12]
 8000ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ba4:	683a      	ldr	r2, [r7, #0]
 8000ba6:	4413      	add	r3, r2
 8000ba8:	b2ca      	uxtb	r2, r1
 8000baa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	0a19      	lsrs	r1, r3, #8
 8000bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bb2:	3301      	adds	r3, #1
 8000bb4:	683a      	ldr	r2, [r7, #0]
 8000bb6:	4413      	add	r3, r2
 8000bb8:	b2ca      	uxtb	r2, r1
 8000bba:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	0c19      	lsrs	r1, r3, #16
 8000bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bc2:	3302      	adds	r3, #2
 8000bc4:	683a      	ldr	r2, [r7, #0]
 8000bc6:	4413      	add	r3, r2
 8000bc8:	b2ca      	uxtb	r2, r1
 8000bca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	0e19      	lsrs	r1, r3, #24
 8000bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bd2:	3303      	adds	r3, #3
 8000bd4:	683a      	ldr	r2, [r7, #0]
 8000bd6:	4413      	add	r3, r2
 8000bd8:	b2ca      	uxtb	r2, r1
 8000bda:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8000bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bde:	3304      	adds	r3, #4
 8000be0:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8000be2:	69fb      	ldr	r3, [r7, #28]
 8000be4:	3301      	adds	r3, #1
 8000be6:	61fb      	str	r3, [r7, #28]
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	691b      	ldr	r3, [r3, #16]
 8000bec:	69fa      	ldr	r2, [r7, #28]
 8000bee:	429a      	cmp	r2, r3
 8000bf0:	d3cf      	bcc.n	8000b92 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10e>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	69d9      	ldr	r1, [r3, #28]
 8000bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bf8:	683a      	ldr	r2, [r7, #0]
 8000bfa:	4413      	add	r3, r2
 8000bfc:	b2ca      	uxtb	r2, r1
 8000bfe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	69db      	ldr	r3, [r3, #28]
 8000c04:	0a19      	lsrs	r1, r3, #8
 8000c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c08:	3301      	adds	r3, #1
 8000c0a:	683a      	ldr	r2, [r7, #0]
 8000c0c:	4413      	add	r3, r2
 8000c0e:	b2ca      	uxtb	r2, r1
 8000c10:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	69db      	ldr	r3, [r3, #28]
 8000c16:	0c19      	lsrs	r1, r3, #16
 8000c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c1a:	3302      	adds	r3, #2
 8000c1c:	683a      	ldr	r2, [r7, #0]
 8000c1e:	4413      	add	r3, r2
 8000c20:	b2ca      	uxtb	r2, r1
 8000c22:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	69db      	ldr	r3, [r3, #28]
 8000c28:	0e19      	lsrs	r1, r3, #24
 8000c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c2c:	3303      	adds	r3, #3
 8000c2e:	683a      	ldr	r2, [r7, #0]
 8000c30:	4413      	add	r3, r2
 8000c32:	b2ca      	uxtb	r2, r1
 8000c34:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8000c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c38:	3304      	adds	r3, #4
 8000c3a:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	61bb      	str	r3, [r7, #24]
 8000c40:	e027      	b.n	8000c92 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x20e>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000c46:	69bb      	ldr	r3, [r7, #24]
 8000c48:	009b      	lsls	r3, r3, #2
 8000c4a:	4413      	add	r3, r2
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f7ff fa7c 	bl	800014c <strlen>
 8000c54:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8000c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c58:	683a      	ldr	r2, [r7, #0]
 8000c5a:	4413      	add	r3, r2
 8000c5c:	6979      	ldr	r1, [r7, #20]
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f000 fcf8 	bl	8001654 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c66:	3304      	adds	r3, #4
 8000c68:	627b      	str	r3, [r7, #36]	@ 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8000c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c6c:	683a      	ldr	r2, [r7, #0]
 8000c6e:	18d0      	adds	r0, r2, r3
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000c74:	69bb      	ldr	r3, [r7, #24]
 8000c76:	009b      	lsls	r3, r3, #2
 8000c78:	4413      	add	r3, r2
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	697a      	ldr	r2, [r7, #20]
 8000c7e:	4619      	mov	r1, r3
 8000c80:	f003 fe84 	bl	800498c <memcpy>
      offset += length_stringsi;
 8000c84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	4413      	add	r3, r2
 8000c8a:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8000c8c:	69bb      	ldr	r3, [r7, #24]
 8000c8e:	3301      	adds	r3, #1
 8000c90:	61bb      	str	r3, [r7, #24]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	69db      	ldr	r3, [r3, #28]
 8000c96:	69ba      	ldr	r2, [r7, #24]
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	d3d2      	bcc.n	8000c42 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1be>
      }
      return offset;
 8000c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3728      	adds	r7, #40	@ 0x28
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	b08e      	sub	sp, #56	@ 0x38
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	6078      	str	r0, [r7, #4]
 8000cae:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	637b      	str	r3, [r7, #52]	@ 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8000cb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000cb6:	683a      	ldr	r2, [r7, #0]
 8000cb8:	4413      	add	r3, r2
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8000cbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000cc0:	3301      	adds	r3, #1
 8000cc2:	683a      	ldr	r2, [r7, #0]
 8000cc4:	4413      	add	r3, r2
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	021b      	lsls	r3, r3, #8
 8000cca:	6a3a      	ldr	r2, [r7, #32]
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8000cd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000cd2:	3302      	adds	r3, #2
 8000cd4:	683a      	ldr	r2, [r7, #0]
 8000cd6:	4413      	add	r3, r2
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	041b      	lsls	r3, r3, #16
 8000cdc:	6a3a      	ldr	r2, [r7, #32]
 8000cde:	4313      	orrs	r3, r2
 8000ce0:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8000ce2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ce4:	3303      	adds	r3, #3
 8000ce6:	683a      	ldr	r2, [r7, #0]
 8000ce8:	4413      	add	r3, r2
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	061b      	lsls	r3, r3, #24
 8000cee:	6a3a      	ldr	r2, [r7, #32]
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8000cf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000cf6:	3304      	adds	r3, #4
 8000cf8:	637b      	str	r3, [r7, #52]	@ 0x34
      if(ints_lengthT > ints_length)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	6a3a      	ldr	r2, [r7, #32]
 8000d00:	429a      	cmp	r2, r3
 8000d02:	d90a      	bls.n	8000d1a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	68da      	ldr	r2, [r3, #12]
 8000d08:	6a3b      	ldr	r3, [r7, #32]
 8000d0a:	009b      	lsls	r3, r3, #2
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	4610      	mov	r0, r2
 8000d10:	f003 fdd2 	bl	80048b8 <realloc>
 8000d14:	4602      	mov	r2, r0
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	6a3a      	ldr	r2, [r7, #32]
 8000d1e:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8000d20:	2300      	movs	r3, #0
 8000d22:	633b      	str	r3, [r7, #48]	@ 0x30
 8000d24:	e035      	b.n	8000d92 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xec>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8000d26:	2300      	movs	r3, #0
 8000d28:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000d2e:	6839      	ldr	r1, [r7, #0]
 8000d30:	440a      	add	r2, r1
 8000d32:	7812      	ldrb	r2, [r2, #0]
 8000d34:	4313      	orrs	r3, r2
 8000d36:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000d38:	697a      	ldr	r2, [r7, #20]
 8000d3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	6839      	ldr	r1, [r7, #0]
 8000d40:	440b      	add	r3, r1
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	021b      	lsls	r3, r3, #8
 8000d46:	4313      	orrs	r3, r2
 8000d48:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000d4a:	697a      	ldr	r2, [r7, #20]
 8000d4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d4e:	3302      	adds	r3, #2
 8000d50:	6839      	ldr	r1, [r7, #0]
 8000d52:	440b      	add	r3, r1
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	041b      	lsls	r3, r3, #16
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000d5c:	697a      	ldr	r2, [r7, #20]
 8000d5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d60:	3303      	adds	r3, #3
 8000d62:	6839      	ldr	r1, [r7, #0]
 8000d64:	440b      	add	r3, r1
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	061b      	lsls	r3, r3, #24
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8000d6e:	697a      	ldr	r2, [r7, #20]
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8000d74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d76:	3304      	adds	r3, #4
 8000d78:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	68da      	ldr	r2, [r3, #12]
 8000d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d80:	009b      	lsls	r3, r3, #2
 8000d82:	4413      	add	r3, r2
 8000d84:	687a      	ldr	r2, [r7, #4]
 8000d86:	3208      	adds	r2, #8
 8000d88:	6812      	ldr	r2, [r2, #0]
 8000d8a:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8000d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d8e:	3301      	adds	r3, #1
 8000d90:	633b      	str	r3, [r7, #48]	@ 0x30
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	d3c4      	bcc.n	8000d26 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x80>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8000d9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d9e:	683a      	ldr	r2, [r7, #0]
 8000da0:	4413      	add	r3, r2
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8000da6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000da8:	3301      	adds	r3, #1
 8000daa:	683a      	ldr	r2, [r7, #0]
 8000dac:	4413      	add	r3, r2
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	021b      	lsls	r3, r3, #8
 8000db2:	69fa      	ldr	r2, [r7, #28]
 8000db4:	4313      	orrs	r3, r2
 8000db6:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8000db8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000dba:	3302      	adds	r3, #2
 8000dbc:	683a      	ldr	r2, [r7, #0]
 8000dbe:	4413      	add	r3, r2
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	041b      	lsls	r3, r3, #16
 8000dc4:	69fa      	ldr	r2, [r7, #28]
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8000dca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000dcc:	3303      	adds	r3, #3
 8000dce:	683a      	ldr	r2, [r7, #0]
 8000dd0:	4413      	add	r3, r2
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	061b      	lsls	r3, r3, #24
 8000dd6:	69fa      	ldr	r2, [r7, #28]
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8000ddc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000dde:	3304      	adds	r3, #4
 8000de0:	637b      	str	r3, [r7, #52]	@ 0x34
      if(floats_lengthT > floats_length)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	691b      	ldr	r3, [r3, #16]
 8000de6:	69fa      	ldr	r2, [r7, #28]
 8000de8:	429a      	cmp	r2, r3
 8000dea:	d90a      	bls.n	8000e02 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	699a      	ldr	r2, [r3, #24]
 8000df0:	69fb      	ldr	r3, [r7, #28]
 8000df2:	009b      	lsls	r3, r3, #2
 8000df4:	4619      	mov	r1, r3
 8000df6:	4610      	mov	r0, r2
 8000df8:	f003 fd5e 	bl	80048b8 <realloc>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	69fa      	ldr	r2, [r7, #28]
 8000e06:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8000e08:	2300      	movs	r3, #0
 8000e0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000e0c:	e035      	b.n	8000e7a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1d4>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000e12:	693b      	ldr	r3, [r7, #16]
 8000e14:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000e16:	6839      	ldr	r1, [r7, #0]
 8000e18:	440a      	add	r2, r1
 8000e1a:	7812      	ldrb	r2, [r2, #0]
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000e20:	693a      	ldr	r2, [r7, #16]
 8000e22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e24:	3301      	adds	r3, #1
 8000e26:	6839      	ldr	r1, [r7, #0]
 8000e28:	440b      	add	r3, r1
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	021b      	lsls	r3, r3, #8
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000e32:	693a      	ldr	r2, [r7, #16]
 8000e34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e36:	3302      	adds	r3, #2
 8000e38:	6839      	ldr	r1, [r7, #0]
 8000e3a:	440b      	add	r3, r1
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	041b      	lsls	r3, r3, #16
 8000e40:	4313      	orrs	r3, r2
 8000e42:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000e44:	693a      	ldr	r2, [r7, #16]
 8000e46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e48:	3303      	adds	r3, #3
 8000e4a:	6839      	ldr	r1, [r7, #0]
 8000e4c:	440b      	add	r3, r1
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	061b      	lsls	r3, r3, #24
 8000e52:	4313      	orrs	r3, r2
 8000e54:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8000e5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e5e:	3304      	adds	r3, #4
 8000e60:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	699a      	ldr	r2, [r3, #24]
 8000e66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e68:	009b      	lsls	r3, r3, #2
 8000e6a:	4413      	add	r3, r2
 8000e6c:	687a      	ldr	r2, [r7, #4]
 8000e6e:	3214      	adds	r2, #20
 8000e70:	6812      	ldr	r2, [r2, #0]
 8000e72:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8000e74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e76:	3301      	adds	r3, #1
 8000e78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	691b      	ldr	r3, [r3, #16]
 8000e7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000e80:	429a      	cmp	r2, r3
 8000e82:	d3c4      	bcc.n	8000e0e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x168>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8000e84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e86:	683a      	ldr	r2, [r7, #0]
 8000e88:	4413      	add	r3, r2
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8000e8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e90:	3301      	adds	r3, #1
 8000e92:	683a      	ldr	r2, [r7, #0]
 8000e94:	4413      	add	r3, r2
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	021b      	lsls	r3, r3, #8
 8000e9a:	69ba      	ldr	r2, [r7, #24]
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8000ea0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ea2:	3302      	adds	r3, #2
 8000ea4:	683a      	ldr	r2, [r7, #0]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	041b      	lsls	r3, r3, #16
 8000eac:	69ba      	ldr	r2, [r7, #24]
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8000eb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000eb4:	3303      	adds	r3, #3
 8000eb6:	683a      	ldr	r2, [r7, #0]
 8000eb8:	4413      	add	r3, r2
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	061b      	lsls	r3, r3, #24
 8000ebe:	69ba      	ldr	r2, [r7, #24]
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8000ec4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ec6:	3304      	adds	r3, #4
 8000ec8:	637b      	str	r3, [r7, #52]	@ 0x34
      if(strings_lengthT > strings_length)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	69db      	ldr	r3, [r3, #28]
 8000ece:	69ba      	ldr	r2, [r7, #24]
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	d90a      	bls.n	8000eea <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000ed8:	69bb      	ldr	r3, [r7, #24]
 8000eda:	009b      	lsls	r3, r3, #2
 8000edc:	4619      	mov	r1, r3
 8000ede:	4610      	mov	r0, r2
 8000ee0:	f003 fcea 	bl	80048b8 <realloc>
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	625a      	str	r2, [r3, #36]	@ 0x24
      strings_length = strings_lengthT;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000ef4:	e03e      	b.n	8000f74 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2ce>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8000ef6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ef8:	683a      	ldr	r2, [r7, #0]
 8000efa:	441a      	add	r2, r3
 8000efc:	f107 030c 	add.w	r3, r7, #12
 8000f00:	4611      	mov	r1, r2
 8000f02:	4618      	mov	r0, r3
 8000f04:	f000 fbc4 	bl	8001690 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000f08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f0a:	3304      	adds	r3, #4
 8000f0c:	637b      	str	r3, [r7, #52]	@ 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8000f0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f10:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f12:	e00b      	b.n	8000f2c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x286>
          inbuffer[k-1]=inbuffer[k];
 8000f14:	683a      	ldr	r2, [r7, #0]
 8000f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f18:	441a      	add	r2, r3
 8000f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	6839      	ldr	r1, [r7, #0]
 8000f20:	440b      	add	r3, r1
 8000f22:	7812      	ldrb	r2, [r2, #0]
 8000f24:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8000f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f28:	3301      	adds	r3, #1
 8000f2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f2c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	4413      	add	r3, r2
 8000f32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f34:	429a      	cmp	r2, r3
 8000f36:	d3ed      	bcc.n	8000f14 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26e>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8000f38:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	4413      	add	r3, r2
 8000f3e:	3b01      	subs	r3, #1
 8000f40:	683a      	ldr	r2, [r7, #0]
 8000f42:	4413      	add	r3, r2
 8000f44:	2200      	movs	r2, #0
 8000f46:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8000f48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f4a:	3b01      	subs	r3, #1
 8000f4c:	683a      	ldr	r2, [r7, #0]
 8000f4e:	441a      	add	r2, r3
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8000f54:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	4413      	add	r3, r2
 8000f5a:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000f60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	4413      	add	r3, r2
 8000f66:	687a      	ldr	r2, [r7, #4]
 8000f68:	3220      	adds	r2, #32
 8000f6a:	6812      	ldr	r2, [r2, #0]
 8000f6c:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8000f6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f70:	3301      	adds	r3, #1
 8000f72:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	69db      	ldr	r3, [r3, #28]
 8000f78:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000f7a:	429a      	cmp	r2, r3
 8000f7c:	d3bb      	bcc.n	8000ef6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x250>
      }
     return offset;
 8000f7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 8000f80:	4618      	mov	r0, r3
 8000f82:	3738      	adds	r7, #56	@ 0x38
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	4b02      	ldr	r3, [pc, #8]	@ (8000f9c <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x14>)
 8000f92:	4618      	mov	r0, r3
 8000f94:	370c      	adds	r7, #12
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bc80      	pop	{r7}
 8000f9a:	4770      	bx	lr
 8000f9c:	08004d30 	.word	0x08004d30

08000fa0 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	4b02      	ldr	r3, [pc, #8]	@ (8000fb4 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x14>)
 8000faa:	4618      	mov	r0, r3
 8000fac:	370c      	adds	r7, #12
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bc80      	pop	{r7}
 8000fb2:	4770      	bx	lr
 8000fb4:	08004c8c 	.word	0x08004c8c

08000fb8 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8000fb8:	b480      	push	{r7}
 8000fba:	b085      	sub	sp, #20
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	60f8      	str	r0, [r7, #12]
 8000fc0:	60b9      	str	r1, [r7, #8]
 8000fc2:	607a      	str	r2, [r7, #4]
 8000fc4:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	68ba      	ldr	r2, [r7, #8]
 8000fca:	601a      	str	r2, [r3, #0]
    msg_(msg),
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	687a      	ldr	r2, [r7, #4]
 8000fd0:	605a      	str	r2, [r3, #4]
    endpoint_(endpoint) {};
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	683a      	ldr	r2, [r7, #0]
 8000fd6:	611a      	str	r2, [r3, #16]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3714      	adds	r7, #20
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bc80      	pop	{r7}
 8000fe2:	4770      	bx	lr

08000fe4 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	68d8      	ldr	r0, [r3, #12]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	68db      	ldr	r3, [r3, #12]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	687a      	ldr	r2, [r7, #4]
 8000ffc:	6891      	ldr	r1, [r2, #8]
 8000ffe:	683a      	ldr	r2, [r7, #0]
 8001000:	4798      	blx	r3
 8001002:	4603      	mov	r3, r0
  };
 8001004:	4618      	mov	r0, r3
 8001006:	3708      	adds	r7, #8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}

0800100c <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	691b      	ldr	r3, [r3, #16]
  }
 8001018:	4618      	mov	r0, r3
 800101a:	370c      	adds	r7, #12
 800101c:	46bd      	mov	sp, r7
 800101e:	bc80      	pop	{r7}
 8001020:	4770      	bx	lr

08001022 <_ZN10SerialCommC1ER20__UART_HandleTypeDef>:
    uint16_t tx_tail = 0;
    uint16_t rx_tail = 0;
    static constexpr uint16_t buf_mask = buffer_size - 1;

public:
    SerialComm(UART_HandleTypeDef &huart) : huart(huart)
 8001022:	b480      	push	{r7}
 8001024:	b083      	sub	sp, #12
 8001026:	af00      	add	r7, sp, #0
 8001028:	6078      	str	r0, [r7, #4]
 800102a:	6039      	str	r1, [r7, #0]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	683a      	ldr	r2, [r7, #0]
 8001030:	601a      	str	r2, [r3, #0]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001038:	2201      	movs	r2, #1
 800103a:	711a      	strb	r2, [r3, #4]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001042:	2200      	movs	r2, #0
 8001044:	80da      	strh	r2, [r3, #6]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800104c:	2200      	movs	r2, #0
 800104e:	811a      	strh	r2, [r3, #8]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001056:	2200      	movs	r2, #0
 8001058:	815a      	strh	r2, [r3, #10]
    {
        // Other initialization code
    }
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4618      	mov	r0, r3
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	bc80      	pop	{r7}
 8001064:	4770      	bx	lr

08001066 <_ZN10SerialComm4initEv>:

    void init(void)
 8001066:	b580      	push	{r7, lr}
 8001068:	b082      	sub	sp, #8
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]
    {
        reset_rbuf();
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	f000 f90e 	bl	8001290 <_ZN10SerialComm10reset_rbufEv>
    }
 8001074:	bf00      	nop
 8001076:	3708      	adds	r7, #8
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}

0800107c <_ZN10SerialComm4readEv>:

    /** @brief Read a character from the Rx buffer using the FIFO method.
     * 
     * @return The read character.
    */
    int read(void)
 800107c:	b480      	push	{r7}
 800107e:	b085      	sub	sp, #20
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
    {
       uint16_t rx_head = (buffer_size - huart.hdmarx->Instance->CNDTR) & buf_mask;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	b29b      	uxth	r3, r3
 8001090:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8001094:	b29b      	uxth	r3, r3
 8001096:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800109a:	81fb      	strh	r3, [r7, #14]

        // Check for overlapping (which is bad, data will be overwritten)
        if (rx_tail == rx_head)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80010a2:	895b      	ldrh	r3, [r3, #10]
 80010a4:	89fa      	ldrh	r2, [r7, #14]
 80010a6:	429a      	cmp	r2, r3
 80010a8:	d102      	bne.n	80010b0 <_ZN10SerialComm4readEv+0x34>
        {
            return -1;
 80010aa:	f04f 33ff 	mov.w	r3, #4294967295
 80010ae:	e01d      	b.n	80010ec <_ZN10SerialComm4readEv+0x70>
        }

        // Read a value and increment the read pointer (TAIL).
        int c = (int) rx_buf[rx_tail++];
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80010b6:	895b      	ldrh	r3, [r3, #10]
 80010b8:	1c5a      	adds	r2, r3, #1
 80010ba:	b291      	uxth	r1, r2
 80010bc:	687a      	ldr	r2, [r7, #4]
 80010be:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 80010c2:	8151      	strh	r1, [r2, #10]
 80010c4:	461a      	mov	r2, r3
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4413      	add	r3, r2
 80010ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80010ce:	3304      	adds	r3, #4
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	60bb      	str	r3, [r7, #8]
        rx_tail &= buf_mask;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80010da:	895b      	ldrh	r3, [r3, #10]
 80010dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010e0:	b29a      	uxth	r2, r3
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80010e8:	815a      	strh	r2, [r3, #10]

        return c;
 80010ea:	68bb      	ldr	r3, [r7, #8]
    }
 80010ec:	4618      	mov	r0, r3
 80010ee:	3714      	adds	r7, #20
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bc80      	pop	{r7}
 80010f4:	4770      	bx	lr

080010f6 <_ZN10SerialComm5writeEPKhi>:
     * @param data The pointer to the data string.
     * @param length The length of the data string.
     * 
     * @return Void. 
    */
    void write(const uint8_t* const data, const int length)
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b086      	sub	sp, #24
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	60f8      	str	r0, [r7, #12]
 80010fe:	60b9      	str	r1, [r7, #8]
 8001100:	607a      	str	r2, [r7, #4]
    {
        // Faulty data guard.
        if (length > buffer_size || length < 1)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001108:	dc46      	bgt.n	8001198 <_ZN10SerialComm5writeEPKhi+0xa2>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2b00      	cmp	r3, #0
 800110e:	dd43      	ble.n	8001198 <_ZN10SerialComm5writeEPKhi+0xa2>
        {
            return;
        }

        // Wait for the completion of the previous Tx transfer.
        while (!is_tx_cplt);
 8001110:	bf00      	nop
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001118:	791b      	ldrb	r3, [r3, #4]
 800111a:	f083 0301 	eor.w	r3, r3, #1
 800111e:	b2db      	uxtb	r3, r3
 8001120:	2b00      	cmp	r3, #0
 8001122:	d1f6      	bne.n	8001112 <_ZN10SerialComm5writeEPKhi+0x1c>

        // Check if the data is bigger than the remaining storage
        int w_len = (length <= (buffer_size - tx_head)) ? length : (buffer_size - tx_head);
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800112a:	88db      	ldrh	r3, [r3, #6]
 800112c:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8001130:	687a      	ldr	r2, [r7, #4]
 8001132:	4293      	cmp	r3, r2
 8001134:	bfa8      	it	ge
 8001136:	4613      	movge	r3, r2
 8001138:	617b      	str	r3, [r7, #20]

        // Write the data and increment the write pointer (TX_HEAD)
        memcpy(&tx_buf[tx_head], data, w_len);
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001140:	88db      	ldrh	r3, [r3, #6]
 8001142:	461a      	mov	r2, r3
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	4413      	add	r3, r2
 8001148:	3304      	adds	r3, #4
 800114a:	697a      	ldr	r2, [r7, #20]
 800114c:	68b9      	ldr	r1, [r7, #8]
 800114e:	4618      	mov	r0, r3
 8001150:	f003 fc1c 	bl	800498c <memcpy>
        tx_head = (tx_head + length) & buf_mask;
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800115a:	88da      	ldrh	r2, [r3, #6]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	b29b      	uxth	r3, r3
 8001160:	4413      	add	r3, r2
 8001162:	b29b      	uxth	r3, r3
 8001164:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001168:	b29a      	uxth	r2, r3
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001170:	80da      	strh	r2, [r3, #6]

        // Reset the TX_HEAD pointer and write the remaining data
        // (If data is bigger than the previous remaining data)
        if (length != w_len)
 8001172:	687a      	ldr	r2, [r7, #4]
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	429a      	cmp	r2, r3
 8001178:	d00a      	beq.n	8001190 <_ZN10SerialComm5writeEPKhi+0x9a>
        {
            memcpy(tx_buf, &data[w_len], length - w_len);
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	1d18      	adds	r0, r3, #4
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	68ba      	ldr	r2, [r7, #8]
 8001182:	18d1      	adds	r1, r2, r3
 8001184:	687a      	ldr	r2, [r7, #4]
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	461a      	mov	r2, r3
 800118c:	f003 fbfe 	bl	800498c <memcpy>
        }

        // TODO: Start transfering
        flush();
 8001190:	68f8      	ldr	r0, [r7, #12]
 8001192:	f000 f805 	bl	80011a0 <_ZN10SerialComm5flushEv>
 8001196:	e000      	b.n	800119a <_ZN10SerialComm5writeEPKhi+0xa4>
            return;
 8001198:	bf00      	nop
    }
 800119a:	3718      	adds	r7, #24
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <_ZN10SerialComm5flushEv>:

    /** @brief Transmit the just written data in the Tx buffer
     * 
     * @return void.
    */
    void flush()
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
    {
        if (is_tx_cplt)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80011ae:	791b      	ldrb	r3, [r3, #4]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d05b      	beq.n	800126c <_ZN10SerialComm5flushEv+0xcc>
        {
            // if HEAD == TAIL => The buffer is empty => Nothing to send.
            if (tx_head != tx_tail)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80011ba:	88da      	ldrh	r2, [r3, #6]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80011c2:	891b      	ldrh	r3, [r3, #8]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	d04c      	beq.n	8001262 <_ZN10SerialComm5flushEv+0xc2>
            {
                uint16_t len = 0;
 80011c8:	2300      	movs	r3, #0
 80011ca:	81fb      	strh	r3, [r7, #14]

                if (tx_tail < tx_head)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80011d2:	891a      	ldrh	r2, [r3, #8]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80011da:	88db      	ldrh	r3, [r3, #6]
 80011dc:	429a      	cmp	r2, r3
 80011de:	d218      	bcs.n	8001212 <_ZN10SerialComm5flushEv+0x72>
                {
                    len = tx_head - tx_tail;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80011e6:	88da      	ldrh	r2, [r3, #6]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80011ee:	891b      	ldrh	r3, [r3, #8]
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	81fb      	strh	r3, [r7, #14]
                    HAL_UART_Transmit_DMA(&huart, &tx_buf[tx_tail], len);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6818      	ldr	r0, [r3, #0]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80011fe:	891b      	ldrh	r3, [r3, #8]
 8001200:	461a      	mov	r2, r3
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4413      	add	r3, r2
 8001206:	3304      	adds	r3, #4
 8001208:	89fa      	ldrh	r2, [r7, #14]
 800120a:	4619      	mov	r1, r3
 800120c:	f002 fbc2 	bl	8003994 <HAL_UART_Transmit_DMA>
 8001210:	e01f      	b.n	8001252 <_ZN10SerialComm5flushEv+0xb2>
                }
                else
                {
                    len = buffer_size - tx_tail;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001218:	891b      	ldrh	r3, [r3, #8]
 800121a:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 800121e:	81fb      	strh	r3, [r7, #14]
                    HAL_UART_Transmit_DMA(&huart, &tx_buf[tx_tail], len);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6818      	ldr	r0, [r3, #0]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800122a:	891b      	ldrh	r3, [r3, #8]
 800122c:	461a      	mov	r2, r3
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4413      	add	r3, r2
 8001232:	3304      	adds	r3, #4
 8001234:	89fa      	ldrh	r2, [r7, #14]
 8001236:	4619      	mov	r1, r3
 8001238:	f002 fbac 	bl	8003994 <HAL_UART_Transmit_DMA>
                    HAL_UART_Transmit_DMA(&huart, tx_buf, tx_head);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6818      	ldr	r0, [r3, #0]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	1d19      	adds	r1, r3, #4
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800124a:	88db      	ldrh	r3, [r3, #6]
 800124c:	461a      	mov	r2, r3
 800124e:	f002 fba1 	bl	8003994 <HAL_UART_Transmit_DMA>
                }
                
                tx_tail = tx_head;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001258:	88da      	ldrh	r2, [r3, #6]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001260:	811a      	strh	r2, [r3, #8]
            }
            
            is_tx_cplt = false;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001268:	2200      	movs	r2, #0
 800126a:	711a      	strb	r2, [r3, #4]
        }
    }
 800126c:	bf00      	nop
 800126e:	3710      	adds	r7, #16
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}

08001274 <_ZN10SerialComm11set_tx_cpltEv>:

    void set_tx_cplt(void)
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
    {
        is_tx_cplt = true;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001282:	2201      	movs	r2, #1
 8001284:	711a      	strb	r2, [r3, #4]
    }
 8001286:	bf00      	nop
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	bc80      	pop	{r7}
 800128e:	4770      	bx	lr

08001290 <_ZN10SerialComm10reset_rbufEv>:

    void reset_rbuf(void)
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
    {
        HAL_UART_Receive_DMA(&huart, (uint8_t *)rx_buf, buffer_size);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6818      	ldr	r0, [r3, #0]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80012a2:	3304      	adds	r3, #4
 80012a4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80012a8:	4619      	mov	r1, r3
 80012aa:	f002 fbe3 	bl	8003a74 <HAL_UART_Receive_DMA>
    }
 80012ae:	bf00      	nop
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
	...

080012b8 <_ZN13STM32HardwareC1Ev>:
class STM32Hardware {
  protected:
    SerialComm &comm;

  public:
    STM32Hardware() : comm(comm_rosserial)
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	4a04      	ldr	r2, [pc, #16]	@ (80012d4 <_ZN13STM32HardwareC1Ev+0x1c>)
 80012c4:	601a      	str	r2, [r3, #0]
    {
        // TODO:
    }
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4618      	mov	r0, r3
 80012ca:	370c      	adds	r7, #12
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bc80      	pop	{r7}
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	20000148 	.word	0x20000148

080012d8 <_ZN13STM32Hardware4initEv>:
    STM32Hardware(SerialComm &comm) : comm(comm)
    {
        // TODO: 
    }
  
    void init()
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
    {
        comm.init();
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff febe 	bl	8001066 <_ZN10SerialComm4initEv>
    }
 80012ea:	bf00      	nop
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <_ZN13STM32Hardware4readEv>:

    int read()  
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b082      	sub	sp, #8
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
    {
        return comm.read();
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff febc 	bl	800107c <_ZN10SerialComm4readEv>
 8001304:	4603      	mov	r3, r0
    }
 8001306:	4618      	mov	r0, r3
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length)
 800130e:	b580      	push	{r7, lr}
 8001310:	b084      	sub	sp, #16
 8001312:	af00      	add	r7, sp, #0
 8001314:	60f8      	str	r0, [r7, #12]
 8001316:	60b9      	str	r1, [r7, #8]
 8001318:	607a      	str	r2, [r7, #4]
    {
        comm.write(data, length);
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	68b9      	ldr	r1, [r7, #8]
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff fee7 	bl	80010f6 <_ZN10SerialComm5writeEPKhi>
    }
 8001328:	bf00      	nop
 800132a:	3710      	adds	r7, #16
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}

08001330 <_ZN13STM32Hardware4timeEv>:

    unsigned long time()
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
    { 
        return HAL_GetTick(); 
 8001338:	f001 f938 	bl	80025ac <HAL_GetTick>
 800133c:	4603      	mov	r3, r0
    }
 800133e:	4618      	mov	r0, r3
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
	...

08001348 <_ZN8std_msgs6StringC1Ev>:
  {
    public:
      typedef const char* _data_type;
      _data_type data;

    String():
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
      data("")
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	4618      	mov	r0, r3
 8001354:	f7ff f802 	bl	800035c <_ZN3ros3MsgC1Ev>
 8001358:	4a05      	ldr	r2, [pc, #20]	@ (8001370 <_ZN8std_msgs6StringC1Ev+0x28>)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a04      	ldr	r2, [pc, #16]	@ (8001374 <_ZN8std_msgs6StringC1Ev+0x2c>)
 8001362:	605a      	str	r2, [r3, #4]
    {
    }
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	4618      	mov	r0, r3
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	08004d68 	.word	0x08004d68
 8001374:	08004c10 	.word	0x08004c10

08001378 <_ZNK8std_msgs6String9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001382:	2300      	movs	r3, #0
 8001384:	60fb      	str	r3, [r7, #12]
      uint32_t length_data = strlen(this->data);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	4618      	mov	r0, r3
 800138c:	f7fe fede 	bl	800014c <strlen>
 8001390:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_data);
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	683a      	ldr	r2, [r7, #0]
 8001396:	4413      	add	r3, r2
 8001398:	68b9      	ldr	r1, [r7, #8]
 800139a:	4618      	mov	r0, r3
 800139c:	f000 f95a 	bl	8001654 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	3304      	adds	r3, #4
 80013a4:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->data, length_data);
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	683a      	ldr	r2, [r7, #0]
 80013aa:	18d0      	adds	r0, r2, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	68ba      	ldr	r2, [r7, #8]
 80013b2:	4619      	mov	r1, r3
 80013b4:	f003 faea 	bl	800498c <memcpy>
      offset += length_data;
 80013b8:	68fa      	ldr	r2, [r7, #12]
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	4413      	add	r3, r2
 80013be:	60fb      	str	r3, [r7, #12]
      return offset;
 80013c0:	68fb      	ldr	r3, [r7, #12]
    }
 80013c2:	4618      	mov	r0, r3
 80013c4:	3710      	adds	r7, #16
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}

080013ca <_ZN8std_msgs6String11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80013ca:	b580      	push	{r7, lr}
 80013cc:	b086      	sub	sp, #24
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	6078      	str	r0, [r7, #4]
 80013d2:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80013d4:	2300      	movs	r3, #0
 80013d6:	613b      	str	r3, [r7, #16]
      uint32_t length_data;
      arrToVar(length_data, (inbuffer + offset));
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	683a      	ldr	r2, [r7, #0]
 80013dc:	441a      	add	r2, r3
 80013de:	f107 030c 	add.w	r3, r7, #12
 80013e2:	4611      	mov	r1, r2
 80013e4:	4618      	mov	r0, r3
 80013e6:	f000 f953 	bl	8001690 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	3304      	adds	r3, #4
 80013ee:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	617b      	str	r3, [r7, #20]
 80013f4:	e00b      	b.n	800140e <_ZN8std_msgs6String11deserializeEPh+0x44>
          inbuffer[k-1]=inbuffer[k];
 80013f6:	683a      	ldr	r2, [r7, #0]
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	441a      	add	r2, r3
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	3b01      	subs	r3, #1
 8001400:	6839      	ldr	r1, [r7, #0]
 8001402:	440b      	add	r3, r1
 8001404:	7812      	ldrb	r2, [r2, #0]
 8001406:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	3301      	adds	r3, #1
 800140c:	617b      	str	r3, [r7, #20]
 800140e:	693a      	ldr	r2, [r7, #16]
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	4413      	add	r3, r2
 8001414:	697a      	ldr	r2, [r7, #20]
 8001416:	429a      	cmp	r2, r3
 8001418:	d3ed      	bcc.n	80013f6 <_ZN8std_msgs6String11deserializeEPh+0x2c>
      }
      inbuffer[offset+length_data-1]=0;
 800141a:	693a      	ldr	r2, [r7, #16]
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	4413      	add	r3, r2
 8001420:	3b01      	subs	r3, #1
 8001422:	683a      	ldr	r2, [r7, #0]
 8001424:	4413      	add	r3, r2
 8001426:	2200      	movs	r2, #0
 8001428:	701a      	strb	r2, [r3, #0]
      this->data = (char *)(inbuffer + offset-1);
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	3b01      	subs	r3, #1
 800142e:	683a      	ldr	r2, [r7, #0]
 8001430:	441a      	add	r2, r3
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	605a      	str	r2, [r3, #4]
      offset += length_data;
 8001436:	693a      	ldr	r2, [r7, #16]
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	4413      	add	r3, r2
 800143c:	613b      	str	r3, [r7, #16]
     return offset;
 800143e:	693b      	ldr	r3, [r7, #16]
    }
 8001440:	4618      	mov	r0, r3
 8001442:	3718      	adds	r7, #24
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}

08001448 <_ZN8std_msgs6String7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/String"; };
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	4b02      	ldr	r3, [pc, #8]	@ (800145c <_ZN8std_msgs6String7getTypeEv+0x14>)
 8001452:	4618      	mov	r0, r3
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	bc80      	pop	{r7}
 800145a:	4770      	bx	lr
 800145c:	08004cb0 	.word	0x08004cb0

08001460 <_ZN8std_msgs6String6getMD5Ev>:
    virtual const char * getMD5() override { return "992ce8a1687cec8c8bd883ec73ca41d1"; };
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	4b02      	ldr	r3, [pc, #8]	@ (8001474 <_ZN8std_msgs6String6getMD5Ev+0x14>)
 800146a:	4618      	mov	r0, r3
 800146c:	370c      	adds	r7, #12
 800146e:	46bd      	mov	sp, r7
 8001470:	bc80      	pop	{r7}
 8001472:	4770      	bx	lr
 8001474:	08004cc0 	.word	0x08004cc0

08001478 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	4a04      	ldr	r2, [pc, #16]	@ (8001494 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4618      	mov	r0, r3
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	bc80      	pop	{r7}
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	08004d80 	.word	0x08004d80

08001498 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7ff ffe8 	bl	8001478 <_ZN3ros15NodeHandleBase_C1Ev>
 80014a8:	4a43      	ldr	r2, [pc, #268]	@ (80015b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EEC1Ev+0x120>)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	3304      	adds	r3, #4
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff ff00 	bl	80012b8 <_ZN13STM32HardwareC1Ev>
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2200      	movs	r2, #0
 80014bc:	609a      	str	r2, [r3, #8]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2200      	movs	r2, #0
 80014c2:	60da      	str	r2, [r3, #12]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2200      	movs	r2, #0
 80014c8:	611a      	str	r2, [r3, #16]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2200      	movs	r2, #0
 80014ce:	615a      	str	r2, [r3, #20]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	3318      	adds	r3, #24
 80014d4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80014d8:	2100      	movs	r1, #0
 80014da:	4618      	mov	r0, r3
 80014dc:	f003 fa22 	bl	8004924 <memset>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80014e6:	3318      	adds	r3, #24
 80014e8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80014ec:	2100      	movs	r1, #0
 80014ee:	4618      	mov	r0, r3
 80014f0:	f003 fa18 	bl	8004924 <memset>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80014fa:	3318      	adds	r3, #24
 80014fc:	223c      	movs	r2, #60	@ 0x3c
 80014fe:	2100      	movs	r1, #0
 8001500:	4618      	mov	r0, r3
 8001502:	f003 fa0f 	bl	8004924 <memset>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800150c:	3354      	adds	r3, #84	@ 0x54
 800150e:	223c      	movs	r2, #60	@ 0x3c
 8001510:	2100      	movs	r1, #0
 8001512:	4618      	mov	r0, r3
 8001514:	f003 fa06 	bl	8004924 <memset>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800151e:	461a      	mov	r2, r3
 8001520:	2300      	movs	r3, #0
 8001522:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800152c:	461a      	mov	r2, r3
 800152e:	2300      	movs	r3, #0
 8001530:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800153a:	461a      	mov	r2, r3
 800153c:	2300      	movs	r3, #0
 800153e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001548:	461a      	mov	r2, r3
 800154a:	2300      	movs	r3, #0
 800154c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001556:	461a      	mov	r2, r3
 8001558:	2300      	movs	r3, #0
 800155a:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001564:	2200      	movs	r2, #0
 8001566:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001570:	461a      	mov	r2, r3
 8001572:	2300      	movs	r3, #0
 8001574:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800157e:	461a      	mov	r2, r3
 8001580:	2300      	movs	r3, #0
 8001582:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800158c:	461a      	mov	r2, r3
 800158e:	2300      	movs	r3, #0
 8001590:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800159a:	2200      	movs	r2, #0
 800159c:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	f503 5302 	add.w	r3, r3, #8320	@ 0x2080
 80015a6:	3338      	adds	r3, #56	@ 0x38
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7ff fa3d 	bl	8000a28 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4618      	mov	r0, r3
 80015b2:	3708      	adds	r7, #8
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	08004d54 	.word	0x08004d54

080015bc <HAL_UART_TxCpltCallback>:
ros::Publisher chatter("chatter", &str_msg);

char data[] = "Hello world!";

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
	//if (huart->Instance == comm_rosserial.get_handle()->Instance)
	//{
	comm_rosserial.set_tx_cplt();
 80015c4:	4805      	ldr	r0, [pc, #20]	@ (80015dc <HAL_UART_TxCpltCallback+0x20>)
 80015c6:	f7ff fe55 	bl	8001274 <_ZN10SerialComm11set_tx_cpltEv>
	//}
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80015ca:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80015ce:	4804      	ldr	r0, [pc, #16]	@ (80015e0 <HAL_UART_TxCpltCallback+0x24>)
 80015d0:	f001 fd66 	bl	80030a0 <HAL_GPIO_TogglePin>
}
 80015d4:	bf00      	nop
 80015d6:	3708      	adds	r7, #8
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	20000148 	.word	0x20000148
 80015e0:	40011000 	.word	0x40011000

080015e4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
	comm_rosserial.reset_rbuf();
 80015ec:	4803      	ldr	r0, [pc, #12]	@ (80015fc <HAL_UART_RxCpltCallback+0x18>)
 80015ee:	f7ff fe4f 	bl	8001290 <_ZN10SerialComm10reset_rbufEv>
	//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
}
 80015f2:	bf00      	nop
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	20000148 	.word	0x20000148

08001600 <setup>:

void setup()
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
	nh.initNode();
 8001604:	4804      	ldr	r0, [pc, #16]	@ (8001618 <setup+0x18>)
 8001606:	f000 f868 	bl	80016da <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8initNodeEv>
	nh.advertise(chatter);
 800160a:	4904      	ldr	r1, [pc, #16]	@ (800161c <setup+0x1c>)
 800160c:	4802      	ldr	r0, [pc, #8]	@ (8001618 <setup+0x18>)
 800160e:	f000 f88d 	bl	800172c <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE9advertiseERNS_9PublisherE>
}
 8001612:	bf00      	nop
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	20002154 	.word	0x20002154
 800161c:	2000423c 	.word	0x2000423c

08001620 <loop>:

void loop()
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
	str_msg.data = "hello";
 8001624:	4b07      	ldr	r3, [pc, #28]	@ (8001644 <loop+0x24>)
 8001626:	4a08      	ldr	r2, [pc, #32]	@ (8001648 <loop+0x28>)
 8001628:	605a      	str	r2, [r3, #4]
	chatter.publish(&str_msg);
 800162a:	4906      	ldr	r1, [pc, #24]	@ (8001644 <loop+0x24>)
 800162c:	4807      	ldr	r0, [pc, #28]	@ (800164c <loop+0x2c>)
 800162e:	f7ff fcd9 	bl	8000fe4 <_ZN3ros9Publisher7publishEPKNS_3MsgE>

	nh.spinOnce();
 8001632:	4807      	ldr	r0, [pc, #28]	@ (8001650 <loop+0x30>)
 8001634:	f000 f8a7 	bl	8001786 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv>

	HAL_Delay(1000);
 8001638:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800163c:	f000 ffc0 	bl	80025c0 <HAL_Delay>
}
 8001640:	bf00      	nop
 8001642:	bd80      	pop	{r7, pc}
 8001644:	20004234 	.word	0x20004234
 8001648:	08004ce4 	.word	0x08004ce4
 800164c:	2000423c 	.word	0x2000423c
 8001650:	20002154 	.word	0x20002154

08001654 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8001654:	b480      	push	{r7}
 8001656:	b085      	sub	sp, #20
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 800165e:	2300      	movs	r3, #0
 8001660:	60fb      	str	r3, [r7, #12]
 8001662:	e00c      	b.n	800167e <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x2a>
      arr[i] = (var >> (8 * i));
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	00db      	lsls	r3, r3, #3
 8001668:	683a      	ldr	r2, [r7, #0]
 800166a:	fa22 f103 	lsr.w	r1, r2, r3
 800166e:	687a      	ldr	r2, [r7, #4]
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	4413      	add	r3, r2
 8001674:	b2ca      	uxtb	r2, r1
 8001676:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	3301      	adds	r3, #1
 800167c:	60fb      	str	r3, [r7, #12]
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	2b03      	cmp	r3, #3
 8001682:	d9ef      	bls.n	8001664 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x10>
  }
 8001684:	bf00      	nop
 8001686:	bf00      	nop
 8001688:	3714      	adds	r7, #20
 800168a:	46bd      	mov	sp, r7
 800168c:	bc80      	pop	{r7}
 800168e:	4770      	bx	lr

08001690 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8001690:	b480      	push	{r7}
 8001692:	b085      	sub	sp, #20
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80016a0:	2300      	movs	r3, #0
 80016a2:	60fb      	str	r3, [r7, #12]
 80016a4:	e010      	b.n	80016c8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x38>
      var |= (arr[i] << (8 * i));
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	6839      	ldr	r1, [r7, #0]
 80016ac:	68fa      	ldr	r2, [r7, #12]
 80016ae:	440a      	add	r2, r1
 80016b0:	7812      	ldrb	r2, [r2, #0]
 80016b2:	4611      	mov	r1, r2
 80016b4:	68fa      	ldr	r2, [r7, #12]
 80016b6:	00d2      	lsls	r2, r2, #3
 80016b8:	fa01 f202 	lsl.w	r2, r1, r2
 80016bc:	431a      	orrs	r2, r3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	3301      	adds	r3, #1
 80016c6:	60fb      	str	r3, [r7, #12]
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	2b03      	cmp	r3, #3
 80016cc:	d9eb      	bls.n	80016a6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x16>
  }
 80016ce:	bf00      	nop
 80016d0:	bf00      	nop
 80016d2:	3714      	adds	r7, #20
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bc80      	pop	{r7}
 80016d8:	4770      	bx	lr

080016da <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8initNodeEv>:
  {
    return &hardware_;
  }

  /* Start serial, initialize buffers */
  void initNode()
 80016da:	b580      	push	{r7, lr}
 80016dc:	b082      	sub	sp, #8
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	3304      	adds	r3, #4
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7ff fdf6 	bl	80012d8 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80016f2:	461a      	mov	r2, r3
 80016f4:	2300      	movs	r3, #0
 80016f6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    bytes_ = 0;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001700:	461a      	mov	r2, r3
 8001702:	2300      	movs	r3, #0
 8001704:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    index_ = 0;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800170e:	461a      	mov	r2, r3
 8001710:	2300      	movs	r3, #0
 8001712:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
    topic_ = 0;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800171c:	461a      	mov	r2, r3
 800171e:	2300      	movs	r3, #0
 8001720:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
  };
 8001724:	bf00      	nop
 8001726:	3708      	adds	r7, #8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}

0800172c <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 800172c:	b480      	push	{r7}
 800172e:	b085      	sub	sp, #20
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8001736:	2300      	movs	r3, #0
 8001738:	60fb      	str	r3, [r7, #12]
 800173a:	e01b      	b.n	8001774 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE9advertiseERNS_9PublisherE+0x48>
    {
      if (publishers[i] == 0) // empty slot
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	68fa      	ldr	r2, [r7, #12]
 8001740:	f602 0206 	addw	r2, r2, #2054	@ 0x806
 8001744:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d110      	bne.n	800176e <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE9advertiseERNS_9PublisherE+0x42>
      {
        publishers[i] = &p;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	68fa      	ldr	r2, [r7, #12]
 8001750:	f602 0206 	addw	r2, r2, #2054	@ 0x806
 8001754:	6839      	ldr	r1, [r7, #0]
 8001756:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	f103 0273 	add.w	r2, r3, #115	@ 0x73
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8001764:	687a      	ldr	r2, [r7, #4]
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	60da      	str	r2, [r3, #12]
        return true;
 800176a:	2301      	movs	r3, #1
 800176c:	e006      	b.n	800177c <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE9advertiseERNS_9PublisherE+0x50>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	3301      	adds	r3, #1
 8001772:	60fb      	str	r3, [r7, #12]
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	2b0e      	cmp	r3, #14
 8001778:	dde0      	ble.n	800173c <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE9advertiseERNS_9PublisherE+0x10>
      }
    }
    return false;
 800177a:	2300      	movs	r3, #0
  }
 800177c:	4618      	mov	r0, r3
 800177e:	3714      	adds	r7, #20
 8001780:	46bd      	mov	sp, r7
 8001782:	bc80      	pop	{r7}
 8001784:	4770      	bx	lr

08001786 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv>:
  virtual int spinOnce() override
 8001786:	b580      	push	{r7, lr}
 8001788:	b084      	sub	sp, #16
 800178a:	af00      	add	r7, sp, #0
 800178c:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	3304      	adds	r3, #4
 8001792:	4618      	mov	r0, r3
 8001794:	f7ff fdcc 	bl	8001330 <_ZN13STM32Hardware4timeEv>
 8001798:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80017a0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80017a4:	68fa      	ldr	r2, [r7, #12]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d905      	bls.n	80017bc <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x36>
      configured_ = false;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80017b6:	2200      	movs	r2, #0
 80017b8:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
    if (mode_ != MODE_FIRST_FF)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80017c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d00e      	beq.n	80017e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x62>
      if (c_time > last_msg_timeout_time)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80017d0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80017d4:	68fa      	ldr	r2, [r7, #12]
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d906      	bls.n	80017e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80017e0:	461a      	mov	r2, r3
 80017e2:	2300      	movs	r3, #0
 80017e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      if (spin_timeout_ > 0)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	695b      	ldr	r3, [r3, #20]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d013      	beq.n	8001818 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x92>
        if ((hardware_.time() - c_time) > spin_timeout_)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	3304      	adds	r3, #4
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7ff fd9b 	bl	8001330 <_ZN13STM32Hardware4timeEv>
 80017fa:	4602      	mov	r2, r0
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	1ad2      	subs	r2, r2, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	695b      	ldr	r3, [r3, #20]
 8001804:	429a      	cmp	r2, r3
 8001806:	bf8c      	ite	hi
 8001808:	2301      	movhi	r3, #1
 800180a:	2300      	movls	r3, #0
 800180c:	b2db      	uxtb	r3, r3
 800180e:	2b00      	cmp	r3, #0
 8001810:	d002      	beq.n	8001818 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x92>
          return SPIN_TIMEOUT;
 8001812:	f06f 0301 	mvn.w	r3, #1
 8001816:	e21d      	b.n	8001c54 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x4ce>
      int data = hardware_.read();
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	3304      	adds	r3, #4
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff fd68 	bl	80012f2 <_ZN13STM32Hardware4readEv>
 8001822:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	2b00      	cmp	r3, #0
 8001828:	f2c0 81f6 	blt.w	8001c18 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x492>
      checksum_ += data;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001832:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	4413      	add	r3, r2
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8001840:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800184a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800184e:	2b07      	cmp	r3, #7
 8001850:	d12a      	bne.n	80018a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x122>
        message_in[index_++] = data;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001858:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800185c:	1c5a      	adds	r2, r3, #1
 800185e:	6879      	ldr	r1, [r7, #4]
 8001860:	f501 5100 	add.w	r1, r1, #8192	@ 0x2000
 8001864:	f8c1 209c 	str.w	r2, [r1, #156]	@ 0x9c
 8001868:	68ba      	ldr	r2, [r7, #8]
 800186a:	b2d1      	uxtb	r1, r2
 800186c:	687a      	ldr	r2, [r7, #4]
 800186e:	4413      	add	r3, r2
 8001870:	460a      	mov	r2, r1
 8001872:	761a      	strb	r2, [r3, #24]
        bytes_--;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800187a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800187e:	3b01      	subs	r3, #1
 8001880:	687a      	ldr	r2, [r7, #4]
 8001882:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8001886:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001890:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001894:	2b00      	cmp	r3, #0
 8001896:	d1a7      	bne.n	80017e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800189e:	461a      	mov	r2, r3
 80018a0:	2308      	movs	r3, #8
 80018a2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80018a6:	e79f      	b.n	80017e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x62>
      else if (mode_ == MODE_FIRST_FF)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80018ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d130      	bne.n	8001918 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x192>
        if (data == 0xff)
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	2bff      	cmp	r3, #255	@ 0xff
 80018ba:	d112      	bne.n	80018e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x15c>
          mode_++;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80018c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018c6:	3301      	adds	r3, #1
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 80018ce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	3314      	adds	r3, #20
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 80018dc:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0
 80018e0:	e782      	b.n	80017e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x62>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	3304      	adds	r3, #4
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7ff fd22 	bl	8001330 <_ZN13STM32Hardware4timeEv>
 80018ec:	4602      	mov	r2, r0
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018f6:	4293      	cmp	r3, r2
 80018f8:	bf8c      	ite	hi
 80018fa:	2301      	movhi	r3, #1
 80018fc:	2300      	movls	r3, #0
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	2b00      	cmp	r3, #0
 8001902:	f43f af71 	beq.w	80017e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x62>
          configured_ = false;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800190c:	2200      	movs	r2, #0
 800190e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
          return SPIN_TIMEOUT;
 8001912:	f06f 0301 	mvn.w	r3, #1
 8001916:	e19d      	b.n	8001c54 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x4ce>
      else if (mode_ == MODE_PROTOCOL_VER)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800191e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001922:	2b01      	cmp	r3, #1
 8001924:	d121      	bne.n	800196a <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x1e4>
        if (data == PROTOCOL_VER)
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	2bfe      	cmp	r3, #254	@ 0xfe
 800192a:	d10b      	bne.n	8001944 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x1be>
          mode_++;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001932:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001936:	3301      	adds	r3, #1
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800193e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001942:	e751      	b.n	80017e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800194a:	461a      	mov	r2, r3
 800194c:	2300      	movs	r3, #0
 800194e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
          if (configured_ == false)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001958:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800195c:	2b00      	cmp	r3, #0
 800195e:	f47f af43 	bne.w	80017e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x62>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f000 f97a 	bl	8001c5c <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE15requestSyncTimeEv>
 8001968:	e73e      	b.n	80017e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001970:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001974:	2b02      	cmp	r3, #2
 8001976:	d120      	bne.n	80019ba <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x234>
        bytes_ = data;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800197e:	461a      	mov	r2, r3
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        index_ = 0;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800198c:	461a      	mov	r2, r3
 800198e:	2300      	movs	r3, #0
 8001990:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
        mode_++;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800199a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800199e:	3301      	adds	r3, #1
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 80019a6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        checksum_ = data;               /* first byte for calculating size checksum */
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80019b0:	461a      	mov	r2, r3
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
 80019b8:	e716      	b.n	80017e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80019c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019c4:	2b03      	cmp	r3, #3
 80019c6:	d118      	bne.n	80019fa <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x274>
        bytes_ += data << 8;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80019ce:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	021b      	lsls	r3, r3, #8
 80019d6:	4413      	add	r3, r2
 80019d8:	687a      	ldr	r2, [r7, #4]
 80019da:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 80019de:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        mode_++;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80019e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019ec:	3301      	adds	r3, #1
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 80019f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80019f8:	e6f6      	b.n	80017e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001a00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a04:	2b04      	cmp	r3, #4
 8001a06:	d11f      	bne.n	8001a48 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x2c2>
        if ((checksum_ % 256) == 255)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001a0e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8001a12:	425a      	negs	r2, r3
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	b2d2      	uxtb	r2, r2
 8001a18:	bf58      	it	pl
 8001a1a:	4253      	negpl	r3, r2
 8001a1c:	2bff      	cmp	r3, #255	@ 0xff
 8001a1e:	d10b      	bne.n	8001a38 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x2b2>
          mode_++;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8001a32:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a36:	e6d7      	b.n	80017e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001a3e:	461a      	mov	r2, r3
 8001a40:	2300      	movs	r3, #0
 8001a42:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a46:	e6cf      	b.n	80017e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a52:	2b05      	cmp	r3, #5
 8001a54:	d119      	bne.n	8001a8a <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x304>
        topic_ = data;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
        mode_++;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a6e:	3301      	adds	r3, #1
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8001a76:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        checksum_ = data;               /* first byte included in checksum */
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001a80:	461a      	mov	r2, r3
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
 8001a88:	e6ae      	b.n	80017e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001a90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a94:	2b06      	cmp	r3, #6
 8001a96:	d123      	bne.n	8001ae0 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x35a>
        topic_ += data << 8;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001a9e:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	021b      	lsls	r3, r3, #8
 8001aa6:	4413      	add	r3, r2
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8001aae:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
        mode_ = MODE_MESSAGE;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001ab8:	461a      	mov	r2, r3
 8001aba:	2307      	movs	r3, #7
 8001abc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        if (bytes_ == 0)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001ac6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	f47f ae8c 	bne.w	80017e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	2308      	movs	r3, #8
 8001ada:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ade:	e683      	b.n	80017e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x62>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001aea:	2b08      	cmp	r3, #8
 8001aec:	f47f ae7c 	bne.w	80017e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001af6:	461a      	mov	r2, r3
 8001af8:	2300      	movs	r3, #0
 8001afa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        if ((checksum_ % 256) == 255)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001b04:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8001b08:	425a      	negs	r2, r3
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	b2d2      	uxtb	r2, r2
 8001b0e:	bf58      	it	pl
 8001b10:	4253      	negpl	r3, r2
 8001b12:	2bff      	cmp	r3, #255	@ 0xff
 8001b14:	f47f ae68 	bne.w	80017e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x62>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001b1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d116      	bne.n	8001b54 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x3ce>
            requestSyncTime();
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f000 f898 	bl	8001c5c <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE15requestSyncTimeEv>
            negotiateTopics();
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f000 f8b2 	bl	8001c96 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001b38:	461a      	mov	r2, r3
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
            last_sync_receive_time = c_time;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001b46:	461a      	mov	r2, r3
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac
            return SPIN_ERR;
 8001b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b52:	e07f      	b.n	8001c54 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x4ce>
          else if (topic_ == TopicInfo::ID_TIME)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001b5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001b5e:	2b0a      	cmp	r3, #10
 8001b60:	d106      	bne.n	8001b70 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x3ea>
            syncTime(message_in);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	3318      	adds	r3, #24
 8001b66:	4619      	mov	r1, r3
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f000 f977 	bl	8001e5c <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8syncTimeEPh>
 8001b6e:	e63b      	b.n	80017e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001b76:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001b7a:	2b06      	cmp	r3, #6
 8001b7c:	d110      	bne.n	8001ba0 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x41a>
            req_param_resp.deserialize(message_in);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	f503 5302 	add.w	r3, r3, #8320	@ 0x2080
 8001b84:	3338      	adds	r3, #56	@ 0x38
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	3218      	adds	r2, #24
 8001b8a:	4611      	mov	r1, r2
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7ff f88a 	bl	8000ca6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001b98:	2201      	movs	r2, #1
 8001b9a:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4
 8001b9e:	e623      	b.n	80017e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001ba6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001baa:	2b0b      	cmp	r3, #11
 8001bac:	d106      	bne.n	8001bbc <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x436>
            configured_ = false;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
 8001bba:	e615      	b.n	80017e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x62>
            if (subscribers[topic_ - 100])
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001bc2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001bc6:	3b64      	subs	r3, #100	@ 0x64
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	f603 0314 	addw	r3, r3, #2068	@ 0x814
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	4413      	add	r3, r2
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	f43f ae07 	beq.w	80017e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x62>
              subscribers[topic_ - 100]->callback(message_in);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001be0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001be4:	3b64      	subs	r3, #100	@ 0x64
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	f603 0314 	addw	r3, r3, #2068	@ 0x814
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	4413      	add	r3, r2
 8001bf0:	6858      	ldr	r0, [r3, #4]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001bf8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001bfc:	3b64      	subs	r3, #100	@ 0x64
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	f603 0314 	addw	r3, r3, #2068	@ 0x814
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	4413      	add	r3, r2
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	3218      	adds	r2, #24
 8001c12:	4611      	mov	r1, r2
 8001c14:	4798      	blx	r3
    while (true)
 8001c16:	e5e7      	b.n	80017e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x62>
        break;
 8001c18:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001c20:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d014      	beq.n	8001c52 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x4cc>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001c2e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8001c32:	68fa      	ldr	r2, [r7, #12]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d909      	bls.n	8001c52 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x4cc>
      requestSyncTime();
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f000 f80c 	bl	8001c5c <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
    return SPIN_OK;
 8001c52:	2300      	movs	r3, #0
  }
 8001c54:	4618      	mov	r0, r3
 8001c56:	3710      	adds	r7, #16
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE15requestSyncTimeEv>:
  void requestSyncTime()
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b086      	sub	sp, #24
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8001c64:	f107 030c 	add.w	r3, r7, #12
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7fe fb87 	bl	800037c <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f107 020c 	add.w	r2, r7, #12
 8001c78:	210a      	movs	r1, #10
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	4798      	blx	r3
    rt_time = hardware_.time();
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	3304      	adds	r3, #4
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7ff fb54 	bl	8001330 <_ZN13STM32Hardware4timeEv>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	609a      	str	r2, [r3, #8]
  }
 8001c8e:	bf00      	nop
 8001c90:	3718      	adds	r7, #24
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 8001c96:	b590      	push	{r4, r7, lr}
 8001c98:	b08b      	sub	sp, #44	@ 0x2c
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8001c9e:	f107 030c 	add.w	r3, r7, #12
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7fe fc54 	bl	8000550 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8001ca8:	2300      	movs	r3, #0
 8001caa:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cac:	e05a      	b.n	8001d64 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE15negotiateTopicsEv+0xce>
    {
      if (publishers[i] != 0) // non-empty slot
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cb2:	f602 0206 	addw	r2, r2, #2054	@ 0x806
 8001cb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d04f      	beq.n	8001d5e <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE15negotiateTopicsEv+0xc8>
      {
        ti.topic_id = publishers[i]->id_;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cc2:	f602 0206 	addw	r2, r2, #2054	@ 0x806
 8001cc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cd4:	f602 0206 	addw	r2, r2, #2054	@ 0x806
 8001cd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ce4:	f602 0206 	addw	r2, r2, #2054	@ 0x806
 8001ce8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cec:	6859      	ldr	r1, [r3, #4]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cf2:	f602 0206 	addw	r2, r2, #2054	@ 0x806
 8001cf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	3308      	adds	r3, #8
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4608      	mov	r0, r1
 8001d04:	4798      	blx	r3
 8001d06:	4603      	mov	r3, r0
 8001d08:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d0e:	f602 0206 	addw	r2, r2, #2054	@ 0x806
 8001d12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d16:	6859      	ldr	r1, [r3, #4]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d1c:	f602 0206 	addw	r2, r2, #2054	@ 0x806
 8001d20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	330c      	adds	r3, #12
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4608      	mov	r0, r1
 8001d2e:	4798      	blx	r3
 8001d30:	4603      	mov	r3, r0
 8001d32:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8001d34:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d38:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	681c      	ldr	r4, [r3, #0]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d44:	f602 0206 	addw	r2, r2, #2054	@ 0x806
 8001d48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7ff f95d 	bl	800100c <_ZN3ros9Publisher15getEndpointTypeEv>
 8001d52:	4601      	mov	r1, r0
 8001d54:	f107 030c 	add.w	r3, r7, #12
 8001d58:	461a      	mov	r2, r3
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8001d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d60:	3301      	adds	r3, #1
 8001d62:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d66:	2b0e      	cmp	r3, #14
 8001d68:	dda1      	ble.n	8001cae <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE15negotiateTopicsEv+0x18>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d6e:	e067      	b.n	8001e40 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE15negotiateTopicsEv+0x1aa>
    {
      if (subscribers[i] != 0) // non-empty slot
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d74:	f603 0314 	addw	r3, r3, #2068	@ 0x814
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	4413      	add	r3, r2
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d05b      	beq.n	8001e3a <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE15negotiateTopicsEv+0x1a4>
      {
        ti.topic_id = subscribers[i]->id_;
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d86:	f603 0314 	addw	r3, r3, #2068	@ 0x814
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	4413      	add	r3, r2
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	b29b      	uxth	r3, r3
 8001d94:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d9a:	f603 0314 	addw	r3, r3, #2068	@ 0x814
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	4413      	add	r3, r2
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dac:	f603 0314 	addw	r3, r3, #2068	@ 0x814
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	4413      	add	r3, r2
 8001db4:	6859      	ldr	r1, [r3, #4]
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dba:	f603 0314 	addw	r3, r3, #2068	@ 0x814
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	4413      	add	r3, r2
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	3308      	adds	r3, #8
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4608      	mov	r0, r1
 8001dcc:	4798      	blx	r3
 8001dce:	4603      	mov	r3, r0
 8001dd0:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dd6:	f603 0314 	addw	r3, r3, #2068	@ 0x814
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	4413      	add	r3, r2
 8001dde:	6859      	ldr	r1, [r3, #4]
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001de4:	f603 0314 	addw	r3, r3, #2068	@ 0x814
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	4413      	add	r3, r2
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	330c      	adds	r3, #12
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4608      	mov	r0, r1
 8001df6:	4798      	blx	r3
 8001df8:	4603      	mov	r3, r0
 8001dfa:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8001dfc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e00:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	681c      	ldr	r4, [r3, #0]
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e0c:	f603 0314 	addw	r3, r3, #2068	@ 0x814
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	4413      	add	r3, r2
 8001e14:	6859      	ldr	r1, [r3, #4]
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e1a:	f603 0314 	addw	r3, r3, #2068	@ 0x814
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	4413      	add	r3, r2
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	3304      	adds	r3, #4
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4608      	mov	r0, r1
 8001e2c:	4798      	blx	r3
 8001e2e:	4601      	mov	r1, r0
 8001e30:	f107 030c 	add.w	r3, r7, #12
 8001e34:	461a      	mov	r2, r3
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8001e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e42:	2b0e      	cmp	r3, #14
 8001e44:	dd94      	ble.n	8001d70 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE15negotiateTopicsEv+0xda>
      }
    }
    configured_ = true;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
  }
 8001e52:	bf00      	nop
 8001e54:	372c      	adds	r7, #44	@ 0x2c
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd90      	pop	{r4, r7, pc}
	...

08001e5c <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b086      	sub	sp, #24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8001e66:	f107 0308 	add.w	r3, r7, #8
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7fe fa86 	bl	800037c <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	3304      	adds	r3, #4
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7ff fa5b 	bl	8001330 <_ZN13STM32Hardware4timeEv>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8001e84:	f107 0308 	add.w	r3, r7, #8
 8001e88:	6839      	ldr	r1, [r7, #0]
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7fe fae5 	bl	800045a <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8001e90:	68fa      	ldr	r2, [r7, #12]
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	4915      	ldr	r1, [pc, #84]	@ (8001eec <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8syncTimeEPh+0x90>)
 8001e96:	fba1 1303 	umull	r1, r3, r1, r3
 8001e9a:	099b      	lsrs	r3, r3, #6
 8001e9c:	4413      	add	r3, r2
 8001e9e:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8001ea0:	6939      	ldr	r1, [r7, #16]
 8001ea2:	697a      	ldr	r2, [r7, #20]
 8001ea4:	4b11      	ldr	r3, [pc, #68]	@ (8001eec <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8syncTimeEPh+0x90>)
 8001ea6:	fba3 0302 	umull	r0, r3, r3, r2
 8001eaa:	099b      	lsrs	r3, r3, #6
 8001eac:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001eb0:	fb00 f303 	mul.w	r3, r0, r3
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	4a0e      	ldr	r2, [pc, #56]	@ (8001ef0 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8syncTimeEPh+0x94>)
 8001eb8:	fb02 f303 	mul.w	r3, r2, r3
 8001ebc:	440b      	add	r3, r1
 8001ebe:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8001ec0:	f107 0308 	add.w	r3, r7, #8
 8001ec4:	3304      	adds	r3, #4
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f000 f8b7 	bl	800203c <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	3304      	adds	r3, #4
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7ff fa2c 	bl	8001330 <_ZN13STM32Hardware4timeEv>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001ee0:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  }
 8001ee4:	bf00      	nop
 8001ee6:	3718      	adds	r7, #24
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	10624dd3 	.word	0x10624dd3
 8001ef0:	000f4240 	.word	0x000f4240

08001ef4 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b088      	sub	sp, #32
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	60f8      	str	r0, [r7, #12]
 8001efc:	60b9      	str	r1, [r7, #8]
 8001efe:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	2b63      	cmp	r3, #99	@ 0x63
 8001f04:	dd0b      	ble.n	8001f1e <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE7publishEiPKNS_3MsgE+0x2a>
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001f0c:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8001f10:	f083 0301 	eor.w	r3, r3, #1
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE7publishEiPKNS_3MsgE+0x2a>
      return 0;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	e087      	b.n	800202e <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE7publishEiPKNS_3MsgE+0x13a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f2a:	3318      	adds	r3, #24
 8001f2c:	3307      	adds	r3, #7
 8001f2e:	4619      	mov	r1, r3
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	4790      	blx	r2
 8001f34:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f3c:	22ff      	movs	r2, #255	@ 0xff
 8001f3e:	761a      	strb	r2, [r3, #24]
    message_out[1] = PROTOCOL_VER;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f46:	22fe      	movs	r2, #254	@ 0xfe
 8001f48:	765a      	strb	r2, [r3, #25]
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	b2da      	uxtb	r2, r3
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f54:	769a      	strb	r2, [r3, #26]
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	b29b      	uxth	r3, r3
 8001f5a:	0a1b      	lsrs	r3, r3, #8
 8001f5c:	b29b      	uxth	r3, r3
 8001f5e:	b2da      	uxtb	r2, r3
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f66:	76da      	strb	r2, [r3, #27]
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f6e:	7e9a      	ldrb	r2, [r3, #26]
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f76:	7edb      	ldrb	r3, [r3, #27]
 8001f78:	4413      	add	r3, r2
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	43db      	mvns	r3, r3
 8001f7e:	b2da      	uxtb	r2, r3
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f86:	771a      	strb	r2, [r3, #28]
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	b2da      	uxtb	r2, r3
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f92:	775a      	strb	r2, [r3, #29]
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	b21b      	sxth	r3, r3
 8001f98:	121b      	asrs	r3, r3, #8
 8001f9a:	b21b      	sxth	r3, r3
 8001f9c:	b2da      	uxtb	r2, r3
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001fa4:	779a      	strb	r2, [r3, #30]

    /* calculate checksum */
    int chk = 0;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8001faa:	2305      	movs	r3, #5
 8001fac:	61bb      	str	r3, [r7, #24]
 8001fae:	e00d      	b.n	8001fcc <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE7publishEiPKNS_3MsgE+0xd8>
      chk += message_out[i];
 8001fb0:	68fa      	ldr	r2, [r7, #12]
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001fba:	3318      	adds	r3, #24
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8001fc6:	69bb      	ldr	r3, [r7, #24]
 8001fc8:	3301      	adds	r3, #1
 8001fca:	61bb      	str	r3, [r7, #24]
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	3306      	adds	r3, #6
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	ddec      	ble.n	8001fb0 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE7publishEiPKNS_3MsgE+0xbc>
    l += 7;
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	3307      	adds	r3, #7
 8001fda:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	425a      	negs	r2, r3
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	b2d2      	uxtb	r2, r2
 8001fe4:	bf58      	it	pl
 8001fe6:	4253      	negpl	r3, r2
 8001fe8:	b2da      	uxtb	r2, r3
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	1c59      	adds	r1, r3, #1
 8001fee:	6179      	str	r1, [r7, #20]
 8001ff0:	43d2      	mvns	r2, r2
 8001ff2:	b2d1      	uxtb	r1, r2
 8001ff4:	68fa      	ldr	r2, [r7, #12]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ffc:	3318      	adds	r3, #24
 8001ffe:	460a      	mov	r2, r1
 8002000:	701a      	strb	r2, [r3, #0]

    if (l <= OUTPUT_SIZE)
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002008:	dc0b      	bgt.n	8002022 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE7publishEiPKNS_3MsgE+0x12e>
    {
      hardware_.write(message_out, l);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	1d18      	adds	r0, r3, #4
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002014:	3318      	adds	r3, #24
 8002016:	697a      	ldr	r2, [r7, #20]
 8002018:	4619      	mov	r1, r3
 800201a:	f7ff f978 	bl	800130e <_ZN13STM32Hardware5writeEPhi>
      return l;
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	e005      	b.n	800202e <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE7publishEiPKNS_3MsgE+0x13a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8002022:	4905      	ldr	r1, [pc, #20]	@ (8002038 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE7publishEiPKNS_3MsgE+0x144>)
 8002024:	68f8      	ldr	r0, [r7, #12]
 8002026:	f000 f847 	bl	80020b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8logerrorEPKc>
      return -1;
 800202a:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 800202e:	4618      	mov	r0, r3
 8002030:	3720      	adds	r7, #32
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	08004cec 	.word	0x08004cec

0800203c <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	3304      	adds	r3, #4
 800204a:	4618      	mov	r0, r3
 800204c:	f7ff f970 	bl	8001330 <_ZN13STM32Hardware4timeEv>
 8002050:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	4914      	ldr	r1, [pc, #80]	@ (80020ac <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE6setNowERKNS_4TimeE+0x70>)
 800205a:	fba1 1303 	umull	r1, r3, r1, r3
 800205e:	099b      	lsrs	r3, r3, #6
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	1e5a      	subs	r2, r3, #1
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	60da      	str	r2, [r3, #12]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	6859      	ldr	r1, [r3, #4]
 800206c:	68fa      	ldr	r2, [r7, #12]
 800206e:	4b0f      	ldr	r3, [pc, #60]	@ (80020ac <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE6setNowERKNS_4TimeE+0x70>)
 8002070:	fba3 0302 	umull	r0, r3, r3, r2
 8002074:	099b      	lsrs	r3, r3, #6
 8002076:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800207a:	fb00 f303 	mul.w	r3, r0, r3
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	4a0b      	ldr	r2, [pc, #44]	@ (80020b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE6setNowERKNS_4TimeE+0x74>)
 8002082:	fb02 f303 	mul.w	r3, r2, r3
 8002086:	1aca      	subs	r2, r1, r3
 8002088:	4b0a      	ldr	r3, [pc, #40]	@ (80020b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE6setNowERKNS_4TimeE+0x78>)
 800208a:	4413      	add	r3, r2
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	6113      	str	r3, [r2, #16]
    normalizeSecNSec(sec_offset, nsec_offset);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	f103 020c 	add.w	r2, r3, #12
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	3310      	adds	r3, #16
 800209a:	4619      	mov	r1, r3
 800209c:	4610      	mov	r0, r2
 800209e:	f000 f9db 	bl	8002458 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 80020a2:	bf00      	nop
 80020a4:	3710      	adds	r7, #16
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	10624dd3 	.word	0x10624dd3
 80020b0:	000f4240 	.word	0x000f4240
 80020b4:	3b9aca00 	.word	0x3b9aca00

080020b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 80020c2:	683a      	ldr	r2, [r7, #0]
 80020c4:	2103      	movs	r1, #3
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f000 f804 	bl	80020d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE3logEcPKc>
  }
 80020cc:	bf00      	nop
 80020ce:	3708      	adds	r7, #8
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE3logEcPKc>:
  void log(char byte, const char * msg)
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b088      	sub	sp, #32
 80020d8:	af00      	add	r7, sp, #0
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	460b      	mov	r3, r1
 80020de:	607a      	str	r2, [r7, #4]
 80020e0:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 80020e2:	f107 0314 	add.w	r3, r7, #20
 80020e6:	4618      	mov	r0, r3
 80020e8:	f7fe fbf2 	bl	80008d0 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 80020ec:	7afb      	ldrb	r3, [r7, #11]
 80020ee:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f107 0214 	add.w	r2, r7, #20
 80020fe:	2107      	movs	r1, #7
 8002100:	68f8      	ldr	r0, [r7, #12]
 8002102:	4798      	blx	r3
  }
 8002104:	bf00      	nop
 8002106:	3720      	adds	r7, #32
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}

0800210c <_Z41__static_initialization_and_destruction_0ii>:
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	6039      	str	r1, [r7, #0]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2b01      	cmp	r3, #1
 800211a:	d114      	bne.n	8002146 <_Z41__static_initialization_and_destruction_0ii+0x3a>
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002122:	4293      	cmp	r3, r2
 8002124:	d10f      	bne.n	8002146 <_Z41__static_initialization_and_destruction_0ii+0x3a>
};

SerialComm comm_rosserial(huart_rosserial);
 8002126:	490a      	ldr	r1, [pc, #40]	@ (8002150 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8002128:	480a      	ldr	r0, [pc, #40]	@ (8002154 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 800212a:	f7fe ff7a 	bl	8001022 <_ZN10SerialCommC1ER20__UART_HandleTypeDef>
ros::NodeHandle nh;
 800212e:	480a      	ldr	r0, [pc, #40]	@ (8002158 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8002130:	f7ff f9b2 	bl	8001498 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EEC1Ev>
std_msgs::String str_msg;
 8002134:	4809      	ldr	r0, [pc, #36]	@ (800215c <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8002136:	f7ff f907 	bl	8001348 <_ZN8std_msgs6StringC1Ev>
ros::Publisher chatter("chatter", &str_msg);
 800213a:	2300      	movs	r3, #0
 800213c:	4a07      	ldr	r2, [pc, #28]	@ (800215c <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800213e:	4908      	ldr	r1, [pc, #32]	@ (8002160 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8002140:	4808      	ldr	r0, [pc, #32]	@ (8002164 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8002142:	f7fe ff39 	bl	8000fb8 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 8002146:	bf00      	nop
 8002148:	3708      	adds	r7, #8
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	20000078 	.word	0x20000078
 8002154:	20000148 	.word	0x20000148
 8002158:	20002154 	.word	0x20002154
 800215c:	20004234 	.word	0x20004234
 8002160:	08004d28 	.word	0x08004d28
 8002164:	2000423c 	.word	0x2000423c

08002168 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE9connectedEv>:
  virtual bool connected() override
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
    return configured_;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002176:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
  };
 800217a:	4618      	mov	r0, r3
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	bc80      	pop	{r7}
 8002182:	4770      	bx	lr

08002184 <_GLOBAL__sub_I_comm_rosserial>:
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
 8002188:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800218c:	2001      	movs	r0, #1
 800218e:	f7ff ffbd 	bl	800210c <_Z41__static_initialization_and_destruction_0ii>
 8002192:	bd80      	pop	{r7, pc}

08002194 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002194:	b480      	push	{r7}
 8002196:	b085      	sub	sp, #20
 8002198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800219a:	4b15      	ldr	r3, [pc, #84]	@ (80021f0 <HAL_MspInit+0x5c>)
 800219c:	699b      	ldr	r3, [r3, #24]
 800219e:	4a14      	ldr	r2, [pc, #80]	@ (80021f0 <HAL_MspInit+0x5c>)
 80021a0:	f043 0301 	orr.w	r3, r3, #1
 80021a4:	6193      	str	r3, [r2, #24]
 80021a6:	4b12      	ldr	r3, [pc, #72]	@ (80021f0 <HAL_MspInit+0x5c>)
 80021a8:	699b      	ldr	r3, [r3, #24]
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	60bb      	str	r3, [r7, #8]
 80021b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021b2:	4b0f      	ldr	r3, [pc, #60]	@ (80021f0 <HAL_MspInit+0x5c>)
 80021b4:	69db      	ldr	r3, [r3, #28]
 80021b6:	4a0e      	ldr	r2, [pc, #56]	@ (80021f0 <HAL_MspInit+0x5c>)
 80021b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021bc:	61d3      	str	r3, [r2, #28]
 80021be:	4b0c      	ldr	r3, [pc, #48]	@ (80021f0 <HAL_MspInit+0x5c>)
 80021c0:	69db      	ldr	r3, [r3, #28]
 80021c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021c6:	607b      	str	r3, [r7, #4]
 80021c8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80021ca:	4b0a      	ldr	r3, [pc, #40]	@ (80021f4 <HAL_MspInit+0x60>)
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	60fb      	str	r3, [r7, #12]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80021d6:	60fb      	str	r3, [r7, #12]
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80021de:	60fb      	str	r3, [r7, #12]
 80021e0:	4a04      	ldr	r2, [pc, #16]	@ (80021f4 <HAL_MspInit+0x60>)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021e6:	bf00      	nop
 80021e8:	3714      	adds	r7, #20
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bc80      	pop	{r7}
 80021ee:	4770      	bx	lr
 80021f0:	40021000 	.word	0x40021000
 80021f4:	40010000 	.word	0x40010000

080021f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b088      	sub	sp, #32
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002200:	f107 0310 	add.w	r3, r7, #16
 8002204:	2200      	movs	r2, #0
 8002206:	601a      	str	r2, [r3, #0]
 8002208:	605a      	str	r2, [r3, #4]
 800220a:	609a      	str	r2, [r3, #8]
 800220c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a47      	ldr	r2, [pc, #284]	@ (8002330 <HAL_UART_MspInit+0x138>)
 8002214:	4293      	cmp	r3, r2
 8002216:	f040 8086 	bne.w	8002326 <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800221a:	4b46      	ldr	r3, [pc, #280]	@ (8002334 <HAL_UART_MspInit+0x13c>)
 800221c:	699b      	ldr	r3, [r3, #24]
 800221e:	4a45      	ldr	r2, [pc, #276]	@ (8002334 <HAL_UART_MspInit+0x13c>)
 8002220:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002224:	6193      	str	r3, [r2, #24]
 8002226:	4b43      	ldr	r3, [pc, #268]	@ (8002334 <HAL_UART_MspInit+0x13c>)
 8002228:	699b      	ldr	r3, [r3, #24]
 800222a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800222e:	60fb      	str	r3, [r7, #12]
 8002230:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002232:	4b40      	ldr	r3, [pc, #256]	@ (8002334 <HAL_UART_MspInit+0x13c>)
 8002234:	699b      	ldr	r3, [r3, #24]
 8002236:	4a3f      	ldr	r2, [pc, #252]	@ (8002334 <HAL_UART_MspInit+0x13c>)
 8002238:	f043 0304 	orr.w	r3, r3, #4
 800223c:	6193      	str	r3, [r2, #24]
 800223e:	4b3d      	ldr	r3, [pc, #244]	@ (8002334 <HAL_UART_MspInit+0x13c>)
 8002240:	699b      	ldr	r3, [r3, #24]
 8002242:	f003 0304 	and.w	r3, r3, #4
 8002246:	60bb      	str	r3, [r7, #8]
 8002248:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800224a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800224e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002250:	2302      	movs	r3, #2
 8002252:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002254:	2303      	movs	r3, #3
 8002256:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002258:	f107 0310 	add.w	r3, r7, #16
 800225c:	4619      	mov	r1, r3
 800225e:	4836      	ldr	r0, [pc, #216]	@ (8002338 <HAL_UART_MspInit+0x140>)
 8002260:	f000 fd82 	bl	8002d68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002264:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002268:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800226a:	2300      	movs	r3, #0
 800226c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226e:	2300      	movs	r3, #0
 8002270:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002272:	f107 0310 	add.w	r3, r7, #16
 8002276:	4619      	mov	r1, r3
 8002278:	482f      	ldr	r0, [pc, #188]	@ (8002338 <HAL_UART_MspInit+0x140>)
 800227a:	f000 fd75 	bl	8002d68 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800227e:	4b2f      	ldr	r3, [pc, #188]	@ (800233c <HAL_UART_MspInit+0x144>)
 8002280:	4a2f      	ldr	r2, [pc, #188]	@ (8002340 <HAL_UART_MspInit+0x148>)
 8002282:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002284:	4b2d      	ldr	r3, [pc, #180]	@ (800233c <HAL_UART_MspInit+0x144>)
 8002286:	2210      	movs	r2, #16
 8002288:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800228a:	4b2c      	ldr	r3, [pc, #176]	@ (800233c <HAL_UART_MspInit+0x144>)
 800228c:	2200      	movs	r2, #0
 800228e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002290:	4b2a      	ldr	r3, [pc, #168]	@ (800233c <HAL_UART_MspInit+0x144>)
 8002292:	2280      	movs	r2, #128	@ 0x80
 8002294:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002296:	4b29      	ldr	r3, [pc, #164]	@ (800233c <HAL_UART_MspInit+0x144>)
 8002298:	2200      	movs	r2, #0
 800229a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800229c:	4b27      	ldr	r3, [pc, #156]	@ (800233c <HAL_UART_MspInit+0x144>)
 800229e:	2200      	movs	r2, #0
 80022a0:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80022a2:	4b26      	ldr	r3, [pc, #152]	@ (800233c <HAL_UART_MspInit+0x144>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80022a8:	4b24      	ldr	r3, [pc, #144]	@ (800233c <HAL_UART_MspInit+0x144>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80022ae:	4823      	ldr	r0, [pc, #140]	@ (800233c <HAL_UART_MspInit+0x144>)
 80022b0:	f000 fab8 	bl	8002824 <HAL_DMA_Init>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 80022ba:	f7fe f839 	bl	8000330 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a1e      	ldr	r2, [pc, #120]	@ (800233c <HAL_UART_MspInit+0x144>)
 80022c2:	639a      	str	r2, [r3, #56]	@ 0x38
 80022c4:	4a1d      	ldr	r2, [pc, #116]	@ (800233c <HAL_UART_MspInit+0x144>)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80022ca:	4b1e      	ldr	r3, [pc, #120]	@ (8002344 <HAL_UART_MspInit+0x14c>)
 80022cc:	4a1e      	ldr	r2, [pc, #120]	@ (8002348 <HAL_UART_MspInit+0x150>)
 80022ce:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80022d0:	4b1c      	ldr	r3, [pc, #112]	@ (8002344 <HAL_UART_MspInit+0x14c>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80022d6:	4b1b      	ldr	r3, [pc, #108]	@ (8002344 <HAL_UART_MspInit+0x14c>)
 80022d8:	2200      	movs	r2, #0
 80022da:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80022dc:	4b19      	ldr	r3, [pc, #100]	@ (8002344 <HAL_UART_MspInit+0x14c>)
 80022de:	2280      	movs	r2, #128	@ 0x80
 80022e0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80022e2:	4b18      	ldr	r3, [pc, #96]	@ (8002344 <HAL_UART_MspInit+0x14c>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80022e8:	4b16      	ldr	r3, [pc, #88]	@ (8002344 <HAL_UART_MspInit+0x14c>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80022ee:	4b15      	ldr	r3, [pc, #84]	@ (8002344 <HAL_UART_MspInit+0x14c>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80022f4:	4b13      	ldr	r3, [pc, #76]	@ (8002344 <HAL_UART_MspInit+0x14c>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80022fa:	4812      	ldr	r0, [pc, #72]	@ (8002344 <HAL_UART_MspInit+0x14c>)
 80022fc:	f000 fa92 	bl	8002824 <HAL_DMA_Init>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 8002306:	f7fe f813 	bl	8000330 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a0d      	ldr	r2, [pc, #52]	@ (8002344 <HAL_UART_MspInit+0x14c>)
 800230e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002310:	4a0c      	ldr	r2, [pc, #48]	@ (8002344 <HAL_UART_MspInit+0x14c>)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002316:	2200      	movs	r2, #0
 8002318:	2100      	movs	r1, #0
 800231a:	2025      	movs	r0, #37	@ 0x25
 800231c:	f000 fa4b 	bl	80027b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002320:	2025      	movs	r0, #37	@ 0x25
 8002322:	f000 fa64 	bl	80027ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002326:	bf00      	nop
 8002328:	3720      	adds	r7, #32
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	40013800 	.word	0x40013800
 8002334:	40021000 	.word	0x40021000
 8002338:	40010800 	.word	0x40010800
 800233c:	200000c0 	.word	0x200000c0
 8002340:	40020044 	.word	0x40020044
 8002344:	20000104 	.word	0x20000104
 8002348:	40020058 	.word	0x40020058

0800234c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002350:	bf00      	nop
 8002352:	e7fd      	b.n	8002350 <NMI_Handler+0x4>

08002354 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002358:	bf00      	nop
 800235a:	e7fd      	b.n	8002358 <HardFault_Handler+0x4>

0800235c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002360:	bf00      	nop
 8002362:	e7fd      	b.n	8002360 <MemManage_Handler+0x4>

08002364 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002368:	bf00      	nop
 800236a:	e7fd      	b.n	8002368 <BusFault_Handler+0x4>

0800236c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002370:	bf00      	nop
 8002372:	e7fd      	b.n	8002370 <UsageFault_Handler+0x4>

08002374 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002378:	bf00      	nop
 800237a:	46bd      	mov	sp, r7
 800237c:	bc80      	pop	{r7}
 800237e:	4770      	bx	lr

08002380 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002384:	bf00      	nop
 8002386:	46bd      	mov	sp, r7
 8002388:	bc80      	pop	{r7}
 800238a:	4770      	bx	lr

0800238c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002390:	bf00      	nop
 8002392:	46bd      	mov	sp, r7
 8002394:	bc80      	pop	{r7}
 8002396:	4770      	bx	lr

08002398 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800239c:	f000 f8f4 	bl	8002588 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023a0:	bf00      	nop
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80023a8:	4802      	ldr	r0, [pc, #8]	@ (80023b4 <DMA1_Channel4_IRQHandler+0x10>)
 80023aa:	f000 fba9 	bl	8002b00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80023ae:	bf00      	nop
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	200000c0 	.word	0x200000c0

080023b8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80023bc:	4802      	ldr	r0, [pc, #8]	@ (80023c8 <DMA1_Channel5_IRQHandler+0x10>)
 80023be:	f000 fb9f 	bl	8002b00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80023c2:	bf00      	nop
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	20000104 	.word	0x20000104

080023cc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart_rosserial);
 80023d0:	4802      	ldr	r0, [pc, #8]	@ (80023dc <USART1_IRQHandler+0x10>)
 80023d2:	f001 fb75 	bl	8003ac0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80023d6:	bf00      	nop
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	20000078 	.word	0x20000078

080023e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b086      	sub	sp, #24
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023e8:	4a14      	ldr	r2, [pc, #80]	@ (800243c <_sbrk+0x5c>)
 80023ea:	4b15      	ldr	r3, [pc, #84]	@ (8002440 <_sbrk+0x60>)
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023f4:	4b13      	ldr	r3, [pc, #76]	@ (8002444 <_sbrk+0x64>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d102      	bne.n	8002402 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023fc:	4b11      	ldr	r3, [pc, #68]	@ (8002444 <_sbrk+0x64>)
 80023fe:	4a12      	ldr	r2, [pc, #72]	@ (8002448 <_sbrk+0x68>)
 8002400:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002402:	4b10      	ldr	r3, [pc, #64]	@ (8002444 <_sbrk+0x64>)
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4413      	add	r3, r2
 800240a:	693a      	ldr	r2, [r7, #16]
 800240c:	429a      	cmp	r2, r3
 800240e:	d207      	bcs.n	8002420 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002410:	f002 fa90 	bl	8004934 <__errno>
 8002414:	4603      	mov	r3, r0
 8002416:	220c      	movs	r2, #12
 8002418:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800241a:	f04f 33ff 	mov.w	r3, #4294967295
 800241e:	e009      	b.n	8002434 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002420:	4b08      	ldr	r3, [pc, #32]	@ (8002444 <_sbrk+0x64>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002426:	4b07      	ldr	r3, [pc, #28]	@ (8002444 <_sbrk+0x64>)
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4413      	add	r3, r2
 800242e:	4a05      	ldr	r2, [pc, #20]	@ (8002444 <_sbrk+0x64>)
 8002430:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002432:	68fb      	ldr	r3, [r7, #12]
}
 8002434:	4618      	mov	r0, r3
 8002436:	3718      	adds	r7, #24
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	20005000 	.word	0x20005000
 8002440:	00000400 	.word	0x00000400
 8002444:	20004250 	.word	0x20004250
 8002448:	200043a0 	.word	0x200043a0

0800244c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002450:	bf00      	nop
 8002452:	46bd      	mov	sp, r7
 8002454:	bc80      	pop	{r7}
 8002456:	4770      	bx	lr

08002458 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8002458:	b480      	push	{r7}
 800245a:	b085      	sub	sp, #20
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	0a5a      	lsrs	r2, r3, #9
 8002468:	490f      	ldr	r1, [pc, #60]	@ (80024a8 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800246a:	fba1 1202 	umull	r1, r2, r1, r2
 800246e:	09d2      	lsrs	r2, r2, #7
 8002470:	490e      	ldr	r1, [pc, #56]	@ (80024ac <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8002472:	fb01 f202 	mul.w	r2, r1, r2
 8002476:	1a9b      	subs	r3, r3, r2
 8002478:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	0a5b      	lsrs	r3, r3, #9
 8002480:	4a09      	ldr	r2, [pc, #36]	@ (80024a8 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8002482:	fba2 2303 	umull	r2, r3, r2, r3
 8002486:	09db      	lsrs	r3, r3, #7
 8002488:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	441a      	add	r2, r3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	68fa      	ldr	r2, [r7, #12]
 800249a:	601a      	str	r2, [r3, #0]
}
 800249c:	bf00      	nop
 800249e:	3714      	adds	r7, #20
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bc80      	pop	{r7}
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop
 80024a8:	00044b83 	.word	0x00044b83
 80024ac:	3b9aca00 	.word	0x3b9aca00

080024b0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80024b0:	f7ff ffcc 	bl	800244c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024b4:	480b      	ldr	r0, [pc, #44]	@ (80024e4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80024b6:	490c      	ldr	r1, [pc, #48]	@ (80024e8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80024b8:	4a0c      	ldr	r2, [pc, #48]	@ (80024ec <LoopFillZerobss+0x16>)
  movs r3, #0
 80024ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024bc:	e002      	b.n	80024c4 <LoopCopyDataInit>

080024be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024c2:	3304      	adds	r3, #4

080024c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024c8:	d3f9      	bcc.n	80024be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024ca:	4a09      	ldr	r2, [pc, #36]	@ (80024f0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80024cc:	4c09      	ldr	r4, [pc, #36]	@ (80024f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80024ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024d0:	e001      	b.n	80024d6 <LoopFillZerobss>

080024d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024d4:	3204      	adds	r2, #4

080024d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024d8:	d3fb      	bcc.n	80024d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80024da:	f002 fa31 	bl	8004940 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80024de:	f7fd fe3d 	bl	800015c <main>
  bx lr
 80024e2:	4770      	bx	lr
  ldr r0, =_sdata
 80024e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024e8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80024ec:	08004e44 	.word	0x08004e44
  ldr r2, =_sbss
 80024f0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80024f4:	200043a0 	.word	0x200043a0

080024f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80024f8:	e7fe      	b.n	80024f8 <ADC1_2_IRQHandler>
	...

080024fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002500:	4b08      	ldr	r3, [pc, #32]	@ (8002524 <HAL_Init+0x28>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a07      	ldr	r2, [pc, #28]	@ (8002524 <HAL_Init+0x28>)
 8002506:	f043 0310 	orr.w	r3, r3, #16
 800250a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800250c:	2003      	movs	r0, #3
 800250e:	f000 f947 	bl	80027a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002512:	200f      	movs	r0, #15
 8002514:	f000 f808 	bl	8002528 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002518:	f7ff fe3c 	bl	8002194 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800251c:	2300      	movs	r3, #0
}
 800251e:	4618      	mov	r0, r3
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	40022000 	.word	0x40022000

08002528 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002530:	4b12      	ldr	r3, [pc, #72]	@ (800257c <HAL_InitTick+0x54>)
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	4b12      	ldr	r3, [pc, #72]	@ (8002580 <HAL_InitTick+0x58>)
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	4619      	mov	r1, r3
 800253a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800253e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002542:	fbb2 f3f3 	udiv	r3, r2, r3
 8002546:	4618      	mov	r0, r3
 8002548:	f000 f95f 	bl	800280a <HAL_SYSTICK_Config>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e00e      	b.n	8002574 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2b0f      	cmp	r3, #15
 800255a:	d80a      	bhi.n	8002572 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800255c:	2200      	movs	r2, #0
 800255e:	6879      	ldr	r1, [r7, #4]
 8002560:	f04f 30ff 	mov.w	r0, #4294967295
 8002564:	f000 f927 	bl	80027b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002568:	4a06      	ldr	r2, [pc, #24]	@ (8002584 <HAL_InitTick+0x5c>)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800256e:	2300      	movs	r3, #0
 8002570:	e000      	b.n	8002574 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
}
 8002574:	4618      	mov	r0, r3
 8002576:	3708      	adds	r7, #8
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	20000000 	.word	0x20000000
 8002580:	20000008 	.word	0x20000008
 8002584:	20000004 	.word	0x20000004

08002588 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800258c:	4b05      	ldr	r3, [pc, #20]	@ (80025a4 <HAL_IncTick+0x1c>)
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	461a      	mov	r2, r3
 8002592:	4b05      	ldr	r3, [pc, #20]	@ (80025a8 <HAL_IncTick+0x20>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4413      	add	r3, r2
 8002598:	4a03      	ldr	r2, [pc, #12]	@ (80025a8 <HAL_IncTick+0x20>)
 800259a:	6013      	str	r3, [r2, #0]
}
 800259c:	bf00      	nop
 800259e:	46bd      	mov	sp, r7
 80025a0:	bc80      	pop	{r7}
 80025a2:	4770      	bx	lr
 80025a4:	20000008 	.word	0x20000008
 80025a8:	20004254 	.word	0x20004254

080025ac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
  return uwTick;
 80025b0:	4b02      	ldr	r3, [pc, #8]	@ (80025bc <HAL_GetTick+0x10>)
 80025b2:	681b      	ldr	r3, [r3, #0]
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bc80      	pop	{r7}
 80025ba:	4770      	bx	lr
 80025bc:	20004254 	.word	0x20004254

080025c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025c8:	f7ff fff0 	bl	80025ac <HAL_GetTick>
 80025cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025d8:	d005      	beq.n	80025e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025da:	4b0a      	ldr	r3, [pc, #40]	@ (8002604 <HAL_Delay+0x44>)
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	461a      	mov	r2, r3
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	4413      	add	r3, r2
 80025e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80025e6:	bf00      	nop
 80025e8:	f7ff ffe0 	bl	80025ac <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	68fa      	ldr	r2, [r7, #12]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d8f7      	bhi.n	80025e8 <HAL_Delay+0x28>
  {
  }
}
 80025f8:	bf00      	nop
 80025fa:	bf00      	nop
 80025fc:	3710      	adds	r7, #16
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	20000008 	.word	0x20000008

08002608 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002608:	b480      	push	{r7}
 800260a:	b085      	sub	sp, #20
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f003 0307 	and.w	r3, r3, #7
 8002616:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002618:	4b0c      	ldr	r3, [pc, #48]	@ (800264c <__NVIC_SetPriorityGrouping+0x44>)
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800261e:	68ba      	ldr	r2, [r7, #8]
 8002620:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002624:	4013      	ands	r3, r2
 8002626:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002630:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002634:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002638:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800263a:	4a04      	ldr	r2, [pc, #16]	@ (800264c <__NVIC_SetPriorityGrouping+0x44>)
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	60d3      	str	r3, [r2, #12]
}
 8002640:	bf00      	nop
 8002642:	3714      	adds	r7, #20
 8002644:	46bd      	mov	sp, r7
 8002646:	bc80      	pop	{r7}
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop
 800264c:	e000ed00 	.word	0xe000ed00

08002650 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002650:	b480      	push	{r7}
 8002652:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002654:	4b04      	ldr	r3, [pc, #16]	@ (8002668 <__NVIC_GetPriorityGrouping+0x18>)
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	0a1b      	lsrs	r3, r3, #8
 800265a:	f003 0307 	and.w	r3, r3, #7
}
 800265e:	4618      	mov	r0, r3
 8002660:	46bd      	mov	sp, r7
 8002662:	bc80      	pop	{r7}
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop
 8002668:	e000ed00 	.word	0xe000ed00

0800266c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	4603      	mov	r3, r0
 8002674:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800267a:	2b00      	cmp	r3, #0
 800267c:	db0b      	blt.n	8002696 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800267e:	79fb      	ldrb	r3, [r7, #7]
 8002680:	f003 021f 	and.w	r2, r3, #31
 8002684:	4906      	ldr	r1, [pc, #24]	@ (80026a0 <__NVIC_EnableIRQ+0x34>)
 8002686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800268a:	095b      	lsrs	r3, r3, #5
 800268c:	2001      	movs	r0, #1
 800268e:	fa00 f202 	lsl.w	r2, r0, r2
 8002692:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002696:	bf00      	nop
 8002698:	370c      	adds	r7, #12
 800269a:	46bd      	mov	sp, r7
 800269c:	bc80      	pop	{r7}
 800269e:	4770      	bx	lr
 80026a0:	e000e100 	.word	0xe000e100

080026a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	4603      	mov	r3, r0
 80026ac:	6039      	str	r1, [r7, #0]
 80026ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	db0a      	blt.n	80026ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	b2da      	uxtb	r2, r3
 80026bc:	490c      	ldr	r1, [pc, #48]	@ (80026f0 <__NVIC_SetPriority+0x4c>)
 80026be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c2:	0112      	lsls	r2, r2, #4
 80026c4:	b2d2      	uxtb	r2, r2
 80026c6:	440b      	add	r3, r1
 80026c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026cc:	e00a      	b.n	80026e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	b2da      	uxtb	r2, r3
 80026d2:	4908      	ldr	r1, [pc, #32]	@ (80026f4 <__NVIC_SetPriority+0x50>)
 80026d4:	79fb      	ldrb	r3, [r7, #7]
 80026d6:	f003 030f 	and.w	r3, r3, #15
 80026da:	3b04      	subs	r3, #4
 80026dc:	0112      	lsls	r2, r2, #4
 80026de:	b2d2      	uxtb	r2, r2
 80026e0:	440b      	add	r3, r1
 80026e2:	761a      	strb	r2, [r3, #24]
}
 80026e4:	bf00      	nop
 80026e6:	370c      	adds	r7, #12
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bc80      	pop	{r7}
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	e000e100 	.word	0xe000e100
 80026f4:	e000ed00 	.word	0xe000ed00

080026f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b089      	sub	sp, #36	@ 0x24
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f003 0307 	and.w	r3, r3, #7
 800270a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	f1c3 0307 	rsb	r3, r3, #7
 8002712:	2b04      	cmp	r3, #4
 8002714:	bf28      	it	cs
 8002716:	2304      	movcs	r3, #4
 8002718:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	3304      	adds	r3, #4
 800271e:	2b06      	cmp	r3, #6
 8002720:	d902      	bls.n	8002728 <NVIC_EncodePriority+0x30>
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	3b03      	subs	r3, #3
 8002726:	e000      	b.n	800272a <NVIC_EncodePriority+0x32>
 8002728:	2300      	movs	r3, #0
 800272a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800272c:	f04f 32ff 	mov.w	r2, #4294967295
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	fa02 f303 	lsl.w	r3, r2, r3
 8002736:	43da      	mvns	r2, r3
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	401a      	ands	r2, r3
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002740:	f04f 31ff 	mov.w	r1, #4294967295
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	fa01 f303 	lsl.w	r3, r1, r3
 800274a:	43d9      	mvns	r1, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002750:	4313      	orrs	r3, r2
         );
}
 8002752:	4618      	mov	r0, r3
 8002754:	3724      	adds	r7, #36	@ 0x24
 8002756:	46bd      	mov	sp, r7
 8002758:	bc80      	pop	{r7}
 800275a:	4770      	bx	lr

0800275c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	3b01      	subs	r3, #1
 8002768:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800276c:	d301      	bcc.n	8002772 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800276e:	2301      	movs	r3, #1
 8002770:	e00f      	b.n	8002792 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002772:	4a0a      	ldr	r2, [pc, #40]	@ (800279c <SysTick_Config+0x40>)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	3b01      	subs	r3, #1
 8002778:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800277a:	210f      	movs	r1, #15
 800277c:	f04f 30ff 	mov.w	r0, #4294967295
 8002780:	f7ff ff90 	bl	80026a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002784:	4b05      	ldr	r3, [pc, #20]	@ (800279c <SysTick_Config+0x40>)
 8002786:	2200      	movs	r2, #0
 8002788:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800278a:	4b04      	ldr	r3, [pc, #16]	@ (800279c <SysTick_Config+0x40>)
 800278c:	2207      	movs	r2, #7
 800278e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002790:	2300      	movs	r3, #0
}
 8002792:	4618      	mov	r0, r3
 8002794:	3708      	adds	r7, #8
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	e000e010 	.word	0xe000e010

080027a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f7ff ff2d 	bl	8002608 <__NVIC_SetPriorityGrouping>
}
 80027ae:	bf00      	nop
 80027b0:	3708      	adds	r7, #8
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}

080027b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027b6:	b580      	push	{r7, lr}
 80027b8:	b086      	sub	sp, #24
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	4603      	mov	r3, r0
 80027be:	60b9      	str	r1, [r7, #8]
 80027c0:	607a      	str	r2, [r7, #4]
 80027c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027c4:	2300      	movs	r3, #0
 80027c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027c8:	f7ff ff42 	bl	8002650 <__NVIC_GetPriorityGrouping>
 80027cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	68b9      	ldr	r1, [r7, #8]
 80027d2:	6978      	ldr	r0, [r7, #20]
 80027d4:	f7ff ff90 	bl	80026f8 <NVIC_EncodePriority>
 80027d8:	4602      	mov	r2, r0
 80027da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027de:	4611      	mov	r1, r2
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7ff ff5f 	bl	80026a4 <__NVIC_SetPriority>
}
 80027e6:	bf00      	nop
 80027e8:	3718      	adds	r7, #24
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}

080027ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027ee:	b580      	push	{r7, lr}
 80027f0:	b082      	sub	sp, #8
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	4603      	mov	r3, r0
 80027f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7ff ff35 	bl	800266c <__NVIC_EnableIRQ>
}
 8002802:	bf00      	nop
 8002804:	3708      	adds	r7, #8
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}

0800280a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800280a:	b580      	push	{r7, lr}
 800280c:	b082      	sub	sp, #8
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f7ff ffa2 	bl	800275c <SysTick_Config>
 8002818:	4603      	mov	r3, r0
}
 800281a:	4618      	mov	r0, r3
 800281c:	3708      	adds	r7, #8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
	...

08002824 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002824:	b480      	push	{r7}
 8002826:	b085      	sub	sp, #20
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800282c:	2300      	movs	r3, #0
 800282e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d101      	bne.n	800283a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e043      	b.n	80028c2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	461a      	mov	r2, r3
 8002840:	4b22      	ldr	r3, [pc, #136]	@ (80028cc <HAL_DMA_Init+0xa8>)
 8002842:	4413      	add	r3, r2
 8002844:	4a22      	ldr	r2, [pc, #136]	@ (80028d0 <HAL_DMA_Init+0xac>)
 8002846:	fba2 2303 	umull	r2, r3, r2, r3
 800284a:	091b      	lsrs	r3, r3, #4
 800284c:	009a      	lsls	r2, r3, #2
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a1f      	ldr	r2, [pc, #124]	@ (80028d4 <HAL_DMA_Init+0xb0>)
 8002856:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2202      	movs	r2, #2
 800285c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800286e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002872:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800287c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002888:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	695b      	ldr	r3, [r3, #20]
 800288e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002894:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	69db      	ldr	r3, [r3, #28]
 800289a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800289c:	68fa      	ldr	r2, [r7, #12]
 800289e:	4313      	orrs	r3, r2
 80028a0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	68fa      	ldr	r2, [r7, #12]
 80028a8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3714      	adds	r7, #20
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bc80      	pop	{r7}
 80028ca:	4770      	bx	lr
 80028cc:	bffdfff8 	.word	0xbffdfff8
 80028d0:	cccccccd 	.word	0xcccccccd
 80028d4:	40020000 	.word	0x40020000

080028d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b086      	sub	sp, #24
 80028dc:	af00      	add	r7, sp, #0
 80028de:	60f8      	str	r0, [r7, #12]
 80028e0:	60b9      	str	r1, [r7, #8]
 80028e2:	607a      	str	r2, [r7, #4]
 80028e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028e6:	2300      	movs	r3, #0
 80028e8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d101      	bne.n	80028f8 <HAL_DMA_Start_IT+0x20>
 80028f4:	2302      	movs	r3, #2
 80028f6:	e04b      	b.n	8002990 <HAL_DMA_Start_IT+0xb8>
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002906:	b2db      	uxtb	r3, r3
 8002908:	2b01      	cmp	r3, #1
 800290a:	d13a      	bne.n	8002982 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2202      	movs	r2, #2
 8002910:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2200      	movs	r2, #0
 8002918:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f022 0201 	bic.w	r2, r2, #1
 8002928:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	68b9      	ldr	r1, [r7, #8]
 8002930:	68f8      	ldr	r0, [r7, #12]
 8002932:	f000 f9eb 	bl	8002d0c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800293a:	2b00      	cmp	r3, #0
 800293c:	d008      	beq.n	8002950 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f042 020e 	orr.w	r2, r2, #14
 800294c:	601a      	str	r2, [r3, #0]
 800294e:	e00f      	b.n	8002970 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f022 0204 	bic.w	r2, r2, #4
 800295e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f042 020a 	orr.w	r2, r2, #10
 800296e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f042 0201 	orr.w	r2, r2, #1
 800297e:	601a      	str	r2, [r3, #0]
 8002980:	e005      	b.n	800298e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2200      	movs	r2, #0
 8002986:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800298a:	2302      	movs	r3, #2
 800298c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800298e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002990:	4618      	mov	r0, r3
 8002992:	3718      	adds	r7, #24
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}

08002998 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002998:	b480      	push	{r7}
 800299a:	b085      	sub	sp, #20
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029a0:	2300      	movs	r3, #0
 80029a2:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d008      	beq.n	80029c2 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2204      	movs	r2, #4
 80029b4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e020      	b.n	8002a04 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f022 020e 	bic.w	r2, r2, #14
 80029d0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f022 0201 	bic.w	r2, r2, #1
 80029e0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029ea:	2101      	movs	r1, #1
 80029ec:	fa01 f202 	lsl.w	r2, r1, r2
 80029f0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2201      	movs	r2, #1
 80029f6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002a02:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3714      	adds	r7, #20
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bc80      	pop	{r7}
 8002a0c:	4770      	bx	lr
	...

08002a10 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	d005      	beq.n	8002a34 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2204      	movs	r2, #4
 8002a2c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	73fb      	strb	r3, [r7, #15]
 8002a32:	e051      	b.n	8002ad8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f022 020e 	bic.w	r2, r2, #14
 8002a42:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f022 0201 	bic.w	r2, r2, #1
 8002a52:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a22      	ldr	r2, [pc, #136]	@ (8002ae4 <HAL_DMA_Abort_IT+0xd4>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d029      	beq.n	8002ab2 <HAL_DMA_Abort_IT+0xa2>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a21      	ldr	r2, [pc, #132]	@ (8002ae8 <HAL_DMA_Abort_IT+0xd8>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d022      	beq.n	8002aae <HAL_DMA_Abort_IT+0x9e>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a1f      	ldr	r2, [pc, #124]	@ (8002aec <HAL_DMA_Abort_IT+0xdc>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d01a      	beq.n	8002aa8 <HAL_DMA_Abort_IT+0x98>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a1e      	ldr	r2, [pc, #120]	@ (8002af0 <HAL_DMA_Abort_IT+0xe0>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d012      	beq.n	8002aa2 <HAL_DMA_Abort_IT+0x92>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a1c      	ldr	r2, [pc, #112]	@ (8002af4 <HAL_DMA_Abort_IT+0xe4>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d00a      	beq.n	8002a9c <HAL_DMA_Abort_IT+0x8c>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a1b      	ldr	r2, [pc, #108]	@ (8002af8 <HAL_DMA_Abort_IT+0xe8>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d102      	bne.n	8002a96 <HAL_DMA_Abort_IT+0x86>
 8002a90:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002a94:	e00e      	b.n	8002ab4 <HAL_DMA_Abort_IT+0xa4>
 8002a96:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002a9a:	e00b      	b.n	8002ab4 <HAL_DMA_Abort_IT+0xa4>
 8002a9c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002aa0:	e008      	b.n	8002ab4 <HAL_DMA_Abort_IT+0xa4>
 8002aa2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002aa6:	e005      	b.n	8002ab4 <HAL_DMA_Abort_IT+0xa4>
 8002aa8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002aac:	e002      	b.n	8002ab4 <HAL_DMA_Abort_IT+0xa4>
 8002aae:	2310      	movs	r3, #16
 8002ab0:	e000      	b.n	8002ab4 <HAL_DMA_Abort_IT+0xa4>
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	4a11      	ldr	r2, [pc, #68]	@ (8002afc <HAL_DMA_Abort_IT+0xec>)
 8002ab6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d003      	beq.n	8002ad8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	4798      	blx	r3
    } 
  }
  return status;
 8002ad8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3710      	adds	r7, #16
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	40020008 	.word	0x40020008
 8002ae8:	4002001c 	.word	0x4002001c
 8002aec:	40020030 	.word	0x40020030
 8002af0:	40020044 	.word	0x40020044
 8002af4:	40020058 	.word	0x40020058
 8002af8:	4002006c 	.word	0x4002006c
 8002afc:	40020000 	.word	0x40020000

08002b00 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b1c:	2204      	movs	r2, #4
 8002b1e:	409a      	lsls	r2, r3
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	4013      	ands	r3, r2
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d04f      	beq.n	8002bc8 <HAL_DMA_IRQHandler+0xc8>
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	f003 0304 	and.w	r3, r3, #4
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d04a      	beq.n	8002bc8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0320 	and.w	r3, r3, #32
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d107      	bne.n	8002b50 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f022 0204 	bic.w	r2, r2, #4
 8002b4e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a66      	ldr	r2, [pc, #408]	@ (8002cf0 <HAL_DMA_IRQHandler+0x1f0>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d029      	beq.n	8002bae <HAL_DMA_IRQHandler+0xae>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a65      	ldr	r2, [pc, #404]	@ (8002cf4 <HAL_DMA_IRQHandler+0x1f4>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d022      	beq.n	8002baa <HAL_DMA_IRQHandler+0xaa>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a63      	ldr	r2, [pc, #396]	@ (8002cf8 <HAL_DMA_IRQHandler+0x1f8>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d01a      	beq.n	8002ba4 <HAL_DMA_IRQHandler+0xa4>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a62      	ldr	r2, [pc, #392]	@ (8002cfc <HAL_DMA_IRQHandler+0x1fc>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d012      	beq.n	8002b9e <HAL_DMA_IRQHandler+0x9e>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a60      	ldr	r2, [pc, #384]	@ (8002d00 <HAL_DMA_IRQHandler+0x200>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d00a      	beq.n	8002b98 <HAL_DMA_IRQHandler+0x98>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a5f      	ldr	r2, [pc, #380]	@ (8002d04 <HAL_DMA_IRQHandler+0x204>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d102      	bne.n	8002b92 <HAL_DMA_IRQHandler+0x92>
 8002b8c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002b90:	e00e      	b.n	8002bb0 <HAL_DMA_IRQHandler+0xb0>
 8002b92:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002b96:	e00b      	b.n	8002bb0 <HAL_DMA_IRQHandler+0xb0>
 8002b98:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002b9c:	e008      	b.n	8002bb0 <HAL_DMA_IRQHandler+0xb0>
 8002b9e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002ba2:	e005      	b.n	8002bb0 <HAL_DMA_IRQHandler+0xb0>
 8002ba4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002ba8:	e002      	b.n	8002bb0 <HAL_DMA_IRQHandler+0xb0>
 8002baa:	2340      	movs	r3, #64	@ 0x40
 8002bac:	e000      	b.n	8002bb0 <HAL_DMA_IRQHandler+0xb0>
 8002bae:	2304      	movs	r3, #4
 8002bb0:	4a55      	ldr	r2, [pc, #340]	@ (8002d08 <HAL_DMA_IRQHandler+0x208>)
 8002bb2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	f000 8094 	beq.w	8002ce6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002bc6:	e08e      	b.n	8002ce6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bcc:	2202      	movs	r2, #2
 8002bce:	409a      	lsls	r2, r3
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d056      	beq.n	8002c86 <HAL_DMA_IRQHandler+0x186>
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	f003 0302 	and.w	r3, r3, #2
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d051      	beq.n	8002c86 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0320 	and.w	r3, r3, #32
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d10b      	bne.n	8002c08 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f022 020a 	bic.w	r2, r2, #10
 8002bfe:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2201      	movs	r2, #1
 8002c04:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a38      	ldr	r2, [pc, #224]	@ (8002cf0 <HAL_DMA_IRQHandler+0x1f0>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d029      	beq.n	8002c66 <HAL_DMA_IRQHandler+0x166>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a37      	ldr	r2, [pc, #220]	@ (8002cf4 <HAL_DMA_IRQHandler+0x1f4>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d022      	beq.n	8002c62 <HAL_DMA_IRQHandler+0x162>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a35      	ldr	r2, [pc, #212]	@ (8002cf8 <HAL_DMA_IRQHandler+0x1f8>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d01a      	beq.n	8002c5c <HAL_DMA_IRQHandler+0x15c>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a34      	ldr	r2, [pc, #208]	@ (8002cfc <HAL_DMA_IRQHandler+0x1fc>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d012      	beq.n	8002c56 <HAL_DMA_IRQHandler+0x156>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a32      	ldr	r2, [pc, #200]	@ (8002d00 <HAL_DMA_IRQHandler+0x200>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d00a      	beq.n	8002c50 <HAL_DMA_IRQHandler+0x150>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a31      	ldr	r2, [pc, #196]	@ (8002d04 <HAL_DMA_IRQHandler+0x204>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d102      	bne.n	8002c4a <HAL_DMA_IRQHandler+0x14a>
 8002c44:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002c48:	e00e      	b.n	8002c68 <HAL_DMA_IRQHandler+0x168>
 8002c4a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c4e:	e00b      	b.n	8002c68 <HAL_DMA_IRQHandler+0x168>
 8002c50:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002c54:	e008      	b.n	8002c68 <HAL_DMA_IRQHandler+0x168>
 8002c56:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002c5a:	e005      	b.n	8002c68 <HAL_DMA_IRQHandler+0x168>
 8002c5c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002c60:	e002      	b.n	8002c68 <HAL_DMA_IRQHandler+0x168>
 8002c62:	2320      	movs	r3, #32
 8002c64:	e000      	b.n	8002c68 <HAL_DMA_IRQHandler+0x168>
 8002c66:	2302      	movs	r3, #2
 8002c68:	4a27      	ldr	r2, [pc, #156]	@ (8002d08 <HAL_DMA_IRQHandler+0x208>)
 8002c6a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d034      	beq.n	8002ce6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002c84:	e02f      	b.n	8002ce6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c8a:	2208      	movs	r2, #8
 8002c8c:	409a      	lsls	r2, r3
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	4013      	ands	r3, r2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d028      	beq.n	8002ce8 <HAL_DMA_IRQHandler+0x1e8>
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	f003 0308 	and.w	r3, r3, #8
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d023      	beq.n	8002ce8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f022 020e 	bic.w	r2, r2, #14
 8002cae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cb8:	2101      	movs	r1, #1
 8002cba:	fa01 f202 	lsl.w	r2, r1, r2
 8002cbe:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d004      	beq.n	8002ce8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	4798      	blx	r3
    }
  }
  return;
 8002ce6:	bf00      	nop
 8002ce8:	bf00      	nop
}
 8002cea:	3710      	adds	r7, #16
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	40020008 	.word	0x40020008
 8002cf4:	4002001c 	.word	0x4002001c
 8002cf8:	40020030 	.word	0x40020030
 8002cfc:	40020044 	.word	0x40020044
 8002d00:	40020058 	.word	0x40020058
 8002d04:	4002006c 	.word	0x4002006c
 8002d08:	40020000 	.word	0x40020000

08002d0c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b085      	sub	sp, #20
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	60f8      	str	r0, [r7, #12]
 8002d14:	60b9      	str	r1, [r7, #8]
 8002d16:	607a      	str	r2, [r7, #4]
 8002d18:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d22:	2101      	movs	r1, #1
 8002d24:	fa01 f202 	lsl.w	r2, r1, r2
 8002d28:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	683a      	ldr	r2, [r7, #0]
 8002d30:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	2b10      	cmp	r3, #16
 8002d38:	d108      	bne.n	8002d4c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	68ba      	ldr	r2, [r7, #8]
 8002d48:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002d4a:	e007      	b.n	8002d5c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	68ba      	ldr	r2, [r7, #8]
 8002d52:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	60da      	str	r2, [r3, #12]
}
 8002d5c:	bf00      	nop
 8002d5e:	3714      	adds	r7, #20
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bc80      	pop	{r7}
 8002d64:	4770      	bx	lr
	...

08002d68 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b08b      	sub	sp, #44	@ 0x2c
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d72:	2300      	movs	r3, #0
 8002d74:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002d76:	2300      	movs	r3, #0
 8002d78:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d7a:	e169      	b.n	8003050 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d80:	fa02 f303 	lsl.w	r3, r2, r3
 8002d84:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	69fa      	ldr	r2, [r7, #28]
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002d90:	69ba      	ldr	r2, [r7, #24]
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	429a      	cmp	r2, r3
 8002d96:	f040 8158 	bne.w	800304a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	4a9a      	ldr	r2, [pc, #616]	@ (8003008 <HAL_GPIO_Init+0x2a0>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d05e      	beq.n	8002e62 <HAL_GPIO_Init+0xfa>
 8002da4:	4a98      	ldr	r2, [pc, #608]	@ (8003008 <HAL_GPIO_Init+0x2a0>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d875      	bhi.n	8002e96 <HAL_GPIO_Init+0x12e>
 8002daa:	4a98      	ldr	r2, [pc, #608]	@ (800300c <HAL_GPIO_Init+0x2a4>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d058      	beq.n	8002e62 <HAL_GPIO_Init+0xfa>
 8002db0:	4a96      	ldr	r2, [pc, #600]	@ (800300c <HAL_GPIO_Init+0x2a4>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d86f      	bhi.n	8002e96 <HAL_GPIO_Init+0x12e>
 8002db6:	4a96      	ldr	r2, [pc, #600]	@ (8003010 <HAL_GPIO_Init+0x2a8>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d052      	beq.n	8002e62 <HAL_GPIO_Init+0xfa>
 8002dbc:	4a94      	ldr	r2, [pc, #592]	@ (8003010 <HAL_GPIO_Init+0x2a8>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d869      	bhi.n	8002e96 <HAL_GPIO_Init+0x12e>
 8002dc2:	4a94      	ldr	r2, [pc, #592]	@ (8003014 <HAL_GPIO_Init+0x2ac>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d04c      	beq.n	8002e62 <HAL_GPIO_Init+0xfa>
 8002dc8:	4a92      	ldr	r2, [pc, #584]	@ (8003014 <HAL_GPIO_Init+0x2ac>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d863      	bhi.n	8002e96 <HAL_GPIO_Init+0x12e>
 8002dce:	4a92      	ldr	r2, [pc, #584]	@ (8003018 <HAL_GPIO_Init+0x2b0>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d046      	beq.n	8002e62 <HAL_GPIO_Init+0xfa>
 8002dd4:	4a90      	ldr	r2, [pc, #576]	@ (8003018 <HAL_GPIO_Init+0x2b0>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d85d      	bhi.n	8002e96 <HAL_GPIO_Init+0x12e>
 8002dda:	2b12      	cmp	r3, #18
 8002ddc:	d82a      	bhi.n	8002e34 <HAL_GPIO_Init+0xcc>
 8002dde:	2b12      	cmp	r3, #18
 8002de0:	d859      	bhi.n	8002e96 <HAL_GPIO_Init+0x12e>
 8002de2:	a201      	add	r2, pc, #4	@ (adr r2, 8002de8 <HAL_GPIO_Init+0x80>)
 8002de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002de8:	08002e63 	.word	0x08002e63
 8002dec:	08002e3d 	.word	0x08002e3d
 8002df0:	08002e4f 	.word	0x08002e4f
 8002df4:	08002e91 	.word	0x08002e91
 8002df8:	08002e97 	.word	0x08002e97
 8002dfc:	08002e97 	.word	0x08002e97
 8002e00:	08002e97 	.word	0x08002e97
 8002e04:	08002e97 	.word	0x08002e97
 8002e08:	08002e97 	.word	0x08002e97
 8002e0c:	08002e97 	.word	0x08002e97
 8002e10:	08002e97 	.word	0x08002e97
 8002e14:	08002e97 	.word	0x08002e97
 8002e18:	08002e97 	.word	0x08002e97
 8002e1c:	08002e97 	.word	0x08002e97
 8002e20:	08002e97 	.word	0x08002e97
 8002e24:	08002e97 	.word	0x08002e97
 8002e28:	08002e97 	.word	0x08002e97
 8002e2c:	08002e45 	.word	0x08002e45
 8002e30:	08002e59 	.word	0x08002e59
 8002e34:	4a79      	ldr	r2, [pc, #484]	@ (800301c <HAL_GPIO_Init+0x2b4>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d013      	beq.n	8002e62 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002e3a:	e02c      	b.n	8002e96 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	623b      	str	r3, [r7, #32]
          break;
 8002e42:	e029      	b.n	8002e98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	3304      	adds	r3, #4
 8002e4a:	623b      	str	r3, [r7, #32]
          break;
 8002e4c:	e024      	b.n	8002e98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	3308      	adds	r3, #8
 8002e54:	623b      	str	r3, [r7, #32]
          break;
 8002e56:	e01f      	b.n	8002e98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	330c      	adds	r3, #12
 8002e5e:	623b      	str	r3, [r7, #32]
          break;
 8002e60:	e01a      	b.n	8002e98 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d102      	bne.n	8002e70 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002e6a:	2304      	movs	r3, #4
 8002e6c:	623b      	str	r3, [r7, #32]
          break;
 8002e6e:	e013      	b.n	8002e98 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d105      	bne.n	8002e84 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e78:	2308      	movs	r3, #8
 8002e7a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	69fa      	ldr	r2, [r7, #28]
 8002e80:	611a      	str	r2, [r3, #16]
          break;
 8002e82:	e009      	b.n	8002e98 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e84:	2308      	movs	r3, #8
 8002e86:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	69fa      	ldr	r2, [r7, #28]
 8002e8c:	615a      	str	r2, [r3, #20]
          break;
 8002e8e:	e003      	b.n	8002e98 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002e90:	2300      	movs	r3, #0
 8002e92:	623b      	str	r3, [r7, #32]
          break;
 8002e94:	e000      	b.n	8002e98 <HAL_GPIO_Init+0x130>
          break;
 8002e96:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	2bff      	cmp	r3, #255	@ 0xff
 8002e9c:	d801      	bhi.n	8002ea2 <HAL_GPIO_Init+0x13a>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	e001      	b.n	8002ea6 <HAL_GPIO_Init+0x13e>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	3304      	adds	r3, #4
 8002ea6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	2bff      	cmp	r3, #255	@ 0xff
 8002eac:	d802      	bhi.n	8002eb4 <HAL_GPIO_Init+0x14c>
 8002eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	e002      	b.n	8002eba <HAL_GPIO_Init+0x152>
 8002eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb6:	3b08      	subs	r3, #8
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	210f      	movs	r1, #15
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ec8:	43db      	mvns	r3, r3
 8002eca:	401a      	ands	r2, r3
 8002ecc:	6a39      	ldr	r1, [r7, #32]
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ed4:	431a      	orrs	r2, r3
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	f000 80b1 	beq.w	800304a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002ee8:	4b4d      	ldr	r3, [pc, #308]	@ (8003020 <HAL_GPIO_Init+0x2b8>)
 8002eea:	699b      	ldr	r3, [r3, #24]
 8002eec:	4a4c      	ldr	r2, [pc, #304]	@ (8003020 <HAL_GPIO_Init+0x2b8>)
 8002eee:	f043 0301 	orr.w	r3, r3, #1
 8002ef2:	6193      	str	r3, [r2, #24]
 8002ef4:	4b4a      	ldr	r3, [pc, #296]	@ (8003020 <HAL_GPIO_Init+0x2b8>)
 8002ef6:	699b      	ldr	r3, [r3, #24]
 8002ef8:	f003 0301 	and.w	r3, r3, #1
 8002efc:	60bb      	str	r3, [r7, #8]
 8002efe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002f00:	4a48      	ldr	r2, [pc, #288]	@ (8003024 <HAL_GPIO_Init+0x2bc>)
 8002f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f04:	089b      	lsrs	r3, r3, #2
 8002f06:	3302      	adds	r3, #2
 8002f08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f0c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f10:	f003 0303 	and.w	r3, r3, #3
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	220f      	movs	r2, #15
 8002f18:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1c:	43db      	mvns	r3, r3
 8002f1e:	68fa      	ldr	r2, [r7, #12]
 8002f20:	4013      	ands	r3, r2
 8002f22:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	4a40      	ldr	r2, [pc, #256]	@ (8003028 <HAL_GPIO_Init+0x2c0>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d013      	beq.n	8002f54 <HAL_GPIO_Init+0x1ec>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	4a3f      	ldr	r2, [pc, #252]	@ (800302c <HAL_GPIO_Init+0x2c4>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d00d      	beq.n	8002f50 <HAL_GPIO_Init+0x1e8>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	4a3e      	ldr	r2, [pc, #248]	@ (8003030 <HAL_GPIO_Init+0x2c8>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d007      	beq.n	8002f4c <HAL_GPIO_Init+0x1e4>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	4a3d      	ldr	r2, [pc, #244]	@ (8003034 <HAL_GPIO_Init+0x2cc>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d101      	bne.n	8002f48 <HAL_GPIO_Init+0x1e0>
 8002f44:	2303      	movs	r3, #3
 8002f46:	e006      	b.n	8002f56 <HAL_GPIO_Init+0x1ee>
 8002f48:	2304      	movs	r3, #4
 8002f4a:	e004      	b.n	8002f56 <HAL_GPIO_Init+0x1ee>
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	e002      	b.n	8002f56 <HAL_GPIO_Init+0x1ee>
 8002f50:	2301      	movs	r3, #1
 8002f52:	e000      	b.n	8002f56 <HAL_GPIO_Init+0x1ee>
 8002f54:	2300      	movs	r3, #0
 8002f56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f58:	f002 0203 	and.w	r2, r2, #3
 8002f5c:	0092      	lsls	r2, r2, #2
 8002f5e:	4093      	lsls	r3, r2
 8002f60:	68fa      	ldr	r2, [r7, #12]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002f66:	492f      	ldr	r1, [pc, #188]	@ (8003024 <HAL_GPIO_Init+0x2bc>)
 8002f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f6a:	089b      	lsrs	r3, r3, #2
 8002f6c:	3302      	adds	r3, #2
 8002f6e:	68fa      	ldr	r2, [r7, #12]
 8002f70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d006      	beq.n	8002f8e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002f80:	4b2d      	ldr	r3, [pc, #180]	@ (8003038 <HAL_GPIO_Init+0x2d0>)
 8002f82:	689a      	ldr	r2, [r3, #8]
 8002f84:	492c      	ldr	r1, [pc, #176]	@ (8003038 <HAL_GPIO_Init+0x2d0>)
 8002f86:	69bb      	ldr	r3, [r7, #24]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	608b      	str	r3, [r1, #8]
 8002f8c:	e006      	b.n	8002f9c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002f8e:	4b2a      	ldr	r3, [pc, #168]	@ (8003038 <HAL_GPIO_Init+0x2d0>)
 8002f90:	689a      	ldr	r2, [r3, #8]
 8002f92:	69bb      	ldr	r3, [r7, #24]
 8002f94:	43db      	mvns	r3, r3
 8002f96:	4928      	ldr	r1, [pc, #160]	@ (8003038 <HAL_GPIO_Init+0x2d0>)
 8002f98:	4013      	ands	r3, r2
 8002f9a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d006      	beq.n	8002fb6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002fa8:	4b23      	ldr	r3, [pc, #140]	@ (8003038 <HAL_GPIO_Init+0x2d0>)
 8002faa:	68da      	ldr	r2, [r3, #12]
 8002fac:	4922      	ldr	r1, [pc, #136]	@ (8003038 <HAL_GPIO_Init+0x2d0>)
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	60cb      	str	r3, [r1, #12]
 8002fb4:	e006      	b.n	8002fc4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002fb6:	4b20      	ldr	r3, [pc, #128]	@ (8003038 <HAL_GPIO_Init+0x2d0>)
 8002fb8:	68da      	ldr	r2, [r3, #12]
 8002fba:	69bb      	ldr	r3, [r7, #24]
 8002fbc:	43db      	mvns	r3, r3
 8002fbe:	491e      	ldr	r1, [pc, #120]	@ (8003038 <HAL_GPIO_Init+0x2d0>)
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d006      	beq.n	8002fde <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002fd0:	4b19      	ldr	r3, [pc, #100]	@ (8003038 <HAL_GPIO_Init+0x2d0>)
 8002fd2:	685a      	ldr	r2, [r3, #4]
 8002fd4:	4918      	ldr	r1, [pc, #96]	@ (8003038 <HAL_GPIO_Init+0x2d0>)
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	604b      	str	r3, [r1, #4]
 8002fdc:	e006      	b.n	8002fec <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002fde:	4b16      	ldr	r3, [pc, #88]	@ (8003038 <HAL_GPIO_Init+0x2d0>)
 8002fe0:	685a      	ldr	r2, [r3, #4]
 8002fe2:	69bb      	ldr	r3, [r7, #24]
 8002fe4:	43db      	mvns	r3, r3
 8002fe6:	4914      	ldr	r1, [pc, #80]	@ (8003038 <HAL_GPIO_Init+0x2d0>)
 8002fe8:	4013      	ands	r3, r2
 8002fea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d021      	beq.n	800303c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002ff8:	4b0f      	ldr	r3, [pc, #60]	@ (8003038 <HAL_GPIO_Init+0x2d0>)
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	490e      	ldr	r1, [pc, #56]	@ (8003038 <HAL_GPIO_Init+0x2d0>)
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	4313      	orrs	r3, r2
 8003002:	600b      	str	r3, [r1, #0]
 8003004:	e021      	b.n	800304a <HAL_GPIO_Init+0x2e2>
 8003006:	bf00      	nop
 8003008:	10320000 	.word	0x10320000
 800300c:	10310000 	.word	0x10310000
 8003010:	10220000 	.word	0x10220000
 8003014:	10210000 	.word	0x10210000
 8003018:	10120000 	.word	0x10120000
 800301c:	10110000 	.word	0x10110000
 8003020:	40021000 	.word	0x40021000
 8003024:	40010000 	.word	0x40010000
 8003028:	40010800 	.word	0x40010800
 800302c:	40010c00 	.word	0x40010c00
 8003030:	40011000 	.word	0x40011000
 8003034:	40011400 	.word	0x40011400
 8003038:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800303c:	4b0b      	ldr	r3, [pc, #44]	@ (800306c <HAL_GPIO_Init+0x304>)
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	43db      	mvns	r3, r3
 8003044:	4909      	ldr	r1, [pc, #36]	@ (800306c <HAL_GPIO_Init+0x304>)
 8003046:	4013      	ands	r3, r2
 8003048:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800304a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800304c:	3301      	adds	r3, #1
 800304e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003056:	fa22 f303 	lsr.w	r3, r2, r3
 800305a:	2b00      	cmp	r3, #0
 800305c:	f47f ae8e 	bne.w	8002d7c <HAL_GPIO_Init+0x14>
  }
}
 8003060:	bf00      	nop
 8003062:	bf00      	nop
 8003064:	372c      	adds	r7, #44	@ 0x2c
 8003066:	46bd      	mov	sp, r7
 8003068:	bc80      	pop	{r7}
 800306a:	4770      	bx	lr
 800306c:	40010400 	.word	0x40010400

08003070 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	460b      	mov	r3, r1
 800307a:	807b      	strh	r3, [r7, #2]
 800307c:	4613      	mov	r3, r2
 800307e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003080:	787b      	ldrb	r3, [r7, #1]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d003      	beq.n	800308e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003086:	887a      	ldrh	r2, [r7, #2]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800308c:	e003      	b.n	8003096 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800308e:	887b      	ldrh	r3, [r7, #2]
 8003090:	041a      	lsls	r2, r3, #16
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	611a      	str	r2, [r3, #16]
}
 8003096:	bf00      	nop
 8003098:	370c      	adds	r7, #12
 800309a:	46bd      	mov	sp, r7
 800309c:	bc80      	pop	{r7}
 800309e:	4770      	bx	lr

080030a0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b085      	sub	sp, #20
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	460b      	mov	r3, r1
 80030aa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80030b2:	887a      	ldrh	r2, [r7, #2]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	4013      	ands	r3, r2
 80030b8:	041a      	lsls	r2, r3, #16
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	43d9      	mvns	r1, r3
 80030be:	887b      	ldrh	r3, [r7, #2]
 80030c0:	400b      	ands	r3, r1
 80030c2:	431a      	orrs	r2, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	611a      	str	r2, [r3, #16]
}
 80030c8:	bf00      	nop
 80030ca:	3714      	adds	r7, #20
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bc80      	pop	{r7}
 80030d0:	4770      	bx	lr
	...

080030d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b086      	sub	sp, #24
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d101      	bne.n	80030e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e272      	b.n	80035cc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0301 	and.w	r3, r3, #1
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	f000 8087 	beq.w	8003202 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80030f4:	4b92      	ldr	r3, [pc, #584]	@ (8003340 <HAL_RCC_OscConfig+0x26c>)
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f003 030c 	and.w	r3, r3, #12
 80030fc:	2b04      	cmp	r3, #4
 80030fe:	d00c      	beq.n	800311a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003100:	4b8f      	ldr	r3, [pc, #572]	@ (8003340 <HAL_RCC_OscConfig+0x26c>)
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f003 030c 	and.w	r3, r3, #12
 8003108:	2b08      	cmp	r3, #8
 800310a:	d112      	bne.n	8003132 <HAL_RCC_OscConfig+0x5e>
 800310c:	4b8c      	ldr	r3, [pc, #560]	@ (8003340 <HAL_RCC_OscConfig+0x26c>)
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003114:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003118:	d10b      	bne.n	8003132 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800311a:	4b89      	ldr	r3, [pc, #548]	@ (8003340 <HAL_RCC_OscConfig+0x26c>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d06c      	beq.n	8003200 <HAL_RCC_OscConfig+0x12c>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d168      	bne.n	8003200 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e24c      	b.n	80035cc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800313a:	d106      	bne.n	800314a <HAL_RCC_OscConfig+0x76>
 800313c:	4b80      	ldr	r3, [pc, #512]	@ (8003340 <HAL_RCC_OscConfig+0x26c>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a7f      	ldr	r2, [pc, #508]	@ (8003340 <HAL_RCC_OscConfig+0x26c>)
 8003142:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003146:	6013      	str	r3, [r2, #0]
 8003148:	e02e      	b.n	80031a8 <HAL_RCC_OscConfig+0xd4>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d10c      	bne.n	800316c <HAL_RCC_OscConfig+0x98>
 8003152:	4b7b      	ldr	r3, [pc, #492]	@ (8003340 <HAL_RCC_OscConfig+0x26c>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a7a      	ldr	r2, [pc, #488]	@ (8003340 <HAL_RCC_OscConfig+0x26c>)
 8003158:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800315c:	6013      	str	r3, [r2, #0]
 800315e:	4b78      	ldr	r3, [pc, #480]	@ (8003340 <HAL_RCC_OscConfig+0x26c>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a77      	ldr	r2, [pc, #476]	@ (8003340 <HAL_RCC_OscConfig+0x26c>)
 8003164:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003168:	6013      	str	r3, [r2, #0]
 800316a:	e01d      	b.n	80031a8 <HAL_RCC_OscConfig+0xd4>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003174:	d10c      	bne.n	8003190 <HAL_RCC_OscConfig+0xbc>
 8003176:	4b72      	ldr	r3, [pc, #456]	@ (8003340 <HAL_RCC_OscConfig+0x26c>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a71      	ldr	r2, [pc, #452]	@ (8003340 <HAL_RCC_OscConfig+0x26c>)
 800317c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003180:	6013      	str	r3, [r2, #0]
 8003182:	4b6f      	ldr	r3, [pc, #444]	@ (8003340 <HAL_RCC_OscConfig+0x26c>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a6e      	ldr	r2, [pc, #440]	@ (8003340 <HAL_RCC_OscConfig+0x26c>)
 8003188:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800318c:	6013      	str	r3, [r2, #0]
 800318e:	e00b      	b.n	80031a8 <HAL_RCC_OscConfig+0xd4>
 8003190:	4b6b      	ldr	r3, [pc, #428]	@ (8003340 <HAL_RCC_OscConfig+0x26c>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a6a      	ldr	r2, [pc, #424]	@ (8003340 <HAL_RCC_OscConfig+0x26c>)
 8003196:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800319a:	6013      	str	r3, [r2, #0]
 800319c:	4b68      	ldr	r3, [pc, #416]	@ (8003340 <HAL_RCC_OscConfig+0x26c>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a67      	ldr	r2, [pc, #412]	@ (8003340 <HAL_RCC_OscConfig+0x26c>)
 80031a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80031a6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d013      	beq.n	80031d8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031b0:	f7ff f9fc 	bl	80025ac <HAL_GetTick>
 80031b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031b6:	e008      	b.n	80031ca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031b8:	f7ff f9f8 	bl	80025ac <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	2b64      	cmp	r3, #100	@ 0x64
 80031c4:	d901      	bls.n	80031ca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e200      	b.n	80035cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ca:	4b5d      	ldr	r3, [pc, #372]	@ (8003340 <HAL_RCC_OscConfig+0x26c>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d0f0      	beq.n	80031b8 <HAL_RCC_OscConfig+0xe4>
 80031d6:	e014      	b.n	8003202 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031d8:	f7ff f9e8 	bl	80025ac <HAL_GetTick>
 80031dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031de:	e008      	b.n	80031f2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031e0:	f7ff f9e4 	bl	80025ac <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	2b64      	cmp	r3, #100	@ 0x64
 80031ec:	d901      	bls.n	80031f2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e1ec      	b.n	80035cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031f2:	4b53      	ldr	r3, [pc, #332]	@ (8003340 <HAL_RCC_OscConfig+0x26c>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d1f0      	bne.n	80031e0 <HAL_RCC_OscConfig+0x10c>
 80031fe:	e000      	b.n	8003202 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003200:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0302 	and.w	r3, r3, #2
 800320a:	2b00      	cmp	r3, #0
 800320c:	d063      	beq.n	80032d6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800320e:	4b4c      	ldr	r3, [pc, #304]	@ (8003340 <HAL_RCC_OscConfig+0x26c>)
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	f003 030c 	and.w	r3, r3, #12
 8003216:	2b00      	cmp	r3, #0
 8003218:	d00b      	beq.n	8003232 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800321a:	4b49      	ldr	r3, [pc, #292]	@ (8003340 <HAL_RCC_OscConfig+0x26c>)
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f003 030c 	and.w	r3, r3, #12
 8003222:	2b08      	cmp	r3, #8
 8003224:	d11c      	bne.n	8003260 <HAL_RCC_OscConfig+0x18c>
 8003226:	4b46      	ldr	r3, [pc, #280]	@ (8003340 <HAL_RCC_OscConfig+0x26c>)
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d116      	bne.n	8003260 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003232:	4b43      	ldr	r3, [pc, #268]	@ (8003340 <HAL_RCC_OscConfig+0x26c>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0302 	and.w	r3, r3, #2
 800323a:	2b00      	cmp	r3, #0
 800323c:	d005      	beq.n	800324a <HAL_RCC_OscConfig+0x176>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	691b      	ldr	r3, [r3, #16]
 8003242:	2b01      	cmp	r3, #1
 8003244:	d001      	beq.n	800324a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e1c0      	b.n	80035cc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800324a:	4b3d      	ldr	r3, [pc, #244]	@ (8003340 <HAL_RCC_OscConfig+0x26c>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	695b      	ldr	r3, [r3, #20]
 8003256:	00db      	lsls	r3, r3, #3
 8003258:	4939      	ldr	r1, [pc, #228]	@ (8003340 <HAL_RCC_OscConfig+0x26c>)
 800325a:	4313      	orrs	r3, r2
 800325c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800325e:	e03a      	b.n	80032d6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	691b      	ldr	r3, [r3, #16]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d020      	beq.n	80032aa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003268:	4b36      	ldr	r3, [pc, #216]	@ (8003344 <HAL_RCC_OscConfig+0x270>)
 800326a:	2201      	movs	r2, #1
 800326c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800326e:	f7ff f99d 	bl	80025ac <HAL_GetTick>
 8003272:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003274:	e008      	b.n	8003288 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003276:	f7ff f999 	bl	80025ac <HAL_GetTick>
 800327a:	4602      	mov	r2, r0
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	2b02      	cmp	r3, #2
 8003282:	d901      	bls.n	8003288 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003284:	2303      	movs	r3, #3
 8003286:	e1a1      	b.n	80035cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003288:	4b2d      	ldr	r3, [pc, #180]	@ (8003340 <HAL_RCC_OscConfig+0x26c>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0302 	and.w	r3, r3, #2
 8003290:	2b00      	cmp	r3, #0
 8003292:	d0f0      	beq.n	8003276 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003294:	4b2a      	ldr	r3, [pc, #168]	@ (8003340 <HAL_RCC_OscConfig+0x26c>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	695b      	ldr	r3, [r3, #20]
 80032a0:	00db      	lsls	r3, r3, #3
 80032a2:	4927      	ldr	r1, [pc, #156]	@ (8003340 <HAL_RCC_OscConfig+0x26c>)
 80032a4:	4313      	orrs	r3, r2
 80032a6:	600b      	str	r3, [r1, #0]
 80032a8:	e015      	b.n	80032d6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032aa:	4b26      	ldr	r3, [pc, #152]	@ (8003344 <HAL_RCC_OscConfig+0x270>)
 80032ac:	2200      	movs	r2, #0
 80032ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b0:	f7ff f97c 	bl	80025ac <HAL_GetTick>
 80032b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032b6:	e008      	b.n	80032ca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032b8:	f7ff f978 	bl	80025ac <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	d901      	bls.n	80032ca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	e180      	b.n	80035cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032ca:	4b1d      	ldr	r3, [pc, #116]	@ (8003340 <HAL_RCC_OscConfig+0x26c>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0302 	and.w	r3, r3, #2
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d1f0      	bne.n	80032b8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0308 	and.w	r3, r3, #8
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d03a      	beq.n	8003358 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	699b      	ldr	r3, [r3, #24]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d019      	beq.n	800331e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032ea:	4b17      	ldr	r3, [pc, #92]	@ (8003348 <HAL_RCC_OscConfig+0x274>)
 80032ec:	2201      	movs	r2, #1
 80032ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032f0:	f7ff f95c 	bl	80025ac <HAL_GetTick>
 80032f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032f6:	e008      	b.n	800330a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032f8:	f7ff f958 	bl	80025ac <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	2b02      	cmp	r3, #2
 8003304:	d901      	bls.n	800330a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e160      	b.n	80035cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800330a:	4b0d      	ldr	r3, [pc, #52]	@ (8003340 <HAL_RCC_OscConfig+0x26c>)
 800330c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800330e:	f003 0302 	and.w	r3, r3, #2
 8003312:	2b00      	cmp	r3, #0
 8003314:	d0f0      	beq.n	80032f8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003316:	2001      	movs	r0, #1
 8003318:	f000 face 	bl	80038b8 <RCC_Delay>
 800331c:	e01c      	b.n	8003358 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800331e:	4b0a      	ldr	r3, [pc, #40]	@ (8003348 <HAL_RCC_OscConfig+0x274>)
 8003320:	2200      	movs	r2, #0
 8003322:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003324:	f7ff f942 	bl	80025ac <HAL_GetTick>
 8003328:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800332a:	e00f      	b.n	800334c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800332c:	f7ff f93e 	bl	80025ac <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	2b02      	cmp	r3, #2
 8003338:	d908      	bls.n	800334c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	e146      	b.n	80035cc <HAL_RCC_OscConfig+0x4f8>
 800333e:	bf00      	nop
 8003340:	40021000 	.word	0x40021000
 8003344:	42420000 	.word	0x42420000
 8003348:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800334c:	4b92      	ldr	r3, [pc, #584]	@ (8003598 <HAL_RCC_OscConfig+0x4c4>)
 800334e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003350:	f003 0302 	and.w	r3, r3, #2
 8003354:	2b00      	cmp	r3, #0
 8003356:	d1e9      	bne.n	800332c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0304 	and.w	r3, r3, #4
 8003360:	2b00      	cmp	r3, #0
 8003362:	f000 80a6 	beq.w	80034b2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003366:	2300      	movs	r3, #0
 8003368:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800336a:	4b8b      	ldr	r3, [pc, #556]	@ (8003598 <HAL_RCC_OscConfig+0x4c4>)
 800336c:	69db      	ldr	r3, [r3, #28]
 800336e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d10d      	bne.n	8003392 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003376:	4b88      	ldr	r3, [pc, #544]	@ (8003598 <HAL_RCC_OscConfig+0x4c4>)
 8003378:	69db      	ldr	r3, [r3, #28]
 800337a:	4a87      	ldr	r2, [pc, #540]	@ (8003598 <HAL_RCC_OscConfig+0x4c4>)
 800337c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003380:	61d3      	str	r3, [r2, #28]
 8003382:	4b85      	ldr	r3, [pc, #532]	@ (8003598 <HAL_RCC_OscConfig+0x4c4>)
 8003384:	69db      	ldr	r3, [r3, #28]
 8003386:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800338a:	60bb      	str	r3, [r7, #8]
 800338c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800338e:	2301      	movs	r3, #1
 8003390:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003392:	4b82      	ldr	r3, [pc, #520]	@ (800359c <HAL_RCC_OscConfig+0x4c8>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800339a:	2b00      	cmp	r3, #0
 800339c:	d118      	bne.n	80033d0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800339e:	4b7f      	ldr	r3, [pc, #508]	@ (800359c <HAL_RCC_OscConfig+0x4c8>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a7e      	ldr	r2, [pc, #504]	@ (800359c <HAL_RCC_OscConfig+0x4c8>)
 80033a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033aa:	f7ff f8ff 	bl	80025ac <HAL_GetTick>
 80033ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033b0:	e008      	b.n	80033c4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033b2:	f7ff f8fb 	bl	80025ac <HAL_GetTick>
 80033b6:	4602      	mov	r2, r0
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	2b64      	cmp	r3, #100	@ 0x64
 80033be:	d901      	bls.n	80033c4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80033c0:	2303      	movs	r3, #3
 80033c2:	e103      	b.n	80035cc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033c4:	4b75      	ldr	r3, [pc, #468]	@ (800359c <HAL_RCC_OscConfig+0x4c8>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d0f0      	beq.n	80033b2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d106      	bne.n	80033e6 <HAL_RCC_OscConfig+0x312>
 80033d8:	4b6f      	ldr	r3, [pc, #444]	@ (8003598 <HAL_RCC_OscConfig+0x4c4>)
 80033da:	6a1b      	ldr	r3, [r3, #32]
 80033dc:	4a6e      	ldr	r2, [pc, #440]	@ (8003598 <HAL_RCC_OscConfig+0x4c4>)
 80033de:	f043 0301 	orr.w	r3, r3, #1
 80033e2:	6213      	str	r3, [r2, #32]
 80033e4:	e02d      	b.n	8003442 <HAL_RCC_OscConfig+0x36e>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	68db      	ldr	r3, [r3, #12]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d10c      	bne.n	8003408 <HAL_RCC_OscConfig+0x334>
 80033ee:	4b6a      	ldr	r3, [pc, #424]	@ (8003598 <HAL_RCC_OscConfig+0x4c4>)
 80033f0:	6a1b      	ldr	r3, [r3, #32]
 80033f2:	4a69      	ldr	r2, [pc, #420]	@ (8003598 <HAL_RCC_OscConfig+0x4c4>)
 80033f4:	f023 0301 	bic.w	r3, r3, #1
 80033f8:	6213      	str	r3, [r2, #32]
 80033fa:	4b67      	ldr	r3, [pc, #412]	@ (8003598 <HAL_RCC_OscConfig+0x4c4>)
 80033fc:	6a1b      	ldr	r3, [r3, #32]
 80033fe:	4a66      	ldr	r2, [pc, #408]	@ (8003598 <HAL_RCC_OscConfig+0x4c4>)
 8003400:	f023 0304 	bic.w	r3, r3, #4
 8003404:	6213      	str	r3, [r2, #32]
 8003406:	e01c      	b.n	8003442 <HAL_RCC_OscConfig+0x36e>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	2b05      	cmp	r3, #5
 800340e:	d10c      	bne.n	800342a <HAL_RCC_OscConfig+0x356>
 8003410:	4b61      	ldr	r3, [pc, #388]	@ (8003598 <HAL_RCC_OscConfig+0x4c4>)
 8003412:	6a1b      	ldr	r3, [r3, #32]
 8003414:	4a60      	ldr	r2, [pc, #384]	@ (8003598 <HAL_RCC_OscConfig+0x4c4>)
 8003416:	f043 0304 	orr.w	r3, r3, #4
 800341a:	6213      	str	r3, [r2, #32]
 800341c:	4b5e      	ldr	r3, [pc, #376]	@ (8003598 <HAL_RCC_OscConfig+0x4c4>)
 800341e:	6a1b      	ldr	r3, [r3, #32]
 8003420:	4a5d      	ldr	r2, [pc, #372]	@ (8003598 <HAL_RCC_OscConfig+0x4c4>)
 8003422:	f043 0301 	orr.w	r3, r3, #1
 8003426:	6213      	str	r3, [r2, #32]
 8003428:	e00b      	b.n	8003442 <HAL_RCC_OscConfig+0x36e>
 800342a:	4b5b      	ldr	r3, [pc, #364]	@ (8003598 <HAL_RCC_OscConfig+0x4c4>)
 800342c:	6a1b      	ldr	r3, [r3, #32]
 800342e:	4a5a      	ldr	r2, [pc, #360]	@ (8003598 <HAL_RCC_OscConfig+0x4c4>)
 8003430:	f023 0301 	bic.w	r3, r3, #1
 8003434:	6213      	str	r3, [r2, #32]
 8003436:	4b58      	ldr	r3, [pc, #352]	@ (8003598 <HAL_RCC_OscConfig+0x4c4>)
 8003438:	6a1b      	ldr	r3, [r3, #32]
 800343a:	4a57      	ldr	r2, [pc, #348]	@ (8003598 <HAL_RCC_OscConfig+0x4c4>)
 800343c:	f023 0304 	bic.w	r3, r3, #4
 8003440:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d015      	beq.n	8003476 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800344a:	f7ff f8af 	bl	80025ac <HAL_GetTick>
 800344e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003450:	e00a      	b.n	8003468 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003452:	f7ff f8ab 	bl	80025ac <HAL_GetTick>
 8003456:	4602      	mov	r2, r0
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003460:	4293      	cmp	r3, r2
 8003462:	d901      	bls.n	8003468 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003464:	2303      	movs	r3, #3
 8003466:	e0b1      	b.n	80035cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003468:	4b4b      	ldr	r3, [pc, #300]	@ (8003598 <HAL_RCC_OscConfig+0x4c4>)
 800346a:	6a1b      	ldr	r3, [r3, #32]
 800346c:	f003 0302 	and.w	r3, r3, #2
 8003470:	2b00      	cmp	r3, #0
 8003472:	d0ee      	beq.n	8003452 <HAL_RCC_OscConfig+0x37e>
 8003474:	e014      	b.n	80034a0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003476:	f7ff f899 	bl	80025ac <HAL_GetTick>
 800347a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800347c:	e00a      	b.n	8003494 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800347e:	f7ff f895 	bl	80025ac <HAL_GetTick>
 8003482:	4602      	mov	r2, r0
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	f241 3288 	movw	r2, #5000	@ 0x1388
 800348c:	4293      	cmp	r3, r2
 800348e:	d901      	bls.n	8003494 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003490:	2303      	movs	r3, #3
 8003492:	e09b      	b.n	80035cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003494:	4b40      	ldr	r3, [pc, #256]	@ (8003598 <HAL_RCC_OscConfig+0x4c4>)
 8003496:	6a1b      	ldr	r3, [r3, #32]
 8003498:	f003 0302 	and.w	r3, r3, #2
 800349c:	2b00      	cmp	r3, #0
 800349e:	d1ee      	bne.n	800347e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80034a0:	7dfb      	ldrb	r3, [r7, #23]
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d105      	bne.n	80034b2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034a6:	4b3c      	ldr	r3, [pc, #240]	@ (8003598 <HAL_RCC_OscConfig+0x4c4>)
 80034a8:	69db      	ldr	r3, [r3, #28]
 80034aa:	4a3b      	ldr	r2, [pc, #236]	@ (8003598 <HAL_RCC_OscConfig+0x4c4>)
 80034ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034b0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	69db      	ldr	r3, [r3, #28]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	f000 8087 	beq.w	80035ca <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034bc:	4b36      	ldr	r3, [pc, #216]	@ (8003598 <HAL_RCC_OscConfig+0x4c4>)
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f003 030c 	and.w	r3, r3, #12
 80034c4:	2b08      	cmp	r3, #8
 80034c6:	d061      	beq.n	800358c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	69db      	ldr	r3, [r3, #28]
 80034cc:	2b02      	cmp	r3, #2
 80034ce:	d146      	bne.n	800355e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034d0:	4b33      	ldr	r3, [pc, #204]	@ (80035a0 <HAL_RCC_OscConfig+0x4cc>)
 80034d2:	2200      	movs	r2, #0
 80034d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034d6:	f7ff f869 	bl	80025ac <HAL_GetTick>
 80034da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034dc:	e008      	b.n	80034f0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034de:	f7ff f865 	bl	80025ac <HAL_GetTick>
 80034e2:	4602      	mov	r2, r0
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	2b02      	cmp	r3, #2
 80034ea:	d901      	bls.n	80034f0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80034ec:	2303      	movs	r3, #3
 80034ee:	e06d      	b.n	80035cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034f0:	4b29      	ldr	r3, [pc, #164]	@ (8003598 <HAL_RCC_OscConfig+0x4c4>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d1f0      	bne.n	80034de <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6a1b      	ldr	r3, [r3, #32]
 8003500:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003504:	d108      	bne.n	8003518 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003506:	4b24      	ldr	r3, [pc, #144]	@ (8003598 <HAL_RCC_OscConfig+0x4c4>)
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	4921      	ldr	r1, [pc, #132]	@ (8003598 <HAL_RCC_OscConfig+0x4c4>)
 8003514:	4313      	orrs	r3, r2
 8003516:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003518:	4b1f      	ldr	r3, [pc, #124]	@ (8003598 <HAL_RCC_OscConfig+0x4c4>)
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6a19      	ldr	r1, [r3, #32]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003528:	430b      	orrs	r3, r1
 800352a:	491b      	ldr	r1, [pc, #108]	@ (8003598 <HAL_RCC_OscConfig+0x4c4>)
 800352c:	4313      	orrs	r3, r2
 800352e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003530:	4b1b      	ldr	r3, [pc, #108]	@ (80035a0 <HAL_RCC_OscConfig+0x4cc>)
 8003532:	2201      	movs	r2, #1
 8003534:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003536:	f7ff f839 	bl	80025ac <HAL_GetTick>
 800353a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800353c:	e008      	b.n	8003550 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800353e:	f7ff f835 	bl	80025ac <HAL_GetTick>
 8003542:	4602      	mov	r2, r0
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	2b02      	cmp	r3, #2
 800354a:	d901      	bls.n	8003550 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800354c:	2303      	movs	r3, #3
 800354e:	e03d      	b.n	80035cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003550:	4b11      	ldr	r3, [pc, #68]	@ (8003598 <HAL_RCC_OscConfig+0x4c4>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003558:	2b00      	cmp	r3, #0
 800355a:	d0f0      	beq.n	800353e <HAL_RCC_OscConfig+0x46a>
 800355c:	e035      	b.n	80035ca <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800355e:	4b10      	ldr	r3, [pc, #64]	@ (80035a0 <HAL_RCC_OscConfig+0x4cc>)
 8003560:	2200      	movs	r2, #0
 8003562:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003564:	f7ff f822 	bl	80025ac <HAL_GetTick>
 8003568:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800356a:	e008      	b.n	800357e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800356c:	f7ff f81e 	bl	80025ac <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	2b02      	cmp	r3, #2
 8003578:	d901      	bls.n	800357e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800357a:	2303      	movs	r3, #3
 800357c:	e026      	b.n	80035cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800357e:	4b06      	ldr	r3, [pc, #24]	@ (8003598 <HAL_RCC_OscConfig+0x4c4>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003586:	2b00      	cmp	r3, #0
 8003588:	d1f0      	bne.n	800356c <HAL_RCC_OscConfig+0x498>
 800358a:	e01e      	b.n	80035ca <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	69db      	ldr	r3, [r3, #28]
 8003590:	2b01      	cmp	r3, #1
 8003592:	d107      	bne.n	80035a4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e019      	b.n	80035cc <HAL_RCC_OscConfig+0x4f8>
 8003598:	40021000 	.word	0x40021000
 800359c:	40007000 	.word	0x40007000
 80035a0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80035a4:	4b0b      	ldr	r3, [pc, #44]	@ (80035d4 <HAL_RCC_OscConfig+0x500>)
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6a1b      	ldr	r3, [r3, #32]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d106      	bne.n	80035c6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d001      	beq.n	80035ca <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e000      	b.n	80035cc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80035ca:	2300      	movs	r3, #0
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3718      	adds	r7, #24
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	40021000 	.word	0x40021000

080035d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b084      	sub	sp, #16
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d101      	bne.n	80035ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e0d0      	b.n	800378e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035ec:	4b6a      	ldr	r3, [pc, #424]	@ (8003798 <HAL_RCC_ClockConfig+0x1c0>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0307 	and.w	r3, r3, #7
 80035f4:	683a      	ldr	r2, [r7, #0]
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d910      	bls.n	800361c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035fa:	4b67      	ldr	r3, [pc, #412]	@ (8003798 <HAL_RCC_ClockConfig+0x1c0>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f023 0207 	bic.w	r2, r3, #7
 8003602:	4965      	ldr	r1, [pc, #404]	@ (8003798 <HAL_RCC_ClockConfig+0x1c0>)
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	4313      	orrs	r3, r2
 8003608:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800360a:	4b63      	ldr	r3, [pc, #396]	@ (8003798 <HAL_RCC_ClockConfig+0x1c0>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0307 	and.w	r3, r3, #7
 8003612:	683a      	ldr	r2, [r7, #0]
 8003614:	429a      	cmp	r2, r3
 8003616:	d001      	beq.n	800361c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e0b8      	b.n	800378e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0302 	and.w	r3, r3, #2
 8003624:	2b00      	cmp	r3, #0
 8003626:	d020      	beq.n	800366a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0304 	and.w	r3, r3, #4
 8003630:	2b00      	cmp	r3, #0
 8003632:	d005      	beq.n	8003640 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003634:	4b59      	ldr	r3, [pc, #356]	@ (800379c <HAL_RCC_ClockConfig+0x1c4>)
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	4a58      	ldr	r2, [pc, #352]	@ (800379c <HAL_RCC_ClockConfig+0x1c4>)
 800363a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800363e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0308 	and.w	r3, r3, #8
 8003648:	2b00      	cmp	r3, #0
 800364a:	d005      	beq.n	8003658 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800364c:	4b53      	ldr	r3, [pc, #332]	@ (800379c <HAL_RCC_ClockConfig+0x1c4>)
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	4a52      	ldr	r2, [pc, #328]	@ (800379c <HAL_RCC_ClockConfig+0x1c4>)
 8003652:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003656:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003658:	4b50      	ldr	r3, [pc, #320]	@ (800379c <HAL_RCC_ClockConfig+0x1c4>)
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	494d      	ldr	r1, [pc, #308]	@ (800379c <HAL_RCC_ClockConfig+0x1c4>)
 8003666:	4313      	orrs	r3, r2
 8003668:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0301 	and.w	r3, r3, #1
 8003672:	2b00      	cmp	r3, #0
 8003674:	d040      	beq.n	80036f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	2b01      	cmp	r3, #1
 800367c:	d107      	bne.n	800368e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800367e:	4b47      	ldr	r3, [pc, #284]	@ (800379c <HAL_RCC_ClockConfig+0x1c4>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d115      	bne.n	80036b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e07f      	b.n	800378e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	2b02      	cmp	r3, #2
 8003694:	d107      	bne.n	80036a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003696:	4b41      	ldr	r3, [pc, #260]	@ (800379c <HAL_RCC_ClockConfig+0x1c4>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d109      	bne.n	80036b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e073      	b.n	800378e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036a6:	4b3d      	ldr	r3, [pc, #244]	@ (800379c <HAL_RCC_ClockConfig+0x1c4>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0302 	and.w	r3, r3, #2
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d101      	bne.n	80036b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e06b      	b.n	800378e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036b6:	4b39      	ldr	r3, [pc, #228]	@ (800379c <HAL_RCC_ClockConfig+0x1c4>)
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	f023 0203 	bic.w	r2, r3, #3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	4936      	ldr	r1, [pc, #216]	@ (800379c <HAL_RCC_ClockConfig+0x1c4>)
 80036c4:	4313      	orrs	r3, r2
 80036c6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036c8:	f7fe ff70 	bl	80025ac <HAL_GetTick>
 80036cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036ce:	e00a      	b.n	80036e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036d0:	f7fe ff6c 	bl	80025ac <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036de:	4293      	cmp	r3, r2
 80036e0:	d901      	bls.n	80036e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e053      	b.n	800378e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036e6:	4b2d      	ldr	r3, [pc, #180]	@ (800379c <HAL_RCC_ClockConfig+0x1c4>)
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	f003 020c 	and.w	r2, r3, #12
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d1eb      	bne.n	80036d0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036f8:	4b27      	ldr	r3, [pc, #156]	@ (8003798 <HAL_RCC_ClockConfig+0x1c0>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0307 	and.w	r3, r3, #7
 8003700:	683a      	ldr	r2, [r7, #0]
 8003702:	429a      	cmp	r2, r3
 8003704:	d210      	bcs.n	8003728 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003706:	4b24      	ldr	r3, [pc, #144]	@ (8003798 <HAL_RCC_ClockConfig+0x1c0>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f023 0207 	bic.w	r2, r3, #7
 800370e:	4922      	ldr	r1, [pc, #136]	@ (8003798 <HAL_RCC_ClockConfig+0x1c0>)
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	4313      	orrs	r3, r2
 8003714:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003716:	4b20      	ldr	r3, [pc, #128]	@ (8003798 <HAL_RCC_ClockConfig+0x1c0>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0307 	and.w	r3, r3, #7
 800371e:	683a      	ldr	r2, [r7, #0]
 8003720:	429a      	cmp	r2, r3
 8003722:	d001      	beq.n	8003728 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e032      	b.n	800378e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0304 	and.w	r3, r3, #4
 8003730:	2b00      	cmp	r3, #0
 8003732:	d008      	beq.n	8003746 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003734:	4b19      	ldr	r3, [pc, #100]	@ (800379c <HAL_RCC_ClockConfig+0x1c4>)
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	4916      	ldr	r1, [pc, #88]	@ (800379c <HAL_RCC_ClockConfig+0x1c4>)
 8003742:	4313      	orrs	r3, r2
 8003744:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0308 	and.w	r3, r3, #8
 800374e:	2b00      	cmp	r3, #0
 8003750:	d009      	beq.n	8003766 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003752:	4b12      	ldr	r3, [pc, #72]	@ (800379c <HAL_RCC_ClockConfig+0x1c4>)
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	691b      	ldr	r3, [r3, #16]
 800375e:	00db      	lsls	r3, r3, #3
 8003760:	490e      	ldr	r1, [pc, #56]	@ (800379c <HAL_RCC_ClockConfig+0x1c4>)
 8003762:	4313      	orrs	r3, r2
 8003764:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003766:	f000 f821 	bl	80037ac <HAL_RCC_GetSysClockFreq>
 800376a:	4602      	mov	r2, r0
 800376c:	4b0b      	ldr	r3, [pc, #44]	@ (800379c <HAL_RCC_ClockConfig+0x1c4>)
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	091b      	lsrs	r3, r3, #4
 8003772:	f003 030f 	and.w	r3, r3, #15
 8003776:	490a      	ldr	r1, [pc, #40]	@ (80037a0 <HAL_RCC_ClockConfig+0x1c8>)
 8003778:	5ccb      	ldrb	r3, [r1, r3]
 800377a:	fa22 f303 	lsr.w	r3, r2, r3
 800377e:	4a09      	ldr	r2, [pc, #36]	@ (80037a4 <HAL_RCC_ClockConfig+0x1cc>)
 8003780:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003782:	4b09      	ldr	r3, [pc, #36]	@ (80037a8 <HAL_RCC_ClockConfig+0x1d0>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4618      	mov	r0, r3
 8003788:	f7fe fece 	bl	8002528 <HAL_InitTick>

  return HAL_OK;
 800378c:	2300      	movs	r3, #0
}
 800378e:	4618      	mov	r0, r3
 8003790:	3710      	adds	r7, #16
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	40022000 	.word	0x40022000
 800379c:	40021000 	.word	0x40021000
 80037a0:	08004e04 	.word	0x08004e04
 80037a4:	20000000 	.word	0x20000000
 80037a8:	20000004 	.word	0x20000004

080037ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b087      	sub	sp, #28
 80037b0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80037b2:	2300      	movs	r3, #0
 80037b4:	60fb      	str	r3, [r7, #12]
 80037b6:	2300      	movs	r3, #0
 80037b8:	60bb      	str	r3, [r7, #8]
 80037ba:	2300      	movs	r3, #0
 80037bc:	617b      	str	r3, [r7, #20]
 80037be:	2300      	movs	r3, #0
 80037c0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80037c2:	2300      	movs	r3, #0
 80037c4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80037c6:	4b1e      	ldr	r3, [pc, #120]	@ (8003840 <HAL_RCC_GetSysClockFreq+0x94>)
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f003 030c 	and.w	r3, r3, #12
 80037d2:	2b04      	cmp	r3, #4
 80037d4:	d002      	beq.n	80037dc <HAL_RCC_GetSysClockFreq+0x30>
 80037d6:	2b08      	cmp	r3, #8
 80037d8:	d003      	beq.n	80037e2 <HAL_RCC_GetSysClockFreq+0x36>
 80037da:	e027      	b.n	800382c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80037dc:	4b19      	ldr	r3, [pc, #100]	@ (8003844 <HAL_RCC_GetSysClockFreq+0x98>)
 80037de:	613b      	str	r3, [r7, #16]
      break;
 80037e0:	e027      	b.n	8003832 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	0c9b      	lsrs	r3, r3, #18
 80037e6:	f003 030f 	and.w	r3, r3, #15
 80037ea:	4a17      	ldr	r2, [pc, #92]	@ (8003848 <HAL_RCC_GetSysClockFreq+0x9c>)
 80037ec:	5cd3      	ldrb	r3, [r2, r3]
 80037ee:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d010      	beq.n	800381c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80037fa:	4b11      	ldr	r3, [pc, #68]	@ (8003840 <HAL_RCC_GetSysClockFreq+0x94>)
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	0c5b      	lsrs	r3, r3, #17
 8003800:	f003 0301 	and.w	r3, r3, #1
 8003804:	4a11      	ldr	r2, [pc, #68]	@ (800384c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003806:	5cd3      	ldrb	r3, [r2, r3]
 8003808:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4a0d      	ldr	r2, [pc, #52]	@ (8003844 <HAL_RCC_GetSysClockFreq+0x98>)
 800380e:	fb03 f202 	mul.w	r2, r3, r2
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	fbb2 f3f3 	udiv	r3, r2, r3
 8003818:	617b      	str	r3, [r7, #20]
 800381a:	e004      	b.n	8003826 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	4a0c      	ldr	r2, [pc, #48]	@ (8003850 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003820:	fb02 f303 	mul.w	r3, r2, r3
 8003824:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	613b      	str	r3, [r7, #16]
      break;
 800382a:	e002      	b.n	8003832 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800382c:	4b05      	ldr	r3, [pc, #20]	@ (8003844 <HAL_RCC_GetSysClockFreq+0x98>)
 800382e:	613b      	str	r3, [r7, #16]
      break;
 8003830:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003832:	693b      	ldr	r3, [r7, #16]
}
 8003834:	4618      	mov	r0, r3
 8003836:	371c      	adds	r7, #28
 8003838:	46bd      	mov	sp, r7
 800383a:	bc80      	pop	{r7}
 800383c:	4770      	bx	lr
 800383e:	bf00      	nop
 8003840:	40021000 	.word	0x40021000
 8003844:	007a1200 	.word	0x007a1200
 8003848:	08004e1c 	.word	0x08004e1c
 800384c:	08004e2c 	.word	0x08004e2c
 8003850:	003d0900 	.word	0x003d0900

08003854 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003854:	b480      	push	{r7}
 8003856:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003858:	4b02      	ldr	r3, [pc, #8]	@ (8003864 <HAL_RCC_GetHCLKFreq+0x10>)
 800385a:	681b      	ldr	r3, [r3, #0]
}
 800385c:	4618      	mov	r0, r3
 800385e:	46bd      	mov	sp, r7
 8003860:	bc80      	pop	{r7}
 8003862:	4770      	bx	lr
 8003864:	20000000 	.word	0x20000000

08003868 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800386c:	f7ff fff2 	bl	8003854 <HAL_RCC_GetHCLKFreq>
 8003870:	4602      	mov	r2, r0
 8003872:	4b05      	ldr	r3, [pc, #20]	@ (8003888 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	0a1b      	lsrs	r3, r3, #8
 8003878:	f003 0307 	and.w	r3, r3, #7
 800387c:	4903      	ldr	r1, [pc, #12]	@ (800388c <HAL_RCC_GetPCLK1Freq+0x24>)
 800387e:	5ccb      	ldrb	r3, [r1, r3]
 8003880:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003884:	4618      	mov	r0, r3
 8003886:	bd80      	pop	{r7, pc}
 8003888:	40021000 	.word	0x40021000
 800388c:	08004e14 	.word	0x08004e14

08003890 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003894:	f7ff ffde 	bl	8003854 <HAL_RCC_GetHCLKFreq>
 8003898:	4602      	mov	r2, r0
 800389a:	4b05      	ldr	r3, [pc, #20]	@ (80038b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	0adb      	lsrs	r3, r3, #11
 80038a0:	f003 0307 	and.w	r3, r3, #7
 80038a4:	4903      	ldr	r1, [pc, #12]	@ (80038b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038a6:	5ccb      	ldrb	r3, [r1, r3]
 80038a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	40021000 	.word	0x40021000
 80038b4:	08004e14 	.word	0x08004e14

080038b8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b085      	sub	sp, #20
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80038c0:	4b0a      	ldr	r3, [pc, #40]	@ (80038ec <RCC_Delay+0x34>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a0a      	ldr	r2, [pc, #40]	@ (80038f0 <RCC_Delay+0x38>)
 80038c6:	fba2 2303 	umull	r2, r3, r2, r3
 80038ca:	0a5b      	lsrs	r3, r3, #9
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	fb02 f303 	mul.w	r3, r2, r3
 80038d2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80038d4:	bf00      	nop
  }
  while (Delay --);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	1e5a      	subs	r2, r3, #1
 80038da:	60fa      	str	r2, [r7, #12]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d1f9      	bne.n	80038d4 <RCC_Delay+0x1c>
}
 80038e0:	bf00      	nop
 80038e2:	bf00      	nop
 80038e4:	3714      	adds	r7, #20
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bc80      	pop	{r7}
 80038ea:	4770      	bx	lr
 80038ec:	20000000 	.word	0x20000000
 80038f0:	10624dd3 	.word	0x10624dd3

080038f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d101      	bne.n	8003906 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e042      	b.n	800398c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800390c:	b2db      	uxtb	r3, r3
 800390e:	2b00      	cmp	r3, #0
 8003910:	d106      	bne.n	8003920 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f7fe fc6c 	bl	80021f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2224      	movs	r2, #36	@ 0x24
 8003924:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	68da      	ldr	r2, [r3, #12]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003936:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f000 ff2f 	bl	800479c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	691a      	ldr	r2, [r3, #16]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800394c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	695a      	ldr	r2, [r3, #20]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800395c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	68da      	ldr	r2, [r3, #12]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800396c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2200      	movs	r2, #0
 8003972:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2220      	movs	r2, #32
 8003978:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2220      	movs	r2, #32
 8003980:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800398a:	2300      	movs	r3, #0
}
 800398c:	4618      	mov	r0, r3
 800398e:	3708      	adds	r7, #8
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}

08003994 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b08c      	sub	sp, #48	@ 0x30
 8003998:	af00      	add	r7, sp, #0
 800399a:	60f8      	str	r0, [r7, #12]
 800399c:	60b9      	str	r1, [r7, #8]
 800399e:	4613      	mov	r3, r2
 80039a0:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	2b20      	cmp	r3, #32
 80039ac:	d156      	bne.n	8003a5c <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d002      	beq.n	80039ba <HAL_UART_Transmit_DMA+0x26>
 80039b4:	88fb      	ldrh	r3, [r7, #6]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d101      	bne.n	80039be <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e04f      	b.n	8003a5e <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 80039be:	68ba      	ldr	r2, [r7, #8]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	88fa      	ldrh	r2, [r7, #6]
 80039c8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	88fa      	ldrh	r2, [r7, #6]
 80039ce:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2200      	movs	r2, #0
 80039d4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2221      	movs	r2, #33	@ 0x21
 80039da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039e2:	4a21      	ldr	r2, [pc, #132]	@ (8003a68 <HAL_UART_Transmit_DMA+0xd4>)
 80039e4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039ea:	4a20      	ldr	r2, [pc, #128]	@ (8003a6c <HAL_UART_Transmit_DMA+0xd8>)
 80039ec:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039f2:	4a1f      	ldr	r2, [pc, #124]	@ (8003a70 <HAL_UART_Transmit_DMA+0xdc>)
 80039f4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039fa:	2200      	movs	r2, #0
 80039fc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 80039fe:	f107 0308 	add.w	r3, r7, #8
 8003a02:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003a08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a0a:	6819      	ldr	r1, [r3, #0]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	3304      	adds	r3, #4
 8003a12:	461a      	mov	r2, r3
 8003a14:	88fb      	ldrh	r3, [r7, #6]
 8003a16:	f7fe ff5f 	bl	80028d8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003a22:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	3314      	adds	r3, #20
 8003a2a:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a2c:	69bb      	ldr	r3, [r7, #24]
 8003a2e:	e853 3f00 	ldrex	r3, [r3]
 8003a32:	617b      	str	r3, [r7, #20]
   return(result);
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a3a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	3314      	adds	r3, #20
 8003a42:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003a44:	627a      	str	r2, [r7, #36]	@ 0x24
 8003a46:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a48:	6a39      	ldr	r1, [r7, #32]
 8003a4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a4c:	e841 2300 	strex	r3, r2, [r1]
 8003a50:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d1e5      	bne.n	8003a24 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	e000      	b.n	8003a5e <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8003a5c:	2302      	movs	r3, #2
  }
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3730      	adds	r7, #48	@ 0x30
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	08004031 	.word	0x08004031
 8003a6c:	080040cb 	.word	0x080040cb
 8003a70:	0800424f 	.word	0x0800424f

08003a74 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b084      	sub	sp, #16
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	60f8      	str	r0, [r7, #12]
 8003a7c:	60b9      	str	r1, [r7, #8]
 8003a7e:	4613      	mov	r3, r2
 8003a80:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	2b20      	cmp	r3, #32
 8003a8c:	d112      	bne.n	8003ab4 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d002      	beq.n	8003a9a <HAL_UART_Receive_DMA+0x26>
 8003a94:	88fb      	ldrh	r3, [r7, #6]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d101      	bne.n	8003a9e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e00b      	b.n	8003ab6 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003aa4:	88fb      	ldrh	r3, [r7, #6]
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	68b9      	ldr	r1, [r7, #8]
 8003aaa:	68f8      	ldr	r0, [r7, #12]
 8003aac:	f000 fc1a 	bl	80042e4 <UART_Start_Receive_DMA>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	e000      	b.n	8003ab6 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003ab4:	2302      	movs	r3, #2
  }
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3710      	adds	r7, #16
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
	...

08003ac0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b0ba      	sub	sp, #232	@ 0xe8
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	695b      	ldr	r3, [r3, #20]
 8003ae2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003aec:	2300      	movs	r3, #0
 8003aee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003af2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003af6:	f003 030f 	and.w	r3, r3, #15
 8003afa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003afe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d10f      	bne.n	8003b26 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b0a:	f003 0320 	and.w	r3, r3, #32
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d009      	beq.n	8003b26 <HAL_UART_IRQHandler+0x66>
 8003b12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b16:	f003 0320 	and.w	r3, r3, #32
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d003      	beq.n	8003b26 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f000 fd7e 	bl	8004620 <UART_Receive_IT>
      return;
 8003b24:	e25b      	b.n	8003fde <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003b26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	f000 80de 	beq.w	8003cec <HAL_UART_IRQHandler+0x22c>
 8003b30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b34:	f003 0301 	and.w	r3, r3, #1
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d106      	bne.n	8003b4a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003b3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b40:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	f000 80d1 	beq.w	8003cec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003b4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b4e:	f003 0301 	and.w	r3, r3, #1
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d00b      	beq.n	8003b6e <HAL_UART_IRQHandler+0xae>
 8003b56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d005      	beq.n	8003b6e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b66:	f043 0201 	orr.w	r2, r3, #1
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b72:	f003 0304 	and.w	r3, r3, #4
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d00b      	beq.n	8003b92 <HAL_UART_IRQHandler+0xd2>
 8003b7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b7e:	f003 0301 	and.w	r3, r3, #1
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d005      	beq.n	8003b92 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b8a:	f043 0202 	orr.w	r2, r3, #2
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b96:	f003 0302 	and.w	r3, r3, #2
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d00b      	beq.n	8003bb6 <HAL_UART_IRQHandler+0xf6>
 8003b9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ba2:	f003 0301 	and.w	r3, r3, #1
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d005      	beq.n	8003bb6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bae:	f043 0204 	orr.w	r2, r3, #4
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003bb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bba:	f003 0308 	and.w	r3, r3, #8
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d011      	beq.n	8003be6 <HAL_UART_IRQHandler+0x126>
 8003bc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bc6:	f003 0320 	and.w	r3, r3, #32
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d105      	bne.n	8003bda <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003bce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003bd2:	f003 0301 	and.w	r3, r3, #1
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d005      	beq.n	8003be6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bde:	f043 0208 	orr.w	r2, r3, #8
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	f000 81f2 	beq.w	8003fd4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003bf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bf4:	f003 0320 	and.w	r3, r3, #32
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d008      	beq.n	8003c0e <HAL_UART_IRQHandler+0x14e>
 8003bfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c00:	f003 0320 	and.w	r3, r3, #32
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d002      	beq.n	8003c0e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f000 fd09 	bl	8004620 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	695b      	ldr	r3, [r3, #20]
 8003c14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	bf14      	ite	ne
 8003c1c:	2301      	movne	r3, #1
 8003c1e:	2300      	moveq	r3, #0
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c2a:	f003 0308 	and.w	r3, r3, #8
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d103      	bne.n	8003c3a <HAL_UART_IRQHandler+0x17a>
 8003c32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d04f      	beq.n	8003cda <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f000 fc13 	bl	8004466 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	695b      	ldr	r3, [r3, #20]
 8003c46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d041      	beq.n	8003cd2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	3314      	adds	r3, #20
 8003c54:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c58:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003c5c:	e853 3f00 	ldrex	r3, [r3]
 8003c60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003c64:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003c68:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c6c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	3314      	adds	r3, #20
 8003c76:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003c7a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003c7e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c82:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003c86:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003c8a:	e841 2300 	strex	r3, r2, [r1]
 8003c8e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003c92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d1d9      	bne.n	8003c4e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d013      	beq.n	8003cca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ca6:	4a7e      	ldr	r2, [pc, #504]	@ (8003ea0 <HAL_UART_IRQHandler+0x3e0>)
 8003ca8:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f7fe feae 	bl	8002a10 <HAL_DMA_Abort_IT>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d016      	beq.n	8003ce8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003cc4:	4610      	mov	r0, r2
 8003cc6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cc8:	e00e      	b.n	8003ce8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f000 f99c 	bl	8004008 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cd0:	e00a      	b.n	8003ce8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f000 f998 	bl	8004008 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cd8:	e006      	b.n	8003ce8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f000 f994 	bl	8004008 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003ce6:	e175      	b.n	8003fd4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ce8:	bf00      	nop
    return;
 8003cea:	e173      	b.n	8003fd4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	f040 814f 	bne.w	8003f94 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003cf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cfa:	f003 0310 	and.w	r3, r3, #16
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	f000 8148 	beq.w	8003f94 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003d04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d08:	f003 0310 	and.w	r3, r3, #16
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	f000 8141 	beq.w	8003f94 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d12:	2300      	movs	r3, #0
 8003d14:	60bb      	str	r3, [r7, #8]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	60bb      	str	r3, [r7, #8]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	60bb      	str	r3, [r7, #8]
 8003d26:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	695b      	ldr	r3, [r3, #20]
 8003d2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	f000 80b6 	beq.w	8003ea4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003d44:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	f000 8145 	beq.w	8003fd8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003d52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003d56:	429a      	cmp	r2, r3
 8003d58:	f080 813e 	bcs.w	8003fd8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003d62:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d68:	699b      	ldr	r3, [r3, #24]
 8003d6a:	2b20      	cmp	r3, #32
 8003d6c:	f000 8088 	beq.w	8003e80 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	330c      	adds	r3, #12
 8003d76:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d7a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003d7e:	e853 3f00 	ldrex	r3, [r3]
 8003d82:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003d86:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003d8a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d8e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	330c      	adds	r3, #12
 8003d98:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003d9c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003da0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003da4:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003da8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003dac:	e841 2300 	strex	r3, r2, [r1]
 8003db0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003db4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d1d9      	bne.n	8003d70 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	3314      	adds	r3, #20
 8003dc2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dc4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003dc6:	e853 3f00 	ldrex	r3, [r3]
 8003dca:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003dcc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003dce:	f023 0301 	bic.w	r3, r3, #1
 8003dd2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	3314      	adds	r3, #20
 8003ddc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003de0:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003de4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003de6:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003de8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003dec:	e841 2300 	strex	r3, r2, [r1]
 8003df0:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003df2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d1e1      	bne.n	8003dbc <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	3314      	adds	r3, #20
 8003dfe:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e00:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003e02:	e853 3f00 	ldrex	r3, [r3]
 8003e06:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003e08:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003e0a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e0e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	3314      	adds	r3, #20
 8003e18:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003e1c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003e1e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e20:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003e22:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003e24:	e841 2300 	strex	r3, r2, [r1]
 8003e28:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003e2a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d1e3      	bne.n	8003df8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2220      	movs	r2, #32
 8003e34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	330c      	adds	r3, #12
 8003e44:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e48:	e853 3f00 	ldrex	r3, [r3]
 8003e4c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003e4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e50:	f023 0310 	bic.w	r3, r3, #16
 8003e54:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	330c      	adds	r3, #12
 8003e5e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003e62:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003e64:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e66:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003e68:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003e6a:	e841 2300 	strex	r3, r2, [r1]
 8003e6e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003e70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d1e3      	bne.n	8003e3e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f7fe fd8c 	bl	8002998 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2202      	movs	r2, #2
 8003e84:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	4619      	mov	r1, r3
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f000 f8bf 	bl	800401a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e9c:	e09c      	b.n	8003fd8 <HAL_UART_IRQHandler+0x518>
 8003e9e:	bf00      	nop
 8003ea0:	0800452b 	.word	0x0800452b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	1ad3      	subs	r3, r2, r3
 8003eb0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	f000 808e 	beq.w	8003fdc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003ec0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	f000 8089 	beq.w	8003fdc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	330c      	adds	r3, #12
 8003ed0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ed2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ed4:	e853 3f00 	ldrex	r3, [r3]
 8003ed8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003eda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003edc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ee0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	330c      	adds	r3, #12
 8003eea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003eee:	647a      	str	r2, [r7, #68]	@ 0x44
 8003ef0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ef2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003ef4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003ef6:	e841 2300 	strex	r3, r2, [r1]
 8003efa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003efc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d1e3      	bne.n	8003eca <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	3314      	adds	r3, #20
 8003f08:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f0c:	e853 3f00 	ldrex	r3, [r3]
 8003f10:	623b      	str	r3, [r7, #32]
   return(result);
 8003f12:	6a3b      	ldr	r3, [r7, #32]
 8003f14:	f023 0301 	bic.w	r3, r3, #1
 8003f18:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	3314      	adds	r3, #20
 8003f22:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003f26:	633a      	str	r2, [r7, #48]	@ 0x30
 8003f28:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f2a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003f2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f2e:	e841 2300 	strex	r3, r2, [r1]
 8003f32:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003f34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d1e3      	bne.n	8003f02 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2220      	movs	r2, #32
 8003f3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2200      	movs	r2, #0
 8003f46:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	330c      	adds	r3, #12
 8003f4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	e853 3f00 	ldrex	r3, [r3]
 8003f56:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f023 0310 	bic.w	r3, r3, #16
 8003f5e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	330c      	adds	r3, #12
 8003f68:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003f6c:	61fa      	str	r2, [r7, #28]
 8003f6e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f70:	69b9      	ldr	r1, [r7, #24]
 8003f72:	69fa      	ldr	r2, [r7, #28]
 8003f74:	e841 2300 	strex	r3, r2, [r1]
 8003f78:	617b      	str	r3, [r7, #20]
   return(result);
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d1e3      	bne.n	8003f48 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2202      	movs	r2, #2
 8003f84:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003f86:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003f8a:	4619      	mov	r1, r3
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f000 f844 	bl	800401a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003f92:	e023      	b.n	8003fdc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003f94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d009      	beq.n	8003fb4 <HAL_UART_IRQHandler+0x4f4>
 8003fa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fa4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d003      	beq.n	8003fb4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f000 fad0 	bl	8004552 <UART_Transmit_IT>
    return;
 8003fb2:	e014      	b.n	8003fde <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003fb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d00e      	beq.n	8003fde <HAL_UART_IRQHandler+0x51e>
 8003fc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d008      	beq.n	8003fde <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f000 fb0f 	bl	80045f0 <UART_EndTransmit_IT>
    return;
 8003fd2:	e004      	b.n	8003fde <HAL_UART_IRQHandler+0x51e>
    return;
 8003fd4:	bf00      	nop
 8003fd6:	e002      	b.n	8003fde <HAL_UART_IRQHandler+0x51e>
      return;
 8003fd8:	bf00      	nop
 8003fda:	e000      	b.n	8003fde <HAL_UART_IRQHandler+0x51e>
      return;
 8003fdc:	bf00      	nop
  }
}
 8003fde:	37e8      	adds	r7, #232	@ 0xe8
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}

08003fe4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003fec:	bf00      	nop
 8003fee:	370c      	adds	r7, #12
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bc80      	pop	{r7}
 8003ff4:	4770      	bx	lr

08003ff6 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003ff6:	b480      	push	{r7}
 8003ff8:	b083      	sub	sp, #12
 8003ffa:	af00      	add	r7, sp, #0
 8003ffc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003ffe:	bf00      	nop
 8004000:	370c      	adds	r7, #12
 8004002:	46bd      	mov	sp, r7
 8004004:	bc80      	pop	{r7}
 8004006:	4770      	bx	lr

08004008 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004010:	bf00      	nop
 8004012:	370c      	adds	r7, #12
 8004014:	46bd      	mov	sp, r7
 8004016:	bc80      	pop	{r7}
 8004018:	4770      	bx	lr

0800401a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800401a:	b480      	push	{r7}
 800401c:	b083      	sub	sp, #12
 800401e:	af00      	add	r7, sp, #0
 8004020:	6078      	str	r0, [r7, #4]
 8004022:	460b      	mov	r3, r1
 8004024:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004026:	bf00      	nop
 8004028:	370c      	adds	r7, #12
 800402a:	46bd      	mov	sp, r7
 800402c:	bc80      	pop	{r7}
 800402e:	4770      	bx	lr

08004030 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b090      	sub	sp, #64	@ 0x40
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800403c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 0320 	and.w	r3, r3, #32
 8004048:	2b00      	cmp	r3, #0
 800404a:	d137      	bne.n	80040bc <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800404c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800404e:	2200      	movs	r2, #0
 8004050:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004052:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	3314      	adds	r3, #20
 8004058:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800405a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800405c:	e853 3f00 	ldrex	r3, [r3]
 8004060:	623b      	str	r3, [r7, #32]
   return(result);
 8004062:	6a3b      	ldr	r3, [r7, #32]
 8004064:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004068:	63bb      	str	r3, [r7, #56]	@ 0x38
 800406a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	3314      	adds	r3, #20
 8004070:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004072:	633a      	str	r2, [r7, #48]	@ 0x30
 8004074:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004076:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004078:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800407a:	e841 2300 	strex	r3, r2, [r1]
 800407e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004082:	2b00      	cmp	r3, #0
 8004084:	d1e5      	bne.n	8004052 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004086:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	330c      	adds	r3, #12
 800408c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	e853 3f00 	ldrex	r3, [r3]
 8004094:	60fb      	str	r3, [r7, #12]
   return(result);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800409c:	637b      	str	r3, [r7, #52]	@ 0x34
 800409e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	330c      	adds	r3, #12
 80040a4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80040a6:	61fa      	str	r2, [r7, #28]
 80040a8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040aa:	69b9      	ldr	r1, [r7, #24]
 80040ac:	69fa      	ldr	r2, [r7, #28]
 80040ae:	e841 2300 	strex	r3, r2, [r1]
 80040b2:	617b      	str	r3, [r7, #20]
   return(result);
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d1e5      	bne.n	8004086 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80040ba:	e002      	b.n	80040c2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80040bc:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80040be:	f7fd fa7d 	bl	80015bc <HAL_UART_TxCpltCallback>
}
 80040c2:	bf00      	nop
 80040c4:	3740      	adds	r7, #64	@ 0x40
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}

080040ca <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80040ca:	b580      	push	{r7, lr}
 80040cc:	b084      	sub	sp, #16
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040d6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80040d8:	68f8      	ldr	r0, [r7, #12]
 80040da:	f7ff ff83 	bl	8003fe4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040de:	bf00      	nop
 80040e0:	3710      	adds	r7, #16
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}

080040e6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80040e6:	b580      	push	{r7, lr}
 80040e8:	b09c      	sub	sp, #112	@ 0x70
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040f2:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0320 	and.w	r3, r3, #32
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d172      	bne.n	80041e8 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004102:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004104:	2200      	movs	r2, #0
 8004106:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004108:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	330c      	adds	r3, #12
 800410e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004110:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004112:	e853 3f00 	ldrex	r3, [r3]
 8004116:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004118:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800411a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800411e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004120:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	330c      	adds	r3, #12
 8004126:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004128:	65ba      	str	r2, [r7, #88]	@ 0x58
 800412a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800412c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800412e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004130:	e841 2300 	strex	r3, r2, [r1]
 8004134:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004136:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004138:	2b00      	cmp	r3, #0
 800413a:	d1e5      	bne.n	8004108 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800413c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	3314      	adds	r3, #20
 8004142:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004144:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004146:	e853 3f00 	ldrex	r3, [r3]
 800414a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800414c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800414e:	f023 0301 	bic.w	r3, r3, #1
 8004152:	667b      	str	r3, [r7, #100]	@ 0x64
 8004154:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	3314      	adds	r3, #20
 800415a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800415c:	647a      	str	r2, [r7, #68]	@ 0x44
 800415e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004160:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004162:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004164:	e841 2300 	strex	r3, r2, [r1]
 8004168:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800416a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800416c:	2b00      	cmp	r3, #0
 800416e:	d1e5      	bne.n	800413c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004170:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	3314      	adds	r3, #20
 8004176:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800417a:	e853 3f00 	ldrex	r3, [r3]
 800417e:	623b      	str	r3, [r7, #32]
   return(result);
 8004180:	6a3b      	ldr	r3, [r7, #32]
 8004182:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004186:	663b      	str	r3, [r7, #96]	@ 0x60
 8004188:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	3314      	adds	r3, #20
 800418e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004190:	633a      	str	r2, [r7, #48]	@ 0x30
 8004192:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004194:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004196:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004198:	e841 2300 	strex	r3, r2, [r1]
 800419c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800419e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d1e5      	bne.n	8004170 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80041a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041a6:	2220      	movs	r2, #32
 80041a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d119      	bne.n	80041e8 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	330c      	adds	r3, #12
 80041ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	e853 3f00 	ldrex	r3, [r3]
 80041c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f023 0310 	bic.w	r3, r3, #16
 80041ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80041cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	330c      	adds	r3, #12
 80041d2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80041d4:	61fa      	str	r2, [r7, #28]
 80041d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041d8:	69b9      	ldr	r1, [r7, #24]
 80041da:	69fa      	ldr	r2, [r7, #28]
 80041dc:	e841 2300 	strex	r3, r2, [r1]
 80041e0:	617b      	str	r3, [r7, #20]
   return(result);
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d1e5      	bne.n	80041b4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041ea:	2200      	movs	r2, #0
 80041ec:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d106      	bne.n	8004204 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80041f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041f8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80041fa:	4619      	mov	r1, r3
 80041fc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80041fe:	f7ff ff0c 	bl	800401a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004202:	e002      	b.n	800420a <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8004204:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004206:	f7fd f9ed 	bl	80015e4 <HAL_UART_RxCpltCallback>
}
 800420a:	bf00      	nop
 800420c:	3770      	adds	r7, #112	@ 0x70
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}

08004212 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004212:	b580      	push	{r7, lr}
 8004214:	b084      	sub	sp, #16
 8004216:	af00      	add	r7, sp, #0
 8004218:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800421e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2201      	movs	r2, #1
 8004224:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800422a:	2b01      	cmp	r3, #1
 800422c:	d108      	bne.n	8004240 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004232:	085b      	lsrs	r3, r3, #1
 8004234:	b29b      	uxth	r3, r3
 8004236:	4619      	mov	r1, r3
 8004238:	68f8      	ldr	r0, [r7, #12]
 800423a:	f7ff feee 	bl	800401a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800423e:	e002      	b.n	8004246 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8004240:	68f8      	ldr	r0, [r7, #12]
 8004242:	f7ff fed8 	bl	8003ff6 <HAL_UART_RxHalfCpltCallback>
}
 8004246:	bf00      	nop
 8004248:	3710      	adds	r7, #16
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}

0800424e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800424e:	b580      	push	{r7, lr}
 8004250:	b084      	sub	sp, #16
 8004252:	af00      	add	r7, sp, #0
 8004254:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004256:	2300      	movs	r3, #0
 8004258:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800425e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	695b      	ldr	r3, [r3, #20]
 8004266:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800426a:	2b00      	cmp	r3, #0
 800426c:	bf14      	ite	ne
 800426e:	2301      	movne	r3, #1
 8004270:	2300      	moveq	r3, #0
 8004272:	b2db      	uxtb	r3, r3
 8004274:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800427c:	b2db      	uxtb	r3, r3
 800427e:	2b21      	cmp	r3, #33	@ 0x21
 8004280:	d108      	bne.n	8004294 <UART_DMAError+0x46>
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d005      	beq.n	8004294 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	2200      	movs	r2, #0
 800428c:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800428e:	68b8      	ldr	r0, [r7, #8]
 8004290:	f000 f8c2 	bl	8004418 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	695b      	ldr	r3, [r3, #20]
 800429a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800429e:	2b00      	cmp	r3, #0
 80042a0:	bf14      	ite	ne
 80042a2:	2301      	movne	r3, #1
 80042a4:	2300      	moveq	r3, #0
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	2b22      	cmp	r3, #34	@ 0x22
 80042b4:	d108      	bne.n	80042c8 <UART_DMAError+0x7a>
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d005      	beq.n	80042c8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	2200      	movs	r2, #0
 80042c0:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80042c2:	68b8      	ldr	r0, [r7, #8]
 80042c4:	f000 f8cf 	bl	8004466 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042cc:	f043 0210 	orr.w	r2, r3, #16
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80042d4:	68b8      	ldr	r0, [r7, #8]
 80042d6:	f7ff fe97 	bl	8004008 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042da:	bf00      	nop
 80042dc:	3710      	adds	r7, #16
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
	...

080042e4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b098      	sub	sp, #96	@ 0x60
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	60b9      	str	r1, [r7, #8]
 80042ee:	4613      	mov	r3, r2
 80042f0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80042f2:	68ba      	ldr	r2, [r7, #8]
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	88fa      	ldrh	r2, [r7, #6]
 80042fc:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2200      	movs	r2, #0
 8004302:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2222      	movs	r2, #34	@ 0x22
 8004308:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004310:	4a3e      	ldr	r2, [pc, #248]	@ (800440c <UART_Start_Receive_DMA+0x128>)
 8004312:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004318:	4a3d      	ldr	r2, [pc, #244]	@ (8004410 <UART_Start_Receive_DMA+0x12c>)
 800431a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004320:	4a3c      	ldr	r2, [pc, #240]	@ (8004414 <UART_Start_Receive_DMA+0x130>)
 8004322:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004328:	2200      	movs	r2, #0
 800432a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800432c:	f107 0308 	add.w	r3, r7, #8
 8004330:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	3304      	adds	r3, #4
 800433c:	4619      	mov	r1, r3
 800433e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	88fb      	ldrh	r3, [r7, #6]
 8004344:	f7fe fac8 	bl	80028d8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004348:	2300      	movs	r3, #0
 800434a:	613b      	str	r3, [r7, #16]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	613b      	str	r3, [r7, #16]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	613b      	str	r3, [r7, #16]
 800435c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d019      	beq.n	800439a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	330c      	adds	r3, #12
 800436c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800436e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004370:	e853 3f00 	ldrex	r3, [r3]
 8004374:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004376:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004378:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800437c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	330c      	adds	r3, #12
 8004384:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004386:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004388:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800438a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800438c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800438e:	e841 2300 	strex	r3, r2, [r1]
 8004392:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004394:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004396:	2b00      	cmp	r3, #0
 8004398:	d1e5      	bne.n	8004366 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	3314      	adds	r3, #20
 80043a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043a4:	e853 3f00 	ldrex	r3, [r3]
 80043a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80043aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043ac:	f043 0301 	orr.w	r3, r3, #1
 80043b0:	657b      	str	r3, [r7, #84]	@ 0x54
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	3314      	adds	r3, #20
 80043b8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80043ba:	63ba      	str	r2, [r7, #56]	@ 0x38
 80043bc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043be:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80043c0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80043c2:	e841 2300 	strex	r3, r2, [r1]
 80043c6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80043c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d1e5      	bne.n	800439a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	3314      	adds	r3, #20
 80043d4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d6:	69bb      	ldr	r3, [r7, #24]
 80043d8:	e853 3f00 	ldrex	r3, [r3]
 80043dc:	617b      	str	r3, [r7, #20]
   return(result);
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80043e4:	653b      	str	r3, [r7, #80]	@ 0x50
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	3314      	adds	r3, #20
 80043ec:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80043ee:	627a      	str	r2, [r7, #36]	@ 0x24
 80043f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f2:	6a39      	ldr	r1, [r7, #32]
 80043f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043f6:	e841 2300 	strex	r3, r2, [r1]
 80043fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d1e5      	bne.n	80043ce <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8004402:	2300      	movs	r3, #0
}
 8004404:	4618      	mov	r0, r3
 8004406:	3760      	adds	r7, #96	@ 0x60
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}
 800440c:	080040e7 	.word	0x080040e7
 8004410:	08004213 	.word	0x08004213
 8004414:	0800424f 	.word	0x0800424f

08004418 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004418:	b480      	push	{r7}
 800441a:	b089      	sub	sp, #36	@ 0x24
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	330c      	adds	r3, #12
 8004426:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	e853 3f00 	ldrex	r3, [r3]
 800442e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004436:	61fb      	str	r3, [r7, #28]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	330c      	adds	r3, #12
 800443e:	69fa      	ldr	r2, [r7, #28]
 8004440:	61ba      	str	r2, [r7, #24]
 8004442:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004444:	6979      	ldr	r1, [r7, #20]
 8004446:	69ba      	ldr	r2, [r7, #24]
 8004448:	e841 2300 	strex	r3, r2, [r1]
 800444c:	613b      	str	r3, [r7, #16]
   return(result);
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d1e5      	bne.n	8004420 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2220      	movs	r2, #32
 8004458:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800445c:	bf00      	nop
 800445e:	3724      	adds	r7, #36	@ 0x24
 8004460:	46bd      	mov	sp, r7
 8004462:	bc80      	pop	{r7}
 8004464:	4770      	bx	lr

08004466 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004466:	b480      	push	{r7}
 8004468:	b095      	sub	sp, #84	@ 0x54
 800446a:	af00      	add	r7, sp, #0
 800446c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	330c      	adds	r3, #12
 8004474:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004476:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004478:	e853 3f00 	ldrex	r3, [r3]
 800447c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800447e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004480:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004484:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	330c      	adds	r3, #12
 800448c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800448e:	643a      	str	r2, [r7, #64]	@ 0x40
 8004490:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004492:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004494:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004496:	e841 2300 	strex	r3, r2, [r1]
 800449a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800449c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d1e5      	bne.n	800446e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	3314      	adds	r3, #20
 80044a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044aa:	6a3b      	ldr	r3, [r7, #32]
 80044ac:	e853 3f00 	ldrex	r3, [r3]
 80044b0:	61fb      	str	r3, [r7, #28]
   return(result);
 80044b2:	69fb      	ldr	r3, [r7, #28]
 80044b4:	f023 0301 	bic.w	r3, r3, #1
 80044b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	3314      	adds	r3, #20
 80044c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80044c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80044c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80044c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80044ca:	e841 2300 	strex	r3, r2, [r1]
 80044ce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80044d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d1e5      	bne.n	80044a2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d119      	bne.n	8004512 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	330c      	adds	r3, #12
 80044e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	e853 3f00 	ldrex	r3, [r3]
 80044ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	f023 0310 	bic.w	r3, r3, #16
 80044f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	330c      	adds	r3, #12
 80044fc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80044fe:	61ba      	str	r2, [r7, #24]
 8004500:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004502:	6979      	ldr	r1, [r7, #20]
 8004504:	69ba      	ldr	r2, [r7, #24]
 8004506:	e841 2300 	strex	r3, r2, [r1]
 800450a:	613b      	str	r3, [r7, #16]
   return(result);
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d1e5      	bne.n	80044de <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2220      	movs	r2, #32
 8004516:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004520:	bf00      	nop
 8004522:	3754      	adds	r7, #84	@ 0x54
 8004524:	46bd      	mov	sp, r7
 8004526:	bc80      	pop	{r7}
 8004528:	4770      	bx	lr

0800452a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800452a:	b580      	push	{r7, lr}
 800452c:	b084      	sub	sp, #16
 800452e:	af00      	add	r7, sp, #0
 8004530:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004536:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2200      	movs	r2, #0
 800453c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2200      	movs	r2, #0
 8004542:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004544:	68f8      	ldr	r0, [r7, #12]
 8004546:	f7ff fd5f 	bl	8004008 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800454a:	bf00      	nop
 800454c:	3710      	adds	r7, #16
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}

08004552 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004552:	b480      	push	{r7}
 8004554:	b085      	sub	sp, #20
 8004556:	af00      	add	r7, sp, #0
 8004558:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004560:	b2db      	uxtb	r3, r3
 8004562:	2b21      	cmp	r3, #33	@ 0x21
 8004564:	d13e      	bne.n	80045e4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800456e:	d114      	bne.n	800459a <UART_Transmit_IT+0x48>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	691b      	ldr	r3, [r3, #16]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d110      	bne.n	800459a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6a1b      	ldr	r3, [r3, #32]
 800457c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	881b      	ldrh	r3, [r3, #0]
 8004582:	461a      	mov	r2, r3
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800458c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a1b      	ldr	r3, [r3, #32]
 8004592:	1c9a      	adds	r2, r3, #2
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	621a      	str	r2, [r3, #32]
 8004598:	e008      	b.n	80045ac <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6a1b      	ldr	r3, [r3, #32]
 800459e:	1c59      	adds	r1, r3, #1
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	6211      	str	r1, [r2, #32]
 80045a4:	781a      	ldrb	r2, [r3, #0]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80045b0:	b29b      	uxth	r3, r3
 80045b2:	3b01      	subs	r3, #1
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	4619      	mov	r1, r3
 80045ba:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d10f      	bne.n	80045e0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	68da      	ldr	r2, [r3, #12]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80045ce:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	68da      	ldr	r2, [r3, #12]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80045de:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80045e0:	2300      	movs	r3, #0
 80045e2:	e000      	b.n	80045e6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80045e4:	2302      	movs	r3, #2
  }
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3714      	adds	r7, #20
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bc80      	pop	{r7}
 80045ee:	4770      	bx	lr

080045f0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b082      	sub	sp, #8
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	68da      	ldr	r2, [r3, #12]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004606:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2220      	movs	r2, #32
 800460c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f7fc ffd3 	bl	80015bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004616:	2300      	movs	r3, #0
}
 8004618:	4618      	mov	r0, r3
 800461a:	3708      	adds	r7, #8
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}

08004620 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b08c      	sub	sp, #48	@ 0x30
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800462e:	b2db      	uxtb	r3, r3
 8004630:	2b22      	cmp	r3, #34	@ 0x22
 8004632:	f040 80ae 	bne.w	8004792 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800463e:	d117      	bne.n	8004670 <UART_Receive_IT+0x50>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	691b      	ldr	r3, [r3, #16]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d113      	bne.n	8004670 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004648:	2300      	movs	r3, #0
 800464a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004650:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	b29b      	uxth	r3, r3
 800465a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800465e:	b29a      	uxth	r2, r3
 8004660:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004662:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004668:	1c9a      	adds	r2, r3, #2
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	629a      	str	r2, [r3, #40]	@ 0x28
 800466e:	e026      	b.n	80046be <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004674:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004676:	2300      	movs	r3, #0
 8004678:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004682:	d007      	beq.n	8004694 <UART_Receive_IT+0x74>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d10a      	bne.n	80046a2 <UART_Receive_IT+0x82>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	691b      	ldr	r3, [r3, #16]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d106      	bne.n	80046a2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	b2da      	uxtb	r2, r3
 800469c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800469e:	701a      	strb	r2, [r3, #0]
 80046a0:	e008      	b.n	80046b4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80046ae:	b2da      	uxtb	r2, r3
 80046b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046b2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046b8:	1c5a      	adds	r2, r3, #1
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	3b01      	subs	r3, #1
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	4619      	mov	r1, r3
 80046cc:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d15d      	bne.n	800478e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	68da      	ldr	r2, [r3, #12]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f022 0220 	bic.w	r2, r2, #32
 80046e0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	68da      	ldr	r2, [r3, #12]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80046f0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	695a      	ldr	r2, [r3, #20]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f022 0201 	bic.w	r2, r2, #1
 8004700:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2220      	movs	r2, #32
 8004706:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004714:	2b01      	cmp	r3, #1
 8004716:	d135      	bne.n	8004784 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	330c      	adds	r3, #12
 8004724:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	e853 3f00 	ldrex	r3, [r3]
 800472c:	613b      	str	r3, [r7, #16]
   return(result);
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	f023 0310 	bic.w	r3, r3, #16
 8004734:	627b      	str	r3, [r7, #36]	@ 0x24
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	330c      	adds	r3, #12
 800473c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800473e:	623a      	str	r2, [r7, #32]
 8004740:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004742:	69f9      	ldr	r1, [r7, #28]
 8004744:	6a3a      	ldr	r2, [r7, #32]
 8004746:	e841 2300 	strex	r3, r2, [r1]
 800474a:	61bb      	str	r3, [r7, #24]
   return(result);
 800474c:	69bb      	ldr	r3, [r7, #24]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d1e5      	bne.n	800471e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 0310 	and.w	r3, r3, #16
 800475c:	2b10      	cmp	r3, #16
 800475e:	d10a      	bne.n	8004776 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004760:	2300      	movs	r3, #0
 8004762:	60fb      	str	r3, [r7, #12]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	60fb      	str	r3, [r7, #12]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	60fb      	str	r3, [r7, #12]
 8004774:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800477a:	4619      	mov	r1, r3
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f7ff fc4c 	bl	800401a <HAL_UARTEx_RxEventCallback>
 8004782:	e002      	b.n	800478a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	f7fc ff2d 	bl	80015e4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800478a:	2300      	movs	r3, #0
 800478c:	e002      	b.n	8004794 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800478e:	2300      	movs	r3, #0
 8004790:	e000      	b.n	8004794 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004792:	2302      	movs	r3, #2
  }
}
 8004794:	4618      	mov	r0, r3
 8004796:	3730      	adds	r7, #48	@ 0x30
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}

0800479c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	691b      	ldr	r3, [r3, #16]
 80047aa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	68da      	ldr	r2, [r3, #12]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	430a      	orrs	r2, r1
 80047b8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	689a      	ldr	r2, [r3, #8]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	691b      	ldr	r3, [r3, #16]
 80047c2:	431a      	orrs	r2, r3
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	695b      	ldr	r3, [r3, #20]
 80047c8:	4313      	orrs	r3, r2
 80047ca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80047d6:	f023 030c 	bic.w	r3, r3, #12
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	6812      	ldr	r2, [r2, #0]
 80047de:	68b9      	ldr	r1, [r7, #8]
 80047e0:	430b      	orrs	r3, r1
 80047e2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	695b      	ldr	r3, [r3, #20]
 80047ea:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	699a      	ldr	r2, [r3, #24]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	430a      	orrs	r2, r1
 80047f8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a2c      	ldr	r2, [pc, #176]	@ (80048b0 <UART_SetConfig+0x114>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d103      	bne.n	800480c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004804:	f7ff f844 	bl	8003890 <HAL_RCC_GetPCLK2Freq>
 8004808:	60f8      	str	r0, [r7, #12]
 800480a:	e002      	b.n	8004812 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800480c:	f7ff f82c 	bl	8003868 <HAL_RCC_GetPCLK1Freq>
 8004810:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004812:	68fa      	ldr	r2, [r7, #12]
 8004814:	4613      	mov	r3, r2
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	4413      	add	r3, r2
 800481a:	009a      	lsls	r2, r3, #2
 800481c:	441a      	add	r2, r3
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	fbb2 f3f3 	udiv	r3, r2, r3
 8004828:	4a22      	ldr	r2, [pc, #136]	@ (80048b4 <UART_SetConfig+0x118>)
 800482a:	fba2 2303 	umull	r2, r3, r2, r3
 800482e:	095b      	lsrs	r3, r3, #5
 8004830:	0119      	lsls	r1, r3, #4
 8004832:	68fa      	ldr	r2, [r7, #12]
 8004834:	4613      	mov	r3, r2
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	4413      	add	r3, r2
 800483a:	009a      	lsls	r2, r3, #2
 800483c:	441a      	add	r2, r3
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	fbb2 f2f3 	udiv	r2, r2, r3
 8004848:	4b1a      	ldr	r3, [pc, #104]	@ (80048b4 <UART_SetConfig+0x118>)
 800484a:	fba3 0302 	umull	r0, r3, r3, r2
 800484e:	095b      	lsrs	r3, r3, #5
 8004850:	2064      	movs	r0, #100	@ 0x64
 8004852:	fb00 f303 	mul.w	r3, r0, r3
 8004856:	1ad3      	subs	r3, r2, r3
 8004858:	011b      	lsls	r3, r3, #4
 800485a:	3332      	adds	r3, #50	@ 0x32
 800485c:	4a15      	ldr	r2, [pc, #84]	@ (80048b4 <UART_SetConfig+0x118>)
 800485e:	fba2 2303 	umull	r2, r3, r2, r3
 8004862:	095b      	lsrs	r3, r3, #5
 8004864:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004868:	4419      	add	r1, r3
 800486a:	68fa      	ldr	r2, [r7, #12]
 800486c:	4613      	mov	r3, r2
 800486e:	009b      	lsls	r3, r3, #2
 8004870:	4413      	add	r3, r2
 8004872:	009a      	lsls	r2, r3, #2
 8004874:	441a      	add	r2, r3
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004880:	4b0c      	ldr	r3, [pc, #48]	@ (80048b4 <UART_SetConfig+0x118>)
 8004882:	fba3 0302 	umull	r0, r3, r3, r2
 8004886:	095b      	lsrs	r3, r3, #5
 8004888:	2064      	movs	r0, #100	@ 0x64
 800488a:	fb00 f303 	mul.w	r3, r0, r3
 800488e:	1ad3      	subs	r3, r2, r3
 8004890:	011b      	lsls	r3, r3, #4
 8004892:	3332      	adds	r3, #50	@ 0x32
 8004894:	4a07      	ldr	r2, [pc, #28]	@ (80048b4 <UART_SetConfig+0x118>)
 8004896:	fba2 2303 	umull	r2, r3, r2, r3
 800489a:	095b      	lsrs	r3, r3, #5
 800489c:	f003 020f 	and.w	r2, r3, #15
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	440a      	add	r2, r1
 80048a6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80048a8:	bf00      	nop
 80048aa:	3710      	adds	r7, #16
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}
 80048b0:	40013800 	.word	0x40013800
 80048b4:	51eb851f 	.word	0x51eb851f

080048b8 <realloc>:
 80048b8:	4b02      	ldr	r3, [pc, #8]	@ (80048c4 <realloc+0xc>)
 80048ba:	460a      	mov	r2, r1
 80048bc:	4601      	mov	r1, r0
 80048be:	6818      	ldr	r0, [r3, #0]
 80048c0:	f000 b802 	b.w	80048c8 <_realloc_r>
 80048c4:	2000000c 	.word	0x2000000c

080048c8 <_realloc_r>:
 80048c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048cc:	4680      	mov	r8, r0
 80048ce:	4615      	mov	r5, r2
 80048d0:	460c      	mov	r4, r1
 80048d2:	b921      	cbnz	r1, 80048de <_realloc_r+0x16>
 80048d4:	4611      	mov	r1, r2
 80048d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80048da:	f000 b8cf 	b.w	8004a7c <_malloc_r>
 80048de:	b92a      	cbnz	r2, 80048ec <_realloc_r+0x24>
 80048e0:	f000 f862 	bl	80049a8 <_free_r>
 80048e4:	2400      	movs	r4, #0
 80048e6:	4620      	mov	r0, r4
 80048e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048ec:	f000 f952 	bl	8004b94 <_malloc_usable_size_r>
 80048f0:	4285      	cmp	r5, r0
 80048f2:	4606      	mov	r6, r0
 80048f4:	d802      	bhi.n	80048fc <_realloc_r+0x34>
 80048f6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80048fa:	d8f4      	bhi.n	80048e6 <_realloc_r+0x1e>
 80048fc:	4629      	mov	r1, r5
 80048fe:	4640      	mov	r0, r8
 8004900:	f000 f8bc 	bl	8004a7c <_malloc_r>
 8004904:	4607      	mov	r7, r0
 8004906:	2800      	cmp	r0, #0
 8004908:	d0ec      	beq.n	80048e4 <_realloc_r+0x1c>
 800490a:	42b5      	cmp	r5, r6
 800490c:	462a      	mov	r2, r5
 800490e:	4621      	mov	r1, r4
 8004910:	bf28      	it	cs
 8004912:	4632      	movcs	r2, r6
 8004914:	f000 f83a 	bl	800498c <memcpy>
 8004918:	4621      	mov	r1, r4
 800491a:	4640      	mov	r0, r8
 800491c:	f000 f844 	bl	80049a8 <_free_r>
 8004920:	463c      	mov	r4, r7
 8004922:	e7e0      	b.n	80048e6 <_realloc_r+0x1e>

08004924 <memset>:
 8004924:	4603      	mov	r3, r0
 8004926:	4402      	add	r2, r0
 8004928:	4293      	cmp	r3, r2
 800492a:	d100      	bne.n	800492e <memset+0xa>
 800492c:	4770      	bx	lr
 800492e:	f803 1b01 	strb.w	r1, [r3], #1
 8004932:	e7f9      	b.n	8004928 <memset+0x4>

08004934 <__errno>:
 8004934:	4b01      	ldr	r3, [pc, #4]	@ (800493c <__errno+0x8>)
 8004936:	6818      	ldr	r0, [r3, #0]
 8004938:	4770      	bx	lr
 800493a:	bf00      	nop
 800493c:	2000000c 	.word	0x2000000c

08004940 <__libc_init_array>:
 8004940:	b570      	push	{r4, r5, r6, lr}
 8004942:	2600      	movs	r6, #0
 8004944:	4d0c      	ldr	r5, [pc, #48]	@ (8004978 <__libc_init_array+0x38>)
 8004946:	4c0d      	ldr	r4, [pc, #52]	@ (800497c <__libc_init_array+0x3c>)
 8004948:	1b64      	subs	r4, r4, r5
 800494a:	10a4      	asrs	r4, r4, #2
 800494c:	42a6      	cmp	r6, r4
 800494e:	d109      	bne.n	8004964 <__libc_init_array+0x24>
 8004950:	f000 f938 	bl	8004bc4 <_init>
 8004954:	2600      	movs	r6, #0
 8004956:	4d0a      	ldr	r5, [pc, #40]	@ (8004980 <__libc_init_array+0x40>)
 8004958:	4c0a      	ldr	r4, [pc, #40]	@ (8004984 <__libc_init_array+0x44>)
 800495a:	1b64      	subs	r4, r4, r5
 800495c:	10a4      	asrs	r4, r4, #2
 800495e:	42a6      	cmp	r6, r4
 8004960:	d105      	bne.n	800496e <__libc_init_array+0x2e>
 8004962:	bd70      	pop	{r4, r5, r6, pc}
 8004964:	f855 3b04 	ldr.w	r3, [r5], #4
 8004968:	4798      	blx	r3
 800496a:	3601      	adds	r6, #1
 800496c:	e7ee      	b.n	800494c <__libc_init_array+0xc>
 800496e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004972:	4798      	blx	r3
 8004974:	3601      	adds	r6, #1
 8004976:	e7f2      	b.n	800495e <__libc_init_array+0x1e>
 8004978:	08004e38 	.word	0x08004e38
 800497c:	08004e38 	.word	0x08004e38
 8004980:	08004e38 	.word	0x08004e38
 8004984:	08004e40 	.word	0x08004e40

08004988 <__retarget_lock_acquire_recursive>:
 8004988:	4770      	bx	lr

0800498a <__retarget_lock_release_recursive>:
 800498a:	4770      	bx	lr

0800498c <memcpy>:
 800498c:	440a      	add	r2, r1
 800498e:	4291      	cmp	r1, r2
 8004990:	f100 33ff 	add.w	r3, r0, #4294967295
 8004994:	d100      	bne.n	8004998 <memcpy+0xc>
 8004996:	4770      	bx	lr
 8004998:	b510      	push	{r4, lr}
 800499a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800499e:	4291      	cmp	r1, r2
 80049a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80049a4:	d1f9      	bne.n	800499a <memcpy+0xe>
 80049a6:	bd10      	pop	{r4, pc}

080049a8 <_free_r>:
 80049a8:	b538      	push	{r3, r4, r5, lr}
 80049aa:	4605      	mov	r5, r0
 80049ac:	2900      	cmp	r1, #0
 80049ae:	d040      	beq.n	8004a32 <_free_r+0x8a>
 80049b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049b4:	1f0c      	subs	r4, r1, #4
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	bfb8      	it	lt
 80049ba:	18e4      	addlt	r4, r4, r3
 80049bc:	f000 f8de 	bl	8004b7c <__malloc_lock>
 80049c0:	4a1c      	ldr	r2, [pc, #112]	@ (8004a34 <_free_r+0x8c>)
 80049c2:	6813      	ldr	r3, [r2, #0]
 80049c4:	b933      	cbnz	r3, 80049d4 <_free_r+0x2c>
 80049c6:	6063      	str	r3, [r4, #4]
 80049c8:	6014      	str	r4, [r2, #0]
 80049ca:	4628      	mov	r0, r5
 80049cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80049d0:	f000 b8da 	b.w	8004b88 <__malloc_unlock>
 80049d4:	42a3      	cmp	r3, r4
 80049d6:	d908      	bls.n	80049ea <_free_r+0x42>
 80049d8:	6820      	ldr	r0, [r4, #0]
 80049da:	1821      	adds	r1, r4, r0
 80049dc:	428b      	cmp	r3, r1
 80049de:	bf01      	itttt	eq
 80049e0:	6819      	ldreq	r1, [r3, #0]
 80049e2:	685b      	ldreq	r3, [r3, #4]
 80049e4:	1809      	addeq	r1, r1, r0
 80049e6:	6021      	streq	r1, [r4, #0]
 80049e8:	e7ed      	b.n	80049c6 <_free_r+0x1e>
 80049ea:	461a      	mov	r2, r3
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	b10b      	cbz	r3, 80049f4 <_free_r+0x4c>
 80049f0:	42a3      	cmp	r3, r4
 80049f2:	d9fa      	bls.n	80049ea <_free_r+0x42>
 80049f4:	6811      	ldr	r1, [r2, #0]
 80049f6:	1850      	adds	r0, r2, r1
 80049f8:	42a0      	cmp	r0, r4
 80049fa:	d10b      	bne.n	8004a14 <_free_r+0x6c>
 80049fc:	6820      	ldr	r0, [r4, #0]
 80049fe:	4401      	add	r1, r0
 8004a00:	1850      	adds	r0, r2, r1
 8004a02:	4283      	cmp	r3, r0
 8004a04:	6011      	str	r1, [r2, #0]
 8004a06:	d1e0      	bne.n	80049ca <_free_r+0x22>
 8004a08:	6818      	ldr	r0, [r3, #0]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	4408      	add	r0, r1
 8004a0e:	6010      	str	r0, [r2, #0]
 8004a10:	6053      	str	r3, [r2, #4]
 8004a12:	e7da      	b.n	80049ca <_free_r+0x22>
 8004a14:	d902      	bls.n	8004a1c <_free_r+0x74>
 8004a16:	230c      	movs	r3, #12
 8004a18:	602b      	str	r3, [r5, #0]
 8004a1a:	e7d6      	b.n	80049ca <_free_r+0x22>
 8004a1c:	6820      	ldr	r0, [r4, #0]
 8004a1e:	1821      	adds	r1, r4, r0
 8004a20:	428b      	cmp	r3, r1
 8004a22:	bf01      	itttt	eq
 8004a24:	6819      	ldreq	r1, [r3, #0]
 8004a26:	685b      	ldreq	r3, [r3, #4]
 8004a28:	1809      	addeq	r1, r1, r0
 8004a2a:	6021      	streq	r1, [r4, #0]
 8004a2c:	6063      	str	r3, [r4, #4]
 8004a2e:	6054      	str	r4, [r2, #4]
 8004a30:	e7cb      	b.n	80049ca <_free_r+0x22>
 8004a32:	bd38      	pop	{r3, r4, r5, pc}
 8004a34:	2000439c 	.word	0x2000439c

08004a38 <sbrk_aligned>:
 8004a38:	b570      	push	{r4, r5, r6, lr}
 8004a3a:	4e0f      	ldr	r6, [pc, #60]	@ (8004a78 <sbrk_aligned+0x40>)
 8004a3c:	460c      	mov	r4, r1
 8004a3e:	6831      	ldr	r1, [r6, #0]
 8004a40:	4605      	mov	r5, r0
 8004a42:	b911      	cbnz	r1, 8004a4a <sbrk_aligned+0x12>
 8004a44:	f000 f8ae 	bl	8004ba4 <_sbrk_r>
 8004a48:	6030      	str	r0, [r6, #0]
 8004a4a:	4621      	mov	r1, r4
 8004a4c:	4628      	mov	r0, r5
 8004a4e:	f000 f8a9 	bl	8004ba4 <_sbrk_r>
 8004a52:	1c43      	adds	r3, r0, #1
 8004a54:	d103      	bne.n	8004a5e <sbrk_aligned+0x26>
 8004a56:	f04f 34ff 	mov.w	r4, #4294967295
 8004a5a:	4620      	mov	r0, r4
 8004a5c:	bd70      	pop	{r4, r5, r6, pc}
 8004a5e:	1cc4      	adds	r4, r0, #3
 8004a60:	f024 0403 	bic.w	r4, r4, #3
 8004a64:	42a0      	cmp	r0, r4
 8004a66:	d0f8      	beq.n	8004a5a <sbrk_aligned+0x22>
 8004a68:	1a21      	subs	r1, r4, r0
 8004a6a:	4628      	mov	r0, r5
 8004a6c:	f000 f89a 	bl	8004ba4 <_sbrk_r>
 8004a70:	3001      	adds	r0, #1
 8004a72:	d1f2      	bne.n	8004a5a <sbrk_aligned+0x22>
 8004a74:	e7ef      	b.n	8004a56 <sbrk_aligned+0x1e>
 8004a76:	bf00      	nop
 8004a78:	20004398 	.word	0x20004398

08004a7c <_malloc_r>:
 8004a7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a80:	1ccd      	adds	r5, r1, #3
 8004a82:	f025 0503 	bic.w	r5, r5, #3
 8004a86:	3508      	adds	r5, #8
 8004a88:	2d0c      	cmp	r5, #12
 8004a8a:	bf38      	it	cc
 8004a8c:	250c      	movcc	r5, #12
 8004a8e:	2d00      	cmp	r5, #0
 8004a90:	4606      	mov	r6, r0
 8004a92:	db01      	blt.n	8004a98 <_malloc_r+0x1c>
 8004a94:	42a9      	cmp	r1, r5
 8004a96:	d904      	bls.n	8004aa2 <_malloc_r+0x26>
 8004a98:	230c      	movs	r3, #12
 8004a9a:	6033      	str	r3, [r6, #0]
 8004a9c:	2000      	movs	r0, #0
 8004a9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004aa2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004b78 <_malloc_r+0xfc>
 8004aa6:	f000 f869 	bl	8004b7c <__malloc_lock>
 8004aaa:	f8d8 3000 	ldr.w	r3, [r8]
 8004aae:	461c      	mov	r4, r3
 8004ab0:	bb44      	cbnz	r4, 8004b04 <_malloc_r+0x88>
 8004ab2:	4629      	mov	r1, r5
 8004ab4:	4630      	mov	r0, r6
 8004ab6:	f7ff ffbf 	bl	8004a38 <sbrk_aligned>
 8004aba:	1c43      	adds	r3, r0, #1
 8004abc:	4604      	mov	r4, r0
 8004abe:	d158      	bne.n	8004b72 <_malloc_r+0xf6>
 8004ac0:	f8d8 4000 	ldr.w	r4, [r8]
 8004ac4:	4627      	mov	r7, r4
 8004ac6:	2f00      	cmp	r7, #0
 8004ac8:	d143      	bne.n	8004b52 <_malloc_r+0xd6>
 8004aca:	2c00      	cmp	r4, #0
 8004acc:	d04b      	beq.n	8004b66 <_malloc_r+0xea>
 8004ace:	6823      	ldr	r3, [r4, #0]
 8004ad0:	4639      	mov	r1, r7
 8004ad2:	4630      	mov	r0, r6
 8004ad4:	eb04 0903 	add.w	r9, r4, r3
 8004ad8:	f000 f864 	bl	8004ba4 <_sbrk_r>
 8004adc:	4581      	cmp	r9, r0
 8004ade:	d142      	bne.n	8004b66 <_malloc_r+0xea>
 8004ae0:	6821      	ldr	r1, [r4, #0]
 8004ae2:	4630      	mov	r0, r6
 8004ae4:	1a6d      	subs	r5, r5, r1
 8004ae6:	4629      	mov	r1, r5
 8004ae8:	f7ff ffa6 	bl	8004a38 <sbrk_aligned>
 8004aec:	3001      	adds	r0, #1
 8004aee:	d03a      	beq.n	8004b66 <_malloc_r+0xea>
 8004af0:	6823      	ldr	r3, [r4, #0]
 8004af2:	442b      	add	r3, r5
 8004af4:	6023      	str	r3, [r4, #0]
 8004af6:	f8d8 3000 	ldr.w	r3, [r8]
 8004afa:	685a      	ldr	r2, [r3, #4]
 8004afc:	bb62      	cbnz	r2, 8004b58 <_malloc_r+0xdc>
 8004afe:	f8c8 7000 	str.w	r7, [r8]
 8004b02:	e00f      	b.n	8004b24 <_malloc_r+0xa8>
 8004b04:	6822      	ldr	r2, [r4, #0]
 8004b06:	1b52      	subs	r2, r2, r5
 8004b08:	d420      	bmi.n	8004b4c <_malloc_r+0xd0>
 8004b0a:	2a0b      	cmp	r2, #11
 8004b0c:	d917      	bls.n	8004b3e <_malloc_r+0xc2>
 8004b0e:	1961      	adds	r1, r4, r5
 8004b10:	42a3      	cmp	r3, r4
 8004b12:	6025      	str	r5, [r4, #0]
 8004b14:	bf18      	it	ne
 8004b16:	6059      	strne	r1, [r3, #4]
 8004b18:	6863      	ldr	r3, [r4, #4]
 8004b1a:	bf08      	it	eq
 8004b1c:	f8c8 1000 	streq.w	r1, [r8]
 8004b20:	5162      	str	r2, [r4, r5]
 8004b22:	604b      	str	r3, [r1, #4]
 8004b24:	4630      	mov	r0, r6
 8004b26:	f000 f82f 	bl	8004b88 <__malloc_unlock>
 8004b2a:	f104 000b 	add.w	r0, r4, #11
 8004b2e:	1d23      	adds	r3, r4, #4
 8004b30:	f020 0007 	bic.w	r0, r0, #7
 8004b34:	1ac2      	subs	r2, r0, r3
 8004b36:	bf1c      	itt	ne
 8004b38:	1a1b      	subne	r3, r3, r0
 8004b3a:	50a3      	strne	r3, [r4, r2]
 8004b3c:	e7af      	b.n	8004a9e <_malloc_r+0x22>
 8004b3e:	6862      	ldr	r2, [r4, #4]
 8004b40:	42a3      	cmp	r3, r4
 8004b42:	bf0c      	ite	eq
 8004b44:	f8c8 2000 	streq.w	r2, [r8]
 8004b48:	605a      	strne	r2, [r3, #4]
 8004b4a:	e7eb      	b.n	8004b24 <_malloc_r+0xa8>
 8004b4c:	4623      	mov	r3, r4
 8004b4e:	6864      	ldr	r4, [r4, #4]
 8004b50:	e7ae      	b.n	8004ab0 <_malloc_r+0x34>
 8004b52:	463c      	mov	r4, r7
 8004b54:	687f      	ldr	r7, [r7, #4]
 8004b56:	e7b6      	b.n	8004ac6 <_malloc_r+0x4a>
 8004b58:	461a      	mov	r2, r3
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	42a3      	cmp	r3, r4
 8004b5e:	d1fb      	bne.n	8004b58 <_malloc_r+0xdc>
 8004b60:	2300      	movs	r3, #0
 8004b62:	6053      	str	r3, [r2, #4]
 8004b64:	e7de      	b.n	8004b24 <_malloc_r+0xa8>
 8004b66:	230c      	movs	r3, #12
 8004b68:	4630      	mov	r0, r6
 8004b6a:	6033      	str	r3, [r6, #0]
 8004b6c:	f000 f80c 	bl	8004b88 <__malloc_unlock>
 8004b70:	e794      	b.n	8004a9c <_malloc_r+0x20>
 8004b72:	6005      	str	r5, [r0, #0]
 8004b74:	e7d6      	b.n	8004b24 <_malloc_r+0xa8>
 8004b76:	bf00      	nop
 8004b78:	2000439c 	.word	0x2000439c

08004b7c <__malloc_lock>:
 8004b7c:	4801      	ldr	r0, [pc, #4]	@ (8004b84 <__malloc_lock+0x8>)
 8004b7e:	f7ff bf03 	b.w	8004988 <__retarget_lock_acquire_recursive>
 8004b82:	bf00      	nop
 8004b84:	20004394 	.word	0x20004394

08004b88 <__malloc_unlock>:
 8004b88:	4801      	ldr	r0, [pc, #4]	@ (8004b90 <__malloc_unlock+0x8>)
 8004b8a:	f7ff befe 	b.w	800498a <__retarget_lock_release_recursive>
 8004b8e:	bf00      	nop
 8004b90:	20004394 	.word	0x20004394

08004b94 <_malloc_usable_size_r>:
 8004b94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b98:	1f18      	subs	r0, r3, #4
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	bfbc      	itt	lt
 8004b9e:	580b      	ldrlt	r3, [r1, r0]
 8004ba0:	18c0      	addlt	r0, r0, r3
 8004ba2:	4770      	bx	lr

08004ba4 <_sbrk_r>:
 8004ba4:	b538      	push	{r3, r4, r5, lr}
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	4d05      	ldr	r5, [pc, #20]	@ (8004bc0 <_sbrk_r+0x1c>)
 8004baa:	4604      	mov	r4, r0
 8004bac:	4608      	mov	r0, r1
 8004bae:	602b      	str	r3, [r5, #0]
 8004bb0:	f7fd fc16 	bl	80023e0 <_sbrk>
 8004bb4:	1c43      	adds	r3, r0, #1
 8004bb6:	d102      	bne.n	8004bbe <_sbrk_r+0x1a>
 8004bb8:	682b      	ldr	r3, [r5, #0]
 8004bba:	b103      	cbz	r3, 8004bbe <_sbrk_r+0x1a>
 8004bbc:	6023      	str	r3, [r4, #0]
 8004bbe:	bd38      	pop	{r3, r4, r5, pc}
 8004bc0:	20004390 	.word	0x20004390

08004bc4 <_init>:
 8004bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bc6:	bf00      	nop
 8004bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bca:	bc08      	pop	{r3}
 8004bcc:	469e      	mov	lr, r3
 8004bce:	4770      	bx	lr

08004bd0 <_fini>:
 8004bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bd2:	bf00      	nop
 8004bd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bd6:	bc08      	pop	{r3}
 8004bd8:	469e      	mov	lr, r3
 8004bda:	4770      	bx	lr
