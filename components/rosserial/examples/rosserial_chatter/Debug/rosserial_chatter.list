
rosserial_chatter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049fc  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000258  08004b08  08004b08  00005b08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d60  08004d60  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  08004d60  08004d60  00005d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d68  08004d68  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08004d68  08004d68  00005d68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d70  08004d70  00005d70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08004d74  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000431c  2000005c  08004dd0  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004378  08004dd0  00006378  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000df61  00000000  00000000  00006085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002233  00000000  00000000  00013fe6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000910  00000000  00000000  00016220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006f1  00000000  00000000  00016b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000866d  00000000  00000000  00017221  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000050e8  00000000  00000000  0001f88e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  00024976  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000027b0  00000000  00000000  000249bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 0000008b  00000000  00000000  0002716c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08004af0 	.word	0x08004af0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08004af0 	.word	0x08004af0

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000160:	f002 f97c 	bl	800245c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000164:	f000 f80b 	bl	800017e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000168:	f000 f894 	bl	8000294 <MX_GPIO_Init>
  MX_DMA_Init();
 800016c:	f000 f86c 	bl	8000248 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000170:	f000 f840 	bl	80001f4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  setup();
 8000174:	f001 fa38 	bl	80015e8 <setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  loop();
 8000178:	f001 fa46 	bl	8001608 <loop>
 800017c:	e7fc      	b.n	8000178 <main+0x1c>

0800017e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800017e:	b580      	push	{r7, lr}
 8000180:	b090      	sub	sp, #64	@ 0x40
 8000182:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000184:	f107 0318 	add.w	r3, r7, #24
 8000188:	2228      	movs	r2, #40	@ 0x28
 800018a:	2100      	movs	r1, #0
 800018c:	4618      	mov	r0, r3
 800018e:	f004 fb5f 	bl	8004850 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000192:	1d3b      	adds	r3, r7, #4
 8000194:	2200      	movs	r2, #0
 8000196:	601a      	str	r2, [r3, #0]
 8000198:	605a      	str	r2, [r3, #4]
 800019a:	609a      	str	r2, [r3, #8]
 800019c:	60da      	str	r2, [r3, #12]
 800019e:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001a0:	2302      	movs	r3, #2
 80001a2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001a4:	2301      	movs	r3, #1
 80001a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001a8:	2310      	movs	r3, #16
 80001aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001ac:	2300      	movs	r3, #0
 80001ae:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001b0:	f107 0318 	add.w	r3, r7, #24
 80001b4:	4618      	mov	r0, r3
 80001b6:	f002 ff23 	bl	8003000 <HAL_RCC_OscConfig>
 80001ba:	4603      	mov	r3, r0
 80001bc:	2b00      	cmp	r3, #0
 80001be:	d001      	beq.n	80001c4 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80001c0:	f000 f8b4 	bl	800032c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001c4:	230f      	movs	r3, #15
 80001c6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80001c8:	2300      	movs	r3, #0
 80001ca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001cc:	2300      	movs	r3, #0
 80001ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80001d0:	2300      	movs	r3, #0
 80001d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001d4:	2300      	movs	r3, #0
 80001d6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80001d8:	1d3b      	adds	r3, r7, #4
 80001da:	2100      	movs	r1, #0
 80001dc:	4618      	mov	r0, r3
 80001de:	f003 f991 	bl	8003504 <HAL_RCC_ClockConfig>
 80001e2:	4603      	mov	r3, r0
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d001      	beq.n	80001ec <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80001e8:	f000 f8a0 	bl	800032c <Error_Handler>
  }
}
 80001ec:	bf00      	nop
 80001ee:	3740      	adds	r7, #64	@ 0x40
 80001f0:	46bd      	mov	sp, r7
 80001f2:	bd80      	pop	{r7, pc}

080001f4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart_rosserial.Instance = USART1;
 80001f8:	4b11      	ldr	r3, [pc, #68]	@ (8000240 <MX_USART1_UART_Init+0x4c>)
 80001fa:	4a12      	ldr	r2, [pc, #72]	@ (8000244 <MX_USART1_UART_Init+0x50>)
 80001fc:	601a      	str	r2, [r3, #0]
  huart_rosserial.Init.BaudRate = 57600;
 80001fe:	4b10      	ldr	r3, [pc, #64]	@ (8000240 <MX_USART1_UART_Init+0x4c>)
 8000200:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 8000204:	605a      	str	r2, [r3, #4]
  huart_rosserial.Init.WordLength = UART_WORDLENGTH_8B;
 8000206:	4b0e      	ldr	r3, [pc, #56]	@ (8000240 <MX_USART1_UART_Init+0x4c>)
 8000208:	2200      	movs	r2, #0
 800020a:	609a      	str	r2, [r3, #8]
  huart_rosserial.Init.StopBits = UART_STOPBITS_1;
 800020c:	4b0c      	ldr	r3, [pc, #48]	@ (8000240 <MX_USART1_UART_Init+0x4c>)
 800020e:	2200      	movs	r2, #0
 8000210:	60da      	str	r2, [r3, #12]
  huart_rosserial.Init.Parity = UART_PARITY_NONE;
 8000212:	4b0b      	ldr	r3, [pc, #44]	@ (8000240 <MX_USART1_UART_Init+0x4c>)
 8000214:	2200      	movs	r2, #0
 8000216:	611a      	str	r2, [r3, #16]
  huart_rosserial.Init.Mode = UART_MODE_TX_RX;
 8000218:	4b09      	ldr	r3, [pc, #36]	@ (8000240 <MX_USART1_UART_Init+0x4c>)
 800021a:	220c      	movs	r2, #12
 800021c:	615a      	str	r2, [r3, #20]
  huart_rosserial.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800021e:	4b08      	ldr	r3, [pc, #32]	@ (8000240 <MX_USART1_UART_Init+0x4c>)
 8000220:	2200      	movs	r2, #0
 8000222:	619a      	str	r2, [r3, #24]
  huart_rosserial.Init.OverSampling = UART_OVERSAMPLING_16;
 8000224:	4b06      	ldr	r3, [pc, #24]	@ (8000240 <MX_USART1_UART_Init+0x4c>)
 8000226:	2200      	movs	r2, #0
 8000228:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart_rosserial) != HAL_OK)
 800022a:	4805      	ldr	r0, [pc, #20]	@ (8000240 <MX_USART1_UART_Init+0x4c>)
 800022c:	f003 faf8 	bl	8003820 <HAL_UART_Init>
 8000230:	4603      	mov	r3, r0
 8000232:	2b00      	cmp	r3, #0
 8000234:	d001      	beq.n	800023a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000236:	f000 f879 	bl	800032c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800023a:	bf00      	nop
 800023c:	bd80      	pop	{r7, pc}
 800023e:	bf00      	nop
 8000240:	20000078 	.word	0x20000078
 8000244:	40013800 	.word	0x40013800

08000248 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b082      	sub	sp, #8
 800024c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800024e:	4b10      	ldr	r3, [pc, #64]	@ (8000290 <MX_DMA_Init+0x48>)
 8000250:	695b      	ldr	r3, [r3, #20]
 8000252:	4a0f      	ldr	r2, [pc, #60]	@ (8000290 <MX_DMA_Init+0x48>)
 8000254:	f043 0301 	orr.w	r3, r3, #1
 8000258:	6153      	str	r3, [r2, #20]
 800025a:	4b0d      	ldr	r3, [pc, #52]	@ (8000290 <MX_DMA_Init+0x48>)
 800025c:	695b      	ldr	r3, [r3, #20]
 800025e:	f003 0301 	and.w	r3, r3, #1
 8000262:	607b      	str	r3, [r7, #4]
 8000264:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000266:	2200      	movs	r2, #0
 8000268:	2100      	movs	r1, #0
 800026a:	200e      	movs	r0, #14
 800026c:	f002 fa53 	bl	8002716 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000270:	200e      	movs	r0, #14
 8000272:	f002 fa6c 	bl	800274e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000276:	2200      	movs	r2, #0
 8000278:	2100      	movs	r1, #0
 800027a:	200f      	movs	r0, #15
 800027c:	f002 fa4b 	bl	8002716 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000280:	200f      	movs	r0, #15
 8000282:	f002 fa64 	bl	800274e <HAL_NVIC_EnableIRQ>

}
 8000286:	bf00      	nop
 8000288:	3708      	adds	r7, #8
 800028a:	46bd      	mov	sp, r7
 800028c:	bd80      	pop	{r7, pc}
 800028e:	bf00      	nop
 8000290:	40021000 	.word	0x40021000

08000294 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b088      	sub	sp, #32
 8000298:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800029a:	f107 0310 	add.w	r3, r7, #16
 800029e:	2200      	movs	r2, #0
 80002a0:	601a      	str	r2, [r3, #0]
 80002a2:	605a      	str	r2, [r3, #4]
 80002a4:	609a      	str	r2, [r3, #8]
 80002a6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002a8:	4b1e      	ldr	r3, [pc, #120]	@ (8000324 <MX_GPIO_Init+0x90>)
 80002aa:	699b      	ldr	r3, [r3, #24]
 80002ac:	4a1d      	ldr	r2, [pc, #116]	@ (8000324 <MX_GPIO_Init+0x90>)
 80002ae:	f043 0310 	orr.w	r3, r3, #16
 80002b2:	6193      	str	r3, [r2, #24]
 80002b4:	4b1b      	ldr	r3, [pc, #108]	@ (8000324 <MX_GPIO_Init+0x90>)
 80002b6:	699b      	ldr	r3, [r3, #24]
 80002b8:	f003 0310 	and.w	r3, r3, #16
 80002bc:	60fb      	str	r3, [r7, #12]
 80002be:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002c0:	4b18      	ldr	r3, [pc, #96]	@ (8000324 <MX_GPIO_Init+0x90>)
 80002c2:	699b      	ldr	r3, [r3, #24]
 80002c4:	4a17      	ldr	r2, [pc, #92]	@ (8000324 <MX_GPIO_Init+0x90>)
 80002c6:	f043 0320 	orr.w	r3, r3, #32
 80002ca:	6193      	str	r3, [r2, #24]
 80002cc:	4b15      	ldr	r3, [pc, #84]	@ (8000324 <MX_GPIO_Init+0x90>)
 80002ce:	699b      	ldr	r3, [r3, #24]
 80002d0:	f003 0320 	and.w	r3, r3, #32
 80002d4:	60bb      	str	r3, [r7, #8]
 80002d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002d8:	4b12      	ldr	r3, [pc, #72]	@ (8000324 <MX_GPIO_Init+0x90>)
 80002da:	699b      	ldr	r3, [r3, #24]
 80002dc:	4a11      	ldr	r2, [pc, #68]	@ (8000324 <MX_GPIO_Init+0x90>)
 80002de:	f043 0304 	orr.w	r3, r3, #4
 80002e2:	6193      	str	r3, [r2, #24]
 80002e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000324 <MX_GPIO_Init+0x90>)
 80002e6:	699b      	ldr	r3, [r3, #24]
 80002e8:	f003 0304 	and.w	r3, r3, #4
 80002ec:	607b      	str	r3, [r7, #4]
 80002ee:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80002f0:	2200      	movs	r2, #0
 80002f2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80002f6:	480c      	ldr	r0, [pc, #48]	@ (8000328 <MX_GPIO_Init+0x94>)
 80002f8:	f002 fe6a 	bl	8002fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80002fc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000300:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000302:	2301      	movs	r3, #1
 8000304:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000306:	2300      	movs	r3, #0
 8000308:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800030a:	2302      	movs	r3, #2
 800030c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800030e:	f107 0310 	add.w	r3, r7, #16
 8000312:	4619      	mov	r1, r3
 8000314:	4804      	ldr	r0, [pc, #16]	@ (8000328 <MX_GPIO_Init+0x94>)
 8000316:	f002 fcd7 	bl	8002cc8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800031a:	bf00      	nop
 800031c:	3720      	adds	r7, #32
 800031e:	46bd      	mov	sp, r7
 8000320:	bd80      	pop	{r7, pc}
 8000322:	bf00      	nop
 8000324:	40021000 	.word	0x40021000
 8000328:	40011000 	.word	0x40011000

0800032c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800032c:	b480      	push	{r7}
 800032e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000330:	b672      	cpsid	i
}
 8000332:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000334:	bf00      	nop
 8000336:	e7fd      	b.n	8000334 <Error_Handler+0x8>

08000338 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8000338:	b480      	push	{r7}
 800033a:	b083      	sub	sp, #12
 800033c:	af00      	add	r7, sp, #0
 800033e:	6078      	str	r0, [r7, #4]
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	2200      	movs	r2, #0
 8000344:	601a      	str	r2, [r3, #0]
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	2200      	movs	r2, #0
 800034a:	605a      	str	r2, [r3, #4]
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	4618      	mov	r0, r3
 8000350:	370c      	adds	r7, #12
 8000352:	46bd      	mov	sp, r7
 8000354:	bc80      	pop	{r7}
 8000356:	4770      	bx	lr

08000358 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8000358:	b480      	push	{r7}
 800035a:	b083      	sub	sp, #12
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
 8000360:	4a04      	ldr	r2, [pc, #16]	@ (8000374 <_ZN3ros3MsgC1Ev+0x1c>)
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	601a      	str	r2, [r3, #0]
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	4618      	mov	r0, r3
 800036a:	370c      	adds	r7, #12
 800036c:	46bd      	mov	sp, r7
 800036e:	bc80      	pop	{r7}
 8000370:	4770      	bx	lr
 8000372:	bf00      	nop
 8000374:	08004d24 	.word	0x08004d24

08000378 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8000378:	b580      	push	{r7, lr}
 800037a:	b082      	sub	sp, #8
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
      data()
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	4618      	mov	r0, r3
 8000384:	f7ff ffe8 	bl	8000358 <_ZN3ros3MsgC1Ev>
 8000388:	4a06      	ldr	r2, [pc, #24]	@ (80003a4 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	601a      	str	r2, [r3, #0]
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	3304      	adds	r3, #4
 8000392:	4618      	mov	r0, r3
 8000394:	f7ff ffd0 	bl	8000338 <_ZN3ros4TimeC1Ev>
    {
    }
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	4618      	mov	r0, r3
 800039c:	3708      	adds	r7, #8
 800039e:	46bd      	mov	sp, r7
 80003a0:	bd80      	pop	{r7, pc}
 80003a2:	bf00      	nop
 80003a4:	08004d0c 	.word	0x08004d0c

080003a8 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80003a8:	b480      	push	{r7}
 80003aa:	b085      	sub	sp, #20
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
 80003b0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80003b2:	2300      	movs	r3, #0
 80003b4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	6859      	ldr	r1, [r3, #4]
 80003ba:	68fb      	ldr	r3, [r7, #12]
 80003bc:	683a      	ldr	r2, [r7, #0]
 80003be:	4413      	add	r3, r2
 80003c0:	b2ca      	uxtb	r2, r1
 80003c2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	685b      	ldr	r3, [r3, #4]
 80003c8:	0a19      	lsrs	r1, r3, #8
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	3301      	adds	r3, #1
 80003ce:	683a      	ldr	r2, [r7, #0]
 80003d0:	4413      	add	r3, r2
 80003d2:	b2ca      	uxtb	r2, r1
 80003d4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	685b      	ldr	r3, [r3, #4]
 80003da:	0c19      	lsrs	r1, r3, #16
 80003dc:	68fb      	ldr	r3, [r7, #12]
 80003de:	3302      	adds	r3, #2
 80003e0:	683a      	ldr	r2, [r7, #0]
 80003e2:	4413      	add	r3, r2
 80003e4:	b2ca      	uxtb	r2, r1
 80003e6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	685b      	ldr	r3, [r3, #4]
 80003ec:	0e19      	lsrs	r1, r3, #24
 80003ee:	68fb      	ldr	r3, [r7, #12]
 80003f0:	3303      	adds	r3, #3
 80003f2:	683a      	ldr	r2, [r7, #0]
 80003f4:	4413      	add	r3, r2
 80003f6:	b2ca      	uxtb	r2, r1
 80003f8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 80003fa:	68fb      	ldr	r3, [r7, #12]
 80003fc:	3304      	adds	r3, #4
 80003fe:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	6899      	ldr	r1, [r3, #8]
 8000404:	68fb      	ldr	r3, [r7, #12]
 8000406:	683a      	ldr	r2, [r7, #0]
 8000408:	4413      	add	r3, r2
 800040a:	b2ca      	uxtb	r2, r1
 800040c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	689b      	ldr	r3, [r3, #8]
 8000412:	0a19      	lsrs	r1, r3, #8
 8000414:	68fb      	ldr	r3, [r7, #12]
 8000416:	3301      	adds	r3, #1
 8000418:	683a      	ldr	r2, [r7, #0]
 800041a:	4413      	add	r3, r2
 800041c:	b2ca      	uxtb	r2, r1
 800041e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	689b      	ldr	r3, [r3, #8]
 8000424:	0c19      	lsrs	r1, r3, #16
 8000426:	68fb      	ldr	r3, [r7, #12]
 8000428:	3302      	adds	r3, #2
 800042a:	683a      	ldr	r2, [r7, #0]
 800042c:	4413      	add	r3, r2
 800042e:	b2ca      	uxtb	r2, r1
 8000430:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	689b      	ldr	r3, [r3, #8]
 8000436:	0e19      	lsrs	r1, r3, #24
 8000438:	68fb      	ldr	r3, [r7, #12]
 800043a:	3303      	adds	r3, #3
 800043c:	683a      	ldr	r2, [r7, #0]
 800043e:	4413      	add	r3, r2
 8000440:	b2ca      	uxtb	r2, r1
 8000442:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8000444:	68fb      	ldr	r3, [r7, #12]
 8000446:	3304      	adds	r3, #4
 8000448:	60fb      	str	r3, [r7, #12]
      return offset;
 800044a:	68fb      	ldr	r3, [r7, #12]
    }
 800044c:	4618      	mov	r0, r3
 800044e:	3714      	adds	r7, #20
 8000450:	46bd      	mov	sp, r7
 8000452:	bc80      	pop	{r7}
 8000454:	4770      	bx	lr

08000456 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8000456:	b480      	push	{r7}
 8000458:	b085      	sub	sp, #20
 800045a:	af00      	add	r7, sp, #0
 800045c:	6078      	str	r0, [r7, #4]
 800045e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000460:	2300      	movs	r3, #0
 8000462:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8000464:	68fb      	ldr	r3, [r7, #12]
 8000466:	683a      	ldr	r2, [r7, #0]
 8000468:	4413      	add	r3, r2
 800046a:	781b      	ldrb	r3, [r3, #0]
 800046c:	461a      	mov	r2, r3
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	685a      	ldr	r2, [r3, #4]
 8000476:	68fb      	ldr	r3, [r7, #12]
 8000478:	3301      	adds	r3, #1
 800047a:	6839      	ldr	r1, [r7, #0]
 800047c:	440b      	add	r3, r1
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	021b      	lsls	r3, r3, #8
 8000482:	431a      	orrs	r2, r3
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	685a      	ldr	r2, [r3, #4]
 800048c:	68fb      	ldr	r3, [r7, #12]
 800048e:	3302      	adds	r3, #2
 8000490:	6839      	ldr	r1, [r7, #0]
 8000492:	440b      	add	r3, r1
 8000494:	781b      	ldrb	r3, [r3, #0]
 8000496:	041b      	lsls	r3, r3, #16
 8000498:	431a      	orrs	r2, r3
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	685a      	ldr	r2, [r3, #4]
 80004a2:	68fb      	ldr	r3, [r7, #12]
 80004a4:	3303      	adds	r3, #3
 80004a6:	6839      	ldr	r1, [r7, #0]
 80004a8:	440b      	add	r3, r1
 80004aa:	781b      	ldrb	r3, [r3, #0]
 80004ac:	061b      	lsls	r3, r3, #24
 80004ae:	431a      	orrs	r2, r3
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 80004b4:	68fb      	ldr	r3, [r7, #12]
 80004b6:	3304      	adds	r3, #4
 80004b8:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80004ba:	68fb      	ldr	r3, [r7, #12]
 80004bc:	683a      	ldr	r2, [r7, #0]
 80004be:	4413      	add	r3, r2
 80004c0:	781b      	ldrb	r3, [r3, #0]
 80004c2:	461a      	mov	r2, r3
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	689a      	ldr	r2, [r3, #8]
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	3301      	adds	r3, #1
 80004d0:	6839      	ldr	r1, [r7, #0]
 80004d2:	440b      	add	r3, r1
 80004d4:	781b      	ldrb	r3, [r3, #0]
 80004d6:	021b      	lsls	r3, r3, #8
 80004d8:	431a      	orrs	r2, r3
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	689a      	ldr	r2, [r3, #8]
 80004e2:	68fb      	ldr	r3, [r7, #12]
 80004e4:	3302      	adds	r3, #2
 80004e6:	6839      	ldr	r1, [r7, #0]
 80004e8:	440b      	add	r3, r1
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	041b      	lsls	r3, r3, #16
 80004ee:	431a      	orrs	r2, r3
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	689a      	ldr	r2, [r3, #8]
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	3303      	adds	r3, #3
 80004fc:	6839      	ldr	r1, [r7, #0]
 80004fe:	440b      	add	r3, r1
 8000500:	781b      	ldrb	r3, [r3, #0]
 8000502:	061b      	lsls	r3, r3, #24
 8000504:	431a      	orrs	r2, r3
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 800050a:	68fb      	ldr	r3, [r7, #12]
 800050c:	3304      	adds	r3, #4
 800050e:	60fb      	str	r3, [r7, #12]
     return offset;
 8000510:	68fb      	ldr	r3, [r7, #12]
    }
 8000512:	4618      	mov	r0, r3
 8000514:	3714      	adds	r7, #20
 8000516:	46bd      	mov	sp, r7
 8000518:	bc80      	pop	{r7}
 800051a:	4770      	bx	lr

0800051c <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 800051c:	b480      	push	{r7}
 800051e:	b083      	sub	sp, #12
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
 8000524:	4b02      	ldr	r3, [pc, #8]	@ (8000530 <_ZN8std_msgs4Time7getTypeEv+0x14>)
 8000526:	4618      	mov	r0, r3
 8000528:	370c      	adds	r7, #12
 800052a:	46bd      	mov	sp, r7
 800052c:	bc80      	pop	{r7}
 800052e:	4770      	bx	lr
 8000530:	08004b08 	.word	0x08004b08

08000534 <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8000534:	b480      	push	{r7}
 8000536:	b083      	sub	sp, #12
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
 800053c:	4b02      	ldr	r3, [pc, #8]	@ (8000548 <_ZN8std_msgs4Time6getMD5Ev+0x14>)
 800053e:	4618      	mov	r0, r3
 8000540:	370c      	adds	r7, #12
 8000542:	46bd      	mov	sp, r7
 8000544:	bc80      	pop	{r7}
 8000546:	4770      	bx	lr
 8000548:	08004b18 	.word	0x08004b18

0800054c <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	4618      	mov	r0, r3
 8000558:	f7ff fefe 	bl	8000358 <_ZN3ros3MsgC1Ev>
 800055c:	4a0b      	ldr	r2, [pc, #44]	@ (800058c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	601a      	str	r2, [r3, #0]
      topic_id(0),
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	2200      	movs	r2, #0
 8000566:	809a      	strh	r2, [r3, #4]
      topic_name(""),
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	4a09      	ldr	r2, [pc, #36]	@ (8000590 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800056c:	609a      	str	r2, [r3, #8]
      message_type(""),
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	4a07      	ldr	r2, [pc, #28]	@ (8000590 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000572:	60da      	str	r2, [r3, #12]
      md5sum(""),
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	4a06      	ldr	r2, [pc, #24]	@ (8000590 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000578:	611a      	str	r2, [r3, #16]
      buffer_size(0)
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	2200      	movs	r2, #0
 800057e:	615a      	str	r2, [r3, #20]
    {
    }
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	4618      	mov	r0, r3
 8000584:	3708      	adds	r7, #8
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	08004cf4 	.word	0x08004cf4
 8000590:	08004b3c 	.word	0x08004b3c

08000594 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000594:	b580      	push	{r7, lr}
 8000596:	b088      	sub	sp, #32
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
 800059c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800059e:	2300      	movs	r3, #0
 80005a0:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	8899      	ldrh	r1, [r3, #4]
 80005a6:	69fb      	ldr	r3, [r7, #28]
 80005a8:	683a      	ldr	r2, [r7, #0]
 80005aa:	4413      	add	r3, r2
 80005ac:	b2ca      	uxtb	r2, r1
 80005ae:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	889b      	ldrh	r3, [r3, #4]
 80005b4:	0a1b      	lsrs	r3, r3, #8
 80005b6:	b299      	uxth	r1, r3
 80005b8:	69fb      	ldr	r3, [r7, #28]
 80005ba:	3301      	adds	r3, #1
 80005bc:	683a      	ldr	r2, [r7, #0]
 80005be:	4413      	add	r3, r2
 80005c0:	b2ca      	uxtb	r2, r1
 80005c2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 80005c4:	69fb      	ldr	r3, [r7, #28]
 80005c6:	3302      	adds	r3, #2
 80005c8:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	689b      	ldr	r3, [r3, #8]
 80005ce:	4618      	mov	r0, r3
 80005d0:	f7ff fdbc 	bl	800014c <strlen>
 80005d4:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 80005d6:	69fb      	ldr	r3, [r7, #28]
 80005d8:	683a      	ldr	r2, [r7, #0]
 80005da:	4413      	add	r3, r2
 80005dc:	69b9      	ldr	r1, [r7, #24]
 80005de:	4618      	mov	r0, r3
 80005e0:	f001 f82c 	bl	800163c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80005e4:	69fb      	ldr	r3, [r7, #28]
 80005e6:	3304      	adds	r3, #4
 80005e8:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 80005ea:	69fb      	ldr	r3, [r7, #28]
 80005ec:	683a      	ldr	r2, [r7, #0]
 80005ee:	18d0      	adds	r0, r2, r3
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	689b      	ldr	r3, [r3, #8]
 80005f4:	69ba      	ldr	r2, [r7, #24]
 80005f6:	4619      	mov	r1, r3
 80005f8:	f004 f95e 	bl	80048b8 <memcpy>
      offset += length_topic_name;
 80005fc:	69fa      	ldr	r2, [r7, #28]
 80005fe:	69bb      	ldr	r3, [r7, #24]
 8000600:	4413      	add	r3, r2
 8000602:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	68db      	ldr	r3, [r3, #12]
 8000608:	4618      	mov	r0, r3
 800060a:	f7ff fd9f 	bl	800014c <strlen>
 800060e:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8000610:	69fb      	ldr	r3, [r7, #28]
 8000612:	683a      	ldr	r2, [r7, #0]
 8000614:	4413      	add	r3, r2
 8000616:	6979      	ldr	r1, [r7, #20]
 8000618:	4618      	mov	r0, r3
 800061a:	f001 f80f 	bl	800163c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800061e:	69fb      	ldr	r3, [r7, #28]
 8000620:	3304      	adds	r3, #4
 8000622:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8000624:	69fb      	ldr	r3, [r7, #28]
 8000626:	683a      	ldr	r2, [r7, #0]
 8000628:	18d0      	adds	r0, r2, r3
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	68db      	ldr	r3, [r3, #12]
 800062e:	697a      	ldr	r2, [r7, #20]
 8000630:	4619      	mov	r1, r3
 8000632:	f004 f941 	bl	80048b8 <memcpy>
      offset += length_message_type;
 8000636:	69fa      	ldr	r2, [r7, #28]
 8000638:	697b      	ldr	r3, [r7, #20]
 800063a:	4413      	add	r3, r2
 800063c:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	691b      	ldr	r3, [r3, #16]
 8000642:	4618      	mov	r0, r3
 8000644:	f7ff fd82 	bl	800014c <strlen>
 8000648:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 800064a:	69fb      	ldr	r3, [r7, #28]
 800064c:	683a      	ldr	r2, [r7, #0]
 800064e:	4413      	add	r3, r2
 8000650:	6939      	ldr	r1, [r7, #16]
 8000652:	4618      	mov	r0, r3
 8000654:	f000 fff2 	bl	800163c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000658:	69fb      	ldr	r3, [r7, #28]
 800065a:	3304      	adds	r3, #4
 800065c:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 800065e:	69fb      	ldr	r3, [r7, #28]
 8000660:	683a      	ldr	r2, [r7, #0]
 8000662:	18d0      	adds	r0, r2, r3
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	691b      	ldr	r3, [r3, #16]
 8000668:	693a      	ldr	r2, [r7, #16]
 800066a:	4619      	mov	r1, r3
 800066c:	f004 f924 	bl	80048b8 <memcpy>
      offset += length_md5sum;
 8000670:	69fa      	ldr	r2, [r7, #28]
 8000672:	693b      	ldr	r3, [r7, #16]
 8000674:	4413      	add	r3, r2
 8000676:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	695b      	ldr	r3, [r3, #20]
 800067c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 800067e:	68f9      	ldr	r1, [r7, #12]
 8000680:	69fb      	ldr	r3, [r7, #28]
 8000682:	683a      	ldr	r2, [r7, #0]
 8000684:	4413      	add	r3, r2
 8000686:	b2ca      	uxtb	r2, r1
 8000688:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	0a19      	lsrs	r1, r3, #8
 800068e:	69fb      	ldr	r3, [r7, #28]
 8000690:	3301      	adds	r3, #1
 8000692:	683a      	ldr	r2, [r7, #0]
 8000694:	4413      	add	r3, r2
 8000696:	b2ca      	uxtb	r2, r1
 8000698:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	0c19      	lsrs	r1, r3, #16
 800069e:	69fb      	ldr	r3, [r7, #28]
 80006a0:	3302      	adds	r3, #2
 80006a2:	683a      	ldr	r2, [r7, #0]
 80006a4:	4413      	add	r3, r2
 80006a6:	b2ca      	uxtb	r2, r1
 80006a8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	0e19      	lsrs	r1, r3, #24
 80006ae:	69fb      	ldr	r3, [r7, #28]
 80006b0:	3303      	adds	r3, #3
 80006b2:	683a      	ldr	r2, [r7, #0]
 80006b4:	4413      	add	r3, r2
 80006b6:	b2ca      	uxtb	r2, r1
 80006b8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 80006ba:	69fb      	ldr	r3, [r7, #28]
 80006bc:	3304      	adds	r3, #4
 80006be:	61fb      	str	r3, [r7, #28]
      return offset;
 80006c0:	69fb      	ldr	r3, [r7, #28]
    }
 80006c2:	4618      	mov	r0, r3
 80006c4:	3720      	adds	r7, #32
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}

080006ca <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80006ca:	b580      	push	{r7, lr}
 80006cc:	b08a      	sub	sp, #40	@ 0x28
 80006ce:	af00      	add	r7, sp, #0
 80006d0:	6078      	str	r0, [r7, #4]
 80006d2:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80006d4:	2300      	movs	r3, #0
 80006d6:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 80006d8:	69bb      	ldr	r3, [r7, #24]
 80006da:	683a      	ldr	r2, [r7, #0]
 80006dc:	4413      	add	r3, r2
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	461a      	mov	r2, r3
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	889b      	ldrh	r3, [r3, #4]
 80006ea:	b21a      	sxth	r2, r3
 80006ec:	69bb      	ldr	r3, [r7, #24]
 80006ee:	3301      	adds	r3, #1
 80006f0:	6839      	ldr	r1, [r7, #0]
 80006f2:	440b      	add	r3, r1
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	021b      	lsls	r3, r3, #8
 80006f8:	b21b      	sxth	r3, r3
 80006fa:	4313      	orrs	r3, r2
 80006fc:	b21b      	sxth	r3, r3
 80006fe:	b29a      	uxth	r2, r3
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8000704:	69bb      	ldr	r3, [r7, #24]
 8000706:	3302      	adds	r3, #2
 8000708:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 800070a:	69bb      	ldr	r3, [r7, #24]
 800070c:	683a      	ldr	r2, [r7, #0]
 800070e:	441a      	add	r2, r3
 8000710:	f107 0314 	add.w	r3, r7, #20
 8000714:	4611      	mov	r1, r2
 8000716:	4618      	mov	r0, r3
 8000718:	f000 ffae 	bl	8001678 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800071c:	69bb      	ldr	r3, [r7, #24]
 800071e:	3304      	adds	r3, #4
 8000720:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8000722:	69bb      	ldr	r3, [r7, #24]
 8000724:	627b      	str	r3, [r7, #36]	@ 0x24
 8000726:	e00b      	b.n	8000740 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x76>
          inbuffer[k-1]=inbuffer[k];
 8000728:	683a      	ldr	r2, [r7, #0]
 800072a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800072c:	441a      	add	r2, r3
 800072e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000730:	3b01      	subs	r3, #1
 8000732:	6839      	ldr	r1, [r7, #0]
 8000734:	440b      	add	r3, r1
 8000736:	7812      	ldrb	r2, [r2, #0]
 8000738:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800073a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800073c:	3301      	adds	r3, #1
 800073e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000740:	69ba      	ldr	r2, [r7, #24]
 8000742:	697b      	ldr	r3, [r7, #20]
 8000744:	4413      	add	r3, r2
 8000746:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000748:	429a      	cmp	r2, r3
 800074a:	d3ed      	bcc.n	8000728 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5e>
      }
      inbuffer[offset+length_topic_name-1]=0;
 800074c:	69ba      	ldr	r2, [r7, #24]
 800074e:	697b      	ldr	r3, [r7, #20]
 8000750:	4413      	add	r3, r2
 8000752:	3b01      	subs	r3, #1
 8000754:	683a      	ldr	r2, [r7, #0]
 8000756:	4413      	add	r3, r2
 8000758:	2200      	movs	r2, #0
 800075a:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 800075c:	69bb      	ldr	r3, [r7, #24]
 800075e:	3b01      	subs	r3, #1
 8000760:	683a      	ldr	r2, [r7, #0]
 8000762:	441a      	add	r2, r3
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8000768:	69ba      	ldr	r2, [r7, #24]
 800076a:	697b      	ldr	r3, [r7, #20]
 800076c:	4413      	add	r3, r2
 800076e:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8000770:	69bb      	ldr	r3, [r7, #24]
 8000772:	683a      	ldr	r2, [r7, #0]
 8000774:	441a      	add	r2, r3
 8000776:	f107 0310 	add.w	r3, r7, #16
 800077a:	4611      	mov	r1, r2
 800077c:	4618      	mov	r0, r3
 800077e:	f000 ff7b 	bl	8001678 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000782:	69bb      	ldr	r3, [r7, #24]
 8000784:	3304      	adds	r3, #4
 8000786:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8000788:	69bb      	ldr	r3, [r7, #24]
 800078a:	623b      	str	r3, [r7, #32]
 800078c:	e00b      	b.n	80007a6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xdc>
          inbuffer[k-1]=inbuffer[k];
 800078e:	683a      	ldr	r2, [r7, #0]
 8000790:	6a3b      	ldr	r3, [r7, #32]
 8000792:	441a      	add	r2, r3
 8000794:	6a3b      	ldr	r3, [r7, #32]
 8000796:	3b01      	subs	r3, #1
 8000798:	6839      	ldr	r1, [r7, #0]
 800079a:	440b      	add	r3, r1
 800079c:	7812      	ldrb	r2, [r2, #0]
 800079e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80007a0:	6a3b      	ldr	r3, [r7, #32]
 80007a2:	3301      	adds	r3, #1
 80007a4:	623b      	str	r3, [r7, #32]
 80007a6:	69ba      	ldr	r2, [r7, #24]
 80007a8:	693b      	ldr	r3, [r7, #16]
 80007aa:	4413      	add	r3, r2
 80007ac:	6a3a      	ldr	r2, [r7, #32]
 80007ae:	429a      	cmp	r2, r3
 80007b0:	d3ed      	bcc.n	800078e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc4>
      }
      inbuffer[offset+length_message_type-1]=0;
 80007b2:	69ba      	ldr	r2, [r7, #24]
 80007b4:	693b      	ldr	r3, [r7, #16]
 80007b6:	4413      	add	r3, r2
 80007b8:	3b01      	subs	r3, #1
 80007ba:	683a      	ldr	r2, [r7, #0]
 80007bc:	4413      	add	r3, r2
 80007be:	2200      	movs	r2, #0
 80007c0:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 80007c2:	69bb      	ldr	r3, [r7, #24]
 80007c4:	3b01      	subs	r3, #1
 80007c6:	683a      	ldr	r2, [r7, #0]
 80007c8:	441a      	add	r2, r3
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 80007ce:	69ba      	ldr	r2, [r7, #24]
 80007d0:	693b      	ldr	r3, [r7, #16]
 80007d2:	4413      	add	r3, r2
 80007d4:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 80007d6:	69bb      	ldr	r3, [r7, #24]
 80007d8:	683a      	ldr	r2, [r7, #0]
 80007da:	441a      	add	r2, r3
 80007dc:	f107 030c 	add.w	r3, r7, #12
 80007e0:	4611      	mov	r1, r2
 80007e2:	4618      	mov	r0, r3
 80007e4:	f000 ff48 	bl	8001678 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80007e8:	69bb      	ldr	r3, [r7, #24]
 80007ea:	3304      	adds	r3, #4
 80007ec:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80007ee:	69bb      	ldr	r3, [r7, #24]
 80007f0:	61fb      	str	r3, [r7, #28]
 80007f2:	e00b      	b.n	800080c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x142>
          inbuffer[k-1]=inbuffer[k];
 80007f4:	683a      	ldr	r2, [r7, #0]
 80007f6:	69fb      	ldr	r3, [r7, #28]
 80007f8:	441a      	add	r2, r3
 80007fa:	69fb      	ldr	r3, [r7, #28]
 80007fc:	3b01      	subs	r3, #1
 80007fe:	6839      	ldr	r1, [r7, #0]
 8000800:	440b      	add	r3, r1
 8000802:	7812      	ldrb	r2, [r2, #0]
 8000804:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8000806:	69fb      	ldr	r3, [r7, #28]
 8000808:	3301      	adds	r3, #1
 800080a:	61fb      	str	r3, [r7, #28]
 800080c:	69ba      	ldr	r2, [r7, #24]
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	4413      	add	r3, r2
 8000812:	69fa      	ldr	r2, [r7, #28]
 8000814:	429a      	cmp	r2, r3
 8000816:	d3ed      	bcc.n	80007f4 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x12a>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8000818:	69ba      	ldr	r2, [r7, #24]
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	4413      	add	r3, r2
 800081e:	3b01      	subs	r3, #1
 8000820:	683a      	ldr	r2, [r7, #0]
 8000822:	4413      	add	r3, r2
 8000824:	2200      	movs	r2, #0
 8000826:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8000828:	69bb      	ldr	r3, [r7, #24]
 800082a:	3b01      	subs	r3, #1
 800082c:	683a      	ldr	r2, [r7, #0]
 800082e:	441a      	add	r2, r3
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8000834:	69ba      	ldr	r2, [r7, #24]
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	4413      	add	r3, r2
 800083a:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 800083c:	2300      	movs	r3, #0
 800083e:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000840:	68bb      	ldr	r3, [r7, #8]
 8000842:	69ba      	ldr	r2, [r7, #24]
 8000844:	6839      	ldr	r1, [r7, #0]
 8000846:	440a      	add	r2, r1
 8000848:	7812      	ldrb	r2, [r2, #0]
 800084a:	4313      	orrs	r3, r2
 800084c:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800084e:	68ba      	ldr	r2, [r7, #8]
 8000850:	69bb      	ldr	r3, [r7, #24]
 8000852:	3301      	adds	r3, #1
 8000854:	6839      	ldr	r1, [r7, #0]
 8000856:	440b      	add	r3, r1
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	021b      	lsls	r3, r3, #8
 800085c:	4313      	orrs	r3, r2
 800085e:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000860:	68ba      	ldr	r2, [r7, #8]
 8000862:	69bb      	ldr	r3, [r7, #24]
 8000864:	3302      	adds	r3, #2
 8000866:	6839      	ldr	r1, [r7, #0]
 8000868:	440b      	add	r3, r1
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	041b      	lsls	r3, r3, #16
 800086e:	4313      	orrs	r3, r2
 8000870:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000872:	68ba      	ldr	r2, [r7, #8]
 8000874:	69bb      	ldr	r3, [r7, #24]
 8000876:	3303      	adds	r3, #3
 8000878:	6839      	ldr	r1, [r7, #0]
 800087a:	440b      	add	r3, r1
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	061b      	lsls	r3, r3, #24
 8000880:	4313      	orrs	r3, r2
 8000882:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8000884:	68ba      	ldr	r2, [r7, #8]
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 800088a:	69bb      	ldr	r3, [r7, #24]
 800088c:	3304      	adds	r3, #4
 800088e:	61bb      	str	r3, [r7, #24]
     return offset;
 8000890:	69bb      	ldr	r3, [r7, #24]
    }
 8000892:	4618      	mov	r0, r3
 8000894:	3728      	adds	r7, #40	@ 0x28
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
	...

0800089c <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 800089c:	b480      	push	{r7}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
 80008a4:	4b02      	ldr	r3, [pc, #8]	@ (80008b0 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x14>)
 80008a6:	4618      	mov	r0, r3
 80008a8:	370c      	adds	r7, #12
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bc80      	pop	{r7}
 80008ae:	4770      	bx	lr
 80008b0:	08004b40 	.word	0x08004b40

080008b4 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 80008b4:	b480      	push	{r7}
 80008b6:	b083      	sub	sp, #12
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
 80008bc:	4b02      	ldr	r3, [pc, #8]	@ (80008c8 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x14>)
 80008be:	4618      	mov	r0, r3
 80008c0:	370c      	adds	r7, #12
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bc80      	pop	{r7}
 80008c6:	4770      	bx	lr
 80008c8:	08004b5c 	.word	0x08004b5c

080008cc <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	4618      	mov	r0, r3
 80008d8:	f7ff fd3e 	bl	8000358 <_ZN3ros3MsgC1Ev>
 80008dc:	4a06      	ldr	r2, [pc, #24]	@ (80008f8 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	601a      	str	r2, [r3, #0]
      level(0),
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	2200      	movs	r2, #0
 80008e6:	711a      	strb	r2, [r3, #4]
      msg("")
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	4a04      	ldr	r2, [pc, #16]	@ (80008fc <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 80008ec:	609a      	str	r2, [r3, #8]
    {
    }
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	4618      	mov	r0, r3
 80008f2:	3708      	adds	r7, #8
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	08004cdc 	.word	0x08004cdc
 80008fc:	08004b3c 	.word	0x08004b3c

08000900 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
 8000908:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800090a:	2300      	movs	r3, #0
 800090c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	683a      	ldr	r2, [r7, #0]
 8000912:	4413      	add	r3, r2
 8000914:	687a      	ldr	r2, [r7, #4]
 8000916:	7912      	ldrb	r2, [r2, #4]
 8000918:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	3301      	adds	r3, #1
 800091e:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	689b      	ldr	r3, [r3, #8]
 8000924:	4618      	mov	r0, r3
 8000926:	f7ff fc11 	bl	800014c <strlen>
 800092a:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	683a      	ldr	r2, [r7, #0]
 8000930:	4413      	add	r3, r2
 8000932:	68b9      	ldr	r1, [r7, #8]
 8000934:	4618      	mov	r0, r3
 8000936:	f000 fe81 	bl	800163c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	3304      	adds	r3, #4
 800093e:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	683a      	ldr	r2, [r7, #0]
 8000944:	18d0      	adds	r0, r2, r3
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	689b      	ldr	r3, [r3, #8]
 800094a:	68ba      	ldr	r2, [r7, #8]
 800094c:	4619      	mov	r1, r3
 800094e:	f003 ffb3 	bl	80048b8 <memcpy>
      offset += length_msg;
 8000952:	68fa      	ldr	r2, [r7, #12]
 8000954:	68bb      	ldr	r3, [r7, #8]
 8000956:	4413      	add	r3, r2
 8000958:	60fb      	str	r3, [r7, #12]
      return offset;
 800095a:	68fb      	ldr	r3, [r7, #12]
    }
 800095c:	4618      	mov	r0, r3
 800095e:	3710      	adds	r7, #16
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}

08000964 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8000964:	b580      	push	{r7, lr}
 8000966:	b086      	sub	sp, #24
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
 800096c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800096e:	2300      	movs	r3, #0
 8000970:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8000972:	693b      	ldr	r3, [r7, #16]
 8000974:	683a      	ldr	r2, [r7, #0]
 8000976:	4413      	add	r3, r2
 8000978:	781a      	ldrb	r2, [r3, #0]
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 800097e:	693b      	ldr	r3, [r7, #16]
 8000980:	3301      	adds	r3, #1
 8000982:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8000984:	693b      	ldr	r3, [r7, #16]
 8000986:	683a      	ldr	r2, [r7, #0]
 8000988:	441a      	add	r2, r3
 800098a:	f107 030c 	add.w	r3, r7, #12
 800098e:	4611      	mov	r1, r2
 8000990:	4618      	mov	r0, r3
 8000992:	f000 fe71 	bl	8001678 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000996:	693b      	ldr	r3, [r7, #16]
 8000998:	3304      	adds	r3, #4
 800099a:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 800099c:	693b      	ldr	r3, [r7, #16]
 800099e:	617b      	str	r3, [r7, #20]
 80009a0:	e00b      	b.n	80009ba <_ZN14rosserial_msgs3Log11deserializeEPh+0x56>
          inbuffer[k-1]=inbuffer[k];
 80009a2:	683a      	ldr	r2, [r7, #0]
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	441a      	add	r2, r3
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	3b01      	subs	r3, #1
 80009ac:	6839      	ldr	r1, [r7, #0]
 80009ae:	440b      	add	r3, r1
 80009b0:	7812      	ldrb	r2, [r2, #0]
 80009b2:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	3301      	adds	r3, #1
 80009b8:	617b      	str	r3, [r7, #20]
 80009ba:	693a      	ldr	r2, [r7, #16]
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	4413      	add	r3, r2
 80009c0:	697a      	ldr	r2, [r7, #20]
 80009c2:	429a      	cmp	r2, r3
 80009c4:	d3ed      	bcc.n	80009a2 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3e>
      }
      inbuffer[offset+length_msg-1]=0;
 80009c6:	693a      	ldr	r2, [r7, #16]
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	4413      	add	r3, r2
 80009cc:	3b01      	subs	r3, #1
 80009ce:	683a      	ldr	r2, [r7, #0]
 80009d0:	4413      	add	r3, r2
 80009d2:	2200      	movs	r2, #0
 80009d4:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 80009d6:	693b      	ldr	r3, [r7, #16]
 80009d8:	3b01      	subs	r3, #1
 80009da:	683a      	ldr	r2, [r7, #0]
 80009dc:	441a      	add	r2, r3
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 80009e2:	693a      	ldr	r2, [r7, #16]
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	4413      	add	r3, r2
 80009e8:	613b      	str	r3, [r7, #16]
     return offset;
 80009ea:	693b      	ldr	r3, [r7, #16]
    }
 80009ec:	4618      	mov	r0, r3
 80009ee:	3718      	adds	r7, #24
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}

080009f4 <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
 80009fc:	4b02      	ldr	r3, [pc, #8]	@ (8000a08 <_ZN14rosserial_msgs3Log7getTypeEv+0x14>)
 80009fe:	4618      	mov	r0, r3
 8000a00:	370c      	adds	r7, #12
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bc80      	pop	{r7}
 8000a06:	4770      	bx	lr
 8000a08:	08004b80 	.word	0x08004b80

08000a0c <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
 8000a14:	4b02      	ldr	r3, [pc, #8]	@ (8000a20 <_ZN14rosserial_msgs3Log6getMD5Ev+0x14>)
 8000a16:	4618      	mov	r0, r3
 8000a18:	370c      	adds	r7, #12
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bc80      	pop	{r7}
 8000a1e:	4770      	bx	lr
 8000a20:	08004b94 	.word	0x08004b94

08000a24 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f7ff fc92 	bl	8000358 <_ZN3ros3MsgC1Ev>
 8000a34:	4a11      	ldr	r2, [pc, #68]	@ (8000a7c <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	601a      	str	r2, [r3, #0]
      ints_length(0), st_ints(), ints(nullptr),
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	605a      	str	r2, [r3, #4]
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	2200      	movs	r2, #0
 8000a44:	609a      	str	r2, [r3, #8]
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	2200      	movs	r2, #0
 8000a4a:	60da      	str	r2, [r3, #12]
      floats_length(0), st_floats(), floats(nullptr),
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	2200      	movs	r2, #0
 8000a50:	611a      	str	r2, [r3, #16]
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	f04f 0200 	mov.w	r2, #0
 8000a58:	615a      	str	r2, [r3, #20]
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	619a      	str	r2, [r3, #24]
      strings_length(0), st_strings(), strings(nullptr)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	2200      	movs	r2, #0
 8000a64:	61da      	str	r2, [r3, #28]
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	2200      	movs	r2, #0
 8000a6a:	621a      	str	r2, [r3, #32]
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	2200      	movs	r2, #0
 8000a70:	625a      	str	r2, [r3, #36]	@ 0x24
    {
    }
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	4618      	mov	r0, r3
 8000a76:	3708      	adds	r7, #8
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	08004cc4 	.word	0x08004cc4

08000a80 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b08a      	sub	sp, #40	@ 0x28
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
 8000a88:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	627b      	str	r3, [r7, #36]	@ 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	6859      	ldr	r1, [r3, #4]
 8000a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a94:	683a      	ldr	r2, [r7, #0]
 8000a96:	4413      	add	r3, r2
 8000a98:	b2ca      	uxtb	r2, r1
 8000a9a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	0a19      	lsrs	r1, r3, #8
 8000aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aa4:	3301      	adds	r3, #1
 8000aa6:	683a      	ldr	r2, [r7, #0]
 8000aa8:	4413      	add	r3, r2
 8000aaa:	b2ca      	uxtb	r2, r1
 8000aac:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	685b      	ldr	r3, [r3, #4]
 8000ab2:	0c19      	lsrs	r1, r3, #16
 8000ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ab6:	3302      	adds	r3, #2
 8000ab8:	683a      	ldr	r2, [r7, #0]
 8000aba:	4413      	add	r3, r2
 8000abc:	b2ca      	uxtb	r2, r1
 8000abe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	685b      	ldr	r3, [r3, #4]
 8000ac4:	0e19      	lsrs	r1, r3, #24
 8000ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ac8:	3303      	adds	r3, #3
 8000aca:	683a      	ldr	r2, [r7, #0]
 8000acc:	4413      	add	r3, r2
 8000ace:	b2ca      	uxtb	r2, r1
 8000ad0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8000ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ad4:	3304      	adds	r3, #4
 8000ad6:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8000ad8:	2300      	movs	r3, #0
 8000ada:	623b      	str	r3, [r7, #32]
 8000adc:	e02a      	b.n	8000b34 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xb4>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	68da      	ldr	r2, [r3, #12]
 8000ae2:	6a3b      	ldr	r3, [r7, #32]
 8000ae4:	009b      	lsls	r3, r3, #2
 8000ae6:	4413      	add	r3, r2
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8000aec:	6939      	ldr	r1, [r7, #16]
 8000aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000af0:	683a      	ldr	r2, [r7, #0]
 8000af2:	4413      	add	r3, r2
 8000af4:	b2ca      	uxtb	r2, r1
 8000af6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8000af8:	693b      	ldr	r3, [r7, #16]
 8000afa:	0a19      	lsrs	r1, r3, #8
 8000afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000afe:	3301      	adds	r3, #1
 8000b00:	683a      	ldr	r2, [r7, #0]
 8000b02:	4413      	add	r3, r2
 8000b04:	b2ca      	uxtb	r2, r1
 8000b06:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8000b08:	693b      	ldr	r3, [r7, #16]
 8000b0a:	0c19      	lsrs	r1, r3, #16
 8000b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b0e:	3302      	adds	r3, #2
 8000b10:	683a      	ldr	r2, [r7, #0]
 8000b12:	4413      	add	r3, r2
 8000b14:	b2ca      	uxtb	r2, r1
 8000b16:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8000b18:	693b      	ldr	r3, [r7, #16]
 8000b1a:	0e19      	lsrs	r1, r3, #24
 8000b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b1e:	3303      	adds	r3, #3
 8000b20:	683a      	ldr	r2, [r7, #0]
 8000b22:	4413      	add	r3, r2
 8000b24:	b2ca      	uxtb	r2, r1
 8000b26:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8000b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b2a:	3304      	adds	r3, #4
 8000b2c:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8000b2e:	6a3b      	ldr	r3, [r7, #32]
 8000b30:	3301      	adds	r3, #1
 8000b32:	623b      	str	r3, [r7, #32]
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	685b      	ldr	r3, [r3, #4]
 8000b38:	6a3a      	ldr	r2, [r7, #32]
 8000b3a:	429a      	cmp	r2, r3
 8000b3c:	d3cf      	bcc.n	8000ade <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	6919      	ldr	r1, [r3, #16]
 8000b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b44:	683a      	ldr	r2, [r7, #0]
 8000b46:	4413      	add	r3, r2
 8000b48:	b2ca      	uxtb	r2, r1
 8000b4a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	691b      	ldr	r3, [r3, #16]
 8000b50:	0a19      	lsrs	r1, r3, #8
 8000b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b54:	3301      	adds	r3, #1
 8000b56:	683a      	ldr	r2, [r7, #0]
 8000b58:	4413      	add	r3, r2
 8000b5a:	b2ca      	uxtb	r2, r1
 8000b5c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	691b      	ldr	r3, [r3, #16]
 8000b62:	0c19      	lsrs	r1, r3, #16
 8000b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b66:	3302      	adds	r3, #2
 8000b68:	683a      	ldr	r2, [r7, #0]
 8000b6a:	4413      	add	r3, r2
 8000b6c:	b2ca      	uxtb	r2, r1
 8000b6e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	691b      	ldr	r3, [r3, #16]
 8000b74:	0e19      	lsrs	r1, r3, #24
 8000b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b78:	3303      	adds	r3, #3
 8000b7a:	683a      	ldr	r2, [r7, #0]
 8000b7c:	4413      	add	r3, r2
 8000b7e:	b2ca      	uxtb	r2, r1
 8000b80:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8000b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b84:	3304      	adds	r3, #4
 8000b86:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8000b88:	2300      	movs	r3, #0
 8000b8a:	61fb      	str	r3, [r7, #28]
 8000b8c:	e02a      	b.n	8000be4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x164>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	699a      	ldr	r2, [r3, #24]
 8000b92:	69fb      	ldr	r3, [r7, #28]
 8000b94:	009b      	lsls	r3, r3, #2
 8000b96:	4413      	add	r3, r2
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8000b9c:	68f9      	ldr	r1, [r7, #12]
 8000b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ba0:	683a      	ldr	r2, [r7, #0]
 8000ba2:	4413      	add	r3, r2
 8000ba4:	b2ca      	uxtb	r2, r1
 8000ba6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	0a19      	lsrs	r1, r3, #8
 8000bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bae:	3301      	adds	r3, #1
 8000bb0:	683a      	ldr	r2, [r7, #0]
 8000bb2:	4413      	add	r3, r2
 8000bb4:	b2ca      	uxtb	r2, r1
 8000bb6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	0c19      	lsrs	r1, r3, #16
 8000bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bbe:	3302      	adds	r3, #2
 8000bc0:	683a      	ldr	r2, [r7, #0]
 8000bc2:	4413      	add	r3, r2
 8000bc4:	b2ca      	uxtb	r2, r1
 8000bc6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	0e19      	lsrs	r1, r3, #24
 8000bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bce:	3303      	adds	r3, #3
 8000bd0:	683a      	ldr	r2, [r7, #0]
 8000bd2:	4413      	add	r3, r2
 8000bd4:	b2ca      	uxtb	r2, r1
 8000bd6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8000bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bda:	3304      	adds	r3, #4
 8000bdc:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8000bde:	69fb      	ldr	r3, [r7, #28]
 8000be0:	3301      	adds	r3, #1
 8000be2:	61fb      	str	r3, [r7, #28]
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	691b      	ldr	r3, [r3, #16]
 8000be8:	69fa      	ldr	r2, [r7, #28]
 8000bea:	429a      	cmp	r2, r3
 8000bec:	d3cf      	bcc.n	8000b8e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10e>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	69d9      	ldr	r1, [r3, #28]
 8000bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bf4:	683a      	ldr	r2, [r7, #0]
 8000bf6:	4413      	add	r3, r2
 8000bf8:	b2ca      	uxtb	r2, r1
 8000bfa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	69db      	ldr	r3, [r3, #28]
 8000c00:	0a19      	lsrs	r1, r3, #8
 8000c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c04:	3301      	adds	r3, #1
 8000c06:	683a      	ldr	r2, [r7, #0]
 8000c08:	4413      	add	r3, r2
 8000c0a:	b2ca      	uxtb	r2, r1
 8000c0c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	69db      	ldr	r3, [r3, #28]
 8000c12:	0c19      	lsrs	r1, r3, #16
 8000c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c16:	3302      	adds	r3, #2
 8000c18:	683a      	ldr	r2, [r7, #0]
 8000c1a:	4413      	add	r3, r2
 8000c1c:	b2ca      	uxtb	r2, r1
 8000c1e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	69db      	ldr	r3, [r3, #28]
 8000c24:	0e19      	lsrs	r1, r3, #24
 8000c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c28:	3303      	adds	r3, #3
 8000c2a:	683a      	ldr	r2, [r7, #0]
 8000c2c:	4413      	add	r3, r2
 8000c2e:	b2ca      	uxtb	r2, r1
 8000c30:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8000c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c34:	3304      	adds	r3, #4
 8000c36:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8000c38:	2300      	movs	r3, #0
 8000c3a:	61bb      	str	r3, [r7, #24]
 8000c3c:	e027      	b.n	8000c8e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x20e>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000c42:	69bb      	ldr	r3, [r7, #24]
 8000c44:	009b      	lsls	r3, r3, #2
 8000c46:	4413      	add	r3, r2
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f7ff fa7e 	bl	800014c <strlen>
 8000c50:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8000c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c54:	683a      	ldr	r2, [r7, #0]
 8000c56:	4413      	add	r3, r2
 8000c58:	6979      	ldr	r1, [r7, #20]
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f000 fcee 	bl	800163c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c62:	3304      	adds	r3, #4
 8000c64:	627b      	str	r3, [r7, #36]	@ 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8000c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c68:	683a      	ldr	r2, [r7, #0]
 8000c6a:	18d0      	adds	r0, r2, r3
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000c70:	69bb      	ldr	r3, [r7, #24]
 8000c72:	009b      	lsls	r3, r3, #2
 8000c74:	4413      	add	r3, r2
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	697a      	ldr	r2, [r7, #20]
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	f003 fe1c 	bl	80048b8 <memcpy>
      offset += length_stringsi;
 8000c80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	4413      	add	r3, r2
 8000c86:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8000c88:	69bb      	ldr	r3, [r7, #24]
 8000c8a:	3301      	adds	r3, #1
 8000c8c:	61bb      	str	r3, [r7, #24]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	69db      	ldr	r3, [r3, #28]
 8000c92:	69ba      	ldr	r2, [r7, #24]
 8000c94:	429a      	cmp	r2, r3
 8000c96:	d3d2      	bcc.n	8000c3e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1be>
      }
      return offset;
 8000c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3728      	adds	r7, #40	@ 0x28
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}

08000ca2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	b08e      	sub	sp, #56	@ 0x38
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	6078      	str	r0, [r7, #4]
 8000caa:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000cac:	2300      	movs	r3, #0
 8000cae:	637b      	str	r3, [r7, #52]	@ 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8000cb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000cb2:	683a      	ldr	r2, [r7, #0]
 8000cb4:	4413      	add	r3, r2
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8000cba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	683a      	ldr	r2, [r7, #0]
 8000cc0:	4413      	add	r3, r2
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	021b      	lsls	r3, r3, #8
 8000cc6:	6a3a      	ldr	r2, [r7, #32]
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8000ccc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000cce:	3302      	adds	r3, #2
 8000cd0:	683a      	ldr	r2, [r7, #0]
 8000cd2:	4413      	add	r3, r2
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	041b      	lsls	r3, r3, #16
 8000cd8:	6a3a      	ldr	r2, [r7, #32]
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8000cde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ce0:	3303      	adds	r3, #3
 8000ce2:	683a      	ldr	r2, [r7, #0]
 8000ce4:	4413      	add	r3, r2
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	061b      	lsls	r3, r3, #24
 8000cea:	6a3a      	ldr	r2, [r7, #32]
 8000cec:	4313      	orrs	r3, r2
 8000cee:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8000cf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000cf2:	3304      	adds	r3, #4
 8000cf4:	637b      	str	r3, [r7, #52]	@ 0x34
      if(ints_lengthT > ints_length)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	6a3a      	ldr	r2, [r7, #32]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	d90a      	bls.n	8000d16 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	68da      	ldr	r2, [r3, #12]
 8000d04:	6a3b      	ldr	r3, [r7, #32]
 8000d06:	009b      	lsls	r3, r3, #2
 8000d08:	4619      	mov	r1, r3
 8000d0a:	4610      	mov	r0, r2
 8000d0c:	f003 fd6a 	bl	80047e4 <realloc>
 8000d10:	4602      	mov	r2, r0
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	6a3a      	ldr	r2, [r7, #32]
 8000d1a:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	633b      	str	r3, [r7, #48]	@ 0x30
 8000d20:	e035      	b.n	8000d8e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xec>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8000d22:	2300      	movs	r3, #0
 8000d24:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000d26:	697b      	ldr	r3, [r7, #20]
 8000d28:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000d2a:	6839      	ldr	r1, [r7, #0]
 8000d2c:	440a      	add	r2, r1
 8000d2e:	7812      	ldrb	r2, [r2, #0]
 8000d30:	4313      	orrs	r3, r2
 8000d32:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000d34:	697a      	ldr	r2, [r7, #20]
 8000d36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d38:	3301      	adds	r3, #1
 8000d3a:	6839      	ldr	r1, [r7, #0]
 8000d3c:	440b      	add	r3, r1
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	021b      	lsls	r3, r3, #8
 8000d42:	4313      	orrs	r3, r2
 8000d44:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000d46:	697a      	ldr	r2, [r7, #20]
 8000d48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d4a:	3302      	adds	r3, #2
 8000d4c:	6839      	ldr	r1, [r7, #0]
 8000d4e:	440b      	add	r3, r1
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	041b      	lsls	r3, r3, #16
 8000d54:	4313      	orrs	r3, r2
 8000d56:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000d58:	697a      	ldr	r2, [r7, #20]
 8000d5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d5c:	3303      	adds	r3, #3
 8000d5e:	6839      	ldr	r1, [r7, #0]
 8000d60:	440b      	add	r3, r1
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	061b      	lsls	r3, r3, #24
 8000d66:	4313      	orrs	r3, r2
 8000d68:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8000d6a:	697a      	ldr	r2, [r7, #20]
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8000d70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d72:	3304      	adds	r3, #4
 8000d74:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	68da      	ldr	r2, [r3, #12]
 8000d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d7c:	009b      	lsls	r3, r3, #2
 8000d7e:	4413      	add	r3, r2
 8000d80:	687a      	ldr	r2, [r7, #4]
 8000d82:	3208      	adds	r2, #8
 8000d84:	6812      	ldr	r2, [r2, #0]
 8000d86:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8000d88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	633b      	str	r3, [r7, #48]	@ 0x30
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000d94:	429a      	cmp	r2, r3
 8000d96:	d3c4      	bcc.n	8000d22 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x80>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8000d98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d9a:	683a      	ldr	r2, [r7, #0]
 8000d9c:	4413      	add	r3, r2
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8000da2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000da4:	3301      	adds	r3, #1
 8000da6:	683a      	ldr	r2, [r7, #0]
 8000da8:	4413      	add	r3, r2
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	021b      	lsls	r3, r3, #8
 8000dae:	69fa      	ldr	r2, [r7, #28]
 8000db0:	4313      	orrs	r3, r2
 8000db2:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8000db4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000db6:	3302      	adds	r3, #2
 8000db8:	683a      	ldr	r2, [r7, #0]
 8000dba:	4413      	add	r3, r2
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	041b      	lsls	r3, r3, #16
 8000dc0:	69fa      	ldr	r2, [r7, #28]
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8000dc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000dc8:	3303      	adds	r3, #3
 8000dca:	683a      	ldr	r2, [r7, #0]
 8000dcc:	4413      	add	r3, r2
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	061b      	lsls	r3, r3, #24
 8000dd2:	69fa      	ldr	r2, [r7, #28]
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8000dd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000dda:	3304      	adds	r3, #4
 8000ddc:	637b      	str	r3, [r7, #52]	@ 0x34
      if(floats_lengthT > floats_length)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	691b      	ldr	r3, [r3, #16]
 8000de2:	69fa      	ldr	r2, [r7, #28]
 8000de4:	429a      	cmp	r2, r3
 8000de6:	d90a      	bls.n	8000dfe <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	699a      	ldr	r2, [r3, #24]
 8000dec:	69fb      	ldr	r3, [r7, #28]
 8000dee:	009b      	lsls	r3, r3, #2
 8000df0:	4619      	mov	r1, r3
 8000df2:	4610      	mov	r0, r2
 8000df4:	f003 fcf6 	bl	80047e4 <realloc>
 8000df8:	4602      	mov	r2, r0
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	69fa      	ldr	r2, [r7, #28]
 8000e02:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8000e04:	2300      	movs	r3, #0
 8000e06:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000e08:	e035      	b.n	8000e76 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1d4>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000e0e:	693b      	ldr	r3, [r7, #16]
 8000e10:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000e12:	6839      	ldr	r1, [r7, #0]
 8000e14:	440a      	add	r2, r1
 8000e16:	7812      	ldrb	r2, [r2, #0]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000e1c:	693a      	ldr	r2, [r7, #16]
 8000e1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e20:	3301      	adds	r3, #1
 8000e22:	6839      	ldr	r1, [r7, #0]
 8000e24:	440b      	add	r3, r1
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	021b      	lsls	r3, r3, #8
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000e2e:	693a      	ldr	r2, [r7, #16]
 8000e30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e32:	3302      	adds	r3, #2
 8000e34:	6839      	ldr	r1, [r7, #0]
 8000e36:	440b      	add	r3, r1
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	041b      	lsls	r3, r3, #16
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000e40:	693a      	ldr	r2, [r7, #16]
 8000e42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e44:	3303      	adds	r3, #3
 8000e46:	6839      	ldr	r1, [r7, #0]
 8000e48:	440b      	add	r3, r1
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	061b      	lsls	r3, r3, #24
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8000e58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e5a:	3304      	adds	r3, #4
 8000e5c:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	699a      	ldr	r2, [r3, #24]
 8000e62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e64:	009b      	lsls	r3, r3, #2
 8000e66:	4413      	add	r3, r2
 8000e68:	687a      	ldr	r2, [r7, #4]
 8000e6a:	3214      	adds	r2, #20
 8000e6c:	6812      	ldr	r2, [r2, #0]
 8000e6e:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8000e70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e72:	3301      	adds	r3, #1
 8000e74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	691b      	ldr	r3, [r3, #16]
 8000e7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000e7c:	429a      	cmp	r2, r3
 8000e7e:	d3c4      	bcc.n	8000e0a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x168>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8000e80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e82:	683a      	ldr	r2, [r7, #0]
 8000e84:	4413      	add	r3, r2
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8000e8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	683a      	ldr	r2, [r7, #0]
 8000e90:	4413      	add	r3, r2
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	021b      	lsls	r3, r3, #8
 8000e96:	69ba      	ldr	r2, [r7, #24]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8000e9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e9e:	3302      	adds	r3, #2
 8000ea0:	683a      	ldr	r2, [r7, #0]
 8000ea2:	4413      	add	r3, r2
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	041b      	lsls	r3, r3, #16
 8000ea8:	69ba      	ldr	r2, [r7, #24]
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8000eae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000eb0:	3303      	adds	r3, #3
 8000eb2:	683a      	ldr	r2, [r7, #0]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	061b      	lsls	r3, r3, #24
 8000eba:	69ba      	ldr	r2, [r7, #24]
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8000ec0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ec2:	3304      	adds	r3, #4
 8000ec4:	637b      	str	r3, [r7, #52]	@ 0x34
      if(strings_lengthT > strings_length)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	69db      	ldr	r3, [r3, #28]
 8000eca:	69ba      	ldr	r2, [r7, #24]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	d90a      	bls.n	8000ee6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000ed4:	69bb      	ldr	r3, [r7, #24]
 8000ed6:	009b      	lsls	r3, r3, #2
 8000ed8:	4619      	mov	r1, r3
 8000eda:	4610      	mov	r0, r2
 8000edc:	f003 fc82 	bl	80047e4 <realloc>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	625a      	str	r2, [r3, #36]	@ 0x24
      strings_length = strings_lengthT;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8000eec:	2300      	movs	r3, #0
 8000eee:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000ef0:	e03e      	b.n	8000f70 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2ce>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8000ef2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ef4:	683a      	ldr	r2, [r7, #0]
 8000ef6:	441a      	add	r2, r3
 8000ef8:	f107 030c 	add.w	r3, r7, #12
 8000efc:	4611      	mov	r1, r2
 8000efe:	4618      	mov	r0, r3
 8000f00:	f000 fbba 	bl	8001678 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000f04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f06:	3304      	adds	r3, #4
 8000f08:	637b      	str	r3, [r7, #52]	@ 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8000f0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f0e:	e00b      	b.n	8000f28 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x286>
          inbuffer[k-1]=inbuffer[k];
 8000f10:	683a      	ldr	r2, [r7, #0]
 8000f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f14:	441a      	add	r2, r3
 8000f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f18:	3b01      	subs	r3, #1
 8000f1a:	6839      	ldr	r1, [r7, #0]
 8000f1c:	440b      	add	r3, r1
 8000f1e:	7812      	ldrb	r2, [r2, #0]
 8000f20:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8000f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f24:	3301      	adds	r3, #1
 8000f26:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f28:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	4413      	add	r3, r2
 8000f2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f30:	429a      	cmp	r2, r3
 8000f32:	d3ed      	bcc.n	8000f10 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26e>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8000f34:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	4413      	add	r3, r2
 8000f3a:	3b01      	subs	r3, #1
 8000f3c:	683a      	ldr	r2, [r7, #0]
 8000f3e:	4413      	add	r3, r2
 8000f40:	2200      	movs	r2, #0
 8000f42:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8000f44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f46:	3b01      	subs	r3, #1
 8000f48:	683a      	ldr	r2, [r7, #0]
 8000f4a:	441a      	add	r2, r3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8000f50:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	4413      	add	r3, r2
 8000f56:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000f5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	4413      	add	r3, r2
 8000f62:	687a      	ldr	r2, [r7, #4]
 8000f64:	3220      	adds	r2, #32
 8000f66:	6812      	ldr	r2, [r2, #0]
 8000f68:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8000f6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	69db      	ldr	r3, [r3, #28]
 8000f74:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000f76:	429a      	cmp	r2, r3
 8000f78:	d3bb      	bcc.n	8000ef2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x250>
      }
     return offset;
 8000f7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	3738      	adds	r7, #56	@ 0x38
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	4b02      	ldr	r3, [pc, #8]	@ (8000f98 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x14>)
 8000f8e:	4618      	mov	r0, r3
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bc80      	pop	{r7}
 8000f96:	4770      	bx	lr
 8000f98:	08004c60 	.word	0x08004c60

08000f9c <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	4b02      	ldr	r3, [pc, #8]	@ (8000fb0 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x14>)
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	370c      	adds	r7, #12
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bc80      	pop	{r7}
 8000fae:	4770      	bx	lr
 8000fb0:	08004bb8 	.word	0x08004bb8

08000fb4 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8000fb4:	b480      	push	{r7}
 8000fb6:	b085      	sub	sp, #20
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	60f8      	str	r0, [r7, #12]
 8000fbc:	60b9      	str	r1, [r7, #8]
 8000fbe:	607a      	str	r2, [r7, #4]
 8000fc0:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	68ba      	ldr	r2, [r7, #8]
 8000fc6:	601a      	str	r2, [r3, #0]
    msg_(msg),
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	687a      	ldr	r2, [r7, #4]
 8000fcc:	605a      	str	r2, [r3, #4]
    endpoint_(endpoint) {};
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	683a      	ldr	r2, [r7, #0]
 8000fd2:	611a      	str	r2, [r3, #16]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3714      	adds	r7, #20
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bc80      	pop	{r7}
 8000fde:	4770      	bx	lr

08000fe0 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	68d8      	ldr	r0, [r3, #12]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	68db      	ldr	r3, [r3, #12]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	687a      	ldr	r2, [r7, #4]
 8000ff8:	6891      	ldr	r1, [r2, #8]
 8000ffa:	683a      	ldr	r2, [r7, #0]
 8000ffc:	4798      	blx	r3
 8000ffe:	4603      	mov	r3, r0
  };
 8001000:	4618      	mov	r0, r3
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	691b      	ldr	r3, [r3, #16]
  }
 8001014:	4618      	mov	r0, r3
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	bc80      	pop	{r7}
 800101c:	4770      	bx	lr

0800101e <_ZN10SerialCommC1ER20__UART_HandleTypeDef>:
    uint16_t tx_tail = 0;
    uint16_t rx_tail = 0;
    static constexpr uint16_t buf_mask = buffer_size - 1;

public:
    SerialComm(UART_HandleTypeDef &huart) : huart(huart)
 800101e:	b480      	push	{r7}
 8001020:	b083      	sub	sp, #12
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
 8001026:	6039      	str	r1, [r7, #0]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	683a      	ldr	r2, [r7, #0]
 800102c:	601a      	str	r2, [r3, #0]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001034:	2201      	movs	r2, #1
 8001036:	711a      	strb	r2, [r3, #4]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800103e:	2200      	movs	r2, #0
 8001040:	80da      	strh	r2, [r3, #6]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001048:	2200      	movs	r2, #0
 800104a:	811a      	strh	r2, [r3, #8]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001052:	2200      	movs	r2, #0
 8001054:	815a      	strh	r2, [r3, #10]
    {
        // Other initialization code
    }
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4618      	mov	r0, r3
 800105a:	370c      	adds	r7, #12
 800105c:	46bd      	mov	sp, r7
 800105e:	bc80      	pop	{r7}
 8001060:	4770      	bx	lr

08001062 <_ZN10SerialComm4initEv>:

    void init(void)
 8001062:	b580      	push	{r7, lr}
 8001064:	b082      	sub	sp, #8
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]
    {
        reset_rbuf();
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f000 f90e 	bl	800128c <_ZN10SerialComm10reset_rbufEv>
    }
 8001070:	bf00      	nop
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}

08001078 <_ZN10SerialComm4readEv>:

    /** @brief Read a character from the Rx buffer using the FIFO method.
     * 
     * @return The read character.
    */
    int read(void)
 8001078:	b480      	push	{r7}
 800107a:	b085      	sub	sp, #20
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
    {
       uint16_t rx_head = (buffer_size - huart.hdmarx->Instance->CNDTR) & buf_mask;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	b29b      	uxth	r3, r3
 800108c:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8001090:	b29b      	uxth	r3, r3
 8001092:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001096:	81fb      	strh	r3, [r7, #14]

        // Check for overlapping (which is bad, data will be overwritten)
        if (rx_tail == rx_head)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800109e:	895b      	ldrh	r3, [r3, #10]
 80010a0:	89fa      	ldrh	r2, [r7, #14]
 80010a2:	429a      	cmp	r2, r3
 80010a4:	d102      	bne.n	80010ac <_ZN10SerialComm4readEv+0x34>
        {
            return -1;
 80010a6:	f04f 33ff 	mov.w	r3, #4294967295
 80010aa:	e01d      	b.n	80010e8 <_ZN10SerialComm4readEv+0x70>
        }

        // Read a value and increment the read pointer (TAIL).
        int c = (int) rx_buf[rx_tail++];
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80010b2:	895b      	ldrh	r3, [r3, #10]
 80010b4:	1c5a      	adds	r2, r3, #1
 80010b6:	b291      	uxth	r1, r2
 80010b8:	687a      	ldr	r2, [r7, #4]
 80010ba:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 80010be:	8151      	strh	r1, [r2, #10]
 80010c0:	461a      	mov	r2, r3
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4413      	add	r3, r2
 80010c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80010ca:	3304      	adds	r3, #4
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	60bb      	str	r3, [r7, #8]
        rx_tail &= buf_mask;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80010d6:	895b      	ldrh	r3, [r3, #10]
 80010d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010dc:	b29a      	uxth	r2, r3
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80010e4:	815a      	strh	r2, [r3, #10]

        return c;
 80010e6:	68bb      	ldr	r3, [r7, #8]
    }
 80010e8:	4618      	mov	r0, r3
 80010ea:	3714      	adds	r7, #20
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bc80      	pop	{r7}
 80010f0:	4770      	bx	lr

080010f2 <_ZN10SerialComm5writeEPKhi>:
     * @param data The pointer to the data string.
     * @param length The length of the data string.
     * 
     * @return Void. 
    */
    void write(const uint8_t* const data, const int length)
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b086      	sub	sp, #24
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	60f8      	str	r0, [r7, #12]
 80010fa:	60b9      	str	r1, [r7, #8]
 80010fc:	607a      	str	r2, [r7, #4]
    {
        // Faulty data guard.
        if (length > buffer_size || length < 1)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001104:	dc46      	bgt.n	8001194 <_ZN10SerialComm5writeEPKhi+0xa2>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2b00      	cmp	r3, #0
 800110a:	dd43      	ble.n	8001194 <_ZN10SerialComm5writeEPKhi+0xa2>
        {
            return;
        }

        // Wait for the completion of the previous Tx transfer.
        while (!is_tx_cplt);
 800110c:	bf00      	nop
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001114:	791b      	ldrb	r3, [r3, #4]
 8001116:	f083 0301 	eor.w	r3, r3, #1
 800111a:	b2db      	uxtb	r3, r3
 800111c:	2b00      	cmp	r3, #0
 800111e:	d1f6      	bne.n	800110e <_ZN10SerialComm5writeEPKhi+0x1c>

        // Check if the data is bigger than the remaining storage
        int w_len = (length <= (buffer_size - tx_head)) ? length : (buffer_size - tx_head);
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001126:	88db      	ldrh	r3, [r3, #6]
 8001128:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 800112c:	687a      	ldr	r2, [r7, #4]
 800112e:	4293      	cmp	r3, r2
 8001130:	bfa8      	it	ge
 8001132:	4613      	movge	r3, r2
 8001134:	617b      	str	r3, [r7, #20]

        // Write the data and increment the write pointer (TX_HEAD)
        memcpy(&tx_buf[tx_head], data, w_len);
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800113c:	88db      	ldrh	r3, [r3, #6]
 800113e:	461a      	mov	r2, r3
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	4413      	add	r3, r2
 8001144:	3304      	adds	r3, #4
 8001146:	697a      	ldr	r2, [r7, #20]
 8001148:	68b9      	ldr	r1, [r7, #8]
 800114a:	4618      	mov	r0, r3
 800114c:	f003 fbb4 	bl	80048b8 <memcpy>
        tx_head = (tx_head + length) & buf_mask;
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001156:	88da      	ldrh	r2, [r3, #6]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	b29b      	uxth	r3, r3
 800115c:	4413      	add	r3, r2
 800115e:	b29b      	uxth	r3, r3
 8001160:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001164:	b29a      	uxth	r2, r3
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800116c:	80da      	strh	r2, [r3, #6]

        // Reset the TX_HEAD pointer and write the remaining data
        // (If data is bigger than the previous remaining data)
        if (length != w_len)
 800116e:	687a      	ldr	r2, [r7, #4]
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	429a      	cmp	r2, r3
 8001174:	d00a      	beq.n	800118c <_ZN10SerialComm5writeEPKhi+0x9a>
        {
            memcpy(tx_buf, &data[w_len], length - w_len);
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	1d18      	adds	r0, r3, #4
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	68ba      	ldr	r2, [r7, #8]
 800117e:	18d1      	adds	r1, r2, r3
 8001180:	687a      	ldr	r2, [r7, #4]
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	461a      	mov	r2, r3
 8001188:	f003 fb96 	bl	80048b8 <memcpy>
        }

        // TODO: Start transfering
        flush();
 800118c:	68f8      	ldr	r0, [r7, #12]
 800118e:	f000 f805 	bl	800119c <_ZN10SerialComm5flushEv>
 8001192:	e000      	b.n	8001196 <_ZN10SerialComm5writeEPKhi+0xa4>
            return;
 8001194:	bf00      	nop
    }
 8001196:	3718      	adds	r7, #24
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}

0800119c <_ZN10SerialComm5flushEv>:

    /** @brief Transmit the just written data in the Tx buffer
     * 
     * @return void.
    */
    void flush()
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
    {
        if (is_tx_cplt)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80011aa:	791b      	ldrb	r3, [r3, #4]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d05b      	beq.n	8001268 <_ZN10SerialComm5flushEv+0xcc>
        {
            // if HEAD == TAIL => The buffer is empty => Nothing to send.
            if (tx_head != tx_tail)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80011b6:	88da      	ldrh	r2, [r3, #6]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80011be:	891b      	ldrh	r3, [r3, #8]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d04c      	beq.n	800125e <_ZN10SerialComm5flushEv+0xc2>
            {
                uint16_t len = 0;
 80011c4:	2300      	movs	r3, #0
 80011c6:	81fb      	strh	r3, [r7, #14]

                if (tx_tail < tx_head)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80011ce:	891a      	ldrh	r2, [r3, #8]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80011d6:	88db      	ldrh	r3, [r3, #6]
 80011d8:	429a      	cmp	r2, r3
 80011da:	d218      	bcs.n	800120e <_ZN10SerialComm5flushEv+0x72>
                {
                    len = tx_head - tx_tail;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80011e2:	88da      	ldrh	r2, [r3, #6]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80011ea:	891b      	ldrh	r3, [r3, #8]
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	81fb      	strh	r3, [r7, #14]
                    HAL_UART_Transmit_DMA(&huart, &tx_buf[tx_tail], len);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6818      	ldr	r0, [r3, #0]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80011fa:	891b      	ldrh	r3, [r3, #8]
 80011fc:	461a      	mov	r2, r3
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4413      	add	r3, r2
 8001202:	3304      	adds	r3, #4
 8001204:	89fa      	ldrh	r2, [r7, #14]
 8001206:	4619      	mov	r1, r3
 8001208:	f002 fb5a 	bl	80038c0 <HAL_UART_Transmit_DMA>
 800120c:	e01f      	b.n	800124e <_ZN10SerialComm5flushEv+0xb2>
                }
                else
                {
                    len = buffer_size - tx_tail;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001214:	891b      	ldrh	r3, [r3, #8]
 8001216:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 800121a:	81fb      	strh	r3, [r7, #14]
                    HAL_UART_Transmit_DMA(&huart, &tx_buf[tx_tail], len);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6818      	ldr	r0, [r3, #0]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001226:	891b      	ldrh	r3, [r3, #8]
 8001228:	461a      	mov	r2, r3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4413      	add	r3, r2
 800122e:	3304      	adds	r3, #4
 8001230:	89fa      	ldrh	r2, [r7, #14]
 8001232:	4619      	mov	r1, r3
 8001234:	f002 fb44 	bl	80038c0 <HAL_UART_Transmit_DMA>
                    HAL_UART_Transmit_DMA(&huart, tx_buf, tx_head);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6818      	ldr	r0, [r3, #0]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	1d19      	adds	r1, r3, #4
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001246:	88db      	ldrh	r3, [r3, #6]
 8001248:	461a      	mov	r2, r3
 800124a:	f002 fb39 	bl	80038c0 <HAL_UART_Transmit_DMA>
                }
                
                tx_tail = tx_head;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001254:	88da      	ldrh	r2, [r3, #6]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800125c:	811a      	strh	r2, [r3, #8]
            }
            
            is_tx_cplt = false;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001264:	2200      	movs	r2, #0
 8001266:	711a      	strb	r2, [r3, #4]
        }
    }
 8001268:	bf00      	nop
 800126a:	3710      	adds	r7, #16
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}

08001270 <_ZN10SerialComm11set_tx_cpltEv>:

    void set_tx_cplt(void)
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
    {
        is_tx_cplt = true;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800127e:	2201      	movs	r2, #1
 8001280:	711a      	strb	r2, [r3, #4]
    }
 8001282:	bf00      	nop
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	bc80      	pop	{r7}
 800128a:	4770      	bx	lr

0800128c <_ZN10SerialComm10reset_rbufEv>:

    void reset_rbuf(void)
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
    {
        HAL_UART_Receive_DMA(&huart, (uint8_t *)rx_buf, buffer_size);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6818      	ldr	r0, [r3, #0]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800129e:	3304      	adds	r3, #4
 80012a0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80012a4:	4619      	mov	r1, r3
 80012a6:	f002 fb7b 	bl	80039a0 <HAL_UART_Receive_DMA>
    }
 80012aa:	bf00      	nop
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
	...

080012b4 <_ZN13STM32HardwareC1Ev>:
class STM32Hardware {
  protected:
    SerialComm &comm;

  public:
    STM32Hardware() : comm(comm_rosserial)
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	4a04      	ldr	r2, [pc, #16]	@ (80012d0 <_ZN13STM32HardwareC1Ev+0x1c>)
 80012c0:	601a      	str	r2, [r3, #0]
    {
        // TODO:
    }
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4618      	mov	r0, r3
 80012c6:	370c      	adds	r7, #12
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bc80      	pop	{r7}
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	20000148 	.word	0x20000148

080012d4 <_ZN13STM32Hardware4initEv>:
    STM32Hardware(SerialComm &comm) : comm(comm)
    {
        // TODO: 
    }
  
    void init()
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
    {
        comm.init();
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff febe 	bl	8001062 <_ZN10SerialComm4initEv>
    }
 80012e6:	bf00      	nop
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <_ZN13STM32Hardware4readEv>:

    int read()  
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b082      	sub	sp, #8
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
    {
        return comm.read();
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff febc 	bl	8001078 <_ZN10SerialComm4readEv>
 8001300:	4603      	mov	r3, r0
    }
 8001302:	4618      	mov	r0, r3
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}

0800130a <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length)
 800130a:	b580      	push	{r7, lr}
 800130c:	b084      	sub	sp, #16
 800130e:	af00      	add	r7, sp, #0
 8001310:	60f8      	str	r0, [r7, #12]
 8001312:	60b9      	str	r1, [r7, #8]
 8001314:	607a      	str	r2, [r7, #4]
    {
        comm.write(data, length);
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	687a      	ldr	r2, [r7, #4]
 800131c:	68b9      	ldr	r1, [r7, #8]
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff fee7 	bl	80010f2 <_ZN10SerialComm5writeEPKhi>
    }
 8001324:	bf00      	nop
 8001326:	3710      	adds	r7, #16
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}

0800132c <_ZN13STM32Hardware4timeEv>:

    unsigned long time()
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
    { 
        return HAL_GetTick(); 
 8001334:	f001 f8ea 	bl	800250c <HAL_GetTick>
 8001338:	4603      	mov	r3, r0
    }
 800133a:	4618      	mov	r0, r3
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
	...

08001344 <_ZN8std_msgs6StringC1Ev>:
  {
    public:
      typedef const char* _data_type;
      _data_type data;

    String():
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
      data("")
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff f802 	bl	8000358 <_ZN3ros3MsgC1Ev>
 8001354:	4a05      	ldr	r2, [pc, #20]	@ (800136c <_ZN8std_msgs6StringC1Ev+0x28>)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a04      	ldr	r2, [pc, #16]	@ (8001370 <_ZN8std_msgs6StringC1Ev+0x2c>)
 800135e:	605a      	str	r2, [r3, #4]
    {
    }
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	4618      	mov	r0, r3
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	08004c98 	.word	0x08004c98
 8001370:	08004b3c 	.word	0x08004b3c

08001374 <_ZNK8std_msgs6String9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800137e:	2300      	movs	r3, #0
 8001380:	60fb      	str	r3, [r7, #12]
      uint32_t length_data = strlen(this->data);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	4618      	mov	r0, r3
 8001388:	f7fe fee0 	bl	800014c <strlen>
 800138c:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_data);
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	683a      	ldr	r2, [r7, #0]
 8001392:	4413      	add	r3, r2
 8001394:	68b9      	ldr	r1, [r7, #8]
 8001396:	4618      	mov	r0, r3
 8001398:	f000 f950 	bl	800163c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	3304      	adds	r3, #4
 80013a0:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->data, length_data);
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	683a      	ldr	r2, [r7, #0]
 80013a6:	18d0      	adds	r0, r2, r3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	68ba      	ldr	r2, [r7, #8]
 80013ae:	4619      	mov	r1, r3
 80013b0:	f003 fa82 	bl	80048b8 <memcpy>
      offset += length_data;
 80013b4:	68fa      	ldr	r2, [r7, #12]
 80013b6:	68bb      	ldr	r3, [r7, #8]
 80013b8:	4413      	add	r3, r2
 80013ba:	60fb      	str	r3, [r7, #12]
      return offset;
 80013bc:	68fb      	ldr	r3, [r7, #12]
    }
 80013be:	4618      	mov	r0, r3
 80013c0:	3710      	adds	r7, #16
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <_ZN8std_msgs6String11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b086      	sub	sp, #24
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	6078      	str	r0, [r7, #4]
 80013ce:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80013d0:	2300      	movs	r3, #0
 80013d2:	613b      	str	r3, [r7, #16]
      uint32_t length_data;
      arrToVar(length_data, (inbuffer + offset));
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	683a      	ldr	r2, [r7, #0]
 80013d8:	441a      	add	r2, r3
 80013da:	f107 030c 	add.w	r3, r7, #12
 80013de:	4611      	mov	r1, r2
 80013e0:	4618      	mov	r0, r3
 80013e2:	f000 f949 	bl	8001678 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	3304      	adds	r3, #4
 80013ea:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	617b      	str	r3, [r7, #20]
 80013f0:	e00b      	b.n	800140a <_ZN8std_msgs6String11deserializeEPh+0x44>
          inbuffer[k-1]=inbuffer[k];
 80013f2:	683a      	ldr	r2, [r7, #0]
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	441a      	add	r2, r3
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	3b01      	subs	r3, #1
 80013fc:	6839      	ldr	r1, [r7, #0]
 80013fe:	440b      	add	r3, r1
 8001400:	7812      	ldrb	r2, [r2, #0]
 8001402:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	3301      	adds	r3, #1
 8001408:	617b      	str	r3, [r7, #20]
 800140a:	693a      	ldr	r2, [r7, #16]
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	4413      	add	r3, r2
 8001410:	697a      	ldr	r2, [r7, #20]
 8001412:	429a      	cmp	r2, r3
 8001414:	d3ed      	bcc.n	80013f2 <_ZN8std_msgs6String11deserializeEPh+0x2c>
      }
      inbuffer[offset+length_data-1]=0;
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	4413      	add	r3, r2
 800141c:	3b01      	subs	r3, #1
 800141e:	683a      	ldr	r2, [r7, #0]
 8001420:	4413      	add	r3, r2
 8001422:	2200      	movs	r2, #0
 8001424:	701a      	strb	r2, [r3, #0]
      this->data = (char *)(inbuffer + offset-1);
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	3b01      	subs	r3, #1
 800142a:	683a      	ldr	r2, [r7, #0]
 800142c:	441a      	add	r2, r3
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	605a      	str	r2, [r3, #4]
      offset += length_data;
 8001432:	693a      	ldr	r2, [r7, #16]
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	4413      	add	r3, r2
 8001438:	613b      	str	r3, [r7, #16]
     return offset;
 800143a:	693b      	ldr	r3, [r7, #16]
    }
 800143c:	4618      	mov	r0, r3
 800143e:	3718      	adds	r7, #24
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}

08001444 <_ZN8std_msgs6String7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/String"; };
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	4b02      	ldr	r3, [pc, #8]	@ (8001458 <_ZN8std_msgs6String7getTypeEv+0x14>)
 800144e:	4618      	mov	r0, r3
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	bc80      	pop	{r7}
 8001456:	4770      	bx	lr
 8001458:	08004bdc 	.word	0x08004bdc

0800145c <_ZN8std_msgs6String6getMD5Ev>:
    virtual const char * getMD5() override { return "992ce8a1687cec8c8bd883ec73ca41d1"; };
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	4b02      	ldr	r3, [pc, #8]	@ (8001470 <_ZN8std_msgs6String6getMD5Ev+0x14>)
 8001466:	4618      	mov	r0, r3
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	bc80      	pop	{r7}
 800146e:	4770      	bx	lr
 8001470:	08004bec 	.word	0x08004bec

08001474 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	4a04      	ldr	r2, [pc, #16]	@ (8001490 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	601a      	str	r2, [r3, #0]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4618      	mov	r0, r3
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	bc80      	pop	{r7}
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	08004cb0 	.word	0x08004cb0

08001494 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff ffe8 	bl	8001474 <_ZN3ros15NodeHandleBase_C1Ev>
 80014a4:	4a41      	ldr	r2, [pc, #260]	@ (80015ac <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EEC1Ev+0x118>)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	601a      	str	r2, [r3, #0]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	3304      	adds	r3, #4
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff ff00 	bl	80012b4 <_ZN13STM32HardwareC1Ev>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2200      	movs	r2, #0
 80014b8:	609a      	str	r2, [r3, #8]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2200      	movs	r2, #0
 80014be:	60da      	str	r2, [r3, #12]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2200      	movs	r2, #0
 80014c4:	611a      	str	r2, [r3, #16]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2200      	movs	r2, #0
 80014ca:	615a      	str	r2, [r3, #20]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	3318      	adds	r3, #24
 80014d0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80014d4:	2100      	movs	r1, #0
 80014d6:	4618      	mov	r0, r3
 80014d8:	f003 f9ba 	bl	8004850 <memset>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80014e2:	3318      	adds	r3, #24
 80014e4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80014e8:	2100      	movs	r1, #0
 80014ea:	4618      	mov	r0, r3
 80014ec:	f003 f9b0 	bl	8004850 <memset>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80014f6:	3318      	adds	r3, #24
 80014f8:	2228      	movs	r2, #40	@ 0x28
 80014fa:	2100      	movs	r1, #0
 80014fc:	4618      	mov	r0, r3
 80014fe:	f003 f9a7 	bl	8004850 <memset>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001508:	3340      	adds	r3, #64	@ 0x40
 800150a:	2228      	movs	r2, #40	@ 0x28
 800150c:	2100      	movs	r1, #0
 800150e:	4618      	mov	r0, r3
 8001510:	f003 f99e 	bl	8004850 <memset>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800151a:	461a      	mov	r2, r3
 800151c:	2300      	movs	r3, #0
 800151e:	6693      	str	r3, [r2, #104]	@ 0x68
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001526:	461a      	mov	r2, r3
 8001528:	2300      	movs	r3, #0
 800152a:	66d3      	str	r3, [r2, #108]	@ 0x6c
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001532:	461a      	mov	r2, r3
 8001534:	2300      	movs	r3, #0
 8001536:	6713      	str	r3, [r2, #112]	@ 0x70
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800153e:	461a      	mov	r2, r3
 8001540:	2300      	movs	r3, #0
 8001542:	6753      	str	r3, [r2, #116]	@ 0x74
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800154a:	461a      	mov	r2, r3
 800154c:	2300      	movs	r3, #0
 800154e:	6793      	str	r3, [r2, #120]	@ 0x78
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001556:	2200      	movs	r2, #0
 8001558:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001562:	461a      	mov	r2, r3
 8001564:	2300      	movs	r3, #0
 8001566:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001570:	461a      	mov	r2, r3
 8001572:	2300      	movs	r3, #0
 8001574:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800157e:	461a      	mov	r2, r3
 8001580:	2300      	movs	r3, #0
 8001582:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800158c:	2200      	movs	r2, #0
 800158e:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	f503 5302 	add.w	r3, r3, #8320	@ 0x2080
 8001598:	3310      	adds	r3, #16
 800159a:	4618      	mov	r0, r3
 800159c:	f7ff fa42 	bl	8000a24 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	4618      	mov	r0, r3
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	08004c84 	.word	0x08004c84

080015b0 <HAL_UART_TxCpltCallback>:
ros::Publisher chatter("/chatter", &str_msg);

char data[] = "Hello world!";

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
	comm_rosserial.set_tx_cplt();
 80015b8:	4803      	ldr	r0, [pc, #12]	@ (80015c8 <HAL_UART_TxCpltCallback+0x18>)
 80015ba:	f7ff fe59 	bl	8001270 <_ZN10SerialComm11set_tx_cpltEv>
}
 80015be:	bf00      	nop
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	20000148 	.word	0x20000148

080015cc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
	comm_rosserial.reset_rbuf();
 80015d4:	4803      	ldr	r0, [pc, #12]	@ (80015e4 <HAL_UART_RxCpltCallback+0x18>)
 80015d6:	f7ff fe59 	bl	800128c <_ZN10SerialComm10reset_rbufEv>
}
 80015da:	bf00      	nop
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	20000148 	.word	0x20000148

080015e8 <setup>:

void setup()
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
	nh.initNode();
 80015ec:	4804      	ldr	r0, [pc, #16]	@ (8001600 <setup+0x18>)
 80015ee:	f000 f868 	bl	80016c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8initNodeEv>
	nh.advertise(chatter);
 80015f2:	4904      	ldr	r1, [pc, #16]	@ (8001604 <setup+0x1c>)
 80015f4:	4802      	ldr	r0, [pc, #8]	@ (8001600 <setup+0x18>)
 80015f6:	f000 f889 	bl	800170c <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE9advertiseERNS_9PublisherE>
}
 80015fa:	bf00      	nop
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	20002154 	.word	0x20002154
 8001604:	20004214 	.word	0x20004214

08001608 <loop>:
{
	return HAL_GetTick();
}

void loop()
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
	str_msg.data = "hello";
 800160c:	4b07      	ldr	r3, [pc, #28]	@ (800162c <loop+0x24>)
 800160e:	4a08      	ldr	r2, [pc, #32]	@ (8001630 <loop+0x28>)
 8001610:	605a      	str	r2, [r3, #4]
	chatter.publish(&str_msg);
 8001612:	4906      	ldr	r1, [pc, #24]	@ (800162c <loop+0x24>)
 8001614:	4807      	ldr	r0, [pc, #28]	@ (8001634 <loop+0x2c>)
 8001616:	f7ff fce3 	bl	8000fe0 <_ZN3ros9Publisher7publishEPKNS_3MsgE>

	HAL_Delay(500);
 800161a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800161e:	f000 ff7f 	bl	8002520 <HAL_Delay>

	nh.spinOnce();
 8001622:	4805      	ldr	r0, [pc, #20]	@ (8001638 <loop+0x30>)
 8001624:	f000 f89f 	bl	8001766 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv>
}
 8001628:	bf00      	nop
 800162a:	bd80      	pop	{r7, pc}
 800162c:	2000420c 	.word	0x2000420c
 8001630:	08004c10 	.word	0x08004c10
 8001634:	20004214 	.word	0x20004214
 8001638:	20002154 	.word	0x20002154

0800163c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 800163c:	b480      	push	{r7}
 800163e:	b085      	sub	sp, #20
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8001646:	2300      	movs	r3, #0
 8001648:	60fb      	str	r3, [r7, #12]
 800164a:	e00c      	b.n	8001666 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x2a>
      arr[i] = (var >> (8 * i));
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	00db      	lsls	r3, r3, #3
 8001650:	683a      	ldr	r2, [r7, #0]
 8001652:	fa22 f103 	lsr.w	r1, r2, r3
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	4413      	add	r3, r2
 800165c:	b2ca      	uxtb	r2, r1
 800165e:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	3301      	adds	r3, #1
 8001664:	60fb      	str	r3, [r7, #12]
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	2b03      	cmp	r3, #3
 800166a:	d9ef      	bls.n	800164c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x10>
  }
 800166c:	bf00      	nop
 800166e:	bf00      	nop
 8001670:	3714      	adds	r7, #20
 8001672:	46bd      	mov	sp, r7
 8001674:	bc80      	pop	{r7}
 8001676:	4770      	bx	lr

08001678 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8001678:	b480      	push	{r7}
 800167a:	b085      	sub	sp, #20
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8001688:	2300      	movs	r3, #0
 800168a:	60fb      	str	r3, [r7, #12]
 800168c:	e010      	b.n	80016b0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x38>
      var |= (arr[i] << (8 * i));
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	6839      	ldr	r1, [r7, #0]
 8001694:	68fa      	ldr	r2, [r7, #12]
 8001696:	440a      	add	r2, r1
 8001698:	7812      	ldrb	r2, [r2, #0]
 800169a:	4611      	mov	r1, r2
 800169c:	68fa      	ldr	r2, [r7, #12]
 800169e:	00d2      	lsls	r2, r2, #3
 80016a0:	fa01 f202 	lsl.w	r2, r1, r2
 80016a4:	431a      	orrs	r2, r3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	3301      	adds	r3, #1
 80016ae:	60fb      	str	r3, [r7, #12]
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	2b03      	cmp	r3, #3
 80016b4:	d9eb      	bls.n	800168e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x16>
  }
 80016b6:	bf00      	nop
 80016b8:	bf00      	nop
 80016ba:	3714      	adds	r7, #20
 80016bc:	46bd      	mov	sp, r7
 80016be:	bc80      	pop	{r7}
 80016c0:	4770      	bx	lr

080016c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8initNodeEv>:
  {
    return &hardware_;
  }

  /* Start serial, initialize buffers */
  void initNode()
 80016c2:	b580      	push	{r7, lr}
 80016c4:	b082      	sub	sp, #8
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	3304      	adds	r3, #4
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7ff fe00 	bl	80012d4 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80016da:	461a      	mov	r2, r3
 80016dc:	2300      	movs	r3, #0
 80016de:	6693      	str	r3, [r2, #104]	@ 0x68
    bytes_ = 0;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80016e6:	461a      	mov	r2, r3
 80016e8:	2300      	movs	r3, #0
 80016ea:	66d3      	str	r3, [r2, #108]	@ 0x6c
    index_ = 0;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80016f2:	461a      	mov	r2, r3
 80016f4:	2300      	movs	r3, #0
 80016f6:	6753      	str	r3, [r2, #116]	@ 0x74
    topic_ = 0;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80016fe:	461a      	mov	r2, r3
 8001700:	2300      	movs	r3, #0
 8001702:	6713      	str	r3, [r2, #112]	@ 0x70
  };
 8001704:	bf00      	nop
 8001706:	3708      	adds	r7, #8
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}

0800170c <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 800170c:	b480      	push	{r7}
 800170e:	b085      	sub	sp, #20
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8001716:	2300      	movs	r3, #0
 8001718:	60fb      	str	r3, [r7, #12]
 800171a:	e01b      	b.n	8001754 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE9advertiseERNS_9PublisherE+0x48>
    {
      if (publishers[i] == 0) // empty slot
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	68fa      	ldr	r2, [r7, #12]
 8001720:	f602 0206 	addw	r2, r2, #2054	@ 0x806
 8001724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d110      	bne.n	800174e <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE9advertiseERNS_9PublisherE+0x42>
      {
        publishers[i] = &p;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	68fa      	ldr	r2, [r7, #12]
 8001730:	f602 0206 	addw	r2, r2, #2054	@ 0x806
 8001734:	6839      	ldr	r1, [r7, #0]
 8001736:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	f103 026e 	add.w	r2, r3, #110	@ 0x6e
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8001744:	687a      	ldr	r2, [r7, #4]
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	60da      	str	r2, [r3, #12]
        return true;
 800174a:	2301      	movs	r3, #1
 800174c:	e006      	b.n	800175c <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE9advertiseERNS_9PublisherE+0x50>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	3301      	adds	r3, #1
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	2b09      	cmp	r3, #9
 8001758:	dde0      	ble.n	800171c <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE9advertiseERNS_9PublisherE+0x10>
      }
    }
    return false;
 800175a:	2300      	movs	r3, #0
  }
 800175c:	4618      	mov	r0, r3
 800175e:	3714      	adds	r7, #20
 8001760:	46bd      	mov	sp, r7
 8001762:	bc80      	pop	{r7}
 8001764:	4770      	bx	lr

08001766 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv>:
  virtual int spinOnce() override
 8001766:	b580      	push	{r7, lr}
 8001768:	b084      	sub	sp, #16
 800176a:	af00      	add	r7, sp, #0
 800176c:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	3304      	adds	r3, #4
 8001772:	4618      	mov	r0, r3
 8001774:	f7ff fdda 	bl	800132c <_ZN13STM32Hardware4timeEv>
 8001778:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001780:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001784:	68fa      	ldr	r2, [r7, #12]
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 800178c:	4293      	cmp	r3, r2
 800178e:	d905      	bls.n	800179c <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x36>
      configured_ = false;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001796:	2200      	movs	r2, #0
 8001798:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
    if (mode_ != MODE_FIRST_FF)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80017a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d00d      	beq.n	80017c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x5e>
      if (c_time > last_msg_timeout_time)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80017ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017b2:	68fa      	ldr	r2, [r7, #12]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d905      	bls.n	80017c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x5e>
        mode_ = MODE_FIRST_FF;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80017be:	461a      	mov	r2, r3
 80017c0:	2300      	movs	r3, #0
 80017c2:	6693      	str	r3, [r2, #104]	@ 0x68
      if (spin_timeout_ > 0)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	695b      	ldr	r3, [r3, #20]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d013      	beq.n	80017f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x8e>
        if ((hardware_.time() - c_time) > spin_timeout_)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	3304      	adds	r3, #4
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7ff fdab 	bl	800132c <_ZN13STM32Hardware4timeEv>
 80017d6:	4602      	mov	r2, r0
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	1ad2      	subs	r2, r2, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	695b      	ldr	r3, [r3, #20]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	bf8c      	ite	hi
 80017e4:	2301      	movhi	r3, #1
 80017e6:	2300      	movls	r3, #0
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d002      	beq.n	80017f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x8e>
          return SPIN_TIMEOUT;
 80017ee:	f06f 0301 	mvn.w	r3, #1
 80017f2:	e1e8      	b.n	8001bc6 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x460>
      int data = hardware_.read();
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	3304      	adds	r3, #4
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7ff fd78 	bl	80012ee <_ZN13STM32Hardware4readEv>
 80017fe:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	2b00      	cmp	r3, #0
 8001804:	f2c0 81c1 	blt.w	8001b8a <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x424>
      checksum_ += data;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800180e:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	4413      	add	r3, r2
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800181a:	6793      	str	r3, [r2, #120]	@ 0x78
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001822:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001824:	2b07      	cmp	r3, #7
 8001826:	d124      	bne.n	8001872 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x10c>
        message_in[index_++] = data;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800182e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001830:	1c5a      	adds	r2, r3, #1
 8001832:	6879      	ldr	r1, [r7, #4]
 8001834:	f501 5100 	add.w	r1, r1, #8192	@ 0x2000
 8001838:	674a      	str	r2, [r1, #116]	@ 0x74
 800183a:	68ba      	ldr	r2, [r7, #8]
 800183c:	b2d1      	uxtb	r1, r2
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	4413      	add	r3, r2
 8001842:	460a      	mov	r2, r1
 8001844:	761a      	strb	r2, [r3, #24]
        bytes_--;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800184c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800184e:	3b01      	subs	r3, #1
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8001856:	66d3      	str	r3, [r2, #108]	@ 0x6c
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800185e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001860:	2b00      	cmp	r3, #0
 8001862:	d1af      	bne.n	80017c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x5e>
          mode_ = MODE_MSG_CHECKSUM;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800186a:	461a      	mov	r2, r3
 800186c:	2308      	movs	r3, #8
 800186e:	6693      	str	r3, [r2, #104]	@ 0x68
 8001870:	e7a8      	b.n	80017c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x5e>
      else if (mode_ == MODE_FIRST_FF)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001878:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800187a:	2b00      	cmp	r3, #0
 800187c:	d12e      	bne.n	80018dc <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x176>
        if (data == 0xff)
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	2bff      	cmp	r3, #255	@ 0xff
 8001882:	d110      	bne.n	80018a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x140>
          mode_++;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800188a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800188c:	3301      	adds	r3, #1
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8001894:	6693      	str	r3, [r2, #104]	@ 0x68
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	3314      	adds	r3, #20
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 80018a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 80018a4:	e78e      	b.n	80017c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x5e>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	3304      	adds	r3, #4
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7ff fd3e 	bl	800132c <_ZN13STM32Hardware4timeEv>
 80018b0:	4602      	mov	r2, r0
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018ba:	4293      	cmp	r3, r2
 80018bc:	bf8c      	ite	hi
 80018be:	2301      	movhi	r3, #1
 80018c0:	2300      	movls	r3, #0
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	f43f af7d 	beq.w	80017c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x5e>
          configured_ = false;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80018d0:	2200      	movs	r2, #0
 80018d2:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
          return SPIN_TIMEOUT;
 80018d6:	f06f 0301 	mvn.w	r3, #1
 80018da:	e174      	b.n	8001bc6 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x460>
      else if (mode_ == MODE_PROTOCOL_VER)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80018e2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d11e      	bne.n	8001926 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x1c0>
        if (data == PROTOCOL_VER)
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	2bfe      	cmp	r3, #254	@ 0xfe
 80018ec:	d109      	bne.n	8001902 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x19c>
          mode_++;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80018f4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80018f6:	3301      	adds	r3, #1
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 80018fe:	6693      	str	r3, [r2, #104]	@ 0x68
 8001900:	e760      	b.n	80017c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x5e>
          mode_ = MODE_FIRST_FF;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001908:	461a      	mov	r2, r3
 800190a:	2300      	movs	r3, #0
 800190c:	6693      	str	r3, [r2, #104]	@ 0x68
          if (configured_ == false)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001914:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8001918:	2b00      	cmp	r3, #0
 800191a:	f47f af53 	bne.w	80017c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x5e>
            requestSyncTime();  /* send a msg back showing our protocol version */
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f000 f955 	bl	8001bce <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE15requestSyncTimeEv>
 8001924:	e74e      	b.n	80017c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x5e>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800192c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800192e:	2b02      	cmp	r3, #2
 8001930:	d11b      	bne.n	800196a <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x204>
        bytes_ = data;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001938:	461a      	mov	r2, r3
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	66d3      	str	r3, [r2, #108]	@ 0x6c
        index_ = 0;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001944:	461a      	mov	r2, r3
 8001946:	2300      	movs	r3, #0
 8001948:	6753      	str	r3, [r2, #116]	@ 0x74
        mode_++;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001950:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001952:	3301      	adds	r3, #1
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800195a:	6693      	str	r3, [r2, #104]	@ 0x68
        checksum_ = data;               /* first byte for calculating size checksum */
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001962:	461a      	mov	r2, r3
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	6793      	str	r3, [r2, #120]	@ 0x78
 8001968:	e72c      	b.n	80017c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x5e>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001970:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001972:	2b03      	cmp	r3, #3
 8001974:	d114      	bne.n	80019a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x23a>
        bytes_ += data << 8;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800197c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	021b      	lsls	r3, r3, #8
 8001982:	4413      	add	r3, r2
 8001984:	687a      	ldr	r2, [r7, #4]
 8001986:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800198a:	66d3      	str	r3, [r2, #108]	@ 0x6c
        mode_++;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001992:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001994:	3301      	adds	r3, #1
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800199c:	6693      	str	r3, [r2, #104]	@ 0x68
 800199e:	e711      	b.n	80017c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x5e>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80019a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80019a8:	2b04      	cmp	r3, #4
 80019aa:	d11b      	bne.n	80019e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x27e>
        if ((checksum_ % 256) == 255)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80019b2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80019b4:	425a      	negs	r2, r3
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	b2d2      	uxtb	r2, r2
 80019ba:	bf58      	it	pl
 80019bc:	4253      	negpl	r3, r2
 80019be:	2bff      	cmp	r3, #255	@ 0xff
 80019c0:	d109      	bne.n	80019d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x270>
          mode_++;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80019c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80019ca:	3301      	adds	r3, #1
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 80019d2:	6693      	str	r3, [r2, #104]	@ 0x68
 80019d4:	e6f6      	b.n	80017c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x5e>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80019dc:	461a      	mov	r2, r3
 80019de:	2300      	movs	r3, #0
 80019e0:	6693      	str	r3, [r2, #104]	@ 0x68
 80019e2:	e6ef      	b.n	80017c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x5e>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80019ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80019ec:	2b05      	cmp	r3, #5
 80019ee:	d115      	bne.n	8001a1c <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x2b6>
        topic_ = data;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80019f6:	461a      	mov	r2, r3
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	6713      	str	r3, [r2, #112]	@ 0x70
        mode_++;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001a02:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001a04:	3301      	adds	r3, #1
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8001a0c:	6693      	str	r3, [r2, #104]	@ 0x68
        checksum_ = data;               /* first byte included in checksum */
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001a14:	461a      	mov	r2, r3
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	6793      	str	r3, [r2, #120]	@ 0x78
 8001a1a:	e6d3      	b.n	80017c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x5e>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001a22:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001a24:	2b06      	cmp	r3, #6
 8001a26:	d11e      	bne.n	8001a66 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x300>
        topic_ += data << 8;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001a2e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	021b      	lsls	r3, r3, #8
 8001a34:	4413      	add	r3, r2
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8001a3c:	6713      	str	r3, [r2, #112]	@ 0x70
        mode_ = MODE_MESSAGE;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001a44:	461a      	mov	r2, r3
 8001a46:	2307      	movs	r3, #7
 8001a48:	6693      	str	r3, [r2, #104]	@ 0x68
        if (bytes_ == 0)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001a50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	f47f aeb6 	bne.w	80017c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x5e>
          mode_ = MODE_MSG_CHECKSUM;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001a5e:	461a      	mov	r2, r3
 8001a60:	2308      	movs	r3, #8
 8001a62:	6693      	str	r3, [r2, #104]	@ 0x68
 8001a64:	e6ae      	b.n	80017c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x5e>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001a6c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001a6e:	2b08      	cmp	r3, #8
 8001a70:	f47f aea8 	bne.w	80017c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x5e>
        mode_ = MODE_FIRST_FF;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	6693      	str	r3, [r2, #104]	@ 0x68
        if ((checksum_ % 256) == 255)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001a86:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001a88:	425a      	negs	r2, r3
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	b2d2      	uxtb	r2, r2
 8001a8e:	bf58      	it	pl
 8001a90:	4253      	negpl	r3, r2
 8001a92:	2bff      	cmp	r3, #255	@ 0xff
 8001a94:	f47f ae96 	bne.w	80017c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x5e>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001a9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d116      	bne.n	8001ad2 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x36c>
            requestSyncTime();
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f000 f892 	bl	8001bce <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE15requestSyncTimeEv>
            negotiateTopics();
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f000 f8ac 	bl	8001c08 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
            last_sync_receive_time = c_time;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
            return SPIN_ERR;
 8001acc:	f04f 33ff 	mov.w	r3, #4294967295
 8001ad0:	e079      	b.n	8001bc6 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x460>
          else if (topic_ == TopicInfo::ID_TIME)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001ad8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ada:	2b0a      	cmp	r3, #10
 8001adc:	d106      	bne.n	8001aec <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x386>
            syncTime(message_in);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	3318      	adds	r3, #24
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f000 f969 	bl	8001dbc <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8syncTimeEPh>
 8001aea:	e66b      	b.n	80017c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x5e>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001af2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001af4:	2b06      	cmp	r3, #6
 8001af6:	d110      	bne.n	8001b1a <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x3b4>
            req_param_resp.deserialize(message_in);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	f503 5302 	add.w	r3, r3, #8320	@ 0x2080
 8001afe:	3310      	adds	r3, #16
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	3218      	adds	r2, #24
 8001b04:	4611      	mov	r1, r2
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7ff f8cb 	bl	8000ca2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001b12:	2201      	movs	r2, #1
 8001b14:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
 8001b18:	e654      	b.n	80017c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x5e>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001b20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b22:	2b0b      	cmp	r3, #11
 8001b24:	d106      	bne.n	8001b34 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x3ce>
            configured_ = false;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
 8001b32:	e647      	b.n	80017c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x5e>
            if (subscribers[topic_ - 100])
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001b3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b3c:	f1a3 0264 	sub.w	r2, r3, #100	@ 0x64
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	f502 6201 	add.w	r2, r2, #2064	@ 0x810
 8001b46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	f43f ae3a 	beq.w	80017c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x5e>
              subscribers[topic_ - 100]->callback(message_in);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001b56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b58:	f1a3 0264 	sub.w	r2, r3, #100	@ 0x64
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f502 6201 	add.w	r2, r2, #2064	@ 0x810
 8001b62:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001b6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b6e:	f1a3 0264 	sub.w	r2, r3, #100	@ 0x64
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	f502 6201 	add.w	r2, r2, #2064	@ 0x810
 8001b78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	3218      	adds	r2, #24
 8001b84:	4611      	mov	r1, r2
 8001b86:	4798      	blx	r3
    while (true)
 8001b88:	e61c      	b.n	80017c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x5e>
        break;
 8001b8a:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001b92:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d014      	beq.n	8001bc4 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x45e>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001ba0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001ba4:	68fa      	ldr	r2, [r7, #12]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d909      	bls.n	8001bc4 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x45e>
      requestSyncTime();
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f000 f80c 	bl	8001bce <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
    return SPIN_OK;
 8001bc4:	2300      	movs	r3, #0
  }
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3710      	adds	r7, #16
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE15requestSyncTimeEv>:
  void requestSyncTime()
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	b086      	sub	sp, #24
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8001bd6:	f107 030c 	add.w	r3, r7, #12
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7fe fbcc 	bl	8000378 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f107 020c 	add.w	r2, r7, #12
 8001bea:	210a      	movs	r1, #10
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	4798      	blx	r3
    rt_time = hardware_.time();
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	3304      	adds	r3, #4
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7ff fb99 	bl	800132c <_ZN13STM32Hardware4timeEv>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	609a      	str	r2, [r3, #8]
  }
 8001c00:	bf00      	nop
 8001c02:	3718      	adds	r7, #24
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}

08001c08 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 8001c08:	b590      	push	{r4, r7, lr}
 8001c0a:	b08b      	sub	sp, #44	@ 0x2c
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8001c10:	f107 030c 	add.w	r3, r7, #12
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7fe fc99 	bl	800054c <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c1e:	e05a      	b.n	8001cd6 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE15negotiateTopicsEv+0xce>
    {
      if (publishers[i] != 0) // non-empty slot
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c24:	f602 0206 	addw	r2, r2, #2054	@ 0x806
 8001c28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d04f      	beq.n	8001cd0 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE15negotiateTopicsEv+0xc8>
      {
        ti.topic_id = publishers[i]->id_;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c34:	f602 0206 	addw	r2, r2, #2054	@ 0x806
 8001c38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c46:	f602 0206 	addw	r2, r2, #2054	@ 0x806
 8001c4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c56:	f602 0206 	addw	r2, r2, #2054	@ 0x806
 8001c5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c5e:	6859      	ldr	r1, [r3, #4]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c64:	f602 0206 	addw	r2, r2, #2054	@ 0x806
 8001c68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	3308      	adds	r3, #8
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4608      	mov	r0, r1
 8001c76:	4798      	blx	r3
 8001c78:	4603      	mov	r3, r0
 8001c7a:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c80:	f602 0206 	addw	r2, r2, #2054	@ 0x806
 8001c84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c88:	6859      	ldr	r1, [r3, #4]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c8e:	f602 0206 	addw	r2, r2, #2054	@ 0x806
 8001c92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	330c      	adds	r3, #12
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4608      	mov	r0, r1
 8001ca0:	4798      	blx	r3
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8001ca6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001caa:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681c      	ldr	r4, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cb6:	f602 0206 	addw	r2, r2, #2054	@ 0x806
 8001cba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7ff f9a2 	bl	8001008 <_ZN3ros9Publisher15getEndpointTypeEv>
 8001cc4:	4601      	mov	r1, r0
 8001cc6:	f107 030c 	add.w	r3, r7, #12
 8001cca:	461a      	mov	r2, r3
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8001cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cd8:	2b09      	cmp	r3, #9
 8001cda:	dda1      	ble.n	8001c20 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE15negotiateTopicsEv+0x18>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8001cdc:	2300      	movs	r3, #0
 8001cde:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ce0:	e05e      	b.n	8001da0 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE15negotiateTopicsEv+0x198>
    {
      if (subscribers[i] != 0) // non-empty slot
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ce6:	f502 6201 	add.w	r2, r2, #2064	@ 0x810
 8001cea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d053      	beq.n	8001d9a <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE15negotiateTopicsEv+0x192>
      {
        ti.topic_id = subscribers[i]->id_;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cf6:	f502 6201 	add.w	r2, r2, #2064	@ 0x810
 8001cfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d08:	f502 6201 	add.w	r2, r2, #2064	@ 0x810
 8001d0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d18:	f502 6201 	add.w	r2, r2, #2064	@ 0x810
 8001d1c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d24:	f502 6201 	add.w	r2, r2, #2064	@ 0x810
 8001d28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	3308      	adds	r3, #8
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4608      	mov	r0, r1
 8001d34:	4798      	blx	r3
 8001d36:	4603      	mov	r3, r0
 8001d38:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d3e:	f502 6201 	add.w	r2, r2, #2064	@ 0x810
 8001d42:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d4a:	f502 6201 	add.w	r2, r2, #2064	@ 0x810
 8001d4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	330c      	adds	r3, #12
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4608      	mov	r0, r1
 8001d5a:	4798      	blx	r3
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8001d60:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d64:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	681c      	ldr	r4, [r3, #0]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d70:	f502 6201 	add.w	r2, r2, #2064	@ 0x810
 8001d74:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d7c:	f502 6201 	add.w	r2, r2, #2064	@ 0x810
 8001d80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	3304      	adds	r3, #4
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4608      	mov	r0, r1
 8001d8c:	4798      	blx	r3
 8001d8e:	4601      	mov	r1, r0
 8001d90:	f107 030c 	add.w	r3, r7, #12
 8001d94:	461a      	mov	r2, r3
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8001d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001da2:	2b09      	cmp	r3, #9
 8001da4:	dd9d      	ble.n	8001ce2 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE15negotiateTopicsEv+0xda>
      }
    }
    configured_ = true;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001dac:	2201      	movs	r2, #1
 8001dae:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
  }
 8001db2:	bf00      	nop
 8001db4:	372c      	adds	r7, #44	@ 0x2c
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd90      	pop	{r4, r7, pc}
	...

08001dbc <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b086      	sub	sp, #24
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8001dc6:	f107 0308 	add.w	r3, r7, #8
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7fe fad4 	bl	8000378 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	3304      	adds	r3, #4
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7ff faa9 	bl	800132c <_ZN13STM32Hardware4timeEv>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8001de4:	f107 0308 	add.w	r3, r7, #8
 8001de8:	6839      	ldr	r1, [r7, #0]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7fe fb33 	bl	8000456 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8001df0:	68fa      	ldr	r2, [r7, #12]
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	4915      	ldr	r1, [pc, #84]	@ (8001e4c <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8syncTimeEPh+0x90>)
 8001df6:	fba1 1303 	umull	r1, r3, r1, r3
 8001dfa:	099b      	lsrs	r3, r3, #6
 8001dfc:	4413      	add	r3, r2
 8001dfe:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8001e00:	6939      	ldr	r1, [r7, #16]
 8001e02:	697a      	ldr	r2, [r7, #20]
 8001e04:	4b11      	ldr	r3, [pc, #68]	@ (8001e4c <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8syncTimeEPh+0x90>)
 8001e06:	fba3 0302 	umull	r0, r3, r3, r2
 8001e0a:	099b      	lsrs	r3, r3, #6
 8001e0c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001e10:	fb00 f303 	mul.w	r3, r0, r3
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	4a0e      	ldr	r2, [pc, #56]	@ (8001e50 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8syncTimeEPh+0x94>)
 8001e18:	fb02 f303 	mul.w	r3, r2, r3
 8001e1c:	440b      	add	r3, r1
 8001e1e:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8001e20:	f107 0308 	add.w	r3, r7, #8
 8001e24:	3304      	adds	r3, #4
 8001e26:	4619      	mov	r1, r3
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f000 f8b7 	bl	8001f9c <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	3304      	adds	r3, #4
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7ff fa7a 	bl	800132c <_ZN13STM32Hardware4timeEv>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001e40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
 8001e44:	bf00      	nop
 8001e46:	3718      	adds	r7, #24
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	10624dd3 	.word	0x10624dd3
 8001e50:	000f4240 	.word	0x000f4240

08001e54 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b088      	sub	sp, #32
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	60f8      	str	r0, [r7, #12]
 8001e5c:	60b9      	str	r1, [r7, #8]
 8001e5e:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	2b63      	cmp	r3, #99	@ 0x63
 8001e64:	dd0b      	ble.n	8001e7e <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE7publishEiPKNS_3MsgE+0x2a>
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001e6c:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8001e70:	f083 0301 	eor.w	r3, r3, #1
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE7publishEiPKNS_3MsgE+0x2a>
      return 0;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	e087      	b.n	8001f8e <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE7publishEiPKNS_3MsgE+0x13a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e8a:	3318      	adds	r3, #24
 8001e8c:	3307      	adds	r3, #7
 8001e8e:	4619      	mov	r1, r3
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	4790      	blx	r2
 8001e94:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e9c:	22ff      	movs	r2, #255	@ 0xff
 8001e9e:	761a      	strb	r2, [r3, #24]
    message_out[1] = PROTOCOL_VER;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ea6:	22fe      	movs	r2, #254	@ 0xfe
 8001ea8:	765a      	strb	r2, [r3, #25]
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	b2da      	uxtb	r2, r3
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001eb4:	769a      	strb	r2, [r3, #26]
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	b29b      	uxth	r3, r3
 8001eba:	0a1b      	lsrs	r3, r3, #8
 8001ebc:	b29b      	uxth	r3, r3
 8001ebe:	b2da      	uxtb	r2, r3
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ec6:	76da      	strb	r2, [r3, #27]
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ece:	7e9a      	ldrb	r2, [r3, #26]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ed6:	7edb      	ldrb	r3, [r3, #27]
 8001ed8:	4413      	add	r3, r2
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	43db      	mvns	r3, r3
 8001ede:	b2da      	uxtb	r2, r3
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ee6:	771a      	strb	r2, [r3, #28]
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	b2da      	uxtb	r2, r3
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ef2:	775a      	strb	r2, [r3, #29]
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	b21b      	sxth	r3, r3
 8001ef8:	121b      	asrs	r3, r3, #8
 8001efa:	b21b      	sxth	r3, r3
 8001efc:	b2da      	uxtb	r2, r3
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f04:	779a      	strb	r2, [r3, #30]

    /* calculate checksum */
    int chk = 0;
 8001f06:	2300      	movs	r3, #0
 8001f08:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8001f0a:	2305      	movs	r3, #5
 8001f0c:	61bb      	str	r3, [r7, #24]
 8001f0e:	e00d      	b.n	8001f2c <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE7publishEiPKNS_3MsgE+0xd8>
      chk += message_out[i];
 8001f10:	68fa      	ldr	r2, [r7, #12]
 8001f12:	69bb      	ldr	r3, [r7, #24]
 8001f14:	4413      	add	r3, r2
 8001f16:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f1a:	3318      	adds	r3, #24
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	461a      	mov	r2, r3
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	4413      	add	r3, r2
 8001f24:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	3301      	adds	r3, #1
 8001f2a:	61bb      	str	r3, [r7, #24]
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	3306      	adds	r3, #6
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	429a      	cmp	r2, r3
 8001f34:	ddec      	ble.n	8001f10 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE7publishEiPKNS_3MsgE+0xbc>
    l += 7;
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	3307      	adds	r3, #7
 8001f3a:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	425a      	negs	r2, r3
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	b2d2      	uxtb	r2, r2
 8001f44:	bf58      	it	pl
 8001f46:	4253      	negpl	r3, r2
 8001f48:	b2da      	uxtb	r2, r3
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	1c59      	adds	r1, r3, #1
 8001f4e:	6179      	str	r1, [r7, #20]
 8001f50:	43d2      	mvns	r2, r2
 8001f52:	b2d1      	uxtb	r1, r2
 8001f54:	68fa      	ldr	r2, [r7, #12]
 8001f56:	4413      	add	r3, r2
 8001f58:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f5c:	3318      	adds	r3, #24
 8001f5e:	460a      	mov	r2, r1
 8001f60:	701a      	strb	r2, [r3, #0]

    if (l <= OUTPUT_SIZE)
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f68:	dc0b      	bgt.n	8001f82 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE7publishEiPKNS_3MsgE+0x12e>
    {
      hardware_.write(message_out, l);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	1d18      	adds	r0, r3, #4
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f74:	3318      	adds	r3, #24
 8001f76:	697a      	ldr	r2, [r7, #20]
 8001f78:	4619      	mov	r1, r3
 8001f7a:	f7ff f9c6 	bl	800130a <_ZN13STM32Hardware5writeEPhi>
      return l;
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	e005      	b.n	8001f8e <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE7publishEiPKNS_3MsgE+0x13a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8001f82:	4905      	ldr	r1, [pc, #20]	@ (8001f98 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE7publishEiPKNS_3MsgE+0x144>)
 8001f84:	68f8      	ldr	r0, [r7, #12]
 8001f86:	f000 f847 	bl	8002018 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8logerrorEPKc>
      return -1;
 8001f8a:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3720      	adds	r7, #32
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	08004c18 	.word	0x08004c18

08001f9c <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	3304      	adds	r3, #4
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7ff f9be 	bl	800132c <_ZN13STM32Hardware4timeEv>
 8001fb0:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	4914      	ldr	r1, [pc, #80]	@ (800200c <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE6setNowERKNS_4TimeE+0x70>)
 8001fba:	fba1 1303 	umull	r1, r3, r1, r3
 8001fbe:	099b      	lsrs	r3, r3, #6
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	1e5a      	subs	r2, r3, #1
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	60da      	str	r2, [r3, #12]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	6859      	ldr	r1, [r3, #4]
 8001fcc:	68fa      	ldr	r2, [r7, #12]
 8001fce:	4b0f      	ldr	r3, [pc, #60]	@ (800200c <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE6setNowERKNS_4TimeE+0x70>)
 8001fd0:	fba3 0302 	umull	r0, r3, r3, r2
 8001fd4:	099b      	lsrs	r3, r3, #6
 8001fd6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001fda:	fb00 f303 	mul.w	r3, r0, r3
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	4a0b      	ldr	r2, [pc, #44]	@ (8002010 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE6setNowERKNS_4TimeE+0x74>)
 8001fe2:	fb02 f303 	mul.w	r3, r2, r3
 8001fe6:	1aca      	subs	r2, r1, r3
 8001fe8:	4b0a      	ldr	r3, [pc, #40]	@ (8002014 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE6setNowERKNS_4TimeE+0x78>)
 8001fea:	4413      	add	r3, r2
 8001fec:	687a      	ldr	r2, [r7, #4]
 8001fee:	6113      	str	r3, [r2, #16]
    normalizeSecNSec(sec_offset, nsec_offset);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f103 020c 	add.w	r2, r3, #12
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	3310      	adds	r3, #16
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	4610      	mov	r0, r2
 8001ffe:	f000 f9db 	bl	80023b8 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8002002:	bf00      	nop
 8002004:	3710      	adds	r7, #16
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	10624dd3 	.word	0x10624dd3
 8002010:	000f4240 	.word	0x000f4240
 8002014:	3b9aca00 	.word	0x3b9aca00

08002018 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8002022:	683a      	ldr	r2, [r7, #0]
 8002024:	2103      	movs	r1, #3
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f000 f804 	bl	8002034 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE3logEcPKc>
  }
 800202c:	bf00      	nop
 800202e:	3708      	adds	r7, #8
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}

08002034 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE3logEcPKc>:
  void log(char byte, const char * msg)
 8002034:	b580      	push	{r7, lr}
 8002036:	b088      	sub	sp, #32
 8002038:	af00      	add	r7, sp, #0
 800203a:	60f8      	str	r0, [r7, #12]
 800203c:	460b      	mov	r3, r1
 800203e:	607a      	str	r2, [r7, #4]
 8002040:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8002042:	f107 0314 	add.w	r3, r7, #20
 8002046:	4618      	mov	r0, r3
 8002048:	f7fe fc40 	bl	80008cc <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 800204c:	7afb      	ldrb	r3, [r7, #11]
 800204e:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f107 0214 	add.w	r2, r7, #20
 800205e:	2107      	movs	r1, #7
 8002060:	68f8      	ldr	r0, [r7, #12]
 8002062:	4798      	blx	r3
  }
 8002064:	bf00      	nop
 8002066:	3720      	adds	r7, #32
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}

0800206c <_Z41__static_initialization_and_destruction_0ii>:
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	6039      	str	r1, [r7, #0]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2b01      	cmp	r3, #1
 800207a:	d114      	bne.n	80020a6 <_Z41__static_initialization_and_destruction_0ii+0x3a>
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002082:	4293      	cmp	r3, r2
 8002084:	d10f      	bne.n	80020a6 <_Z41__static_initialization_and_destruction_0ii+0x3a>
};

SerialComm comm_rosserial(huart_rosserial);
 8002086:	490a      	ldr	r1, [pc, #40]	@ (80020b0 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8002088:	480a      	ldr	r0, [pc, #40]	@ (80020b4 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 800208a:	f7fe ffc8 	bl	800101e <_ZN10SerialCommC1ER20__UART_HandleTypeDef>
ros::NodeHandle nh;
 800208e:	480a      	ldr	r0, [pc, #40]	@ (80020b8 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8002090:	f7ff fa00 	bl	8001494 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EEC1Ev>
std_msgs::String str_msg;
 8002094:	4809      	ldr	r0, [pc, #36]	@ (80020bc <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8002096:	f7ff f955 	bl	8001344 <_ZN8std_msgs6StringC1Ev>
ros::Publisher chatter("/chatter", &str_msg);
 800209a:	2300      	movs	r3, #0
 800209c:	4a07      	ldr	r2, [pc, #28]	@ (80020bc <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800209e:	4908      	ldr	r1, [pc, #32]	@ (80020c0 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 80020a0:	4808      	ldr	r0, [pc, #32]	@ (80020c4 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 80020a2:	f7fe ff87 	bl	8000fb4 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 80020a6:	bf00      	nop
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	20000078 	.word	0x20000078
 80020b4:	20000148 	.word	0x20000148
 80020b8:	20002154 	.word	0x20002154
 80020bc:	2000420c 	.word	0x2000420c
 80020c0:	08004c54 	.word	0x08004c54
 80020c4:	20004214 	.word	0x20004214

080020c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE9connectedEv>:
  virtual bool connected() override
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
    return configured_;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80020d6:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
  };
 80020da:	4618      	mov	r0, r3
 80020dc:	370c      	adds	r7, #12
 80020de:	46bd      	mov	sp, r7
 80020e0:	bc80      	pop	{r7}
 80020e2:	4770      	bx	lr

080020e4 <_GLOBAL__sub_I_comm_rosserial>:
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80020ec:	2001      	movs	r0, #1
 80020ee:	f7ff ffbd 	bl	800206c <_Z41__static_initialization_and_destruction_0ii>
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b085      	sub	sp, #20
 80020f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80020fa:	4b15      	ldr	r3, [pc, #84]	@ (8002150 <HAL_MspInit+0x5c>)
 80020fc:	699b      	ldr	r3, [r3, #24]
 80020fe:	4a14      	ldr	r2, [pc, #80]	@ (8002150 <HAL_MspInit+0x5c>)
 8002100:	f043 0301 	orr.w	r3, r3, #1
 8002104:	6193      	str	r3, [r2, #24]
 8002106:	4b12      	ldr	r3, [pc, #72]	@ (8002150 <HAL_MspInit+0x5c>)
 8002108:	699b      	ldr	r3, [r3, #24]
 800210a:	f003 0301 	and.w	r3, r3, #1
 800210e:	60bb      	str	r3, [r7, #8]
 8002110:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002112:	4b0f      	ldr	r3, [pc, #60]	@ (8002150 <HAL_MspInit+0x5c>)
 8002114:	69db      	ldr	r3, [r3, #28]
 8002116:	4a0e      	ldr	r2, [pc, #56]	@ (8002150 <HAL_MspInit+0x5c>)
 8002118:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800211c:	61d3      	str	r3, [r2, #28]
 800211e:	4b0c      	ldr	r3, [pc, #48]	@ (8002150 <HAL_MspInit+0x5c>)
 8002120:	69db      	ldr	r3, [r3, #28]
 8002122:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002126:	607b      	str	r3, [r7, #4]
 8002128:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800212a:	4b0a      	ldr	r3, [pc, #40]	@ (8002154 <HAL_MspInit+0x60>)
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	60fb      	str	r3, [r7, #12]
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002136:	60fb      	str	r3, [r7, #12]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800213e:	60fb      	str	r3, [r7, #12]
 8002140:	4a04      	ldr	r2, [pc, #16]	@ (8002154 <HAL_MspInit+0x60>)
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002146:	bf00      	nop
 8002148:	3714      	adds	r7, #20
 800214a:	46bd      	mov	sp, r7
 800214c:	bc80      	pop	{r7}
 800214e:	4770      	bx	lr
 8002150:	40021000 	.word	0x40021000
 8002154:	40010000 	.word	0x40010000

08002158 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b088      	sub	sp, #32
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002160:	f107 0310 	add.w	r3, r7, #16
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	605a      	str	r2, [r3, #4]
 800216a:	609a      	str	r2, [r3, #8]
 800216c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a47      	ldr	r2, [pc, #284]	@ (8002290 <HAL_UART_MspInit+0x138>)
 8002174:	4293      	cmp	r3, r2
 8002176:	f040 8086 	bne.w	8002286 <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800217a:	4b46      	ldr	r3, [pc, #280]	@ (8002294 <HAL_UART_MspInit+0x13c>)
 800217c:	699b      	ldr	r3, [r3, #24]
 800217e:	4a45      	ldr	r2, [pc, #276]	@ (8002294 <HAL_UART_MspInit+0x13c>)
 8002180:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002184:	6193      	str	r3, [r2, #24]
 8002186:	4b43      	ldr	r3, [pc, #268]	@ (8002294 <HAL_UART_MspInit+0x13c>)
 8002188:	699b      	ldr	r3, [r3, #24]
 800218a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800218e:	60fb      	str	r3, [r7, #12]
 8002190:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002192:	4b40      	ldr	r3, [pc, #256]	@ (8002294 <HAL_UART_MspInit+0x13c>)
 8002194:	699b      	ldr	r3, [r3, #24]
 8002196:	4a3f      	ldr	r2, [pc, #252]	@ (8002294 <HAL_UART_MspInit+0x13c>)
 8002198:	f043 0304 	orr.w	r3, r3, #4
 800219c:	6193      	str	r3, [r2, #24]
 800219e:	4b3d      	ldr	r3, [pc, #244]	@ (8002294 <HAL_UART_MspInit+0x13c>)
 80021a0:	699b      	ldr	r3, [r3, #24]
 80021a2:	f003 0304 	and.w	r3, r3, #4
 80021a6:	60bb      	str	r3, [r7, #8]
 80021a8:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80021aa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80021ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b0:	2302      	movs	r3, #2
 80021b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021b4:	2303      	movs	r3, #3
 80021b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021b8:	f107 0310 	add.w	r3, r7, #16
 80021bc:	4619      	mov	r1, r3
 80021be:	4836      	ldr	r0, [pc, #216]	@ (8002298 <HAL_UART_MspInit+0x140>)
 80021c0:	f000 fd82 	bl	8002cc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80021c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80021c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021ca:	2300      	movs	r3, #0
 80021cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ce:	2300      	movs	r3, #0
 80021d0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021d2:	f107 0310 	add.w	r3, r7, #16
 80021d6:	4619      	mov	r1, r3
 80021d8:	482f      	ldr	r0, [pc, #188]	@ (8002298 <HAL_UART_MspInit+0x140>)
 80021da:	f000 fd75 	bl	8002cc8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80021de:	4b2f      	ldr	r3, [pc, #188]	@ (800229c <HAL_UART_MspInit+0x144>)
 80021e0:	4a2f      	ldr	r2, [pc, #188]	@ (80022a0 <HAL_UART_MspInit+0x148>)
 80021e2:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80021e4:	4b2d      	ldr	r3, [pc, #180]	@ (800229c <HAL_UART_MspInit+0x144>)
 80021e6:	2210      	movs	r2, #16
 80021e8:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021ea:	4b2c      	ldr	r3, [pc, #176]	@ (800229c <HAL_UART_MspInit+0x144>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80021f0:	4b2a      	ldr	r3, [pc, #168]	@ (800229c <HAL_UART_MspInit+0x144>)
 80021f2:	2280      	movs	r2, #128	@ 0x80
 80021f4:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021f6:	4b29      	ldr	r3, [pc, #164]	@ (800229c <HAL_UART_MspInit+0x144>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021fc:	4b27      	ldr	r3, [pc, #156]	@ (800229c <HAL_UART_MspInit+0x144>)
 80021fe:	2200      	movs	r2, #0
 8002200:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002202:	4b26      	ldr	r3, [pc, #152]	@ (800229c <HAL_UART_MspInit+0x144>)
 8002204:	2200      	movs	r2, #0
 8002206:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002208:	4b24      	ldr	r3, [pc, #144]	@ (800229c <HAL_UART_MspInit+0x144>)
 800220a:	2200      	movs	r2, #0
 800220c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800220e:	4823      	ldr	r0, [pc, #140]	@ (800229c <HAL_UART_MspInit+0x144>)
 8002210:	f000 fab8 	bl	8002784 <HAL_DMA_Init>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 800221a:	f7fe f887 	bl	800032c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a1e      	ldr	r2, [pc, #120]	@ (800229c <HAL_UART_MspInit+0x144>)
 8002222:	639a      	str	r2, [r3, #56]	@ 0x38
 8002224:	4a1d      	ldr	r2, [pc, #116]	@ (800229c <HAL_UART_MspInit+0x144>)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800222a:	4b1e      	ldr	r3, [pc, #120]	@ (80022a4 <HAL_UART_MspInit+0x14c>)
 800222c:	4a1e      	ldr	r2, [pc, #120]	@ (80022a8 <HAL_UART_MspInit+0x150>)
 800222e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002230:	4b1c      	ldr	r3, [pc, #112]	@ (80022a4 <HAL_UART_MspInit+0x14c>)
 8002232:	2200      	movs	r2, #0
 8002234:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002236:	4b1b      	ldr	r3, [pc, #108]	@ (80022a4 <HAL_UART_MspInit+0x14c>)
 8002238:	2200      	movs	r2, #0
 800223a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800223c:	4b19      	ldr	r3, [pc, #100]	@ (80022a4 <HAL_UART_MspInit+0x14c>)
 800223e:	2280      	movs	r2, #128	@ 0x80
 8002240:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002242:	4b18      	ldr	r3, [pc, #96]	@ (80022a4 <HAL_UART_MspInit+0x14c>)
 8002244:	2200      	movs	r2, #0
 8002246:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002248:	4b16      	ldr	r3, [pc, #88]	@ (80022a4 <HAL_UART_MspInit+0x14c>)
 800224a:	2200      	movs	r2, #0
 800224c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800224e:	4b15      	ldr	r3, [pc, #84]	@ (80022a4 <HAL_UART_MspInit+0x14c>)
 8002250:	2200      	movs	r2, #0
 8002252:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002254:	4b13      	ldr	r3, [pc, #76]	@ (80022a4 <HAL_UART_MspInit+0x14c>)
 8002256:	2200      	movs	r2, #0
 8002258:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800225a:	4812      	ldr	r0, [pc, #72]	@ (80022a4 <HAL_UART_MspInit+0x14c>)
 800225c:	f000 fa92 	bl	8002784 <HAL_DMA_Init>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d001      	beq.n	800226a <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 8002266:	f7fe f861 	bl	800032c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a0d      	ldr	r2, [pc, #52]	@ (80022a4 <HAL_UART_MspInit+0x14c>)
 800226e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002270:	4a0c      	ldr	r2, [pc, #48]	@ (80022a4 <HAL_UART_MspInit+0x14c>)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002276:	2200      	movs	r2, #0
 8002278:	2100      	movs	r1, #0
 800227a:	2025      	movs	r0, #37	@ 0x25
 800227c:	f000 fa4b 	bl	8002716 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002280:	2025      	movs	r0, #37	@ 0x25
 8002282:	f000 fa64 	bl	800274e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002286:	bf00      	nop
 8002288:	3720      	adds	r7, #32
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	40013800 	.word	0x40013800
 8002294:	40021000 	.word	0x40021000
 8002298:	40010800 	.word	0x40010800
 800229c:	200000c0 	.word	0x200000c0
 80022a0:	40020044 	.word	0x40020044
 80022a4:	20000104 	.word	0x20000104
 80022a8:	40020058 	.word	0x40020058

080022ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022b0:	bf00      	nop
 80022b2:	e7fd      	b.n	80022b0 <NMI_Handler+0x4>

080022b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022b8:	bf00      	nop
 80022ba:	e7fd      	b.n	80022b8 <HardFault_Handler+0x4>

080022bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022c0:	bf00      	nop
 80022c2:	e7fd      	b.n	80022c0 <MemManage_Handler+0x4>

080022c4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022c8:	bf00      	nop
 80022ca:	e7fd      	b.n	80022c8 <BusFault_Handler+0x4>

080022cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022d0:	bf00      	nop
 80022d2:	e7fd      	b.n	80022d0 <UsageFault_Handler+0x4>

080022d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022d8:	bf00      	nop
 80022da:	46bd      	mov	sp, r7
 80022dc:	bc80      	pop	{r7}
 80022de:	4770      	bx	lr

080022e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022e4:	bf00      	nop
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bc80      	pop	{r7}
 80022ea:	4770      	bx	lr

080022ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022f0:	bf00      	nop
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bc80      	pop	{r7}
 80022f6:	4770      	bx	lr

080022f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022fc:	f000 f8f4 	bl	80024e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002300:	bf00      	nop
 8002302:	bd80      	pop	{r7, pc}

08002304 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002308:	4802      	ldr	r0, [pc, #8]	@ (8002314 <DMA1_Channel4_IRQHandler+0x10>)
 800230a:	f000 fba9 	bl	8002a60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800230e:	bf00      	nop
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	200000c0 	.word	0x200000c0

08002318 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800231c:	4802      	ldr	r0, [pc, #8]	@ (8002328 <DMA1_Channel5_IRQHandler+0x10>)
 800231e:	f000 fb9f 	bl	8002a60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002322:	bf00      	nop
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	20000104 	.word	0x20000104

0800232c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart_rosserial);
 8002330:	4802      	ldr	r0, [pc, #8]	@ (800233c <USART1_IRQHandler+0x10>)
 8002332:	f001 fb5b 	bl	80039ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002336:	bf00      	nop
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	20000078 	.word	0x20000078

08002340 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b086      	sub	sp, #24
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002348:	4a14      	ldr	r2, [pc, #80]	@ (800239c <_sbrk+0x5c>)
 800234a:	4b15      	ldr	r3, [pc, #84]	@ (80023a0 <_sbrk+0x60>)
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002354:	4b13      	ldr	r3, [pc, #76]	@ (80023a4 <_sbrk+0x64>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d102      	bne.n	8002362 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800235c:	4b11      	ldr	r3, [pc, #68]	@ (80023a4 <_sbrk+0x64>)
 800235e:	4a12      	ldr	r2, [pc, #72]	@ (80023a8 <_sbrk+0x68>)
 8002360:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002362:	4b10      	ldr	r3, [pc, #64]	@ (80023a4 <_sbrk+0x64>)
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4413      	add	r3, r2
 800236a:	693a      	ldr	r2, [r7, #16]
 800236c:	429a      	cmp	r2, r3
 800236e:	d207      	bcs.n	8002380 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002370:	f002 fa76 	bl	8004860 <__errno>
 8002374:	4603      	mov	r3, r0
 8002376:	220c      	movs	r2, #12
 8002378:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800237a:	f04f 33ff 	mov.w	r3, #4294967295
 800237e:	e009      	b.n	8002394 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002380:	4b08      	ldr	r3, [pc, #32]	@ (80023a4 <_sbrk+0x64>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002386:	4b07      	ldr	r3, [pc, #28]	@ (80023a4 <_sbrk+0x64>)
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4413      	add	r3, r2
 800238e:	4a05      	ldr	r2, [pc, #20]	@ (80023a4 <_sbrk+0x64>)
 8002390:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002392:	68fb      	ldr	r3, [r7, #12]
}
 8002394:	4618      	mov	r0, r3
 8002396:	3718      	adds	r7, #24
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	20005000 	.word	0x20005000
 80023a0:	00000400 	.word	0x00000400
 80023a4:	20004228 	.word	0x20004228
 80023a8:	20004378 	.word	0x20004378

080023ac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023b0:	bf00      	nop
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bc80      	pop	{r7}
 80023b6:	4770      	bx	lr

080023b8 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b085      	sub	sp, #20
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	0a5a      	lsrs	r2, r3, #9
 80023c8:	490f      	ldr	r1, [pc, #60]	@ (8002408 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 80023ca:	fba1 1202 	umull	r1, r2, r1, r2
 80023ce:	09d2      	lsrs	r2, r2, #7
 80023d0:	490e      	ldr	r1, [pc, #56]	@ (800240c <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 80023d2:	fb01 f202 	mul.w	r2, r1, r2
 80023d6:	1a9b      	subs	r3, r3, r2
 80023d8:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	0a5b      	lsrs	r3, r3, #9
 80023e0:	4a09      	ldr	r2, [pc, #36]	@ (8002408 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 80023e2:	fba2 2303 	umull	r2, r3, r2, r3
 80023e6:	09db      	lsrs	r3, r3, #7
 80023e8:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	441a      	add	r2, r3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	68fa      	ldr	r2, [r7, #12]
 80023fa:	601a      	str	r2, [r3, #0]
}
 80023fc:	bf00      	nop
 80023fe:	3714      	adds	r7, #20
 8002400:	46bd      	mov	sp, r7
 8002402:	bc80      	pop	{r7}
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	00044b83 	.word	0x00044b83
 800240c:	3b9aca00 	.word	0x3b9aca00

08002410 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002410:	f7ff ffcc 	bl	80023ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002414:	480b      	ldr	r0, [pc, #44]	@ (8002444 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002416:	490c      	ldr	r1, [pc, #48]	@ (8002448 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002418:	4a0c      	ldr	r2, [pc, #48]	@ (800244c <LoopFillZerobss+0x16>)
  movs r3, #0
 800241a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800241c:	e002      	b.n	8002424 <LoopCopyDataInit>

0800241e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800241e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002420:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002422:	3304      	adds	r3, #4

08002424 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002424:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002426:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002428:	d3f9      	bcc.n	800241e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800242a:	4a09      	ldr	r2, [pc, #36]	@ (8002450 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800242c:	4c09      	ldr	r4, [pc, #36]	@ (8002454 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800242e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002430:	e001      	b.n	8002436 <LoopFillZerobss>

08002432 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002432:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002434:	3204      	adds	r2, #4

08002436 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002436:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002438:	d3fb      	bcc.n	8002432 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800243a:	f002 fa17 	bl	800486c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800243e:	f7fd fe8d 	bl	800015c <main>
  bx lr
 8002442:	4770      	bx	lr
  ldr r0, =_sdata
 8002444:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002448:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800244c:	08004d74 	.word	0x08004d74
  ldr r2, =_sbss
 8002450:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8002454:	20004378 	.word	0x20004378

08002458 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002458:	e7fe      	b.n	8002458 <ADC1_2_IRQHandler>
	...

0800245c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002460:	4b08      	ldr	r3, [pc, #32]	@ (8002484 <HAL_Init+0x28>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a07      	ldr	r2, [pc, #28]	@ (8002484 <HAL_Init+0x28>)
 8002466:	f043 0310 	orr.w	r3, r3, #16
 800246a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800246c:	2003      	movs	r0, #3
 800246e:	f000 f947 	bl	8002700 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002472:	200f      	movs	r0, #15
 8002474:	f000 f808 	bl	8002488 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002478:	f7ff fe3c 	bl	80020f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800247c:	2300      	movs	r3, #0
}
 800247e:	4618      	mov	r0, r3
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	40022000 	.word	0x40022000

08002488 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002490:	4b12      	ldr	r3, [pc, #72]	@ (80024dc <HAL_InitTick+0x54>)
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	4b12      	ldr	r3, [pc, #72]	@ (80024e0 <HAL_InitTick+0x58>)
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	4619      	mov	r1, r3
 800249a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800249e:	fbb3 f3f1 	udiv	r3, r3, r1
 80024a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80024a6:	4618      	mov	r0, r3
 80024a8:	f000 f95f 	bl	800276a <HAL_SYSTICK_Config>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d001      	beq.n	80024b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e00e      	b.n	80024d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2b0f      	cmp	r3, #15
 80024ba:	d80a      	bhi.n	80024d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024bc:	2200      	movs	r2, #0
 80024be:	6879      	ldr	r1, [r7, #4]
 80024c0:	f04f 30ff 	mov.w	r0, #4294967295
 80024c4:	f000 f927 	bl	8002716 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024c8:	4a06      	ldr	r2, [pc, #24]	@ (80024e4 <HAL_InitTick+0x5c>)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024ce:	2300      	movs	r3, #0
 80024d0:	e000      	b.n	80024d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3708      	adds	r7, #8
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	20000000 	.word	0x20000000
 80024e0:	20000008 	.word	0x20000008
 80024e4:	20000004 	.word	0x20000004

080024e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024ec:	4b05      	ldr	r3, [pc, #20]	@ (8002504 <HAL_IncTick+0x1c>)
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	461a      	mov	r2, r3
 80024f2:	4b05      	ldr	r3, [pc, #20]	@ (8002508 <HAL_IncTick+0x20>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4413      	add	r3, r2
 80024f8:	4a03      	ldr	r2, [pc, #12]	@ (8002508 <HAL_IncTick+0x20>)
 80024fa:	6013      	str	r3, [r2, #0]
}
 80024fc:	bf00      	nop
 80024fe:	46bd      	mov	sp, r7
 8002500:	bc80      	pop	{r7}
 8002502:	4770      	bx	lr
 8002504:	20000008 	.word	0x20000008
 8002508:	2000422c 	.word	0x2000422c

0800250c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
  return uwTick;
 8002510:	4b02      	ldr	r3, [pc, #8]	@ (800251c <HAL_GetTick+0x10>)
 8002512:	681b      	ldr	r3, [r3, #0]
}
 8002514:	4618      	mov	r0, r3
 8002516:	46bd      	mov	sp, r7
 8002518:	bc80      	pop	{r7}
 800251a:	4770      	bx	lr
 800251c:	2000422c 	.word	0x2000422c

08002520 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002528:	f7ff fff0 	bl	800250c <HAL_GetTick>
 800252c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002538:	d005      	beq.n	8002546 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800253a:	4b0a      	ldr	r3, [pc, #40]	@ (8002564 <HAL_Delay+0x44>)
 800253c:	781b      	ldrb	r3, [r3, #0]
 800253e:	461a      	mov	r2, r3
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	4413      	add	r3, r2
 8002544:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002546:	bf00      	nop
 8002548:	f7ff ffe0 	bl	800250c <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	68fa      	ldr	r2, [r7, #12]
 8002554:	429a      	cmp	r2, r3
 8002556:	d8f7      	bhi.n	8002548 <HAL_Delay+0x28>
  {
  }
}
 8002558:	bf00      	nop
 800255a:	bf00      	nop
 800255c:	3710      	adds	r7, #16
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	20000008 	.word	0x20000008

08002568 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002568:	b480      	push	{r7}
 800256a:	b085      	sub	sp, #20
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	f003 0307 	and.w	r3, r3, #7
 8002576:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002578:	4b0c      	ldr	r3, [pc, #48]	@ (80025ac <__NVIC_SetPriorityGrouping+0x44>)
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800257e:	68ba      	ldr	r2, [r7, #8]
 8002580:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002584:	4013      	ands	r3, r2
 8002586:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002590:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002594:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002598:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800259a:	4a04      	ldr	r2, [pc, #16]	@ (80025ac <__NVIC_SetPriorityGrouping+0x44>)
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	60d3      	str	r3, [r2, #12]
}
 80025a0:	bf00      	nop
 80025a2:	3714      	adds	r7, #20
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bc80      	pop	{r7}
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop
 80025ac:	e000ed00 	.word	0xe000ed00

080025b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025b4:	4b04      	ldr	r3, [pc, #16]	@ (80025c8 <__NVIC_GetPriorityGrouping+0x18>)
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	0a1b      	lsrs	r3, r3, #8
 80025ba:	f003 0307 	and.w	r3, r3, #7
}
 80025be:	4618      	mov	r0, r3
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bc80      	pop	{r7}
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	e000ed00 	.word	0xe000ed00

080025cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	4603      	mov	r3, r0
 80025d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	db0b      	blt.n	80025f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025de:	79fb      	ldrb	r3, [r7, #7]
 80025e0:	f003 021f 	and.w	r2, r3, #31
 80025e4:	4906      	ldr	r1, [pc, #24]	@ (8002600 <__NVIC_EnableIRQ+0x34>)
 80025e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ea:	095b      	lsrs	r3, r3, #5
 80025ec:	2001      	movs	r0, #1
 80025ee:	fa00 f202 	lsl.w	r2, r0, r2
 80025f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025f6:	bf00      	nop
 80025f8:	370c      	adds	r7, #12
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bc80      	pop	{r7}
 80025fe:	4770      	bx	lr
 8002600:	e000e100 	.word	0xe000e100

08002604 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	4603      	mov	r3, r0
 800260c:	6039      	str	r1, [r7, #0]
 800260e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002610:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002614:	2b00      	cmp	r3, #0
 8002616:	db0a      	blt.n	800262e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	b2da      	uxtb	r2, r3
 800261c:	490c      	ldr	r1, [pc, #48]	@ (8002650 <__NVIC_SetPriority+0x4c>)
 800261e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002622:	0112      	lsls	r2, r2, #4
 8002624:	b2d2      	uxtb	r2, r2
 8002626:	440b      	add	r3, r1
 8002628:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800262c:	e00a      	b.n	8002644 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	b2da      	uxtb	r2, r3
 8002632:	4908      	ldr	r1, [pc, #32]	@ (8002654 <__NVIC_SetPriority+0x50>)
 8002634:	79fb      	ldrb	r3, [r7, #7]
 8002636:	f003 030f 	and.w	r3, r3, #15
 800263a:	3b04      	subs	r3, #4
 800263c:	0112      	lsls	r2, r2, #4
 800263e:	b2d2      	uxtb	r2, r2
 8002640:	440b      	add	r3, r1
 8002642:	761a      	strb	r2, [r3, #24]
}
 8002644:	bf00      	nop
 8002646:	370c      	adds	r7, #12
 8002648:	46bd      	mov	sp, r7
 800264a:	bc80      	pop	{r7}
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop
 8002650:	e000e100 	.word	0xe000e100
 8002654:	e000ed00 	.word	0xe000ed00

08002658 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002658:	b480      	push	{r7}
 800265a:	b089      	sub	sp, #36	@ 0x24
 800265c:	af00      	add	r7, sp, #0
 800265e:	60f8      	str	r0, [r7, #12]
 8002660:	60b9      	str	r1, [r7, #8]
 8002662:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f003 0307 	and.w	r3, r3, #7
 800266a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	f1c3 0307 	rsb	r3, r3, #7
 8002672:	2b04      	cmp	r3, #4
 8002674:	bf28      	it	cs
 8002676:	2304      	movcs	r3, #4
 8002678:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	3304      	adds	r3, #4
 800267e:	2b06      	cmp	r3, #6
 8002680:	d902      	bls.n	8002688 <NVIC_EncodePriority+0x30>
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	3b03      	subs	r3, #3
 8002686:	e000      	b.n	800268a <NVIC_EncodePriority+0x32>
 8002688:	2300      	movs	r3, #0
 800268a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800268c:	f04f 32ff 	mov.w	r2, #4294967295
 8002690:	69bb      	ldr	r3, [r7, #24]
 8002692:	fa02 f303 	lsl.w	r3, r2, r3
 8002696:	43da      	mvns	r2, r3
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	401a      	ands	r2, r3
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026a0:	f04f 31ff 	mov.w	r1, #4294967295
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	fa01 f303 	lsl.w	r3, r1, r3
 80026aa:	43d9      	mvns	r1, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026b0:	4313      	orrs	r3, r2
         );
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3724      	adds	r7, #36	@ 0x24
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bc80      	pop	{r7}
 80026ba:	4770      	bx	lr

080026bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	3b01      	subs	r3, #1
 80026c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80026cc:	d301      	bcc.n	80026d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026ce:	2301      	movs	r3, #1
 80026d0:	e00f      	b.n	80026f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026d2:	4a0a      	ldr	r2, [pc, #40]	@ (80026fc <SysTick_Config+0x40>)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	3b01      	subs	r3, #1
 80026d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026da:	210f      	movs	r1, #15
 80026dc:	f04f 30ff 	mov.w	r0, #4294967295
 80026e0:	f7ff ff90 	bl	8002604 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026e4:	4b05      	ldr	r3, [pc, #20]	@ (80026fc <SysTick_Config+0x40>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026ea:	4b04      	ldr	r3, [pc, #16]	@ (80026fc <SysTick_Config+0x40>)
 80026ec:	2207      	movs	r2, #7
 80026ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026f0:	2300      	movs	r3, #0
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3708      	adds	r7, #8
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	e000e010 	.word	0xe000e010

08002700 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f7ff ff2d 	bl	8002568 <__NVIC_SetPriorityGrouping>
}
 800270e:	bf00      	nop
 8002710:	3708      	adds	r7, #8
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}

08002716 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002716:	b580      	push	{r7, lr}
 8002718:	b086      	sub	sp, #24
 800271a:	af00      	add	r7, sp, #0
 800271c:	4603      	mov	r3, r0
 800271e:	60b9      	str	r1, [r7, #8]
 8002720:	607a      	str	r2, [r7, #4]
 8002722:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002724:	2300      	movs	r3, #0
 8002726:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002728:	f7ff ff42 	bl	80025b0 <__NVIC_GetPriorityGrouping>
 800272c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	68b9      	ldr	r1, [r7, #8]
 8002732:	6978      	ldr	r0, [r7, #20]
 8002734:	f7ff ff90 	bl	8002658 <NVIC_EncodePriority>
 8002738:	4602      	mov	r2, r0
 800273a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800273e:	4611      	mov	r1, r2
 8002740:	4618      	mov	r0, r3
 8002742:	f7ff ff5f 	bl	8002604 <__NVIC_SetPriority>
}
 8002746:	bf00      	nop
 8002748:	3718      	adds	r7, #24
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}

0800274e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800274e:	b580      	push	{r7, lr}
 8002750:	b082      	sub	sp, #8
 8002752:	af00      	add	r7, sp, #0
 8002754:	4603      	mov	r3, r0
 8002756:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800275c:	4618      	mov	r0, r3
 800275e:	f7ff ff35 	bl	80025cc <__NVIC_EnableIRQ>
}
 8002762:	bf00      	nop
 8002764:	3708      	adds	r7, #8
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}

0800276a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800276a:	b580      	push	{r7, lr}
 800276c:	b082      	sub	sp, #8
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f7ff ffa2 	bl	80026bc <SysTick_Config>
 8002778:	4603      	mov	r3, r0
}
 800277a:	4618      	mov	r0, r3
 800277c:	3708      	adds	r7, #8
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
	...

08002784 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002784:	b480      	push	{r7}
 8002786:	b085      	sub	sp, #20
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800278c:	2300      	movs	r3, #0
 800278e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d101      	bne.n	800279a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e043      	b.n	8002822 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	461a      	mov	r2, r3
 80027a0:	4b22      	ldr	r3, [pc, #136]	@ (800282c <HAL_DMA_Init+0xa8>)
 80027a2:	4413      	add	r3, r2
 80027a4:	4a22      	ldr	r2, [pc, #136]	@ (8002830 <HAL_DMA_Init+0xac>)
 80027a6:	fba2 2303 	umull	r2, r3, r2, r3
 80027aa:	091b      	lsrs	r3, r3, #4
 80027ac:	009a      	lsls	r2, r3, #2
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a1f      	ldr	r2, [pc, #124]	@ (8002834 <HAL_DMA_Init+0xb0>)
 80027b6:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2202      	movs	r2, #2
 80027bc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80027ce:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80027d2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80027dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	695b      	ldr	r3, [r3, #20]
 80027ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	69db      	ldr	r3, [r3, #28]
 80027fa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80027fc:	68fa      	ldr	r2, [r7, #12]
 80027fe:	4313      	orrs	r3, r2
 8002800:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	68fa      	ldr	r2, [r7, #12]
 8002808:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2201      	movs	r2, #1
 8002814:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002820:	2300      	movs	r3, #0
}
 8002822:	4618      	mov	r0, r3
 8002824:	3714      	adds	r7, #20
 8002826:	46bd      	mov	sp, r7
 8002828:	bc80      	pop	{r7}
 800282a:	4770      	bx	lr
 800282c:	bffdfff8 	.word	0xbffdfff8
 8002830:	cccccccd 	.word	0xcccccccd
 8002834:	40020000 	.word	0x40020000

08002838 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b086      	sub	sp, #24
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	607a      	str	r2, [r7, #4]
 8002844:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002846:	2300      	movs	r3, #0
 8002848:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002850:	2b01      	cmp	r3, #1
 8002852:	d101      	bne.n	8002858 <HAL_DMA_Start_IT+0x20>
 8002854:	2302      	movs	r3, #2
 8002856:	e04b      	b.n	80028f0 <HAL_DMA_Start_IT+0xb8>
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002866:	b2db      	uxtb	r3, r3
 8002868:	2b01      	cmp	r3, #1
 800286a:	d13a      	bne.n	80028e2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2202      	movs	r2, #2
 8002870:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2200      	movs	r2, #0
 8002878:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f022 0201 	bic.w	r2, r2, #1
 8002888:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	68b9      	ldr	r1, [r7, #8]
 8002890:	68f8      	ldr	r0, [r7, #12]
 8002892:	f000 f9eb 	bl	8002c6c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800289a:	2b00      	cmp	r3, #0
 800289c:	d008      	beq.n	80028b0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f042 020e 	orr.w	r2, r2, #14
 80028ac:	601a      	str	r2, [r3, #0]
 80028ae:	e00f      	b.n	80028d0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f022 0204 	bic.w	r2, r2, #4
 80028be:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f042 020a 	orr.w	r2, r2, #10
 80028ce:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f042 0201 	orr.w	r2, r2, #1
 80028de:	601a      	str	r2, [r3, #0]
 80028e0:	e005      	b.n	80028ee <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80028ea:	2302      	movs	r3, #2
 80028ec:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80028ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3718      	adds	r7, #24
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b085      	sub	sp, #20
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002900:	2300      	movs	r3, #0
 8002902:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800290a:	b2db      	uxtb	r3, r3
 800290c:	2b02      	cmp	r3, #2
 800290e:	d008      	beq.n	8002922 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2204      	movs	r2, #4
 8002914:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e020      	b.n	8002964 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f022 020e 	bic.w	r2, r2, #14
 8002930:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f022 0201 	bic.w	r2, r2, #1
 8002940:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800294a:	2101      	movs	r1, #1
 800294c:	fa01 f202 	lsl.w	r2, r1, r2
 8002950:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2201      	movs	r2, #1
 8002956:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002962:	7bfb      	ldrb	r3, [r7, #15]
}
 8002964:	4618      	mov	r0, r3
 8002966:	3714      	adds	r7, #20
 8002968:	46bd      	mov	sp, r7
 800296a:	bc80      	pop	{r7}
 800296c:	4770      	bx	lr
	...

08002970 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002978:	2300      	movs	r3, #0
 800297a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002982:	b2db      	uxtb	r3, r3
 8002984:	2b02      	cmp	r3, #2
 8002986:	d005      	beq.n	8002994 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2204      	movs	r2, #4
 800298c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	73fb      	strb	r3, [r7, #15]
 8002992:	e051      	b.n	8002a38 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f022 020e 	bic.w	r2, r2, #14
 80029a2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f022 0201 	bic.w	r2, r2, #1
 80029b2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a22      	ldr	r2, [pc, #136]	@ (8002a44 <HAL_DMA_Abort_IT+0xd4>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d029      	beq.n	8002a12 <HAL_DMA_Abort_IT+0xa2>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a21      	ldr	r2, [pc, #132]	@ (8002a48 <HAL_DMA_Abort_IT+0xd8>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d022      	beq.n	8002a0e <HAL_DMA_Abort_IT+0x9e>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a1f      	ldr	r2, [pc, #124]	@ (8002a4c <HAL_DMA_Abort_IT+0xdc>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d01a      	beq.n	8002a08 <HAL_DMA_Abort_IT+0x98>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a1e      	ldr	r2, [pc, #120]	@ (8002a50 <HAL_DMA_Abort_IT+0xe0>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d012      	beq.n	8002a02 <HAL_DMA_Abort_IT+0x92>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a1c      	ldr	r2, [pc, #112]	@ (8002a54 <HAL_DMA_Abort_IT+0xe4>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d00a      	beq.n	80029fc <HAL_DMA_Abort_IT+0x8c>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a1b      	ldr	r2, [pc, #108]	@ (8002a58 <HAL_DMA_Abort_IT+0xe8>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d102      	bne.n	80029f6 <HAL_DMA_Abort_IT+0x86>
 80029f0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80029f4:	e00e      	b.n	8002a14 <HAL_DMA_Abort_IT+0xa4>
 80029f6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80029fa:	e00b      	b.n	8002a14 <HAL_DMA_Abort_IT+0xa4>
 80029fc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002a00:	e008      	b.n	8002a14 <HAL_DMA_Abort_IT+0xa4>
 8002a02:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a06:	e005      	b.n	8002a14 <HAL_DMA_Abort_IT+0xa4>
 8002a08:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a0c:	e002      	b.n	8002a14 <HAL_DMA_Abort_IT+0xa4>
 8002a0e:	2310      	movs	r3, #16
 8002a10:	e000      	b.n	8002a14 <HAL_DMA_Abort_IT+0xa4>
 8002a12:	2301      	movs	r3, #1
 8002a14:	4a11      	ldr	r2, [pc, #68]	@ (8002a5c <HAL_DMA_Abort_IT+0xec>)
 8002a16:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2200      	movs	r2, #0
 8002a24:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d003      	beq.n	8002a38 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	4798      	blx	r3
    } 
  }
  return status;
 8002a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3710      	adds	r7, #16
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	40020008 	.word	0x40020008
 8002a48:	4002001c 	.word	0x4002001c
 8002a4c:	40020030 	.word	0x40020030
 8002a50:	40020044 	.word	0x40020044
 8002a54:	40020058 	.word	0x40020058
 8002a58:	4002006c 	.word	0x4002006c
 8002a5c:	40020000 	.word	0x40020000

08002a60 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a7c:	2204      	movs	r2, #4
 8002a7e:	409a      	lsls	r2, r3
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	4013      	ands	r3, r2
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d04f      	beq.n	8002b28 <HAL_DMA_IRQHandler+0xc8>
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	f003 0304 	and.w	r3, r3, #4
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d04a      	beq.n	8002b28 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0320 	and.w	r3, r3, #32
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d107      	bne.n	8002ab0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f022 0204 	bic.w	r2, r2, #4
 8002aae:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a66      	ldr	r2, [pc, #408]	@ (8002c50 <HAL_DMA_IRQHandler+0x1f0>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d029      	beq.n	8002b0e <HAL_DMA_IRQHandler+0xae>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a65      	ldr	r2, [pc, #404]	@ (8002c54 <HAL_DMA_IRQHandler+0x1f4>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d022      	beq.n	8002b0a <HAL_DMA_IRQHandler+0xaa>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a63      	ldr	r2, [pc, #396]	@ (8002c58 <HAL_DMA_IRQHandler+0x1f8>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d01a      	beq.n	8002b04 <HAL_DMA_IRQHandler+0xa4>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a62      	ldr	r2, [pc, #392]	@ (8002c5c <HAL_DMA_IRQHandler+0x1fc>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d012      	beq.n	8002afe <HAL_DMA_IRQHandler+0x9e>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a60      	ldr	r2, [pc, #384]	@ (8002c60 <HAL_DMA_IRQHandler+0x200>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d00a      	beq.n	8002af8 <HAL_DMA_IRQHandler+0x98>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a5f      	ldr	r2, [pc, #380]	@ (8002c64 <HAL_DMA_IRQHandler+0x204>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d102      	bne.n	8002af2 <HAL_DMA_IRQHandler+0x92>
 8002aec:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002af0:	e00e      	b.n	8002b10 <HAL_DMA_IRQHandler+0xb0>
 8002af2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002af6:	e00b      	b.n	8002b10 <HAL_DMA_IRQHandler+0xb0>
 8002af8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002afc:	e008      	b.n	8002b10 <HAL_DMA_IRQHandler+0xb0>
 8002afe:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002b02:	e005      	b.n	8002b10 <HAL_DMA_IRQHandler+0xb0>
 8002b04:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002b08:	e002      	b.n	8002b10 <HAL_DMA_IRQHandler+0xb0>
 8002b0a:	2340      	movs	r3, #64	@ 0x40
 8002b0c:	e000      	b.n	8002b10 <HAL_DMA_IRQHandler+0xb0>
 8002b0e:	2304      	movs	r3, #4
 8002b10:	4a55      	ldr	r2, [pc, #340]	@ (8002c68 <HAL_DMA_IRQHandler+0x208>)
 8002b12:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	f000 8094 	beq.w	8002c46 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002b26:	e08e      	b.n	8002c46 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b2c:	2202      	movs	r2, #2
 8002b2e:	409a      	lsls	r2, r3
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	4013      	ands	r3, r2
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d056      	beq.n	8002be6 <HAL_DMA_IRQHandler+0x186>
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	f003 0302 	and.w	r3, r3, #2
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d051      	beq.n	8002be6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0320 	and.w	r3, r3, #32
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d10b      	bne.n	8002b68 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f022 020a 	bic.w	r2, r2, #10
 8002b5e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a38      	ldr	r2, [pc, #224]	@ (8002c50 <HAL_DMA_IRQHandler+0x1f0>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d029      	beq.n	8002bc6 <HAL_DMA_IRQHandler+0x166>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a37      	ldr	r2, [pc, #220]	@ (8002c54 <HAL_DMA_IRQHandler+0x1f4>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d022      	beq.n	8002bc2 <HAL_DMA_IRQHandler+0x162>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a35      	ldr	r2, [pc, #212]	@ (8002c58 <HAL_DMA_IRQHandler+0x1f8>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d01a      	beq.n	8002bbc <HAL_DMA_IRQHandler+0x15c>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a34      	ldr	r2, [pc, #208]	@ (8002c5c <HAL_DMA_IRQHandler+0x1fc>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d012      	beq.n	8002bb6 <HAL_DMA_IRQHandler+0x156>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a32      	ldr	r2, [pc, #200]	@ (8002c60 <HAL_DMA_IRQHandler+0x200>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d00a      	beq.n	8002bb0 <HAL_DMA_IRQHandler+0x150>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a31      	ldr	r2, [pc, #196]	@ (8002c64 <HAL_DMA_IRQHandler+0x204>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d102      	bne.n	8002baa <HAL_DMA_IRQHandler+0x14a>
 8002ba4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002ba8:	e00e      	b.n	8002bc8 <HAL_DMA_IRQHandler+0x168>
 8002baa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002bae:	e00b      	b.n	8002bc8 <HAL_DMA_IRQHandler+0x168>
 8002bb0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002bb4:	e008      	b.n	8002bc8 <HAL_DMA_IRQHandler+0x168>
 8002bb6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002bba:	e005      	b.n	8002bc8 <HAL_DMA_IRQHandler+0x168>
 8002bbc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002bc0:	e002      	b.n	8002bc8 <HAL_DMA_IRQHandler+0x168>
 8002bc2:	2320      	movs	r3, #32
 8002bc4:	e000      	b.n	8002bc8 <HAL_DMA_IRQHandler+0x168>
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	4a27      	ldr	r2, [pc, #156]	@ (8002c68 <HAL_DMA_IRQHandler+0x208>)
 8002bca:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d034      	beq.n	8002c46 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002be4:	e02f      	b.n	8002c46 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bea:	2208      	movs	r2, #8
 8002bec:	409a      	lsls	r2, r3
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d028      	beq.n	8002c48 <HAL_DMA_IRQHandler+0x1e8>
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	f003 0308 	and.w	r3, r3, #8
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d023      	beq.n	8002c48 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f022 020e 	bic.w	r2, r2, #14
 8002c0e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c18:	2101      	movs	r1, #1
 8002c1a:	fa01 f202 	lsl.w	r2, r1, r2
 8002c1e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2201      	movs	r2, #1
 8002c24:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2201      	movs	r2, #1
 8002c2a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d004      	beq.n	8002c48 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	4798      	blx	r3
    }
  }
  return;
 8002c46:	bf00      	nop
 8002c48:	bf00      	nop
}
 8002c4a:	3710      	adds	r7, #16
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	40020008 	.word	0x40020008
 8002c54:	4002001c 	.word	0x4002001c
 8002c58:	40020030 	.word	0x40020030
 8002c5c:	40020044 	.word	0x40020044
 8002c60:	40020058 	.word	0x40020058
 8002c64:	4002006c 	.word	0x4002006c
 8002c68:	40020000 	.word	0x40020000

08002c6c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b085      	sub	sp, #20
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	60f8      	str	r0, [r7, #12]
 8002c74:	60b9      	str	r1, [r7, #8]
 8002c76:	607a      	str	r2, [r7, #4]
 8002c78:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c82:	2101      	movs	r1, #1
 8002c84:	fa01 f202 	lsl.w	r2, r1, r2
 8002c88:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	683a      	ldr	r2, [r7, #0]
 8002c90:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	2b10      	cmp	r3, #16
 8002c98:	d108      	bne.n	8002cac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	68ba      	ldr	r2, [r7, #8]
 8002ca8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002caa:	e007      	b.n	8002cbc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	68ba      	ldr	r2, [r7, #8]
 8002cb2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	60da      	str	r2, [r3, #12]
}
 8002cbc:	bf00      	nop
 8002cbe:	3714      	adds	r7, #20
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bc80      	pop	{r7}
 8002cc4:	4770      	bx	lr
	...

08002cc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b08b      	sub	sp, #44	@ 0x2c
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cda:	e169      	b.n	8002fb0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002cdc:	2201      	movs	r2, #1
 8002cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	69fa      	ldr	r2, [r7, #28]
 8002cec:	4013      	ands	r3, r2
 8002cee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	f040 8158 	bne.w	8002faa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	4a9a      	ldr	r2, [pc, #616]	@ (8002f68 <HAL_GPIO_Init+0x2a0>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d05e      	beq.n	8002dc2 <HAL_GPIO_Init+0xfa>
 8002d04:	4a98      	ldr	r2, [pc, #608]	@ (8002f68 <HAL_GPIO_Init+0x2a0>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d875      	bhi.n	8002df6 <HAL_GPIO_Init+0x12e>
 8002d0a:	4a98      	ldr	r2, [pc, #608]	@ (8002f6c <HAL_GPIO_Init+0x2a4>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d058      	beq.n	8002dc2 <HAL_GPIO_Init+0xfa>
 8002d10:	4a96      	ldr	r2, [pc, #600]	@ (8002f6c <HAL_GPIO_Init+0x2a4>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d86f      	bhi.n	8002df6 <HAL_GPIO_Init+0x12e>
 8002d16:	4a96      	ldr	r2, [pc, #600]	@ (8002f70 <HAL_GPIO_Init+0x2a8>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d052      	beq.n	8002dc2 <HAL_GPIO_Init+0xfa>
 8002d1c:	4a94      	ldr	r2, [pc, #592]	@ (8002f70 <HAL_GPIO_Init+0x2a8>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d869      	bhi.n	8002df6 <HAL_GPIO_Init+0x12e>
 8002d22:	4a94      	ldr	r2, [pc, #592]	@ (8002f74 <HAL_GPIO_Init+0x2ac>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d04c      	beq.n	8002dc2 <HAL_GPIO_Init+0xfa>
 8002d28:	4a92      	ldr	r2, [pc, #584]	@ (8002f74 <HAL_GPIO_Init+0x2ac>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d863      	bhi.n	8002df6 <HAL_GPIO_Init+0x12e>
 8002d2e:	4a92      	ldr	r2, [pc, #584]	@ (8002f78 <HAL_GPIO_Init+0x2b0>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d046      	beq.n	8002dc2 <HAL_GPIO_Init+0xfa>
 8002d34:	4a90      	ldr	r2, [pc, #576]	@ (8002f78 <HAL_GPIO_Init+0x2b0>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d85d      	bhi.n	8002df6 <HAL_GPIO_Init+0x12e>
 8002d3a:	2b12      	cmp	r3, #18
 8002d3c:	d82a      	bhi.n	8002d94 <HAL_GPIO_Init+0xcc>
 8002d3e:	2b12      	cmp	r3, #18
 8002d40:	d859      	bhi.n	8002df6 <HAL_GPIO_Init+0x12e>
 8002d42:	a201      	add	r2, pc, #4	@ (adr r2, 8002d48 <HAL_GPIO_Init+0x80>)
 8002d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d48:	08002dc3 	.word	0x08002dc3
 8002d4c:	08002d9d 	.word	0x08002d9d
 8002d50:	08002daf 	.word	0x08002daf
 8002d54:	08002df1 	.word	0x08002df1
 8002d58:	08002df7 	.word	0x08002df7
 8002d5c:	08002df7 	.word	0x08002df7
 8002d60:	08002df7 	.word	0x08002df7
 8002d64:	08002df7 	.word	0x08002df7
 8002d68:	08002df7 	.word	0x08002df7
 8002d6c:	08002df7 	.word	0x08002df7
 8002d70:	08002df7 	.word	0x08002df7
 8002d74:	08002df7 	.word	0x08002df7
 8002d78:	08002df7 	.word	0x08002df7
 8002d7c:	08002df7 	.word	0x08002df7
 8002d80:	08002df7 	.word	0x08002df7
 8002d84:	08002df7 	.word	0x08002df7
 8002d88:	08002df7 	.word	0x08002df7
 8002d8c:	08002da5 	.word	0x08002da5
 8002d90:	08002db9 	.word	0x08002db9
 8002d94:	4a79      	ldr	r2, [pc, #484]	@ (8002f7c <HAL_GPIO_Init+0x2b4>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d013      	beq.n	8002dc2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002d9a:	e02c      	b.n	8002df6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	623b      	str	r3, [r7, #32]
          break;
 8002da2:	e029      	b.n	8002df8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	3304      	adds	r3, #4
 8002daa:	623b      	str	r3, [r7, #32]
          break;
 8002dac:	e024      	b.n	8002df8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	3308      	adds	r3, #8
 8002db4:	623b      	str	r3, [r7, #32]
          break;
 8002db6:	e01f      	b.n	8002df8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	330c      	adds	r3, #12
 8002dbe:	623b      	str	r3, [r7, #32]
          break;
 8002dc0:	e01a      	b.n	8002df8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d102      	bne.n	8002dd0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002dca:	2304      	movs	r3, #4
 8002dcc:	623b      	str	r3, [r7, #32]
          break;
 8002dce:	e013      	b.n	8002df8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d105      	bne.n	8002de4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002dd8:	2308      	movs	r3, #8
 8002dda:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	69fa      	ldr	r2, [r7, #28]
 8002de0:	611a      	str	r2, [r3, #16]
          break;
 8002de2:	e009      	b.n	8002df8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002de4:	2308      	movs	r3, #8
 8002de6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	69fa      	ldr	r2, [r7, #28]
 8002dec:	615a      	str	r2, [r3, #20]
          break;
 8002dee:	e003      	b.n	8002df8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002df0:	2300      	movs	r3, #0
 8002df2:	623b      	str	r3, [r7, #32]
          break;
 8002df4:	e000      	b.n	8002df8 <HAL_GPIO_Init+0x130>
          break;
 8002df6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	2bff      	cmp	r3, #255	@ 0xff
 8002dfc:	d801      	bhi.n	8002e02 <HAL_GPIO_Init+0x13a>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	e001      	b.n	8002e06 <HAL_GPIO_Init+0x13e>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	3304      	adds	r3, #4
 8002e06:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002e08:	69bb      	ldr	r3, [r7, #24]
 8002e0a:	2bff      	cmp	r3, #255	@ 0xff
 8002e0c:	d802      	bhi.n	8002e14 <HAL_GPIO_Init+0x14c>
 8002e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	e002      	b.n	8002e1a <HAL_GPIO_Init+0x152>
 8002e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e16:	3b08      	subs	r3, #8
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	210f      	movs	r1, #15
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	fa01 f303 	lsl.w	r3, r1, r3
 8002e28:	43db      	mvns	r3, r3
 8002e2a:	401a      	ands	r2, r3
 8002e2c:	6a39      	ldr	r1, [r7, #32]
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	fa01 f303 	lsl.w	r3, r1, r3
 8002e34:	431a      	orrs	r2, r3
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	f000 80b1 	beq.w	8002faa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002e48:	4b4d      	ldr	r3, [pc, #308]	@ (8002f80 <HAL_GPIO_Init+0x2b8>)
 8002e4a:	699b      	ldr	r3, [r3, #24]
 8002e4c:	4a4c      	ldr	r2, [pc, #304]	@ (8002f80 <HAL_GPIO_Init+0x2b8>)
 8002e4e:	f043 0301 	orr.w	r3, r3, #1
 8002e52:	6193      	str	r3, [r2, #24]
 8002e54:	4b4a      	ldr	r3, [pc, #296]	@ (8002f80 <HAL_GPIO_Init+0x2b8>)
 8002e56:	699b      	ldr	r3, [r3, #24]
 8002e58:	f003 0301 	and.w	r3, r3, #1
 8002e5c:	60bb      	str	r3, [r7, #8]
 8002e5e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002e60:	4a48      	ldr	r2, [pc, #288]	@ (8002f84 <HAL_GPIO_Init+0x2bc>)
 8002e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e64:	089b      	lsrs	r3, r3, #2
 8002e66:	3302      	adds	r3, #2
 8002e68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e6c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e70:	f003 0303 	and.w	r3, r3, #3
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	220f      	movs	r2, #15
 8002e78:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7c:	43db      	mvns	r3, r3
 8002e7e:	68fa      	ldr	r2, [r7, #12]
 8002e80:	4013      	ands	r3, r2
 8002e82:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	4a40      	ldr	r2, [pc, #256]	@ (8002f88 <HAL_GPIO_Init+0x2c0>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d013      	beq.n	8002eb4 <HAL_GPIO_Init+0x1ec>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	4a3f      	ldr	r2, [pc, #252]	@ (8002f8c <HAL_GPIO_Init+0x2c4>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d00d      	beq.n	8002eb0 <HAL_GPIO_Init+0x1e8>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	4a3e      	ldr	r2, [pc, #248]	@ (8002f90 <HAL_GPIO_Init+0x2c8>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d007      	beq.n	8002eac <HAL_GPIO_Init+0x1e4>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	4a3d      	ldr	r2, [pc, #244]	@ (8002f94 <HAL_GPIO_Init+0x2cc>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d101      	bne.n	8002ea8 <HAL_GPIO_Init+0x1e0>
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	e006      	b.n	8002eb6 <HAL_GPIO_Init+0x1ee>
 8002ea8:	2304      	movs	r3, #4
 8002eaa:	e004      	b.n	8002eb6 <HAL_GPIO_Init+0x1ee>
 8002eac:	2302      	movs	r3, #2
 8002eae:	e002      	b.n	8002eb6 <HAL_GPIO_Init+0x1ee>
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e000      	b.n	8002eb6 <HAL_GPIO_Init+0x1ee>
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002eb8:	f002 0203 	and.w	r2, r2, #3
 8002ebc:	0092      	lsls	r2, r2, #2
 8002ebe:	4093      	lsls	r3, r2
 8002ec0:	68fa      	ldr	r2, [r7, #12]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002ec6:	492f      	ldr	r1, [pc, #188]	@ (8002f84 <HAL_GPIO_Init+0x2bc>)
 8002ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eca:	089b      	lsrs	r3, r3, #2
 8002ecc:	3302      	adds	r3, #2
 8002ece:	68fa      	ldr	r2, [r7, #12]
 8002ed0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d006      	beq.n	8002eee <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002ee0:	4b2d      	ldr	r3, [pc, #180]	@ (8002f98 <HAL_GPIO_Init+0x2d0>)
 8002ee2:	689a      	ldr	r2, [r3, #8]
 8002ee4:	492c      	ldr	r1, [pc, #176]	@ (8002f98 <HAL_GPIO_Init+0x2d0>)
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	608b      	str	r3, [r1, #8]
 8002eec:	e006      	b.n	8002efc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002eee:	4b2a      	ldr	r3, [pc, #168]	@ (8002f98 <HAL_GPIO_Init+0x2d0>)
 8002ef0:	689a      	ldr	r2, [r3, #8]
 8002ef2:	69bb      	ldr	r3, [r7, #24]
 8002ef4:	43db      	mvns	r3, r3
 8002ef6:	4928      	ldr	r1, [pc, #160]	@ (8002f98 <HAL_GPIO_Init+0x2d0>)
 8002ef8:	4013      	ands	r3, r2
 8002efa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d006      	beq.n	8002f16 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002f08:	4b23      	ldr	r3, [pc, #140]	@ (8002f98 <HAL_GPIO_Init+0x2d0>)
 8002f0a:	68da      	ldr	r2, [r3, #12]
 8002f0c:	4922      	ldr	r1, [pc, #136]	@ (8002f98 <HAL_GPIO_Init+0x2d0>)
 8002f0e:	69bb      	ldr	r3, [r7, #24]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	60cb      	str	r3, [r1, #12]
 8002f14:	e006      	b.n	8002f24 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002f16:	4b20      	ldr	r3, [pc, #128]	@ (8002f98 <HAL_GPIO_Init+0x2d0>)
 8002f18:	68da      	ldr	r2, [r3, #12]
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	43db      	mvns	r3, r3
 8002f1e:	491e      	ldr	r1, [pc, #120]	@ (8002f98 <HAL_GPIO_Init+0x2d0>)
 8002f20:	4013      	ands	r3, r2
 8002f22:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d006      	beq.n	8002f3e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002f30:	4b19      	ldr	r3, [pc, #100]	@ (8002f98 <HAL_GPIO_Init+0x2d0>)
 8002f32:	685a      	ldr	r2, [r3, #4]
 8002f34:	4918      	ldr	r1, [pc, #96]	@ (8002f98 <HAL_GPIO_Init+0x2d0>)
 8002f36:	69bb      	ldr	r3, [r7, #24]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	604b      	str	r3, [r1, #4]
 8002f3c:	e006      	b.n	8002f4c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002f3e:	4b16      	ldr	r3, [pc, #88]	@ (8002f98 <HAL_GPIO_Init+0x2d0>)
 8002f40:	685a      	ldr	r2, [r3, #4]
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	43db      	mvns	r3, r3
 8002f46:	4914      	ldr	r1, [pc, #80]	@ (8002f98 <HAL_GPIO_Init+0x2d0>)
 8002f48:	4013      	ands	r3, r2
 8002f4a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d021      	beq.n	8002f9c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002f58:	4b0f      	ldr	r3, [pc, #60]	@ (8002f98 <HAL_GPIO_Init+0x2d0>)
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	490e      	ldr	r1, [pc, #56]	@ (8002f98 <HAL_GPIO_Init+0x2d0>)
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	600b      	str	r3, [r1, #0]
 8002f64:	e021      	b.n	8002faa <HAL_GPIO_Init+0x2e2>
 8002f66:	bf00      	nop
 8002f68:	10320000 	.word	0x10320000
 8002f6c:	10310000 	.word	0x10310000
 8002f70:	10220000 	.word	0x10220000
 8002f74:	10210000 	.word	0x10210000
 8002f78:	10120000 	.word	0x10120000
 8002f7c:	10110000 	.word	0x10110000
 8002f80:	40021000 	.word	0x40021000
 8002f84:	40010000 	.word	0x40010000
 8002f88:	40010800 	.word	0x40010800
 8002f8c:	40010c00 	.word	0x40010c00
 8002f90:	40011000 	.word	0x40011000
 8002f94:	40011400 	.word	0x40011400
 8002f98:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002f9c:	4b0b      	ldr	r3, [pc, #44]	@ (8002fcc <HAL_GPIO_Init+0x304>)
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	69bb      	ldr	r3, [r7, #24]
 8002fa2:	43db      	mvns	r3, r3
 8002fa4:	4909      	ldr	r1, [pc, #36]	@ (8002fcc <HAL_GPIO_Init+0x304>)
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fac:	3301      	adds	r3, #1
 8002fae:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb6:	fa22 f303 	lsr.w	r3, r2, r3
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	f47f ae8e 	bne.w	8002cdc <HAL_GPIO_Init+0x14>
  }
}
 8002fc0:	bf00      	nop
 8002fc2:	bf00      	nop
 8002fc4:	372c      	adds	r7, #44	@ 0x2c
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bc80      	pop	{r7}
 8002fca:	4770      	bx	lr
 8002fcc:	40010400 	.word	0x40010400

08002fd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	460b      	mov	r3, r1
 8002fda:	807b      	strh	r3, [r7, #2]
 8002fdc:	4613      	mov	r3, r2
 8002fde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002fe0:	787b      	ldrb	r3, [r7, #1]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d003      	beq.n	8002fee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fe6:	887a      	ldrh	r2, [r7, #2]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002fec:	e003      	b.n	8002ff6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002fee:	887b      	ldrh	r3, [r7, #2]
 8002ff0:	041a      	lsls	r2, r3, #16
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	611a      	str	r2, [r3, #16]
}
 8002ff6:	bf00      	nop
 8002ff8:	370c      	adds	r7, #12
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bc80      	pop	{r7}
 8002ffe:	4770      	bx	lr

08003000 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b086      	sub	sp, #24
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d101      	bne.n	8003012 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e272      	b.n	80034f8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0301 	and.w	r3, r3, #1
 800301a:	2b00      	cmp	r3, #0
 800301c:	f000 8087 	beq.w	800312e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003020:	4b92      	ldr	r3, [pc, #584]	@ (800326c <HAL_RCC_OscConfig+0x26c>)
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f003 030c 	and.w	r3, r3, #12
 8003028:	2b04      	cmp	r3, #4
 800302a:	d00c      	beq.n	8003046 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800302c:	4b8f      	ldr	r3, [pc, #572]	@ (800326c <HAL_RCC_OscConfig+0x26c>)
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f003 030c 	and.w	r3, r3, #12
 8003034:	2b08      	cmp	r3, #8
 8003036:	d112      	bne.n	800305e <HAL_RCC_OscConfig+0x5e>
 8003038:	4b8c      	ldr	r3, [pc, #560]	@ (800326c <HAL_RCC_OscConfig+0x26c>)
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003040:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003044:	d10b      	bne.n	800305e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003046:	4b89      	ldr	r3, [pc, #548]	@ (800326c <HAL_RCC_OscConfig+0x26c>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d06c      	beq.n	800312c <HAL_RCC_OscConfig+0x12c>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d168      	bne.n	800312c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e24c      	b.n	80034f8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003066:	d106      	bne.n	8003076 <HAL_RCC_OscConfig+0x76>
 8003068:	4b80      	ldr	r3, [pc, #512]	@ (800326c <HAL_RCC_OscConfig+0x26c>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a7f      	ldr	r2, [pc, #508]	@ (800326c <HAL_RCC_OscConfig+0x26c>)
 800306e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003072:	6013      	str	r3, [r2, #0]
 8003074:	e02e      	b.n	80030d4 <HAL_RCC_OscConfig+0xd4>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d10c      	bne.n	8003098 <HAL_RCC_OscConfig+0x98>
 800307e:	4b7b      	ldr	r3, [pc, #492]	@ (800326c <HAL_RCC_OscConfig+0x26c>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a7a      	ldr	r2, [pc, #488]	@ (800326c <HAL_RCC_OscConfig+0x26c>)
 8003084:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003088:	6013      	str	r3, [r2, #0]
 800308a:	4b78      	ldr	r3, [pc, #480]	@ (800326c <HAL_RCC_OscConfig+0x26c>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a77      	ldr	r2, [pc, #476]	@ (800326c <HAL_RCC_OscConfig+0x26c>)
 8003090:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003094:	6013      	str	r3, [r2, #0]
 8003096:	e01d      	b.n	80030d4 <HAL_RCC_OscConfig+0xd4>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80030a0:	d10c      	bne.n	80030bc <HAL_RCC_OscConfig+0xbc>
 80030a2:	4b72      	ldr	r3, [pc, #456]	@ (800326c <HAL_RCC_OscConfig+0x26c>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a71      	ldr	r2, [pc, #452]	@ (800326c <HAL_RCC_OscConfig+0x26c>)
 80030a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80030ac:	6013      	str	r3, [r2, #0]
 80030ae:	4b6f      	ldr	r3, [pc, #444]	@ (800326c <HAL_RCC_OscConfig+0x26c>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a6e      	ldr	r2, [pc, #440]	@ (800326c <HAL_RCC_OscConfig+0x26c>)
 80030b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030b8:	6013      	str	r3, [r2, #0]
 80030ba:	e00b      	b.n	80030d4 <HAL_RCC_OscConfig+0xd4>
 80030bc:	4b6b      	ldr	r3, [pc, #428]	@ (800326c <HAL_RCC_OscConfig+0x26c>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a6a      	ldr	r2, [pc, #424]	@ (800326c <HAL_RCC_OscConfig+0x26c>)
 80030c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030c6:	6013      	str	r3, [r2, #0]
 80030c8:	4b68      	ldr	r3, [pc, #416]	@ (800326c <HAL_RCC_OscConfig+0x26c>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a67      	ldr	r2, [pc, #412]	@ (800326c <HAL_RCC_OscConfig+0x26c>)
 80030ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030d2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d013      	beq.n	8003104 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030dc:	f7ff fa16 	bl	800250c <HAL_GetTick>
 80030e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030e2:	e008      	b.n	80030f6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030e4:	f7ff fa12 	bl	800250c <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	2b64      	cmp	r3, #100	@ 0x64
 80030f0:	d901      	bls.n	80030f6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e200      	b.n	80034f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030f6:	4b5d      	ldr	r3, [pc, #372]	@ (800326c <HAL_RCC_OscConfig+0x26c>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d0f0      	beq.n	80030e4 <HAL_RCC_OscConfig+0xe4>
 8003102:	e014      	b.n	800312e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003104:	f7ff fa02 	bl	800250c <HAL_GetTick>
 8003108:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800310a:	e008      	b.n	800311e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800310c:	f7ff f9fe 	bl	800250c <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	2b64      	cmp	r3, #100	@ 0x64
 8003118:	d901      	bls.n	800311e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e1ec      	b.n	80034f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800311e:	4b53      	ldr	r3, [pc, #332]	@ (800326c <HAL_RCC_OscConfig+0x26c>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d1f0      	bne.n	800310c <HAL_RCC_OscConfig+0x10c>
 800312a:	e000      	b.n	800312e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800312c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0302 	and.w	r3, r3, #2
 8003136:	2b00      	cmp	r3, #0
 8003138:	d063      	beq.n	8003202 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800313a:	4b4c      	ldr	r3, [pc, #304]	@ (800326c <HAL_RCC_OscConfig+0x26c>)
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f003 030c 	and.w	r3, r3, #12
 8003142:	2b00      	cmp	r3, #0
 8003144:	d00b      	beq.n	800315e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003146:	4b49      	ldr	r3, [pc, #292]	@ (800326c <HAL_RCC_OscConfig+0x26c>)
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	f003 030c 	and.w	r3, r3, #12
 800314e:	2b08      	cmp	r3, #8
 8003150:	d11c      	bne.n	800318c <HAL_RCC_OscConfig+0x18c>
 8003152:	4b46      	ldr	r3, [pc, #280]	@ (800326c <HAL_RCC_OscConfig+0x26c>)
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d116      	bne.n	800318c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800315e:	4b43      	ldr	r3, [pc, #268]	@ (800326c <HAL_RCC_OscConfig+0x26c>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0302 	and.w	r3, r3, #2
 8003166:	2b00      	cmp	r3, #0
 8003168:	d005      	beq.n	8003176 <HAL_RCC_OscConfig+0x176>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	691b      	ldr	r3, [r3, #16]
 800316e:	2b01      	cmp	r3, #1
 8003170:	d001      	beq.n	8003176 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e1c0      	b.n	80034f8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003176:	4b3d      	ldr	r3, [pc, #244]	@ (800326c <HAL_RCC_OscConfig+0x26c>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	695b      	ldr	r3, [r3, #20]
 8003182:	00db      	lsls	r3, r3, #3
 8003184:	4939      	ldr	r1, [pc, #228]	@ (800326c <HAL_RCC_OscConfig+0x26c>)
 8003186:	4313      	orrs	r3, r2
 8003188:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800318a:	e03a      	b.n	8003202 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	691b      	ldr	r3, [r3, #16]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d020      	beq.n	80031d6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003194:	4b36      	ldr	r3, [pc, #216]	@ (8003270 <HAL_RCC_OscConfig+0x270>)
 8003196:	2201      	movs	r2, #1
 8003198:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800319a:	f7ff f9b7 	bl	800250c <HAL_GetTick>
 800319e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031a0:	e008      	b.n	80031b4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031a2:	f7ff f9b3 	bl	800250c <HAL_GetTick>
 80031a6:	4602      	mov	r2, r0
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	d901      	bls.n	80031b4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80031b0:	2303      	movs	r3, #3
 80031b2:	e1a1      	b.n	80034f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031b4:	4b2d      	ldr	r3, [pc, #180]	@ (800326c <HAL_RCC_OscConfig+0x26c>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0302 	and.w	r3, r3, #2
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d0f0      	beq.n	80031a2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031c0:	4b2a      	ldr	r3, [pc, #168]	@ (800326c <HAL_RCC_OscConfig+0x26c>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	695b      	ldr	r3, [r3, #20]
 80031cc:	00db      	lsls	r3, r3, #3
 80031ce:	4927      	ldr	r1, [pc, #156]	@ (800326c <HAL_RCC_OscConfig+0x26c>)
 80031d0:	4313      	orrs	r3, r2
 80031d2:	600b      	str	r3, [r1, #0]
 80031d4:	e015      	b.n	8003202 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031d6:	4b26      	ldr	r3, [pc, #152]	@ (8003270 <HAL_RCC_OscConfig+0x270>)
 80031d8:	2200      	movs	r2, #0
 80031da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031dc:	f7ff f996 	bl	800250c <HAL_GetTick>
 80031e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031e2:	e008      	b.n	80031f6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031e4:	f7ff f992 	bl	800250c <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d901      	bls.n	80031f6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e180      	b.n	80034f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031f6:	4b1d      	ldr	r3, [pc, #116]	@ (800326c <HAL_RCC_OscConfig+0x26c>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0302 	and.w	r3, r3, #2
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d1f0      	bne.n	80031e4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0308 	and.w	r3, r3, #8
 800320a:	2b00      	cmp	r3, #0
 800320c:	d03a      	beq.n	8003284 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	699b      	ldr	r3, [r3, #24]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d019      	beq.n	800324a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003216:	4b17      	ldr	r3, [pc, #92]	@ (8003274 <HAL_RCC_OscConfig+0x274>)
 8003218:	2201      	movs	r2, #1
 800321a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800321c:	f7ff f976 	bl	800250c <HAL_GetTick>
 8003220:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003222:	e008      	b.n	8003236 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003224:	f7ff f972 	bl	800250c <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	2b02      	cmp	r3, #2
 8003230:	d901      	bls.n	8003236 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e160      	b.n	80034f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003236:	4b0d      	ldr	r3, [pc, #52]	@ (800326c <HAL_RCC_OscConfig+0x26c>)
 8003238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800323a:	f003 0302 	and.w	r3, r3, #2
 800323e:	2b00      	cmp	r3, #0
 8003240:	d0f0      	beq.n	8003224 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003242:	2001      	movs	r0, #1
 8003244:	f000 face 	bl	80037e4 <RCC_Delay>
 8003248:	e01c      	b.n	8003284 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800324a:	4b0a      	ldr	r3, [pc, #40]	@ (8003274 <HAL_RCC_OscConfig+0x274>)
 800324c:	2200      	movs	r2, #0
 800324e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003250:	f7ff f95c 	bl	800250c <HAL_GetTick>
 8003254:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003256:	e00f      	b.n	8003278 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003258:	f7ff f958 	bl	800250c <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	2b02      	cmp	r3, #2
 8003264:	d908      	bls.n	8003278 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e146      	b.n	80034f8 <HAL_RCC_OscConfig+0x4f8>
 800326a:	bf00      	nop
 800326c:	40021000 	.word	0x40021000
 8003270:	42420000 	.word	0x42420000
 8003274:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003278:	4b92      	ldr	r3, [pc, #584]	@ (80034c4 <HAL_RCC_OscConfig+0x4c4>)
 800327a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800327c:	f003 0302 	and.w	r3, r3, #2
 8003280:	2b00      	cmp	r3, #0
 8003282:	d1e9      	bne.n	8003258 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0304 	and.w	r3, r3, #4
 800328c:	2b00      	cmp	r3, #0
 800328e:	f000 80a6 	beq.w	80033de <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003292:	2300      	movs	r3, #0
 8003294:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003296:	4b8b      	ldr	r3, [pc, #556]	@ (80034c4 <HAL_RCC_OscConfig+0x4c4>)
 8003298:	69db      	ldr	r3, [r3, #28]
 800329a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d10d      	bne.n	80032be <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032a2:	4b88      	ldr	r3, [pc, #544]	@ (80034c4 <HAL_RCC_OscConfig+0x4c4>)
 80032a4:	69db      	ldr	r3, [r3, #28]
 80032a6:	4a87      	ldr	r2, [pc, #540]	@ (80034c4 <HAL_RCC_OscConfig+0x4c4>)
 80032a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032ac:	61d3      	str	r3, [r2, #28]
 80032ae:	4b85      	ldr	r3, [pc, #532]	@ (80034c4 <HAL_RCC_OscConfig+0x4c4>)
 80032b0:	69db      	ldr	r3, [r3, #28]
 80032b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032b6:	60bb      	str	r3, [r7, #8]
 80032b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032ba:	2301      	movs	r3, #1
 80032bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032be:	4b82      	ldr	r3, [pc, #520]	@ (80034c8 <HAL_RCC_OscConfig+0x4c8>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d118      	bne.n	80032fc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032ca:	4b7f      	ldr	r3, [pc, #508]	@ (80034c8 <HAL_RCC_OscConfig+0x4c8>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a7e      	ldr	r2, [pc, #504]	@ (80034c8 <HAL_RCC_OscConfig+0x4c8>)
 80032d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032d6:	f7ff f919 	bl	800250c <HAL_GetTick>
 80032da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032dc:	e008      	b.n	80032f0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032de:	f7ff f915 	bl	800250c <HAL_GetTick>
 80032e2:	4602      	mov	r2, r0
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	2b64      	cmp	r3, #100	@ 0x64
 80032ea:	d901      	bls.n	80032f0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	e103      	b.n	80034f8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032f0:	4b75      	ldr	r3, [pc, #468]	@ (80034c8 <HAL_RCC_OscConfig+0x4c8>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d0f0      	beq.n	80032de <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	2b01      	cmp	r3, #1
 8003302:	d106      	bne.n	8003312 <HAL_RCC_OscConfig+0x312>
 8003304:	4b6f      	ldr	r3, [pc, #444]	@ (80034c4 <HAL_RCC_OscConfig+0x4c4>)
 8003306:	6a1b      	ldr	r3, [r3, #32]
 8003308:	4a6e      	ldr	r2, [pc, #440]	@ (80034c4 <HAL_RCC_OscConfig+0x4c4>)
 800330a:	f043 0301 	orr.w	r3, r3, #1
 800330e:	6213      	str	r3, [r2, #32]
 8003310:	e02d      	b.n	800336e <HAL_RCC_OscConfig+0x36e>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d10c      	bne.n	8003334 <HAL_RCC_OscConfig+0x334>
 800331a:	4b6a      	ldr	r3, [pc, #424]	@ (80034c4 <HAL_RCC_OscConfig+0x4c4>)
 800331c:	6a1b      	ldr	r3, [r3, #32]
 800331e:	4a69      	ldr	r2, [pc, #420]	@ (80034c4 <HAL_RCC_OscConfig+0x4c4>)
 8003320:	f023 0301 	bic.w	r3, r3, #1
 8003324:	6213      	str	r3, [r2, #32]
 8003326:	4b67      	ldr	r3, [pc, #412]	@ (80034c4 <HAL_RCC_OscConfig+0x4c4>)
 8003328:	6a1b      	ldr	r3, [r3, #32]
 800332a:	4a66      	ldr	r2, [pc, #408]	@ (80034c4 <HAL_RCC_OscConfig+0x4c4>)
 800332c:	f023 0304 	bic.w	r3, r3, #4
 8003330:	6213      	str	r3, [r2, #32]
 8003332:	e01c      	b.n	800336e <HAL_RCC_OscConfig+0x36e>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	2b05      	cmp	r3, #5
 800333a:	d10c      	bne.n	8003356 <HAL_RCC_OscConfig+0x356>
 800333c:	4b61      	ldr	r3, [pc, #388]	@ (80034c4 <HAL_RCC_OscConfig+0x4c4>)
 800333e:	6a1b      	ldr	r3, [r3, #32]
 8003340:	4a60      	ldr	r2, [pc, #384]	@ (80034c4 <HAL_RCC_OscConfig+0x4c4>)
 8003342:	f043 0304 	orr.w	r3, r3, #4
 8003346:	6213      	str	r3, [r2, #32]
 8003348:	4b5e      	ldr	r3, [pc, #376]	@ (80034c4 <HAL_RCC_OscConfig+0x4c4>)
 800334a:	6a1b      	ldr	r3, [r3, #32]
 800334c:	4a5d      	ldr	r2, [pc, #372]	@ (80034c4 <HAL_RCC_OscConfig+0x4c4>)
 800334e:	f043 0301 	orr.w	r3, r3, #1
 8003352:	6213      	str	r3, [r2, #32]
 8003354:	e00b      	b.n	800336e <HAL_RCC_OscConfig+0x36e>
 8003356:	4b5b      	ldr	r3, [pc, #364]	@ (80034c4 <HAL_RCC_OscConfig+0x4c4>)
 8003358:	6a1b      	ldr	r3, [r3, #32]
 800335a:	4a5a      	ldr	r2, [pc, #360]	@ (80034c4 <HAL_RCC_OscConfig+0x4c4>)
 800335c:	f023 0301 	bic.w	r3, r3, #1
 8003360:	6213      	str	r3, [r2, #32]
 8003362:	4b58      	ldr	r3, [pc, #352]	@ (80034c4 <HAL_RCC_OscConfig+0x4c4>)
 8003364:	6a1b      	ldr	r3, [r3, #32]
 8003366:	4a57      	ldr	r2, [pc, #348]	@ (80034c4 <HAL_RCC_OscConfig+0x4c4>)
 8003368:	f023 0304 	bic.w	r3, r3, #4
 800336c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d015      	beq.n	80033a2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003376:	f7ff f8c9 	bl	800250c <HAL_GetTick>
 800337a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800337c:	e00a      	b.n	8003394 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800337e:	f7ff f8c5 	bl	800250c <HAL_GetTick>
 8003382:	4602      	mov	r2, r0
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	f241 3288 	movw	r2, #5000	@ 0x1388
 800338c:	4293      	cmp	r3, r2
 800338e:	d901      	bls.n	8003394 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	e0b1      	b.n	80034f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003394:	4b4b      	ldr	r3, [pc, #300]	@ (80034c4 <HAL_RCC_OscConfig+0x4c4>)
 8003396:	6a1b      	ldr	r3, [r3, #32]
 8003398:	f003 0302 	and.w	r3, r3, #2
 800339c:	2b00      	cmp	r3, #0
 800339e:	d0ee      	beq.n	800337e <HAL_RCC_OscConfig+0x37e>
 80033a0:	e014      	b.n	80033cc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033a2:	f7ff f8b3 	bl	800250c <HAL_GetTick>
 80033a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033a8:	e00a      	b.n	80033c0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033aa:	f7ff f8af 	bl	800250c <HAL_GetTick>
 80033ae:	4602      	mov	r2, r0
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d901      	bls.n	80033c0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80033bc:	2303      	movs	r3, #3
 80033be:	e09b      	b.n	80034f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033c0:	4b40      	ldr	r3, [pc, #256]	@ (80034c4 <HAL_RCC_OscConfig+0x4c4>)
 80033c2:	6a1b      	ldr	r3, [r3, #32]
 80033c4:	f003 0302 	and.w	r3, r3, #2
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d1ee      	bne.n	80033aa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80033cc:	7dfb      	ldrb	r3, [r7, #23]
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d105      	bne.n	80033de <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033d2:	4b3c      	ldr	r3, [pc, #240]	@ (80034c4 <HAL_RCC_OscConfig+0x4c4>)
 80033d4:	69db      	ldr	r3, [r3, #28]
 80033d6:	4a3b      	ldr	r2, [pc, #236]	@ (80034c4 <HAL_RCC_OscConfig+0x4c4>)
 80033d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033dc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	69db      	ldr	r3, [r3, #28]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	f000 8087 	beq.w	80034f6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033e8:	4b36      	ldr	r3, [pc, #216]	@ (80034c4 <HAL_RCC_OscConfig+0x4c4>)
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f003 030c 	and.w	r3, r3, #12
 80033f0:	2b08      	cmp	r3, #8
 80033f2:	d061      	beq.n	80034b8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	69db      	ldr	r3, [r3, #28]
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d146      	bne.n	800348a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033fc:	4b33      	ldr	r3, [pc, #204]	@ (80034cc <HAL_RCC_OscConfig+0x4cc>)
 80033fe:	2200      	movs	r2, #0
 8003400:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003402:	f7ff f883 	bl	800250c <HAL_GetTick>
 8003406:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003408:	e008      	b.n	800341c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800340a:	f7ff f87f 	bl	800250c <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	2b02      	cmp	r3, #2
 8003416:	d901      	bls.n	800341c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	e06d      	b.n	80034f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800341c:	4b29      	ldr	r3, [pc, #164]	@ (80034c4 <HAL_RCC_OscConfig+0x4c4>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003424:	2b00      	cmp	r3, #0
 8003426:	d1f0      	bne.n	800340a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6a1b      	ldr	r3, [r3, #32]
 800342c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003430:	d108      	bne.n	8003444 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003432:	4b24      	ldr	r3, [pc, #144]	@ (80034c4 <HAL_RCC_OscConfig+0x4c4>)
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	4921      	ldr	r1, [pc, #132]	@ (80034c4 <HAL_RCC_OscConfig+0x4c4>)
 8003440:	4313      	orrs	r3, r2
 8003442:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003444:	4b1f      	ldr	r3, [pc, #124]	@ (80034c4 <HAL_RCC_OscConfig+0x4c4>)
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6a19      	ldr	r1, [r3, #32]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003454:	430b      	orrs	r3, r1
 8003456:	491b      	ldr	r1, [pc, #108]	@ (80034c4 <HAL_RCC_OscConfig+0x4c4>)
 8003458:	4313      	orrs	r3, r2
 800345a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800345c:	4b1b      	ldr	r3, [pc, #108]	@ (80034cc <HAL_RCC_OscConfig+0x4cc>)
 800345e:	2201      	movs	r2, #1
 8003460:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003462:	f7ff f853 	bl	800250c <HAL_GetTick>
 8003466:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003468:	e008      	b.n	800347c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800346a:	f7ff f84f 	bl	800250c <HAL_GetTick>
 800346e:	4602      	mov	r2, r0
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	2b02      	cmp	r3, #2
 8003476:	d901      	bls.n	800347c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003478:	2303      	movs	r3, #3
 800347a:	e03d      	b.n	80034f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800347c:	4b11      	ldr	r3, [pc, #68]	@ (80034c4 <HAL_RCC_OscConfig+0x4c4>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003484:	2b00      	cmp	r3, #0
 8003486:	d0f0      	beq.n	800346a <HAL_RCC_OscConfig+0x46a>
 8003488:	e035      	b.n	80034f6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800348a:	4b10      	ldr	r3, [pc, #64]	@ (80034cc <HAL_RCC_OscConfig+0x4cc>)
 800348c:	2200      	movs	r2, #0
 800348e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003490:	f7ff f83c 	bl	800250c <HAL_GetTick>
 8003494:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003496:	e008      	b.n	80034aa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003498:	f7ff f838 	bl	800250c <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d901      	bls.n	80034aa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e026      	b.n	80034f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034aa:	4b06      	ldr	r3, [pc, #24]	@ (80034c4 <HAL_RCC_OscConfig+0x4c4>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d1f0      	bne.n	8003498 <HAL_RCC_OscConfig+0x498>
 80034b6:	e01e      	b.n	80034f6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	69db      	ldr	r3, [r3, #28]
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d107      	bne.n	80034d0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e019      	b.n	80034f8 <HAL_RCC_OscConfig+0x4f8>
 80034c4:	40021000 	.word	0x40021000
 80034c8:	40007000 	.word	0x40007000
 80034cc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80034d0:	4b0b      	ldr	r3, [pc, #44]	@ (8003500 <HAL_RCC_OscConfig+0x500>)
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a1b      	ldr	r3, [r3, #32]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d106      	bne.n	80034f2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d001      	beq.n	80034f6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e000      	b.n	80034f8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80034f6:	2300      	movs	r3, #0
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3718      	adds	r7, #24
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	40021000 	.word	0x40021000

08003504 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b084      	sub	sp, #16
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d101      	bne.n	8003518 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e0d0      	b.n	80036ba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003518:	4b6a      	ldr	r3, [pc, #424]	@ (80036c4 <HAL_RCC_ClockConfig+0x1c0>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0307 	and.w	r3, r3, #7
 8003520:	683a      	ldr	r2, [r7, #0]
 8003522:	429a      	cmp	r2, r3
 8003524:	d910      	bls.n	8003548 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003526:	4b67      	ldr	r3, [pc, #412]	@ (80036c4 <HAL_RCC_ClockConfig+0x1c0>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f023 0207 	bic.w	r2, r3, #7
 800352e:	4965      	ldr	r1, [pc, #404]	@ (80036c4 <HAL_RCC_ClockConfig+0x1c0>)
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	4313      	orrs	r3, r2
 8003534:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003536:	4b63      	ldr	r3, [pc, #396]	@ (80036c4 <HAL_RCC_ClockConfig+0x1c0>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0307 	and.w	r3, r3, #7
 800353e:	683a      	ldr	r2, [r7, #0]
 8003540:	429a      	cmp	r2, r3
 8003542:	d001      	beq.n	8003548 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e0b8      	b.n	80036ba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 0302 	and.w	r3, r3, #2
 8003550:	2b00      	cmp	r3, #0
 8003552:	d020      	beq.n	8003596 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0304 	and.w	r3, r3, #4
 800355c:	2b00      	cmp	r3, #0
 800355e:	d005      	beq.n	800356c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003560:	4b59      	ldr	r3, [pc, #356]	@ (80036c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	4a58      	ldr	r2, [pc, #352]	@ (80036c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003566:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800356a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 0308 	and.w	r3, r3, #8
 8003574:	2b00      	cmp	r3, #0
 8003576:	d005      	beq.n	8003584 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003578:	4b53      	ldr	r3, [pc, #332]	@ (80036c8 <HAL_RCC_ClockConfig+0x1c4>)
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	4a52      	ldr	r2, [pc, #328]	@ (80036c8 <HAL_RCC_ClockConfig+0x1c4>)
 800357e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003582:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003584:	4b50      	ldr	r3, [pc, #320]	@ (80036c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	494d      	ldr	r1, [pc, #308]	@ (80036c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003592:	4313      	orrs	r3, r2
 8003594:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0301 	and.w	r3, r3, #1
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d040      	beq.n	8003624 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d107      	bne.n	80035ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035aa:	4b47      	ldr	r3, [pc, #284]	@ (80036c8 <HAL_RCC_ClockConfig+0x1c4>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d115      	bne.n	80035e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e07f      	b.n	80036ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	2b02      	cmp	r3, #2
 80035c0:	d107      	bne.n	80035d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035c2:	4b41      	ldr	r3, [pc, #260]	@ (80036c8 <HAL_RCC_ClockConfig+0x1c4>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d109      	bne.n	80035e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e073      	b.n	80036ba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035d2:	4b3d      	ldr	r3, [pc, #244]	@ (80036c8 <HAL_RCC_ClockConfig+0x1c4>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0302 	and.w	r3, r3, #2
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d101      	bne.n	80035e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e06b      	b.n	80036ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035e2:	4b39      	ldr	r3, [pc, #228]	@ (80036c8 <HAL_RCC_ClockConfig+0x1c4>)
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	f023 0203 	bic.w	r2, r3, #3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	4936      	ldr	r1, [pc, #216]	@ (80036c8 <HAL_RCC_ClockConfig+0x1c4>)
 80035f0:	4313      	orrs	r3, r2
 80035f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035f4:	f7fe ff8a 	bl	800250c <HAL_GetTick>
 80035f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035fa:	e00a      	b.n	8003612 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035fc:	f7fe ff86 	bl	800250c <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	f241 3288 	movw	r2, #5000	@ 0x1388
 800360a:	4293      	cmp	r3, r2
 800360c:	d901      	bls.n	8003612 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e053      	b.n	80036ba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003612:	4b2d      	ldr	r3, [pc, #180]	@ (80036c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	f003 020c 	and.w	r2, r3, #12
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	429a      	cmp	r2, r3
 8003622:	d1eb      	bne.n	80035fc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003624:	4b27      	ldr	r3, [pc, #156]	@ (80036c4 <HAL_RCC_ClockConfig+0x1c0>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 0307 	and.w	r3, r3, #7
 800362c:	683a      	ldr	r2, [r7, #0]
 800362e:	429a      	cmp	r2, r3
 8003630:	d210      	bcs.n	8003654 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003632:	4b24      	ldr	r3, [pc, #144]	@ (80036c4 <HAL_RCC_ClockConfig+0x1c0>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f023 0207 	bic.w	r2, r3, #7
 800363a:	4922      	ldr	r1, [pc, #136]	@ (80036c4 <HAL_RCC_ClockConfig+0x1c0>)
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	4313      	orrs	r3, r2
 8003640:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003642:	4b20      	ldr	r3, [pc, #128]	@ (80036c4 <HAL_RCC_ClockConfig+0x1c0>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0307 	and.w	r3, r3, #7
 800364a:	683a      	ldr	r2, [r7, #0]
 800364c:	429a      	cmp	r2, r3
 800364e:	d001      	beq.n	8003654 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e032      	b.n	80036ba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0304 	and.w	r3, r3, #4
 800365c:	2b00      	cmp	r3, #0
 800365e:	d008      	beq.n	8003672 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003660:	4b19      	ldr	r3, [pc, #100]	@ (80036c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	4916      	ldr	r1, [pc, #88]	@ (80036c8 <HAL_RCC_ClockConfig+0x1c4>)
 800366e:	4313      	orrs	r3, r2
 8003670:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0308 	and.w	r3, r3, #8
 800367a:	2b00      	cmp	r3, #0
 800367c:	d009      	beq.n	8003692 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800367e:	4b12      	ldr	r3, [pc, #72]	@ (80036c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	00db      	lsls	r3, r3, #3
 800368c:	490e      	ldr	r1, [pc, #56]	@ (80036c8 <HAL_RCC_ClockConfig+0x1c4>)
 800368e:	4313      	orrs	r3, r2
 8003690:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003692:	f000 f821 	bl	80036d8 <HAL_RCC_GetSysClockFreq>
 8003696:	4602      	mov	r2, r0
 8003698:	4b0b      	ldr	r3, [pc, #44]	@ (80036c8 <HAL_RCC_ClockConfig+0x1c4>)
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	091b      	lsrs	r3, r3, #4
 800369e:	f003 030f 	and.w	r3, r3, #15
 80036a2:	490a      	ldr	r1, [pc, #40]	@ (80036cc <HAL_RCC_ClockConfig+0x1c8>)
 80036a4:	5ccb      	ldrb	r3, [r1, r3]
 80036a6:	fa22 f303 	lsr.w	r3, r2, r3
 80036aa:	4a09      	ldr	r2, [pc, #36]	@ (80036d0 <HAL_RCC_ClockConfig+0x1cc>)
 80036ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80036ae:	4b09      	ldr	r3, [pc, #36]	@ (80036d4 <HAL_RCC_ClockConfig+0x1d0>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4618      	mov	r0, r3
 80036b4:	f7fe fee8 	bl	8002488 <HAL_InitTick>

  return HAL_OK;
 80036b8:	2300      	movs	r3, #0
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3710      	adds	r7, #16
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	40022000 	.word	0x40022000
 80036c8:	40021000 	.word	0x40021000
 80036cc:	08004d34 	.word	0x08004d34
 80036d0:	20000000 	.word	0x20000000
 80036d4:	20000004 	.word	0x20000004

080036d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036d8:	b480      	push	{r7}
 80036da:	b087      	sub	sp, #28
 80036dc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80036de:	2300      	movs	r3, #0
 80036e0:	60fb      	str	r3, [r7, #12]
 80036e2:	2300      	movs	r3, #0
 80036e4:	60bb      	str	r3, [r7, #8]
 80036e6:	2300      	movs	r3, #0
 80036e8:	617b      	str	r3, [r7, #20]
 80036ea:	2300      	movs	r3, #0
 80036ec:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80036ee:	2300      	movs	r3, #0
 80036f0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80036f2:	4b1e      	ldr	r3, [pc, #120]	@ (800376c <HAL_RCC_GetSysClockFreq+0x94>)
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f003 030c 	and.w	r3, r3, #12
 80036fe:	2b04      	cmp	r3, #4
 8003700:	d002      	beq.n	8003708 <HAL_RCC_GetSysClockFreq+0x30>
 8003702:	2b08      	cmp	r3, #8
 8003704:	d003      	beq.n	800370e <HAL_RCC_GetSysClockFreq+0x36>
 8003706:	e027      	b.n	8003758 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003708:	4b19      	ldr	r3, [pc, #100]	@ (8003770 <HAL_RCC_GetSysClockFreq+0x98>)
 800370a:	613b      	str	r3, [r7, #16]
      break;
 800370c:	e027      	b.n	800375e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	0c9b      	lsrs	r3, r3, #18
 8003712:	f003 030f 	and.w	r3, r3, #15
 8003716:	4a17      	ldr	r2, [pc, #92]	@ (8003774 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003718:	5cd3      	ldrb	r3, [r2, r3]
 800371a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d010      	beq.n	8003748 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003726:	4b11      	ldr	r3, [pc, #68]	@ (800376c <HAL_RCC_GetSysClockFreq+0x94>)
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	0c5b      	lsrs	r3, r3, #17
 800372c:	f003 0301 	and.w	r3, r3, #1
 8003730:	4a11      	ldr	r2, [pc, #68]	@ (8003778 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003732:	5cd3      	ldrb	r3, [r2, r3]
 8003734:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4a0d      	ldr	r2, [pc, #52]	@ (8003770 <HAL_RCC_GetSysClockFreq+0x98>)
 800373a:	fb03 f202 	mul.w	r2, r3, r2
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	fbb2 f3f3 	udiv	r3, r2, r3
 8003744:	617b      	str	r3, [r7, #20]
 8003746:	e004      	b.n	8003752 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	4a0c      	ldr	r2, [pc, #48]	@ (800377c <HAL_RCC_GetSysClockFreq+0xa4>)
 800374c:	fb02 f303 	mul.w	r3, r2, r3
 8003750:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	613b      	str	r3, [r7, #16]
      break;
 8003756:	e002      	b.n	800375e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003758:	4b05      	ldr	r3, [pc, #20]	@ (8003770 <HAL_RCC_GetSysClockFreq+0x98>)
 800375a:	613b      	str	r3, [r7, #16]
      break;
 800375c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800375e:	693b      	ldr	r3, [r7, #16]
}
 8003760:	4618      	mov	r0, r3
 8003762:	371c      	adds	r7, #28
 8003764:	46bd      	mov	sp, r7
 8003766:	bc80      	pop	{r7}
 8003768:	4770      	bx	lr
 800376a:	bf00      	nop
 800376c:	40021000 	.word	0x40021000
 8003770:	007a1200 	.word	0x007a1200
 8003774:	08004d4c 	.word	0x08004d4c
 8003778:	08004d5c 	.word	0x08004d5c
 800377c:	003d0900 	.word	0x003d0900

08003780 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003780:	b480      	push	{r7}
 8003782:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003784:	4b02      	ldr	r3, [pc, #8]	@ (8003790 <HAL_RCC_GetHCLKFreq+0x10>)
 8003786:	681b      	ldr	r3, [r3, #0]
}
 8003788:	4618      	mov	r0, r3
 800378a:	46bd      	mov	sp, r7
 800378c:	bc80      	pop	{r7}
 800378e:	4770      	bx	lr
 8003790:	20000000 	.word	0x20000000

08003794 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003798:	f7ff fff2 	bl	8003780 <HAL_RCC_GetHCLKFreq>
 800379c:	4602      	mov	r2, r0
 800379e:	4b05      	ldr	r3, [pc, #20]	@ (80037b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	0a1b      	lsrs	r3, r3, #8
 80037a4:	f003 0307 	and.w	r3, r3, #7
 80037a8:	4903      	ldr	r1, [pc, #12]	@ (80037b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037aa:	5ccb      	ldrb	r3, [r1, r3]
 80037ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	40021000 	.word	0x40021000
 80037b8:	08004d44 	.word	0x08004d44

080037bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80037c0:	f7ff ffde 	bl	8003780 <HAL_RCC_GetHCLKFreq>
 80037c4:	4602      	mov	r2, r0
 80037c6:	4b05      	ldr	r3, [pc, #20]	@ (80037dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	0adb      	lsrs	r3, r3, #11
 80037cc:	f003 0307 	and.w	r3, r3, #7
 80037d0:	4903      	ldr	r1, [pc, #12]	@ (80037e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037d2:	5ccb      	ldrb	r3, [r1, r3]
 80037d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037d8:	4618      	mov	r0, r3
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	40021000 	.word	0x40021000
 80037e0:	08004d44 	.word	0x08004d44

080037e4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b085      	sub	sp, #20
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80037ec:	4b0a      	ldr	r3, [pc, #40]	@ (8003818 <RCC_Delay+0x34>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a0a      	ldr	r2, [pc, #40]	@ (800381c <RCC_Delay+0x38>)
 80037f2:	fba2 2303 	umull	r2, r3, r2, r3
 80037f6:	0a5b      	lsrs	r3, r3, #9
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	fb02 f303 	mul.w	r3, r2, r3
 80037fe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003800:	bf00      	nop
  }
  while (Delay --);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	1e5a      	subs	r2, r3, #1
 8003806:	60fa      	str	r2, [r7, #12]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d1f9      	bne.n	8003800 <RCC_Delay+0x1c>
}
 800380c:	bf00      	nop
 800380e:	bf00      	nop
 8003810:	3714      	adds	r7, #20
 8003812:	46bd      	mov	sp, r7
 8003814:	bc80      	pop	{r7}
 8003816:	4770      	bx	lr
 8003818:	20000000 	.word	0x20000000
 800381c:	10624dd3 	.word	0x10624dd3

08003820 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b082      	sub	sp, #8
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d101      	bne.n	8003832 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e042      	b.n	80038b8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003838:	b2db      	uxtb	r3, r3
 800383a:	2b00      	cmp	r3, #0
 800383c:	d106      	bne.n	800384c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f7fe fc86 	bl	8002158 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2224      	movs	r2, #36	@ 0x24
 8003850:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	68da      	ldr	r2, [r3, #12]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003862:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f000 ff2f 	bl	80046c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	691a      	ldr	r2, [r3, #16]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003878:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	695a      	ldr	r2, [r3, #20]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003888:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	68da      	ldr	r2, [r3, #12]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003898:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2220      	movs	r2, #32
 80038a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2220      	movs	r2, #32
 80038ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80038b6:	2300      	movs	r3, #0
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3708      	adds	r7, #8
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}

080038c0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b08c      	sub	sp, #48	@ 0x30
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	60f8      	str	r0, [r7, #12]
 80038c8:	60b9      	str	r1, [r7, #8]
 80038ca:	4613      	mov	r3, r2
 80038cc:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	2b20      	cmp	r3, #32
 80038d8:	d156      	bne.n	8003988 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d002      	beq.n	80038e6 <HAL_UART_Transmit_DMA+0x26>
 80038e0:	88fb      	ldrh	r3, [r7, #6]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d101      	bne.n	80038ea <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e04f      	b.n	800398a <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 80038ea:	68ba      	ldr	r2, [r7, #8]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	88fa      	ldrh	r2, [r7, #6]
 80038f4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	88fa      	ldrh	r2, [r7, #6]
 80038fa:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2200      	movs	r2, #0
 8003900:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2221      	movs	r2, #33	@ 0x21
 8003906:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800390e:	4a21      	ldr	r2, [pc, #132]	@ (8003994 <HAL_UART_Transmit_DMA+0xd4>)
 8003910:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003916:	4a20      	ldr	r2, [pc, #128]	@ (8003998 <HAL_UART_Transmit_DMA+0xd8>)
 8003918:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800391e:	4a1f      	ldr	r2, [pc, #124]	@ (800399c <HAL_UART_Transmit_DMA+0xdc>)
 8003920:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003926:	2200      	movs	r2, #0
 8003928:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 800392a:	f107 0308 	add.w	r3, r7, #8
 800392e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003934:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003936:	6819      	ldr	r1, [r3, #0]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	3304      	adds	r3, #4
 800393e:	461a      	mov	r2, r3
 8003940:	88fb      	ldrh	r3, [r7, #6]
 8003942:	f7fe ff79 	bl	8002838 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800394e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	3314      	adds	r3, #20
 8003956:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	e853 3f00 	ldrex	r3, [r3]
 800395e:	617b      	str	r3, [r7, #20]
   return(result);
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003966:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	3314      	adds	r3, #20
 800396e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003970:	627a      	str	r2, [r7, #36]	@ 0x24
 8003972:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003974:	6a39      	ldr	r1, [r7, #32]
 8003976:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003978:	e841 2300 	strex	r3, r2, [r1]
 800397c:	61fb      	str	r3, [r7, #28]
   return(result);
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d1e5      	bne.n	8003950 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8003984:	2300      	movs	r3, #0
 8003986:	e000      	b.n	800398a <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8003988:	2302      	movs	r3, #2
  }
}
 800398a:	4618      	mov	r0, r3
 800398c:	3730      	adds	r7, #48	@ 0x30
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	08003f5d 	.word	0x08003f5d
 8003998:	08003ff7 	.word	0x08003ff7
 800399c:	0800417b 	.word	0x0800417b

080039a0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b084      	sub	sp, #16
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	60f8      	str	r0, [r7, #12]
 80039a8:	60b9      	str	r1, [r7, #8]
 80039aa:	4613      	mov	r3, r2
 80039ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	2b20      	cmp	r3, #32
 80039b8:	d112      	bne.n	80039e0 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d002      	beq.n	80039c6 <HAL_UART_Receive_DMA+0x26>
 80039c0:	88fb      	ldrh	r3, [r7, #6]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d101      	bne.n	80039ca <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e00b      	b.n	80039e2 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2200      	movs	r2, #0
 80039ce:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80039d0:	88fb      	ldrh	r3, [r7, #6]
 80039d2:	461a      	mov	r2, r3
 80039d4:	68b9      	ldr	r1, [r7, #8]
 80039d6:	68f8      	ldr	r0, [r7, #12]
 80039d8:	f000 fc1a 	bl	8004210 <UART_Start_Receive_DMA>
 80039dc:	4603      	mov	r3, r0
 80039de:	e000      	b.n	80039e2 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80039e0:	2302      	movs	r3, #2
  }
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3710      	adds	r7, #16
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}
	...

080039ec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b0ba      	sub	sp, #232	@ 0xe8
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	695b      	ldr	r3, [r3, #20]
 8003a0e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003a12:	2300      	movs	r3, #0
 8003a14:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003a1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a22:	f003 030f 	and.w	r3, r3, #15
 8003a26:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003a2a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d10f      	bne.n	8003a52 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a36:	f003 0320 	and.w	r3, r3, #32
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d009      	beq.n	8003a52 <HAL_UART_IRQHandler+0x66>
 8003a3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a42:	f003 0320 	and.w	r3, r3, #32
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d003      	beq.n	8003a52 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f000 fd7e 	bl	800454c <UART_Receive_IT>
      return;
 8003a50:	e25b      	b.n	8003f0a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003a52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	f000 80de 	beq.w	8003c18 <HAL_UART_IRQHandler+0x22c>
 8003a5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a60:	f003 0301 	and.w	r3, r3, #1
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d106      	bne.n	8003a76 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003a68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a6c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	f000 80d1 	beq.w	8003c18 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003a76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a7a:	f003 0301 	and.w	r3, r3, #1
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d00b      	beq.n	8003a9a <HAL_UART_IRQHandler+0xae>
 8003a82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d005      	beq.n	8003a9a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a92:	f043 0201 	orr.w	r2, r3, #1
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a9e:	f003 0304 	and.w	r3, r3, #4
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d00b      	beq.n	8003abe <HAL_UART_IRQHandler+0xd2>
 8003aa6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003aaa:	f003 0301 	and.w	r3, r3, #1
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d005      	beq.n	8003abe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ab6:	f043 0202 	orr.w	r2, r3, #2
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003abe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ac2:	f003 0302 	and.w	r3, r3, #2
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d00b      	beq.n	8003ae2 <HAL_UART_IRQHandler+0xf6>
 8003aca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ace:	f003 0301 	and.w	r3, r3, #1
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d005      	beq.n	8003ae2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ada:	f043 0204 	orr.w	r2, r3, #4
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003ae2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ae6:	f003 0308 	and.w	r3, r3, #8
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d011      	beq.n	8003b12 <HAL_UART_IRQHandler+0x126>
 8003aee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003af2:	f003 0320 	and.w	r3, r3, #32
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d105      	bne.n	8003b06 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003afa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003afe:	f003 0301 	and.w	r3, r3, #1
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d005      	beq.n	8003b12 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b0a:	f043 0208 	orr.w	r2, r3, #8
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	f000 81f2 	beq.w	8003f00 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b20:	f003 0320 	and.w	r3, r3, #32
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d008      	beq.n	8003b3a <HAL_UART_IRQHandler+0x14e>
 8003b28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b2c:	f003 0320 	and.w	r3, r3, #32
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d002      	beq.n	8003b3a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f000 fd09 	bl	800454c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	695b      	ldr	r3, [r3, #20]
 8003b40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	bf14      	ite	ne
 8003b48:	2301      	movne	r3, #1
 8003b4a:	2300      	moveq	r3, #0
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b56:	f003 0308 	and.w	r3, r3, #8
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d103      	bne.n	8003b66 <HAL_UART_IRQHandler+0x17a>
 8003b5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d04f      	beq.n	8003c06 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f000 fc13 	bl	8004392 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	695b      	ldr	r3, [r3, #20]
 8003b72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d041      	beq.n	8003bfe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	3314      	adds	r3, #20
 8003b80:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b84:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003b88:	e853 3f00 	ldrex	r3, [r3]
 8003b8c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003b90:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003b94:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b98:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	3314      	adds	r3, #20
 8003ba2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003ba6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003baa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003bb2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003bb6:	e841 2300 	strex	r3, r2, [r1]
 8003bba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003bbe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d1d9      	bne.n	8003b7a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d013      	beq.n	8003bf6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bd2:	4a7e      	ldr	r2, [pc, #504]	@ (8003dcc <HAL_UART_IRQHandler+0x3e0>)
 8003bd4:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f7fe fec8 	bl	8002970 <HAL_DMA_Abort_IT>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d016      	beq.n	8003c14 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003bf0:	4610      	mov	r0, r2
 8003bf2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bf4:	e00e      	b.n	8003c14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f000 f99c 	bl	8003f34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bfc:	e00a      	b.n	8003c14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f000 f998 	bl	8003f34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c04:	e006      	b.n	8003c14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f000 f994 	bl	8003f34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003c12:	e175      	b.n	8003f00 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c14:	bf00      	nop
    return;
 8003c16:	e173      	b.n	8003f00 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	f040 814f 	bne.w	8003ec0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003c22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c26:	f003 0310 	and.w	r3, r3, #16
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	f000 8148 	beq.w	8003ec0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003c30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c34:	f003 0310 	and.w	r3, r3, #16
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	f000 8141 	beq.w	8003ec0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c3e:	2300      	movs	r3, #0
 8003c40:	60bb      	str	r3, [r7, #8]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	60bb      	str	r3, [r7, #8]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	60bb      	str	r3, [r7, #8]
 8003c52:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	695b      	ldr	r3, [r3, #20]
 8003c5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	f000 80b6 	beq.w	8003dd0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003c70:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	f000 8145 	beq.w	8003f04 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003c7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003c82:	429a      	cmp	r2, r3
 8003c84:	f080 813e 	bcs.w	8003f04 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003c8e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c94:	699b      	ldr	r3, [r3, #24]
 8003c96:	2b20      	cmp	r3, #32
 8003c98:	f000 8088 	beq.w	8003dac <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	330c      	adds	r3, #12
 8003ca2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003caa:	e853 3f00 	ldrex	r3, [r3]
 8003cae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003cb2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003cb6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003cba:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	330c      	adds	r3, #12
 8003cc4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003cc8:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003ccc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cd0:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003cd4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003cd8:	e841 2300 	strex	r3, r2, [r1]
 8003cdc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003ce0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d1d9      	bne.n	8003c9c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	3314      	adds	r3, #20
 8003cee:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cf0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003cf2:	e853 3f00 	ldrex	r3, [r3]
 8003cf6:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003cf8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003cfa:	f023 0301 	bic.w	r3, r3, #1
 8003cfe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	3314      	adds	r3, #20
 8003d08:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003d0c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003d10:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d12:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003d14:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003d18:	e841 2300 	strex	r3, r2, [r1]
 8003d1c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003d1e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d1e1      	bne.n	8003ce8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	3314      	adds	r3, #20
 8003d2a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d2c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003d2e:	e853 3f00 	ldrex	r3, [r3]
 8003d32:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003d34:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003d36:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d3a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	3314      	adds	r3, #20
 8003d44:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003d48:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003d4a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d4c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003d4e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003d50:	e841 2300 	strex	r3, r2, [r1]
 8003d54:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003d56:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d1e3      	bne.n	8003d24 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2220      	movs	r2, #32
 8003d60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	330c      	adds	r3, #12
 8003d70:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d74:	e853 3f00 	ldrex	r3, [r3]
 8003d78:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003d7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d7c:	f023 0310 	bic.w	r3, r3, #16
 8003d80:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	330c      	adds	r3, #12
 8003d8a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003d8e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003d90:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d92:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003d94:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003d96:	e841 2300 	strex	r3, r2, [r1]
 8003d9a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003d9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d1e3      	bne.n	8003d6a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003da6:	4618      	mov	r0, r3
 8003da8:	f7fe fda6 	bl	80028f8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2202      	movs	r2, #2
 8003db0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	4619      	mov	r1, r3
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f000 f8bf 	bl	8003f46 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003dc8:	e09c      	b.n	8003f04 <HAL_UART_IRQHandler+0x518>
 8003dca:	bf00      	nop
 8003dcc:	08004457 	.word	0x08004457
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	f000 808e 	beq.w	8003f08 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003dec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	f000 8089 	beq.w	8003f08 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	330c      	adds	r3, #12
 8003dfc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e00:	e853 3f00 	ldrex	r3, [r3]
 8003e04:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003e06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e08:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e0c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	330c      	adds	r3, #12
 8003e16:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003e1a:	647a      	str	r2, [r7, #68]	@ 0x44
 8003e1c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e1e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003e20:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003e22:	e841 2300 	strex	r3, r2, [r1]
 8003e26:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003e28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d1e3      	bne.n	8003df6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	3314      	adds	r3, #20
 8003e34:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e38:	e853 3f00 	ldrex	r3, [r3]
 8003e3c:	623b      	str	r3, [r7, #32]
   return(result);
 8003e3e:	6a3b      	ldr	r3, [r7, #32]
 8003e40:	f023 0301 	bic.w	r3, r3, #1
 8003e44:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	3314      	adds	r3, #20
 8003e4e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003e52:	633a      	str	r2, [r7, #48]	@ 0x30
 8003e54:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e56:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003e58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e5a:	e841 2300 	strex	r3, r2, [r1]
 8003e5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003e60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d1e3      	bne.n	8003e2e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2220      	movs	r2, #32
 8003e6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	330c      	adds	r3, #12
 8003e7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	e853 3f00 	ldrex	r3, [r3]
 8003e82:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f023 0310 	bic.w	r3, r3, #16
 8003e8a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	330c      	adds	r3, #12
 8003e94:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003e98:	61fa      	str	r2, [r7, #28]
 8003e9a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e9c:	69b9      	ldr	r1, [r7, #24]
 8003e9e:	69fa      	ldr	r2, [r7, #28]
 8003ea0:	e841 2300 	strex	r3, r2, [r1]
 8003ea4:	617b      	str	r3, [r7, #20]
   return(result);
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d1e3      	bne.n	8003e74 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2202      	movs	r2, #2
 8003eb0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003eb2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003eb6:	4619      	mov	r1, r3
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f000 f844 	bl	8003f46 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003ebe:	e023      	b.n	8003f08 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003ec0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ec4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d009      	beq.n	8003ee0 <HAL_UART_IRQHandler+0x4f4>
 8003ecc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ed0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d003      	beq.n	8003ee0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	f000 fad0 	bl	800447e <UART_Transmit_IT>
    return;
 8003ede:	e014      	b.n	8003f0a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003ee0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ee4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d00e      	beq.n	8003f0a <HAL_UART_IRQHandler+0x51e>
 8003eec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ef0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d008      	beq.n	8003f0a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f000 fb0f 	bl	800451c <UART_EndTransmit_IT>
    return;
 8003efe:	e004      	b.n	8003f0a <HAL_UART_IRQHandler+0x51e>
    return;
 8003f00:	bf00      	nop
 8003f02:	e002      	b.n	8003f0a <HAL_UART_IRQHandler+0x51e>
      return;
 8003f04:	bf00      	nop
 8003f06:	e000      	b.n	8003f0a <HAL_UART_IRQHandler+0x51e>
      return;
 8003f08:	bf00      	nop
  }
}
 8003f0a:	37e8      	adds	r7, #232	@ 0xe8
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}

08003f10 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b083      	sub	sp, #12
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003f18:	bf00      	nop
 8003f1a:	370c      	adds	r7, #12
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bc80      	pop	{r7}
 8003f20:	4770      	bx	lr

08003f22 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003f22:	b480      	push	{r7}
 8003f24:	b083      	sub	sp, #12
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003f2a:	bf00      	nop
 8003f2c:	370c      	adds	r7, #12
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bc80      	pop	{r7}
 8003f32:	4770      	bx	lr

08003f34 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003f3c:	bf00      	nop
 8003f3e:	370c      	adds	r7, #12
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bc80      	pop	{r7}
 8003f44:	4770      	bx	lr

08003f46 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003f46:	b480      	push	{r7}
 8003f48:	b083      	sub	sp, #12
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	6078      	str	r0, [r7, #4]
 8003f4e:	460b      	mov	r3, r1
 8003f50:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003f52:	bf00      	nop
 8003f54:	370c      	adds	r7, #12
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bc80      	pop	{r7}
 8003f5a:	4770      	bx	lr

08003f5c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b090      	sub	sp, #64	@ 0x40
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f68:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0320 	and.w	r3, r3, #32
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d137      	bne.n	8003fe8 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8003f78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003f7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	3314      	adds	r3, #20
 8003f84:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f88:	e853 3f00 	ldrex	r3, [r3]
 8003f8c:	623b      	str	r3, [r7, #32]
   return(result);
 8003f8e:	6a3b      	ldr	r3, [r7, #32]
 8003f90:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f94:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003f96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	3314      	adds	r3, #20
 8003f9c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003f9e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003fa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fa2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003fa4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003fa6:	e841 2300 	strex	r3, r2, [r1]
 8003faa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003fac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d1e5      	bne.n	8003f7e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003fb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	330c      	adds	r3, #12
 8003fb8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	e853 3f00 	ldrex	r3, [r3]
 8003fc0:	60fb      	str	r3, [r7, #12]
   return(result);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003fc8:	637b      	str	r3, [r7, #52]	@ 0x34
 8003fca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	330c      	adds	r3, #12
 8003fd0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003fd2:	61fa      	str	r2, [r7, #28]
 8003fd4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd6:	69b9      	ldr	r1, [r7, #24]
 8003fd8:	69fa      	ldr	r2, [r7, #28]
 8003fda:	e841 2300 	strex	r3, r2, [r1]
 8003fde:	617b      	str	r3, [r7, #20]
   return(result);
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d1e5      	bne.n	8003fb2 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003fe6:	e002      	b.n	8003fee <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8003fe8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8003fea:	f7fd fae1 	bl	80015b0 <HAL_UART_TxCpltCallback>
}
 8003fee:	bf00      	nop
 8003ff0:	3740      	adds	r7, #64	@ 0x40
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}

08003ff6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003ff6:	b580      	push	{r7, lr}
 8003ff8:	b084      	sub	sp, #16
 8003ffa:	af00      	add	r7, sp, #0
 8003ffc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004002:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004004:	68f8      	ldr	r0, [r7, #12]
 8004006:	f7ff ff83 	bl	8003f10 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800400a:	bf00      	nop
 800400c:	3710      	adds	r7, #16
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}

08004012 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004012:	b580      	push	{r7, lr}
 8004014:	b09c      	sub	sp, #112	@ 0x70
 8004016:	af00      	add	r7, sp, #0
 8004018:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800401e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0320 	and.w	r3, r3, #32
 800402a:	2b00      	cmp	r3, #0
 800402c:	d172      	bne.n	8004114 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800402e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004030:	2200      	movs	r2, #0
 8004032:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004034:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	330c      	adds	r3, #12
 800403a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800403c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800403e:	e853 3f00 	ldrex	r3, [r3]
 8004042:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004044:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004046:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800404a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800404c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	330c      	adds	r3, #12
 8004052:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004054:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004056:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004058:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800405a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800405c:	e841 2300 	strex	r3, r2, [r1]
 8004060:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004062:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004064:	2b00      	cmp	r3, #0
 8004066:	d1e5      	bne.n	8004034 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004068:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	3314      	adds	r3, #20
 800406e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004070:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004072:	e853 3f00 	ldrex	r3, [r3]
 8004076:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004078:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800407a:	f023 0301 	bic.w	r3, r3, #1
 800407e:	667b      	str	r3, [r7, #100]	@ 0x64
 8004080:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	3314      	adds	r3, #20
 8004086:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004088:	647a      	str	r2, [r7, #68]	@ 0x44
 800408a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800408c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800408e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004090:	e841 2300 	strex	r3, r2, [r1]
 8004094:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004096:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004098:	2b00      	cmp	r3, #0
 800409a:	d1e5      	bne.n	8004068 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800409c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	3314      	adds	r3, #20
 80040a2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040a6:	e853 3f00 	ldrex	r3, [r3]
 80040aa:	623b      	str	r3, [r7, #32]
   return(result);
 80040ac:	6a3b      	ldr	r3, [r7, #32]
 80040ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80040b2:	663b      	str	r3, [r7, #96]	@ 0x60
 80040b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	3314      	adds	r3, #20
 80040ba:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80040bc:	633a      	str	r2, [r7, #48]	@ 0x30
 80040be:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040c0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80040c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040c4:	e841 2300 	strex	r3, r2, [r1]
 80040c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80040ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d1e5      	bne.n	800409c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80040d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80040d2:	2220      	movs	r2, #32
 80040d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80040da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d119      	bne.n	8004114 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	330c      	adds	r3, #12
 80040e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	e853 3f00 	ldrex	r3, [r3]
 80040ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f023 0310 	bic.w	r3, r3, #16
 80040f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80040f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	330c      	adds	r3, #12
 80040fe:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004100:	61fa      	str	r2, [r7, #28]
 8004102:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004104:	69b9      	ldr	r1, [r7, #24]
 8004106:	69fa      	ldr	r2, [r7, #28]
 8004108:	e841 2300 	strex	r3, r2, [r1]
 800410c:	617b      	str	r3, [r7, #20]
   return(result);
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d1e5      	bne.n	80040e0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004114:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004116:	2200      	movs	r2, #0
 8004118:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800411a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800411c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800411e:	2b01      	cmp	r3, #1
 8004120:	d106      	bne.n	8004130 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004122:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004124:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004126:	4619      	mov	r1, r3
 8004128:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800412a:	f7ff ff0c 	bl	8003f46 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800412e:	e002      	b.n	8004136 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8004130:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004132:	f7fd fa4b 	bl	80015cc <HAL_UART_RxCpltCallback>
}
 8004136:	bf00      	nop
 8004138:	3770      	adds	r7, #112	@ 0x70
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}

0800413e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800413e:	b580      	push	{r7, lr}
 8004140:	b084      	sub	sp, #16
 8004142:	af00      	add	r7, sp, #0
 8004144:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800414a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2201      	movs	r2, #1
 8004150:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004156:	2b01      	cmp	r3, #1
 8004158:	d108      	bne.n	800416c <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800415e:	085b      	lsrs	r3, r3, #1
 8004160:	b29b      	uxth	r3, r3
 8004162:	4619      	mov	r1, r3
 8004164:	68f8      	ldr	r0, [r7, #12]
 8004166:	f7ff feee 	bl	8003f46 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800416a:	e002      	b.n	8004172 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800416c:	68f8      	ldr	r0, [r7, #12]
 800416e:	f7ff fed8 	bl	8003f22 <HAL_UART_RxHalfCpltCallback>
}
 8004172:	bf00      	nop
 8004174:	3710      	adds	r7, #16
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}

0800417a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800417a:	b580      	push	{r7, lr}
 800417c:	b084      	sub	sp, #16
 800417e:	af00      	add	r7, sp, #0
 8004180:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004182:	2300      	movs	r3, #0
 8004184:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800418a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	695b      	ldr	r3, [r3, #20]
 8004192:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004196:	2b00      	cmp	r3, #0
 8004198:	bf14      	ite	ne
 800419a:	2301      	movne	r3, #1
 800419c:	2300      	moveq	r3, #0
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	2b21      	cmp	r3, #33	@ 0x21
 80041ac:	d108      	bne.n	80041c0 <UART_DMAError+0x46>
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d005      	beq.n	80041c0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	2200      	movs	r2, #0
 80041b8:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80041ba:	68b8      	ldr	r0, [r7, #8]
 80041bc:	f000 f8c2 	bl	8004344 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	695b      	ldr	r3, [r3, #20]
 80041c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	bf14      	ite	ne
 80041ce:	2301      	movne	r3, #1
 80041d0:	2300      	moveq	r3, #0
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	2b22      	cmp	r3, #34	@ 0x22
 80041e0:	d108      	bne.n	80041f4 <UART_DMAError+0x7a>
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d005      	beq.n	80041f4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	2200      	movs	r2, #0
 80041ec:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80041ee:	68b8      	ldr	r0, [r7, #8]
 80041f0:	f000 f8cf 	bl	8004392 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041f8:	f043 0210 	orr.w	r2, r3, #16
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004200:	68b8      	ldr	r0, [r7, #8]
 8004202:	f7ff fe97 	bl	8003f34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004206:	bf00      	nop
 8004208:	3710      	adds	r7, #16
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
	...

08004210 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b098      	sub	sp, #96	@ 0x60
 8004214:	af00      	add	r7, sp, #0
 8004216:	60f8      	str	r0, [r7, #12]
 8004218:	60b9      	str	r1, [r7, #8]
 800421a:	4613      	mov	r3, r2
 800421c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800421e:	68ba      	ldr	r2, [r7, #8]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	88fa      	ldrh	r2, [r7, #6]
 8004228:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2200      	movs	r2, #0
 800422e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2222      	movs	r2, #34	@ 0x22
 8004234:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800423c:	4a3e      	ldr	r2, [pc, #248]	@ (8004338 <UART_Start_Receive_DMA+0x128>)
 800423e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004244:	4a3d      	ldr	r2, [pc, #244]	@ (800433c <UART_Start_Receive_DMA+0x12c>)
 8004246:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800424c:	4a3c      	ldr	r2, [pc, #240]	@ (8004340 <UART_Start_Receive_DMA+0x130>)
 800424e:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004254:	2200      	movs	r2, #0
 8004256:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004258:	f107 0308 	add.w	r3, r7, #8
 800425c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	3304      	adds	r3, #4
 8004268:	4619      	mov	r1, r3
 800426a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	88fb      	ldrh	r3, [r7, #6]
 8004270:	f7fe fae2 	bl	8002838 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004274:	2300      	movs	r3, #0
 8004276:	613b      	str	r3, [r7, #16]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	613b      	str	r3, [r7, #16]
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	613b      	str	r3, [r7, #16]
 8004288:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	691b      	ldr	r3, [r3, #16]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d019      	beq.n	80042c6 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	330c      	adds	r3, #12
 8004298:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800429a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800429c:	e853 3f00 	ldrex	r3, [r3]
 80042a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80042a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042a8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	330c      	adds	r3, #12
 80042b0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80042b2:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80042b4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80042b8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80042ba:	e841 2300 	strex	r3, r2, [r1]
 80042be:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80042c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d1e5      	bne.n	8004292 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	3314      	adds	r3, #20
 80042cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042d0:	e853 3f00 	ldrex	r3, [r3]
 80042d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80042d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042d8:	f043 0301 	orr.w	r3, r3, #1
 80042dc:	657b      	str	r3, [r7, #84]	@ 0x54
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	3314      	adds	r3, #20
 80042e4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80042e6:	63ba      	str	r2, [r7, #56]	@ 0x38
 80042e8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ea:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80042ec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80042ee:	e841 2300 	strex	r3, r2, [r1]
 80042f2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80042f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d1e5      	bne.n	80042c6 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	3314      	adds	r3, #20
 8004300:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004302:	69bb      	ldr	r3, [r7, #24]
 8004304:	e853 3f00 	ldrex	r3, [r3]
 8004308:	617b      	str	r3, [r7, #20]
   return(result);
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004310:	653b      	str	r3, [r7, #80]	@ 0x50
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	3314      	adds	r3, #20
 8004318:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800431a:	627a      	str	r2, [r7, #36]	@ 0x24
 800431c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800431e:	6a39      	ldr	r1, [r7, #32]
 8004320:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004322:	e841 2300 	strex	r3, r2, [r1]
 8004326:	61fb      	str	r3, [r7, #28]
   return(result);
 8004328:	69fb      	ldr	r3, [r7, #28]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d1e5      	bne.n	80042fa <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800432e:	2300      	movs	r3, #0
}
 8004330:	4618      	mov	r0, r3
 8004332:	3760      	adds	r7, #96	@ 0x60
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}
 8004338:	08004013 	.word	0x08004013
 800433c:	0800413f 	.word	0x0800413f
 8004340:	0800417b 	.word	0x0800417b

08004344 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004344:	b480      	push	{r7}
 8004346:	b089      	sub	sp, #36	@ 0x24
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	330c      	adds	r3, #12
 8004352:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	e853 3f00 	ldrex	r3, [r3]
 800435a:	60bb      	str	r3, [r7, #8]
   return(result);
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004362:	61fb      	str	r3, [r7, #28]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	330c      	adds	r3, #12
 800436a:	69fa      	ldr	r2, [r7, #28]
 800436c:	61ba      	str	r2, [r7, #24]
 800436e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004370:	6979      	ldr	r1, [r7, #20]
 8004372:	69ba      	ldr	r2, [r7, #24]
 8004374:	e841 2300 	strex	r3, r2, [r1]
 8004378:	613b      	str	r3, [r7, #16]
   return(result);
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d1e5      	bne.n	800434c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2220      	movs	r2, #32
 8004384:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8004388:	bf00      	nop
 800438a:	3724      	adds	r7, #36	@ 0x24
 800438c:	46bd      	mov	sp, r7
 800438e:	bc80      	pop	{r7}
 8004390:	4770      	bx	lr

08004392 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004392:	b480      	push	{r7}
 8004394:	b095      	sub	sp, #84	@ 0x54
 8004396:	af00      	add	r7, sp, #0
 8004398:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	330c      	adds	r3, #12
 80043a0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043a4:	e853 3f00 	ldrex	r3, [r3]
 80043a8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80043aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80043b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	330c      	adds	r3, #12
 80043b8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80043ba:	643a      	str	r2, [r7, #64]	@ 0x40
 80043bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043be:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80043c0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80043c2:	e841 2300 	strex	r3, r2, [r1]
 80043c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80043c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d1e5      	bne.n	800439a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	3314      	adds	r3, #20
 80043d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d6:	6a3b      	ldr	r3, [r7, #32]
 80043d8:	e853 3f00 	ldrex	r3, [r3]
 80043dc:	61fb      	str	r3, [r7, #28]
   return(result);
 80043de:	69fb      	ldr	r3, [r7, #28]
 80043e0:	f023 0301 	bic.w	r3, r3, #1
 80043e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	3314      	adds	r3, #20
 80043ec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80043ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80043f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80043f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80043f6:	e841 2300 	strex	r3, r2, [r1]
 80043fa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80043fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d1e5      	bne.n	80043ce <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004406:	2b01      	cmp	r3, #1
 8004408:	d119      	bne.n	800443e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	330c      	adds	r3, #12
 8004410:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	e853 3f00 	ldrex	r3, [r3]
 8004418:	60bb      	str	r3, [r7, #8]
   return(result);
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	f023 0310 	bic.w	r3, r3, #16
 8004420:	647b      	str	r3, [r7, #68]	@ 0x44
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	330c      	adds	r3, #12
 8004428:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800442a:	61ba      	str	r2, [r7, #24]
 800442c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800442e:	6979      	ldr	r1, [r7, #20]
 8004430:	69ba      	ldr	r2, [r7, #24]
 8004432:	e841 2300 	strex	r3, r2, [r1]
 8004436:	613b      	str	r3, [r7, #16]
   return(result);
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d1e5      	bne.n	800440a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2220      	movs	r2, #32
 8004442:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2200      	movs	r2, #0
 800444a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800444c:	bf00      	nop
 800444e:	3754      	adds	r7, #84	@ 0x54
 8004450:	46bd      	mov	sp, r7
 8004452:	bc80      	pop	{r7}
 8004454:	4770      	bx	lr

08004456 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004456:	b580      	push	{r7, lr}
 8004458:	b084      	sub	sp, #16
 800445a:	af00      	add	r7, sp, #0
 800445c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004462:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2200      	movs	r2, #0
 8004468:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2200      	movs	r2, #0
 800446e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004470:	68f8      	ldr	r0, [r7, #12]
 8004472:	f7ff fd5f 	bl	8003f34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004476:	bf00      	nop
 8004478:	3710      	adds	r7, #16
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}

0800447e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800447e:	b480      	push	{r7}
 8004480:	b085      	sub	sp, #20
 8004482:	af00      	add	r7, sp, #0
 8004484:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800448c:	b2db      	uxtb	r3, r3
 800448e:	2b21      	cmp	r3, #33	@ 0x21
 8004490:	d13e      	bne.n	8004510 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800449a:	d114      	bne.n	80044c6 <UART_Transmit_IT+0x48>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	691b      	ldr	r3, [r3, #16]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d110      	bne.n	80044c6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6a1b      	ldr	r3, [r3, #32]
 80044a8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	881b      	ldrh	r3, [r3, #0]
 80044ae:	461a      	mov	r2, r3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044b8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6a1b      	ldr	r3, [r3, #32]
 80044be:	1c9a      	adds	r2, r3, #2
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	621a      	str	r2, [r3, #32]
 80044c4:	e008      	b.n	80044d8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6a1b      	ldr	r3, [r3, #32]
 80044ca:	1c59      	adds	r1, r3, #1
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	6211      	str	r1, [r2, #32]
 80044d0:	781a      	ldrb	r2, [r3, #0]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80044dc:	b29b      	uxth	r3, r3
 80044de:	3b01      	subs	r3, #1
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	4619      	mov	r1, r3
 80044e6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d10f      	bne.n	800450c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	68da      	ldr	r2, [r3, #12]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80044fa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	68da      	ldr	r2, [r3, #12]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800450a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800450c:	2300      	movs	r3, #0
 800450e:	e000      	b.n	8004512 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004510:	2302      	movs	r3, #2
  }
}
 8004512:	4618      	mov	r0, r3
 8004514:	3714      	adds	r7, #20
 8004516:	46bd      	mov	sp, r7
 8004518:	bc80      	pop	{r7}
 800451a:	4770      	bx	lr

0800451c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b082      	sub	sp, #8
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	68da      	ldr	r2, [r3, #12]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004532:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2220      	movs	r2, #32
 8004538:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f7fd f837 	bl	80015b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004542:	2300      	movs	r3, #0
}
 8004544:	4618      	mov	r0, r3
 8004546:	3708      	adds	r7, #8
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}

0800454c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b08c      	sub	sp, #48	@ 0x30
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800455a:	b2db      	uxtb	r3, r3
 800455c:	2b22      	cmp	r3, #34	@ 0x22
 800455e:	f040 80ae 	bne.w	80046be <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800456a:	d117      	bne.n	800459c <UART_Receive_IT+0x50>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	691b      	ldr	r3, [r3, #16]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d113      	bne.n	800459c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004574:	2300      	movs	r3, #0
 8004576:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800457c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	b29b      	uxth	r3, r3
 8004586:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800458a:	b29a      	uxth	r2, r3
 800458c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800458e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004594:	1c9a      	adds	r2, r3, #2
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	629a      	str	r2, [r3, #40]	@ 0x28
 800459a:	e026      	b.n	80045ea <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80045a2:	2300      	movs	r3, #0
 80045a4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045ae:	d007      	beq.n	80045c0 <UART_Receive_IT+0x74>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d10a      	bne.n	80045ce <UART_Receive_IT+0x82>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	691b      	ldr	r3, [r3, #16]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d106      	bne.n	80045ce <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	b2da      	uxtb	r2, r3
 80045c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045ca:	701a      	strb	r2, [r3, #0]
 80045cc:	e008      	b.n	80045e0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80045da:	b2da      	uxtb	r2, r3
 80045dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045de:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045e4:	1c5a      	adds	r2, r3, #1
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	3b01      	subs	r3, #1
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	4619      	mov	r1, r3
 80045f8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d15d      	bne.n	80046ba <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	68da      	ldr	r2, [r3, #12]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f022 0220 	bic.w	r2, r2, #32
 800460c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	68da      	ldr	r2, [r3, #12]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800461c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	695a      	ldr	r2, [r3, #20]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f022 0201 	bic.w	r2, r2, #1
 800462c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2220      	movs	r2, #32
 8004632:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2200      	movs	r2, #0
 800463a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004640:	2b01      	cmp	r3, #1
 8004642:	d135      	bne.n	80046b0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	330c      	adds	r3, #12
 8004650:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	e853 3f00 	ldrex	r3, [r3]
 8004658:	613b      	str	r3, [r7, #16]
   return(result);
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	f023 0310 	bic.w	r3, r3, #16
 8004660:	627b      	str	r3, [r7, #36]	@ 0x24
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	330c      	adds	r3, #12
 8004668:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800466a:	623a      	str	r2, [r7, #32]
 800466c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800466e:	69f9      	ldr	r1, [r7, #28]
 8004670:	6a3a      	ldr	r2, [r7, #32]
 8004672:	e841 2300 	strex	r3, r2, [r1]
 8004676:	61bb      	str	r3, [r7, #24]
   return(result);
 8004678:	69bb      	ldr	r3, [r7, #24]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d1e5      	bne.n	800464a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 0310 	and.w	r3, r3, #16
 8004688:	2b10      	cmp	r3, #16
 800468a:	d10a      	bne.n	80046a2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800468c:	2300      	movs	r3, #0
 800468e:	60fb      	str	r3, [r7, #12]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	60fb      	str	r3, [r7, #12]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	60fb      	str	r3, [r7, #12]
 80046a0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80046a6:	4619      	mov	r1, r3
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f7ff fc4c 	bl	8003f46 <HAL_UARTEx_RxEventCallback>
 80046ae:	e002      	b.n	80046b6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f7fc ff8b 	bl	80015cc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80046b6:	2300      	movs	r3, #0
 80046b8:	e002      	b.n	80046c0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80046ba:	2300      	movs	r3, #0
 80046bc:	e000      	b.n	80046c0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80046be:	2302      	movs	r3, #2
  }
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3730      	adds	r7, #48	@ 0x30
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}

080046c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b084      	sub	sp, #16
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	691b      	ldr	r3, [r3, #16]
 80046d6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	68da      	ldr	r2, [r3, #12]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	430a      	orrs	r2, r1
 80046e4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	689a      	ldr	r2, [r3, #8]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	691b      	ldr	r3, [r3, #16]
 80046ee:	431a      	orrs	r2, r3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	695b      	ldr	r3, [r3, #20]
 80046f4:	4313      	orrs	r3, r2
 80046f6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004702:	f023 030c 	bic.w	r3, r3, #12
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	6812      	ldr	r2, [r2, #0]
 800470a:	68b9      	ldr	r1, [r7, #8]
 800470c:	430b      	orrs	r3, r1
 800470e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	695b      	ldr	r3, [r3, #20]
 8004716:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	699a      	ldr	r2, [r3, #24]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	430a      	orrs	r2, r1
 8004724:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a2c      	ldr	r2, [pc, #176]	@ (80047dc <UART_SetConfig+0x114>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d103      	bne.n	8004738 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004730:	f7ff f844 	bl	80037bc <HAL_RCC_GetPCLK2Freq>
 8004734:	60f8      	str	r0, [r7, #12]
 8004736:	e002      	b.n	800473e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004738:	f7ff f82c 	bl	8003794 <HAL_RCC_GetPCLK1Freq>
 800473c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800473e:	68fa      	ldr	r2, [r7, #12]
 8004740:	4613      	mov	r3, r2
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	4413      	add	r3, r2
 8004746:	009a      	lsls	r2, r3, #2
 8004748:	441a      	add	r2, r3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	fbb2 f3f3 	udiv	r3, r2, r3
 8004754:	4a22      	ldr	r2, [pc, #136]	@ (80047e0 <UART_SetConfig+0x118>)
 8004756:	fba2 2303 	umull	r2, r3, r2, r3
 800475a:	095b      	lsrs	r3, r3, #5
 800475c:	0119      	lsls	r1, r3, #4
 800475e:	68fa      	ldr	r2, [r7, #12]
 8004760:	4613      	mov	r3, r2
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	4413      	add	r3, r2
 8004766:	009a      	lsls	r2, r3, #2
 8004768:	441a      	add	r2, r3
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	fbb2 f2f3 	udiv	r2, r2, r3
 8004774:	4b1a      	ldr	r3, [pc, #104]	@ (80047e0 <UART_SetConfig+0x118>)
 8004776:	fba3 0302 	umull	r0, r3, r3, r2
 800477a:	095b      	lsrs	r3, r3, #5
 800477c:	2064      	movs	r0, #100	@ 0x64
 800477e:	fb00 f303 	mul.w	r3, r0, r3
 8004782:	1ad3      	subs	r3, r2, r3
 8004784:	011b      	lsls	r3, r3, #4
 8004786:	3332      	adds	r3, #50	@ 0x32
 8004788:	4a15      	ldr	r2, [pc, #84]	@ (80047e0 <UART_SetConfig+0x118>)
 800478a:	fba2 2303 	umull	r2, r3, r2, r3
 800478e:	095b      	lsrs	r3, r3, #5
 8004790:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004794:	4419      	add	r1, r3
 8004796:	68fa      	ldr	r2, [r7, #12]
 8004798:	4613      	mov	r3, r2
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	4413      	add	r3, r2
 800479e:	009a      	lsls	r2, r3, #2
 80047a0:	441a      	add	r2, r3
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80047ac:	4b0c      	ldr	r3, [pc, #48]	@ (80047e0 <UART_SetConfig+0x118>)
 80047ae:	fba3 0302 	umull	r0, r3, r3, r2
 80047b2:	095b      	lsrs	r3, r3, #5
 80047b4:	2064      	movs	r0, #100	@ 0x64
 80047b6:	fb00 f303 	mul.w	r3, r0, r3
 80047ba:	1ad3      	subs	r3, r2, r3
 80047bc:	011b      	lsls	r3, r3, #4
 80047be:	3332      	adds	r3, #50	@ 0x32
 80047c0:	4a07      	ldr	r2, [pc, #28]	@ (80047e0 <UART_SetConfig+0x118>)
 80047c2:	fba2 2303 	umull	r2, r3, r2, r3
 80047c6:	095b      	lsrs	r3, r3, #5
 80047c8:	f003 020f 	and.w	r2, r3, #15
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	440a      	add	r2, r1
 80047d2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80047d4:	bf00      	nop
 80047d6:	3710      	adds	r7, #16
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}
 80047dc:	40013800 	.word	0x40013800
 80047e0:	51eb851f 	.word	0x51eb851f

080047e4 <realloc>:
 80047e4:	4b02      	ldr	r3, [pc, #8]	@ (80047f0 <realloc+0xc>)
 80047e6:	460a      	mov	r2, r1
 80047e8:	4601      	mov	r1, r0
 80047ea:	6818      	ldr	r0, [r3, #0]
 80047ec:	f000 b802 	b.w	80047f4 <_realloc_r>
 80047f0:	2000000c 	.word	0x2000000c

080047f4 <_realloc_r>:
 80047f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047f8:	4680      	mov	r8, r0
 80047fa:	4615      	mov	r5, r2
 80047fc:	460c      	mov	r4, r1
 80047fe:	b921      	cbnz	r1, 800480a <_realloc_r+0x16>
 8004800:	4611      	mov	r1, r2
 8004802:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004806:	f000 b8cf 	b.w	80049a8 <_malloc_r>
 800480a:	b92a      	cbnz	r2, 8004818 <_realloc_r+0x24>
 800480c:	f000 f862 	bl	80048d4 <_free_r>
 8004810:	2400      	movs	r4, #0
 8004812:	4620      	mov	r0, r4
 8004814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004818:	f000 f952 	bl	8004ac0 <_malloc_usable_size_r>
 800481c:	4285      	cmp	r5, r0
 800481e:	4606      	mov	r6, r0
 8004820:	d802      	bhi.n	8004828 <_realloc_r+0x34>
 8004822:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004826:	d8f4      	bhi.n	8004812 <_realloc_r+0x1e>
 8004828:	4629      	mov	r1, r5
 800482a:	4640      	mov	r0, r8
 800482c:	f000 f8bc 	bl	80049a8 <_malloc_r>
 8004830:	4607      	mov	r7, r0
 8004832:	2800      	cmp	r0, #0
 8004834:	d0ec      	beq.n	8004810 <_realloc_r+0x1c>
 8004836:	42b5      	cmp	r5, r6
 8004838:	462a      	mov	r2, r5
 800483a:	4621      	mov	r1, r4
 800483c:	bf28      	it	cs
 800483e:	4632      	movcs	r2, r6
 8004840:	f000 f83a 	bl	80048b8 <memcpy>
 8004844:	4621      	mov	r1, r4
 8004846:	4640      	mov	r0, r8
 8004848:	f000 f844 	bl	80048d4 <_free_r>
 800484c:	463c      	mov	r4, r7
 800484e:	e7e0      	b.n	8004812 <_realloc_r+0x1e>

08004850 <memset>:
 8004850:	4603      	mov	r3, r0
 8004852:	4402      	add	r2, r0
 8004854:	4293      	cmp	r3, r2
 8004856:	d100      	bne.n	800485a <memset+0xa>
 8004858:	4770      	bx	lr
 800485a:	f803 1b01 	strb.w	r1, [r3], #1
 800485e:	e7f9      	b.n	8004854 <memset+0x4>

08004860 <__errno>:
 8004860:	4b01      	ldr	r3, [pc, #4]	@ (8004868 <__errno+0x8>)
 8004862:	6818      	ldr	r0, [r3, #0]
 8004864:	4770      	bx	lr
 8004866:	bf00      	nop
 8004868:	2000000c 	.word	0x2000000c

0800486c <__libc_init_array>:
 800486c:	b570      	push	{r4, r5, r6, lr}
 800486e:	2600      	movs	r6, #0
 8004870:	4d0c      	ldr	r5, [pc, #48]	@ (80048a4 <__libc_init_array+0x38>)
 8004872:	4c0d      	ldr	r4, [pc, #52]	@ (80048a8 <__libc_init_array+0x3c>)
 8004874:	1b64      	subs	r4, r4, r5
 8004876:	10a4      	asrs	r4, r4, #2
 8004878:	42a6      	cmp	r6, r4
 800487a:	d109      	bne.n	8004890 <__libc_init_array+0x24>
 800487c:	f000 f938 	bl	8004af0 <_init>
 8004880:	2600      	movs	r6, #0
 8004882:	4d0a      	ldr	r5, [pc, #40]	@ (80048ac <__libc_init_array+0x40>)
 8004884:	4c0a      	ldr	r4, [pc, #40]	@ (80048b0 <__libc_init_array+0x44>)
 8004886:	1b64      	subs	r4, r4, r5
 8004888:	10a4      	asrs	r4, r4, #2
 800488a:	42a6      	cmp	r6, r4
 800488c:	d105      	bne.n	800489a <__libc_init_array+0x2e>
 800488e:	bd70      	pop	{r4, r5, r6, pc}
 8004890:	f855 3b04 	ldr.w	r3, [r5], #4
 8004894:	4798      	blx	r3
 8004896:	3601      	adds	r6, #1
 8004898:	e7ee      	b.n	8004878 <__libc_init_array+0xc>
 800489a:	f855 3b04 	ldr.w	r3, [r5], #4
 800489e:	4798      	blx	r3
 80048a0:	3601      	adds	r6, #1
 80048a2:	e7f2      	b.n	800488a <__libc_init_array+0x1e>
 80048a4:	08004d68 	.word	0x08004d68
 80048a8:	08004d68 	.word	0x08004d68
 80048ac:	08004d68 	.word	0x08004d68
 80048b0:	08004d70 	.word	0x08004d70

080048b4 <__retarget_lock_acquire_recursive>:
 80048b4:	4770      	bx	lr

080048b6 <__retarget_lock_release_recursive>:
 80048b6:	4770      	bx	lr

080048b8 <memcpy>:
 80048b8:	440a      	add	r2, r1
 80048ba:	4291      	cmp	r1, r2
 80048bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80048c0:	d100      	bne.n	80048c4 <memcpy+0xc>
 80048c2:	4770      	bx	lr
 80048c4:	b510      	push	{r4, lr}
 80048c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80048ca:	4291      	cmp	r1, r2
 80048cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80048d0:	d1f9      	bne.n	80048c6 <memcpy+0xe>
 80048d2:	bd10      	pop	{r4, pc}

080048d4 <_free_r>:
 80048d4:	b538      	push	{r3, r4, r5, lr}
 80048d6:	4605      	mov	r5, r0
 80048d8:	2900      	cmp	r1, #0
 80048da:	d040      	beq.n	800495e <_free_r+0x8a>
 80048dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048e0:	1f0c      	subs	r4, r1, #4
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	bfb8      	it	lt
 80048e6:	18e4      	addlt	r4, r4, r3
 80048e8:	f000 f8de 	bl	8004aa8 <__malloc_lock>
 80048ec:	4a1c      	ldr	r2, [pc, #112]	@ (8004960 <_free_r+0x8c>)
 80048ee:	6813      	ldr	r3, [r2, #0]
 80048f0:	b933      	cbnz	r3, 8004900 <_free_r+0x2c>
 80048f2:	6063      	str	r3, [r4, #4]
 80048f4:	6014      	str	r4, [r2, #0]
 80048f6:	4628      	mov	r0, r5
 80048f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80048fc:	f000 b8da 	b.w	8004ab4 <__malloc_unlock>
 8004900:	42a3      	cmp	r3, r4
 8004902:	d908      	bls.n	8004916 <_free_r+0x42>
 8004904:	6820      	ldr	r0, [r4, #0]
 8004906:	1821      	adds	r1, r4, r0
 8004908:	428b      	cmp	r3, r1
 800490a:	bf01      	itttt	eq
 800490c:	6819      	ldreq	r1, [r3, #0]
 800490e:	685b      	ldreq	r3, [r3, #4]
 8004910:	1809      	addeq	r1, r1, r0
 8004912:	6021      	streq	r1, [r4, #0]
 8004914:	e7ed      	b.n	80048f2 <_free_r+0x1e>
 8004916:	461a      	mov	r2, r3
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	b10b      	cbz	r3, 8004920 <_free_r+0x4c>
 800491c:	42a3      	cmp	r3, r4
 800491e:	d9fa      	bls.n	8004916 <_free_r+0x42>
 8004920:	6811      	ldr	r1, [r2, #0]
 8004922:	1850      	adds	r0, r2, r1
 8004924:	42a0      	cmp	r0, r4
 8004926:	d10b      	bne.n	8004940 <_free_r+0x6c>
 8004928:	6820      	ldr	r0, [r4, #0]
 800492a:	4401      	add	r1, r0
 800492c:	1850      	adds	r0, r2, r1
 800492e:	4283      	cmp	r3, r0
 8004930:	6011      	str	r1, [r2, #0]
 8004932:	d1e0      	bne.n	80048f6 <_free_r+0x22>
 8004934:	6818      	ldr	r0, [r3, #0]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	4408      	add	r0, r1
 800493a:	6010      	str	r0, [r2, #0]
 800493c:	6053      	str	r3, [r2, #4]
 800493e:	e7da      	b.n	80048f6 <_free_r+0x22>
 8004940:	d902      	bls.n	8004948 <_free_r+0x74>
 8004942:	230c      	movs	r3, #12
 8004944:	602b      	str	r3, [r5, #0]
 8004946:	e7d6      	b.n	80048f6 <_free_r+0x22>
 8004948:	6820      	ldr	r0, [r4, #0]
 800494a:	1821      	adds	r1, r4, r0
 800494c:	428b      	cmp	r3, r1
 800494e:	bf01      	itttt	eq
 8004950:	6819      	ldreq	r1, [r3, #0]
 8004952:	685b      	ldreq	r3, [r3, #4]
 8004954:	1809      	addeq	r1, r1, r0
 8004956:	6021      	streq	r1, [r4, #0]
 8004958:	6063      	str	r3, [r4, #4]
 800495a:	6054      	str	r4, [r2, #4]
 800495c:	e7cb      	b.n	80048f6 <_free_r+0x22>
 800495e:	bd38      	pop	{r3, r4, r5, pc}
 8004960:	20004374 	.word	0x20004374

08004964 <sbrk_aligned>:
 8004964:	b570      	push	{r4, r5, r6, lr}
 8004966:	4e0f      	ldr	r6, [pc, #60]	@ (80049a4 <sbrk_aligned+0x40>)
 8004968:	460c      	mov	r4, r1
 800496a:	6831      	ldr	r1, [r6, #0]
 800496c:	4605      	mov	r5, r0
 800496e:	b911      	cbnz	r1, 8004976 <sbrk_aligned+0x12>
 8004970:	f000 f8ae 	bl	8004ad0 <_sbrk_r>
 8004974:	6030      	str	r0, [r6, #0]
 8004976:	4621      	mov	r1, r4
 8004978:	4628      	mov	r0, r5
 800497a:	f000 f8a9 	bl	8004ad0 <_sbrk_r>
 800497e:	1c43      	adds	r3, r0, #1
 8004980:	d103      	bne.n	800498a <sbrk_aligned+0x26>
 8004982:	f04f 34ff 	mov.w	r4, #4294967295
 8004986:	4620      	mov	r0, r4
 8004988:	bd70      	pop	{r4, r5, r6, pc}
 800498a:	1cc4      	adds	r4, r0, #3
 800498c:	f024 0403 	bic.w	r4, r4, #3
 8004990:	42a0      	cmp	r0, r4
 8004992:	d0f8      	beq.n	8004986 <sbrk_aligned+0x22>
 8004994:	1a21      	subs	r1, r4, r0
 8004996:	4628      	mov	r0, r5
 8004998:	f000 f89a 	bl	8004ad0 <_sbrk_r>
 800499c:	3001      	adds	r0, #1
 800499e:	d1f2      	bne.n	8004986 <sbrk_aligned+0x22>
 80049a0:	e7ef      	b.n	8004982 <sbrk_aligned+0x1e>
 80049a2:	bf00      	nop
 80049a4:	20004370 	.word	0x20004370

080049a8 <_malloc_r>:
 80049a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049ac:	1ccd      	adds	r5, r1, #3
 80049ae:	f025 0503 	bic.w	r5, r5, #3
 80049b2:	3508      	adds	r5, #8
 80049b4:	2d0c      	cmp	r5, #12
 80049b6:	bf38      	it	cc
 80049b8:	250c      	movcc	r5, #12
 80049ba:	2d00      	cmp	r5, #0
 80049bc:	4606      	mov	r6, r0
 80049be:	db01      	blt.n	80049c4 <_malloc_r+0x1c>
 80049c0:	42a9      	cmp	r1, r5
 80049c2:	d904      	bls.n	80049ce <_malloc_r+0x26>
 80049c4:	230c      	movs	r3, #12
 80049c6:	6033      	str	r3, [r6, #0]
 80049c8:	2000      	movs	r0, #0
 80049ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80049ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004aa4 <_malloc_r+0xfc>
 80049d2:	f000 f869 	bl	8004aa8 <__malloc_lock>
 80049d6:	f8d8 3000 	ldr.w	r3, [r8]
 80049da:	461c      	mov	r4, r3
 80049dc:	bb44      	cbnz	r4, 8004a30 <_malloc_r+0x88>
 80049de:	4629      	mov	r1, r5
 80049e0:	4630      	mov	r0, r6
 80049e2:	f7ff ffbf 	bl	8004964 <sbrk_aligned>
 80049e6:	1c43      	adds	r3, r0, #1
 80049e8:	4604      	mov	r4, r0
 80049ea:	d158      	bne.n	8004a9e <_malloc_r+0xf6>
 80049ec:	f8d8 4000 	ldr.w	r4, [r8]
 80049f0:	4627      	mov	r7, r4
 80049f2:	2f00      	cmp	r7, #0
 80049f4:	d143      	bne.n	8004a7e <_malloc_r+0xd6>
 80049f6:	2c00      	cmp	r4, #0
 80049f8:	d04b      	beq.n	8004a92 <_malloc_r+0xea>
 80049fa:	6823      	ldr	r3, [r4, #0]
 80049fc:	4639      	mov	r1, r7
 80049fe:	4630      	mov	r0, r6
 8004a00:	eb04 0903 	add.w	r9, r4, r3
 8004a04:	f000 f864 	bl	8004ad0 <_sbrk_r>
 8004a08:	4581      	cmp	r9, r0
 8004a0a:	d142      	bne.n	8004a92 <_malloc_r+0xea>
 8004a0c:	6821      	ldr	r1, [r4, #0]
 8004a0e:	4630      	mov	r0, r6
 8004a10:	1a6d      	subs	r5, r5, r1
 8004a12:	4629      	mov	r1, r5
 8004a14:	f7ff ffa6 	bl	8004964 <sbrk_aligned>
 8004a18:	3001      	adds	r0, #1
 8004a1a:	d03a      	beq.n	8004a92 <_malloc_r+0xea>
 8004a1c:	6823      	ldr	r3, [r4, #0]
 8004a1e:	442b      	add	r3, r5
 8004a20:	6023      	str	r3, [r4, #0]
 8004a22:	f8d8 3000 	ldr.w	r3, [r8]
 8004a26:	685a      	ldr	r2, [r3, #4]
 8004a28:	bb62      	cbnz	r2, 8004a84 <_malloc_r+0xdc>
 8004a2a:	f8c8 7000 	str.w	r7, [r8]
 8004a2e:	e00f      	b.n	8004a50 <_malloc_r+0xa8>
 8004a30:	6822      	ldr	r2, [r4, #0]
 8004a32:	1b52      	subs	r2, r2, r5
 8004a34:	d420      	bmi.n	8004a78 <_malloc_r+0xd0>
 8004a36:	2a0b      	cmp	r2, #11
 8004a38:	d917      	bls.n	8004a6a <_malloc_r+0xc2>
 8004a3a:	1961      	adds	r1, r4, r5
 8004a3c:	42a3      	cmp	r3, r4
 8004a3e:	6025      	str	r5, [r4, #0]
 8004a40:	bf18      	it	ne
 8004a42:	6059      	strne	r1, [r3, #4]
 8004a44:	6863      	ldr	r3, [r4, #4]
 8004a46:	bf08      	it	eq
 8004a48:	f8c8 1000 	streq.w	r1, [r8]
 8004a4c:	5162      	str	r2, [r4, r5]
 8004a4e:	604b      	str	r3, [r1, #4]
 8004a50:	4630      	mov	r0, r6
 8004a52:	f000 f82f 	bl	8004ab4 <__malloc_unlock>
 8004a56:	f104 000b 	add.w	r0, r4, #11
 8004a5a:	1d23      	adds	r3, r4, #4
 8004a5c:	f020 0007 	bic.w	r0, r0, #7
 8004a60:	1ac2      	subs	r2, r0, r3
 8004a62:	bf1c      	itt	ne
 8004a64:	1a1b      	subne	r3, r3, r0
 8004a66:	50a3      	strne	r3, [r4, r2]
 8004a68:	e7af      	b.n	80049ca <_malloc_r+0x22>
 8004a6a:	6862      	ldr	r2, [r4, #4]
 8004a6c:	42a3      	cmp	r3, r4
 8004a6e:	bf0c      	ite	eq
 8004a70:	f8c8 2000 	streq.w	r2, [r8]
 8004a74:	605a      	strne	r2, [r3, #4]
 8004a76:	e7eb      	b.n	8004a50 <_malloc_r+0xa8>
 8004a78:	4623      	mov	r3, r4
 8004a7a:	6864      	ldr	r4, [r4, #4]
 8004a7c:	e7ae      	b.n	80049dc <_malloc_r+0x34>
 8004a7e:	463c      	mov	r4, r7
 8004a80:	687f      	ldr	r7, [r7, #4]
 8004a82:	e7b6      	b.n	80049f2 <_malloc_r+0x4a>
 8004a84:	461a      	mov	r2, r3
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	42a3      	cmp	r3, r4
 8004a8a:	d1fb      	bne.n	8004a84 <_malloc_r+0xdc>
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	6053      	str	r3, [r2, #4]
 8004a90:	e7de      	b.n	8004a50 <_malloc_r+0xa8>
 8004a92:	230c      	movs	r3, #12
 8004a94:	4630      	mov	r0, r6
 8004a96:	6033      	str	r3, [r6, #0]
 8004a98:	f000 f80c 	bl	8004ab4 <__malloc_unlock>
 8004a9c:	e794      	b.n	80049c8 <_malloc_r+0x20>
 8004a9e:	6005      	str	r5, [r0, #0]
 8004aa0:	e7d6      	b.n	8004a50 <_malloc_r+0xa8>
 8004aa2:	bf00      	nop
 8004aa4:	20004374 	.word	0x20004374

08004aa8 <__malloc_lock>:
 8004aa8:	4801      	ldr	r0, [pc, #4]	@ (8004ab0 <__malloc_lock+0x8>)
 8004aaa:	f7ff bf03 	b.w	80048b4 <__retarget_lock_acquire_recursive>
 8004aae:	bf00      	nop
 8004ab0:	2000436c 	.word	0x2000436c

08004ab4 <__malloc_unlock>:
 8004ab4:	4801      	ldr	r0, [pc, #4]	@ (8004abc <__malloc_unlock+0x8>)
 8004ab6:	f7ff befe 	b.w	80048b6 <__retarget_lock_release_recursive>
 8004aba:	bf00      	nop
 8004abc:	2000436c 	.word	0x2000436c

08004ac0 <_malloc_usable_size_r>:
 8004ac0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ac4:	1f18      	subs	r0, r3, #4
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	bfbc      	itt	lt
 8004aca:	580b      	ldrlt	r3, [r1, r0]
 8004acc:	18c0      	addlt	r0, r0, r3
 8004ace:	4770      	bx	lr

08004ad0 <_sbrk_r>:
 8004ad0:	b538      	push	{r3, r4, r5, lr}
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	4d05      	ldr	r5, [pc, #20]	@ (8004aec <_sbrk_r+0x1c>)
 8004ad6:	4604      	mov	r4, r0
 8004ad8:	4608      	mov	r0, r1
 8004ada:	602b      	str	r3, [r5, #0]
 8004adc:	f7fd fc30 	bl	8002340 <_sbrk>
 8004ae0:	1c43      	adds	r3, r0, #1
 8004ae2:	d102      	bne.n	8004aea <_sbrk_r+0x1a>
 8004ae4:	682b      	ldr	r3, [r5, #0]
 8004ae6:	b103      	cbz	r3, 8004aea <_sbrk_r+0x1a>
 8004ae8:	6023      	str	r3, [r4, #0]
 8004aea:	bd38      	pop	{r3, r4, r5, pc}
 8004aec:	20004368 	.word	0x20004368

08004af0 <_init>:
 8004af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004af2:	bf00      	nop
 8004af4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004af6:	bc08      	pop	{r3}
 8004af8:	469e      	mov	lr, r3
 8004afa:	4770      	bx	lr

08004afc <_fini>:
 8004afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004afe:	bf00      	nop
 8004b00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b02:	bc08      	pop	{r3}
 8004b04:	469e      	mov	lr, r3
 8004b06:	4770      	bx	lr
