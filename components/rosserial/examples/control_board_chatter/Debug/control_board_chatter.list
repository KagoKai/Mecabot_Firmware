
control_board_chatter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e5c  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000258  08005040  08005040  00006040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005298  08005298  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  08005298  08005298  00006298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080052a0  080052a0  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080052a0  080052a0  000062a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080052a8  080052a8  000062a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080052ac  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008320  2000005c  08005308  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000837c  08005308  0000737c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e173  00000000  00000000  00007085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000224f  00000000  00000000  000151f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000910  00000000  00000000  00017448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006f1  00000000  00000000  00017d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000197df  00000000  00000000  00018449  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000be29  00000000  00000000  00031c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095ce7  00000000  00000000  0003da51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d3738  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027b4  00000000  00000000  000d377c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008f  00000000  00000000  000d5f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000005c 	.word	0x2000005c
 8000200:	00000000 	.word	0x00000000
 8000204:	08005028 	.word	0x08005028

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000060 	.word	0x20000060
 8000220:	08005028 	.word	0x08005028

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000238:	f002 f9ba 	bl	80025b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800023c:	f000 f80b 	bl	8000256 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000240:	f000 f894 	bl	800036c <MX_GPIO_Init>
  MX_DMA_Init();
 8000244:	f000 f86c 	bl	8000320 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000248:	f000 f840 	bl	80002cc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  setup();
 800024c:	f001 fa44 	bl	80016d8 <setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  loop();
 8000250:	f001 fa5a 	bl	8001708 <loop>
 8000254:	e7fc      	b.n	8000250 <main+0x1c>

08000256 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000256:	b580      	push	{r7, lr}
 8000258:	b090      	sub	sp, #64	@ 0x40
 800025a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800025c:	f107 0318 	add.w	r3, r7, #24
 8000260:	2228      	movs	r2, #40	@ 0x28
 8000262:	2100      	movs	r1, #0
 8000264:	4618      	mov	r0, r3
 8000266:	f004 fd8f 	bl	8004d88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800026a:	1d3b      	adds	r3, r7, #4
 800026c:	2200      	movs	r2, #0
 800026e:	601a      	str	r2, [r3, #0]
 8000270:	605a      	str	r2, [r3, #4]
 8000272:	609a      	str	r2, [r3, #8]
 8000274:	60da      	str	r2, [r3, #12]
 8000276:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000278:	2302      	movs	r3, #2
 800027a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800027c:	2301      	movs	r3, #1
 800027e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000280:	2310      	movs	r3, #16
 8000282:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000284:	2300      	movs	r3, #0
 8000286:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000288:	f107 0318 	add.w	r3, r7, #24
 800028c:	4618      	mov	r0, r3
 800028e:	f003 f953 	bl	8003538 <HAL_RCC_OscConfig>
 8000292:	4603      	mov	r3, r0
 8000294:	2b00      	cmp	r3, #0
 8000296:	d001      	beq.n	800029c <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000298:	f000 f8c0 	bl	800041c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800029c:	230f      	movs	r3, #15
 800029e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002a0:	2300      	movs	r3, #0
 80002a2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002a4:	2300      	movs	r3, #0
 80002a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002a8:	2300      	movs	r3, #0
 80002aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ac:	2300      	movs	r3, #0
 80002ae:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002b0:	1d3b      	adds	r3, r7, #4
 80002b2:	2100      	movs	r1, #0
 80002b4:	4618      	mov	r0, r3
 80002b6:	f003 fbc1 	bl	8003a3c <HAL_RCC_ClockConfig>
 80002ba:	4603      	mov	r3, r0
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d001      	beq.n	80002c4 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002c0:	f000 f8ac 	bl	800041c <Error_Handler>
  }
}
 80002c4:	bf00      	nop
 80002c6:	3740      	adds	r7, #64	@ 0x40
 80002c8:	46bd      	mov	sp, r7
 80002ca:	bd80      	pop	{r7, pc}

080002cc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart_rosserial.Instance = USART1;
 80002d0:	4b11      	ldr	r3, [pc, #68]	@ (8000318 <MX_USART1_UART_Init+0x4c>)
 80002d2:	4a12      	ldr	r2, [pc, #72]	@ (800031c <MX_USART1_UART_Init+0x50>)
 80002d4:	601a      	str	r2, [r3, #0]
  huart_rosserial.Init.BaudRate = 57600;
 80002d6:	4b10      	ldr	r3, [pc, #64]	@ (8000318 <MX_USART1_UART_Init+0x4c>)
 80002d8:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 80002dc:	605a      	str	r2, [r3, #4]
  huart_rosserial.Init.WordLength = UART_WORDLENGTH_8B;
 80002de:	4b0e      	ldr	r3, [pc, #56]	@ (8000318 <MX_USART1_UART_Init+0x4c>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	609a      	str	r2, [r3, #8]
  huart_rosserial.Init.StopBits = UART_STOPBITS_1;
 80002e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000318 <MX_USART1_UART_Init+0x4c>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	60da      	str	r2, [r3, #12]
  huart_rosserial.Init.Parity = UART_PARITY_NONE;
 80002ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000318 <MX_USART1_UART_Init+0x4c>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	611a      	str	r2, [r3, #16]
  huart_rosserial.Init.Mode = UART_MODE_TX_RX;
 80002f0:	4b09      	ldr	r3, [pc, #36]	@ (8000318 <MX_USART1_UART_Init+0x4c>)
 80002f2:	220c      	movs	r2, #12
 80002f4:	615a      	str	r2, [r3, #20]
  huart_rosserial.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002f6:	4b08      	ldr	r3, [pc, #32]	@ (8000318 <MX_USART1_UART_Init+0x4c>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	619a      	str	r2, [r3, #24]
  huart_rosserial.Init.OverSampling = UART_OVERSAMPLING_16;
 80002fc:	4b06      	ldr	r3, [pc, #24]	@ (8000318 <MX_USART1_UART_Init+0x4c>)
 80002fe:	2200      	movs	r2, #0
 8000300:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart_rosserial) != HAL_OK)
 8000302:	4805      	ldr	r0, [pc, #20]	@ (8000318 <MX_USART1_UART_Init+0x4c>)
 8000304:	f003 fd28 	bl	8003d58 <HAL_UART_Init>
 8000308:	4603      	mov	r3, r0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800030e:	f000 f885 	bl	800041c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000312:	bf00      	nop
 8000314:	bd80      	pop	{r7, pc}
 8000316:	bf00      	nop
 8000318:	20000078 	.word	0x20000078
 800031c:	40013800 	.word	0x40013800

08000320 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b082      	sub	sp, #8
 8000324:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000326:	4b10      	ldr	r3, [pc, #64]	@ (8000368 <MX_DMA_Init+0x48>)
 8000328:	695b      	ldr	r3, [r3, #20]
 800032a:	4a0f      	ldr	r2, [pc, #60]	@ (8000368 <MX_DMA_Init+0x48>)
 800032c:	f043 0301 	orr.w	r3, r3, #1
 8000330:	6153      	str	r3, [r2, #20]
 8000332:	4b0d      	ldr	r3, [pc, #52]	@ (8000368 <MX_DMA_Init+0x48>)
 8000334:	695b      	ldr	r3, [r3, #20]
 8000336:	f003 0301 	and.w	r3, r3, #1
 800033a:	607b      	str	r3, [r7, #4]
 800033c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800033e:	2200      	movs	r2, #0
 8000340:	2100      	movs	r1, #0
 8000342:	200e      	movs	r0, #14
 8000344:	f002 fa91 	bl	800286a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000348:	200e      	movs	r0, #14
 800034a:	f002 faaa 	bl	80028a2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800034e:	2200      	movs	r2, #0
 8000350:	2100      	movs	r1, #0
 8000352:	200f      	movs	r0, #15
 8000354:	f002 fa89 	bl	800286a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000358:	200f      	movs	r0, #15
 800035a:	f002 faa2 	bl	80028a2 <HAL_NVIC_EnableIRQ>

}
 800035e:	bf00      	nop
 8000360:	3708      	adds	r7, #8
 8000362:	46bd      	mov	sp, r7
 8000364:	bd80      	pop	{r7, pc}
 8000366:	bf00      	nop
 8000368:	40021000 	.word	0x40021000

0800036c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b088      	sub	sp, #32
 8000370:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000372:	f107 0310 	add.w	r3, r7, #16
 8000376:	2200      	movs	r2, #0
 8000378:	601a      	str	r2, [r3, #0]
 800037a:	605a      	str	r2, [r3, #4]
 800037c:	609a      	str	r2, [r3, #8]
 800037e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000380:	4b24      	ldr	r3, [pc, #144]	@ (8000414 <MX_GPIO_Init+0xa8>)
 8000382:	699b      	ldr	r3, [r3, #24]
 8000384:	4a23      	ldr	r2, [pc, #140]	@ (8000414 <MX_GPIO_Init+0xa8>)
 8000386:	f043 0310 	orr.w	r3, r3, #16
 800038a:	6193      	str	r3, [r2, #24]
 800038c:	4b21      	ldr	r3, [pc, #132]	@ (8000414 <MX_GPIO_Init+0xa8>)
 800038e:	699b      	ldr	r3, [r3, #24]
 8000390:	f003 0310 	and.w	r3, r3, #16
 8000394:	60fb      	str	r3, [r7, #12]
 8000396:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000398:	4b1e      	ldr	r3, [pc, #120]	@ (8000414 <MX_GPIO_Init+0xa8>)
 800039a:	699b      	ldr	r3, [r3, #24]
 800039c:	4a1d      	ldr	r2, [pc, #116]	@ (8000414 <MX_GPIO_Init+0xa8>)
 800039e:	f043 0320 	orr.w	r3, r3, #32
 80003a2:	6193      	str	r3, [r2, #24]
 80003a4:	4b1b      	ldr	r3, [pc, #108]	@ (8000414 <MX_GPIO_Init+0xa8>)
 80003a6:	699b      	ldr	r3, [r3, #24]
 80003a8:	f003 0320 	and.w	r3, r3, #32
 80003ac:	60bb      	str	r3, [r7, #8]
 80003ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003b0:	4b18      	ldr	r3, [pc, #96]	@ (8000414 <MX_GPIO_Init+0xa8>)
 80003b2:	699b      	ldr	r3, [r3, #24]
 80003b4:	4a17      	ldr	r2, [pc, #92]	@ (8000414 <MX_GPIO_Init+0xa8>)
 80003b6:	f043 0304 	orr.w	r3, r3, #4
 80003ba:	6193      	str	r3, [r2, #24]
 80003bc:	4b15      	ldr	r3, [pc, #84]	@ (8000414 <MX_GPIO_Init+0xa8>)
 80003be:	699b      	ldr	r3, [r3, #24]
 80003c0:	f003 0304 	and.w	r3, r3, #4
 80003c4:	607b      	str	r3, [r7, #4]
 80003c6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003c8:	4b12      	ldr	r3, [pc, #72]	@ (8000414 <MX_GPIO_Init+0xa8>)
 80003ca:	699b      	ldr	r3, [r3, #24]
 80003cc:	4a11      	ldr	r2, [pc, #68]	@ (8000414 <MX_GPIO_Init+0xa8>)
 80003ce:	f043 0308 	orr.w	r3, r3, #8
 80003d2:	6193      	str	r3, [r2, #24]
 80003d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000414 <MX_GPIO_Init+0xa8>)
 80003d6:	699b      	ldr	r3, [r3, #24]
 80003d8:	f003 0308 	and.w	r3, r3, #8
 80003dc:	603b      	str	r3, [r7, #0]
 80003de:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80003e0:	2200      	movs	r2, #0
 80003e2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80003e6:	480c      	ldr	r0, [pc, #48]	@ (8000418 <MX_GPIO_Init+0xac>)
 80003e8:	f003 f88e 	bl	8003508 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80003ec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80003f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003f2:	2301      	movs	r3, #1
 80003f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003f6:	2300      	movs	r3, #0
 80003f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003fa:	2302      	movs	r3, #2
 80003fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003fe:	f107 0310 	add.w	r3, r7, #16
 8000402:	4619      	mov	r1, r3
 8000404:	4804      	ldr	r0, [pc, #16]	@ (8000418 <MX_GPIO_Init+0xac>)
 8000406:	f002 feeb 	bl	80031e0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800040a:	bf00      	nop
 800040c:	3720      	adds	r7, #32
 800040e:	46bd      	mov	sp, r7
 8000410:	bd80      	pop	{r7, pc}
 8000412:	bf00      	nop
 8000414:	40021000 	.word	0x40021000
 8000418:	40011000 	.word	0x40011000

0800041c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000420:	b672      	cpsid	i
}
 8000422:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000424:	bf00      	nop
 8000426:	e7fd      	b.n	8000424 <Error_Handler+0x8>

08000428 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8000428:	b480      	push	{r7}
 800042a:	b083      	sub	sp, #12
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	2200      	movs	r2, #0
 8000434:	601a      	str	r2, [r3, #0]
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	2200      	movs	r2, #0
 800043a:	605a      	str	r2, [r3, #4]
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	4618      	mov	r0, r3
 8000440:	370c      	adds	r7, #12
 8000442:	46bd      	mov	sp, r7
 8000444:	bc80      	pop	{r7}
 8000446:	4770      	bx	lr

08000448 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8000448:	b480      	push	{r7}
 800044a:	b083      	sub	sp, #12
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
 8000450:	4a04      	ldr	r2, [pc, #16]	@ (8000464 <_ZN3ros3MsgC1Ev+0x1c>)
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	601a      	str	r2, [r3, #0]
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	4618      	mov	r0, r3
 800045a:	370c      	adds	r7, #12
 800045c:	46bd      	mov	sp, r7
 800045e:	bc80      	pop	{r7}
 8000460:	4770      	bx	lr
 8000462:	bf00      	nop
 8000464:	0800525c 	.word	0x0800525c

08000468 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8000468:	b580      	push	{r7, lr}
 800046a:	b082      	sub	sp, #8
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
      data()
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	4618      	mov	r0, r3
 8000474:	f7ff ffe8 	bl	8000448 <_ZN3ros3MsgC1Ev>
 8000478:	4a06      	ldr	r2, [pc, #24]	@ (8000494 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	601a      	str	r2, [r3, #0]
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	3304      	adds	r3, #4
 8000482:	4618      	mov	r0, r3
 8000484:	f7ff ffd0 	bl	8000428 <_ZN3ros4TimeC1Ev>
    {
    }
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	4618      	mov	r0, r3
 800048c:	3708      	adds	r7, #8
 800048e:	46bd      	mov	sp, r7
 8000490:	bd80      	pop	{r7, pc}
 8000492:	bf00      	nop
 8000494:	08005244 	.word	0x08005244

08000498 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000498:	b480      	push	{r7}
 800049a:	b085      	sub	sp, #20
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
 80004a0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80004a2:	2300      	movs	r3, #0
 80004a4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	6859      	ldr	r1, [r3, #4]
 80004aa:	68fb      	ldr	r3, [r7, #12]
 80004ac:	683a      	ldr	r2, [r7, #0]
 80004ae:	4413      	add	r3, r2
 80004b0:	b2ca      	uxtb	r2, r1
 80004b2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	685b      	ldr	r3, [r3, #4]
 80004b8:	0a19      	lsrs	r1, r3, #8
 80004ba:	68fb      	ldr	r3, [r7, #12]
 80004bc:	3301      	adds	r3, #1
 80004be:	683a      	ldr	r2, [r7, #0]
 80004c0:	4413      	add	r3, r2
 80004c2:	b2ca      	uxtb	r2, r1
 80004c4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	685b      	ldr	r3, [r3, #4]
 80004ca:	0c19      	lsrs	r1, r3, #16
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	3302      	adds	r3, #2
 80004d0:	683a      	ldr	r2, [r7, #0]
 80004d2:	4413      	add	r3, r2
 80004d4:	b2ca      	uxtb	r2, r1
 80004d6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	685b      	ldr	r3, [r3, #4]
 80004dc:	0e19      	lsrs	r1, r3, #24
 80004de:	68fb      	ldr	r3, [r7, #12]
 80004e0:	3303      	adds	r3, #3
 80004e2:	683a      	ldr	r2, [r7, #0]
 80004e4:	4413      	add	r3, r2
 80004e6:	b2ca      	uxtb	r2, r1
 80004e8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 80004ea:	68fb      	ldr	r3, [r7, #12]
 80004ec:	3304      	adds	r3, #4
 80004ee:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	6899      	ldr	r1, [r3, #8]
 80004f4:	68fb      	ldr	r3, [r7, #12]
 80004f6:	683a      	ldr	r2, [r7, #0]
 80004f8:	4413      	add	r3, r2
 80004fa:	b2ca      	uxtb	r2, r1
 80004fc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	689b      	ldr	r3, [r3, #8]
 8000502:	0a19      	lsrs	r1, r3, #8
 8000504:	68fb      	ldr	r3, [r7, #12]
 8000506:	3301      	adds	r3, #1
 8000508:	683a      	ldr	r2, [r7, #0]
 800050a:	4413      	add	r3, r2
 800050c:	b2ca      	uxtb	r2, r1
 800050e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	689b      	ldr	r3, [r3, #8]
 8000514:	0c19      	lsrs	r1, r3, #16
 8000516:	68fb      	ldr	r3, [r7, #12]
 8000518:	3302      	adds	r3, #2
 800051a:	683a      	ldr	r2, [r7, #0]
 800051c:	4413      	add	r3, r2
 800051e:	b2ca      	uxtb	r2, r1
 8000520:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	689b      	ldr	r3, [r3, #8]
 8000526:	0e19      	lsrs	r1, r3, #24
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	3303      	adds	r3, #3
 800052c:	683a      	ldr	r2, [r7, #0]
 800052e:	4413      	add	r3, r2
 8000530:	b2ca      	uxtb	r2, r1
 8000532:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	3304      	adds	r3, #4
 8000538:	60fb      	str	r3, [r7, #12]
      return offset;
 800053a:	68fb      	ldr	r3, [r7, #12]
    }
 800053c:	4618      	mov	r0, r3
 800053e:	3714      	adds	r7, #20
 8000540:	46bd      	mov	sp, r7
 8000542:	bc80      	pop	{r7}
 8000544:	4770      	bx	lr

08000546 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8000546:	b480      	push	{r7}
 8000548:	b085      	sub	sp, #20
 800054a:	af00      	add	r7, sp, #0
 800054c:	6078      	str	r0, [r7, #4]
 800054e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000550:	2300      	movs	r3, #0
 8000552:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	683a      	ldr	r2, [r7, #0]
 8000558:	4413      	add	r3, r2
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	461a      	mov	r2, r3
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	685a      	ldr	r2, [r3, #4]
 8000566:	68fb      	ldr	r3, [r7, #12]
 8000568:	3301      	adds	r3, #1
 800056a:	6839      	ldr	r1, [r7, #0]
 800056c:	440b      	add	r3, r1
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	021b      	lsls	r3, r3, #8
 8000572:	431a      	orrs	r2, r3
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	685a      	ldr	r2, [r3, #4]
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	3302      	adds	r3, #2
 8000580:	6839      	ldr	r1, [r7, #0]
 8000582:	440b      	add	r3, r1
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	041b      	lsls	r3, r3, #16
 8000588:	431a      	orrs	r2, r3
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	685a      	ldr	r2, [r3, #4]
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	3303      	adds	r3, #3
 8000596:	6839      	ldr	r1, [r7, #0]
 8000598:	440b      	add	r3, r1
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	061b      	lsls	r3, r3, #24
 800059e:	431a      	orrs	r2, r3
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	3304      	adds	r3, #4
 80005a8:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	683a      	ldr	r2, [r7, #0]
 80005ae:	4413      	add	r3, r2
 80005b0:	781b      	ldrb	r3, [r3, #0]
 80005b2:	461a      	mov	r2, r3
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	689a      	ldr	r2, [r3, #8]
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	3301      	adds	r3, #1
 80005c0:	6839      	ldr	r1, [r7, #0]
 80005c2:	440b      	add	r3, r1
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	021b      	lsls	r3, r3, #8
 80005c8:	431a      	orrs	r2, r3
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	689a      	ldr	r2, [r3, #8]
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	3302      	adds	r3, #2
 80005d6:	6839      	ldr	r1, [r7, #0]
 80005d8:	440b      	add	r3, r1
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	041b      	lsls	r3, r3, #16
 80005de:	431a      	orrs	r2, r3
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	689a      	ldr	r2, [r3, #8]
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	3303      	adds	r3, #3
 80005ec:	6839      	ldr	r1, [r7, #0]
 80005ee:	440b      	add	r3, r1
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	061b      	lsls	r3, r3, #24
 80005f4:	431a      	orrs	r2, r3
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	3304      	adds	r3, #4
 80005fe:	60fb      	str	r3, [r7, #12]
     return offset;
 8000600:	68fb      	ldr	r3, [r7, #12]
    }
 8000602:	4618      	mov	r0, r3
 8000604:	3714      	adds	r7, #20
 8000606:	46bd      	mov	sp, r7
 8000608:	bc80      	pop	{r7}
 800060a:	4770      	bx	lr

0800060c <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
 8000614:	4b02      	ldr	r3, [pc, #8]	@ (8000620 <_ZN8std_msgs4Time7getTypeEv+0x14>)
 8000616:	4618      	mov	r0, r3
 8000618:	370c      	adds	r7, #12
 800061a:	46bd      	mov	sp, r7
 800061c:	bc80      	pop	{r7}
 800061e:	4770      	bx	lr
 8000620:	08005040 	.word	0x08005040

08000624 <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8000624:	b480      	push	{r7}
 8000626:	b083      	sub	sp, #12
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	4b02      	ldr	r3, [pc, #8]	@ (8000638 <_ZN8std_msgs4Time6getMD5Ev+0x14>)
 800062e:	4618      	mov	r0, r3
 8000630:	370c      	adds	r7, #12
 8000632:	46bd      	mov	sp, r7
 8000634:	bc80      	pop	{r7}
 8000636:	4770      	bx	lr
 8000638:	08005050 	.word	0x08005050

0800063c <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	4618      	mov	r0, r3
 8000648:	f7ff fefe 	bl	8000448 <_ZN3ros3MsgC1Ev>
 800064c:	4a0b      	ldr	r2, [pc, #44]	@ (800067c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	601a      	str	r2, [r3, #0]
      topic_id(0),
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	2200      	movs	r2, #0
 8000656:	809a      	strh	r2, [r3, #4]
      topic_name(""),
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	4a09      	ldr	r2, [pc, #36]	@ (8000680 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800065c:	609a      	str	r2, [r3, #8]
      message_type(""),
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	4a07      	ldr	r2, [pc, #28]	@ (8000680 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000662:	60da      	str	r2, [r3, #12]
      md5sum(""),
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	4a06      	ldr	r2, [pc, #24]	@ (8000680 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000668:	611a      	str	r2, [r3, #16]
      buffer_size(0)
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	2200      	movs	r2, #0
 800066e:	615a      	str	r2, [r3, #20]
    {
    }
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	4618      	mov	r0, r3
 8000674:	3708      	adds	r7, #8
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	0800522c 	.word	0x0800522c
 8000680:	08005074 	.word	0x08005074

08000684 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000684:	b580      	push	{r7, lr}
 8000686:	b088      	sub	sp, #32
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
 800068c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800068e:	2300      	movs	r3, #0
 8000690:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	8899      	ldrh	r1, [r3, #4]
 8000696:	69fb      	ldr	r3, [r7, #28]
 8000698:	683a      	ldr	r2, [r7, #0]
 800069a:	4413      	add	r3, r2
 800069c:	b2ca      	uxtb	r2, r1
 800069e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	889b      	ldrh	r3, [r3, #4]
 80006a4:	0a1b      	lsrs	r3, r3, #8
 80006a6:	b299      	uxth	r1, r3
 80006a8:	69fb      	ldr	r3, [r7, #28]
 80006aa:	3301      	adds	r3, #1
 80006ac:	683a      	ldr	r2, [r7, #0]
 80006ae:	4413      	add	r3, r2
 80006b0:	b2ca      	uxtb	r2, r1
 80006b2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 80006b4:	69fb      	ldr	r3, [r7, #28]
 80006b6:	3302      	adds	r3, #2
 80006b8:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	689b      	ldr	r3, [r3, #8]
 80006be:	4618      	mov	r0, r3
 80006c0:	f7ff fdb0 	bl	8000224 <strlen>
 80006c4:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 80006c6:	69fb      	ldr	r3, [r7, #28]
 80006c8:	683a      	ldr	r2, [r7, #0]
 80006ca:	4413      	add	r3, r2
 80006cc:	69b9      	ldr	r1, [r7, #24]
 80006ce:	4618      	mov	r0, r3
 80006d0:	f001 f83c 	bl	800174c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80006d4:	69fb      	ldr	r3, [r7, #28]
 80006d6:	3304      	adds	r3, #4
 80006d8:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 80006da:	69fb      	ldr	r3, [r7, #28]
 80006dc:	683a      	ldr	r2, [r7, #0]
 80006de:	18d0      	adds	r0, r2, r3
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	689b      	ldr	r3, [r3, #8]
 80006e4:	69ba      	ldr	r2, [r7, #24]
 80006e6:	4619      	mov	r1, r3
 80006e8:	f004 fb82 	bl	8004df0 <memcpy>
      offset += length_topic_name;
 80006ec:	69fa      	ldr	r2, [r7, #28]
 80006ee:	69bb      	ldr	r3, [r7, #24]
 80006f0:	4413      	add	r3, r2
 80006f2:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	68db      	ldr	r3, [r3, #12]
 80006f8:	4618      	mov	r0, r3
 80006fa:	f7ff fd93 	bl	8000224 <strlen>
 80006fe:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8000700:	69fb      	ldr	r3, [r7, #28]
 8000702:	683a      	ldr	r2, [r7, #0]
 8000704:	4413      	add	r3, r2
 8000706:	6979      	ldr	r1, [r7, #20]
 8000708:	4618      	mov	r0, r3
 800070a:	f001 f81f 	bl	800174c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800070e:	69fb      	ldr	r3, [r7, #28]
 8000710:	3304      	adds	r3, #4
 8000712:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8000714:	69fb      	ldr	r3, [r7, #28]
 8000716:	683a      	ldr	r2, [r7, #0]
 8000718:	18d0      	adds	r0, r2, r3
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	68db      	ldr	r3, [r3, #12]
 800071e:	697a      	ldr	r2, [r7, #20]
 8000720:	4619      	mov	r1, r3
 8000722:	f004 fb65 	bl	8004df0 <memcpy>
      offset += length_message_type;
 8000726:	69fa      	ldr	r2, [r7, #28]
 8000728:	697b      	ldr	r3, [r7, #20]
 800072a:	4413      	add	r3, r2
 800072c:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	691b      	ldr	r3, [r3, #16]
 8000732:	4618      	mov	r0, r3
 8000734:	f7ff fd76 	bl	8000224 <strlen>
 8000738:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 800073a:	69fb      	ldr	r3, [r7, #28]
 800073c:	683a      	ldr	r2, [r7, #0]
 800073e:	4413      	add	r3, r2
 8000740:	6939      	ldr	r1, [r7, #16]
 8000742:	4618      	mov	r0, r3
 8000744:	f001 f802 	bl	800174c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000748:	69fb      	ldr	r3, [r7, #28]
 800074a:	3304      	adds	r3, #4
 800074c:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 800074e:	69fb      	ldr	r3, [r7, #28]
 8000750:	683a      	ldr	r2, [r7, #0]
 8000752:	18d0      	adds	r0, r2, r3
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	691b      	ldr	r3, [r3, #16]
 8000758:	693a      	ldr	r2, [r7, #16]
 800075a:	4619      	mov	r1, r3
 800075c:	f004 fb48 	bl	8004df0 <memcpy>
      offset += length_md5sum;
 8000760:	69fa      	ldr	r2, [r7, #28]
 8000762:	693b      	ldr	r3, [r7, #16]
 8000764:	4413      	add	r3, r2
 8000766:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	695b      	ldr	r3, [r3, #20]
 800076c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 800076e:	68f9      	ldr	r1, [r7, #12]
 8000770:	69fb      	ldr	r3, [r7, #28]
 8000772:	683a      	ldr	r2, [r7, #0]
 8000774:	4413      	add	r3, r2
 8000776:	b2ca      	uxtb	r2, r1
 8000778:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	0a19      	lsrs	r1, r3, #8
 800077e:	69fb      	ldr	r3, [r7, #28]
 8000780:	3301      	adds	r3, #1
 8000782:	683a      	ldr	r2, [r7, #0]
 8000784:	4413      	add	r3, r2
 8000786:	b2ca      	uxtb	r2, r1
 8000788:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	0c19      	lsrs	r1, r3, #16
 800078e:	69fb      	ldr	r3, [r7, #28]
 8000790:	3302      	adds	r3, #2
 8000792:	683a      	ldr	r2, [r7, #0]
 8000794:	4413      	add	r3, r2
 8000796:	b2ca      	uxtb	r2, r1
 8000798:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	0e19      	lsrs	r1, r3, #24
 800079e:	69fb      	ldr	r3, [r7, #28]
 80007a0:	3303      	adds	r3, #3
 80007a2:	683a      	ldr	r2, [r7, #0]
 80007a4:	4413      	add	r3, r2
 80007a6:	b2ca      	uxtb	r2, r1
 80007a8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 80007aa:	69fb      	ldr	r3, [r7, #28]
 80007ac:	3304      	adds	r3, #4
 80007ae:	61fb      	str	r3, [r7, #28]
      return offset;
 80007b0:	69fb      	ldr	r3, [r7, #28]
    }
 80007b2:	4618      	mov	r0, r3
 80007b4:	3720      	adds	r7, #32
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}

080007ba <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80007ba:	b580      	push	{r7, lr}
 80007bc:	b08a      	sub	sp, #40	@ 0x28
 80007be:	af00      	add	r7, sp, #0
 80007c0:	6078      	str	r0, [r7, #4]
 80007c2:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80007c4:	2300      	movs	r3, #0
 80007c6:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 80007c8:	69bb      	ldr	r3, [r7, #24]
 80007ca:	683a      	ldr	r2, [r7, #0]
 80007cc:	4413      	add	r3, r2
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	461a      	mov	r2, r3
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	889b      	ldrh	r3, [r3, #4]
 80007da:	b21a      	sxth	r2, r3
 80007dc:	69bb      	ldr	r3, [r7, #24]
 80007de:	3301      	adds	r3, #1
 80007e0:	6839      	ldr	r1, [r7, #0]
 80007e2:	440b      	add	r3, r1
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	021b      	lsls	r3, r3, #8
 80007e8:	b21b      	sxth	r3, r3
 80007ea:	4313      	orrs	r3, r2
 80007ec:	b21b      	sxth	r3, r3
 80007ee:	b29a      	uxth	r2, r3
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 80007f4:	69bb      	ldr	r3, [r7, #24]
 80007f6:	3302      	adds	r3, #2
 80007f8:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 80007fa:	69bb      	ldr	r3, [r7, #24]
 80007fc:	683a      	ldr	r2, [r7, #0]
 80007fe:	441a      	add	r2, r3
 8000800:	f107 0314 	add.w	r3, r7, #20
 8000804:	4611      	mov	r1, r2
 8000806:	4618      	mov	r0, r3
 8000808:	f000 ffbe 	bl	8001788 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800080c:	69bb      	ldr	r3, [r7, #24]
 800080e:	3304      	adds	r3, #4
 8000810:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8000812:	69bb      	ldr	r3, [r7, #24]
 8000814:	627b      	str	r3, [r7, #36]	@ 0x24
 8000816:	e00b      	b.n	8000830 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x76>
          inbuffer[k-1]=inbuffer[k];
 8000818:	683a      	ldr	r2, [r7, #0]
 800081a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800081c:	441a      	add	r2, r3
 800081e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000820:	3b01      	subs	r3, #1
 8000822:	6839      	ldr	r1, [r7, #0]
 8000824:	440b      	add	r3, r1
 8000826:	7812      	ldrb	r2, [r2, #0]
 8000828:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800082a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800082c:	3301      	adds	r3, #1
 800082e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000830:	69ba      	ldr	r2, [r7, #24]
 8000832:	697b      	ldr	r3, [r7, #20]
 8000834:	4413      	add	r3, r2
 8000836:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000838:	429a      	cmp	r2, r3
 800083a:	d3ed      	bcc.n	8000818 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5e>
      }
      inbuffer[offset+length_topic_name-1]=0;
 800083c:	69ba      	ldr	r2, [r7, #24]
 800083e:	697b      	ldr	r3, [r7, #20]
 8000840:	4413      	add	r3, r2
 8000842:	3b01      	subs	r3, #1
 8000844:	683a      	ldr	r2, [r7, #0]
 8000846:	4413      	add	r3, r2
 8000848:	2200      	movs	r2, #0
 800084a:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 800084c:	69bb      	ldr	r3, [r7, #24]
 800084e:	3b01      	subs	r3, #1
 8000850:	683a      	ldr	r2, [r7, #0]
 8000852:	441a      	add	r2, r3
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8000858:	69ba      	ldr	r2, [r7, #24]
 800085a:	697b      	ldr	r3, [r7, #20]
 800085c:	4413      	add	r3, r2
 800085e:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8000860:	69bb      	ldr	r3, [r7, #24]
 8000862:	683a      	ldr	r2, [r7, #0]
 8000864:	441a      	add	r2, r3
 8000866:	f107 0310 	add.w	r3, r7, #16
 800086a:	4611      	mov	r1, r2
 800086c:	4618      	mov	r0, r3
 800086e:	f000 ff8b 	bl	8001788 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000872:	69bb      	ldr	r3, [r7, #24]
 8000874:	3304      	adds	r3, #4
 8000876:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8000878:	69bb      	ldr	r3, [r7, #24]
 800087a:	623b      	str	r3, [r7, #32]
 800087c:	e00b      	b.n	8000896 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xdc>
          inbuffer[k-1]=inbuffer[k];
 800087e:	683a      	ldr	r2, [r7, #0]
 8000880:	6a3b      	ldr	r3, [r7, #32]
 8000882:	441a      	add	r2, r3
 8000884:	6a3b      	ldr	r3, [r7, #32]
 8000886:	3b01      	subs	r3, #1
 8000888:	6839      	ldr	r1, [r7, #0]
 800088a:	440b      	add	r3, r1
 800088c:	7812      	ldrb	r2, [r2, #0]
 800088e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8000890:	6a3b      	ldr	r3, [r7, #32]
 8000892:	3301      	adds	r3, #1
 8000894:	623b      	str	r3, [r7, #32]
 8000896:	69ba      	ldr	r2, [r7, #24]
 8000898:	693b      	ldr	r3, [r7, #16]
 800089a:	4413      	add	r3, r2
 800089c:	6a3a      	ldr	r2, [r7, #32]
 800089e:	429a      	cmp	r2, r3
 80008a0:	d3ed      	bcc.n	800087e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc4>
      }
      inbuffer[offset+length_message_type-1]=0;
 80008a2:	69ba      	ldr	r2, [r7, #24]
 80008a4:	693b      	ldr	r3, [r7, #16]
 80008a6:	4413      	add	r3, r2
 80008a8:	3b01      	subs	r3, #1
 80008aa:	683a      	ldr	r2, [r7, #0]
 80008ac:	4413      	add	r3, r2
 80008ae:	2200      	movs	r2, #0
 80008b0:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 80008b2:	69bb      	ldr	r3, [r7, #24]
 80008b4:	3b01      	subs	r3, #1
 80008b6:	683a      	ldr	r2, [r7, #0]
 80008b8:	441a      	add	r2, r3
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 80008be:	69ba      	ldr	r2, [r7, #24]
 80008c0:	693b      	ldr	r3, [r7, #16]
 80008c2:	4413      	add	r3, r2
 80008c4:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 80008c6:	69bb      	ldr	r3, [r7, #24]
 80008c8:	683a      	ldr	r2, [r7, #0]
 80008ca:	441a      	add	r2, r3
 80008cc:	f107 030c 	add.w	r3, r7, #12
 80008d0:	4611      	mov	r1, r2
 80008d2:	4618      	mov	r0, r3
 80008d4:	f000 ff58 	bl	8001788 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80008d8:	69bb      	ldr	r3, [r7, #24]
 80008da:	3304      	adds	r3, #4
 80008dc:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80008de:	69bb      	ldr	r3, [r7, #24]
 80008e0:	61fb      	str	r3, [r7, #28]
 80008e2:	e00b      	b.n	80008fc <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x142>
          inbuffer[k-1]=inbuffer[k];
 80008e4:	683a      	ldr	r2, [r7, #0]
 80008e6:	69fb      	ldr	r3, [r7, #28]
 80008e8:	441a      	add	r2, r3
 80008ea:	69fb      	ldr	r3, [r7, #28]
 80008ec:	3b01      	subs	r3, #1
 80008ee:	6839      	ldr	r1, [r7, #0]
 80008f0:	440b      	add	r3, r1
 80008f2:	7812      	ldrb	r2, [r2, #0]
 80008f4:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80008f6:	69fb      	ldr	r3, [r7, #28]
 80008f8:	3301      	adds	r3, #1
 80008fa:	61fb      	str	r3, [r7, #28]
 80008fc:	69ba      	ldr	r2, [r7, #24]
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	4413      	add	r3, r2
 8000902:	69fa      	ldr	r2, [r7, #28]
 8000904:	429a      	cmp	r2, r3
 8000906:	d3ed      	bcc.n	80008e4 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x12a>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8000908:	69ba      	ldr	r2, [r7, #24]
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	4413      	add	r3, r2
 800090e:	3b01      	subs	r3, #1
 8000910:	683a      	ldr	r2, [r7, #0]
 8000912:	4413      	add	r3, r2
 8000914:	2200      	movs	r2, #0
 8000916:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8000918:	69bb      	ldr	r3, [r7, #24]
 800091a:	3b01      	subs	r3, #1
 800091c:	683a      	ldr	r2, [r7, #0]
 800091e:	441a      	add	r2, r3
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8000924:	69ba      	ldr	r2, [r7, #24]
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	4413      	add	r3, r2
 800092a:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 800092c:	2300      	movs	r3, #0
 800092e:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000930:	68bb      	ldr	r3, [r7, #8]
 8000932:	69ba      	ldr	r2, [r7, #24]
 8000934:	6839      	ldr	r1, [r7, #0]
 8000936:	440a      	add	r2, r1
 8000938:	7812      	ldrb	r2, [r2, #0]
 800093a:	4313      	orrs	r3, r2
 800093c:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800093e:	68ba      	ldr	r2, [r7, #8]
 8000940:	69bb      	ldr	r3, [r7, #24]
 8000942:	3301      	adds	r3, #1
 8000944:	6839      	ldr	r1, [r7, #0]
 8000946:	440b      	add	r3, r1
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	021b      	lsls	r3, r3, #8
 800094c:	4313      	orrs	r3, r2
 800094e:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000950:	68ba      	ldr	r2, [r7, #8]
 8000952:	69bb      	ldr	r3, [r7, #24]
 8000954:	3302      	adds	r3, #2
 8000956:	6839      	ldr	r1, [r7, #0]
 8000958:	440b      	add	r3, r1
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	041b      	lsls	r3, r3, #16
 800095e:	4313      	orrs	r3, r2
 8000960:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000962:	68ba      	ldr	r2, [r7, #8]
 8000964:	69bb      	ldr	r3, [r7, #24]
 8000966:	3303      	adds	r3, #3
 8000968:	6839      	ldr	r1, [r7, #0]
 800096a:	440b      	add	r3, r1
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	061b      	lsls	r3, r3, #24
 8000970:	4313      	orrs	r3, r2
 8000972:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8000974:	68ba      	ldr	r2, [r7, #8]
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 800097a:	69bb      	ldr	r3, [r7, #24]
 800097c:	3304      	adds	r3, #4
 800097e:	61bb      	str	r3, [r7, #24]
     return offset;
 8000980:	69bb      	ldr	r3, [r7, #24]
    }
 8000982:	4618      	mov	r0, r3
 8000984:	3728      	adds	r7, #40	@ 0x28
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
	...

0800098c <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 800098c:	b480      	push	{r7}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
 8000994:	4b02      	ldr	r3, [pc, #8]	@ (80009a0 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x14>)
 8000996:	4618      	mov	r0, r3
 8000998:	370c      	adds	r7, #12
 800099a:	46bd      	mov	sp, r7
 800099c:	bc80      	pop	{r7}
 800099e:	4770      	bx	lr
 80009a0:	08005078 	.word	0x08005078

080009a4 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
 80009ac:	4b02      	ldr	r3, [pc, #8]	@ (80009b8 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x14>)
 80009ae:	4618      	mov	r0, r3
 80009b0:	370c      	adds	r7, #12
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bc80      	pop	{r7}
 80009b6:	4770      	bx	lr
 80009b8:	08005094 	.word	0x08005094

080009bc <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	4618      	mov	r0, r3
 80009c8:	f7ff fd3e 	bl	8000448 <_ZN3ros3MsgC1Ev>
 80009cc:	4a06      	ldr	r2, [pc, #24]	@ (80009e8 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	601a      	str	r2, [r3, #0]
      level(0),
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	2200      	movs	r2, #0
 80009d6:	711a      	strb	r2, [r3, #4]
      msg("")
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	4a04      	ldr	r2, [pc, #16]	@ (80009ec <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 80009dc:	609a      	str	r2, [r3, #8]
    {
    }
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	4618      	mov	r0, r3
 80009e2:	3708      	adds	r7, #8
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	08005214 	.word	0x08005214
 80009ec:	08005074 	.word	0x08005074

080009f0 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
 80009f8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80009fa:	2300      	movs	r3, #0
 80009fc:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	683a      	ldr	r2, [r7, #0]
 8000a02:	4413      	add	r3, r2
 8000a04:	687a      	ldr	r2, [r7, #4]
 8000a06:	7912      	ldrb	r2, [r2, #4]
 8000a08:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	689b      	ldr	r3, [r3, #8]
 8000a14:	4618      	mov	r0, r3
 8000a16:	f7ff fc05 	bl	8000224 <strlen>
 8000a1a:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	683a      	ldr	r2, [r7, #0]
 8000a20:	4413      	add	r3, r2
 8000a22:	68b9      	ldr	r1, [r7, #8]
 8000a24:	4618      	mov	r0, r3
 8000a26:	f000 fe91 	bl	800174c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	3304      	adds	r3, #4
 8000a2e:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	683a      	ldr	r2, [r7, #0]
 8000a34:	18d0      	adds	r0, r2, r3
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	689b      	ldr	r3, [r3, #8]
 8000a3a:	68ba      	ldr	r2, [r7, #8]
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	f004 f9d7 	bl	8004df0 <memcpy>
      offset += length_msg;
 8000a42:	68fa      	ldr	r2, [r7, #12]
 8000a44:	68bb      	ldr	r3, [r7, #8]
 8000a46:	4413      	add	r3, r2
 8000a48:	60fb      	str	r3, [r7, #12]
      return offset;
 8000a4a:	68fb      	ldr	r3, [r7, #12]
    }
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	3710      	adds	r7, #16
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}

08000a54 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b086      	sub	sp, #24
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
 8000a5c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8000a62:	693b      	ldr	r3, [r7, #16]
 8000a64:	683a      	ldr	r2, [r7, #0]
 8000a66:	4413      	add	r3, r2
 8000a68:	781a      	ldrb	r2, [r3, #0]
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8000a6e:	693b      	ldr	r3, [r7, #16]
 8000a70:	3301      	adds	r3, #1
 8000a72:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8000a74:	693b      	ldr	r3, [r7, #16]
 8000a76:	683a      	ldr	r2, [r7, #0]
 8000a78:	441a      	add	r2, r3
 8000a7a:	f107 030c 	add.w	r3, r7, #12
 8000a7e:	4611      	mov	r1, r2
 8000a80:	4618      	mov	r0, r3
 8000a82:	f000 fe81 	bl	8001788 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000a86:	693b      	ldr	r3, [r7, #16]
 8000a88:	3304      	adds	r3, #4
 8000a8a:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8000a8c:	693b      	ldr	r3, [r7, #16]
 8000a8e:	617b      	str	r3, [r7, #20]
 8000a90:	e00b      	b.n	8000aaa <_ZN14rosserial_msgs3Log11deserializeEPh+0x56>
          inbuffer[k-1]=inbuffer[k];
 8000a92:	683a      	ldr	r2, [r7, #0]
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	441a      	add	r2, r3
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	3b01      	subs	r3, #1
 8000a9c:	6839      	ldr	r1, [r7, #0]
 8000a9e:	440b      	add	r3, r1
 8000aa0:	7812      	ldrb	r2, [r2, #0]
 8000aa2:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	3301      	adds	r3, #1
 8000aa8:	617b      	str	r3, [r7, #20]
 8000aaa:	693a      	ldr	r2, [r7, #16]
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	4413      	add	r3, r2
 8000ab0:	697a      	ldr	r2, [r7, #20]
 8000ab2:	429a      	cmp	r2, r3
 8000ab4:	d3ed      	bcc.n	8000a92 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3e>
      }
      inbuffer[offset+length_msg-1]=0;
 8000ab6:	693a      	ldr	r2, [r7, #16]
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	4413      	add	r3, r2
 8000abc:	3b01      	subs	r3, #1
 8000abe:	683a      	ldr	r2, [r7, #0]
 8000ac0:	4413      	add	r3, r2
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8000ac6:	693b      	ldr	r3, [r7, #16]
 8000ac8:	3b01      	subs	r3, #1
 8000aca:	683a      	ldr	r2, [r7, #0]
 8000acc:	441a      	add	r2, r3
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8000ad2:	693a      	ldr	r2, [r7, #16]
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	4413      	add	r3, r2
 8000ad8:	613b      	str	r3, [r7, #16]
     return offset;
 8000ada:	693b      	ldr	r3, [r7, #16]
    }
 8000adc:	4618      	mov	r0, r3
 8000ade:	3718      	adds	r7, #24
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}

08000ae4 <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
 8000aec:	4b02      	ldr	r3, [pc, #8]	@ (8000af8 <_ZN14rosserial_msgs3Log7getTypeEv+0x14>)
 8000aee:	4618      	mov	r0, r3
 8000af0:	370c      	adds	r7, #12
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bc80      	pop	{r7}
 8000af6:	4770      	bx	lr
 8000af8:	080050b8 	.word	0x080050b8

08000afc <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
 8000b04:	4b02      	ldr	r3, [pc, #8]	@ (8000b10 <_ZN14rosserial_msgs3Log6getMD5Ev+0x14>)
 8000b06:	4618      	mov	r0, r3
 8000b08:	370c      	adds	r7, #12
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bc80      	pop	{r7}
 8000b0e:	4770      	bx	lr
 8000b10:	080050cc 	.word	0x080050cc

08000b14 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f7ff fc92 	bl	8000448 <_ZN3ros3MsgC1Ev>
 8000b24:	4a11      	ldr	r2, [pc, #68]	@ (8000b6c <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	601a      	str	r2, [r3, #0]
      ints_length(0), st_ints(), ints(nullptr),
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	605a      	str	r2, [r3, #4]
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	2200      	movs	r2, #0
 8000b34:	609a      	str	r2, [r3, #8]
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	2200      	movs	r2, #0
 8000b3a:	60da      	str	r2, [r3, #12]
      floats_length(0), st_floats(), floats(nullptr),
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	2200      	movs	r2, #0
 8000b40:	611a      	str	r2, [r3, #16]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	f04f 0200 	mov.w	r2, #0
 8000b48:	615a      	str	r2, [r3, #20]
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	619a      	str	r2, [r3, #24]
      strings_length(0), st_strings(), strings(nullptr)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	2200      	movs	r2, #0
 8000b54:	61da      	str	r2, [r3, #28]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	2200      	movs	r2, #0
 8000b5a:	621a      	str	r2, [r3, #32]
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	2200      	movs	r2, #0
 8000b60:	625a      	str	r2, [r3, #36]	@ 0x24
    {
    }
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	4618      	mov	r0, r3
 8000b66:	3708      	adds	r7, #8
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	080051fc 	.word	0x080051fc

08000b70 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b08a      	sub	sp, #40	@ 0x28
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
 8000b78:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	627b      	str	r3, [r7, #36]	@ 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	6859      	ldr	r1, [r3, #4]
 8000b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b84:	683a      	ldr	r2, [r7, #0]
 8000b86:	4413      	add	r3, r2
 8000b88:	b2ca      	uxtb	r2, r1
 8000b8a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	0a19      	lsrs	r1, r3, #8
 8000b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b94:	3301      	adds	r3, #1
 8000b96:	683a      	ldr	r2, [r7, #0]
 8000b98:	4413      	add	r3, r2
 8000b9a:	b2ca      	uxtb	r2, r1
 8000b9c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	685b      	ldr	r3, [r3, #4]
 8000ba2:	0c19      	lsrs	r1, r3, #16
 8000ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ba6:	3302      	adds	r3, #2
 8000ba8:	683a      	ldr	r2, [r7, #0]
 8000baa:	4413      	add	r3, r2
 8000bac:	b2ca      	uxtb	r2, r1
 8000bae:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	0e19      	lsrs	r1, r3, #24
 8000bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bb8:	3303      	adds	r3, #3
 8000bba:	683a      	ldr	r2, [r7, #0]
 8000bbc:	4413      	add	r3, r2
 8000bbe:	b2ca      	uxtb	r2, r1
 8000bc0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8000bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bc4:	3304      	adds	r3, #4
 8000bc6:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8000bc8:	2300      	movs	r3, #0
 8000bca:	623b      	str	r3, [r7, #32]
 8000bcc:	e02a      	b.n	8000c24 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xb4>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	68da      	ldr	r2, [r3, #12]
 8000bd2:	6a3b      	ldr	r3, [r7, #32]
 8000bd4:	009b      	lsls	r3, r3, #2
 8000bd6:	4413      	add	r3, r2
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8000bdc:	6939      	ldr	r1, [r7, #16]
 8000bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000be0:	683a      	ldr	r2, [r7, #0]
 8000be2:	4413      	add	r3, r2
 8000be4:	b2ca      	uxtb	r2, r1
 8000be6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8000be8:	693b      	ldr	r3, [r7, #16]
 8000bea:	0a19      	lsrs	r1, r3, #8
 8000bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bee:	3301      	adds	r3, #1
 8000bf0:	683a      	ldr	r2, [r7, #0]
 8000bf2:	4413      	add	r3, r2
 8000bf4:	b2ca      	uxtb	r2, r1
 8000bf6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8000bf8:	693b      	ldr	r3, [r7, #16]
 8000bfa:	0c19      	lsrs	r1, r3, #16
 8000bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bfe:	3302      	adds	r3, #2
 8000c00:	683a      	ldr	r2, [r7, #0]
 8000c02:	4413      	add	r3, r2
 8000c04:	b2ca      	uxtb	r2, r1
 8000c06:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8000c08:	693b      	ldr	r3, [r7, #16]
 8000c0a:	0e19      	lsrs	r1, r3, #24
 8000c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c0e:	3303      	adds	r3, #3
 8000c10:	683a      	ldr	r2, [r7, #0]
 8000c12:	4413      	add	r3, r2
 8000c14:	b2ca      	uxtb	r2, r1
 8000c16:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8000c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c1a:	3304      	adds	r3, #4
 8000c1c:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8000c1e:	6a3b      	ldr	r3, [r7, #32]
 8000c20:	3301      	adds	r3, #1
 8000c22:	623b      	str	r3, [r7, #32]
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	6a3a      	ldr	r2, [r7, #32]
 8000c2a:	429a      	cmp	r2, r3
 8000c2c:	d3cf      	bcc.n	8000bce <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	6919      	ldr	r1, [r3, #16]
 8000c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c34:	683a      	ldr	r2, [r7, #0]
 8000c36:	4413      	add	r3, r2
 8000c38:	b2ca      	uxtb	r2, r1
 8000c3a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	691b      	ldr	r3, [r3, #16]
 8000c40:	0a19      	lsrs	r1, r3, #8
 8000c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c44:	3301      	adds	r3, #1
 8000c46:	683a      	ldr	r2, [r7, #0]
 8000c48:	4413      	add	r3, r2
 8000c4a:	b2ca      	uxtb	r2, r1
 8000c4c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	691b      	ldr	r3, [r3, #16]
 8000c52:	0c19      	lsrs	r1, r3, #16
 8000c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c56:	3302      	adds	r3, #2
 8000c58:	683a      	ldr	r2, [r7, #0]
 8000c5a:	4413      	add	r3, r2
 8000c5c:	b2ca      	uxtb	r2, r1
 8000c5e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	691b      	ldr	r3, [r3, #16]
 8000c64:	0e19      	lsrs	r1, r3, #24
 8000c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c68:	3303      	adds	r3, #3
 8000c6a:	683a      	ldr	r2, [r7, #0]
 8000c6c:	4413      	add	r3, r2
 8000c6e:	b2ca      	uxtb	r2, r1
 8000c70:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8000c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c74:	3304      	adds	r3, #4
 8000c76:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8000c78:	2300      	movs	r3, #0
 8000c7a:	61fb      	str	r3, [r7, #28]
 8000c7c:	e02a      	b.n	8000cd4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x164>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	699a      	ldr	r2, [r3, #24]
 8000c82:	69fb      	ldr	r3, [r7, #28]
 8000c84:	009b      	lsls	r3, r3, #2
 8000c86:	4413      	add	r3, r2
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8000c8c:	68f9      	ldr	r1, [r7, #12]
 8000c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c90:	683a      	ldr	r2, [r7, #0]
 8000c92:	4413      	add	r3, r2
 8000c94:	b2ca      	uxtb	r2, r1
 8000c96:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	0a19      	lsrs	r1, r3, #8
 8000c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	683a      	ldr	r2, [r7, #0]
 8000ca2:	4413      	add	r3, r2
 8000ca4:	b2ca      	uxtb	r2, r1
 8000ca6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	0c19      	lsrs	r1, r3, #16
 8000cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cae:	3302      	adds	r3, #2
 8000cb0:	683a      	ldr	r2, [r7, #0]
 8000cb2:	4413      	add	r3, r2
 8000cb4:	b2ca      	uxtb	r2, r1
 8000cb6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	0e19      	lsrs	r1, r3, #24
 8000cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cbe:	3303      	adds	r3, #3
 8000cc0:	683a      	ldr	r2, [r7, #0]
 8000cc2:	4413      	add	r3, r2
 8000cc4:	b2ca      	uxtb	r2, r1
 8000cc6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8000cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cca:	3304      	adds	r3, #4
 8000ccc:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	3301      	adds	r3, #1
 8000cd2:	61fb      	str	r3, [r7, #28]
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	691b      	ldr	r3, [r3, #16]
 8000cd8:	69fa      	ldr	r2, [r7, #28]
 8000cda:	429a      	cmp	r2, r3
 8000cdc:	d3cf      	bcc.n	8000c7e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10e>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	69d9      	ldr	r1, [r3, #28]
 8000ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ce4:	683a      	ldr	r2, [r7, #0]
 8000ce6:	4413      	add	r3, r2
 8000ce8:	b2ca      	uxtb	r2, r1
 8000cea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	69db      	ldr	r3, [r3, #28]
 8000cf0:	0a19      	lsrs	r1, r3, #8
 8000cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	683a      	ldr	r2, [r7, #0]
 8000cf8:	4413      	add	r3, r2
 8000cfa:	b2ca      	uxtb	r2, r1
 8000cfc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	69db      	ldr	r3, [r3, #28]
 8000d02:	0c19      	lsrs	r1, r3, #16
 8000d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d06:	3302      	adds	r3, #2
 8000d08:	683a      	ldr	r2, [r7, #0]
 8000d0a:	4413      	add	r3, r2
 8000d0c:	b2ca      	uxtb	r2, r1
 8000d0e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	69db      	ldr	r3, [r3, #28]
 8000d14:	0e19      	lsrs	r1, r3, #24
 8000d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d18:	3303      	adds	r3, #3
 8000d1a:	683a      	ldr	r2, [r7, #0]
 8000d1c:	4413      	add	r3, r2
 8000d1e:	b2ca      	uxtb	r2, r1
 8000d20:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8000d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d24:	3304      	adds	r3, #4
 8000d26:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8000d28:	2300      	movs	r3, #0
 8000d2a:	61bb      	str	r3, [r7, #24]
 8000d2c:	e027      	b.n	8000d7e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x20e>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000d32:	69bb      	ldr	r3, [r7, #24]
 8000d34:	009b      	lsls	r3, r3, #2
 8000d36:	4413      	add	r3, r2
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f7ff fa72 	bl	8000224 <strlen>
 8000d40:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8000d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d44:	683a      	ldr	r2, [r7, #0]
 8000d46:	4413      	add	r3, r2
 8000d48:	6979      	ldr	r1, [r7, #20]
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f000 fcfe 	bl	800174c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d52:	3304      	adds	r3, #4
 8000d54:	627b      	str	r3, [r7, #36]	@ 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8000d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d58:	683a      	ldr	r2, [r7, #0]
 8000d5a:	18d0      	adds	r0, r2, r3
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000d60:	69bb      	ldr	r3, [r7, #24]
 8000d62:	009b      	lsls	r3, r3, #2
 8000d64:	4413      	add	r3, r2
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	697a      	ldr	r2, [r7, #20]
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	f004 f840 	bl	8004df0 <memcpy>
      offset += length_stringsi;
 8000d70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	4413      	add	r3, r2
 8000d76:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8000d78:	69bb      	ldr	r3, [r7, #24]
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	61bb      	str	r3, [r7, #24]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	69db      	ldr	r3, [r3, #28]
 8000d82:	69ba      	ldr	r2, [r7, #24]
 8000d84:	429a      	cmp	r2, r3
 8000d86:	d3d2      	bcc.n	8000d2e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1be>
      }
      return offset;
 8000d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	3728      	adds	r7, #40	@ 0x28
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}

08000d92 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8000d92:	b580      	push	{r7, lr}
 8000d94:	b08e      	sub	sp, #56	@ 0x38
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	6078      	str	r0, [r7, #4]
 8000d9a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	637b      	str	r3, [r7, #52]	@ 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8000da0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000da2:	683a      	ldr	r2, [r7, #0]
 8000da4:	4413      	add	r3, r2
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8000daa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000dac:	3301      	adds	r3, #1
 8000dae:	683a      	ldr	r2, [r7, #0]
 8000db0:	4413      	add	r3, r2
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	021b      	lsls	r3, r3, #8
 8000db6:	6a3a      	ldr	r2, [r7, #32]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8000dbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000dbe:	3302      	adds	r3, #2
 8000dc0:	683a      	ldr	r2, [r7, #0]
 8000dc2:	4413      	add	r3, r2
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	041b      	lsls	r3, r3, #16
 8000dc8:	6a3a      	ldr	r2, [r7, #32]
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8000dce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000dd0:	3303      	adds	r3, #3
 8000dd2:	683a      	ldr	r2, [r7, #0]
 8000dd4:	4413      	add	r3, r2
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	061b      	lsls	r3, r3, #24
 8000dda:	6a3a      	ldr	r2, [r7, #32]
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8000de0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000de2:	3304      	adds	r3, #4
 8000de4:	637b      	str	r3, [r7, #52]	@ 0x34
      if(ints_lengthT > ints_length)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	6a3a      	ldr	r2, [r7, #32]
 8000dec:	429a      	cmp	r2, r3
 8000dee:	d90a      	bls.n	8000e06 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	68da      	ldr	r2, [r3, #12]
 8000df4:	6a3b      	ldr	r3, [r7, #32]
 8000df6:	009b      	lsls	r3, r3, #2
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4610      	mov	r0, r2
 8000dfc:	f003 ff8e 	bl	8004d1c <realloc>
 8000e00:	4602      	mov	r2, r0
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6a3a      	ldr	r2, [r7, #32]
 8000e0a:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	633b      	str	r3, [r7, #48]	@ 0x30
 8000e10:	e035      	b.n	8000e7e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xec>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8000e12:	2300      	movs	r3, #0
 8000e14:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000e1a:	6839      	ldr	r1, [r7, #0]
 8000e1c:	440a      	add	r2, r1
 8000e1e:	7812      	ldrb	r2, [r2, #0]
 8000e20:	4313      	orrs	r3, r2
 8000e22:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000e24:	697a      	ldr	r2, [r7, #20]
 8000e26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e28:	3301      	adds	r3, #1
 8000e2a:	6839      	ldr	r1, [r7, #0]
 8000e2c:	440b      	add	r3, r1
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	021b      	lsls	r3, r3, #8
 8000e32:	4313      	orrs	r3, r2
 8000e34:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000e36:	697a      	ldr	r2, [r7, #20]
 8000e38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e3a:	3302      	adds	r3, #2
 8000e3c:	6839      	ldr	r1, [r7, #0]
 8000e3e:	440b      	add	r3, r1
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	041b      	lsls	r3, r3, #16
 8000e44:	4313      	orrs	r3, r2
 8000e46:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000e48:	697a      	ldr	r2, [r7, #20]
 8000e4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e4c:	3303      	adds	r3, #3
 8000e4e:	6839      	ldr	r1, [r7, #0]
 8000e50:	440b      	add	r3, r1
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	061b      	lsls	r3, r3, #24
 8000e56:	4313      	orrs	r3, r2
 8000e58:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8000e5a:	697a      	ldr	r2, [r7, #20]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8000e60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e62:	3304      	adds	r3, #4
 8000e64:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	68da      	ldr	r2, [r3, #12]
 8000e6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e6c:	009b      	lsls	r3, r3, #2
 8000e6e:	4413      	add	r3, r2
 8000e70:	687a      	ldr	r2, [r7, #4]
 8000e72:	3208      	adds	r2, #8
 8000e74:	6812      	ldr	r2, [r2, #0]
 8000e76:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8000e78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e7a:	3301      	adds	r3, #1
 8000e7c:	633b      	str	r3, [r7, #48]	@ 0x30
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000e84:	429a      	cmp	r2, r3
 8000e86:	d3c4      	bcc.n	8000e12 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x80>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8000e88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e8a:	683a      	ldr	r2, [r7, #0]
 8000e8c:	4413      	add	r3, r2
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8000e92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e94:	3301      	adds	r3, #1
 8000e96:	683a      	ldr	r2, [r7, #0]
 8000e98:	4413      	add	r3, r2
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	021b      	lsls	r3, r3, #8
 8000e9e:	69fa      	ldr	r2, [r7, #28]
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8000ea4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ea6:	3302      	adds	r3, #2
 8000ea8:	683a      	ldr	r2, [r7, #0]
 8000eaa:	4413      	add	r3, r2
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	041b      	lsls	r3, r3, #16
 8000eb0:	69fa      	ldr	r2, [r7, #28]
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8000eb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000eb8:	3303      	adds	r3, #3
 8000eba:	683a      	ldr	r2, [r7, #0]
 8000ebc:	4413      	add	r3, r2
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	061b      	lsls	r3, r3, #24
 8000ec2:	69fa      	ldr	r2, [r7, #28]
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8000ec8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000eca:	3304      	adds	r3, #4
 8000ecc:	637b      	str	r3, [r7, #52]	@ 0x34
      if(floats_lengthT > floats_length)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	691b      	ldr	r3, [r3, #16]
 8000ed2:	69fa      	ldr	r2, [r7, #28]
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	d90a      	bls.n	8000eee <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	699a      	ldr	r2, [r3, #24]
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	009b      	lsls	r3, r3, #2
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4610      	mov	r0, r2
 8000ee4:	f003 ff1a 	bl	8004d1c <realloc>
 8000ee8:	4602      	mov	r2, r0
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	69fa      	ldr	r2, [r7, #28]
 8000ef2:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000ef8:	e035      	b.n	8000f66 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1d4>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8000efa:	2300      	movs	r3, #0
 8000efc:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000efe:	693b      	ldr	r3, [r7, #16]
 8000f00:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000f02:	6839      	ldr	r1, [r7, #0]
 8000f04:	440a      	add	r2, r1
 8000f06:	7812      	ldrb	r2, [r2, #0]
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000f0c:	693a      	ldr	r2, [r7, #16]
 8000f0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f10:	3301      	adds	r3, #1
 8000f12:	6839      	ldr	r1, [r7, #0]
 8000f14:	440b      	add	r3, r1
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	021b      	lsls	r3, r3, #8
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f22:	3302      	adds	r3, #2
 8000f24:	6839      	ldr	r1, [r7, #0]
 8000f26:	440b      	add	r3, r1
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	041b      	lsls	r3, r3, #16
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000f30:	693a      	ldr	r2, [r7, #16]
 8000f32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f34:	3303      	adds	r3, #3
 8000f36:	6839      	ldr	r1, [r7, #0]
 8000f38:	440b      	add	r3, r1
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	061b      	lsls	r3, r3, #24
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8000f48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f4a:	3304      	adds	r3, #4
 8000f4c:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	699a      	ldr	r2, [r3, #24]
 8000f52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f54:	009b      	lsls	r3, r3, #2
 8000f56:	4413      	add	r3, r2
 8000f58:	687a      	ldr	r2, [r7, #4]
 8000f5a:	3214      	adds	r2, #20
 8000f5c:	6812      	ldr	r2, [r2, #0]
 8000f5e:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8000f60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f62:	3301      	adds	r3, #1
 8000f64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	691b      	ldr	r3, [r3, #16]
 8000f6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d3c4      	bcc.n	8000efa <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x168>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8000f70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f72:	683a      	ldr	r2, [r7, #0]
 8000f74:	4413      	add	r3, r2
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8000f7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	683a      	ldr	r2, [r7, #0]
 8000f80:	4413      	add	r3, r2
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	021b      	lsls	r3, r3, #8
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8000f8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f8e:	3302      	adds	r3, #2
 8000f90:	683a      	ldr	r2, [r7, #0]
 8000f92:	4413      	add	r3, r2
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	041b      	lsls	r3, r3, #16
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8000f9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000fa0:	3303      	adds	r3, #3
 8000fa2:	683a      	ldr	r2, [r7, #0]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	061b      	lsls	r3, r3, #24
 8000faa:	69ba      	ldr	r2, [r7, #24]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8000fb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000fb2:	3304      	adds	r3, #4
 8000fb4:	637b      	str	r3, [r7, #52]	@ 0x34
      if(strings_lengthT > strings_length)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	69db      	ldr	r3, [r3, #28]
 8000fba:	69ba      	ldr	r2, [r7, #24]
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	d90a      	bls.n	8000fd6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000fc4:	69bb      	ldr	r3, [r7, #24]
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4610      	mov	r0, r2
 8000fcc:	f003 fea6 	bl	8004d1c <realloc>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	625a      	str	r2, [r3, #36]	@ 0x24
      strings_length = strings_lengthT;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8000fdc:	2300      	movs	r3, #0
 8000fde:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000fe0:	e03e      	b.n	8001060 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2ce>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8000fe2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000fe4:	683a      	ldr	r2, [r7, #0]
 8000fe6:	441a      	add	r2, r3
 8000fe8:	f107 030c 	add.w	r3, r7, #12
 8000fec:	4611      	mov	r1, r2
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f000 fbca 	bl	8001788 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000ff4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ff6:	3304      	adds	r3, #4
 8000ff8:	637b      	str	r3, [r7, #52]	@ 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8000ffa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ffc:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ffe:	e00b      	b.n	8001018 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x286>
          inbuffer[k-1]=inbuffer[k];
 8001000:	683a      	ldr	r2, [r7, #0]
 8001002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001004:	441a      	add	r2, r3
 8001006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001008:	3b01      	subs	r3, #1
 800100a:	6839      	ldr	r1, [r7, #0]
 800100c:	440b      	add	r3, r1
 800100e:	7812      	ldrb	r2, [r2, #0]
 8001010:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001014:	3301      	adds	r3, #1
 8001016:	627b      	str	r3, [r7, #36]	@ 0x24
 8001018:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	4413      	add	r3, r2
 800101e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001020:	429a      	cmp	r2, r3
 8001022:	d3ed      	bcc.n	8001000 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26e>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8001024:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	4413      	add	r3, r2
 800102a:	3b01      	subs	r3, #1
 800102c:	683a      	ldr	r2, [r7, #0]
 800102e:	4413      	add	r3, r2
 8001030:	2200      	movs	r2, #0
 8001032:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8001034:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001036:	3b01      	subs	r3, #1
 8001038:	683a      	ldr	r2, [r7, #0]
 800103a:	441a      	add	r2, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8001040:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	4413      	add	r3, r2
 8001046:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800104c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	4413      	add	r3, r2
 8001052:	687a      	ldr	r2, [r7, #4]
 8001054:	3220      	adds	r2, #32
 8001056:	6812      	ldr	r2, [r2, #0]
 8001058:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 800105a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800105c:	3301      	adds	r3, #1
 800105e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	69db      	ldr	r3, [r3, #28]
 8001064:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001066:	429a      	cmp	r2, r3
 8001068:	d3bb      	bcc.n	8000fe2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x250>
      }
     return offset;
 800106a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 800106c:	4618      	mov	r0, r3
 800106e:	3738      	adds	r7, #56	@ 0x38
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}

08001074 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	4b02      	ldr	r3, [pc, #8]	@ (8001088 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x14>)
 800107e:	4618      	mov	r0, r3
 8001080:	370c      	adds	r7, #12
 8001082:	46bd      	mov	sp, r7
 8001084:	bc80      	pop	{r7}
 8001086:	4770      	bx	lr
 8001088:	08005198 	.word	0x08005198

0800108c <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	4b02      	ldr	r3, [pc, #8]	@ (80010a0 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x14>)
 8001096:	4618      	mov	r0, r3
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	bc80      	pop	{r7}
 800109e:	4770      	bx	lr
 80010a0:	080050f0 	.word	0x080050f0

080010a4 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 80010a4:	b480      	push	{r7}
 80010a6:	b085      	sub	sp, #20
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	60f8      	str	r0, [r7, #12]
 80010ac:	60b9      	str	r1, [r7, #8]
 80010ae:	607a      	str	r2, [r7, #4]
 80010b0:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	68ba      	ldr	r2, [r7, #8]
 80010b6:	601a      	str	r2, [r3, #0]
    msg_(msg),
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	687a      	ldr	r2, [r7, #4]
 80010bc:	605a      	str	r2, [r3, #4]
    endpoint_(endpoint) {};
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	683a      	ldr	r2, [r7, #0]
 80010c2:	611a      	str	r2, [r3, #16]
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	4618      	mov	r0, r3
 80010c8:	3714      	adds	r7, #20
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bc80      	pop	{r7}
 80010ce:	4770      	bx	lr

080010d0 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	68d8      	ldr	r0, [r3, #12]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	68db      	ldr	r3, [r3, #12]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	687a      	ldr	r2, [r7, #4]
 80010e8:	6891      	ldr	r1, [r2, #8]
 80010ea:	683a      	ldr	r2, [r7, #0]
 80010ec:	4798      	blx	r3
 80010ee:	4603      	mov	r3, r0
  };
 80010f0:	4618      	mov	r0, r3
 80010f2:	3708      	adds	r7, #8
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	691b      	ldr	r3, [r3, #16]
  }
 8001104:	4618      	mov	r0, r3
 8001106:	370c      	adds	r7, #12
 8001108:	46bd      	mov	sp, r7
 800110a:	bc80      	pop	{r7}
 800110c:	4770      	bx	lr

0800110e <_ZN10SerialCommC1ER20__UART_HandleTypeDef>:
    uint16_t tx_tail = 0;
    uint16_t rx_tail = 0;
    static constexpr uint16_t buf_mask = buffer_size - 1;

public:
    SerialComm(UART_HandleTypeDef &huart) : huart(huart)
 800110e:	b480      	push	{r7}
 8001110:	b083      	sub	sp, #12
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
 8001116:	6039      	str	r1, [r7, #0]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	683a      	ldr	r2, [r7, #0]
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001124:	2201      	movs	r2, #1
 8001126:	711a      	strb	r2, [r3, #4]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800112e:	2200      	movs	r2, #0
 8001130:	80da      	strh	r2, [r3, #6]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001138:	2200      	movs	r2, #0
 800113a:	811a      	strh	r2, [r3, #8]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001142:	2200      	movs	r2, #0
 8001144:	815a      	strh	r2, [r3, #10]
    {
        // Other initialization code
    }
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4618      	mov	r0, r3
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	bc80      	pop	{r7}
 8001150:	4770      	bx	lr

08001152 <_ZN10SerialComm4initEv>:

    void init(void)
 8001152:	b580      	push	{r7, lr}
 8001154:	b082      	sub	sp, #8
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
    {
        reset_rbuf();
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f000 f90e 	bl	800137c <_ZN10SerialComm10reset_rbufEv>
    }
 8001160:	bf00      	nop
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}

08001168 <_ZN10SerialComm4readEv>:

    /** @brief Read a character from the Rx buffer using the FIFO method.
     * 
     * @return The read character.
    */
    int read(void)
 8001168:	b480      	push	{r7}
 800116a:	b085      	sub	sp, #20
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
    {
       uint16_t rx_head = (buffer_size - huart.hdmarx->Instance->CNDTR) & buf_mask;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	b29b      	uxth	r3, r3
 800117c:	f5c3 5300 	rsb	r3, r3, #8192	@ 0x2000
 8001180:	b29b      	uxth	r3, r3
 8001182:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001186:	81fb      	strh	r3, [r7, #14]

        // Check for overlapping (which is bad, data will be overwritten)
        if (rx_tail == rx_head)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800118e:	895b      	ldrh	r3, [r3, #10]
 8001190:	89fa      	ldrh	r2, [r7, #14]
 8001192:	429a      	cmp	r2, r3
 8001194:	d102      	bne.n	800119c <_ZN10SerialComm4readEv+0x34>
        {
            return -1;
 8001196:	f04f 33ff 	mov.w	r3, #4294967295
 800119a:	e01d      	b.n	80011d8 <_ZN10SerialComm4readEv+0x70>
        }

        // Read a value and increment the read pointer (TAIL).
        int c = (int) rx_buf[rx_tail++];
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80011a2:	895b      	ldrh	r3, [r3, #10]
 80011a4:	1c5a      	adds	r2, r3, #1
 80011a6:	b291      	uxth	r1, r2
 80011a8:	687a      	ldr	r2, [r7, #4]
 80011aa:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 80011ae:	8151      	strh	r1, [r2, #10]
 80011b0:	461a      	mov	r2, r3
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4413      	add	r3, r2
 80011b6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80011ba:	3304      	adds	r3, #4
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	60bb      	str	r3, [r7, #8]
        rx_tail &= buf_mask;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80011c6:	895b      	ldrh	r3, [r3, #10]
 80011c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80011cc:	b29a      	uxth	r2, r3
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80011d4:	815a      	strh	r2, [r3, #10]

        return c;
 80011d6:	68bb      	ldr	r3, [r7, #8]
    }
 80011d8:	4618      	mov	r0, r3
 80011da:	3714      	adds	r7, #20
 80011dc:	46bd      	mov	sp, r7
 80011de:	bc80      	pop	{r7}
 80011e0:	4770      	bx	lr

080011e2 <_ZN10SerialComm5writeEPKhi>:
     * @param data The pointer to the data string.
     * @param length The length of the data string.
     * 
     * @return Void. 
    */
    void write(const uint8_t* const data, const int length)
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b086      	sub	sp, #24
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	60f8      	str	r0, [r7, #12]
 80011ea:	60b9      	str	r1, [r7, #8]
 80011ec:	607a      	str	r2, [r7, #4]
    {
        // Faulty data guard.
        if (length > buffer_size || length < 1)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80011f4:	dc46      	bgt.n	8001284 <_ZN10SerialComm5writeEPKhi+0xa2>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	dd43      	ble.n	8001284 <_ZN10SerialComm5writeEPKhi+0xa2>
        {
            return;
        }

        // Wait for the completion of the previous Tx transfer.
        while (!is_tx_cplt);
 80011fc:	bf00      	nop
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001204:	791b      	ldrb	r3, [r3, #4]
 8001206:	f083 0301 	eor.w	r3, r3, #1
 800120a:	b2db      	uxtb	r3, r3
 800120c:	2b00      	cmp	r3, #0
 800120e:	d1f6      	bne.n	80011fe <_ZN10SerialComm5writeEPKhi+0x1c>

        // Check if the data is bigger than the remaining storage
        int w_len = (length <= (buffer_size - tx_head)) ? length : (buffer_size - tx_head);
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001216:	88db      	ldrh	r3, [r3, #6]
 8001218:	f5c3 5300 	rsb	r3, r3, #8192	@ 0x2000
 800121c:	687a      	ldr	r2, [r7, #4]
 800121e:	4293      	cmp	r3, r2
 8001220:	bfa8      	it	ge
 8001222:	4613      	movge	r3, r2
 8001224:	617b      	str	r3, [r7, #20]

        // Write the data and increment the write pointer (TX_HEAD)
        memcpy(&tx_buf[tx_head], data, w_len);
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800122c:	88db      	ldrh	r3, [r3, #6]
 800122e:	461a      	mov	r2, r3
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	4413      	add	r3, r2
 8001234:	3304      	adds	r3, #4
 8001236:	697a      	ldr	r2, [r7, #20]
 8001238:	68b9      	ldr	r1, [r7, #8]
 800123a:	4618      	mov	r0, r3
 800123c:	f003 fdd8 	bl	8004df0 <memcpy>
        tx_head = (tx_head + length) & buf_mask;
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001246:	88da      	ldrh	r2, [r3, #6]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	b29b      	uxth	r3, r3
 800124c:	4413      	add	r3, r2
 800124e:	b29b      	uxth	r3, r3
 8001250:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001254:	b29a      	uxth	r2, r3
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800125c:	80da      	strh	r2, [r3, #6]

        // Reset the TX_HEAD pointer and write the remaining data
        // (If data is bigger than the previous remaining data)
        if (length != w_len)
 800125e:	687a      	ldr	r2, [r7, #4]
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	429a      	cmp	r2, r3
 8001264:	d00a      	beq.n	800127c <_ZN10SerialComm5writeEPKhi+0x9a>
        {
            memcpy(tx_buf, &data[w_len], length - w_len);
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	1d18      	adds	r0, r3, #4
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	68ba      	ldr	r2, [r7, #8]
 800126e:	18d1      	adds	r1, r2, r3
 8001270:	687a      	ldr	r2, [r7, #4]
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	461a      	mov	r2, r3
 8001278:	f003 fdba 	bl	8004df0 <memcpy>
        }

        // TODO: Start transfering
        flush();
 800127c:	68f8      	ldr	r0, [r7, #12]
 800127e:	f000 f805 	bl	800128c <_ZN10SerialComm5flushEv>
 8001282:	e000      	b.n	8001286 <_ZN10SerialComm5writeEPKhi+0xa4>
            return;
 8001284:	bf00      	nop
    }
 8001286:	3718      	adds	r7, #24
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}

0800128c <_ZN10SerialComm5flushEv>:

    /** @brief Transmit the just written data in the Tx buffer
     * 
     * @return void.
    */
    void flush()
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
    {
        if (is_tx_cplt)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800129a:	791b      	ldrb	r3, [r3, #4]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d05b      	beq.n	8001358 <_ZN10SerialComm5flushEv+0xcc>
        {
            // if HEAD == TAIL => The buffer is empty => Nothing to send.
            if (tx_head != tx_tail)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80012a6:	88da      	ldrh	r2, [r3, #6]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80012ae:	891b      	ldrh	r3, [r3, #8]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d04c      	beq.n	800134e <_ZN10SerialComm5flushEv+0xc2>
            {
                uint16_t len = 0;
 80012b4:	2300      	movs	r3, #0
 80012b6:	81fb      	strh	r3, [r7, #14]

                if (tx_tail < tx_head)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80012be:	891a      	ldrh	r2, [r3, #8]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80012c6:	88db      	ldrh	r3, [r3, #6]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d218      	bcs.n	80012fe <_ZN10SerialComm5flushEv+0x72>
                {
                    len = tx_head - tx_tail;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80012d2:	88da      	ldrh	r2, [r3, #6]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80012da:	891b      	ldrh	r3, [r3, #8]
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	81fb      	strh	r3, [r7, #14]
                    HAL_UART_Transmit_DMA(&huart, &tx_buf[tx_tail], len);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6818      	ldr	r0, [r3, #0]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80012ea:	891b      	ldrh	r3, [r3, #8]
 80012ec:	461a      	mov	r2, r3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4413      	add	r3, r2
 80012f2:	3304      	adds	r3, #4
 80012f4:	89fa      	ldrh	r2, [r7, #14]
 80012f6:	4619      	mov	r1, r3
 80012f8:	f002 fd7e 	bl	8003df8 <HAL_UART_Transmit_DMA>
 80012fc:	e01f      	b.n	800133e <_ZN10SerialComm5flushEv+0xb2>
                }
                else
                {
                    len = buffer_size - tx_tail;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001304:	891b      	ldrh	r3, [r3, #8]
 8001306:	f5c3 5300 	rsb	r3, r3, #8192	@ 0x2000
 800130a:	81fb      	strh	r3, [r7, #14]
                    HAL_UART_Transmit_DMA(&huart, &tx_buf[tx_tail], len);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6818      	ldr	r0, [r3, #0]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001316:	891b      	ldrh	r3, [r3, #8]
 8001318:	461a      	mov	r2, r3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4413      	add	r3, r2
 800131e:	3304      	adds	r3, #4
 8001320:	89fa      	ldrh	r2, [r7, #14]
 8001322:	4619      	mov	r1, r3
 8001324:	f002 fd68 	bl	8003df8 <HAL_UART_Transmit_DMA>
                    HAL_UART_Transmit_DMA(&huart, tx_buf, tx_head);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6818      	ldr	r0, [r3, #0]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	1d19      	adds	r1, r3, #4
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001336:	88db      	ldrh	r3, [r3, #6]
 8001338:	461a      	mov	r2, r3
 800133a:	f002 fd5d 	bl	8003df8 <HAL_UART_Transmit_DMA>
                }
                
                tx_tail = tx_head;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001344:	88da      	ldrh	r2, [r3, #6]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800134c:	811a      	strh	r2, [r3, #8]
            }
            
            is_tx_cplt = false;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001354:	2200      	movs	r2, #0
 8001356:	711a      	strb	r2, [r3, #4]
        }
    }
 8001358:	bf00      	nop
 800135a:	3710      	adds	r7, #16
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}

08001360 <_ZN10SerialComm11set_tx_cpltEv>:

    void set_tx_cplt(void)
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
    {
        is_tx_cplt = true;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800136e:	2201      	movs	r2, #1
 8001370:	711a      	strb	r2, [r3, #4]
    }
 8001372:	bf00      	nop
 8001374:	370c      	adds	r7, #12
 8001376:	46bd      	mov	sp, r7
 8001378:	bc80      	pop	{r7}
 800137a:	4770      	bx	lr

0800137c <_ZN10SerialComm10reset_rbufEv>:

    void reset_rbuf(void)
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
    {
        HAL_UART_Receive_DMA(&huart, (uint8_t *)rx_buf, buffer_size);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6818      	ldr	r0, [r3, #0]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800138e:	3304      	adds	r3, #4
 8001390:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001394:	4619      	mov	r1, r3
 8001396:	f002 fd9f 	bl	8003ed8 <HAL_UART_Receive_DMA>
    }
 800139a:	bf00      	nop
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
	...

080013a4 <_ZN13STM32HardwareC1Ev>:
class STM32Hardware {
  protected:
    SerialComm &comm;

  public:
    STM32Hardware() : comm(comm_rosserial)
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	4a04      	ldr	r2, [pc, #16]	@ (80013c0 <_ZN13STM32HardwareC1Ev+0x1c>)
 80013b0:	601a      	str	r2, [r3, #0]
    {
        // TODO:
    }
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4618      	mov	r0, r3
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bc80      	pop	{r7}
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	20000148 	.word	0x20000148

080013c4 <_ZN13STM32Hardware4initEv>:
    STM32Hardware(SerialComm &comm) : comm(comm)
    {
        // TODO: 
    }
  
    void init()
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
    {
        comm.init();
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff febe 	bl	8001152 <_ZN10SerialComm4initEv>
    }
 80013d6:	bf00      	nop
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}

080013de <_ZN13STM32Hardware4readEv>:

    int read()  
 80013de:	b580      	push	{r7, lr}
 80013e0:	b082      	sub	sp, #8
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
    {
        return comm.read();
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff febc 	bl	8001168 <_ZN10SerialComm4readEv>
 80013f0:	4603      	mov	r3, r0
    }
 80013f2:	4618      	mov	r0, r3
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}

080013fa <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length)
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b084      	sub	sp, #16
 80013fe:	af00      	add	r7, sp, #0
 8001400:	60f8      	str	r0, [r7, #12]
 8001402:	60b9      	str	r1, [r7, #8]
 8001404:	607a      	str	r2, [r7, #4]
    {
        comm.write(data, length);
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	687a      	ldr	r2, [r7, #4]
 800140c:	68b9      	ldr	r1, [r7, #8]
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff fee7 	bl	80011e2 <_ZN10SerialComm5writeEPKhi>
    }
 8001414:	bf00      	nop
 8001416:	3710      	adds	r7, #16
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}

0800141c <_ZN13STM32Hardware4timeEv>:

    unsigned long time()
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
    { 
        return HAL_GetTick(); 
 8001424:	f001 f91c 	bl	8002660 <HAL_GetTick>
 8001428:	4603      	mov	r3, r0
    }
 800142a:	4618      	mov	r0, r3
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
	...

08001434 <_ZN8std_msgs6StringC1Ev>:
  {
    public:
      typedef const char* _data_type;
      _data_type data;

    String():
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
      data("")
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff f802 	bl	8000448 <_ZN3ros3MsgC1Ev>
 8001444:	4a05      	ldr	r2, [pc, #20]	@ (800145c <_ZN8std_msgs6StringC1Ev+0x28>)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a04      	ldr	r2, [pc, #16]	@ (8001460 <_ZN8std_msgs6StringC1Ev+0x2c>)
 800144e:	605a      	str	r2, [r3, #4]
    {
    }
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	4618      	mov	r0, r3
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	080051d0 	.word	0x080051d0
 8001460:	08005074 	.word	0x08005074

08001464 <_ZNK8std_msgs6String9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800146e:	2300      	movs	r3, #0
 8001470:	60fb      	str	r3, [r7, #12]
      uint32_t length_data = strlen(this->data);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	4618      	mov	r0, r3
 8001478:	f7fe fed4 	bl	8000224 <strlen>
 800147c:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_data);
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	683a      	ldr	r2, [r7, #0]
 8001482:	4413      	add	r3, r2
 8001484:	68b9      	ldr	r1, [r7, #8]
 8001486:	4618      	mov	r0, r3
 8001488:	f000 f960 	bl	800174c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	3304      	adds	r3, #4
 8001490:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->data, length_data);
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	683a      	ldr	r2, [r7, #0]
 8001496:	18d0      	adds	r0, r2, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	68ba      	ldr	r2, [r7, #8]
 800149e:	4619      	mov	r1, r3
 80014a0:	f003 fca6 	bl	8004df0 <memcpy>
      offset += length_data;
 80014a4:	68fa      	ldr	r2, [r7, #12]
 80014a6:	68bb      	ldr	r3, [r7, #8]
 80014a8:	4413      	add	r3, r2
 80014aa:	60fb      	str	r3, [r7, #12]
      return offset;
 80014ac:	68fb      	ldr	r3, [r7, #12]
    }
 80014ae:	4618      	mov	r0, r3
 80014b0:	3710      	adds	r7, #16
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}

080014b6 <_ZN8std_msgs6String11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80014b6:	b580      	push	{r7, lr}
 80014b8:	b086      	sub	sp, #24
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	6078      	str	r0, [r7, #4]
 80014be:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80014c0:	2300      	movs	r3, #0
 80014c2:	613b      	str	r3, [r7, #16]
      uint32_t length_data;
      arrToVar(length_data, (inbuffer + offset));
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	683a      	ldr	r2, [r7, #0]
 80014c8:	441a      	add	r2, r3
 80014ca:	f107 030c 	add.w	r3, r7, #12
 80014ce:	4611      	mov	r1, r2
 80014d0:	4618      	mov	r0, r3
 80014d2:	f000 f959 	bl	8001788 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	3304      	adds	r3, #4
 80014da:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	617b      	str	r3, [r7, #20]
 80014e0:	e00b      	b.n	80014fa <_ZN8std_msgs6String11deserializeEPh+0x44>
          inbuffer[k-1]=inbuffer[k];
 80014e2:	683a      	ldr	r2, [r7, #0]
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	441a      	add	r2, r3
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	3b01      	subs	r3, #1
 80014ec:	6839      	ldr	r1, [r7, #0]
 80014ee:	440b      	add	r3, r1
 80014f0:	7812      	ldrb	r2, [r2, #0]
 80014f2:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	3301      	adds	r3, #1
 80014f8:	617b      	str	r3, [r7, #20]
 80014fa:	693a      	ldr	r2, [r7, #16]
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	4413      	add	r3, r2
 8001500:	697a      	ldr	r2, [r7, #20]
 8001502:	429a      	cmp	r2, r3
 8001504:	d3ed      	bcc.n	80014e2 <_ZN8std_msgs6String11deserializeEPh+0x2c>
      }
      inbuffer[offset+length_data-1]=0;
 8001506:	693a      	ldr	r2, [r7, #16]
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	4413      	add	r3, r2
 800150c:	3b01      	subs	r3, #1
 800150e:	683a      	ldr	r2, [r7, #0]
 8001510:	4413      	add	r3, r2
 8001512:	2200      	movs	r2, #0
 8001514:	701a      	strb	r2, [r3, #0]
      this->data = (char *)(inbuffer + offset-1);
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	3b01      	subs	r3, #1
 800151a:	683a      	ldr	r2, [r7, #0]
 800151c:	441a      	add	r2, r3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	605a      	str	r2, [r3, #4]
      offset += length_data;
 8001522:	693a      	ldr	r2, [r7, #16]
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	4413      	add	r3, r2
 8001528:	613b      	str	r3, [r7, #16]
     return offset;
 800152a:	693b      	ldr	r3, [r7, #16]
    }
 800152c:	4618      	mov	r0, r3
 800152e:	3718      	adds	r7, #24
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}

08001534 <_ZN8std_msgs6String7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/String"; };
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	4b02      	ldr	r3, [pc, #8]	@ (8001548 <_ZN8std_msgs6String7getTypeEv+0x14>)
 800153e:	4618      	mov	r0, r3
 8001540:	370c      	adds	r7, #12
 8001542:	46bd      	mov	sp, r7
 8001544:	bc80      	pop	{r7}
 8001546:	4770      	bx	lr
 8001548:	08005114 	.word	0x08005114

0800154c <_ZN8std_msgs6String6getMD5Ev>:
    virtual const char * getMD5() override { return "992ce8a1687cec8c8bd883ec73ca41d1"; };
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	4b02      	ldr	r3, [pc, #8]	@ (8001560 <_ZN8std_msgs6String6getMD5Ev+0x14>)
 8001556:	4618      	mov	r0, r3
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	bc80      	pop	{r7}
 800155e:	4770      	bx	lr
 8001560:	08005124 	.word	0x08005124

08001564 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	4a04      	ldr	r2, [pc, #16]	@ (8001580 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4618      	mov	r0, r3
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	bc80      	pop	{r7}
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	080051e8 	.word	0x080051e8

08001584 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	4618      	mov	r0, r3
 8001590:	f7ff ffe8 	bl	8001564 <_ZN3ros15NodeHandleBase_C1Ev>
 8001594:	4a41      	ldr	r2, [pc, #260]	@ (800169c <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EEC1Ev+0x118>)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	601a      	str	r2, [r3, #0]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	3304      	adds	r3, #4
 800159e:	4618      	mov	r0, r3
 80015a0:	f7ff ff00 	bl	80013a4 <_ZN13STM32HardwareC1Ev>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2200      	movs	r2, #0
 80015a8:	609a      	str	r2, [r3, #8]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2200      	movs	r2, #0
 80015ae:	60da      	str	r2, [r3, #12]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2200      	movs	r2, #0
 80015b4:	611a      	str	r2, [r3, #16]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2200      	movs	r2, #0
 80015ba:	615a      	str	r2, [r3, #20]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	3318      	adds	r3, #24
 80015c0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015c4:	2100      	movs	r1, #0
 80015c6:	4618      	mov	r0, r3
 80015c8:	f003 fbde 	bl	8004d88 <memset>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80015d2:	3318      	adds	r3, #24
 80015d4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015d8:	2100      	movs	r1, #0
 80015da:	4618      	mov	r0, r3
 80015dc:	f003 fbd4 	bl	8004d88 <memset>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80015e6:	3318      	adds	r3, #24
 80015e8:	2228      	movs	r2, #40	@ 0x28
 80015ea:	2100      	movs	r1, #0
 80015ec:	4618      	mov	r0, r3
 80015ee:	f003 fbcb 	bl	8004d88 <memset>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80015f8:	3340      	adds	r3, #64	@ 0x40
 80015fa:	2228      	movs	r2, #40	@ 0x28
 80015fc:	2100      	movs	r1, #0
 80015fe:	4618      	mov	r0, r3
 8001600:	f003 fbc2 	bl	8004d88 <memset>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800160a:	461a      	mov	r2, r3
 800160c:	2300      	movs	r3, #0
 800160e:	6693      	str	r3, [r2, #104]	@ 0x68
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001616:	461a      	mov	r2, r3
 8001618:	2300      	movs	r3, #0
 800161a:	66d3      	str	r3, [r2, #108]	@ 0x6c
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001622:	461a      	mov	r2, r3
 8001624:	2300      	movs	r3, #0
 8001626:	6713      	str	r3, [r2, #112]	@ 0x70
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800162e:	461a      	mov	r2, r3
 8001630:	2300      	movs	r3, #0
 8001632:	6753      	str	r3, [r2, #116]	@ 0x74
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800163a:	461a      	mov	r2, r3
 800163c:	2300      	movs	r3, #0
 800163e:	6793      	str	r3, [r2, #120]	@ 0x78
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001646:	2200      	movs	r2, #0
 8001648:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001652:	461a      	mov	r2, r3
 8001654:	2300      	movs	r3, #0
 8001656:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001660:	461a      	mov	r2, r3
 8001662:	2300      	movs	r3, #0
 8001664:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800166e:	461a      	mov	r2, r3
 8001670:	2300      	movs	r3, #0
 8001672:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800167c:	2200      	movs	r2, #0
 800167e:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	f503 4381 	add.w	r3, r3, #16512	@ 0x4080
 8001688:	3310      	adds	r3, #16
 800168a:	4618      	mov	r0, r3
 800168c:	f7ff fa42 	bl	8000b14 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	4618      	mov	r0, r3
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	080051bc 	.word	0x080051bc

080016a0 <HAL_UART_TxCpltCallback>:
ros::Publisher chatter("/chatter", &str_msg);

char data[] = "Hello world!";

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
	comm_rosserial.set_tx_cplt();
 80016a8:	4803      	ldr	r0, [pc, #12]	@ (80016b8 <HAL_UART_TxCpltCallback+0x18>)
 80016aa:	f7ff fe59 	bl	8001360 <_ZN10SerialComm11set_tx_cpltEv>
}
 80016ae:	bf00      	nop
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	20000148 	.word	0x20000148

080016bc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
	comm_rosserial.reset_rbuf();
 80016c4:	4803      	ldr	r0, [pc, #12]	@ (80016d4 <HAL_UART_RxCpltCallback+0x18>)
 80016c6:	f7ff fe59 	bl	800137c <_ZN10SerialComm10reset_rbufEv>
}
 80016ca:	bf00      	nop
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	20000148 	.word	0x20000148

080016d8 <setup>:

void setup()
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
	nh.initNode();
 80016dc:	4804      	ldr	r0, [pc, #16]	@ (80016f0 <setup+0x18>)
 80016de:	f000 f878 	bl	80017d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8initNodeEv>
	nh.advertise(chatter);
 80016e2:	4904      	ldr	r1, [pc, #16]	@ (80016f4 <setup+0x1c>)
 80016e4:	4802      	ldr	r0, [pc, #8]	@ (80016f0 <setup+0x18>)
 80016e6:	f000 f899 	bl	800181c <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE9advertiseERNS_9PublisherE>
}
 80016ea:	bf00      	nop
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	20004154 	.word	0x20004154
 80016f4:	20008214 	.word	0x20008214

080016f8 <_Z6millisv>:

uint32_t millis()
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 80016fc:	f000 ffb0 	bl	8002660 <HAL_GetTick>
 8001700:	4603      	mov	r3, r0
}
 8001702:	4618      	mov	r0, r3
 8001704:	bd80      	pop	{r7, pc}
	...

08001708 <loop>:

uint32_t t = 0;

void loop()
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
	t = millis();
 800170c:	f7ff fff4 	bl	80016f8 <_Z6millisv>
 8001710:	4603      	mov	r3, r0
 8001712:	4a09      	ldr	r2, [pc, #36]	@ (8001738 <loop+0x30>)
 8001714:	6013      	str	r3, [r2, #0]

	str_msg.data = "hello";
 8001716:	4b09      	ldr	r3, [pc, #36]	@ (800173c <loop+0x34>)
 8001718:	4a09      	ldr	r2, [pc, #36]	@ (8001740 <loop+0x38>)
 800171a:	605a      	str	r2, [r3, #4]
	chatter.publish(&str_msg);
 800171c:	4907      	ldr	r1, [pc, #28]	@ (800173c <loop+0x34>)
 800171e:	4809      	ldr	r0, [pc, #36]	@ (8001744 <loop+0x3c>)
 8001720:	f7ff fcd6 	bl	80010d0 <_ZN3ros9Publisher7publishEPKNS_3MsgE>

	HAL_Delay(500);
 8001724:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001728:	f000 ffa4 	bl	8002674 <HAL_Delay>

	nh.spinOnce();
 800172c:	4806      	ldr	r0, [pc, #24]	@ (8001748 <loop+0x40>)
 800172e:	f000 f8a4 	bl	800187a <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv>
}
 8001732:	bf00      	nop
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	20008228 	.word	0x20008228
 800173c:	2000820c 	.word	0x2000820c
 8001740:	08005148 	.word	0x08005148
 8001744:	20008214 	.word	0x20008214
 8001748:	20004154 	.word	0x20004154

0800174c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 800174c:	b480      	push	{r7}
 800174e:	b085      	sub	sp, #20
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8001756:	2300      	movs	r3, #0
 8001758:	60fb      	str	r3, [r7, #12]
 800175a:	e00c      	b.n	8001776 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x2a>
      arr[i] = (var >> (8 * i));
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	00db      	lsls	r3, r3, #3
 8001760:	683a      	ldr	r2, [r7, #0]
 8001762:	fa22 f103 	lsr.w	r1, r2, r3
 8001766:	687a      	ldr	r2, [r7, #4]
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	4413      	add	r3, r2
 800176c:	b2ca      	uxtb	r2, r1
 800176e:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	3301      	adds	r3, #1
 8001774:	60fb      	str	r3, [r7, #12]
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	2b03      	cmp	r3, #3
 800177a:	d9ef      	bls.n	800175c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x10>
  }
 800177c:	bf00      	nop
 800177e:	bf00      	nop
 8001780:	3714      	adds	r7, #20
 8001782:	46bd      	mov	sp, r7
 8001784:	bc80      	pop	{r7}
 8001786:	4770      	bx	lr

08001788 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8001788:	b480      	push	{r7}
 800178a:	b085      	sub	sp, #20
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8001798:	2300      	movs	r3, #0
 800179a:	60fb      	str	r3, [r7, #12]
 800179c:	e010      	b.n	80017c0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x38>
      var |= (arr[i] << (8 * i));
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	6839      	ldr	r1, [r7, #0]
 80017a4:	68fa      	ldr	r2, [r7, #12]
 80017a6:	440a      	add	r2, r1
 80017a8:	7812      	ldrb	r2, [r2, #0]
 80017aa:	4611      	mov	r1, r2
 80017ac:	68fa      	ldr	r2, [r7, #12]
 80017ae:	00d2      	lsls	r2, r2, #3
 80017b0:	fa01 f202 	lsl.w	r2, r1, r2
 80017b4:	431a      	orrs	r2, r3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	3301      	adds	r3, #1
 80017be:	60fb      	str	r3, [r7, #12]
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	2b03      	cmp	r3, #3
 80017c4:	d9eb      	bls.n	800179e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x16>
  }
 80017c6:	bf00      	nop
 80017c8:	bf00      	nop
 80017ca:	3714      	adds	r7, #20
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bc80      	pop	{r7}
 80017d0:	4770      	bx	lr

080017d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8initNodeEv>:
  {
    return &hardware_;
  }

  /* Start serial, initialize buffers */
  void initNode()
 80017d2:	b580      	push	{r7, lr}
 80017d4:	b082      	sub	sp, #8
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	3304      	adds	r3, #4
 80017de:	4618      	mov	r0, r3
 80017e0:	f7ff fdf0 	bl	80013c4 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80017ea:	461a      	mov	r2, r3
 80017ec:	2300      	movs	r3, #0
 80017ee:	6693      	str	r3, [r2, #104]	@ 0x68
    bytes_ = 0;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80017f6:	461a      	mov	r2, r3
 80017f8:	2300      	movs	r3, #0
 80017fa:	66d3      	str	r3, [r2, #108]	@ 0x6c
    index_ = 0;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001802:	461a      	mov	r2, r3
 8001804:	2300      	movs	r3, #0
 8001806:	6753      	str	r3, [r2, #116]	@ 0x74
    topic_ = 0;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800180e:	461a      	mov	r2, r3
 8001810:	2300      	movs	r3, #0
 8001812:	6713      	str	r3, [r2, #112]	@ 0x70
  };
 8001814:	bf00      	nop
 8001816:	3708      	adds	r7, #8
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}

0800181c <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8001826:	2300      	movs	r3, #0
 8001828:	60fb      	str	r3, [r7, #12]
 800182a:	e01d      	b.n	8001868 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE9advertiseERNS_9PublisherE+0x4c>
    {
      if (publishers[i] == 0) // empty slot
 800182c:	687a      	ldr	r2, [r7, #4]
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001834:	3306      	adds	r3, #6
 8001836:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d111      	bne.n	8001862 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE9advertiseERNS_9PublisherE+0x46>
      {
        publishers[i] = &p;
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001846:	3306      	adds	r3, #6
 8001848:	6839      	ldr	r1, [r7, #0]
 800184a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	f103 026e 	add.w	r2, r3, #110	@ 0x6e
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8001858:	687a      	ldr	r2, [r7, #4]
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	60da      	str	r2, [r3, #12]
        return true;
 800185e:	2301      	movs	r3, #1
 8001860:	e006      	b.n	8001870 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	3301      	adds	r3, #1
 8001866:	60fb      	str	r3, [r7, #12]
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	2b09      	cmp	r3, #9
 800186c:	ddde      	ble.n	800182c <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE9advertiseERNS_9PublisherE+0x10>
      }
    }
    return false;
 800186e:	2300      	movs	r3, #0
  }
 8001870:	4618      	mov	r0, r3
 8001872:	3714      	adds	r7, #20
 8001874:	46bd      	mov	sp, r7
 8001876:	bc80      	pop	{r7}
 8001878:	4770      	bx	lr

0800187a <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv>:
  virtual int spinOnce() override
 800187a:	b580      	push	{r7, lr}
 800187c:	b084      	sub	sp, #16
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	3304      	adds	r3, #4
 8001886:	4618      	mov	r0, r3
 8001888:	f7ff fdc8 	bl	800141c <_ZN13STM32Hardware4timeEv>
 800188c:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001894:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001898:	68fa      	ldr	r2, [r7, #12]
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d905      	bls.n	80018b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x36>
      configured_ = false;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80018aa:	2200      	movs	r2, #0
 80018ac:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
    if (mode_ != MODE_FIRST_FF)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80018b6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d00d      	beq.n	80018d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
      if (c_time > last_msg_timeout_time)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80018c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018c6:	68fa      	ldr	r2, [r7, #12]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d905      	bls.n	80018d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
        mode_ = MODE_FIRST_FF;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80018d2:	461a      	mov	r2, r3
 80018d4:	2300      	movs	r3, #0
 80018d6:	6693      	str	r3, [r2, #104]	@ 0x68
      if (spin_timeout_ > 0)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	695b      	ldr	r3, [r3, #20]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d013      	beq.n	8001908 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x8e>
        if ((hardware_.time() - c_time) > spin_timeout_)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	3304      	adds	r3, #4
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7ff fd99 	bl	800141c <_ZN13STM32Hardware4timeEv>
 80018ea:	4602      	mov	r2, r0
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	1ad2      	subs	r2, r2, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	695b      	ldr	r3, [r3, #20]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	bf8c      	ite	hi
 80018f8:	2301      	movhi	r3, #1
 80018fa:	2300      	movls	r3, #0
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d002      	beq.n	8001908 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x8e>
          return SPIN_TIMEOUT;
 8001902:	f06f 0301 	mvn.w	r3, #1
 8001906:	e1e8      	b.n	8001cda <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x460>
      int data = hardware_.read();
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	3304      	adds	r3, #4
 800190c:	4618      	mov	r0, r3
 800190e:	f7ff fd66 	bl	80013de <_ZN13STM32Hardware4readEv>
 8001912:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	2b00      	cmp	r3, #0
 8001918:	f2c0 81c1 	blt.w	8001c9e <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x424>
      checksum_ += data;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001922:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	4413      	add	r3, r2
 8001928:	687a      	ldr	r2, [r7, #4]
 800192a:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 800192e:	6793      	str	r3, [r2, #120]	@ 0x78
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001936:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001938:	2b07      	cmp	r3, #7
 800193a:	d124      	bne.n	8001986 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x10c>
        message_in[index_++] = data;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001942:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001944:	1c5a      	adds	r2, r3, #1
 8001946:	6879      	ldr	r1, [r7, #4]
 8001948:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
 800194c:	674a      	str	r2, [r1, #116]	@ 0x74
 800194e:	68ba      	ldr	r2, [r7, #8]
 8001950:	b2d1      	uxtb	r1, r2
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	4413      	add	r3, r2
 8001956:	460a      	mov	r2, r1
 8001958:	761a      	strb	r2, [r3, #24]
        bytes_--;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001960:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001962:	3b01      	subs	r3, #1
 8001964:	687a      	ldr	r2, [r7, #4]
 8001966:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 800196a:	66d3      	str	r3, [r2, #108]	@ 0x6c
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001972:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001974:	2b00      	cmp	r3, #0
 8001976:	d1af      	bne.n	80018d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
          mode_ = MODE_MSG_CHECKSUM;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800197e:	461a      	mov	r2, r3
 8001980:	2308      	movs	r3, #8
 8001982:	6693      	str	r3, [r2, #104]	@ 0x68
 8001984:	e7a8      	b.n	80018d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
      else if (mode_ == MODE_FIRST_FF)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800198c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800198e:	2b00      	cmp	r3, #0
 8001990:	d12e      	bne.n	80019f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x176>
        if (data == 0xff)
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	2bff      	cmp	r3, #255	@ 0xff
 8001996:	d110      	bne.n	80019ba <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x140>
          mode_++;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800199e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80019a0:	3301      	adds	r3, #1
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 80019a8:	6693      	str	r3, [r2, #104]	@ 0x68
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	3314      	adds	r3, #20
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 80019b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 80019b8:	e78e      	b.n	80018d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	3304      	adds	r3, #4
 80019be:	4618      	mov	r0, r3
 80019c0:	f7ff fd2c 	bl	800141c <_ZN13STM32Hardware4timeEv>
 80019c4:	4602      	mov	r2, r0
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019ce:	4293      	cmp	r3, r2
 80019d0:	bf8c      	ite	hi
 80019d2:	2301      	movhi	r3, #1
 80019d4:	2300      	movls	r3, #0
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	2b00      	cmp	r3, #0
 80019da:	f43f af7d 	beq.w	80018d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
          configured_ = false;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80019e4:	2200      	movs	r2, #0
 80019e6:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
          return SPIN_TIMEOUT;
 80019ea:	f06f 0301 	mvn.w	r3, #1
 80019ee:	e174      	b.n	8001cda <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x460>
      else if (mode_ == MODE_PROTOCOL_VER)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80019f6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d11e      	bne.n	8001a3a <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x1c0>
        if (data == PROTOCOL_VER)
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	2bfe      	cmp	r3, #254	@ 0xfe
 8001a00:	d109      	bne.n	8001a16 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x19c>
          mode_++;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001a08:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	687a      	ldr	r2, [r7, #4]
 8001a0e:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 8001a12:	6693      	str	r3, [r2, #104]	@ 0x68
 8001a14:	e760      	b.n	80018d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
          mode_ = MODE_FIRST_FF;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	2300      	movs	r3, #0
 8001a20:	6693      	str	r3, [r2, #104]	@ 0x68
          if (configured_ == false)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001a28:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	f47f af53 	bne.w	80018d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f000 f955 	bl	8001ce2 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE15requestSyncTimeEv>
 8001a38:	e74e      	b.n	80018d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001a40:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d11b      	bne.n	8001a7e <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x204>
        bytes_ = data;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	66d3      	str	r3, [r2, #108]	@ 0x6c
        index_ = 0;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001a58:	461a      	mov	r2, r3
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	6753      	str	r3, [r2, #116]	@ 0x74
        mode_++;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001a64:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001a66:	3301      	adds	r3, #1
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 8001a6e:	6693      	str	r3, [r2, #104]	@ 0x68
        checksum_ = data;               /* first byte for calculating size checksum */
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001a76:	461a      	mov	r2, r3
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	6793      	str	r3, [r2, #120]	@ 0x78
 8001a7c:	e72c      	b.n	80018d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001a84:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001a86:	2b03      	cmp	r3, #3
 8001a88:	d114      	bne.n	8001ab4 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x23a>
        bytes_ += data << 8;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001a90:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	021b      	lsls	r3, r3, #8
 8001a96:	4413      	add	r3, r2
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 8001a9e:	66d3      	str	r3, [r2, #108]	@ 0x6c
        mode_++;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001aa6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 8001ab0:	6693      	str	r3, [r2, #104]	@ 0x68
 8001ab2:	e711      	b.n	80018d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001aba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001abc:	2b04      	cmp	r3, #4
 8001abe:	d11b      	bne.n	8001af8 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x27e>
        if ((checksum_ % 256) == 255)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001ac6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001ac8:	425a      	negs	r2, r3
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	b2d2      	uxtb	r2, r2
 8001ace:	bf58      	it	pl
 8001ad0:	4253      	negpl	r3, r2
 8001ad2:	2bff      	cmp	r3, #255	@ 0xff
 8001ad4:	d109      	bne.n	8001aea <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x270>
          mode_++;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001adc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001ade:	3301      	adds	r3, #1
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 8001ae6:	6693      	str	r3, [r2, #104]	@ 0x68
 8001ae8:	e6f6      	b.n	80018d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001af0:	461a      	mov	r2, r3
 8001af2:	2300      	movs	r3, #0
 8001af4:	6693      	str	r3, [r2, #104]	@ 0x68
 8001af6:	e6ef      	b.n	80018d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001afe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001b00:	2b05      	cmp	r3, #5
 8001b02:	d115      	bne.n	8001b30 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x2b6>
        topic_ = data;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	6713      	str	r3, [r2, #112]	@ 0x70
        mode_++;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001b16:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001b18:	3301      	adds	r3, #1
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 8001b20:	6693      	str	r3, [r2, #104]	@ 0x68
        checksum_ = data;               /* first byte included in checksum */
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001b28:	461a      	mov	r2, r3
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	6793      	str	r3, [r2, #120]	@ 0x78
 8001b2e:	e6d3      	b.n	80018d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001b36:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001b38:	2b06      	cmp	r3, #6
 8001b3a:	d11e      	bne.n	8001b7a <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x300>
        topic_ += data << 8;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001b42:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	021b      	lsls	r3, r3, #8
 8001b48:	4413      	add	r3, r2
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 8001b50:	6713      	str	r3, [r2, #112]	@ 0x70
        mode_ = MODE_MESSAGE;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001b58:	461a      	mov	r2, r3
 8001b5a:	2307      	movs	r3, #7
 8001b5c:	6693      	str	r3, [r2, #104]	@ 0x68
        if (bytes_ == 0)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001b64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	f47f aeb6 	bne.w	80018d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
          mode_ = MODE_MSG_CHECKSUM;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001b72:	461a      	mov	r2, r3
 8001b74:	2308      	movs	r3, #8
 8001b76:	6693      	str	r3, [r2, #104]	@ 0x68
 8001b78:	e6ae      	b.n	80018d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001b80:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001b82:	2b08      	cmp	r3, #8
 8001b84:	f47f aea8 	bne.w	80018d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
        mode_ = MODE_FIRST_FF;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001b8e:	461a      	mov	r2, r3
 8001b90:	2300      	movs	r3, #0
 8001b92:	6693      	str	r3, [r2, #104]	@ 0x68
        if ((checksum_ % 256) == 255)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001b9a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001b9c:	425a      	negs	r2, r3
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	b2d2      	uxtb	r2, r2
 8001ba2:	bf58      	it	pl
 8001ba4:	4253      	negpl	r3, r2
 8001ba6:	2bff      	cmp	r3, #255	@ 0xff
 8001ba8:	f47f ae96 	bne.w	80018d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001bb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d116      	bne.n	8001be6 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x36c>
            requestSyncTime();
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f000 f892 	bl	8001ce2 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE15requestSyncTimeEv>
            negotiateTopics();
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f000 f8ac 	bl	8001d1c <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001bca:	461a      	mov	r2, r3
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
            last_sync_receive_time = c_time;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001bd8:	461a      	mov	r2, r3
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
            return SPIN_ERR;
 8001be0:	f04f 33ff 	mov.w	r3, #4294967295
 8001be4:	e079      	b.n	8001cda <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x460>
          else if (topic_ == TopicInfo::ID_TIME)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001bec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bee:	2b0a      	cmp	r3, #10
 8001bf0:	d106      	bne.n	8001c00 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x386>
            syncTime(message_in);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	3318      	adds	r3, #24
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f000 f979 	bl	8001ef0 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8syncTimeEPh>
 8001bfe:	e66b      	b.n	80018d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001c06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c08:	2b06      	cmp	r3, #6
 8001c0a:	d110      	bne.n	8001c2e <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x3b4>
            req_param_resp.deserialize(message_in);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f503 4381 	add.w	r3, r3, #16512	@ 0x4080
 8001c12:	3310      	adds	r3, #16
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	3218      	adds	r2, #24
 8001c18:	4611      	mov	r1, r2
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7ff f8b9 	bl	8000d92 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001c26:	2201      	movs	r2, #1
 8001c28:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
 8001c2c:	e654      	b.n	80018d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001c34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c36:	2b0b      	cmp	r3, #11
 8001c38:	d106      	bne.n	8001c48 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x3ce>
            configured_ = false;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001c40:	2200      	movs	r2, #0
 8001c42:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
 8001c46:	e647      	b.n	80018d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
            if (subscribers[topic_ - 100])
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001c4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c50:	3b64      	subs	r3, #100	@ 0x64
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c58:	3310      	adds	r3, #16
 8001c5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	f43f ae3a 	beq.w	80018d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
              subscribers[topic_ - 100]->callback(message_in);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001c6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c6c:	3b64      	subs	r3, #100	@ 0x64
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c74:	3310      	adds	r3, #16
 8001c76:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001c80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c82:	3b64      	subs	r3, #100	@ 0x64
 8001c84:	687a      	ldr	r2, [r7, #4]
 8001c86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c8a:	3310      	adds	r3, #16
 8001c8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	687a      	ldr	r2, [r7, #4]
 8001c96:	3218      	adds	r2, #24
 8001c98:	4611      	mov	r1, r2
 8001c9a:	4798      	blx	r3
    while (true)
 8001c9c:	e61c      	b.n	80018d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
        break;
 8001c9e:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001ca6:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d014      	beq.n	8001cd8 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x45e>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001cb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001cb8:	68fa      	ldr	r2, [r7, #12]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d909      	bls.n	8001cd8 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x45e>
      requestSyncTime();
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f000 f80c 	bl	8001ce2 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
    return SPIN_OK;
 8001cd8:	2300      	movs	r3, #0
  }
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3710      	adds	r7, #16
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE15requestSyncTimeEv>:
  void requestSyncTime()
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b086      	sub	sp, #24
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8001cea:	f107 030c 	add.w	r3, r7, #12
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7fe fbba 	bl	8000468 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f107 020c 	add.w	r2, r7, #12
 8001cfe:	210a      	movs	r1, #10
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	4798      	blx	r3
    rt_time = hardware_.time();
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	3304      	adds	r3, #4
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff fb87 	bl	800141c <_ZN13STM32Hardware4timeEv>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	609a      	str	r2, [r3, #8]
  }
 8001d14:	bf00      	nop
 8001d16:	3718      	adds	r7, #24
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 8001d1c:	b590      	push	{r4, r7, lr}
 8001d1e:	b08b      	sub	sp, #44	@ 0x2c
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8001d24:	f107 030c 	add.w	r3, r7, #12
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7fe fc87 	bl	800063c <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8001d2e:	2300      	movs	r3, #0
 8001d30:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d32:	e062      	b.n	8001dfa <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE15negotiateTopicsEv+0xde>
    {
      if (publishers[i] != 0) // non-empty slot
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d38:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d3c:	3306      	adds	r3, #6
 8001d3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d056      	beq.n	8001df4 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE15negotiateTopicsEv+0xd8>
      {
        ti.topic_id = publishers[i]->id_;
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d4a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d4e:	3306      	adds	r3, #6
 8001d50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d62:	3306      	adds	r3, #6
 8001d64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d70:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d74:	3306      	adds	r3, #6
 8001d76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d7a:	6859      	ldr	r1, [r3, #4]
 8001d7c:	687a      	ldr	r2, [r7, #4]
 8001d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d80:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d84:	3306      	adds	r3, #6
 8001d86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	3308      	adds	r3, #8
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4608      	mov	r0, r1
 8001d94:	4798      	blx	r3
 8001d96:	4603      	mov	r3, r0
 8001d98:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d9e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001da2:	3306      	adds	r3, #6
 8001da4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001da8:	6859      	ldr	r1, [r3, #4]
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001db2:	3306      	adds	r3, #6
 8001db4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	330c      	adds	r3, #12
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4608      	mov	r0, r1
 8001dc2:	4798      	blx	r3
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8001dc8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001dcc:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681c      	ldr	r4, [r3, #0]
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dd8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ddc:	3306      	adds	r3, #6
 8001dde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7ff f988 	bl	80010f8 <_ZN3ros9Publisher15getEndpointTypeEv>
 8001de8:	4601      	mov	r1, r0
 8001dea:	f107 030c 	add.w	r3, r7, #12
 8001dee:	461a      	mov	r2, r3
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8001df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001df6:	3301      	adds	r3, #1
 8001df8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dfc:	2b09      	cmp	r3, #9
 8001dfe:	dd99      	ble.n	8001d34 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE15negotiateTopicsEv+0x18>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8001e00:	2300      	movs	r3, #0
 8001e02:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e04:	e067      	b.n	8001ed6 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE15negotiateTopicsEv+0x1ba>
    {
      if (subscribers[i] != 0) // non-empty slot
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e0e:	3310      	adds	r3, #16
 8001e10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d05b      	beq.n	8001ed0 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE15negotiateTopicsEv+0x1b4>
      {
        ti.topic_id = subscribers[i]->id_;
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e1c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e20:	3310      	adds	r3, #16
 8001e22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	b29b      	uxth	r3, r3
 8001e2a:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e30:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e34:	3310      	adds	r3, #16
 8001e36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e46:	3310      	adds	r3, #16
 8001e48:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e50:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e54:	3310      	adds	r3, #16
 8001e56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	3308      	adds	r3, #8
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4608      	mov	r0, r1
 8001e62:	4798      	blx	r3
 8001e64:	4603      	mov	r3, r0
 8001e66:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e6c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e70:	3310      	adds	r3, #16
 8001e72:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e7e:	3310      	adds	r3, #16
 8001e80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	330c      	adds	r3, #12
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4608      	mov	r0, r1
 8001e8c:	4798      	blx	r3
 8001e8e:	4603      	mov	r3, r0
 8001e90:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8001e92:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e96:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681c      	ldr	r4, [r3, #0]
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ea2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ea6:	3310      	adds	r3, #16
 8001ea8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eb0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001eb4:	3310      	adds	r3, #16
 8001eb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	3304      	adds	r3, #4
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4608      	mov	r0, r1
 8001ec2:	4798      	blx	r3
 8001ec4:	4601      	mov	r1, r0
 8001ec6:	f107 030c 	add.w	r3, r7, #12
 8001eca:	461a      	mov	r2, r3
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8001ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ed8:	2b09      	cmp	r3, #9
 8001eda:	dd94      	ble.n	8001e06 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE15negotiateTopicsEv+0xea>
      }
    }
    configured_ = true;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
  }
 8001ee8:	bf00      	nop
 8001eea:	372c      	adds	r7, #44	@ 0x2c
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd90      	pop	{r4, r7, pc}

08001ef0 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b086      	sub	sp, #24
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8001efa:	f107 0308 	add.w	r3, r7, #8
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7fe fab2 	bl	8000468 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	3304      	adds	r3, #4
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7ff fa87 	bl	800141c <_ZN13STM32Hardware4timeEv>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8001f18:	f107 0308 	add.w	r3, r7, #8
 8001f1c:	6839      	ldr	r1, [r7, #0]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f7fe fb11 	bl	8000546 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8001f24:	68fa      	ldr	r2, [r7, #12]
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	4915      	ldr	r1, [pc, #84]	@ (8001f80 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8syncTimeEPh+0x90>)
 8001f2a:	fba1 1303 	umull	r1, r3, r1, r3
 8001f2e:	099b      	lsrs	r3, r3, #6
 8001f30:	4413      	add	r3, r2
 8001f32:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8001f34:	6939      	ldr	r1, [r7, #16]
 8001f36:	697a      	ldr	r2, [r7, #20]
 8001f38:	4b11      	ldr	r3, [pc, #68]	@ (8001f80 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8syncTimeEPh+0x90>)
 8001f3a:	fba3 0302 	umull	r0, r3, r3, r2
 8001f3e:	099b      	lsrs	r3, r3, #6
 8001f40:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001f44:	fb00 f303 	mul.w	r3, r0, r3
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	4a0e      	ldr	r2, [pc, #56]	@ (8001f84 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8syncTimeEPh+0x94>)
 8001f4c:	fb02 f303 	mul.w	r3, r2, r3
 8001f50:	440b      	add	r3, r1
 8001f52:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8001f54:	f107 0308 	add.w	r3, r7, #8
 8001f58:	3304      	adds	r3, #4
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f000 f8b7 	bl	80020d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	3304      	adds	r3, #4
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7ff fa58 	bl	800141c <_ZN13STM32Hardware4timeEv>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001f74:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
 8001f78:	bf00      	nop
 8001f7a:	3718      	adds	r7, #24
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	10624dd3 	.word	0x10624dd3
 8001f84:	000f4240 	.word	0x000f4240

08001f88 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b088      	sub	sp, #32
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	60f8      	str	r0, [r7, #12]
 8001f90:	60b9      	str	r1, [r7, #8]
 8001f92:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	2b63      	cmp	r3, #99	@ 0x63
 8001f98:	dd0b      	ble.n	8001fb2 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE7publishEiPKNS_3MsgE+0x2a>
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001fa0:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8001fa4:	f083 0301 	eor.w	r3, r3, #1
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE7publishEiPKNS_3MsgE+0x2a>
      return 0;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	e087      	b.n	80020c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE7publishEiPKNS_3MsgE+0x13a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001fbe:	3318      	adds	r3, #24
 8001fc0:	3307      	adds	r3, #7
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	4790      	blx	r2
 8001fc8:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001fd0:	22ff      	movs	r2, #255	@ 0xff
 8001fd2:	761a      	strb	r2, [r3, #24]
    message_out[1] = PROTOCOL_VER;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001fda:	22fe      	movs	r2, #254	@ 0xfe
 8001fdc:	765a      	strb	r2, [r3, #25]
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	b2da      	uxtb	r2, r3
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001fe8:	769a      	strb	r2, [r3, #26]
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	0a1b      	lsrs	r3, r3, #8
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	b2da      	uxtb	r2, r3
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001ffa:	76da      	strb	r2, [r3, #27]
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002002:	7e9a      	ldrb	r2, [r3, #26]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800200a:	7edb      	ldrb	r3, [r3, #27]
 800200c:	4413      	add	r3, r2
 800200e:	b2db      	uxtb	r3, r3
 8002010:	43db      	mvns	r3, r3
 8002012:	b2da      	uxtb	r2, r3
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800201a:	771a      	strb	r2, [r3, #28]
    message_out[5] = (uint8_t)((int16_t)id & 255);
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	b2da      	uxtb	r2, r3
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002026:	775a      	strb	r2, [r3, #29]
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	b21b      	sxth	r3, r3
 800202c:	121b      	asrs	r3, r3, #8
 800202e:	b21b      	sxth	r3, r3
 8002030:	b2da      	uxtb	r2, r3
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002038:	779a      	strb	r2, [r3, #30]

    /* calculate checksum */
    int chk = 0;
 800203a:	2300      	movs	r3, #0
 800203c:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 800203e:	2305      	movs	r3, #5
 8002040:	61bb      	str	r3, [r7, #24]
 8002042:	e00d      	b.n	8002060 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE7publishEiPKNS_3MsgE+0xd8>
      chk += message_out[i];
 8002044:	68fa      	ldr	r2, [r7, #12]
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	4413      	add	r3, r2
 800204a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800204e:	3318      	adds	r3, #24
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	461a      	mov	r2, r3
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	4413      	add	r3, r2
 8002058:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	3301      	adds	r3, #1
 800205e:	61bb      	str	r3, [r7, #24]
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	3306      	adds	r3, #6
 8002064:	69ba      	ldr	r2, [r7, #24]
 8002066:	429a      	cmp	r2, r3
 8002068:	ddec      	ble.n	8002044 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE7publishEiPKNS_3MsgE+0xbc>
    l += 7;
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	3307      	adds	r3, #7
 800206e:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	425a      	negs	r2, r3
 8002074:	b2db      	uxtb	r3, r3
 8002076:	b2d2      	uxtb	r2, r2
 8002078:	bf58      	it	pl
 800207a:	4253      	negpl	r3, r2
 800207c:	b2da      	uxtb	r2, r3
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	1c59      	adds	r1, r3, #1
 8002082:	6179      	str	r1, [r7, #20]
 8002084:	43d2      	mvns	r2, r2
 8002086:	b2d1      	uxtb	r1, r2
 8002088:	68fa      	ldr	r2, [r7, #12]
 800208a:	4413      	add	r3, r2
 800208c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002090:	3318      	adds	r3, #24
 8002092:	460a      	mov	r2, r1
 8002094:	701a      	strb	r2, [r3, #0]

    if (l <= OUTPUT_SIZE)
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800209c:	dc0b      	bgt.n	80020b6 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE7publishEiPKNS_3MsgE+0x12e>
    {
      hardware_.write(message_out, l);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	1d18      	adds	r0, r3, #4
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80020a8:	3318      	adds	r3, #24
 80020aa:	697a      	ldr	r2, [r7, #20]
 80020ac:	4619      	mov	r1, r3
 80020ae:	f7ff f9a4 	bl	80013fa <_ZN13STM32Hardware5writeEPhi>
      return l;
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	e005      	b.n	80020c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE7publishEiPKNS_3MsgE+0x13a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 80020b6:	4905      	ldr	r1, [pc, #20]	@ (80020cc <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE7publishEiPKNS_3MsgE+0x144>)
 80020b8:	68f8      	ldr	r0, [r7, #12]
 80020ba:	f000 f847 	bl	800214c <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8logerrorEPKc>
      return -1;
 80020be:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 80020c2:	4618      	mov	r0, r3
 80020c4:	3720      	adds	r7, #32
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	08005150 	.word	0x08005150

080020d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	3304      	adds	r3, #4
 80020de:	4618      	mov	r0, r3
 80020e0:	f7ff f99c 	bl	800141c <_ZN13STM32Hardware4timeEv>
 80020e4:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	4914      	ldr	r1, [pc, #80]	@ (8002140 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE6setNowERKNS_4TimeE+0x70>)
 80020ee:	fba1 1303 	umull	r1, r3, r1, r3
 80020f2:	099b      	lsrs	r3, r3, #6
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	1e5a      	subs	r2, r3, #1
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	60da      	str	r2, [r3, #12]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	6859      	ldr	r1, [r3, #4]
 8002100:	68fa      	ldr	r2, [r7, #12]
 8002102:	4b0f      	ldr	r3, [pc, #60]	@ (8002140 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE6setNowERKNS_4TimeE+0x70>)
 8002104:	fba3 0302 	umull	r0, r3, r3, r2
 8002108:	099b      	lsrs	r3, r3, #6
 800210a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800210e:	fb00 f303 	mul.w	r3, r0, r3
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	4a0b      	ldr	r2, [pc, #44]	@ (8002144 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE6setNowERKNS_4TimeE+0x74>)
 8002116:	fb02 f303 	mul.w	r3, r2, r3
 800211a:	1aca      	subs	r2, r1, r3
 800211c:	4b0a      	ldr	r3, [pc, #40]	@ (8002148 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE6setNowERKNS_4TimeE+0x78>)
 800211e:	4413      	add	r3, r2
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	6113      	str	r3, [r2, #16]
    normalizeSecNSec(sec_offset, nsec_offset);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f103 020c 	add.w	r2, r3, #12
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	3310      	adds	r3, #16
 800212e:	4619      	mov	r1, r3
 8002130:	4610      	mov	r0, r2
 8002132:	f000 f9eb 	bl	800250c <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8002136:	bf00      	nop
 8002138:	3710      	adds	r7, #16
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	10624dd3 	.word	0x10624dd3
 8002144:	000f4240 	.word	0x000f4240
 8002148:	3b9aca00 	.word	0x3b9aca00

0800214c <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8002156:	683a      	ldr	r2, [r7, #0]
 8002158:	2103      	movs	r1, #3
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f000 f804 	bl	8002168 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE3logEcPKc>
  }
 8002160:	bf00      	nop
 8002162:	3708      	adds	r7, #8
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE3logEcPKc>:
  void log(char byte, const char * msg)
 8002168:	b580      	push	{r7, lr}
 800216a:	b088      	sub	sp, #32
 800216c:	af00      	add	r7, sp, #0
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	460b      	mov	r3, r1
 8002172:	607a      	str	r2, [r7, #4]
 8002174:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8002176:	f107 0314 	add.w	r3, r7, #20
 800217a:	4618      	mov	r0, r3
 800217c:	f7fe fc1e 	bl	80009bc <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8002180:	7afb      	ldrb	r3, [r7, #11]
 8002182:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f107 0214 	add.w	r2, r7, #20
 8002192:	2107      	movs	r1, #7
 8002194:	68f8      	ldr	r0, [r7, #12]
 8002196:	4798      	blx	r3
  }
 8002198:	bf00      	nop
 800219a:	3720      	adds	r7, #32
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}

080021a0 <_Z41__static_initialization_and_destruction_0ii>:
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	6039      	str	r1, [r7, #0]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d114      	bne.n	80021da <_Z41__static_initialization_and_destruction_0ii+0x3a>
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d10f      	bne.n	80021da <_Z41__static_initialization_and_destruction_0ii+0x3a>
};

SerialComm comm_rosserial(huart_rosserial);
 80021ba:	490a      	ldr	r1, [pc, #40]	@ (80021e4 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 80021bc:	480a      	ldr	r0, [pc, #40]	@ (80021e8 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 80021be:	f7fe ffa6 	bl	800110e <_ZN10SerialCommC1ER20__UART_HandleTypeDef>
ros::NodeHandle nh;
 80021c2:	480a      	ldr	r0, [pc, #40]	@ (80021ec <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80021c4:	f7ff f9de 	bl	8001584 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EEC1Ev>
std_msgs::String str_msg;
 80021c8:	4809      	ldr	r0, [pc, #36]	@ (80021f0 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80021ca:	f7ff f933 	bl	8001434 <_ZN8std_msgs6StringC1Ev>
ros::Publisher chatter("/chatter", &str_msg);
 80021ce:	2300      	movs	r3, #0
 80021d0:	4a07      	ldr	r2, [pc, #28]	@ (80021f0 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80021d2:	4908      	ldr	r1, [pc, #32]	@ (80021f4 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 80021d4:	4808      	ldr	r0, [pc, #32]	@ (80021f8 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 80021d6:	f7fe ff65 	bl	80010a4 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 80021da:	bf00      	nop
 80021dc:	3708      	adds	r7, #8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	20000078 	.word	0x20000078
 80021e8:	20000148 	.word	0x20000148
 80021ec:	20004154 	.word	0x20004154
 80021f0:	2000820c 	.word	0x2000820c
 80021f4:	0800518c 	.word	0x0800518c
 80021f8:	20008214 	.word	0x20008214

080021fc <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE9connectedEv>:
  virtual bool connected() override
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
    return configured_;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800220a:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
  };
 800220e:	4618      	mov	r0, r3
 8002210:	370c      	adds	r7, #12
 8002212:	46bd      	mov	sp, r7
 8002214:	bc80      	pop	{r7}
 8002216:	4770      	bx	lr

08002218 <_GLOBAL__sub_I_comm_rosserial>:
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0
 800221c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002220:	2001      	movs	r0, #1
 8002222:	f7ff ffbd 	bl	80021a0 <_Z41__static_initialization_and_destruction_0ii>
 8002226:	bd80      	pop	{r7, pc}

08002228 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002228:	b480      	push	{r7}
 800222a:	b085      	sub	sp, #20
 800222c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800222e:	4b15      	ldr	r3, [pc, #84]	@ (8002284 <HAL_MspInit+0x5c>)
 8002230:	699b      	ldr	r3, [r3, #24]
 8002232:	4a14      	ldr	r2, [pc, #80]	@ (8002284 <HAL_MspInit+0x5c>)
 8002234:	f043 0301 	orr.w	r3, r3, #1
 8002238:	6193      	str	r3, [r2, #24]
 800223a:	4b12      	ldr	r3, [pc, #72]	@ (8002284 <HAL_MspInit+0x5c>)
 800223c:	699b      	ldr	r3, [r3, #24]
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	60bb      	str	r3, [r7, #8]
 8002244:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002246:	4b0f      	ldr	r3, [pc, #60]	@ (8002284 <HAL_MspInit+0x5c>)
 8002248:	69db      	ldr	r3, [r3, #28]
 800224a:	4a0e      	ldr	r2, [pc, #56]	@ (8002284 <HAL_MspInit+0x5c>)
 800224c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002250:	61d3      	str	r3, [r2, #28]
 8002252:	4b0c      	ldr	r3, [pc, #48]	@ (8002284 <HAL_MspInit+0x5c>)
 8002254:	69db      	ldr	r3, [r3, #28]
 8002256:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800225a:	607b      	str	r3, [r7, #4]
 800225c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800225e:	4b0a      	ldr	r3, [pc, #40]	@ (8002288 <HAL_MspInit+0x60>)
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	60fb      	str	r3, [r7, #12]
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800226a:	60fb      	str	r3, [r7, #12]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002272:	60fb      	str	r3, [r7, #12]
 8002274:	4a04      	ldr	r2, [pc, #16]	@ (8002288 <HAL_MspInit+0x60>)
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800227a:	bf00      	nop
 800227c:	3714      	adds	r7, #20
 800227e:	46bd      	mov	sp, r7
 8002280:	bc80      	pop	{r7}
 8002282:	4770      	bx	lr
 8002284:	40021000 	.word	0x40021000
 8002288:	40010000 	.word	0x40010000

0800228c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b08a      	sub	sp, #40	@ 0x28
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002294:	f107 0314 	add.w	r3, r7, #20
 8002298:	2200      	movs	r2, #0
 800229a:	601a      	str	r2, [r3, #0]
 800229c:	605a      	str	r2, [r3, #4]
 800229e:	609a      	str	r2, [r3, #8]
 80022a0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a4e      	ldr	r2, [pc, #312]	@ (80023e0 <HAL_UART_MspInit+0x154>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	f040 8094 	bne.w	80023d6 <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80022ae:	4b4d      	ldr	r3, [pc, #308]	@ (80023e4 <HAL_UART_MspInit+0x158>)
 80022b0:	699b      	ldr	r3, [r3, #24]
 80022b2:	4a4c      	ldr	r2, [pc, #304]	@ (80023e4 <HAL_UART_MspInit+0x158>)
 80022b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022b8:	6193      	str	r3, [r2, #24]
 80022ba:	4b4a      	ldr	r3, [pc, #296]	@ (80023e4 <HAL_UART_MspInit+0x158>)
 80022bc:	699b      	ldr	r3, [r3, #24]
 80022be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022c2:	613b      	str	r3, [r7, #16]
 80022c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022c6:	4b47      	ldr	r3, [pc, #284]	@ (80023e4 <HAL_UART_MspInit+0x158>)
 80022c8:	699b      	ldr	r3, [r3, #24]
 80022ca:	4a46      	ldr	r2, [pc, #280]	@ (80023e4 <HAL_UART_MspInit+0x158>)
 80022cc:	f043 0308 	orr.w	r3, r3, #8
 80022d0:	6193      	str	r3, [r2, #24]
 80022d2:	4b44      	ldr	r3, [pc, #272]	@ (80023e4 <HAL_UART_MspInit+0x158>)
 80022d4:	699b      	ldr	r3, [r3, #24]
 80022d6:	f003 0308 	and.w	r3, r3, #8
 80022da:	60fb      	str	r3, [r7, #12]
 80022dc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80022de:	2340      	movs	r3, #64	@ 0x40
 80022e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e2:	2302      	movs	r3, #2
 80022e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022e6:	2303      	movs	r3, #3
 80022e8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022ea:	f107 0314 	add.w	r3, r7, #20
 80022ee:	4619      	mov	r1, r3
 80022f0:	483d      	ldr	r0, [pc, #244]	@ (80023e8 <HAL_UART_MspInit+0x15c>)
 80022f2:	f000 ff75 	bl	80031e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80022f6:	2380      	movs	r3, #128	@ 0x80
 80022f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022fa:	2300      	movs	r3, #0
 80022fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fe:	2300      	movs	r3, #0
 8002300:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002302:	f107 0314 	add.w	r3, r7, #20
 8002306:	4619      	mov	r1, r3
 8002308:	4837      	ldr	r0, [pc, #220]	@ (80023e8 <HAL_UART_MspInit+0x15c>)
 800230a:	f000 ff69 	bl	80031e0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 800230e:	4b37      	ldr	r3, [pc, #220]	@ (80023ec <HAL_UART_MspInit+0x160>)
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	627b      	str	r3, [r7, #36]	@ 0x24
 8002314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002316:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800231a:	627b      	str	r3, [r7, #36]	@ 0x24
 800231c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800231e:	f043 0304 	orr.w	r3, r3, #4
 8002322:	627b      	str	r3, [r7, #36]	@ 0x24
 8002324:	4a31      	ldr	r2, [pc, #196]	@ (80023ec <HAL_UART_MspInit+0x160>)
 8002326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002328:	6053      	str	r3, [r2, #4]

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800232a:	4b31      	ldr	r3, [pc, #196]	@ (80023f0 <HAL_UART_MspInit+0x164>)
 800232c:	4a31      	ldr	r2, [pc, #196]	@ (80023f4 <HAL_UART_MspInit+0x168>)
 800232e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002330:	4b2f      	ldr	r3, [pc, #188]	@ (80023f0 <HAL_UART_MspInit+0x164>)
 8002332:	2200      	movs	r2, #0
 8002334:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002336:	4b2e      	ldr	r3, [pc, #184]	@ (80023f0 <HAL_UART_MspInit+0x164>)
 8002338:	2200      	movs	r2, #0
 800233a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800233c:	4b2c      	ldr	r3, [pc, #176]	@ (80023f0 <HAL_UART_MspInit+0x164>)
 800233e:	2280      	movs	r2, #128	@ 0x80
 8002340:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002342:	4b2b      	ldr	r3, [pc, #172]	@ (80023f0 <HAL_UART_MspInit+0x164>)
 8002344:	2200      	movs	r2, #0
 8002346:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002348:	4b29      	ldr	r3, [pc, #164]	@ (80023f0 <HAL_UART_MspInit+0x164>)
 800234a:	2200      	movs	r2, #0
 800234c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800234e:	4b28      	ldr	r3, [pc, #160]	@ (80023f0 <HAL_UART_MspInit+0x164>)
 8002350:	2200      	movs	r2, #0
 8002352:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002354:	4b26      	ldr	r3, [pc, #152]	@ (80023f0 <HAL_UART_MspInit+0x164>)
 8002356:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800235a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800235c:	4824      	ldr	r0, [pc, #144]	@ (80023f0 <HAL_UART_MspInit+0x164>)
 800235e:	f000 fabb 	bl	80028d8 <HAL_DMA_Init>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d001      	beq.n	800236c <HAL_UART_MspInit+0xe0>
    {
      Error_Handler();
 8002368:	f7fe f858 	bl	800041c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	4a20      	ldr	r2, [pc, #128]	@ (80023f0 <HAL_UART_MspInit+0x164>)
 8002370:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002372:	4a1f      	ldr	r2, [pc, #124]	@ (80023f0 <HAL_UART_MspInit+0x164>)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8002378:	4b1f      	ldr	r3, [pc, #124]	@ (80023f8 <HAL_UART_MspInit+0x16c>)
 800237a:	4a20      	ldr	r2, [pc, #128]	@ (80023fc <HAL_UART_MspInit+0x170>)
 800237c:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800237e:	4b1e      	ldr	r3, [pc, #120]	@ (80023f8 <HAL_UART_MspInit+0x16c>)
 8002380:	2210      	movs	r2, #16
 8002382:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002384:	4b1c      	ldr	r3, [pc, #112]	@ (80023f8 <HAL_UART_MspInit+0x16c>)
 8002386:	2200      	movs	r2, #0
 8002388:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800238a:	4b1b      	ldr	r3, [pc, #108]	@ (80023f8 <HAL_UART_MspInit+0x16c>)
 800238c:	2280      	movs	r2, #128	@ 0x80
 800238e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002390:	4b19      	ldr	r3, [pc, #100]	@ (80023f8 <HAL_UART_MspInit+0x16c>)
 8002392:	2200      	movs	r2, #0
 8002394:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002396:	4b18      	ldr	r3, [pc, #96]	@ (80023f8 <HAL_UART_MspInit+0x16c>)
 8002398:	2200      	movs	r2, #0
 800239a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800239c:	4b16      	ldr	r3, [pc, #88]	@ (80023f8 <HAL_UART_MspInit+0x16c>)
 800239e:	2200      	movs	r2, #0
 80023a0:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80023a2:	4b15      	ldr	r3, [pc, #84]	@ (80023f8 <HAL_UART_MspInit+0x16c>)
 80023a4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80023a8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80023aa:	4813      	ldr	r0, [pc, #76]	@ (80023f8 <HAL_UART_MspInit+0x16c>)
 80023ac:	f000 fa94 	bl	80028d8 <HAL_DMA_Init>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 80023b6:	f7fe f831 	bl	800041c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a0e      	ldr	r2, [pc, #56]	@ (80023f8 <HAL_UART_MspInit+0x16c>)
 80023be:	639a      	str	r2, [r3, #56]	@ 0x38
 80023c0:	4a0d      	ldr	r2, [pc, #52]	@ (80023f8 <HAL_UART_MspInit+0x16c>)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80023c6:	2200      	movs	r2, #0
 80023c8:	2100      	movs	r1, #0
 80023ca:	2025      	movs	r0, #37	@ 0x25
 80023cc:	f000 fa4d 	bl	800286a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80023d0:	2025      	movs	r0, #37	@ 0x25
 80023d2:	f000 fa66 	bl	80028a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80023d6:	bf00      	nop
 80023d8:	3728      	adds	r7, #40	@ 0x28
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	40013800 	.word	0x40013800
 80023e4:	40021000 	.word	0x40021000
 80023e8:	40010c00 	.word	0x40010c00
 80023ec:	40010000 	.word	0x40010000
 80023f0:	200000c0 	.word	0x200000c0
 80023f4:	40020058 	.word	0x40020058
 80023f8:	20000104 	.word	0x20000104
 80023fc:	40020044 	.word	0x40020044

08002400 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002404:	bf00      	nop
 8002406:	e7fd      	b.n	8002404 <NMI_Handler+0x4>

08002408 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800240c:	bf00      	nop
 800240e:	e7fd      	b.n	800240c <HardFault_Handler+0x4>

08002410 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002414:	bf00      	nop
 8002416:	e7fd      	b.n	8002414 <MemManage_Handler+0x4>

08002418 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800241c:	bf00      	nop
 800241e:	e7fd      	b.n	800241c <BusFault_Handler+0x4>

08002420 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002424:	bf00      	nop
 8002426:	e7fd      	b.n	8002424 <UsageFault_Handler+0x4>

08002428 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800242c:	bf00      	nop
 800242e:	46bd      	mov	sp, r7
 8002430:	bc80      	pop	{r7}
 8002432:	4770      	bx	lr

08002434 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002438:	bf00      	nop
 800243a:	46bd      	mov	sp, r7
 800243c:	bc80      	pop	{r7}
 800243e:	4770      	bx	lr

08002440 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002444:	bf00      	nop
 8002446:	46bd      	mov	sp, r7
 8002448:	bc80      	pop	{r7}
 800244a:	4770      	bx	lr

0800244c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002450:	f000 f8f4 	bl	800263c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002454:	bf00      	nop
 8002456:	bd80      	pop	{r7, pc}

08002458 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800245c:	4802      	ldr	r0, [pc, #8]	@ (8002468 <DMA1_Channel4_IRQHandler+0x10>)
 800245e:	f000 fc55 	bl	8002d0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002462:	bf00      	nop
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	20000104 	.word	0x20000104

0800246c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002470:	4802      	ldr	r0, [pc, #8]	@ (800247c <DMA1_Channel5_IRQHandler+0x10>)
 8002472:	f000 fc4b 	bl	8002d0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002476:	bf00      	nop
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	200000c0 	.word	0x200000c0

08002480 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart_rosserial);
 8002484:	4802      	ldr	r0, [pc, #8]	@ (8002490 <USART1_IRQHandler+0x10>)
 8002486:	f001 fd4d 	bl	8003f24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800248a:	bf00      	nop
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	20000078 	.word	0x20000078

08002494 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b086      	sub	sp, #24
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800249c:	4a14      	ldr	r2, [pc, #80]	@ (80024f0 <_sbrk+0x5c>)
 800249e:	4b15      	ldr	r3, [pc, #84]	@ (80024f4 <_sbrk+0x60>)
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024a8:	4b13      	ldr	r3, [pc, #76]	@ (80024f8 <_sbrk+0x64>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d102      	bne.n	80024b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024b0:	4b11      	ldr	r3, [pc, #68]	@ (80024f8 <_sbrk+0x64>)
 80024b2:	4a12      	ldr	r2, [pc, #72]	@ (80024fc <_sbrk+0x68>)
 80024b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024b6:	4b10      	ldr	r3, [pc, #64]	@ (80024f8 <_sbrk+0x64>)
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4413      	add	r3, r2
 80024be:	693a      	ldr	r2, [r7, #16]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d207      	bcs.n	80024d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024c4:	f002 fc68 	bl	8004d98 <__errno>
 80024c8:	4603      	mov	r3, r0
 80024ca:	220c      	movs	r2, #12
 80024cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024ce:	f04f 33ff 	mov.w	r3, #4294967295
 80024d2:	e009      	b.n	80024e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024d4:	4b08      	ldr	r3, [pc, #32]	@ (80024f8 <_sbrk+0x64>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024da:	4b07      	ldr	r3, [pc, #28]	@ (80024f8 <_sbrk+0x64>)
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4413      	add	r3, r2
 80024e2:	4a05      	ldr	r2, [pc, #20]	@ (80024f8 <_sbrk+0x64>)
 80024e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024e6:	68fb      	ldr	r3, [r7, #12]
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3718      	adds	r7, #24
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	2000c000 	.word	0x2000c000
 80024f4:	00000400 	.word	0x00000400
 80024f8:	2000822c 	.word	0x2000822c
 80024fc:	20008380 	.word	0x20008380

08002500 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002500:	b480      	push	{r7}
 8002502:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002504:	bf00      	nop
 8002506:	46bd      	mov	sp, r7
 8002508:	bc80      	pop	{r7}
 800250a:	4770      	bx	lr

0800250c <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 800250c:	b480      	push	{r7}
 800250e:	b085      	sub	sp, #20
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	0a5a      	lsrs	r2, r3, #9
 800251c:	490f      	ldr	r1, [pc, #60]	@ (800255c <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800251e:	fba1 1202 	umull	r1, r2, r1, r2
 8002522:	09d2      	lsrs	r2, r2, #7
 8002524:	490e      	ldr	r1, [pc, #56]	@ (8002560 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8002526:	fb01 f202 	mul.w	r2, r1, r2
 800252a:	1a9b      	subs	r3, r3, r2
 800252c:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	0a5b      	lsrs	r3, r3, #9
 8002534:	4a09      	ldr	r2, [pc, #36]	@ (800255c <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8002536:	fba2 2303 	umull	r2, r3, r2, r3
 800253a:	09db      	lsrs	r3, r3, #7
 800253c:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	441a      	add	r2, r3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	68fa      	ldr	r2, [r7, #12]
 800254e:	601a      	str	r2, [r3, #0]
}
 8002550:	bf00      	nop
 8002552:	3714      	adds	r7, #20
 8002554:	46bd      	mov	sp, r7
 8002556:	bc80      	pop	{r7}
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	00044b83 	.word	0x00044b83
 8002560:	3b9aca00 	.word	0x3b9aca00

08002564 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002564:	f7ff ffcc 	bl	8002500 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002568:	480b      	ldr	r0, [pc, #44]	@ (8002598 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800256a:	490c      	ldr	r1, [pc, #48]	@ (800259c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800256c:	4a0c      	ldr	r2, [pc, #48]	@ (80025a0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800256e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002570:	e002      	b.n	8002578 <LoopCopyDataInit>

08002572 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002572:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002574:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002576:	3304      	adds	r3, #4

08002578 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002578:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800257a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800257c:	d3f9      	bcc.n	8002572 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800257e:	4a09      	ldr	r2, [pc, #36]	@ (80025a4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002580:	4c09      	ldr	r4, [pc, #36]	@ (80025a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002582:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002584:	e001      	b.n	800258a <LoopFillZerobss>

08002586 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002586:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002588:	3204      	adds	r2, #4

0800258a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800258a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800258c:	d3fb      	bcc.n	8002586 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800258e:	f002 fc09 	bl	8004da4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002592:	f7fd fe4f 	bl	8000234 <main>
  bx lr
 8002596:	4770      	bx	lr
  ldr r0, =_sdata
 8002598:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800259c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80025a0:	080052ac 	.word	0x080052ac
  ldr r2, =_sbss
 80025a4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80025a8:	2000837c 	.word	0x2000837c

080025ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80025ac:	e7fe      	b.n	80025ac <ADC1_2_IRQHandler>
	...

080025b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025b4:	4b08      	ldr	r3, [pc, #32]	@ (80025d8 <HAL_Init+0x28>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a07      	ldr	r2, [pc, #28]	@ (80025d8 <HAL_Init+0x28>)
 80025ba:	f043 0310 	orr.w	r3, r3, #16
 80025be:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025c0:	2003      	movs	r0, #3
 80025c2:	f000 f947 	bl	8002854 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025c6:	200f      	movs	r0, #15
 80025c8:	f000 f808 	bl	80025dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025cc:	f7ff fe2c 	bl	8002228 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	40022000 	.word	0x40022000

080025dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025e4:	4b12      	ldr	r3, [pc, #72]	@ (8002630 <HAL_InitTick+0x54>)
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	4b12      	ldr	r3, [pc, #72]	@ (8002634 <HAL_InitTick+0x58>)
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	4619      	mov	r1, r3
 80025ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80025f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80025f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80025fa:	4618      	mov	r0, r3
 80025fc:	f000 f95f 	bl	80028be <HAL_SYSTICK_Config>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e00e      	b.n	8002628 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2b0f      	cmp	r3, #15
 800260e:	d80a      	bhi.n	8002626 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002610:	2200      	movs	r2, #0
 8002612:	6879      	ldr	r1, [r7, #4]
 8002614:	f04f 30ff 	mov.w	r0, #4294967295
 8002618:	f000 f927 	bl	800286a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800261c:	4a06      	ldr	r2, [pc, #24]	@ (8002638 <HAL_InitTick+0x5c>)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002622:	2300      	movs	r3, #0
 8002624:	e000      	b.n	8002628 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
}
 8002628:	4618      	mov	r0, r3
 800262a:	3708      	adds	r7, #8
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	20000000 	.word	0x20000000
 8002634:	20000008 	.word	0x20000008
 8002638:	20000004 	.word	0x20000004

0800263c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002640:	4b05      	ldr	r3, [pc, #20]	@ (8002658 <HAL_IncTick+0x1c>)
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	461a      	mov	r2, r3
 8002646:	4b05      	ldr	r3, [pc, #20]	@ (800265c <HAL_IncTick+0x20>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4413      	add	r3, r2
 800264c:	4a03      	ldr	r2, [pc, #12]	@ (800265c <HAL_IncTick+0x20>)
 800264e:	6013      	str	r3, [r2, #0]
}
 8002650:	bf00      	nop
 8002652:	46bd      	mov	sp, r7
 8002654:	bc80      	pop	{r7}
 8002656:	4770      	bx	lr
 8002658:	20000008 	.word	0x20000008
 800265c:	20008230 	.word	0x20008230

08002660 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
  return uwTick;
 8002664:	4b02      	ldr	r3, [pc, #8]	@ (8002670 <HAL_GetTick+0x10>)
 8002666:	681b      	ldr	r3, [r3, #0]
}
 8002668:	4618      	mov	r0, r3
 800266a:	46bd      	mov	sp, r7
 800266c:	bc80      	pop	{r7}
 800266e:	4770      	bx	lr
 8002670:	20008230 	.word	0x20008230

08002674 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800267c:	f7ff fff0 	bl	8002660 <HAL_GetTick>
 8002680:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800268c:	d005      	beq.n	800269a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800268e:	4b0a      	ldr	r3, [pc, #40]	@ (80026b8 <HAL_Delay+0x44>)
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	461a      	mov	r2, r3
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	4413      	add	r3, r2
 8002698:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800269a:	bf00      	nop
 800269c:	f7ff ffe0 	bl	8002660 <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	68fa      	ldr	r2, [r7, #12]
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d8f7      	bhi.n	800269c <HAL_Delay+0x28>
  {
  }
}
 80026ac:	bf00      	nop
 80026ae:	bf00      	nop
 80026b0:	3710      	adds	r7, #16
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	20000008 	.word	0x20000008

080026bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026bc:	b480      	push	{r7}
 80026be:	b085      	sub	sp, #20
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f003 0307 	and.w	r3, r3, #7
 80026ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002700 <__NVIC_SetPriorityGrouping+0x44>)
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026d2:	68ba      	ldr	r2, [r7, #8]
 80026d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80026d8:	4013      	ands	r3, r2
 80026da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80026e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026ee:	4a04      	ldr	r2, [pc, #16]	@ (8002700 <__NVIC_SetPriorityGrouping+0x44>)
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	60d3      	str	r3, [r2, #12]
}
 80026f4:	bf00      	nop
 80026f6:	3714      	adds	r7, #20
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bc80      	pop	{r7}
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	e000ed00 	.word	0xe000ed00

08002704 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002708:	4b04      	ldr	r3, [pc, #16]	@ (800271c <__NVIC_GetPriorityGrouping+0x18>)
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	0a1b      	lsrs	r3, r3, #8
 800270e:	f003 0307 	and.w	r3, r3, #7
}
 8002712:	4618      	mov	r0, r3
 8002714:	46bd      	mov	sp, r7
 8002716:	bc80      	pop	{r7}
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	e000ed00 	.word	0xe000ed00

08002720 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	4603      	mov	r3, r0
 8002728:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800272a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800272e:	2b00      	cmp	r3, #0
 8002730:	db0b      	blt.n	800274a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002732:	79fb      	ldrb	r3, [r7, #7]
 8002734:	f003 021f 	and.w	r2, r3, #31
 8002738:	4906      	ldr	r1, [pc, #24]	@ (8002754 <__NVIC_EnableIRQ+0x34>)
 800273a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800273e:	095b      	lsrs	r3, r3, #5
 8002740:	2001      	movs	r0, #1
 8002742:	fa00 f202 	lsl.w	r2, r0, r2
 8002746:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800274a:	bf00      	nop
 800274c:	370c      	adds	r7, #12
 800274e:	46bd      	mov	sp, r7
 8002750:	bc80      	pop	{r7}
 8002752:	4770      	bx	lr
 8002754:	e000e100 	.word	0xe000e100

08002758 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	4603      	mov	r3, r0
 8002760:	6039      	str	r1, [r7, #0]
 8002762:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002764:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002768:	2b00      	cmp	r3, #0
 800276a:	db0a      	blt.n	8002782 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	b2da      	uxtb	r2, r3
 8002770:	490c      	ldr	r1, [pc, #48]	@ (80027a4 <__NVIC_SetPriority+0x4c>)
 8002772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002776:	0112      	lsls	r2, r2, #4
 8002778:	b2d2      	uxtb	r2, r2
 800277a:	440b      	add	r3, r1
 800277c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002780:	e00a      	b.n	8002798 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	b2da      	uxtb	r2, r3
 8002786:	4908      	ldr	r1, [pc, #32]	@ (80027a8 <__NVIC_SetPriority+0x50>)
 8002788:	79fb      	ldrb	r3, [r7, #7]
 800278a:	f003 030f 	and.w	r3, r3, #15
 800278e:	3b04      	subs	r3, #4
 8002790:	0112      	lsls	r2, r2, #4
 8002792:	b2d2      	uxtb	r2, r2
 8002794:	440b      	add	r3, r1
 8002796:	761a      	strb	r2, [r3, #24]
}
 8002798:	bf00      	nop
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	bc80      	pop	{r7}
 80027a0:	4770      	bx	lr
 80027a2:	bf00      	nop
 80027a4:	e000e100 	.word	0xe000e100
 80027a8:	e000ed00 	.word	0xe000ed00

080027ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b089      	sub	sp, #36	@ 0x24
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	60f8      	str	r0, [r7, #12]
 80027b4:	60b9      	str	r1, [r7, #8]
 80027b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f003 0307 	and.w	r3, r3, #7
 80027be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	f1c3 0307 	rsb	r3, r3, #7
 80027c6:	2b04      	cmp	r3, #4
 80027c8:	bf28      	it	cs
 80027ca:	2304      	movcs	r3, #4
 80027cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	3304      	adds	r3, #4
 80027d2:	2b06      	cmp	r3, #6
 80027d4:	d902      	bls.n	80027dc <NVIC_EncodePriority+0x30>
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	3b03      	subs	r3, #3
 80027da:	e000      	b.n	80027de <NVIC_EncodePriority+0x32>
 80027dc:	2300      	movs	r3, #0
 80027de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027e0:	f04f 32ff 	mov.w	r2, #4294967295
 80027e4:	69bb      	ldr	r3, [r7, #24]
 80027e6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ea:	43da      	mvns	r2, r3
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	401a      	ands	r2, r3
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027f4:	f04f 31ff 	mov.w	r1, #4294967295
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	fa01 f303 	lsl.w	r3, r1, r3
 80027fe:	43d9      	mvns	r1, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002804:	4313      	orrs	r3, r2
         );
}
 8002806:	4618      	mov	r0, r3
 8002808:	3724      	adds	r7, #36	@ 0x24
 800280a:	46bd      	mov	sp, r7
 800280c:	bc80      	pop	{r7}
 800280e:	4770      	bx	lr

08002810 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b082      	sub	sp, #8
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	3b01      	subs	r3, #1
 800281c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002820:	d301      	bcc.n	8002826 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002822:	2301      	movs	r3, #1
 8002824:	e00f      	b.n	8002846 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002826:	4a0a      	ldr	r2, [pc, #40]	@ (8002850 <SysTick_Config+0x40>)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	3b01      	subs	r3, #1
 800282c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800282e:	210f      	movs	r1, #15
 8002830:	f04f 30ff 	mov.w	r0, #4294967295
 8002834:	f7ff ff90 	bl	8002758 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002838:	4b05      	ldr	r3, [pc, #20]	@ (8002850 <SysTick_Config+0x40>)
 800283a:	2200      	movs	r2, #0
 800283c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800283e:	4b04      	ldr	r3, [pc, #16]	@ (8002850 <SysTick_Config+0x40>)
 8002840:	2207      	movs	r2, #7
 8002842:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002844:	2300      	movs	r3, #0
}
 8002846:	4618      	mov	r0, r3
 8002848:	3708      	adds	r7, #8
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	e000e010 	.word	0xe000e010

08002854 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f7ff ff2d 	bl	80026bc <__NVIC_SetPriorityGrouping>
}
 8002862:	bf00      	nop
 8002864:	3708      	adds	r7, #8
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}

0800286a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800286a:	b580      	push	{r7, lr}
 800286c:	b086      	sub	sp, #24
 800286e:	af00      	add	r7, sp, #0
 8002870:	4603      	mov	r3, r0
 8002872:	60b9      	str	r1, [r7, #8]
 8002874:	607a      	str	r2, [r7, #4]
 8002876:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002878:	2300      	movs	r3, #0
 800287a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800287c:	f7ff ff42 	bl	8002704 <__NVIC_GetPriorityGrouping>
 8002880:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	68b9      	ldr	r1, [r7, #8]
 8002886:	6978      	ldr	r0, [r7, #20]
 8002888:	f7ff ff90 	bl	80027ac <NVIC_EncodePriority>
 800288c:	4602      	mov	r2, r0
 800288e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002892:	4611      	mov	r1, r2
 8002894:	4618      	mov	r0, r3
 8002896:	f7ff ff5f 	bl	8002758 <__NVIC_SetPriority>
}
 800289a:	bf00      	nop
 800289c:	3718      	adds	r7, #24
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}

080028a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028a2:	b580      	push	{r7, lr}
 80028a4:	b082      	sub	sp, #8
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	4603      	mov	r3, r0
 80028aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b0:	4618      	mov	r0, r3
 80028b2:	f7ff ff35 	bl	8002720 <__NVIC_EnableIRQ>
}
 80028b6:	bf00      	nop
 80028b8:	3708      	adds	r7, #8
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}

080028be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028be:	b580      	push	{r7, lr}
 80028c0:	b082      	sub	sp, #8
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f7ff ffa2 	bl	8002810 <SysTick_Config>
 80028cc:	4603      	mov	r3, r0
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3708      	adds	r7, #8
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
	...

080028d8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80028d8:	b480      	push	{r7}
 80028da:	b085      	sub	sp, #20
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80028e0:	2300      	movs	r3, #0
 80028e2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d101      	bne.n	80028ee <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e059      	b.n	80029a2 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	461a      	mov	r2, r3
 80028f4:	4b2d      	ldr	r3, [pc, #180]	@ (80029ac <HAL_DMA_Init+0xd4>)
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d80f      	bhi.n	800291a <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	461a      	mov	r2, r3
 8002900:	4b2b      	ldr	r3, [pc, #172]	@ (80029b0 <HAL_DMA_Init+0xd8>)
 8002902:	4413      	add	r3, r2
 8002904:	4a2b      	ldr	r2, [pc, #172]	@ (80029b4 <HAL_DMA_Init+0xdc>)
 8002906:	fba2 2303 	umull	r2, r3, r2, r3
 800290a:	091b      	lsrs	r3, r3, #4
 800290c:	009a      	lsls	r2, r3, #2
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a28      	ldr	r2, [pc, #160]	@ (80029b8 <HAL_DMA_Init+0xe0>)
 8002916:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002918:	e00e      	b.n	8002938 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	461a      	mov	r2, r3
 8002920:	4b26      	ldr	r3, [pc, #152]	@ (80029bc <HAL_DMA_Init+0xe4>)
 8002922:	4413      	add	r3, r2
 8002924:	4a23      	ldr	r2, [pc, #140]	@ (80029b4 <HAL_DMA_Init+0xdc>)
 8002926:	fba2 2303 	umull	r2, r3, r2, r3
 800292a:	091b      	lsrs	r3, r3, #4
 800292c:	009a      	lsls	r2, r3, #2
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a22      	ldr	r2, [pc, #136]	@ (80029c0 <HAL_DMA_Init+0xe8>)
 8002936:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2202      	movs	r2, #2
 800293c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800294e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002952:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800295c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002968:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	695b      	ldr	r3, [r3, #20]
 800296e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002974:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	69db      	ldr	r3, [r3, #28]
 800297a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800297c:	68fa      	ldr	r2, [r7, #12]
 800297e:	4313      	orrs	r3, r2
 8002980:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	68fa      	ldr	r2, [r7, #12]
 8002988:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80029a0:	2300      	movs	r3, #0
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3714      	adds	r7, #20
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bc80      	pop	{r7}
 80029aa:	4770      	bx	lr
 80029ac:	40020407 	.word	0x40020407
 80029b0:	bffdfff8 	.word	0xbffdfff8
 80029b4:	cccccccd 	.word	0xcccccccd
 80029b8:	40020000 	.word	0x40020000
 80029bc:	bffdfbf8 	.word	0xbffdfbf8
 80029c0:	40020400 	.word	0x40020400

080029c4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b086      	sub	sp, #24
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	60b9      	str	r1, [r7, #8]
 80029ce:	607a      	str	r2, [r7, #4]
 80029d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029d2:	2300      	movs	r3, #0
 80029d4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d101      	bne.n	80029e4 <HAL_DMA_Start_IT+0x20>
 80029e0:	2302      	movs	r3, #2
 80029e2:	e04b      	b.n	8002a7c <HAL_DMA_Start_IT+0xb8>
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d13a      	bne.n	8002a6e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2202      	movs	r2, #2
 80029fc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2200      	movs	r2, #0
 8002a04:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f022 0201 	bic.w	r2, r2, #1
 8002a14:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	68b9      	ldr	r1, [r7, #8]
 8002a1c:	68f8      	ldr	r0, [r7, #12]
 8002a1e:	f000 fbb1 	bl	8003184 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d008      	beq.n	8002a3c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f042 020e 	orr.w	r2, r2, #14
 8002a38:	601a      	str	r2, [r3, #0]
 8002a3a:	e00f      	b.n	8002a5c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f022 0204 	bic.w	r2, r2, #4
 8002a4a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f042 020a 	orr.w	r2, r2, #10
 8002a5a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f042 0201 	orr.w	r2, r2, #1
 8002a6a:	601a      	str	r2, [r3, #0]
 8002a6c:	e005      	b.n	8002a7a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2200      	movs	r2, #0
 8002a72:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002a76:	2302      	movs	r3, #2
 8002a78:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002a7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3718      	adds	r7, #24
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b085      	sub	sp, #20
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d008      	beq.n	8002aae <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2204      	movs	r2, #4
 8002aa0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e020      	b.n	8002af0 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f022 020e 	bic.w	r2, r2, #14
 8002abc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f022 0201 	bic.w	r2, r2, #1
 8002acc:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ad6:	2101      	movs	r1, #1
 8002ad8:	fa01 f202 	lsl.w	r2, r1, r2
 8002adc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002aee:	7bfb      	ldrb	r3, [r7, #15]
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3714      	adds	r7, #20
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bc80      	pop	{r7}
 8002af8:	4770      	bx	lr
	...

08002afc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b04:	2300      	movs	r3, #0
 8002b06:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	d005      	beq.n	8002b20 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2204      	movs	r2, #4
 8002b18:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	73fb      	strb	r3, [r7, #15]
 8002b1e:	e0d6      	b.n	8002cce <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f022 020e 	bic.w	r2, r2, #14
 8002b2e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f022 0201 	bic.w	r2, r2, #1
 8002b3e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	461a      	mov	r2, r3
 8002b46:	4b64      	ldr	r3, [pc, #400]	@ (8002cd8 <HAL_DMA_Abort_IT+0x1dc>)
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d958      	bls.n	8002bfe <HAL_DMA_Abort_IT+0x102>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a62      	ldr	r2, [pc, #392]	@ (8002cdc <HAL_DMA_Abort_IT+0x1e0>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d04f      	beq.n	8002bf6 <HAL_DMA_Abort_IT+0xfa>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a61      	ldr	r2, [pc, #388]	@ (8002ce0 <HAL_DMA_Abort_IT+0x1e4>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d048      	beq.n	8002bf2 <HAL_DMA_Abort_IT+0xf6>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a5f      	ldr	r2, [pc, #380]	@ (8002ce4 <HAL_DMA_Abort_IT+0x1e8>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d040      	beq.n	8002bec <HAL_DMA_Abort_IT+0xf0>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a5e      	ldr	r2, [pc, #376]	@ (8002ce8 <HAL_DMA_Abort_IT+0x1ec>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d038      	beq.n	8002be6 <HAL_DMA_Abort_IT+0xea>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a5c      	ldr	r2, [pc, #368]	@ (8002cec <HAL_DMA_Abort_IT+0x1f0>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d030      	beq.n	8002be0 <HAL_DMA_Abort_IT+0xe4>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a5b      	ldr	r2, [pc, #364]	@ (8002cf0 <HAL_DMA_Abort_IT+0x1f4>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d028      	beq.n	8002bda <HAL_DMA_Abort_IT+0xde>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a52      	ldr	r2, [pc, #328]	@ (8002cd8 <HAL_DMA_Abort_IT+0x1dc>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d020      	beq.n	8002bd4 <HAL_DMA_Abort_IT+0xd8>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a57      	ldr	r2, [pc, #348]	@ (8002cf4 <HAL_DMA_Abort_IT+0x1f8>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d019      	beq.n	8002bd0 <HAL_DMA_Abort_IT+0xd4>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a55      	ldr	r2, [pc, #340]	@ (8002cf8 <HAL_DMA_Abort_IT+0x1fc>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d012      	beq.n	8002bcc <HAL_DMA_Abort_IT+0xd0>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a54      	ldr	r2, [pc, #336]	@ (8002cfc <HAL_DMA_Abort_IT+0x200>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d00a      	beq.n	8002bc6 <HAL_DMA_Abort_IT+0xca>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a52      	ldr	r2, [pc, #328]	@ (8002d00 <HAL_DMA_Abort_IT+0x204>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d102      	bne.n	8002bc0 <HAL_DMA_Abort_IT+0xc4>
 8002bba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002bbe:	e01b      	b.n	8002bf8 <HAL_DMA_Abort_IT+0xfc>
 8002bc0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002bc4:	e018      	b.n	8002bf8 <HAL_DMA_Abort_IT+0xfc>
 8002bc6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002bca:	e015      	b.n	8002bf8 <HAL_DMA_Abort_IT+0xfc>
 8002bcc:	2310      	movs	r3, #16
 8002bce:	e013      	b.n	8002bf8 <HAL_DMA_Abort_IT+0xfc>
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e011      	b.n	8002bf8 <HAL_DMA_Abort_IT+0xfc>
 8002bd4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002bd8:	e00e      	b.n	8002bf8 <HAL_DMA_Abort_IT+0xfc>
 8002bda:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002bde:	e00b      	b.n	8002bf8 <HAL_DMA_Abort_IT+0xfc>
 8002be0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002be4:	e008      	b.n	8002bf8 <HAL_DMA_Abort_IT+0xfc>
 8002be6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002bea:	e005      	b.n	8002bf8 <HAL_DMA_Abort_IT+0xfc>
 8002bec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002bf0:	e002      	b.n	8002bf8 <HAL_DMA_Abort_IT+0xfc>
 8002bf2:	2310      	movs	r3, #16
 8002bf4:	e000      	b.n	8002bf8 <HAL_DMA_Abort_IT+0xfc>
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	4a42      	ldr	r2, [pc, #264]	@ (8002d04 <HAL_DMA_Abort_IT+0x208>)
 8002bfa:	6053      	str	r3, [r2, #4]
 8002bfc:	e057      	b.n	8002cae <HAL_DMA_Abort_IT+0x1b2>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a36      	ldr	r2, [pc, #216]	@ (8002cdc <HAL_DMA_Abort_IT+0x1e0>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d04f      	beq.n	8002ca8 <HAL_DMA_Abort_IT+0x1ac>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a34      	ldr	r2, [pc, #208]	@ (8002ce0 <HAL_DMA_Abort_IT+0x1e4>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d048      	beq.n	8002ca4 <HAL_DMA_Abort_IT+0x1a8>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a33      	ldr	r2, [pc, #204]	@ (8002ce4 <HAL_DMA_Abort_IT+0x1e8>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d040      	beq.n	8002c9e <HAL_DMA_Abort_IT+0x1a2>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a31      	ldr	r2, [pc, #196]	@ (8002ce8 <HAL_DMA_Abort_IT+0x1ec>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d038      	beq.n	8002c98 <HAL_DMA_Abort_IT+0x19c>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a30      	ldr	r2, [pc, #192]	@ (8002cec <HAL_DMA_Abort_IT+0x1f0>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d030      	beq.n	8002c92 <HAL_DMA_Abort_IT+0x196>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a2e      	ldr	r2, [pc, #184]	@ (8002cf0 <HAL_DMA_Abort_IT+0x1f4>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d028      	beq.n	8002c8c <HAL_DMA_Abort_IT+0x190>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a26      	ldr	r2, [pc, #152]	@ (8002cd8 <HAL_DMA_Abort_IT+0x1dc>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d020      	beq.n	8002c86 <HAL_DMA_Abort_IT+0x18a>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a2a      	ldr	r2, [pc, #168]	@ (8002cf4 <HAL_DMA_Abort_IT+0x1f8>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d019      	beq.n	8002c82 <HAL_DMA_Abort_IT+0x186>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a29      	ldr	r2, [pc, #164]	@ (8002cf8 <HAL_DMA_Abort_IT+0x1fc>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d012      	beq.n	8002c7e <HAL_DMA_Abort_IT+0x182>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a27      	ldr	r2, [pc, #156]	@ (8002cfc <HAL_DMA_Abort_IT+0x200>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d00a      	beq.n	8002c78 <HAL_DMA_Abort_IT+0x17c>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a26      	ldr	r2, [pc, #152]	@ (8002d00 <HAL_DMA_Abort_IT+0x204>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d102      	bne.n	8002c72 <HAL_DMA_Abort_IT+0x176>
 8002c6c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c70:	e01b      	b.n	8002caa <HAL_DMA_Abort_IT+0x1ae>
 8002c72:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002c76:	e018      	b.n	8002caa <HAL_DMA_Abort_IT+0x1ae>
 8002c78:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002c7c:	e015      	b.n	8002caa <HAL_DMA_Abort_IT+0x1ae>
 8002c7e:	2310      	movs	r3, #16
 8002c80:	e013      	b.n	8002caa <HAL_DMA_Abort_IT+0x1ae>
 8002c82:	2301      	movs	r3, #1
 8002c84:	e011      	b.n	8002caa <HAL_DMA_Abort_IT+0x1ae>
 8002c86:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002c8a:	e00e      	b.n	8002caa <HAL_DMA_Abort_IT+0x1ae>
 8002c8c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002c90:	e00b      	b.n	8002caa <HAL_DMA_Abort_IT+0x1ae>
 8002c92:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002c96:	e008      	b.n	8002caa <HAL_DMA_Abort_IT+0x1ae>
 8002c98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c9c:	e005      	b.n	8002caa <HAL_DMA_Abort_IT+0x1ae>
 8002c9e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002ca2:	e002      	b.n	8002caa <HAL_DMA_Abort_IT+0x1ae>
 8002ca4:	2310      	movs	r3, #16
 8002ca6:	e000      	b.n	8002caa <HAL_DMA_Abort_IT+0x1ae>
 8002ca8:	2301      	movs	r3, #1
 8002caa:	4a17      	ldr	r2, [pc, #92]	@ (8002d08 <HAL_DMA_Abort_IT+0x20c>)
 8002cac:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d003      	beq.n	8002cce <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	4798      	blx	r3
    } 
  }
  return status;
 8002cce:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3710      	adds	r7, #16
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	40020080 	.word	0x40020080
 8002cdc:	40020008 	.word	0x40020008
 8002ce0:	4002001c 	.word	0x4002001c
 8002ce4:	40020030 	.word	0x40020030
 8002ce8:	40020044 	.word	0x40020044
 8002cec:	40020058 	.word	0x40020058
 8002cf0:	4002006c 	.word	0x4002006c
 8002cf4:	40020408 	.word	0x40020408
 8002cf8:	4002041c 	.word	0x4002041c
 8002cfc:	40020430 	.word	0x40020430
 8002d00:	40020444 	.word	0x40020444
 8002d04:	40020400 	.word	0x40020400
 8002d08:	40020000 	.word	0x40020000

08002d0c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d28:	2204      	movs	r2, #4
 8002d2a:	409a      	lsls	r2, r3
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	4013      	ands	r3, r2
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	f000 80f1 	beq.w	8002f18 <HAL_DMA_IRQHandler+0x20c>
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	f003 0304 	and.w	r3, r3, #4
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	f000 80eb 	beq.w	8002f18 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0320 	and.w	r3, r3, #32
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d107      	bne.n	8002d60 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f022 0204 	bic.w	r2, r2, #4
 8002d5e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	461a      	mov	r2, r3
 8002d66:	4b5f      	ldr	r3, [pc, #380]	@ (8002ee4 <HAL_DMA_IRQHandler+0x1d8>)
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d958      	bls.n	8002e1e <HAL_DMA_IRQHandler+0x112>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a5d      	ldr	r2, [pc, #372]	@ (8002ee8 <HAL_DMA_IRQHandler+0x1dc>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d04f      	beq.n	8002e16 <HAL_DMA_IRQHandler+0x10a>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a5c      	ldr	r2, [pc, #368]	@ (8002eec <HAL_DMA_IRQHandler+0x1e0>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d048      	beq.n	8002e12 <HAL_DMA_IRQHandler+0x106>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a5a      	ldr	r2, [pc, #360]	@ (8002ef0 <HAL_DMA_IRQHandler+0x1e4>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d040      	beq.n	8002e0c <HAL_DMA_IRQHandler+0x100>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a59      	ldr	r2, [pc, #356]	@ (8002ef4 <HAL_DMA_IRQHandler+0x1e8>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d038      	beq.n	8002e06 <HAL_DMA_IRQHandler+0xfa>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a57      	ldr	r2, [pc, #348]	@ (8002ef8 <HAL_DMA_IRQHandler+0x1ec>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d030      	beq.n	8002e00 <HAL_DMA_IRQHandler+0xf4>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a56      	ldr	r2, [pc, #344]	@ (8002efc <HAL_DMA_IRQHandler+0x1f0>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d028      	beq.n	8002dfa <HAL_DMA_IRQHandler+0xee>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a4d      	ldr	r2, [pc, #308]	@ (8002ee4 <HAL_DMA_IRQHandler+0x1d8>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d020      	beq.n	8002df4 <HAL_DMA_IRQHandler+0xe8>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a52      	ldr	r2, [pc, #328]	@ (8002f00 <HAL_DMA_IRQHandler+0x1f4>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d019      	beq.n	8002df0 <HAL_DMA_IRQHandler+0xe4>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a50      	ldr	r2, [pc, #320]	@ (8002f04 <HAL_DMA_IRQHandler+0x1f8>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d012      	beq.n	8002dec <HAL_DMA_IRQHandler+0xe0>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a4f      	ldr	r2, [pc, #316]	@ (8002f08 <HAL_DMA_IRQHandler+0x1fc>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d00a      	beq.n	8002de6 <HAL_DMA_IRQHandler+0xda>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a4d      	ldr	r2, [pc, #308]	@ (8002f0c <HAL_DMA_IRQHandler+0x200>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d102      	bne.n	8002de0 <HAL_DMA_IRQHandler+0xd4>
 8002dda:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002dde:	e01b      	b.n	8002e18 <HAL_DMA_IRQHandler+0x10c>
 8002de0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002de4:	e018      	b.n	8002e18 <HAL_DMA_IRQHandler+0x10c>
 8002de6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002dea:	e015      	b.n	8002e18 <HAL_DMA_IRQHandler+0x10c>
 8002dec:	2340      	movs	r3, #64	@ 0x40
 8002dee:	e013      	b.n	8002e18 <HAL_DMA_IRQHandler+0x10c>
 8002df0:	2304      	movs	r3, #4
 8002df2:	e011      	b.n	8002e18 <HAL_DMA_IRQHandler+0x10c>
 8002df4:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002df8:	e00e      	b.n	8002e18 <HAL_DMA_IRQHandler+0x10c>
 8002dfa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002dfe:	e00b      	b.n	8002e18 <HAL_DMA_IRQHandler+0x10c>
 8002e00:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002e04:	e008      	b.n	8002e18 <HAL_DMA_IRQHandler+0x10c>
 8002e06:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002e0a:	e005      	b.n	8002e18 <HAL_DMA_IRQHandler+0x10c>
 8002e0c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002e10:	e002      	b.n	8002e18 <HAL_DMA_IRQHandler+0x10c>
 8002e12:	2340      	movs	r3, #64	@ 0x40
 8002e14:	e000      	b.n	8002e18 <HAL_DMA_IRQHandler+0x10c>
 8002e16:	2304      	movs	r3, #4
 8002e18:	4a3d      	ldr	r2, [pc, #244]	@ (8002f10 <HAL_DMA_IRQHandler+0x204>)
 8002e1a:	6053      	str	r3, [r2, #4]
 8002e1c:	e057      	b.n	8002ece <HAL_DMA_IRQHandler+0x1c2>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a31      	ldr	r2, [pc, #196]	@ (8002ee8 <HAL_DMA_IRQHandler+0x1dc>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d04f      	beq.n	8002ec8 <HAL_DMA_IRQHandler+0x1bc>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a2f      	ldr	r2, [pc, #188]	@ (8002eec <HAL_DMA_IRQHandler+0x1e0>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d048      	beq.n	8002ec4 <HAL_DMA_IRQHandler+0x1b8>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a2e      	ldr	r2, [pc, #184]	@ (8002ef0 <HAL_DMA_IRQHandler+0x1e4>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d040      	beq.n	8002ebe <HAL_DMA_IRQHandler+0x1b2>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a2c      	ldr	r2, [pc, #176]	@ (8002ef4 <HAL_DMA_IRQHandler+0x1e8>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d038      	beq.n	8002eb8 <HAL_DMA_IRQHandler+0x1ac>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a2b      	ldr	r2, [pc, #172]	@ (8002ef8 <HAL_DMA_IRQHandler+0x1ec>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d030      	beq.n	8002eb2 <HAL_DMA_IRQHandler+0x1a6>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a29      	ldr	r2, [pc, #164]	@ (8002efc <HAL_DMA_IRQHandler+0x1f0>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d028      	beq.n	8002eac <HAL_DMA_IRQHandler+0x1a0>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a21      	ldr	r2, [pc, #132]	@ (8002ee4 <HAL_DMA_IRQHandler+0x1d8>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d020      	beq.n	8002ea6 <HAL_DMA_IRQHandler+0x19a>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a25      	ldr	r2, [pc, #148]	@ (8002f00 <HAL_DMA_IRQHandler+0x1f4>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d019      	beq.n	8002ea2 <HAL_DMA_IRQHandler+0x196>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a24      	ldr	r2, [pc, #144]	@ (8002f04 <HAL_DMA_IRQHandler+0x1f8>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d012      	beq.n	8002e9e <HAL_DMA_IRQHandler+0x192>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a22      	ldr	r2, [pc, #136]	@ (8002f08 <HAL_DMA_IRQHandler+0x1fc>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d00a      	beq.n	8002e98 <HAL_DMA_IRQHandler+0x18c>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a21      	ldr	r2, [pc, #132]	@ (8002f0c <HAL_DMA_IRQHandler+0x200>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d102      	bne.n	8002e92 <HAL_DMA_IRQHandler+0x186>
 8002e8c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002e90:	e01b      	b.n	8002eca <HAL_DMA_IRQHandler+0x1be>
 8002e92:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002e96:	e018      	b.n	8002eca <HAL_DMA_IRQHandler+0x1be>
 8002e98:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002e9c:	e015      	b.n	8002eca <HAL_DMA_IRQHandler+0x1be>
 8002e9e:	2340      	movs	r3, #64	@ 0x40
 8002ea0:	e013      	b.n	8002eca <HAL_DMA_IRQHandler+0x1be>
 8002ea2:	2304      	movs	r3, #4
 8002ea4:	e011      	b.n	8002eca <HAL_DMA_IRQHandler+0x1be>
 8002ea6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002eaa:	e00e      	b.n	8002eca <HAL_DMA_IRQHandler+0x1be>
 8002eac:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002eb0:	e00b      	b.n	8002eca <HAL_DMA_IRQHandler+0x1be>
 8002eb2:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002eb6:	e008      	b.n	8002eca <HAL_DMA_IRQHandler+0x1be>
 8002eb8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002ebc:	e005      	b.n	8002eca <HAL_DMA_IRQHandler+0x1be>
 8002ebe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002ec2:	e002      	b.n	8002eca <HAL_DMA_IRQHandler+0x1be>
 8002ec4:	2340      	movs	r3, #64	@ 0x40
 8002ec6:	e000      	b.n	8002eca <HAL_DMA_IRQHandler+0x1be>
 8002ec8:	2304      	movs	r3, #4
 8002eca:	4a12      	ldr	r2, [pc, #72]	@ (8002f14 <HAL_DMA_IRQHandler+0x208>)
 8002ecc:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	f000 8136 	beq.w	8003144 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002ee0:	e130      	b.n	8003144 <HAL_DMA_IRQHandler+0x438>
 8002ee2:	bf00      	nop
 8002ee4:	40020080 	.word	0x40020080
 8002ee8:	40020008 	.word	0x40020008
 8002eec:	4002001c 	.word	0x4002001c
 8002ef0:	40020030 	.word	0x40020030
 8002ef4:	40020044 	.word	0x40020044
 8002ef8:	40020058 	.word	0x40020058
 8002efc:	4002006c 	.word	0x4002006c
 8002f00:	40020408 	.word	0x40020408
 8002f04:	4002041c 	.word	0x4002041c
 8002f08:	40020430 	.word	0x40020430
 8002f0c:	40020444 	.word	0x40020444
 8002f10:	40020400 	.word	0x40020400
 8002f14:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f1c:	2202      	movs	r2, #2
 8002f1e:	409a      	lsls	r2, r3
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	4013      	ands	r3, r2
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	f000 80dd 	beq.w	80030e4 <HAL_DMA_IRQHandler+0x3d8>
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	f003 0302 	and.w	r3, r3, #2
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	f000 80d7 	beq.w	80030e4 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0320 	and.w	r3, r3, #32
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d10b      	bne.n	8002f5c <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f022 020a 	bic.w	r2, r2, #10
 8002f52:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	461a      	mov	r2, r3
 8002f62:	4b7b      	ldr	r3, [pc, #492]	@ (8003150 <HAL_DMA_IRQHandler+0x444>)
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d958      	bls.n	800301a <HAL_DMA_IRQHandler+0x30e>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a79      	ldr	r2, [pc, #484]	@ (8003154 <HAL_DMA_IRQHandler+0x448>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d04f      	beq.n	8003012 <HAL_DMA_IRQHandler+0x306>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a78      	ldr	r2, [pc, #480]	@ (8003158 <HAL_DMA_IRQHandler+0x44c>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d048      	beq.n	800300e <HAL_DMA_IRQHandler+0x302>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a76      	ldr	r2, [pc, #472]	@ (800315c <HAL_DMA_IRQHandler+0x450>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d040      	beq.n	8003008 <HAL_DMA_IRQHandler+0x2fc>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a75      	ldr	r2, [pc, #468]	@ (8003160 <HAL_DMA_IRQHandler+0x454>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d038      	beq.n	8003002 <HAL_DMA_IRQHandler+0x2f6>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a73      	ldr	r2, [pc, #460]	@ (8003164 <HAL_DMA_IRQHandler+0x458>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d030      	beq.n	8002ffc <HAL_DMA_IRQHandler+0x2f0>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a72      	ldr	r2, [pc, #456]	@ (8003168 <HAL_DMA_IRQHandler+0x45c>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d028      	beq.n	8002ff6 <HAL_DMA_IRQHandler+0x2ea>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a69      	ldr	r2, [pc, #420]	@ (8003150 <HAL_DMA_IRQHandler+0x444>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d020      	beq.n	8002ff0 <HAL_DMA_IRQHandler+0x2e4>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a6e      	ldr	r2, [pc, #440]	@ (800316c <HAL_DMA_IRQHandler+0x460>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d019      	beq.n	8002fec <HAL_DMA_IRQHandler+0x2e0>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a6c      	ldr	r2, [pc, #432]	@ (8003170 <HAL_DMA_IRQHandler+0x464>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d012      	beq.n	8002fe8 <HAL_DMA_IRQHandler+0x2dc>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a6b      	ldr	r2, [pc, #428]	@ (8003174 <HAL_DMA_IRQHandler+0x468>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d00a      	beq.n	8002fe2 <HAL_DMA_IRQHandler+0x2d6>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a69      	ldr	r2, [pc, #420]	@ (8003178 <HAL_DMA_IRQHandler+0x46c>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d102      	bne.n	8002fdc <HAL_DMA_IRQHandler+0x2d0>
 8002fd6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002fda:	e01b      	b.n	8003014 <HAL_DMA_IRQHandler+0x308>
 8002fdc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002fe0:	e018      	b.n	8003014 <HAL_DMA_IRQHandler+0x308>
 8002fe2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002fe6:	e015      	b.n	8003014 <HAL_DMA_IRQHandler+0x308>
 8002fe8:	2320      	movs	r3, #32
 8002fea:	e013      	b.n	8003014 <HAL_DMA_IRQHandler+0x308>
 8002fec:	2302      	movs	r3, #2
 8002fee:	e011      	b.n	8003014 <HAL_DMA_IRQHandler+0x308>
 8002ff0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002ff4:	e00e      	b.n	8003014 <HAL_DMA_IRQHandler+0x308>
 8002ff6:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002ffa:	e00b      	b.n	8003014 <HAL_DMA_IRQHandler+0x308>
 8002ffc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003000:	e008      	b.n	8003014 <HAL_DMA_IRQHandler+0x308>
 8003002:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003006:	e005      	b.n	8003014 <HAL_DMA_IRQHandler+0x308>
 8003008:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800300c:	e002      	b.n	8003014 <HAL_DMA_IRQHandler+0x308>
 800300e:	2320      	movs	r3, #32
 8003010:	e000      	b.n	8003014 <HAL_DMA_IRQHandler+0x308>
 8003012:	2302      	movs	r3, #2
 8003014:	4a59      	ldr	r2, [pc, #356]	@ (800317c <HAL_DMA_IRQHandler+0x470>)
 8003016:	6053      	str	r3, [r2, #4]
 8003018:	e057      	b.n	80030ca <HAL_DMA_IRQHandler+0x3be>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a4d      	ldr	r2, [pc, #308]	@ (8003154 <HAL_DMA_IRQHandler+0x448>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d04f      	beq.n	80030c4 <HAL_DMA_IRQHandler+0x3b8>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a4b      	ldr	r2, [pc, #300]	@ (8003158 <HAL_DMA_IRQHandler+0x44c>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d048      	beq.n	80030c0 <HAL_DMA_IRQHandler+0x3b4>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a4a      	ldr	r2, [pc, #296]	@ (800315c <HAL_DMA_IRQHandler+0x450>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d040      	beq.n	80030ba <HAL_DMA_IRQHandler+0x3ae>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a48      	ldr	r2, [pc, #288]	@ (8003160 <HAL_DMA_IRQHandler+0x454>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d038      	beq.n	80030b4 <HAL_DMA_IRQHandler+0x3a8>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a47      	ldr	r2, [pc, #284]	@ (8003164 <HAL_DMA_IRQHandler+0x458>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d030      	beq.n	80030ae <HAL_DMA_IRQHandler+0x3a2>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a45      	ldr	r2, [pc, #276]	@ (8003168 <HAL_DMA_IRQHandler+0x45c>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d028      	beq.n	80030a8 <HAL_DMA_IRQHandler+0x39c>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a3d      	ldr	r2, [pc, #244]	@ (8003150 <HAL_DMA_IRQHandler+0x444>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d020      	beq.n	80030a2 <HAL_DMA_IRQHandler+0x396>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a41      	ldr	r2, [pc, #260]	@ (800316c <HAL_DMA_IRQHandler+0x460>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d019      	beq.n	800309e <HAL_DMA_IRQHandler+0x392>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a40      	ldr	r2, [pc, #256]	@ (8003170 <HAL_DMA_IRQHandler+0x464>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d012      	beq.n	800309a <HAL_DMA_IRQHandler+0x38e>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a3e      	ldr	r2, [pc, #248]	@ (8003174 <HAL_DMA_IRQHandler+0x468>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d00a      	beq.n	8003094 <HAL_DMA_IRQHandler+0x388>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a3d      	ldr	r2, [pc, #244]	@ (8003178 <HAL_DMA_IRQHandler+0x46c>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d102      	bne.n	800308e <HAL_DMA_IRQHandler+0x382>
 8003088:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800308c:	e01b      	b.n	80030c6 <HAL_DMA_IRQHandler+0x3ba>
 800308e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003092:	e018      	b.n	80030c6 <HAL_DMA_IRQHandler+0x3ba>
 8003094:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003098:	e015      	b.n	80030c6 <HAL_DMA_IRQHandler+0x3ba>
 800309a:	2320      	movs	r3, #32
 800309c:	e013      	b.n	80030c6 <HAL_DMA_IRQHandler+0x3ba>
 800309e:	2302      	movs	r3, #2
 80030a0:	e011      	b.n	80030c6 <HAL_DMA_IRQHandler+0x3ba>
 80030a2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80030a6:	e00e      	b.n	80030c6 <HAL_DMA_IRQHandler+0x3ba>
 80030a8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80030ac:	e00b      	b.n	80030c6 <HAL_DMA_IRQHandler+0x3ba>
 80030ae:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80030b2:	e008      	b.n	80030c6 <HAL_DMA_IRQHandler+0x3ba>
 80030b4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80030b8:	e005      	b.n	80030c6 <HAL_DMA_IRQHandler+0x3ba>
 80030ba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80030be:	e002      	b.n	80030c6 <HAL_DMA_IRQHandler+0x3ba>
 80030c0:	2320      	movs	r3, #32
 80030c2:	e000      	b.n	80030c6 <HAL_DMA_IRQHandler+0x3ba>
 80030c4:	2302      	movs	r3, #2
 80030c6:	4a2e      	ldr	r2, [pc, #184]	@ (8003180 <HAL_DMA_IRQHandler+0x474>)
 80030c8:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d034      	beq.n	8003144 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80030e2:	e02f      	b.n	8003144 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e8:	2208      	movs	r2, #8
 80030ea:	409a      	lsls	r2, r3
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	4013      	ands	r3, r2
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d028      	beq.n	8003146 <HAL_DMA_IRQHandler+0x43a>
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	f003 0308 	and.w	r3, r3, #8
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d023      	beq.n	8003146 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f022 020e 	bic.w	r2, r2, #14
 800310c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003116:	2101      	movs	r1, #1
 8003118:	fa01 f202 	lsl.w	r2, r1, r2
 800311c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2201      	movs	r2, #1
 8003122:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2201      	movs	r2, #1
 8003128:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003138:	2b00      	cmp	r3, #0
 800313a:	d004      	beq.n	8003146 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	4798      	blx	r3
    }
  }
  return;
 8003144:	bf00      	nop
 8003146:	bf00      	nop
}
 8003148:	3710      	adds	r7, #16
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	40020080 	.word	0x40020080
 8003154:	40020008 	.word	0x40020008
 8003158:	4002001c 	.word	0x4002001c
 800315c:	40020030 	.word	0x40020030
 8003160:	40020044 	.word	0x40020044
 8003164:	40020058 	.word	0x40020058
 8003168:	4002006c 	.word	0x4002006c
 800316c:	40020408 	.word	0x40020408
 8003170:	4002041c 	.word	0x4002041c
 8003174:	40020430 	.word	0x40020430
 8003178:	40020444 	.word	0x40020444
 800317c:	40020400 	.word	0x40020400
 8003180:	40020000 	.word	0x40020000

08003184 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003184:	b480      	push	{r7}
 8003186:	b085      	sub	sp, #20
 8003188:	af00      	add	r7, sp, #0
 800318a:	60f8      	str	r0, [r7, #12]
 800318c:	60b9      	str	r1, [r7, #8]
 800318e:	607a      	str	r2, [r7, #4]
 8003190:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800319a:	2101      	movs	r1, #1
 800319c:	fa01 f202 	lsl.w	r2, r1, r2
 80031a0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	683a      	ldr	r2, [r7, #0]
 80031a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	2b10      	cmp	r3, #16
 80031b0:	d108      	bne.n	80031c4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	68ba      	ldr	r2, [r7, #8]
 80031c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80031c2:	e007      	b.n	80031d4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	68ba      	ldr	r2, [r7, #8]
 80031ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	60da      	str	r2, [r3, #12]
}
 80031d4:	bf00      	nop
 80031d6:	3714      	adds	r7, #20
 80031d8:	46bd      	mov	sp, r7
 80031da:	bc80      	pop	{r7}
 80031dc:	4770      	bx	lr
	...

080031e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b08b      	sub	sp, #44	@ 0x2c
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80031ea:	2300      	movs	r3, #0
 80031ec:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80031ee:	2300      	movs	r3, #0
 80031f0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031f2:	e179      	b.n	80034e8 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80031f4:	2201      	movs	r2, #1
 80031f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031f8:	fa02 f303 	lsl.w	r3, r2, r3
 80031fc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	69fa      	ldr	r2, [r7, #28]
 8003204:	4013      	ands	r3, r2
 8003206:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003208:	69ba      	ldr	r2, [r7, #24]
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	429a      	cmp	r2, r3
 800320e:	f040 8168 	bne.w	80034e2 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	4a96      	ldr	r2, [pc, #600]	@ (8003470 <HAL_GPIO_Init+0x290>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d05e      	beq.n	80032da <HAL_GPIO_Init+0xfa>
 800321c:	4a94      	ldr	r2, [pc, #592]	@ (8003470 <HAL_GPIO_Init+0x290>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d875      	bhi.n	800330e <HAL_GPIO_Init+0x12e>
 8003222:	4a94      	ldr	r2, [pc, #592]	@ (8003474 <HAL_GPIO_Init+0x294>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d058      	beq.n	80032da <HAL_GPIO_Init+0xfa>
 8003228:	4a92      	ldr	r2, [pc, #584]	@ (8003474 <HAL_GPIO_Init+0x294>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d86f      	bhi.n	800330e <HAL_GPIO_Init+0x12e>
 800322e:	4a92      	ldr	r2, [pc, #584]	@ (8003478 <HAL_GPIO_Init+0x298>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d052      	beq.n	80032da <HAL_GPIO_Init+0xfa>
 8003234:	4a90      	ldr	r2, [pc, #576]	@ (8003478 <HAL_GPIO_Init+0x298>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d869      	bhi.n	800330e <HAL_GPIO_Init+0x12e>
 800323a:	4a90      	ldr	r2, [pc, #576]	@ (800347c <HAL_GPIO_Init+0x29c>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d04c      	beq.n	80032da <HAL_GPIO_Init+0xfa>
 8003240:	4a8e      	ldr	r2, [pc, #568]	@ (800347c <HAL_GPIO_Init+0x29c>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d863      	bhi.n	800330e <HAL_GPIO_Init+0x12e>
 8003246:	4a8e      	ldr	r2, [pc, #568]	@ (8003480 <HAL_GPIO_Init+0x2a0>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d046      	beq.n	80032da <HAL_GPIO_Init+0xfa>
 800324c:	4a8c      	ldr	r2, [pc, #560]	@ (8003480 <HAL_GPIO_Init+0x2a0>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d85d      	bhi.n	800330e <HAL_GPIO_Init+0x12e>
 8003252:	2b12      	cmp	r3, #18
 8003254:	d82a      	bhi.n	80032ac <HAL_GPIO_Init+0xcc>
 8003256:	2b12      	cmp	r3, #18
 8003258:	d859      	bhi.n	800330e <HAL_GPIO_Init+0x12e>
 800325a:	a201      	add	r2, pc, #4	@ (adr r2, 8003260 <HAL_GPIO_Init+0x80>)
 800325c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003260:	080032db 	.word	0x080032db
 8003264:	080032b5 	.word	0x080032b5
 8003268:	080032c7 	.word	0x080032c7
 800326c:	08003309 	.word	0x08003309
 8003270:	0800330f 	.word	0x0800330f
 8003274:	0800330f 	.word	0x0800330f
 8003278:	0800330f 	.word	0x0800330f
 800327c:	0800330f 	.word	0x0800330f
 8003280:	0800330f 	.word	0x0800330f
 8003284:	0800330f 	.word	0x0800330f
 8003288:	0800330f 	.word	0x0800330f
 800328c:	0800330f 	.word	0x0800330f
 8003290:	0800330f 	.word	0x0800330f
 8003294:	0800330f 	.word	0x0800330f
 8003298:	0800330f 	.word	0x0800330f
 800329c:	0800330f 	.word	0x0800330f
 80032a0:	0800330f 	.word	0x0800330f
 80032a4:	080032bd 	.word	0x080032bd
 80032a8:	080032d1 	.word	0x080032d1
 80032ac:	4a75      	ldr	r2, [pc, #468]	@ (8003484 <HAL_GPIO_Init+0x2a4>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d013      	beq.n	80032da <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80032b2:	e02c      	b.n	800330e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	623b      	str	r3, [r7, #32]
          break;
 80032ba:	e029      	b.n	8003310 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	3304      	adds	r3, #4
 80032c2:	623b      	str	r3, [r7, #32]
          break;
 80032c4:	e024      	b.n	8003310 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	3308      	adds	r3, #8
 80032cc:	623b      	str	r3, [r7, #32]
          break;
 80032ce:	e01f      	b.n	8003310 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	330c      	adds	r3, #12
 80032d6:	623b      	str	r3, [r7, #32]
          break;
 80032d8:	e01a      	b.n	8003310 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d102      	bne.n	80032e8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80032e2:	2304      	movs	r3, #4
 80032e4:	623b      	str	r3, [r7, #32]
          break;
 80032e6:	e013      	b.n	8003310 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d105      	bne.n	80032fc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80032f0:	2308      	movs	r3, #8
 80032f2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	69fa      	ldr	r2, [r7, #28]
 80032f8:	611a      	str	r2, [r3, #16]
          break;
 80032fa:	e009      	b.n	8003310 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80032fc:	2308      	movs	r3, #8
 80032fe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	69fa      	ldr	r2, [r7, #28]
 8003304:	615a      	str	r2, [r3, #20]
          break;
 8003306:	e003      	b.n	8003310 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003308:	2300      	movs	r3, #0
 800330a:	623b      	str	r3, [r7, #32]
          break;
 800330c:	e000      	b.n	8003310 <HAL_GPIO_Init+0x130>
          break;
 800330e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003310:	69bb      	ldr	r3, [r7, #24]
 8003312:	2bff      	cmp	r3, #255	@ 0xff
 8003314:	d801      	bhi.n	800331a <HAL_GPIO_Init+0x13a>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	e001      	b.n	800331e <HAL_GPIO_Init+0x13e>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	3304      	adds	r3, #4
 800331e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	2bff      	cmp	r3, #255	@ 0xff
 8003324:	d802      	bhi.n	800332c <HAL_GPIO_Init+0x14c>
 8003326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	e002      	b.n	8003332 <HAL_GPIO_Init+0x152>
 800332c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800332e:	3b08      	subs	r3, #8
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	210f      	movs	r1, #15
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	fa01 f303 	lsl.w	r3, r1, r3
 8003340:	43db      	mvns	r3, r3
 8003342:	401a      	ands	r2, r3
 8003344:	6a39      	ldr	r1, [r7, #32]
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	fa01 f303 	lsl.w	r3, r1, r3
 800334c:	431a      	orrs	r2, r3
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800335a:	2b00      	cmp	r3, #0
 800335c:	f000 80c1 	beq.w	80034e2 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003360:	4b49      	ldr	r3, [pc, #292]	@ (8003488 <HAL_GPIO_Init+0x2a8>)
 8003362:	699b      	ldr	r3, [r3, #24]
 8003364:	4a48      	ldr	r2, [pc, #288]	@ (8003488 <HAL_GPIO_Init+0x2a8>)
 8003366:	f043 0301 	orr.w	r3, r3, #1
 800336a:	6193      	str	r3, [r2, #24]
 800336c:	4b46      	ldr	r3, [pc, #280]	@ (8003488 <HAL_GPIO_Init+0x2a8>)
 800336e:	699b      	ldr	r3, [r3, #24]
 8003370:	f003 0301 	and.w	r3, r3, #1
 8003374:	60bb      	str	r3, [r7, #8]
 8003376:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003378:	4a44      	ldr	r2, [pc, #272]	@ (800348c <HAL_GPIO_Init+0x2ac>)
 800337a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800337c:	089b      	lsrs	r3, r3, #2
 800337e:	3302      	adds	r3, #2
 8003380:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003384:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003388:	f003 0303 	and.w	r3, r3, #3
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	220f      	movs	r2, #15
 8003390:	fa02 f303 	lsl.w	r3, r2, r3
 8003394:	43db      	mvns	r3, r3
 8003396:	68fa      	ldr	r2, [r7, #12]
 8003398:	4013      	ands	r3, r2
 800339a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	4a3c      	ldr	r2, [pc, #240]	@ (8003490 <HAL_GPIO_Init+0x2b0>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d01f      	beq.n	80033e4 <HAL_GPIO_Init+0x204>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	4a3b      	ldr	r2, [pc, #236]	@ (8003494 <HAL_GPIO_Init+0x2b4>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d019      	beq.n	80033e0 <HAL_GPIO_Init+0x200>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	4a3a      	ldr	r2, [pc, #232]	@ (8003498 <HAL_GPIO_Init+0x2b8>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d013      	beq.n	80033dc <HAL_GPIO_Init+0x1fc>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	4a39      	ldr	r2, [pc, #228]	@ (800349c <HAL_GPIO_Init+0x2bc>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d00d      	beq.n	80033d8 <HAL_GPIO_Init+0x1f8>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	4a38      	ldr	r2, [pc, #224]	@ (80034a0 <HAL_GPIO_Init+0x2c0>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d007      	beq.n	80033d4 <HAL_GPIO_Init+0x1f4>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	4a37      	ldr	r2, [pc, #220]	@ (80034a4 <HAL_GPIO_Init+0x2c4>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d101      	bne.n	80033d0 <HAL_GPIO_Init+0x1f0>
 80033cc:	2305      	movs	r3, #5
 80033ce:	e00a      	b.n	80033e6 <HAL_GPIO_Init+0x206>
 80033d0:	2306      	movs	r3, #6
 80033d2:	e008      	b.n	80033e6 <HAL_GPIO_Init+0x206>
 80033d4:	2304      	movs	r3, #4
 80033d6:	e006      	b.n	80033e6 <HAL_GPIO_Init+0x206>
 80033d8:	2303      	movs	r3, #3
 80033da:	e004      	b.n	80033e6 <HAL_GPIO_Init+0x206>
 80033dc:	2302      	movs	r3, #2
 80033de:	e002      	b.n	80033e6 <HAL_GPIO_Init+0x206>
 80033e0:	2301      	movs	r3, #1
 80033e2:	e000      	b.n	80033e6 <HAL_GPIO_Init+0x206>
 80033e4:	2300      	movs	r3, #0
 80033e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033e8:	f002 0203 	and.w	r2, r2, #3
 80033ec:	0092      	lsls	r2, r2, #2
 80033ee:	4093      	lsls	r3, r2
 80033f0:	68fa      	ldr	r2, [r7, #12]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80033f6:	4925      	ldr	r1, [pc, #148]	@ (800348c <HAL_GPIO_Init+0x2ac>)
 80033f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033fa:	089b      	lsrs	r3, r3, #2
 80033fc:	3302      	adds	r3, #2
 80033fe:	68fa      	ldr	r2, [r7, #12]
 8003400:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800340c:	2b00      	cmp	r3, #0
 800340e:	d006      	beq.n	800341e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003410:	4b25      	ldr	r3, [pc, #148]	@ (80034a8 <HAL_GPIO_Init+0x2c8>)
 8003412:	689a      	ldr	r2, [r3, #8]
 8003414:	4924      	ldr	r1, [pc, #144]	@ (80034a8 <HAL_GPIO_Init+0x2c8>)
 8003416:	69bb      	ldr	r3, [r7, #24]
 8003418:	4313      	orrs	r3, r2
 800341a:	608b      	str	r3, [r1, #8]
 800341c:	e006      	b.n	800342c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800341e:	4b22      	ldr	r3, [pc, #136]	@ (80034a8 <HAL_GPIO_Init+0x2c8>)
 8003420:	689a      	ldr	r2, [r3, #8]
 8003422:	69bb      	ldr	r3, [r7, #24]
 8003424:	43db      	mvns	r3, r3
 8003426:	4920      	ldr	r1, [pc, #128]	@ (80034a8 <HAL_GPIO_Init+0x2c8>)
 8003428:	4013      	ands	r3, r2
 800342a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003434:	2b00      	cmp	r3, #0
 8003436:	d006      	beq.n	8003446 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003438:	4b1b      	ldr	r3, [pc, #108]	@ (80034a8 <HAL_GPIO_Init+0x2c8>)
 800343a:	68da      	ldr	r2, [r3, #12]
 800343c:	491a      	ldr	r1, [pc, #104]	@ (80034a8 <HAL_GPIO_Init+0x2c8>)
 800343e:	69bb      	ldr	r3, [r7, #24]
 8003440:	4313      	orrs	r3, r2
 8003442:	60cb      	str	r3, [r1, #12]
 8003444:	e006      	b.n	8003454 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003446:	4b18      	ldr	r3, [pc, #96]	@ (80034a8 <HAL_GPIO_Init+0x2c8>)
 8003448:	68da      	ldr	r2, [r3, #12]
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	43db      	mvns	r3, r3
 800344e:	4916      	ldr	r1, [pc, #88]	@ (80034a8 <HAL_GPIO_Init+0x2c8>)
 8003450:	4013      	ands	r3, r2
 8003452:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800345c:	2b00      	cmp	r3, #0
 800345e:	d025      	beq.n	80034ac <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003460:	4b11      	ldr	r3, [pc, #68]	@ (80034a8 <HAL_GPIO_Init+0x2c8>)
 8003462:	685a      	ldr	r2, [r3, #4]
 8003464:	4910      	ldr	r1, [pc, #64]	@ (80034a8 <HAL_GPIO_Init+0x2c8>)
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	4313      	orrs	r3, r2
 800346a:	604b      	str	r3, [r1, #4]
 800346c:	e025      	b.n	80034ba <HAL_GPIO_Init+0x2da>
 800346e:	bf00      	nop
 8003470:	10320000 	.word	0x10320000
 8003474:	10310000 	.word	0x10310000
 8003478:	10220000 	.word	0x10220000
 800347c:	10210000 	.word	0x10210000
 8003480:	10120000 	.word	0x10120000
 8003484:	10110000 	.word	0x10110000
 8003488:	40021000 	.word	0x40021000
 800348c:	40010000 	.word	0x40010000
 8003490:	40010800 	.word	0x40010800
 8003494:	40010c00 	.word	0x40010c00
 8003498:	40011000 	.word	0x40011000
 800349c:	40011400 	.word	0x40011400
 80034a0:	40011800 	.word	0x40011800
 80034a4:	40011c00 	.word	0x40011c00
 80034a8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80034ac:	4b15      	ldr	r3, [pc, #84]	@ (8003504 <HAL_GPIO_Init+0x324>)
 80034ae:	685a      	ldr	r2, [r3, #4]
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	43db      	mvns	r3, r3
 80034b4:	4913      	ldr	r1, [pc, #76]	@ (8003504 <HAL_GPIO_Init+0x324>)
 80034b6:	4013      	ands	r3, r2
 80034b8:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d006      	beq.n	80034d4 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80034c6:	4b0f      	ldr	r3, [pc, #60]	@ (8003504 <HAL_GPIO_Init+0x324>)
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	490e      	ldr	r1, [pc, #56]	@ (8003504 <HAL_GPIO_Init+0x324>)
 80034cc:	69bb      	ldr	r3, [r7, #24]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	600b      	str	r3, [r1, #0]
 80034d2:	e006      	b.n	80034e2 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80034d4:	4b0b      	ldr	r3, [pc, #44]	@ (8003504 <HAL_GPIO_Init+0x324>)
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	69bb      	ldr	r3, [r7, #24]
 80034da:	43db      	mvns	r3, r3
 80034dc:	4909      	ldr	r1, [pc, #36]	@ (8003504 <HAL_GPIO_Init+0x324>)
 80034de:	4013      	ands	r3, r2
 80034e0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80034e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e4:	3301      	adds	r3, #1
 80034e6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ee:	fa22 f303 	lsr.w	r3, r2, r3
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	f47f ae7e 	bne.w	80031f4 <HAL_GPIO_Init+0x14>
  }
}
 80034f8:	bf00      	nop
 80034fa:	bf00      	nop
 80034fc:	372c      	adds	r7, #44	@ 0x2c
 80034fe:	46bd      	mov	sp, r7
 8003500:	bc80      	pop	{r7}
 8003502:	4770      	bx	lr
 8003504:	40010400 	.word	0x40010400

08003508 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	460b      	mov	r3, r1
 8003512:	807b      	strh	r3, [r7, #2]
 8003514:	4613      	mov	r3, r2
 8003516:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003518:	787b      	ldrb	r3, [r7, #1]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d003      	beq.n	8003526 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800351e:	887a      	ldrh	r2, [r7, #2]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003524:	e003      	b.n	800352e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003526:	887b      	ldrh	r3, [r7, #2]
 8003528:	041a      	lsls	r2, r3, #16
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	611a      	str	r2, [r3, #16]
}
 800352e:	bf00      	nop
 8003530:	370c      	adds	r7, #12
 8003532:	46bd      	mov	sp, r7
 8003534:	bc80      	pop	{r7}
 8003536:	4770      	bx	lr

08003538 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b086      	sub	sp, #24
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d101      	bne.n	800354a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e272      	b.n	8003a30 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0301 	and.w	r3, r3, #1
 8003552:	2b00      	cmp	r3, #0
 8003554:	f000 8087 	beq.w	8003666 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003558:	4b92      	ldr	r3, [pc, #584]	@ (80037a4 <HAL_RCC_OscConfig+0x26c>)
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f003 030c 	and.w	r3, r3, #12
 8003560:	2b04      	cmp	r3, #4
 8003562:	d00c      	beq.n	800357e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003564:	4b8f      	ldr	r3, [pc, #572]	@ (80037a4 <HAL_RCC_OscConfig+0x26c>)
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f003 030c 	and.w	r3, r3, #12
 800356c:	2b08      	cmp	r3, #8
 800356e:	d112      	bne.n	8003596 <HAL_RCC_OscConfig+0x5e>
 8003570:	4b8c      	ldr	r3, [pc, #560]	@ (80037a4 <HAL_RCC_OscConfig+0x26c>)
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003578:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800357c:	d10b      	bne.n	8003596 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800357e:	4b89      	ldr	r3, [pc, #548]	@ (80037a4 <HAL_RCC_OscConfig+0x26c>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003586:	2b00      	cmp	r3, #0
 8003588:	d06c      	beq.n	8003664 <HAL_RCC_OscConfig+0x12c>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d168      	bne.n	8003664 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e24c      	b.n	8003a30 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800359e:	d106      	bne.n	80035ae <HAL_RCC_OscConfig+0x76>
 80035a0:	4b80      	ldr	r3, [pc, #512]	@ (80037a4 <HAL_RCC_OscConfig+0x26c>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a7f      	ldr	r2, [pc, #508]	@ (80037a4 <HAL_RCC_OscConfig+0x26c>)
 80035a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035aa:	6013      	str	r3, [r2, #0]
 80035ac:	e02e      	b.n	800360c <HAL_RCC_OscConfig+0xd4>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d10c      	bne.n	80035d0 <HAL_RCC_OscConfig+0x98>
 80035b6:	4b7b      	ldr	r3, [pc, #492]	@ (80037a4 <HAL_RCC_OscConfig+0x26c>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a7a      	ldr	r2, [pc, #488]	@ (80037a4 <HAL_RCC_OscConfig+0x26c>)
 80035bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035c0:	6013      	str	r3, [r2, #0]
 80035c2:	4b78      	ldr	r3, [pc, #480]	@ (80037a4 <HAL_RCC_OscConfig+0x26c>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a77      	ldr	r2, [pc, #476]	@ (80037a4 <HAL_RCC_OscConfig+0x26c>)
 80035c8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80035cc:	6013      	str	r3, [r2, #0]
 80035ce:	e01d      	b.n	800360c <HAL_RCC_OscConfig+0xd4>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80035d8:	d10c      	bne.n	80035f4 <HAL_RCC_OscConfig+0xbc>
 80035da:	4b72      	ldr	r3, [pc, #456]	@ (80037a4 <HAL_RCC_OscConfig+0x26c>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a71      	ldr	r2, [pc, #452]	@ (80037a4 <HAL_RCC_OscConfig+0x26c>)
 80035e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80035e4:	6013      	str	r3, [r2, #0]
 80035e6:	4b6f      	ldr	r3, [pc, #444]	@ (80037a4 <HAL_RCC_OscConfig+0x26c>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a6e      	ldr	r2, [pc, #440]	@ (80037a4 <HAL_RCC_OscConfig+0x26c>)
 80035ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035f0:	6013      	str	r3, [r2, #0]
 80035f2:	e00b      	b.n	800360c <HAL_RCC_OscConfig+0xd4>
 80035f4:	4b6b      	ldr	r3, [pc, #428]	@ (80037a4 <HAL_RCC_OscConfig+0x26c>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a6a      	ldr	r2, [pc, #424]	@ (80037a4 <HAL_RCC_OscConfig+0x26c>)
 80035fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035fe:	6013      	str	r3, [r2, #0]
 8003600:	4b68      	ldr	r3, [pc, #416]	@ (80037a4 <HAL_RCC_OscConfig+0x26c>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a67      	ldr	r2, [pc, #412]	@ (80037a4 <HAL_RCC_OscConfig+0x26c>)
 8003606:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800360a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d013      	beq.n	800363c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003614:	f7ff f824 	bl	8002660 <HAL_GetTick>
 8003618:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800361a:	e008      	b.n	800362e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800361c:	f7ff f820 	bl	8002660 <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	2b64      	cmp	r3, #100	@ 0x64
 8003628:	d901      	bls.n	800362e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e200      	b.n	8003a30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800362e:	4b5d      	ldr	r3, [pc, #372]	@ (80037a4 <HAL_RCC_OscConfig+0x26c>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d0f0      	beq.n	800361c <HAL_RCC_OscConfig+0xe4>
 800363a:	e014      	b.n	8003666 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800363c:	f7ff f810 	bl	8002660 <HAL_GetTick>
 8003640:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003642:	e008      	b.n	8003656 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003644:	f7ff f80c 	bl	8002660 <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	2b64      	cmp	r3, #100	@ 0x64
 8003650:	d901      	bls.n	8003656 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e1ec      	b.n	8003a30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003656:	4b53      	ldr	r3, [pc, #332]	@ (80037a4 <HAL_RCC_OscConfig+0x26c>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d1f0      	bne.n	8003644 <HAL_RCC_OscConfig+0x10c>
 8003662:	e000      	b.n	8003666 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003664:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0302 	and.w	r3, r3, #2
 800366e:	2b00      	cmp	r3, #0
 8003670:	d063      	beq.n	800373a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003672:	4b4c      	ldr	r3, [pc, #304]	@ (80037a4 <HAL_RCC_OscConfig+0x26c>)
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	f003 030c 	and.w	r3, r3, #12
 800367a:	2b00      	cmp	r3, #0
 800367c:	d00b      	beq.n	8003696 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800367e:	4b49      	ldr	r3, [pc, #292]	@ (80037a4 <HAL_RCC_OscConfig+0x26c>)
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	f003 030c 	and.w	r3, r3, #12
 8003686:	2b08      	cmp	r3, #8
 8003688:	d11c      	bne.n	80036c4 <HAL_RCC_OscConfig+0x18c>
 800368a:	4b46      	ldr	r3, [pc, #280]	@ (80037a4 <HAL_RCC_OscConfig+0x26c>)
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d116      	bne.n	80036c4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003696:	4b43      	ldr	r3, [pc, #268]	@ (80037a4 <HAL_RCC_OscConfig+0x26c>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0302 	and.w	r3, r3, #2
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d005      	beq.n	80036ae <HAL_RCC_OscConfig+0x176>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	691b      	ldr	r3, [r3, #16]
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d001      	beq.n	80036ae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e1c0      	b.n	8003a30 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036ae:	4b3d      	ldr	r3, [pc, #244]	@ (80037a4 <HAL_RCC_OscConfig+0x26c>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	695b      	ldr	r3, [r3, #20]
 80036ba:	00db      	lsls	r3, r3, #3
 80036bc:	4939      	ldr	r1, [pc, #228]	@ (80037a4 <HAL_RCC_OscConfig+0x26c>)
 80036be:	4313      	orrs	r3, r2
 80036c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036c2:	e03a      	b.n	800373a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	691b      	ldr	r3, [r3, #16]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d020      	beq.n	800370e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036cc:	4b36      	ldr	r3, [pc, #216]	@ (80037a8 <HAL_RCC_OscConfig+0x270>)
 80036ce:	2201      	movs	r2, #1
 80036d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036d2:	f7fe ffc5 	bl	8002660 <HAL_GetTick>
 80036d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036d8:	e008      	b.n	80036ec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036da:	f7fe ffc1 	bl	8002660 <HAL_GetTick>
 80036de:	4602      	mov	r2, r0
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	d901      	bls.n	80036ec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80036e8:	2303      	movs	r3, #3
 80036ea:	e1a1      	b.n	8003a30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036ec:	4b2d      	ldr	r3, [pc, #180]	@ (80037a4 <HAL_RCC_OscConfig+0x26c>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0302 	and.w	r3, r3, #2
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d0f0      	beq.n	80036da <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036f8:	4b2a      	ldr	r3, [pc, #168]	@ (80037a4 <HAL_RCC_OscConfig+0x26c>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	695b      	ldr	r3, [r3, #20]
 8003704:	00db      	lsls	r3, r3, #3
 8003706:	4927      	ldr	r1, [pc, #156]	@ (80037a4 <HAL_RCC_OscConfig+0x26c>)
 8003708:	4313      	orrs	r3, r2
 800370a:	600b      	str	r3, [r1, #0]
 800370c:	e015      	b.n	800373a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800370e:	4b26      	ldr	r3, [pc, #152]	@ (80037a8 <HAL_RCC_OscConfig+0x270>)
 8003710:	2200      	movs	r2, #0
 8003712:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003714:	f7fe ffa4 	bl	8002660 <HAL_GetTick>
 8003718:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800371a:	e008      	b.n	800372e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800371c:	f7fe ffa0 	bl	8002660 <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	2b02      	cmp	r3, #2
 8003728:	d901      	bls.n	800372e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e180      	b.n	8003a30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800372e:	4b1d      	ldr	r3, [pc, #116]	@ (80037a4 <HAL_RCC_OscConfig+0x26c>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0302 	and.w	r3, r3, #2
 8003736:	2b00      	cmp	r3, #0
 8003738:	d1f0      	bne.n	800371c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0308 	and.w	r3, r3, #8
 8003742:	2b00      	cmp	r3, #0
 8003744:	d03a      	beq.n	80037bc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	699b      	ldr	r3, [r3, #24]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d019      	beq.n	8003782 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800374e:	4b17      	ldr	r3, [pc, #92]	@ (80037ac <HAL_RCC_OscConfig+0x274>)
 8003750:	2201      	movs	r2, #1
 8003752:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003754:	f7fe ff84 	bl	8002660 <HAL_GetTick>
 8003758:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800375a:	e008      	b.n	800376e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800375c:	f7fe ff80 	bl	8002660 <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	2b02      	cmp	r3, #2
 8003768:	d901      	bls.n	800376e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e160      	b.n	8003a30 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800376e:	4b0d      	ldr	r3, [pc, #52]	@ (80037a4 <HAL_RCC_OscConfig+0x26c>)
 8003770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003772:	f003 0302 	and.w	r3, r3, #2
 8003776:	2b00      	cmp	r3, #0
 8003778:	d0f0      	beq.n	800375c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800377a:	2001      	movs	r0, #1
 800377c:	f000 face 	bl	8003d1c <RCC_Delay>
 8003780:	e01c      	b.n	80037bc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003782:	4b0a      	ldr	r3, [pc, #40]	@ (80037ac <HAL_RCC_OscConfig+0x274>)
 8003784:	2200      	movs	r2, #0
 8003786:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003788:	f7fe ff6a 	bl	8002660 <HAL_GetTick>
 800378c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800378e:	e00f      	b.n	80037b0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003790:	f7fe ff66 	bl	8002660 <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	2b02      	cmp	r3, #2
 800379c:	d908      	bls.n	80037b0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e146      	b.n	8003a30 <HAL_RCC_OscConfig+0x4f8>
 80037a2:	bf00      	nop
 80037a4:	40021000 	.word	0x40021000
 80037a8:	42420000 	.word	0x42420000
 80037ac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037b0:	4b92      	ldr	r3, [pc, #584]	@ (80039fc <HAL_RCC_OscConfig+0x4c4>)
 80037b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037b4:	f003 0302 	and.w	r3, r3, #2
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d1e9      	bne.n	8003790 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 0304 	and.w	r3, r3, #4
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	f000 80a6 	beq.w	8003916 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037ca:	2300      	movs	r3, #0
 80037cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037ce:	4b8b      	ldr	r3, [pc, #556]	@ (80039fc <HAL_RCC_OscConfig+0x4c4>)
 80037d0:	69db      	ldr	r3, [r3, #28]
 80037d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d10d      	bne.n	80037f6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037da:	4b88      	ldr	r3, [pc, #544]	@ (80039fc <HAL_RCC_OscConfig+0x4c4>)
 80037dc:	69db      	ldr	r3, [r3, #28]
 80037de:	4a87      	ldr	r2, [pc, #540]	@ (80039fc <HAL_RCC_OscConfig+0x4c4>)
 80037e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037e4:	61d3      	str	r3, [r2, #28]
 80037e6:	4b85      	ldr	r3, [pc, #532]	@ (80039fc <HAL_RCC_OscConfig+0x4c4>)
 80037e8:	69db      	ldr	r3, [r3, #28]
 80037ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037ee:	60bb      	str	r3, [r7, #8]
 80037f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037f2:	2301      	movs	r3, #1
 80037f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037f6:	4b82      	ldr	r3, [pc, #520]	@ (8003a00 <HAL_RCC_OscConfig+0x4c8>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d118      	bne.n	8003834 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003802:	4b7f      	ldr	r3, [pc, #508]	@ (8003a00 <HAL_RCC_OscConfig+0x4c8>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a7e      	ldr	r2, [pc, #504]	@ (8003a00 <HAL_RCC_OscConfig+0x4c8>)
 8003808:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800380c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800380e:	f7fe ff27 	bl	8002660 <HAL_GetTick>
 8003812:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003814:	e008      	b.n	8003828 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003816:	f7fe ff23 	bl	8002660 <HAL_GetTick>
 800381a:	4602      	mov	r2, r0
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	2b64      	cmp	r3, #100	@ 0x64
 8003822:	d901      	bls.n	8003828 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003824:	2303      	movs	r3, #3
 8003826:	e103      	b.n	8003a30 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003828:	4b75      	ldr	r3, [pc, #468]	@ (8003a00 <HAL_RCC_OscConfig+0x4c8>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003830:	2b00      	cmp	r3, #0
 8003832:	d0f0      	beq.n	8003816 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	2b01      	cmp	r3, #1
 800383a:	d106      	bne.n	800384a <HAL_RCC_OscConfig+0x312>
 800383c:	4b6f      	ldr	r3, [pc, #444]	@ (80039fc <HAL_RCC_OscConfig+0x4c4>)
 800383e:	6a1b      	ldr	r3, [r3, #32]
 8003840:	4a6e      	ldr	r2, [pc, #440]	@ (80039fc <HAL_RCC_OscConfig+0x4c4>)
 8003842:	f043 0301 	orr.w	r3, r3, #1
 8003846:	6213      	str	r3, [r2, #32]
 8003848:	e02d      	b.n	80038a6 <HAL_RCC_OscConfig+0x36e>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d10c      	bne.n	800386c <HAL_RCC_OscConfig+0x334>
 8003852:	4b6a      	ldr	r3, [pc, #424]	@ (80039fc <HAL_RCC_OscConfig+0x4c4>)
 8003854:	6a1b      	ldr	r3, [r3, #32]
 8003856:	4a69      	ldr	r2, [pc, #420]	@ (80039fc <HAL_RCC_OscConfig+0x4c4>)
 8003858:	f023 0301 	bic.w	r3, r3, #1
 800385c:	6213      	str	r3, [r2, #32]
 800385e:	4b67      	ldr	r3, [pc, #412]	@ (80039fc <HAL_RCC_OscConfig+0x4c4>)
 8003860:	6a1b      	ldr	r3, [r3, #32]
 8003862:	4a66      	ldr	r2, [pc, #408]	@ (80039fc <HAL_RCC_OscConfig+0x4c4>)
 8003864:	f023 0304 	bic.w	r3, r3, #4
 8003868:	6213      	str	r3, [r2, #32]
 800386a:	e01c      	b.n	80038a6 <HAL_RCC_OscConfig+0x36e>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	2b05      	cmp	r3, #5
 8003872:	d10c      	bne.n	800388e <HAL_RCC_OscConfig+0x356>
 8003874:	4b61      	ldr	r3, [pc, #388]	@ (80039fc <HAL_RCC_OscConfig+0x4c4>)
 8003876:	6a1b      	ldr	r3, [r3, #32]
 8003878:	4a60      	ldr	r2, [pc, #384]	@ (80039fc <HAL_RCC_OscConfig+0x4c4>)
 800387a:	f043 0304 	orr.w	r3, r3, #4
 800387e:	6213      	str	r3, [r2, #32]
 8003880:	4b5e      	ldr	r3, [pc, #376]	@ (80039fc <HAL_RCC_OscConfig+0x4c4>)
 8003882:	6a1b      	ldr	r3, [r3, #32]
 8003884:	4a5d      	ldr	r2, [pc, #372]	@ (80039fc <HAL_RCC_OscConfig+0x4c4>)
 8003886:	f043 0301 	orr.w	r3, r3, #1
 800388a:	6213      	str	r3, [r2, #32]
 800388c:	e00b      	b.n	80038a6 <HAL_RCC_OscConfig+0x36e>
 800388e:	4b5b      	ldr	r3, [pc, #364]	@ (80039fc <HAL_RCC_OscConfig+0x4c4>)
 8003890:	6a1b      	ldr	r3, [r3, #32]
 8003892:	4a5a      	ldr	r2, [pc, #360]	@ (80039fc <HAL_RCC_OscConfig+0x4c4>)
 8003894:	f023 0301 	bic.w	r3, r3, #1
 8003898:	6213      	str	r3, [r2, #32]
 800389a:	4b58      	ldr	r3, [pc, #352]	@ (80039fc <HAL_RCC_OscConfig+0x4c4>)
 800389c:	6a1b      	ldr	r3, [r3, #32]
 800389e:	4a57      	ldr	r2, [pc, #348]	@ (80039fc <HAL_RCC_OscConfig+0x4c4>)
 80038a0:	f023 0304 	bic.w	r3, r3, #4
 80038a4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d015      	beq.n	80038da <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038ae:	f7fe fed7 	bl	8002660 <HAL_GetTick>
 80038b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038b4:	e00a      	b.n	80038cc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038b6:	f7fe fed3 	bl	8002660 <HAL_GetTick>
 80038ba:	4602      	mov	r2, r0
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	1ad3      	subs	r3, r2, r3
 80038c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d901      	bls.n	80038cc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80038c8:	2303      	movs	r3, #3
 80038ca:	e0b1      	b.n	8003a30 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038cc:	4b4b      	ldr	r3, [pc, #300]	@ (80039fc <HAL_RCC_OscConfig+0x4c4>)
 80038ce:	6a1b      	ldr	r3, [r3, #32]
 80038d0:	f003 0302 	and.w	r3, r3, #2
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d0ee      	beq.n	80038b6 <HAL_RCC_OscConfig+0x37e>
 80038d8:	e014      	b.n	8003904 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038da:	f7fe fec1 	bl	8002660 <HAL_GetTick>
 80038de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038e0:	e00a      	b.n	80038f8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038e2:	f7fe febd 	bl	8002660 <HAL_GetTick>
 80038e6:	4602      	mov	r2, r0
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d901      	bls.n	80038f8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80038f4:	2303      	movs	r3, #3
 80038f6:	e09b      	b.n	8003a30 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038f8:	4b40      	ldr	r3, [pc, #256]	@ (80039fc <HAL_RCC_OscConfig+0x4c4>)
 80038fa:	6a1b      	ldr	r3, [r3, #32]
 80038fc:	f003 0302 	and.w	r3, r3, #2
 8003900:	2b00      	cmp	r3, #0
 8003902:	d1ee      	bne.n	80038e2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003904:	7dfb      	ldrb	r3, [r7, #23]
 8003906:	2b01      	cmp	r3, #1
 8003908:	d105      	bne.n	8003916 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800390a:	4b3c      	ldr	r3, [pc, #240]	@ (80039fc <HAL_RCC_OscConfig+0x4c4>)
 800390c:	69db      	ldr	r3, [r3, #28]
 800390e:	4a3b      	ldr	r2, [pc, #236]	@ (80039fc <HAL_RCC_OscConfig+0x4c4>)
 8003910:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003914:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	69db      	ldr	r3, [r3, #28]
 800391a:	2b00      	cmp	r3, #0
 800391c:	f000 8087 	beq.w	8003a2e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003920:	4b36      	ldr	r3, [pc, #216]	@ (80039fc <HAL_RCC_OscConfig+0x4c4>)
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f003 030c 	and.w	r3, r3, #12
 8003928:	2b08      	cmp	r3, #8
 800392a:	d061      	beq.n	80039f0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	69db      	ldr	r3, [r3, #28]
 8003930:	2b02      	cmp	r3, #2
 8003932:	d146      	bne.n	80039c2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003934:	4b33      	ldr	r3, [pc, #204]	@ (8003a04 <HAL_RCC_OscConfig+0x4cc>)
 8003936:	2200      	movs	r2, #0
 8003938:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800393a:	f7fe fe91 	bl	8002660 <HAL_GetTick>
 800393e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003940:	e008      	b.n	8003954 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003942:	f7fe fe8d 	bl	8002660 <HAL_GetTick>
 8003946:	4602      	mov	r2, r0
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	2b02      	cmp	r3, #2
 800394e:	d901      	bls.n	8003954 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003950:	2303      	movs	r3, #3
 8003952:	e06d      	b.n	8003a30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003954:	4b29      	ldr	r3, [pc, #164]	@ (80039fc <HAL_RCC_OscConfig+0x4c4>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800395c:	2b00      	cmp	r3, #0
 800395e:	d1f0      	bne.n	8003942 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6a1b      	ldr	r3, [r3, #32]
 8003964:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003968:	d108      	bne.n	800397c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800396a:	4b24      	ldr	r3, [pc, #144]	@ (80039fc <HAL_RCC_OscConfig+0x4c4>)
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	4921      	ldr	r1, [pc, #132]	@ (80039fc <HAL_RCC_OscConfig+0x4c4>)
 8003978:	4313      	orrs	r3, r2
 800397a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800397c:	4b1f      	ldr	r3, [pc, #124]	@ (80039fc <HAL_RCC_OscConfig+0x4c4>)
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6a19      	ldr	r1, [r3, #32]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800398c:	430b      	orrs	r3, r1
 800398e:	491b      	ldr	r1, [pc, #108]	@ (80039fc <HAL_RCC_OscConfig+0x4c4>)
 8003990:	4313      	orrs	r3, r2
 8003992:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003994:	4b1b      	ldr	r3, [pc, #108]	@ (8003a04 <HAL_RCC_OscConfig+0x4cc>)
 8003996:	2201      	movs	r2, #1
 8003998:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800399a:	f7fe fe61 	bl	8002660 <HAL_GetTick>
 800399e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80039a0:	e008      	b.n	80039b4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039a2:	f7fe fe5d 	bl	8002660 <HAL_GetTick>
 80039a6:	4602      	mov	r2, r0
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	2b02      	cmp	r3, #2
 80039ae:	d901      	bls.n	80039b4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80039b0:	2303      	movs	r3, #3
 80039b2:	e03d      	b.n	8003a30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80039b4:	4b11      	ldr	r3, [pc, #68]	@ (80039fc <HAL_RCC_OscConfig+0x4c4>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d0f0      	beq.n	80039a2 <HAL_RCC_OscConfig+0x46a>
 80039c0:	e035      	b.n	8003a2e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039c2:	4b10      	ldr	r3, [pc, #64]	@ (8003a04 <HAL_RCC_OscConfig+0x4cc>)
 80039c4:	2200      	movs	r2, #0
 80039c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039c8:	f7fe fe4a 	bl	8002660 <HAL_GetTick>
 80039cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039ce:	e008      	b.n	80039e2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039d0:	f7fe fe46 	bl	8002660 <HAL_GetTick>
 80039d4:	4602      	mov	r2, r0
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d901      	bls.n	80039e2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80039de:	2303      	movs	r3, #3
 80039e0:	e026      	b.n	8003a30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039e2:	4b06      	ldr	r3, [pc, #24]	@ (80039fc <HAL_RCC_OscConfig+0x4c4>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d1f0      	bne.n	80039d0 <HAL_RCC_OscConfig+0x498>
 80039ee:	e01e      	b.n	8003a2e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	69db      	ldr	r3, [r3, #28]
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d107      	bne.n	8003a08 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e019      	b.n	8003a30 <HAL_RCC_OscConfig+0x4f8>
 80039fc:	40021000 	.word	0x40021000
 8003a00:	40007000 	.word	0x40007000
 8003a04:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003a08:	4b0b      	ldr	r3, [pc, #44]	@ (8003a38 <HAL_RCC_OscConfig+0x500>)
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6a1b      	ldr	r3, [r3, #32]
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d106      	bne.n	8003a2a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d001      	beq.n	8003a2e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e000      	b.n	8003a30 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003a2e:	2300      	movs	r3, #0
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3718      	adds	r7, #24
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	40021000 	.word	0x40021000

08003a3c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b084      	sub	sp, #16
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d101      	bne.n	8003a50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e0d0      	b.n	8003bf2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a50:	4b6a      	ldr	r3, [pc, #424]	@ (8003bfc <HAL_RCC_ClockConfig+0x1c0>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0307 	and.w	r3, r3, #7
 8003a58:	683a      	ldr	r2, [r7, #0]
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d910      	bls.n	8003a80 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a5e:	4b67      	ldr	r3, [pc, #412]	@ (8003bfc <HAL_RCC_ClockConfig+0x1c0>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f023 0207 	bic.w	r2, r3, #7
 8003a66:	4965      	ldr	r1, [pc, #404]	@ (8003bfc <HAL_RCC_ClockConfig+0x1c0>)
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a6e:	4b63      	ldr	r3, [pc, #396]	@ (8003bfc <HAL_RCC_ClockConfig+0x1c0>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 0307 	and.w	r3, r3, #7
 8003a76:	683a      	ldr	r2, [r7, #0]
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d001      	beq.n	8003a80 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e0b8      	b.n	8003bf2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 0302 	and.w	r3, r3, #2
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d020      	beq.n	8003ace <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 0304 	and.w	r3, r3, #4
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d005      	beq.n	8003aa4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a98:	4b59      	ldr	r3, [pc, #356]	@ (8003c00 <HAL_RCC_ClockConfig+0x1c4>)
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	4a58      	ldr	r2, [pc, #352]	@ (8003c00 <HAL_RCC_ClockConfig+0x1c4>)
 8003a9e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003aa2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0308 	and.w	r3, r3, #8
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d005      	beq.n	8003abc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ab0:	4b53      	ldr	r3, [pc, #332]	@ (8003c00 <HAL_RCC_ClockConfig+0x1c4>)
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	4a52      	ldr	r2, [pc, #328]	@ (8003c00 <HAL_RCC_ClockConfig+0x1c4>)
 8003ab6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003aba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003abc:	4b50      	ldr	r3, [pc, #320]	@ (8003c00 <HAL_RCC_ClockConfig+0x1c4>)
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	494d      	ldr	r1, [pc, #308]	@ (8003c00 <HAL_RCC_ClockConfig+0x1c4>)
 8003aca:	4313      	orrs	r3, r2
 8003acc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0301 	and.w	r3, r3, #1
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d040      	beq.n	8003b5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d107      	bne.n	8003af2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ae2:	4b47      	ldr	r3, [pc, #284]	@ (8003c00 <HAL_RCC_ClockConfig+0x1c4>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d115      	bne.n	8003b1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e07f      	b.n	8003bf2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	d107      	bne.n	8003b0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003afa:	4b41      	ldr	r3, [pc, #260]	@ (8003c00 <HAL_RCC_ClockConfig+0x1c4>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d109      	bne.n	8003b1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e073      	b.n	8003bf2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b0a:	4b3d      	ldr	r3, [pc, #244]	@ (8003c00 <HAL_RCC_ClockConfig+0x1c4>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0302 	and.w	r3, r3, #2
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d101      	bne.n	8003b1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e06b      	b.n	8003bf2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b1a:	4b39      	ldr	r3, [pc, #228]	@ (8003c00 <HAL_RCC_ClockConfig+0x1c4>)
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f023 0203 	bic.w	r2, r3, #3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	4936      	ldr	r1, [pc, #216]	@ (8003c00 <HAL_RCC_ClockConfig+0x1c4>)
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b2c:	f7fe fd98 	bl	8002660 <HAL_GetTick>
 8003b30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b32:	e00a      	b.n	8003b4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b34:	f7fe fd94 	bl	8002660 <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d901      	bls.n	8003b4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e053      	b.n	8003bf2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b4a:	4b2d      	ldr	r3, [pc, #180]	@ (8003c00 <HAL_RCC_ClockConfig+0x1c4>)
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	f003 020c 	and.w	r2, r3, #12
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d1eb      	bne.n	8003b34 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b5c:	4b27      	ldr	r3, [pc, #156]	@ (8003bfc <HAL_RCC_ClockConfig+0x1c0>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0307 	and.w	r3, r3, #7
 8003b64:	683a      	ldr	r2, [r7, #0]
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d210      	bcs.n	8003b8c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b6a:	4b24      	ldr	r3, [pc, #144]	@ (8003bfc <HAL_RCC_ClockConfig+0x1c0>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f023 0207 	bic.w	r2, r3, #7
 8003b72:	4922      	ldr	r1, [pc, #136]	@ (8003bfc <HAL_RCC_ClockConfig+0x1c0>)
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b7a:	4b20      	ldr	r3, [pc, #128]	@ (8003bfc <HAL_RCC_ClockConfig+0x1c0>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0307 	and.w	r3, r3, #7
 8003b82:	683a      	ldr	r2, [r7, #0]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d001      	beq.n	8003b8c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e032      	b.n	8003bf2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0304 	and.w	r3, r3, #4
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d008      	beq.n	8003baa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b98:	4b19      	ldr	r3, [pc, #100]	@ (8003c00 <HAL_RCC_ClockConfig+0x1c4>)
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	4916      	ldr	r1, [pc, #88]	@ (8003c00 <HAL_RCC_ClockConfig+0x1c4>)
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0308 	and.w	r3, r3, #8
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d009      	beq.n	8003bca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003bb6:	4b12      	ldr	r3, [pc, #72]	@ (8003c00 <HAL_RCC_ClockConfig+0x1c4>)
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	691b      	ldr	r3, [r3, #16]
 8003bc2:	00db      	lsls	r3, r3, #3
 8003bc4:	490e      	ldr	r1, [pc, #56]	@ (8003c00 <HAL_RCC_ClockConfig+0x1c4>)
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003bca:	f000 f821 	bl	8003c10 <HAL_RCC_GetSysClockFreq>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	4b0b      	ldr	r3, [pc, #44]	@ (8003c00 <HAL_RCC_ClockConfig+0x1c4>)
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	091b      	lsrs	r3, r3, #4
 8003bd6:	f003 030f 	and.w	r3, r3, #15
 8003bda:	490a      	ldr	r1, [pc, #40]	@ (8003c04 <HAL_RCC_ClockConfig+0x1c8>)
 8003bdc:	5ccb      	ldrb	r3, [r1, r3]
 8003bde:	fa22 f303 	lsr.w	r3, r2, r3
 8003be2:	4a09      	ldr	r2, [pc, #36]	@ (8003c08 <HAL_RCC_ClockConfig+0x1cc>)
 8003be4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003be6:	4b09      	ldr	r3, [pc, #36]	@ (8003c0c <HAL_RCC_ClockConfig+0x1d0>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4618      	mov	r0, r3
 8003bec:	f7fe fcf6 	bl	80025dc <HAL_InitTick>

  return HAL_OK;
 8003bf0:	2300      	movs	r3, #0
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3710      	adds	r7, #16
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	40022000 	.word	0x40022000
 8003c00:	40021000 	.word	0x40021000
 8003c04:	0800526c 	.word	0x0800526c
 8003c08:	20000000 	.word	0x20000000
 8003c0c:	20000004 	.word	0x20000004

08003c10 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b087      	sub	sp, #28
 8003c14:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003c16:	2300      	movs	r3, #0
 8003c18:	60fb      	str	r3, [r7, #12]
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	60bb      	str	r3, [r7, #8]
 8003c1e:	2300      	movs	r3, #0
 8003c20:	617b      	str	r3, [r7, #20]
 8003c22:	2300      	movs	r3, #0
 8003c24:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003c26:	2300      	movs	r3, #0
 8003c28:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003c2a:	4b1e      	ldr	r3, [pc, #120]	@ (8003ca4 <HAL_RCC_GetSysClockFreq+0x94>)
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f003 030c 	and.w	r3, r3, #12
 8003c36:	2b04      	cmp	r3, #4
 8003c38:	d002      	beq.n	8003c40 <HAL_RCC_GetSysClockFreq+0x30>
 8003c3a:	2b08      	cmp	r3, #8
 8003c3c:	d003      	beq.n	8003c46 <HAL_RCC_GetSysClockFreq+0x36>
 8003c3e:	e027      	b.n	8003c90 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003c40:	4b19      	ldr	r3, [pc, #100]	@ (8003ca8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003c42:	613b      	str	r3, [r7, #16]
      break;
 8003c44:	e027      	b.n	8003c96 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	0c9b      	lsrs	r3, r3, #18
 8003c4a:	f003 030f 	and.w	r3, r3, #15
 8003c4e:	4a17      	ldr	r2, [pc, #92]	@ (8003cac <HAL_RCC_GetSysClockFreq+0x9c>)
 8003c50:	5cd3      	ldrb	r3, [r2, r3]
 8003c52:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d010      	beq.n	8003c80 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003c5e:	4b11      	ldr	r3, [pc, #68]	@ (8003ca4 <HAL_RCC_GetSysClockFreq+0x94>)
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	0c5b      	lsrs	r3, r3, #17
 8003c64:	f003 0301 	and.w	r3, r3, #1
 8003c68:	4a11      	ldr	r2, [pc, #68]	@ (8003cb0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003c6a:	5cd3      	ldrb	r3, [r2, r3]
 8003c6c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4a0d      	ldr	r2, [pc, #52]	@ (8003ca8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003c72:	fb03 f202 	mul.w	r2, r3, r2
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c7c:	617b      	str	r3, [r7, #20]
 8003c7e:	e004      	b.n	8003c8a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	4a0c      	ldr	r2, [pc, #48]	@ (8003cb4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003c84:	fb02 f303 	mul.w	r3, r2, r3
 8003c88:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	613b      	str	r3, [r7, #16]
      break;
 8003c8e:	e002      	b.n	8003c96 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003c90:	4b05      	ldr	r3, [pc, #20]	@ (8003ca8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003c92:	613b      	str	r3, [r7, #16]
      break;
 8003c94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c96:	693b      	ldr	r3, [r7, #16]
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	371c      	adds	r7, #28
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bc80      	pop	{r7}
 8003ca0:	4770      	bx	lr
 8003ca2:	bf00      	nop
 8003ca4:	40021000 	.word	0x40021000
 8003ca8:	007a1200 	.word	0x007a1200
 8003cac:	08005284 	.word	0x08005284
 8003cb0:	08005294 	.word	0x08005294
 8003cb4:	003d0900 	.word	0x003d0900

08003cb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cbc:	4b02      	ldr	r3, [pc, #8]	@ (8003cc8 <HAL_RCC_GetHCLKFreq+0x10>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bc80      	pop	{r7}
 8003cc6:	4770      	bx	lr
 8003cc8:	20000000 	.word	0x20000000

08003ccc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003cd0:	f7ff fff2 	bl	8003cb8 <HAL_RCC_GetHCLKFreq>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	4b05      	ldr	r3, [pc, #20]	@ (8003cec <HAL_RCC_GetPCLK1Freq+0x20>)
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	0a1b      	lsrs	r3, r3, #8
 8003cdc:	f003 0307 	and.w	r3, r3, #7
 8003ce0:	4903      	ldr	r1, [pc, #12]	@ (8003cf0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ce2:	5ccb      	ldrb	r3, [r1, r3]
 8003ce4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	bd80      	pop	{r7, pc}
 8003cec:	40021000 	.word	0x40021000
 8003cf0:	0800527c 	.word	0x0800527c

08003cf4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003cf8:	f7ff ffde 	bl	8003cb8 <HAL_RCC_GetHCLKFreq>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	4b05      	ldr	r3, [pc, #20]	@ (8003d14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	0adb      	lsrs	r3, r3, #11
 8003d04:	f003 0307 	and.w	r3, r3, #7
 8003d08:	4903      	ldr	r1, [pc, #12]	@ (8003d18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d0a:	5ccb      	ldrb	r3, [r1, r3]
 8003d0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	40021000 	.word	0x40021000
 8003d18:	0800527c 	.word	0x0800527c

08003d1c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b085      	sub	sp, #20
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003d24:	4b0a      	ldr	r3, [pc, #40]	@ (8003d50 <RCC_Delay+0x34>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a0a      	ldr	r2, [pc, #40]	@ (8003d54 <RCC_Delay+0x38>)
 8003d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d2e:	0a5b      	lsrs	r3, r3, #9
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	fb02 f303 	mul.w	r3, r2, r3
 8003d36:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003d38:	bf00      	nop
  }
  while (Delay --);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	1e5a      	subs	r2, r3, #1
 8003d3e:	60fa      	str	r2, [r7, #12]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d1f9      	bne.n	8003d38 <RCC_Delay+0x1c>
}
 8003d44:	bf00      	nop
 8003d46:	bf00      	nop
 8003d48:	3714      	adds	r7, #20
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bc80      	pop	{r7}
 8003d4e:	4770      	bx	lr
 8003d50:	20000000 	.word	0x20000000
 8003d54:	10624dd3 	.word	0x10624dd3

08003d58 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d101      	bne.n	8003d6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e042      	b.n	8003df0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d106      	bne.n	8003d84 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f7fe fa84 	bl	800228c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2224      	movs	r2, #36	@ 0x24
 8003d88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	68da      	ldr	r2, [r3, #12]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003d9a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f000 ff2f 	bl	8004c00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	691a      	ldr	r2, [r3, #16]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003db0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	695a      	ldr	r2, [r3, #20]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003dc0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	68da      	ldr	r2, [r3, #12]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003dd0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2220      	movs	r2, #32
 8003ddc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2220      	movs	r2, #32
 8003de4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003dee:	2300      	movs	r3, #0
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3708      	adds	r7, #8
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}

08003df8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b08c      	sub	sp, #48	@ 0x30
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	60f8      	str	r0, [r7, #12]
 8003e00:	60b9      	str	r1, [r7, #8]
 8003e02:	4613      	mov	r3, r2
 8003e04:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	2b20      	cmp	r3, #32
 8003e10:	d156      	bne.n	8003ec0 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d002      	beq.n	8003e1e <HAL_UART_Transmit_DMA+0x26>
 8003e18:	88fb      	ldrh	r3, [r7, #6]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d101      	bne.n	8003e22 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e04f      	b.n	8003ec2 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8003e22:	68ba      	ldr	r2, [r7, #8]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	88fa      	ldrh	r2, [r7, #6]
 8003e2c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	88fa      	ldrh	r2, [r7, #6]
 8003e32:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2200      	movs	r2, #0
 8003e38:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2221      	movs	r2, #33	@ 0x21
 8003e3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e46:	4a21      	ldr	r2, [pc, #132]	@ (8003ecc <HAL_UART_Transmit_DMA+0xd4>)
 8003e48:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e4e:	4a20      	ldr	r2, [pc, #128]	@ (8003ed0 <HAL_UART_Transmit_DMA+0xd8>)
 8003e50:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e56:	4a1f      	ldr	r2, [pc, #124]	@ (8003ed4 <HAL_UART_Transmit_DMA+0xdc>)
 8003e58:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e5e:	2200      	movs	r2, #0
 8003e60:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 8003e62:	f107 0308 	add.w	r3, r7, #8
 8003e66:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003e6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e6e:	6819      	ldr	r1, [r3, #0]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	3304      	adds	r3, #4
 8003e76:	461a      	mov	r2, r3
 8003e78:	88fb      	ldrh	r3, [r7, #6]
 8003e7a:	f7fe fda3 	bl	80029c4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003e86:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	3314      	adds	r3, #20
 8003e8e:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e90:	69bb      	ldr	r3, [r7, #24]
 8003e92:	e853 3f00 	ldrex	r3, [r3]
 8003e96:	617b      	str	r3, [r7, #20]
   return(result);
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e9e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	3314      	adds	r3, #20
 8003ea6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003ea8:	627a      	str	r2, [r7, #36]	@ 0x24
 8003eaa:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eac:	6a39      	ldr	r1, [r7, #32]
 8003eae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003eb0:	e841 2300 	strex	r3, r2, [r1]
 8003eb4:	61fb      	str	r3, [r7, #28]
   return(result);
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d1e5      	bne.n	8003e88 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	e000      	b.n	8003ec2 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8003ec0:	2302      	movs	r3, #2
  }
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3730      	adds	r7, #48	@ 0x30
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	08004495 	.word	0x08004495
 8003ed0:	0800452f 	.word	0x0800452f
 8003ed4:	080046b3 	.word	0x080046b3

08003ed8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b084      	sub	sp, #16
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	60f8      	str	r0, [r7, #12]
 8003ee0:	60b9      	str	r1, [r7, #8]
 8003ee2:	4613      	mov	r3, r2
 8003ee4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	2b20      	cmp	r3, #32
 8003ef0:	d112      	bne.n	8003f18 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d002      	beq.n	8003efe <HAL_UART_Receive_DMA+0x26>
 8003ef8:	88fb      	ldrh	r3, [r7, #6]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d101      	bne.n	8003f02 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e00b      	b.n	8003f1a <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2200      	movs	r2, #0
 8003f06:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003f08:	88fb      	ldrh	r3, [r7, #6]
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	68b9      	ldr	r1, [r7, #8]
 8003f0e:	68f8      	ldr	r0, [r7, #12]
 8003f10:	f000 fc1a 	bl	8004748 <UART_Start_Receive_DMA>
 8003f14:	4603      	mov	r3, r0
 8003f16:	e000      	b.n	8003f1a <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003f18:	2302      	movs	r3, #2
  }
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3710      	adds	r7, #16
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
	...

08003f24 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b0ba      	sub	sp, #232	@ 0xe8
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	695b      	ldr	r3, [r3, #20]
 8003f46:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003f50:	2300      	movs	r3, #0
 8003f52:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003f56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f5a:	f003 030f 	and.w	r3, r3, #15
 8003f5e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003f62:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d10f      	bne.n	8003f8a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f6e:	f003 0320 	and.w	r3, r3, #32
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d009      	beq.n	8003f8a <HAL_UART_IRQHandler+0x66>
 8003f76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f7a:	f003 0320 	and.w	r3, r3, #32
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d003      	beq.n	8003f8a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f000 fd7e 	bl	8004a84 <UART_Receive_IT>
      return;
 8003f88:	e25b      	b.n	8004442 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003f8a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	f000 80de 	beq.w	8004150 <HAL_UART_IRQHandler+0x22c>
 8003f94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f98:	f003 0301 	and.w	r3, r3, #1
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d106      	bne.n	8003fae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003fa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fa4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	f000 80d1 	beq.w	8004150 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003fae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fb2:	f003 0301 	and.w	r3, r3, #1
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d00b      	beq.n	8003fd2 <HAL_UART_IRQHandler+0xae>
 8003fba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d005      	beq.n	8003fd2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fca:	f043 0201 	orr.w	r2, r3, #1
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003fd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fd6:	f003 0304 	and.w	r3, r3, #4
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d00b      	beq.n	8003ff6 <HAL_UART_IRQHandler+0xd2>
 8003fde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003fe2:	f003 0301 	and.w	r3, r3, #1
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d005      	beq.n	8003ff6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fee:	f043 0202 	orr.w	r2, r3, #2
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ff6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ffa:	f003 0302 	and.w	r3, r3, #2
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d00b      	beq.n	800401a <HAL_UART_IRQHandler+0xf6>
 8004002:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004006:	f003 0301 	and.w	r3, r3, #1
 800400a:	2b00      	cmp	r3, #0
 800400c:	d005      	beq.n	800401a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004012:	f043 0204 	orr.w	r2, r3, #4
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800401a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800401e:	f003 0308 	and.w	r3, r3, #8
 8004022:	2b00      	cmp	r3, #0
 8004024:	d011      	beq.n	800404a <HAL_UART_IRQHandler+0x126>
 8004026:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800402a:	f003 0320 	and.w	r3, r3, #32
 800402e:	2b00      	cmp	r3, #0
 8004030:	d105      	bne.n	800403e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004032:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004036:	f003 0301 	and.w	r3, r3, #1
 800403a:	2b00      	cmp	r3, #0
 800403c:	d005      	beq.n	800404a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004042:	f043 0208 	orr.w	r2, r3, #8
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800404e:	2b00      	cmp	r3, #0
 8004050:	f000 81f2 	beq.w	8004438 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004054:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004058:	f003 0320 	and.w	r3, r3, #32
 800405c:	2b00      	cmp	r3, #0
 800405e:	d008      	beq.n	8004072 <HAL_UART_IRQHandler+0x14e>
 8004060:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004064:	f003 0320 	and.w	r3, r3, #32
 8004068:	2b00      	cmp	r3, #0
 800406a:	d002      	beq.n	8004072 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f000 fd09 	bl	8004a84 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	695b      	ldr	r3, [r3, #20]
 8004078:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800407c:	2b00      	cmp	r3, #0
 800407e:	bf14      	ite	ne
 8004080:	2301      	movne	r3, #1
 8004082:	2300      	moveq	r3, #0
 8004084:	b2db      	uxtb	r3, r3
 8004086:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800408e:	f003 0308 	and.w	r3, r3, #8
 8004092:	2b00      	cmp	r3, #0
 8004094:	d103      	bne.n	800409e <HAL_UART_IRQHandler+0x17a>
 8004096:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800409a:	2b00      	cmp	r3, #0
 800409c:	d04f      	beq.n	800413e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f000 fc13 	bl	80048ca <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	695b      	ldr	r3, [r3, #20]
 80040aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d041      	beq.n	8004136 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	3314      	adds	r3, #20
 80040b8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80040c0:	e853 3f00 	ldrex	r3, [r3]
 80040c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80040c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80040cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80040d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	3314      	adds	r3, #20
 80040da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80040de:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80040e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80040ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80040ee:	e841 2300 	strex	r3, r2, [r1]
 80040f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80040f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d1d9      	bne.n	80040b2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004102:	2b00      	cmp	r3, #0
 8004104:	d013      	beq.n	800412e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800410a:	4a7e      	ldr	r2, [pc, #504]	@ (8004304 <HAL_UART_IRQHandler+0x3e0>)
 800410c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004112:	4618      	mov	r0, r3
 8004114:	f7fe fcf2 	bl	8002afc <HAL_DMA_Abort_IT>
 8004118:	4603      	mov	r3, r0
 800411a:	2b00      	cmp	r3, #0
 800411c:	d016      	beq.n	800414c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004122:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004124:	687a      	ldr	r2, [r7, #4]
 8004126:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004128:	4610      	mov	r0, r2
 800412a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800412c:	e00e      	b.n	800414c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f000 f99c 	bl	800446c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004134:	e00a      	b.n	800414c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f000 f998 	bl	800446c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800413c:	e006      	b.n	800414c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f000 f994 	bl	800446c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800414a:	e175      	b.n	8004438 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800414c:	bf00      	nop
    return;
 800414e:	e173      	b.n	8004438 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004154:	2b01      	cmp	r3, #1
 8004156:	f040 814f 	bne.w	80043f8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800415a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800415e:	f003 0310 	and.w	r3, r3, #16
 8004162:	2b00      	cmp	r3, #0
 8004164:	f000 8148 	beq.w	80043f8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004168:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800416c:	f003 0310 	and.w	r3, r3, #16
 8004170:	2b00      	cmp	r3, #0
 8004172:	f000 8141 	beq.w	80043f8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004176:	2300      	movs	r3, #0
 8004178:	60bb      	str	r3, [r7, #8]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	60bb      	str	r3, [r7, #8]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	60bb      	str	r3, [r7, #8]
 800418a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	695b      	ldr	r3, [r3, #20]
 8004192:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004196:	2b00      	cmp	r3, #0
 8004198:	f000 80b6 	beq.w	8004308 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80041a8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	f000 8145 	beq.w	800443c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80041b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80041ba:	429a      	cmp	r2, r3
 80041bc:	f080 813e 	bcs.w	800443c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80041c6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041cc:	699b      	ldr	r3, [r3, #24]
 80041ce:	2b20      	cmp	r3, #32
 80041d0:	f000 8088 	beq.w	80042e4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	330c      	adds	r3, #12
 80041da:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041de:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80041e2:	e853 3f00 	ldrex	r3, [r3]
 80041e6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80041ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80041ee:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80041f2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	330c      	adds	r3, #12
 80041fc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004200:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004204:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004208:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800420c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004210:	e841 2300 	strex	r3, r2, [r1]
 8004214:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004218:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800421c:	2b00      	cmp	r3, #0
 800421e:	d1d9      	bne.n	80041d4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	3314      	adds	r3, #20
 8004226:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004228:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800422a:	e853 3f00 	ldrex	r3, [r3]
 800422e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004230:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004232:	f023 0301 	bic.w	r3, r3, #1
 8004236:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	3314      	adds	r3, #20
 8004240:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004244:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004248:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800424a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800424c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004250:	e841 2300 	strex	r3, r2, [r1]
 8004254:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004256:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004258:	2b00      	cmp	r3, #0
 800425a:	d1e1      	bne.n	8004220 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	3314      	adds	r3, #20
 8004262:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004264:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004266:	e853 3f00 	ldrex	r3, [r3]
 800426a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800426c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800426e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004272:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	3314      	adds	r3, #20
 800427c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004280:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004282:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004284:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004286:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004288:	e841 2300 	strex	r3, r2, [r1]
 800428c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800428e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004290:	2b00      	cmp	r3, #0
 8004292:	d1e3      	bne.n	800425c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2220      	movs	r2, #32
 8004298:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	330c      	adds	r3, #12
 80042a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80042ac:	e853 3f00 	ldrex	r3, [r3]
 80042b0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80042b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80042b4:	f023 0310 	bic.w	r3, r3, #16
 80042b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	330c      	adds	r3, #12
 80042c2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80042c6:	65ba      	str	r2, [r7, #88]	@ 0x58
 80042c8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80042cc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80042ce:	e841 2300 	strex	r3, r2, [r1]
 80042d2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80042d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d1e3      	bne.n	80042a2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042de:	4618      	mov	r0, r3
 80042e0:	f7fe fbd0 	bl	8002a84 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2202      	movs	r2, #2
 80042e8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	4619      	mov	r1, r3
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f000 f8bf 	bl	800447e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004300:	e09c      	b.n	800443c <HAL_UART_IRQHandler+0x518>
 8004302:	bf00      	nop
 8004304:	0800498f 	.word	0x0800498f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004310:	b29b      	uxth	r3, r3
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800431c:	b29b      	uxth	r3, r3
 800431e:	2b00      	cmp	r3, #0
 8004320:	f000 808e 	beq.w	8004440 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004324:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004328:	2b00      	cmp	r3, #0
 800432a:	f000 8089 	beq.w	8004440 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	330c      	adds	r3, #12
 8004334:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004336:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004338:	e853 3f00 	ldrex	r3, [r3]
 800433c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800433e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004340:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004344:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	330c      	adds	r3, #12
 800434e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004352:	647a      	str	r2, [r7, #68]	@ 0x44
 8004354:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004356:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004358:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800435a:	e841 2300 	strex	r3, r2, [r1]
 800435e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004360:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004362:	2b00      	cmp	r3, #0
 8004364:	d1e3      	bne.n	800432e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	3314      	adds	r3, #20
 800436c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800436e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004370:	e853 3f00 	ldrex	r3, [r3]
 8004374:	623b      	str	r3, [r7, #32]
   return(result);
 8004376:	6a3b      	ldr	r3, [r7, #32]
 8004378:	f023 0301 	bic.w	r3, r3, #1
 800437c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	3314      	adds	r3, #20
 8004386:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800438a:	633a      	str	r2, [r7, #48]	@ 0x30
 800438c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800438e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004390:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004392:	e841 2300 	strex	r3, r2, [r1]
 8004396:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004398:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800439a:	2b00      	cmp	r3, #0
 800439c:	d1e3      	bne.n	8004366 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2220      	movs	r2, #32
 80043a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	330c      	adds	r3, #12
 80043b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	e853 3f00 	ldrex	r3, [r3]
 80043ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f023 0310 	bic.w	r3, r3, #16
 80043c2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	330c      	adds	r3, #12
 80043cc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80043d0:	61fa      	str	r2, [r7, #28]
 80043d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043d4:	69b9      	ldr	r1, [r7, #24]
 80043d6:	69fa      	ldr	r2, [r7, #28]
 80043d8:	e841 2300 	strex	r3, r2, [r1]
 80043dc:	617b      	str	r3, [r7, #20]
   return(result);
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d1e3      	bne.n	80043ac <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2202      	movs	r2, #2
 80043e8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80043ea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80043ee:	4619      	mov	r1, r3
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f000 f844 	bl	800447e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80043f6:	e023      	b.n	8004440 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80043f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004400:	2b00      	cmp	r3, #0
 8004402:	d009      	beq.n	8004418 <HAL_UART_IRQHandler+0x4f4>
 8004404:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004408:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800440c:	2b00      	cmp	r3, #0
 800440e:	d003      	beq.n	8004418 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f000 fad0 	bl	80049b6 <UART_Transmit_IT>
    return;
 8004416:	e014      	b.n	8004442 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004418:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800441c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004420:	2b00      	cmp	r3, #0
 8004422:	d00e      	beq.n	8004442 <HAL_UART_IRQHandler+0x51e>
 8004424:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004428:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800442c:	2b00      	cmp	r3, #0
 800442e:	d008      	beq.n	8004442 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f000 fb0f 	bl	8004a54 <UART_EndTransmit_IT>
    return;
 8004436:	e004      	b.n	8004442 <HAL_UART_IRQHandler+0x51e>
    return;
 8004438:	bf00      	nop
 800443a:	e002      	b.n	8004442 <HAL_UART_IRQHandler+0x51e>
      return;
 800443c:	bf00      	nop
 800443e:	e000      	b.n	8004442 <HAL_UART_IRQHandler+0x51e>
      return;
 8004440:	bf00      	nop
  }
}
 8004442:	37e8      	adds	r7, #232	@ 0xe8
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}

08004448 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004450:	bf00      	nop
 8004452:	370c      	adds	r7, #12
 8004454:	46bd      	mov	sp, r7
 8004456:	bc80      	pop	{r7}
 8004458:	4770      	bx	lr

0800445a <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800445a:	b480      	push	{r7}
 800445c:	b083      	sub	sp, #12
 800445e:	af00      	add	r7, sp, #0
 8004460:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004462:	bf00      	nop
 8004464:	370c      	adds	r7, #12
 8004466:	46bd      	mov	sp, r7
 8004468:	bc80      	pop	{r7}
 800446a:	4770      	bx	lr

0800446c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004474:	bf00      	nop
 8004476:	370c      	adds	r7, #12
 8004478:	46bd      	mov	sp, r7
 800447a:	bc80      	pop	{r7}
 800447c:	4770      	bx	lr

0800447e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800447e:	b480      	push	{r7}
 8004480:	b083      	sub	sp, #12
 8004482:	af00      	add	r7, sp, #0
 8004484:	6078      	str	r0, [r7, #4]
 8004486:	460b      	mov	r3, r1
 8004488:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800448a:	bf00      	nop
 800448c:	370c      	adds	r7, #12
 800448e:	46bd      	mov	sp, r7
 8004490:	bc80      	pop	{r7}
 8004492:	4770      	bx	lr

08004494 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b090      	sub	sp, #64	@ 0x40
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 0320 	and.w	r3, r3, #32
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d137      	bne.n	8004520 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80044b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044b2:	2200      	movs	r2, #0
 80044b4:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80044b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	3314      	adds	r3, #20
 80044bc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044c0:	e853 3f00 	ldrex	r3, [r3]
 80044c4:	623b      	str	r3, [r7, #32]
   return(result);
 80044c6:	6a3b      	ldr	r3, [r7, #32]
 80044c8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80044cc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80044ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	3314      	adds	r3, #20
 80044d4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80044d6:	633a      	str	r2, [r7, #48]	@ 0x30
 80044d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80044dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044de:	e841 2300 	strex	r3, r2, [r1]
 80044e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80044e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d1e5      	bne.n	80044b6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80044ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	330c      	adds	r3, #12
 80044f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	e853 3f00 	ldrex	r3, [r3]
 80044f8:	60fb      	str	r3, [r7, #12]
   return(result);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004500:	637b      	str	r3, [r7, #52]	@ 0x34
 8004502:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	330c      	adds	r3, #12
 8004508:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800450a:	61fa      	str	r2, [r7, #28]
 800450c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800450e:	69b9      	ldr	r1, [r7, #24]
 8004510:	69fa      	ldr	r2, [r7, #28]
 8004512:	e841 2300 	strex	r3, r2, [r1]
 8004516:	617b      	str	r3, [r7, #20]
   return(result);
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d1e5      	bne.n	80044ea <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800451e:	e002      	b.n	8004526 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8004520:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8004522:	f7fd f8bd 	bl	80016a0 <HAL_UART_TxCpltCallback>
}
 8004526:	bf00      	nop
 8004528:	3740      	adds	r7, #64	@ 0x40
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}

0800452e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800452e:	b580      	push	{r7, lr}
 8004530:	b084      	sub	sp, #16
 8004532:	af00      	add	r7, sp, #0
 8004534:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800453a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800453c:	68f8      	ldr	r0, [r7, #12]
 800453e:	f7ff ff83 	bl	8004448 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004542:	bf00      	nop
 8004544:	3710      	adds	r7, #16
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}

0800454a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800454a:	b580      	push	{r7, lr}
 800454c:	b09c      	sub	sp, #112	@ 0x70
 800454e:	af00      	add	r7, sp, #0
 8004550:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004556:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 0320 	and.w	r3, r3, #32
 8004562:	2b00      	cmp	r3, #0
 8004564:	d172      	bne.n	800464c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004566:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004568:	2200      	movs	r2, #0
 800456a:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800456c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	330c      	adds	r3, #12
 8004572:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004574:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004576:	e853 3f00 	ldrex	r3, [r3]
 800457a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800457c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800457e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004582:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004584:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	330c      	adds	r3, #12
 800458a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800458c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800458e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004590:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004592:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004594:	e841 2300 	strex	r3, r2, [r1]
 8004598:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800459a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800459c:	2b00      	cmp	r3, #0
 800459e:	d1e5      	bne.n	800456c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	3314      	adds	r3, #20
 80045a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045aa:	e853 3f00 	ldrex	r3, [r3]
 80045ae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80045b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045b2:	f023 0301 	bic.w	r3, r3, #1
 80045b6:	667b      	str	r3, [r7, #100]	@ 0x64
 80045b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	3314      	adds	r3, #20
 80045be:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80045c0:	647a      	str	r2, [r7, #68]	@ 0x44
 80045c2:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045c4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80045c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80045c8:	e841 2300 	strex	r3, r2, [r1]
 80045cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80045ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d1e5      	bne.n	80045a0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	3314      	adds	r3, #20
 80045da:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045de:	e853 3f00 	ldrex	r3, [r3]
 80045e2:	623b      	str	r3, [r7, #32]
   return(result);
 80045e4:	6a3b      	ldr	r3, [r7, #32]
 80045e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80045ea:	663b      	str	r3, [r7, #96]	@ 0x60
 80045ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	3314      	adds	r3, #20
 80045f2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80045f4:	633a      	str	r2, [r7, #48]	@ 0x30
 80045f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045f8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80045fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80045fc:	e841 2300 	strex	r3, r2, [r1]
 8004600:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004604:	2b00      	cmp	r3, #0
 8004606:	d1e5      	bne.n	80045d4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004608:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800460a:	2220      	movs	r2, #32
 800460c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004610:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004612:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004614:	2b01      	cmp	r3, #1
 8004616:	d119      	bne.n	800464c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004618:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	330c      	adds	r3, #12
 800461e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	e853 3f00 	ldrex	r3, [r3]
 8004626:	60fb      	str	r3, [r7, #12]
   return(result);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f023 0310 	bic.w	r3, r3, #16
 800462e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004630:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	330c      	adds	r3, #12
 8004636:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004638:	61fa      	str	r2, [r7, #28]
 800463a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800463c:	69b9      	ldr	r1, [r7, #24]
 800463e:	69fa      	ldr	r2, [r7, #28]
 8004640:	e841 2300 	strex	r3, r2, [r1]
 8004644:	617b      	str	r3, [r7, #20]
   return(result);
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d1e5      	bne.n	8004618 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800464c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800464e:	2200      	movs	r2, #0
 8004650:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004652:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004656:	2b01      	cmp	r3, #1
 8004658:	d106      	bne.n	8004668 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800465a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800465c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800465e:	4619      	mov	r1, r3
 8004660:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004662:	f7ff ff0c 	bl	800447e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004666:	e002      	b.n	800466e <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8004668:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800466a:	f7fd f827 	bl	80016bc <HAL_UART_RxCpltCallback>
}
 800466e:	bf00      	nop
 8004670:	3770      	adds	r7, #112	@ 0x70
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}

08004676 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004676:	b580      	push	{r7, lr}
 8004678:	b084      	sub	sp, #16
 800467a:	af00      	add	r7, sp, #0
 800467c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004682:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2201      	movs	r2, #1
 8004688:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800468e:	2b01      	cmp	r3, #1
 8004690:	d108      	bne.n	80046a4 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004696:	085b      	lsrs	r3, r3, #1
 8004698:	b29b      	uxth	r3, r3
 800469a:	4619      	mov	r1, r3
 800469c:	68f8      	ldr	r0, [r7, #12]
 800469e:	f7ff feee 	bl	800447e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80046a2:	e002      	b.n	80046aa <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80046a4:	68f8      	ldr	r0, [r7, #12]
 80046a6:	f7ff fed8 	bl	800445a <HAL_UART_RxHalfCpltCallback>
}
 80046aa:	bf00      	nop
 80046ac:	3710      	adds	r7, #16
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}

080046b2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80046b2:	b580      	push	{r7, lr}
 80046b4:	b084      	sub	sp, #16
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80046ba:	2300      	movs	r3, #0
 80046bc:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046c2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	695b      	ldr	r3, [r3, #20]
 80046ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	bf14      	ite	ne
 80046d2:	2301      	movne	r3, #1
 80046d4:	2300      	moveq	r3, #0
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	2b21      	cmp	r3, #33	@ 0x21
 80046e4:	d108      	bne.n	80046f8 <UART_DMAError+0x46>
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d005      	beq.n	80046f8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	2200      	movs	r2, #0
 80046f0:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80046f2:	68b8      	ldr	r0, [r7, #8]
 80046f4:	f000 f8c2 	bl	800487c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	695b      	ldr	r3, [r3, #20]
 80046fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004702:	2b00      	cmp	r3, #0
 8004704:	bf14      	ite	ne
 8004706:	2301      	movne	r3, #1
 8004708:	2300      	moveq	r3, #0
 800470a:	b2db      	uxtb	r3, r3
 800470c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004714:	b2db      	uxtb	r3, r3
 8004716:	2b22      	cmp	r3, #34	@ 0x22
 8004718:	d108      	bne.n	800472c <UART_DMAError+0x7a>
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d005      	beq.n	800472c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	2200      	movs	r2, #0
 8004724:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8004726:	68b8      	ldr	r0, [r7, #8]
 8004728:	f000 f8cf 	bl	80048ca <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004730:	f043 0210 	orr.w	r2, r3, #16
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004738:	68b8      	ldr	r0, [r7, #8]
 800473a:	f7ff fe97 	bl	800446c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800473e:	bf00      	nop
 8004740:	3710      	adds	r7, #16
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
	...

08004748 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b098      	sub	sp, #96	@ 0x60
 800474c:	af00      	add	r7, sp, #0
 800474e:	60f8      	str	r0, [r7, #12]
 8004750:	60b9      	str	r1, [r7, #8]
 8004752:	4613      	mov	r3, r2
 8004754:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004756:	68ba      	ldr	r2, [r7, #8]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	88fa      	ldrh	r2, [r7, #6]
 8004760:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2200      	movs	r2, #0
 8004766:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2222      	movs	r2, #34	@ 0x22
 800476c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004774:	4a3e      	ldr	r2, [pc, #248]	@ (8004870 <UART_Start_Receive_DMA+0x128>)
 8004776:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800477c:	4a3d      	ldr	r2, [pc, #244]	@ (8004874 <UART_Start_Receive_DMA+0x12c>)
 800477e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004784:	4a3c      	ldr	r2, [pc, #240]	@ (8004878 <UART_Start_Receive_DMA+0x130>)
 8004786:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800478c:	2200      	movs	r2, #0
 800478e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004790:	f107 0308 	add.w	r3, r7, #8
 8004794:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	3304      	adds	r3, #4
 80047a0:	4619      	mov	r1, r3
 80047a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	88fb      	ldrh	r3, [r7, #6]
 80047a8:	f7fe f90c 	bl	80029c4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80047ac:	2300      	movs	r3, #0
 80047ae:	613b      	str	r3, [r7, #16]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	613b      	str	r3, [r7, #16]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	613b      	str	r3, [r7, #16]
 80047c0:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	691b      	ldr	r3, [r3, #16]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d019      	beq.n	80047fe <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	330c      	adds	r3, #12
 80047d0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80047d4:	e853 3f00 	ldrex	r3, [r3]
 80047d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80047da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047e0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	330c      	adds	r3, #12
 80047e8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80047ea:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80047ec:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ee:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80047f0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80047f2:	e841 2300 	strex	r3, r2, [r1]
 80047f6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80047f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d1e5      	bne.n	80047ca <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	3314      	adds	r3, #20
 8004804:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004806:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004808:	e853 3f00 	ldrex	r3, [r3]
 800480c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800480e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004810:	f043 0301 	orr.w	r3, r3, #1
 8004814:	657b      	str	r3, [r7, #84]	@ 0x54
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	3314      	adds	r3, #20
 800481c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800481e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004820:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004822:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004824:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004826:	e841 2300 	strex	r3, r2, [r1]
 800482a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800482c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800482e:	2b00      	cmp	r3, #0
 8004830:	d1e5      	bne.n	80047fe <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	3314      	adds	r3, #20
 8004838:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800483a:	69bb      	ldr	r3, [r7, #24]
 800483c:	e853 3f00 	ldrex	r3, [r3]
 8004840:	617b      	str	r3, [r7, #20]
   return(result);
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004848:	653b      	str	r3, [r7, #80]	@ 0x50
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	3314      	adds	r3, #20
 8004850:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004852:	627a      	str	r2, [r7, #36]	@ 0x24
 8004854:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004856:	6a39      	ldr	r1, [r7, #32]
 8004858:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800485a:	e841 2300 	strex	r3, r2, [r1]
 800485e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004860:	69fb      	ldr	r3, [r7, #28]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d1e5      	bne.n	8004832 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8004866:	2300      	movs	r3, #0
}
 8004868:	4618      	mov	r0, r3
 800486a:	3760      	adds	r7, #96	@ 0x60
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}
 8004870:	0800454b 	.word	0x0800454b
 8004874:	08004677 	.word	0x08004677
 8004878:	080046b3 	.word	0x080046b3

0800487c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800487c:	b480      	push	{r7}
 800487e:	b089      	sub	sp, #36	@ 0x24
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	330c      	adds	r3, #12
 800488a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	e853 3f00 	ldrex	r3, [r3]
 8004892:	60bb      	str	r3, [r7, #8]
   return(result);
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800489a:	61fb      	str	r3, [r7, #28]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	330c      	adds	r3, #12
 80048a2:	69fa      	ldr	r2, [r7, #28]
 80048a4:	61ba      	str	r2, [r7, #24]
 80048a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048a8:	6979      	ldr	r1, [r7, #20]
 80048aa:	69ba      	ldr	r2, [r7, #24]
 80048ac:	e841 2300 	strex	r3, r2, [r1]
 80048b0:	613b      	str	r3, [r7, #16]
   return(result);
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d1e5      	bne.n	8004884 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2220      	movs	r2, #32
 80048bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80048c0:	bf00      	nop
 80048c2:	3724      	adds	r7, #36	@ 0x24
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bc80      	pop	{r7}
 80048c8:	4770      	bx	lr

080048ca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048ca:	b480      	push	{r7}
 80048cc:	b095      	sub	sp, #84	@ 0x54
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	330c      	adds	r3, #12
 80048d8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048dc:	e853 3f00 	ldrex	r3, [r3]
 80048e0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80048e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80048e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	330c      	adds	r3, #12
 80048f0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80048f2:	643a      	str	r2, [r7, #64]	@ 0x40
 80048f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80048f8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80048fa:	e841 2300 	strex	r3, r2, [r1]
 80048fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004900:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004902:	2b00      	cmp	r3, #0
 8004904:	d1e5      	bne.n	80048d2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	3314      	adds	r3, #20
 800490c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800490e:	6a3b      	ldr	r3, [r7, #32]
 8004910:	e853 3f00 	ldrex	r3, [r3]
 8004914:	61fb      	str	r3, [r7, #28]
   return(result);
 8004916:	69fb      	ldr	r3, [r7, #28]
 8004918:	f023 0301 	bic.w	r3, r3, #1
 800491c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	3314      	adds	r3, #20
 8004924:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004926:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004928:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800492a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800492c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800492e:	e841 2300 	strex	r3, r2, [r1]
 8004932:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004936:	2b00      	cmp	r3, #0
 8004938:	d1e5      	bne.n	8004906 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800493e:	2b01      	cmp	r3, #1
 8004940:	d119      	bne.n	8004976 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	330c      	adds	r3, #12
 8004948:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	e853 3f00 	ldrex	r3, [r3]
 8004950:	60bb      	str	r3, [r7, #8]
   return(result);
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	f023 0310 	bic.w	r3, r3, #16
 8004958:	647b      	str	r3, [r7, #68]	@ 0x44
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	330c      	adds	r3, #12
 8004960:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004962:	61ba      	str	r2, [r7, #24]
 8004964:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004966:	6979      	ldr	r1, [r7, #20]
 8004968:	69ba      	ldr	r2, [r7, #24]
 800496a:	e841 2300 	strex	r3, r2, [r1]
 800496e:	613b      	str	r3, [r7, #16]
   return(result);
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d1e5      	bne.n	8004942 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2220      	movs	r2, #32
 800497a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2200      	movs	r2, #0
 8004982:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004984:	bf00      	nop
 8004986:	3754      	adds	r7, #84	@ 0x54
 8004988:	46bd      	mov	sp, r7
 800498a:	bc80      	pop	{r7}
 800498c:	4770      	bx	lr

0800498e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800498e:	b580      	push	{r7, lr}
 8004990:	b084      	sub	sp, #16
 8004992:	af00      	add	r7, sp, #0
 8004994:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800499a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2200      	movs	r2, #0
 80049a0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2200      	movs	r2, #0
 80049a6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80049a8:	68f8      	ldr	r0, [r7, #12]
 80049aa:	f7ff fd5f 	bl	800446c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80049ae:	bf00      	nop
 80049b0:	3710      	adds	r7, #16
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}

080049b6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80049b6:	b480      	push	{r7}
 80049b8:	b085      	sub	sp, #20
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	2b21      	cmp	r3, #33	@ 0x21
 80049c8:	d13e      	bne.n	8004a48 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049d2:	d114      	bne.n	80049fe <UART_Transmit_IT+0x48>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	691b      	ldr	r3, [r3, #16]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d110      	bne.n	80049fe <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6a1b      	ldr	r3, [r3, #32]
 80049e0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	881b      	ldrh	r3, [r3, #0]
 80049e6:	461a      	mov	r2, r3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049f0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a1b      	ldr	r3, [r3, #32]
 80049f6:	1c9a      	adds	r2, r3, #2
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	621a      	str	r2, [r3, #32]
 80049fc:	e008      	b.n	8004a10 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6a1b      	ldr	r3, [r3, #32]
 8004a02:	1c59      	adds	r1, r3, #1
 8004a04:	687a      	ldr	r2, [r7, #4]
 8004a06:	6211      	str	r1, [r2, #32]
 8004a08:	781a      	ldrb	r2, [r3, #0]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	3b01      	subs	r3, #1
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	4619      	mov	r1, r3
 8004a1e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d10f      	bne.n	8004a44 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	68da      	ldr	r2, [r3, #12]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004a32:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	68da      	ldr	r2, [r3, #12]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004a42:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004a44:	2300      	movs	r3, #0
 8004a46:	e000      	b.n	8004a4a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004a48:	2302      	movs	r3, #2
  }
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3714      	adds	r7, #20
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bc80      	pop	{r7}
 8004a52:	4770      	bx	lr

08004a54 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b082      	sub	sp, #8
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	68da      	ldr	r2, [r3, #12]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a6a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2220      	movs	r2, #32
 8004a70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f7fc fe13 	bl	80016a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004a7a:	2300      	movs	r3, #0
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3708      	adds	r7, #8
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}

08004a84 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b08c      	sub	sp, #48	@ 0x30
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004a92:	b2db      	uxtb	r3, r3
 8004a94:	2b22      	cmp	r3, #34	@ 0x22
 8004a96:	f040 80ae 	bne.w	8004bf6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004aa2:	d117      	bne.n	8004ad4 <UART_Receive_IT+0x50>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	691b      	ldr	r3, [r3, #16]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d113      	bne.n	8004ad4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004aac:	2300      	movs	r3, #0
 8004aae:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ab4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ac2:	b29a      	uxth	r2, r3
 8004ac4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ac6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004acc:	1c9a      	adds	r2, r3, #2
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	629a      	str	r2, [r3, #40]	@ 0x28
 8004ad2:	e026      	b.n	8004b22 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ad8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004ada:	2300      	movs	r3, #0
 8004adc:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ae6:	d007      	beq.n	8004af8 <UART_Receive_IT+0x74>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d10a      	bne.n	8004b06 <UART_Receive_IT+0x82>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	691b      	ldr	r3, [r3, #16]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d106      	bne.n	8004b06 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	b2da      	uxtb	r2, r3
 8004b00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b02:	701a      	strb	r2, [r3, #0]
 8004b04:	e008      	b.n	8004b18 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b12:	b2da      	uxtb	r2, r3
 8004b14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b16:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b1c:	1c5a      	adds	r2, r3, #1
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	3b01      	subs	r3, #1
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	4619      	mov	r1, r3
 8004b30:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d15d      	bne.n	8004bf2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	68da      	ldr	r2, [r3, #12]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f022 0220 	bic.w	r2, r2, #32
 8004b44:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	68da      	ldr	r2, [r3, #12]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004b54:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	695a      	ldr	r2, [r3, #20]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f022 0201 	bic.w	r2, r2, #1
 8004b64:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2220      	movs	r2, #32
 8004b6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d135      	bne.n	8004be8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	330c      	adds	r3, #12
 8004b88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	e853 3f00 	ldrex	r3, [r3]
 8004b90:	613b      	str	r3, [r7, #16]
   return(result);
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	f023 0310 	bic.w	r3, r3, #16
 8004b98:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	330c      	adds	r3, #12
 8004ba0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ba2:	623a      	str	r2, [r7, #32]
 8004ba4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba6:	69f9      	ldr	r1, [r7, #28]
 8004ba8:	6a3a      	ldr	r2, [r7, #32]
 8004baa:	e841 2300 	strex	r3, r2, [r1]
 8004bae:	61bb      	str	r3, [r7, #24]
   return(result);
 8004bb0:	69bb      	ldr	r3, [r7, #24]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d1e5      	bne.n	8004b82 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 0310 	and.w	r3, r3, #16
 8004bc0:	2b10      	cmp	r3, #16
 8004bc2:	d10a      	bne.n	8004bda <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	60fb      	str	r3, [r7, #12]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	60fb      	str	r3, [r7, #12]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	60fb      	str	r3, [r7, #12]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004bde:	4619      	mov	r1, r3
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f7ff fc4c 	bl	800447e <HAL_UARTEx_RxEventCallback>
 8004be6:	e002      	b.n	8004bee <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f7fc fd67 	bl	80016bc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	e002      	b.n	8004bf8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	e000      	b.n	8004bf8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004bf6:	2302      	movs	r3, #2
  }
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3730      	adds	r7, #48	@ 0x30
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}

08004c00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b084      	sub	sp, #16
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	691b      	ldr	r3, [r3, #16]
 8004c0e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	68da      	ldr	r2, [r3, #12]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	430a      	orrs	r2, r1
 8004c1c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	689a      	ldr	r2, [r3, #8]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	691b      	ldr	r3, [r3, #16]
 8004c26:	431a      	orrs	r2, r3
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	695b      	ldr	r3, [r3, #20]
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	68db      	ldr	r3, [r3, #12]
 8004c36:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004c3a:	f023 030c 	bic.w	r3, r3, #12
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	6812      	ldr	r2, [r2, #0]
 8004c42:	68b9      	ldr	r1, [r7, #8]
 8004c44:	430b      	orrs	r3, r1
 8004c46:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	695b      	ldr	r3, [r3, #20]
 8004c4e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	699a      	ldr	r2, [r3, #24]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	430a      	orrs	r2, r1
 8004c5c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a2c      	ldr	r2, [pc, #176]	@ (8004d14 <UART_SetConfig+0x114>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d103      	bne.n	8004c70 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004c68:	f7ff f844 	bl	8003cf4 <HAL_RCC_GetPCLK2Freq>
 8004c6c:	60f8      	str	r0, [r7, #12]
 8004c6e:	e002      	b.n	8004c76 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004c70:	f7ff f82c 	bl	8003ccc <HAL_RCC_GetPCLK1Freq>
 8004c74:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c76:	68fa      	ldr	r2, [r7, #12]
 8004c78:	4613      	mov	r3, r2
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	4413      	add	r3, r2
 8004c7e:	009a      	lsls	r2, r3, #2
 8004c80:	441a      	add	r2, r3
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c8c:	4a22      	ldr	r2, [pc, #136]	@ (8004d18 <UART_SetConfig+0x118>)
 8004c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c92:	095b      	lsrs	r3, r3, #5
 8004c94:	0119      	lsls	r1, r3, #4
 8004c96:	68fa      	ldr	r2, [r7, #12]
 8004c98:	4613      	mov	r3, r2
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	4413      	add	r3, r2
 8004c9e:	009a      	lsls	r2, r3, #2
 8004ca0:	441a      	add	r2, r3
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004cac:	4b1a      	ldr	r3, [pc, #104]	@ (8004d18 <UART_SetConfig+0x118>)
 8004cae:	fba3 0302 	umull	r0, r3, r3, r2
 8004cb2:	095b      	lsrs	r3, r3, #5
 8004cb4:	2064      	movs	r0, #100	@ 0x64
 8004cb6:	fb00 f303 	mul.w	r3, r0, r3
 8004cba:	1ad3      	subs	r3, r2, r3
 8004cbc:	011b      	lsls	r3, r3, #4
 8004cbe:	3332      	adds	r3, #50	@ 0x32
 8004cc0:	4a15      	ldr	r2, [pc, #84]	@ (8004d18 <UART_SetConfig+0x118>)
 8004cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8004cc6:	095b      	lsrs	r3, r3, #5
 8004cc8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004ccc:	4419      	add	r1, r3
 8004cce:	68fa      	ldr	r2, [r7, #12]
 8004cd0:	4613      	mov	r3, r2
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	4413      	add	r3, r2
 8004cd6:	009a      	lsls	r2, r3, #2
 8004cd8:	441a      	add	r2, r3
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	009b      	lsls	r3, r3, #2
 8004ce0:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ce4:	4b0c      	ldr	r3, [pc, #48]	@ (8004d18 <UART_SetConfig+0x118>)
 8004ce6:	fba3 0302 	umull	r0, r3, r3, r2
 8004cea:	095b      	lsrs	r3, r3, #5
 8004cec:	2064      	movs	r0, #100	@ 0x64
 8004cee:	fb00 f303 	mul.w	r3, r0, r3
 8004cf2:	1ad3      	subs	r3, r2, r3
 8004cf4:	011b      	lsls	r3, r3, #4
 8004cf6:	3332      	adds	r3, #50	@ 0x32
 8004cf8:	4a07      	ldr	r2, [pc, #28]	@ (8004d18 <UART_SetConfig+0x118>)
 8004cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8004cfe:	095b      	lsrs	r3, r3, #5
 8004d00:	f003 020f 	and.w	r2, r3, #15
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	440a      	add	r2, r1
 8004d0a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004d0c:	bf00      	nop
 8004d0e:	3710      	adds	r7, #16
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}
 8004d14:	40013800 	.word	0x40013800
 8004d18:	51eb851f 	.word	0x51eb851f

08004d1c <realloc>:
 8004d1c:	4b02      	ldr	r3, [pc, #8]	@ (8004d28 <realloc+0xc>)
 8004d1e:	460a      	mov	r2, r1
 8004d20:	4601      	mov	r1, r0
 8004d22:	6818      	ldr	r0, [r3, #0]
 8004d24:	f000 b802 	b.w	8004d2c <_realloc_r>
 8004d28:	2000000c 	.word	0x2000000c

08004d2c <_realloc_r>:
 8004d2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d30:	4680      	mov	r8, r0
 8004d32:	4615      	mov	r5, r2
 8004d34:	460c      	mov	r4, r1
 8004d36:	b921      	cbnz	r1, 8004d42 <_realloc_r+0x16>
 8004d38:	4611      	mov	r1, r2
 8004d3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d3e:	f000 b8cf 	b.w	8004ee0 <_malloc_r>
 8004d42:	b92a      	cbnz	r2, 8004d50 <_realloc_r+0x24>
 8004d44:	f000 f862 	bl	8004e0c <_free_r>
 8004d48:	2400      	movs	r4, #0
 8004d4a:	4620      	mov	r0, r4
 8004d4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d50:	f000 f952 	bl	8004ff8 <_malloc_usable_size_r>
 8004d54:	4285      	cmp	r5, r0
 8004d56:	4606      	mov	r6, r0
 8004d58:	d802      	bhi.n	8004d60 <_realloc_r+0x34>
 8004d5a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004d5e:	d8f4      	bhi.n	8004d4a <_realloc_r+0x1e>
 8004d60:	4629      	mov	r1, r5
 8004d62:	4640      	mov	r0, r8
 8004d64:	f000 f8bc 	bl	8004ee0 <_malloc_r>
 8004d68:	4607      	mov	r7, r0
 8004d6a:	2800      	cmp	r0, #0
 8004d6c:	d0ec      	beq.n	8004d48 <_realloc_r+0x1c>
 8004d6e:	42b5      	cmp	r5, r6
 8004d70:	462a      	mov	r2, r5
 8004d72:	4621      	mov	r1, r4
 8004d74:	bf28      	it	cs
 8004d76:	4632      	movcs	r2, r6
 8004d78:	f000 f83a 	bl	8004df0 <memcpy>
 8004d7c:	4621      	mov	r1, r4
 8004d7e:	4640      	mov	r0, r8
 8004d80:	f000 f844 	bl	8004e0c <_free_r>
 8004d84:	463c      	mov	r4, r7
 8004d86:	e7e0      	b.n	8004d4a <_realloc_r+0x1e>

08004d88 <memset>:
 8004d88:	4603      	mov	r3, r0
 8004d8a:	4402      	add	r2, r0
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d100      	bne.n	8004d92 <memset+0xa>
 8004d90:	4770      	bx	lr
 8004d92:	f803 1b01 	strb.w	r1, [r3], #1
 8004d96:	e7f9      	b.n	8004d8c <memset+0x4>

08004d98 <__errno>:
 8004d98:	4b01      	ldr	r3, [pc, #4]	@ (8004da0 <__errno+0x8>)
 8004d9a:	6818      	ldr	r0, [r3, #0]
 8004d9c:	4770      	bx	lr
 8004d9e:	bf00      	nop
 8004da0:	2000000c 	.word	0x2000000c

08004da4 <__libc_init_array>:
 8004da4:	b570      	push	{r4, r5, r6, lr}
 8004da6:	2600      	movs	r6, #0
 8004da8:	4d0c      	ldr	r5, [pc, #48]	@ (8004ddc <__libc_init_array+0x38>)
 8004daa:	4c0d      	ldr	r4, [pc, #52]	@ (8004de0 <__libc_init_array+0x3c>)
 8004dac:	1b64      	subs	r4, r4, r5
 8004dae:	10a4      	asrs	r4, r4, #2
 8004db0:	42a6      	cmp	r6, r4
 8004db2:	d109      	bne.n	8004dc8 <__libc_init_array+0x24>
 8004db4:	f000 f938 	bl	8005028 <_init>
 8004db8:	2600      	movs	r6, #0
 8004dba:	4d0a      	ldr	r5, [pc, #40]	@ (8004de4 <__libc_init_array+0x40>)
 8004dbc:	4c0a      	ldr	r4, [pc, #40]	@ (8004de8 <__libc_init_array+0x44>)
 8004dbe:	1b64      	subs	r4, r4, r5
 8004dc0:	10a4      	asrs	r4, r4, #2
 8004dc2:	42a6      	cmp	r6, r4
 8004dc4:	d105      	bne.n	8004dd2 <__libc_init_array+0x2e>
 8004dc6:	bd70      	pop	{r4, r5, r6, pc}
 8004dc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dcc:	4798      	blx	r3
 8004dce:	3601      	adds	r6, #1
 8004dd0:	e7ee      	b.n	8004db0 <__libc_init_array+0xc>
 8004dd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dd6:	4798      	blx	r3
 8004dd8:	3601      	adds	r6, #1
 8004dda:	e7f2      	b.n	8004dc2 <__libc_init_array+0x1e>
 8004ddc:	080052a0 	.word	0x080052a0
 8004de0:	080052a0 	.word	0x080052a0
 8004de4:	080052a0 	.word	0x080052a0
 8004de8:	080052a8 	.word	0x080052a8

08004dec <__retarget_lock_acquire_recursive>:
 8004dec:	4770      	bx	lr

08004dee <__retarget_lock_release_recursive>:
 8004dee:	4770      	bx	lr

08004df0 <memcpy>:
 8004df0:	440a      	add	r2, r1
 8004df2:	4291      	cmp	r1, r2
 8004df4:	f100 33ff 	add.w	r3, r0, #4294967295
 8004df8:	d100      	bne.n	8004dfc <memcpy+0xc>
 8004dfa:	4770      	bx	lr
 8004dfc:	b510      	push	{r4, lr}
 8004dfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e02:	4291      	cmp	r1, r2
 8004e04:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e08:	d1f9      	bne.n	8004dfe <memcpy+0xe>
 8004e0a:	bd10      	pop	{r4, pc}

08004e0c <_free_r>:
 8004e0c:	b538      	push	{r3, r4, r5, lr}
 8004e0e:	4605      	mov	r5, r0
 8004e10:	2900      	cmp	r1, #0
 8004e12:	d040      	beq.n	8004e96 <_free_r+0x8a>
 8004e14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e18:	1f0c      	subs	r4, r1, #4
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	bfb8      	it	lt
 8004e1e:	18e4      	addlt	r4, r4, r3
 8004e20:	f000 f8de 	bl	8004fe0 <__malloc_lock>
 8004e24:	4a1c      	ldr	r2, [pc, #112]	@ (8004e98 <_free_r+0x8c>)
 8004e26:	6813      	ldr	r3, [r2, #0]
 8004e28:	b933      	cbnz	r3, 8004e38 <_free_r+0x2c>
 8004e2a:	6063      	str	r3, [r4, #4]
 8004e2c:	6014      	str	r4, [r2, #0]
 8004e2e:	4628      	mov	r0, r5
 8004e30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e34:	f000 b8da 	b.w	8004fec <__malloc_unlock>
 8004e38:	42a3      	cmp	r3, r4
 8004e3a:	d908      	bls.n	8004e4e <_free_r+0x42>
 8004e3c:	6820      	ldr	r0, [r4, #0]
 8004e3e:	1821      	adds	r1, r4, r0
 8004e40:	428b      	cmp	r3, r1
 8004e42:	bf01      	itttt	eq
 8004e44:	6819      	ldreq	r1, [r3, #0]
 8004e46:	685b      	ldreq	r3, [r3, #4]
 8004e48:	1809      	addeq	r1, r1, r0
 8004e4a:	6021      	streq	r1, [r4, #0]
 8004e4c:	e7ed      	b.n	8004e2a <_free_r+0x1e>
 8004e4e:	461a      	mov	r2, r3
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	b10b      	cbz	r3, 8004e58 <_free_r+0x4c>
 8004e54:	42a3      	cmp	r3, r4
 8004e56:	d9fa      	bls.n	8004e4e <_free_r+0x42>
 8004e58:	6811      	ldr	r1, [r2, #0]
 8004e5a:	1850      	adds	r0, r2, r1
 8004e5c:	42a0      	cmp	r0, r4
 8004e5e:	d10b      	bne.n	8004e78 <_free_r+0x6c>
 8004e60:	6820      	ldr	r0, [r4, #0]
 8004e62:	4401      	add	r1, r0
 8004e64:	1850      	adds	r0, r2, r1
 8004e66:	4283      	cmp	r3, r0
 8004e68:	6011      	str	r1, [r2, #0]
 8004e6a:	d1e0      	bne.n	8004e2e <_free_r+0x22>
 8004e6c:	6818      	ldr	r0, [r3, #0]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	4408      	add	r0, r1
 8004e72:	6010      	str	r0, [r2, #0]
 8004e74:	6053      	str	r3, [r2, #4]
 8004e76:	e7da      	b.n	8004e2e <_free_r+0x22>
 8004e78:	d902      	bls.n	8004e80 <_free_r+0x74>
 8004e7a:	230c      	movs	r3, #12
 8004e7c:	602b      	str	r3, [r5, #0]
 8004e7e:	e7d6      	b.n	8004e2e <_free_r+0x22>
 8004e80:	6820      	ldr	r0, [r4, #0]
 8004e82:	1821      	adds	r1, r4, r0
 8004e84:	428b      	cmp	r3, r1
 8004e86:	bf01      	itttt	eq
 8004e88:	6819      	ldreq	r1, [r3, #0]
 8004e8a:	685b      	ldreq	r3, [r3, #4]
 8004e8c:	1809      	addeq	r1, r1, r0
 8004e8e:	6021      	streq	r1, [r4, #0]
 8004e90:	6063      	str	r3, [r4, #4]
 8004e92:	6054      	str	r4, [r2, #4]
 8004e94:	e7cb      	b.n	8004e2e <_free_r+0x22>
 8004e96:	bd38      	pop	{r3, r4, r5, pc}
 8004e98:	20008378 	.word	0x20008378

08004e9c <sbrk_aligned>:
 8004e9c:	b570      	push	{r4, r5, r6, lr}
 8004e9e:	4e0f      	ldr	r6, [pc, #60]	@ (8004edc <sbrk_aligned+0x40>)
 8004ea0:	460c      	mov	r4, r1
 8004ea2:	6831      	ldr	r1, [r6, #0]
 8004ea4:	4605      	mov	r5, r0
 8004ea6:	b911      	cbnz	r1, 8004eae <sbrk_aligned+0x12>
 8004ea8:	f000 f8ae 	bl	8005008 <_sbrk_r>
 8004eac:	6030      	str	r0, [r6, #0]
 8004eae:	4621      	mov	r1, r4
 8004eb0:	4628      	mov	r0, r5
 8004eb2:	f000 f8a9 	bl	8005008 <_sbrk_r>
 8004eb6:	1c43      	adds	r3, r0, #1
 8004eb8:	d103      	bne.n	8004ec2 <sbrk_aligned+0x26>
 8004eba:	f04f 34ff 	mov.w	r4, #4294967295
 8004ebe:	4620      	mov	r0, r4
 8004ec0:	bd70      	pop	{r4, r5, r6, pc}
 8004ec2:	1cc4      	adds	r4, r0, #3
 8004ec4:	f024 0403 	bic.w	r4, r4, #3
 8004ec8:	42a0      	cmp	r0, r4
 8004eca:	d0f8      	beq.n	8004ebe <sbrk_aligned+0x22>
 8004ecc:	1a21      	subs	r1, r4, r0
 8004ece:	4628      	mov	r0, r5
 8004ed0:	f000 f89a 	bl	8005008 <_sbrk_r>
 8004ed4:	3001      	adds	r0, #1
 8004ed6:	d1f2      	bne.n	8004ebe <sbrk_aligned+0x22>
 8004ed8:	e7ef      	b.n	8004eba <sbrk_aligned+0x1e>
 8004eda:	bf00      	nop
 8004edc:	20008374 	.word	0x20008374

08004ee0 <_malloc_r>:
 8004ee0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ee4:	1ccd      	adds	r5, r1, #3
 8004ee6:	f025 0503 	bic.w	r5, r5, #3
 8004eea:	3508      	adds	r5, #8
 8004eec:	2d0c      	cmp	r5, #12
 8004eee:	bf38      	it	cc
 8004ef0:	250c      	movcc	r5, #12
 8004ef2:	2d00      	cmp	r5, #0
 8004ef4:	4606      	mov	r6, r0
 8004ef6:	db01      	blt.n	8004efc <_malloc_r+0x1c>
 8004ef8:	42a9      	cmp	r1, r5
 8004efa:	d904      	bls.n	8004f06 <_malloc_r+0x26>
 8004efc:	230c      	movs	r3, #12
 8004efe:	6033      	str	r3, [r6, #0]
 8004f00:	2000      	movs	r0, #0
 8004f02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f06:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004fdc <_malloc_r+0xfc>
 8004f0a:	f000 f869 	bl	8004fe0 <__malloc_lock>
 8004f0e:	f8d8 3000 	ldr.w	r3, [r8]
 8004f12:	461c      	mov	r4, r3
 8004f14:	bb44      	cbnz	r4, 8004f68 <_malloc_r+0x88>
 8004f16:	4629      	mov	r1, r5
 8004f18:	4630      	mov	r0, r6
 8004f1a:	f7ff ffbf 	bl	8004e9c <sbrk_aligned>
 8004f1e:	1c43      	adds	r3, r0, #1
 8004f20:	4604      	mov	r4, r0
 8004f22:	d158      	bne.n	8004fd6 <_malloc_r+0xf6>
 8004f24:	f8d8 4000 	ldr.w	r4, [r8]
 8004f28:	4627      	mov	r7, r4
 8004f2a:	2f00      	cmp	r7, #0
 8004f2c:	d143      	bne.n	8004fb6 <_malloc_r+0xd6>
 8004f2e:	2c00      	cmp	r4, #0
 8004f30:	d04b      	beq.n	8004fca <_malloc_r+0xea>
 8004f32:	6823      	ldr	r3, [r4, #0]
 8004f34:	4639      	mov	r1, r7
 8004f36:	4630      	mov	r0, r6
 8004f38:	eb04 0903 	add.w	r9, r4, r3
 8004f3c:	f000 f864 	bl	8005008 <_sbrk_r>
 8004f40:	4581      	cmp	r9, r0
 8004f42:	d142      	bne.n	8004fca <_malloc_r+0xea>
 8004f44:	6821      	ldr	r1, [r4, #0]
 8004f46:	4630      	mov	r0, r6
 8004f48:	1a6d      	subs	r5, r5, r1
 8004f4a:	4629      	mov	r1, r5
 8004f4c:	f7ff ffa6 	bl	8004e9c <sbrk_aligned>
 8004f50:	3001      	adds	r0, #1
 8004f52:	d03a      	beq.n	8004fca <_malloc_r+0xea>
 8004f54:	6823      	ldr	r3, [r4, #0]
 8004f56:	442b      	add	r3, r5
 8004f58:	6023      	str	r3, [r4, #0]
 8004f5a:	f8d8 3000 	ldr.w	r3, [r8]
 8004f5e:	685a      	ldr	r2, [r3, #4]
 8004f60:	bb62      	cbnz	r2, 8004fbc <_malloc_r+0xdc>
 8004f62:	f8c8 7000 	str.w	r7, [r8]
 8004f66:	e00f      	b.n	8004f88 <_malloc_r+0xa8>
 8004f68:	6822      	ldr	r2, [r4, #0]
 8004f6a:	1b52      	subs	r2, r2, r5
 8004f6c:	d420      	bmi.n	8004fb0 <_malloc_r+0xd0>
 8004f6e:	2a0b      	cmp	r2, #11
 8004f70:	d917      	bls.n	8004fa2 <_malloc_r+0xc2>
 8004f72:	1961      	adds	r1, r4, r5
 8004f74:	42a3      	cmp	r3, r4
 8004f76:	6025      	str	r5, [r4, #0]
 8004f78:	bf18      	it	ne
 8004f7a:	6059      	strne	r1, [r3, #4]
 8004f7c:	6863      	ldr	r3, [r4, #4]
 8004f7e:	bf08      	it	eq
 8004f80:	f8c8 1000 	streq.w	r1, [r8]
 8004f84:	5162      	str	r2, [r4, r5]
 8004f86:	604b      	str	r3, [r1, #4]
 8004f88:	4630      	mov	r0, r6
 8004f8a:	f000 f82f 	bl	8004fec <__malloc_unlock>
 8004f8e:	f104 000b 	add.w	r0, r4, #11
 8004f92:	1d23      	adds	r3, r4, #4
 8004f94:	f020 0007 	bic.w	r0, r0, #7
 8004f98:	1ac2      	subs	r2, r0, r3
 8004f9a:	bf1c      	itt	ne
 8004f9c:	1a1b      	subne	r3, r3, r0
 8004f9e:	50a3      	strne	r3, [r4, r2]
 8004fa0:	e7af      	b.n	8004f02 <_malloc_r+0x22>
 8004fa2:	6862      	ldr	r2, [r4, #4]
 8004fa4:	42a3      	cmp	r3, r4
 8004fa6:	bf0c      	ite	eq
 8004fa8:	f8c8 2000 	streq.w	r2, [r8]
 8004fac:	605a      	strne	r2, [r3, #4]
 8004fae:	e7eb      	b.n	8004f88 <_malloc_r+0xa8>
 8004fb0:	4623      	mov	r3, r4
 8004fb2:	6864      	ldr	r4, [r4, #4]
 8004fb4:	e7ae      	b.n	8004f14 <_malloc_r+0x34>
 8004fb6:	463c      	mov	r4, r7
 8004fb8:	687f      	ldr	r7, [r7, #4]
 8004fba:	e7b6      	b.n	8004f2a <_malloc_r+0x4a>
 8004fbc:	461a      	mov	r2, r3
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	42a3      	cmp	r3, r4
 8004fc2:	d1fb      	bne.n	8004fbc <_malloc_r+0xdc>
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	6053      	str	r3, [r2, #4]
 8004fc8:	e7de      	b.n	8004f88 <_malloc_r+0xa8>
 8004fca:	230c      	movs	r3, #12
 8004fcc:	4630      	mov	r0, r6
 8004fce:	6033      	str	r3, [r6, #0]
 8004fd0:	f000 f80c 	bl	8004fec <__malloc_unlock>
 8004fd4:	e794      	b.n	8004f00 <_malloc_r+0x20>
 8004fd6:	6005      	str	r5, [r0, #0]
 8004fd8:	e7d6      	b.n	8004f88 <_malloc_r+0xa8>
 8004fda:	bf00      	nop
 8004fdc:	20008378 	.word	0x20008378

08004fe0 <__malloc_lock>:
 8004fe0:	4801      	ldr	r0, [pc, #4]	@ (8004fe8 <__malloc_lock+0x8>)
 8004fe2:	f7ff bf03 	b.w	8004dec <__retarget_lock_acquire_recursive>
 8004fe6:	bf00      	nop
 8004fe8:	20008370 	.word	0x20008370

08004fec <__malloc_unlock>:
 8004fec:	4801      	ldr	r0, [pc, #4]	@ (8004ff4 <__malloc_unlock+0x8>)
 8004fee:	f7ff befe 	b.w	8004dee <__retarget_lock_release_recursive>
 8004ff2:	bf00      	nop
 8004ff4:	20008370 	.word	0x20008370

08004ff8 <_malloc_usable_size_r>:
 8004ff8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ffc:	1f18      	subs	r0, r3, #4
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	bfbc      	itt	lt
 8005002:	580b      	ldrlt	r3, [r1, r0]
 8005004:	18c0      	addlt	r0, r0, r3
 8005006:	4770      	bx	lr

08005008 <_sbrk_r>:
 8005008:	b538      	push	{r3, r4, r5, lr}
 800500a:	2300      	movs	r3, #0
 800500c:	4d05      	ldr	r5, [pc, #20]	@ (8005024 <_sbrk_r+0x1c>)
 800500e:	4604      	mov	r4, r0
 8005010:	4608      	mov	r0, r1
 8005012:	602b      	str	r3, [r5, #0]
 8005014:	f7fd fa3e 	bl	8002494 <_sbrk>
 8005018:	1c43      	adds	r3, r0, #1
 800501a:	d102      	bne.n	8005022 <_sbrk_r+0x1a>
 800501c:	682b      	ldr	r3, [r5, #0]
 800501e:	b103      	cbz	r3, 8005022 <_sbrk_r+0x1a>
 8005020:	6023      	str	r3, [r4, #0]
 8005022:	bd38      	pop	{r3, r4, r5, pc}
 8005024:	2000836c 	.word	0x2000836c

08005028 <_init>:
 8005028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800502a:	bf00      	nop
 800502c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800502e:	bc08      	pop	{r3}
 8005030:	469e      	mov	lr, r3
 8005032:	4770      	bx	lr

08005034 <_fini>:
 8005034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005036:	bf00      	nop
 8005038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800503a:	bc08      	pop	{r3}
 800503c:	469e      	mov	lr, r3
 800503e:	4770      	bx	lr
