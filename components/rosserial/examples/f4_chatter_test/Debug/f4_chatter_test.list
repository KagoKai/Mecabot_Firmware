
f4_chatter_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000532c  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000248  080054c4  080054c4  000064c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800570c  0800570c  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  0800570c  0800570c  0000670c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005714  08005714  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08005714  08005714  00006714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800571c  0800571c  0000671c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005720  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001354  2000005c  0800577c  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200013b0  0800577c  000073b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000edc3  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022a8  00000000  00000000  00015e4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000940  00000000  00000000  000180f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000716  00000000  00000000  00018a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001660d  00000000  00000000  0001914e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bf67  00000000  00000000  0002f75b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b4e2  00000000  00000000  0003b6c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c6ba4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028fc  00000000  00000000  000c6be8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000089  00000000  00000000  000c94e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000005c 	.word	0x2000005c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080054ac 	.word	0x080054ac

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000060 	.word	0x20000060
 80001d4:	080054ac 	.word	0x080054ac

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295
 80001fc:	f000 b96a 	b.w	80004d4 <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9d08      	ldr	r5, [sp, #32]
 800021e:	460c      	mov	r4, r1
 8000220:	2b00      	cmp	r3, #0
 8000222:	d14e      	bne.n	80002c2 <__udivmoddi4+0xaa>
 8000224:	4694      	mov	ip, r2
 8000226:	458c      	cmp	ip, r1
 8000228:	4686      	mov	lr, r0
 800022a:	fab2 f282 	clz	r2, r2
 800022e:	d962      	bls.n	80002f6 <__udivmoddi4+0xde>
 8000230:	b14a      	cbz	r2, 8000246 <__udivmoddi4+0x2e>
 8000232:	f1c2 0320 	rsb	r3, r2, #32
 8000236:	4091      	lsls	r1, r2
 8000238:	fa20 f303 	lsr.w	r3, r0, r3
 800023c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000240:	4319      	orrs	r1, r3
 8000242:	fa00 fe02 	lsl.w	lr, r0, r2
 8000246:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024a:	fa1f f68c 	uxth.w	r6, ip
 800024e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000252:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000256:	fb07 1114 	mls	r1, r7, r4, r1
 800025a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800025e:	fb04 f106 	mul.w	r1, r4, r6
 8000262:	4299      	cmp	r1, r3
 8000264:	d90a      	bls.n	800027c <__udivmoddi4+0x64>
 8000266:	eb1c 0303 	adds.w	r3, ip, r3
 800026a:	f104 30ff 	add.w	r0, r4, #4294967295
 800026e:	f080 8112 	bcs.w	8000496 <__udivmoddi4+0x27e>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 810f 	bls.w	8000496 <__udivmoddi4+0x27e>
 8000278:	3c02      	subs	r4, #2
 800027a:	4463      	add	r3, ip
 800027c:	1a59      	subs	r1, r3, r1
 800027e:	fa1f f38e 	uxth.w	r3, lr
 8000282:	fbb1 f0f7 	udiv	r0, r1, r7
 8000286:	fb07 1110 	mls	r1, r7, r0, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb00 f606 	mul.w	r6, r0, r6
 8000292:	429e      	cmp	r6, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x94>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f100 31ff 	add.w	r1, r0, #4294967295
 800029e:	f080 80fc 	bcs.w	800049a <__udivmoddi4+0x282>
 80002a2:	429e      	cmp	r6, r3
 80002a4:	f240 80f9 	bls.w	800049a <__udivmoddi4+0x282>
 80002a8:	4463      	add	r3, ip
 80002aa:	3802      	subs	r0, #2
 80002ac:	1b9b      	subs	r3, r3, r6
 80002ae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11d      	cbz	r5, 80002be <__udivmoddi4+0xa6>
 80002b6:	40d3      	lsrs	r3, r2
 80002b8:	2200      	movs	r2, #0
 80002ba:	e9c5 3200 	strd	r3, r2, [r5]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d905      	bls.n	80002d2 <__udivmoddi4+0xba>
 80002c6:	b10d      	cbz	r5, 80002cc <__udivmoddi4+0xb4>
 80002c8:	e9c5 0100 	strd	r0, r1, [r5]
 80002cc:	2100      	movs	r1, #0
 80002ce:	4608      	mov	r0, r1
 80002d0:	e7f5      	b.n	80002be <__udivmoddi4+0xa6>
 80002d2:	fab3 f183 	clz	r1, r3
 80002d6:	2900      	cmp	r1, #0
 80002d8:	d146      	bne.n	8000368 <__udivmoddi4+0x150>
 80002da:	42a3      	cmp	r3, r4
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xcc>
 80002de:	4290      	cmp	r0, r2
 80002e0:	f0c0 80f0 	bcc.w	80004c4 <__udivmoddi4+0x2ac>
 80002e4:	1a86      	subs	r6, r0, r2
 80002e6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	2d00      	cmp	r5, #0
 80002ee:	d0e6      	beq.n	80002be <__udivmoddi4+0xa6>
 80002f0:	e9c5 6300 	strd	r6, r3, [r5]
 80002f4:	e7e3      	b.n	80002be <__udivmoddi4+0xa6>
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	f040 8090 	bne.w	800041c <__udivmoddi4+0x204>
 80002fc:	eba1 040c 	sub.w	r4, r1, ip
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	fa1f f78c 	uxth.w	r7, ip
 8000308:	2101      	movs	r1, #1
 800030a:	fbb4 f6f8 	udiv	r6, r4, r8
 800030e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000312:	fb08 4416 	mls	r4, r8, r6, r4
 8000316:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031a:	fb07 f006 	mul.w	r0, r7, r6
 800031e:	4298      	cmp	r0, r3
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x11c>
 8000322:	eb1c 0303 	adds.w	r3, ip, r3
 8000326:	f106 34ff 	add.w	r4, r6, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x11a>
 800032c:	4298      	cmp	r0, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2b4>
 8000332:	4626      	mov	r6, r4
 8000334:	1a1c      	subs	r4, r3, r0
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb4 f0f8 	udiv	r0, r4, r8
 800033e:	fb08 4410 	mls	r4, r8, r0, r4
 8000342:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000346:	fb00 f707 	mul.w	r7, r0, r7
 800034a:	429f      	cmp	r7, r3
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x148>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 34ff 	add.w	r4, r0, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x146>
 8000358:	429f      	cmp	r7, r3
 800035a:	f200 80b0 	bhi.w	80004be <__udivmoddi4+0x2a6>
 800035e:	4620      	mov	r0, r4
 8000360:	1bdb      	subs	r3, r3, r7
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	e7a5      	b.n	80002b4 <__udivmoddi4+0x9c>
 8000368:	f1c1 0620 	rsb	r6, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 f706 	lsr.w	r7, r2, r6
 8000372:	431f      	orrs	r7, r3
 8000374:	fa20 fc06 	lsr.w	ip, r0, r6
 8000378:	fa04 f301 	lsl.w	r3, r4, r1
 800037c:	ea43 030c 	orr.w	r3, r3, ip
 8000380:	40f4      	lsrs	r4, r6
 8000382:	fa00 f801 	lsl.w	r8, r0, r1
 8000386:	0c38      	lsrs	r0, r7, #16
 8000388:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800038c:	fbb4 fef0 	udiv	lr, r4, r0
 8000390:	fa1f fc87 	uxth.w	ip, r7
 8000394:	fb00 441e 	mls	r4, r0, lr, r4
 8000398:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800039c:	fb0e f90c 	mul.w	r9, lr, ip
 80003a0:	45a1      	cmp	r9, r4
 80003a2:	fa02 f201 	lsl.w	r2, r2, r1
 80003a6:	d90a      	bls.n	80003be <__udivmoddi4+0x1a6>
 80003a8:	193c      	adds	r4, r7, r4
 80003aa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ae:	f080 8084 	bcs.w	80004ba <__udivmoddi4+0x2a2>
 80003b2:	45a1      	cmp	r9, r4
 80003b4:	f240 8081 	bls.w	80004ba <__udivmoddi4+0x2a2>
 80003b8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003bc:	443c      	add	r4, r7
 80003be:	eba4 0409 	sub.w	r4, r4, r9
 80003c2:	fa1f f983 	uxth.w	r9, r3
 80003c6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ca:	fb00 4413 	mls	r4, r0, r3, r4
 80003ce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d6:	45a4      	cmp	ip, r4
 80003d8:	d907      	bls.n	80003ea <__udivmoddi4+0x1d2>
 80003da:	193c      	adds	r4, r7, r4
 80003dc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e0:	d267      	bcs.n	80004b2 <__udivmoddi4+0x29a>
 80003e2:	45a4      	cmp	ip, r4
 80003e4:	d965      	bls.n	80004b2 <__udivmoddi4+0x29a>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	443c      	add	r4, r7
 80003ea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ee:	fba0 9302 	umull	r9, r3, r0, r2
 80003f2:	eba4 040c 	sub.w	r4, r4, ip
 80003f6:	429c      	cmp	r4, r3
 80003f8:	46ce      	mov	lr, r9
 80003fa:	469c      	mov	ip, r3
 80003fc:	d351      	bcc.n	80004a2 <__udivmoddi4+0x28a>
 80003fe:	d04e      	beq.n	800049e <__udivmoddi4+0x286>
 8000400:	b155      	cbz	r5, 8000418 <__udivmoddi4+0x200>
 8000402:	ebb8 030e 	subs.w	r3, r8, lr
 8000406:	eb64 040c 	sbc.w	r4, r4, ip
 800040a:	fa04 f606 	lsl.w	r6, r4, r6
 800040e:	40cb      	lsrs	r3, r1
 8000410:	431e      	orrs	r6, r3
 8000412:	40cc      	lsrs	r4, r1
 8000414:	e9c5 6400 	strd	r6, r4, [r5]
 8000418:	2100      	movs	r1, #0
 800041a:	e750      	b.n	80002be <__udivmoddi4+0xa6>
 800041c:	f1c2 0320 	rsb	r3, r2, #32
 8000420:	fa20 f103 	lsr.w	r1, r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa24 f303 	lsr.w	r3, r4, r3
 800042c:	4094      	lsls	r4, r2
 800042e:	430c      	orrs	r4, r1
 8000430:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000434:	fa00 fe02 	lsl.w	lr, r0, r2
 8000438:	fa1f f78c 	uxth.w	r7, ip
 800043c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000440:	fb08 3110 	mls	r1, r8, r0, r3
 8000444:	0c23      	lsrs	r3, r4, #16
 8000446:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044a:	fb00 f107 	mul.w	r1, r0, r7
 800044e:	4299      	cmp	r1, r3
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x24c>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 36ff 	add.w	r6, r0, #4294967295
 800045a:	d22c      	bcs.n	80004b6 <__udivmoddi4+0x29e>
 800045c:	4299      	cmp	r1, r3
 800045e:	d92a      	bls.n	80004b6 <__udivmoddi4+0x29e>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1a5b      	subs	r3, r3, r1
 8000466:	b2a4      	uxth	r4, r4
 8000468:	fbb3 f1f8 	udiv	r1, r3, r8
 800046c:	fb08 3311 	mls	r3, r8, r1, r3
 8000470:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000474:	fb01 f307 	mul.w	r3, r1, r7
 8000478:	42a3      	cmp	r3, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x276>
 800047c:	eb1c 0404 	adds.w	r4, ip, r4
 8000480:	f101 36ff 	add.w	r6, r1, #4294967295
 8000484:	d213      	bcs.n	80004ae <__udivmoddi4+0x296>
 8000486:	42a3      	cmp	r3, r4
 8000488:	d911      	bls.n	80004ae <__udivmoddi4+0x296>
 800048a:	3902      	subs	r1, #2
 800048c:	4464      	add	r4, ip
 800048e:	1ae4      	subs	r4, r4, r3
 8000490:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000494:	e739      	b.n	800030a <__udivmoddi4+0xf2>
 8000496:	4604      	mov	r4, r0
 8000498:	e6f0      	b.n	800027c <__udivmoddi4+0x64>
 800049a:	4608      	mov	r0, r1
 800049c:	e706      	b.n	80002ac <__udivmoddi4+0x94>
 800049e:	45c8      	cmp	r8, r9
 80004a0:	d2ae      	bcs.n	8000400 <__udivmoddi4+0x1e8>
 80004a2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004a6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004aa:	3801      	subs	r0, #1
 80004ac:	e7a8      	b.n	8000400 <__udivmoddi4+0x1e8>
 80004ae:	4631      	mov	r1, r6
 80004b0:	e7ed      	b.n	800048e <__udivmoddi4+0x276>
 80004b2:	4603      	mov	r3, r0
 80004b4:	e799      	b.n	80003ea <__udivmoddi4+0x1d2>
 80004b6:	4630      	mov	r0, r6
 80004b8:	e7d4      	b.n	8000464 <__udivmoddi4+0x24c>
 80004ba:	46d6      	mov	lr, sl
 80004bc:	e77f      	b.n	80003be <__udivmoddi4+0x1a6>
 80004be:	4463      	add	r3, ip
 80004c0:	3802      	subs	r0, #2
 80004c2:	e74d      	b.n	8000360 <__udivmoddi4+0x148>
 80004c4:	4606      	mov	r6, r0
 80004c6:	4623      	mov	r3, r4
 80004c8:	4608      	mov	r0, r1
 80004ca:	e70f      	b.n	80002ec <__udivmoddi4+0xd4>
 80004cc:	3e02      	subs	r6, #2
 80004ce:	4463      	add	r3, ip
 80004d0:	e730      	b.n	8000334 <__udivmoddi4+0x11c>
 80004d2:	bf00      	nop

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004dc:	f002 f908 	bl	80026f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e0:	f000 f80c 	bl	80004fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e4:	f000 f8ba 	bl	800065c <MX_GPIO_Init>
  MX_DMA_Init();
 80004e8:	f000 f890 	bl	800060c <MX_DMA_Init>
  MX_USART1_UART_Init();
 80004ec:	f000 f864 	bl	80005b8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  setup();
 80004f0:	f001 fa28 	bl	8001944 <setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  loop();
 80004f4:	f001 fa36 	bl	8001964 <loop>
 80004f8:	e7fc      	b.n	80004f4 <main+0x1c>
	...

080004fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b094      	sub	sp, #80	@ 0x50
 8000500:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000502:	f107 0320 	add.w	r3, r7, #32
 8000506:	2230      	movs	r2, #48	@ 0x30
 8000508:	2100      	movs	r1, #0
 800050a:	4618      	mov	r0, r3
 800050c:	f004 fe7c 	bl	8005208 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000510:	f107 030c 	add.w	r3, r7, #12
 8000514:	2200      	movs	r2, #0
 8000516:	601a      	str	r2, [r3, #0]
 8000518:	605a      	str	r2, [r3, #4]
 800051a:	609a      	str	r2, [r3, #8]
 800051c:	60da      	str	r2, [r3, #12]
 800051e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000520:	2300      	movs	r3, #0
 8000522:	60bb      	str	r3, [r7, #8]
 8000524:	4b22      	ldr	r3, [pc, #136]	@ (80005b0 <SystemClock_Config+0xb4>)
 8000526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000528:	4a21      	ldr	r2, [pc, #132]	@ (80005b0 <SystemClock_Config+0xb4>)
 800052a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800052e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000530:	4b1f      	ldr	r3, [pc, #124]	@ (80005b0 <SystemClock_Config+0xb4>)
 8000532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000534:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000538:	60bb      	str	r3, [r7, #8]
 800053a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800053c:	2300      	movs	r3, #0
 800053e:	607b      	str	r3, [r7, #4]
 8000540:	4b1c      	ldr	r3, [pc, #112]	@ (80005b4 <SystemClock_Config+0xb8>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	4a1b      	ldr	r2, [pc, #108]	@ (80005b4 <SystemClock_Config+0xb8>)
 8000546:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800054a:	6013      	str	r3, [r2, #0]
 800054c:	4b19      	ldr	r3, [pc, #100]	@ (80005b4 <SystemClock_Config+0xb8>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000554:	607b      	str	r3, [r7, #4]
 8000556:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000558:	2302      	movs	r3, #2
 800055a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800055c:	2301      	movs	r3, #1
 800055e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000560:	2310      	movs	r3, #16
 8000562:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000564:	2300      	movs	r3, #0
 8000566:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000568:	f107 0320 	add.w	r3, r7, #32
 800056c:	4618      	mov	r0, r3
 800056e:	f002 ffed 	bl	800354c <HAL_RCC_OscConfig>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000578:	f000 f8a6 	bl	80006c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800057c:	230f      	movs	r3, #15
 800057e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000580:	2300      	movs	r3, #0
 8000582:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000584:	2300      	movs	r3, #0
 8000586:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000588:	2300      	movs	r3, #0
 800058a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800058c:	2300      	movs	r3, #0
 800058e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000590:	f107 030c 	add.w	r3, r7, #12
 8000594:	2100      	movs	r1, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f003 fa50 	bl	8003a3c <HAL_RCC_ClockConfig>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d001      	beq.n	80005a6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80005a2:	f000 f891 	bl	80006c8 <Error_Handler>
  }
}
 80005a6:	bf00      	nop
 80005a8:	3750      	adds	r7, #80	@ 0x50
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	40023800 	.word	0x40023800
 80005b4:	40007000 	.word	0x40007000

080005b8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart_rosserial.Instance = USART1;
 80005bc:	4b11      	ldr	r3, [pc, #68]	@ (8000604 <MX_USART1_UART_Init+0x4c>)
 80005be:	4a12      	ldr	r2, [pc, #72]	@ (8000608 <MX_USART1_UART_Init+0x50>)
 80005c0:	601a      	str	r2, [r3, #0]
  huart_rosserial.Init.BaudRate = 115200;
 80005c2:	4b10      	ldr	r3, [pc, #64]	@ (8000604 <MX_USART1_UART_Init+0x4c>)
 80005c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80005c8:	605a      	str	r2, [r3, #4]
  huart_rosserial.Init.WordLength = UART_WORDLENGTH_8B;
 80005ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000604 <MX_USART1_UART_Init+0x4c>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	609a      	str	r2, [r3, #8]
  huart_rosserial.Init.StopBits = UART_STOPBITS_1;
 80005d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000604 <MX_USART1_UART_Init+0x4c>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	60da      	str	r2, [r3, #12]
  huart_rosserial.Init.Parity = UART_PARITY_NONE;
 80005d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000604 <MX_USART1_UART_Init+0x4c>)
 80005d8:	2200      	movs	r2, #0
 80005da:	611a      	str	r2, [r3, #16]
  huart_rosserial.Init.Mode = UART_MODE_TX_RX;
 80005dc:	4b09      	ldr	r3, [pc, #36]	@ (8000604 <MX_USART1_UART_Init+0x4c>)
 80005de:	220c      	movs	r2, #12
 80005e0:	615a      	str	r2, [r3, #20]
  huart_rosserial.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005e2:	4b08      	ldr	r3, [pc, #32]	@ (8000604 <MX_USART1_UART_Init+0x4c>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	619a      	str	r2, [r3, #24]
  huart_rosserial.Init.OverSampling = UART_OVERSAMPLING_16;
 80005e8:	4b06      	ldr	r3, [pc, #24]	@ (8000604 <MX_USART1_UART_Init+0x4c>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart_rosserial) != HAL_OK)
 80005ee:	4805      	ldr	r0, [pc, #20]	@ (8000604 <MX_USART1_UART_Init+0x4c>)
 80005f0:	f003 fc04 	bl	8003dfc <HAL_UART_Init>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80005fa:	f000 f865 	bl	80006c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80005fe:	bf00      	nop
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	20000078 	.word	0x20000078
 8000608:	40011000 	.word	0x40011000

0800060c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000612:	2300      	movs	r3, #0
 8000614:	607b      	str	r3, [r7, #4]
 8000616:	4b10      	ldr	r3, [pc, #64]	@ (8000658 <MX_DMA_Init+0x4c>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061a:	4a0f      	ldr	r2, [pc, #60]	@ (8000658 <MX_DMA_Init+0x4c>)
 800061c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000620:	6313      	str	r3, [r2, #48]	@ 0x30
 8000622:	4b0d      	ldr	r3, [pc, #52]	@ (8000658 <MX_DMA_Init+0x4c>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000626:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800062e:	2200      	movs	r2, #0
 8000630:	2100      	movs	r1, #0
 8000632:	203a      	movs	r0, #58	@ 0x3a
 8000634:	f002 f9cd 	bl	80029d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000638:	203a      	movs	r0, #58	@ 0x3a
 800063a:	f002 f9e6 	bl	8002a0a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 800063e:	2200      	movs	r2, #0
 8000640:	2100      	movs	r1, #0
 8000642:	2046      	movs	r0, #70	@ 0x46
 8000644:	f002 f9c5 	bl	80029d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000648:	2046      	movs	r0, #70	@ 0x46
 800064a:	f002 f9de 	bl	8002a0a <HAL_NVIC_EnableIRQ>

}
 800064e:	bf00      	nop
 8000650:	3708      	adds	r7, #8
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	40023800 	.word	0x40023800

0800065c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800065c:	b480      	push	{r7}
 800065e:	b085      	sub	sp, #20
 8000660:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000662:	2300      	movs	r3, #0
 8000664:	60fb      	str	r3, [r7, #12]
 8000666:	4b17      	ldr	r3, [pc, #92]	@ (80006c4 <MX_GPIO_Init+0x68>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800066a:	4a16      	ldr	r2, [pc, #88]	@ (80006c4 <MX_GPIO_Init+0x68>)
 800066c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000670:	6313      	str	r3, [r2, #48]	@ 0x30
 8000672:	4b14      	ldr	r3, [pc, #80]	@ (80006c4 <MX_GPIO_Init+0x68>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000676:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800067a:	60fb      	str	r3, [r7, #12]
 800067c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800067e:	2300      	movs	r3, #0
 8000680:	60bb      	str	r3, [r7, #8]
 8000682:	4b10      	ldr	r3, [pc, #64]	@ (80006c4 <MX_GPIO_Init+0x68>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000686:	4a0f      	ldr	r2, [pc, #60]	@ (80006c4 <MX_GPIO_Init+0x68>)
 8000688:	f043 0301 	orr.w	r3, r3, #1
 800068c:	6313      	str	r3, [r2, #48]	@ 0x30
 800068e:	4b0d      	ldr	r3, [pc, #52]	@ (80006c4 <MX_GPIO_Init+0x68>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000692:	f003 0301 	and.w	r3, r3, #1
 8000696:	60bb      	str	r3, [r7, #8]
 8000698:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800069a:	2300      	movs	r3, #0
 800069c:	607b      	str	r3, [r7, #4]
 800069e:	4b09      	ldr	r3, [pc, #36]	@ (80006c4 <MX_GPIO_Init+0x68>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a2:	4a08      	ldr	r2, [pc, #32]	@ (80006c4 <MX_GPIO_Init+0x68>)
 80006a4:	f043 0302 	orr.w	r3, r3, #2
 80006a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006aa:	4b06      	ldr	r3, [pc, #24]	@ (80006c4 <MX_GPIO_Init+0x68>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ae:	f003 0302 	and.w	r3, r3, #2
 80006b2:	607b      	str	r3, [r7, #4]
 80006b4:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006b6:	bf00      	nop
 80006b8:	3714      	adds	r7, #20
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	40023800 	.word	0x40023800

080006c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006cc:	b672      	cpsid	i
}
 80006ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006d0:	bf00      	nop
 80006d2:	e7fd      	b.n	80006d0 <Error_Handler+0x8>

080006d4 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 80006d4:	b480      	push	{r7}
 80006d6:	b083      	sub	sp, #12
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	2200      	movs	r2, #0
 80006e6:	605a      	str	r2, [r3, #4]
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	4618      	mov	r0, r3
 80006ec:	370c      	adds	r7, #12
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr
	...

080006f8 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 80006f8:	b480      	push	{r7}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
 8000700:	4a04      	ldr	r2, [pc, #16]	@ (8000714 <_ZN3ros3MsgC1Ev+0x1c>)
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	4618      	mov	r0, r3
 800070a:	370c      	adds	r7, #12
 800070c:	46bd      	mov	sp, r7
 800070e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000712:	4770      	bx	lr
 8000714:	080056dc 	.word	0x080056dc

08000718 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
      data()
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	4618      	mov	r0, r3
 8000724:	f7ff ffe8 	bl	80006f8 <_ZN3ros3MsgC1Ev>
 8000728:	4a06      	ldr	r2, [pc, #24]	@ (8000744 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	3304      	adds	r3, #4
 8000732:	4618      	mov	r0, r3
 8000734:	f7ff ffce 	bl	80006d4 <_ZN3ros4TimeC1Ev>
    {
    }
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	4618      	mov	r0, r3
 800073c:	3708      	adds	r7, #8
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	080056c4 	.word	0x080056c4

08000748 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000748:	b480      	push	{r7}
 800074a:	b085      	sub	sp, #20
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
 8000750:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000752:	2300      	movs	r3, #0
 8000754:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	6859      	ldr	r1, [r3, #4]
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	683a      	ldr	r2, [r7, #0]
 800075e:	4413      	add	r3, r2
 8000760:	b2ca      	uxtb	r2, r1
 8000762:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	685b      	ldr	r3, [r3, #4]
 8000768:	0a19      	lsrs	r1, r3, #8
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	3301      	adds	r3, #1
 800076e:	683a      	ldr	r2, [r7, #0]
 8000770:	4413      	add	r3, r2
 8000772:	b2ca      	uxtb	r2, r1
 8000774:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	685b      	ldr	r3, [r3, #4]
 800077a:	0c19      	lsrs	r1, r3, #16
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	3302      	adds	r3, #2
 8000780:	683a      	ldr	r2, [r7, #0]
 8000782:	4413      	add	r3, r2
 8000784:	b2ca      	uxtb	r2, r1
 8000786:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	685b      	ldr	r3, [r3, #4]
 800078c:	0e19      	lsrs	r1, r3, #24
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	3303      	adds	r3, #3
 8000792:	683a      	ldr	r2, [r7, #0]
 8000794:	4413      	add	r3, r2
 8000796:	b2ca      	uxtb	r2, r1
 8000798:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	3304      	adds	r3, #4
 800079e:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	6899      	ldr	r1, [r3, #8]
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	683a      	ldr	r2, [r7, #0]
 80007a8:	4413      	add	r3, r2
 80007aa:	b2ca      	uxtb	r2, r1
 80007ac:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	689b      	ldr	r3, [r3, #8]
 80007b2:	0a19      	lsrs	r1, r3, #8
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	3301      	adds	r3, #1
 80007b8:	683a      	ldr	r2, [r7, #0]
 80007ba:	4413      	add	r3, r2
 80007bc:	b2ca      	uxtb	r2, r1
 80007be:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	689b      	ldr	r3, [r3, #8]
 80007c4:	0c19      	lsrs	r1, r3, #16
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	3302      	adds	r3, #2
 80007ca:	683a      	ldr	r2, [r7, #0]
 80007cc:	4413      	add	r3, r2
 80007ce:	b2ca      	uxtb	r2, r1
 80007d0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	689b      	ldr	r3, [r3, #8]
 80007d6:	0e19      	lsrs	r1, r3, #24
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	3303      	adds	r3, #3
 80007dc:	683a      	ldr	r2, [r7, #0]
 80007de:	4413      	add	r3, r2
 80007e0:	b2ca      	uxtb	r2, r1
 80007e2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	3304      	adds	r3, #4
 80007e8:	60fb      	str	r3, [r7, #12]
      return offset;
 80007ea:	68fb      	ldr	r3, [r7, #12]
    }
 80007ec:	4618      	mov	r0, r3
 80007ee:	3714      	adds	r7, #20
 80007f0:	46bd      	mov	sp, r7
 80007f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f6:	4770      	bx	lr

080007f8 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80007f8:	b480      	push	{r7}
 80007fa:	b085      	sub	sp, #20
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
 8000800:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000802:	2300      	movs	r3, #0
 8000804:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	683a      	ldr	r2, [r7, #0]
 800080a:	4413      	add	r3, r2
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	461a      	mov	r2, r3
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	685a      	ldr	r2, [r3, #4]
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	3301      	adds	r3, #1
 800081c:	6839      	ldr	r1, [r7, #0]
 800081e:	440b      	add	r3, r1
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	021b      	lsls	r3, r3, #8
 8000824:	431a      	orrs	r2, r3
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	685a      	ldr	r2, [r3, #4]
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	3302      	adds	r3, #2
 8000832:	6839      	ldr	r1, [r7, #0]
 8000834:	440b      	add	r3, r1
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	041b      	lsls	r3, r3, #16
 800083a:	431a      	orrs	r2, r3
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	685a      	ldr	r2, [r3, #4]
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	3303      	adds	r3, #3
 8000848:	6839      	ldr	r1, [r7, #0]
 800084a:	440b      	add	r3, r1
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	061b      	lsls	r3, r3, #24
 8000850:	431a      	orrs	r2, r3
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	3304      	adds	r3, #4
 800085a:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	683a      	ldr	r2, [r7, #0]
 8000860:	4413      	add	r3, r2
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	461a      	mov	r2, r3
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	689a      	ldr	r2, [r3, #8]
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	3301      	adds	r3, #1
 8000872:	6839      	ldr	r1, [r7, #0]
 8000874:	440b      	add	r3, r1
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	021b      	lsls	r3, r3, #8
 800087a:	431a      	orrs	r2, r3
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	689a      	ldr	r2, [r3, #8]
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	3302      	adds	r3, #2
 8000888:	6839      	ldr	r1, [r7, #0]
 800088a:	440b      	add	r3, r1
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	041b      	lsls	r3, r3, #16
 8000890:	431a      	orrs	r2, r3
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	689a      	ldr	r2, [r3, #8]
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	3303      	adds	r3, #3
 800089e:	6839      	ldr	r1, [r7, #0]
 80008a0:	440b      	add	r3, r1
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	061b      	lsls	r3, r3, #24
 80008a6:	431a      	orrs	r2, r3
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	3304      	adds	r3, #4
 80008b0:	60fb      	str	r3, [r7, #12]
     return offset;
 80008b2:	68fb      	ldr	r3, [r7, #12]
    }
 80008b4:	4618      	mov	r0, r3
 80008b6:	3714      	adds	r7, #20
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr

080008c0 <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 80008c0:	b480      	push	{r7}
 80008c2:	b083      	sub	sp, #12
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
 80008c8:	4b03      	ldr	r3, [pc, #12]	@ (80008d8 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 80008ca:	4618      	mov	r0, r3
 80008cc:	370c      	adds	r7, #12
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	080054c4 	.word	0x080054c4

080008dc <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
 80008e4:	4b03      	ldr	r3, [pc, #12]	@ (80008f4 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 80008e6:	4618      	mov	r0, r3
 80008e8:	370c      	adds	r7, #12
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	080054d4 	.word	0x080054d4

080008f8 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	4618      	mov	r0, r3
 8000904:	f7ff fef8 	bl	80006f8 <_ZN3ros3MsgC1Ev>
 8000908:	4a0b      	ldr	r2, [pc, #44]	@ (8000938 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	601a      	str	r2, [r3, #0]
      topic_id(0),
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	2200      	movs	r2, #0
 8000912:	809a      	strh	r2, [r3, #4]
      topic_name(""),
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	4a09      	ldr	r2, [pc, #36]	@ (800093c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000918:	609a      	str	r2, [r3, #8]
      message_type(""),
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	4a07      	ldr	r2, [pc, #28]	@ (800093c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800091e:	60da      	str	r2, [r3, #12]
      md5sum(""),
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	4a06      	ldr	r2, [pc, #24]	@ (800093c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000924:	611a      	str	r2, [r3, #16]
      buffer_size(0)
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	2200      	movs	r2, #0
 800092a:	615a      	str	r2, [r3, #20]
    {
    }
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	4618      	mov	r0, r3
 8000930:	3708      	adds	r7, #8
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	080056ac 	.word	0x080056ac
 800093c:	080054f8 	.word	0x080054f8

08000940 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000940:	b580      	push	{r7, lr}
 8000942:	b088      	sub	sp, #32
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
 8000948:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800094a:	2300      	movs	r3, #0
 800094c:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	8899      	ldrh	r1, [r3, #4]
 8000952:	69fb      	ldr	r3, [r7, #28]
 8000954:	683a      	ldr	r2, [r7, #0]
 8000956:	4413      	add	r3, r2
 8000958:	b2ca      	uxtb	r2, r1
 800095a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	889b      	ldrh	r3, [r3, #4]
 8000960:	0a1b      	lsrs	r3, r3, #8
 8000962:	b299      	uxth	r1, r3
 8000964:	69fb      	ldr	r3, [r7, #28]
 8000966:	3301      	adds	r3, #1
 8000968:	683a      	ldr	r2, [r7, #0]
 800096a:	4413      	add	r3, r2
 800096c:	b2ca      	uxtb	r2, r1
 800096e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8000970:	69fb      	ldr	r3, [r7, #28]
 8000972:	3302      	adds	r3, #2
 8000974:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	689b      	ldr	r3, [r3, #8]
 800097a:	4618      	mov	r0, r3
 800097c:	f7ff fc2c 	bl	80001d8 <strlen>
 8000980:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8000982:	69fb      	ldr	r3, [r7, #28]
 8000984:	683a      	ldr	r2, [r7, #0]
 8000986:	4413      	add	r3, r2
 8000988:	69b9      	ldr	r1, [r7, #24]
 800098a:	4618      	mov	r0, r3
 800098c:	f001 f804 	bl	8001998 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000990:	69fb      	ldr	r3, [r7, #28]
 8000992:	3304      	adds	r3, #4
 8000994:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8000996:	69fb      	ldr	r3, [r7, #28]
 8000998:	683a      	ldr	r2, [r7, #0]
 800099a:	18d0      	adds	r0, r2, r3
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	689b      	ldr	r3, [r3, #8]
 80009a0:	69ba      	ldr	r2, [r7, #24]
 80009a2:	4619      	mov	r1, r3
 80009a4:	f004 fc64 	bl	8005270 <memcpy>
      offset += length_topic_name;
 80009a8:	69fa      	ldr	r2, [r7, #28]
 80009aa:	69bb      	ldr	r3, [r7, #24]
 80009ac:	4413      	add	r3, r2
 80009ae:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	68db      	ldr	r3, [r3, #12]
 80009b4:	4618      	mov	r0, r3
 80009b6:	f7ff fc0f 	bl	80001d8 <strlen>
 80009ba:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 80009bc:	69fb      	ldr	r3, [r7, #28]
 80009be:	683a      	ldr	r2, [r7, #0]
 80009c0:	4413      	add	r3, r2
 80009c2:	6979      	ldr	r1, [r7, #20]
 80009c4:	4618      	mov	r0, r3
 80009c6:	f000 ffe7 	bl	8001998 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80009ca:	69fb      	ldr	r3, [r7, #28]
 80009cc:	3304      	adds	r3, #4
 80009ce:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 80009d0:	69fb      	ldr	r3, [r7, #28]
 80009d2:	683a      	ldr	r2, [r7, #0]
 80009d4:	18d0      	adds	r0, r2, r3
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	68db      	ldr	r3, [r3, #12]
 80009da:	697a      	ldr	r2, [r7, #20]
 80009dc:	4619      	mov	r1, r3
 80009de:	f004 fc47 	bl	8005270 <memcpy>
      offset += length_message_type;
 80009e2:	69fa      	ldr	r2, [r7, #28]
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	4413      	add	r3, r2
 80009e8:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	691b      	ldr	r3, [r3, #16]
 80009ee:	4618      	mov	r0, r3
 80009f0:	f7ff fbf2 	bl	80001d8 <strlen>
 80009f4:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 80009f6:	69fb      	ldr	r3, [r7, #28]
 80009f8:	683a      	ldr	r2, [r7, #0]
 80009fa:	4413      	add	r3, r2
 80009fc:	6939      	ldr	r1, [r7, #16]
 80009fe:	4618      	mov	r0, r3
 8000a00:	f000 ffca 	bl	8001998 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000a04:	69fb      	ldr	r3, [r7, #28]
 8000a06:	3304      	adds	r3, #4
 8000a08:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8000a0a:	69fb      	ldr	r3, [r7, #28]
 8000a0c:	683a      	ldr	r2, [r7, #0]
 8000a0e:	18d0      	adds	r0, r2, r3
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	691b      	ldr	r3, [r3, #16]
 8000a14:	693a      	ldr	r2, [r7, #16]
 8000a16:	4619      	mov	r1, r3
 8000a18:	f004 fc2a 	bl	8005270 <memcpy>
      offset += length_md5sum;
 8000a1c:	69fa      	ldr	r2, [r7, #28]
 8000a1e:	693b      	ldr	r3, [r7, #16]
 8000a20:	4413      	add	r3, r2
 8000a22:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	695b      	ldr	r3, [r3, #20]
 8000a28:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8000a2a:	68f9      	ldr	r1, [r7, #12]
 8000a2c:	69fb      	ldr	r3, [r7, #28]
 8000a2e:	683a      	ldr	r2, [r7, #0]
 8000a30:	4413      	add	r3, r2
 8000a32:	b2ca      	uxtb	r2, r1
 8000a34:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	0a19      	lsrs	r1, r3, #8
 8000a3a:	69fb      	ldr	r3, [r7, #28]
 8000a3c:	3301      	adds	r3, #1
 8000a3e:	683a      	ldr	r2, [r7, #0]
 8000a40:	4413      	add	r3, r2
 8000a42:	b2ca      	uxtb	r2, r1
 8000a44:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	0c19      	lsrs	r1, r3, #16
 8000a4a:	69fb      	ldr	r3, [r7, #28]
 8000a4c:	3302      	adds	r3, #2
 8000a4e:	683a      	ldr	r2, [r7, #0]
 8000a50:	4413      	add	r3, r2
 8000a52:	b2ca      	uxtb	r2, r1
 8000a54:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	0e19      	lsrs	r1, r3, #24
 8000a5a:	69fb      	ldr	r3, [r7, #28]
 8000a5c:	3303      	adds	r3, #3
 8000a5e:	683a      	ldr	r2, [r7, #0]
 8000a60:	4413      	add	r3, r2
 8000a62:	b2ca      	uxtb	r2, r1
 8000a64:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8000a66:	69fb      	ldr	r3, [r7, #28]
 8000a68:	3304      	adds	r3, #4
 8000a6a:	61fb      	str	r3, [r7, #28]
      return offset;
 8000a6c:	69fb      	ldr	r3, [r7, #28]
    }
 8000a6e:	4618      	mov	r0, r3
 8000a70:	3720      	adds	r7, #32
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}

08000a76 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8000a76:	b580      	push	{r7, lr}
 8000a78:	b08a      	sub	sp, #40	@ 0x28
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	6078      	str	r0, [r7, #4]
 8000a7e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000a80:	2300      	movs	r3, #0
 8000a82:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8000a84:	69bb      	ldr	r3, [r7, #24]
 8000a86:	683a      	ldr	r2, [r7, #0]
 8000a88:	4413      	add	r3, r2
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	889b      	ldrh	r3, [r3, #4]
 8000a96:	b21a      	sxth	r2, r3
 8000a98:	69bb      	ldr	r3, [r7, #24]
 8000a9a:	3301      	adds	r3, #1
 8000a9c:	6839      	ldr	r1, [r7, #0]
 8000a9e:	440b      	add	r3, r1
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	021b      	lsls	r3, r3, #8
 8000aa4:	b21b      	sxth	r3, r3
 8000aa6:	4313      	orrs	r3, r2
 8000aa8:	b21b      	sxth	r3, r3
 8000aaa:	b29a      	uxth	r2, r3
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8000ab0:	69bb      	ldr	r3, [r7, #24]
 8000ab2:	3302      	adds	r3, #2
 8000ab4:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8000ab6:	69bb      	ldr	r3, [r7, #24]
 8000ab8:	683a      	ldr	r2, [r7, #0]
 8000aba:	441a      	add	r2, r3
 8000abc:	f107 0314 	add.w	r3, r7, #20
 8000ac0:	4611      	mov	r1, r2
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f000 ff87 	bl	80019d6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000ac8:	69bb      	ldr	r3, [r7, #24]
 8000aca:	3304      	adds	r3, #4
 8000acc:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8000ace:	69bb      	ldr	r3, [r7, #24]
 8000ad0:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ad2:	e00b      	b.n	8000aec <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x76>
          inbuffer[k-1]=inbuffer[k];
 8000ad4:	683a      	ldr	r2, [r7, #0]
 8000ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ad8:	441a      	add	r2, r3
 8000ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000adc:	3b01      	subs	r3, #1
 8000ade:	6839      	ldr	r1, [r7, #0]
 8000ae0:	440b      	add	r3, r1
 8000ae2:	7812      	ldrb	r2, [r2, #0]
 8000ae4:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8000ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ae8:	3301      	adds	r3, #1
 8000aea:	627b      	str	r3, [r7, #36]	@ 0x24
 8000aec:	69ba      	ldr	r2, [r7, #24]
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	4413      	add	r3, r2
 8000af2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000af4:	429a      	cmp	r2, r3
 8000af6:	d3ed      	bcc.n	8000ad4 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5e>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8000af8:	69ba      	ldr	r2, [r7, #24]
 8000afa:	697b      	ldr	r3, [r7, #20]
 8000afc:	4413      	add	r3, r2
 8000afe:	3b01      	subs	r3, #1
 8000b00:	683a      	ldr	r2, [r7, #0]
 8000b02:	4413      	add	r3, r2
 8000b04:	2200      	movs	r2, #0
 8000b06:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8000b08:	69bb      	ldr	r3, [r7, #24]
 8000b0a:	3b01      	subs	r3, #1
 8000b0c:	683a      	ldr	r2, [r7, #0]
 8000b0e:	441a      	add	r2, r3
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8000b14:	69ba      	ldr	r2, [r7, #24]
 8000b16:	697b      	ldr	r3, [r7, #20]
 8000b18:	4413      	add	r3, r2
 8000b1a:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8000b1c:	69bb      	ldr	r3, [r7, #24]
 8000b1e:	683a      	ldr	r2, [r7, #0]
 8000b20:	441a      	add	r2, r3
 8000b22:	f107 0310 	add.w	r3, r7, #16
 8000b26:	4611      	mov	r1, r2
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f000 ff54 	bl	80019d6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000b2e:	69bb      	ldr	r3, [r7, #24]
 8000b30:	3304      	adds	r3, #4
 8000b32:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8000b34:	69bb      	ldr	r3, [r7, #24]
 8000b36:	623b      	str	r3, [r7, #32]
 8000b38:	e00b      	b.n	8000b52 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xdc>
          inbuffer[k-1]=inbuffer[k];
 8000b3a:	683a      	ldr	r2, [r7, #0]
 8000b3c:	6a3b      	ldr	r3, [r7, #32]
 8000b3e:	441a      	add	r2, r3
 8000b40:	6a3b      	ldr	r3, [r7, #32]
 8000b42:	3b01      	subs	r3, #1
 8000b44:	6839      	ldr	r1, [r7, #0]
 8000b46:	440b      	add	r3, r1
 8000b48:	7812      	ldrb	r2, [r2, #0]
 8000b4a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8000b4c:	6a3b      	ldr	r3, [r7, #32]
 8000b4e:	3301      	adds	r3, #1
 8000b50:	623b      	str	r3, [r7, #32]
 8000b52:	69ba      	ldr	r2, [r7, #24]
 8000b54:	693b      	ldr	r3, [r7, #16]
 8000b56:	4413      	add	r3, r2
 8000b58:	6a3a      	ldr	r2, [r7, #32]
 8000b5a:	429a      	cmp	r2, r3
 8000b5c:	d3ed      	bcc.n	8000b3a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc4>
      }
      inbuffer[offset+length_message_type-1]=0;
 8000b5e:	69ba      	ldr	r2, [r7, #24]
 8000b60:	693b      	ldr	r3, [r7, #16]
 8000b62:	4413      	add	r3, r2
 8000b64:	3b01      	subs	r3, #1
 8000b66:	683a      	ldr	r2, [r7, #0]
 8000b68:	4413      	add	r3, r2
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8000b6e:	69bb      	ldr	r3, [r7, #24]
 8000b70:	3b01      	subs	r3, #1
 8000b72:	683a      	ldr	r2, [r7, #0]
 8000b74:	441a      	add	r2, r3
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8000b7a:	69ba      	ldr	r2, [r7, #24]
 8000b7c:	693b      	ldr	r3, [r7, #16]
 8000b7e:	4413      	add	r3, r2
 8000b80:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8000b82:	69bb      	ldr	r3, [r7, #24]
 8000b84:	683a      	ldr	r2, [r7, #0]
 8000b86:	441a      	add	r2, r3
 8000b88:	f107 030c 	add.w	r3, r7, #12
 8000b8c:	4611      	mov	r1, r2
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f000 ff21 	bl	80019d6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000b94:	69bb      	ldr	r3, [r7, #24]
 8000b96:	3304      	adds	r3, #4
 8000b98:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8000b9a:	69bb      	ldr	r3, [r7, #24]
 8000b9c:	61fb      	str	r3, [r7, #28]
 8000b9e:	e00b      	b.n	8000bb8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x142>
          inbuffer[k-1]=inbuffer[k];
 8000ba0:	683a      	ldr	r2, [r7, #0]
 8000ba2:	69fb      	ldr	r3, [r7, #28]
 8000ba4:	441a      	add	r2, r3
 8000ba6:	69fb      	ldr	r3, [r7, #28]
 8000ba8:	3b01      	subs	r3, #1
 8000baa:	6839      	ldr	r1, [r7, #0]
 8000bac:	440b      	add	r3, r1
 8000bae:	7812      	ldrb	r2, [r2, #0]
 8000bb0:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8000bb2:	69fb      	ldr	r3, [r7, #28]
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	61fb      	str	r3, [r7, #28]
 8000bb8:	69ba      	ldr	r2, [r7, #24]
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	4413      	add	r3, r2
 8000bbe:	69fa      	ldr	r2, [r7, #28]
 8000bc0:	429a      	cmp	r2, r3
 8000bc2:	d3ed      	bcc.n	8000ba0 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x12a>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8000bc4:	69ba      	ldr	r2, [r7, #24]
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	4413      	add	r3, r2
 8000bca:	3b01      	subs	r3, #1
 8000bcc:	683a      	ldr	r2, [r7, #0]
 8000bce:	4413      	add	r3, r2
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8000bd4:	69bb      	ldr	r3, [r7, #24]
 8000bd6:	3b01      	subs	r3, #1
 8000bd8:	683a      	ldr	r2, [r7, #0]
 8000bda:	441a      	add	r2, r3
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8000be0:	69ba      	ldr	r2, [r7, #24]
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	4413      	add	r3, r2
 8000be6:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8000be8:	2300      	movs	r3, #0
 8000bea:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000bec:	68bb      	ldr	r3, [r7, #8]
 8000bee:	69ba      	ldr	r2, [r7, #24]
 8000bf0:	6839      	ldr	r1, [r7, #0]
 8000bf2:	440a      	add	r2, r1
 8000bf4:	7812      	ldrb	r2, [r2, #0]
 8000bf6:	4313      	orrs	r3, r2
 8000bf8:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000bfa:	68ba      	ldr	r2, [r7, #8]
 8000bfc:	69bb      	ldr	r3, [r7, #24]
 8000bfe:	3301      	adds	r3, #1
 8000c00:	6839      	ldr	r1, [r7, #0]
 8000c02:	440b      	add	r3, r1
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	021b      	lsls	r3, r3, #8
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000c0c:	68ba      	ldr	r2, [r7, #8]
 8000c0e:	69bb      	ldr	r3, [r7, #24]
 8000c10:	3302      	adds	r3, #2
 8000c12:	6839      	ldr	r1, [r7, #0]
 8000c14:	440b      	add	r3, r1
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	041b      	lsls	r3, r3, #16
 8000c1a:	4313      	orrs	r3, r2
 8000c1c:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000c1e:	68ba      	ldr	r2, [r7, #8]
 8000c20:	69bb      	ldr	r3, [r7, #24]
 8000c22:	3303      	adds	r3, #3
 8000c24:	6839      	ldr	r1, [r7, #0]
 8000c26:	440b      	add	r3, r1
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	061b      	lsls	r3, r3, #24
 8000c2c:	4313      	orrs	r3, r2
 8000c2e:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8000c30:	68ba      	ldr	r2, [r7, #8]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8000c36:	69bb      	ldr	r3, [r7, #24]
 8000c38:	3304      	adds	r3, #4
 8000c3a:	61bb      	str	r3, [r7, #24]
     return offset;
 8000c3c:	69bb      	ldr	r3, [r7, #24]
    }
 8000c3e:	4618      	mov	r0, r3
 8000c40:	3728      	adds	r7, #40	@ 0x28
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
	...

08000c48 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
 8000c50:	4b03      	ldr	r3, [pc, #12]	@ (8000c60 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8000c52:	4618      	mov	r0, r3
 8000c54:	370c      	adds	r7, #12
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	080054fc 	.word	0x080054fc

08000c64 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
 8000c6c:	4b03      	ldr	r3, [pc, #12]	@ (8000c7c <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8000c6e:	4618      	mov	r0, r3
 8000c70:	370c      	adds	r7, #12
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	08005518 	.word	0x08005518

08000c80 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f7ff fd34 	bl	80006f8 <_ZN3ros3MsgC1Ev>
 8000c90:	4a06      	ldr	r2, [pc, #24]	@ (8000cac <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	601a      	str	r2, [r3, #0]
      level(0),
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	2200      	movs	r2, #0
 8000c9a:	711a      	strb	r2, [r3, #4]
      msg("")
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	4a04      	ldr	r2, [pc, #16]	@ (8000cb0 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8000ca0:	609a      	str	r2, [r3, #8]
    {
    }
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	3708      	adds	r7, #8
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	08005694 	.word	0x08005694
 8000cb0:	080054f8 	.word	0x080054f8

08000cb4 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b084      	sub	sp, #16
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
 8000cbc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	683a      	ldr	r2, [r7, #0]
 8000cc6:	4413      	add	r3, r2
 8000cc8:	687a      	ldr	r2, [r7, #4]
 8000cca:	7912      	ldrb	r2, [r2, #4]
 8000ccc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	3301      	adds	r3, #1
 8000cd2:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	689b      	ldr	r3, [r3, #8]
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f7ff fa7d 	bl	80001d8 <strlen>
 8000cde:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	683a      	ldr	r2, [r7, #0]
 8000ce4:	4413      	add	r3, r2
 8000ce6:	68b9      	ldr	r1, [r7, #8]
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f000 fe55 	bl	8001998 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	3304      	adds	r3, #4
 8000cf2:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	683a      	ldr	r2, [r7, #0]
 8000cf8:	18d0      	adds	r0, r2, r3
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	689b      	ldr	r3, [r3, #8]
 8000cfe:	68ba      	ldr	r2, [r7, #8]
 8000d00:	4619      	mov	r1, r3
 8000d02:	f004 fab5 	bl	8005270 <memcpy>
      offset += length_msg;
 8000d06:	68fa      	ldr	r2, [r7, #12]
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	4413      	add	r3, r2
 8000d0c:	60fb      	str	r3, [r7, #12]
      return offset;
 8000d0e:	68fb      	ldr	r3, [r7, #12]
    }
 8000d10:	4618      	mov	r0, r3
 8000d12:	3710      	adds	r7, #16
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b086      	sub	sp, #24
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
 8000d20:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000d22:	2300      	movs	r3, #0
 8000d24:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8000d26:	693b      	ldr	r3, [r7, #16]
 8000d28:	683a      	ldr	r2, [r7, #0]
 8000d2a:	4413      	add	r3, r2
 8000d2c:	781a      	ldrb	r2, [r3, #0]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8000d32:	693b      	ldr	r3, [r7, #16]
 8000d34:	3301      	adds	r3, #1
 8000d36:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8000d38:	693b      	ldr	r3, [r7, #16]
 8000d3a:	683a      	ldr	r2, [r7, #0]
 8000d3c:	441a      	add	r2, r3
 8000d3e:	f107 030c 	add.w	r3, r7, #12
 8000d42:	4611      	mov	r1, r2
 8000d44:	4618      	mov	r0, r3
 8000d46:	f000 fe46 	bl	80019d6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000d4a:	693b      	ldr	r3, [r7, #16]
 8000d4c:	3304      	adds	r3, #4
 8000d4e:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8000d50:	693b      	ldr	r3, [r7, #16]
 8000d52:	617b      	str	r3, [r7, #20]
 8000d54:	e00b      	b.n	8000d6e <_ZN14rosserial_msgs3Log11deserializeEPh+0x56>
          inbuffer[k-1]=inbuffer[k];
 8000d56:	683a      	ldr	r2, [r7, #0]
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	441a      	add	r2, r3
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	3b01      	subs	r3, #1
 8000d60:	6839      	ldr	r1, [r7, #0]
 8000d62:	440b      	add	r3, r1
 8000d64:	7812      	ldrb	r2, [r2, #0]
 8000d66:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	617b      	str	r3, [r7, #20]
 8000d6e:	693a      	ldr	r2, [r7, #16]
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	4413      	add	r3, r2
 8000d74:	697a      	ldr	r2, [r7, #20]
 8000d76:	429a      	cmp	r2, r3
 8000d78:	d3ed      	bcc.n	8000d56 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3e>
      }
      inbuffer[offset+length_msg-1]=0;
 8000d7a:	693a      	ldr	r2, [r7, #16]
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	4413      	add	r3, r2
 8000d80:	3b01      	subs	r3, #1
 8000d82:	683a      	ldr	r2, [r7, #0]
 8000d84:	4413      	add	r3, r2
 8000d86:	2200      	movs	r2, #0
 8000d88:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8000d8a:	693b      	ldr	r3, [r7, #16]
 8000d8c:	3b01      	subs	r3, #1
 8000d8e:	683a      	ldr	r2, [r7, #0]
 8000d90:	441a      	add	r2, r3
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8000d96:	693a      	ldr	r2, [r7, #16]
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	4413      	add	r3, r2
 8000d9c:	613b      	str	r3, [r7, #16]
     return offset;
 8000d9e:	693b      	ldr	r3, [r7, #16]
    }
 8000da0:	4618      	mov	r0, r3
 8000da2:	3718      	adds	r7, #24
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
 8000db0:	4b03      	ldr	r3, [pc, #12]	@ (8000dc0 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8000db2:	4618      	mov	r0, r3
 8000db4:	370c      	adds	r7, #12
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	0800553c 	.word	0x0800553c

08000dc4 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	4b03      	ldr	r3, [pc, #12]	@ (8000ddc <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8000dce:	4618      	mov	r0, r3
 8000dd0:	370c      	adds	r7, #12
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	08005550 	.word	0x08005550

08000de0 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff fc84 	bl	80006f8 <_ZN3ros3MsgC1Ev>
 8000df0:	4a11      	ldr	r2, [pc, #68]	@ (8000e38 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	601a      	str	r2, [r3, #0]
      ints_length(0), st_ints(), ints(nullptr),
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2200      	movs	r2, #0
 8000dfa:	605a      	str	r2, [r3, #4]
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	2200      	movs	r2, #0
 8000e00:	609a      	str	r2, [r3, #8]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2200      	movs	r2, #0
 8000e06:	60da      	str	r2, [r3, #12]
      floats_length(0), st_floats(), floats(nullptr),
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	611a      	str	r2, [r3, #16]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	f04f 0200 	mov.w	r2, #0
 8000e14:	615a      	str	r2, [r3, #20]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2200      	movs	r2, #0
 8000e1a:	619a      	str	r2, [r3, #24]
      strings_length(0), st_strings(), strings(nullptr)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	2200      	movs	r2, #0
 8000e20:	61da      	str	r2, [r3, #28]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	2200      	movs	r2, #0
 8000e26:	621a      	str	r2, [r3, #32]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	625a      	str	r2, [r3, #36]	@ 0x24
    {
    }
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4618      	mov	r0, r3
 8000e32:	3708      	adds	r7, #8
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	0800567c 	.word	0x0800567c

08000e3c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b08a      	sub	sp, #40	@ 0x28
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
 8000e44:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000e46:	2300      	movs	r3, #0
 8000e48:	627b      	str	r3, [r7, #36]	@ 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	6859      	ldr	r1, [r3, #4]
 8000e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e50:	683a      	ldr	r2, [r7, #0]
 8000e52:	4413      	add	r3, r2
 8000e54:	b2ca      	uxtb	r2, r1
 8000e56:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	0a19      	lsrs	r1, r3, #8
 8000e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e60:	3301      	adds	r3, #1
 8000e62:	683a      	ldr	r2, [r7, #0]
 8000e64:	4413      	add	r3, r2
 8000e66:	b2ca      	uxtb	r2, r1
 8000e68:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	0c19      	lsrs	r1, r3, #16
 8000e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e72:	3302      	adds	r3, #2
 8000e74:	683a      	ldr	r2, [r7, #0]
 8000e76:	4413      	add	r3, r2
 8000e78:	b2ca      	uxtb	r2, r1
 8000e7a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	0e19      	lsrs	r1, r3, #24
 8000e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e84:	3303      	adds	r3, #3
 8000e86:	683a      	ldr	r2, [r7, #0]
 8000e88:	4413      	add	r3, r2
 8000e8a:	b2ca      	uxtb	r2, r1
 8000e8c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8000e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e90:	3304      	adds	r3, #4
 8000e92:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8000e94:	2300      	movs	r3, #0
 8000e96:	623b      	str	r3, [r7, #32]
 8000e98:	e02a      	b.n	8000ef0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xb4>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	68da      	ldr	r2, [r3, #12]
 8000e9e:	6a3b      	ldr	r3, [r7, #32]
 8000ea0:	009b      	lsls	r3, r3, #2
 8000ea2:	4413      	add	r3, r2
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8000ea8:	6939      	ldr	r1, [r7, #16]
 8000eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eac:	683a      	ldr	r2, [r7, #0]
 8000eae:	4413      	add	r3, r2
 8000eb0:	b2ca      	uxtb	r2, r1
 8000eb2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8000eb4:	693b      	ldr	r3, [r7, #16]
 8000eb6:	0a19      	lsrs	r1, r3, #8
 8000eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eba:	3301      	adds	r3, #1
 8000ebc:	683a      	ldr	r2, [r7, #0]
 8000ebe:	4413      	add	r3, r2
 8000ec0:	b2ca      	uxtb	r2, r1
 8000ec2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8000ec4:	693b      	ldr	r3, [r7, #16]
 8000ec6:	0c19      	lsrs	r1, r3, #16
 8000ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eca:	3302      	adds	r3, #2
 8000ecc:	683a      	ldr	r2, [r7, #0]
 8000ece:	4413      	add	r3, r2
 8000ed0:	b2ca      	uxtb	r2, r1
 8000ed2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8000ed4:	693b      	ldr	r3, [r7, #16]
 8000ed6:	0e19      	lsrs	r1, r3, #24
 8000ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eda:	3303      	adds	r3, #3
 8000edc:	683a      	ldr	r2, [r7, #0]
 8000ede:	4413      	add	r3, r2
 8000ee0:	b2ca      	uxtb	r2, r1
 8000ee2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8000ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ee6:	3304      	adds	r3, #4
 8000ee8:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8000eea:	6a3b      	ldr	r3, [r7, #32]
 8000eec:	3301      	adds	r3, #1
 8000eee:	623b      	str	r3, [r7, #32]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	6a3a      	ldr	r2, [r7, #32]
 8000ef6:	429a      	cmp	r2, r3
 8000ef8:	d3cf      	bcc.n	8000e9a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6919      	ldr	r1, [r3, #16]
 8000efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f00:	683a      	ldr	r2, [r7, #0]
 8000f02:	4413      	add	r3, r2
 8000f04:	b2ca      	uxtb	r2, r1
 8000f06:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	691b      	ldr	r3, [r3, #16]
 8000f0c:	0a19      	lsrs	r1, r3, #8
 8000f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f10:	3301      	adds	r3, #1
 8000f12:	683a      	ldr	r2, [r7, #0]
 8000f14:	4413      	add	r3, r2
 8000f16:	b2ca      	uxtb	r2, r1
 8000f18:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	691b      	ldr	r3, [r3, #16]
 8000f1e:	0c19      	lsrs	r1, r3, #16
 8000f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f22:	3302      	adds	r3, #2
 8000f24:	683a      	ldr	r2, [r7, #0]
 8000f26:	4413      	add	r3, r2
 8000f28:	b2ca      	uxtb	r2, r1
 8000f2a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	691b      	ldr	r3, [r3, #16]
 8000f30:	0e19      	lsrs	r1, r3, #24
 8000f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f34:	3303      	adds	r3, #3
 8000f36:	683a      	ldr	r2, [r7, #0]
 8000f38:	4413      	add	r3, r2
 8000f3a:	b2ca      	uxtb	r2, r1
 8000f3c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8000f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f40:	3304      	adds	r3, #4
 8000f42:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8000f44:	2300      	movs	r3, #0
 8000f46:	61fb      	str	r3, [r7, #28]
 8000f48:	e02a      	b.n	8000fa0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x164>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	699a      	ldr	r2, [r3, #24]
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	009b      	lsls	r3, r3, #2
 8000f52:	4413      	add	r3, r2
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8000f58:	68f9      	ldr	r1, [r7, #12]
 8000f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f5c:	683a      	ldr	r2, [r7, #0]
 8000f5e:	4413      	add	r3, r2
 8000f60:	b2ca      	uxtb	r2, r1
 8000f62:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	0a19      	lsrs	r1, r3, #8
 8000f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	683a      	ldr	r2, [r7, #0]
 8000f6e:	4413      	add	r3, r2
 8000f70:	b2ca      	uxtb	r2, r1
 8000f72:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	0c19      	lsrs	r1, r3, #16
 8000f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f7a:	3302      	adds	r3, #2
 8000f7c:	683a      	ldr	r2, [r7, #0]
 8000f7e:	4413      	add	r3, r2
 8000f80:	b2ca      	uxtb	r2, r1
 8000f82:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	0e19      	lsrs	r1, r3, #24
 8000f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f8a:	3303      	adds	r3, #3
 8000f8c:	683a      	ldr	r2, [r7, #0]
 8000f8e:	4413      	add	r3, r2
 8000f90:	b2ca      	uxtb	r2, r1
 8000f92:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8000f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f96:	3304      	adds	r3, #4
 8000f98:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	61fb      	str	r3, [r7, #28]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	691b      	ldr	r3, [r3, #16]
 8000fa4:	69fa      	ldr	r2, [r7, #28]
 8000fa6:	429a      	cmp	r2, r3
 8000fa8:	d3cf      	bcc.n	8000f4a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10e>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	69d9      	ldr	r1, [r3, #28]
 8000fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fb0:	683a      	ldr	r2, [r7, #0]
 8000fb2:	4413      	add	r3, r2
 8000fb4:	b2ca      	uxtb	r2, r1
 8000fb6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	69db      	ldr	r3, [r3, #28]
 8000fbc:	0a19      	lsrs	r1, r3, #8
 8000fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	683a      	ldr	r2, [r7, #0]
 8000fc4:	4413      	add	r3, r2
 8000fc6:	b2ca      	uxtb	r2, r1
 8000fc8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	69db      	ldr	r3, [r3, #28]
 8000fce:	0c19      	lsrs	r1, r3, #16
 8000fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fd2:	3302      	adds	r3, #2
 8000fd4:	683a      	ldr	r2, [r7, #0]
 8000fd6:	4413      	add	r3, r2
 8000fd8:	b2ca      	uxtb	r2, r1
 8000fda:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	69db      	ldr	r3, [r3, #28]
 8000fe0:	0e19      	lsrs	r1, r3, #24
 8000fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fe4:	3303      	adds	r3, #3
 8000fe6:	683a      	ldr	r2, [r7, #0]
 8000fe8:	4413      	add	r3, r2
 8000fea:	b2ca      	uxtb	r2, r1
 8000fec:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8000fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ff0:	3304      	adds	r3, #4
 8000ff2:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	61bb      	str	r3, [r7, #24]
 8000ff8:	e027      	b.n	800104a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x20e>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000ffe:	69bb      	ldr	r3, [r7, #24]
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	4413      	add	r3, r2
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4618      	mov	r0, r3
 8001008:	f7ff f8e6 	bl	80001d8 <strlen>
 800100c:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 800100e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001010:	683a      	ldr	r2, [r7, #0]
 8001012:	4413      	add	r3, r2
 8001014:	6979      	ldr	r1, [r7, #20]
 8001016:	4618      	mov	r0, r3
 8001018:	f000 fcbe 	bl	8001998 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800101c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800101e:	3304      	adds	r3, #4
 8001020:	627b      	str	r3, [r7, #36]	@ 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8001022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001024:	683a      	ldr	r2, [r7, #0]
 8001026:	18d0      	adds	r0, r2, r3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800102c:	69bb      	ldr	r3, [r7, #24]
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	4413      	add	r3, r2
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	697a      	ldr	r2, [r7, #20]
 8001036:	4619      	mov	r1, r3
 8001038:	f004 f91a 	bl	8005270 <memcpy>
      offset += length_stringsi;
 800103c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	4413      	add	r3, r2
 8001042:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001044:	69bb      	ldr	r3, [r7, #24]
 8001046:	3301      	adds	r3, #1
 8001048:	61bb      	str	r3, [r7, #24]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	69db      	ldr	r3, [r3, #28]
 800104e:	69ba      	ldr	r2, [r7, #24]
 8001050:	429a      	cmp	r2, r3
 8001052:	d3d2      	bcc.n	8000ffa <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1be>
      }
      return offset;
 8001054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8001056:	4618      	mov	r0, r3
 8001058:	3728      	adds	r7, #40	@ 0x28
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800105e:	b580      	push	{r7, lr}
 8001060:	b08e      	sub	sp, #56	@ 0x38
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
 8001066:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001068:	2300      	movs	r3, #0
 800106a:	637b      	str	r3, [r7, #52]	@ 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800106c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800106e:	683a      	ldr	r2, [r7, #0]
 8001070:	4413      	add	r3, r2
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001076:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001078:	3301      	adds	r3, #1
 800107a:	683a      	ldr	r2, [r7, #0]
 800107c:	4413      	add	r3, r2
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	021b      	lsls	r3, r3, #8
 8001082:	6a3a      	ldr	r2, [r7, #32]
 8001084:	4313      	orrs	r3, r2
 8001086:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001088:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800108a:	3302      	adds	r3, #2
 800108c:	683a      	ldr	r2, [r7, #0]
 800108e:	4413      	add	r3, r2
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	041b      	lsls	r3, r3, #16
 8001094:	6a3a      	ldr	r2, [r7, #32]
 8001096:	4313      	orrs	r3, r2
 8001098:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800109a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800109c:	3303      	adds	r3, #3
 800109e:	683a      	ldr	r2, [r7, #0]
 80010a0:	4413      	add	r3, r2
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	061b      	lsls	r3, r3, #24
 80010a6:	6a3a      	ldr	r2, [r7, #32]
 80010a8:	4313      	orrs	r3, r2
 80010aa:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 80010ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010ae:	3304      	adds	r3, #4
 80010b0:	637b      	str	r3, [r7, #52]	@ 0x34
      if(ints_lengthT > ints_length)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	6a3a      	ldr	r2, [r7, #32]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d90a      	bls.n	80010d2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	68da      	ldr	r2, [r3, #12]
 80010c0:	6a3b      	ldr	r3, [r7, #32]
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	4619      	mov	r1, r3
 80010c6:	4610      	mov	r0, r2
 80010c8:	f004 f868 	bl	800519c <realloc>
 80010cc:	4602      	mov	r2, r0
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6a3a      	ldr	r2, [r7, #32]
 80010d6:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 80010d8:	2300      	movs	r3, #0
 80010da:	633b      	str	r3, [r7, #48]	@ 0x30
 80010dc:	e035      	b.n	800114a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xec>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 80010de:	2300      	movs	r3, #0
 80010e0:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80010e6:	6839      	ldr	r1, [r7, #0]
 80010e8:	440a      	add	r2, r1
 80010ea:	7812      	ldrb	r2, [r2, #0]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80010f0:	697a      	ldr	r2, [r7, #20]
 80010f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010f4:	3301      	adds	r3, #1
 80010f6:	6839      	ldr	r1, [r7, #0]
 80010f8:	440b      	add	r3, r1
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	021b      	lsls	r3, r3, #8
 80010fe:	4313      	orrs	r3, r2
 8001100:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001102:	697a      	ldr	r2, [r7, #20]
 8001104:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001106:	3302      	adds	r3, #2
 8001108:	6839      	ldr	r1, [r7, #0]
 800110a:	440b      	add	r3, r1
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	041b      	lsls	r3, r3, #16
 8001110:	4313      	orrs	r3, r2
 8001112:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001114:	697a      	ldr	r2, [r7, #20]
 8001116:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001118:	3303      	adds	r3, #3
 800111a:	6839      	ldr	r1, [r7, #0]
 800111c:	440b      	add	r3, r1
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	061b      	lsls	r3, r3, #24
 8001122:	4313      	orrs	r3, r2
 8001124:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8001126:	697a      	ldr	r2, [r7, #20]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 800112c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800112e:	3304      	adds	r3, #4
 8001130:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	68da      	ldr	r2, [r3, #12]
 8001136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	4413      	add	r3, r2
 800113c:	687a      	ldr	r2, [r7, #4]
 800113e:	3208      	adds	r2, #8
 8001140:	6812      	ldr	r2, [r2, #0]
 8001142:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8001144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001146:	3301      	adds	r3, #1
 8001148:	633b      	str	r3, [r7, #48]	@ 0x30
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001150:	429a      	cmp	r2, r3
 8001152:	d3c4      	bcc.n	80010de <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x80>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001154:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001156:	683a      	ldr	r2, [r7, #0]
 8001158:	4413      	add	r3, r2
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800115e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001160:	3301      	adds	r3, #1
 8001162:	683a      	ldr	r2, [r7, #0]
 8001164:	4413      	add	r3, r2
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	021b      	lsls	r3, r3, #8
 800116a:	69fa      	ldr	r2, [r7, #28]
 800116c:	4313      	orrs	r3, r2
 800116e:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001170:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001172:	3302      	adds	r3, #2
 8001174:	683a      	ldr	r2, [r7, #0]
 8001176:	4413      	add	r3, r2
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	041b      	lsls	r3, r3, #16
 800117c:	69fa      	ldr	r2, [r7, #28]
 800117e:	4313      	orrs	r3, r2
 8001180:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001182:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001184:	3303      	adds	r3, #3
 8001186:	683a      	ldr	r2, [r7, #0]
 8001188:	4413      	add	r3, r2
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	061b      	lsls	r3, r3, #24
 800118e:	69fa      	ldr	r2, [r7, #28]
 8001190:	4313      	orrs	r3, r2
 8001192:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8001194:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001196:	3304      	adds	r3, #4
 8001198:	637b      	str	r3, [r7, #52]	@ 0x34
      if(floats_lengthT > floats_length)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	691b      	ldr	r3, [r3, #16]
 800119e:	69fa      	ldr	r2, [r7, #28]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d90a      	bls.n	80011ba <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	699a      	ldr	r2, [r3, #24]
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	4619      	mov	r1, r3
 80011ae:	4610      	mov	r0, r2
 80011b0:	f003 fff4 	bl	800519c <realloc>
 80011b4:	4602      	mov	r2, r0
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	69fa      	ldr	r2, [r7, #28]
 80011be:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 80011c0:	2300      	movs	r3, #0
 80011c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80011c4:	e035      	b.n	8001232 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1d4>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 80011c6:	2300      	movs	r3, #0
 80011c8:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80011ce:	6839      	ldr	r1, [r7, #0]
 80011d0:	440a      	add	r2, r1
 80011d2:	7812      	ldrb	r2, [r2, #0]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80011d8:	693a      	ldr	r2, [r7, #16]
 80011da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011dc:	3301      	adds	r3, #1
 80011de:	6839      	ldr	r1, [r7, #0]
 80011e0:	440b      	add	r3, r1
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	021b      	lsls	r3, r3, #8
 80011e6:	4313      	orrs	r3, r2
 80011e8:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011ee:	3302      	adds	r3, #2
 80011f0:	6839      	ldr	r1, [r7, #0]
 80011f2:	440b      	add	r3, r1
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	041b      	lsls	r3, r3, #16
 80011f8:	4313      	orrs	r3, r2
 80011fa:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80011fc:	693a      	ldr	r2, [r7, #16]
 80011fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001200:	3303      	adds	r3, #3
 8001202:	6839      	ldr	r1, [r7, #0]
 8001204:	440b      	add	r3, r1
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	061b      	lsls	r3, r3, #24
 800120a:	4313      	orrs	r3, r2
 800120c:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 800120e:	693a      	ldr	r2, [r7, #16]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8001214:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001216:	3304      	adds	r3, #4
 8001218:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	699a      	ldr	r2, [r3, #24]
 800121e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	4413      	add	r3, r2
 8001224:	687a      	ldr	r2, [r7, #4]
 8001226:	3214      	adds	r2, #20
 8001228:	6812      	ldr	r2, [r2, #0]
 800122a:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 800122c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800122e:	3301      	adds	r3, #1
 8001230:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	691b      	ldr	r3, [r3, #16]
 8001236:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001238:	429a      	cmp	r2, r3
 800123a:	d3c4      	bcc.n	80011c6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x168>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800123c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800123e:	683a      	ldr	r2, [r7, #0]
 8001240:	4413      	add	r3, r2
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001246:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001248:	3301      	adds	r3, #1
 800124a:	683a      	ldr	r2, [r7, #0]
 800124c:	4413      	add	r3, r2
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	021b      	lsls	r3, r3, #8
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	4313      	orrs	r3, r2
 8001256:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001258:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800125a:	3302      	adds	r3, #2
 800125c:	683a      	ldr	r2, [r7, #0]
 800125e:	4413      	add	r3, r2
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	041b      	lsls	r3, r3, #16
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	4313      	orrs	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800126a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800126c:	3303      	adds	r3, #3
 800126e:	683a      	ldr	r2, [r7, #0]
 8001270:	4413      	add	r3, r2
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	061b      	lsls	r3, r3, #24
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	4313      	orrs	r3, r2
 800127a:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 800127c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800127e:	3304      	adds	r3, #4
 8001280:	637b      	str	r3, [r7, #52]	@ 0x34
      if(strings_lengthT > strings_length)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	69db      	ldr	r3, [r3, #28]
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	429a      	cmp	r2, r3
 800128a:	d90a      	bls.n	80012a2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	4619      	mov	r1, r3
 8001296:	4610      	mov	r0, r2
 8001298:	f003 ff80 	bl	800519c <realloc>
 800129c:	4602      	mov	r2, r0
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	625a      	str	r2, [r3, #36]	@ 0x24
      strings_length = strings_lengthT;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 80012a8:	2300      	movs	r3, #0
 80012aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80012ac:	e03e      	b.n	800132c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2ce>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 80012ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012b0:	683a      	ldr	r2, [r7, #0]
 80012b2:	441a      	add	r2, r3
 80012b4:	f107 030c 	add.w	r3, r7, #12
 80012b8:	4611      	mov	r1, r2
 80012ba:	4618      	mov	r0, r3
 80012bc:	f000 fb8b 	bl	80019d6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80012c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012c2:	3304      	adds	r3, #4
 80012c4:	637b      	str	r3, [r7, #52]	@ 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80012c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80012ca:	e00b      	b.n	80012e4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x286>
          inbuffer[k-1]=inbuffer[k];
 80012cc:	683a      	ldr	r2, [r7, #0]
 80012ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012d0:	441a      	add	r2, r3
 80012d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012d4:	3b01      	subs	r3, #1
 80012d6:	6839      	ldr	r1, [r7, #0]
 80012d8:	440b      	add	r3, r1
 80012da:	7812      	ldrb	r2, [r2, #0]
 80012dc:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80012de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012e0:	3301      	adds	r3, #1
 80012e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80012e4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	4413      	add	r3, r2
 80012ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d3ed      	bcc.n	80012cc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26e>
      }
      inbuffer[offset+length_st_strings-1]=0;
 80012f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	4413      	add	r3, r2
 80012f6:	3b01      	subs	r3, #1
 80012f8:	683a      	ldr	r2, [r7, #0]
 80012fa:	4413      	add	r3, r2
 80012fc:	2200      	movs	r2, #0
 80012fe:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8001300:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001302:	3b01      	subs	r3, #1
 8001304:	683a      	ldr	r2, [r7, #0]
 8001306:	441a      	add	r2, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 800130c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	4413      	add	r3, r2
 8001312:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	4413      	add	r3, r2
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	3220      	adds	r2, #32
 8001322:	6812      	ldr	r2, [r2, #0]
 8001324:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8001326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001328:	3301      	adds	r3, #1
 800132a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	69db      	ldr	r3, [r3, #28]
 8001330:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001332:	429a      	cmp	r2, r3
 8001334:	d3bb      	bcc.n	80012ae <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x250>
      }
     return offset;
 8001336:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 8001338:	4618      	mov	r0, r3
 800133a:	3738      	adds	r7, #56	@ 0x38
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}

08001340 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	4b03      	ldr	r3, [pc, #12]	@ (8001358 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 800134a:	4618      	mov	r0, r3
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	08005618 	.word	0x08005618

0800135c <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	4b03      	ldr	r3, [pc, #12]	@ (8001374 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8001366:	4618      	mov	r0, r3
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	08005574 	.word	0x08005574

08001378 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8001378:	b480      	push	{r7}
 800137a:	b085      	sub	sp, #20
 800137c:	af00      	add	r7, sp, #0
 800137e:	60f8      	str	r0, [r7, #12]
 8001380:	60b9      	str	r1, [r7, #8]
 8001382:	607a      	str	r2, [r7, #4]
 8001384:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	68ba      	ldr	r2, [r7, #8]
 800138a:	601a      	str	r2, [r3, #0]
    msg_(msg),
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	687a      	ldr	r2, [r7, #4]
 8001390:	605a      	str	r2, [r3, #4]
    endpoint_(endpoint) {};
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	683a      	ldr	r2, [r7, #0]
 8001396:	611a      	str	r2, [r3, #16]
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	4618      	mov	r0, r3
 800139c:	3714      	adds	r7, #20
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr

080013a6 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b082      	sub	sp, #8
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
 80013ae:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	68d8      	ldr	r0, [r3, #12]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	687a      	ldr	r2, [r7, #4]
 80013be:	6891      	ldr	r1, [r2, #8]
 80013c0:	683a      	ldr	r2, [r7, #0]
 80013c2:	4798      	blx	r3
 80013c4:	4603      	mov	r3, r0
  };
 80013c6:	4618      	mov	r0, r3
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 80013ce:	b480      	push	{r7}
 80013d0:	b083      	sub	sp, #12
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	691b      	ldr	r3, [r3, #16]
  }
 80013da:	4618      	mov	r0, r3
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr

080013e6 <_ZN10SerialCommC1ER20__UART_HandleTypeDef>:
    uint16_t tx_tail = 0;
    uint16_t rx_tail = 0;
    static constexpr uint16_t buf_mask = buffer_size - 1;

public:
    SerialComm(UART_HandleTypeDef &huart) : huart(huart)
 80013e6:	b480      	push	{r7}
 80013e8:	b083      	sub	sp, #12
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	6078      	str	r0, [r7, #4]
 80013ee:	6039      	str	r1, [r7, #0]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	683a      	ldr	r2, [r7, #0]
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2201      	movs	r2, #1
 80013fa:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2200      	movs	r2, #0
 8001402:	f8a3 2806 	strh.w	r2, [r3, #2054]	@ 0x806
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2200      	movs	r2, #0
 800140a:	f8a3 2808 	strh.w	r2, [r3, #2056]	@ 0x808
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2200      	movs	r2, #0
 8001412:	f8a3 280a 	strh.w	r2, [r3, #2058]	@ 0x80a
    {
        // Other initialization code
    }
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4618      	mov	r0, r3
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr

08001424 <_ZN10SerialComm4initEv>:

    void init(void)
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
    {
        reset_rbuf();
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	f000 f8f5 	bl	800161c <_ZN10SerialComm10reset_rbufEv>
    }
 8001432:	bf00      	nop
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}

0800143a <_ZN10SerialComm4readEv>:

    /** @brief Read a character from the Rx buffer using the FIFO method.
     * 
     * @return The read character.
    */
    int read(void)
 800143a:	b480      	push	{r7}
 800143c:	b085      	sub	sp, #20
 800143e:	af00      	add	r7, sp, #0
 8001440:	6078      	str	r0, [r7, #4]
    {
       uint16_t rx_head = (buffer_size - huart.hdmarx->Instance->NDTR) & buf_mask;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	b29b      	uxth	r3, r3
 800144e:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 8001452:	b29b      	uxth	r3, r3
 8001454:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001458:	81fb      	strh	r3, [r7, #14]

        // Check for overlapping (which is bad, data will be overwritten)
        if (rx_tail == rx_head)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	f8b3 380a 	ldrh.w	r3, [r3, #2058]	@ 0x80a
 8001460:	89fa      	ldrh	r2, [r7, #14]
 8001462:	429a      	cmp	r2, r3
 8001464:	d102      	bne.n	800146c <_ZN10SerialComm4readEv+0x32>
        {
            return -1;
 8001466:	f04f 33ff 	mov.w	r3, #4294967295
 800146a:	e017      	b.n	800149c <_ZN10SerialComm4readEv+0x62>
        }

        // Read a value and increment the read pointer (TAIL).
        int c = (int) rx_buf[rx_tail++];
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	f8b3 380a 	ldrh.w	r3, [r3, #2058]	@ 0x80a
 8001472:	1c5a      	adds	r2, r3, #1
 8001474:	b291      	uxth	r1, r2
 8001476:	687a      	ldr	r2, [r7, #4]
 8001478:	f8a2 180a 	strh.w	r1, [r2, #2058]	@ 0x80a
 800147c:	461a      	mov	r2, r3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4413      	add	r3, r2
 8001482:	f893 3404 	ldrb.w	r3, [r3, #1028]	@ 0x404
 8001486:	60bb      	str	r3, [r7, #8]
        rx_tail &= buf_mask;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	f8b3 380a 	ldrh.w	r3, [r3, #2058]	@ 0x80a
 800148e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001492:	b29a      	uxth	r2, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	f8a3 280a 	strh.w	r2, [r3, #2058]	@ 0x80a

        return c;
 800149a:	68bb      	ldr	r3, [r7, #8]
    }
 800149c:	4618      	mov	r0, r3
 800149e:	3714      	adds	r7, #20
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr

080014a8 <_ZN10SerialComm5writeEPKhi>:
     * @param data The pointer to the data string.
     * @param length The length of the data string.
     * 
     * @return Void. 
    */
    void write(const uint8_t* const data, const int length)
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b086      	sub	sp, #24
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	60f8      	str	r0, [r7, #12]
 80014b0:	60b9      	str	r1, [r7, #8]
 80014b2:	607a      	str	r2, [r7, #4]
    {
        // Faulty data guard.
        if (length > buffer_size || length < 1)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80014ba:	dc41      	bgt.n	8001540 <_ZN10SerialComm5writeEPKhi+0x98>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	dd3e      	ble.n	8001540 <_ZN10SerialComm5writeEPKhi+0x98>
        {
            return;
        }

        // Wait for the completion of the previous Tx transfer.
        while (!is_tx_cplt);
 80014c2:	bf00      	nop
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	f893 3804 	ldrb.w	r3, [r3, #2052]	@ 0x804
 80014ca:	f083 0301 	eor.w	r3, r3, #1
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d1f7      	bne.n	80014c4 <_ZN10SerialComm5writeEPKhi+0x1c>

        // Check if the data is bigger than the remaining storage
        int w_len = (length <= (buffer_size - tx_head)) ? length : (buffer_size - tx_head);
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	f8b3 3806 	ldrh.w	r3, [r3, #2054]	@ 0x806
 80014da:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	4293      	cmp	r3, r2
 80014e2:	bfa8      	it	ge
 80014e4:	4613      	movge	r3, r2
 80014e6:	617b      	str	r3, [r7, #20]

        // Write the data and increment the write pointer (TX_HEAD)
        memcpy(&tx_buf[tx_head], data, w_len);
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	f8b3 3806 	ldrh.w	r3, [r3, #2054]	@ 0x806
 80014ee:	461a      	mov	r2, r3
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	4413      	add	r3, r2
 80014f4:	3304      	adds	r3, #4
 80014f6:	697a      	ldr	r2, [r7, #20]
 80014f8:	68b9      	ldr	r1, [r7, #8]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f003 feb8 	bl	8005270 <memcpy>
        tx_head = (tx_head + length) & buf_mask;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	f8b3 2806 	ldrh.w	r2, [r3, #2054]	@ 0x806
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	b29b      	uxth	r3, r3
 800150a:	4413      	add	r3, r2
 800150c:	b29b      	uxth	r3, r3
 800150e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001512:	b29a      	uxth	r2, r3
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	f8a3 2806 	strh.w	r2, [r3, #2054]	@ 0x806

        // Reset the TX_HEAD pointer and write the remaining data
        // (If data is bigger than the previous remaining data)
        if (length != w_len)
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	429a      	cmp	r2, r3
 8001520:	d00a      	beq.n	8001538 <_ZN10SerialComm5writeEPKhi+0x90>
        {
            memcpy(tx_buf, &data[w_len], length - w_len);
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	1d18      	adds	r0, r3, #4
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	68ba      	ldr	r2, [r7, #8]
 800152a:	18d1      	adds	r1, r2, r3
 800152c:	687a      	ldr	r2, [r7, #4]
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	461a      	mov	r2, r3
 8001534:	f003 fe9c 	bl	8005270 <memcpy>
        }

        // TODO: Start transfering
        flush();
 8001538:	68f8      	ldr	r0, [r7, #12]
 800153a:	f000 f805 	bl	8001548 <_ZN10SerialComm5flushEv>
 800153e:	e000      	b.n	8001542 <_ZN10SerialComm5writeEPKhi+0x9a>
            return;
 8001540:	bf00      	nop
    }
 8001542:	3718      	adds	r7, #24
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}

08001548 <_ZN10SerialComm5flushEv>:

    /** @brief Transmit the just written data in the Tx buffer
     * 
     * @return void.
    */
    void flush()
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
    {
        if (is_tx_cplt)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	f893 3804 	ldrb.w	r3, [r3, #2052]	@ 0x804
 8001556:	2b00      	cmp	r3, #0
 8001558:	d04e      	beq.n	80015f8 <_ZN10SerialComm5flushEv+0xb0>
        {
            // if HEAD == TAIL => The buffer is empty => Nothing to send.
            if (tx_head != tx_tail)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	f8b3 2806 	ldrh.w	r2, [r3, #2054]	@ 0x806
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f8b3 3808 	ldrh.w	r3, [r3, #2056]	@ 0x808
 8001566:	429a      	cmp	r2, r3
 8001568:	d042      	beq.n	80015f0 <_ZN10SerialComm5flushEv+0xa8>
            {
                uint16_t len = 0;
 800156a:	2300      	movs	r3, #0
 800156c:	81fb      	strh	r3, [r7, #14]

                if (tx_tail < tx_head)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	f8b3 2808 	ldrh.w	r2, [r3, #2056]	@ 0x808
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	f8b3 3806 	ldrh.w	r3, [r3, #2054]	@ 0x806
 800157a:	429a      	cmp	r2, r3
 800157c:	d215      	bcs.n	80015aa <_ZN10SerialComm5flushEv+0x62>
                {
                    len = tx_head - tx_tail;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	f8b3 2806 	ldrh.w	r2, [r3, #2054]	@ 0x806
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	f8b3 3808 	ldrh.w	r3, [r3, #2056]	@ 0x808
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	81fb      	strh	r3, [r7, #14]
                    HAL_UART_Transmit_DMA(&huart, &tx_buf[tx_tail], len);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6818      	ldr	r0, [r3, #0]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	f8b3 3808 	ldrh.w	r3, [r3, #2056]	@ 0x808
 8001598:	461a      	mov	r2, r3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4413      	add	r3, r2
 800159e:	3304      	adds	r3, #4
 80015a0:	89fa      	ldrh	r2, [r7, #14]
 80015a2:	4619      	mov	r1, r3
 80015a4:	f002 fc7a 	bl	8003e9c <HAL_UART_Transmit_DMA>
 80015a8:	e01c      	b.n	80015e4 <_ZN10SerialComm5flushEv+0x9c>
                }
                else
                {
                    len = buffer_size - tx_tail;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f8b3 3808 	ldrh.w	r3, [r3, #2056]	@ 0x808
 80015b0:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 80015b4:	81fb      	strh	r3, [r7, #14]
                    HAL_UART_Transmit_DMA(&huart, &tx_buf[tx_tail], len);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6818      	ldr	r0, [r3, #0]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	f8b3 3808 	ldrh.w	r3, [r3, #2056]	@ 0x808
 80015c0:	461a      	mov	r2, r3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4413      	add	r3, r2
 80015c6:	3304      	adds	r3, #4
 80015c8:	89fa      	ldrh	r2, [r7, #14]
 80015ca:	4619      	mov	r1, r3
 80015cc:	f002 fc66 	bl	8003e9c <HAL_UART_Transmit_DMA>
                    HAL_UART_Transmit_DMA(&huart, tx_buf, tx_head);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6818      	ldr	r0, [r3, #0]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	1d19      	adds	r1, r3, #4
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	f8b3 3806 	ldrh.w	r3, [r3, #2054]	@ 0x806
 80015de:	461a      	mov	r2, r3
 80015e0:	f002 fc5c 	bl	8003e9c <HAL_UART_Transmit_DMA>
                }
                
                tx_tail = tx_head;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f8b3 2806 	ldrh.w	r2, [r3, #2054]	@ 0x806
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	f8a3 2808 	strh.w	r2, [r3, #2056]	@ 0x808
            }
            
            is_tx_cplt = false;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2200      	movs	r2, #0
 80015f4:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
        }
    }
 80015f8:	bf00      	nop
 80015fa:	3710      	adds	r7, #16
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}

08001600 <_ZN10SerialComm11set_tx_cpltEv>:

    void set_tx_cplt(void)
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
    {
        is_tx_cplt = true;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2201      	movs	r2, #1
 800160c:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
    }
 8001610:	bf00      	nop
 8001612:	370c      	adds	r7, #12
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <_ZN10SerialComm10reset_rbufEv>:

    void reset_rbuf(void)
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
    {
        HAL_UART_Receive_DMA(&huart, (uint8_t *)rx_buf, buffer_size);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6818      	ldr	r0, [r3, #0]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800162e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001632:	4619      	mov	r1, r3
 8001634:	f002 fca2 	bl	8003f7c <HAL_UART_Receive_DMA>
    }
 8001638:	bf00      	nop
 800163a:	3708      	adds	r7, #8
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}

08001640 <_ZN13STM32HardwareC1Ev>:
class STM32Hardware {
  protected:
    SerialComm &comm;

  public:
    STM32Hardware() : comm(comm_rosserial)
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	4a04      	ldr	r2, [pc, #16]	@ (800165c <_ZN13STM32HardwareC1Ev+0x1c>)
 800164c:	601a      	str	r2, [r3, #0]
    {
        // TODO:
    }
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4618      	mov	r0, r3
 8001652:	370c      	adds	r7, #12
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr
 800165c:	20000180 	.word	0x20000180

08001660 <_ZN13STM32Hardware4initEv>:
    STM32Hardware(SerialComm &comm) : comm(comm)
    {
        // TODO: 
    }
  
    void init()
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
    {
        comm.init();
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff fed9 	bl	8001424 <_ZN10SerialComm4initEv>
    }
 8001672:	bf00      	nop
 8001674:	3708      	adds	r7, #8
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}

0800167a <_ZN13STM32Hardware4readEv>:

    int read()  
 800167a:	b580      	push	{r7, lr}
 800167c:	b082      	sub	sp, #8
 800167e:	af00      	add	r7, sp, #0
 8001680:	6078      	str	r0, [r7, #4]
    {
        return comm.read();
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4618      	mov	r0, r3
 8001688:	f7ff fed7 	bl	800143a <_ZN10SerialComm4readEv>
 800168c:	4603      	mov	r3, r0
    }
 800168e:	4618      	mov	r0, r3
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length)
 8001696:	b580      	push	{r7, lr}
 8001698:	b084      	sub	sp, #16
 800169a:	af00      	add	r7, sp, #0
 800169c:	60f8      	str	r0, [r7, #12]
 800169e:	60b9      	str	r1, [r7, #8]
 80016a0:	607a      	str	r2, [r7, #4]
    {
        comm.write(data, length);
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	68b9      	ldr	r1, [r7, #8]
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7ff fefc 	bl	80014a8 <_ZN10SerialComm5writeEPKhi>
    }
 80016b0:	bf00      	nop
 80016b2:	3710      	adds	r7, #16
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <_ZN13STM32Hardware4timeEv>:

    unsigned long time()
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
    { 
        return HAL_GetTick(); 
 80016c0:	f001 f87c 	bl	80027bc <HAL_GetTick>
 80016c4:	4603      	mov	r3, r0
    }
 80016c6:	4618      	mov	r0, r3
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
	...

080016d0 <_ZN8std_msgs6StringC1Ev>:
  {
    public:
      typedef const char* _data_type;
      _data_type data;

    String():
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
      data("")
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	4618      	mov	r0, r3
 80016dc:	f7ff f80c 	bl	80006f8 <_ZN3ros3MsgC1Ev>
 80016e0:	4a05      	ldr	r2, [pc, #20]	@ (80016f8 <_ZN8std_msgs6StringC1Ev+0x28>)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4a04      	ldr	r2, [pc, #16]	@ (80016fc <_ZN8std_msgs6StringC1Ev+0x2c>)
 80016ea:	605a      	str	r2, [r3, #4]
    {
    }
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	4618      	mov	r0, r3
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	08005650 	.word	0x08005650
 80016fc:	080054f8 	.word	0x080054f8

08001700 <_ZNK8std_msgs6String9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800170a:	2300      	movs	r3, #0
 800170c:	60fb      	str	r3, [r7, #12]
      uint32_t length_data = strlen(this->data);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	4618      	mov	r0, r3
 8001714:	f7fe fd60 	bl	80001d8 <strlen>
 8001718:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_data);
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	683a      	ldr	r2, [r7, #0]
 800171e:	4413      	add	r3, r2
 8001720:	68b9      	ldr	r1, [r7, #8]
 8001722:	4618      	mov	r0, r3
 8001724:	f000 f938 	bl	8001998 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	3304      	adds	r3, #4
 800172c:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->data, length_data);
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	683a      	ldr	r2, [r7, #0]
 8001732:	18d0      	adds	r0, r2, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	68ba      	ldr	r2, [r7, #8]
 800173a:	4619      	mov	r1, r3
 800173c:	f003 fd98 	bl	8005270 <memcpy>
      offset += length_data;
 8001740:	68fa      	ldr	r2, [r7, #12]
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	4413      	add	r3, r2
 8001746:	60fb      	str	r3, [r7, #12]
      return offset;
 8001748:	68fb      	ldr	r3, [r7, #12]
    }
 800174a:	4618      	mov	r0, r3
 800174c:	3710      	adds	r7, #16
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}

08001752 <_ZN8std_msgs6String11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001752:	b580      	push	{r7, lr}
 8001754:	b086      	sub	sp, #24
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
 800175a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800175c:	2300      	movs	r3, #0
 800175e:	613b      	str	r3, [r7, #16]
      uint32_t length_data;
      arrToVar(length_data, (inbuffer + offset));
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	683a      	ldr	r2, [r7, #0]
 8001764:	441a      	add	r2, r3
 8001766:	f107 030c 	add.w	r3, r7, #12
 800176a:	4611      	mov	r1, r2
 800176c:	4618      	mov	r0, r3
 800176e:	f000 f932 	bl	80019d6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	3304      	adds	r3, #4
 8001776:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	617b      	str	r3, [r7, #20]
 800177c:	e00b      	b.n	8001796 <_ZN8std_msgs6String11deserializeEPh+0x44>
          inbuffer[k-1]=inbuffer[k];
 800177e:	683a      	ldr	r2, [r7, #0]
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	441a      	add	r2, r3
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	3b01      	subs	r3, #1
 8001788:	6839      	ldr	r1, [r7, #0]
 800178a:	440b      	add	r3, r1
 800178c:	7812      	ldrb	r2, [r2, #0]
 800178e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	3301      	adds	r3, #1
 8001794:	617b      	str	r3, [r7, #20]
 8001796:	693a      	ldr	r2, [r7, #16]
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	4413      	add	r3, r2
 800179c:	697a      	ldr	r2, [r7, #20]
 800179e:	429a      	cmp	r2, r3
 80017a0:	d3ed      	bcc.n	800177e <_ZN8std_msgs6String11deserializeEPh+0x2c>
      }
      inbuffer[offset+length_data-1]=0;
 80017a2:	693a      	ldr	r2, [r7, #16]
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	4413      	add	r3, r2
 80017a8:	3b01      	subs	r3, #1
 80017aa:	683a      	ldr	r2, [r7, #0]
 80017ac:	4413      	add	r3, r2
 80017ae:	2200      	movs	r2, #0
 80017b0:	701a      	strb	r2, [r3, #0]
      this->data = (char *)(inbuffer + offset-1);
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	3b01      	subs	r3, #1
 80017b6:	683a      	ldr	r2, [r7, #0]
 80017b8:	441a      	add	r2, r3
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	605a      	str	r2, [r3, #4]
      offset += length_data;
 80017be:	693a      	ldr	r2, [r7, #16]
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	4413      	add	r3, r2
 80017c4:	613b      	str	r3, [r7, #16]
     return offset;
 80017c6:	693b      	ldr	r3, [r7, #16]
    }
 80017c8:	4618      	mov	r0, r3
 80017ca:	3718      	adds	r7, #24
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <_ZN8std_msgs6String7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/String"; };
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	4b03      	ldr	r3, [pc, #12]	@ (80017e8 <_ZN8std_msgs6String7getTypeEv+0x18>)
 80017da:	4618      	mov	r0, r3
 80017dc:	370c      	adds	r7, #12
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	08005598 	.word	0x08005598

080017ec <_ZN8std_msgs6String6getMD5Ev>:
    virtual const char * getMD5() override { return "992ce8a1687cec8c8bd883ec73ca41d1"; };
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	4b03      	ldr	r3, [pc, #12]	@ (8001804 <_ZN8std_msgs6String6getMD5Ev+0x18>)
 80017f6:	4618      	mov	r0, r3
 80017f8:	370c      	adds	r7, #12
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	080055a8 	.word	0x080055a8

08001808 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	4a04      	ldr	r2, [pc, #16]	@ (8001824 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	601a      	str	r2, [r3, #0]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4618      	mov	r0, r3
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr
 8001824:	08005668 	.word	0x08005668

08001828 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi1024ELi1024EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	4618      	mov	r0, r3
 8001834:	f7ff ffe8 	bl	8001808 <_ZN3ros15NodeHandleBase_C1Ev>
 8001838:	4a33      	ldr	r2, [pc, #204]	@ (8001908 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi1024ELi1024EEC1Ev+0xe0>)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	3304      	adds	r3, #4
 8001842:	4618      	mov	r0, r3
 8001844:	f7ff fefc 	bl	8001640 <_ZN13STM32HardwareC1Ev>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2200      	movs	r2, #0
 800184c:	609a      	str	r2, [r3, #8]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2200      	movs	r2, #0
 8001852:	60da      	str	r2, [r3, #12]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2200      	movs	r2, #0
 8001858:	611a      	str	r2, [r3, #16]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2200      	movs	r2, #0
 800185e:	615a      	str	r2, [r3, #20]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	3318      	adds	r3, #24
 8001864:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001868:	2100      	movs	r1, #0
 800186a:	4618      	mov	r0, r3
 800186c:	f003 fccc 	bl	8005208 <memset>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f503 6383 	add.w	r3, r3, #1048	@ 0x418
 8001876:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800187a:	2100      	movs	r1, #0
 800187c:	4618      	mov	r0, r3
 800187e:	f003 fcc3 	bl	8005208 <memset>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	f603 0318 	addw	r3, r3, #2072	@ 0x818
 8001888:	2228      	movs	r2, #40	@ 0x28
 800188a:	2100      	movs	r1, #0
 800188c:	4618      	mov	r0, r3
 800188e:	f003 fcbb 	bl	8005208 <memset>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	f503 6304 	add.w	r3, r3, #2112	@ 0x840
 8001898:	2228      	movs	r2, #40	@ 0x28
 800189a:	2100      	movs	r1, #0
 800189c:	4618      	mov	r0, r3
 800189e:	f003 fcb3 	bl	8005208 <memset>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2200      	movs	r2, #0
 80018a6:	f8c3 2868 	str.w	r2, [r3, #2152]	@ 0x868
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2200      	movs	r2, #0
 80018ae:	f8c3 286c 	str.w	r2, [r3, #2156]	@ 0x86c
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2200      	movs	r2, #0
 80018b6:	f8c3 2870 	str.w	r2, [r3, #2160]	@ 0x870
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2200      	movs	r2, #0
 80018be:	f8c3 2874 	str.w	r2, [r3, #2164]	@ 0x874
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2200      	movs	r2, #0
 80018c6:	f8c3 2878 	str.w	r2, [r3, #2168]	@ 0x878
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2200      	movs	r2, #0
 80018ce:	f883 287c 	strb.w	r2, [r3, #2172]	@ 0x87c
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2200      	movs	r2, #0
 80018d6:	f8c3 2880 	str.w	r2, [r3, #2176]	@ 0x880
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2200      	movs	r2, #0
 80018de:	f8c3 2884 	str.w	r2, [r3, #2180]	@ 0x884
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2200      	movs	r2, #0
 80018e6:	f8c3 2888 	str.w	r2, [r3, #2184]	@ 0x888
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2200      	movs	r2, #0
 80018ee:	f883 288c 	strb.w	r2, [r3, #2188]	@ 0x88c
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	f503 6309 	add.w	r3, r3, #2192	@ 0x890
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7ff fa71 	bl	8000de0 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4618      	mov	r0, r3
 8001902:	3708      	adds	r7, #8
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	0800563c 	.word	0x0800563c

0800190c <HAL_UART_TxCpltCallback>:
ros::Publisher chatter("chatter", &str_msg);

char data[] = "Hello world!";

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
	//if (huart->Instance == comm_rosserial.get_handle()->Instance)
	//{
	comm_rosserial.set_tx_cplt();
 8001914:	4803      	ldr	r0, [pc, #12]	@ (8001924 <HAL_UART_TxCpltCallback+0x18>)
 8001916:	f7ff fe73 	bl	8001600 <_ZN10SerialComm11set_tx_cpltEv>
	//}
	// HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
}
 800191a:	bf00      	nop
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	20000180 	.word	0x20000180

08001928 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
	comm_rosserial.reset_rbuf();
 8001930:	4803      	ldr	r0, [pc, #12]	@ (8001940 <HAL_UART_RxCpltCallback+0x18>)
 8001932:	f7ff fe73 	bl	800161c <_ZN10SerialComm10reset_rbufEv>
	// HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
}
 8001936:	bf00      	nop
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	20000180 	.word	0x20000180

08001944 <setup>:

void setup()
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
	nh.initNode();
 8001948:	4804      	ldr	r0, [pc, #16]	@ (800195c <setup+0x18>)
 800194a:	f000 f86a 	bl	8001a22 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi1024ELi1024EE8initNodeEv>
	nh.advertise(chatter);
 800194e:	4904      	ldr	r1, [pc, #16]	@ (8001960 <setup+0x1c>)
 8001950:	4802      	ldr	r0, [pc, #8]	@ (800195c <setup+0x18>)
 8001952:	f000 f883 	bl	8001a5c <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi1024ELi1024EE9advertiseERNS_9PublisherE>
}
 8001956:	bf00      	nop
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	2000098c 	.word	0x2000098c
 8001960:	2000124c 	.word	0x2000124c

08001964 <loop>:

void loop()
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
	str_msg.data = "hello";
 8001968:	4b07      	ldr	r3, [pc, #28]	@ (8001988 <loop+0x24>)
 800196a:	4a08      	ldr	r2, [pc, #32]	@ (800198c <loop+0x28>)
 800196c:	605a      	str	r2, [r3, #4]
	chatter.publish(&str_msg);
 800196e:	4906      	ldr	r1, [pc, #24]	@ (8001988 <loop+0x24>)
 8001970:	4807      	ldr	r0, [pc, #28]	@ (8001990 <loop+0x2c>)
 8001972:	f7ff fd18 	bl	80013a6 <_ZN3ros9Publisher7publishEPKNS_3MsgE>

	HAL_Delay(500);
 8001976:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800197a:	f000 ff2b 	bl	80027d4 <HAL_Delay>

	nh.spinOnce();
 800197e:	4805      	ldr	r0, [pc, #20]	@ (8001994 <loop+0x30>)
 8001980:	f000 f89a 	bl	8001ab8 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi1024ELi1024EE8spinOnceEv>
}
 8001984:	bf00      	nop
 8001986:	bd80      	pop	{r7, pc}
 8001988:	20001244 	.word	0x20001244
 800198c:	080055cc 	.word	0x080055cc
 8001990:	2000124c 	.word	0x2000124c
 8001994:	2000098c 	.word	0x2000098c

08001998 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8001998:	b480      	push	{r7}
 800199a:	b085      	sub	sp, #20
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 80019a2:	2300      	movs	r3, #0
 80019a4:	60fb      	str	r3, [r7, #12]
 80019a6:	e00c      	b.n	80019c2 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x2a>
      arr[i] = (var >> (8 * i));
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	00db      	lsls	r3, r3, #3
 80019ac:	683a      	ldr	r2, [r7, #0]
 80019ae:	fa22 f103 	lsr.w	r1, r2, r3
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	4413      	add	r3, r2
 80019b8:	b2ca      	uxtb	r2, r1
 80019ba:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	3301      	adds	r3, #1
 80019c0:	60fb      	str	r3, [r7, #12]
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	2b03      	cmp	r3, #3
 80019c6:	d9ef      	bls.n	80019a8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x10>
  }
 80019c8:	bf00      	nop
 80019ca:	bf00      	nop
 80019cc:	3714      	adds	r7, #20
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr

080019d6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 80019d6:	b480      	push	{r7}
 80019d8:	b085      	sub	sp, #20
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
 80019de:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2200      	movs	r2, #0
 80019e4:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80019e6:	2300      	movs	r3, #0
 80019e8:	60fb      	str	r3, [r7, #12]
 80019ea:	e010      	b.n	8001a0e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x38>
      var |= (arr[i] << (8 * i));
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	6839      	ldr	r1, [r7, #0]
 80019f2:	68fa      	ldr	r2, [r7, #12]
 80019f4:	440a      	add	r2, r1
 80019f6:	7812      	ldrb	r2, [r2, #0]
 80019f8:	4611      	mov	r1, r2
 80019fa:	68fa      	ldr	r2, [r7, #12]
 80019fc:	00d2      	lsls	r2, r2, #3
 80019fe:	fa01 f202 	lsl.w	r2, r1, r2
 8001a02:	431a      	orrs	r2, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	60fb      	str	r3, [r7, #12]
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	2b03      	cmp	r3, #3
 8001a12:	d9eb      	bls.n	80019ec <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x16>
  }
 8001a14:	bf00      	nop
 8001a16:	bf00      	nop
 8001a18:	3714      	adds	r7, #20
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr

08001a22 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi1024ELi1024EE8initNodeEv>:
  {
    return &hardware_;
  }

  /* Start serial, initialize buffers */
  void initNode()
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b082      	sub	sp, #8
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	3304      	adds	r3, #4
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7ff fe16 	bl	8001660 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2200      	movs	r2, #0
 8001a38:	f8c3 2868 	str.w	r2, [r3, #2152]	@ 0x868
    bytes_ = 0;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	f8c3 286c 	str.w	r2, [r3, #2156]	@ 0x86c
    index_ = 0;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2200      	movs	r2, #0
 8001a48:	f8c3 2874 	str.w	r2, [r3, #2164]	@ 0x874
    topic_ = 0;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f8c3 2870 	str.w	r2, [r3, #2160]	@ 0x870
  };
 8001a54:	bf00      	nop
 8001a56:	3708      	adds	r7, #8
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}

08001a5c <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi1024ELi1024EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 8001a5c:	b480      	push	{r7}
 8001a5e:	b085      	sub	sp, #20
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8001a66:	2300      	movs	r3, #0
 8001a68:	60fb      	str	r3, [r7, #12]
 8001a6a:	e01b      	b.n	8001aa4 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi1024ELi1024EE9advertiseERNS_9PublisherE+0x48>
    {
      if (publishers[i] == 0) // empty slot
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	68fa      	ldr	r2, [r7, #12]
 8001a70:	f202 2206 	addw	r2, r2, #518	@ 0x206
 8001a74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d110      	bne.n	8001a9e <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi1024ELi1024EE9advertiseERNS_9PublisherE+0x42>
      {
        publishers[i] = &p;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	68fa      	ldr	r2, [r7, #12]
 8001a80:	f202 2206 	addw	r2, r2, #518	@ 0x206
 8001a84:	6839      	ldr	r1, [r7, #0]
 8001a86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	f103 026e 	add.w	r2, r3, #110	@ 0x6e
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8001a94:	687a      	ldr	r2, [r7, #4]
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	60da      	str	r2, [r3, #12]
        return true;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e006      	b.n	8001aac <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi1024ELi1024EE9advertiseERNS_9PublisherE+0x50>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	60fb      	str	r3, [r7, #12]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	2b09      	cmp	r3, #9
 8001aa8:	dde0      	ble.n	8001a6c <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi1024ELi1024EE9advertiseERNS_9PublisherE+0x10>
      }
    }
    return false;
 8001aaa:	2300      	movs	r3, #0
  }
 8001aac:	4618      	mov	r0, r3
 8001aae:	3714      	adds	r7, #20
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi1024ELi1024EE8spinOnceEv>:
  virtual int spinOnce() override
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	3304      	adds	r3, #4
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7ff fdf7 	bl	80016b8 <_ZN13STM32Hardware4timeEv>
 8001aca:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f8d3 3884 	ldr.w	r3, [r3, #2180]	@ 0x884
 8001ad2:	68fa      	ldr	r2, [r7, #12]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d903      	bls.n	8001ae6 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi1024ELi1024EE8spinOnceEv+0x2e>
      configured_ = false;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	f883 287c 	strb.w	r2, [r3, #2172]	@ 0x87c
    if (mode_ != MODE_FIRST_FF)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	f8d3 3868 	ldr.w	r3, [r3, #2152]	@ 0x868
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d009      	beq.n	8001b04 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi1024ELi1024EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	f8d3 3888 	ldr.w	r3, [r3, #2184]	@ 0x888
 8001af6:	68fa      	ldr	r2, [r7, #12]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d903      	bls.n	8001b04 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi1024ELi1024EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2200      	movs	r2, #0
 8001b00:	f8c3 2868 	str.w	r2, [r3, #2152]	@ 0x868
      if (spin_timeout_ > 0)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	695b      	ldr	r3, [r3, #20]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d013      	beq.n	8001b34 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi1024ELi1024EE8spinOnceEv+0x7c>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	3304      	adds	r3, #4
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7ff fdd1 	bl	80016b8 <_ZN13STM32Hardware4timeEv>
 8001b16:	4602      	mov	r2, r0
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	1ad2      	subs	r2, r2, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	695b      	ldr	r3, [r3, #20]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	bf8c      	ite	hi
 8001b24:	2301      	movhi	r3, #1
 8001b26:	2300      	movls	r3, #0
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d002      	beq.n	8001b34 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi1024ELi1024EE8spinOnceEv+0x7c>
          return SPIN_TIMEOUT;
 8001b2e:	f06f 0301 	mvn.w	r3, #1
 8001b32:	e190      	b.n	8001e56 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi1024ELi1024EE8spinOnceEv+0x39e>
      int data = hardware_.read();
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	3304      	adds	r3, #4
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff fd9e 	bl	800167a <_ZN13STM32Hardware4readEv>
 8001b3e:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	f2c0 8170 	blt.w	8001e28 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi1024ELi1024EE8spinOnceEv+0x370>
      checksum_ += data;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f8d3 2878 	ldr.w	r2, [r3, #2168]	@ 0x878
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	441a      	add	r2, r3
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	f8c3 2878 	str.w	r2, [r3, #2168]	@ 0x878
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f8d3 3868 	ldr.w	r3, [r3, #2152]	@ 0x868
 8001b5e:	2b07      	cmp	r3, #7
 8001b60:	d11d      	bne.n	8001b9e <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi1024ELi1024EE8spinOnceEv+0xe6>
        message_in[index_++] = data;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	f8d3 3874 	ldr.w	r3, [r3, #2164]	@ 0x874
 8001b68:	1c59      	adds	r1, r3, #1
 8001b6a:	687a      	ldr	r2, [r7, #4]
 8001b6c:	f8c2 1874 	str.w	r1, [r2, #2164]	@ 0x874
 8001b70:	68ba      	ldr	r2, [r7, #8]
 8001b72:	b2d1      	uxtb	r1, r2
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	4413      	add	r3, r2
 8001b78:	460a      	mov	r2, r1
 8001b7a:	761a      	strb	r2, [r3, #24]
        bytes_--;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f8d3 386c 	ldr.w	r3, [r3, #2156]	@ 0x86c
 8001b82:	1e5a      	subs	r2, r3, #1
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f8c3 286c 	str.w	r2, [r3, #2156]	@ 0x86c
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	f8d3 386c 	ldr.w	r3, [r3, #2156]	@ 0x86c
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d1b7      	bne.n	8001b04 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi1024ELi1024EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2208      	movs	r2, #8
 8001b98:	f8c3 2868 	str.w	r2, [r3, #2152]	@ 0x868
 8001b9c:	e7b2      	b.n	8001b04 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi1024ELi1024EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	f8d3 3868 	ldr.w	r3, [r3, #2152]	@ 0x868
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d128      	bne.n	8001bfa <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi1024ELi1024EE8spinOnceEv+0x142>
        if (data == 0xff)
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	2bff      	cmp	r3, #255	@ 0xff
 8001bac:	d10d      	bne.n	8001bca <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi1024ELi1024EE8spinOnceEv+0x112>
          mode_++;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f8d3 3868 	ldr.w	r3, [r3, #2152]	@ 0x868
 8001bb4:	1c5a      	adds	r2, r3, #1
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f8c3 2868 	str.w	r2, [r3, #2152]	@ 0x868
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	f103 0214 	add.w	r2, r3, #20
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	f8c3 2888 	str.w	r2, [r3, #2184]	@ 0x888
 8001bc8:	e79c      	b.n	8001b04 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi1024ELi1024EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	3304      	adds	r3, #4
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7ff fd72 	bl	80016b8 <_ZN13STM32Hardware4timeEv>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bde:	4293      	cmp	r3, r2
 8001be0:	bf8c      	ite	hi
 8001be2:	2301      	movhi	r3, #1
 8001be4:	2300      	movls	r3, #0
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d08b      	beq.n	8001b04 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi1024ELi1024EE8spinOnceEv+0x4c>
          configured_ = false;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	f883 287c 	strb.w	r2, [r3, #2172]	@ 0x87c
          return SPIN_TIMEOUT;
 8001bf4:	f06f 0301 	mvn.w	r3, #1
 8001bf8:	e12d      	b.n	8001e56 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi1024ELi1024EE8spinOnceEv+0x39e>
      else if (mode_ == MODE_PROTOCOL_VER)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	f8d3 3868 	ldr.w	r3, [r3, #2152]	@ 0x868
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d118      	bne.n	8001c36 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi1024ELi1024EE8spinOnceEv+0x17e>
        if (data == PROTOCOL_VER)
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	2bfe      	cmp	r3, #254	@ 0xfe
 8001c08:	d107      	bne.n	8001c1a <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi1024ELi1024EE8spinOnceEv+0x162>
          mode_++;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	f8d3 3868 	ldr.w	r3, [r3, #2152]	@ 0x868
 8001c10:	1c5a      	adds	r2, r3, #1
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	f8c3 2868 	str.w	r2, [r3, #2152]	@ 0x868
 8001c18:	e774      	b.n	8001b04 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi1024ELi1024EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f8c3 2868 	str.w	r2, [r3, #2152]	@ 0x868
          if (configured_ == false)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f893 387c 	ldrb.w	r3, [r3, #2172]	@ 0x87c
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	f47f af6b 	bne.w	8001b04 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi1024ELi1024EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f000 f915 	bl	8001e5e <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi1024ELi1024EE15requestSyncTimeEv>
 8001c34:	e766      	b.n	8001b04 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi1024ELi1024EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f8d3 3868 	ldr.w	r3, [r3, #2152]	@ 0x868
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d113      	bne.n	8001c68 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi1024ELi1024EE8spinOnceEv+0x1b0>
        bytes_ = data;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	68ba      	ldr	r2, [r7, #8]
 8001c44:	f8c3 286c 	str.w	r2, [r3, #2156]	@ 0x86c
        index_ = 0;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	f8c3 2874 	str.w	r2, [r3, #2164]	@ 0x874
        mode_++;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	f8d3 3868 	ldr.w	r3, [r3, #2152]	@ 0x868
 8001c56:	1c5a      	adds	r2, r3, #1
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f8c3 2868 	str.w	r2, [r3, #2152]	@ 0x868
        checksum_ = data;               /* first byte for calculating size checksum */
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	68ba      	ldr	r2, [r7, #8]
 8001c62:	f8c3 2878 	str.w	r2, [r3, #2168]	@ 0x878
 8001c66:	e74d      	b.n	8001b04 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi1024ELi1024EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f8d3 3868 	ldr.w	r3, [r3, #2152]	@ 0x868
 8001c6e:	2b03      	cmp	r3, #3
 8001c70:	d110      	bne.n	8001c94 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi1024ELi1024EE8spinOnceEv+0x1dc>
        bytes_ += data << 8;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	f8d3 286c 	ldr.w	r2, [r3, #2156]	@ 0x86c
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	021b      	lsls	r3, r3, #8
 8001c7c:	441a      	add	r2, r3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	f8c3 286c 	str.w	r2, [r3, #2156]	@ 0x86c
        mode_++;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	f8d3 3868 	ldr.w	r3, [r3, #2152]	@ 0x868
 8001c8a:	1c5a      	adds	r2, r3, #1
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f8c3 2868 	str.w	r2, [r3, #2152]	@ 0x868
 8001c92:	e737      	b.n	8001b04 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi1024ELi1024EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	f8d3 3868 	ldr.w	r3, [r3, #2152]	@ 0x868
 8001c9a:	2b04      	cmp	r3, #4
 8001c9c:	d116      	bne.n	8001ccc <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi1024ELi1024EE8spinOnceEv+0x214>
        if ((checksum_ % 256) == 255)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	f8d3 3878 	ldr.w	r3, [r3, #2168]	@ 0x878
 8001ca4:	425a      	negs	r2, r3
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	b2d2      	uxtb	r2, r2
 8001caa:	bf58      	it	pl
 8001cac:	4253      	negpl	r3, r2
 8001cae:	2bff      	cmp	r3, #255	@ 0xff
 8001cb0:	d107      	bne.n	8001cc2 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi1024ELi1024EE8spinOnceEv+0x20a>
          mode_++;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	f8d3 3868 	ldr.w	r3, [r3, #2152]	@ 0x868
 8001cb8:	1c5a      	adds	r2, r3, #1
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	f8c3 2868 	str.w	r2, [r3, #2152]	@ 0x868
 8001cc0:	e720      	b.n	8001b04 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi1024ELi1024EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f8c3 2868 	str.w	r2, [r3, #2152]	@ 0x868
 8001cca:	e71b      	b.n	8001b04 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi1024ELi1024EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f8d3 3868 	ldr.w	r3, [r3, #2152]	@ 0x868
 8001cd2:	2b05      	cmp	r3, #5
 8001cd4:	d10f      	bne.n	8001cf6 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi1024ELi1024EE8spinOnceEv+0x23e>
        topic_ = data;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	68ba      	ldr	r2, [r7, #8]
 8001cda:	f8c3 2870 	str.w	r2, [r3, #2160]	@ 0x870
        mode_++;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	f8d3 3868 	ldr.w	r3, [r3, #2152]	@ 0x868
 8001ce4:	1c5a      	adds	r2, r3, #1
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	f8c3 2868 	str.w	r2, [r3, #2152]	@ 0x868
        checksum_ = data;               /* first byte included in checksum */
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	68ba      	ldr	r2, [r7, #8]
 8001cf0:	f8c3 2878 	str.w	r2, [r3, #2168]	@ 0x878
 8001cf4:	e706      	b.n	8001b04 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi1024ELi1024EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	f8d3 3868 	ldr.w	r3, [r3, #2152]	@ 0x868
 8001cfc:	2b06      	cmp	r3, #6
 8001cfe:	d117      	bne.n	8001d30 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi1024ELi1024EE8spinOnceEv+0x278>
        topic_ += data << 8;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f8d3 2870 	ldr.w	r2, [r3, #2160]	@ 0x870
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	021b      	lsls	r3, r3, #8
 8001d0a:	441a      	add	r2, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f8c3 2870 	str.w	r2, [r3, #2160]	@ 0x870
        mode_ = MODE_MESSAGE;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2207      	movs	r2, #7
 8001d16:	f8c3 2868 	str.w	r2, [r3, #2152]	@ 0x868
        if (bytes_ == 0)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f8d3 386c 	ldr.w	r3, [r3, #2156]	@ 0x86c
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	f47f aeef 	bne.w	8001b04 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi1024ELi1024EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2208      	movs	r2, #8
 8001d2a:	f8c3 2868 	str.w	r2, [r3, #2152]	@ 0x868
 8001d2e:	e6e9      	b.n	8001b04 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi1024ELi1024EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f8d3 3868 	ldr.w	r3, [r3, #2152]	@ 0x868
 8001d36:	2b08      	cmp	r3, #8
 8001d38:	f47f aee4 	bne.w	8001b04 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi1024ELi1024EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	f8c3 2868 	str.w	r2, [r3, #2152]	@ 0x868
        if ((checksum_ % 256) == 255)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f8d3 3878 	ldr.w	r3, [r3, #2168]	@ 0x878
 8001d4a:	425a      	negs	r2, r3
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	b2d2      	uxtb	r2, r2
 8001d50:	bf58      	it	pl
 8001d52:	4253      	negpl	r3, r2
 8001d54:	2bff      	cmp	r3, #255	@ 0xff
 8001d56:	f47f aed5 	bne.w	8001b04 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi1024ELi1024EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d110      	bne.n	8001d86 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi1024ELi1024EE8spinOnceEv+0x2ce>
            requestSyncTime();
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f000 f87a 	bl	8001e5e <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi1024ELi1024EE15requestSyncTimeEv>
            negotiateTopics();
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f000 f894 	bl	8001e98 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi1024ELi1024EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	68fa      	ldr	r2, [r7, #12]
 8001d74:	f8c3 2880 	str.w	r2, [r3, #2176]	@ 0x880
            last_sync_receive_time = c_time;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	68fa      	ldr	r2, [r7, #12]
 8001d7c:	f8c3 2884 	str.w	r2, [r3, #2180]	@ 0x884
            return SPIN_ERR;
 8001d80:	f04f 33ff 	mov.w	r3, #4294967295
 8001d84:	e067      	b.n	8001e56 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi1024ELi1024EE8spinOnceEv+0x39e>
          else if (topic_ == TopicInfo::ID_TIME)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 8001d8c:	2b0a      	cmp	r3, #10
 8001d8e:	d106      	bne.n	8001d9e <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi1024ELi1024EE8spinOnceEv+0x2e6>
            syncTime(message_in);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	3318      	adds	r3, #24
 8001d94:	4619      	mov	r1, r3
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f000 f956 	bl	8002048 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi1024ELi1024EE8syncTimeEPh>
 8001d9c:	e6b2      	b.n	8001b04 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi1024ELi1024EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 8001da4:	2b06      	cmp	r3, #6
 8001da6:	d10d      	bne.n	8001dc4 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi1024ELi1024EE8spinOnceEv+0x30c>
            req_param_resp.deserialize(message_in);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f503 6209 	add.w	r2, r3, #2192	@ 0x890
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	3318      	adds	r3, #24
 8001db2:	4619      	mov	r1, r3
 8001db4:	4610      	mov	r0, r2
 8001db6:	f7ff f952 	bl	800105e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	f883 288c 	strb.w	r2, [r3, #2188]	@ 0x88c
 8001dc2:	e69f      	b.n	8001b04 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi1024ELi1024EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 8001dca:	2b0b      	cmp	r3, #11
 8001dcc:	d104      	bne.n	8001dd8 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi1024ELi1024EE8spinOnceEv+0x320>
            configured_ = false;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f883 287c 	strb.w	r2, [r3, #2172]	@ 0x87c
 8001dd6:	e695      	b.n	8001b04 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi1024ELi1024EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 8001dde:	f1a3 0264 	sub.w	r2, r3, #100	@ 0x64
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	f502 7204 	add.w	r2, r2, #528	@ 0x210
 8001de8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	f43f ae89 	beq.w	8001b04 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi1024ELi1024EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 8001df8:	f1a3 0264 	sub.w	r2, r3, #100	@ 0x64
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f502 7204 	add.w	r2, r2, #528	@ 0x210
 8001e02:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 8001e0c:	f1a3 0264 	sub.w	r2, r3, #100	@ 0x64
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f502 7204 	add.w	r2, r2, #528	@ 0x210
 8001e16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	3218      	adds	r2, #24
 8001e22:	4611      	mov	r1, r2
 8001e24:	4798      	blx	r3
    while (true)
 8001e26:	e66d      	b.n	8001b04 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi1024ELi1024EE8spinOnceEv+0x4c>
        break;
 8001e28:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f893 387c 	ldrb.w	r3, [r3, #2172]	@ 0x87c
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d00f      	beq.n	8001e54 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi1024ELi1024EE8spinOnceEv+0x39c>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
 8001e3a:	68fa      	ldr	r2, [r7, #12]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d906      	bls.n	8001e54 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi1024ELi1024EE8spinOnceEv+0x39c>
      requestSyncTime();
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f000 f809 	bl	8001e5e <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi1024ELi1024EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	68fa      	ldr	r2, [r7, #12]
 8001e50:	f8c3 2880 	str.w	r2, [r3, #2176]	@ 0x880
    return SPIN_OK;
 8001e54:	2300      	movs	r3, #0
  }
 8001e56:	4618      	mov	r0, r3
 8001e58:	3710      	adds	r7, #16
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi1024ELi1024EE15requestSyncTimeEv>:
  void requestSyncTime()
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b086      	sub	sp, #24
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8001e66:	f107 030c 	add.w	r3, r7, #12
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7fe fc54 	bl	8000718 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f107 020c 	add.w	r2, r7, #12
 8001e7a:	210a      	movs	r1, #10
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	4798      	blx	r3
    rt_time = hardware_.time();
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	3304      	adds	r3, #4
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7ff fc17 	bl	80016b8 <_ZN13STM32Hardware4timeEv>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	609a      	str	r2, [r3, #8]
  }
 8001e90:	bf00      	nop
 8001e92:	3718      	adds	r7, #24
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi1024ELi1024EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 8001e98:	b590      	push	{r4, r7, lr}
 8001e9a:	b08b      	sub	sp, #44	@ 0x2c
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8001ea0:	f107 030c 	add.w	r3, r7, #12
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7fe fd27 	bl	80008f8 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8001eaa:	2300      	movs	r3, #0
 8001eac:	627b      	str	r3, [r7, #36]	@ 0x24
 8001eae:	e05a      	b.n	8001f66 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi1024ELi1024EE15negotiateTopicsEv+0xce>
    {
      if (publishers[i] != 0) // non-empty slot
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001eb4:	f202 2206 	addw	r2, r2, #518	@ 0x206
 8001eb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d04f      	beq.n	8001f60 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi1024ELi1024EE15negotiateTopicsEv+0xc8>
      {
        ti.topic_id = publishers[i]->id_;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ec4:	f202 2206 	addw	r2, r2, #518	@ 0x206
 8001ec8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	b29b      	uxth	r3, r3
 8001ed0:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ed6:	f202 2206 	addw	r2, r2, #518	@ 0x206
 8001eda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ee6:	f202 2206 	addw	r2, r2, #518	@ 0x206
 8001eea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001eee:	6859      	ldr	r1, [r3, #4]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ef4:	f202 2206 	addw	r2, r2, #518	@ 0x206
 8001ef8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	3308      	adds	r3, #8
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4608      	mov	r0, r1
 8001f06:	4798      	blx	r3
 8001f08:	4603      	mov	r3, r0
 8001f0a:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f10:	f202 2206 	addw	r2, r2, #518	@ 0x206
 8001f14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f18:	6859      	ldr	r1, [r3, #4]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f1e:	f202 2206 	addw	r2, r2, #518	@ 0x206
 8001f22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	330c      	adds	r3, #12
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4608      	mov	r0, r1
 8001f30:	4798      	blx	r3
 8001f32:	4603      	mov	r3, r0
 8001f34:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8001f36:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f3a:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681c      	ldr	r4, [r3, #0]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f46:	f202 2206 	addw	r2, r2, #518	@ 0x206
 8001f4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7ff fa3d 	bl	80013ce <_ZN3ros9Publisher15getEndpointTypeEv>
 8001f54:	4601      	mov	r1, r0
 8001f56:	f107 030c 	add.w	r3, r7, #12
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8001f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f62:	3301      	adds	r3, #1
 8001f64:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f68:	2b09      	cmp	r3, #9
 8001f6a:	dda1      	ble.n	8001eb0 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi1024ELi1024EE15negotiateTopicsEv+0x18>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f70:	e05e      	b.n	8002030 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi1024ELi1024EE15negotiateTopicsEv+0x198>
    {
      if (subscribers[i] != 0) // non-empty slot
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f76:	f502 7204 	add.w	r2, r2, #528	@ 0x210
 8001f7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d053      	beq.n	800202a <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi1024ELi1024EE15negotiateTopicsEv+0x192>
      {
        ti.topic_id = subscribers[i]->id_;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f86:	f502 7204 	add.w	r2, r2, #528	@ 0x210
 8001f8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	b29b      	uxth	r3, r3
 8001f92:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f98:	f502 7204 	add.w	r2, r2, #528	@ 0x210
 8001f9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fa8:	f502 7204 	add.w	r2, r2, #528	@ 0x210
 8001fac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fb4:	f502 7204 	add.w	r2, r2, #528	@ 0x210
 8001fb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	3308      	adds	r3, #8
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4608      	mov	r0, r1
 8001fc4:	4798      	blx	r3
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fce:	f502 7204 	add.w	r2, r2, #528	@ 0x210
 8001fd2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fda:	f502 7204 	add.w	r2, r2, #528	@ 0x210
 8001fde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	330c      	adds	r3, #12
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4608      	mov	r0, r1
 8001fea:	4798      	blx	r3
 8001fec:	4603      	mov	r3, r0
 8001fee:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8001ff0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ff4:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681c      	ldr	r4, [r3, #0]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002000:	f502 7204 	add.w	r2, r2, #528	@ 0x210
 8002004:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800200c:	f502 7204 	add.w	r2, r2, #528	@ 0x210
 8002010:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	3304      	adds	r3, #4
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4608      	mov	r0, r1
 800201c:	4798      	blx	r3
 800201e:	4601      	mov	r1, r0
 8002020:	f107 030c 	add.w	r3, r7, #12
 8002024:	461a      	mov	r2, r3
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 800202a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800202c:	3301      	adds	r3, #1
 800202e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002032:	2b09      	cmp	r3, #9
 8002034:	dd9d      	ble.n	8001f72 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi1024ELi1024EE15negotiateTopicsEv+0xda>
      }
    }
    configured_ = true;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2201      	movs	r2, #1
 800203a:	f883 287c 	strb.w	r2, [r3, #2172]	@ 0x87c
  }
 800203e:	bf00      	nop
 8002040:	372c      	adds	r7, #44	@ 0x2c
 8002042:	46bd      	mov	sp, r7
 8002044:	bd90      	pop	{r4, r7, pc}
	...

08002048 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi1024ELi1024EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8002048:	b580      	push	{r7, lr}
 800204a:	b086      	sub	sp, #24
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8002052:	f107 0308 	add.w	r3, r7, #8
 8002056:	4618      	mov	r0, r3
 8002058:	f7fe fb5e 	bl	8000718 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	3304      	adds	r3, #4
 8002060:	4618      	mov	r0, r3
 8002062:	f7ff fb29 	bl	80016b8 <_ZN13STM32Hardware4timeEv>
 8002066:	4602      	mov	r2, r0
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8002070:	f107 0308 	add.w	r3, r7, #8
 8002074:	6839      	ldr	r1, [r7, #0]
 8002076:	4618      	mov	r0, r3
 8002078:	f7fe fbbe 	bl	80007f8 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 800207c:	68fa      	ldr	r2, [r7, #12]
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	4914      	ldr	r1, [pc, #80]	@ (80020d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi1024ELi1024EE8syncTimeEPh+0x8c>)
 8002082:	fba1 1303 	umull	r1, r3, r1, r3
 8002086:	099b      	lsrs	r3, r3, #6
 8002088:	4413      	add	r3, r2
 800208a:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 800208c:	6939      	ldr	r1, [r7, #16]
 800208e:	697a      	ldr	r2, [r7, #20]
 8002090:	4b10      	ldr	r3, [pc, #64]	@ (80020d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi1024ELi1024EE8syncTimeEPh+0x8c>)
 8002092:	fba3 0302 	umull	r0, r3, r3, r2
 8002096:	099b      	lsrs	r3, r3, #6
 8002098:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800209c:	fb00 f303 	mul.w	r3, r0, r3
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	4a0d      	ldr	r2, [pc, #52]	@ (80020d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi1024ELi1024EE8syncTimeEPh+0x90>)
 80020a4:	fb02 f303 	mul.w	r3, r2, r3
 80020a8:	440b      	add	r3, r1
 80020aa:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 80020ac:	f107 0308 	add.w	r3, r7, #8
 80020b0:	3304      	adds	r3, #4
 80020b2:	4619      	mov	r1, r3
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f000 f8a5 	bl	8002204 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi1024ELi1024EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	3304      	adds	r3, #4
 80020be:	4618      	mov	r0, r3
 80020c0:	f7ff fafa 	bl	80016b8 <_ZN13STM32Hardware4timeEv>
 80020c4:	4602      	mov	r2, r0
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	f8c3 2884 	str.w	r2, [r3, #2180]	@ 0x884
  }
 80020cc:	bf00      	nop
 80020ce:	3718      	adds	r7, #24
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	10624dd3 	.word	0x10624dd3
 80020d8:	000f4240 	.word	0x000f4240

080020dc <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi1024ELi1024EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 80020dc:	b580      	push	{r7, lr}
 80020de:	b088      	sub	sp, #32
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	60f8      	str	r0, [r7, #12]
 80020e4:	60b9      	str	r1, [r7, #8]
 80020e6:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	2b63      	cmp	r3, #99	@ 0x63
 80020ec:	dd09      	ble.n	8002102 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x26>
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	f893 387c 	ldrb.w	r3, [r3, #2172]	@ 0x87c
 80020f4:	f083 0301 	eor.w	r3, r3, #1
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 80020fe:	2300      	movs	r3, #0
 8002100:	e079      	b.n	80021f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	68fa      	ldr	r2, [r7, #12]
 800210a:	f502 6283 	add.w	r2, r2, #1048	@ 0x418
 800210e:	3207      	adds	r2, #7
 8002110:	4611      	mov	r1, r2
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	4798      	blx	r3
 8002116:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	22ff      	movs	r2, #255	@ 0xff
 800211c:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    message_out[1] = PROTOCOL_VER;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	22fe      	movs	r2, #254	@ 0xfe
 8002124:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	b2da      	uxtb	r2, r3
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	b29b      	uxth	r3, r3
 8002136:	0a1b      	lsrs	r3, r3, #8
 8002138:	b29b      	uxth	r3, r3
 800213a:	b2da      	uxtb	r2, r3
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	f883 241b 	strb.w	r2, [r3, #1051]	@ 0x41b
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	f893 241a 	ldrb.w	r2, [r3, #1050]	@ 0x41a
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	f893 341b 	ldrb.w	r3, [r3, #1051]	@ 0x41b
 800214e:	4413      	add	r3, r2
 8002150:	b2db      	uxtb	r3, r3
 8002152:	43db      	mvns	r3, r3
 8002154:	b2da      	uxtb	r2, r3
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
    message_out[5] = (uint8_t)((int16_t)id & 255);
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	b2da      	uxtb	r2, r3
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	b21b      	sxth	r3, r3
 800216a:	121b      	asrs	r3, r3, #8
 800216c:	b21b      	sxth	r3, r3
 800216e:	b2da      	uxtb	r2, r3
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	f883 241e 	strb.w	r2, [r3, #1054]	@ 0x41e

    /* calculate checksum */
    int chk = 0;
 8002176:	2300      	movs	r3, #0
 8002178:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 800217a:	2305      	movs	r3, #5
 800217c:	61bb      	str	r3, [r7, #24]
 800217e:	e00c      	b.n	800219a <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi1024ELi1024EE7publishEiPKNS_3MsgE+0xbe>
      chk += message_out[i];
 8002180:	68fa      	ldr	r2, [r7, #12]
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	4413      	add	r3, r2
 8002186:	f503 6383 	add.w	r3, r3, #1048	@ 0x418
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	461a      	mov	r2, r3
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	4413      	add	r3, r2
 8002192:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8002194:	69bb      	ldr	r3, [r7, #24]
 8002196:	3301      	adds	r3, #1
 8002198:	61bb      	str	r3, [r7, #24]
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	3306      	adds	r3, #6
 800219e:	69ba      	ldr	r2, [r7, #24]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	dded      	ble.n	8002180 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi1024ELi1024EE7publishEiPKNS_3MsgE+0xa4>
    l += 7;
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	3307      	adds	r3, #7
 80021a8:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	425a      	negs	r2, r3
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	b2d2      	uxtb	r2, r2
 80021b2:	bf58      	it	pl
 80021b4:	4253      	negpl	r3, r2
 80021b6:	b2da      	uxtb	r2, r3
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	1c59      	adds	r1, r3, #1
 80021bc:	6179      	str	r1, [r7, #20]
 80021be:	43d2      	mvns	r2, r2
 80021c0:	b2d1      	uxtb	r1, r2
 80021c2:	68fa      	ldr	r2, [r7, #12]
 80021c4:	4413      	add	r3, r2
 80021c6:	460a      	mov	r2, r1
 80021c8:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

    if (l <= OUTPUT_SIZE)
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021d2:	dc0a      	bgt.n	80021ea <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	1d18      	adds	r0, r3, #4
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	f503 6383 	add.w	r3, r3, #1048	@ 0x418
 80021de:	697a      	ldr	r2, [r7, #20]
 80021e0:	4619      	mov	r1, r3
 80021e2:	f7ff fa58 	bl	8001696 <_ZN13STM32Hardware5writeEPhi>
      return l;
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	e005      	b.n	80021f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 80021ea:	4905      	ldr	r1, [pc, #20]	@ (8002200 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x124>)
 80021ec:	68f8      	ldr	r0, [r7, #12]
 80021ee:	f000 f847 	bl	8002280 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi1024ELi1024EE8logerrorEPKc>
      return -1;
 80021f2:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 80021f6:	4618      	mov	r0, r3
 80021f8:	3720      	adds	r7, #32
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	080055d4 	.word	0x080055d4

08002204 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi1024ELi1024EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	3304      	adds	r3, #4
 8002212:	4618      	mov	r0, r3
 8002214:	f7ff fa50 	bl	80016b8 <_ZN13STM32Hardware4timeEv>
 8002218:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	4914      	ldr	r1, [pc, #80]	@ (8002274 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi1024ELi1024EE6setNowERKNS_4TimeE+0x70>)
 8002222:	fba1 1303 	umull	r1, r3, r1, r3
 8002226:	099b      	lsrs	r3, r3, #6
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	1e5a      	subs	r2, r3, #1
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	60da      	str	r2, [r3, #12]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	6859      	ldr	r1, [r3, #4]
 8002234:	68fa      	ldr	r2, [r7, #12]
 8002236:	4b0f      	ldr	r3, [pc, #60]	@ (8002274 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi1024ELi1024EE6setNowERKNS_4TimeE+0x70>)
 8002238:	fba3 0302 	umull	r0, r3, r3, r2
 800223c:	099b      	lsrs	r3, r3, #6
 800223e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002242:	fb00 f303 	mul.w	r3, r0, r3
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	4a0b      	ldr	r2, [pc, #44]	@ (8002278 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi1024ELi1024EE6setNowERKNS_4TimeE+0x74>)
 800224a:	fb02 f303 	mul.w	r3, r2, r3
 800224e:	1aca      	subs	r2, r1, r3
 8002250:	4b0a      	ldr	r3, [pc, #40]	@ (800227c <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi1024ELi1024EE6setNowERKNS_4TimeE+0x78>)
 8002252:	4413      	add	r3, r2
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	6113      	str	r3, [r2, #16]
    normalizeSecNSec(sec_offset, nsec_offset);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f103 020c 	add.w	r2, r3, #12
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	3310      	adds	r3, #16
 8002262:	4619      	mov	r1, r3
 8002264:	4610      	mov	r0, r2
 8002266:	f000 f9ed 	bl	8002644 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 800226a:	bf00      	nop
 800226c:	3710      	adds	r7, #16
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	10624dd3 	.word	0x10624dd3
 8002278:	000f4240 	.word	0x000f4240
 800227c:	3b9aca00 	.word	0x3b9aca00

08002280 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi1024ELi1024EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 800228a:	683a      	ldr	r2, [r7, #0]
 800228c:	2103      	movs	r1, #3
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f000 f804 	bl	800229c <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi1024ELi1024EE3logEcPKc>
  }
 8002294:	bf00      	nop
 8002296:	3708      	adds	r7, #8
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}

0800229c <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi1024ELi1024EE3logEcPKc>:
  void log(char byte, const char * msg)
 800229c:	b580      	push	{r7, lr}
 800229e:	b088      	sub	sp, #32
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	60f8      	str	r0, [r7, #12]
 80022a4:	460b      	mov	r3, r1
 80022a6:	607a      	str	r2, [r7, #4]
 80022a8:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 80022aa:	f107 0314 	add.w	r3, r7, #20
 80022ae:	4618      	mov	r0, r3
 80022b0:	f7fe fce6 	bl	8000c80 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 80022b4:	7afb      	ldrb	r3, [r7, #11]
 80022b6:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f107 0214 	add.w	r2, r7, #20
 80022c6:	2107      	movs	r1, #7
 80022c8:	68f8      	ldr	r0, [r7, #12]
 80022ca:	4798      	blx	r3
  }
 80022cc:	bf00      	nop
 80022ce:	3720      	adds	r7, #32
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <_Z41__static_initialization_and_destruction_0ii>:
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d114      	bne.n	800230e <_Z41__static_initialization_and_destruction_0ii+0x3a>
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d10f      	bne.n	800230e <_Z41__static_initialization_and_destruction_0ii+0x3a>
};

SerialComm comm_rosserial(huart_rosserial);
 80022ee:	490a      	ldr	r1, [pc, #40]	@ (8002318 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 80022f0:	480a      	ldr	r0, [pc, #40]	@ (800231c <_Z41__static_initialization_and_destruction_0ii+0x48>)
 80022f2:	f7ff f878 	bl	80013e6 <_ZN10SerialCommC1ER20__UART_HandleTypeDef>
ros::NodeHandle nh;
 80022f6:	480a      	ldr	r0, [pc, #40]	@ (8002320 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80022f8:	f7ff fa96 	bl	8001828 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi1024ELi1024EEC1Ev>
std_msgs::String str_msg;
 80022fc:	4809      	ldr	r0, [pc, #36]	@ (8002324 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80022fe:	f7ff f9e7 	bl	80016d0 <_ZN8std_msgs6StringC1Ev>
ros::Publisher chatter("chatter", &str_msg);
 8002302:	2300      	movs	r3, #0
 8002304:	4a07      	ldr	r2, [pc, #28]	@ (8002324 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8002306:	4908      	ldr	r1, [pc, #32]	@ (8002328 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8002308:	4808      	ldr	r0, [pc, #32]	@ (800232c <_Z41__static_initialization_and_destruction_0ii+0x58>)
 800230a:	f7ff f835 	bl	8001378 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 800230e:	bf00      	nop
 8002310:	3708      	adds	r7, #8
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	20000078 	.word	0x20000078
 800231c:	20000180 	.word	0x20000180
 8002320:	2000098c 	.word	0x2000098c
 8002324:	20001244 	.word	0x20001244
 8002328:	08005610 	.word	0x08005610
 800232c:	2000124c 	.word	0x2000124c

08002330 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi1024ELi1024EE9connectedEv>:
  virtual bool connected() override
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
    return configured_;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f893 387c 	ldrb.w	r3, [r3, #2172]	@ 0x87c
  };
 800233e:	4618      	mov	r0, r3
 8002340:	370c      	adds	r7, #12
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr

0800234a <_GLOBAL__sub_I_comm_rosserial>:
 800234a:	b580      	push	{r7, lr}
 800234c:	af00      	add	r7, sp, #0
 800234e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002352:	2001      	movs	r0, #1
 8002354:	f7ff ffbe 	bl	80022d4 <_Z41__static_initialization_and_destruction_0ii>
 8002358:	bd80      	pop	{r7, pc}
	...

0800235c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002362:	2300      	movs	r3, #0
 8002364:	607b      	str	r3, [r7, #4]
 8002366:	4b10      	ldr	r3, [pc, #64]	@ (80023a8 <HAL_MspInit+0x4c>)
 8002368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800236a:	4a0f      	ldr	r2, [pc, #60]	@ (80023a8 <HAL_MspInit+0x4c>)
 800236c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002370:	6453      	str	r3, [r2, #68]	@ 0x44
 8002372:	4b0d      	ldr	r3, [pc, #52]	@ (80023a8 <HAL_MspInit+0x4c>)
 8002374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002376:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800237a:	607b      	str	r3, [r7, #4]
 800237c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800237e:	2300      	movs	r3, #0
 8002380:	603b      	str	r3, [r7, #0]
 8002382:	4b09      	ldr	r3, [pc, #36]	@ (80023a8 <HAL_MspInit+0x4c>)
 8002384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002386:	4a08      	ldr	r2, [pc, #32]	@ (80023a8 <HAL_MspInit+0x4c>)
 8002388:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800238c:	6413      	str	r3, [r2, #64]	@ 0x40
 800238e:	4b06      	ldr	r3, [pc, #24]	@ (80023a8 <HAL_MspInit+0x4c>)
 8002390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002392:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002396:	603b      	str	r3, [r7, #0]
 8002398:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800239a:	bf00      	nop
 800239c:	370c      	adds	r7, #12
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	40023800 	.word	0x40023800

080023ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b08a      	sub	sp, #40	@ 0x28
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023b4:	f107 0314 	add.w	r3, r7, #20
 80023b8:	2200      	movs	r2, #0
 80023ba:	601a      	str	r2, [r3, #0]
 80023bc:	605a      	str	r2, [r3, #4]
 80023be:	609a      	str	r2, [r3, #8]
 80023c0:	60da      	str	r2, [r3, #12]
 80023c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a4c      	ldr	r2, [pc, #304]	@ (80024fc <HAL_UART_MspInit+0x150>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	f040 8092 	bne.w	80024f4 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80023d0:	2300      	movs	r3, #0
 80023d2:	613b      	str	r3, [r7, #16]
 80023d4:	4b4a      	ldr	r3, [pc, #296]	@ (8002500 <HAL_UART_MspInit+0x154>)
 80023d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023d8:	4a49      	ldr	r2, [pc, #292]	@ (8002500 <HAL_UART_MspInit+0x154>)
 80023da:	f043 0310 	orr.w	r3, r3, #16
 80023de:	6453      	str	r3, [r2, #68]	@ 0x44
 80023e0:	4b47      	ldr	r3, [pc, #284]	@ (8002500 <HAL_UART_MspInit+0x154>)
 80023e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023e4:	f003 0310 	and.w	r3, r3, #16
 80023e8:	613b      	str	r3, [r7, #16]
 80023ea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023ec:	2300      	movs	r3, #0
 80023ee:	60fb      	str	r3, [r7, #12]
 80023f0:	4b43      	ldr	r3, [pc, #268]	@ (8002500 <HAL_UART_MspInit+0x154>)
 80023f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023f4:	4a42      	ldr	r2, [pc, #264]	@ (8002500 <HAL_UART_MspInit+0x154>)
 80023f6:	f043 0302 	orr.w	r3, r3, #2
 80023fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80023fc:	4b40      	ldr	r3, [pc, #256]	@ (8002500 <HAL_UART_MspInit+0x154>)
 80023fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002400:	f003 0302 	and.w	r3, r3, #2
 8002404:	60fb      	str	r3, [r7, #12]
 8002406:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002408:	23c0      	movs	r3, #192	@ 0xc0
 800240a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800240c:	2302      	movs	r3, #2
 800240e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002410:	2300      	movs	r3, #0
 8002412:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002414:	2303      	movs	r3, #3
 8002416:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002418:	2307      	movs	r3, #7
 800241a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800241c:	f107 0314 	add.w	r3, r7, #20
 8002420:	4619      	mov	r1, r3
 8002422:	4838      	ldr	r0, [pc, #224]	@ (8002504 <HAL_UART_MspInit+0x158>)
 8002424:	f000 ff0e 	bl	8003244 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002428:	4b37      	ldr	r3, [pc, #220]	@ (8002508 <HAL_UART_MspInit+0x15c>)
 800242a:	4a38      	ldr	r2, [pc, #224]	@ (800250c <HAL_UART_MspInit+0x160>)
 800242c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800242e:	4b36      	ldr	r3, [pc, #216]	@ (8002508 <HAL_UART_MspInit+0x15c>)
 8002430:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002434:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002436:	4b34      	ldr	r3, [pc, #208]	@ (8002508 <HAL_UART_MspInit+0x15c>)
 8002438:	2200      	movs	r2, #0
 800243a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800243c:	4b32      	ldr	r3, [pc, #200]	@ (8002508 <HAL_UART_MspInit+0x15c>)
 800243e:	2200      	movs	r2, #0
 8002440:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002442:	4b31      	ldr	r3, [pc, #196]	@ (8002508 <HAL_UART_MspInit+0x15c>)
 8002444:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002448:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800244a:	4b2f      	ldr	r3, [pc, #188]	@ (8002508 <HAL_UART_MspInit+0x15c>)
 800244c:	2200      	movs	r2, #0
 800244e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002450:	4b2d      	ldr	r3, [pc, #180]	@ (8002508 <HAL_UART_MspInit+0x15c>)
 8002452:	2200      	movs	r2, #0
 8002454:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002456:	4b2c      	ldr	r3, [pc, #176]	@ (8002508 <HAL_UART_MspInit+0x15c>)
 8002458:	2200      	movs	r2, #0
 800245a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800245c:	4b2a      	ldr	r3, [pc, #168]	@ (8002508 <HAL_UART_MspInit+0x15c>)
 800245e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002462:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002464:	4b28      	ldr	r3, [pc, #160]	@ (8002508 <HAL_UART_MspInit+0x15c>)
 8002466:	2200      	movs	r2, #0
 8002468:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800246a:	4827      	ldr	r0, [pc, #156]	@ (8002508 <HAL_UART_MspInit+0x15c>)
 800246c:	f000 fae8 	bl	8002a40 <HAL_DMA_Init>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8002476:	f7fe f927 	bl	80006c8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a22      	ldr	r2, [pc, #136]	@ (8002508 <HAL_UART_MspInit+0x15c>)
 800247e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002480:	4a21      	ldr	r2, [pc, #132]	@ (8002508 <HAL_UART_MspInit+0x15c>)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8002486:	4b22      	ldr	r3, [pc, #136]	@ (8002510 <HAL_UART_MspInit+0x164>)
 8002488:	4a22      	ldr	r2, [pc, #136]	@ (8002514 <HAL_UART_MspInit+0x168>)
 800248a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 800248c:	4b20      	ldr	r3, [pc, #128]	@ (8002510 <HAL_UART_MspInit+0x164>)
 800248e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002492:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002494:	4b1e      	ldr	r3, [pc, #120]	@ (8002510 <HAL_UART_MspInit+0x164>)
 8002496:	2240      	movs	r2, #64	@ 0x40
 8002498:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800249a:	4b1d      	ldr	r3, [pc, #116]	@ (8002510 <HAL_UART_MspInit+0x164>)
 800249c:	2200      	movs	r2, #0
 800249e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80024a0:	4b1b      	ldr	r3, [pc, #108]	@ (8002510 <HAL_UART_MspInit+0x164>)
 80024a2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80024a6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024a8:	4b19      	ldr	r3, [pc, #100]	@ (8002510 <HAL_UART_MspInit+0x164>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024ae:	4b18      	ldr	r3, [pc, #96]	@ (8002510 <HAL_UART_MspInit+0x164>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80024b4:	4b16      	ldr	r3, [pc, #88]	@ (8002510 <HAL_UART_MspInit+0x164>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80024ba:	4b15      	ldr	r3, [pc, #84]	@ (8002510 <HAL_UART_MspInit+0x164>)
 80024bc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80024c0:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80024c2:	4b13      	ldr	r3, [pc, #76]	@ (8002510 <HAL_UART_MspInit+0x164>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80024c8:	4811      	ldr	r0, [pc, #68]	@ (8002510 <HAL_UART_MspInit+0x164>)
 80024ca:	f000 fab9 	bl	8002a40 <HAL_DMA_Init>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d001      	beq.n	80024d8 <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 80024d4:	f7fe f8f8 	bl	80006c8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	4a0d      	ldr	r2, [pc, #52]	@ (8002510 <HAL_UART_MspInit+0x164>)
 80024dc:	639a      	str	r2, [r3, #56]	@ 0x38
 80024de:	4a0c      	ldr	r2, [pc, #48]	@ (8002510 <HAL_UART_MspInit+0x164>)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80024e4:	2200      	movs	r2, #0
 80024e6:	2100      	movs	r1, #0
 80024e8:	2025      	movs	r0, #37	@ 0x25
 80024ea:	f000 fa72 	bl	80029d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80024ee:	2025      	movs	r0, #37	@ 0x25
 80024f0:	f000 fa8b 	bl	8002a0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80024f4:	bf00      	nop
 80024f6:	3728      	adds	r7, #40	@ 0x28
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	40011000 	.word	0x40011000
 8002500:	40023800 	.word	0x40023800
 8002504:	40020400 	.word	0x40020400
 8002508:	200000c0 	.word	0x200000c0
 800250c:	40026440 	.word	0x40026440
 8002510:	20000120 	.word	0x20000120
 8002514:	400264b8 	.word	0x400264b8

08002518 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002518:	b480      	push	{r7}
 800251a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800251c:	bf00      	nop
 800251e:	e7fd      	b.n	800251c <NMI_Handler+0x4>

08002520 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002524:	bf00      	nop
 8002526:	e7fd      	b.n	8002524 <HardFault_Handler+0x4>

08002528 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800252c:	bf00      	nop
 800252e:	e7fd      	b.n	800252c <MemManage_Handler+0x4>

08002530 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002534:	bf00      	nop
 8002536:	e7fd      	b.n	8002534 <BusFault_Handler+0x4>

08002538 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800253c:	bf00      	nop
 800253e:	e7fd      	b.n	800253c <UsageFault_Handler+0x4>

08002540 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002544:	bf00      	nop
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr

0800254e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800254e:	b480      	push	{r7}
 8002550:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002552:	bf00      	nop
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr

0800255c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002560:	bf00      	nop
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr

0800256a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800256a:	b580      	push	{r7, lr}
 800256c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800256e:	f000 f911 	bl	8002794 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002572:	bf00      	nop
 8002574:	bd80      	pop	{r7, pc}
	...

08002578 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart_rosserial);
 800257c:	4802      	ldr	r0, [pc, #8]	@ (8002588 <USART1_IRQHandler+0x10>)
 800257e:	f001 fd23 	bl	8003fc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002582:	bf00      	nop
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	20000078 	.word	0x20000078

0800258c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002590:	4802      	ldr	r0, [pc, #8]	@ (800259c <DMA2_Stream2_IRQHandler+0x10>)
 8002592:	f000 fbed 	bl	8002d70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002596:	bf00      	nop
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	200000c0 	.word	0x200000c0

080025a0 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80025a4:	4802      	ldr	r0, [pc, #8]	@ (80025b0 <DMA2_Stream7_IRQHandler+0x10>)
 80025a6:	f000 fbe3 	bl	8002d70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80025aa:	bf00      	nop
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	20000120 	.word	0x20000120

080025b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b086      	sub	sp, #24
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025bc:	4a14      	ldr	r2, [pc, #80]	@ (8002610 <_sbrk+0x5c>)
 80025be:	4b15      	ldr	r3, [pc, #84]	@ (8002614 <_sbrk+0x60>)
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025c8:	4b13      	ldr	r3, [pc, #76]	@ (8002618 <_sbrk+0x64>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d102      	bne.n	80025d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025d0:	4b11      	ldr	r3, [pc, #68]	@ (8002618 <_sbrk+0x64>)
 80025d2:	4a12      	ldr	r2, [pc, #72]	@ (800261c <_sbrk+0x68>)
 80025d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025d6:	4b10      	ldr	r3, [pc, #64]	@ (8002618 <_sbrk+0x64>)
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4413      	add	r3, r2
 80025de:	693a      	ldr	r2, [r7, #16]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d207      	bcs.n	80025f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025e4:	f002 fe18 	bl	8005218 <__errno>
 80025e8:	4603      	mov	r3, r0
 80025ea:	220c      	movs	r2, #12
 80025ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025ee:	f04f 33ff 	mov.w	r3, #4294967295
 80025f2:	e009      	b.n	8002608 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025f4:	4b08      	ldr	r3, [pc, #32]	@ (8002618 <_sbrk+0x64>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025fa:	4b07      	ldr	r3, [pc, #28]	@ (8002618 <_sbrk+0x64>)
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4413      	add	r3, r2
 8002602:	4a05      	ldr	r2, [pc, #20]	@ (8002618 <_sbrk+0x64>)
 8002604:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002606:	68fb      	ldr	r3, [r7, #12]
}
 8002608:	4618      	mov	r0, r3
 800260a:	3718      	adds	r7, #24
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	20020000 	.word	0x20020000
 8002614:	00000400 	.word	0x00000400
 8002618:	20001260 	.word	0x20001260
 800261c:	200013b0 	.word	0x200013b0

08002620 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002624:	4b06      	ldr	r3, [pc, #24]	@ (8002640 <SystemInit+0x20>)
 8002626:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800262a:	4a05      	ldr	r2, [pc, #20]	@ (8002640 <SystemInit+0x20>)
 800262c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002630:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002634:	bf00      	nop
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop
 8002640:	e000ed00 	.word	0xe000ed00

08002644 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8002644:	b480      	push	{r7}
 8002646:	b085      	sub	sp, #20
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	0a5a      	lsrs	r2, r3, #9
 8002654:	490f      	ldr	r1, [pc, #60]	@ (8002694 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8002656:	fba1 1202 	umull	r1, r2, r1, r2
 800265a:	09d2      	lsrs	r2, r2, #7
 800265c:	490e      	ldr	r1, [pc, #56]	@ (8002698 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800265e:	fb01 f202 	mul.w	r2, r1, r2
 8002662:	1a9b      	subs	r3, r3, r2
 8002664:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	0a5b      	lsrs	r3, r3, #9
 800266c:	4a09      	ldr	r2, [pc, #36]	@ (8002694 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800266e:	fba2 2303 	umull	r2, r3, r2, r3
 8002672:	09db      	lsrs	r3, r3, #7
 8002674:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	441a      	add	r2, r3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	68fa      	ldr	r2, [r7, #12]
 8002686:	601a      	str	r2, [r3, #0]
}
 8002688:	bf00      	nop
 800268a:	3714      	adds	r7, #20
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr
 8002694:	00044b83 	.word	0x00044b83
 8002698:	3b9aca00 	.word	0x3b9aca00

0800269c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800269c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80026d4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80026a0:	f7ff ffbe 	bl	8002620 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80026a4:	480c      	ldr	r0, [pc, #48]	@ (80026d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80026a6:	490d      	ldr	r1, [pc, #52]	@ (80026dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80026a8:	4a0d      	ldr	r2, [pc, #52]	@ (80026e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80026aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026ac:	e002      	b.n	80026b4 <LoopCopyDataInit>

080026ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026b2:	3304      	adds	r3, #4

080026b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026b8:	d3f9      	bcc.n	80026ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026ba:	4a0a      	ldr	r2, [pc, #40]	@ (80026e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80026bc:	4c0a      	ldr	r4, [pc, #40]	@ (80026e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80026be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026c0:	e001      	b.n	80026c6 <LoopFillZerobss>

080026c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026c4:	3204      	adds	r2, #4

080026c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026c8:	d3fb      	bcc.n	80026c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80026ca:	f002 fdab 	bl	8005224 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026ce:	f7fd ff03 	bl	80004d8 <main>
  bx  lr    
 80026d2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80026d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80026d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026dc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80026e0:	08005720 	.word	0x08005720
  ldr r2, =_sbss
 80026e4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80026e8:	200013b0 	.word	0x200013b0

080026ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026ec:	e7fe      	b.n	80026ec <ADC_IRQHandler>
	...

080026f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80026f4:	4b0e      	ldr	r3, [pc, #56]	@ (8002730 <HAL_Init+0x40>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a0d      	ldr	r2, [pc, #52]	@ (8002730 <HAL_Init+0x40>)
 80026fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80026fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002700:	4b0b      	ldr	r3, [pc, #44]	@ (8002730 <HAL_Init+0x40>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a0a      	ldr	r2, [pc, #40]	@ (8002730 <HAL_Init+0x40>)
 8002706:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800270a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800270c:	4b08      	ldr	r3, [pc, #32]	@ (8002730 <HAL_Init+0x40>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a07      	ldr	r2, [pc, #28]	@ (8002730 <HAL_Init+0x40>)
 8002712:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002716:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002718:	2003      	movs	r0, #3
 800271a:	f000 f94f 	bl	80029bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800271e:	200f      	movs	r0, #15
 8002720:	f000 f808 	bl	8002734 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002724:	f7ff fe1a 	bl	800235c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002728:	2300      	movs	r3, #0
}
 800272a:	4618      	mov	r0, r3
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	40023c00 	.word	0x40023c00

08002734 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800273c:	4b12      	ldr	r3, [pc, #72]	@ (8002788 <HAL_InitTick+0x54>)
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	4b12      	ldr	r3, [pc, #72]	@ (800278c <HAL_InitTick+0x58>)
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	4619      	mov	r1, r3
 8002746:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800274a:	fbb3 f3f1 	udiv	r3, r3, r1
 800274e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002752:	4618      	mov	r0, r3
 8002754:	f000 f967 	bl	8002a26 <HAL_SYSTICK_Config>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d001      	beq.n	8002762 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e00e      	b.n	8002780 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2b0f      	cmp	r3, #15
 8002766:	d80a      	bhi.n	800277e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002768:	2200      	movs	r2, #0
 800276a:	6879      	ldr	r1, [r7, #4]
 800276c:	f04f 30ff 	mov.w	r0, #4294967295
 8002770:	f000 f92f 	bl	80029d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002774:	4a06      	ldr	r2, [pc, #24]	@ (8002790 <HAL_InitTick+0x5c>)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800277a:	2300      	movs	r3, #0
 800277c:	e000      	b.n	8002780 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
}
 8002780:	4618      	mov	r0, r3
 8002782:	3708      	adds	r7, #8
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	20000000 	.word	0x20000000
 800278c:	20000008 	.word	0x20000008
 8002790:	20000004 	.word	0x20000004

08002794 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002798:	4b06      	ldr	r3, [pc, #24]	@ (80027b4 <HAL_IncTick+0x20>)
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	461a      	mov	r2, r3
 800279e:	4b06      	ldr	r3, [pc, #24]	@ (80027b8 <HAL_IncTick+0x24>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4413      	add	r3, r2
 80027a4:	4a04      	ldr	r2, [pc, #16]	@ (80027b8 <HAL_IncTick+0x24>)
 80027a6:	6013      	str	r3, [r2, #0]
}
 80027a8:	bf00      	nop
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	20000008 	.word	0x20000008
 80027b8:	20001264 	.word	0x20001264

080027bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
  return uwTick;
 80027c0:	4b03      	ldr	r3, [pc, #12]	@ (80027d0 <HAL_GetTick+0x14>)
 80027c2:	681b      	ldr	r3, [r3, #0]
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	20001264 	.word	0x20001264

080027d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027dc:	f7ff ffee 	bl	80027bc <HAL_GetTick>
 80027e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027ec:	d005      	beq.n	80027fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002818 <HAL_Delay+0x44>)
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	461a      	mov	r2, r3
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	4413      	add	r3, r2
 80027f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80027fa:	bf00      	nop
 80027fc:	f7ff ffde 	bl	80027bc <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	68fa      	ldr	r2, [r7, #12]
 8002808:	429a      	cmp	r2, r3
 800280a:	d8f7      	bhi.n	80027fc <HAL_Delay+0x28>
  {
  }
}
 800280c:	bf00      	nop
 800280e:	bf00      	nop
 8002810:	3710      	adds	r7, #16
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	20000008 	.word	0x20000008

0800281c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800281c:	b480      	push	{r7}
 800281e:	b085      	sub	sp, #20
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f003 0307 	and.w	r3, r3, #7
 800282a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800282c:	4b0c      	ldr	r3, [pc, #48]	@ (8002860 <__NVIC_SetPriorityGrouping+0x44>)
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002832:	68ba      	ldr	r2, [r7, #8]
 8002834:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002838:	4013      	ands	r3, r2
 800283a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002844:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002848:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800284c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800284e:	4a04      	ldr	r2, [pc, #16]	@ (8002860 <__NVIC_SetPriorityGrouping+0x44>)
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	60d3      	str	r3, [r2, #12]
}
 8002854:	bf00      	nop
 8002856:	3714      	adds	r7, #20
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr
 8002860:	e000ed00 	.word	0xe000ed00

08002864 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002864:	b480      	push	{r7}
 8002866:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002868:	4b04      	ldr	r3, [pc, #16]	@ (800287c <__NVIC_GetPriorityGrouping+0x18>)
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	0a1b      	lsrs	r3, r3, #8
 800286e:	f003 0307 	and.w	r3, r3, #7
}
 8002872:	4618      	mov	r0, r3
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr
 800287c:	e000ed00 	.word	0xe000ed00

08002880 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	4603      	mov	r3, r0
 8002888:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800288a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800288e:	2b00      	cmp	r3, #0
 8002890:	db0b      	blt.n	80028aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002892:	79fb      	ldrb	r3, [r7, #7]
 8002894:	f003 021f 	and.w	r2, r3, #31
 8002898:	4907      	ldr	r1, [pc, #28]	@ (80028b8 <__NVIC_EnableIRQ+0x38>)
 800289a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800289e:	095b      	lsrs	r3, r3, #5
 80028a0:	2001      	movs	r0, #1
 80028a2:	fa00 f202 	lsl.w	r2, r0, r2
 80028a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80028aa:	bf00      	nop
 80028ac:	370c      	adds	r7, #12
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	e000e100 	.word	0xe000e100

080028bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	4603      	mov	r3, r0
 80028c4:	6039      	str	r1, [r7, #0]
 80028c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	db0a      	blt.n	80028e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	b2da      	uxtb	r2, r3
 80028d4:	490c      	ldr	r1, [pc, #48]	@ (8002908 <__NVIC_SetPriority+0x4c>)
 80028d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028da:	0112      	lsls	r2, r2, #4
 80028dc:	b2d2      	uxtb	r2, r2
 80028de:	440b      	add	r3, r1
 80028e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028e4:	e00a      	b.n	80028fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	b2da      	uxtb	r2, r3
 80028ea:	4908      	ldr	r1, [pc, #32]	@ (800290c <__NVIC_SetPriority+0x50>)
 80028ec:	79fb      	ldrb	r3, [r7, #7]
 80028ee:	f003 030f 	and.w	r3, r3, #15
 80028f2:	3b04      	subs	r3, #4
 80028f4:	0112      	lsls	r2, r2, #4
 80028f6:	b2d2      	uxtb	r2, r2
 80028f8:	440b      	add	r3, r1
 80028fa:	761a      	strb	r2, [r3, #24]
}
 80028fc:	bf00      	nop
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr
 8002908:	e000e100 	.word	0xe000e100
 800290c:	e000ed00 	.word	0xe000ed00

08002910 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002910:	b480      	push	{r7}
 8002912:	b089      	sub	sp, #36	@ 0x24
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f003 0307 	and.w	r3, r3, #7
 8002922:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	f1c3 0307 	rsb	r3, r3, #7
 800292a:	2b04      	cmp	r3, #4
 800292c:	bf28      	it	cs
 800292e:	2304      	movcs	r3, #4
 8002930:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	3304      	adds	r3, #4
 8002936:	2b06      	cmp	r3, #6
 8002938:	d902      	bls.n	8002940 <NVIC_EncodePriority+0x30>
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	3b03      	subs	r3, #3
 800293e:	e000      	b.n	8002942 <NVIC_EncodePriority+0x32>
 8002940:	2300      	movs	r3, #0
 8002942:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002944:	f04f 32ff 	mov.w	r2, #4294967295
 8002948:	69bb      	ldr	r3, [r7, #24]
 800294a:	fa02 f303 	lsl.w	r3, r2, r3
 800294e:	43da      	mvns	r2, r3
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	401a      	ands	r2, r3
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002958:	f04f 31ff 	mov.w	r1, #4294967295
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	fa01 f303 	lsl.w	r3, r1, r3
 8002962:	43d9      	mvns	r1, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002968:	4313      	orrs	r3, r2
         );
}
 800296a:	4618      	mov	r0, r3
 800296c:	3724      	adds	r7, #36	@ 0x24
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
	...

08002978 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	3b01      	subs	r3, #1
 8002984:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002988:	d301      	bcc.n	800298e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800298a:	2301      	movs	r3, #1
 800298c:	e00f      	b.n	80029ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800298e:	4a0a      	ldr	r2, [pc, #40]	@ (80029b8 <SysTick_Config+0x40>)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	3b01      	subs	r3, #1
 8002994:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002996:	210f      	movs	r1, #15
 8002998:	f04f 30ff 	mov.w	r0, #4294967295
 800299c:	f7ff ff8e 	bl	80028bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029a0:	4b05      	ldr	r3, [pc, #20]	@ (80029b8 <SysTick_Config+0x40>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029a6:	4b04      	ldr	r3, [pc, #16]	@ (80029b8 <SysTick_Config+0x40>)
 80029a8:	2207      	movs	r2, #7
 80029aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3708      	adds	r7, #8
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	e000e010 	.word	0xe000e010

080029bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f7ff ff29 	bl	800281c <__NVIC_SetPriorityGrouping>
}
 80029ca:	bf00      	nop
 80029cc:	3708      	adds	r7, #8
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}

080029d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029d2:	b580      	push	{r7, lr}
 80029d4:	b086      	sub	sp, #24
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	4603      	mov	r3, r0
 80029da:	60b9      	str	r1, [r7, #8]
 80029dc:	607a      	str	r2, [r7, #4]
 80029de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029e0:	2300      	movs	r3, #0
 80029e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029e4:	f7ff ff3e 	bl	8002864 <__NVIC_GetPriorityGrouping>
 80029e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	68b9      	ldr	r1, [r7, #8]
 80029ee:	6978      	ldr	r0, [r7, #20]
 80029f0:	f7ff ff8e 	bl	8002910 <NVIC_EncodePriority>
 80029f4:	4602      	mov	r2, r0
 80029f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029fa:	4611      	mov	r1, r2
 80029fc:	4618      	mov	r0, r3
 80029fe:	f7ff ff5d 	bl	80028bc <__NVIC_SetPriority>
}
 8002a02:	bf00      	nop
 8002a04:	3718      	adds	r7, #24
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}

08002a0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a0a:	b580      	push	{r7, lr}
 8002a0c:	b082      	sub	sp, #8
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	4603      	mov	r3, r0
 8002a12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7ff ff31 	bl	8002880 <__NVIC_EnableIRQ>
}
 8002a1e:	bf00      	nop
 8002a20:	3708      	adds	r7, #8
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}

08002a26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a26:	b580      	push	{r7, lr}
 8002a28:	b082      	sub	sp, #8
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f7ff ffa2 	bl	8002978 <SysTick_Config>
 8002a34:	4603      	mov	r3, r0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3708      	adds	r7, #8
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
	...

08002a40 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b086      	sub	sp, #24
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002a4c:	f7ff feb6 	bl	80027bc <HAL_GetTick>
 8002a50:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d101      	bne.n	8002a5c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e099      	b.n	8002b90 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2202      	movs	r2, #2
 8002a60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f022 0201 	bic.w	r2, r2, #1
 8002a7a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a7c:	e00f      	b.n	8002a9e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a7e:	f7ff fe9d 	bl	80027bc <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	2b05      	cmp	r3, #5
 8002a8a:	d908      	bls.n	8002a9e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2220      	movs	r2, #32
 8002a90:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2203      	movs	r2, #3
 8002a96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e078      	b.n	8002b90 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0301 	and.w	r3, r3, #1
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d1e8      	bne.n	8002a7e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002ab4:	697a      	ldr	r2, [r7, #20]
 8002ab6:	4b38      	ldr	r3, [pc, #224]	@ (8002b98 <HAL_DMA_Init+0x158>)
 8002ab8:	4013      	ands	r3, r2
 8002aba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	685a      	ldr	r2, [r3, #4]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002aca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	691b      	ldr	r3, [r3, #16]
 8002ad0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ad6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	699b      	ldr	r3, [r3, #24]
 8002adc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ae2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6a1b      	ldr	r3, [r3, #32]
 8002ae8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002aea:	697a      	ldr	r2, [r7, #20]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002af4:	2b04      	cmp	r3, #4
 8002af6:	d107      	bne.n	8002b08 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b00:	4313      	orrs	r3, r2
 8002b02:	697a      	ldr	r2, [r7, #20]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	697a      	ldr	r2, [r7, #20]
 8002b0e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	695b      	ldr	r3, [r3, #20]
 8002b16:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	f023 0307 	bic.w	r3, r3, #7
 8002b1e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b24:	697a      	ldr	r2, [r7, #20]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b2e:	2b04      	cmp	r3, #4
 8002b30:	d117      	bne.n	8002b62 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b36:	697a      	ldr	r2, [r7, #20]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d00e      	beq.n	8002b62 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f000 fb01 	bl	800314c <DMA_CheckFifoParam>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d008      	beq.n	8002b62 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2240      	movs	r2, #64	@ 0x40
 8002b54:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2201      	movs	r2, #1
 8002b5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e016      	b.n	8002b90 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	697a      	ldr	r2, [r7, #20]
 8002b68:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 fab8 	bl	80030e0 <DMA_CalcBaseAndBitshift>
 8002b70:	4603      	mov	r3, r0
 8002b72:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b78:	223f      	movs	r2, #63	@ 0x3f
 8002b7a:	409a      	lsls	r2, r3
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2201      	movs	r2, #1
 8002b8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002b8e:	2300      	movs	r3, #0
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3718      	adds	r7, #24
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	f010803f 	.word	0xf010803f

08002b9c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b086      	sub	sp, #24
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	607a      	str	r2, [r7, #4]
 8002ba8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002baa:	2300      	movs	r3, #0
 8002bac:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bb2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d101      	bne.n	8002bc2 <HAL_DMA_Start_IT+0x26>
 8002bbe:	2302      	movs	r3, #2
 8002bc0:	e040      	b.n	8002c44 <HAL_DMA_Start_IT+0xa8>
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d12f      	bne.n	8002c36 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2202      	movs	r2, #2
 8002bda:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2200      	movs	r2, #0
 8002be2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	68b9      	ldr	r1, [r7, #8]
 8002bea:	68f8      	ldr	r0, [r7, #12]
 8002bec:	f000 fa4a 	bl	8003084 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bf4:	223f      	movs	r2, #63	@ 0x3f
 8002bf6:	409a      	lsls	r2, r3
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f042 0216 	orr.w	r2, r2, #22
 8002c0a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d007      	beq.n	8002c24 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f042 0208 	orr.w	r2, r2, #8
 8002c22:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f042 0201 	orr.w	r2, r2, #1
 8002c32:	601a      	str	r2, [r3, #0]
 8002c34:	e005      	b.n	8002c42 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002c3e:	2302      	movs	r3, #2
 8002c40:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002c42:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3718      	adds	r7, #24
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c58:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002c5a:	f7ff fdaf 	bl	80027bc <HAL_GetTick>
 8002c5e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d008      	beq.n	8002c7e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2280      	movs	r2, #128	@ 0x80
 8002c70:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e052      	b.n	8002d24 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f022 0216 	bic.w	r2, r2, #22
 8002c8c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	695a      	ldr	r2, [r3, #20]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002c9c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d103      	bne.n	8002cae <HAL_DMA_Abort+0x62>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d007      	beq.n	8002cbe <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f022 0208 	bic.w	r2, r2, #8
 8002cbc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f022 0201 	bic.w	r2, r2, #1
 8002ccc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cce:	e013      	b.n	8002cf8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002cd0:	f7ff fd74 	bl	80027bc <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	2b05      	cmp	r3, #5
 8002cdc:	d90c      	bls.n	8002cf8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2220      	movs	r2, #32
 8002ce2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2203      	movs	r2, #3
 8002ce8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	e015      	b.n	8002d24 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0301 	and.w	r3, r3, #1
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d1e4      	bne.n	8002cd0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d0a:	223f      	movs	r2, #63	@ 0x3f
 8002d0c:	409a      	lsls	r2, r3
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2201      	movs	r2, #1
 8002d16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002d22:	2300      	movs	r3, #0
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3710      	adds	r7, #16
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d004      	beq.n	8002d4a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2280      	movs	r2, #128	@ 0x80
 8002d44:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e00c      	b.n	8002d64 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2205      	movs	r2, #5
 8002d4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f022 0201 	bic.w	r2, r2, #1
 8002d60:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002d62:	2300      	movs	r3, #0
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr

08002d70 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b086      	sub	sp, #24
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002d7c:	4b8e      	ldr	r3, [pc, #568]	@ (8002fb8 <HAL_DMA_IRQHandler+0x248>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a8e      	ldr	r2, [pc, #568]	@ (8002fbc <HAL_DMA_IRQHandler+0x24c>)
 8002d82:	fba2 2303 	umull	r2, r3, r2, r3
 8002d86:	0a9b      	lsrs	r3, r3, #10
 8002d88:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d8e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d9a:	2208      	movs	r2, #8
 8002d9c:	409a      	lsls	r2, r3
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	4013      	ands	r3, r2
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d01a      	beq.n	8002ddc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0304 	and.w	r3, r3, #4
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d013      	beq.n	8002ddc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f022 0204 	bic.w	r2, r2, #4
 8002dc2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dc8:	2208      	movs	r2, #8
 8002dca:	409a      	lsls	r2, r3
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dd4:	f043 0201 	orr.w	r2, r3, #1
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002de0:	2201      	movs	r2, #1
 8002de2:	409a      	lsls	r2, r3
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	4013      	ands	r3, r2
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d012      	beq.n	8002e12 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	695b      	ldr	r3, [r3, #20]
 8002df2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d00b      	beq.n	8002e12 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dfe:	2201      	movs	r2, #1
 8002e00:	409a      	lsls	r2, r3
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e0a:	f043 0202 	orr.w	r2, r3, #2
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e16:	2204      	movs	r2, #4
 8002e18:	409a      	lsls	r2, r3
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d012      	beq.n	8002e48 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0302 	and.w	r3, r3, #2
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d00b      	beq.n	8002e48 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e34:	2204      	movs	r2, #4
 8002e36:	409a      	lsls	r2, r3
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e40:	f043 0204 	orr.w	r2, r3, #4
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e4c:	2210      	movs	r2, #16
 8002e4e:	409a      	lsls	r2, r3
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	4013      	ands	r3, r2
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d043      	beq.n	8002ee0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0308 	and.w	r3, r3, #8
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d03c      	beq.n	8002ee0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e6a:	2210      	movs	r2, #16
 8002e6c:	409a      	lsls	r2, r3
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d018      	beq.n	8002eb2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d108      	bne.n	8002ea0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d024      	beq.n	8002ee0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	4798      	blx	r3
 8002e9e:	e01f      	b.n	8002ee0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d01b      	beq.n	8002ee0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	4798      	blx	r3
 8002eb0:	e016      	b.n	8002ee0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d107      	bne.n	8002ed0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f022 0208 	bic.w	r2, r2, #8
 8002ece:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d003      	beq.n	8002ee0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ee4:	2220      	movs	r2, #32
 8002ee6:	409a      	lsls	r2, r3
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	4013      	ands	r3, r2
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	f000 808f 	beq.w	8003010 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0310 	and.w	r3, r3, #16
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	f000 8087 	beq.w	8003010 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f06:	2220      	movs	r2, #32
 8002f08:	409a      	lsls	r2, r3
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	2b05      	cmp	r3, #5
 8002f18:	d136      	bne.n	8002f88 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f022 0216 	bic.w	r2, r2, #22
 8002f28:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	695a      	ldr	r2, [r3, #20]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002f38:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d103      	bne.n	8002f4a <HAL_DMA_IRQHandler+0x1da>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d007      	beq.n	8002f5a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f022 0208 	bic.w	r2, r2, #8
 8002f58:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f5e:	223f      	movs	r2, #63	@ 0x3f
 8002f60:	409a      	lsls	r2, r3
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2201      	movs	r2, #1
 8002f6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d07e      	beq.n	800307c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	4798      	blx	r3
        }
        return;
 8002f86:	e079      	b.n	800307c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d01d      	beq.n	8002fd2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d10d      	bne.n	8002fc0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d031      	beq.n	8003010 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	4798      	blx	r3
 8002fb4:	e02c      	b.n	8003010 <HAL_DMA_IRQHandler+0x2a0>
 8002fb6:	bf00      	nop
 8002fb8:	20000000 	.word	0x20000000
 8002fbc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d023      	beq.n	8003010 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	4798      	blx	r3
 8002fd0:	e01e      	b.n	8003010 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d10f      	bne.n	8003000 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f022 0210 	bic.w	r2, r2, #16
 8002fee:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003004:	2b00      	cmp	r3, #0
 8003006:	d003      	beq.n	8003010 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003014:	2b00      	cmp	r3, #0
 8003016:	d032      	beq.n	800307e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800301c:	f003 0301 	and.w	r3, r3, #1
 8003020:	2b00      	cmp	r3, #0
 8003022:	d022      	beq.n	800306a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2205      	movs	r2, #5
 8003028:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f022 0201 	bic.w	r2, r2, #1
 800303a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	3301      	adds	r3, #1
 8003040:	60bb      	str	r3, [r7, #8]
 8003042:	697a      	ldr	r2, [r7, #20]
 8003044:	429a      	cmp	r2, r3
 8003046:	d307      	bcc.n	8003058 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0301 	and.w	r3, r3, #1
 8003052:	2b00      	cmp	r3, #0
 8003054:	d1f2      	bne.n	800303c <HAL_DMA_IRQHandler+0x2cc>
 8003056:	e000      	b.n	800305a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003058:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2201      	movs	r2, #1
 800305e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800306e:	2b00      	cmp	r3, #0
 8003070:	d005      	beq.n	800307e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	4798      	blx	r3
 800307a:	e000      	b.n	800307e <HAL_DMA_IRQHandler+0x30e>
        return;
 800307c:	bf00      	nop
    }
  }
}
 800307e:	3718      	adds	r7, #24
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}

08003084 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003084:	b480      	push	{r7}
 8003086:	b085      	sub	sp, #20
 8003088:	af00      	add	r7, sp, #0
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	60b9      	str	r1, [r7, #8]
 800308e:	607a      	str	r2, [r7, #4]
 8003090:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80030a0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	683a      	ldr	r2, [r7, #0]
 80030a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	2b40      	cmp	r3, #64	@ 0x40
 80030b0:	d108      	bne.n	80030c4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	68ba      	ldr	r2, [r7, #8]
 80030c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80030c2:	e007      	b.n	80030d4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	68ba      	ldr	r2, [r7, #8]
 80030ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	60da      	str	r2, [r3, #12]
}
 80030d4:	bf00      	nop
 80030d6:	3714      	adds	r7, #20
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr

080030e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b085      	sub	sp, #20
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	3b10      	subs	r3, #16
 80030f0:	4a14      	ldr	r2, [pc, #80]	@ (8003144 <DMA_CalcBaseAndBitshift+0x64>)
 80030f2:	fba2 2303 	umull	r2, r3, r2, r3
 80030f6:	091b      	lsrs	r3, r3, #4
 80030f8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80030fa:	4a13      	ldr	r2, [pc, #76]	@ (8003148 <DMA_CalcBaseAndBitshift+0x68>)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	4413      	add	r3, r2
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	461a      	mov	r2, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2b03      	cmp	r3, #3
 800310c:	d909      	bls.n	8003122 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003116:	f023 0303 	bic.w	r3, r3, #3
 800311a:	1d1a      	adds	r2, r3, #4
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	659a      	str	r2, [r3, #88]	@ 0x58
 8003120:	e007      	b.n	8003132 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800312a:	f023 0303 	bic.w	r3, r3, #3
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003136:	4618      	mov	r0, r3
 8003138:	3714      	adds	r7, #20
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr
 8003142:	bf00      	nop
 8003144:	aaaaaaab 	.word	0xaaaaaaab
 8003148:	08005704 	.word	0x08005704

0800314c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800314c:	b480      	push	{r7}
 800314e:	b085      	sub	sp, #20
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003154:	2300      	movs	r3, #0
 8003156:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800315c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	699b      	ldr	r3, [r3, #24]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d11f      	bne.n	80031a6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	2b03      	cmp	r3, #3
 800316a:	d856      	bhi.n	800321a <DMA_CheckFifoParam+0xce>
 800316c:	a201      	add	r2, pc, #4	@ (adr r2, 8003174 <DMA_CheckFifoParam+0x28>)
 800316e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003172:	bf00      	nop
 8003174:	08003185 	.word	0x08003185
 8003178:	08003197 	.word	0x08003197
 800317c:	08003185 	.word	0x08003185
 8003180:	0800321b 	.word	0x0800321b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003188:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d046      	beq.n	800321e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003194:	e043      	b.n	800321e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800319a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800319e:	d140      	bne.n	8003222 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031a4:	e03d      	b.n	8003222 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	699b      	ldr	r3, [r3, #24]
 80031aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031ae:	d121      	bne.n	80031f4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	2b03      	cmp	r3, #3
 80031b4:	d837      	bhi.n	8003226 <DMA_CheckFifoParam+0xda>
 80031b6:	a201      	add	r2, pc, #4	@ (adr r2, 80031bc <DMA_CheckFifoParam+0x70>)
 80031b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031bc:	080031cd 	.word	0x080031cd
 80031c0:	080031d3 	.word	0x080031d3
 80031c4:	080031cd 	.word	0x080031cd
 80031c8:	080031e5 	.word	0x080031e5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	73fb      	strb	r3, [r7, #15]
      break;
 80031d0:	e030      	b.n	8003234 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031d6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d025      	beq.n	800322a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031e2:	e022      	b.n	800322a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031e8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80031ec:	d11f      	bne.n	800322e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80031f2:	e01c      	b.n	800322e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d903      	bls.n	8003202 <DMA_CheckFifoParam+0xb6>
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	2b03      	cmp	r3, #3
 80031fe:	d003      	beq.n	8003208 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003200:	e018      	b.n	8003234 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	73fb      	strb	r3, [r7, #15]
      break;
 8003206:	e015      	b.n	8003234 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800320c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003210:	2b00      	cmp	r3, #0
 8003212:	d00e      	beq.n	8003232 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	73fb      	strb	r3, [r7, #15]
      break;
 8003218:	e00b      	b.n	8003232 <DMA_CheckFifoParam+0xe6>
      break;
 800321a:	bf00      	nop
 800321c:	e00a      	b.n	8003234 <DMA_CheckFifoParam+0xe8>
      break;
 800321e:	bf00      	nop
 8003220:	e008      	b.n	8003234 <DMA_CheckFifoParam+0xe8>
      break;
 8003222:	bf00      	nop
 8003224:	e006      	b.n	8003234 <DMA_CheckFifoParam+0xe8>
      break;
 8003226:	bf00      	nop
 8003228:	e004      	b.n	8003234 <DMA_CheckFifoParam+0xe8>
      break;
 800322a:	bf00      	nop
 800322c:	e002      	b.n	8003234 <DMA_CheckFifoParam+0xe8>
      break;   
 800322e:	bf00      	nop
 8003230:	e000      	b.n	8003234 <DMA_CheckFifoParam+0xe8>
      break;
 8003232:	bf00      	nop
    }
  } 
  
  return status; 
 8003234:	7bfb      	ldrb	r3, [r7, #15]
}
 8003236:	4618      	mov	r0, r3
 8003238:	3714      	adds	r7, #20
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr
 8003242:	bf00      	nop

08003244 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003244:	b480      	push	{r7}
 8003246:	b089      	sub	sp, #36	@ 0x24
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800324e:	2300      	movs	r3, #0
 8003250:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003252:	2300      	movs	r3, #0
 8003254:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003256:	2300      	movs	r3, #0
 8003258:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800325a:	2300      	movs	r3, #0
 800325c:	61fb      	str	r3, [r7, #28]
 800325e:	e159      	b.n	8003514 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003260:	2201      	movs	r2, #1
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	fa02 f303 	lsl.w	r3, r2, r3
 8003268:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	697a      	ldr	r2, [r7, #20]
 8003270:	4013      	ands	r3, r2
 8003272:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003274:	693a      	ldr	r2, [r7, #16]
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	429a      	cmp	r2, r3
 800327a:	f040 8148 	bne.w	800350e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	f003 0303 	and.w	r3, r3, #3
 8003286:	2b01      	cmp	r3, #1
 8003288:	d005      	beq.n	8003296 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003292:	2b02      	cmp	r3, #2
 8003294:	d130      	bne.n	80032f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	005b      	lsls	r3, r3, #1
 80032a0:	2203      	movs	r2, #3
 80032a2:	fa02 f303 	lsl.w	r3, r2, r3
 80032a6:	43db      	mvns	r3, r3
 80032a8:	69ba      	ldr	r2, [r7, #24]
 80032aa:	4013      	ands	r3, r2
 80032ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	68da      	ldr	r2, [r3, #12]
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	005b      	lsls	r3, r3, #1
 80032b6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ba:	69ba      	ldr	r2, [r7, #24]
 80032bc:	4313      	orrs	r3, r2
 80032be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	69ba      	ldr	r2, [r7, #24]
 80032c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032cc:	2201      	movs	r2, #1
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	fa02 f303 	lsl.w	r3, r2, r3
 80032d4:	43db      	mvns	r3, r3
 80032d6:	69ba      	ldr	r2, [r7, #24]
 80032d8:	4013      	ands	r3, r2
 80032da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	091b      	lsrs	r3, r3, #4
 80032e2:	f003 0201 	and.w	r2, r3, #1
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ec:	69ba      	ldr	r2, [r7, #24]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	69ba      	ldr	r2, [r7, #24]
 80032f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f003 0303 	and.w	r3, r3, #3
 8003300:	2b03      	cmp	r3, #3
 8003302:	d017      	beq.n	8003334 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	005b      	lsls	r3, r3, #1
 800330e:	2203      	movs	r2, #3
 8003310:	fa02 f303 	lsl.w	r3, r2, r3
 8003314:	43db      	mvns	r3, r3
 8003316:	69ba      	ldr	r2, [r7, #24]
 8003318:	4013      	ands	r3, r2
 800331a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	689a      	ldr	r2, [r3, #8]
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	005b      	lsls	r3, r3, #1
 8003324:	fa02 f303 	lsl.w	r3, r2, r3
 8003328:	69ba      	ldr	r2, [r7, #24]
 800332a:	4313      	orrs	r3, r2
 800332c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	69ba      	ldr	r2, [r7, #24]
 8003332:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f003 0303 	and.w	r3, r3, #3
 800333c:	2b02      	cmp	r3, #2
 800333e:	d123      	bne.n	8003388 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	08da      	lsrs	r2, r3, #3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	3208      	adds	r2, #8
 8003348:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800334c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	f003 0307 	and.w	r3, r3, #7
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	220f      	movs	r2, #15
 8003358:	fa02 f303 	lsl.w	r3, r2, r3
 800335c:	43db      	mvns	r3, r3
 800335e:	69ba      	ldr	r2, [r7, #24]
 8003360:	4013      	ands	r3, r2
 8003362:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	691a      	ldr	r2, [r3, #16]
 8003368:	69fb      	ldr	r3, [r7, #28]
 800336a:	f003 0307 	and.w	r3, r3, #7
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	fa02 f303 	lsl.w	r3, r2, r3
 8003374:	69ba      	ldr	r2, [r7, #24]
 8003376:	4313      	orrs	r3, r2
 8003378:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	08da      	lsrs	r2, r3, #3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	3208      	adds	r2, #8
 8003382:	69b9      	ldr	r1, [r7, #24]
 8003384:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	005b      	lsls	r3, r3, #1
 8003392:	2203      	movs	r2, #3
 8003394:	fa02 f303 	lsl.w	r3, r2, r3
 8003398:	43db      	mvns	r3, r3
 800339a:	69ba      	ldr	r2, [r7, #24]
 800339c:	4013      	ands	r3, r2
 800339e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f003 0203 	and.w	r2, r3, #3
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	005b      	lsls	r3, r3, #1
 80033ac:	fa02 f303 	lsl.w	r3, r2, r3
 80033b0:	69ba      	ldr	r2, [r7, #24]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	69ba      	ldr	r2, [r7, #24]
 80033ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	f000 80a2 	beq.w	800350e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033ca:	2300      	movs	r3, #0
 80033cc:	60fb      	str	r3, [r7, #12]
 80033ce:	4b57      	ldr	r3, [pc, #348]	@ (800352c <HAL_GPIO_Init+0x2e8>)
 80033d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033d2:	4a56      	ldr	r2, [pc, #344]	@ (800352c <HAL_GPIO_Init+0x2e8>)
 80033d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80033d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80033da:	4b54      	ldr	r3, [pc, #336]	@ (800352c <HAL_GPIO_Init+0x2e8>)
 80033dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033e2:	60fb      	str	r3, [r7, #12]
 80033e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80033e6:	4a52      	ldr	r2, [pc, #328]	@ (8003530 <HAL_GPIO_Init+0x2ec>)
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	089b      	lsrs	r3, r3, #2
 80033ec:	3302      	adds	r3, #2
 80033ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	f003 0303 	and.w	r3, r3, #3
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	220f      	movs	r2, #15
 80033fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003402:	43db      	mvns	r3, r3
 8003404:	69ba      	ldr	r2, [r7, #24]
 8003406:	4013      	ands	r3, r2
 8003408:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a49      	ldr	r2, [pc, #292]	@ (8003534 <HAL_GPIO_Init+0x2f0>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d019      	beq.n	8003446 <HAL_GPIO_Init+0x202>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a48      	ldr	r2, [pc, #288]	@ (8003538 <HAL_GPIO_Init+0x2f4>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d013      	beq.n	8003442 <HAL_GPIO_Init+0x1fe>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a47      	ldr	r2, [pc, #284]	@ (800353c <HAL_GPIO_Init+0x2f8>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d00d      	beq.n	800343e <HAL_GPIO_Init+0x1fa>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a46      	ldr	r2, [pc, #280]	@ (8003540 <HAL_GPIO_Init+0x2fc>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d007      	beq.n	800343a <HAL_GPIO_Init+0x1f6>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a45      	ldr	r2, [pc, #276]	@ (8003544 <HAL_GPIO_Init+0x300>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d101      	bne.n	8003436 <HAL_GPIO_Init+0x1f2>
 8003432:	2304      	movs	r3, #4
 8003434:	e008      	b.n	8003448 <HAL_GPIO_Init+0x204>
 8003436:	2307      	movs	r3, #7
 8003438:	e006      	b.n	8003448 <HAL_GPIO_Init+0x204>
 800343a:	2303      	movs	r3, #3
 800343c:	e004      	b.n	8003448 <HAL_GPIO_Init+0x204>
 800343e:	2302      	movs	r3, #2
 8003440:	e002      	b.n	8003448 <HAL_GPIO_Init+0x204>
 8003442:	2301      	movs	r3, #1
 8003444:	e000      	b.n	8003448 <HAL_GPIO_Init+0x204>
 8003446:	2300      	movs	r3, #0
 8003448:	69fa      	ldr	r2, [r7, #28]
 800344a:	f002 0203 	and.w	r2, r2, #3
 800344e:	0092      	lsls	r2, r2, #2
 8003450:	4093      	lsls	r3, r2
 8003452:	69ba      	ldr	r2, [r7, #24]
 8003454:	4313      	orrs	r3, r2
 8003456:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003458:	4935      	ldr	r1, [pc, #212]	@ (8003530 <HAL_GPIO_Init+0x2ec>)
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	089b      	lsrs	r3, r3, #2
 800345e:	3302      	adds	r3, #2
 8003460:	69ba      	ldr	r2, [r7, #24]
 8003462:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003466:	4b38      	ldr	r3, [pc, #224]	@ (8003548 <HAL_GPIO_Init+0x304>)
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	43db      	mvns	r3, r3
 8003470:	69ba      	ldr	r2, [r7, #24]
 8003472:	4013      	ands	r3, r2
 8003474:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d003      	beq.n	800348a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003482:	69ba      	ldr	r2, [r7, #24]
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	4313      	orrs	r3, r2
 8003488:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800348a:	4a2f      	ldr	r2, [pc, #188]	@ (8003548 <HAL_GPIO_Init+0x304>)
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003490:	4b2d      	ldr	r3, [pc, #180]	@ (8003548 <HAL_GPIO_Init+0x304>)
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	43db      	mvns	r3, r3
 800349a:	69ba      	ldr	r2, [r7, #24]
 800349c:	4013      	ands	r3, r2
 800349e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d003      	beq.n	80034b4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80034ac:	69ba      	ldr	r2, [r7, #24]
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	4313      	orrs	r3, r2
 80034b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80034b4:	4a24      	ldr	r2, [pc, #144]	@ (8003548 <HAL_GPIO_Init+0x304>)
 80034b6:	69bb      	ldr	r3, [r7, #24]
 80034b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80034ba:	4b23      	ldr	r3, [pc, #140]	@ (8003548 <HAL_GPIO_Init+0x304>)
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	43db      	mvns	r3, r3
 80034c4:	69ba      	ldr	r2, [r7, #24]
 80034c6:	4013      	ands	r3, r2
 80034c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d003      	beq.n	80034de <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80034d6:	69ba      	ldr	r2, [r7, #24]
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	4313      	orrs	r3, r2
 80034dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80034de:	4a1a      	ldr	r2, [pc, #104]	@ (8003548 <HAL_GPIO_Init+0x304>)
 80034e0:	69bb      	ldr	r3, [r7, #24]
 80034e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80034e4:	4b18      	ldr	r3, [pc, #96]	@ (8003548 <HAL_GPIO_Init+0x304>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	43db      	mvns	r3, r3
 80034ee:	69ba      	ldr	r2, [r7, #24]
 80034f0:	4013      	ands	r3, r2
 80034f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d003      	beq.n	8003508 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003500:	69ba      	ldr	r2, [r7, #24]
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	4313      	orrs	r3, r2
 8003506:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003508:	4a0f      	ldr	r2, [pc, #60]	@ (8003548 <HAL_GPIO_Init+0x304>)
 800350a:	69bb      	ldr	r3, [r7, #24]
 800350c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	3301      	adds	r3, #1
 8003512:	61fb      	str	r3, [r7, #28]
 8003514:	69fb      	ldr	r3, [r7, #28]
 8003516:	2b0f      	cmp	r3, #15
 8003518:	f67f aea2 	bls.w	8003260 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800351c:	bf00      	nop
 800351e:	bf00      	nop
 8003520:	3724      	adds	r7, #36	@ 0x24
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop
 800352c:	40023800 	.word	0x40023800
 8003530:	40013800 	.word	0x40013800
 8003534:	40020000 	.word	0x40020000
 8003538:	40020400 	.word	0x40020400
 800353c:	40020800 	.word	0x40020800
 8003540:	40020c00 	.word	0x40020c00
 8003544:	40021000 	.word	0x40021000
 8003548:	40013c00 	.word	0x40013c00

0800354c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b086      	sub	sp, #24
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d101      	bne.n	800355e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e267      	b.n	8003a2e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0301 	and.w	r3, r3, #1
 8003566:	2b00      	cmp	r3, #0
 8003568:	d075      	beq.n	8003656 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800356a:	4b88      	ldr	r3, [pc, #544]	@ (800378c <HAL_RCC_OscConfig+0x240>)
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	f003 030c 	and.w	r3, r3, #12
 8003572:	2b04      	cmp	r3, #4
 8003574:	d00c      	beq.n	8003590 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003576:	4b85      	ldr	r3, [pc, #532]	@ (800378c <HAL_RCC_OscConfig+0x240>)
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800357e:	2b08      	cmp	r3, #8
 8003580:	d112      	bne.n	80035a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003582:	4b82      	ldr	r3, [pc, #520]	@ (800378c <HAL_RCC_OscConfig+0x240>)
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800358a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800358e:	d10b      	bne.n	80035a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003590:	4b7e      	ldr	r3, [pc, #504]	@ (800378c <HAL_RCC_OscConfig+0x240>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003598:	2b00      	cmp	r3, #0
 800359a:	d05b      	beq.n	8003654 <HAL_RCC_OscConfig+0x108>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d157      	bne.n	8003654 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e242      	b.n	8003a2e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035b0:	d106      	bne.n	80035c0 <HAL_RCC_OscConfig+0x74>
 80035b2:	4b76      	ldr	r3, [pc, #472]	@ (800378c <HAL_RCC_OscConfig+0x240>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a75      	ldr	r2, [pc, #468]	@ (800378c <HAL_RCC_OscConfig+0x240>)
 80035b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035bc:	6013      	str	r3, [r2, #0]
 80035be:	e01d      	b.n	80035fc <HAL_RCC_OscConfig+0xb0>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80035c8:	d10c      	bne.n	80035e4 <HAL_RCC_OscConfig+0x98>
 80035ca:	4b70      	ldr	r3, [pc, #448]	@ (800378c <HAL_RCC_OscConfig+0x240>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a6f      	ldr	r2, [pc, #444]	@ (800378c <HAL_RCC_OscConfig+0x240>)
 80035d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80035d4:	6013      	str	r3, [r2, #0]
 80035d6:	4b6d      	ldr	r3, [pc, #436]	@ (800378c <HAL_RCC_OscConfig+0x240>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a6c      	ldr	r2, [pc, #432]	@ (800378c <HAL_RCC_OscConfig+0x240>)
 80035dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035e0:	6013      	str	r3, [r2, #0]
 80035e2:	e00b      	b.n	80035fc <HAL_RCC_OscConfig+0xb0>
 80035e4:	4b69      	ldr	r3, [pc, #420]	@ (800378c <HAL_RCC_OscConfig+0x240>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a68      	ldr	r2, [pc, #416]	@ (800378c <HAL_RCC_OscConfig+0x240>)
 80035ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035ee:	6013      	str	r3, [r2, #0]
 80035f0:	4b66      	ldr	r3, [pc, #408]	@ (800378c <HAL_RCC_OscConfig+0x240>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a65      	ldr	r2, [pc, #404]	@ (800378c <HAL_RCC_OscConfig+0x240>)
 80035f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80035fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d013      	beq.n	800362c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003604:	f7ff f8da 	bl	80027bc <HAL_GetTick>
 8003608:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800360a:	e008      	b.n	800361e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800360c:	f7ff f8d6 	bl	80027bc <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	2b64      	cmp	r3, #100	@ 0x64
 8003618:	d901      	bls.n	800361e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e207      	b.n	8003a2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800361e:	4b5b      	ldr	r3, [pc, #364]	@ (800378c <HAL_RCC_OscConfig+0x240>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d0f0      	beq.n	800360c <HAL_RCC_OscConfig+0xc0>
 800362a:	e014      	b.n	8003656 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800362c:	f7ff f8c6 	bl	80027bc <HAL_GetTick>
 8003630:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003632:	e008      	b.n	8003646 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003634:	f7ff f8c2 	bl	80027bc <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	2b64      	cmp	r3, #100	@ 0x64
 8003640:	d901      	bls.n	8003646 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e1f3      	b.n	8003a2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003646:	4b51      	ldr	r3, [pc, #324]	@ (800378c <HAL_RCC_OscConfig+0x240>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d1f0      	bne.n	8003634 <HAL_RCC_OscConfig+0xe8>
 8003652:	e000      	b.n	8003656 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003654:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0302 	and.w	r3, r3, #2
 800365e:	2b00      	cmp	r3, #0
 8003660:	d063      	beq.n	800372a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003662:	4b4a      	ldr	r3, [pc, #296]	@ (800378c <HAL_RCC_OscConfig+0x240>)
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	f003 030c 	and.w	r3, r3, #12
 800366a:	2b00      	cmp	r3, #0
 800366c:	d00b      	beq.n	8003686 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800366e:	4b47      	ldr	r3, [pc, #284]	@ (800378c <HAL_RCC_OscConfig+0x240>)
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003676:	2b08      	cmp	r3, #8
 8003678:	d11c      	bne.n	80036b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800367a:	4b44      	ldr	r3, [pc, #272]	@ (800378c <HAL_RCC_OscConfig+0x240>)
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d116      	bne.n	80036b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003686:	4b41      	ldr	r3, [pc, #260]	@ (800378c <HAL_RCC_OscConfig+0x240>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0302 	and.w	r3, r3, #2
 800368e:	2b00      	cmp	r3, #0
 8003690:	d005      	beq.n	800369e <HAL_RCC_OscConfig+0x152>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	2b01      	cmp	r3, #1
 8003698:	d001      	beq.n	800369e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e1c7      	b.n	8003a2e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800369e:	4b3b      	ldr	r3, [pc, #236]	@ (800378c <HAL_RCC_OscConfig+0x240>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	691b      	ldr	r3, [r3, #16]
 80036aa:	00db      	lsls	r3, r3, #3
 80036ac:	4937      	ldr	r1, [pc, #220]	@ (800378c <HAL_RCC_OscConfig+0x240>)
 80036ae:	4313      	orrs	r3, r2
 80036b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036b2:	e03a      	b.n	800372a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d020      	beq.n	80036fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036bc:	4b34      	ldr	r3, [pc, #208]	@ (8003790 <HAL_RCC_OscConfig+0x244>)
 80036be:	2201      	movs	r2, #1
 80036c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036c2:	f7ff f87b 	bl	80027bc <HAL_GetTick>
 80036c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036c8:	e008      	b.n	80036dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036ca:	f7ff f877 	bl	80027bc <HAL_GetTick>
 80036ce:	4602      	mov	r2, r0
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	2b02      	cmp	r3, #2
 80036d6:	d901      	bls.n	80036dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80036d8:	2303      	movs	r3, #3
 80036da:	e1a8      	b.n	8003a2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036dc:	4b2b      	ldr	r3, [pc, #172]	@ (800378c <HAL_RCC_OscConfig+0x240>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0302 	and.w	r3, r3, #2
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d0f0      	beq.n	80036ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036e8:	4b28      	ldr	r3, [pc, #160]	@ (800378c <HAL_RCC_OscConfig+0x240>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	691b      	ldr	r3, [r3, #16]
 80036f4:	00db      	lsls	r3, r3, #3
 80036f6:	4925      	ldr	r1, [pc, #148]	@ (800378c <HAL_RCC_OscConfig+0x240>)
 80036f8:	4313      	orrs	r3, r2
 80036fa:	600b      	str	r3, [r1, #0]
 80036fc:	e015      	b.n	800372a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036fe:	4b24      	ldr	r3, [pc, #144]	@ (8003790 <HAL_RCC_OscConfig+0x244>)
 8003700:	2200      	movs	r2, #0
 8003702:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003704:	f7ff f85a 	bl	80027bc <HAL_GetTick>
 8003708:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800370a:	e008      	b.n	800371e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800370c:	f7ff f856 	bl	80027bc <HAL_GetTick>
 8003710:	4602      	mov	r2, r0
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	2b02      	cmp	r3, #2
 8003718:	d901      	bls.n	800371e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e187      	b.n	8003a2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800371e:	4b1b      	ldr	r3, [pc, #108]	@ (800378c <HAL_RCC_OscConfig+0x240>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0302 	and.w	r3, r3, #2
 8003726:	2b00      	cmp	r3, #0
 8003728:	d1f0      	bne.n	800370c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0308 	and.w	r3, r3, #8
 8003732:	2b00      	cmp	r3, #0
 8003734:	d036      	beq.n	80037a4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	695b      	ldr	r3, [r3, #20]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d016      	beq.n	800376c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800373e:	4b15      	ldr	r3, [pc, #84]	@ (8003794 <HAL_RCC_OscConfig+0x248>)
 8003740:	2201      	movs	r2, #1
 8003742:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003744:	f7ff f83a 	bl	80027bc <HAL_GetTick>
 8003748:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800374a:	e008      	b.n	800375e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800374c:	f7ff f836 	bl	80027bc <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	2b02      	cmp	r3, #2
 8003758:	d901      	bls.n	800375e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e167      	b.n	8003a2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800375e:	4b0b      	ldr	r3, [pc, #44]	@ (800378c <HAL_RCC_OscConfig+0x240>)
 8003760:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003762:	f003 0302 	and.w	r3, r3, #2
 8003766:	2b00      	cmp	r3, #0
 8003768:	d0f0      	beq.n	800374c <HAL_RCC_OscConfig+0x200>
 800376a:	e01b      	b.n	80037a4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800376c:	4b09      	ldr	r3, [pc, #36]	@ (8003794 <HAL_RCC_OscConfig+0x248>)
 800376e:	2200      	movs	r2, #0
 8003770:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003772:	f7ff f823 	bl	80027bc <HAL_GetTick>
 8003776:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003778:	e00e      	b.n	8003798 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800377a:	f7ff f81f 	bl	80027bc <HAL_GetTick>
 800377e:	4602      	mov	r2, r0
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	2b02      	cmp	r3, #2
 8003786:	d907      	bls.n	8003798 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003788:	2303      	movs	r3, #3
 800378a:	e150      	b.n	8003a2e <HAL_RCC_OscConfig+0x4e2>
 800378c:	40023800 	.word	0x40023800
 8003790:	42470000 	.word	0x42470000
 8003794:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003798:	4b88      	ldr	r3, [pc, #544]	@ (80039bc <HAL_RCC_OscConfig+0x470>)
 800379a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800379c:	f003 0302 	and.w	r3, r3, #2
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d1ea      	bne.n	800377a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0304 	and.w	r3, r3, #4
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	f000 8097 	beq.w	80038e0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037b2:	2300      	movs	r3, #0
 80037b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037b6:	4b81      	ldr	r3, [pc, #516]	@ (80039bc <HAL_RCC_OscConfig+0x470>)
 80037b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d10f      	bne.n	80037e2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037c2:	2300      	movs	r3, #0
 80037c4:	60bb      	str	r3, [r7, #8]
 80037c6:	4b7d      	ldr	r3, [pc, #500]	@ (80039bc <HAL_RCC_OscConfig+0x470>)
 80037c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ca:	4a7c      	ldr	r2, [pc, #496]	@ (80039bc <HAL_RCC_OscConfig+0x470>)
 80037cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80037d2:	4b7a      	ldr	r3, [pc, #488]	@ (80039bc <HAL_RCC_OscConfig+0x470>)
 80037d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037da:	60bb      	str	r3, [r7, #8]
 80037dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037de:	2301      	movs	r3, #1
 80037e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037e2:	4b77      	ldr	r3, [pc, #476]	@ (80039c0 <HAL_RCC_OscConfig+0x474>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d118      	bne.n	8003820 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037ee:	4b74      	ldr	r3, [pc, #464]	@ (80039c0 <HAL_RCC_OscConfig+0x474>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a73      	ldr	r2, [pc, #460]	@ (80039c0 <HAL_RCC_OscConfig+0x474>)
 80037f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037fa:	f7fe ffdf 	bl	80027bc <HAL_GetTick>
 80037fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003800:	e008      	b.n	8003814 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003802:	f7fe ffdb 	bl	80027bc <HAL_GetTick>
 8003806:	4602      	mov	r2, r0
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	1ad3      	subs	r3, r2, r3
 800380c:	2b02      	cmp	r3, #2
 800380e:	d901      	bls.n	8003814 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003810:	2303      	movs	r3, #3
 8003812:	e10c      	b.n	8003a2e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003814:	4b6a      	ldr	r3, [pc, #424]	@ (80039c0 <HAL_RCC_OscConfig+0x474>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800381c:	2b00      	cmp	r3, #0
 800381e:	d0f0      	beq.n	8003802 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	2b01      	cmp	r3, #1
 8003826:	d106      	bne.n	8003836 <HAL_RCC_OscConfig+0x2ea>
 8003828:	4b64      	ldr	r3, [pc, #400]	@ (80039bc <HAL_RCC_OscConfig+0x470>)
 800382a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800382c:	4a63      	ldr	r2, [pc, #396]	@ (80039bc <HAL_RCC_OscConfig+0x470>)
 800382e:	f043 0301 	orr.w	r3, r3, #1
 8003832:	6713      	str	r3, [r2, #112]	@ 0x70
 8003834:	e01c      	b.n	8003870 <HAL_RCC_OscConfig+0x324>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	2b05      	cmp	r3, #5
 800383c:	d10c      	bne.n	8003858 <HAL_RCC_OscConfig+0x30c>
 800383e:	4b5f      	ldr	r3, [pc, #380]	@ (80039bc <HAL_RCC_OscConfig+0x470>)
 8003840:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003842:	4a5e      	ldr	r2, [pc, #376]	@ (80039bc <HAL_RCC_OscConfig+0x470>)
 8003844:	f043 0304 	orr.w	r3, r3, #4
 8003848:	6713      	str	r3, [r2, #112]	@ 0x70
 800384a:	4b5c      	ldr	r3, [pc, #368]	@ (80039bc <HAL_RCC_OscConfig+0x470>)
 800384c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800384e:	4a5b      	ldr	r2, [pc, #364]	@ (80039bc <HAL_RCC_OscConfig+0x470>)
 8003850:	f043 0301 	orr.w	r3, r3, #1
 8003854:	6713      	str	r3, [r2, #112]	@ 0x70
 8003856:	e00b      	b.n	8003870 <HAL_RCC_OscConfig+0x324>
 8003858:	4b58      	ldr	r3, [pc, #352]	@ (80039bc <HAL_RCC_OscConfig+0x470>)
 800385a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800385c:	4a57      	ldr	r2, [pc, #348]	@ (80039bc <HAL_RCC_OscConfig+0x470>)
 800385e:	f023 0301 	bic.w	r3, r3, #1
 8003862:	6713      	str	r3, [r2, #112]	@ 0x70
 8003864:	4b55      	ldr	r3, [pc, #340]	@ (80039bc <HAL_RCC_OscConfig+0x470>)
 8003866:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003868:	4a54      	ldr	r2, [pc, #336]	@ (80039bc <HAL_RCC_OscConfig+0x470>)
 800386a:	f023 0304 	bic.w	r3, r3, #4
 800386e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d015      	beq.n	80038a4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003878:	f7fe ffa0 	bl	80027bc <HAL_GetTick>
 800387c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800387e:	e00a      	b.n	8003896 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003880:	f7fe ff9c 	bl	80027bc <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800388e:	4293      	cmp	r3, r2
 8003890:	d901      	bls.n	8003896 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	e0cb      	b.n	8003a2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003896:	4b49      	ldr	r3, [pc, #292]	@ (80039bc <HAL_RCC_OscConfig+0x470>)
 8003898:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800389a:	f003 0302 	and.w	r3, r3, #2
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d0ee      	beq.n	8003880 <HAL_RCC_OscConfig+0x334>
 80038a2:	e014      	b.n	80038ce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038a4:	f7fe ff8a 	bl	80027bc <HAL_GetTick>
 80038a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038aa:	e00a      	b.n	80038c2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038ac:	f7fe ff86 	bl	80027bc <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d901      	bls.n	80038c2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e0b5      	b.n	8003a2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038c2:	4b3e      	ldr	r3, [pc, #248]	@ (80039bc <HAL_RCC_OscConfig+0x470>)
 80038c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038c6:	f003 0302 	and.w	r3, r3, #2
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d1ee      	bne.n	80038ac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038ce:	7dfb      	ldrb	r3, [r7, #23]
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d105      	bne.n	80038e0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038d4:	4b39      	ldr	r3, [pc, #228]	@ (80039bc <HAL_RCC_OscConfig+0x470>)
 80038d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038d8:	4a38      	ldr	r2, [pc, #224]	@ (80039bc <HAL_RCC_OscConfig+0x470>)
 80038da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038de:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	699b      	ldr	r3, [r3, #24]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	f000 80a1 	beq.w	8003a2c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038ea:	4b34      	ldr	r3, [pc, #208]	@ (80039bc <HAL_RCC_OscConfig+0x470>)
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	f003 030c 	and.w	r3, r3, #12
 80038f2:	2b08      	cmp	r3, #8
 80038f4:	d05c      	beq.n	80039b0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	699b      	ldr	r3, [r3, #24]
 80038fa:	2b02      	cmp	r3, #2
 80038fc:	d141      	bne.n	8003982 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038fe:	4b31      	ldr	r3, [pc, #196]	@ (80039c4 <HAL_RCC_OscConfig+0x478>)
 8003900:	2200      	movs	r2, #0
 8003902:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003904:	f7fe ff5a 	bl	80027bc <HAL_GetTick>
 8003908:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800390a:	e008      	b.n	800391e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800390c:	f7fe ff56 	bl	80027bc <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	2b02      	cmp	r3, #2
 8003918:	d901      	bls.n	800391e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	e087      	b.n	8003a2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800391e:	4b27      	ldr	r3, [pc, #156]	@ (80039bc <HAL_RCC_OscConfig+0x470>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d1f0      	bne.n	800390c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	69da      	ldr	r2, [r3, #28]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6a1b      	ldr	r3, [r3, #32]
 8003932:	431a      	orrs	r2, r3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003938:	019b      	lsls	r3, r3, #6
 800393a:	431a      	orrs	r2, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003940:	085b      	lsrs	r3, r3, #1
 8003942:	3b01      	subs	r3, #1
 8003944:	041b      	lsls	r3, r3, #16
 8003946:	431a      	orrs	r2, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800394c:	061b      	lsls	r3, r3, #24
 800394e:	491b      	ldr	r1, [pc, #108]	@ (80039bc <HAL_RCC_OscConfig+0x470>)
 8003950:	4313      	orrs	r3, r2
 8003952:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003954:	4b1b      	ldr	r3, [pc, #108]	@ (80039c4 <HAL_RCC_OscConfig+0x478>)
 8003956:	2201      	movs	r2, #1
 8003958:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800395a:	f7fe ff2f 	bl	80027bc <HAL_GetTick>
 800395e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003960:	e008      	b.n	8003974 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003962:	f7fe ff2b 	bl	80027bc <HAL_GetTick>
 8003966:	4602      	mov	r2, r0
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	2b02      	cmp	r3, #2
 800396e:	d901      	bls.n	8003974 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003970:	2303      	movs	r3, #3
 8003972:	e05c      	b.n	8003a2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003974:	4b11      	ldr	r3, [pc, #68]	@ (80039bc <HAL_RCC_OscConfig+0x470>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d0f0      	beq.n	8003962 <HAL_RCC_OscConfig+0x416>
 8003980:	e054      	b.n	8003a2c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003982:	4b10      	ldr	r3, [pc, #64]	@ (80039c4 <HAL_RCC_OscConfig+0x478>)
 8003984:	2200      	movs	r2, #0
 8003986:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003988:	f7fe ff18 	bl	80027bc <HAL_GetTick>
 800398c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800398e:	e008      	b.n	80039a2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003990:	f7fe ff14 	bl	80027bc <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	2b02      	cmp	r3, #2
 800399c:	d901      	bls.n	80039a2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e045      	b.n	8003a2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039a2:	4b06      	ldr	r3, [pc, #24]	@ (80039bc <HAL_RCC_OscConfig+0x470>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d1f0      	bne.n	8003990 <HAL_RCC_OscConfig+0x444>
 80039ae:	e03d      	b.n	8003a2c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	699b      	ldr	r3, [r3, #24]
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d107      	bne.n	80039c8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e038      	b.n	8003a2e <HAL_RCC_OscConfig+0x4e2>
 80039bc:	40023800 	.word	0x40023800
 80039c0:	40007000 	.word	0x40007000
 80039c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80039c8:	4b1b      	ldr	r3, [pc, #108]	@ (8003a38 <HAL_RCC_OscConfig+0x4ec>)
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	699b      	ldr	r3, [r3, #24]
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d028      	beq.n	8003a28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d121      	bne.n	8003a28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d11a      	bne.n	8003a28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039f2:	68fa      	ldr	r2, [r7, #12]
 80039f4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80039f8:	4013      	ands	r3, r2
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80039fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d111      	bne.n	8003a28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a0e:	085b      	lsrs	r3, r3, #1
 8003a10:	3b01      	subs	r3, #1
 8003a12:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d107      	bne.n	8003a28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a22:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d001      	beq.n	8003a2c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e000      	b.n	8003a2e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3718      	adds	r7, #24
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	40023800 	.word	0x40023800

08003a3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b084      	sub	sp, #16
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d101      	bne.n	8003a50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e0cc      	b.n	8003bea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a50:	4b68      	ldr	r3, [pc, #416]	@ (8003bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0307 	and.w	r3, r3, #7
 8003a58:	683a      	ldr	r2, [r7, #0]
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d90c      	bls.n	8003a78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a5e:	4b65      	ldr	r3, [pc, #404]	@ (8003bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a60:	683a      	ldr	r2, [r7, #0]
 8003a62:	b2d2      	uxtb	r2, r2
 8003a64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a66:	4b63      	ldr	r3, [pc, #396]	@ (8003bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0307 	and.w	r3, r3, #7
 8003a6e:	683a      	ldr	r2, [r7, #0]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d001      	beq.n	8003a78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e0b8      	b.n	8003bea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 0302 	and.w	r3, r3, #2
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d020      	beq.n	8003ac6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 0304 	and.w	r3, r3, #4
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d005      	beq.n	8003a9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a90:	4b59      	ldr	r3, [pc, #356]	@ (8003bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	4a58      	ldr	r2, [pc, #352]	@ (8003bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a96:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003a9a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0308 	and.w	r3, r3, #8
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d005      	beq.n	8003ab4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003aa8:	4b53      	ldr	r3, [pc, #332]	@ (8003bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	4a52      	ldr	r2, [pc, #328]	@ (8003bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003aae:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003ab2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ab4:	4b50      	ldr	r3, [pc, #320]	@ (8003bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	494d      	ldr	r1, [pc, #308]	@ (8003bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0301 	and.w	r3, r3, #1
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d044      	beq.n	8003b5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d107      	bne.n	8003aea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ada:	4b47      	ldr	r3, [pc, #284]	@ (8003bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d119      	bne.n	8003b1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e07f      	b.n	8003bea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	2b02      	cmp	r3, #2
 8003af0:	d003      	beq.n	8003afa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003af6:	2b03      	cmp	r3, #3
 8003af8:	d107      	bne.n	8003b0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003afa:	4b3f      	ldr	r3, [pc, #252]	@ (8003bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d109      	bne.n	8003b1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e06f      	b.n	8003bea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b0a:	4b3b      	ldr	r3, [pc, #236]	@ (8003bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0302 	and.w	r3, r3, #2
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d101      	bne.n	8003b1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e067      	b.n	8003bea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b1a:	4b37      	ldr	r3, [pc, #220]	@ (8003bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	f023 0203 	bic.w	r2, r3, #3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	4934      	ldr	r1, [pc, #208]	@ (8003bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b2c:	f7fe fe46 	bl	80027bc <HAL_GetTick>
 8003b30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b32:	e00a      	b.n	8003b4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b34:	f7fe fe42 	bl	80027bc <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d901      	bls.n	8003b4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e04f      	b.n	8003bea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b4a:	4b2b      	ldr	r3, [pc, #172]	@ (8003bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	f003 020c 	and.w	r2, r3, #12
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d1eb      	bne.n	8003b34 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b5c:	4b25      	ldr	r3, [pc, #148]	@ (8003bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0307 	and.w	r3, r3, #7
 8003b64:	683a      	ldr	r2, [r7, #0]
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d20c      	bcs.n	8003b84 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b6a:	4b22      	ldr	r3, [pc, #136]	@ (8003bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b6c:	683a      	ldr	r2, [r7, #0]
 8003b6e:	b2d2      	uxtb	r2, r2
 8003b70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b72:	4b20      	ldr	r3, [pc, #128]	@ (8003bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0307 	and.w	r3, r3, #7
 8003b7a:	683a      	ldr	r2, [r7, #0]
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d001      	beq.n	8003b84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e032      	b.n	8003bea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0304 	and.w	r3, r3, #4
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d008      	beq.n	8003ba2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b90:	4b19      	ldr	r3, [pc, #100]	@ (8003bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	4916      	ldr	r1, [pc, #88]	@ (8003bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0308 	and.w	r3, r3, #8
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d009      	beq.n	8003bc2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bae:	4b12      	ldr	r3, [pc, #72]	@ (8003bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	691b      	ldr	r3, [r3, #16]
 8003bba:	00db      	lsls	r3, r3, #3
 8003bbc:	490e      	ldr	r1, [pc, #56]	@ (8003bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003bc2:	f000 f821 	bl	8003c08 <HAL_RCC_GetSysClockFreq>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	4b0b      	ldr	r3, [pc, #44]	@ (8003bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	091b      	lsrs	r3, r3, #4
 8003bce:	f003 030f 	and.w	r3, r3, #15
 8003bd2:	490a      	ldr	r1, [pc, #40]	@ (8003bfc <HAL_RCC_ClockConfig+0x1c0>)
 8003bd4:	5ccb      	ldrb	r3, [r1, r3]
 8003bd6:	fa22 f303 	lsr.w	r3, r2, r3
 8003bda:	4a09      	ldr	r2, [pc, #36]	@ (8003c00 <HAL_RCC_ClockConfig+0x1c4>)
 8003bdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003bde:	4b09      	ldr	r3, [pc, #36]	@ (8003c04 <HAL_RCC_ClockConfig+0x1c8>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4618      	mov	r0, r3
 8003be4:	f7fe fda6 	bl	8002734 <HAL_InitTick>

  return HAL_OK;
 8003be8:	2300      	movs	r3, #0
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3710      	adds	r7, #16
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	40023c00 	.word	0x40023c00
 8003bf8:	40023800 	.word	0x40023800
 8003bfc:	080056ec 	.word	0x080056ec
 8003c00:	20000000 	.word	0x20000000
 8003c04:	20000004 	.word	0x20000004

08003c08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c0c:	b090      	sub	sp, #64	@ 0x40
 8003c0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003c10:	2300      	movs	r3, #0
 8003c12:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c14:	2300      	movs	r3, #0
 8003c16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c18:	2300      	movs	r3, #0
 8003c1a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c20:	4b59      	ldr	r3, [pc, #356]	@ (8003d88 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	f003 030c 	and.w	r3, r3, #12
 8003c28:	2b08      	cmp	r3, #8
 8003c2a:	d00d      	beq.n	8003c48 <HAL_RCC_GetSysClockFreq+0x40>
 8003c2c:	2b08      	cmp	r3, #8
 8003c2e:	f200 80a1 	bhi.w	8003d74 <HAL_RCC_GetSysClockFreq+0x16c>
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d002      	beq.n	8003c3c <HAL_RCC_GetSysClockFreq+0x34>
 8003c36:	2b04      	cmp	r3, #4
 8003c38:	d003      	beq.n	8003c42 <HAL_RCC_GetSysClockFreq+0x3a>
 8003c3a:	e09b      	b.n	8003d74 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c3c:	4b53      	ldr	r3, [pc, #332]	@ (8003d8c <HAL_RCC_GetSysClockFreq+0x184>)
 8003c3e:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8003c40:	e09b      	b.n	8003d7a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c42:	4b53      	ldr	r3, [pc, #332]	@ (8003d90 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c44:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003c46:	e098      	b.n	8003d7a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c48:	4b4f      	ldr	r3, [pc, #316]	@ (8003d88 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c50:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c52:	4b4d      	ldr	r3, [pc, #308]	@ (8003d88 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d028      	beq.n	8003cb0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c5e:	4b4a      	ldr	r3, [pc, #296]	@ (8003d88 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	099b      	lsrs	r3, r3, #6
 8003c64:	2200      	movs	r2, #0
 8003c66:	623b      	str	r3, [r7, #32]
 8003c68:	627a      	str	r2, [r7, #36]	@ 0x24
 8003c6a:	6a3b      	ldr	r3, [r7, #32]
 8003c6c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003c70:	2100      	movs	r1, #0
 8003c72:	4b47      	ldr	r3, [pc, #284]	@ (8003d90 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c74:	fb03 f201 	mul.w	r2, r3, r1
 8003c78:	2300      	movs	r3, #0
 8003c7a:	fb00 f303 	mul.w	r3, r0, r3
 8003c7e:	4413      	add	r3, r2
 8003c80:	4a43      	ldr	r2, [pc, #268]	@ (8003d90 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c82:	fba0 1202 	umull	r1, r2, r0, r2
 8003c86:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c88:	460a      	mov	r2, r1
 8003c8a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003c8c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c8e:	4413      	add	r3, r2
 8003c90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c94:	2200      	movs	r2, #0
 8003c96:	61bb      	str	r3, [r7, #24]
 8003c98:	61fa      	str	r2, [r7, #28]
 8003c9a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c9e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003ca2:	f7fc faa1 	bl	80001e8 <__aeabi_uldivmod>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	460b      	mov	r3, r1
 8003caa:	4613      	mov	r3, r2
 8003cac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003cae:	e053      	b.n	8003d58 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cb0:	4b35      	ldr	r3, [pc, #212]	@ (8003d88 <HAL_RCC_GetSysClockFreq+0x180>)
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	099b      	lsrs	r3, r3, #6
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	613b      	str	r3, [r7, #16]
 8003cba:	617a      	str	r2, [r7, #20]
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003cc2:	f04f 0b00 	mov.w	fp, #0
 8003cc6:	4652      	mov	r2, sl
 8003cc8:	465b      	mov	r3, fp
 8003cca:	f04f 0000 	mov.w	r0, #0
 8003cce:	f04f 0100 	mov.w	r1, #0
 8003cd2:	0159      	lsls	r1, r3, #5
 8003cd4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cd8:	0150      	lsls	r0, r2, #5
 8003cda:	4602      	mov	r2, r0
 8003cdc:	460b      	mov	r3, r1
 8003cde:	ebb2 080a 	subs.w	r8, r2, sl
 8003ce2:	eb63 090b 	sbc.w	r9, r3, fp
 8003ce6:	f04f 0200 	mov.w	r2, #0
 8003cea:	f04f 0300 	mov.w	r3, #0
 8003cee:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003cf2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003cf6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003cfa:	ebb2 0408 	subs.w	r4, r2, r8
 8003cfe:	eb63 0509 	sbc.w	r5, r3, r9
 8003d02:	f04f 0200 	mov.w	r2, #0
 8003d06:	f04f 0300 	mov.w	r3, #0
 8003d0a:	00eb      	lsls	r3, r5, #3
 8003d0c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d10:	00e2      	lsls	r2, r4, #3
 8003d12:	4614      	mov	r4, r2
 8003d14:	461d      	mov	r5, r3
 8003d16:	eb14 030a 	adds.w	r3, r4, sl
 8003d1a:	603b      	str	r3, [r7, #0]
 8003d1c:	eb45 030b 	adc.w	r3, r5, fp
 8003d20:	607b      	str	r3, [r7, #4]
 8003d22:	f04f 0200 	mov.w	r2, #0
 8003d26:	f04f 0300 	mov.w	r3, #0
 8003d2a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d2e:	4629      	mov	r1, r5
 8003d30:	028b      	lsls	r3, r1, #10
 8003d32:	4621      	mov	r1, r4
 8003d34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d38:	4621      	mov	r1, r4
 8003d3a:	028a      	lsls	r2, r1, #10
 8003d3c:	4610      	mov	r0, r2
 8003d3e:	4619      	mov	r1, r3
 8003d40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d42:	2200      	movs	r2, #0
 8003d44:	60bb      	str	r3, [r7, #8]
 8003d46:	60fa      	str	r2, [r7, #12]
 8003d48:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d4c:	f7fc fa4c 	bl	80001e8 <__aeabi_uldivmod>
 8003d50:	4602      	mov	r2, r0
 8003d52:	460b      	mov	r3, r1
 8003d54:	4613      	mov	r3, r2
 8003d56:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d58:	4b0b      	ldr	r3, [pc, #44]	@ (8003d88 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	0c1b      	lsrs	r3, r3, #16
 8003d5e:	f003 0303 	and.w	r3, r3, #3
 8003d62:	3301      	adds	r3, #1
 8003d64:	005b      	lsls	r3, r3, #1
 8003d66:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8003d68:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003d6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d70:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003d72:	e002      	b.n	8003d7a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d74:	4b05      	ldr	r3, [pc, #20]	@ (8003d8c <HAL_RCC_GetSysClockFreq+0x184>)
 8003d76:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003d78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3740      	adds	r7, #64	@ 0x40
 8003d80:	46bd      	mov	sp, r7
 8003d82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d86:	bf00      	nop
 8003d88:	40023800 	.word	0x40023800
 8003d8c:	00f42400 	.word	0x00f42400
 8003d90:	017d7840 	.word	0x017d7840

08003d94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d94:	b480      	push	{r7}
 8003d96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d98:	4b03      	ldr	r3, [pc, #12]	@ (8003da8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr
 8003da6:	bf00      	nop
 8003da8:	20000000 	.word	0x20000000

08003dac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003db0:	f7ff fff0 	bl	8003d94 <HAL_RCC_GetHCLKFreq>
 8003db4:	4602      	mov	r2, r0
 8003db6:	4b05      	ldr	r3, [pc, #20]	@ (8003dcc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	0a9b      	lsrs	r3, r3, #10
 8003dbc:	f003 0307 	and.w	r3, r3, #7
 8003dc0:	4903      	ldr	r1, [pc, #12]	@ (8003dd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003dc2:	5ccb      	ldrb	r3, [r1, r3]
 8003dc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	40023800 	.word	0x40023800
 8003dd0:	080056fc 	.word	0x080056fc

08003dd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003dd8:	f7ff ffdc 	bl	8003d94 <HAL_RCC_GetHCLKFreq>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	4b05      	ldr	r3, [pc, #20]	@ (8003df4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	0b5b      	lsrs	r3, r3, #13
 8003de4:	f003 0307 	and.w	r3, r3, #7
 8003de8:	4903      	ldr	r1, [pc, #12]	@ (8003df8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003dea:	5ccb      	ldrb	r3, [r1, r3]
 8003dec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	40023800 	.word	0x40023800
 8003df8:	080056fc 	.word	0x080056fc

08003dfc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b082      	sub	sp, #8
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d101      	bne.n	8003e0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e042      	b.n	8003e94 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d106      	bne.n	8003e28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f7fe fac2 	bl	80023ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2224      	movs	r2, #36	@ 0x24
 8003e2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	68da      	ldr	r2, [r3, #12]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003e3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f000 ff37 	bl	8004cb4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	691a      	ldr	r2, [r3, #16]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003e54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	695a      	ldr	r2, [r3, #20]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003e64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	68da      	ldr	r2, [r3, #12]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003e74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2220      	movs	r2, #32
 8003e80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2220      	movs	r2, #32
 8003e88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003e92:	2300      	movs	r3, #0
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3708      	adds	r7, #8
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}

08003e9c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b08c      	sub	sp, #48	@ 0x30
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	4613      	mov	r3, r2
 8003ea8:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	2b20      	cmp	r3, #32
 8003eb4:	d156      	bne.n	8003f64 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d002      	beq.n	8003ec2 <HAL_UART_Transmit_DMA+0x26>
 8003ebc:	88fb      	ldrh	r3, [r7, #6]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d101      	bne.n	8003ec6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e04f      	b.n	8003f66 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8003ec6:	68ba      	ldr	r2, [r7, #8]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	88fa      	ldrh	r2, [r7, #6]
 8003ed0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	88fa      	ldrh	r2, [r7, #6]
 8003ed6:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2200      	movs	r2, #0
 8003edc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2221      	movs	r2, #33	@ 0x21
 8003ee2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eea:	4a21      	ldr	r2, [pc, #132]	@ (8003f70 <HAL_UART_Transmit_DMA+0xd4>)
 8003eec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ef2:	4a20      	ldr	r2, [pc, #128]	@ (8003f74 <HAL_UART_Transmit_DMA+0xd8>)
 8003ef4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003efa:	4a1f      	ldr	r2, [pc, #124]	@ (8003f78 <HAL_UART_Transmit_DMA+0xdc>)
 8003efc:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f02:	2200      	movs	r2, #0
 8003f04:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8003f06:	f107 0308 	add.w	r3, r7, #8
 8003f0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003f10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f12:	6819      	ldr	r1, [r3, #0]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	3304      	adds	r3, #4
 8003f1a:	461a      	mov	r2, r3
 8003f1c:	88fb      	ldrh	r3, [r7, #6]
 8003f1e:	f7fe fe3d 	bl	8002b9c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003f2a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	3314      	adds	r3, #20
 8003f32:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	e853 3f00 	ldrex	r3, [r3]
 8003f3a:	617b      	str	r3, [r7, #20]
   return(result);
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f42:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	3314      	adds	r3, #20
 8003f4a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003f4c:	627a      	str	r2, [r7, #36]	@ 0x24
 8003f4e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f50:	6a39      	ldr	r1, [r7, #32]
 8003f52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f54:	e841 2300 	strex	r3, r2, [r1]
 8003f58:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d1e5      	bne.n	8003f2c <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8003f60:	2300      	movs	r3, #0
 8003f62:	e000      	b.n	8003f66 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8003f64:	2302      	movs	r3, #2
  }
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3730      	adds	r7, #48	@ 0x30
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	08004541 	.word	0x08004541
 8003f74:	080045db 	.word	0x080045db
 8003f78:	0800475f 	.word	0x0800475f

08003f7c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	60b9      	str	r1, [r7, #8]
 8003f86:	4613      	mov	r3, r2
 8003f88:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	2b20      	cmp	r3, #32
 8003f94:	d112      	bne.n	8003fbc <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d002      	beq.n	8003fa2 <HAL_UART_Receive_DMA+0x26>
 8003f9c:	88fb      	ldrh	r3, [r7, #6]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d101      	bne.n	8003fa6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e00b      	b.n	8003fbe <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003fac:	88fb      	ldrh	r3, [r7, #6]
 8003fae:	461a      	mov	r2, r3
 8003fb0:	68b9      	ldr	r1, [r7, #8]
 8003fb2:	68f8      	ldr	r0, [r7, #12]
 8003fb4:	f000 fc1e 	bl	80047f4 <UART_Start_Receive_DMA>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	e000      	b.n	8003fbe <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003fbc:	2302      	movs	r3, #2
  }
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3710      	adds	r7, #16
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
	...

08003fc8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b0ba      	sub	sp, #232	@ 0xe8
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	695b      	ldr	r3, [r3, #20]
 8003fea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003ffa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ffe:	f003 030f 	and.w	r3, r3, #15
 8004002:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004006:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800400a:	2b00      	cmp	r3, #0
 800400c:	d10f      	bne.n	800402e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800400e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004012:	f003 0320 	and.w	r3, r3, #32
 8004016:	2b00      	cmp	r3, #0
 8004018:	d009      	beq.n	800402e <HAL_UART_IRQHandler+0x66>
 800401a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800401e:	f003 0320 	and.w	r3, r3, #32
 8004022:	2b00      	cmp	r3, #0
 8004024:	d003      	beq.n	800402e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f000 fd85 	bl	8004b36 <UART_Receive_IT>
      return;
 800402c:	e25b      	b.n	80044e6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800402e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004032:	2b00      	cmp	r3, #0
 8004034:	f000 80de 	beq.w	80041f4 <HAL_UART_IRQHandler+0x22c>
 8004038:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800403c:	f003 0301 	and.w	r3, r3, #1
 8004040:	2b00      	cmp	r3, #0
 8004042:	d106      	bne.n	8004052 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004044:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004048:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800404c:	2b00      	cmp	r3, #0
 800404e:	f000 80d1 	beq.w	80041f4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004052:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004056:	f003 0301 	and.w	r3, r3, #1
 800405a:	2b00      	cmp	r3, #0
 800405c:	d00b      	beq.n	8004076 <HAL_UART_IRQHandler+0xae>
 800405e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004062:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004066:	2b00      	cmp	r3, #0
 8004068:	d005      	beq.n	8004076 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800406e:	f043 0201 	orr.w	r2, r3, #1
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004076:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800407a:	f003 0304 	and.w	r3, r3, #4
 800407e:	2b00      	cmp	r3, #0
 8004080:	d00b      	beq.n	800409a <HAL_UART_IRQHandler+0xd2>
 8004082:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004086:	f003 0301 	and.w	r3, r3, #1
 800408a:	2b00      	cmp	r3, #0
 800408c:	d005      	beq.n	800409a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004092:	f043 0202 	orr.w	r2, r3, #2
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800409a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800409e:	f003 0302 	and.w	r3, r3, #2
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d00b      	beq.n	80040be <HAL_UART_IRQHandler+0xf6>
 80040a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80040aa:	f003 0301 	and.w	r3, r3, #1
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d005      	beq.n	80040be <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040b6:	f043 0204 	orr.w	r2, r3, #4
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80040be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040c2:	f003 0308 	and.w	r3, r3, #8
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d011      	beq.n	80040ee <HAL_UART_IRQHandler+0x126>
 80040ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040ce:	f003 0320 	and.w	r3, r3, #32
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d105      	bne.n	80040e2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80040d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80040da:	f003 0301 	and.w	r3, r3, #1
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d005      	beq.n	80040ee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040e6:	f043 0208 	orr.w	r2, r3, #8
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	f000 81f2 	beq.w	80044dc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80040f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040fc:	f003 0320 	and.w	r3, r3, #32
 8004100:	2b00      	cmp	r3, #0
 8004102:	d008      	beq.n	8004116 <HAL_UART_IRQHandler+0x14e>
 8004104:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004108:	f003 0320 	and.w	r3, r3, #32
 800410c:	2b00      	cmp	r3, #0
 800410e:	d002      	beq.n	8004116 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f000 fd10 	bl	8004b36 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	695b      	ldr	r3, [r3, #20]
 800411c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004120:	2b40      	cmp	r3, #64	@ 0x40
 8004122:	bf0c      	ite	eq
 8004124:	2301      	moveq	r3, #1
 8004126:	2300      	movne	r3, #0
 8004128:	b2db      	uxtb	r3, r3
 800412a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004132:	f003 0308 	and.w	r3, r3, #8
 8004136:	2b00      	cmp	r3, #0
 8004138:	d103      	bne.n	8004142 <HAL_UART_IRQHandler+0x17a>
 800413a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800413e:	2b00      	cmp	r3, #0
 8004140:	d04f      	beq.n	80041e2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f000 fc18 	bl	8004978 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	695b      	ldr	r3, [r3, #20]
 800414e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004152:	2b40      	cmp	r3, #64	@ 0x40
 8004154:	d141      	bne.n	80041da <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	3314      	adds	r3, #20
 800415c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004160:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004164:	e853 3f00 	ldrex	r3, [r3]
 8004168:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800416c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004170:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004174:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	3314      	adds	r3, #20
 800417e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004182:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004186:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800418a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800418e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004192:	e841 2300 	strex	r3, r2, [r1]
 8004196:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800419a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d1d9      	bne.n	8004156 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d013      	beq.n	80041d2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041ae:	4a7e      	ldr	r2, [pc, #504]	@ (80043a8 <HAL_UART_IRQHandler+0x3e0>)
 80041b0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041b6:	4618      	mov	r0, r3
 80041b8:	f7fe fdb8 	bl	8002d2c <HAL_DMA_Abort_IT>
 80041bc:	4603      	mov	r3, r0
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d016      	beq.n	80041f0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80041cc:	4610      	mov	r0, r2
 80041ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041d0:	e00e      	b.n	80041f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f000 f99e 	bl	8004514 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041d8:	e00a      	b.n	80041f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f000 f99a 	bl	8004514 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041e0:	e006      	b.n	80041f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f000 f996 	bl	8004514 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80041ee:	e175      	b.n	80044dc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041f0:	bf00      	nop
    return;
 80041f2:	e173      	b.n	80044dc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	f040 814f 	bne.w	800449c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80041fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004202:	f003 0310 	and.w	r3, r3, #16
 8004206:	2b00      	cmp	r3, #0
 8004208:	f000 8148 	beq.w	800449c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800420c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004210:	f003 0310 	and.w	r3, r3, #16
 8004214:	2b00      	cmp	r3, #0
 8004216:	f000 8141 	beq.w	800449c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800421a:	2300      	movs	r3, #0
 800421c:	60bb      	str	r3, [r7, #8]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	60bb      	str	r3, [r7, #8]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	60bb      	str	r3, [r7, #8]
 800422e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	695b      	ldr	r3, [r3, #20]
 8004236:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800423a:	2b40      	cmp	r3, #64	@ 0x40
 800423c:	f040 80b6 	bne.w	80043ac <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800424c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004250:	2b00      	cmp	r3, #0
 8004252:	f000 8145 	beq.w	80044e0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800425a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800425e:	429a      	cmp	r2, r3
 8004260:	f080 813e 	bcs.w	80044e0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800426a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004270:	69db      	ldr	r3, [r3, #28]
 8004272:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004276:	f000 8088 	beq.w	800438a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	330c      	adds	r3, #12
 8004280:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004284:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004288:	e853 3f00 	ldrex	r3, [r3]
 800428c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004290:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004294:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004298:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	330c      	adds	r3, #12
 80042a2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80042a6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80042aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80042b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80042b6:	e841 2300 	strex	r3, r2, [r1]
 80042ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80042be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d1d9      	bne.n	800427a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	3314      	adds	r3, #20
 80042cc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80042d0:	e853 3f00 	ldrex	r3, [r3]
 80042d4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80042d6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80042d8:	f023 0301 	bic.w	r3, r3, #1
 80042dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	3314      	adds	r3, #20
 80042e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80042ea:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80042ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042f0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80042f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80042f6:	e841 2300 	strex	r3, r2, [r1]
 80042fa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80042fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d1e1      	bne.n	80042c6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	3314      	adds	r3, #20
 8004308:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800430a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800430c:	e853 3f00 	ldrex	r3, [r3]
 8004310:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004312:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004314:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004318:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	3314      	adds	r3, #20
 8004322:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004326:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004328:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800432a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800432c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800432e:	e841 2300 	strex	r3, r2, [r1]
 8004332:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004334:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004336:	2b00      	cmp	r3, #0
 8004338:	d1e3      	bne.n	8004302 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2220      	movs	r2, #32
 800433e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2200      	movs	r2, #0
 8004346:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	330c      	adds	r3, #12
 800434e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004350:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004352:	e853 3f00 	ldrex	r3, [r3]
 8004356:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004358:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800435a:	f023 0310 	bic.w	r3, r3, #16
 800435e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	330c      	adds	r3, #12
 8004368:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800436c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800436e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004370:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004372:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004374:	e841 2300 	strex	r3, r2, [r1]
 8004378:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800437a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800437c:	2b00      	cmp	r3, #0
 800437e:	d1e3      	bne.n	8004348 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004384:	4618      	mov	r0, r3
 8004386:	f7fe fc61 	bl	8002c4c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2202      	movs	r2, #2
 800438e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004398:	b29b      	uxth	r3, r3
 800439a:	1ad3      	subs	r3, r2, r3
 800439c:	b29b      	uxth	r3, r3
 800439e:	4619      	mov	r1, r3
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f000 f8c1 	bl	8004528 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80043a6:	e09b      	b.n	80044e0 <HAL_UART_IRQHandler+0x518>
 80043a8:	08004a3f 	.word	0x08004a3f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	1ad3      	subs	r3, r2, r3
 80043b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	f000 808e 	beq.w	80044e4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80043c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	f000 8089 	beq.w	80044e4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	330c      	adds	r3, #12
 80043d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043dc:	e853 3f00 	ldrex	r3, [r3]
 80043e0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80043e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80043e8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	330c      	adds	r3, #12
 80043f2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80043f6:	647a      	str	r2, [r7, #68]	@ 0x44
 80043f8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043fa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80043fc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80043fe:	e841 2300 	strex	r3, r2, [r1]
 8004402:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004404:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004406:	2b00      	cmp	r3, #0
 8004408:	d1e3      	bne.n	80043d2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	3314      	adds	r3, #20
 8004410:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004414:	e853 3f00 	ldrex	r3, [r3]
 8004418:	623b      	str	r3, [r7, #32]
   return(result);
 800441a:	6a3b      	ldr	r3, [r7, #32]
 800441c:	f023 0301 	bic.w	r3, r3, #1
 8004420:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	3314      	adds	r3, #20
 800442a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800442e:	633a      	str	r2, [r7, #48]	@ 0x30
 8004430:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004432:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004434:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004436:	e841 2300 	strex	r3, r2, [r1]
 800443a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800443c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800443e:	2b00      	cmp	r3, #0
 8004440:	d1e3      	bne.n	800440a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2220      	movs	r2, #32
 8004446:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	330c      	adds	r3, #12
 8004456:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	e853 3f00 	ldrex	r3, [r3]
 800445e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f023 0310 	bic.w	r3, r3, #16
 8004466:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	330c      	adds	r3, #12
 8004470:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004474:	61fa      	str	r2, [r7, #28]
 8004476:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004478:	69b9      	ldr	r1, [r7, #24]
 800447a:	69fa      	ldr	r2, [r7, #28]
 800447c:	e841 2300 	strex	r3, r2, [r1]
 8004480:	617b      	str	r3, [r7, #20]
   return(result);
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d1e3      	bne.n	8004450 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2202      	movs	r2, #2
 800448c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800448e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004492:	4619      	mov	r1, r3
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f000 f847 	bl	8004528 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800449a:	e023      	b.n	80044e4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800449c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d009      	beq.n	80044bc <HAL_UART_IRQHandler+0x4f4>
 80044a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d003      	beq.n	80044bc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f000 fad6 	bl	8004a66 <UART_Transmit_IT>
    return;
 80044ba:	e014      	b.n	80044e6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80044bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d00e      	beq.n	80044e6 <HAL_UART_IRQHandler+0x51e>
 80044c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d008      	beq.n	80044e6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f000 fb16 	bl	8004b06 <UART_EndTransmit_IT>
    return;
 80044da:	e004      	b.n	80044e6 <HAL_UART_IRQHandler+0x51e>
    return;
 80044dc:	bf00      	nop
 80044de:	e002      	b.n	80044e6 <HAL_UART_IRQHandler+0x51e>
      return;
 80044e0:	bf00      	nop
 80044e2:	e000      	b.n	80044e6 <HAL_UART_IRQHandler+0x51e>
      return;
 80044e4:	bf00      	nop
  }
}
 80044e6:	37e8      	adds	r7, #232	@ 0xe8
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}

080044ec <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80044f4:	bf00      	nop
 80044f6:	370c      	adds	r7, #12
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr

08004500 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004500:	b480      	push	{r7}
 8004502:	b083      	sub	sp, #12
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004508:	bf00      	nop
 800450a:	370c      	adds	r7, #12
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr

08004514 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004514:	b480      	push	{r7}
 8004516:	b083      	sub	sp, #12
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800451c:	bf00      	nop
 800451e:	370c      	adds	r7, #12
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr

08004528 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	460b      	mov	r3, r1
 8004532:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004534:	bf00      	nop
 8004536:	370c      	adds	r7, #12
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr

08004540 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b090      	sub	sp, #64	@ 0x40
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800454c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004558:	2b00      	cmp	r3, #0
 800455a:	d137      	bne.n	80045cc <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800455c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800455e:	2200      	movs	r2, #0
 8004560:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004562:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	3314      	adds	r3, #20
 8004568:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800456a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800456c:	e853 3f00 	ldrex	r3, [r3]
 8004570:	623b      	str	r3, [r7, #32]
   return(result);
 8004572:	6a3b      	ldr	r3, [r7, #32]
 8004574:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004578:	63bb      	str	r3, [r7, #56]	@ 0x38
 800457a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	3314      	adds	r3, #20
 8004580:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004582:	633a      	str	r2, [r7, #48]	@ 0x30
 8004584:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004586:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004588:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800458a:	e841 2300 	strex	r3, r2, [r1]
 800458e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004590:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004592:	2b00      	cmp	r3, #0
 8004594:	d1e5      	bne.n	8004562 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004596:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	330c      	adds	r3, #12
 800459c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	e853 3f00 	ldrex	r3, [r3]
 80045a4:	60fb      	str	r3, [r7, #12]
   return(result);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80045ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80045ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	330c      	adds	r3, #12
 80045b4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80045b6:	61fa      	str	r2, [r7, #28]
 80045b8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ba:	69b9      	ldr	r1, [r7, #24]
 80045bc:	69fa      	ldr	r2, [r7, #28]
 80045be:	e841 2300 	strex	r3, r2, [r1]
 80045c2:	617b      	str	r3, [r7, #20]
   return(result);
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d1e5      	bne.n	8004596 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80045ca:	e002      	b.n	80045d2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80045cc:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80045ce:	f7fd f99d 	bl	800190c <HAL_UART_TxCpltCallback>
}
 80045d2:	bf00      	nop
 80045d4:	3740      	adds	r7, #64	@ 0x40
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}

080045da <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80045da:	b580      	push	{r7, lr}
 80045dc:	b084      	sub	sp, #16
 80045de:	af00      	add	r7, sp, #0
 80045e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045e6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80045e8:	68f8      	ldr	r0, [r7, #12]
 80045ea:	f7ff ff7f 	bl	80044ec <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045ee:	bf00      	nop
 80045f0:	3710      	adds	r7, #16
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}

080045f6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80045f6:	b580      	push	{r7, lr}
 80045f8:	b09c      	sub	sp, #112	@ 0x70
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004602:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800460e:	2b00      	cmp	r3, #0
 8004610:	d172      	bne.n	80046f8 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004612:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004614:	2200      	movs	r2, #0
 8004616:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004618:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	330c      	adds	r3, #12
 800461e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004620:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004622:	e853 3f00 	ldrex	r3, [r3]
 8004626:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004628:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800462a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800462e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004630:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	330c      	adds	r3, #12
 8004636:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004638:	65ba      	str	r2, [r7, #88]	@ 0x58
 800463a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800463c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800463e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004640:	e841 2300 	strex	r3, r2, [r1]
 8004644:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004646:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004648:	2b00      	cmp	r3, #0
 800464a:	d1e5      	bne.n	8004618 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800464c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	3314      	adds	r3, #20
 8004652:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004654:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004656:	e853 3f00 	ldrex	r3, [r3]
 800465a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800465c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800465e:	f023 0301 	bic.w	r3, r3, #1
 8004662:	667b      	str	r3, [r7, #100]	@ 0x64
 8004664:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	3314      	adds	r3, #20
 800466a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800466c:	647a      	str	r2, [r7, #68]	@ 0x44
 800466e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004670:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004672:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004674:	e841 2300 	strex	r3, r2, [r1]
 8004678:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800467a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800467c:	2b00      	cmp	r3, #0
 800467e:	d1e5      	bne.n	800464c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004680:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	3314      	adds	r3, #20
 8004686:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800468a:	e853 3f00 	ldrex	r3, [r3]
 800468e:	623b      	str	r3, [r7, #32]
   return(result);
 8004690:	6a3b      	ldr	r3, [r7, #32]
 8004692:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004696:	663b      	str	r3, [r7, #96]	@ 0x60
 8004698:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	3314      	adds	r3, #20
 800469e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80046a0:	633a      	str	r2, [r7, #48]	@ 0x30
 80046a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80046a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046a8:	e841 2300 	strex	r3, r2, [r1]
 80046ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80046ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d1e5      	bne.n	8004680 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80046b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80046b6:	2220      	movs	r2, #32
 80046b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80046be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d119      	bne.n	80046f8 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	330c      	adds	r3, #12
 80046ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	e853 3f00 	ldrex	r3, [r3]
 80046d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f023 0310 	bic.w	r3, r3, #16
 80046da:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80046dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	330c      	adds	r3, #12
 80046e2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80046e4:	61fa      	str	r2, [r7, #28]
 80046e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e8:	69b9      	ldr	r1, [r7, #24]
 80046ea:	69fa      	ldr	r2, [r7, #28]
 80046ec:	e841 2300 	strex	r3, r2, [r1]
 80046f0:	617b      	str	r3, [r7, #20]
   return(result);
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d1e5      	bne.n	80046c4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80046f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80046fa:	2200      	movs	r2, #0
 80046fc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004702:	2b01      	cmp	r3, #1
 8004704:	d106      	bne.n	8004714 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004706:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004708:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800470a:	4619      	mov	r1, r3
 800470c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800470e:	f7ff ff0b 	bl	8004528 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004712:	e002      	b.n	800471a <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8004714:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004716:	f7fd f907 	bl	8001928 <HAL_UART_RxCpltCallback>
}
 800471a:	bf00      	nop
 800471c:	3770      	adds	r7, #112	@ 0x70
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}

08004722 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004722:	b580      	push	{r7, lr}
 8004724:	b084      	sub	sp, #16
 8004726:	af00      	add	r7, sp, #0
 8004728:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800472e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2201      	movs	r2, #1
 8004734:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800473a:	2b01      	cmp	r3, #1
 800473c:	d108      	bne.n	8004750 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004742:	085b      	lsrs	r3, r3, #1
 8004744:	b29b      	uxth	r3, r3
 8004746:	4619      	mov	r1, r3
 8004748:	68f8      	ldr	r0, [r7, #12]
 800474a:	f7ff feed 	bl	8004528 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800474e:	e002      	b.n	8004756 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8004750:	68f8      	ldr	r0, [r7, #12]
 8004752:	f7ff fed5 	bl	8004500 <HAL_UART_RxHalfCpltCallback>
}
 8004756:	bf00      	nop
 8004758:	3710      	adds	r7, #16
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}

0800475e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800475e:	b580      	push	{r7, lr}
 8004760:	b084      	sub	sp, #16
 8004762:	af00      	add	r7, sp, #0
 8004764:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004766:	2300      	movs	r3, #0
 8004768:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800476e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	695b      	ldr	r3, [r3, #20]
 8004776:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800477a:	2b80      	cmp	r3, #128	@ 0x80
 800477c:	bf0c      	ite	eq
 800477e:	2301      	moveq	r3, #1
 8004780:	2300      	movne	r3, #0
 8004782:	b2db      	uxtb	r3, r3
 8004784:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800478c:	b2db      	uxtb	r3, r3
 800478e:	2b21      	cmp	r3, #33	@ 0x21
 8004790:	d108      	bne.n	80047a4 <UART_DMAError+0x46>
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d005      	beq.n	80047a4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	2200      	movs	r2, #0
 800479c:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800479e:	68b8      	ldr	r0, [r7, #8]
 80047a0:	f000 f8c2 	bl	8004928 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	695b      	ldr	r3, [r3, #20]
 80047aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047ae:	2b40      	cmp	r3, #64	@ 0x40
 80047b0:	bf0c      	ite	eq
 80047b2:	2301      	moveq	r3, #1
 80047b4:	2300      	movne	r3, #0
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	2b22      	cmp	r3, #34	@ 0x22
 80047c4:	d108      	bne.n	80047d8 <UART_DMAError+0x7a>
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d005      	beq.n	80047d8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	2200      	movs	r2, #0
 80047d0:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80047d2:	68b8      	ldr	r0, [r7, #8]
 80047d4:	f000 f8d0 	bl	8004978 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047dc:	f043 0210 	orr.w	r2, r3, #16
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80047e4:	68b8      	ldr	r0, [r7, #8]
 80047e6:	f7ff fe95 	bl	8004514 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80047ea:	bf00      	nop
 80047ec:	3710      	adds	r7, #16
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
	...

080047f4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b098      	sub	sp, #96	@ 0x60
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	60f8      	str	r0, [r7, #12]
 80047fc:	60b9      	str	r1, [r7, #8]
 80047fe:	4613      	mov	r3, r2
 8004800:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004802:	68ba      	ldr	r2, [r7, #8]
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	88fa      	ldrh	r2, [r7, #6]
 800480c:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2200      	movs	r2, #0
 8004812:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2222      	movs	r2, #34	@ 0x22
 8004818:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004820:	4a3e      	ldr	r2, [pc, #248]	@ (800491c <UART_Start_Receive_DMA+0x128>)
 8004822:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004828:	4a3d      	ldr	r2, [pc, #244]	@ (8004920 <UART_Start_Receive_DMA+0x12c>)
 800482a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004830:	4a3c      	ldr	r2, [pc, #240]	@ (8004924 <UART_Start_Receive_DMA+0x130>)
 8004832:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004838:	2200      	movs	r2, #0
 800483a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800483c:	f107 0308 	add.w	r3, r7, #8
 8004840:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	3304      	adds	r3, #4
 800484c:	4619      	mov	r1, r3
 800484e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	88fb      	ldrh	r3, [r7, #6]
 8004854:	f7fe f9a2 	bl	8002b9c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004858:	2300      	movs	r3, #0
 800485a:	613b      	str	r3, [r7, #16]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	613b      	str	r3, [r7, #16]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	613b      	str	r3, [r7, #16]
 800486c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	691b      	ldr	r3, [r3, #16]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d019      	beq.n	80048aa <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	330c      	adds	r3, #12
 800487c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800487e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004880:	e853 3f00 	ldrex	r3, [r3]
 8004884:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004886:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004888:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800488c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	330c      	adds	r3, #12
 8004894:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004896:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004898:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800489a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800489c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800489e:	e841 2300 	strex	r3, r2, [r1]
 80048a2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80048a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d1e5      	bne.n	8004876 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	3314      	adds	r3, #20
 80048b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048b4:	e853 3f00 	ldrex	r3, [r3]
 80048b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80048ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048bc:	f043 0301 	orr.w	r3, r3, #1
 80048c0:	657b      	str	r3, [r7, #84]	@ 0x54
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	3314      	adds	r3, #20
 80048c8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80048ca:	63ba      	str	r2, [r7, #56]	@ 0x38
 80048cc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ce:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80048d0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80048d2:	e841 2300 	strex	r3, r2, [r1]
 80048d6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80048d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d1e5      	bne.n	80048aa <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	3314      	adds	r3, #20
 80048e4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e6:	69bb      	ldr	r3, [r7, #24]
 80048e8:	e853 3f00 	ldrex	r3, [r3]
 80048ec:	617b      	str	r3, [r7, #20]
   return(result);
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80048f4:	653b      	str	r3, [r7, #80]	@ 0x50
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	3314      	adds	r3, #20
 80048fc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80048fe:	627a      	str	r2, [r7, #36]	@ 0x24
 8004900:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004902:	6a39      	ldr	r1, [r7, #32]
 8004904:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004906:	e841 2300 	strex	r3, r2, [r1]
 800490a:	61fb      	str	r3, [r7, #28]
   return(result);
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d1e5      	bne.n	80048de <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8004912:	2300      	movs	r3, #0
}
 8004914:	4618      	mov	r0, r3
 8004916:	3760      	adds	r7, #96	@ 0x60
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}
 800491c:	080045f7 	.word	0x080045f7
 8004920:	08004723 	.word	0x08004723
 8004924:	0800475f 	.word	0x0800475f

08004928 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004928:	b480      	push	{r7}
 800492a:	b089      	sub	sp, #36	@ 0x24
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	330c      	adds	r3, #12
 8004936:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	e853 3f00 	ldrex	r3, [r3]
 800493e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004946:	61fb      	str	r3, [r7, #28]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	330c      	adds	r3, #12
 800494e:	69fa      	ldr	r2, [r7, #28]
 8004950:	61ba      	str	r2, [r7, #24]
 8004952:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004954:	6979      	ldr	r1, [r7, #20]
 8004956:	69ba      	ldr	r2, [r7, #24]
 8004958:	e841 2300 	strex	r3, r2, [r1]
 800495c:	613b      	str	r3, [r7, #16]
   return(result);
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d1e5      	bne.n	8004930 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2220      	movs	r2, #32
 8004968:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800496c:	bf00      	nop
 800496e:	3724      	adds	r7, #36	@ 0x24
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr

08004978 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004978:	b480      	push	{r7}
 800497a:	b095      	sub	sp, #84	@ 0x54
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	330c      	adds	r3, #12
 8004986:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004988:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800498a:	e853 3f00 	ldrex	r3, [r3]
 800498e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004992:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004996:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	330c      	adds	r3, #12
 800499e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80049a0:	643a      	str	r2, [r7, #64]	@ 0x40
 80049a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049a4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80049a6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80049a8:	e841 2300 	strex	r3, r2, [r1]
 80049ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80049ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d1e5      	bne.n	8004980 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	3314      	adds	r3, #20
 80049ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049bc:	6a3b      	ldr	r3, [r7, #32]
 80049be:	e853 3f00 	ldrex	r3, [r3]
 80049c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80049c4:	69fb      	ldr	r3, [r7, #28]
 80049c6:	f023 0301 	bic.w	r3, r3, #1
 80049ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	3314      	adds	r3, #20
 80049d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80049d4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80049d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80049da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80049dc:	e841 2300 	strex	r3, r2, [r1]
 80049e0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80049e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d1e5      	bne.n	80049b4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d119      	bne.n	8004a24 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	330c      	adds	r3, #12
 80049f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	e853 3f00 	ldrex	r3, [r3]
 80049fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	f023 0310 	bic.w	r3, r3, #16
 8004a06:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	330c      	adds	r3, #12
 8004a0e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004a10:	61ba      	str	r2, [r7, #24]
 8004a12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a14:	6979      	ldr	r1, [r7, #20]
 8004a16:	69ba      	ldr	r2, [r7, #24]
 8004a18:	e841 2300 	strex	r3, r2, [r1]
 8004a1c:	613b      	str	r3, [r7, #16]
   return(result);
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d1e5      	bne.n	80049f0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2220      	movs	r2, #32
 8004a28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004a32:	bf00      	nop
 8004a34:	3754      	adds	r7, #84	@ 0x54
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr

08004a3e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004a3e:	b580      	push	{r7, lr}
 8004a40:	b084      	sub	sp, #16
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a4a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2200      	movs	r2, #0
 8004a56:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a58:	68f8      	ldr	r0, [r7, #12]
 8004a5a:	f7ff fd5b 	bl	8004514 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a5e:	bf00      	nop
 8004a60:	3710      	adds	r7, #16
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}

08004a66 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004a66:	b480      	push	{r7}
 8004a68:	b085      	sub	sp, #20
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	2b21      	cmp	r3, #33	@ 0x21
 8004a78:	d13e      	bne.n	8004af8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a82:	d114      	bne.n	8004aae <UART_Transmit_IT+0x48>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	691b      	ldr	r3, [r3, #16]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d110      	bne.n	8004aae <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6a1b      	ldr	r3, [r3, #32]
 8004a90:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	881b      	ldrh	r3, [r3, #0]
 8004a96:	461a      	mov	r2, r3
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004aa0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6a1b      	ldr	r3, [r3, #32]
 8004aa6:	1c9a      	adds	r2, r3, #2
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	621a      	str	r2, [r3, #32]
 8004aac:	e008      	b.n	8004ac0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a1b      	ldr	r3, [r3, #32]
 8004ab2:	1c59      	adds	r1, r3, #1
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	6211      	str	r1, [r2, #32]
 8004ab8:	781a      	ldrb	r2, [r3, #0]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004ac4:	b29b      	uxth	r3, r3
 8004ac6:	3b01      	subs	r3, #1
 8004ac8:	b29b      	uxth	r3, r3
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	4619      	mov	r1, r3
 8004ace:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d10f      	bne.n	8004af4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	68da      	ldr	r2, [r3, #12]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004ae2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	68da      	ldr	r2, [r3, #12]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004af2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004af4:	2300      	movs	r3, #0
 8004af6:	e000      	b.n	8004afa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004af8:	2302      	movs	r3, #2
  }
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3714      	adds	r7, #20
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr

08004b06 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004b06:	b580      	push	{r7, lr}
 8004b08:	b082      	sub	sp, #8
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	68da      	ldr	r2, [r3, #12]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b1c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2220      	movs	r2, #32
 8004b22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f7fc fef0 	bl	800190c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004b2c:	2300      	movs	r3, #0
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3708      	adds	r7, #8
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}

08004b36 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004b36:	b580      	push	{r7, lr}
 8004b38:	b08c      	sub	sp, #48	@ 0x30
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	2b22      	cmp	r3, #34	@ 0x22
 8004b48:	f040 80ae 	bne.w	8004ca8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b54:	d117      	bne.n	8004b86 <UART_Receive_IT+0x50>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	691b      	ldr	r3, [r3, #16]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d113      	bne.n	8004b86 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b66:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b74:	b29a      	uxth	r2, r3
 8004b76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b78:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b7e:	1c9a      	adds	r2, r3, #2
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	629a      	str	r2, [r3, #40]	@ 0x28
 8004b84:	e026      	b.n	8004bd4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b98:	d007      	beq.n	8004baa <UART_Receive_IT+0x74>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d10a      	bne.n	8004bb8 <UART_Receive_IT+0x82>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	691b      	ldr	r3, [r3, #16]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d106      	bne.n	8004bb8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	b2da      	uxtb	r2, r3
 8004bb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bb4:	701a      	strb	r2, [r3, #0]
 8004bb6:	e008      	b.n	8004bca <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	b2db      	uxtb	r3, r3
 8004bc0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004bc4:	b2da      	uxtb	r2, r3
 8004bc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bc8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bce:	1c5a      	adds	r2, r3, #1
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	3b01      	subs	r3, #1
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	4619      	mov	r1, r3
 8004be2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d15d      	bne.n	8004ca4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	68da      	ldr	r2, [r3, #12]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f022 0220 	bic.w	r2, r2, #32
 8004bf6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	68da      	ldr	r2, [r3, #12]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004c06:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	695a      	ldr	r2, [r3, #20]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f022 0201 	bic.w	r2, r2, #1
 8004c16:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2220      	movs	r2, #32
 8004c1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2200      	movs	r2, #0
 8004c24:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d135      	bne.n	8004c9a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2200      	movs	r2, #0
 8004c32:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	330c      	adds	r3, #12
 8004c3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	e853 3f00 	ldrex	r3, [r3]
 8004c42:	613b      	str	r3, [r7, #16]
   return(result);
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	f023 0310 	bic.w	r3, r3, #16
 8004c4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	330c      	adds	r3, #12
 8004c52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c54:	623a      	str	r2, [r7, #32]
 8004c56:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c58:	69f9      	ldr	r1, [r7, #28]
 8004c5a:	6a3a      	ldr	r2, [r7, #32]
 8004c5c:	e841 2300 	strex	r3, r2, [r1]
 8004c60:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c62:	69bb      	ldr	r3, [r7, #24]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d1e5      	bne.n	8004c34 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 0310 	and.w	r3, r3, #16
 8004c72:	2b10      	cmp	r3, #16
 8004c74:	d10a      	bne.n	8004c8c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c76:	2300      	movs	r3, #0
 8004c78:	60fb      	str	r3, [r7, #12]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	60fb      	str	r3, [r7, #12]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	60fb      	str	r3, [r7, #12]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004c90:	4619      	mov	r1, r3
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f7ff fc48 	bl	8004528 <HAL_UARTEx_RxEventCallback>
 8004c98:	e002      	b.n	8004ca0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f7fc fe44 	bl	8001928 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	e002      	b.n	8004caa <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	e000      	b.n	8004caa <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004ca8:	2302      	movs	r3, #2
  }
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3730      	adds	r7, #48	@ 0x30
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
	...

08004cb4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cb8:	b0c0      	sub	sp, #256	@ 0x100
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	691b      	ldr	r3, [r3, #16]
 8004cc8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cd0:	68d9      	ldr	r1, [r3, #12]
 8004cd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	ea40 0301 	orr.w	r3, r0, r1
 8004cdc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004cde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ce2:	689a      	ldr	r2, [r3, #8]
 8004ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ce8:	691b      	ldr	r3, [r3, #16]
 8004cea:	431a      	orrs	r2, r3
 8004cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cf0:	695b      	ldr	r3, [r3, #20]
 8004cf2:	431a      	orrs	r2, r3
 8004cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cf8:	69db      	ldr	r3, [r3, #28]
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004d00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004d0c:	f021 010c 	bic.w	r1, r1, #12
 8004d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004d1a:	430b      	orrs	r3, r1
 8004d1c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	695b      	ldr	r3, [r3, #20]
 8004d26:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004d2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d2e:	6999      	ldr	r1, [r3, #24]
 8004d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	ea40 0301 	orr.w	r3, r0, r1
 8004d3a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	4b8f      	ldr	r3, [pc, #572]	@ (8004f80 <UART_SetConfig+0x2cc>)
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d005      	beq.n	8004d54 <UART_SetConfig+0xa0>
 8004d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	4b8d      	ldr	r3, [pc, #564]	@ (8004f84 <UART_SetConfig+0x2d0>)
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d104      	bne.n	8004d5e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004d54:	f7ff f83e 	bl	8003dd4 <HAL_RCC_GetPCLK2Freq>
 8004d58:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004d5c:	e003      	b.n	8004d66 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d5e:	f7ff f825 	bl	8003dac <HAL_RCC_GetPCLK1Freq>
 8004d62:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d6a:	69db      	ldr	r3, [r3, #28]
 8004d6c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d70:	f040 810c 	bne.w	8004f8c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d78:	2200      	movs	r2, #0
 8004d7a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004d7e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004d82:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004d86:	4622      	mov	r2, r4
 8004d88:	462b      	mov	r3, r5
 8004d8a:	1891      	adds	r1, r2, r2
 8004d8c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004d8e:	415b      	adcs	r3, r3
 8004d90:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004d92:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004d96:	4621      	mov	r1, r4
 8004d98:	eb12 0801 	adds.w	r8, r2, r1
 8004d9c:	4629      	mov	r1, r5
 8004d9e:	eb43 0901 	adc.w	r9, r3, r1
 8004da2:	f04f 0200 	mov.w	r2, #0
 8004da6:	f04f 0300 	mov.w	r3, #0
 8004daa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004dae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004db2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004db6:	4690      	mov	r8, r2
 8004db8:	4699      	mov	r9, r3
 8004dba:	4623      	mov	r3, r4
 8004dbc:	eb18 0303 	adds.w	r3, r8, r3
 8004dc0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004dc4:	462b      	mov	r3, r5
 8004dc6:	eb49 0303 	adc.w	r3, r9, r3
 8004dca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004dce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004dda:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004dde:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004de2:	460b      	mov	r3, r1
 8004de4:	18db      	adds	r3, r3, r3
 8004de6:	653b      	str	r3, [r7, #80]	@ 0x50
 8004de8:	4613      	mov	r3, r2
 8004dea:	eb42 0303 	adc.w	r3, r2, r3
 8004dee:	657b      	str	r3, [r7, #84]	@ 0x54
 8004df0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004df4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004df8:	f7fb f9f6 	bl	80001e8 <__aeabi_uldivmod>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	460b      	mov	r3, r1
 8004e00:	4b61      	ldr	r3, [pc, #388]	@ (8004f88 <UART_SetConfig+0x2d4>)
 8004e02:	fba3 2302 	umull	r2, r3, r3, r2
 8004e06:	095b      	lsrs	r3, r3, #5
 8004e08:	011c      	lsls	r4, r3, #4
 8004e0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e0e:	2200      	movs	r2, #0
 8004e10:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004e14:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004e18:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004e1c:	4642      	mov	r2, r8
 8004e1e:	464b      	mov	r3, r9
 8004e20:	1891      	adds	r1, r2, r2
 8004e22:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004e24:	415b      	adcs	r3, r3
 8004e26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e28:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004e2c:	4641      	mov	r1, r8
 8004e2e:	eb12 0a01 	adds.w	sl, r2, r1
 8004e32:	4649      	mov	r1, r9
 8004e34:	eb43 0b01 	adc.w	fp, r3, r1
 8004e38:	f04f 0200 	mov.w	r2, #0
 8004e3c:	f04f 0300 	mov.w	r3, #0
 8004e40:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004e44:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004e48:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e4c:	4692      	mov	sl, r2
 8004e4e:	469b      	mov	fp, r3
 8004e50:	4643      	mov	r3, r8
 8004e52:	eb1a 0303 	adds.w	r3, sl, r3
 8004e56:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004e5a:	464b      	mov	r3, r9
 8004e5c:	eb4b 0303 	adc.w	r3, fp, r3
 8004e60:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004e64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004e70:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004e74:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004e78:	460b      	mov	r3, r1
 8004e7a:	18db      	adds	r3, r3, r3
 8004e7c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004e7e:	4613      	mov	r3, r2
 8004e80:	eb42 0303 	adc.w	r3, r2, r3
 8004e84:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e86:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004e8a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004e8e:	f7fb f9ab 	bl	80001e8 <__aeabi_uldivmod>
 8004e92:	4602      	mov	r2, r0
 8004e94:	460b      	mov	r3, r1
 8004e96:	4611      	mov	r1, r2
 8004e98:	4b3b      	ldr	r3, [pc, #236]	@ (8004f88 <UART_SetConfig+0x2d4>)
 8004e9a:	fba3 2301 	umull	r2, r3, r3, r1
 8004e9e:	095b      	lsrs	r3, r3, #5
 8004ea0:	2264      	movs	r2, #100	@ 0x64
 8004ea2:	fb02 f303 	mul.w	r3, r2, r3
 8004ea6:	1acb      	subs	r3, r1, r3
 8004ea8:	00db      	lsls	r3, r3, #3
 8004eaa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004eae:	4b36      	ldr	r3, [pc, #216]	@ (8004f88 <UART_SetConfig+0x2d4>)
 8004eb0:	fba3 2302 	umull	r2, r3, r3, r2
 8004eb4:	095b      	lsrs	r3, r3, #5
 8004eb6:	005b      	lsls	r3, r3, #1
 8004eb8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004ebc:	441c      	add	r4, r3
 8004ebe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004ec8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004ecc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004ed0:	4642      	mov	r2, r8
 8004ed2:	464b      	mov	r3, r9
 8004ed4:	1891      	adds	r1, r2, r2
 8004ed6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004ed8:	415b      	adcs	r3, r3
 8004eda:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004edc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004ee0:	4641      	mov	r1, r8
 8004ee2:	1851      	adds	r1, r2, r1
 8004ee4:	6339      	str	r1, [r7, #48]	@ 0x30
 8004ee6:	4649      	mov	r1, r9
 8004ee8:	414b      	adcs	r3, r1
 8004eea:	637b      	str	r3, [r7, #52]	@ 0x34
 8004eec:	f04f 0200 	mov.w	r2, #0
 8004ef0:	f04f 0300 	mov.w	r3, #0
 8004ef4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004ef8:	4659      	mov	r1, fp
 8004efa:	00cb      	lsls	r3, r1, #3
 8004efc:	4651      	mov	r1, sl
 8004efe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f02:	4651      	mov	r1, sl
 8004f04:	00ca      	lsls	r2, r1, #3
 8004f06:	4610      	mov	r0, r2
 8004f08:	4619      	mov	r1, r3
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	4642      	mov	r2, r8
 8004f0e:	189b      	adds	r3, r3, r2
 8004f10:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004f14:	464b      	mov	r3, r9
 8004f16:	460a      	mov	r2, r1
 8004f18:	eb42 0303 	adc.w	r3, r2, r3
 8004f1c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	2200      	movs	r2, #0
 8004f28:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004f2c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004f30:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004f34:	460b      	mov	r3, r1
 8004f36:	18db      	adds	r3, r3, r3
 8004f38:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004f3a:	4613      	mov	r3, r2
 8004f3c:	eb42 0303 	adc.w	r3, r2, r3
 8004f40:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f42:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004f46:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004f4a:	f7fb f94d 	bl	80001e8 <__aeabi_uldivmod>
 8004f4e:	4602      	mov	r2, r0
 8004f50:	460b      	mov	r3, r1
 8004f52:	4b0d      	ldr	r3, [pc, #52]	@ (8004f88 <UART_SetConfig+0x2d4>)
 8004f54:	fba3 1302 	umull	r1, r3, r3, r2
 8004f58:	095b      	lsrs	r3, r3, #5
 8004f5a:	2164      	movs	r1, #100	@ 0x64
 8004f5c:	fb01 f303 	mul.w	r3, r1, r3
 8004f60:	1ad3      	subs	r3, r2, r3
 8004f62:	00db      	lsls	r3, r3, #3
 8004f64:	3332      	adds	r3, #50	@ 0x32
 8004f66:	4a08      	ldr	r2, [pc, #32]	@ (8004f88 <UART_SetConfig+0x2d4>)
 8004f68:	fba2 2303 	umull	r2, r3, r2, r3
 8004f6c:	095b      	lsrs	r3, r3, #5
 8004f6e:	f003 0207 	and.w	r2, r3, #7
 8004f72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4422      	add	r2, r4
 8004f7a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004f7c:	e106      	b.n	800518c <UART_SetConfig+0x4d8>
 8004f7e:	bf00      	nop
 8004f80:	40011000 	.word	0x40011000
 8004f84:	40011400 	.word	0x40011400
 8004f88:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f90:	2200      	movs	r2, #0
 8004f92:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004f96:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004f9a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004f9e:	4642      	mov	r2, r8
 8004fa0:	464b      	mov	r3, r9
 8004fa2:	1891      	adds	r1, r2, r2
 8004fa4:	6239      	str	r1, [r7, #32]
 8004fa6:	415b      	adcs	r3, r3
 8004fa8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004faa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004fae:	4641      	mov	r1, r8
 8004fb0:	1854      	adds	r4, r2, r1
 8004fb2:	4649      	mov	r1, r9
 8004fb4:	eb43 0501 	adc.w	r5, r3, r1
 8004fb8:	f04f 0200 	mov.w	r2, #0
 8004fbc:	f04f 0300 	mov.w	r3, #0
 8004fc0:	00eb      	lsls	r3, r5, #3
 8004fc2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004fc6:	00e2      	lsls	r2, r4, #3
 8004fc8:	4614      	mov	r4, r2
 8004fca:	461d      	mov	r5, r3
 8004fcc:	4643      	mov	r3, r8
 8004fce:	18e3      	adds	r3, r4, r3
 8004fd0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004fd4:	464b      	mov	r3, r9
 8004fd6:	eb45 0303 	adc.w	r3, r5, r3
 8004fda:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004fde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004fea:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004fee:	f04f 0200 	mov.w	r2, #0
 8004ff2:	f04f 0300 	mov.w	r3, #0
 8004ff6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004ffa:	4629      	mov	r1, r5
 8004ffc:	008b      	lsls	r3, r1, #2
 8004ffe:	4621      	mov	r1, r4
 8005000:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005004:	4621      	mov	r1, r4
 8005006:	008a      	lsls	r2, r1, #2
 8005008:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800500c:	f7fb f8ec 	bl	80001e8 <__aeabi_uldivmod>
 8005010:	4602      	mov	r2, r0
 8005012:	460b      	mov	r3, r1
 8005014:	4b60      	ldr	r3, [pc, #384]	@ (8005198 <UART_SetConfig+0x4e4>)
 8005016:	fba3 2302 	umull	r2, r3, r3, r2
 800501a:	095b      	lsrs	r3, r3, #5
 800501c:	011c      	lsls	r4, r3, #4
 800501e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005022:	2200      	movs	r2, #0
 8005024:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005028:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800502c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005030:	4642      	mov	r2, r8
 8005032:	464b      	mov	r3, r9
 8005034:	1891      	adds	r1, r2, r2
 8005036:	61b9      	str	r1, [r7, #24]
 8005038:	415b      	adcs	r3, r3
 800503a:	61fb      	str	r3, [r7, #28]
 800503c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005040:	4641      	mov	r1, r8
 8005042:	1851      	adds	r1, r2, r1
 8005044:	6139      	str	r1, [r7, #16]
 8005046:	4649      	mov	r1, r9
 8005048:	414b      	adcs	r3, r1
 800504a:	617b      	str	r3, [r7, #20]
 800504c:	f04f 0200 	mov.w	r2, #0
 8005050:	f04f 0300 	mov.w	r3, #0
 8005054:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005058:	4659      	mov	r1, fp
 800505a:	00cb      	lsls	r3, r1, #3
 800505c:	4651      	mov	r1, sl
 800505e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005062:	4651      	mov	r1, sl
 8005064:	00ca      	lsls	r2, r1, #3
 8005066:	4610      	mov	r0, r2
 8005068:	4619      	mov	r1, r3
 800506a:	4603      	mov	r3, r0
 800506c:	4642      	mov	r2, r8
 800506e:	189b      	adds	r3, r3, r2
 8005070:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005074:	464b      	mov	r3, r9
 8005076:	460a      	mov	r2, r1
 8005078:	eb42 0303 	adc.w	r3, r2, r3
 800507c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	2200      	movs	r2, #0
 8005088:	67bb      	str	r3, [r7, #120]	@ 0x78
 800508a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800508c:	f04f 0200 	mov.w	r2, #0
 8005090:	f04f 0300 	mov.w	r3, #0
 8005094:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005098:	4649      	mov	r1, r9
 800509a:	008b      	lsls	r3, r1, #2
 800509c:	4641      	mov	r1, r8
 800509e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050a2:	4641      	mov	r1, r8
 80050a4:	008a      	lsls	r2, r1, #2
 80050a6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80050aa:	f7fb f89d 	bl	80001e8 <__aeabi_uldivmod>
 80050ae:	4602      	mov	r2, r0
 80050b0:	460b      	mov	r3, r1
 80050b2:	4611      	mov	r1, r2
 80050b4:	4b38      	ldr	r3, [pc, #224]	@ (8005198 <UART_SetConfig+0x4e4>)
 80050b6:	fba3 2301 	umull	r2, r3, r3, r1
 80050ba:	095b      	lsrs	r3, r3, #5
 80050bc:	2264      	movs	r2, #100	@ 0x64
 80050be:	fb02 f303 	mul.w	r3, r2, r3
 80050c2:	1acb      	subs	r3, r1, r3
 80050c4:	011b      	lsls	r3, r3, #4
 80050c6:	3332      	adds	r3, #50	@ 0x32
 80050c8:	4a33      	ldr	r2, [pc, #204]	@ (8005198 <UART_SetConfig+0x4e4>)
 80050ca:	fba2 2303 	umull	r2, r3, r2, r3
 80050ce:	095b      	lsrs	r3, r3, #5
 80050d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80050d4:	441c      	add	r4, r3
 80050d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050da:	2200      	movs	r2, #0
 80050dc:	673b      	str	r3, [r7, #112]	@ 0x70
 80050de:	677a      	str	r2, [r7, #116]	@ 0x74
 80050e0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80050e4:	4642      	mov	r2, r8
 80050e6:	464b      	mov	r3, r9
 80050e8:	1891      	adds	r1, r2, r2
 80050ea:	60b9      	str	r1, [r7, #8]
 80050ec:	415b      	adcs	r3, r3
 80050ee:	60fb      	str	r3, [r7, #12]
 80050f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80050f4:	4641      	mov	r1, r8
 80050f6:	1851      	adds	r1, r2, r1
 80050f8:	6039      	str	r1, [r7, #0]
 80050fa:	4649      	mov	r1, r9
 80050fc:	414b      	adcs	r3, r1
 80050fe:	607b      	str	r3, [r7, #4]
 8005100:	f04f 0200 	mov.w	r2, #0
 8005104:	f04f 0300 	mov.w	r3, #0
 8005108:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800510c:	4659      	mov	r1, fp
 800510e:	00cb      	lsls	r3, r1, #3
 8005110:	4651      	mov	r1, sl
 8005112:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005116:	4651      	mov	r1, sl
 8005118:	00ca      	lsls	r2, r1, #3
 800511a:	4610      	mov	r0, r2
 800511c:	4619      	mov	r1, r3
 800511e:	4603      	mov	r3, r0
 8005120:	4642      	mov	r2, r8
 8005122:	189b      	adds	r3, r3, r2
 8005124:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005126:	464b      	mov	r3, r9
 8005128:	460a      	mov	r2, r1
 800512a:	eb42 0303 	adc.w	r3, r2, r3
 800512e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	2200      	movs	r2, #0
 8005138:	663b      	str	r3, [r7, #96]	@ 0x60
 800513a:	667a      	str	r2, [r7, #100]	@ 0x64
 800513c:	f04f 0200 	mov.w	r2, #0
 8005140:	f04f 0300 	mov.w	r3, #0
 8005144:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005148:	4649      	mov	r1, r9
 800514a:	008b      	lsls	r3, r1, #2
 800514c:	4641      	mov	r1, r8
 800514e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005152:	4641      	mov	r1, r8
 8005154:	008a      	lsls	r2, r1, #2
 8005156:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800515a:	f7fb f845 	bl	80001e8 <__aeabi_uldivmod>
 800515e:	4602      	mov	r2, r0
 8005160:	460b      	mov	r3, r1
 8005162:	4b0d      	ldr	r3, [pc, #52]	@ (8005198 <UART_SetConfig+0x4e4>)
 8005164:	fba3 1302 	umull	r1, r3, r3, r2
 8005168:	095b      	lsrs	r3, r3, #5
 800516a:	2164      	movs	r1, #100	@ 0x64
 800516c:	fb01 f303 	mul.w	r3, r1, r3
 8005170:	1ad3      	subs	r3, r2, r3
 8005172:	011b      	lsls	r3, r3, #4
 8005174:	3332      	adds	r3, #50	@ 0x32
 8005176:	4a08      	ldr	r2, [pc, #32]	@ (8005198 <UART_SetConfig+0x4e4>)
 8005178:	fba2 2303 	umull	r2, r3, r2, r3
 800517c:	095b      	lsrs	r3, r3, #5
 800517e:	f003 020f 	and.w	r2, r3, #15
 8005182:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4422      	add	r2, r4
 800518a:	609a      	str	r2, [r3, #8]
}
 800518c:	bf00      	nop
 800518e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005192:	46bd      	mov	sp, r7
 8005194:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005198:	51eb851f 	.word	0x51eb851f

0800519c <realloc>:
 800519c:	4b02      	ldr	r3, [pc, #8]	@ (80051a8 <realloc+0xc>)
 800519e:	460a      	mov	r2, r1
 80051a0:	4601      	mov	r1, r0
 80051a2:	6818      	ldr	r0, [r3, #0]
 80051a4:	f000 b802 	b.w	80051ac <_realloc_r>
 80051a8:	2000000c 	.word	0x2000000c

080051ac <_realloc_r>:
 80051ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051b0:	4680      	mov	r8, r0
 80051b2:	4615      	mov	r5, r2
 80051b4:	460c      	mov	r4, r1
 80051b6:	b921      	cbnz	r1, 80051c2 <_realloc_r+0x16>
 80051b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80051bc:	4611      	mov	r1, r2
 80051be:	f000 b8d1 	b.w	8005364 <_malloc_r>
 80051c2:	b92a      	cbnz	r2, 80051d0 <_realloc_r+0x24>
 80051c4:	f000 f862 	bl	800528c <_free_r>
 80051c8:	2400      	movs	r4, #0
 80051ca:	4620      	mov	r0, r4
 80051cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051d0:	f000 f954 	bl	800547c <_malloc_usable_size_r>
 80051d4:	4285      	cmp	r5, r0
 80051d6:	4606      	mov	r6, r0
 80051d8:	d802      	bhi.n	80051e0 <_realloc_r+0x34>
 80051da:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80051de:	d8f4      	bhi.n	80051ca <_realloc_r+0x1e>
 80051e0:	4629      	mov	r1, r5
 80051e2:	4640      	mov	r0, r8
 80051e4:	f000 f8be 	bl	8005364 <_malloc_r>
 80051e8:	4607      	mov	r7, r0
 80051ea:	2800      	cmp	r0, #0
 80051ec:	d0ec      	beq.n	80051c8 <_realloc_r+0x1c>
 80051ee:	42b5      	cmp	r5, r6
 80051f0:	462a      	mov	r2, r5
 80051f2:	4621      	mov	r1, r4
 80051f4:	bf28      	it	cs
 80051f6:	4632      	movcs	r2, r6
 80051f8:	f000 f83a 	bl	8005270 <memcpy>
 80051fc:	4621      	mov	r1, r4
 80051fe:	4640      	mov	r0, r8
 8005200:	f000 f844 	bl	800528c <_free_r>
 8005204:	463c      	mov	r4, r7
 8005206:	e7e0      	b.n	80051ca <_realloc_r+0x1e>

08005208 <memset>:
 8005208:	4402      	add	r2, r0
 800520a:	4603      	mov	r3, r0
 800520c:	4293      	cmp	r3, r2
 800520e:	d100      	bne.n	8005212 <memset+0xa>
 8005210:	4770      	bx	lr
 8005212:	f803 1b01 	strb.w	r1, [r3], #1
 8005216:	e7f9      	b.n	800520c <memset+0x4>

08005218 <__errno>:
 8005218:	4b01      	ldr	r3, [pc, #4]	@ (8005220 <__errno+0x8>)
 800521a:	6818      	ldr	r0, [r3, #0]
 800521c:	4770      	bx	lr
 800521e:	bf00      	nop
 8005220:	2000000c 	.word	0x2000000c

08005224 <__libc_init_array>:
 8005224:	b570      	push	{r4, r5, r6, lr}
 8005226:	4d0d      	ldr	r5, [pc, #52]	@ (800525c <__libc_init_array+0x38>)
 8005228:	4c0d      	ldr	r4, [pc, #52]	@ (8005260 <__libc_init_array+0x3c>)
 800522a:	1b64      	subs	r4, r4, r5
 800522c:	10a4      	asrs	r4, r4, #2
 800522e:	2600      	movs	r6, #0
 8005230:	42a6      	cmp	r6, r4
 8005232:	d109      	bne.n	8005248 <__libc_init_array+0x24>
 8005234:	4d0b      	ldr	r5, [pc, #44]	@ (8005264 <__libc_init_array+0x40>)
 8005236:	4c0c      	ldr	r4, [pc, #48]	@ (8005268 <__libc_init_array+0x44>)
 8005238:	f000 f938 	bl	80054ac <_init>
 800523c:	1b64      	subs	r4, r4, r5
 800523e:	10a4      	asrs	r4, r4, #2
 8005240:	2600      	movs	r6, #0
 8005242:	42a6      	cmp	r6, r4
 8005244:	d105      	bne.n	8005252 <__libc_init_array+0x2e>
 8005246:	bd70      	pop	{r4, r5, r6, pc}
 8005248:	f855 3b04 	ldr.w	r3, [r5], #4
 800524c:	4798      	blx	r3
 800524e:	3601      	adds	r6, #1
 8005250:	e7ee      	b.n	8005230 <__libc_init_array+0xc>
 8005252:	f855 3b04 	ldr.w	r3, [r5], #4
 8005256:	4798      	blx	r3
 8005258:	3601      	adds	r6, #1
 800525a:	e7f2      	b.n	8005242 <__libc_init_array+0x1e>
 800525c:	08005714 	.word	0x08005714
 8005260:	08005714 	.word	0x08005714
 8005264:	08005714 	.word	0x08005714
 8005268:	0800571c 	.word	0x0800571c

0800526c <__retarget_lock_acquire_recursive>:
 800526c:	4770      	bx	lr

0800526e <__retarget_lock_release_recursive>:
 800526e:	4770      	bx	lr

08005270 <memcpy>:
 8005270:	440a      	add	r2, r1
 8005272:	4291      	cmp	r1, r2
 8005274:	f100 33ff 	add.w	r3, r0, #4294967295
 8005278:	d100      	bne.n	800527c <memcpy+0xc>
 800527a:	4770      	bx	lr
 800527c:	b510      	push	{r4, lr}
 800527e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005282:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005286:	4291      	cmp	r1, r2
 8005288:	d1f9      	bne.n	800527e <memcpy+0xe>
 800528a:	bd10      	pop	{r4, pc}

0800528c <_free_r>:
 800528c:	b538      	push	{r3, r4, r5, lr}
 800528e:	4605      	mov	r5, r0
 8005290:	2900      	cmp	r1, #0
 8005292:	d041      	beq.n	8005318 <_free_r+0x8c>
 8005294:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005298:	1f0c      	subs	r4, r1, #4
 800529a:	2b00      	cmp	r3, #0
 800529c:	bfb8      	it	lt
 800529e:	18e4      	addlt	r4, r4, r3
 80052a0:	f000 f8e0 	bl	8005464 <__malloc_lock>
 80052a4:	4a1d      	ldr	r2, [pc, #116]	@ (800531c <_free_r+0x90>)
 80052a6:	6813      	ldr	r3, [r2, #0]
 80052a8:	b933      	cbnz	r3, 80052b8 <_free_r+0x2c>
 80052aa:	6063      	str	r3, [r4, #4]
 80052ac:	6014      	str	r4, [r2, #0]
 80052ae:	4628      	mov	r0, r5
 80052b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80052b4:	f000 b8dc 	b.w	8005470 <__malloc_unlock>
 80052b8:	42a3      	cmp	r3, r4
 80052ba:	d908      	bls.n	80052ce <_free_r+0x42>
 80052bc:	6820      	ldr	r0, [r4, #0]
 80052be:	1821      	adds	r1, r4, r0
 80052c0:	428b      	cmp	r3, r1
 80052c2:	bf01      	itttt	eq
 80052c4:	6819      	ldreq	r1, [r3, #0]
 80052c6:	685b      	ldreq	r3, [r3, #4]
 80052c8:	1809      	addeq	r1, r1, r0
 80052ca:	6021      	streq	r1, [r4, #0]
 80052cc:	e7ed      	b.n	80052aa <_free_r+0x1e>
 80052ce:	461a      	mov	r2, r3
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	b10b      	cbz	r3, 80052d8 <_free_r+0x4c>
 80052d4:	42a3      	cmp	r3, r4
 80052d6:	d9fa      	bls.n	80052ce <_free_r+0x42>
 80052d8:	6811      	ldr	r1, [r2, #0]
 80052da:	1850      	adds	r0, r2, r1
 80052dc:	42a0      	cmp	r0, r4
 80052de:	d10b      	bne.n	80052f8 <_free_r+0x6c>
 80052e0:	6820      	ldr	r0, [r4, #0]
 80052e2:	4401      	add	r1, r0
 80052e4:	1850      	adds	r0, r2, r1
 80052e6:	4283      	cmp	r3, r0
 80052e8:	6011      	str	r1, [r2, #0]
 80052ea:	d1e0      	bne.n	80052ae <_free_r+0x22>
 80052ec:	6818      	ldr	r0, [r3, #0]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	6053      	str	r3, [r2, #4]
 80052f2:	4408      	add	r0, r1
 80052f4:	6010      	str	r0, [r2, #0]
 80052f6:	e7da      	b.n	80052ae <_free_r+0x22>
 80052f8:	d902      	bls.n	8005300 <_free_r+0x74>
 80052fa:	230c      	movs	r3, #12
 80052fc:	602b      	str	r3, [r5, #0]
 80052fe:	e7d6      	b.n	80052ae <_free_r+0x22>
 8005300:	6820      	ldr	r0, [r4, #0]
 8005302:	1821      	adds	r1, r4, r0
 8005304:	428b      	cmp	r3, r1
 8005306:	bf04      	itt	eq
 8005308:	6819      	ldreq	r1, [r3, #0]
 800530a:	685b      	ldreq	r3, [r3, #4]
 800530c:	6063      	str	r3, [r4, #4]
 800530e:	bf04      	itt	eq
 8005310:	1809      	addeq	r1, r1, r0
 8005312:	6021      	streq	r1, [r4, #0]
 8005314:	6054      	str	r4, [r2, #4]
 8005316:	e7ca      	b.n	80052ae <_free_r+0x22>
 8005318:	bd38      	pop	{r3, r4, r5, pc}
 800531a:	bf00      	nop
 800531c:	200013ac 	.word	0x200013ac

08005320 <sbrk_aligned>:
 8005320:	b570      	push	{r4, r5, r6, lr}
 8005322:	4e0f      	ldr	r6, [pc, #60]	@ (8005360 <sbrk_aligned+0x40>)
 8005324:	460c      	mov	r4, r1
 8005326:	6831      	ldr	r1, [r6, #0]
 8005328:	4605      	mov	r5, r0
 800532a:	b911      	cbnz	r1, 8005332 <sbrk_aligned+0x12>
 800532c:	f000 f8ae 	bl	800548c <_sbrk_r>
 8005330:	6030      	str	r0, [r6, #0]
 8005332:	4621      	mov	r1, r4
 8005334:	4628      	mov	r0, r5
 8005336:	f000 f8a9 	bl	800548c <_sbrk_r>
 800533a:	1c43      	adds	r3, r0, #1
 800533c:	d103      	bne.n	8005346 <sbrk_aligned+0x26>
 800533e:	f04f 34ff 	mov.w	r4, #4294967295
 8005342:	4620      	mov	r0, r4
 8005344:	bd70      	pop	{r4, r5, r6, pc}
 8005346:	1cc4      	adds	r4, r0, #3
 8005348:	f024 0403 	bic.w	r4, r4, #3
 800534c:	42a0      	cmp	r0, r4
 800534e:	d0f8      	beq.n	8005342 <sbrk_aligned+0x22>
 8005350:	1a21      	subs	r1, r4, r0
 8005352:	4628      	mov	r0, r5
 8005354:	f000 f89a 	bl	800548c <_sbrk_r>
 8005358:	3001      	adds	r0, #1
 800535a:	d1f2      	bne.n	8005342 <sbrk_aligned+0x22>
 800535c:	e7ef      	b.n	800533e <sbrk_aligned+0x1e>
 800535e:	bf00      	nop
 8005360:	200013a8 	.word	0x200013a8

08005364 <_malloc_r>:
 8005364:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005368:	1ccd      	adds	r5, r1, #3
 800536a:	f025 0503 	bic.w	r5, r5, #3
 800536e:	3508      	adds	r5, #8
 8005370:	2d0c      	cmp	r5, #12
 8005372:	bf38      	it	cc
 8005374:	250c      	movcc	r5, #12
 8005376:	2d00      	cmp	r5, #0
 8005378:	4606      	mov	r6, r0
 800537a:	db01      	blt.n	8005380 <_malloc_r+0x1c>
 800537c:	42a9      	cmp	r1, r5
 800537e:	d904      	bls.n	800538a <_malloc_r+0x26>
 8005380:	230c      	movs	r3, #12
 8005382:	6033      	str	r3, [r6, #0]
 8005384:	2000      	movs	r0, #0
 8005386:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800538a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005460 <_malloc_r+0xfc>
 800538e:	f000 f869 	bl	8005464 <__malloc_lock>
 8005392:	f8d8 3000 	ldr.w	r3, [r8]
 8005396:	461c      	mov	r4, r3
 8005398:	bb44      	cbnz	r4, 80053ec <_malloc_r+0x88>
 800539a:	4629      	mov	r1, r5
 800539c:	4630      	mov	r0, r6
 800539e:	f7ff ffbf 	bl	8005320 <sbrk_aligned>
 80053a2:	1c43      	adds	r3, r0, #1
 80053a4:	4604      	mov	r4, r0
 80053a6:	d158      	bne.n	800545a <_malloc_r+0xf6>
 80053a8:	f8d8 4000 	ldr.w	r4, [r8]
 80053ac:	4627      	mov	r7, r4
 80053ae:	2f00      	cmp	r7, #0
 80053b0:	d143      	bne.n	800543a <_malloc_r+0xd6>
 80053b2:	2c00      	cmp	r4, #0
 80053b4:	d04b      	beq.n	800544e <_malloc_r+0xea>
 80053b6:	6823      	ldr	r3, [r4, #0]
 80053b8:	4639      	mov	r1, r7
 80053ba:	4630      	mov	r0, r6
 80053bc:	eb04 0903 	add.w	r9, r4, r3
 80053c0:	f000 f864 	bl	800548c <_sbrk_r>
 80053c4:	4581      	cmp	r9, r0
 80053c6:	d142      	bne.n	800544e <_malloc_r+0xea>
 80053c8:	6821      	ldr	r1, [r4, #0]
 80053ca:	1a6d      	subs	r5, r5, r1
 80053cc:	4629      	mov	r1, r5
 80053ce:	4630      	mov	r0, r6
 80053d0:	f7ff ffa6 	bl	8005320 <sbrk_aligned>
 80053d4:	3001      	adds	r0, #1
 80053d6:	d03a      	beq.n	800544e <_malloc_r+0xea>
 80053d8:	6823      	ldr	r3, [r4, #0]
 80053da:	442b      	add	r3, r5
 80053dc:	6023      	str	r3, [r4, #0]
 80053de:	f8d8 3000 	ldr.w	r3, [r8]
 80053e2:	685a      	ldr	r2, [r3, #4]
 80053e4:	bb62      	cbnz	r2, 8005440 <_malloc_r+0xdc>
 80053e6:	f8c8 7000 	str.w	r7, [r8]
 80053ea:	e00f      	b.n	800540c <_malloc_r+0xa8>
 80053ec:	6822      	ldr	r2, [r4, #0]
 80053ee:	1b52      	subs	r2, r2, r5
 80053f0:	d420      	bmi.n	8005434 <_malloc_r+0xd0>
 80053f2:	2a0b      	cmp	r2, #11
 80053f4:	d917      	bls.n	8005426 <_malloc_r+0xc2>
 80053f6:	1961      	adds	r1, r4, r5
 80053f8:	42a3      	cmp	r3, r4
 80053fa:	6025      	str	r5, [r4, #0]
 80053fc:	bf18      	it	ne
 80053fe:	6059      	strne	r1, [r3, #4]
 8005400:	6863      	ldr	r3, [r4, #4]
 8005402:	bf08      	it	eq
 8005404:	f8c8 1000 	streq.w	r1, [r8]
 8005408:	5162      	str	r2, [r4, r5]
 800540a:	604b      	str	r3, [r1, #4]
 800540c:	4630      	mov	r0, r6
 800540e:	f000 f82f 	bl	8005470 <__malloc_unlock>
 8005412:	f104 000b 	add.w	r0, r4, #11
 8005416:	1d23      	adds	r3, r4, #4
 8005418:	f020 0007 	bic.w	r0, r0, #7
 800541c:	1ac2      	subs	r2, r0, r3
 800541e:	bf1c      	itt	ne
 8005420:	1a1b      	subne	r3, r3, r0
 8005422:	50a3      	strne	r3, [r4, r2]
 8005424:	e7af      	b.n	8005386 <_malloc_r+0x22>
 8005426:	6862      	ldr	r2, [r4, #4]
 8005428:	42a3      	cmp	r3, r4
 800542a:	bf0c      	ite	eq
 800542c:	f8c8 2000 	streq.w	r2, [r8]
 8005430:	605a      	strne	r2, [r3, #4]
 8005432:	e7eb      	b.n	800540c <_malloc_r+0xa8>
 8005434:	4623      	mov	r3, r4
 8005436:	6864      	ldr	r4, [r4, #4]
 8005438:	e7ae      	b.n	8005398 <_malloc_r+0x34>
 800543a:	463c      	mov	r4, r7
 800543c:	687f      	ldr	r7, [r7, #4]
 800543e:	e7b6      	b.n	80053ae <_malloc_r+0x4a>
 8005440:	461a      	mov	r2, r3
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	42a3      	cmp	r3, r4
 8005446:	d1fb      	bne.n	8005440 <_malloc_r+0xdc>
 8005448:	2300      	movs	r3, #0
 800544a:	6053      	str	r3, [r2, #4]
 800544c:	e7de      	b.n	800540c <_malloc_r+0xa8>
 800544e:	230c      	movs	r3, #12
 8005450:	6033      	str	r3, [r6, #0]
 8005452:	4630      	mov	r0, r6
 8005454:	f000 f80c 	bl	8005470 <__malloc_unlock>
 8005458:	e794      	b.n	8005384 <_malloc_r+0x20>
 800545a:	6005      	str	r5, [r0, #0]
 800545c:	e7d6      	b.n	800540c <_malloc_r+0xa8>
 800545e:	bf00      	nop
 8005460:	200013ac 	.word	0x200013ac

08005464 <__malloc_lock>:
 8005464:	4801      	ldr	r0, [pc, #4]	@ (800546c <__malloc_lock+0x8>)
 8005466:	f7ff bf01 	b.w	800526c <__retarget_lock_acquire_recursive>
 800546a:	bf00      	nop
 800546c:	200013a4 	.word	0x200013a4

08005470 <__malloc_unlock>:
 8005470:	4801      	ldr	r0, [pc, #4]	@ (8005478 <__malloc_unlock+0x8>)
 8005472:	f7ff befc 	b.w	800526e <__retarget_lock_release_recursive>
 8005476:	bf00      	nop
 8005478:	200013a4 	.word	0x200013a4

0800547c <_malloc_usable_size_r>:
 800547c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005480:	1f18      	subs	r0, r3, #4
 8005482:	2b00      	cmp	r3, #0
 8005484:	bfbc      	itt	lt
 8005486:	580b      	ldrlt	r3, [r1, r0]
 8005488:	18c0      	addlt	r0, r0, r3
 800548a:	4770      	bx	lr

0800548c <_sbrk_r>:
 800548c:	b538      	push	{r3, r4, r5, lr}
 800548e:	4d06      	ldr	r5, [pc, #24]	@ (80054a8 <_sbrk_r+0x1c>)
 8005490:	2300      	movs	r3, #0
 8005492:	4604      	mov	r4, r0
 8005494:	4608      	mov	r0, r1
 8005496:	602b      	str	r3, [r5, #0]
 8005498:	f7fd f88c 	bl	80025b4 <_sbrk>
 800549c:	1c43      	adds	r3, r0, #1
 800549e:	d102      	bne.n	80054a6 <_sbrk_r+0x1a>
 80054a0:	682b      	ldr	r3, [r5, #0]
 80054a2:	b103      	cbz	r3, 80054a6 <_sbrk_r+0x1a>
 80054a4:	6023      	str	r3, [r4, #0]
 80054a6:	bd38      	pop	{r3, r4, r5, pc}
 80054a8:	200013a0 	.word	0x200013a0

080054ac <_init>:
 80054ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054ae:	bf00      	nop
 80054b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054b2:	bc08      	pop	{r3}
 80054b4:	469e      	mov	lr, r3
 80054b6:	4770      	bx	lr

080054b8 <_fini>:
 80054b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054ba:	bf00      	nop
 80054bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054be:	bc08      	pop	{r3}
 80054c0:	469e      	mov	lr, r3
 80054c2:	4770      	bx	lr
