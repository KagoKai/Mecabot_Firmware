/*
 * mainpp.cpp
 *
 *  Created on: Apr 3, 2024
 *      Author: ADMIN
 */

#include "mainpp.h"
#include "ros_config.h"
#include "encoder.h"
#include "dc_motor.h"

Encoder_t *my_encoder;
Motor_t *my_motor;

uint32_t t = 0, t_motor_control_prev = 0, t_motor_rpm_prev = 0;
uint16_t last_tick = 0;

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
	comm_rosserial.set_tx_cplt();
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	comm_rosserial.reset_rbuf();
}

void ros_setup()
{
	nh.initNode();

	nh.subscribe(sub_motor_speed);
	nh.advertise(pub_motor_rpm);
}

uint32_t millis()
{
	return HAL_GetTick();
}

void setup()
{
	ros_setup();

	Encoder_Handle_t encoder_handle =
	{
			.max_count = 0xFFFFFFFF,
			.tick_read_channel = TIM_CHANNEL_1
	};
	my_encoder = Encoder_Init(encoder_handle);

	Motor_Handle_t motor_handle =
	{
			.direction_port = GPIOA,
			.direction_pin_A = GPIO_PIN_11,
			.direction_pin_B = GPIO_PIN_12,
			.pwm_frequency = 1000,
			.pwm_channel = TIM_CHANNEL_1,
	};
	my_motor = Motor_Init(motor_handle);
}

void loop()
{
	t = millis();

	if (t - t_motor_rpm_prev >= 1000 / RPM_PUBLISH_FREQUENCY)
	{
		updateRpm();
		publishRpmMsg();
	}

	nh.spinOnce();
}

void updateRpm()
{
	Encoder_UpdateTick(my_encoder);
}

void publishRpmMsg()
{

}
