
control_board_system_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000105d0  080001e8  080001e8  000011e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000de8  080107b8  080107b8  000117b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080115a0  080115a0  00013090  2**0
                  CONTENTS
  4 .ARM          00000008  080115a0  080115a0  000125a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080115a8  080115a8  00013090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080115a8  080115a8  000125a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080115b0  080115b0  000125b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000090  20000000  080115b4  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008ae0  20000090  08011644  00013090  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20008b70  08011644  00013b70  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00013090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020717  00000000  00000000  000130b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037a2  00000000  00000000  000337d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016e0  00000000  00000000  00036f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011f1  00000000  00000000  00038658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dbe5  00000000  00000000  00039849  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ce13  00000000  00000000  0005742e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a801d  00000000  00000000  00074241  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011c25e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006fe0  00000000  00000000  0011c2a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  00123284  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	@ (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	@ (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000090 	.word	0x20000090
 8000204:	00000000 	.word	0x00000000
 8000208:	080107a0 	.word	0x080107a0

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	@ (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	@ (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	@ (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000094 	.word	0x20000094
 8000224:	080107a0 	.word	0x080107a0

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	@ 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_d2iz>:
 8000ae4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000aec:	d215      	bcs.n	8000b1a <__aeabi_d2iz+0x36>
 8000aee:	d511      	bpl.n	8000b14 <__aeabi_d2iz+0x30>
 8000af0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000af4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af8:	d912      	bls.n	8000b20 <__aeabi_d2iz+0x3c>
 8000afa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000afe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b02:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b06:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b0e:	bf18      	it	ne
 8000b10:	4240      	negne	r0, r0
 8000b12:	4770      	bx	lr
 8000b14:	f04f 0000 	mov.w	r0, #0
 8000b18:	4770      	bx	lr
 8000b1a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b1e:	d105      	bne.n	8000b2c <__aeabi_d2iz+0x48>
 8000b20:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b24:	bf08      	it	eq
 8000b26:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b2a:	4770      	bx	lr
 8000b2c:	f04f 0000 	mov.w	r0, #0
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop

08000b34 <__aeabi_d2f>:
 8000b34:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b38:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b3c:	bf24      	itt	cs
 8000b3e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b42:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b46:	d90d      	bls.n	8000b64 <__aeabi_d2f+0x30>
 8000b48:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b4c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b50:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b54:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b58:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b5c:	bf08      	it	eq
 8000b5e:	f020 0001 	biceq.w	r0, r0, #1
 8000b62:	4770      	bx	lr
 8000b64:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b68:	d121      	bne.n	8000bae <__aeabi_d2f+0x7a>
 8000b6a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b6e:	bfbc      	itt	lt
 8000b70:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b74:	4770      	bxlt	lr
 8000b76:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b7a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b7e:	f1c2 0218 	rsb	r2, r2, #24
 8000b82:	f1c2 0c20 	rsb	ip, r2, #32
 8000b86:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b8a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b8e:	bf18      	it	ne
 8000b90:	f040 0001 	orrne.w	r0, r0, #1
 8000b94:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b98:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b9c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ba0:	ea40 000c 	orr.w	r0, r0, ip
 8000ba4:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bac:	e7cc      	b.n	8000b48 <__aeabi_d2f+0x14>
 8000bae:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bb2:	d107      	bne.n	8000bc4 <__aeabi_d2f+0x90>
 8000bb4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb8:	bf1e      	ittt	ne
 8000bba:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bbe:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bc2:	4770      	bxne	lr
 8000bc4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bcc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop

08000bd4 <__aeabi_frsub>:
 8000bd4:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000bd8:	e002      	b.n	8000be0 <__addsf3>
 8000bda:	bf00      	nop

08000bdc <__aeabi_fsub>:
 8000bdc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000be0 <__addsf3>:
 8000be0:	0042      	lsls	r2, r0, #1
 8000be2:	bf1f      	itttt	ne
 8000be4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000be8:	ea92 0f03 	teqne	r2, r3
 8000bec:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bf0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bf4:	d06a      	beq.n	8000ccc <__addsf3+0xec>
 8000bf6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bfa:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bfe:	bfc1      	itttt	gt
 8000c00:	18d2      	addgt	r2, r2, r3
 8000c02:	4041      	eorgt	r1, r0
 8000c04:	4048      	eorgt	r0, r1
 8000c06:	4041      	eorgt	r1, r0
 8000c08:	bfb8      	it	lt
 8000c0a:	425b      	neglt	r3, r3
 8000c0c:	2b19      	cmp	r3, #25
 8000c0e:	bf88      	it	hi
 8000c10:	4770      	bxhi	lr
 8000c12:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c16:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c1a:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c1e:	bf18      	it	ne
 8000c20:	4240      	negne	r0, r0
 8000c22:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c26:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c2a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c2e:	bf18      	it	ne
 8000c30:	4249      	negne	r1, r1
 8000c32:	ea92 0f03 	teq	r2, r3
 8000c36:	d03f      	beq.n	8000cb8 <__addsf3+0xd8>
 8000c38:	f1a2 0201 	sub.w	r2, r2, #1
 8000c3c:	fa41 fc03 	asr.w	ip, r1, r3
 8000c40:	eb10 000c 	adds.w	r0, r0, ip
 8000c44:	f1c3 0320 	rsb	r3, r3, #32
 8000c48:	fa01 f103 	lsl.w	r1, r1, r3
 8000c4c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c50:	d502      	bpl.n	8000c58 <__addsf3+0x78>
 8000c52:	4249      	negs	r1, r1
 8000c54:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c58:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c5c:	d313      	bcc.n	8000c86 <__addsf3+0xa6>
 8000c5e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c62:	d306      	bcc.n	8000c72 <__addsf3+0x92>
 8000c64:	0840      	lsrs	r0, r0, #1
 8000c66:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c6a:	f102 0201 	add.w	r2, r2, #1
 8000c6e:	2afe      	cmp	r2, #254	@ 0xfe
 8000c70:	d251      	bcs.n	8000d16 <__addsf3+0x136>
 8000c72:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c76:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c7a:	bf08      	it	eq
 8000c7c:	f020 0001 	biceq.w	r0, r0, #1
 8000c80:	ea40 0003 	orr.w	r0, r0, r3
 8000c84:	4770      	bx	lr
 8000c86:	0049      	lsls	r1, r1, #1
 8000c88:	eb40 0000 	adc.w	r0, r0, r0
 8000c8c:	3a01      	subs	r2, #1
 8000c8e:	bf28      	it	cs
 8000c90:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c94:	d2ed      	bcs.n	8000c72 <__addsf3+0x92>
 8000c96:	fab0 fc80 	clz	ip, r0
 8000c9a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c9e:	ebb2 020c 	subs.w	r2, r2, ip
 8000ca2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000ca6:	bfaa      	itet	ge
 8000ca8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cac:	4252      	neglt	r2, r2
 8000cae:	4318      	orrge	r0, r3
 8000cb0:	bfbc      	itt	lt
 8000cb2:	40d0      	lsrlt	r0, r2
 8000cb4:	4318      	orrlt	r0, r3
 8000cb6:	4770      	bx	lr
 8000cb8:	f092 0f00 	teq	r2, #0
 8000cbc:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000cc0:	bf06      	itte	eq
 8000cc2:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000cc6:	3201      	addeq	r2, #1
 8000cc8:	3b01      	subne	r3, #1
 8000cca:	e7b5      	b.n	8000c38 <__addsf3+0x58>
 8000ccc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cd0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cd4:	bf18      	it	ne
 8000cd6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cda:	d021      	beq.n	8000d20 <__addsf3+0x140>
 8000cdc:	ea92 0f03 	teq	r2, r3
 8000ce0:	d004      	beq.n	8000cec <__addsf3+0x10c>
 8000ce2:	f092 0f00 	teq	r2, #0
 8000ce6:	bf08      	it	eq
 8000ce8:	4608      	moveq	r0, r1
 8000cea:	4770      	bx	lr
 8000cec:	ea90 0f01 	teq	r0, r1
 8000cf0:	bf1c      	itt	ne
 8000cf2:	2000      	movne	r0, #0
 8000cf4:	4770      	bxne	lr
 8000cf6:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000cfa:	d104      	bne.n	8000d06 <__addsf3+0x126>
 8000cfc:	0040      	lsls	r0, r0, #1
 8000cfe:	bf28      	it	cs
 8000d00:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d04:	4770      	bx	lr
 8000d06:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d0a:	bf3c      	itt	cc
 8000d0c:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d10:	4770      	bxcc	lr
 8000d12:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d16:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d1a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d1e:	4770      	bx	lr
 8000d20:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d24:	bf16      	itet	ne
 8000d26:	4608      	movne	r0, r1
 8000d28:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d2c:	4601      	movne	r1, r0
 8000d2e:	0242      	lsls	r2, r0, #9
 8000d30:	bf06      	itte	eq
 8000d32:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d36:	ea90 0f01 	teqeq	r0, r1
 8000d3a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d3e:	4770      	bx	lr

08000d40 <__aeabi_ui2f>:
 8000d40:	f04f 0300 	mov.w	r3, #0
 8000d44:	e004      	b.n	8000d50 <__aeabi_i2f+0x8>
 8000d46:	bf00      	nop

08000d48 <__aeabi_i2f>:
 8000d48:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d4c:	bf48      	it	mi
 8000d4e:	4240      	negmi	r0, r0
 8000d50:	ea5f 0c00 	movs.w	ip, r0
 8000d54:	bf08      	it	eq
 8000d56:	4770      	bxeq	lr
 8000d58:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d5c:	4601      	mov	r1, r0
 8000d5e:	f04f 0000 	mov.w	r0, #0
 8000d62:	e01c      	b.n	8000d9e <__aeabi_l2f+0x2a>

08000d64 <__aeabi_ul2f>:
 8000d64:	ea50 0201 	orrs.w	r2, r0, r1
 8000d68:	bf08      	it	eq
 8000d6a:	4770      	bxeq	lr
 8000d6c:	f04f 0300 	mov.w	r3, #0
 8000d70:	e00a      	b.n	8000d88 <__aeabi_l2f+0x14>
 8000d72:	bf00      	nop

08000d74 <__aeabi_l2f>:
 8000d74:	ea50 0201 	orrs.w	r2, r0, r1
 8000d78:	bf08      	it	eq
 8000d7a:	4770      	bxeq	lr
 8000d7c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d80:	d502      	bpl.n	8000d88 <__aeabi_l2f+0x14>
 8000d82:	4240      	negs	r0, r0
 8000d84:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d88:	ea5f 0c01 	movs.w	ip, r1
 8000d8c:	bf02      	ittt	eq
 8000d8e:	4684      	moveq	ip, r0
 8000d90:	4601      	moveq	r1, r0
 8000d92:	2000      	moveq	r0, #0
 8000d94:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d98:	bf08      	it	eq
 8000d9a:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d9e:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000da2:	fabc f28c 	clz	r2, ip
 8000da6:	3a08      	subs	r2, #8
 8000da8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000dac:	db10      	blt.n	8000dd0 <__aeabi_l2f+0x5c>
 8000dae:	fa01 fc02 	lsl.w	ip, r1, r2
 8000db2:	4463      	add	r3, ip
 8000db4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000db8:	f1c2 0220 	rsb	r2, r2, #32
 8000dbc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000dc0:	fa20 f202 	lsr.w	r2, r0, r2
 8000dc4:	eb43 0002 	adc.w	r0, r3, r2
 8000dc8:	bf08      	it	eq
 8000dca:	f020 0001 	biceq.w	r0, r0, #1
 8000dce:	4770      	bx	lr
 8000dd0:	f102 0220 	add.w	r2, r2, #32
 8000dd4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dd8:	f1c2 0220 	rsb	r2, r2, #32
 8000ddc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000de0:	fa21 f202 	lsr.w	r2, r1, r2
 8000de4:	eb43 0002 	adc.w	r0, r3, r2
 8000de8:	bf08      	it	eq
 8000dea:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dee:	4770      	bx	lr

08000df0 <__aeabi_fmul>:
 8000df0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000df4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000df8:	bf1e      	ittt	ne
 8000dfa:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dfe:	ea92 0f0c 	teqne	r2, ip
 8000e02:	ea93 0f0c 	teqne	r3, ip
 8000e06:	d06f      	beq.n	8000ee8 <__aeabi_fmul+0xf8>
 8000e08:	441a      	add	r2, r3
 8000e0a:	ea80 0c01 	eor.w	ip, r0, r1
 8000e0e:	0240      	lsls	r0, r0, #9
 8000e10:	bf18      	it	ne
 8000e12:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e16:	d01e      	beq.n	8000e56 <__aeabi_fmul+0x66>
 8000e18:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000e1c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e20:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e24:	fba0 3101 	umull	r3, r1, r0, r1
 8000e28:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e2c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000e30:	bf3e      	ittt	cc
 8000e32:	0049      	lslcc	r1, r1, #1
 8000e34:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e38:	005b      	lslcc	r3, r3, #1
 8000e3a:	ea40 0001 	orr.w	r0, r0, r1
 8000e3e:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000e42:	2afd      	cmp	r2, #253	@ 0xfd
 8000e44:	d81d      	bhi.n	8000e82 <__aeabi_fmul+0x92>
 8000e46:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000e4a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e4e:	bf08      	it	eq
 8000e50:	f020 0001 	biceq.w	r0, r0, #1
 8000e54:	4770      	bx	lr
 8000e56:	f090 0f00 	teq	r0, #0
 8000e5a:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000e5e:	bf08      	it	eq
 8000e60:	0249      	lsleq	r1, r1, #9
 8000e62:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e66:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e6a:	3a7f      	subs	r2, #127	@ 0x7f
 8000e6c:	bfc2      	ittt	gt
 8000e6e:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e72:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e76:	4770      	bxgt	lr
 8000e78:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e7c:	f04f 0300 	mov.w	r3, #0
 8000e80:	3a01      	subs	r2, #1
 8000e82:	dc5d      	bgt.n	8000f40 <__aeabi_fmul+0x150>
 8000e84:	f112 0f19 	cmn.w	r2, #25
 8000e88:	bfdc      	itt	le
 8000e8a:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e8e:	4770      	bxle	lr
 8000e90:	f1c2 0200 	rsb	r2, r2, #0
 8000e94:	0041      	lsls	r1, r0, #1
 8000e96:	fa21 f102 	lsr.w	r1, r1, r2
 8000e9a:	f1c2 0220 	rsb	r2, r2, #32
 8000e9e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ea2:	ea5f 0031 	movs.w	r0, r1, rrx
 8000ea6:	f140 0000 	adc.w	r0, r0, #0
 8000eaa:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000eae:	bf08      	it	eq
 8000eb0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000eb4:	4770      	bx	lr
 8000eb6:	f092 0f00 	teq	r2, #0
 8000eba:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ebe:	bf02      	ittt	eq
 8000ec0:	0040      	lsleq	r0, r0, #1
 8000ec2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000ec6:	3a01      	subeq	r2, #1
 8000ec8:	d0f9      	beq.n	8000ebe <__aeabi_fmul+0xce>
 8000eca:	ea40 000c 	orr.w	r0, r0, ip
 8000ece:	f093 0f00 	teq	r3, #0
 8000ed2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ed6:	bf02      	ittt	eq
 8000ed8:	0049      	lsleq	r1, r1, #1
 8000eda:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000ede:	3b01      	subeq	r3, #1
 8000ee0:	d0f9      	beq.n	8000ed6 <__aeabi_fmul+0xe6>
 8000ee2:	ea41 010c 	orr.w	r1, r1, ip
 8000ee6:	e78f      	b.n	8000e08 <__aeabi_fmul+0x18>
 8000ee8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000eec:	ea92 0f0c 	teq	r2, ip
 8000ef0:	bf18      	it	ne
 8000ef2:	ea93 0f0c 	teqne	r3, ip
 8000ef6:	d00a      	beq.n	8000f0e <__aeabi_fmul+0x11e>
 8000ef8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000efc:	bf18      	it	ne
 8000efe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f02:	d1d8      	bne.n	8000eb6 <__aeabi_fmul+0xc6>
 8000f04:	ea80 0001 	eor.w	r0, r0, r1
 8000f08:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000f0c:	4770      	bx	lr
 8000f0e:	f090 0f00 	teq	r0, #0
 8000f12:	bf17      	itett	ne
 8000f14:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000f18:	4608      	moveq	r0, r1
 8000f1a:	f091 0f00 	teqne	r1, #0
 8000f1e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000f22:	d014      	beq.n	8000f4e <__aeabi_fmul+0x15e>
 8000f24:	ea92 0f0c 	teq	r2, ip
 8000f28:	d101      	bne.n	8000f2e <__aeabi_fmul+0x13e>
 8000f2a:	0242      	lsls	r2, r0, #9
 8000f2c:	d10f      	bne.n	8000f4e <__aeabi_fmul+0x15e>
 8000f2e:	ea93 0f0c 	teq	r3, ip
 8000f32:	d103      	bne.n	8000f3c <__aeabi_fmul+0x14c>
 8000f34:	024b      	lsls	r3, r1, #9
 8000f36:	bf18      	it	ne
 8000f38:	4608      	movne	r0, r1
 8000f3a:	d108      	bne.n	8000f4e <__aeabi_fmul+0x15e>
 8000f3c:	ea80 0001 	eor.w	r0, r0, r1
 8000f40:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000f44:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000f48:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f4c:	4770      	bx	lr
 8000f4e:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000f52:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000f56:	4770      	bx	lr

08000f58 <__aeabi_fdiv>:
 8000f58:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000f5c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f60:	bf1e      	ittt	ne
 8000f62:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f66:	ea92 0f0c 	teqne	r2, ip
 8000f6a:	ea93 0f0c 	teqne	r3, ip
 8000f6e:	d069      	beq.n	8001044 <__aeabi_fdiv+0xec>
 8000f70:	eba2 0203 	sub.w	r2, r2, r3
 8000f74:	ea80 0c01 	eor.w	ip, r0, r1
 8000f78:	0249      	lsls	r1, r1, #9
 8000f7a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f7e:	d037      	beq.n	8000ff0 <__aeabi_fdiv+0x98>
 8000f80:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f84:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f88:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f8c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f90:	428b      	cmp	r3, r1
 8000f92:	bf38      	it	cc
 8000f94:	005b      	lslcc	r3, r3, #1
 8000f96:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f9a:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f9e:	428b      	cmp	r3, r1
 8000fa0:	bf24      	itt	cs
 8000fa2:	1a5b      	subcs	r3, r3, r1
 8000fa4:	ea40 000c 	orrcs.w	r0, r0, ip
 8000fa8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000fac:	bf24      	itt	cs
 8000fae:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000fb2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000fb6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000fba:	bf24      	itt	cs
 8000fbc:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000fc0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000fc4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000fc8:	bf24      	itt	cs
 8000fca:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000fce:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000fd2:	011b      	lsls	r3, r3, #4
 8000fd4:	bf18      	it	ne
 8000fd6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fda:	d1e0      	bne.n	8000f9e <__aeabi_fdiv+0x46>
 8000fdc:	2afd      	cmp	r2, #253	@ 0xfd
 8000fde:	f63f af50 	bhi.w	8000e82 <__aeabi_fmul+0x92>
 8000fe2:	428b      	cmp	r3, r1
 8000fe4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fe8:	bf08      	it	eq
 8000fea:	f020 0001 	biceq.w	r0, r0, #1
 8000fee:	4770      	bx	lr
 8000ff0:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ff4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ff8:	327f      	adds	r2, #127	@ 0x7f
 8000ffa:	bfc2      	ittt	gt
 8000ffc:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8001000:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001004:	4770      	bxgt	lr
 8001006:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800100a:	f04f 0300 	mov.w	r3, #0
 800100e:	3a01      	subs	r2, #1
 8001010:	e737      	b.n	8000e82 <__aeabi_fmul+0x92>
 8001012:	f092 0f00 	teq	r2, #0
 8001016:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800101a:	bf02      	ittt	eq
 800101c:	0040      	lsleq	r0, r0, #1
 800101e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8001022:	3a01      	subeq	r2, #1
 8001024:	d0f9      	beq.n	800101a <__aeabi_fdiv+0xc2>
 8001026:	ea40 000c 	orr.w	r0, r0, ip
 800102a:	f093 0f00 	teq	r3, #0
 800102e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8001032:	bf02      	ittt	eq
 8001034:	0049      	lsleq	r1, r1, #1
 8001036:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800103a:	3b01      	subeq	r3, #1
 800103c:	d0f9      	beq.n	8001032 <__aeabi_fdiv+0xda>
 800103e:	ea41 010c 	orr.w	r1, r1, ip
 8001042:	e795      	b.n	8000f70 <__aeabi_fdiv+0x18>
 8001044:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001048:	ea92 0f0c 	teq	r2, ip
 800104c:	d108      	bne.n	8001060 <__aeabi_fdiv+0x108>
 800104e:	0242      	lsls	r2, r0, #9
 8001050:	f47f af7d 	bne.w	8000f4e <__aeabi_fmul+0x15e>
 8001054:	ea93 0f0c 	teq	r3, ip
 8001058:	f47f af70 	bne.w	8000f3c <__aeabi_fmul+0x14c>
 800105c:	4608      	mov	r0, r1
 800105e:	e776      	b.n	8000f4e <__aeabi_fmul+0x15e>
 8001060:	ea93 0f0c 	teq	r3, ip
 8001064:	d104      	bne.n	8001070 <__aeabi_fdiv+0x118>
 8001066:	024b      	lsls	r3, r1, #9
 8001068:	f43f af4c 	beq.w	8000f04 <__aeabi_fmul+0x114>
 800106c:	4608      	mov	r0, r1
 800106e:	e76e      	b.n	8000f4e <__aeabi_fmul+0x15e>
 8001070:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001074:	bf18      	it	ne
 8001076:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800107a:	d1ca      	bne.n	8001012 <__aeabi_fdiv+0xba>
 800107c:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001080:	f47f af5c 	bne.w	8000f3c <__aeabi_fmul+0x14c>
 8001084:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8001088:	f47f af3c 	bne.w	8000f04 <__aeabi_fmul+0x114>
 800108c:	e75f      	b.n	8000f4e <__aeabi_fmul+0x15e>
 800108e:	bf00      	nop

08001090 <__gesf2>:
 8001090:	f04f 3cff 	mov.w	ip, #4294967295
 8001094:	e006      	b.n	80010a4 <__cmpsf2+0x4>
 8001096:	bf00      	nop

08001098 <__lesf2>:
 8001098:	f04f 0c01 	mov.w	ip, #1
 800109c:	e002      	b.n	80010a4 <__cmpsf2+0x4>
 800109e:	bf00      	nop

080010a0 <__cmpsf2>:
 80010a0:	f04f 0c01 	mov.w	ip, #1
 80010a4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80010a8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010ac:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010b0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010b4:	bf18      	it	ne
 80010b6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80010ba:	d011      	beq.n	80010e0 <__cmpsf2+0x40>
 80010bc:	b001      	add	sp, #4
 80010be:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80010c2:	bf18      	it	ne
 80010c4:	ea90 0f01 	teqne	r0, r1
 80010c8:	bf58      	it	pl
 80010ca:	ebb2 0003 	subspl.w	r0, r2, r3
 80010ce:	bf88      	it	hi
 80010d0:	17c8      	asrhi	r0, r1, #31
 80010d2:	bf38      	it	cc
 80010d4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80010d8:	bf18      	it	ne
 80010da:	f040 0001 	orrne.w	r0, r0, #1
 80010de:	4770      	bx	lr
 80010e0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010e4:	d102      	bne.n	80010ec <__cmpsf2+0x4c>
 80010e6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010ea:	d105      	bne.n	80010f8 <__cmpsf2+0x58>
 80010ec:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010f0:	d1e4      	bne.n	80010bc <__cmpsf2+0x1c>
 80010f2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010f6:	d0e1      	beq.n	80010bc <__cmpsf2+0x1c>
 80010f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop

08001100 <__aeabi_cfrcmple>:
 8001100:	4684      	mov	ip, r0
 8001102:	4608      	mov	r0, r1
 8001104:	4661      	mov	r1, ip
 8001106:	e7ff      	b.n	8001108 <__aeabi_cfcmpeq>

08001108 <__aeabi_cfcmpeq>:
 8001108:	b50f      	push	{r0, r1, r2, r3, lr}
 800110a:	f7ff ffc9 	bl	80010a0 <__cmpsf2>
 800110e:	2800      	cmp	r0, #0
 8001110:	bf48      	it	mi
 8001112:	f110 0f00 	cmnmi.w	r0, #0
 8001116:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001118 <__aeabi_fcmpeq>:
 8001118:	f84d ed08 	str.w	lr, [sp, #-8]!
 800111c:	f7ff fff4 	bl	8001108 <__aeabi_cfcmpeq>
 8001120:	bf0c      	ite	eq
 8001122:	2001      	moveq	r0, #1
 8001124:	2000      	movne	r0, #0
 8001126:	f85d fb08 	ldr.w	pc, [sp], #8
 800112a:	bf00      	nop

0800112c <__aeabi_fcmplt>:
 800112c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001130:	f7ff ffea 	bl	8001108 <__aeabi_cfcmpeq>
 8001134:	bf34      	ite	cc
 8001136:	2001      	movcc	r0, #1
 8001138:	2000      	movcs	r0, #0
 800113a:	f85d fb08 	ldr.w	pc, [sp], #8
 800113e:	bf00      	nop

08001140 <__aeabi_fcmple>:
 8001140:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001144:	f7ff ffe0 	bl	8001108 <__aeabi_cfcmpeq>
 8001148:	bf94      	ite	ls
 800114a:	2001      	movls	r0, #1
 800114c:	2000      	movhi	r0, #0
 800114e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001152:	bf00      	nop

08001154 <__aeabi_fcmpge>:
 8001154:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001158:	f7ff ffd2 	bl	8001100 <__aeabi_cfrcmple>
 800115c:	bf94      	ite	ls
 800115e:	2001      	movls	r0, #1
 8001160:	2000      	movhi	r0, #0
 8001162:	f85d fb08 	ldr.w	pc, [sp], #8
 8001166:	bf00      	nop

08001168 <__aeabi_fcmpgt>:
 8001168:	f84d ed08 	str.w	lr, [sp, #-8]!
 800116c:	f7ff ffc8 	bl	8001100 <__aeabi_cfrcmple>
 8001170:	bf34      	ite	cc
 8001172:	2001      	movcc	r0, #1
 8001174:	2000      	movcs	r0, #0
 8001176:	f85d fb08 	ldr.w	pc, [sp], #8
 800117a:	bf00      	nop

0800117c <__aeabi_f2iz>:
 800117c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001180:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001184:	d30f      	bcc.n	80011a6 <__aeabi_f2iz+0x2a>
 8001186:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800118a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800118e:	d90d      	bls.n	80011ac <__aeabi_f2iz+0x30>
 8001190:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001194:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001198:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800119c:	fa23 f002 	lsr.w	r0, r3, r2
 80011a0:	bf18      	it	ne
 80011a2:	4240      	negne	r0, r0
 80011a4:	4770      	bx	lr
 80011a6:	f04f 0000 	mov.w	r0, #0
 80011aa:	4770      	bx	lr
 80011ac:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80011b0:	d101      	bne.n	80011b6 <__aeabi_f2iz+0x3a>
 80011b2:	0242      	lsls	r2, r0, #9
 80011b4:	d105      	bne.n	80011c2 <__aeabi_f2iz+0x46>
 80011b6:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 80011ba:	bf08      	it	eq
 80011bc:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80011c0:	4770      	bx	lr
 80011c2:	f04f 0000 	mov.w	r0, #0
 80011c6:	4770      	bx	lr

080011c8 <__aeabi_f2uiz>:
 80011c8:	0042      	lsls	r2, r0, #1
 80011ca:	d20e      	bcs.n	80011ea <__aeabi_f2uiz+0x22>
 80011cc:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80011d0:	d30b      	bcc.n	80011ea <__aeabi_f2uiz+0x22>
 80011d2:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80011d6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80011da:	d409      	bmi.n	80011f0 <__aeabi_f2uiz+0x28>
 80011dc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80011e0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80011e4:	fa23 f002 	lsr.w	r0, r3, r2
 80011e8:	4770      	bx	lr
 80011ea:	f04f 0000 	mov.w	r0, #0
 80011ee:	4770      	bx	lr
 80011f0:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80011f4:	d101      	bne.n	80011fa <__aeabi_f2uiz+0x32>
 80011f6:	0242      	lsls	r2, r0, #9
 80011f8:	d102      	bne.n	8001200 <__aeabi_f2uiz+0x38>
 80011fa:	f04f 30ff 	mov.w	r0, #4294967295
 80011fe:	4770      	bx	lr
 8001200:	f04f 0000 	mov.w	r0, #0
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop

08001208 <FO_IIR_Init>:
#include "IIR_filter.h"

void FO_IIR_Init(FO_IIR_Filter_t *instance, const float (&b_coefficient)[2], const float (&a_coefficient)[2])
{
 8001208:	b480      	push	{r7}
 800120a:	b087      	sub	sp, #28
 800120c:	af00      	add	r7, sp, #0
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	60b9      	str	r1, [r7, #8]
 8001212:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < 2; i++)
 8001214:	2300      	movs	r3, #0
 8001216:	617b      	str	r3, [r7, #20]
 8001218:	e013      	b.n	8001242 <FO_IIR_Init+0x3a>
    {
        instance->b[i] = b_coefficient[i];
 800121a:	68bb      	ldr	r3, [r7, #8]
 800121c:	697a      	ldr	r2, [r7, #20]
 800121e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	697a      	ldr	r2, [r7, #20]
 8001226:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        instance->a[i] = a_coefficient[i];
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	697a      	ldr	r2, [r7, #20]
 800122e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	697a      	ldr	r2, [r7, #20]
 8001236:	3202      	adds	r2, #2
 8001238:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (int i = 0; i < 2; i++)
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	3301      	adds	r3, #1
 8001240:	617b      	str	r3, [r7, #20]
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	2b01      	cmp	r3, #1
 8001246:	dde8      	ble.n	800121a <FO_IIR_Init+0x12>
    }

    instance->prev_y = 0.0f;
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	f04f 0200 	mov.w	r2, #0
 800124e:	611a      	str	r2, [r3, #16]
    instance->prev_x = 0.0f;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	f04f 0200 	mov.w	r2, #0
 8001256:	615a      	str	r2, [r3, #20]
}
 8001258:	bf00      	nop
 800125a:	371c      	adds	r7, #28
 800125c:	46bd      	mov	sp, r7
 800125e:	bc80      	pop	{r7}
 8001260:	4770      	bx	lr

08001262 <FO_IIR_Compute>:

float FO_IIR_Compute(FO_IIR_Filter_t *instance, float input)
{
 8001262:	b5b0      	push	{r4, r5, r7, lr}
 8001264:	b084      	sub	sp, #16
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]
 800126a:	6039      	str	r1, [r7, #0]
    float output = -instance->a[1] * instance->prev_y + (instance->b[0] * input + instance->b[1] * instance->prev_x);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	f083 4200 	eor.w	r2, r3, #2147483648	@ 0x80000000
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	691b      	ldr	r3, [r3, #16]
 8001278:	4619      	mov	r1, r3
 800127a:	4610      	mov	r0, r2
 800127c:	f7ff fdb8 	bl	8000df0 <__aeabi_fmul>
 8001280:	4603      	mov	r3, r0
 8001282:	461c      	mov	r4, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	6839      	ldr	r1, [r7, #0]
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff fdb0 	bl	8000df0 <__aeabi_fmul>
 8001290:	4603      	mov	r3, r0
 8001292:	461d      	mov	r5, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	685a      	ldr	r2, [r3, #4]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	695b      	ldr	r3, [r3, #20]
 800129c:	4619      	mov	r1, r3
 800129e:	4610      	mov	r0, r2
 80012a0:	f7ff fda6 	bl	8000df0 <__aeabi_fmul>
 80012a4:	4603      	mov	r3, r0
 80012a6:	4619      	mov	r1, r3
 80012a8:	4628      	mov	r0, r5
 80012aa:	f7ff fc99 	bl	8000be0 <__addsf3>
 80012ae:	4603      	mov	r3, r0
 80012b0:	4619      	mov	r1, r3
 80012b2:	4620      	mov	r0, r4
 80012b4:	f7ff fc94 	bl	8000be0 <__addsf3>
 80012b8:	4603      	mov	r3, r0
 80012ba:	60fb      	str	r3, [r7, #12]

    instance->prev_y = output;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	68fa      	ldr	r2, [r7, #12]
 80012c0:	611a      	str	r2, [r3, #16]
    instance->prev_x = input;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	683a      	ldr	r2, [r7, #0]
 80012c6:	615a      	str	r2, [r3, #20]

    return output;
 80012c8:	68fb      	ldr	r3, [r7, #12]
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3710      	adds	r7, #16
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080012d4 <Motor_Init>:
#include "dc_motor_2.h"

uint32_t pwm_freq;

Motor_t* Motor_Init(Motor_Handle_t handle)
{
 80012d4:	b590      	push	{r4, r7, lr}
 80012d6:	b087      	sub	sp, #28
 80012d8:	af00      	add	r7, sp, #0
 80012da:	463c      	mov	r4, r7
 80012dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    Motor_t *object = calloc(1, sizeof(Motor_t));
 80012e0:	2110      	movs	r1, #16
 80012e2:	2001      	movs	r0, #1
 80012e4:	f00f f86e 	bl	80103c4 <calloc>
 80012e8:	4603      	mov	r3, r0
 80012ea:	617b      	str	r3, [r7, #20]

    object->state = STATE_STOP;
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	2200      	movs	r2, #0
 80012f0:	701a      	strb	r2, [r3, #0]
    object->direction = DIRECTION_STOP;
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	2200      	movs	r2, #0
 80012f6:	705a      	strb	r2, [r3, #1]
    object->pwm_duty = 0;
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	2200      	movs	r2, #0
 80012fc:	709a      	strb	r2, [r3, #2]

    object->pwm_channel = handle.pwm_channel;
 80012fe:	683a      	ldr	r2, [r7, #0]
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	605a      	str	r2, [r3, #4]
    object->direction_port = handle.direction_port;
 8001304:	687a      	ldr	r2, [r7, #4]
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	609a      	str	r2, [r3, #8]
    object->direction_pin = handle.direction_pin;
 800130a:	893a      	ldrh	r2, [r7, #8]
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	819a      	strh	r2, [r3, #12]

    pwm_freq = handle.pwm_frequency;
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	4a08      	ldr	r2, [pc, #32]	@ (8001334 <Motor_Init+0x60>)
 8001314:	6013      	str	r3, [r2, #0]

    // Duty cycle Setting
    Motor_Set_PWM_Duty(object, 0);
 8001316:	2100      	movs	r1, #0
 8001318:	6978      	ldr	r0, [r7, #20]
 800131a:	f000 f833 	bl	8001384 <Motor_Set_PWM_Duty>
    // Frequency Setting
    Motor_Set_PWM_Frequency(pwm_freq);
 800131e:	4b05      	ldr	r3, [pc, #20]	@ (8001334 <Motor_Init+0x60>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4618      	mov	r0, r3
 8001324:	f000 f808 	bl	8001338 <Motor_Set_PWM_Frequency>

    return object;
 8001328:	697b      	ldr	r3, [r7, #20]
}
 800132a:	4618      	mov	r0, r3
 800132c:	371c      	adds	r7, #28
 800132e:	46bd      	mov	sp, r7
 8001330:	bd90      	pop	{r4, r7, pc}
 8001332:	bf00      	nop
 8001334:	200000ac 	.word	0x200000ac

08001338 <Motor_Set_PWM_Frequency>:

status_t Motor_Set_PWM_Frequency(uint32_t freq)
{
 8001338:	b480      	push	{r7}
 800133a:	b085      	sub	sp, #20
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
    // The PWM frequency depends on: The clock frequency, the ARR value, the PSC value. 
    //              PWM frequency = Clock frequency / [ (ARR + 1) * (PSC + 1) ]
    pwm_freq = freq;
 8001340:	4a0d      	ldr	r2, [pc, #52]	@ (8001378 <Motor_Set_PWM_Frequency+0x40>)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6013      	str	r3, [r2, #0]

    uint32_t tim_arr_val = __HAL_TIM_GET_AUTORELOAD(&htim_motor);
 8001346:	4b0d      	ldr	r3, [pc, #52]	@ (800137c <Motor_Set_PWM_Frequency+0x44>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800134c:	60fb      	str	r3, [r7, #12]
    uint32_t tim_psc_val = (uint32_t)(DEFAULT_CLOCK_FREQ / (pwm_freq * (tim_arr_val + 1)) - 1);
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	3301      	adds	r3, #1
 8001352:	4a09      	ldr	r2, [pc, #36]	@ (8001378 <Motor_Set_PWM_Frequency+0x40>)
 8001354:	6812      	ldr	r2, [r2, #0]
 8001356:	fb02 f303 	mul.w	r3, r2, r3
 800135a:	4a09      	ldr	r2, [pc, #36]	@ (8001380 <Motor_Set_PWM_Frequency+0x48>)
 800135c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001360:	3b01      	subs	r3, #1
 8001362:	60bb      	str	r3, [r7, #8]

    __HAL_TIM_SET_PRESCALER(&htim_motor, tim_psc_val);
 8001364:	4b05      	ldr	r3, [pc, #20]	@ (800137c <Motor_Set_PWM_Frequency+0x44>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	68ba      	ldr	r2, [r7, #8]
 800136a:	629a      	str	r2, [r3, #40]	@ 0x28
    
    return STATUS_OK;
 800136c:	2300      	movs	r3, #0
}
 800136e:	4618      	mov	r0, r3
 8001370:	3714      	adds	r7, #20
 8001372:	46bd      	mov	sp, r7
 8001374:	bc80      	pop	{r7}
 8001376:	4770      	bx	lr
 8001378:	200000ac 	.word	0x200000ac
 800137c:	20000104 	.word	0x20000104
 8001380:	01e84800 	.word	0x01e84800

08001384 <Motor_Set_PWM_Duty>:

status_t Motor_Set_PWM_Duty(Motor_t *motor, int16_t duty)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b086      	sub	sp, #24
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	460b      	mov	r3, r1
 800138e:	807b      	strh	r3, [r7, #2]
    switch (motor->state)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f993 3000 	ldrsb.w	r3, [r3]
 8001396:	3301      	adds	r3, #1
 8001398:	2b03      	cmp	r3, #3
 800139a:	d859      	bhi.n	8001450 <Motor_Set_PWM_Duty+0xcc>
 800139c:	a201      	add	r2, pc, #4	@ (adr r2, 80013a4 <Motor_Set_PWM_Duty+0x20>)
 800139e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013a2:	bf00      	nop
 80013a4:	080013df 	.word	0x080013df
 80013a8:	0800140d 	.word	0x0800140d
 80013ac:	080013b5 	.word	0x080013b5
 80013b0:	08001451 	.word	0x08001451
    {
        case STATE_FORWARD:
        {
            if (duty > 0)
 80013b4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	dd04      	ble.n	80013c6 <Motor_Set_PWM_Duty+0x42>
                motor->pwm_duty = duty;            // duty: 0 - Min, 255 - Max
 80013bc:	887b      	ldrh	r3, [r7, #2]
 80013be:	b2da      	uxtb	r2, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	709a      	strb	r2, [r3, #2]
            {
                Motor_ChangeState(motor, STATE_BRAKE);
                motor->pwm_duty =  0;
            } 
        }
            break;
 80013c4:	e046      	b.n	8001454 <Motor_Set_PWM_Duty+0xd0>
            else if (duty <= 0)
 80013c6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	dc42      	bgt.n	8001454 <Motor_Set_PWM_Duty+0xd0>
                Motor_ChangeState(motor, STATE_BRAKE);
 80013ce:	2102      	movs	r1, #2
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f000 f8a7 	bl	8001524 <Motor_ChangeState>
                motor->pwm_duty =  0;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2200      	movs	r2, #0
 80013da:	709a      	strb	r2, [r3, #2]
            break;
 80013dc:	e03a      	b.n	8001454 <Motor_Set_PWM_Duty+0xd0>
        case STATE_BACKWARD:
            {
                if (duty >= 0)
 80013de:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	db07      	blt.n	80013f6 <Motor_Set_PWM_Duty+0x72>
                {
                    Motor_ChangeState(motor, STATE_BRAKE);
 80013e6:	2102      	movs	r1, #2
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f000 f89b 	bl	8001524 <Motor_ChangeState>
                    motor->pwm_duty = 255;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	22ff      	movs	r2, #255	@ 0xff
 80013f2:	709a      	strb	r2, [r3, #2]
                }
                else if (duty < 0)
                    motor->pwm_duty = 255 + duty;
            }
            break;
 80013f4:	e030      	b.n	8001458 <Motor_Set_PWM_Duty+0xd4>
                else if (duty < 0)
 80013f6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	da2c      	bge.n	8001458 <Motor_Set_PWM_Duty+0xd4>
                    motor->pwm_duty = 255 + duty;
 80013fe:	887b      	ldrh	r3, [r7, #2]
 8001400:	b2db      	uxtb	r3, r3
 8001402:	3b01      	subs	r3, #1
 8001404:	b2da      	uxtb	r2, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	709a      	strb	r2, [r3, #2]
            break;
 800140a:	e025      	b.n	8001458 <Motor_Set_PWM_Duty+0xd4>
        case STATE_STOP:
            {
                if (duty > MIN_DUTY)
 800140c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001410:	2b32      	cmp	r3, #50	@ 0x32
 8001412:	dd08      	ble.n	8001426 <Motor_Set_PWM_Duty+0xa2>
                {
                    Motor_ChangeState(motor, STATE_FORWARD);
 8001414:	2101      	movs	r1, #1
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f000 f884 	bl	8001524 <Motor_ChangeState>
                    motor->pwm_duty = duty;
 800141c:	887b      	ldrh	r3, [r7, #2]
 800141e:	b2da      	uxtb	r2, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	709a      	strb	r2, [r3, #2]
                else
                {
                    motor->pwm_duty = 0;
                }
            }
            break;
 8001424:	e019      	b.n	800145a <Motor_Set_PWM_Duty+0xd6>
                else if (duty < -MIN_DUTY)
 8001426:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800142a:	f113 0f32 	cmn.w	r3, #50	@ 0x32
 800142e:	da0b      	bge.n	8001448 <Motor_Set_PWM_Duty+0xc4>
                    Motor_ChangeState(motor, STATE_BACKWARD);
 8001430:	f04f 31ff 	mov.w	r1, #4294967295
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f000 f875 	bl	8001524 <Motor_ChangeState>
                    motor->pwm_duty = 255 + duty;
 800143a:	887b      	ldrh	r3, [r7, #2]
 800143c:	b2db      	uxtb	r3, r3
 800143e:	3b01      	subs	r3, #1
 8001440:	b2da      	uxtb	r2, r3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	709a      	strb	r2, [r3, #2]
            break;
 8001446:	e008      	b.n	800145a <Motor_Set_PWM_Duty+0xd6>
                    motor->pwm_duty = 0;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2200      	movs	r2, #0
 800144c:	709a      	strb	r2, [r3, #2]
            break;
 800144e:	e004      	b.n	800145a <Motor_Set_PWM_Duty+0xd6>
        case STATE_BRAKE:
            break;
        default:
            break;
 8001450:	bf00      	nop
 8001452:	e002      	b.n	800145a <Motor_Set_PWM_Duty+0xd6>
            break;
 8001454:	bf00      	nop
 8001456:	e000      	b.n	800145a <Motor_Set_PWM_Duty+0xd6>
            break;
 8001458:	bf00      	nop
    }

    float duty_percentage = motor->pwm_duty / 255.0f;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	789b      	ldrb	r3, [r3, #2]
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff fc72 	bl	8000d48 <__aeabi_i2f>
 8001464:	4603      	mov	r3, r0
 8001466:	491e      	ldr	r1, [pc, #120]	@ (80014e0 <Motor_Set_PWM_Duty+0x15c>)
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff fd75 	bl	8000f58 <__aeabi_fdiv>
 800146e:	4603      	mov	r3, r0
 8001470:	617b      	str	r3, [r7, #20]

    uint32_t tim_arr_val = __HAL_TIM_GET_AUTORELOAD(&htim_motor);
 8001472:	4b1c      	ldr	r3, [pc, #112]	@ (80014e4 <Motor_Set_PWM_Duty+0x160>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001478:	613b      	str	r3, [r7, #16]
    uint32_t tim_ccr_val = (uint32_t)(duty_percentage * tim_arr_val);
 800147a:	6938      	ldr	r0, [r7, #16]
 800147c:	f7ff fc60 	bl	8000d40 <__aeabi_ui2f>
 8001480:	4603      	mov	r3, r0
 8001482:	6979      	ldr	r1, [r7, #20]
 8001484:	4618      	mov	r0, r3
 8001486:	f7ff fcb3 	bl	8000df0 <__aeabi_fmul>
 800148a:	4603      	mov	r3, r0
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff fe9b 	bl	80011c8 <__aeabi_f2uiz>
 8001492:	4603      	mov	r3, r0
 8001494:	60fb      	str	r3, [r7, #12]

    __HAL_TIM_SET_COMPARE(&htim_motor, motor->pwm_channel, tim_ccr_val);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d104      	bne.n	80014a8 <Motor_Set_PWM_Duty+0x124>
 800149e:	4b11      	ldr	r3, [pc, #68]	@ (80014e4 <Motor_Set_PWM_Duty+0x160>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	68fa      	ldr	r2, [r7, #12]
 80014a4:	635a      	str	r2, [r3, #52]	@ 0x34
 80014a6:	e015      	b.n	80014d4 <Motor_Set_PWM_Duty+0x150>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	2b04      	cmp	r3, #4
 80014ae:	d104      	bne.n	80014ba <Motor_Set_PWM_Duty+0x136>
 80014b0:	4b0c      	ldr	r3, [pc, #48]	@ (80014e4 <Motor_Set_PWM_Duty+0x160>)
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	6393      	str	r3, [r2, #56]	@ 0x38
 80014b8:	e00c      	b.n	80014d4 <Motor_Set_PWM_Duty+0x150>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	2b08      	cmp	r3, #8
 80014c0:	d104      	bne.n	80014cc <Motor_Set_PWM_Duty+0x148>
 80014c2:	4b08      	ldr	r3, [pc, #32]	@ (80014e4 <Motor_Set_PWM_Duty+0x160>)
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80014ca:	e003      	b.n	80014d4 <Motor_Set_PWM_Duty+0x150>
 80014cc:	4b05      	ldr	r3, [pc, #20]	@ (80014e4 <Motor_Set_PWM_Duty+0x160>)
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	6413      	str	r3, [r2, #64]	@ 0x40

    return STATUS_OK;
 80014d4:	2300      	movs	r3, #0
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3718      	adds	r7, #24
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	437f0000 	.word	0x437f0000
 80014e4:	20000104 	.word	0x20000104

080014e8 <Motor_Start>:

status_t Motor_Start(Motor_t *motor)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
    Motor_ChangeState(motor, STATE_STOP);
 80014f0:	2100      	movs	r1, #0
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f000 f816 	bl	8001524 <Motor_ChangeState>
    HAL_StatusTypeDef ret = HAL_TIM_PWM_Start(&htim_motor, motor->pwm_channel);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	4619      	mov	r1, r3
 80014fe:	4808      	ldr	r0, [pc, #32]	@ (8001520 <Motor_Start+0x38>)
 8001500:	f00a fef8 	bl	800c2f4 <HAL_TIM_PWM_Start>
 8001504:	4603      	mov	r3, r0
 8001506:	73fb      	strb	r3, [r7, #15]

    if (ret != HAL_OK) return STATUS_FAIL;
 8001508:	7bfb      	ldrb	r3, [r7, #15]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d002      	beq.n	8001514 <Motor_Start+0x2c>
 800150e:	f04f 33ff 	mov.w	r3, #4294967295
 8001512:	e000      	b.n	8001516 <Motor_Start+0x2e>

    return STATUS_OK;
 8001514:	2300      	movs	r3, #0
}
 8001516:	4618      	mov	r0, r3
 8001518:	3710      	adds	r7, #16
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	20000104 	.word	0x20000104

08001524 <Motor_ChangeState>:

    return STATUS_OK;
}

status_t Motor_ChangeState(Motor_t *motor, int8_t state)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	460b      	mov	r3, r1
 800152e:	70fb      	strb	r3, [r7, #3]
    motor->state = state;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	78fa      	ldrb	r2, [r7, #3]
 8001534:	701a      	strb	r2, [r3, #0]

    if (state != STATE_BRAKE)
 8001536:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800153a:	2b02      	cmp	r3, #2
 800153c:	d005      	beq.n	800154a <Motor_ChangeState+0x26>
    {
        Motor_SetDirection(motor, state);
 800153e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001542:	4619      	mov	r1, r3
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f000 f805 	bl	8001554 <Motor_SetDirection>
    }

    return STATUS_OK;
 800154a:	2300      	movs	r3, #0
}
 800154c:	4618      	mov	r0, r3
 800154e:	3708      	adds	r7, #8
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}

08001554 <Motor_SetDirection>:

status_t Motor_SetDirection(Motor_t *motor, int8_t direction)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	460b      	mov	r3, r1
 800155e:	70fb      	strb	r3, [r7, #3]
    motor->direction = direction;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	78fa      	ldrb	r2, [r7, #3]
 8001564:	705a      	strb	r2, [r3, #1]

    switch (direction)
 8001566:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800156a:	2b01      	cmp	r3, #1
 800156c:	d007      	beq.n	800157e <Motor_SetDirection+0x2a>
 800156e:	2b01      	cmp	r3, #1
 8001570:	dc24      	bgt.n	80015bc <Motor_SetDirection+0x68>
 8001572:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001576:	d018      	beq.n	80015aa <Motor_SetDirection+0x56>
 8001578:	2b00      	cmp	r3, #0
 800157a:	d009      	beq.n	8001590 <Motor_SetDirection+0x3c>
        break;
    case DIRECTION_BACKWARD:
        HAL_GPIO_WritePin(motor->direction_port, motor->direction_pin, GPIO_PIN_SET);
        break;
    default:
        break;
 800157c:	e01e      	b.n	80015bc <Motor_SetDirection+0x68>
    	HAL_GPIO_WritePin(motor->direction_port, motor->direction_pin, GPIO_PIN_RESET);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6898      	ldr	r0, [r3, #8]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	899b      	ldrh	r3, [r3, #12]
 8001586:	2200      	movs	r2, #0
 8001588:	4619      	mov	r1, r3
 800158a:	f00a f89f 	bl	800b6cc <HAL_GPIO_WritePin>
        break;
 800158e:	e016      	b.n	80015be <Motor_SetDirection+0x6a>
        HAL_GPIO_WritePin(motor->direction_port, motor->direction_pin, GPIO_PIN_RESET);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6898      	ldr	r0, [r3, #8]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	899b      	ldrh	r3, [r3, #12]
 8001598:	2200      	movs	r2, #0
 800159a:	4619      	mov	r1, r3
 800159c:	f00a f896 	bl	800b6cc <HAL_GPIO_WritePin>
        Motor_Set_PWM_Duty(motor, 0);
 80015a0:	2100      	movs	r1, #0
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f7ff feee 	bl	8001384 <Motor_Set_PWM_Duty>
        break;
 80015a8:	e009      	b.n	80015be <Motor_SetDirection+0x6a>
        HAL_GPIO_WritePin(motor->direction_port, motor->direction_pin, GPIO_PIN_SET);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6898      	ldr	r0, [r3, #8]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	899b      	ldrh	r3, [r3, #12]
 80015b2:	2201      	movs	r2, #1
 80015b4:	4619      	mov	r1, r3
 80015b6:	f00a f889 	bl	800b6cc <HAL_GPIO_WritePin>
        break;
 80015ba:	e000      	b.n	80015be <Motor_SetDirection+0x6a>
        break;
 80015bc:	bf00      	nop
    }

    return STATUS_OK;
 80015be:	2300      	movs	r3, #0
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3708      	adds	r7, #8
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <Encoder_Init>:
#include "encoder.h"

Encoder_t* Encoder_Init(Encoder_Handle_t handle)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	463b      	mov	r3, r7
 80015d0:	e883 0003 	stmia.w	r3, {r0, r1}
    Encoder_t* object = calloc(1, sizeof(Encoder_t));
 80015d4:	210c      	movs	r1, #12
 80015d6:	2001      	movs	r0, #1
 80015d8:	f00e fef4 	bl	80103c4 <calloc>
 80015dc:	4603      	mov	r3, r0
 80015de:	60fb      	str	r3, [r7, #12]

    object->tick = 0;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	2200      	movs	r2, #0
 80015e4:	801a      	strh	r2, [r3, #0]
    object->max_count = handle.max_count;
 80015e6:	683a      	ldr	r2, [r7, #0]
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	605a      	str	r2, [r3, #4]
    object->tick_read_channel = handle.tick_read_channel;
 80015ec:	88bb      	ldrh	r3, [r7, #4]
 80015ee:	461a      	mov	r2, r3
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	609a      	str	r2, [r3, #8]

    return object;
 80015f4:	68fb      	ldr	r3, [r7, #12]
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3710      	adds	r7, #16
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
	...

08001600 <Encoder_Start>:

status_t Encoder_Start(Encoder_t *encoder)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef ret = HAL_TIM_IC_Start_IT(&htim_encoder, encoder->tick_read_channel);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	4619      	mov	r1, r3
 800160e:	4808      	ldr	r0, [pc, #32]	@ (8001630 <Encoder_Start+0x30>)
 8001610:	f00a ff82 	bl	800c518 <HAL_TIM_IC_Start_IT>
 8001614:	4603      	mov	r3, r0
 8001616:	73fb      	strb	r3, [r7, #15]

    if (ret != HAL_OK) return STATUS_FAIL;
 8001618:	7bfb      	ldrb	r3, [r7, #15]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d002      	beq.n	8001624 <Encoder_Start+0x24>
 800161e:	f04f 33ff 	mov.w	r3, #4294967295
 8001622:	e000      	b.n	8001626 <Encoder_Start+0x26>

    return STATUS_OK;
 8001624:	2300      	movs	r3, #0
}
 8001626:	4618      	mov	r0, r3
 8001628:	3710      	adds	r7, #16
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	2000014c 	.word	0x2000014c

08001634 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001638:	f009 f8c0 	bl	800a7bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800163c:	f000 f811 	bl	8001662 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001640:	f000 fa26 	bl	8001a90 <MX_GPIO_Init>
  MX_DMA_Init();
 8001644:	f000 f9fe 	bl	8001a44 <MX_DMA_Init>
  MX_TIM1_Init();
 8001648:	f000 f87a 	bl	8001740 <MX_TIM1_Init>
  MX_TIM8_Init();
 800164c:	f000 f93c 	bl	80018c8 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8001650:	f000 f9ce 	bl	80019f0 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001654:	f000 f846 	bl	80016e4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  setup();
 8001658:	f006 fd86 	bl	8008168 <setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  loop();
 800165c:	f006 fdb8 	bl	80081d0 <loop>
 8001660:	e7fc      	b.n	800165c <main+0x28>

08001662 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001662:	b580      	push	{r7, lr}
 8001664:	b090      	sub	sp, #64	@ 0x40
 8001666:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001668:	f107 0318 	add.w	r3, r7, #24
 800166c:	2228      	movs	r2, #40	@ 0x28
 800166e:	2100      	movs	r1, #0
 8001670:	4618      	mov	r0, r3
 8001672:	f00e ffaf 	bl	80105d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001676:	1d3b      	adds	r3, r7, #4
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	605a      	str	r2, [r3, #4]
 800167e:	609a      	str	r2, [r3, #8]
 8001680:	60da      	str	r2, [r3, #12]
 8001682:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001684:	2302      	movs	r3, #2
 8001686:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001688:	2301      	movs	r3, #1
 800168a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800168c:	2310      	movs	r3, #16
 800168e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001690:	2302      	movs	r3, #2
 8001692:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001694:	2300      	movs	r3, #0
 8001696:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8001698:	f44f 13c0 	mov.w	r3, #1572864	@ 0x180000
 800169c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800169e:	f107 0318 	add.w	r3, r7, #24
 80016a2:	4618      	mov	r0, r3
 80016a4:	f00a f96e 	bl	800b984 <HAL_RCC_OscConfig>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80016ae:	f000 fa4b 	bl	8001b48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016b2:	230f      	movs	r3, #15
 80016b4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016b6:	2302      	movs	r3, #2
 80016b8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016ba:	2300      	movs	r3, #0
 80016bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016be:	2300      	movs	r3, #0
 80016c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016c2:	2300      	movs	r3, #0
 80016c4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80016c6:	1d3b      	adds	r3, r7, #4
 80016c8:	2101      	movs	r1, #1
 80016ca:	4618      	mov	r0, r3
 80016cc:	f00a fbdc 	bl	800be88 <HAL_RCC_ClockConfig>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <SystemClock_Config+0x78>
  {
    Error_Handler();
 80016d6:	f000 fa37 	bl	8001b48 <Error_Handler>
  }
}
 80016da:	bf00      	nop
 80016dc:	3740      	adds	r7, #64	@ 0x40
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
	...

080016e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016e8:	4b12      	ldr	r3, [pc, #72]	@ (8001734 <MX_I2C1_Init+0x50>)
 80016ea:	4a13      	ldr	r2, [pc, #76]	@ (8001738 <MX_I2C1_Init+0x54>)
 80016ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80016ee:	4b11      	ldr	r3, [pc, #68]	@ (8001734 <MX_I2C1_Init+0x50>)
 80016f0:	4a12      	ldr	r2, [pc, #72]	@ (800173c <MX_I2C1_Init+0x58>)
 80016f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001734 <MX_I2C1_Init+0x50>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80016fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001734 <MX_I2C1_Init+0x50>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001700:	4b0c      	ldr	r3, [pc, #48]	@ (8001734 <MX_I2C1_Init+0x50>)
 8001702:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001706:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001708:	4b0a      	ldr	r3, [pc, #40]	@ (8001734 <MX_I2C1_Init+0x50>)
 800170a:	2200      	movs	r2, #0
 800170c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800170e:	4b09      	ldr	r3, [pc, #36]	@ (8001734 <MX_I2C1_Init+0x50>)
 8001710:	2200      	movs	r2, #0
 8001712:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001714:	4b07      	ldr	r3, [pc, #28]	@ (8001734 <MX_I2C1_Init+0x50>)
 8001716:	2200      	movs	r2, #0
 8001718:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800171a:	4b06      	ldr	r3, [pc, #24]	@ (8001734 <MX_I2C1_Init+0x50>)
 800171c:	2200      	movs	r2, #0
 800171e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001720:	4804      	ldr	r0, [pc, #16]	@ (8001734 <MX_I2C1_Init+0x50>)
 8001722:	f009 ffeb 	bl	800b6fc <HAL_I2C_Init>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800172c:	f000 fa0c 	bl	8001b48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001730:	bf00      	nop
 8001732:	bd80      	pop	{r7, pc}
 8001734:	200000b0 	.word	0x200000b0
 8001738:	40005400 	.word	0x40005400
 800173c:	00061a80 	.word	0x00061a80

08001740 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b096      	sub	sp, #88	@ 0x58
 8001744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001746:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800174a:	2200      	movs	r2, #0
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	605a      	str	r2, [r3, #4]
 8001750:	609a      	str	r2, [r3, #8]
 8001752:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001754:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800175e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001762:	2200      	movs	r2, #0
 8001764:	601a      	str	r2, [r3, #0]
 8001766:	605a      	str	r2, [r3, #4]
 8001768:	609a      	str	r2, [r3, #8]
 800176a:	60da      	str	r2, [r3, #12]
 800176c:	611a      	str	r2, [r3, #16]
 800176e:	615a      	str	r2, [r3, #20]
 8001770:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001772:	1d3b      	adds	r3, r7, #4
 8001774:	2220      	movs	r2, #32
 8001776:	2100      	movs	r1, #0
 8001778:	4618      	mov	r0, r3
 800177a:	f00e ff2b 	bl	80105d4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim_motor.Instance = TIM1;
 800177e:	4b50      	ldr	r3, [pc, #320]	@ (80018c0 <MX_TIM1_Init+0x180>)
 8001780:	4a50      	ldr	r2, [pc, #320]	@ (80018c4 <MX_TIM1_Init+0x184>)
 8001782:	601a      	str	r2, [r3, #0]
  htim_motor.Init.Prescaler = 8-1;
 8001784:	4b4e      	ldr	r3, [pc, #312]	@ (80018c0 <MX_TIM1_Init+0x180>)
 8001786:	2207      	movs	r2, #7
 8001788:	605a      	str	r2, [r3, #4]
  htim_motor.Init.CounterMode = TIM_COUNTERMODE_UP;
 800178a:	4b4d      	ldr	r3, [pc, #308]	@ (80018c0 <MX_TIM1_Init+0x180>)
 800178c:	2200      	movs	r2, #0
 800178e:	609a      	str	r2, [r3, #8]
  htim_motor.Init.Period = 100-1;
 8001790:	4b4b      	ldr	r3, [pc, #300]	@ (80018c0 <MX_TIM1_Init+0x180>)
 8001792:	2263      	movs	r2, #99	@ 0x63
 8001794:	60da      	str	r2, [r3, #12]
  htim_motor.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001796:	4b4a      	ldr	r3, [pc, #296]	@ (80018c0 <MX_TIM1_Init+0x180>)
 8001798:	2200      	movs	r2, #0
 800179a:	611a      	str	r2, [r3, #16]
  htim_motor.Init.RepetitionCounter = 0;
 800179c:	4b48      	ldr	r3, [pc, #288]	@ (80018c0 <MX_TIM1_Init+0x180>)
 800179e:	2200      	movs	r2, #0
 80017a0:	615a      	str	r2, [r3, #20]
  htim_motor.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017a2:	4b47      	ldr	r3, [pc, #284]	@ (80018c0 <MX_TIM1_Init+0x180>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim_motor) != HAL_OK)
 80017a8:	4845      	ldr	r0, [pc, #276]	@ (80018c0 <MX_TIM1_Init+0x180>)
 80017aa:	f00a fcfb 	bl	800c1a4 <HAL_TIM_Base_Init>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80017b4:	f000 f9c8 	bl	8001b48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017bc:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim_motor, &sClockSourceConfig) != HAL_OK)
 80017be:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80017c2:	4619      	mov	r1, r3
 80017c4:	483e      	ldr	r0, [pc, #248]	@ (80018c0 <MX_TIM1_Init+0x180>)
 80017c6:	f00b fa27 	bl	800cc18 <HAL_TIM_ConfigClockSource>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80017d0:	f000 f9ba 	bl	8001b48 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim_motor) != HAL_OK)
 80017d4:	483a      	ldr	r0, [pc, #232]	@ (80018c0 <MX_TIM1_Init+0x180>)
 80017d6:	f00a fd34 	bl	800c242 <HAL_TIM_PWM_Init>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80017e0:	f000 f9b2 	bl	8001b48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017e4:	2300      	movs	r3, #0
 80017e6:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017e8:	2300      	movs	r3, #0
 80017ea:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim_motor, &sMasterConfig) != HAL_OK)
 80017ec:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80017f0:	4619      	mov	r1, r3
 80017f2:	4833      	ldr	r0, [pc, #204]	@ (80018c0 <MX_TIM1_Init+0x180>)
 80017f4:	f00b fef6 	bl	800d5e4 <HAL_TIMEx_MasterConfigSynchronization>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80017fe:	f000 f9a3 	bl	8001b48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001802:	2360      	movs	r3, #96	@ 0x60
 8001804:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001806:	2300      	movs	r3, #0
 8001808:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800180a:	2300      	movs	r3, #0
 800180c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800180e:	2300      	movs	r3, #0
 8001810:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001812:	2300      	movs	r3, #0
 8001814:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001816:	2300      	movs	r3, #0
 8001818:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800181a:	2300      	movs	r3, #0
 800181c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim_motor, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800181e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001822:	2200      	movs	r2, #0
 8001824:	4619      	mov	r1, r3
 8001826:	4826      	ldr	r0, [pc, #152]	@ (80018c0 <MX_TIM1_Init+0x180>)
 8001828:	f00b f934 	bl	800ca94 <HAL_TIM_PWM_ConfigChannel>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8001832:	f000 f989 	bl	8001b48 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim_motor, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001836:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800183a:	2204      	movs	r2, #4
 800183c:	4619      	mov	r1, r3
 800183e:	4820      	ldr	r0, [pc, #128]	@ (80018c0 <MX_TIM1_Init+0x180>)
 8001840:	f00b f928 	bl	800ca94 <HAL_TIM_PWM_ConfigChannel>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 800184a:	f000 f97d 	bl	8001b48 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim_motor, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800184e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001852:	2208      	movs	r2, #8
 8001854:	4619      	mov	r1, r3
 8001856:	481a      	ldr	r0, [pc, #104]	@ (80018c0 <MX_TIM1_Init+0x180>)
 8001858:	f00b f91c 	bl	800ca94 <HAL_TIM_PWM_ConfigChannel>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8001862:	f000 f971 	bl	8001b48 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim_motor, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001866:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800186a:	220c      	movs	r2, #12
 800186c:	4619      	mov	r1, r3
 800186e:	4814      	ldr	r0, [pc, #80]	@ (80018c0 <MX_TIM1_Init+0x180>)
 8001870:	f00b f910 	bl	800ca94 <HAL_TIM_PWM_ConfigChannel>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <MX_TIM1_Init+0x13e>
  {
    Error_Handler();
 800187a:	f000 f965 	bl	8001b48 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800187e:	2300      	movs	r3, #0
 8001880:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001882:	2300      	movs	r3, #0
 8001884:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001886:	2300      	movs	r3, #0
 8001888:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800188a:	2300      	movs	r3, #0
 800188c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800188e:	2300      	movs	r3, #0
 8001890:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001892:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001896:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001898:	2300      	movs	r3, #0
 800189a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim_motor, &sBreakDeadTimeConfig) != HAL_OK)
 800189c:	1d3b      	adds	r3, r7, #4
 800189e:	4619      	mov	r1, r3
 80018a0:	4807      	ldr	r0, [pc, #28]	@ (80018c0 <MX_TIM1_Init+0x180>)
 80018a2:	f00b ff0b 	bl	800d6bc <HAL_TIMEx_ConfigBreakDeadTime>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <MX_TIM1_Init+0x170>
  {
    Error_Handler();
 80018ac:	f000 f94c 	bl	8001b48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim_motor);
 80018b0:	4803      	ldr	r0, [pc, #12]	@ (80018c0 <MX_TIM1_Init+0x180>)
 80018b2:	f008 fd91 	bl	800a3d8 <HAL_TIM_MspPostInit>

}
 80018b6:	bf00      	nop
 80018b8:	3758      	adds	r7, #88	@ 0x58
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	20000104 	.word	0x20000104
 80018c4:	40012c00 	.word	0x40012c00

080018c8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b08a      	sub	sp, #40	@ 0x28
 80018cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018ce:	f107 0318 	add.w	r3, r7, #24
 80018d2:	2200      	movs	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]
 80018d6:	605a      	str	r2, [r3, #4]
 80018d8:	609a      	str	r2, [r3, #8]
 80018da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018dc:	f107 0310 	add.w	r3, r7, #16
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]
 80018e4:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80018e6:	463b      	mov	r3, r7
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	605a      	str	r2, [r3, #4]
 80018ee:	609a      	str	r2, [r3, #8]
 80018f0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim_encoder.Instance = TIM8;
 80018f2:	4b3d      	ldr	r3, [pc, #244]	@ (80019e8 <MX_TIM8_Init+0x120>)
 80018f4:	4a3d      	ldr	r2, [pc, #244]	@ (80019ec <MX_TIM8_Init+0x124>)
 80018f6:	601a      	str	r2, [r3, #0]
  htim_encoder.Init.Prescaler = 0;
 80018f8:	4b3b      	ldr	r3, [pc, #236]	@ (80019e8 <MX_TIM8_Init+0x120>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	605a      	str	r2, [r3, #4]
  htim_encoder.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018fe:	4b3a      	ldr	r3, [pc, #232]	@ (80019e8 <MX_TIM8_Init+0x120>)
 8001900:	2200      	movs	r2, #0
 8001902:	609a      	str	r2, [r3, #8]
  htim_encoder.Init.Period = 65535;
 8001904:	4b38      	ldr	r3, [pc, #224]	@ (80019e8 <MX_TIM8_Init+0x120>)
 8001906:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800190a:	60da      	str	r2, [r3, #12]
  htim_encoder.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800190c:	4b36      	ldr	r3, [pc, #216]	@ (80019e8 <MX_TIM8_Init+0x120>)
 800190e:	2200      	movs	r2, #0
 8001910:	611a      	str	r2, [r3, #16]
  htim_encoder.Init.RepetitionCounter = 0;
 8001912:	4b35      	ldr	r3, [pc, #212]	@ (80019e8 <MX_TIM8_Init+0x120>)
 8001914:	2200      	movs	r2, #0
 8001916:	615a      	str	r2, [r3, #20]
  htim_encoder.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001918:	4b33      	ldr	r3, [pc, #204]	@ (80019e8 <MX_TIM8_Init+0x120>)
 800191a:	2200      	movs	r2, #0
 800191c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim_encoder) != HAL_OK)
 800191e:	4832      	ldr	r0, [pc, #200]	@ (80019e8 <MX_TIM8_Init+0x120>)
 8001920:	f00a fc40 	bl	800c1a4 <HAL_TIM_Base_Init>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <MX_TIM8_Init+0x66>
  {
    Error_Handler();
 800192a:	f000 f90d 	bl	8001b48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800192e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001932:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim_encoder, &sClockSourceConfig) != HAL_OK)
 8001934:	f107 0318 	add.w	r3, r7, #24
 8001938:	4619      	mov	r1, r3
 800193a:	482b      	ldr	r0, [pc, #172]	@ (80019e8 <MX_TIM8_Init+0x120>)
 800193c:	f00b f96c 	bl	800cc18 <HAL_TIM_ConfigClockSource>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8001946:	f000 f8ff 	bl	8001b48 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim_encoder) != HAL_OK)
 800194a:	4827      	ldr	r0, [pc, #156]	@ (80019e8 <MX_TIM8_Init+0x120>)
 800194c:	f00a fd8c 	bl	800c468 <HAL_TIM_IC_Init>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <MX_TIM8_Init+0x92>
  {
    Error_Handler();
 8001956:	f000 f8f7 	bl	8001b48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800195a:	2300      	movs	r3, #0
 800195c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800195e:	2300      	movs	r3, #0
 8001960:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim_encoder, &sMasterConfig) != HAL_OK)
 8001962:	f107 0310 	add.w	r3, r7, #16
 8001966:	4619      	mov	r1, r3
 8001968:	481f      	ldr	r0, [pc, #124]	@ (80019e8 <MX_TIM8_Init+0x120>)
 800196a:	f00b fe3b 	bl	800d5e4 <HAL_TIMEx_MasterConfigSynchronization>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <MX_TIM8_Init+0xb0>
  {
    Error_Handler();
 8001974:	f000 f8e8 	bl	8001b48 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001978:	2300      	movs	r3, #0
 800197a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800197c:	2301      	movs	r3, #1
 800197e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001980:	2300      	movs	r3, #0
 8001982:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 8001984:	230f      	movs	r3, #15
 8001986:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim_encoder, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001988:	463b      	mov	r3, r7
 800198a:	2200      	movs	r2, #0
 800198c:	4619      	mov	r1, r3
 800198e:	4816      	ldr	r0, [pc, #88]	@ (80019e8 <MX_TIM8_Init+0x120>)
 8001990:	f00a ffe4 	bl	800c95c <HAL_TIM_IC_ConfigChannel>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 800199a:	f000 f8d5 	bl	8001b48 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim_encoder, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800199e:	463b      	mov	r3, r7
 80019a0:	2204      	movs	r2, #4
 80019a2:	4619      	mov	r1, r3
 80019a4:	4810      	ldr	r0, [pc, #64]	@ (80019e8 <MX_TIM8_Init+0x120>)
 80019a6:	f00a ffd9 	bl	800c95c <HAL_TIM_IC_ConfigChannel>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <MX_TIM8_Init+0xec>
  {
    Error_Handler();
 80019b0:	f000 f8ca 	bl	8001b48 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim_encoder, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80019b4:	463b      	mov	r3, r7
 80019b6:	2208      	movs	r2, #8
 80019b8:	4619      	mov	r1, r3
 80019ba:	480b      	ldr	r0, [pc, #44]	@ (80019e8 <MX_TIM8_Init+0x120>)
 80019bc:	f00a ffce 	bl	800c95c <HAL_TIM_IC_ConfigChannel>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <MX_TIM8_Init+0x102>
  {
    Error_Handler();
 80019c6:	f000 f8bf 	bl	8001b48 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim_encoder, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 80019ca:	463b      	mov	r3, r7
 80019cc:	220c      	movs	r2, #12
 80019ce:	4619      	mov	r1, r3
 80019d0:	4805      	ldr	r0, [pc, #20]	@ (80019e8 <MX_TIM8_Init+0x120>)
 80019d2:	f00a ffc3 	bl	800c95c <HAL_TIM_IC_ConfigChannel>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 80019dc:	f000 f8b4 	bl	8001b48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80019e0:	bf00      	nop
 80019e2:	3728      	adds	r7, #40	@ 0x28
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	2000014c 	.word	0x2000014c
 80019ec:	40013400 	.word	0x40013400

080019f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart_rosserial.Instance = USART1;
 80019f4:	4b11      	ldr	r3, [pc, #68]	@ (8001a3c <MX_USART1_UART_Init+0x4c>)
 80019f6:	4a12      	ldr	r2, [pc, #72]	@ (8001a40 <MX_USART1_UART_Init+0x50>)
 80019f8:	601a      	str	r2, [r3, #0]
  huart_rosserial.Init.BaudRate = 57600;
 80019fa:	4b10      	ldr	r3, [pc, #64]	@ (8001a3c <MX_USART1_UART_Init+0x4c>)
 80019fc:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 8001a00:	605a      	str	r2, [r3, #4]
  huart_rosserial.Init.WordLength = UART_WORDLENGTH_8B;
 8001a02:	4b0e      	ldr	r3, [pc, #56]	@ (8001a3c <MX_USART1_UART_Init+0x4c>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	609a      	str	r2, [r3, #8]
  huart_rosserial.Init.StopBits = UART_STOPBITS_1;
 8001a08:	4b0c      	ldr	r3, [pc, #48]	@ (8001a3c <MX_USART1_UART_Init+0x4c>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	60da      	str	r2, [r3, #12]
  huart_rosserial.Init.Parity = UART_PARITY_NONE;
 8001a0e:	4b0b      	ldr	r3, [pc, #44]	@ (8001a3c <MX_USART1_UART_Init+0x4c>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	611a      	str	r2, [r3, #16]
  huart_rosserial.Init.Mode = UART_MODE_TX_RX;
 8001a14:	4b09      	ldr	r3, [pc, #36]	@ (8001a3c <MX_USART1_UART_Init+0x4c>)
 8001a16:	220c      	movs	r2, #12
 8001a18:	615a      	str	r2, [r3, #20]
  huart_rosserial.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a1a:	4b08      	ldr	r3, [pc, #32]	@ (8001a3c <MX_USART1_UART_Init+0x4c>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	619a      	str	r2, [r3, #24]
  huart_rosserial.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a20:	4b06      	ldr	r3, [pc, #24]	@ (8001a3c <MX_USART1_UART_Init+0x4c>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart_rosserial) != HAL_OK)
 8001a26:	4805      	ldr	r0, [pc, #20]	@ (8001a3c <MX_USART1_UART_Init+0x4c>)
 8001a28:	f00b feab 	bl	800d782 <HAL_UART_Init>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001a32:	f000 f889 	bl	8001b48 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a36:	bf00      	nop
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	20000194 	.word	0x20000194
 8001a40:	40013800 	.word	0x40013800

08001a44 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a4a:	4b10      	ldr	r3, [pc, #64]	@ (8001a8c <MX_DMA_Init+0x48>)
 8001a4c:	695b      	ldr	r3, [r3, #20]
 8001a4e:	4a0f      	ldr	r2, [pc, #60]	@ (8001a8c <MX_DMA_Init+0x48>)
 8001a50:	f043 0301 	orr.w	r3, r3, #1
 8001a54:	6153      	str	r3, [r2, #20]
 8001a56:	4b0d      	ldr	r3, [pc, #52]	@ (8001a8c <MX_DMA_Init+0x48>)
 8001a58:	695b      	ldr	r3, [r3, #20]
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	607b      	str	r3, [r7, #4]
 8001a60:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001a62:	2200      	movs	r2, #0
 8001a64:	2100      	movs	r1, #0
 8001a66:	200e      	movs	r0, #14
 8001a68:	f008 ffe1 	bl	800aa2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001a6c:	200e      	movs	r0, #14
 8001a6e:	f008 fffa 	bl	800aa66 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001a72:	2200      	movs	r2, #0
 8001a74:	2100      	movs	r1, #0
 8001a76:	200f      	movs	r0, #15
 8001a78:	f008 ffd9 	bl	800aa2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001a7c:	200f      	movs	r0, #15
 8001a7e:	f008 fff2 	bl	800aa66 <HAL_NVIC_EnableIRQ>

}
 8001a82:	bf00      	nop
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	40021000 	.word	0x40021000

08001a90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b088      	sub	sp, #32
 8001a94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a96:	f107 0310 	add.w	r3, r7, #16
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	601a      	str	r2, [r3, #0]
 8001a9e:	605a      	str	r2, [r3, #4]
 8001aa0:	609a      	str	r2, [r3, #8]
 8001aa2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aa4:	4b26      	ldr	r3, [pc, #152]	@ (8001b40 <MX_GPIO_Init+0xb0>)
 8001aa6:	699b      	ldr	r3, [r3, #24]
 8001aa8:	4a25      	ldr	r2, [pc, #148]	@ (8001b40 <MX_GPIO_Init+0xb0>)
 8001aaa:	f043 0310 	orr.w	r3, r3, #16
 8001aae:	6193      	str	r3, [r2, #24]
 8001ab0:	4b23      	ldr	r3, [pc, #140]	@ (8001b40 <MX_GPIO_Init+0xb0>)
 8001ab2:	699b      	ldr	r3, [r3, #24]
 8001ab4:	f003 0310 	and.w	r3, r3, #16
 8001ab8:	60fb      	str	r3, [r7, #12]
 8001aba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001abc:	4b20      	ldr	r3, [pc, #128]	@ (8001b40 <MX_GPIO_Init+0xb0>)
 8001abe:	699b      	ldr	r3, [r3, #24]
 8001ac0:	4a1f      	ldr	r2, [pc, #124]	@ (8001b40 <MX_GPIO_Init+0xb0>)
 8001ac2:	f043 0320 	orr.w	r3, r3, #32
 8001ac6:	6193      	str	r3, [r2, #24]
 8001ac8:	4b1d      	ldr	r3, [pc, #116]	@ (8001b40 <MX_GPIO_Init+0xb0>)
 8001aca:	699b      	ldr	r3, [r3, #24]
 8001acc:	f003 0320 	and.w	r3, r3, #32
 8001ad0:	60bb      	str	r3, [r7, #8]
 8001ad2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad4:	4b1a      	ldr	r3, [pc, #104]	@ (8001b40 <MX_GPIO_Init+0xb0>)
 8001ad6:	699b      	ldr	r3, [r3, #24]
 8001ad8:	4a19      	ldr	r2, [pc, #100]	@ (8001b40 <MX_GPIO_Init+0xb0>)
 8001ada:	f043 0304 	orr.w	r3, r3, #4
 8001ade:	6193      	str	r3, [r2, #24]
 8001ae0:	4b17      	ldr	r3, [pc, #92]	@ (8001b40 <MX_GPIO_Init+0xb0>)
 8001ae2:	699b      	ldr	r3, [r3, #24]
 8001ae4:	f003 0304 	and.w	r3, r3, #4
 8001ae8:	607b      	str	r3, [r7, #4]
 8001aea:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aec:	4b14      	ldr	r3, [pc, #80]	@ (8001b40 <MX_GPIO_Init+0xb0>)
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	4a13      	ldr	r2, [pc, #76]	@ (8001b40 <MX_GPIO_Init+0xb0>)
 8001af2:	f043 0308 	orr.w	r3, r3, #8
 8001af6:	6193      	str	r3, [r2, #24]
 8001af8:	4b11      	ldr	r3, [pc, #68]	@ (8001b40 <MX_GPIO_Init+0xb0>)
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	f003 0308 	and.w	r3, r3, #8
 8001b00:	603b      	str	r3, [r7, #0]
 8001b02:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001b04:	2201      	movs	r2, #1
 8001b06:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001b0a:	480e      	ldr	r0, [pc, #56]	@ (8001b44 <MX_GPIO_Init+0xb4>)
 8001b0c:	f009 fdde 	bl	800b6cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8001b10:	2200      	movs	r2, #0
 8001b12:	210f      	movs	r1, #15
 8001b14:	480b      	ldr	r0, [pc, #44]	@ (8001b44 <MX_GPIO_Init+0xb4>)
 8001b16:	f009 fdd9 	bl	800b6cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_Pin PC0 PC1 PC2
                           PC3 */
  GPIO_InitStruct.Pin = LED_Pin|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 8001b1a:	f242 030f 	movw	r3, #8207	@ 0x200f
 8001b1e:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b20:	2301      	movs	r3, #1
 8001b22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b24:	2300      	movs	r3, #0
 8001b26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b28:	2302      	movs	r3, #2
 8001b2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b2c:	f107 0310 	add.w	r3, r7, #16
 8001b30:	4619      	mov	r1, r3
 8001b32:	4804      	ldr	r0, [pc, #16]	@ (8001b44 <MX_GPIO_Init+0xb4>)
 8001b34:	f009 fc36 	bl	800b3a4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b38:	bf00      	nop
 8001b3a:	3720      	adds	r7, #32
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	40021000 	.word	0x40021000
 8001b44:	40011000 	.word	0x40011000

08001b48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b4c:	b672      	cpsid	i
}
 8001b4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b50:	bf00      	nop
 8001b52:	e7fd      	b.n	8001b50 <Error_Handler+0x8>

08001b54 <_ZSt3cosf>:
  using ::cos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  cos(float __x)
  { return __builtin_cosf(__x); }
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f00c fe99 	bl	800e894 <cosf>
 8001b62:	4603      	mov	r3, r0
 8001b64:	4618      	mov	r0, r3
 8001b66:	3708      	adds	r7, #8
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <_ZSt3sinf>:
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f00c fec5 	bl	800e904 <sinf>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3708      	adds	r7, #8
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	601a      	str	r2, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2200      	movs	r2, #0
 8001b96:	605a      	str	r2, [r3, #4]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	370c      	adds	r7, #12
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bc80      	pop	{r7}
 8001ba2:	4770      	bx	lr

08001ba4 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	4a04      	ldr	r2, [pc, #16]	@ (8001bc0 <_ZN3ros3MsgC1Ev+0x1c>)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	601a      	str	r2, [r3, #0]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	370c      	adds	r7, #12
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bc80      	pop	{r7}
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	08010fbc 	.word	0x08010fbc

08001bc4 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
      data()
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7ff ffe8 	bl	8001ba4 <_ZN3ros3MsgC1Ev>
 8001bd4:	4a06      	ldr	r2, [pc, #24]	@ (8001bf0 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	601a      	str	r2, [r3, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	3304      	adds	r3, #4
 8001bde:	4618      	mov	r0, r3
 8001be0:	f7ff ffd0 	bl	8001b84 <_ZN3ros4TimeC1Ev>
    {
    }
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	4618      	mov	r0, r3
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	08010fa4 	.word	0x08010fa4

08001bf4 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001bf4:	b480      	push	{r7}
 8001bf6:	b085      	sub	sp, #20
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6859      	ldr	r1, [r3, #4]
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	683a      	ldr	r2, [r7, #0]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	b2ca      	uxtb	r2, r1
 8001c0e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	0a19      	lsrs	r1, r3, #8
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	3301      	adds	r3, #1
 8001c1a:	683a      	ldr	r2, [r7, #0]
 8001c1c:	4413      	add	r3, r2
 8001c1e:	b2ca      	uxtb	r2, r1
 8001c20:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	0c19      	lsrs	r1, r3, #16
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	3302      	adds	r3, #2
 8001c2c:	683a      	ldr	r2, [r7, #0]
 8001c2e:	4413      	add	r3, r2
 8001c30:	b2ca      	uxtb	r2, r1
 8001c32:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	0e19      	lsrs	r1, r3, #24
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	3303      	adds	r3, #3
 8001c3e:	683a      	ldr	r2, [r7, #0]
 8001c40:	4413      	add	r3, r2
 8001c42:	b2ca      	uxtb	r2, r1
 8001c44:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	3304      	adds	r3, #4
 8001c4a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6899      	ldr	r1, [r3, #8]
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	683a      	ldr	r2, [r7, #0]
 8001c54:	4413      	add	r3, r2
 8001c56:	b2ca      	uxtb	r2, r1
 8001c58:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	0a19      	lsrs	r1, r3, #8
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	3301      	adds	r3, #1
 8001c64:	683a      	ldr	r2, [r7, #0]
 8001c66:	4413      	add	r3, r2
 8001c68:	b2ca      	uxtb	r2, r1
 8001c6a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	0c19      	lsrs	r1, r3, #16
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	3302      	adds	r3, #2
 8001c76:	683a      	ldr	r2, [r7, #0]
 8001c78:	4413      	add	r3, r2
 8001c7a:	b2ca      	uxtb	r2, r1
 8001c7c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	0e19      	lsrs	r1, r3, #24
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	3303      	adds	r3, #3
 8001c88:	683a      	ldr	r2, [r7, #0]
 8001c8a:	4413      	add	r3, r2
 8001c8c:	b2ca      	uxtb	r2, r1
 8001c8e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	3304      	adds	r3, #4
 8001c94:	60fb      	str	r3, [r7, #12]
      return offset;
 8001c96:	68fb      	ldr	r3, [r7, #12]
    }
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3714      	adds	r7, #20
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bc80      	pop	{r7}
 8001ca0:	4770      	bx	lr

08001ca2 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001ca2:	b480      	push	{r7}
 8001ca4:	b085      	sub	sp, #20
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
 8001caa:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001cac:	2300      	movs	r3, #0
 8001cae:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	683a      	ldr	r2, [r7, #0]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	461a      	mov	r2, r3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685a      	ldr	r2, [r3, #4]
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	6839      	ldr	r1, [r7, #0]
 8001cc8:	440b      	add	r3, r1
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	021b      	lsls	r3, r3, #8
 8001cce:	431a      	orrs	r2, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	685a      	ldr	r2, [r3, #4]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	3302      	adds	r3, #2
 8001cdc:	6839      	ldr	r1, [r7, #0]
 8001cde:	440b      	add	r3, r1
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	041b      	lsls	r3, r3, #16
 8001ce4:	431a      	orrs	r2, r3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685a      	ldr	r2, [r3, #4]
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	3303      	adds	r3, #3
 8001cf2:	6839      	ldr	r1, [r7, #0]
 8001cf4:	440b      	add	r3, r1
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	061b      	lsls	r3, r3, #24
 8001cfa:	431a      	orrs	r2, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	3304      	adds	r3, #4
 8001d04:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	683a      	ldr	r2, [r7, #0]
 8001d0a:	4413      	add	r3, r2
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	461a      	mov	r2, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	689a      	ldr	r2, [r3, #8]
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	6839      	ldr	r1, [r7, #0]
 8001d1e:	440b      	add	r3, r1
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	021b      	lsls	r3, r3, #8
 8001d24:	431a      	orrs	r2, r3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	689a      	ldr	r2, [r3, #8]
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	3302      	adds	r3, #2
 8001d32:	6839      	ldr	r1, [r7, #0]
 8001d34:	440b      	add	r3, r1
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	041b      	lsls	r3, r3, #16
 8001d3a:	431a      	orrs	r2, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	689a      	ldr	r2, [r3, #8]
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	3303      	adds	r3, #3
 8001d48:	6839      	ldr	r1, [r7, #0]
 8001d4a:	440b      	add	r3, r1
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	061b      	lsls	r3, r3, #24
 8001d50:	431a      	orrs	r2, r3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	3304      	adds	r3, #4
 8001d5a:	60fb      	str	r3, [r7, #12]
     return offset;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
    }
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3714      	adds	r7, #20
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bc80      	pop	{r7}
 8001d66:	4770      	bx	lr

08001d68 <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	4b02      	ldr	r3, [pc, #8]	@ (8001d7c <_ZN8std_msgs4Time7getTypeEv+0x14>)
 8001d72:	4618      	mov	r0, r3
 8001d74:	370c      	adds	r7, #12
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bc80      	pop	{r7}
 8001d7a:	4770      	bx	lr
 8001d7c:	080107b8 	.word	0x080107b8

08001d80 <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	4b02      	ldr	r3, [pc, #8]	@ (8001d94 <_ZN8std_msgs4Time6getMD5Ev+0x14>)
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bc80      	pop	{r7}
 8001d92:	4770      	bx	lr
 8001d94:	080107c8 	.word	0x080107c8

08001d98 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7ff fefe 	bl	8001ba4 <_ZN3ros3MsgC1Ev>
 8001da8:	4a0b      	ldr	r2, [pc, #44]	@ (8001dd8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	601a      	str	r2, [r3, #0]
      topic_id(0),
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2200      	movs	r2, #0
 8001db2:	809a      	strh	r2, [r3, #4]
      topic_name(""),
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	4a09      	ldr	r2, [pc, #36]	@ (8001ddc <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001db8:	609a      	str	r2, [r3, #8]
      message_type(""),
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a07      	ldr	r2, [pc, #28]	@ (8001ddc <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001dbe:	60da      	str	r2, [r3, #12]
      md5sum(""),
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	4a06      	ldr	r2, [pc, #24]	@ (8001ddc <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001dc4:	611a      	str	r2, [r3, #16]
      buffer_size(0)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	615a      	str	r2, [r3, #20]
    {
    }
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3708      	adds	r7, #8
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	08010f8c 	.word	0x08010f8c
 8001ddc:	080107ec 	.word	0x080107ec

08001de0 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b088      	sub	sp, #32
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001dea:	2300      	movs	r3, #0
 8001dec:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	8899      	ldrh	r1, [r3, #4]
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	683a      	ldr	r2, [r7, #0]
 8001df6:	4413      	add	r3, r2
 8001df8:	b2ca      	uxtb	r2, r1
 8001dfa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	889b      	ldrh	r3, [r3, #4]
 8001e00:	0a1b      	lsrs	r3, r3, #8
 8001e02:	b299      	uxth	r1, r3
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	3301      	adds	r3, #1
 8001e08:	683a      	ldr	r2, [r7, #0]
 8001e0a:	4413      	add	r3, r2
 8001e0c:	b2ca      	uxtb	r2, r1
 8001e0e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	3302      	adds	r3, #2
 8001e14:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7fe fa04 	bl	8000228 <strlen>
 8001e20:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	683a      	ldr	r2, [r7, #0]
 8001e26:	4413      	add	r3, r2
 8001e28:	69b9      	ldr	r1, [r7, #24]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f006 ffcc 	bl	8008dc8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	3304      	adds	r3, #4
 8001e34:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	683a      	ldr	r2, [r7, #0]
 8001e3a:	18d0      	adds	r0, r2, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	4619      	mov	r1, r3
 8001e44:	f00e fc4e 	bl	80106e4 <memcpy>
      offset += length_topic_name;
 8001e48:	69fa      	ldr	r2, [r7, #28]
 8001e4a:	69bb      	ldr	r3, [r7, #24]
 8001e4c:	4413      	add	r3, r2
 8001e4e:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7fe f9e7 	bl	8000228 <strlen>
 8001e5a:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	683a      	ldr	r2, [r7, #0]
 8001e60:	4413      	add	r3, r2
 8001e62:	6979      	ldr	r1, [r7, #20]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f006 ffaf 	bl	8008dc8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	3304      	adds	r3, #4
 8001e6e:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	683a      	ldr	r2, [r7, #0]
 8001e74:	18d0      	adds	r0, r2, r3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	68db      	ldr	r3, [r3, #12]
 8001e7a:	697a      	ldr	r2, [r7, #20]
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	f00e fc31 	bl	80106e4 <memcpy>
      offset += length_message_type;
 8001e82:	69fa      	ldr	r2, [r7, #28]
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	4413      	add	r3, r2
 8001e88:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	691b      	ldr	r3, [r3, #16]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f7fe f9ca 	bl	8000228 <strlen>
 8001e94:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	683a      	ldr	r2, [r7, #0]
 8001e9a:	4413      	add	r3, r2
 8001e9c:	6939      	ldr	r1, [r7, #16]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f006 ff92 	bl	8008dc8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	3304      	adds	r3, #4
 8001ea8:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	683a      	ldr	r2, [r7, #0]
 8001eae:	18d0      	adds	r0, r2, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	691b      	ldr	r3, [r3, #16]
 8001eb4:	693a      	ldr	r2, [r7, #16]
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	f00e fc14 	bl	80106e4 <memcpy>
      offset += length_md5sum;
 8001ebc:	69fa      	ldr	r2, [r7, #28]
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	4413      	add	r3, r2
 8001ec2:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	695b      	ldr	r3, [r3, #20]
 8001ec8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8001eca:	68f9      	ldr	r1, [r7, #12]
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	683a      	ldr	r2, [r7, #0]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	b2ca      	uxtb	r2, r1
 8001ed4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	0a19      	lsrs	r1, r3, #8
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	3301      	adds	r3, #1
 8001ede:	683a      	ldr	r2, [r7, #0]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	b2ca      	uxtb	r2, r1
 8001ee4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	0c19      	lsrs	r1, r3, #16
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	3302      	adds	r3, #2
 8001eee:	683a      	ldr	r2, [r7, #0]
 8001ef0:	4413      	add	r3, r2
 8001ef2:	b2ca      	uxtb	r2, r1
 8001ef4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	0e19      	lsrs	r1, r3, #24
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	3303      	adds	r3, #3
 8001efe:	683a      	ldr	r2, [r7, #0]
 8001f00:	4413      	add	r3, r2
 8001f02:	b2ca      	uxtb	r2, r1
 8001f04:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	3304      	adds	r3, #4
 8001f0a:	61fb      	str	r3, [r7, #28]
      return offset;
 8001f0c:	69fb      	ldr	r3, [r7, #28]
    }
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3720      	adds	r7, #32
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001f16:	b580      	push	{r7, lr}
 8001f18:	b08a      	sub	sp, #40	@ 0x28
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	6078      	str	r0, [r7, #4]
 8001f1e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001f20:	2300      	movs	r3, #0
 8001f22:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8001f24:	69bb      	ldr	r3, [r7, #24]
 8001f26:	683a      	ldr	r2, [r7, #0]
 8001f28:	4413      	add	r3, r2
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	889b      	ldrh	r3, [r3, #4]
 8001f36:	b21a      	sxth	r2, r3
 8001f38:	69bb      	ldr	r3, [r7, #24]
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	6839      	ldr	r1, [r7, #0]
 8001f3e:	440b      	add	r3, r1
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	021b      	lsls	r3, r3, #8
 8001f44:	b21b      	sxth	r3, r3
 8001f46:	4313      	orrs	r3, r2
 8001f48:	b21b      	sxth	r3, r3
 8001f4a:	b29a      	uxth	r2, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	3302      	adds	r3, #2
 8001f54:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	683a      	ldr	r2, [r7, #0]
 8001f5a:	441a      	add	r2, r3
 8001f5c:	f107 0314 	add.w	r3, r7, #20
 8001f60:	4611      	mov	r1, r2
 8001f62:	4618      	mov	r0, r3
 8001f64:	f006 ff4e 	bl	8008e04 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	3304      	adds	r3, #4
 8001f6c:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f72:	e00b      	b.n	8001f8c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x76>
          inbuffer[k-1]=inbuffer[k];
 8001f74:	683a      	ldr	r2, [r7, #0]
 8001f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f78:	441a      	add	r2, r3
 8001f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f7c:	3b01      	subs	r3, #1
 8001f7e:	6839      	ldr	r1, [r7, #0]
 8001f80:	440b      	add	r3, r1
 8001f82:	7812      	ldrb	r2, [r2, #0]
 8001f84:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f88:	3301      	adds	r3, #1
 8001f8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	4413      	add	r3, r2
 8001f92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d3ed      	bcc.n	8001f74 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5e>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	4413      	add	r3, r2
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	683a      	ldr	r2, [r7, #0]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8001fa8:	69bb      	ldr	r3, [r7, #24]
 8001faa:	3b01      	subs	r3, #1
 8001fac:	683a      	ldr	r2, [r7, #0]
 8001fae:	441a      	add	r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	4413      	add	r3, r2
 8001fba:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	683a      	ldr	r2, [r7, #0]
 8001fc0:	441a      	add	r2, r3
 8001fc2:	f107 0310 	add.w	r3, r7, #16
 8001fc6:	4611      	mov	r1, r2
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f006 ff1b 	bl	8008e04 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	3304      	adds	r3, #4
 8001fd2:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	623b      	str	r3, [r7, #32]
 8001fd8:	e00b      	b.n	8001ff2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xdc>
          inbuffer[k-1]=inbuffer[k];
 8001fda:	683a      	ldr	r2, [r7, #0]
 8001fdc:	6a3b      	ldr	r3, [r7, #32]
 8001fde:	441a      	add	r2, r3
 8001fe0:	6a3b      	ldr	r3, [r7, #32]
 8001fe2:	3b01      	subs	r3, #1
 8001fe4:	6839      	ldr	r1, [r7, #0]
 8001fe6:	440b      	add	r3, r1
 8001fe8:	7812      	ldrb	r2, [r2, #0]
 8001fea:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001fec:	6a3b      	ldr	r3, [r7, #32]
 8001fee:	3301      	adds	r3, #1
 8001ff0:	623b      	str	r3, [r7, #32]
 8001ff2:	69ba      	ldr	r2, [r7, #24]
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	6a3a      	ldr	r2, [r7, #32]
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d3ed      	bcc.n	8001fda <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc4>
      }
      inbuffer[offset+length_message_type-1]=0;
 8001ffe:	69ba      	ldr	r2, [r7, #24]
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	4413      	add	r3, r2
 8002004:	3b01      	subs	r3, #1
 8002006:	683a      	ldr	r2, [r7, #0]
 8002008:	4413      	add	r3, r2
 800200a:	2200      	movs	r2, #0
 800200c:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 800200e:	69bb      	ldr	r3, [r7, #24]
 8002010:	3b01      	subs	r3, #1
 8002012:	683a      	ldr	r2, [r7, #0]
 8002014:	441a      	add	r2, r3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 800201a:	69ba      	ldr	r2, [r7, #24]
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	4413      	add	r3, r2
 8002020:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8002022:	69bb      	ldr	r3, [r7, #24]
 8002024:	683a      	ldr	r2, [r7, #0]
 8002026:	441a      	add	r2, r3
 8002028:	f107 030c 	add.w	r3, r7, #12
 800202c:	4611      	mov	r1, r2
 800202e:	4618      	mov	r0, r3
 8002030:	f006 fee8 	bl	8008e04 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002034:	69bb      	ldr	r3, [r7, #24]
 8002036:	3304      	adds	r3, #4
 8002038:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	61fb      	str	r3, [r7, #28]
 800203e:	e00b      	b.n	8002058 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x142>
          inbuffer[k-1]=inbuffer[k];
 8002040:	683a      	ldr	r2, [r7, #0]
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	441a      	add	r2, r3
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	3b01      	subs	r3, #1
 800204a:	6839      	ldr	r1, [r7, #0]
 800204c:	440b      	add	r3, r1
 800204e:	7812      	ldrb	r2, [r2, #0]
 8002050:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	3301      	adds	r3, #1
 8002056:	61fb      	str	r3, [r7, #28]
 8002058:	69ba      	ldr	r2, [r7, #24]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	4413      	add	r3, r2
 800205e:	69fa      	ldr	r2, [r7, #28]
 8002060:	429a      	cmp	r2, r3
 8002062:	d3ed      	bcc.n	8002040 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x12a>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8002064:	69ba      	ldr	r2, [r7, #24]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	4413      	add	r3, r2
 800206a:	3b01      	subs	r3, #1
 800206c:	683a      	ldr	r2, [r7, #0]
 800206e:	4413      	add	r3, r2
 8002070:	2200      	movs	r2, #0
 8002072:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	3b01      	subs	r3, #1
 8002078:	683a      	ldr	r2, [r7, #0]
 800207a:	441a      	add	r2, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	4413      	add	r3, r2
 8002086:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8002088:	2300      	movs	r3, #0
 800208a:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	69ba      	ldr	r2, [r7, #24]
 8002090:	6839      	ldr	r1, [r7, #0]
 8002092:	440a      	add	r2, r1
 8002094:	7812      	ldrb	r2, [r2, #0]
 8002096:	4313      	orrs	r3, r2
 8002098:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800209a:	68ba      	ldr	r2, [r7, #8]
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	3301      	adds	r3, #1
 80020a0:	6839      	ldr	r1, [r7, #0]
 80020a2:	440b      	add	r3, r1
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	021b      	lsls	r3, r3, #8
 80020a8:	4313      	orrs	r3, r2
 80020aa:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80020ac:	68ba      	ldr	r2, [r7, #8]
 80020ae:	69bb      	ldr	r3, [r7, #24]
 80020b0:	3302      	adds	r3, #2
 80020b2:	6839      	ldr	r1, [r7, #0]
 80020b4:	440b      	add	r3, r1
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	041b      	lsls	r3, r3, #16
 80020ba:	4313      	orrs	r3, r2
 80020bc:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80020be:	68ba      	ldr	r2, [r7, #8]
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	3303      	adds	r3, #3
 80020c4:	6839      	ldr	r1, [r7, #0]
 80020c6:	440b      	add	r3, r1
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	061b      	lsls	r3, r3, #24
 80020cc:	4313      	orrs	r3, r2
 80020ce:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 80020d0:	68ba      	ldr	r2, [r7, #8]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	3304      	adds	r3, #4
 80020da:	61bb      	str	r3, [r7, #24]
     return offset;
 80020dc:	69bb      	ldr	r3, [r7, #24]
    }
 80020de:	4618      	mov	r0, r3
 80020e0:	3728      	adds	r7, #40	@ 0x28
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
	...

080020e8 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	4b02      	ldr	r3, [pc, #8]	@ (80020fc <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x14>)
 80020f2:	4618      	mov	r0, r3
 80020f4:	370c      	adds	r7, #12
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bc80      	pop	{r7}
 80020fa:	4770      	bx	lr
 80020fc:	080107f0 	.word	0x080107f0

08002100 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	4b02      	ldr	r3, [pc, #8]	@ (8002114 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x14>)
 800210a:	4618      	mov	r0, r3
 800210c:	370c      	adds	r7, #12
 800210e:	46bd      	mov	sp, r7
 8002110:	bc80      	pop	{r7}
 8002112:	4770      	bx	lr
 8002114:	0801080c 	.word	0x0801080c

08002118 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	4618      	mov	r0, r3
 8002124:	f7ff fd3e 	bl	8001ba4 <_ZN3ros3MsgC1Ev>
 8002128:	4a06      	ldr	r2, [pc, #24]	@ (8002144 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	601a      	str	r2, [r3, #0]
      level(0),
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	711a      	strb	r2, [r3, #4]
      msg("")
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	4a04      	ldr	r2, [pc, #16]	@ (8002148 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8002138:	609a      	str	r2, [r3, #8]
    {
    }
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4618      	mov	r0, r3
 800213e:	3708      	adds	r7, #8
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	08010f74 	.word	0x08010f74
 8002148:	080107ec 	.word	0x080107ec

0800214c <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002156:	2300      	movs	r3, #0
 8002158:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	683a      	ldr	r2, [r7, #0]
 800215e:	4413      	add	r3, r2
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	7912      	ldrb	r2, [r2, #4]
 8002164:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	3301      	adds	r3, #1
 800216a:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	4618      	mov	r0, r3
 8002172:	f7fe f859 	bl	8000228 <strlen>
 8002176:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	683a      	ldr	r2, [r7, #0]
 800217c:	4413      	add	r3, r2
 800217e:	68b9      	ldr	r1, [r7, #8]
 8002180:	4618      	mov	r0, r3
 8002182:	f006 fe21 	bl	8008dc8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	3304      	adds	r3, #4
 800218a:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	683a      	ldr	r2, [r7, #0]
 8002190:	18d0      	adds	r0, r2, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	68ba      	ldr	r2, [r7, #8]
 8002198:	4619      	mov	r1, r3
 800219a:	f00e faa3 	bl	80106e4 <memcpy>
      offset += length_msg;
 800219e:	68fa      	ldr	r2, [r7, #12]
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	4413      	add	r3, r2
 80021a4:	60fb      	str	r3, [r7, #12]
      return offset;
 80021a6:	68fb      	ldr	r3, [r7, #12]
    }
 80021a8:	4618      	mov	r0, r3
 80021aa:	3710      	adds	r7, #16
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b086      	sub	sp, #24
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80021ba:	2300      	movs	r3, #0
 80021bc:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	683a      	ldr	r2, [r7, #0]
 80021c2:	4413      	add	r3, r2
 80021c4:	781a      	ldrb	r2, [r3, #0]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	3301      	adds	r3, #1
 80021ce:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	683a      	ldr	r2, [r7, #0]
 80021d4:	441a      	add	r2, r3
 80021d6:	f107 030c 	add.w	r3, r7, #12
 80021da:	4611      	mov	r1, r2
 80021dc:	4618      	mov	r0, r3
 80021de:	f006 fe11 	bl	8008e04 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	3304      	adds	r3, #4
 80021e6:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	617b      	str	r3, [r7, #20]
 80021ec:	e00b      	b.n	8002206 <_ZN14rosserial_msgs3Log11deserializeEPh+0x56>
          inbuffer[k-1]=inbuffer[k];
 80021ee:	683a      	ldr	r2, [r7, #0]
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	441a      	add	r2, r3
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	3b01      	subs	r3, #1
 80021f8:	6839      	ldr	r1, [r7, #0]
 80021fa:	440b      	add	r3, r1
 80021fc:	7812      	ldrb	r2, [r2, #0]
 80021fe:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	3301      	adds	r3, #1
 8002204:	617b      	str	r3, [r7, #20]
 8002206:	693a      	ldr	r2, [r7, #16]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	4413      	add	r3, r2
 800220c:	697a      	ldr	r2, [r7, #20]
 800220e:	429a      	cmp	r2, r3
 8002210:	d3ed      	bcc.n	80021ee <_ZN14rosserial_msgs3Log11deserializeEPh+0x3e>
      }
      inbuffer[offset+length_msg-1]=0;
 8002212:	693a      	ldr	r2, [r7, #16]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	4413      	add	r3, r2
 8002218:	3b01      	subs	r3, #1
 800221a:	683a      	ldr	r2, [r7, #0]
 800221c:	4413      	add	r3, r2
 800221e:	2200      	movs	r2, #0
 8002220:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	3b01      	subs	r3, #1
 8002226:	683a      	ldr	r2, [r7, #0]
 8002228:	441a      	add	r2, r3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 800222e:	693a      	ldr	r2, [r7, #16]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	4413      	add	r3, r2
 8002234:	613b      	str	r3, [r7, #16]
     return offset;
 8002236:	693b      	ldr	r3, [r7, #16]
    }
 8002238:	4618      	mov	r0, r3
 800223a:	3718      	adds	r7, #24
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}

08002240 <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	4b02      	ldr	r3, [pc, #8]	@ (8002254 <_ZN14rosserial_msgs3Log7getTypeEv+0x14>)
 800224a:	4618      	mov	r0, r3
 800224c:	370c      	adds	r7, #12
 800224e:	46bd      	mov	sp, r7
 8002250:	bc80      	pop	{r7}
 8002252:	4770      	bx	lr
 8002254:	08010830 	.word	0x08010830

08002258 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	4b02      	ldr	r3, [pc, #8]	@ (800226c <_ZN14rosserial_msgs3Log6getMD5Ev+0x14>)
 8002262:	4618      	mov	r0, r3
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	bc80      	pop	{r7}
 800226a:	4770      	bx	lr
 800226c:	08010844 	.word	0x08010844

08002270 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	4618      	mov	r0, r3
 800227c:	f7ff fc92 	bl	8001ba4 <_ZN3ros3MsgC1Ev>
 8002280:	4a11      	ldr	r2, [pc, #68]	@ (80022c8 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	601a      	str	r2, [r3, #0]
      ints_length(0), st_ints(), ints(nullptr),
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	605a      	str	r2, [r3, #4]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2200      	movs	r2, #0
 8002290:	609a      	str	r2, [r3, #8]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	60da      	str	r2, [r3, #12]
      floats_length(0), st_floats(), floats(nullptr),
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2200      	movs	r2, #0
 800229c:	611a      	str	r2, [r3, #16]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	f04f 0200 	mov.w	r2, #0
 80022a4:	615a      	str	r2, [r3, #20]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	619a      	str	r2, [r3, #24]
      strings_length(0), st_strings(), strings(nullptr)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	61da      	str	r2, [r3, #28]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	621a      	str	r2, [r3, #32]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	625a      	str	r2, [r3, #36]	@ 0x24
    {
    }
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4618      	mov	r0, r3
 80022c2:	3708      	adds	r7, #8
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	08010f5c 	.word	0x08010f5c

080022cc <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b08a      	sub	sp, #40	@ 0x28
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80022d6:	2300      	movs	r3, #0
 80022d8:	627b      	str	r3, [r7, #36]	@ 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6859      	ldr	r1, [r3, #4]
 80022de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022e0:	683a      	ldr	r2, [r7, #0]
 80022e2:	4413      	add	r3, r2
 80022e4:	b2ca      	uxtb	r2, r1
 80022e6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	0a19      	lsrs	r1, r3, #8
 80022ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022f0:	3301      	adds	r3, #1
 80022f2:	683a      	ldr	r2, [r7, #0]
 80022f4:	4413      	add	r3, r2
 80022f6:	b2ca      	uxtb	r2, r1
 80022f8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	0c19      	lsrs	r1, r3, #16
 8002300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002302:	3302      	adds	r3, #2
 8002304:	683a      	ldr	r2, [r7, #0]
 8002306:	4413      	add	r3, r2
 8002308:	b2ca      	uxtb	r2, r1
 800230a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	0e19      	lsrs	r1, r3, #24
 8002312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002314:	3303      	adds	r3, #3
 8002316:	683a      	ldr	r2, [r7, #0]
 8002318:	4413      	add	r3, r2
 800231a:	b2ca      	uxtb	r2, r1
 800231c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 800231e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002320:	3304      	adds	r3, #4
 8002322:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002324:	2300      	movs	r3, #0
 8002326:	623b      	str	r3, [r7, #32]
 8002328:	e02a      	b.n	8002380 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xb4>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	68da      	ldr	r2, [r3, #12]
 800232e:	6a3b      	ldr	r3, [r7, #32]
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	4413      	add	r3, r2
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8002338:	6939      	ldr	r1, [r7, #16]
 800233a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800233c:	683a      	ldr	r2, [r7, #0]
 800233e:	4413      	add	r3, r2
 8002340:	b2ca      	uxtb	r2, r1
 8002342:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	0a19      	lsrs	r1, r3, #8
 8002348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800234a:	3301      	adds	r3, #1
 800234c:	683a      	ldr	r2, [r7, #0]
 800234e:	4413      	add	r3, r2
 8002350:	b2ca      	uxtb	r2, r1
 8002352:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	0c19      	lsrs	r1, r3, #16
 8002358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800235a:	3302      	adds	r3, #2
 800235c:	683a      	ldr	r2, [r7, #0]
 800235e:	4413      	add	r3, r2
 8002360:	b2ca      	uxtb	r2, r1
 8002362:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	0e19      	lsrs	r1, r3, #24
 8002368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800236a:	3303      	adds	r3, #3
 800236c:	683a      	ldr	r2, [r7, #0]
 800236e:	4413      	add	r3, r2
 8002370:	b2ca      	uxtb	r2, r1
 8002372:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8002374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002376:	3304      	adds	r3, #4
 8002378:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 800237a:	6a3b      	ldr	r3, [r7, #32]
 800237c:	3301      	adds	r3, #1
 800237e:	623b      	str	r3, [r7, #32]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	6a3a      	ldr	r2, [r7, #32]
 8002386:	429a      	cmp	r2, r3
 8002388:	d3cf      	bcc.n	800232a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6919      	ldr	r1, [r3, #16]
 800238e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002390:	683a      	ldr	r2, [r7, #0]
 8002392:	4413      	add	r3, r2
 8002394:	b2ca      	uxtb	r2, r1
 8002396:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	691b      	ldr	r3, [r3, #16]
 800239c:	0a19      	lsrs	r1, r3, #8
 800239e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023a0:	3301      	adds	r3, #1
 80023a2:	683a      	ldr	r2, [r7, #0]
 80023a4:	4413      	add	r3, r2
 80023a6:	b2ca      	uxtb	r2, r1
 80023a8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	691b      	ldr	r3, [r3, #16]
 80023ae:	0c19      	lsrs	r1, r3, #16
 80023b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023b2:	3302      	adds	r3, #2
 80023b4:	683a      	ldr	r2, [r7, #0]
 80023b6:	4413      	add	r3, r2
 80023b8:	b2ca      	uxtb	r2, r1
 80023ba:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	691b      	ldr	r3, [r3, #16]
 80023c0:	0e19      	lsrs	r1, r3, #24
 80023c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023c4:	3303      	adds	r3, #3
 80023c6:	683a      	ldr	r2, [r7, #0]
 80023c8:	4413      	add	r3, r2
 80023ca:	b2ca      	uxtb	r2, r1
 80023cc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 80023ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023d0:	3304      	adds	r3, #4
 80023d2:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80023d4:	2300      	movs	r3, #0
 80023d6:	61fb      	str	r3, [r7, #28]
 80023d8:	e02a      	b.n	8002430 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x164>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	699a      	ldr	r2, [r3, #24]
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	4413      	add	r3, r2
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 80023e8:	68f9      	ldr	r1, [r7, #12]
 80023ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ec:	683a      	ldr	r2, [r7, #0]
 80023ee:	4413      	add	r3, r2
 80023f0:	b2ca      	uxtb	r2, r1
 80023f2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	0a19      	lsrs	r1, r3, #8
 80023f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023fa:	3301      	adds	r3, #1
 80023fc:	683a      	ldr	r2, [r7, #0]
 80023fe:	4413      	add	r3, r2
 8002400:	b2ca      	uxtb	r2, r1
 8002402:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	0c19      	lsrs	r1, r3, #16
 8002408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800240a:	3302      	adds	r3, #2
 800240c:	683a      	ldr	r2, [r7, #0]
 800240e:	4413      	add	r3, r2
 8002410:	b2ca      	uxtb	r2, r1
 8002412:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	0e19      	lsrs	r1, r3, #24
 8002418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800241a:	3303      	adds	r3, #3
 800241c:	683a      	ldr	r2, [r7, #0]
 800241e:	4413      	add	r3, r2
 8002420:	b2ca      	uxtb	r2, r1
 8002422:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8002424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002426:	3304      	adds	r3, #4
 8002428:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	3301      	adds	r3, #1
 800242e:	61fb      	str	r3, [r7, #28]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	691b      	ldr	r3, [r3, #16]
 8002434:	69fa      	ldr	r2, [r7, #28]
 8002436:	429a      	cmp	r2, r3
 8002438:	d3cf      	bcc.n	80023da <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10e>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	69d9      	ldr	r1, [r3, #28]
 800243e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002440:	683a      	ldr	r2, [r7, #0]
 8002442:	4413      	add	r3, r2
 8002444:	b2ca      	uxtb	r2, r1
 8002446:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	69db      	ldr	r3, [r3, #28]
 800244c:	0a19      	lsrs	r1, r3, #8
 800244e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002450:	3301      	adds	r3, #1
 8002452:	683a      	ldr	r2, [r7, #0]
 8002454:	4413      	add	r3, r2
 8002456:	b2ca      	uxtb	r2, r1
 8002458:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	69db      	ldr	r3, [r3, #28]
 800245e:	0c19      	lsrs	r1, r3, #16
 8002460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002462:	3302      	adds	r3, #2
 8002464:	683a      	ldr	r2, [r7, #0]
 8002466:	4413      	add	r3, r2
 8002468:	b2ca      	uxtb	r2, r1
 800246a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	69db      	ldr	r3, [r3, #28]
 8002470:	0e19      	lsrs	r1, r3, #24
 8002472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002474:	3303      	adds	r3, #3
 8002476:	683a      	ldr	r2, [r7, #0]
 8002478:	4413      	add	r3, r2
 800247a:	b2ca      	uxtb	r2, r1
 800247c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 800247e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002480:	3304      	adds	r3, #4
 8002482:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002484:	2300      	movs	r3, #0
 8002486:	61bb      	str	r3, [r7, #24]
 8002488:	e027      	b.n	80024da <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x20e>
      uint32_t length_stringsi = strlen(this->strings[i]);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	4413      	add	r3, r2
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4618      	mov	r0, r3
 8002498:	f7fd fec6 	bl	8000228 <strlen>
 800249c:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 800249e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024a0:	683a      	ldr	r2, [r7, #0]
 80024a2:	4413      	add	r3, r2
 80024a4:	6979      	ldr	r1, [r7, #20]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f006 fc8e 	bl	8008dc8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80024ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ae:	3304      	adds	r3, #4
 80024b0:	627b      	str	r3, [r7, #36]	@ 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 80024b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024b4:	683a      	ldr	r2, [r7, #0]
 80024b6:	18d0      	adds	r0, r2, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80024bc:	69bb      	ldr	r3, [r7, #24]
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	4413      	add	r3, r2
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	697a      	ldr	r2, [r7, #20]
 80024c6:	4619      	mov	r1, r3
 80024c8:	f00e f90c 	bl	80106e4 <memcpy>
      offset += length_stringsi;
 80024cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	4413      	add	r3, r2
 80024d2:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	3301      	adds	r3, #1
 80024d8:	61bb      	str	r3, [r7, #24]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	69db      	ldr	r3, [r3, #28]
 80024de:	69ba      	ldr	r2, [r7, #24]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d3d2      	bcc.n	800248a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1be>
      }
      return offset;
 80024e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 80024e6:	4618      	mov	r0, r3
 80024e8:	3728      	adds	r7, #40	@ 0x28
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}

080024ee <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80024ee:	b580      	push	{r7, lr}
 80024f0:	b08e      	sub	sp, #56	@ 0x38
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	6078      	str	r0, [r7, #4]
 80024f6:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80024f8:	2300      	movs	r3, #0
 80024fa:	637b      	str	r3, [r7, #52]	@ 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80024fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024fe:	683a      	ldr	r2, [r7, #0]
 8002500:	4413      	add	r3, r2
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002506:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002508:	3301      	adds	r3, #1
 800250a:	683a      	ldr	r2, [r7, #0]
 800250c:	4413      	add	r3, r2
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	021b      	lsls	r3, r3, #8
 8002512:	6a3a      	ldr	r2, [r7, #32]
 8002514:	4313      	orrs	r3, r2
 8002516:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002518:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800251a:	3302      	adds	r3, #2
 800251c:	683a      	ldr	r2, [r7, #0]
 800251e:	4413      	add	r3, r2
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	041b      	lsls	r3, r3, #16
 8002524:	6a3a      	ldr	r2, [r7, #32]
 8002526:	4313      	orrs	r3, r2
 8002528:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800252a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800252c:	3303      	adds	r3, #3
 800252e:	683a      	ldr	r2, [r7, #0]
 8002530:	4413      	add	r3, r2
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	061b      	lsls	r3, r3, #24
 8002536:	6a3a      	ldr	r2, [r7, #32]
 8002538:	4313      	orrs	r3, r2
 800253a:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 800253c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800253e:	3304      	adds	r3, #4
 8002540:	637b      	str	r3, [r7, #52]	@ 0x34
      if(ints_lengthT > ints_length)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	6a3a      	ldr	r2, [r7, #32]
 8002548:	429a      	cmp	r2, r3
 800254a:	d90a      	bls.n	8002562 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	68da      	ldr	r2, [r3, #12]
 8002550:	6a3b      	ldr	r3, [r7, #32]
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	4619      	mov	r1, r3
 8002556:	4610      	mov	r0, r2
 8002558:	f00e f806 	bl	8010568 <realloc>
 800255c:	4602      	mov	r2, r0
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6a3a      	ldr	r2, [r7, #32]
 8002566:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8002568:	2300      	movs	r3, #0
 800256a:	633b      	str	r3, [r7, #48]	@ 0x30
 800256c:	e035      	b.n	80025da <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xec>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 800256e:	2300      	movs	r3, #0
 8002570:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002576:	6839      	ldr	r1, [r7, #0]
 8002578:	440a      	add	r2, r1
 800257a:	7812      	ldrb	r2, [r2, #0]
 800257c:	4313      	orrs	r3, r2
 800257e:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002580:	697a      	ldr	r2, [r7, #20]
 8002582:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002584:	3301      	adds	r3, #1
 8002586:	6839      	ldr	r1, [r7, #0]
 8002588:	440b      	add	r3, r1
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	021b      	lsls	r3, r3, #8
 800258e:	4313      	orrs	r3, r2
 8002590:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002592:	697a      	ldr	r2, [r7, #20]
 8002594:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002596:	3302      	adds	r3, #2
 8002598:	6839      	ldr	r1, [r7, #0]
 800259a:	440b      	add	r3, r1
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	041b      	lsls	r3, r3, #16
 80025a0:	4313      	orrs	r3, r2
 80025a2:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80025a4:	697a      	ldr	r2, [r7, #20]
 80025a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025a8:	3303      	adds	r3, #3
 80025aa:	6839      	ldr	r1, [r7, #0]
 80025ac:	440b      	add	r3, r1
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	061b      	lsls	r3, r3, #24
 80025b2:	4313      	orrs	r3, r2
 80025b4:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 80025b6:	697a      	ldr	r2, [r7, #20]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 80025bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025be:	3304      	adds	r3, #4
 80025c0:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	68da      	ldr	r2, [r3, #12]
 80025c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	4413      	add	r3, r2
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	3208      	adds	r2, #8
 80025d0:	6812      	ldr	r2, [r2, #0]
 80025d2:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 80025d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025d6:	3301      	adds	r3, #1
 80025d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d3c4      	bcc.n	800256e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x80>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80025e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025e6:	683a      	ldr	r2, [r7, #0]
 80025e8:	4413      	add	r3, r2
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80025ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025f0:	3301      	adds	r3, #1
 80025f2:	683a      	ldr	r2, [r7, #0]
 80025f4:	4413      	add	r3, r2
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	021b      	lsls	r3, r3, #8
 80025fa:	69fa      	ldr	r2, [r7, #28]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002600:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002602:	3302      	adds	r3, #2
 8002604:	683a      	ldr	r2, [r7, #0]
 8002606:	4413      	add	r3, r2
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	041b      	lsls	r3, r3, #16
 800260c:	69fa      	ldr	r2, [r7, #28]
 800260e:	4313      	orrs	r3, r2
 8002610:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002612:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002614:	3303      	adds	r3, #3
 8002616:	683a      	ldr	r2, [r7, #0]
 8002618:	4413      	add	r3, r2
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	061b      	lsls	r3, r3, #24
 800261e:	69fa      	ldr	r2, [r7, #28]
 8002620:	4313      	orrs	r3, r2
 8002622:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8002624:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002626:	3304      	adds	r3, #4
 8002628:	637b      	str	r3, [r7, #52]	@ 0x34
      if(floats_lengthT > floats_length)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	691b      	ldr	r3, [r3, #16]
 800262e:	69fa      	ldr	r2, [r7, #28]
 8002630:	429a      	cmp	r2, r3
 8002632:	d90a      	bls.n	800264a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	699a      	ldr	r2, [r3, #24]
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	4619      	mov	r1, r3
 800263e:	4610      	mov	r0, r2
 8002640:	f00d ff92 	bl	8010568 <realloc>
 8002644:	4602      	mov	r2, r0
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	69fa      	ldr	r2, [r7, #28]
 800264e:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8002650:	2300      	movs	r3, #0
 8002652:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002654:	e035      	b.n	80026c2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1d4>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8002656:	2300      	movs	r3, #0
 8002658:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800265e:	6839      	ldr	r1, [r7, #0]
 8002660:	440a      	add	r2, r1
 8002662:	7812      	ldrb	r2, [r2, #0]
 8002664:	4313      	orrs	r3, r2
 8002666:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002668:	693a      	ldr	r2, [r7, #16]
 800266a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800266c:	3301      	adds	r3, #1
 800266e:	6839      	ldr	r1, [r7, #0]
 8002670:	440b      	add	r3, r1
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	021b      	lsls	r3, r3, #8
 8002676:	4313      	orrs	r3, r2
 8002678:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800267a:	693a      	ldr	r2, [r7, #16]
 800267c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800267e:	3302      	adds	r3, #2
 8002680:	6839      	ldr	r1, [r7, #0]
 8002682:	440b      	add	r3, r1
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	041b      	lsls	r3, r3, #16
 8002688:	4313      	orrs	r3, r2
 800268a:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800268c:	693a      	ldr	r2, [r7, #16]
 800268e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002690:	3303      	adds	r3, #3
 8002692:	6839      	ldr	r1, [r7, #0]
 8002694:	440b      	add	r3, r1
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	061b      	lsls	r3, r3, #24
 800269a:	4313      	orrs	r3, r2
 800269c:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 800269e:	693a      	ldr	r2, [r7, #16]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 80026a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026a6:	3304      	adds	r3, #4
 80026a8:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	699a      	ldr	r2, [r3, #24]
 80026ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	4413      	add	r3, r2
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	3214      	adds	r2, #20
 80026b8:	6812      	ldr	r2, [r2, #0]
 80026ba:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 80026bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026be:	3301      	adds	r3, #1
 80026c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	691b      	ldr	r3, [r3, #16]
 80026c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d3c4      	bcc.n	8002656 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x168>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80026cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026ce:	683a      	ldr	r2, [r7, #0]
 80026d0:	4413      	add	r3, r2
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80026d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026d8:	3301      	adds	r3, #1
 80026da:	683a      	ldr	r2, [r7, #0]
 80026dc:	4413      	add	r3, r2
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	021b      	lsls	r3, r3, #8
 80026e2:	69ba      	ldr	r2, [r7, #24]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80026e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026ea:	3302      	adds	r3, #2
 80026ec:	683a      	ldr	r2, [r7, #0]
 80026ee:	4413      	add	r3, r2
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	041b      	lsls	r3, r3, #16
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80026fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026fc:	3303      	adds	r3, #3
 80026fe:	683a      	ldr	r2, [r7, #0]
 8002700:	4413      	add	r3, r2
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	061b      	lsls	r3, r3, #24
 8002706:	69ba      	ldr	r2, [r7, #24]
 8002708:	4313      	orrs	r3, r2
 800270a:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 800270c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800270e:	3304      	adds	r3, #4
 8002710:	637b      	str	r3, [r7, #52]	@ 0x34
      if(strings_lengthT > strings_length)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	69db      	ldr	r3, [r3, #28]
 8002716:	69ba      	ldr	r2, [r7, #24]
 8002718:	429a      	cmp	r2, r3
 800271a:	d90a      	bls.n	8002732 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002720:	69bb      	ldr	r3, [r7, #24]
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	4619      	mov	r1, r3
 8002726:	4610      	mov	r0, r2
 8002728:	f00d ff1e 	bl	8010568 <realloc>
 800272c:	4602      	mov	r2, r0
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	625a      	str	r2, [r3, #36]	@ 0x24
      strings_length = strings_lengthT;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8002738:	2300      	movs	r3, #0
 800273a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800273c:	e03e      	b.n	80027bc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2ce>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 800273e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002740:	683a      	ldr	r2, [r7, #0]
 8002742:	441a      	add	r2, r3
 8002744:	f107 030c 	add.w	r3, r7, #12
 8002748:	4611      	mov	r1, r2
 800274a:	4618      	mov	r0, r3
 800274c:	f006 fb5a 	bl	8008e04 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002750:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002752:	3304      	adds	r3, #4
 8002754:	637b      	str	r3, [r7, #52]	@ 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002756:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002758:	627b      	str	r3, [r7, #36]	@ 0x24
 800275a:	e00b      	b.n	8002774 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x286>
          inbuffer[k-1]=inbuffer[k];
 800275c:	683a      	ldr	r2, [r7, #0]
 800275e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002760:	441a      	add	r2, r3
 8002762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002764:	3b01      	subs	r3, #1
 8002766:	6839      	ldr	r1, [r7, #0]
 8002768:	440b      	add	r3, r1
 800276a:	7812      	ldrb	r2, [r2, #0]
 800276c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800276e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002770:	3301      	adds	r3, #1
 8002772:	627b      	str	r3, [r7, #36]	@ 0x24
 8002774:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	4413      	add	r3, r2
 800277a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800277c:	429a      	cmp	r2, r3
 800277e:	d3ed      	bcc.n	800275c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26e>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8002780:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	4413      	add	r3, r2
 8002786:	3b01      	subs	r3, #1
 8002788:	683a      	ldr	r2, [r7, #0]
 800278a:	4413      	add	r3, r2
 800278c:	2200      	movs	r2, #0
 800278e:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8002790:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002792:	3b01      	subs	r3, #1
 8002794:	683a      	ldr	r2, [r7, #0]
 8002796:	441a      	add	r2, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 800279c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	4413      	add	r3, r2
 80027a2:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80027a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	4413      	add	r3, r2
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	3220      	adds	r2, #32
 80027b2:	6812      	ldr	r2, [r2, #0]
 80027b4:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 80027b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027b8:	3301      	adds	r3, #1
 80027ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	69db      	ldr	r3, [r3, #28]
 80027c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d3bb      	bcc.n	800273e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x250>
      }
     return offset;
 80027c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 80027c8:	4618      	mov	r0, r3
 80027ca:	3738      	adds	r7, #56	@ 0x38
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	4b02      	ldr	r3, [pc, #8]	@ (80027e4 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x14>)
 80027da:	4618      	mov	r0, r3
 80027dc:	370c      	adds	r7, #12
 80027de:	46bd      	mov	sp, r7
 80027e0:	bc80      	pop	{r7}
 80027e2:	4770      	bx	lr
 80027e4:	08010cdc 	.word	0x08010cdc

080027e8 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	4b02      	ldr	r3, [pc, #8]	@ (80027fc <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x14>)
 80027f2:	4618      	mov	r0, r3
 80027f4:	370c      	adds	r7, #12
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bc80      	pop	{r7}
 80027fa:	4770      	bx	lr
 80027fc:	08010868 	.word	0x08010868

08002800 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8002800:	b480      	push	{r7}
 8002802:	b085      	sub	sp, #20
 8002804:	af00      	add	r7, sp, #0
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	60b9      	str	r1, [r7, #8]
 800280a:	607a      	str	r2, [r7, #4]
 800280c:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	68ba      	ldr	r2, [r7, #8]
 8002812:	601a      	str	r2, [r3, #0]
    msg_(msg),
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	605a      	str	r2, [r3, #4]
    endpoint_(endpoint) {};
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	683a      	ldr	r2, [r7, #0]
 800281e:	611a      	str	r2, [r3, #16]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	4618      	mov	r0, r3
 8002824:	3714      	adds	r7, #20
 8002826:	46bd      	mov	sp, r7
 8002828:	bc80      	pop	{r7}
 800282a:	4770      	bx	lr

0800282c <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	68d8      	ldr	r0, [r3, #12]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	6891      	ldr	r1, [r2, #8]
 8002846:	683a      	ldr	r2, [r7, #0]
 8002848:	4798      	blx	r3
 800284a:	4603      	mov	r3, r0
  };
 800284c:	4618      	mov	r0, r3
 800284e:	3708      	adds	r7, #8
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}

08002854 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	691b      	ldr	r3, [r3, #16]
  }
 8002860:	4618      	mov	r0, r3
 8002862:	370c      	adds	r7, #12
 8002864:	46bd      	mov	sp, r7
 8002866:	bc80      	pop	{r7}
 8002868:	4770      	bx	lr

0800286a <_ZN10SerialCommC1ER20__UART_HandleTypeDef>:
    uint16_t tx_tail = 0;
    uint16_t rx_tail = 0;
    static constexpr uint16_t buf_mask = buffer_size - 1;

public:
    SerialComm(UART_HandleTypeDef &huart) : huart(huart)
 800286a:	b480      	push	{r7}
 800286c:	b083      	sub	sp, #12
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
 8002872:	6039      	str	r1, [r7, #0]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	683a      	ldr	r2, [r7, #0]
 8002878:	601a      	str	r2, [r3, #0]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8002880:	2201      	movs	r2, #1
 8002882:	711a      	strb	r2, [r3, #4]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800288a:	2200      	movs	r2, #0
 800288c:	80da      	strh	r2, [r3, #6]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8002894:	2200      	movs	r2, #0
 8002896:	811a      	strh	r2, [r3, #8]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800289e:	2200      	movs	r2, #0
 80028a0:	815a      	strh	r2, [r3, #10]
    {
        // Other initialization code
    }
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4618      	mov	r0, r3
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bc80      	pop	{r7}
 80028ac:	4770      	bx	lr

080028ae <_ZN10SerialComm4initEv>:

    void init(void)
 80028ae:	b580      	push	{r7, lr}
 80028b0:	b082      	sub	sp, #8
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	6078      	str	r0, [r7, #4]
    {
        reset_rbuf();
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f000 f90e 	bl	8002ad8 <_ZN10SerialComm10reset_rbufEv>
    }
 80028bc:	bf00      	nop
 80028be:	3708      	adds	r7, #8
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <_ZN10SerialComm4readEv>:

    /** @brief Read a character from the Rx buffer using the FIFO method.
     * 
     * @return The read character.
    */
    int read(void)
 80028c4:	b480      	push	{r7}
 80028c6:	b085      	sub	sp, #20
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
    {
       uint16_t rx_head = (buffer_size - huart.hdmarx->Instance->CNDTR) & buf_mask;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	f5c3 5300 	rsb	r3, r3, #8192	@ 0x2000
 80028dc:	b29b      	uxth	r3, r3
 80028de:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80028e2:	81fb      	strh	r3, [r7, #14]

        // Check for overlapping (which is bad, data will be overwritten)
        if (rx_tail == rx_head)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80028ea:	895b      	ldrh	r3, [r3, #10]
 80028ec:	89fa      	ldrh	r2, [r7, #14]
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d102      	bne.n	80028f8 <_ZN10SerialComm4readEv+0x34>
        {
            return -1;
 80028f2:	f04f 33ff 	mov.w	r3, #4294967295
 80028f6:	e01d      	b.n	8002934 <_ZN10SerialComm4readEv+0x70>
        }

        // Read a value and increment the read pointer (TAIL).
        int c = (int) rx_buf[rx_tail++];
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80028fe:	895b      	ldrh	r3, [r3, #10]
 8002900:	1c5a      	adds	r2, r3, #1
 8002902:	b291      	uxth	r1, r2
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 800290a:	8151      	strh	r1, [r2, #10]
 800290c:	461a      	mov	r2, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4413      	add	r3, r2
 8002912:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002916:	3304      	adds	r3, #4
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	60bb      	str	r3, [r7, #8]
        rx_tail &= buf_mask;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8002922:	895b      	ldrh	r3, [r3, #10]
 8002924:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002928:	b29a      	uxth	r2, r3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8002930:	815a      	strh	r2, [r3, #10]

        return c;
 8002932:	68bb      	ldr	r3, [r7, #8]
    }
 8002934:	4618      	mov	r0, r3
 8002936:	3714      	adds	r7, #20
 8002938:	46bd      	mov	sp, r7
 800293a:	bc80      	pop	{r7}
 800293c:	4770      	bx	lr

0800293e <_ZN10SerialComm5writeEPKhi>:
     * @param data The pointer to the data string.
     * @param length The length of the data string.
     * 
     * @return Void. 
    */
    void write(const uint8_t* const data, const int length)
 800293e:	b580      	push	{r7, lr}
 8002940:	b086      	sub	sp, #24
 8002942:	af00      	add	r7, sp, #0
 8002944:	60f8      	str	r0, [r7, #12]
 8002946:	60b9      	str	r1, [r7, #8]
 8002948:	607a      	str	r2, [r7, #4]
    {
        // Faulty data guard.
        if (length > buffer_size || length < 1)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002950:	dc46      	bgt.n	80029e0 <_ZN10SerialComm5writeEPKhi+0xa2>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2b00      	cmp	r3, #0
 8002956:	dd43      	ble.n	80029e0 <_ZN10SerialComm5writeEPKhi+0xa2>
        {
            return;
        }

        // Wait for the completion of the previous Tx transfer.
        while (!is_tx_cplt);
 8002958:	bf00      	nop
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8002960:	791b      	ldrb	r3, [r3, #4]
 8002962:	f083 0301 	eor.w	r3, r3, #1
 8002966:	b2db      	uxtb	r3, r3
 8002968:	2b00      	cmp	r3, #0
 800296a:	d1f6      	bne.n	800295a <_ZN10SerialComm5writeEPKhi+0x1c>

        // Check if the data is bigger than the remaining storage
        int w_len = (length <= (buffer_size - tx_head)) ? length : (buffer_size - tx_head);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8002972:	88db      	ldrh	r3, [r3, #6]
 8002974:	f5c3 5300 	rsb	r3, r3, #8192	@ 0x2000
 8002978:	687a      	ldr	r2, [r7, #4]
 800297a:	4293      	cmp	r3, r2
 800297c:	bfa8      	it	ge
 800297e:	4613      	movge	r3, r2
 8002980:	617b      	str	r3, [r7, #20]

        // Write the data and increment the write pointer (TX_HEAD)
        memcpy(&tx_buf[tx_head], data, w_len);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8002988:	88db      	ldrh	r3, [r3, #6]
 800298a:	461a      	mov	r2, r3
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	4413      	add	r3, r2
 8002990:	3304      	adds	r3, #4
 8002992:	697a      	ldr	r2, [r7, #20]
 8002994:	68b9      	ldr	r1, [r7, #8]
 8002996:	4618      	mov	r0, r3
 8002998:	f00d fea4 	bl	80106e4 <memcpy>
        tx_head = (tx_head + length) & buf_mask;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80029a2:	88da      	ldrh	r2, [r3, #6]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	4413      	add	r3, r2
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80029b0:	b29a      	uxth	r2, r3
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80029b8:	80da      	strh	r2, [r3, #6]

        // Reset the TX_HEAD pointer and write the remaining data
        // (If data is bigger than the previous remaining data)
        if (length != w_len)
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	429a      	cmp	r2, r3
 80029c0:	d00a      	beq.n	80029d8 <_ZN10SerialComm5writeEPKhi+0x9a>
        {
            memcpy(tx_buf, &data[w_len], length - w_len);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	1d18      	adds	r0, r3, #4
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	68ba      	ldr	r2, [r7, #8]
 80029ca:	18d1      	adds	r1, r2, r3
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	461a      	mov	r2, r3
 80029d4:	f00d fe86 	bl	80106e4 <memcpy>
        }

        // TODO: Start transfering
        flush();
 80029d8:	68f8      	ldr	r0, [r7, #12]
 80029da:	f000 f805 	bl	80029e8 <_ZN10SerialComm5flushEv>
 80029de:	e000      	b.n	80029e2 <_ZN10SerialComm5writeEPKhi+0xa4>
            return;
 80029e0:	bf00      	nop
    }
 80029e2:	3718      	adds	r7, #24
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <_ZN10SerialComm5flushEv>:

    /** @brief Transmit the just written data in the Tx buffer
     * 
     * @return void.
    */
    void flush()
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
    {
        if (is_tx_cplt)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80029f6:	791b      	ldrb	r3, [r3, #4]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d05b      	beq.n	8002ab4 <_ZN10SerialComm5flushEv+0xcc>
        {
            // if HEAD == TAIL => The buffer is empty => Nothing to send.
            if (tx_head != tx_tail)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8002a02:	88da      	ldrh	r2, [r3, #6]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8002a0a:	891b      	ldrh	r3, [r3, #8]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d04c      	beq.n	8002aaa <_ZN10SerialComm5flushEv+0xc2>
            {
                uint16_t len = 0;
 8002a10:	2300      	movs	r3, #0
 8002a12:	81fb      	strh	r3, [r7, #14]

                if (tx_tail < tx_head)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8002a1a:	891a      	ldrh	r2, [r3, #8]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8002a22:	88db      	ldrh	r3, [r3, #6]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d218      	bcs.n	8002a5a <_ZN10SerialComm5flushEv+0x72>
                {
                    len = tx_head - tx_tail;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8002a2e:	88da      	ldrh	r2, [r3, #6]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8002a36:	891b      	ldrh	r3, [r3, #8]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	81fb      	strh	r3, [r7, #14]
                    HAL_UART_Transmit_DMA(&huart, &tx_buf[tx_tail], len);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6818      	ldr	r0, [r3, #0]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8002a46:	891b      	ldrh	r3, [r3, #8]
 8002a48:	461a      	mov	r2, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4413      	add	r3, r2
 8002a4e:	3304      	adds	r3, #4
 8002a50:	89fa      	ldrh	r2, [r7, #14]
 8002a52:	4619      	mov	r1, r3
 8002a54:	f00a fee6 	bl	800d824 <HAL_UART_Transmit_DMA>
 8002a58:	e01f      	b.n	8002a9a <_ZN10SerialComm5flushEv+0xb2>
                }
                else
                {
                    len = buffer_size - tx_tail;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8002a60:	891b      	ldrh	r3, [r3, #8]
 8002a62:	f5c3 5300 	rsb	r3, r3, #8192	@ 0x2000
 8002a66:	81fb      	strh	r3, [r7, #14]
                    HAL_UART_Transmit_DMA(&huart, &tx_buf[tx_tail], len);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6818      	ldr	r0, [r3, #0]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8002a72:	891b      	ldrh	r3, [r3, #8]
 8002a74:	461a      	mov	r2, r3
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4413      	add	r3, r2
 8002a7a:	3304      	adds	r3, #4
 8002a7c:	89fa      	ldrh	r2, [r7, #14]
 8002a7e:	4619      	mov	r1, r3
 8002a80:	f00a fed0 	bl	800d824 <HAL_UART_Transmit_DMA>
                    HAL_UART_Transmit_DMA(&huart, tx_buf, tx_head);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6818      	ldr	r0, [r3, #0]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	1d19      	adds	r1, r3, #4
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8002a92:	88db      	ldrh	r3, [r3, #6]
 8002a94:	461a      	mov	r2, r3
 8002a96:	f00a fec5 	bl	800d824 <HAL_UART_Transmit_DMA>
                }
                
                tx_tail = tx_head;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8002aa0:	88da      	ldrh	r2, [r3, #6]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8002aa8:	811a      	strh	r2, [r3, #8]
            }
            
            is_tx_cplt = false;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	711a      	strb	r2, [r3, #4]
        }
    }
 8002ab4:	bf00      	nop
 8002ab6:	3710      	adds	r7, #16
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}

08002abc <_ZN10SerialComm11set_tx_cpltEv>:

    void set_tx_cplt(void)
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
    {
        is_tx_cplt = true;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8002aca:	2201      	movs	r2, #1
 8002acc:	711a      	strb	r2, [r3, #4]
    }
 8002ace:	bf00      	nop
 8002ad0:	370c      	adds	r7, #12
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bc80      	pop	{r7}
 8002ad6:	4770      	bx	lr

08002ad8 <_ZN10SerialComm10reset_rbufEv>:

    void reset_rbuf(void)
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
    {
        HAL_UART_Receive_DMA(&huart, (uint8_t *)rx_buf, buffer_size);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6818      	ldr	r0, [r3, #0]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002aea:	3304      	adds	r3, #4
 8002aec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002af0:	4619      	mov	r1, r3
 8002af2:	f00a ff07 	bl	800d904 <HAL_UART_Receive_DMA>
    }
 8002af6:	bf00      	nop
 8002af8:	3708      	adds	r7, #8
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
	...

08002b00 <_ZN13STM32HardwareC1Ev>:
class STM32Hardware {
  protected:
    SerialComm &comm;

  public:
    STM32Hardware() : comm(comm_rosserial)
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	4a04      	ldr	r2, [pc, #16]	@ (8002b1c <_ZN13STM32HardwareC1Ev+0x1c>)
 8002b0c:	601a      	str	r2, [r3, #0]
    {
        // TODO:
    }
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4618      	mov	r0, r3
 8002b12:	370c      	adds	r7, #12
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bc80      	pop	{r7}
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	20000264 	.word	0x20000264

08002b20 <_ZN13STM32Hardware4initEv>:
    STM32Hardware(SerialComm &comm) : comm(comm)
    {
        // TODO: 
    }
  
    void init()
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
    {
        comm.init();
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7ff febe 	bl	80028ae <_ZN10SerialComm4initEv>
    }
 8002b32:	bf00      	nop
 8002b34:	3708      	adds	r7, #8
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}

08002b3a <_ZN13STM32Hardware4readEv>:

    int read()  
 8002b3a:	b580      	push	{r7, lr}
 8002b3c:	b082      	sub	sp, #8
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
    {
        return comm.read();
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7ff febc 	bl	80028c4 <_ZN10SerialComm4readEv>
 8002b4c:	4603      	mov	r3, r0
    }
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3708      	adds	r7, #8
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}

08002b56 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length)
 8002b56:	b580      	push	{r7, lr}
 8002b58:	b084      	sub	sp, #16
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	60f8      	str	r0, [r7, #12]
 8002b5e:	60b9      	str	r1, [r7, #8]
 8002b60:	607a      	str	r2, [r7, #4]
    {
        comm.write(data, length);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	68b9      	ldr	r1, [r7, #8]
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f7ff fee7 	bl	800293e <_ZN10SerialComm5writeEPKhi>
    }
 8002b70:	bf00      	nop
 8002b72:	3710      	adds	r7, #16
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <_ZN13STM32Hardware4timeEv>:

    unsigned long time()
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
    { 
        return HAL_GetTick(); 
 8002b80:	f007 fe74 	bl	800a86c <HAL_GetTick>
 8002b84:	4603      	mov	r3, r0
    }
 8002b86:	4618      	mov	r0, r3
 8002b88:	3708      	adds	r7, #8
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
	...

08002b90 <_ZN8std_msgs5UInt8C1Ev>:
  {
    public:
      typedef uint8_t _data_type;
      _data_type data;

    UInt8():
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
      data(0)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f7ff f802 	bl	8001ba4 <_ZN3ros3MsgC1Ev>
 8002ba0:	4a05      	ldr	r2, [pc, #20]	@ (8002bb8 <_ZN8std_msgs5UInt8C1Ev+0x28>)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	601a      	str	r2, [r3, #0]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	711a      	strb	r2, [r3, #4]
    {
    }
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3708      	adds	r7, #8
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	08010f18 	.word	0x08010f18

08002bbc <_ZNK8std_msgs5UInt89serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002bbc:	b480      	push	{r7}
 8002bbe:	b085      	sub	sp, #20
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data >> (8 * 0)) & 0xFF;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	683a      	ldr	r2, [r7, #0]
 8002bce:	4413      	add	r3, r2
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	7912      	ldrb	r2, [r2, #4]
 8002bd4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	3301      	adds	r3, #1
 8002bda:	60fb      	str	r3, [r7, #12]
      return offset;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
    }
 8002bde:	4618      	mov	r0, r3
 8002be0:	3714      	adds	r7, #20
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bc80      	pop	{r7}
 8002be6:	4770      	bx	lr

08002be8 <_ZN8std_msgs5UInt811deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002be8:	b480      	push	{r7}
 8002bea:	b085      	sub	sp, #20
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	60fb      	str	r3, [r7, #12]
      this->data =  ((uint8_t) (*(inbuffer + offset)));
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	683a      	ldr	r2, [r7, #0]
 8002bfa:	4413      	add	r3, r2
 8002bfc:	781a      	ldrb	r2, [r3, #0]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->data);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	3301      	adds	r3, #1
 8002c06:	60fb      	str	r3, [r7, #12]
     return offset;
 8002c08:	68fb      	ldr	r3, [r7, #12]
    }
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3714      	adds	r7, #20
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bc80      	pop	{r7}
 8002c12:	4770      	bx	lr

08002c14 <_ZN8std_msgs5UInt87getTypeEv>:

    virtual const char * getType() override { return "std_msgs/UInt8"; };
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	4b02      	ldr	r3, [pc, #8]	@ (8002c28 <_ZN8std_msgs5UInt87getTypeEv+0x14>)
 8002c1e:	4618      	mov	r0, r3
 8002c20:	370c      	adds	r7, #12
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bc80      	pop	{r7}
 8002c26:	4770      	bx	lr
 8002c28:	0801088c 	.word	0x0801088c

08002c2c <_ZN8std_msgs5UInt86getMD5Ev>:
    virtual const char * getMD5() override { return "7c8164229e7d2c17eb95e9231617fdee"; };
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	4b02      	ldr	r3, [pc, #8]	@ (8002c40 <_ZN8std_msgs5UInt86getMD5Ev+0x14>)
 8002c36:	4618      	mov	r0, r3
 8002c38:	370c      	adds	r7, #12
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bc80      	pop	{r7}
 8002c3e:	4770      	bx	lr
 8002c40:	0801089c 	.word	0x0801089c

08002c44 <_ZN8std_msgs4Int8C1Ev>:
  {
    public:
      typedef int8_t _data_type;
      _data_type data;

    Int8():
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
      data(0)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f7fe ffa8 	bl	8001ba4 <_ZN3ros3MsgC1Ev>
 8002c54:	4a05      	ldr	r2, [pc, #20]	@ (8002c6c <_ZN8std_msgs4Int8C1Ev+0x28>)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	601a      	str	r2, [r3, #0]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	711a      	strb	r2, [r3, #4]
    {
    }
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	4618      	mov	r0, r3
 8002c64:	3708      	adds	r7, #8
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	08010f00 	.word	0x08010f00

08002c70 <_ZNK8std_msgs4Int89serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002c70:	b480      	push	{r7}
 8002c72:	b085      	sub	sp, #20
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	60fb      	str	r3, [r7, #12]
      union {
        int8_t real;
        uint8_t base;
      } u_data;
      u_data.real = this->data;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8002c84:	723b      	strb	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	683a      	ldr	r2, [r7, #0]
 8002c8a:	4413      	add	r3, r2
 8002c8c:	7a3a      	ldrb	r2, [r7, #8]
 8002c8e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	3301      	adds	r3, #1
 8002c94:	60fb      	str	r3, [r7, #12]
      return offset;
 8002c96:	68fb      	ldr	r3, [r7, #12]
    }
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3714      	adds	r7, #20
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bc80      	pop	{r7}
 8002ca0:	4770      	bx	lr

08002ca2 <_ZN8std_msgs4Int811deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002ca2:	b480      	push	{r7}
 8002ca4:	b085      	sub	sp, #20
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
 8002caa:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002cac:	2300      	movs	r3, #0
 8002cae:	60fb      	str	r3, [r7, #12]
      union {
        int8_t real;
        uint8_t base;
      } u_data;
      u_data.base = 0;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	723b      	strb	r3, [r7, #8]
      u_data.base |= ((uint8_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002cb4:	7a3a      	ldrb	r2, [r7, #8]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6839      	ldr	r1, [r7, #0]
 8002cba:	440b      	add	r3, r1
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	723b      	strb	r3, [r7, #8]
      this->data = u_data.real;
 8002cc4:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->data);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	3301      	adds	r3, #1
 8002cd0:	60fb      	str	r3, [r7, #12]
     return offset;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
    }
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3714      	adds	r7, #20
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bc80      	pop	{r7}
 8002cdc:	4770      	bx	lr
	...

08002ce0 <_ZN8std_msgs4Int87getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Int8"; };
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	4b02      	ldr	r3, [pc, #8]	@ (8002cf4 <_ZN8std_msgs4Int87getTypeEv+0x14>)
 8002cea:	4618      	mov	r0, r3
 8002cec:	370c      	adds	r7, #12
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bc80      	pop	{r7}
 8002cf2:	4770      	bx	lr
 8002cf4:	080108c0 	.word	0x080108c0

08002cf8 <_ZN8std_msgs4Int86getMD5Ev>:
    virtual const char * getMD5() override { return "27ffa0c9c4b8fb8492252bcad9e5c57b"; };
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	4b02      	ldr	r3, [pc, #8]	@ (8002d0c <_ZN8std_msgs4Int86getMD5Ev+0x14>)
 8002d02:	4618      	mov	r0, r3
 8002d04:	370c      	adds	r7, #12
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bc80      	pop	{r7}
 8002d0a:	4770      	bx	lr
 8002d0c:	080108d0 	.word	0x080108d0

08002d10 <_ZN8std_msgs7Float32C1Ev>:
  {
    public:
      typedef float _data_type;
      _data_type data;

    Float32():
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
      data(0)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f7fe ff42 	bl	8001ba4 <_ZN3ros3MsgC1Ev>
 8002d20:	4a05      	ldr	r2, [pc, #20]	@ (8002d38 <_ZN8std_msgs7Float32C1Ev+0x28>)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	601a      	str	r2, [r3, #0]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f04f 0200 	mov.w	r2, #0
 8002d2c:	605a      	str	r2, [r3, #4]
    {
    }
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4618      	mov	r0, r3
 8002d32:	3708      	adds	r7, #8
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	08010ee8 	.word	0x08010ee8

08002d3c <_ZNK8std_msgs7Float329serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002d3c:	b480      	push	{r7}
 8002d3e:	b085      	sub	sp, #20
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002d46:	2300      	movs	r3, #0
 8002d48:	60fb      	str	r3, [r7, #12]
      union {
        float real;
        uint32_t base;
      } u_data;
      u_data.real = this->data;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	60bb      	str	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8002d50:	68b9      	ldr	r1, [r7, #8]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	683a      	ldr	r2, [r7, #0]
 8002d56:	4413      	add	r3, r2
 8002d58:	b2ca      	uxtb	r2, r1
 8002d5a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	0a19      	lsrs	r1, r3, #8
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	3301      	adds	r3, #1
 8002d64:	683a      	ldr	r2, [r7, #0]
 8002d66:	4413      	add	r3, r2
 8002d68:	b2ca      	uxtb	r2, r1
 8002d6a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_data.base >> (8 * 2)) & 0xFF;
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	0c19      	lsrs	r1, r3, #16
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	3302      	adds	r3, #2
 8002d74:	683a      	ldr	r2, [r7, #0]
 8002d76:	4413      	add	r3, r2
 8002d78:	b2ca      	uxtb	r2, r1
 8002d7a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_data.base >> (8 * 3)) & 0xFF;
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	0e19      	lsrs	r1, r3, #24
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	3303      	adds	r3, #3
 8002d84:	683a      	ldr	r2, [r7, #0]
 8002d86:	4413      	add	r3, r2
 8002d88:	b2ca      	uxtb	r2, r1
 8002d8a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	3304      	adds	r3, #4
 8002d90:	60fb      	str	r3, [r7, #12]
      return offset;
 8002d92:	68fb      	ldr	r3, [r7, #12]
    }
 8002d94:	4618      	mov	r0, r3
 8002d96:	3714      	adds	r7, #20
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bc80      	pop	{r7}
 8002d9c:	4770      	bx	lr

08002d9e <_ZN8std_msgs7Float3211deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002d9e:	b480      	push	{r7}
 8002da0:	b085      	sub	sp, #20
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
 8002da6:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002da8:	2300      	movs	r3, #0
 8002daa:	60fb      	str	r3, [r7, #12]
      union {
        float real;
        uint32_t base;
      } u_data;
      u_data.base = 0;
 8002dac:	2300      	movs	r3, #0
 8002dae:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	68fa      	ldr	r2, [r7, #12]
 8002db4:	6839      	ldr	r1, [r7, #0]
 8002db6:	440a      	add	r2, r1
 8002db8:	7812      	ldrb	r2, [r2, #0]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002dbe:	68ba      	ldr	r2, [r7, #8]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	6839      	ldr	r1, [r7, #0]
 8002dc6:	440b      	add	r3, r1
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	021b      	lsls	r3, r3, #8
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002dd0:	68ba      	ldr	r2, [r7, #8]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	3302      	adds	r3, #2
 8002dd6:	6839      	ldr	r1, [r7, #0]
 8002dd8:	440b      	add	r3, r1
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	041b      	lsls	r3, r3, #16
 8002dde:	4313      	orrs	r3, r2
 8002de0:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002de2:	68ba      	ldr	r2, [r7, #8]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	3303      	adds	r3, #3
 8002de8:	6839      	ldr	r1, [r7, #0]
 8002dea:	440b      	add	r3, r1
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	061b      	lsls	r3, r3, #24
 8002df0:	4313      	orrs	r3, r2
 8002df2:	60bb      	str	r3, [r7, #8]
      this->data = u_data.real;
 8002df4:	68ba      	ldr	r2, [r7, #8]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	3304      	adds	r3, #4
 8002dfe:	60fb      	str	r3, [r7, #12]
     return offset;
 8002e00:	68fb      	ldr	r3, [r7, #12]
    }
 8002e02:	4618      	mov	r0, r3
 8002e04:	3714      	adds	r7, #20
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bc80      	pop	{r7}
 8002e0a:	4770      	bx	lr

08002e0c <_ZN8std_msgs7Float327getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Float32"; };
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	4b02      	ldr	r3, [pc, #8]	@ (8002e20 <_ZN8std_msgs7Float327getTypeEv+0x14>)
 8002e16:	4618      	mov	r0, r3
 8002e18:	370c      	adds	r7, #12
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bc80      	pop	{r7}
 8002e1e:	4770      	bx	lr
 8002e20:	080108f4 	.word	0x080108f4

08002e24 <_ZN8std_msgs7Float326getMD5Ev>:
    virtual const char * getMD5() override { return "73fcbf46b49191e672908e50842a83d4"; };
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	4b02      	ldr	r3, [pc, #8]	@ (8002e38 <_ZN8std_msgs7Float326getMD5Ev+0x14>)
 8002e2e:	4618      	mov	r0, r3
 8002e30:	370c      	adds	r7, #12
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bc80      	pop	{r7}
 8002e36:	4770      	bx	lr
 8002e38:	08010908 	.word	0x08010908

08002e3c <_ZN8std_msgs6HeaderC1Ev>:
      typedef ros::Time _stamp_type;
      _stamp_type stamp;
      typedef const char* _frame_id_type;
      _frame_id_type frame_id;

    Header():
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
      seq(0),
      stamp(),
      frame_id("")
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	4618      	mov	r0, r3
 8002e48:	f7fe feac 	bl	8001ba4 <_ZN3ros3MsgC1Ev>
 8002e4c:	4a09      	ldr	r2, [pc, #36]	@ (8002e74 <_ZN8std_msgs6HeaderC1Ev+0x38>)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	601a      	str	r2, [r3, #0]
      seq(0),
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	605a      	str	r2, [r3, #4]
      stamp(),
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	3308      	adds	r3, #8
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f7fe fe91 	bl	8001b84 <_ZN3ros4TimeC1Ev>
      frame_id("")
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4a04      	ldr	r2, [pc, #16]	@ (8002e78 <_ZN8std_msgs6HeaderC1Ev+0x3c>)
 8002e66:	611a      	str	r2, [r3, #16]
    {
    }
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3708      	adds	r7, #8
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	08010ed0 	.word	0x08010ed0
 8002e78:	080107ec 	.word	0x080107ec

08002e7c <_ZNK8std_msgs6Header9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002e86:	2300      	movs	r3, #0
 8002e88:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->seq >> (8 * 0)) & 0xFF;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6859      	ldr	r1, [r3, #4]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	683a      	ldr	r2, [r7, #0]
 8002e92:	4413      	add	r3, r2
 8002e94:	b2ca      	uxtb	r2, r1
 8002e96:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->seq >> (8 * 1)) & 0xFF;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	0a19      	lsrs	r1, r3, #8
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	683a      	ldr	r2, [r7, #0]
 8002ea4:	4413      	add	r3, r2
 8002ea6:	b2ca      	uxtb	r2, r1
 8002ea8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->seq >> (8 * 2)) & 0xFF;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	0c19      	lsrs	r1, r3, #16
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	3302      	adds	r3, #2
 8002eb4:	683a      	ldr	r2, [r7, #0]
 8002eb6:	4413      	add	r3, r2
 8002eb8:	b2ca      	uxtb	r2, r1
 8002eba:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->seq >> (8 * 3)) & 0xFF;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	0e19      	lsrs	r1, r3, #24
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	3303      	adds	r3, #3
 8002ec6:	683a      	ldr	r2, [r7, #0]
 8002ec8:	4413      	add	r3, r2
 8002eca:	b2ca      	uxtb	r2, r1
 8002ecc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->seq);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	3304      	adds	r3, #4
 8002ed2:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stamp.sec >> (8 * 0)) & 0xFF;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6899      	ldr	r1, [r3, #8]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	683a      	ldr	r2, [r7, #0]
 8002edc:	4413      	add	r3, r2
 8002ede:	b2ca      	uxtb	r2, r1
 8002ee0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stamp.sec >> (8 * 1)) & 0xFF;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	0a19      	lsrs	r1, r3, #8
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	3301      	adds	r3, #1
 8002eec:	683a      	ldr	r2, [r7, #0]
 8002eee:	4413      	add	r3, r2
 8002ef0:	b2ca      	uxtb	r2, r1
 8002ef2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stamp.sec >> (8 * 2)) & 0xFF;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	0c19      	lsrs	r1, r3, #16
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	3302      	adds	r3, #2
 8002efe:	683a      	ldr	r2, [r7, #0]
 8002f00:	4413      	add	r3, r2
 8002f02:	b2ca      	uxtb	r2, r1
 8002f04:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stamp.sec >> (8 * 3)) & 0xFF;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	0e19      	lsrs	r1, r3, #24
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	3303      	adds	r3, #3
 8002f10:	683a      	ldr	r2, [r7, #0]
 8002f12:	4413      	add	r3, r2
 8002f14:	b2ca      	uxtb	r2, r1
 8002f16:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stamp.sec);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	3304      	adds	r3, #4
 8002f1c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stamp.nsec >> (8 * 0)) & 0xFF;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	68d9      	ldr	r1, [r3, #12]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	683a      	ldr	r2, [r7, #0]
 8002f26:	4413      	add	r3, r2
 8002f28:	b2ca      	uxtb	r2, r1
 8002f2a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stamp.nsec >> (8 * 1)) & 0xFF;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	0a19      	lsrs	r1, r3, #8
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	3301      	adds	r3, #1
 8002f36:	683a      	ldr	r2, [r7, #0]
 8002f38:	4413      	add	r3, r2
 8002f3a:	b2ca      	uxtb	r2, r1
 8002f3c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stamp.nsec >> (8 * 2)) & 0xFF;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	0c19      	lsrs	r1, r3, #16
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	3302      	adds	r3, #2
 8002f48:	683a      	ldr	r2, [r7, #0]
 8002f4a:	4413      	add	r3, r2
 8002f4c:	b2ca      	uxtb	r2, r1
 8002f4e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stamp.nsec >> (8 * 3)) & 0xFF;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	0e19      	lsrs	r1, r3, #24
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	3303      	adds	r3, #3
 8002f5a:	683a      	ldr	r2, [r7, #0]
 8002f5c:	4413      	add	r3, r2
 8002f5e:	b2ca      	uxtb	r2, r1
 8002f60:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stamp.nsec);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	3304      	adds	r3, #4
 8002f66:	60fb      	str	r3, [r7, #12]
      uint32_t length_frame_id = strlen(this->frame_id);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	691b      	ldr	r3, [r3, #16]
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7fd f95b 	bl	8000228 <strlen>
 8002f72:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_frame_id);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	683a      	ldr	r2, [r7, #0]
 8002f78:	4413      	add	r3, r2
 8002f7a:	68b9      	ldr	r1, [r7, #8]
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f005 ff23 	bl	8008dc8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	3304      	adds	r3, #4
 8002f86:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->frame_id, length_frame_id);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	683a      	ldr	r2, [r7, #0]
 8002f8c:	18d0      	adds	r0, r2, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	691b      	ldr	r3, [r3, #16]
 8002f92:	68ba      	ldr	r2, [r7, #8]
 8002f94:	4619      	mov	r1, r3
 8002f96:	f00d fba5 	bl	80106e4 <memcpy>
      offset += length_frame_id;
 8002f9a:	68fa      	ldr	r2, [r7, #12]
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	4413      	add	r3, r2
 8002fa0:	60fb      	str	r3, [r7, #12]
      return offset;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
    }
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3710      	adds	r7, #16
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}

08002fac <_ZN8std_msgs6Header11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b086      	sub	sp, #24
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	613b      	str	r3, [r7, #16]
      this->seq =  ((uint32_t) (*(inbuffer + offset)));
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	683a      	ldr	r2, [r7, #0]
 8002fbe:	4413      	add	r3, r2
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	685a      	ldr	r2, [r3, #4]
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	3301      	adds	r3, #1
 8002fd0:	6839      	ldr	r1, [r7, #0]
 8002fd2:	440b      	add	r3, r1
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	021b      	lsls	r3, r3, #8
 8002fd8:	431a      	orrs	r2, r3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685a      	ldr	r2, [r3, #4]
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	3302      	adds	r3, #2
 8002fe6:	6839      	ldr	r1, [r7, #0]
 8002fe8:	440b      	add	r3, r1
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	041b      	lsls	r3, r3, #16
 8002fee:	431a      	orrs	r2, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	685a      	ldr	r2, [r3, #4]
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	3303      	adds	r3, #3
 8002ffc:	6839      	ldr	r1, [r7, #0]
 8002ffe:	440b      	add	r3, r1
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	061b      	lsls	r3, r3, #24
 8003004:	431a      	orrs	r2, r3
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->seq);
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	3304      	adds	r3, #4
 800300e:	613b      	str	r3, [r7, #16]
      this->stamp.sec =  ((uint32_t) (*(inbuffer + offset)));
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	683a      	ldr	r2, [r7, #0]
 8003014:	4413      	add	r3, r2
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	461a      	mov	r2, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	689a      	ldr	r2, [r3, #8]
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	3301      	adds	r3, #1
 8003026:	6839      	ldr	r1, [r7, #0]
 8003028:	440b      	add	r3, r1
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	021b      	lsls	r3, r3, #8
 800302e:	431a      	orrs	r2, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	689a      	ldr	r2, [r3, #8]
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	3302      	adds	r3, #2
 800303c:	6839      	ldr	r1, [r7, #0]
 800303e:	440b      	add	r3, r1
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	041b      	lsls	r3, r3, #16
 8003044:	431a      	orrs	r2, r3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	689a      	ldr	r2, [r3, #8]
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	3303      	adds	r3, #3
 8003052:	6839      	ldr	r1, [r7, #0]
 8003054:	440b      	add	r3, r1
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	061b      	lsls	r3, r3, #24
 800305a:	431a      	orrs	r2, r3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->stamp.sec);
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	3304      	adds	r3, #4
 8003064:	613b      	str	r3, [r7, #16]
      this->stamp.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	683a      	ldr	r2, [r7, #0]
 800306a:	4413      	add	r3, r2
 800306c:	781b      	ldrb	r3, [r3, #0]
 800306e:	461a      	mov	r2, r3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	68da      	ldr	r2, [r3, #12]
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	3301      	adds	r3, #1
 800307c:	6839      	ldr	r1, [r7, #0]
 800307e:	440b      	add	r3, r1
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	021b      	lsls	r3, r3, #8
 8003084:	431a      	orrs	r2, r3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	68da      	ldr	r2, [r3, #12]
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	3302      	adds	r3, #2
 8003092:	6839      	ldr	r1, [r7, #0]
 8003094:	440b      	add	r3, r1
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	041b      	lsls	r3, r3, #16
 800309a:	431a      	orrs	r2, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	68da      	ldr	r2, [r3, #12]
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	3303      	adds	r3, #3
 80030a8:	6839      	ldr	r1, [r7, #0]
 80030aa:	440b      	add	r3, r1
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	061b      	lsls	r3, r3, #24
 80030b0:	431a      	orrs	r2, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->stamp.nsec);
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	3304      	adds	r3, #4
 80030ba:	613b      	str	r3, [r7, #16]
      uint32_t length_frame_id;
      arrToVar(length_frame_id, (inbuffer + offset));
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	683a      	ldr	r2, [r7, #0]
 80030c0:	441a      	add	r2, r3
 80030c2:	f107 030c 	add.w	r3, r7, #12
 80030c6:	4611      	mov	r1, r2
 80030c8:	4618      	mov	r0, r3
 80030ca:	f005 fe9b 	bl	8008e04 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	3304      	adds	r3, #4
 80030d2:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	617b      	str	r3, [r7, #20]
 80030d8:	e00b      	b.n	80030f2 <_ZN8std_msgs6Header11deserializeEPh+0x146>
          inbuffer[k-1]=inbuffer[k];
 80030da:	683a      	ldr	r2, [r7, #0]
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	441a      	add	r2, r3
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	3b01      	subs	r3, #1
 80030e4:	6839      	ldr	r1, [r7, #0]
 80030e6:	440b      	add	r3, r1
 80030e8:	7812      	ldrb	r2, [r2, #0]
 80030ea:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	3301      	adds	r3, #1
 80030f0:	617b      	str	r3, [r7, #20]
 80030f2:	693a      	ldr	r2, [r7, #16]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	4413      	add	r3, r2
 80030f8:	697a      	ldr	r2, [r7, #20]
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d3ed      	bcc.n	80030da <_ZN8std_msgs6Header11deserializeEPh+0x12e>
      }
      inbuffer[offset+length_frame_id-1]=0;
 80030fe:	693a      	ldr	r2, [r7, #16]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	4413      	add	r3, r2
 8003104:	3b01      	subs	r3, #1
 8003106:	683a      	ldr	r2, [r7, #0]
 8003108:	4413      	add	r3, r2
 800310a:	2200      	movs	r2, #0
 800310c:	701a      	strb	r2, [r3, #0]
      this->frame_id = (char *)(inbuffer + offset-1);
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	3b01      	subs	r3, #1
 8003112:	683a      	ldr	r2, [r7, #0]
 8003114:	441a      	add	r2, r3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	611a      	str	r2, [r3, #16]
      offset += length_frame_id;
 800311a:	693a      	ldr	r2, [r7, #16]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	4413      	add	r3, r2
 8003120:	613b      	str	r3, [r7, #16]
     return offset;
 8003122:	693b      	ldr	r3, [r7, #16]
    }
 8003124:	4618      	mov	r0, r3
 8003126:	3718      	adds	r7, #24
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}

0800312c <_ZN8std_msgs6Header7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Header"; };
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	4b02      	ldr	r3, [pc, #8]	@ (8003140 <_ZN8std_msgs6Header7getTypeEv+0x14>)
 8003136:	4618      	mov	r0, r3
 8003138:	370c      	adds	r7, #12
 800313a:	46bd      	mov	sp, r7
 800313c:	bc80      	pop	{r7}
 800313e:	4770      	bx	lr
 8003140:	0801092c 	.word	0x0801092c

08003144 <_ZN8std_msgs6Header6getMD5Ev>:
    virtual const char * getMD5() override { return "2176decaecbce78abc3b96ef049fabed"; };
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	4b02      	ldr	r3, [pc, #8]	@ (8003158 <_ZN8std_msgs6Header6getMD5Ev+0x14>)
 800314e:	4618      	mov	r0, r3
 8003150:	370c      	adds	r7, #12
 8003152:	46bd      	mov	sp, r7
 8003154:	bc80      	pop	{r7}
 8003156:	4770      	bx	lr
 8003158:	0801093c 	.word	0x0801093c

0800315c <_ZN13geometry_msgs10QuaternionC1Ev>:
      typedef double _z_type;
      _z_type z;
      typedef double _w_type;
      _w_type w;

    Quaternion():
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0),
      w(0)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	4618      	mov	r0, r3
 8003168:	f7fe fd1c 	bl	8001ba4 <_ZN3ros3MsgC1Ev>
 800316c:	4a11      	ldr	r2, [pc, #68]	@ (80031b4 <_ZN13geometry_msgs10QuaternionC1Ev+0x58>)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	601a      	str	r2, [r3, #0]
      x(0),
 8003172:	6879      	ldr	r1, [r7, #4]
 8003174:	f04f 0200 	mov.w	r2, #0
 8003178:	f04f 0300 	mov.w	r3, #0
 800317c:	e9c1 2302 	strd	r2, r3, [r1, #8]
      y(0),
 8003180:	6879      	ldr	r1, [r7, #4]
 8003182:	f04f 0200 	mov.w	r2, #0
 8003186:	f04f 0300 	mov.w	r3, #0
 800318a:	e9c1 2304 	strd	r2, r3, [r1, #16]
      z(0),
 800318e:	6879      	ldr	r1, [r7, #4]
 8003190:	f04f 0200 	mov.w	r2, #0
 8003194:	f04f 0300 	mov.w	r3, #0
 8003198:	e9c1 2306 	strd	r2, r3, [r1, #24]
      w(0)
 800319c:	6879      	ldr	r1, [r7, #4]
 800319e:	f04f 0200 	mov.w	r2, #0
 80031a2:	f04f 0300 	mov.w	r3, #0
 80031a6:	e9c1 2308 	strd	r2, r3, [r1, #32]
    {
    }
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4618      	mov	r0, r3
 80031ae:	3708      	adds	r7, #8
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	08010eb8 	.word	0x08010eb8

080031b8 <_ZNK13geometry_msgs10Quaternion9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80031b8:	b480      	push	{r7}
 80031ba:	b08d      	sub	sp, #52	@ 0x34
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80031c2:	2300      	movs	r3, #0
 80031c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80031cc:	e9c7 2308 	strd	r2, r3, [r7, #32]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 80031d0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80031d4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80031d6:	6838      	ldr	r0, [r7, #0]
 80031d8:	4401      	add	r1, r0
 80031da:	b2d3      	uxtb	r3, r2
 80031dc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 80031de:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80031e2:	f04f 0200 	mov.w	r2, #0
 80031e6:	f04f 0300 	mov.w	r3, #0
 80031ea:	0a02      	lsrs	r2, r0, #8
 80031ec:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80031f0:	0a0b      	lsrs	r3, r1, #8
 80031f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80031f4:	3101      	adds	r1, #1
 80031f6:	6838      	ldr	r0, [r7, #0]
 80031f8:	4401      	add	r1, r0
 80031fa:	b2d3      	uxtb	r3, r2
 80031fc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 80031fe:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003202:	f04f 0200 	mov.w	r2, #0
 8003206:	f04f 0300 	mov.w	r3, #0
 800320a:	0c02      	lsrs	r2, r0, #16
 800320c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003210:	0c0b      	lsrs	r3, r1, #16
 8003212:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003214:	3102      	adds	r1, #2
 8003216:	6838      	ldr	r0, [r7, #0]
 8003218:	4401      	add	r1, r0
 800321a:	b2d3      	uxtb	r3, r2
 800321c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 800321e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003222:	f04f 0200 	mov.w	r2, #0
 8003226:	f04f 0300 	mov.w	r3, #0
 800322a:	0e02      	lsrs	r2, r0, #24
 800322c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003230:	0e0b      	lsrs	r3, r1, #24
 8003232:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003234:	3103      	adds	r1, #3
 8003236:	6838      	ldr	r0, [r7, #0]
 8003238:	4401      	add	r1, r0
 800323a:	b2d3      	uxtb	r3, r2
 800323c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 800323e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003242:	f04f 0200 	mov.w	r2, #0
 8003246:	f04f 0300 	mov.w	r3, #0
 800324a:	000a      	movs	r2, r1
 800324c:	2300      	movs	r3, #0
 800324e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003250:	3104      	adds	r1, #4
 8003252:	6838      	ldr	r0, [r7, #0]
 8003254:	4401      	add	r1, r0
 8003256:	b2d3      	uxtb	r3, r2
 8003258:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 800325a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800325e:	f04f 0200 	mov.w	r2, #0
 8003262:	f04f 0300 	mov.w	r3, #0
 8003266:	0a0a      	lsrs	r2, r1, #8
 8003268:	2300      	movs	r3, #0
 800326a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800326c:	3105      	adds	r1, #5
 800326e:	6838      	ldr	r0, [r7, #0]
 8003270:	4401      	add	r1, r0
 8003272:	b2d3      	uxtb	r3, r2
 8003274:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8003276:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800327a:	f04f 0200 	mov.w	r2, #0
 800327e:	f04f 0300 	mov.w	r3, #0
 8003282:	0c0a      	lsrs	r2, r1, #16
 8003284:	2300      	movs	r3, #0
 8003286:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003288:	3106      	adds	r1, #6
 800328a:	6838      	ldr	r0, [r7, #0]
 800328c:	4401      	add	r1, r0
 800328e:	b2d3      	uxtb	r3, r2
 8003290:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8003292:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003296:	f04f 0200 	mov.w	r2, #0
 800329a:	f04f 0300 	mov.w	r3, #0
 800329e:	0e0a      	lsrs	r2, r1, #24
 80032a0:	2300      	movs	r3, #0
 80032a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80032a4:	3107      	adds	r1, #7
 80032a6:	6838      	ldr	r0, [r7, #0]
 80032a8:	4401      	add	r1, r0
 80032aa:	b2d3      	uxtb	r3, r2
 80032ac:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 80032ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032b0:	3308      	adds	r3, #8
 80032b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80032ba:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 80032be:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80032c4:	6838      	ldr	r0, [r7, #0]
 80032c6:	4401      	add	r1, r0
 80032c8:	b2d3      	uxtb	r3, r2
 80032ca:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 80032cc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80032d0:	f04f 0200 	mov.w	r2, #0
 80032d4:	f04f 0300 	mov.w	r3, #0
 80032d8:	0a02      	lsrs	r2, r0, #8
 80032da:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80032de:	0a0b      	lsrs	r3, r1, #8
 80032e0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80032e2:	3101      	adds	r1, #1
 80032e4:	6838      	ldr	r0, [r7, #0]
 80032e6:	4401      	add	r1, r0
 80032e8:	b2d3      	uxtb	r3, r2
 80032ea:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 80032ec:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80032f0:	f04f 0200 	mov.w	r2, #0
 80032f4:	f04f 0300 	mov.w	r3, #0
 80032f8:	0c02      	lsrs	r2, r0, #16
 80032fa:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80032fe:	0c0b      	lsrs	r3, r1, #16
 8003300:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003302:	3102      	adds	r1, #2
 8003304:	6838      	ldr	r0, [r7, #0]
 8003306:	4401      	add	r1, r0
 8003308:	b2d3      	uxtb	r3, r2
 800330a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 800330c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003310:	f04f 0200 	mov.w	r2, #0
 8003314:	f04f 0300 	mov.w	r3, #0
 8003318:	0e02      	lsrs	r2, r0, #24
 800331a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800331e:	0e0b      	lsrs	r3, r1, #24
 8003320:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003322:	3103      	adds	r1, #3
 8003324:	6838      	ldr	r0, [r7, #0]
 8003326:	4401      	add	r1, r0
 8003328:	b2d3      	uxtb	r3, r2
 800332a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 800332c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003330:	f04f 0200 	mov.w	r2, #0
 8003334:	f04f 0300 	mov.w	r3, #0
 8003338:	000a      	movs	r2, r1
 800333a:	2300      	movs	r3, #0
 800333c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800333e:	3104      	adds	r1, #4
 8003340:	6838      	ldr	r0, [r7, #0]
 8003342:	4401      	add	r1, r0
 8003344:	b2d3      	uxtb	r3, r2
 8003346:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8003348:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800334c:	f04f 0200 	mov.w	r2, #0
 8003350:	f04f 0300 	mov.w	r3, #0
 8003354:	0a0a      	lsrs	r2, r1, #8
 8003356:	2300      	movs	r3, #0
 8003358:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800335a:	3105      	adds	r1, #5
 800335c:	6838      	ldr	r0, [r7, #0]
 800335e:	4401      	add	r1, r0
 8003360:	b2d3      	uxtb	r3, r2
 8003362:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8003364:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003368:	f04f 0200 	mov.w	r2, #0
 800336c:	f04f 0300 	mov.w	r3, #0
 8003370:	0c0a      	lsrs	r2, r1, #16
 8003372:	2300      	movs	r3, #0
 8003374:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003376:	3106      	adds	r1, #6
 8003378:	6838      	ldr	r0, [r7, #0]
 800337a:	4401      	add	r1, r0
 800337c:	b2d3      	uxtb	r3, r2
 800337e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8003380:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003384:	f04f 0200 	mov.w	r2, #0
 8003388:	f04f 0300 	mov.w	r3, #0
 800338c:	0e0a      	lsrs	r2, r1, #24
 800338e:	2300      	movs	r3, #0
 8003390:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003392:	3107      	adds	r1, #7
 8003394:	6838      	ldr	r0, [r7, #0]
 8003396:	4401      	add	r1, r0
 8003398:	b2d3      	uxtb	r3, r2
 800339a:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 800339c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800339e:	3308      	adds	r3, #8
 80033a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80033a8:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 80033ac:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80033b0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80033b2:	6838      	ldr	r0, [r7, #0]
 80033b4:	4401      	add	r1, r0
 80033b6:	b2d3      	uxtb	r3, r2
 80033b8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 80033ba:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80033be:	f04f 0200 	mov.w	r2, #0
 80033c2:	f04f 0300 	mov.w	r3, #0
 80033c6:	0a02      	lsrs	r2, r0, #8
 80033c8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80033cc:	0a0b      	lsrs	r3, r1, #8
 80033ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80033d0:	3101      	adds	r1, #1
 80033d2:	6838      	ldr	r0, [r7, #0]
 80033d4:	4401      	add	r1, r0
 80033d6:	b2d3      	uxtb	r3, r2
 80033d8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 80033da:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80033de:	f04f 0200 	mov.w	r2, #0
 80033e2:	f04f 0300 	mov.w	r3, #0
 80033e6:	0c02      	lsrs	r2, r0, #16
 80033e8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80033ec:	0c0b      	lsrs	r3, r1, #16
 80033ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80033f0:	3102      	adds	r1, #2
 80033f2:	6838      	ldr	r0, [r7, #0]
 80033f4:	4401      	add	r1, r0
 80033f6:	b2d3      	uxtb	r3, r2
 80033f8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 80033fa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80033fe:	f04f 0200 	mov.w	r2, #0
 8003402:	f04f 0300 	mov.w	r3, #0
 8003406:	0e02      	lsrs	r2, r0, #24
 8003408:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800340c:	0e0b      	lsrs	r3, r1, #24
 800340e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003410:	3103      	adds	r1, #3
 8003412:	6838      	ldr	r0, [r7, #0]
 8003414:	4401      	add	r1, r0
 8003416:	b2d3      	uxtb	r3, r2
 8003418:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 800341a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800341e:	f04f 0200 	mov.w	r2, #0
 8003422:	f04f 0300 	mov.w	r3, #0
 8003426:	000a      	movs	r2, r1
 8003428:	2300      	movs	r3, #0
 800342a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800342c:	3104      	adds	r1, #4
 800342e:	6838      	ldr	r0, [r7, #0]
 8003430:	4401      	add	r1, r0
 8003432:	b2d3      	uxtb	r3, r2
 8003434:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8003436:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800343a:	f04f 0200 	mov.w	r2, #0
 800343e:	f04f 0300 	mov.w	r3, #0
 8003442:	0a0a      	lsrs	r2, r1, #8
 8003444:	2300      	movs	r3, #0
 8003446:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003448:	3105      	adds	r1, #5
 800344a:	6838      	ldr	r0, [r7, #0]
 800344c:	4401      	add	r1, r0
 800344e:	b2d3      	uxtb	r3, r2
 8003450:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8003452:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003456:	f04f 0200 	mov.w	r2, #0
 800345a:	f04f 0300 	mov.w	r3, #0
 800345e:	0c0a      	lsrs	r2, r1, #16
 8003460:	2300      	movs	r3, #0
 8003462:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003464:	3106      	adds	r1, #6
 8003466:	6838      	ldr	r0, [r7, #0]
 8003468:	4401      	add	r1, r0
 800346a:	b2d3      	uxtb	r3, r2
 800346c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 800346e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003472:	f04f 0200 	mov.w	r2, #0
 8003476:	f04f 0300 	mov.w	r3, #0
 800347a:	0e0a      	lsrs	r2, r1, #24
 800347c:	2300      	movs	r3, #0
 800347e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003480:	3107      	adds	r1, #7
 8003482:	6838      	ldr	r0, [r7, #0]
 8003484:	4401      	add	r1, r0
 8003486:	b2d3      	uxtb	r3, r2
 8003488:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 800348a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800348c:	3308      	adds	r3, #8
 800348e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      union {
        double real;
        uint64_t base;
      } u_w;
      u_w.real = this->w;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003496:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_w.base >> (8 * 0)) & 0xFF;
 800349a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800349e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80034a0:	6838      	ldr	r0, [r7, #0]
 80034a2:	4401      	add	r1, r0
 80034a4:	b2d3      	uxtb	r3, r2
 80034a6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_w.base >> (8 * 1)) & 0xFF;
 80034a8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80034ac:	f04f 0200 	mov.w	r2, #0
 80034b0:	f04f 0300 	mov.w	r3, #0
 80034b4:	0a02      	lsrs	r2, r0, #8
 80034b6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80034ba:	0a0b      	lsrs	r3, r1, #8
 80034bc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80034be:	3101      	adds	r1, #1
 80034c0:	6838      	ldr	r0, [r7, #0]
 80034c2:	4401      	add	r1, r0
 80034c4:	b2d3      	uxtb	r3, r2
 80034c6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_w.base >> (8 * 2)) & 0xFF;
 80034c8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80034cc:	f04f 0200 	mov.w	r2, #0
 80034d0:	f04f 0300 	mov.w	r3, #0
 80034d4:	0c02      	lsrs	r2, r0, #16
 80034d6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80034da:	0c0b      	lsrs	r3, r1, #16
 80034dc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80034de:	3102      	adds	r1, #2
 80034e0:	6838      	ldr	r0, [r7, #0]
 80034e2:	4401      	add	r1, r0
 80034e4:	b2d3      	uxtb	r3, r2
 80034e6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_w.base >> (8 * 3)) & 0xFF;
 80034e8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80034ec:	f04f 0200 	mov.w	r2, #0
 80034f0:	f04f 0300 	mov.w	r3, #0
 80034f4:	0e02      	lsrs	r2, r0, #24
 80034f6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80034fa:	0e0b      	lsrs	r3, r1, #24
 80034fc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80034fe:	3103      	adds	r1, #3
 8003500:	6838      	ldr	r0, [r7, #0]
 8003502:	4401      	add	r1, r0
 8003504:	b2d3      	uxtb	r3, r2
 8003506:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_w.base >> (8 * 4)) & 0xFF;
 8003508:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800350c:	f04f 0200 	mov.w	r2, #0
 8003510:	f04f 0300 	mov.w	r3, #0
 8003514:	000a      	movs	r2, r1
 8003516:	2300      	movs	r3, #0
 8003518:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800351a:	3104      	adds	r1, #4
 800351c:	6838      	ldr	r0, [r7, #0]
 800351e:	4401      	add	r1, r0
 8003520:	b2d3      	uxtb	r3, r2
 8003522:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_w.base >> (8 * 5)) & 0xFF;
 8003524:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003528:	f04f 0200 	mov.w	r2, #0
 800352c:	f04f 0300 	mov.w	r3, #0
 8003530:	0a0a      	lsrs	r2, r1, #8
 8003532:	2300      	movs	r3, #0
 8003534:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003536:	3105      	adds	r1, #5
 8003538:	6838      	ldr	r0, [r7, #0]
 800353a:	4401      	add	r1, r0
 800353c:	b2d3      	uxtb	r3, r2
 800353e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_w.base >> (8 * 6)) & 0xFF;
 8003540:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003544:	f04f 0200 	mov.w	r2, #0
 8003548:	f04f 0300 	mov.w	r3, #0
 800354c:	0c0a      	lsrs	r2, r1, #16
 800354e:	2300      	movs	r3, #0
 8003550:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003552:	3106      	adds	r1, #6
 8003554:	6838      	ldr	r0, [r7, #0]
 8003556:	4401      	add	r1, r0
 8003558:	b2d3      	uxtb	r3, r2
 800355a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_w.base >> (8 * 7)) & 0xFF;
 800355c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003560:	f04f 0200 	mov.w	r2, #0
 8003564:	f04f 0300 	mov.w	r3, #0
 8003568:	0e0a      	lsrs	r2, r1, #24
 800356a:	2300      	movs	r3, #0
 800356c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800356e:	3107      	adds	r1, #7
 8003570:	6838      	ldr	r0, [r7, #0]
 8003572:	4401      	add	r1, r0
 8003574:	b2d3      	uxtb	r3, r2
 8003576:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->w);
 8003578:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800357a:	3308      	adds	r3, #8
 800357c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      return offset;
 800357e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
 8003580:	4618      	mov	r0, r3
 8003582:	3734      	adds	r7, #52	@ 0x34
 8003584:	46bd      	mov	sp, r7
 8003586:	bc80      	pop	{r7}
 8003588:	4770      	bx	lr

0800358a <_ZN13geometry_msgs10Quaternion11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800358a:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800358e:	f5ad 7d0f 	sub.w	sp, sp, #572	@ 0x23c
 8003592:	af00      	add	r7, sp, #0
 8003594:	f8c7 020c 	str.w	r0, [r7, #524]	@ 0x20c
 8003598:	f8c7 1208 	str.w	r1, [r7, #520]	@ 0x208
    {
      int offset = 0;
 800359c:	2300      	movs	r3, #0
 800359e:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 80035a2:	f04f 0200 	mov.w	r2, #0
 80035a6:	f04f 0300 	mov.w	r3, #0
 80035aa:	e9c7 238a 	strd	r2, r3, [r7, #552]	@ 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80035ae:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
 80035b2:	f8d7 2234 	ldr.w	r2, [r7, #564]	@ 0x234
 80035b6:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 80035ba:	4413      	add	r3, r2
 80035bc:	781b      	ldrb	r3, [r3, #0]
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	2200      	movs	r2, #0
 80035c2:	461c      	mov	r4, r3
 80035c4:	4615      	mov	r5, r2
 80035c6:	ea40 0804 	orr.w	r8, r0, r4
 80035ca:	ea41 0905 	orr.w	r9, r1, r5
 80035ce:	e9c7 898a 	strd	r8, r9, [r7, #552]	@ 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80035d2:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
 80035d6:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 80035da:	1c5a      	adds	r2, r3, #1
 80035dc:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 80035e0:	4413      	add	r3, r2
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	2200      	movs	r2, #0
 80035e8:	469a      	mov	sl, r3
 80035ea:	4693      	mov	fp, r2
 80035ec:	f04f 0200 	mov.w	r2, #0
 80035f0:	f04f 0300 	mov.w	r3, #0
 80035f4:	ea4f 230b 	mov.w	r3, fp, lsl #8
 80035f8:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 80035fc:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8003600:	ea40 0402 	orr.w	r4, r0, r2
 8003604:	f8c7 4200 	str.w	r4, [r7, #512]	@ 0x200
 8003608:	430b      	orrs	r3, r1
 800360a:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
 800360e:	e9d7 3480 	ldrd	r3, r4, [r7, #512]	@ 0x200
 8003612:	e9c7 348a 	strd	r3, r4, [r7, #552]	@ 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003616:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
 800361a:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 800361e:	1c9a      	adds	r2, r3, #2
 8003620:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8003624:	4413      	add	r3, r2
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	b2db      	uxtb	r3, r3
 800362a:	2200      	movs	r2, #0
 800362c:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
 8003630:	f8c7 21fc 	str.w	r2, [r7, #508]	@ 0x1fc
 8003634:	f04f 0200 	mov.w	r2, #0
 8003638:	f04f 0300 	mov.w	r3, #0
 800363c:	e9d7 897e 	ldrd	r8, r9, [r7, #504]	@ 0x1f8
 8003640:	464c      	mov	r4, r9
 8003642:	0423      	lsls	r3, r4, #16
 8003644:	46c4      	mov	ip, r8
 8003646:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
 800364a:	4644      	mov	r4, r8
 800364c:	0422      	lsls	r2, r4, #16
 800364e:	ea40 0402 	orr.w	r4, r0, r2
 8003652:	f8c7 41f0 	str.w	r4, [r7, #496]	@ 0x1f0
 8003656:	430b      	orrs	r3, r1
 8003658:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
 800365c:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	@ 0x1f0
 8003660:	e9c7 348a 	strd	r3, r4, [r7, #552]	@ 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003664:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
 8003668:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 800366c:	1cda      	adds	r2, r3, #3
 800366e:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8003672:	4413      	add	r3, r2
 8003674:	781b      	ldrb	r3, [r3, #0]
 8003676:	b2db      	uxtb	r3, r3
 8003678:	2200      	movs	r2, #0
 800367a:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 800367e:	f8c7 21ec 	str.w	r2, [r7, #492]	@ 0x1ec
 8003682:	e9d7 457a 	ldrd	r4, r5, [r7, #488]	@ 0x1e8
 8003686:	4623      	mov	r3, r4
 8003688:	0a1b      	lsrs	r3, r3, #8
 800368a:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 800368e:	4623      	mov	r3, r4
 8003690:	061b      	lsls	r3, r3, #24
 8003692:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8003696:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	@ 0x1e0
 800369a:	461a      	mov	r2, r3
 800369c:	4302      	orrs	r2, r0
 800369e:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80036a2:	4623      	mov	r3, r4
 80036a4:	430b      	orrs	r3, r1
 80036a6:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80036aa:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	@ 0x1d8
 80036ae:	e9c7 348a 	strd	r3, r4, [r7, #552]	@ 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80036b2:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
 80036b6:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 80036ba:	1d1a      	adds	r2, r3, #4
 80036bc:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 80036c0:	4413      	add	r3, r2
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	2200      	movs	r2, #0
 80036c8:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 80036cc:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
 80036d0:	f04f 0200 	mov.w	r2, #0
 80036d4:	f04f 0300 	mov.w	r3, #0
 80036d8:	f8d7 41d0 	ldr.w	r4, [r7, #464]	@ 0x1d0
 80036dc:	0023      	movs	r3, r4
 80036de:	2200      	movs	r2, #0
 80036e0:	ea40 0402 	orr.w	r4, r0, r2
 80036e4:	f8c7 41c8 	str.w	r4, [r7, #456]	@ 0x1c8
 80036e8:	430b      	orrs	r3, r1
 80036ea:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 80036ee:	e9d7 3472 	ldrd	r3, r4, [r7, #456]	@ 0x1c8
 80036f2:	e9c7 348a 	strd	r3, r4, [r7, #552]	@ 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80036f6:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
 80036fa:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 80036fe:	1d5a      	adds	r2, r3, #5
 8003700:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8003704:	4413      	add	r3, r2
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	b2db      	uxtb	r3, r3
 800370a:	2200      	movs	r2, #0
 800370c:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8003710:	f8c7 21c4 	str.w	r2, [r7, #452]	@ 0x1c4
 8003714:	f04f 0200 	mov.w	r2, #0
 8003718:	f04f 0300 	mov.w	r3, #0
 800371c:	f8d7 41c0 	ldr.w	r4, [r7, #448]	@ 0x1c0
 8003720:	0223      	lsls	r3, r4, #8
 8003722:	2200      	movs	r2, #0
 8003724:	ea40 0402 	orr.w	r4, r0, r2
 8003728:	f8c7 41b8 	str.w	r4, [r7, #440]	@ 0x1b8
 800372c:	430b      	orrs	r3, r1
 800372e:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8003732:	e9d7 346e 	ldrd	r3, r4, [r7, #440]	@ 0x1b8
 8003736:	e9c7 348a 	strd	r3, r4, [r7, #552]	@ 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800373a:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
 800373e:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8003742:	1d9a      	adds	r2, r3, #6
 8003744:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8003748:	4413      	add	r3, r2
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	b2db      	uxtb	r3, r3
 800374e:	2200      	movs	r2, #0
 8003750:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 8003754:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
 8003758:	f04f 0200 	mov.w	r2, #0
 800375c:	f04f 0300 	mov.w	r3, #0
 8003760:	f8d7 41b0 	ldr.w	r4, [r7, #432]	@ 0x1b0
 8003764:	0423      	lsls	r3, r4, #16
 8003766:	2200      	movs	r2, #0
 8003768:	ea40 0402 	orr.w	r4, r0, r2
 800376c:	f8c7 41a8 	str.w	r4, [r7, #424]	@ 0x1a8
 8003770:	430b      	orrs	r3, r1
 8003772:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 8003776:	e9d7 346a 	ldrd	r3, r4, [r7, #424]	@ 0x1a8
 800377a:	e9c7 348a 	strd	r3, r4, [r7, #552]	@ 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800377e:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
 8003782:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8003786:	1dda      	adds	r2, r3, #7
 8003788:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 800378c:	4413      	add	r3, r2
 800378e:	781b      	ldrb	r3, [r3, #0]
 8003790:	b2db      	uxtb	r3, r3
 8003792:	2200      	movs	r2, #0
 8003794:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8003798:	f8c7 21a4 	str.w	r2, [r7, #420]	@ 0x1a4
 800379c:	f04f 0200 	mov.w	r2, #0
 80037a0:	f04f 0300 	mov.w	r3, #0
 80037a4:	f8d7 41a0 	ldr.w	r4, [r7, #416]	@ 0x1a0
 80037a8:	0623      	lsls	r3, r4, #24
 80037aa:	2200      	movs	r2, #0
 80037ac:	ea40 0402 	orr.w	r4, r0, r2
 80037b0:	f8c7 4198 	str.w	r4, [r7, #408]	@ 0x198
 80037b4:	430b      	orrs	r3, r1
 80037b6:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80037ba:	e9d7 3466 	ldrd	r3, r4, [r7, #408]	@ 0x198
 80037be:	e9c7 348a 	strd	r3, r4, [r7, #552]	@ 0x228
      this->x = u_x.real;
 80037c2:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
 80037c6:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 80037ca:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 80037ce:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 80037d2:	3308      	adds	r3, #8
 80037d4:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 80037d8:	f04f 0200 	mov.w	r2, #0
 80037dc:	f04f 0300 	mov.w	r3, #0
 80037e0:	e9c7 2388 	strd	r2, r3, [r7, #544]	@ 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80037e4:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 80037e8:	f8d7 2234 	ldr.w	r2, [r7, #564]	@ 0x234
 80037ec:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 80037f0:	4413      	add	r3, r2
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	2200      	movs	r2, #0
 80037f8:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 80037fc:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
 8003800:	e9d7 3464 	ldrd	r3, r4, [r7, #400]	@ 0x190
 8003804:	461a      	mov	r2, r3
 8003806:	4302      	orrs	r2, r0
 8003808:	f8c7 2188 	str.w	r2, [r7, #392]	@ 0x188
 800380c:	4623      	mov	r3, r4
 800380e:	430b      	orrs	r3, r1
 8003810:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 8003814:	e9d7 3462 	ldrd	r3, r4, [r7, #392]	@ 0x188
 8003818:	e9c7 3488 	strd	r3, r4, [r7, #544]	@ 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800381c:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 8003820:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8003824:	1c5a      	adds	r2, r3, #1
 8003826:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 800382a:	4413      	add	r3, r2
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	b2db      	uxtb	r3, r3
 8003830:	2200      	movs	r2, #0
 8003832:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8003836:	f8c7 2184 	str.w	r2, [r7, #388]	@ 0x184
 800383a:	f04f 0200 	mov.w	r2, #0
 800383e:	f04f 0300 	mov.w	r3, #0
 8003842:	e9d7 8960 	ldrd	r8, r9, [r7, #384]	@ 0x180
 8003846:	464c      	mov	r4, r9
 8003848:	0223      	lsls	r3, r4, #8
 800384a:	46c4      	mov	ip, r8
 800384c:	ea43 631c 	orr.w	r3, r3, ip, lsr #24
 8003850:	4644      	mov	r4, r8
 8003852:	0222      	lsls	r2, r4, #8
 8003854:	ea40 0402 	orr.w	r4, r0, r2
 8003858:	f8c7 4178 	str.w	r4, [r7, #376]	@ 0x178
 800385c:	430b      	orrs	r3, r1
 800385e:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8003862:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	@ 0x178
 8003866:	e9c7 3488 	strd	r3, r4, [r7, #544]	@ 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800386a:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 800386e:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8003872:	1c9a      	adds	r2, r3, #2
 8003874:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8003878:	4413      	add	r3, r2
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	b2db      	uxtb	r3, r3
 800387e:	2200      	movs	r2, #0
 8003880:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 8003884:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
 8003888:	f04f 0200 	mov.w	r2, #0
 800388c:	f04f 0300 	mov.w	r3, #0
 8003890:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	@ 0x170
 8003894:	464c      	mov	r4, r9
 8003896:	0423      	lsls	r3, r4, #16
 8003898:	46c4      	mov	ip, r8
 800389a:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
 800389e:	4644      	mov	r4, r8
 80038a0:	0422      	lsls	r2, r4, #16
 80038a2:	ea40 0402 	orr.w	r4, r0, r2
 80038a6:	f8c7 4168 	str.w	r4, [r7, #360]	@ 0x168
 80038aa:	430b      	orrs	r3, r1
 80038ac:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 80038b0:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	@ 0x168
 80038b4:	e9c7 3488 	strd	r3, r4, [r7, #544]	@ 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80038b8:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 80038bc:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 80038c0:	1cda      	adds	r2, r3, #3
 80038c2:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 80038c6:	4413      	add	r3, r2
 80038c8:	781b      	ldrb	r3, [r3, #0]
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	2200      	movs	r2, #0
 80038ce:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 80038d2:	f8c7 2164 	str.w	r2, [r7, #356]	@ 0x164
 80038d6:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	@ 0x160
 80038da:	4623      	mov	r3, r4
 80038dc:	0a1b      	lsrs	r3, r3, #8
 80038de:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 80038e2:	4623      	mov	r3, r4
 80038e4:	061b      	lsls	r3, r3, #24
 80038e6:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 80038ea:	e9d7 3456 	ldrd	r3, r4, [r7, #344]	@ 0x158
 80038ee:	461a      	mov	r2, r3
 80038f0:	4302      	orrs	r2, r0
 80038f2:	f8c7 2150 	str.w	r2, [r7, #336]	@ 0x150
 80038f6:	4623      	mov	r3, r4
 80038f8:	430b      	orrs	r3, r1
 80038fa:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80038fe:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	@ 0x150
 8003902:	e9c7 3488 	strd	r3, r4, [r7, #544]	@ 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003906:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 800390a:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 800390e:	1d1a      	adds	r2, r3, #4
 8003910:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8003914:	4413      	add	r3, r2
 8003916:	781b      	ldrb	r3, [r3, #0]
 8003918:	b2db      	uxtb	r3, r3
 800391a:	2200      	movs	r2, #0
 800391c:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 8003920:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8003924:	f04f 0200 	mov.w	r2, #0
 8003928:	f04f 0300 	mov.w	r3, #0
 800392c:	f8d7 4148 	ldr.w	r4, [r7, #328]	@ 0x148
 8003930:	0023      	movs	r3, r4
 8003932:	2200      	movs	r2, #0
 8003934:	ea40 0402 	orr.w	r4, r0, r2
 8003938:	f8c7 4140 	str.w	r4, [r7, #320]	@ 0x140
 800393c:	430b      	orrs	r3, r1
 800393e:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8003942:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	@ 0x140
 8003946:	e9c7 3488 	strd	r3, r4, [r7, #544]	@ 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800394a:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 800394e:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8003952:	1d5a      	adds	r2, r3, #5
 8003954:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8003958:	4413      	add	r3, r2
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	b2db      	uxtb	r3, r3
 800395e:	2200      	movs	r2, #0
 8003960:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8003964:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 8003968:	f04f 0200 	mov.w	r2, #0
 800396c:	f04f 0300 	mov.w	r3, #0
 8003970:	f8d7 4138 	ldr.w	r4, [r7, #312]	@ 0x138
 8003974:	0223      	lsls	r3, r4, #8
 8003976:	2200      	movs	r2, #0
 8003978:	ea40 0402 	orr.w	r4, r0, r2
 800397c:	f8c7 4130 	str.w	r4, [r7, #304]	@ 0x130
 8003980:	430b      	orrs	r3, r1
 8003982:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8003986:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	@ 0x130
 800398a:	e9c7 3488 	strd	r3, r4, [r7, #544]	@ 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800398e:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 8003992:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8003996:	1d9a      	adds	r2, r3, #6
 8003998:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 800399c:	4413      	add	r3, r2
 800399e:	781b      	ldrb	r3, [r3, #0]
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	2200      	movs	r2, #0
 80039a4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80039a8:	f8c7 212c 	str.w	r2, [r7, #300]	@ 0x12c
 80039ac:	f04f 0200 	mov.w	r2, #0
 80039b0:	f04f 0300 	mov.w	r3, #0
 80039b4:	f8d7 4128 	ldr.w	r4, [r7, #296]	@ 0x128
 80039b8:	0423      	lsls	r3, r4, #16
 80039ba:	2200      	movs	r2, #0
 80039bc:	ea40 0402 	orr.w	r4, r0, r2
 80039c0:	f8c7 4120 	str.w	r4, [r7, #288]	@ 0x120
 80039c4:	430b      	orrs	r3, r1
 80039c6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80039ca:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	@ 0x120
 80039ce:	e9c7 3488 	strd	r3, r4, [r7, #544]	@ 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80039d2:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 80039d6:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 80039da:	1dda      	adds	r2, r3, #7
 80039dc:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 80039e0:	4413      	add	r3, r2
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	2200      	movs	r2, #0
 80039e8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80039ec:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 80039f0:	f04f 0200 	mov.w	r2, #0
 80039f4:	f04f 0300 	mov.w	r3, #0
 80039f8:	f8d7 4118 	ldr.w	r4, [r7, #280]	@ 0x118
 80039fc:	0623      	lsls	r3, r4, #24
 80039fe:	2200      	movs	r2, #0
 8003a00:	ea40 0402 	orr.w	r4, r0, r2
 8003a04:	f8c7 4110 	str.w	r4, [r7, #272]	@ 0x110
 8003a08:	430b      	orrs	r3, r1
 8003a0a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8003a0e:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	@ 0x110
 8003a12:	e9c7 3488 	strd	r3, r4, [r7, #544]	@ 0x220
      this->y = u_y.real;
 8003a16:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 8003a1a:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8003a1e:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8003a22:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8003a26:	3308      	adds	r3, #8
 8003a28:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8003a2c:	f04f 0200 	mov.w	r2, #0
 8003a30:	f04f 0300 	mov.w	r3, #0
 8003a34:	e9c7 2386 	strd	r2, r3, [r7, #536]	@ 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003a38:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
 8003a3c:	f8d7 2234 	ldr.w	r2, [r7, #564]	@ 0x234
 8003a40:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8003a44:	4413      	add	r3, r2
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003a50:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 8003a54:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	@ 0x108
 8003a58:	461a      	mov	r2, r3
 8003a5a:	4302      	orrs	r2, r0
 8003a5c:	f8c7 2100 	str.w	r2, [r7, #256]	@ 0x100
 8003a60:	4623      	mov	r3, r4
 8003a62:	430b      	orrs	r3, r1
 8003a64:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003a68:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	@ 0x100
 8003a6c:	e9c7 3486 	strd	r3, r4, [r7, #536]	@ 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003a70:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
 8003a74:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8003a78:	1c5a      	adds	r2, r3, #1
 8003a7a:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8003a7e:	4413      	add	r3, r2
 8003a80:	781b      	ldrb	r3, [r3, #0]
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	2200      	movs	r2, #0
 8003a86:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003a8a:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 8003a8e:	f04f 0200 	mov.w	r2, #0
 8003a92:	f04f 0300 	mov.w	r3, #0
 8003a96:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	@ 0xf8
 8003a9a:	464c      	mov	r4, r9
 8003a9c:	0223      	lsls	r3, r4, #8
 8003a9e:	46c4      	mov	ip, r8
 8003aa0:	ea43 631c 	orr.w	r3, r3, ip, lsr #24
 8003aa4:	4644      	mov	r4, r8
 8003aa6:	0222      	lsls	r2, r4, #8
 8003aa8:	ea40 0402 	orr.w	r4, r0, r2
 8003aac:	f8c7 40f0 	str.w	r4, [r7, #240]	@ 0xf0
 8003ab0:	430b      	orrs	r3, r1
 8003ab2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003ab6:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	@ 0xf0
 8003aba:	e9c7 3486 	strd	r3, r4, [r7, #536]	@ 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003abe:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
 8003ac2:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8003ac6:	1c9a      	adds	r2, r3, #2
 8003ac8:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8003acc:	4413      	add	r3, r2
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003ad8:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003adc:	f04f 0200 	mov.w	r2, #0
 8003ae0:	f04f 0300 	mov.w	r3, #0
 8003ae4:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8003ae8:	464c      	mov	r4, r9
 8003aea:	0423      	lsls	r3, r4, #16
 8003aec:	46c4      	mov	ip, r8
 8003aee:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
 8003af2:	4644      	mov	r4, r8
 8003af4:	0422      	lsls	r2, r4, #16
 8003af6:	ea40 0402 	orr.w	r4, r0, r2
 8003afa:	f8c7 40e0 	str.w	r4, [r7, #224]	@ 0xe0
 8003afe:	430b      	orrs	r3, r1
 8003b00:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003b04:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	@ 0xe0
 8003b08:	e9c7 3486 	strd	r3, r4, [r7, #536]	@ 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003b0c:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
 8003b10:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8003b14:	1cda      	adds	r2, r3, #3
 8003b16:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8003b1a:	4413      	add	r3, r2
 8003b1c:	781b      	ldrb	r3, [r3, #0]
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	2200      	movs	r2, #0
 8003b22:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003b26:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003b2a:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8003b2e:	4623      	mov	r3, r4
 8003b30:	0a1b      	lsrs	r3, r3, #8
 8003b32:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003b36:	4623      	mov	r3, r4
 8003b38:	061b      	lsls	r3, r3, #24
 8003b3a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003b3e:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	@ 0xd0
 8003b42:	461a      	mov	r2, r3
 8003b44:	4302      	orrs	r2, r0
 8003b46:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8003b4a:	4623      	mov	r3, r4
 8003b4c:	430b      	orrs	r3, r1
 8003b4e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003b52:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	@ 0xc8
 8003b56:	e9c7 3486 	strd	r3, r4, [r7, #536]	@ 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003b5a:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
 8003b5e:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8003b62:	1d1a      	adds	r2, r3, #4
 8003b64:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8003b68:	4413      	add	r3, r2
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003b74:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003b78:	f04f 0200 	mov.w	r2, #0
 8003b7c:	f04f 0300 	mov.w	r3, #0
 8003b80:	f8d7 40c0 	ldr.w	r4, [r7, #192]	@ 0xc0
 8003b84:	0023      	movs	r3, r4
 8003b86:	2200      	movs	r2, #0
 8003b88:	ea40 0402 	orr.w	r4, r0, r2
 8003b8c:	f8c7 40b8 	str.w	r4, [r7, #184]	@ 0xb8
 8003b90:	430b      	orrs	r3, r1
 8003b92:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003b96:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	@ 0xb8
 8003b9a:	e9c7 3486 	strd	r3, r4, [r7, #536]	@ 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003b9e:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
 8003ba2:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8003ba6:	1d5a      	adds	r2, r3, #5
 8003ba8:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8003bac:	4413      	add	r3, r2
 8003bae:	781b      	ldrb	r3, [r3, #0]
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003bb8:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8003bbc:	f04f 0200 	mov.w	r2, #0
 8003bc0:	f04f 0300 	mov.w	r3, #0
 8003bc4:	f8d7 40b0 	ldr.w	r4, [r7, #176]	@ 0xb0
 8003bc8:	0223      	lsls	r3, r4, #8
 8003bca:	2200      	movs	r2, #0
 8003bcc:	ea40 0402 	orr.w	r4, r0, r2
 8003bd0:	f8c7 40a8 	str.w	r4, [r7, #168]	@ 0xa8
 8003bd4:	430b      	orrs	r3, r1
 8003bd6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003bda:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	@ 0xa8
 8003bde:	e9c7 3486 	strd	r3, r4, [r7, #536]	@ 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003be2:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
 8003be6:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8003bea:	1d9a      	adds	r2, r3, #6
 8003bec:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8003bf0:	4413      	add	r3, r2
 8003bf2:	781b      	ldrb	r3, [r3, #0]
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003bfc:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003c00:	f04f 0200 	mov.w	r2, #0
 8003c04:	f04f 0300 	mov.w	r3, #0
 8003c08:	f8d7 40a0 	ldr.w	r4, [r7, #160]	@ 0xa0
 8003c0c:	0423      	lsls	r3, r4, #16
 8003c0e:	2200      	movs	r2, #0
 8003c10:	ea40 0402 	orr.w	r4, r0, r2
 8003c14:	f8c7 4098 	str.w	r4, [r7, #152]	@ 0x98
 8003c18:	430b      	orrs	r3, r1
 8003c1a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003c1e:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	@ 0x98
 8003c22:	e9c7 3486 	strd	r3, r4, [r7, #536]	@ 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003c26:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
 8003c2a:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8003c2e:	1dda      	adds	r2, r3, #7
 8003c30:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8003c34:	4413      	add	r3, r2
 8003c36:	781b      	ldrb	r3, [r3, #0]
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003c40:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003c44:	f04f 0200 	mov.w	r2, #0
 8003c48:	f04f 0300 	mov.w	r3, #0
 8003c4c:	f8d7 4090 	ldr.w	r4, [r7, #144]	@ 0x90
 8003c50:	0623      	lsls	r3, r4, #24
 8003c52:	2200      	movs	r2, #0
 8003c54:	ea40 0402 	orr.w	r4, r0, r2
 8003c58:	f8c7 4088 	str.w	r4, [r7, #136]	@ 0x88
 8003c5c:	430b      	orrs	r3, r1
 8003c5e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003c62:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	@ 0x88
 8003c66:	e9c7 3486 	strd	r3, r4, [r7, #536]	@ 0x218
      this->z = u_z.real;
 8003c6a:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
 8003c6e:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8003c72:	e9c3 0106 	strd	r0, r1, [r3, #24]
      offset += sizeof(this->z);
 8003c76:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8003c7a:	3308      	adds	r3, #8
 8003c7c:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
      union {
        double real;
        uint64_t base;
      } u_w;
      u_w.base = 0;
 8003c80:	f04f 0200 	mov.w	r2, #0
 8003c84:	f04f 0300 	mov.w	r3, #0
 8003c88:	e9c7 2384 	strd	r2, r3, [r7, #528]	@ 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003c8c:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	@ 0x210
 8003c90:	f8d7 2234 	ldr.w	r2, [r7, #564]	@ 0x234
 8003c94:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8003c98:	4413      	add	r3, r2
 8003c9a:	781b      	ldrb	r3, [r3, #0]
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003ca4:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003ca8:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	@ 0x80
 8003cac:	461a      	mov	r2, r3
 8003cae:	4302      	orrs	r2, r0
 8003cb0:	67ba      	str	r2, [r7, #120]	@ 0x78
 8003cb2:	4623      	mov	r3, r4
 8003cb4:	430b      	orrs	r3, r1
 8003cb6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003cb8:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	@ 0x78
 8003cbc:	e9c7 3484 	strd	r3, r4, [r7, #528]	@ 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003cc0:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	@ 0x210
 8003cc4:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8003cc8:	1c5a      	adds	r2, r3, #1
 8003cca:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8003cce:	4413      	add	r3, r2
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	673b      	str	r3, [r7, #112]	@ 0x70
 8003cd8:	677a      	str	r2, [r7, #116]	@ 0x74
 8003cda:	f04f 0200 	mov.w	r2, #0
 8003cde:	f04f 0300 	mov.w	r3, #0
 8003ce2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003ce6:	464c      	mov	r4, r9
 8003ce8:	0223      	lsls	r3, r4, #8
 8003cea:	46c4      	mov	ip, r8
 8003cec:	ea43 631c 	orr.w	r3, r3, ip, lsr #24
 8003cf0:	4644      	mov	r4, r8
 8003cf2:	0222      	lsls	r2, r4, #8
 8003cf4:	ea40 0402 	orr.w	r4, r0, r2
 8003cf8:	66bc      	str	r4, [r7, #104]	@ 0x68
 8003cfa:	430b      	orrs	r3, r1
 8003cfc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003cfe:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	@ 0x68
 8003d02:	e9c7 3484 	strd	r3, r4, [r7, #528]	@ 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003d06:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	@ 0x210
 8003d0a:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8003d0e:	1c9a      	adds	r2, r3, #2
 8003d10:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8003d14:	4413      	add	r3, r2
 8003d16:	781b      	ldrb	r3, [r3, #0]
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	663b      	str	r3, [r7, #96]	@ 0x60
 8003d1e:	667a      	str	r2, [r7, #100]	@ 0x64
 8003d20:	f04f 0200 	mov.w	r2, #0
 8003d24:	f04f 0300 	mov.w	r3, #0
 8003d28:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003d2c:	464c      	mov	r4, r9
 8003d2e:	0423      	lsls	r3, r4, #16
 8003d30:	46c4      	mov	ip, r8
 8003d32:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
 8003d36:	4644      	mov	r4, r8
 8003d38:	0422      	lsls	r2, r4, #16
 8003d3a:	ea40 0402 	orr.w	r4, r0, r2
 8003d3e:	65bc      	str	r4, [r7, #88]	@ 0x58
 8003d40:	430b      	orrs	r3, r1
 8003d42:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003d44:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	@ 0x58
 8003d48:	e9c7 3484 	strd	r3, r4, [r7, #528]	@ 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003d4c:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	@ 0x210
 8003d50:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8003d54:	1cda      	adds	r2, r3, #3
 8003d56:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8003d5a:	4413      	add	r3, r2
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	2200      	movs	r2, #0
 8003d62:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d64:	657a      	str	r2, [r7, #84]	@ 0x54
 8003d66:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8003d6a:	4623      	mov	r3, r4
 8003d6c:	0a1b      	lsrs	r3, r3, #8
 8003d6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d70:	4623      	mov	r3, r4
 8003d72:	061b      	lsls	r3, r3, #24
 8003d74:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d76:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	4302      	orrs	r2, r0
 8003d7e:	643a      	str	r2, [r7, #64]	@ 0x40
 8003d80:	4623      	mov	r3, r4
 8003d82:	430b      	orrs	r3, r1
 8003d84:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d86:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8003d8a:	e9c7 3484 	strd	r3, r4, [r7, #528]	@ 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003d8e:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	@ 0x210
 8003d92:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8003d96:	1d1a      	adds	r2, r3, #4
 8003d98:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8003d9c:	4413      	add	r3, r2
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	2200      	movs	r2, #0
 8003da4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003da6:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003da8:	f04f 0200 	mov.w	r2, #0
 8003dac:	f04f 0300 	mov.w	r3, #0
 8003db0:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 8003db2:	0023      	movs	r3, r4
 8003db4:	2200      	movs	r2, #0
 8003db6:	ea40 0402 	orr.w	r4, r0, r2
 8003dba:	633c      	str	r4, [r7, #48]	@ 0x30
 8003dbc:	430b      	orrs	r3, r1
 8003dbe:	637b      	str	r3, [r7, #52]	@ 0x34
 8003dc0:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8003dc4:	e9c7 3484 	strd	r3, r4, [r7, #528]	@ 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003dc8:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	@ 0x210
 8003dcc:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8003dd0:	1d5a      	adds	r2, r3, #5
 8003dd2:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8003dd6:	4413      	add	r3, r2
 8003dd8:	781b      	ldrb	r3, [r3, #0]
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	2200      	movs	r2, #0
 8003dde:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003de0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003de2:	f04f 0200 	mov.w	r2, #0
 8003de6:	f04f 0300 	mov.w	r3, #0
 8003dea:	6abc      	ldr	r4, [r7, #40]	@ 0x28
 8003dec:	0223      	lsls	r3, r4, #8
 8003dee:	2200      	movs	r2, #0
 8003df0:	ea40 0402 	orr.w	r4, r0, r2
 8003df4:	623c      	str	r4, [r7, #32]
 8003df6:	430b      	orrs	r3, r1
 8003df8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003dfa:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003dfe:	e9c7 3484 	strd	r3, r4, [r7, #528]	@ 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003e02:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	@ 0x210
 8003e06:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8003e0a:	3306      	adds	r3, #6
 8003e0c:	f8d7 2208 	ldr.w	r2, [r7, #520]	@ 0x208
 8003e10:	4413      	add	r3, r2
 8003e12:	781b      	ldrb	r3, [r3, #0]
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	2200      	movs	r2, #0
 8003e18:	61bb      	str	r3, [r7, #24]
 8003e1a:	61fa      	str	r2, [r7, #28]
 8003e1c:	f04f 0200 	mov.w	r2, #0
 8003e20:	f04f 0300 	mov.w	r3, #0
 8003e24:	69bc      	ldr	r4, [r7, #24]
 8003e26:	0423      	lsls	r3, r4, #16
 8003e28:	2200      	movs	r2, #0
 8003e2a:	ea40 0402 	orr.w	r4, r0, r2
 8003e2e:	613c      	str	r4, [r7, #16]
 8003e30:	430b      	orrs	r3, r1
 8003e32:	617b      	str	r3, [r7, #20]
 8003e34:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003e38:	e9c7 3484 	strd	r3, r4, [r7, #528]	@ 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003e3c:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	@ 0x210
 8003e40:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8003e44:	3307      	adds	r3, #7
 8003e46:	f8d7 2208 	ldr.w	r2, [r7, #520]	@ 0x208
 8003e4a:	4413      	add	r3, r2
 8003e4c:	781b      	ldrb	r3, [r3, #0]
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	2200      	movs	r2, #0
 8003e52:	60bb      	str	r3, [r7, #8]
 8003e54:	60fa      	str	r2, [r7, #12]
 8003e56:	f04f 0200 	mov.w	r2, #0
 8003e5a:	f04f 0300 	mov.w	r3, #0
 8003e5e:	68bc      	ldr	r4, [r7, #8]
 8003e60:	0623      	lsls	r3, r4, #24
 8003e62:	2200      	movs	r2, #0
 8003e64:	ea40 0402 	orr.w	r4, r0, r2
 8003e68:	603c      	str	r4, [r7, #0]
 8003e6a:	430b      	orrs	r3, r1
 8003e6c:	607b      	str	r3, [r7, #4]
 8003e6e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003e72:	e9c7 3484 	strd	r3, r4, [r7, #528]	@ 0x210
      this->w = u_w.real;
 8003e76:	e9d7 2384 	ldrd	r2, r3, [r7, #528]	@ 0x210
 8003e7a:	f8d7 120c 	ldr.w	r1, [r7, #524]	@ 0x20c
 8003e7e:	e9c1 2308 	strd	r2, r3, [r1, #32]
      offset += sizeof(this->w);
 8003e82:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8003e86:	3308      	adds	r3, #8
 8003e88:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
     return offset;
 8003e8c:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
    }
 8003e90:	4618      	mov	r0, r3
 8003e92:	f507 770f 	add.w	r7, r7, #572	@ 0x23c
 8003e96:	46bd      	mov	sp, r7
 8003e98:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003e9c:	4770      	bx	lr
	...

08003ea0 <_ZN13geometry_msgs10Quaternion7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Quaternion"; };
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	4b02      	ldr	r3, [pc, #8]	@ (8003eb4 <_ZN13geometry_msgs10Quaternion7getTypeEv+0x14>)
 8003eaa:	4618      	mov	r0, r3
 8003eac:	370c      	adds	r7, #12
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bc80      	pop	{r7}
 8003eb2:	4770      	bx	lr
 8003eb4:	08010960 	.word	0x08010960

08003eb8 <_ZN13geometry_msgs10Quaternion6getMD5Ev>:
    virtual const char * getMD5() override { return "a779879fadf0160734f906b8c19c7004"; };
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	4b02      	ldr	r3, [pc, #8]	@ (8003ecc <_ZN13geometry_msgs10Quaternion6getMD5Ev+0x14>)
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	370c      	adds	r7, #12
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bc80      	pop	{r7}
 8003eca:	4770      	bx	lr
 8003ecc:	0801097c 	.word	0x0801097c

08003ed0 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b082      	sub	sp, #8
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	4618      	mov	r0, r3
 8003edc:	f7fd fe62 	bl	8001ba4 <_ZN3ros3MsgC1Ev>
 8003ee0:	4a0e      	ldr	r2, [pc, #56]	@ (8003f1c <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	601a      	str	r2, [r3, #0]
      x(0),
 8003ee6:	6879      	ldr	r1, [r7, #4]
 8003ee8:	f04f 0200 	mov.w	r2, #0
 8003eec:	f04f 0300 	mov.w	r3, #0
 8003ef0:	e9c1 2302 	strd	r2, r3, [r1, #8]
      y(0),
 8003ef4:	6879      	ldr	r1, [r7, #4]
 8003ef6:	f04f 0200 	mov.w	r2, #0
 8003efa:	f04f 0300 	mov.w	r3, #0
 8003efe:	e9c1 2304 	strd	r2, r3, [r1, #16]
      z(0)
 8003f02:	6879      	ldr	r1, [r7, #4]
 8003f04:	f04f 0200 	mov.w	r2, #0
 8003f08:	f04f 0300 	mov.w	r3, #0
 8003f0c:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	4618      	mov	r0, r3
 8003f14:	3708      	adds	r7, #8
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	08010ea0 	.word	0x08010ea0

08003f20 <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8003f20:	b480      	push	{r7}
 8003f22:	b08b      	sub	sp, #44	@ 0x2c
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	627b      	str	r3, [r7, #36]	@ 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003f34:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8003f38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f3c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003f3e:	6838      	ldr	r0, [r7, #0]
 8003f40:	4401      	add	r1, r0
 8003f42:	b2d3      	uxtb	r3, r2
 8003f44:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 8003f46:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003f4a:	f04f 0200 	mov.w	r2, #0
 8003f4e:	f04f 0300 	mov.w	r3, #0
 8003f52:	0a02      	lsrs	r2, r0, #8
 8003f54:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003f58:	0a0b      	lsrs	r3, r1, #8
 8003f5a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003f5c:	3101      	adds	r1, #1
 8003f5e:	6838      	ldr	r0, [r7, #0]
 8003f60:	4401      	add	r1, r0
 8003f62:	b2d3      	uxtb	r3, r2
 8003f64:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 8003f66:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003f6a:	f04f 0200 	mov.w	r2, #0
 8003f6e:	f04f 0300 	mov.w	r3, #0
 8003f72:	0c02      	lsrs	r2, r0, #16
 8003f74:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003f78:	0c0b      	lsrs	r3, r1, #16
 8003f7a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003f7c:	3102      	adds	r1, #2
 8003f7e:	6838      	ldr	r0, [r7, #0]
 8003f80:	4401      	add	r1, r0
 8003f82:	b2d3      	uxtb	r3, r2
 8003f84:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 8003f86:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003f8a:	f04f 0200 	mov.w	r2, #0
 8003f8e:	f04f 0300 	mov.w	r3, #0
 8003f92:	0e02      	lsrs	r2, r0, #24
 8003f94:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003f98:	0e0b      	lsrs	r3, r1, #24
 8003f9a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003f9c:	3103      	adds	r1, #3
 8003f9e:	6838      	ldr	r0, [r7, #0]
 8003fa0:	4401      	add	r1, r0
 8003fa2:	b2d3      	uxtb	r3, r2
 8003fa4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 8003fa6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003faa:	f04f 0200 	mov.w	r2, #0
 8003fae:	f04f 0300 	mov.w	r3, #0
 8003fb2:	000a      	movs	r2, r1
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003fb8:	3104      	adds	r1, #4
 8003fba:	6838      	ldr	r0, [r7, #0]
 8003fbc:	4401      	add	r1, r0
 8003fbe:	b2d3      	uxtb	r3, r2
 8003fc0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 8003fc2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003fc6:	f04f 0200 	mov.w	r2, #0
 8003fca:	f04f 0300 	mov.w	r3, #0
 8003fce:	0a0a      	lsrs	r2, r1, #8
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003fd4:	3105      	adds	r1, #5
 8003fd6:	6838      	ldr	r0, [r7, #0]
 8003fd8:	4401      	add	r1, r0
 8003fda:	b2d3      	uxtb	r3, r2
 8003fdc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8003fde:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003fe2:	f04f 0200 	mov.w	r2, #0
 8003fe6:	f04f 0300 	mov.w	r3, #0
 8003fea:	0c0a      	lsrs	r2, r1, #16
 8003fec:	2300      	movs	r3, #0
 8003fee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003ff0:	3106      	adds	r1, #6
 8003ff2:	6838      	ldr	r0, [r7, #0]
 8003ff4:	4401      	add	r1, r0
 8003ff6:	b2d3      	uxtb	r3, r2
 8003ff8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8003ffa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003ffe:	f04f 0200 	mov.w	r2, #0
 8004002:	f04f 0300 	mov.w	r3, #0
 8004006:	0e0a      	lsrs	r2, r1, #24
 8004008:	2300      	movs	r3, #0
 800400a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800400c:	3107      	adds	r1, #7
 800400e:	6838      	ldr	r0, [r7, #0]
 8004010:	4401      	add	r1, r0
 8004012:	b2d3      	uxtb	r3, r2
 8004014:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 8004016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004018:	3308      	adds	r3, #8
 800401a:	627b      	str	r3, [r7, #36]	@ 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004022:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 8004026:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800402a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800402c:	6838      	ldr	r0, [r7, #0]
 800402e:	4401      	add	r1, r0
 8004030:	b2d3      	uxtb	r3, r2
 8004032:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8004034:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004038:	f04f 0200 	mov.w	r2, #0
 800403c:	f04f 0300 	mov.w	r3, #0
 8004040:	0a02      	lsrs	r2, r0, #8
 8004042:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8004046:	0a0b      	lsrs	r3, r1, #8
 8004048:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800404a:	3101      	adds	r1, #1
 800404c:	6838      	ldr	r0, [r7, #0]
 800404e:	4401      	add	r1, r0
 8004050:	b2d3      	uxtb	r3, r2
 8004052:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8004054:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004058:	f04f 0200 	mov.w	r2, #0
 800405c:	f04f 0300 	mov.w	r3, #0
 8004060:	0c02      	lsrs	r2, r0, #16
 8004062:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004066:	0c0b      	lsrs	r3, r1, #16
 8004068:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800406a:	3102      	adds	r1, #2
 800406c:	6838      	ldr	r0, [r7, #0]
 800406e:	4401      	add	r1, r0
 8004070:	b2d3      	uxtb	r3, r2
 8004072:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8004074:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004078:	f04f 0200 	mov.w	r2, #0
 800407c:	f04f 0300 	mov.w	r3, #0
 8004080:	0e02      	lsrs	r2, r0, #24
 8004082:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004086:	0e0b      	lsrs	r3, r1, #24
 8004088:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800408a:	3103      	adds	r1, #3
 800408c:	6838      	ldr	r0, [r7, #0]
 800408e:	4401      	add	r1, r0
 8004090:	b2d3      	uxtb	r3, r2
 8004092:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8004094:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004098:	f04f 0200 	mov.w	r2, #0
 800409c:	f04f 0300 	mov.w	r3, #0
 80040a0:	000a      	movs	r2, r1
 80040a2:	2300      	movs	r3, #0
 80040a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80040a6:	3104      	adds	r1, #4
 80040a8:	6838      	ldr	r0, [r7, #0]
 80040aa:	4401      	add	r1, r0
 80040ac:	b2d3      	uxtb	r3, r2
 80040ae:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 80040b0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80040b4:	f04f 0200 	mov.w	r2, #0
 80040b8:	f04f 0300 	mov.w	r3, #0
 80040bc:	0a0a      	lsrs	r2, r1, #8
 80040be:	2300      	movs	r3, #0
 80040c0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80040c2:	3105      	adds	r1, #5
 80040c4:	6838      	ldr	r0, [r7, #0]
 80040c6:	4401      	add	r1, r0
 80040c8:	b2d3      	uxtb	r3, r2
 80040ca:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 80040cc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80040d0:	f04f 0200 	mov.w	r2, #0
 80040d4:	f04f 0300 	mov.w	r3, #0
 80040d8:	0c0a      	lsrs	r2, r1, #16
 80040da:	2300      	movs	r3, #0
 80040dc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80040de:	3106      	adds	r1, #6
 80040e0:	6838      	ldr	r0, [r7, #0]
 80040e2:	4401      	add	r1, r0
 80040e4:	b2d3      	uxtb	r3, r2
 80040e6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 80040e8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80040ec:	f04f 0200 	mov.w	r2, #0
 80040f0:	f04f 0300 	mov.w	r3, #0
 80040f4:	0e0a      	lsrs	r2, r1, #24
 80040f6:	2300      	movs	r3, #0
 80040f8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80040fa:	3107      	adds	r1, #7
 80040fc:	6838      	ldr	r0, [r7, #0]
 80040fe:	4401      	add	r1, r0
 8004100:	b2d3      	uxtb	r3, r2
 8004102:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 8004104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004106:	3308      	adds	r3, #8
 8004108:	627b      	str	r3, [r7, #36]	@ 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8004110:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8004114:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004118:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800411a:	6838      	ldr	r0, [r7, #0]
 800411c:	4401      	add	r1, r0
 800411e:	b2d3      	uxtb	r3, r2
 8004120:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8004122:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004126:	f04f 0200 	mov.w	r2, #0
 800412a:	f04f 0300 	mov.w	r3, #0
 800412e:	0a02      	lsrs	r2, r0, #8
 8004130:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8004134:	0a0b      	lsrs	r3, r1, #8
 8004136:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004138:	3101      	adds	r1, #1
 800413a:	6838      	ldr	r0, [r7, #0]
 800413c:	4401      	add	r1, r0
 800413e:	b2d3      	uxtb	r3, r2
 8004140:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8004142:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004146:	f04f 0200 	mov.w	r2, #0
 800414a:	f04f 0300 	mov.w	r3, #0
 800414e:	0c02      	lsrs	r2, r0, #16
 8004150:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004154:	0c0b      	lsrs	r3, r1, #16
 8004156:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004158:	3102      	adds	r1, #2
 800415a:	6838      	ldr	r0, [r7, #0]
 800415c:	4401      	add	r1, r0
 800415e:	b2d3      	uxtb	r3, r2
 8004160:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8004162:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004166:	f04f 0200 	mov.w	r2, #0
 800416a:	f04f 0300 	mov.w	r3, #0
 800416e:	0e02      	lsrs	r2, r0, #24
 8004170:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004174:	0e0b      	lsrs	r3, r1, #24
 8004176:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004178:	3103      	adds	r1, #3
 800417a:	6838      	ldr	r0, [r7, #0]
 800417c:	4401      	add	r1, r0
 800417e:	b2d3      	uxtb	r3, r2
 8004180:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8004182:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004186:	f04f 0200 	mov.w	r2, #0
 800418a:	f04f 0300 	mov.w	r3, #0
 800418e:	000a      	movs	r2, r1
 8004190:	2300      	movs	r3, #0
 8004192:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004194:	3104      	adds	r1, #4
 8004196:	6838      	ldr	r0, [r7, #0]
 8004198:	4401      	add	r1, r0
 800419a:	b2d3      	uxtb	r3, r2
 800419c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 800419e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80041a2:	f04f 0200 	mov.w	r2, #0
 80041a6:	f04f 0300 	mov.w	r3, #0
 80041aa:	0a0a      	lsrs	r2, r1, #8
 80041ac:	2300      	movs	r3, #0
 80041ae:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80041b0:	3105      	adds	r1, #5
 80041b2:	6838      	ldr	r0, [r7, #0]
 80041b4:	4401      	add	r1, r0
 80041b6:	b2d3      	uxtb	r3, r2
 80041b8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 80041ba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80041be:	f04f 0200 	mov.w	r2, #0
 80041c2:	f04f 0300 	mov.w	r3, #0
 80041c6:	0c0a      	lsrs	r2, r1, #16
 80041c8:	2300      	movs	r3, #0
 80041ca:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80041cc:	3106      	adds	r1, #6
 80041ce:	6838      	ldr	r0, [r7, #0]
 80041d0:	4401      	add	r1, r0
 80041d2:	b2d3      	uxtb	r3, r2
 80041d4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 80041d6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80041da:	f04f 0200 	mov.w	r2, #0
 80041de:	f04f 0300 	mov.w	r3, #0
 80041e2:	0e0a      	lsrs	r2, r1, #24
 80041e4:	2300      	movs	r3, #0
 80041e6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80041e8:	3107      	adds	r1, #7
 80041ea:	6838      	ldr	r0, [r7, #0]
 80041ec:	4401      	add	r1, r0
 80041ee:	b2d3      	uxtb	r3, r2
 80041f0:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 80041f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041f4:	3308      	adds	r3, #8
 80041f6:	627b      	str	r3, [r7, #36]	@ 0x24
      return offset;
 80041f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 80041fa:	4618      	mov	r0, r3
 80041fc:	372c      	adds	r7, #44	@ 0x2c
 80041fe:	46bd      	mov	sp, r7
 8004200:	bc80      	pop	{r7}
 8004202:	4770      	bx	lr

08004204 <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8004204:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8004208:	b0eb      	sub	sp, #428	@ 0x1ac
 800420a:	af00      	add	r7, sp, #0
 800420c:	f8c7 0184 	str.w	r0, [r7, #388]	@ 0x184
 8004210:	f8c7 1180 	str.w	r1, [r7, #384]	@ 0x180
    {
      int offset = 0;
 8004214:	2300      	movs	r3, #0
 8004216:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 800421a:	f04f 0200 	mov.w	r2, #0
 800421e:	f04f 0300 	mov.w	r3, #0
 8004222:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8004226:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 800422a:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 800422e:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004232:	4413      	add	r3, r2
 8004234:	781b      	ldrb	r3, [r3, #0]
 8004236:	b2db      	uxtb	r3, r3
 8004238:	2200      	movs	r2, #0
 800423a:	461c      	mov	r4, r3
 800423c:	4615      	mov	r5, r2
 800423e:	ea40 0804 	orr.w	r8, r0, r4
 8004242:	ea41 0905 	orr.w	r9, r1, r5
 8004246:	e9c7 8966 	strd	r8, r9, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800424a:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 800424e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8004252:	1c5a      	adds	r2, r3, #1
 8004254:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004258:	4413      	add	r3, r2
 800425a:	781b      	ldrb	r3, [r3, #0]
 800425c:	b2db      	uxtb	r3, r3
 800425e:	2200      	movs	r2, #0
 8004260:	469a      	mov	sl, r3
 8004262:	4693      	mov	fp, r2
 8004264:	f04f 0200 	mov.w	r2, #0
 8004268:	f04f 0300 	mov.w	r3, #0
 800426c:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8004270:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8004274:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8004278:	ea40 0402 	orr.w	r4, r0, r2
 800427c:	f8c7 4178 	str.w	r4, [r7, #376]	@ 0x178
 8004280:	430b      	orrs	r3, r1
 8004282:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8004286:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	@ 0x178
 800428a:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800428e:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8004292:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8004296:	1c9a      	adds	r2, r3, #2
 8004298:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800429c:	4413      	add	r3, r2
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	2200      	movs	r2, #0
 80042a4:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 80042a8:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
 80042ac:	f04f 0200 	mov.w	r2, #0
 80042b0:	f04f 0300 	mov.w	r3, #0
 80042b4:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	@ 0x170
 80042b8:	464c      	mov	r4, r9
 80042ba:	0423      	lsls	r3, r4, #16
 80042bc:	46c4      	mov	ip, r8
 80042be:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
 80042c2:	4644      	mov	r4, r8
 80042c4:	0422      	lsls	r2, r4, #16
 80042c6:	ea40 0402 	orr.w	r4, r0, r2
 80042ca:	f8c7 4168 	str.w	r4, [r7, #360]	@ 0x168
 80042ce:	430b      	orrs	r3, r1
 80042d0:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 80042d4:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	@ 0x168
 80042d8:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80042dc:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 80042e0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80042e4:	1cda      	adds	r2, r3, #3
 80042e6:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80042ea:	4413      	add	r3, r2
 80042ec:	781b      	ldrb	r3, [r3, #0]
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	2200      	movs	r2, #0
 80042f2:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 80042f6:	f8c7 2164 	str.w	r2, [r7, #356]	@ 0x164
 80042fa:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	@ 0x160
 80042fe:	4623      	mov	r3, r4
 8004300:	0a1b      	lsrs	r3, r3, #8
 8004302:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8004306:	4623      	mov	r3, r4
 8004308:	061b      	lsls	r3, r3, #24
 800430a:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 800430e:	e9d7 3456 	ldrd	r3, r4, [r7, #344]	@ 0x158
 8004312:	461a      	mov	r2, r3
 8004314:	4302      	orrs	r2, r0
 8004316:	f8c7 2150 	str.w	r2, [r7, #336]	@ 0x150
 800431a:	4623      	mov	r3, r4
 800431c:	430b      	orrs	r3, r1
 800431e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8004322:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	@ 0x150
 8004326:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800432a:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 800432e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8004332:	1d1a      	adds	r2, r3, #4
 8004334:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004338:	4413      	add	r3, r2
 800433a:	781b      	ldrb	r3, [r3, #0]
 800433c:	b2db      	uxtb	r3, r3
 800433e:	2200      	movs	r2, #0
 8004340:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 8004344:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8004348:	f04f 0200 	mov.w	r2, #0
 800434c:	f04f 0300 	mov.w	r3, #0
 8004350:	f8d7 4148 	ldr.w	r4, [r7, #328]	@ 0x148
 8004354:	0023      	movs	r3, r4
 8004356:	2200      	movs	r2, #0
 8004358:	ea40 0402 	orr.w	r4, r0, r2
 800435c:	f8c7 4140 	str.w	r4, [r7, #320]	@ 0x140
 8004360:	430b      	orrs	r3, r1
 8004362:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8004366:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	@ 0x140
 800436a:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800436e:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8004372:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8004376:	1d5a      	adds	r2, r3, #5
 8004378:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800437c:	4413      	add	r3, r2
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	b2db      	uxtb	r3, r3
 8004382:	2200      	movs	r2, #0
 8004384:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8004388:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 800438c:	f04f 0200 	mov.w	r2, #0
 8004390:	f04f 0300 	mov.w	r3, #0
 8004394:	f8d7 4138 	ldr.w	r4, [r7, #312]	@ 0x138
 8004398:	0223      	lsls	r3, r4, #8
 800439a:	2200      	movs	r2, #0
 800439c:	ea40 0402 	orr.w	r4, r0, r2
 80043a0:	f8c7 4130 	str.w	r4, [r7, #304]	@ 0x130
 80043a4:	430b      	orrs	r3, r1
 80043a6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 80043aa:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	@ 0x130
 80043ae:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80043b2:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 80043b6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80043ba:	1d9a      	adds	r2, r3, #6
 80043bc:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80043c0:	4413      	add	r3, r2
 80043c2:	781b      	ldrb	r3, [r3, #0]
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	2200      	movs	r2, #0
 80043c8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80043cc:	f8c7 212c 	str.w	r2, [r7, #300]	@ 0x12c
 80043d0:	f04f 0200 	mov.w	r2, #0
 80043d4:	f04f 0300 	mov.w	r3, #0
 80043d8:	f8d7 4128 	ldr.w	r4, [r7, #296]	@ 0x128
 80043dc:	0423      	lsls	r3, r4, #16
 80043de:	2200      	movs	r2, #0
 80043e0:	ea40 0402 	orr.w	r4, r0, r2
 80043e4:	f8c7 4120 	str.w	r4, [r7, #288]	@ 0x120
 80043e8:	430b      	orrs	r3, r1
 80043ea:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80043ee:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	@ 0x120
 80043f2:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80043f6:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 80043fa:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80043fe:	1dda      	adds	r2, r3, #7
 8004400:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004404:	4413      	add	r3, r2
 8004406:	781b      	ldrb	r3, [r3, #0]
 8004408:	b2db      	uxtb	r3, r3
 800440a:	2200      	movs	r2, #0
 800440c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8004410:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8004414:	f04f 0200 	mov.w	r2, #0
 8004418:	f04f 0300 	mov.w	r3, #0
 800441c:	f8d7 4118 	ldr.w	r4, [r7, #280]	@ 0x118
 8004420:	0623      	lsls	r3, r4, #24
 8004422:	2200      	movs	r2, #0
 8004424:	ea40 0402 	orr.w	r4, r0, r2
 8004428:	f8c7 4110 	str.w	r4, [r7, #272]	@ 0x110
 800442c:	430b      	orrs	r3, r1
 800442e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8004432:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	@ 0x110
 8004436:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      this->x = u_x.real;
 800443a:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 800443e:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8004442:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 8004446:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 800444a:	3308      	adds	r3, #8
 800444c:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8004450:	f04f 0200 	mov.w	r2, #0
 8004454:	f04f 0300 	mov.w	r3, #0
 8004458:	e9c7 2364 	strd	r2, r3, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800445c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8004460:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 8004464:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004468:	4413      	add	r3, r2
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	b2db      	uxtb	r3, r3
 800446e:	2200      	movs	r2, #0
 8004470:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8004474:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 8004478:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	@ 0x108
 800447c:	461a      	mov	r2, r3
 800447e:	4302      	orrs	r2, r0
 8004480:	f8c7 2100 	str.w	r2, [r7, #256]	@ 0x100
 8004484:	4623      	mov	r3, r4
 8004486:	430b      	orrs	r3, r1
 8004488:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800448c:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	@ 0x100
 8004490:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004494:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8004498:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 800449c:	1c5a      	adds	r2, r3, #1
 800449e:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80044a2:	4413      	add	r3, r2
 80044a4:	781b      	ldrb	r3, [r3, #0]
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	2200      	movs	r2, #0
 80044aa:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80044ae:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 80044b2:	f04f 0200 	mov.w	r2, #0
 80044b6:	f04f 0300 	mov.w	r3, #0
 80044ba:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	@ 0xf8
 80044be:	464c      	mov	r4, r9
 80044c0:	0223      	lsls	r3, r4, #8
 80044c2:	46c4      	mov	ip, r8
 80044c4:	ea43 631c 	orr.w	r3, r3, ip, lsr #24
 80044c8:	4644      	mov	r4, r8
 80044ca:	0222      	lsls	r2, r4, #8
 80044cc:	ea40 0402 	orr.w	r4, r0, r2
 80044d0:	f8c7 40f0 	str.w	r4, [r7, #240]	@ 0xf0
 80044d4:	430b      	orrs	r3, r1
 80044d6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80044da:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	@ 0xf0
 80044de:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80044e2:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 80044e6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80044ea:	1c9a      	adds	r2, r3, #2
 80044ec:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80044f0:	4413      	add	r3, r2
 80044f2:	781b      	ldrb	r3, [r3, #0]
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	2200      	movs	r2, #0
 80044f8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80044fc:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004500:	f04f 0200 	mov.w	r2, #0
 8004504:	f04f 0300 	mov.w	r3, #0
 8004508:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 800450c:	464c      	mov	r4, r9
 800450e:	0423      	lsls	r3, r4, #16
 8004510:	46c4      	mov	ip, r8
 8004512:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
 8004516:	4644      	mov	r4, r8
 8004518:	0422      	lsls	r2, r4, #16
 800451a:	ea40 0402 	orr.w	r4, r0, r2
 800451e:	f8c7 40e0 	str.w	r4, [r7, #224]	@ 0xe0
 8004522:	430b      	orrs	r3, r1
 8004524:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004528:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	@ 0xe0
 800452c:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004530:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8004534:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8004538:	1cda      	adds	r2, r3, #3
 800453a:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800453e:	4413      	add	r3, r2
 8004540:	781b      	ldrb	r3, [r3, #0]
 8004542:	b2db      	uxtb	r3, r3
 8004544:	2200      	movs	r2, #0
 8004546:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800454a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800454e:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8004552:	4623      	mov	r3, r4
 8004554:	0a1b      	lsrs	r3, r3, #8
 8004556:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800455a:	4623      	mov	r3, r4
 800455c:	061b      	lsls	r3, r3, #24
 800455e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004562:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	@ 0xd0
 8004566:	461a      	mov	r2, r3
 8004568:	4302      	orrs	r2, r0
 800456a:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 800456e:	4623      	mov	r3, r4
 8004570:	430b      	orrs	r3, r1
 8004572:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004576:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	@ 0xc8
 800457a:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800457e:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8004582:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8004586:	1d1a      	adds	r2, r3, #4
 8004588:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800458c:	4413      	add	r3, r2
 800458e:	781b      	ldrb	r3, [r3, #0]
 8004590:	b2db      	uxtb	r3, r3
 8004592:	2200      	movs	r2, #0
 8004594:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004598:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800459c:	f04f 0200 	mov.w	r2, #0
 80045a0:	f04f 0300 	mov.w	r3, #0
 80045a4:	f8d7 40c0 	ldr.w	r4, [r7, #192]	@ 0xc0
 80045a8:	0023      	movs	r3, r4
 80045aa:	2200      	movs	r2, #0
 80045ac:	ea40 0402 	orr.w	r4, r0, r2
 80045b0:	f8c7 40b8 	str.w	r4, [r7, #184]	@ 0xb8
 80045b4:	430b      	orrs	r3, r1
 80045b6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80045ba:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	@ 0xb8
 80045be:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80045c2:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 80045c6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80045ca:	1d5a      	adds	r2, r3, #5
 80045cc:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80045d0:	4413      	add	r3, r2
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	2200      	movs	r2, #0
 80045d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80045dc:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80045e0:	f04f 0200 	mov.w	r2, #0
 80045e4:	f04f 0300 	mov.w	r3, #0
 80045e8:	f8d7 40b0 	ldr.w	r4, [r7, #176]	@ 0xb0
 80045ec:	0223      	lsls	r3, r4, #8
 80045ee:	2200      	movs	r2, #0
 80045f0:	ea40 0402 	orr.w	r4, r0, r2
 80045f4:	f8c7 40a8 	str.w	r4, [r7, #168]	@ 0xa8
 80045f8:	430b      	orrs	r3, r1
 80045fa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80045fe:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	@ 0xa8
 8004602:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8004606:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 800460a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 800460e:	1d9a      	adds	r2, r3, #6
 8004610:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004614:	4413      	add	r3, r2
 8004616:	781b      	ldrb	r3, [r3, #0]
 8004618:	b2db      	uxtb	r3, r3
 800461a:	2200      	movs	r2, #0
 800461c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004620:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004624:	f04f 0200 	mov.w	r2, #0
 8004628:	f04f 0300 	mov.w	r3, #0
 800462c:	f8d7 40a0 	ldr.w	r4, [r7, #160]	@ 0xa0
 8004630:	0423      	lsls	r3, r4, #16
 8004632:	2200      	movs	r2, #0
 8004634:	ea40 0402 	orr.w	r4, r0, r2
 8004638:	f8c7 4098 	str.w	r4, [r7, #152]	@ 0x98
 800463c:	430b      	orrs	r3, r1
 800463e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004642:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	@ 0x98
 8004646:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800464a:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 800464e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8004652:	1dda      	adds	r2, r3, #7
 8004654:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004658:	4413      	add	r3, r2
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	b2db      	uxtb	r3, r3
 800465e:	2200      	movs	r2, #0
 8004660:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004664:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004668:	f04f 0200 	mov.w	r2, #0
 800466c:	f04f 0300 	mov.w	r3, #0
 8004670:	f8d7 4090 	ldr.w	r4, [r7, #144]	@ 0x90
 8004674:	0623      	lsls	r3, r4, #24
 8004676:	2200      	movs	r2, #0
 8004678:	ea40 0402 	orr.w	r4, r0, r2
 800467c:	f8c7 4088 	str.w	r4, [r7, #136]	@ 0x88
 8004680:	430b      	orrs	r3, r1
 8004682:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004686:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	@ 0x88
 800468a:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      this->y = u_y.real;
 800468e:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8004692:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8004696:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 800469a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 800469e:	3308      	adds	r3, #8
 80046a0:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 80046a4:	f04f 0200 	mov.w	r2, #0
 80046a8:	f04f 0300 	mov.w	r3, #0
 80046ac:	e9c7 2362 	strd	r2, r3, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80046b0:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 80046b4:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 80046b8:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80046bc:	4413      	add	r3, r2
 80046be:	781b      	ldrb	r3, [r3, #0]
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	2200      	movs	r2, #0
 80046c4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80046c8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80046cc:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	@ 0x80
 80046d0:	461a      	mov	r2, r3
 80046d2:	4302      	orrs	r2, r0
 80046d4:	67ba      	str	r2, [r7, #120]	@ 0x78
 80046d6:	4623      	mov	r3, r4
 80046d8:	430b      	orrs	r3, r1
 80046da:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80046dc:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	@ 0x78
 80046e0:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80046e4:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 80046e8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80046ec:	1c5a      	adds	r2, r3, #1
 80046ee:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80046f2:	4413      	add	r3, r2
 80046f4:	781b      	ldrb	r3, [r3, #0]
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	2200      	movs	r2, #0
 80046fa:	673b      	str	r3, [r7, #112]	@ 0x70
 80046fc:	677a      	str	r2, [r7, #116]	@ 0x74
 80046fe:	f04f 0200 	mov.w	r2, #0
 8004702:	f04f 0300 	mov.w	r3, #0
 8004706:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800470a:	464c      	mov	r4, r9
 800470c:	0223      	lsls	r3, r4, #8
 800470e:	46c4      	mov	ip, r8
 8004710:	ea43 631c 	orr.w	r3, r3, ip, lsr #24
 8004714:	4644      	mov	r4, r8
 8004716:	0222      	lsls	r2, r4, #8
 8004718:	ea40 0402 	orr.w	r4, r0, r2
 800471c:	66bc      	str	r4, [r7, #104]	@ 0x68
 800471e:	430b      	orrs	r3, r1
 8004720:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004722:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	@ 0x68
 8004726:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800472a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 800472e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8004732:	1c9a      	adds	r2, r3, #2
 8004734:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004738:	4413      	add	r3, r2
 800473a:	781b      	ldrb	r3, [r3, #0]
 800473c:	b2db      	uxtb	r3, r3
 800473e:	2200      	movs	r2, #0
 8004740:	663b      	str	r3, [r7, #96]	@ 0x60
 8004742:	667a      	str	r2, [r7, #100]	@ 0x64
 8004744:	f04f 0200 	mov.w	r2, #0
 8004748:	f04f 0300 	mov.w	r3, #0
 800474c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004750:	464c      	mov	r4, r9
 8004752:	0423      	lsls	r3, r4, #16
 8004754:	46c4      	mov	ip, r8
 8004756:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
 800475a:	4644      	mov	r4, r8
 800475c:	0422      	lsls	r2, r4, #16
 800475e:	ea40 0402 	orr.w	r4, r0, r2
 8004762:	65bc      	str	r4, [r7, #88]	@ 0x58
 8004764:	430b      	orrs	r3, r1
 8004766:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004768:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	@ 0x58
 800476c:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004770:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8004774:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8004778:	1cda      	adds	r2, r3, #3
 800477a:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800477e:	4413      	add	r3, r2
 8004780:	781b      	ldrb	r3, [r3, #0]
 8004782:	b2db      	uxtb	r3, r3
 8004784:	2200      	movs	r2, #0
 8004786:	653b      	str	r3, [r7, #80]	@ 0x50
 8004788:	657a      	str	r2, [r7, #84]	@ 0x54
 800478a:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 800478e:	4623      	mov	r3, r4
 8004790:	0a1b      	lsrs	r3, r3, #8
 8004792:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004794:	4623      	mov	r3, r4
 8004796:	061b      	lsls	r3, r3, #24
 8004798:	64bb      	str	r3, [r7, #72]	@ 0x48
 800479a:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 800479e:	461a      	mov	r2, r3
 80047a0:	4302      	orrs	r2, r0
 80047a2:	643a      	str	r2, [r7, #64]	@ 0x40
 80047a4:	4623      	mov	r3, r4
 80047a6:	430b      	orrs	r3, r1
 80047a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80047aa:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 80047ae:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80047b2:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 80047b6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80047ba:	1d1a      	adds	r2, r3, #4
 80047bc:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80047c0:	4413      	add	r3, r2
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	2200      	movs	r2, #0
 80047c8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80047ca:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80047cc:	f04f 0200 	mov.w	r2, #0
 80047d0:	f04f 0300 	mov.w	r3, #0
 80047d4:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 80047d6:	0023      	movs	r3, r4
 80047d8:	2200      	movs	r2, #0
 80047da:	ea40 0402 	orr.w	r4, r0, r2
 80047de:	633c      	str	r4, [r7, #48]	@ 0x30
 80047e0:	430b      	orrs	r3, r1
 80047e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80047e4:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 80047e8:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80047ec:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 80047f0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80047f4:	1d5a      	adds	r2, r3, #5
 80047f6:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80047fa:	4413      	add	r3, r2
 80047fc:	781b      	ldrb	r3, [r3, #0]
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	2200      	movs	r2, #0
 8004802:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004804:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004806:	f04f 0200 	mov.w	r2, #0
 800480a:	f04f 0300 	mov.w	r3, #0
 800480e:	6abc      	ldr	r4, [r7, #40]	@ 0x28
 8004810:	0223      	lsls	r3, r4, #8
 8004812:	2200      	movs	r2, #0
 8004814:	ea40 0402 	orr.w	r4, r0, r2
 8004818:	623c      	str	r4, [r7, #32]
 800481a:	430b      	orrs	r3, r1
 800481c:	627b      	str	r3, [r7, #36]	@ 0x24
 800481e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8004822:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8004826:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 800482a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 800482e:	3306      	adds	r3, #6
 8004830:	f8d7 2180 	ldr.w	r2, [r7, #384]	@ 0x180
 8004834:	4413      	add	r3, r2
 8004836:	781b      	ldrb	r3, [r3, #0]
 8004838:	b2db      	uxtb	r3, r3
 800483a:	2200      	movs	r2, #0
 800483c:	61bb      	str	r3, [r7, #24]
 800483e:	61fa      	str	r2, [r7, #28]
 8004840:	f04f 0200 	mov.w	r2, #0
 8004844:	f04f 0300 	mov.w	r3, #0
 8004848:	69bc      	ldr	r4, [r7, #24]
 800484a:	0423      	lsls	r3, r4, #16
 800484c:	2200      	movs	r2, #0
 800484e:	ea40 0402 	orr.w	r4, r0, r2
 8004852:	613c      	str	r4, [r7, #16]
 8004854:	430b      	orrs	r3, r1
 8004856:	617b      	str	r3, [r7, #20]
 8004858:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800485c:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8004860:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8004864:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8004868:	3307      	adds	r3, #7
 800486a:	f8d7 2180 	ldr.w	r2, [r7, #384]	@ 0x180
 800486e:	4413      	add	r3, r2
 8004870:	781b      	ldrb	r3, [r3, #0]
 8004872:	b2db      	uxtb	r3, r3
 8004874:	2200      	movs	r2, #0
 8004876:	60bb      	str	r3, [r7, #8]
 8004878:	60fa      	str	r2, [r7, #12]
 800487a:	f04f 0200 	mov.w	r2, #0
 800487e:	f04f 0300 	mov.w	r3, #0
 8004882:	68bc      	ldr	r4, [r7, #8]
 8004884:	0623      	lsls	r3, r4, #24
 8004886:	2200      	movs	r2, #0
 8004888:	ea40 0402 	orr.w	r4, r0, r2
 800488c:	603c      	str	r4, [r7, #0]
 800488e:	430b      	orrs	r3, r1
 8004890:	607b      	str	r3, [r7, #4]
 8004892:	e9d7 3400 	ldrd	r3, r4, [r7]
 8004896:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      this->z = u_z.real;
 800489a:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 800489e:	f8d7 1184 	ldr.w	r1, [r7, #388]	@ 0x184
 80048a2:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 80048a6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80048aa:	3308      	adds	r3, #8
 80048ac:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
     return offset;
 80048b0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
    }
 80048b4:	4618      	mov	r0, r3
 80048b6:	f507 77d6 	add.w	r7, r7, #428	@ 0x1ac
 80048ba:	46bd      	mov	sp, r7
 80048bc:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80048c0:	4770      	bx	lr
	...

080048c4 <_ZN13geometry_msgs7Vector37getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Vector3"; };
 80048c4:	b480      	push	{r7}
 80048c6:	b083      	sub	sp, #12
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
 80048cc:	4b02      	ldr	r3, [pc, #8]	@ (80048d8 <_ZN13geometry_msgs7Vector37getTypeEv+0x14>)
 80048ce:	4618      	mov	r0, r3
 80048d0:	370c      	adds	r7, #12
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bc80      	pop	{r7}
 80048d6:	4770      	bx	lr
 80048d8:	080109a0 	.word	0x080109a0

080048dc <_ZN13geometry_msgs7Vector36getMD5Ev>:
    virtual const char * getMD5() override { return "4a842b65f413084dc2b10fb484ea7f17"; };
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	4b02      	ldr	r3, [pc, #8]	@ (80048f0 <_ZN13geometry_msgs7Vector36getMD5Ev+0x14>)
 80048e6:	4618      	mov	r0, r3
 80048e8:	370c      	adds	r7, #12
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bc80      	pop	{r7}
 80048ee:	4770      	bx	lr
 80048f0:	080109b8 	.word	0x080109b8

080048f4 <_ZN11sensor_msgs3ImuC1Ev>:
      double angular_velocity_covariance[9];
      typedef geometry_msgs::Vector3 _linear_acceleration_type;
      _linear_acceleration_type linear_acceleration;
      double linear_acceleration_covariance[9];

    Imu():
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b082      	sub	sp, #8
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
      orientation(),
      orientation_covariance(),
      angular_velocity(),
      angular_velocity_covariance(),
      linear_acceleration(),
      linear_acceleration_covariance()
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	4618      	mov	r0, r3
 8004900:	f7fd f950 	bl	8001ba4 <_ZN3ros3MsgC1Ev>
 8004904:	4a24      	ldr	r2, [pc, #144]	@ (8004998 <_ZN11sensor_msgs3ImuC1Ev+0xa4>)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	601a      	str	r2, [r3, #0]
      header(),
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	3304      	adds	r3, #4
 800490e:	4618      	mov	r0, r3
 8004910:	f7fe fa94 	bl	8002e3c <_ZN8std_msgs6HeaderC1Ev>
      orientation(),
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	3318      	adds	r3, #24
 8004918:	4618      	mov	r0, r3
 800491a:	f7fe fc1f 	bl	800315c <_ZN13geometry_msgs10QuaternionC1Ev>
      orientation_covariance(),
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8004924:	2308      	movs	r3, #8
 8004926:	e007      	b.n	8004938 <_ZN11sensor_msgs3ImuC1Ev+0x44>
 8004928:	f04f 0000 	mov.w	r0, #0
 800492c:	f04f 0100 	mov.w	r1, #0
 8004930:	e9c2 0100 	strd	r0, r1, [r2]
 8004934:	3b01      	subs	r3, #1
 8004936:	3208      	adds	r2, #8
 8004938:	2b00      	cmp	r3, #0
 800493a:	daf5      	bge.n	8004928 <_ZN11sensor_msgs3ImuC1Ev+0x34>
      angular_velocity(),
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	3388      	adds	r3, #136	@ 0x88
 8004940:	4618      	mov	r0, r3
 8004942:	f7ff fac5 	bl	8003ed0 <_ZN13geometry_msgs7Vector3C1Ev>
      angular_velocity_covariance(),
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f103 02a8 	add.w	r2, r3, #168	@ 0xa8
 800494c:	2308      	movs	r3, #8
 800494e:	e007      	b.n	8004960 <_ZN11sensor_msgs3ImuC1Ev+0x6c>
 8004950:	f04f 0000 	mov.w	r0, #0
 8004954:	f04f 0100 	mov.w	r1, #0
 8004958:	e9c2 0100 	strd	r0, r1, [r2]
 800495c:	3b01      	subs	r3, #1
 800495e:	3208      	adds	r2, #8
 8004960:	2b00      	cmp	r3, #0
 8004962:	daf5      	bge.n	8004950 <_ZN11sensor_msgs3ImuC1Ev+0x5c>
      linear_acceleration(),
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	33f0      	adds	r3, #240	@ 0xf0
 8004968:	4618      	mov	r0, r3
 800496a:	f7ff fab1 	bl	8003ed0 <_ZN13geometry_msgs7Vector3C1Ev>
      linear_acceleration_covariance()
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f503 7288 	add.w	r2, r3, #272	@ 0x110
 8004974:	2308      	movs	r3, #8
 8004976:	e007      	b.n	8004988 <_ZN11sensor_msgs3ImuC1Ev+0x94>
 8004978:	f04f 0000 	mov.w	r0, #0
 800497c:	f04f 0100 	mov.w	r1, #0
 8004980:	e9c2 0100 	strd	r0, r1, [r2]
 8004984:	3b01      	subs	r3, #1
 8004986:	3208      	adds	r2, #8
 8004988:	2b00      	cmp	r3, #0
 800498a:	daf5      	bge.n	8004978 <_ZN11sensor_msgs3ImuC1Ev+0x84>
    {
    }
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	4618      	mov	r0, r3
 8004990:	3708      	adds	r7, #8
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}
 8004996:	bf00      	nop
 8004998:	08010e88 	.word	0x08010e88

0800499c <_ZNK11sensor_msgs3Imu9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 800499c:	b580      	push	{r7, lr}
 800499e:	b08c      	sub	sp, #48	@ 0x30
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80049a6:	2300      	movs	r3, #0
 80049a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      offset += this->header.serialize(outbuffer + offset);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	1d18      	adds	r0, r3, #4
 80049ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049b0:	683a      	ldr	r2, [r7, #0]
 80049b2:	4413      	add	r3, r2
 80049b4:	4619      	mov	r1, r3
 80049b6:	f7fe fa61 	bl	8002e7c <_ZNK8std_msgs6Header9serializeEPh>
 80049ba:	4602      	mov	r2, r0
 80049bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049be:	4413      	add	r3, r2
 80049c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      offset += this->orientation.serialize(outbuffer + offset);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f103 0018 	add.w	r0, r3, #24
 80049c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049ca:	683a      	ldr	r2, [r7, #0]
 80049cc:	4413      	add	r3, r2
 80049ce:	4619      	mov	r1, r3
 80049d0:	f7fe fbf2 	bl	80031b8 <_ZNK13geometry_msgs10Quaternion9serializeEPh>
 80049d4:	4602      	mov	r2, r0
 80049d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049d8:	4413      	add	r3, r2
 80049da:	62fb      	str	r3, [r7, #44]	@ 0x2c
      for( uint32_t i = 0; i < 9; i++){
 80049dc:	2300      	movs	r3, #0
 80049de:	62bb      	str	r3, [r7, #40]	@ 0x28
 80049e0:	e07d      	b.n	8004ade <_ZNK11sensor_msgs3Imu9serializeEPh+0x142>
      union {
        double real;
        uint64_t base;
      } u_orientation_covariancei;
      u_orientation_covariancei.real = this->orientation_covariance[i];
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049e6:	3308      	adds	r3, #8
 80049e8:	00db      	lsls	r3, r3, #3
 80049ea:	4413      	add	r3, r2
 80049ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049f0:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_orientation_covariancei.base >> (8 * 0)) & 0xFF;
 80049f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049f8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80049fa:	6838      	ldr	r0, [r7, #0]
 80049fc:	4401      	add	r1, r0
 80049fe:	b2d3      	uxtb	r3, r2
 8004a00:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_orientation_covariancei.base >> (8 * 1)) & 0xFF;
 8004a02:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004a06:	f04f 0200 	mov.w	r2, #0
 8004a0a:	f04f 0300 	mov.w	r3, #0
 8004a0e:	0a02      	lsrs	r2, r0, #8
 8004a10:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8004a14:	0a0b      	lsrs	r3, r1, #8
 8004a16:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004a18:	3101      	adds	r1, #1
 8004a1a:	6838      	ldr	r0, [r7, #0]
 8004a1c:	4401      	add	r1, r0
 8004a1e:	b2d3      	uxtb	r3, r2
 8004a20:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_orientation_covariancei.base >> (8 * 2)) & 0xFF;
 8004a22:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004a26:	f04f 0200 	mov.w	r2, #0
 8004a2a:	f04f 0300 	mov.w	r3, #0
 8004a2e:	0c02      	lsrs	r2, r0, #16
 8004a30:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004a34:	0c0b      	lsrs	r3, r1, #16
 8004a36:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004a38:	3102      	adds	r1, #2
 8004a3a:	6838      	ldr	r0, [r7, #0]
 8004a3c:	4401      	add	r1, r0
 8004a3e:	b2d3      	uxtb	r3, r2
 8004a40:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_orientation_covariancei.base >> (8 * 3)) & 0xFF;
 8004a42:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004a46:	f04f 0200 	mov.w	r2, #0
 8004a4a:	f04f 0300 	mov.w	r3, #0
 8004a4e:	0e02      	lsrs	r2, r0, #24
 8004a50:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004a54:	0e0b      	lsrs	r3, r1, #24
 8004a56:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004a58:	3103      	adds	r1, #3
 8004a5a:	6838      	ldr	r0, [r7, #0]
 8004a5c:	4401      	add	r1, r0
 8004a5e:	b2d3      	uxtb	r3, r2
 8004a60:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_orientation_covariancei.base >> (8 * 4)) & 0xFF;
 8004a62:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004a66:	f04f 0200 	mov.w	r2, #0
 8004a6a:	f04f 0300 	mov.w	r3, #0
 8004a6e:	000a      	movs	r2, r1
 8004a70:	2300      	movs	r3, #0
 8004a72:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004a74:	3104      	adds	r1, #4
 8004a76:	6838      	ldr	r0, [r7, #0]
 8004a78:	4401      	add	r1, r0
 8004a7a:	b2d3      	uxtb	r3, r2
 8004a7c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_orientation_covariancei.base >> (8 * 5)) & 0xFF;
 8004a7e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004a82:	f04f 0200 	mov.w	r2, #0
 8004a86:	f04f 0300 	mov.w	r3, #0
 8004a8a:	0a0a      	lsrs	r2, r1, #8
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004a90:	3105      	adds	r1, #5
 8004a92:	6838      	ldr	r0, [r7, #0]
 8004a94:	4401      	add	r1, r0
 8004a96:	b2d3      	uxtb	r3, r2
 8004a98:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_orientation_covariancei.base >> (8 * 6)) & 0xFF;
 8004a9a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004a9e:	f04f 0200 	mov.w	r2, #0
 8004aa2:	f04f 0300 	mov.w	r3, #0
 8004aa6:	0c0a      	lsrs	r2, r1, #16
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004aac:	3106      	adds	r1, #6
 8004aae:	6838      	ldr	r0, [r7, #0]
 8004ab0:	4401      	add	r1, r0
 8004ab2:	b2d3      	uxtb	r3, r2
 8004ab4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_orientation_covariancei.base >> (8 * 7)) & 0xFF;
 8004ab6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004aba:	f04f 0200 	mov.w	r2, #0
 8004abe:	f04f 0300 	mov.w	r3, #0
 8004ac2:	0e0a      	lsrs	r2, r1, #24
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004ac8:	3107      	adds	r1, #7
 8004aca:	6838      	ldr	r0, [r7, #0]
 8004acc:	4401      	add	r1, r0
 8004ace:	b2d3      	uxtb	r3, r2
 8004ad0:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->orientation_covariance[i]);
 8004ad2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ad4:	3308      	adds	r3, #8
 8004ad6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      for( uint32_t i = 0; i < 9; i++){
 8004ad8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ada:	3301      	adds	r3, #1
 8004adc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ade:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ae0:	2b08      	cmp	r3, #8
 8004ae2:	f67f af7e 	bls.w	80049e2 <_ZNK11sensor_msgs3Imu9serializeEPh+0x46>
      }
      offset += this->angular_velocity.serialize(outbuffer + offset);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f103 0088 	add.w	r0, r3, #136	@ 0x88
 8004aec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004aee:	683a      	ldr	r2, [r7, #0]
 8004af0:	4413      	add	r3, r2
 8004af2:	4619      	mov	r1, r3
 8004af4:	f7ff fa14 	bl	8003f20 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8004af8:	4602      	mov	r2, r0
 8004afa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004afc:	4413      	add	r3, r2
 8004afe:	62fb      	str	r3, [r7, #44]	@ 0x2c
      for( uint32_t i = 0; i < 9; i++){
 8004b00:	2300      	movs	r3, #0
 8004b02:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b04:	e07d      	b.n	8004c02 <_ZNK11sensor_msgs3Imu9serializeEPh+0x266>
      union {
        double real;
        uint64_t base;
      } u_angular_velocity_covariancei;
      u_angular_velocity_covariancei.real = this->angular_velocity_covariance[i];
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b0a:	3315      	adds	r3, #21
 8004b0c:	00db      	lsls	r3, r3, #3
 8004b0e:	4413      	add	r3, r2
 8004b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b14:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_angular_velocity_covariancei.base >> (8 * 0)) & 0xFF;
 8004b18:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004b1c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004b1e:	6838      	ldr	r0, [r7, #0]
 8004b20:	4401      	add	r1, r0
 8004b22:	b2d3      	uxtb	r3, r2
 8004b24:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_angular_velocity_covariancei.base >> (8 * 1)) & 0xFF;
 8004b26:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004b2a:	f04f 0200 	mov.w	r2, #0
 8004b2e:	f04f 0300 	mov.w	r3, #0
 8004b32:	0a02      	lsrs	r2, r0, #8
 8004b34:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8004b38:	0a0b      	lsrs	r3, r1, #8
 8004b3a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004b3c:	3101      	adds	r1, #1
 8004b3e:	6838      	ldr	r0, [r7, #0]
 8004b40:	4401      	add	r1, r0
 8004b42:	b2d3      	uxtb	r3, r2
 8004b44:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_angular_velocity_covariancei.base >> (8 * 2)) & 0xFF;
 8004b46:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004b4a:	f04f 0200 	mov.w	r2, #0
 8004b4e:	f04f 0300 	mov.w	r3, #0
 8004b52:	0c02      	lsrs	r2, r0, #16
 8004b54:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004b58:	0c0b      	lsrs	r3, r1, #16
 8004b5a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004b5c:	3102      	adds	r1, #2
 8004b5e:	6838      	ldr	r0, [r7, #0]
 8004b60:	4401      	add	r1, r0
 8004b62:	b2d3      	uxtb	r3, r2
 8004b64:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_angular_velocity_covariancei.base >> (8 * 3)) & 0xFF;
 8004b66:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004b6a:	f04f 0200 	mov.w	r2, #0
 8004b6e:	f04f 0300 	mov.w	r3, #0
 8004b72:	0e02      	lsrs	r2, r0, #24
 8004b74:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004b78:	0e0b      	lsrs	r3, r1, #24
 8004b7a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004b7c:	3103      	adds	r1, #3
 8004b7e:	6838      	ldr	r0, [r7, #0]
 8004b80:	4401      	add	r1, r0
 8004b82:	b2d3      	uxtb	r3, r2
 8004b84:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_angular_velocity_covariancei.base >> (8 * 4)) & 0xFF;
 8004b86:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004b8a:	f04f 0200 	mov.w	r2, #0
 8004b8e:	f04f 0300 	mov.w	r3, #0
 8004b92:	000a      	movs	r2, r1
 8004b94:	2300      	movs	r3, #0
 8004b96:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004b98:	3104      	adds	r1, #4
 8004b9a:	6838      	ldr	r0, [r7, #0]
 8004b9c:	4401      	add	r1, r0
 8004b9e:	b2d3      	uxtb	r3, r2
 8004ba0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_angular_velocity_covariancei.base >> (8 * 5)) & 0xFF;
 8004ba2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004ba6:	f04f 0200 	mov.w	r2, #0
 8004baa:	f04f 0300 	mov.w	r3, #0
 8004bae:	0a0a      	lsrs	r2, r1, #8
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004bb4:	3105      	adds	r1, #5
 8004bb6:	6838      	ldr	r0, [r7, #0]
 8004bb8:	4401      	add	r1, r0
 8004bba:	b2d3      	uxtb	r3, r2
 8004bbc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_angular_velocity_covariancei.base >> (8 * 6)) & 0xFF;
 8004bbe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004bc2:	f04f 0200 	mov.w	r2, #0
 8004bc6:	f04f 0300 	mov.w	r3, #0
 8004bca:	0c0a      	lsrs	r2, r1, #16
 8004bcc:	2300      	movs	r3, #0
 8004bce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004bd0:	3106      	adds	r1, #6
 8004bd2:	6838      	ldr	r0, [r7, #0]
 8004bd4:	4401      	add	r1, r0
 8004bd6:	b2d3      	uxtb	r3, r2
 8004bd8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_angular_velocity_covariancei.base >> (8 * 7)) & 0xFF;
 8004bda:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004bde:	f04f 0200 	mov.w	r2, #0
 8004be2:	f04f 0300 	mov.w	r3, #0
 8004be6:	0e0a      	lsrs	r2, r1, #24
 8004be8:	2300      	movs	r3, #0
 8004bea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004bec:	3107      	adds	r1, #7
 8004bee:	6838      	ldr	r0, [r7, #0]
 8004bf0:	4401      	add	r1, r0
 8004bf2:	b2d3      	uxtb	r3, r2
 8004bf4:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->angular_velocity_covariance[i]);
 8004bf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bf8:	3308      	adds	r3, #8
 8004bfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      for( uint32_t i = 0; i < 9; i++){
 8004bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bfe:	3301      	adds	r3, #1
 8004c00:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c04:	2b08      	cmp	r3, #8
 8004c06:	f67f af7e 	bls.w	8004b06 <_ZNK11sensor_msgs3Imu9serializeEPh+0x16a>
      }
      offset += this->linear_acceleration.serialize(outbuffer + offset);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f103 00f0 	add.w	r0, r3, #240	@ 0xf0
 8004c10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c12:	683a      	ldr	r2, [r7, #0]
 8004c14:	4413      	add	r3, r2
 8004c16:	4619      	mov	r1, r3
 8004c18:	f7ff f982 	bl	8003f20 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c20:	4413      	add	r3, r2
 8004c22:	62fb      	str	r3, [r7, #44]	@ 0x2c
      for( uint32_t i = 0; i < 9; i++){
 8004c24:	2300      	movs	r3, #0
 8004c26:	623b      	str	r3, [r7, #32]
 8004c28:	e07d      	b.n	8004d26 <_ZNK11sensor_msgs3Imu9serializeEPh+0x38a>
      union {
        double real;
        uint64_t base;
      } u_linear_acceleration_covariancei;
      u_linear_acceleration_covariancei.real = this->linear_acceleration_covariance[i];
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	6a3b      	ldr	r3, [r7, #32]
 8004c2e:	3322      	adds	r3, #34	@ 0x22
 8004c30:	00db      	lsls	r3, r3, #3
 8004c32:	4413      	add	r3, r2
 8004c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c38:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_linear_acceleration_covariancei.base >> (8 * 0)) & 0xFF;
 8004c3c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c40:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004c42:	6838      	ldr	r0, [r7, #0]
 8004c44:	4401      	add	r1, r0
 8004c46:	b2d3      	uxtb	r3, r2
 8004c48:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_linear_acceleration_covariancei.base >> (8 * 1)) & 0xFF;
 8004c4a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004c4e:	f04f 0200 	mov.w	r2, #0
 8004c52:	f04f 0300 	mov.w	r3, #0
 8004c56:	0a02      	lsrs	r2, r0, #8
 8004c58:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8004c5c:	0a0b      	lsrs	r3, r1, #8
 8004c5e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004c60:	3101      	adds	r1, #1
 8004c62:	6838      	ldr	r0, [r7, #0]
 8004c64:	4401      	add	r1, r0
 8004c66:	b2d3      	uxtb	r3, r2
 8004c68:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_linear_acceleration_covariancei.base >> (8 * 2)) & 0xFF;
 8004c6a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004c6e:	f04f 0200 	mov.w	r2, #0
 8004c72:	f04f 0300 	mov.w	r3, #0
 8004c76:	0c02      	lsrs	r2, r0, #16
 8004c78:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004c7c:	0c0b      	lsrs	r3, r1, #16
 8004c7e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004c80:	3102      	adds	r1, #2
 8004c82:	6838      	ldr	r0, [r7, #0]
 8004c84:	4401      	add	r1, r0
 8004c86:	b2d3      	uxtb	r3, r2
 8004c88:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_linear_acceleration_covariancei.base >> (8 * 3)) & 0xFF;
 8004c8a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004c8e:	f04f 0200 	mov.w	r2, #0
 8004c92:	f04f 0300 	mov.w	r3, #0
 8004c96:	0e02      	lsrs	r2, r0, #24
 8004c98:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004c9c:	0e0b      	lsrs	r3, r1, #24
 8004c9e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004ca0:	3103      	adds	r1, #3
 8004ca2:	6838      	ldr	r0, [r7, #0]
 8004ca4:	4401      	add	r1, r0
 8004ca6:	b2d3      	uxtb	r3, r2
 8004ca8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_linear_acceleration_covariancei.base >> (8 * 4)) & 0xFF;
 8004caa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004cae:	f04f 0200 	mov.w	r2, #0
 8004cb2:	f04f 0300 	mov.w	r3, #0
 8004cb6:	000a      	movs	r2, r1
 8004cb8:	2300      	movs	r3, #0
 8004cba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004cbc:	3104      	adds	r1, #4
 8004cbe:	6838      	ldr	r0, [r7, #0]
 8004cc0:	4401      	add	r1, r0
 8004cc2:	b2d3      	uxtb	r3, r2
 8004cc4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_linear_acceleration_covariancei.base >> (8 * 5)) & 0xFF;
 8004cc6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004cca:	f04f 0200 	mov.w	r2, #0
 8004cce:	f04f 0300 	mov.w	r3, #0
 8004cd2:	0a0a      	lsrs	r2, r1, #8
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004cd8:	3105      	adds	r1, #5
 8004cda:	6838      	ldr	r0, [r7, #0]
 8004cdc:	4401      	add	r1, r0
 8004cde:	b2d3      	uxtb	r3, r2
 8004ce0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_linear_acceleration_covariancei.base >> (8 * 6)) & 0xFF;
 8004ce2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004ce6:	f04f 0200 	mov.w	r2, #0
 8004cea:	f04f 0300 	mov.w	r3, #0
 8004cee:	0c0a      	lsrs	r2, r1, #16
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004cf4:	3106      	adds	r1, #6
 8004cf6:	6838      	ldr	r0, [r7, #0]
 8004cf8:	4401      	add	r1, r0
 8004cfa:	b2d3      	uxtb	r3, r2
 8004cfc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_linear_acceleration_covariancei.base >> (8 * 7)) & 0xFF;
 8004cfe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004d02:	f04f 0200 	mov.w	r2, #0
 8004d06:	f04f 0300 	mov.w	r3, #0
 8004d0a:	0e0a      	lsrs	r2, r1, #24
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004d10:	3107      	adds	r1, #7
 8004d12:	6838      	ldr	r0, [r7, #0]
 8004d14:	4401      	add	r1, r0
 8004d16:	b2d3      	uxtb	r3, r2
 8004d18:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->linear_acceleration_covariance[i]);
 8004d1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d1c:	3308      	adds	r3, #8
 8004d1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      for( uint32_t i = 0; i < 9; i++){
 8004d20:	6a3b      	ldr	r3, [r7, #32]
 8004d22:	3301      	adds	r3, #1
 8004d24:	623b      	str	r3, [r7, #32]
 8004d26:	6a3b      	ldr	r3, [r7, #32]
 8004d28:	2b08      	cmp	r3, #8
 8004d2a:	f67f af7e 	bls.w	8004c2a <_ZNK11sensor_msgs3Imu9serializeEPh+0x28e>
      }
      return offset;
 8004d2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
 8004d30:	4618      	mov	r0, r3
 8004d32:	3730      	adds	r7, #48	@ 0x30
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}

08004d38 <_ZN11sensor_msgs3Imu11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8004d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d3c:	b0ed      	sub	sp, #436	@ 0x1b4
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	f8c7 0184 	str.w	r0, [r7, #388]	@ 0x184
 8004d44:	f8c7 1180 	str.w	r1, [r7, #384]	@ 0x180
    {
      int offset = 0;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
      offset += this->header.deserialize(inbuffer + offset);
 8004d4e:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8004d52:	1d18      	adds	r0, r3, #4
 8004d54:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8004d58:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004d5c:	4413      	add	r3, r2
 8004d5e:	4619      	mov	r1, r3
 8004d60:	f7fe f924 	bl	8002fac <_ZN8std_msgs6Header11deserializeEPh>
 8004d64:	4602      	mov	r2, r0
 8004d66:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8004d6a:	4413      	add	r3, r2
 8004d6c:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
      offset += this->orientation.deserialize(inbuffer + offset);
 8004d70:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8004d74:	f103 0018 	add.w	r0, r3, #24
 8004d78:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8004d7c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004d80:	4413      	add	r3, r2
 8004d82:	4619      	mov	r1, r3
 8004d84:	f7fe fc01 	bl	800358a <_ZN13geometry_msgs10Quaternion11deserializeEPh>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8004d8e:	4413      	add	r3, r2
 8004d90:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
      for( uint32_t i = 0; i < 9; i++){
 8004d94:	2300      	movs	r3, #0
 8004d96:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8004d9a:	e122      	b.n	8004fe2 <_ZN11sensor_msgs3Imu11deserializeEPh+0x2aa>
      union {
        double real;
        uint64_t base;
      } u_orientation_covariancei;
      u_orientation_covariancei.base = 0;
 8004d9c:	f04f 0200 	mov.w	r2, #0
 8004da0:	f04f 0300 	mov.w	r3, #0
 8004da4:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8004da8:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8004dac:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8004db0:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004db4:	4413      	add	r3, r2
 8004db6:	781b      	ldrb	r3, [r3, #0]
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 8004dc0:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
 8004dc4:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	@ 0x170
 8004dc8:	4616      	mov	r6, r2
 8004dca:	4306      	orrs	r6, r0
 8004dcc:	f8c7 6168 	str.w	r6, [r7, #360]	@ 0x168
 8004dd0:	430b      	orrs	r3, r1
 8004dd2:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 8004dd6:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	@ 0x168
 8004dda:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004dde:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8004de2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8004de6:	1c5a      	adds	r2, r3, #1
 8004de8:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004dec:	4413      	add	r3, r2
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	2200      	movs	r2, #0
 8004df4:	469a      	mov	sl, r3
 8004df6:	4693      	mov	fp, r2
 8004df8:	f04f 0200 	mov.w	r2, #0
 8004dfc:	f04f 0300 	mov.w	r3, #0
 8004e00:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8004e04:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8004e08:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8004e0c:	ea40 0602 	orr.w	r6, r0, r2
 8004e10:	f8c7 6160 	str.w	r6, [r7, #352]	@ 0x160
 8004e14:	430b      	orrs	r3, r1
 8004e16:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8004e1a:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	@ 0x160
 8004e1e:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004e22:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8004e26:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8004e2a:	1c9a      	adds	r2, r3, #2
 8004e2c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004e30:	4413      	add	r3, r2
 8004e32:	781b      	ldrb	r3, [r3, #0]
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	2200      	movs	r2, #0
 8004e38:	4698      	mov	r8, r3
 8004e3a:	4691      	mov	r9, r2
 8004e3c:	f04f 0200 	mov.w	r2, #0
 8004e40:	f04f 0300 	mov.w	r3, #0
 8004e44:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8004e48:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8004e4c:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8004e50:	ea40 0602 	orr.w	r6, r0, r2
 8004e54:	f8c7 6158 	str.w	r6, [r7, #344]	@ 0x158
 8004e58:	430b      	orrs	r3, r1
 8004e5a:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8004e5e:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	@ 0x158
 8004e62:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004e66:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8004e6a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8004e6e:	1cda      	adds	r2, r3, #3
 8004e70:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004e74:	4413      	add	r3, r2
 8004e76:	781b      	ldrb	r3, [r3, #0]
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 8004e80:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8004e84:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8004e88:	0a1d      	lsrs	r5, r3, #8
 8004e8a:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8004e8e:	061c      	lsls	r4, r3, #24
 8004e90:	ea40 0304 	orr.w	r3, r0, r4
 8004e94:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8004e98:	ea41 0305 	orr.w	r3, r1, r5
 8004e9c:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8004ea0:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 8004ea4:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8004ea8:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8004eac:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8004eb0:	1d1a      	adds	r2, r3, #4
 8004eb2:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004eb6:	4413      	add	r3, r2
 8004eb8:	781b      	ldrb	r3, [r3, #0]
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 8004ec2:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8004ec6:	f04f 0200 	mov.w	r2, #0
 8004eca:	f04f 0300 	mov.w	r3, #0
 8004ece:	f8d7 6148 	ldr.w	r6, [r7, #328]	@ 0x148
 8004ed2:	0033      	movs	r3, r6
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	ea40 0602 	orr.w	r6, r0, r2
 8004eda:	f8c7 6140 	str.w	r6, [r7, #320]	@ 0x140
 8004ede:	430b      	orrs	r3, r1
 8004ee0:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8004ee4:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 8004ee8:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8004eec:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8004ef0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8004ef4:	1d5a      	adds	r2, r3, #5
 8004ef6:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004efa:	4413      	add	r3, r2
 8004efc:	781b      	ldrb	r3, [r3, #0]
 8004efe:	b2db      	uxtb	r3, r3
 8004f00:	2200      	movs	r2, #0
 8004f02:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8004f06:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 8004f0a:	f04f 0200 	mov.w	r2, #0
 8004f0e:	f04f 0300 	mov.w	r3, #0
 8004f12:	f8d7 6138 	ldr.w	r6, [r7, #312]	@ 0x138
 8004f16:	0233      	lsls	r3, r6, #8
 8004f18:	2200      	movs	r2, #0
 8004f1a:	ea40 0602 	orr.w	r6, r0, r2
 8004f1e:	f8c7 6130 	str.w	r6, [r7, #304]	@ 0x130
 8004f22:	430b      	orrs	r3, r1
 8004f24:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8004f28:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 8004f2c:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8004f30:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8004f34:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8004f38:	1d9a      	adds	r2, r3, #6
 8004f3a:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004f3e:	4413      	add	r3, r2
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	2200      	movs	r2, #0
 8004f46:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8004f4a:	f8c7 212c 	str.w	r2, [r7, #300]	@ 0x12c
 8004f4e:	f04f 0200 	mov.w	r2, #0
 8004f52:	f04f 0300 	mov.w	r3, #0
 8004f56:	f8d7 6128 	ldr.w	r6, [r7, #296]	@ 0x128
 8004f5a:	0433      	lsls	r3, r6, #16
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	ea40 0602 	orr.w	r6, r0, r2
 8004f62:	f8c7 6120 	str.w	r6, [r7, #288]	@ 0x120
 8004f66:	430b      	orrs	r3, r1
 8004f68:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8004f6c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8004f70:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8004f74:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8004f78:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8004f7c:	1dda      	adds	r2, r3, #7
 8004f7e:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004f82:	4413      	add	r3, r2
 8004f84:	781b      	ldrb	r3, [r3, #0]
 8004f86:	b2db      	uxtb	r3, r3
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8004f8e:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8004f92:	f04f 0200 	mov.w	r2, #0
 8004f96:	f04f 0300 	mov.w	r3, #0
 8004f9a:	f8d7 6118 	ldr.w	r6, [r7, #280]	@ 0x118
 8004f9e:	0633      	lsls	r3, r6, #24
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	ea40 0602 	orr.w	r6, r0, r2
 8004fa6:	f8c7 6110 	str.w	r6, [r7, #272]	@ 0x110
 8004faa:	430b      	orrs	r3, r1
 8004fac:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8004fb0:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8004fb4:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      this->orientation_covariance[i] = u_orientation_covariancei.real;
 8004fb8:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8004fbc:	f8d7 2184 	ldr.w	r2, [r7, #388]	@ 0x184
 8004fc0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8004fc4:	3308      	adds	r3, #8
 8004fc6:	00db      	lsls	r3, r3, #3
 8004fc8:	4413      	add	r3, r2
 8004fca:	e9c3 0100 	strd	r0, r1, [r3]
      offset += sizeof(this->orientation_covariance[i]);
 8004fce:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8004fd2:	3308      	adds	r3, #8
 8004fd4:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
      for( uint32_t i = 0; i < 9; i++){
 8004fd8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8004fdc:	3301      	adds	r3, #1
 8004fde:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8004fe2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8004fe6:	2b08      	cmp	r3, #8
 8004fe8:	f67f aed8 	bls.w	8004d9c <_ZN11sensor_msgs3Imu11deserializeEPh+0x64>
      }
      offset += this->angular_velocity.deserialize(inbuffer + offset);
 8004fec:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8004ff0:	f103 0088 	add.w	r0, r3, #136	@ 0x88
 8004ff4:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8004ff8:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004ffc:	4413      	add	r3, r2
 8004ffe:	4619      	mov	r1, r3
 8005000:	f7ff f900 	bl	8004204 <_ZN13geometry_msgs7Vector311deserializeEPh>
 8005004:	4602      	mov	r2, r0
 8005006:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 800500a:	4413      	add	r3, r2
 800500c:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
      for( uint32_t i = 0; i < 9; i++){
 8005010:	2300      	movs	r3, #0
 8005012:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8005016:	e135      	b.n	8005284 <_ZN11sensor_msgs3Imu11deserializeEPh+0x54c>
      union {
        double real;
        uint64_t base;
      } u_angular_velocity_covariancei;
      u_angular_velocity_covariancei.base = 0;
 8005018:	f04f 0200 	mov.w	r2, #0
 800501c:	f04f 0300 	mov.w	r3, #0
 8005020:	e9c7 2364 	strd	r2, r3, [r7, #400]	@ 0x190
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8005024:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8005028:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 800502c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005030:	4413      	add	r3, r2
 8005032:	781b      	ldrb	r3, [r3, #0]
 8005034:	b2db      	uxtb	r3, r3
 8005036:	2200      	movs	r2, #0
 8005038:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800503c:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 8005040:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	@ 0x108
 8005044:	461a      	mov	r2, r3
 8005046:	4302      	orrs	r2, r0
 8005048:	f8c7 2100 	str.w	r2, [r7, #256]	@ 0x100
 800504c:	4623      	mov	r3, r4
 800504e:	430b      	orrs	r3, r1
 8005050:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005054:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	@ 0x100
 8005058:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800505c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8005060:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8005064:	1c5a      	adds	r2, r3, #1
 8005066:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800506a:	4413      	add	r3, r2
 800506c:	781b      	ldrb	r3, [r3, #0]
 800506e:	b2db      	uxtb	r3, r3
 8005070:	2200      	movs	r2, #0
 8005072:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005076:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 800507a:	f04f 0200 	mov.w	r2, #0
 800507e:	f04f 0300 	mov.w	r3, #0
 8005082:	e9d7 563e 	ldrd	r5, r6, [r7, #248]	@ 0xf8
 8005086:	4634      	mov	r4, r6
 8005088:	0223      	lsls	r3, r4, #8
 800508a:	462c      	mov	r4, r5
 800508c:	4635      	mov	r5, r6
 800508e:	4626      	mov	r6, r4
 8005090:	ea43 6316 	orr.w	r3, r3, r6, lsr #24
 8005094:	0222      	lsls	r2, r4, #8
 8005096:	ea40 0402 	orr.w	r4, r0, r2
 800509a:	f8c7 40f0 	str.w	r4, [r7, #240]	@ 0xf0
 800509e:	430b      	orrs	r3, r1
 80050a0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80050a4:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	@ 0xf0
 80050a8:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80050ac:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 80050b0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80050b4:	1c9a      	adds	r2, r3, #2
 80050b6:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80050ba:	4413      	add	r3, r2
 80050bc:	781b      	ldrb	r3, [r3, #0]
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	2200      	movs	r2, #0
 80050c2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80050c6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80050ca:	f04f 0200 	mov.w	r2, #0
 80050ce:	f04f 0300 	mov.w	r3, #0
 80050d2:	e9d7 563a 	ldrd	r5, r6, [r7, #232]	@ 0xe8
 80050d6:	4634      	mov	r4, r6
 80050d8:	0423      	lsls	r3, r4, #16
 80050da:	462c      	mov	r4, r5
 80050dc:	4635      	mov	r5, r6
 80050de:	4626      	mov	r6, r4
 80050e0:	ea43 4316 	orr.w	r3, r3, r6, lsr #16
 80050e4:	0422      	lsls	r2, r4, #16
 80050e6:	ea40 0402 	orr.w	r4, r0, r2
 80050ea:	f8c7 40e0 	str.w	r4, [r7, #224]	@ 0xe0
 80050ee:	430b      	orrs	r3, r1
 80050f0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80050f4:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	@ 0xe0
 80050f8:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80050fc:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8005100:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8005104:	1cda      	adds	r2, r3, #3
 8005106:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800510a:	4413      	add	r3, r2
 800510c:	781b      	ldrb	r3, [r3, #0]
 800510e:	b2db      	uxtb	r3, r3
 8005110:	2200      	movs	r2, #0
 8005112:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005116:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800511a:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 800511e:	4623      	mov	r3, r4
 8005120:	0a1b      	lsrs	r3, r3, #8
 8005122:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005126:	4623      	mov	r3, r4
 8005128:	061b      	lsls	r3, r3, #24
 800512a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800512e:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	@ 0xd0
 8005132:	461a      	mov	r2, r3
 8005134:	4302      	orrs	r2, r0
 8005136:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 800513a:	4623      	mov	r3, r4
 800513c:	430b      	orrs	r3, r1
 800513e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005142:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	@ 0xc8
 8005146:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800514a:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 800514e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8005152:	1d1a      	adds	r2, r3, #4
 8005154:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005158:	4413      	add	r3, r2
 800515a:	781b      	ldrb	r3, [r3, #0]
 800515c:	b2db      	uxtb	r3, r3
 800515e:	2200      	movs	r2, #0
 8005160:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005164:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005168:	f04f 0200 	mov.w	r2, #0
 800516c:	f04f 0300 	mov.w	r3, #0
 8005170:	f8d7 40c0 	ldr.w	r4, [r7, #192]	@ 0xc0
 8005174:	0023      	movs	r3, r4
 8005176:	2200      	movs	r2, #0
 8005178:	ea40 0402 	orr.w	r4, r0, r2
 800517c:	f8c7 40b8 	str.w	r4, [r7, #184]	@ 0xb8
 8005180:	430b      	orrs	r3, r1
 8005182:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005186:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	@ 0xb8
 800518a:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800518e:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8005192:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8005196:	1d5a      	adds	r2, r3, #5
 8005198:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800519c:	4413      	add	r3, r2
 800519e:	781b      	ldrb	r3, [r3, #0]
 80051a0:	b2db      	uxtb	r3, r3
 80051a2:	2200      	movs	r2, #0
 80051a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80051a8:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80051ac:	f04f 0200 	mov.w	r2, #0
 80051b0:	f04f 0300 	mov.w	r3, #0
 80051b4:	f8d7 40b0 	ldr.w	r4, [r7, #176]	@ 0xb0
 80051b8:	0223      	lsls	r3, r4, #8
 80051ba:	2200      	movs	r2, #0
 80051bc:	ea40 0402 	orr.w	r4, r0, r2
 80051c0:	f8c7 40a8 	str.w	r4, [r7, #168]	@ 0xa8
 80051c4:	430b      	orrs	r3, r1
 80051c6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80051ca:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	@ 0xa8
 80051ce:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80051d2:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 80051d6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80051da:	1d9a      	adds	r2, r3, #6
 80051dc:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80051e0:	4413      	add	r3, r2
 80051e2:	781b      	ldrb	r3, [r3, #0]
 80051e4:	b2db      	uxtb	r3, r3
 80051e6:	2200      	movs	r2, #0
 80051e8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80051ec:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80051f0:	f04f 0200 	mov.w	r2, #0
 80051f4:	f04f 0300 	mov.w	r3, #0
 80051f8:	f8d7 40a0 	ldr.w	r4, [r7, #160]	@ 0xa0
 80051fc:	0423      	lsls	r3, r4, #16
 80051fe:	2200      	movs	r2, #0
 8005200:	ea40 0402 	orr.w	r4, r0, r2
 8005204:	f8c7 4098 	str.w	r4, [r7, #152]	@ 0x98
 8005208:	430b      	orrs	r3, r1
 800520a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800520e:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	@ 0x98
 8005212:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8005216:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 800521a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 800521e:	1dda      	adds	r2, r3, #7
 8005220:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005224:	4413      	add	r3, r2
 8005226:	781b      	ldrb	r3, [r3, #0]
 8005228:	b2db      	uxtb	r3, r3
 800522a:	2200      	movs	r2, #0
 800522c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005230:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005234:	f04f 0200 	mov.w	r2, #0
 8005238:	f04f 0300 	mov.w	r3, #0
 800523c:	f8d7 4090 	ldr.w	r4, [r7, #144]	@ 0x90
 8005240:	0623      	lsls	r3, r4, #24
 8005242:	2200      	movs	r2, #0
 8005244:	ea40 0402 	orr.w	r4, r0, r2
 8005248:	f8c7 4088 	str.w	r4, [r7, #136]	@ 0x88
 800524c:	430b      	orrs	r3, r1
 800524e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005252:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	@ 0x88
 8005256:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      this->angular_velocity_covariance[i] = u_angular_velocity_covariancei.real;
 800525a:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 800525e:	f8d7 2184 	ldr.w	r2, [r7, #388]	@ 0x184
 8005262:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8005266:	3315      	adds	r3, #21
 8005268:	00db      	lsls	r3, r3, #3
 800526a:	4413      	add	r3, r2
 800526c:	e9c3 0100 	strd	r0, r1, [r3]
      offset += sizeof(this->angular_velocity_covariance[i]);
 8005270:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8005274:	3308      	adds	r3, #8
 8005276:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
      for( uint32_t i = 0; i < 9; i++){
 800527a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 800527e:	3301      	adds	r3, #1
 8005280:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8005284:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8005288:	2b08      	cmp	r3, #8
 800528a:	f67f aec5 	bls.w	8005018 <_ZN11sensor_msgs3Imu11deserializeEPh+0x2e0>
      }
      offset += this->linear_acceleration.deserialize(inbuffer + offset);
 800528e:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8005292:	f103 00f0 	add.w	r0, r3, #240	@ 0xf0
 8005296:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 800529a:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800529e:	4413      	add	r3, r2
 80052a0:	4619      	mov	r1, r3
 80052a2:	f7fe ffaf 	bl	8004204 <_ZN13geometry_msgs7Vector311deserializeEPh>
 80052a6:	4602      	mov	r2, r0
 80052a8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80052ac:	4413      	add	r3, r2
 80052ae:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
      for( uint32_t i = 0; i < 9; i++){
 80052b2:	2300      	movs	r3, #0
 80052b4:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80052b8:	e111      	b.n	80054de <_ZN11sensor_msgs3Imu11deserializeEPh+0x7a6>
      union {
        double real;
        uint64_t base;
      } u_linear_acceleration_covariancei;
      u_linear_acceleration_covariancei.base = 0;
 80052ba:	f04f 0200 	mov.w	r2, #0
 80052be:	f04f 0300 	mov.w	r3, #0
 80052c2:	e9c7 2362 	strd	r2, r3, [r7, #392]	@ 0x188
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80052c6:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 80052ca:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 80052ce:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80052d2:	4413      	add	r3, r2
 80052d4:	781b      	ldrb	r3, [r3, #0]
 80052d6:	b2db      	uxtb	r3, r3
 80052d8:	2200      	movs	r2, #0
 80052da:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80052de:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80052e2:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	@ 0x80
 80052e6:	461a      	mov	r2, r3
 80052e8:	4302      	orrs	r2, r0
 80052ea:	67ba      	str	r2, [r7, #120]	@ 0x78
 80052ec:	4623      	mov	r3, r4
 80052ee:	430b      	orrs	r3, r1
 80052f0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80052f2:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	@ 0x78
 80052f6:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80052fa:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 80052fe:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8005302:	1c5a      	adds	r2, r3, #1
 8005304:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005308:	4413      	add	r3, r2
 800530a:	781b      	ldrb	r3, [r3, #0]
 800530c:	b2db      	uxtb	r3, r3
 800530e:	2200      	movs	r2, #0
 8005310:	673b      	str	r3, [r7, #112]	@ 0x70
 8005312:	677a      	str	r2, [r7, #116]	@ 0x74
 8005314:	f04f 0200 	mov.w	r2, #0
 8005318:	f04f 0300 	mov.w	r3, #0
 800531c:	e9d7 561c 	ldrd	r5, r6, [r7, #112]	@ 0x70
 8005320:	4634      	mov	r4, r6
 8005322:	0223      	lsls	r3, r4, #8
 8005324:	462c      	mov	r4, r5
 8005326:	4635      	mov	r5, r6
 8005328:	4626      	mov	r6, r4
 800532a:	ea43 6316 	orr.w	r3, r3, r6, lsr #24
 800532e:	0222      	lsls	r2, r4, #8
 8005330:	ea40 0402 	orr.w	r4, r0, r2
 8005334:	66bc      	str	r4, [r7, #104]	@ 0x68
 8005336:	430b      	orrs	r3, r1
 8005338:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800533a:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	@ 0x68
 800533e:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8005342:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8005346:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 800534a:	1c9a      	adds	r2, r3, #2
 800534c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005350:	4413      	add	r3, r2
 8005352:	781b      	ldrb	r3, [r3, #0]
 8005354:	b2db      	uxtb	r3, r3
 8005356:	2200      	movs	r2, #0
 8005358:	663b      	str	r3, [r7, #96]	@ 0x60
 800535a:	667a      	str	r2, [r7, #100]	@ 0x64
 800535c:	f04f 0200 	mov.w	r2, #0
 8005360:	f04f 0300 	mov.w	r3, #0
 8005364:	e9d7 5618 	ldrd	r5, r6, [r7, #96]	@ 0x60
 8005368:	4634      	mov	r4, r6
 800536a:	0423      	lsls	r3, r4, #16
 800536c:	462c      	mov	r4, r5
 800536e:	4635      	mov	r5, r6
 8005370:	4626      	mov	r6, r4
 8005372:	ea43 4316 	orr.w	r3, r3, r6, lsr #16
 8005376:	0422      	lsls	r2, r4, #16
 8005378:	ea40 0402 	orr.w	r4, r0, r2
 800537c:	65bc      	str	r4, [r7, #88]	@ 0x58
 800537e:	430b      	orrs	r3, r1
 8005380:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005382:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	@ 0x58
 8005386:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800538a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 800538e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8005392:	1cda      	adds	r2, r3, #3
 8005394:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005398:	4413      	add	r3, r2
 800539a:	781b      	ldrb	r3, [r3, #0]
 800539c:	b2db      	uxtb	r3, r3
 800539e:	2200      	movs	r2, #0
 80053a0:	653b      	str	r3, [r7, #80]	@ 0x50
 80053a2:	657a      	str	r2, [r7, #84]	@ 0x54
 80053a4:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 80053a8:	4623      	mov	r3, r4
 80053aa:	0a1b      	lsrs	r3, r3, #8
 80053ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80053ae:	4623      	mov	r3, r4
 80053b0:	061b      	lsls	r3, r3, #24
 80053b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053b4:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 80053b8:	461a      	mov	r2, r3
 80053ba:	4302      	orrs	r2, r0
 80053bc:	643a      	str	r2, [r7, #64]	@ 0x40
 80053be:	4623      	mov	r3, r4
 80053c0:	430b      	orrs	r3, r1
 80053c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80053c4:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 80053c8:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80053cc:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 80053d0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80053d4:	1d1a      	adds	r2, r3, #4
 80053d6:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80053da:	4413      	add	r3, r2
 80053dc:	781b      	ldrb	r3, [r3, #0]
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	2200      	movs	r2, #0
 80053e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80053e4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80053e6:	f04f 0200 	mov.w	r2, #0
 80053ea:	f04f 0300 	mov.w	r3, #0
 80053ee:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 80053f0:	0023      	movs	r3, r4
 80053f2:	2200      	movs	r2, #0
 80053f4:	ea40 0402 	orr.w	r4, r0, r2
 80053f8:	633c      	str	r4, [r7, #48]	@ 0x30
 80053fa:	430b      	orrs	r3, r1
 80053fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80053fe:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8005402:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8005406:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 800540a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 800540e:	1d5a      	adds	r2, r3, #5
 8005410:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005414:	4413      	add	r3, r2
 8005416:	781b      	ldrb	r3, [r3, #0]
 8005418:	b2db      	uxtb	r3, r3
 800541a:	2200      	movs	r2, #0
 800541c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800541e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005420:	f04f 0200 	mov.w	r2, #0
 8005424:	f04f 0300 	mov.w	r3, #0
 8005428:	6abc      	ldr	r4, [r7, #40]	@ 0x28
 800542a:	0223      	lsls	r3, r4, #8
 800542c:	2200      	movs	r2, #0
 800542e:	ea40 0402 	orr.w	r4, r0, r2
 8005432:	623c      	str	r4, [r7, #32]
 8005434:	430b      	orrs	r3, r1
 8005436:	627b      	str	r3, [r7, #36]	@ 0x24
 8005438:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800543c:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8005440:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8005444:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8005448:	1d9a      	adds	r2, r3, #6
 800544a:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800544e:	4413      	add	r3, r2
 8005450:	781b      	ldrb	r3, [r3, #0]
 8005452:	b2db      	uxtb	r3, r3
 8005454:	2200      	movs	r2, #0
 8005456:	61bb      	str	r3, [r7, #24]
 8005458:	61fa      	str	r2, [r7, #28]
 800545a:	f04f 0200 	mov.w	r2, #0
 800545e:	f04f 0300 	mov.w	r3, #0
 8005462:	69bc      	ldr	r4, [r7, #24]
 8005464:	0423      	lsls	r3, r4, #16
 8005466:	2200      	movs	r2, #0
 8005468:	ea40 0402 	orr.w	r4, r0, r2
 800546c:	613c      	str	r4, [r7, #16]
 800546e:	430b      	orrs	r3, r1
 8005470:	617b      	str	r3, [r7, #20]
 8005472:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8005476:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800547a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 800547e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8005482:	1dda      	adds	r2, r3, #7
 8005484:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005488:	4413      	add	r3, r2
 800548a:	781b      	ldrb	r3, [r3, #0]
 800548c:	b2db      	uxtb	r3, r3
 800548e:	2200      	movs	r2, #0
 8005490:	60bb      	str	r3, [r7, #8]
 8005492:	60fa      	str	r2, [r7, #12]
 8005494:	f04f 0200 	mov.w	r2, #0
 8005498:	f04f 0300 	mov.w	r3, #0
 800549c:	68bc      	ldr	r4, [r7, #8]
 800549e:	0623      	lsls	r3, r4, #24
 80054a0:	2200      	movs	r2, #0
 80054a2:	ea40 0402 	orr.w	r4, r0, r2
 80054a6:	603c      	str	r4, [r7, #0]
 80054a8:	430b      	orrs	r3, r1
 80054aa:	607b      	str	r3, [r7, #4]
 80054ac:	e9d7 3400 	ldrd	r3, r4, [r7]
 80054b0:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      this->linear_acceleration_covariance[i] = u_linear_acceleration_covariancei.real;
 80054b4:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 80054b8:	f8d7 2184 	ldr.w	r2, [r7, #388]	@ 0x184
 80054bc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80054c0:	3322      	adds	r3, #34	@ 0x22
 80054c2:	00db      	lsls	r3, r3, #3
 80054c4:	4413      	add	r3, r2
 80054c6:	e9c3 0100 	strd	r0, r1, [r3]
      offset += sizeof(this->linear_acceleration_covariance[i]);
 80054ca:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80054ce:	3308      	adds	r3, #8
 80054d0:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
      for( uint32_t i = 0; i < 9; i++){
 80054d4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80054d8:	3301      	adds	r3, #1
 80054da:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80054de:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80054e2:	2b08      	cmp	r3, #8
 80054e4:	f67f aee9 	bls.w	80052ba <_ZN11sensor_msgs3Imu11deserializeEPh+0x582>
      }
     return offset;
 80054e8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
    }
 80054ec:	4618      	mov	r0, r3
 80054ee:	f507 77da 	add.w	r7, r7, #436	@ 0x1b4
 80054f2:	46bd      	mov	sp, r7
 80054f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080054f8 <_ZN11sensor_msgs3Imu7getTypeEv>:

    virtual const char * getType() override { return "sensor_msgs/Imu"; };
 80054f8:	b480      	push	{r7}
 80054fa:	b083      	sub	sp, #12
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
 8005500:	4b02      	ldr	r3, [pc, #8]	@ (800550c <_ZN11sensor_msgs3Imu7getTypeEv+0x14>)
 8005502:	4618      	mov	r0, r3
 8005504:	370c      	adds	r7, #12
 8005506:	46bd      	mov	sp, r7
 8005508:	bc80      	pop	{r7}
 800550a:	4770      	bx	lr
 800550c:	080109dc 	.word	0x080109dc

08005510 <_ZN11sensor_msgs3Imu6getMD5Ev>:
    virtual const char * getMD5() override { return "6a62c6daae103f4ff57a132d6f95cec2"; };
 8005510:	b480      	push	{r7}
 8005512:	b083      	sub	sp, #12
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	4b02      	ldr	r3, [pc, #8]	@ (8005524 <_ZN11sensor_msgs3Imu6getMD5Ev+0x14>)
 800551a:	4618      	mov	r0, r3
 800551c:	370c      	adds	r7, #12
 800551e:	46bd      	mov	sp, r7
 8005520:	bc80      	pop	{r7}
 8005522:	4770      	bx	lr
 8005524:	080109ec 	.word	0x080109ec

08005528 <_ZN11sensor_msgs10JointStateC1Ev>:
      uint32_t effort_length;
      typedef double _effort_type;
      _effort_type st_effort;
      _effort_type * effort;

    JointState():
 8005528:	b580      	push	{r7, lr}
 800552a:	b082      	sub	sp, #8
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
      header(),
      name_length(0), st_name(), name(nullptr),
      position_length(0), st_position(), position(nullptr),
      velocity_length(0), st_velocity(), velocity(nullptr),
      effort_length(0), st_effort(), effort(nullptr)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	4618      	mov	r0, r3
 8005534:	f7fc fb36 	bl	8001ba4 <_ZN3ros3MsgC1Ev>
 8005538:	4a1e      	ldr	r2, [pc, #120]	@ (80055b4 <_ZN11sensor_msgs10JointStateC1Ev+0x8c>)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	601a      	str	r2, [r3, #0]
      header(),
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	3304      	adds	r3, #4
 8005542:	4618      	mov	r0, r3
 8005544:	f7fd fc7a 	bl	8002e3c <_ZN8std_msgs6HeaderC1Ev>
      name_length(0), st_name(), name(nullptr),
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2200      	movs	r2, #0
 800554c:	619a      	str	r2, [r3, #24]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	61da      	str	r2, [r3, #28]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2200      	movs	r2, #0
 8005558:	621a      	str	r2, [r3, #32]
      position_length(0), st_position(), position(nullptr),
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2200      	movs	r2, #0
 800555e:	625a      	str	r2, [r3, #36]	@ 0x24
 8005560:	6879      	ldr	r1, [r7, #4]
 8005562:	f04f 0200 	mov.w	r2, #0
 8005566:	f04f 0300 	mov.w	r3, #0
 800556a:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2200      	movs	r2, #0
 8005572:	631a      	str	r2, [r3, #48]	@ 0x30
      velocity_length(0), st_velocity(), velocity(nullptr),
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2200      	movs	r2, #0
 8005578:	635a      	str	r2, [r3, #52]	@ 0x34
 800557a:	6879      	ldr	r1, [r7, #4]
 800557c:	f04f 0200 	mov.w	r2, #0
 8005580:	f04f 0300 	mov.w	r3, #0
 8005584:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2200      	movs	r2, #0
 800558c:	641a      	str	r2, [r3, #64]	@ 0x40
      effort_length(0), st_effort(), effort(nullptr)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2200      	movs	r2, #0
 8005592:	645a      	str	r2, [r3, #68]	@ 0x44
 8005594:	6879      	ldr	r1, [r7, #4]
 8005596:	f04f 0200 	mov.w	r2, #0
 800559a:	f04f 0300 	mov.w	r3, #0
 800559e:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2200      	movs	r2, #0
 80055a6:	651a      	str	r2, [r3, #80]	@ 0x50
    {
    }
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	4618      	mov	r0, r3
 80055ac:	3708      	adds	r7, #8
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}
 80055b2:	bf00      	nop
 80055b4:	08010e70 	.word	0x08010e70

080055b8 <_ZNK11sensor_msgs10JointState9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b08e      	sub	sp, #56	@ 0x38
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80055c2:	2300      	movs	r3, #0
 80055c4:	637b      	str	r3, [r7, #52]	@ 0x34
      offset += this->header.serialize(outbuffer + offset);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	1d18      	adds	r0, r3, #4
 80055ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055cc:	683a      	ldr	r2, [r7, #0]
 80055ce:	4413      	add	r3, r2
 80055d0:	4619      	mov	r1, r3
 80055d2:	f7fd fc53 	bl	8002e7c <_ZNK8std_msgs6Header9serializeEPh>
 80055d6:	4602      	mov	r2, r0
 80055d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055da:	4413      	add	r3, r2
 80055dc:	637b      	str	r3, [r7, #52]	@ 0x34
      *(outbuffer + offset + 0) = (this->name_length >> (8 * 0)) & 0xFF;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6999      	ldr	r1, [r3, #24]
 80055e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055e4:	683a      	ldr	r2, [r7, #0]
 80055e6:	4413      	add	r3, r2
 80055e8:	b2ca      	uxtb	r2, r1
 80055ea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->name_length >> (8 * 1)) & 0xFF;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	699b      	ldr	r3, [r3, #24]
 80055f0:	0a19      	lsrs	r1, r3, #8
 80055f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055f4:	3301      	adds	r3, #1
 80055f6:	683a      	ldr	r2, [r7, #0]
 80055f8:	4413      	add	r3, r2
 80055fa:	b2ca      	uxtb	r2, r1
 80055fc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->name_length >> (8 * 2)) & 0xFF;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	699b      	ldr	r3, [r3, #24]
 8005602:	0c19      	lsrs	r1, r3, #16
 8005604:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005606:	3302      	adds	r3, #2
 8005608:	683a      	ldr	r2, [r7, #0]
 800560a:	4413      	add	r3, r2
 800560c:	b2ca      	uxtb	r2, r1
 800560e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->name_length >> (8 * 3)) & 0xFF;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	699b      	ldr	r3, [r3, #24]
 8005614:	0e19      	lsrs	r1, r3, #24
 8005616:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005618:	3303      	adds	r3, #3
 800561a:	683a      	ldr	r2, [r7, #0]
 800561c:	4413      	add	r3, r2
 800561e:	b2ca      	uxtb	r2, r1
 8005620:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->name_length);
 8005622:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005624:	3304      	adds	r3, #4
 8005626:	637b      	str	r3, [r7, #52]	@ 0x34
      for( uint32_t i = 0; i < name_length; i++){
 8005628:	2300      	movs	r3, #0
 800562a:	633b      	str	r3, [r7, #48]	@ 0x30
 800562c:	e027      	b.n	800567e <_ZNK11sensor_msgs10JointState9serializeEPh+0xc6>
      uint32_t length_namei = strlen(this->name[i]);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6a1a      	ldr	r2, [r3, #32]
 8005632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005634:	009b      	lsls	r3, r3, #2
 8005636:	4413      	add	r3, r2
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4618      	mov	r0, r3
 800563c:	f7fa fdf4 	bl	8000228 <strlen>
 8005640:	6238      	str	r0, [r7, #32]
      varToArr(outbuffer + offset, length_namei);
 8005642:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005644:	683a      	ldr	r2, [r7, #0]
 8005646:	4413      	add	r3, r2
 8005648:	6a39      	ldr	r1, [r7, #32]
 800564a:	4618      	mov	r0, r3
 800564c:	f003 fbbc 	bl	8008dc8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8005650:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005652:	3304      	adds	r3, #4
 8005654:	637b      	str	r3, [r7, #52]	@ 0x34
      memcpy(outbuffer + offset, this->name[i], length_namei);
 8005656:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005658:	683a      	ldr	r2, [r7, #0]
 800565a:	18d0      	adds	r0, r2, r3
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6a1a      	ldr	r2, [r3, #32]
 8005660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005662:	009b      	lsls	r3, r3, #2
 8005664:	4413      	add	r3, r2
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	6a3a      	ldr	r2, [r7, #32]
 800566a:	4619      	mov	r1, r3
 800566c:	f00b f83a 	bl	80106e4 <memcpy>
      offset += length_namei;
 8005670:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005672:	6a3b      	ldr	r3, [r7, #32]
 8005674:	4413      	add	r3, r2
 8005676:	637b      	str	r3, [r7, #52]	@ 0x34
      for( uint32_t i = 0; i < name_length; i++){
 8005678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800567a:	3301      	adds	r3, #1
 800567c:	633b      	str	r3, [r7, #48]	@ 0x30
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	699b      	ldr	r3, [r3, #24]
 8005682:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005684:	429a      	cmp	r2, r3
 8005686:	d3d2      	bcc.n	800562e <_ZNK11sensor_msgs10JointState9serializeEPh+0x76>
      }
      *(outbuffer + offset + 0) = (this->position_length >> (8 * 0)) & 0xFF;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800568c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800568e:	683a      	ldr	r2, [r7, #0]
 8005690:	4413      	add	r3, r2
 8005692:	b2ca      	uxtb	r2, r1
 8005694:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->position_length >> (8 * 1)) & 0xFF;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800569a:	0a19      	lsrs	r1, r3, #8
 800569c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800569e:	3301      	adds	r3, #1
 80056a0:	683a      	ldr	r2, [r7, #0]
 80056a2:	4413      	add	r3, r2
 80056a4:	b2ca      	uxtb	r2, r1
 80056a6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->position_length >> (8 * 2)) & 0xFF;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056ac:	0c19      	lsrs	r1, r3, #16
 80056ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056b0:	3302      	adds	r3, #2
 80056b2:	683a      	ldr	r2, [r7, #0]
 80056b4:	4413      	add	r3, r2
 80056b6:	b2ca      	uxtb	r2, r1
 80056b8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->position_length >> (8 * 3)) & 0xFF;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056be:	0e19      	lsrs	r1, r3, #24
 80056c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056c2:	3303      	adds	r3, #3
 80056c4:	683a      	ldr	r2, [r7, #0]
 80056c6:	4413      	add	r3, r2
 80056c8:	b2ca      	uxtb	r2, r1
 80056ca:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->position_length);
 80056cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056ce:	3304      	adds	r3, #4
 80056d0:	637b      	str	r3, [r7, #52]	@ 0x34
      for( uint32_t i = 0; i < position_length; i++){
 80056d2:	2300      	movs	r3, #0
 80056d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80056d6:	e07d      	b.n	80057d4 <_ZNK11sensor_msgs10JointState9serializeEPh+0x21c>
      union {
        double real;
        uint64_t base;
      } u_positioni;
      u_positioni.real = this->position[i];
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80056dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056de:	00db      	lsls	r3, r3, #3
 80056e0:	4413      	add	r3, r2
 80056e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056e6:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_positioni.base >> (8 * 0)) & 0xFF;
 80056ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80056ee:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80056f0:	6838      	ldr	r0, [r7, #0]
 80056f2:	4401      	add	r1, r0
 80056f4:	b2d3      	uxtb	r3, r2
 80056f6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_positioni.base >> (8 * 1)) & 0xFF;
 80056f8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80056fc:	f04f 0200 	mov.w	r2, #0
 8005700:	f04f 0300 	mov.w	r3, #0
 8005704:	0a02      	lsrs	r2, r0, #8
 8005706:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800570a:	0a0b      	lsrs	r3, r1, #8
 800570c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800570e:	3101      	adds	r1, #1
 8005710:	6838      	ldr	r0, [r7, #0]
 8005712:	4401      	add	r1, r0
 8005714:	b2d3      	uxtb	r3, r2
 8005716:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_positioni.base >> (8 * 2)) & 0xFF;
 8005718:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800571c:	f04f 0200 	mov.w	r2, #0
 8005720:	f04f 0300 	mov.w	r3, #0
 8005724:	0c02      	lsrs	r2, r0, #16
 8005726:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800572a:	0c0b      	lsrs	r3, r1, #16
 800572c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800572e:	3102      	adds	r1, #2
 8005730:	6838      	ldr	r0, [r7, #0]
 8005732:	4401      	add	r1, r0
 8005734:	b2d3      	uxtb	r3, r2
 8005736:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_positioni.base >> (8 * 3)) & 0xFF;
 8005738:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800573c:	f04f 0200 	mov.w	r2, #0
 8005740:	f04f 0300 	mov.w	r3, #0
 8005744:	0e02      	lsrs	r2, r0, #24
 8005746:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800574a:	0e0b      	lsrs	r3, r1, #24
 800574c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800574e:	3103      	adds	r1, #3
 8005750:	6838      	ldr	r0, [r7, #0]
 8005752:	4401      	add	r1, r0
 8005754:	b2d3      	uxtb	r3, r2
 8005756:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_positioni.base >> (8 * 4)) & 0xFF;
 8005758:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800575c:	f04f 0200 	mov.w	r2, #0
 8005760:	f04f 0300 	mov.w	r3, #0
 8005764:	000a      	movs	r2, r1
 8005766:	2300      	movs	r3, #0
 8005768:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800576a:	3104      	adds	r1, #4
 800576c:	6838      	ldr	r0, [r7, #0]
 800576e:	4401      	add	r1, r0
 8005770:	b2d3      	uxtb	r3, r2
 8005772:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_positioni.base >> (8 * 5)) & 0xFF;
 8005774:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005778:	f04f 0200 	mov.w	r2, #0
 800577c:	f04f 0300 	mov.w	r3, #0
 8005780:	0a0a      	lsrs	r2, r1, #8
 8005782:	2300      	movs	r3, #0
 8005784:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005786:	3105      	adds	r1, #5
 8005788:	6838      	ldr	r0, [r7, #0]
 800578a:	4401      	add	r1, r0
 800578c:	b2d3      	uxtb	r3, r2
 800578e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_positioni.base >> (8 * 6)) & 0xFF;
 8005790:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005794:	f04f 0200 	mov.w	r2, #0
 8005798:	f04f 0300 	mov.w	r3, #0
 800579c:	0c0a      	lsrs	r2, r1, #16
 800579e:	2300      	movs	r3, #0
 80057a0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80057a2:	3106      	adds	r1, #6
 80057a4:	6838      	ldr	r0, [r7, #0]
 80057a6:	4401      	add	r1, r0
 80057a8:	b2d3      	uxtb	r3, r2
 80057aa:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_positioni.base >> (8 * 7)) & 0xFF;
 80057ac:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80057b0:	f04f 0200 	mov.w	r2, #0
 80057b4:	f04f 0300 	mov.w	r3, #0
 80057b8:	0e0a      	lsrs	r2, r1, #24
 80057ba:	2300      	movs	r3, #0
 80057bc:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80057be:	3107      	adds	r1, #7
 80057c0:	6838      	ldr	r0, [r7, #0]
 80057c2:	4401      	add	r1, r0
 80057c4:	b2d3      	uxtb	r3, r2
 80057c6:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->position[i]);
 80057c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057ca:	3308      	adds	r3, #8
 80057cc:	637b      	str	r3, [r7, #52]	@ 0x34
      for( uint32_t i = 0; i < position_length; i++){
 80057ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057d0:	3301      	adds	r3, #1
 80057d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80057da:	429a      	cmp	r2, r3
 80057dc:	f4ff af7c 	bcc.w	80056d8 <_ZNK11sensor_msgs10JointState9serializeEPh+0x120>
      }
      *(outbuffer + offset + 0) = (this->velocity_length >> (8 * 0)) & 0xFF;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80057e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057e6:	683a      	ldr	r2, [r7, #0]
 80057e8:	4413      	add	r3, r2
 80057ea:	b2ca      	uxtb	r2, r1
 80057ec:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->velocity_length >> (8 * 1)) & 0xFF;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057f2:	0a19      	lsrs	r1, r3, #8
 80057f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057f6:	3301      	adds	r3, #1
 80057f8:	683a      	ldr	r2, [r7, #0]
 80057fa:	4413      	add	r3, r2
 80057fc:	b2ca      	uxtb	r2, r1
 80057fe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->velocity_length >> (8 * 2)) & 0xFF;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005804:	0c19      	lsrs	r1, r3, #16
 8005806:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005808:	3302      	adds	r3, #2
 800580a:	683a      	ldr	r2, [r7, #0]
 800580c:	4413      	add	r3, r2
 800580e:	b2ca      	uxtb	r2, r1
 8005810:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->velocity_length >> (8 * 3)) & 0xFF;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005816:	0e19      	lsrs	r1, r3, #24
 8005818:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800581a:	3303      	adds	r3, #3
 800581c:	683a      	ldr	r2, [r7, #0]
 800581e:	4413      	add	r3, r2
 8005820:	b2ca      	uxtb	r2, r1
 8005822:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->velocity_length);
 8005824:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005826:	3304      	adds	r3, #4
 8005828:	637b      	str	r3, [r7, #52]	@ 0x34
      for( uint32_t i = 0; i < velocity_length; i++){
 800582a:	2300      	movs	r3, #0
 800582c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800582e:	e07d      	b.n	800592c <_ZNK11sensor_msgs10JointState9serializeEPh+0x374>
      union {
        double real;
        uint64_t base;
      } u_velocityi;
      u_velocityi.real = this->velocity[i];
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005836:	00db      	lsls	r3, r3, #3
 8005838:	4413      	add	r3, r2
 800583a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800583e:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_velocityi.base >> (8 * 0)) & 0xFF;
 8005842:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005846:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005848:	6838      	ldr	r0, [r7, #0]
 800584a:	4401      	add	r1, r0
 800584c:	b2d3      	uxtb	r3, r2
 800584e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_velocityi.base >> (8 * 1)) & 0xFF;
 8005850:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005854:	f04f 0200 	mov.w	r2, #0
 8005858:	f04f 0300 	mov.w	r3, #0
 800585c:	0a02      	lsrs	r2, r0, #8
 800585e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8005862:	0a0b      	lsrs	r3, r1, #8
 8005864:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005866:	3101      	adds	r1, #1
 8005868:	6838      	ldr	r0, [r7, #0]
 800586a:	4401      	add	r1, r0
 800586c:	b2d3      	uxtb	r3, r2
 800586e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_velocityi.base >> (8 * 2)) & 0xFF;
 8005870:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005874:	f04f 0200 	mov.w	r2, #0
 8005878:	f04f 0300 	mov.w	r3, #0
 800587c:	0c02      	lsrs	r2, r0, #16
 800587e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8005882:	0c0b      	lsrs	r3, r1, #16
 8005884:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005886:	3102      	adds	r1, #2
 8005888:	6838      	ldr	r0, [r7, #0]
 800588a:	4401      	add	r1, r0
 800588c:	b2d3      	uxtb	r3, r2
 800588e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_velocityi.base >> (8 * 3)) & 0xFF;
 8005890:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005894:	f04f 0200 	mov.w	r2, #0
 8005898:	f04f 0300 	mov.w	r3, #0
 800589c:	0e02      	lsrs	r2, r0, #24
 800589e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80058a2:	0e0b      	lsrs	r3, r1, #24
 80058a4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80058a6:	3103      	adds	r1, #3
 80058a8:	6838      	ldr	r0, [r7, #0]
 80058aa:	4401      	add	r1, r0
 80058ac:	b2d3      	uxtb	r3, r2
 80058ae:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_velocityi.base >> (8 * 4)) & 0xFF;
 80058b0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80058b4:	f04f 0200 	mov.w	r2, #0
 80058b8:	f04f 0300 	mov.w	r3, #0
 80058bc:	000a      	movs	r2, r1
 80058be:	2300      	movs	r3, #0
 80058c0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80058c2:	3104      	adds	r1, #4
 80058c4:	6838      	ldr	r0, [r7, #0]
 80058c6:	4401      	add	r1, r0
 80058c8:	b2d3      	uxtb	r3, r2
 80058ca:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_velocityi.base >> (8 * 5)) & 0xFF;
 80058cc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80058d0:	f04f 0200 	mov.w	r2, #0
 80058d4:	f04f 0300 	mov.w	r3, #0
 80058d8:	0a0a      	lsrs	r2, r1, #8
 80058da:	2300      	movs	r3, #0
 80058dc:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80058de:	3105      	adds	r1, #5
 80058e0:	6838      	ldr	r0, [r7, #0]
 80058e2:	4401      	add	r1, r0
 80058e4:	b2d3      	uxtb	r3, r2
 80058e6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_velocityi.base >> (8 * 6)) & 0xFF;
 80058e8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80058ec:	f04f 0200 	mov.w	r2, #0
 80058f0:	f04f 0300 	mov.w	r3, #0
 80058f4:	0c0a      	lsrs	r2, r1, #16
 80058f6:	2300      	movs	r3, #0
 80058f8:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80058fa:	3106      	adds	r1, #6
 80058fc:	6838      	ldr	r0, [r7, #0]
 80058fe:	4401      	add	r1, r0
 8005900:	b2d3      	uxtb	r3, r2
 8005902:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_velocityi.base >> (8 * 7)) & 0xFF;
 8005904:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005908:	f04f 0200 	mov.w	r2, #0
 800590c:	f04f 0300 	mov.w	r3, #0
 8005910:	0e0a      	lsrs	r2, r1, #24
 8005912:	2300      	movs	r3, #0
 8005914:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005916:	3107      	adds	r1, #7
 8005918:	6838      	ldr	r0, [r7, #0]
 800591a:	4401      	add	r1, r0
 800591c:	b2d3      	uxtb	r3, r2
 800591e:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->velocity[i]);
 8005920:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005922:	3308      	adds	r3, #8
 8005924:	637b      	str	r3, [r7, #52]	@ 0x34
      for( uint32_t i = 0; i < velocity_length; i++){
 8005926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005928:	3301      	adds	r3, #1
 800592a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005930:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005932:	429a      	cmp	r2, r3
 8005934:	f4ff af7c 	bcc.w	8005830 <_ZNK11sensor_msgs10JointState9serializeEPh+0x278>
      }
      *(outbuffer + offset + 0) = (this->effort_length >> (8 * 0)) & 0xFF;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800593c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800593e:	683a      	ldr	r2, [r7, #0]
 8005940:	4413      	add	r3, r2
 8005942:	b2ca      	uxtb	r2, r1
 8005944:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->effort_length >> (8 * 1)) & 0xFF;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800594a:	0a19      	lsrs	r1, r3, #8
 800594c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800594e:	3301      	adds	r3, #1
 8005950:	683a      	ldr	r2, [r7, #0]
 8005952:	4413      	add	r3, r2
 8005954:	b2ca      	uxtb	r2, r1
 8005956:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->effort_length >> (8 * 2)) & 0xFF;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800595c:	0c19      	lsrs	r1, r3, #16
 800595e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005960:	3302      	adds	r3, #2
 8005962:	683a      	ldr	r2, [r7, #0]
 8005964:	4413      	add	r3, r2
 8005966:	b2ca      	uxtb	r2, r1
 8005968:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->effort_length >> (8 * 3)) & 0xFF;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800596e:	0e19      	lsrs	r1, r3, #24
 8005970:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005972:	3303      	adds	r3, #3
 8005974:	683a      	ldr	r2, [r7, #0]
 8005976:	4413      	add	r3, r2
 8005978:	b2ca      	uxtb	r2, r1
 800597a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->effort_length);
 800597c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800597e:	3304      	adds	r3, #4
 8005980:	637b      	str	r3, [r7, #52]	@ 0x34
      for( uint32_t i = 0; i < effort_length; i++){
 8005982:	2300      	movs	r3, #0
 8005984:	627b      	str	r3, [r7, #36]	@ 0x24
 8005986:	e07d      	b.n	8005a84 <_ZNK11sensor_msgs10JointState9serializeEPh+0x4cc>
      union {
        double real;
        uint64_t base;
      } u_efforti;
      u_efforti.real = this->effort[i];
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800598c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800598e:	00db      	lsls	r3, r3, #3
 8005990:	4413      	add	r3, r2
 8005992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005996:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_efforti.base >> (8 * 0)) & 0xFF;
 800599a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800599e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80059a0:	6838      	ldr	r0, [r7, #0]
 80059a2:	4401      	add	r1, r0
 80059a4:	b2d3      	uxtb	r3, r2
 80059a6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_efforti.base >> (8 * 1)) & 0xFF;
 80059a8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80059ac:	f04f 0200 	mov.w	r2, #0
 80059b0:	f04f 0300 	mov.w	r3, #0
 80059b4:	0a02      	lsrs	r2, r0, #8
 80059b6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80059ba:	0a0b      	lsrs	r3, r1, #8
 80059bc:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80059be:	3101      	adds	r1, #1
 80059c0:	6838      	ldr	r0, [r7, #0]
 80059c2:	4401      	add	r1, r0
 80059c4:	b2d3      	uxtb	r3, r2
 80059c6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_efforti.base >> (8 * 2)) & 0xFF;
 80059c8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80059cc:	f04f 0200 	mov.w	r2, #0
 80059d0:	f04f 0300 	mov.w	r3, #0
 80059d4:	0c02      	lsrs	r2, r0, #16
 80059d6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80059da:	0c0b      	lsrs	r3, r1, #16
 80059dc:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80059de:	3102      	adds	r1, #2
 80059e0:	6838      	ldr	r0, [r7, #0]
 80059e2:	4401      	add	r1, r0
 80059e4:	b2d3      	uxtb	r3, r2
 80059e6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_efforti.base >> (8 * 3)) & 0xFF;
 80059e8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80059ec:	f04f 0200 	mov.w	r2, #0
 80059f0:	f04f 0300 	mov.w	r3, #0
 80059f4:	0e02      	lsrs	r2, r0, #24
 80059f6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80059fa:	0e0b      	lsrs	r3, r1, #24
 80059fc:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80059fe:	3103      	adds	r1, #3
 8005a00:	6838      	ldr	r0, [r7, #0]
 8005a02:	4401      	add	r1, r0
 8005a04:	b2d3      	uxtb	r3, r2
 8005a06:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_efforti.base >> (8 * 4)) & 0xFF;
 8005a08:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005a0c:	f04f 0200 	mov.w	r2, #0
 8005a10:	f04f 0300 	mov.w	r3, #0
 8005a14:	000a      	movs	r2, r1
 8005a16:	2300      	movs	r3, #0
 8005a18:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005a1a:	3104      	adds	r1, #4
 8005a1c:	6838      	ldr	r0, [r7, #0]
 8005a1e:	4401      	add	r1, r0
 8005a20:	b2d3      	uxtb	r3, r2
 8005a22:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_efforti.base >> (8 * 5)) & 0xFF;
 8005a24:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005a28:	f04f 0200 	mov.w	r2, #0
 8005a2c:	f04f 0300 	mov.w	r3, #0
 8005a30:	0a0a      	lsrs	r2, r1, #8
 8005a32:	2300      	movs	r3, #0
 8005a34:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005a36:	3105      	adds	r1, #5
 8005a38:	6838      	ldr	r0, [r7, #0]
 8005a3a:	4401      	add	r1, r0
 8005a3c:	b2d3      	uxtb	r3, r2
 8005a3e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_efforti.base >> (8 * 6)) & 0xFF;
 8005a40:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005a44:	f04f 0200 	mov.w	r2, #0
 8005a48:	f04f 0300 	mov.w	r3, #0
 8005a4c:	0c0a      	lsrs	r2, r1, #16
 8005a4e:	2300      	movs	r3, #0
 8005a50:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005a52:	3106      	adds	r1, #6
 8005a54:	6838      	ldr	r0, [r7, #0]
 8005a56:	4401      	add	r1, r0
 8005a58:	b2d3      	uxtb	r3, r2
 8005a5a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_efforti.base >> (8 * 7)) & 0xFF;
 8005a5c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005a60:	f04f 0200 	mov.w	r2, #0
 8005a64:	f04f 0300 	mov.w	r3, #0
 8005a68:	0e0a      	lsrs	r2, r1, #24
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005a6e:	3107      	adds	r1, #7
 8005a70:	6838      	ldr	r0, [r7, #0]
 8005a72:	4401      	add	r1, r0
 8005a74:	b2d3      	uxtb	r3, r2
 8005a76:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->effort[i]);
 8005a78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a7a:	3308      	adds	r3, #8
 8005a7c:	637b      	str	r3, [r7, #52]	@ 0x34
      for( uint32_t i = 0; i < effort_length; i++){
 8005a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a80:	3301      	adds	r3, #1
 8005a82:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	f4ff af7c 	bcc.w	8005988 <_ZNK11sensor_msgs10JointState9serializeEPh+0x3d0>
      }
      return offset;
 8005a90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 8005a92:	4618      	mov	r0, r3
 8005a94:	3738      	adds	r7, #56	@ 0x38
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}

08005a9a <_ZN11sensor_msgs10JointState11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8005a9a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a9e:	b0f5      	sub	sp, #468	@ 0x1d4
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	f8c7 0184 	str.w	r0, [r7, #388]	@ 0x184
 8005aa6:	f8c7 1180 	str.w	r1, [r7, #384]	@ 0x180
    {
      int offset = 0;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
      offset += this->header.deserialize(inbuffer + offset);
 8005ab0:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8005ab4:	1d18      	adds	r0, r3, #4
 8005ab6:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 8005aba:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005abe:	4413      	add	r3, r2
 8005ac0:	4619      	mov	r1, r3
 8005ac2:	f7fd fa73 	bl	8002fac <_ZN8std_msgs6Header11deserializeEPh>
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8005acc:	4413      	add	r3, r2
 8005ace:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
      uint32_t name_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8005ad2:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 8005ad6:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005ada:	4413      	add	r3, r2
 8005adc:	781b      	ldrb	r3, [r3, #0]
 8005ade:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
      name_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8005ae2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8005ae6:	1c5a      	adds	r2, r3, #1
 8005ae8:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005aec:	4413      	add	r3, r2
 8005aee:	781b      	ldrb	r3, [r3, #0]
 8005af0:	021a      	lsls	r2, r3, #8
 8005af2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8005af6:	4313      	orrs	r3, r2
 8005af8:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
      name_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8005afc:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8005b00:	1c9a      	adds	r2, r3, #2
 8005b02:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005b06:	4413      	add	r3, r2
 8005b08:	781b      	ldrb	r3, [r3, #0]
 8005b0a:	041a      	lsls	r2, r3, #16
 8005b0c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8005b10:	4313      	orrs	r3, r2
 8005b12:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
      name_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8005b16:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8005b1a:	1cda      	adds	r2, r3, #3
 8005b1c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005b20:	4413      	add	r3, r2
 8005b22:	781b      	ldrb	r3, [r3, #0]
 8005b24:	061a      	lsls	r2, r3, #24
 8005b26:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
      offset += sizeof(this->name_length);
 8005b30:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8005b34:	3304      	adds	r3, #4
 8005b36:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
      if(name_lengthT > name_length)
 8005b3a:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8005b3e:	699a      	ldr	r2, [r3, #24]
 8005b40:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d90d      	bls.n	8005b64 <_ZN11sensor_msgs10JointState11deserializeEPh+0xca>
        this->name = (char**)realloc(this->name, name_lengthT * sizeof(char*));
 8005b48:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8005b4c:	6a1a      	ldr	r2, [r3, #32]
 8005b4e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8005b52:	009b      	lsls	r3, r3, #2
 8005b54:	4619      	mov	r1, r3
 8005b56:	4610      	mov	r0, r2
 8005b58:	f00a fd06 	bl	8010568 <realloc>
 8005b5c:	4602      	mov	r2, r0
 8005b5e:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8005b62:	621a      	str	r2, [r3, #32]
      name_length = name_lengthT;
 8005b64:	f8d7 2184 	ldr.w	r2, [r7, #388]	@ 0x184
 8005b68:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8005b6c:	6193      	str	r3, [r2, #24]
      for( uint32_t i = 0; i < name_length; i++){
 8005b6e:	2300      	movs	r3, #0
 8005b70:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8005b74:	e05b      	b.n	8005c2e <_ZN11sensor_msgs10JointState11deserializeEPh+0x194>
      uint32_t length_st_name;
      arrToVar(length_st_name, (inbuffer + offset));
 8005b76:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 8005b7a:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005b7e:	441a      	add	r2, r3
 8005b80:	f507 73d2 	add.w	r3, r7, #420	@ 0x1a4
 8005b84:	4611      	mov	r1, r2
 8005b86:	4618      	mov	r0, r3
 8005b88:	f003 f93c 	bl	8008e04 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8005b8c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8005b90:	3304      	adds	r3, #4
 8005b92:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
      for(unsigned int k= offset; k< offset+length_st_name; ++k){
 8005b96:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8005b9a:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8005b9e:	e011      	b.n	8005bc4 <_ZN11sensor_msgs10JointState11deserializeEPh+0x12a>
          inbuffer[k-1]=inbuffer[k];
 8005ba0:	f8d7 2180 	ldr.w	r2, [r7, #384]	@ 0x180
 8005ba4:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8005ba8:	18d1      	adds	r1, r2, r3
 8005baa:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8005bae:	1e5a      	subs	r2, r3, #1
 8005bb0:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005bb4:	441a      	add	r2, r3
 8005bb6:	780b      	ldrb	r3, [r1, #0]
 8005bb8:	7013      	strb	r3, [r2, #0]
      for(unsigned int k= offset; k< offset+length_st_name; ++k){
 8005bba:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8005bbe:	3301      	adds	r3, #1
 8005bc0:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8005bc4:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 8005bc8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8005bcc:	441a      	add	r2, r3
 8005bce:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d3e4      	bcc.n	8005ba0 <_ZN11sensor_msgs10JointState11deserializeEPh+0x106>
      }
      inbuffer[offset+length_st_name-1]=0;
 8005bd6:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 8005bda:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8005bde:	4413      	add	r3, r2
 8005be0:	1e5a      	subs	r2, r3, #1
 8005be2:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005be6:	441a      	add	r2, r3
 8005be8:	2300      	movs	r3, #0
 8005bea:	7013      	strb	r3, [r2, #0]
      this->st_name = (char *)(inbuffer + offset-1);
 8005bec:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8005bf0:	1e5a      	subs	r2, r3, #1
 8005bf2:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005bf6:	441a      	add	r2, r3
 8005bf8:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8005bfc:	61da      	str	r2, [r3, #28]
      offset += length_st_name;
 8005bfe:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 8005c02:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8005c06:	4413      	add	r3, r2
 8005c08:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
        memcpy( &(this->name[i]), &(this->st_name), sizeof(char*));
 8005c0c:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8005c10:	6a1a      	ldr	r2, [r3, #32]
 8005c12:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8005c16:	009b      	lsls	r3, r3, #2
 8005c18:	441a      	add	r2, r3
 8005c1a:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8005c1e:	331c      	adds	r3, #28
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	6013      	str	r3, [r2, #0]
      for( uint32_t i = 0; i < name_length; i++){
 8005c24:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8005c28:	3301      	adds	r3, #1
 8005c2a:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8005c2e:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8005c32:	699a      	ldr	r2, [r3, #24]
 8005c34:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d39c      	bcc.n	8005b76 <_ZN11sensor_msgs10JointState11deserializeEPh+0xdc>
      }
      uint32_t position_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8005c3c:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 8005c40:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005c44:	4413      	add	r3, r2
 8005c46:	781b      	ldrb	r3, [r3, #0]
 8005c48:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
      position_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8005c4c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8005c50:	1c5a      	adds	r2, r3, #1
 8005c52:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005c56:	4413      	add	r3, r2
 8005c58:	781b      	ldrb	r3, [r3, #0]
 8005c5a:	021a      	lsls	r2, r3, #8
 8005c5c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8005c60:	4313      	orrs	r3, r2
 8005c62:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
      position_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8005c66:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8005c6a:	1c9a      	adds	r2, r3, #2
 8005c6c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005c70:	4413      	add	r3, r2
 8005c72:	781b      	ldrb	r3, [r3, #0]
 8005c74:	041a      	lsls	r2, r3, #16
 8005c76:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
      position_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8005c80:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8005c84:	1cda      	adds	r2, r3, #3
 8005c86:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005c8a:	4413      	add	r3, r2
 8005c8c:	781b      	ldrb	r3, [r3, #0]
 8005c8e:	061a      	lsls	r2, r3, #24
 8005c90:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8005c94:	4313      	orrs	r3, r2
 8005c96:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
      offset += sizeof(this->position_length);
 8005c9a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8005c9e:	3304      	adds	r3, #4
 8005ca0:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
      if(position_lengthT > position_length)
 8005ca4:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8005ca8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005caa:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d90d      	bls.n	8005cce <_ZN11sensor_msgs10JointState11deserializeEPh+0x234>
        this->position = (double*)realloc(this->position, position_lengthT * sizeof(double));
 8005cb2:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8005cb6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005cb8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8005cbc:	00db      	lsls	r3, r3, #3
 8005cbe:	4619      	mov	r1, r3
 8005cc0:	4610      	mov	r0, r2
 8005cc2:	f00a fc51 	bl	8010568 <realloc>
 8005cc6:	4602      	mov	r2, r0
 8005cc8:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8005ccc:	631a      	str	r2, [r3, #48]	@ 0x30
      position_length = position_lengthT;
 8005cce:	f8d7 2184 	ldr.w	r2, [r7, #388]	@ 0x184
 8005cd2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8005cd6:	6253      	str	r3, [r2, #36]	@ 0x24
      for( uint32_t i = 0; i < position_length; i++){
 8005cd8:	2300      	movs	r3, #0
 8005cda:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8005cde:	e12b      	b.n	8005f38 <_ZN11sensor_msgs10JointState11deserializeEPh+0x49e>
      union {
        double real;
        uint64_t base;
      } u_st_position;
      u_st_position.base = 0;
 8005ce0:	f04f 0200 	mov.w	r2, #0
 8005ce4:	f04f 0300 	mov.w	r3, #0
 8005ce8:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      u_st_position.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8005cec:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8005cf0:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 8005cf4:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005cf8:	4413      	add	r3, r2
 8005cfa:	781b      	ldrb	r3, [r3, #0]
 8005cfc:	b2db      	uxtb	r3, r3
 8005cfe:	2200      	movs	r2, #0
 8005d00:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 8005d04:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
 8005d08:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	@ 0x170
 8005d0c:	4616      	mov	r6, r2
 8005d0e:	4306      	orrs	r6, r0
 8005d10:	f8c7 6168 	str.w	r6, [r7, #360]	@ 0x168
 8005d14:	430b      	orrs	r3, r1
 8005d16:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 8005d1a:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	@ 0x168
 8005d1e:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      u_st_position.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8005d22:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8005d26:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8005d2a:	1c5a      	adds	r2, r3, #1
 8005d2c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005d30:	4413      	add	r3, r2
 8005d32:	781b      	ldrb	r3, [r3, #0]
 8005d34:	b2db      	uxtb	r3, r3
 8005d36:	2200      	movs	r2, #0
 8005d38:	469a      	mov	sl, r3
 8005d3a:	4693      	mov	fp, r2
 8005d3c:	f04f 0200 	mov.w	r2, #0
 8005d40:	f04f 0300 	mov.w	r3, #0
 8005d44:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8005d48:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8005d4c:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8005d50:	ea40 0602 	orr.w	r6, r0, r2
 8005d54:	f8c7 6160 	str.w	r6, [r7, #352]	@ 0x160
 8005d58:	430b      	orrs	r3, r1
 8005d5a:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8005d5e:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	@ 0x160
 8005d62:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      u_st_position.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8005d66:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8005d6a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8005d6e:	1c9a      	adds	r2, r3, #2
 8005d70:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005d74:	4413      	add	r3, r2
 8005d76:	781b      	ldrb	r3, [r3, #0]
 8005d78:	b2db      	uxtb	r3, r3
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	4698      	mov	r8, r3
 8005d7e:	4691      	mov	r9, r2
 8005d80:	f04f 0200 	mov.w	r2, #0
 8005d84:	f04f 0300 	mov.w	r3, #0
 8005d88:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8005d8c:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8005d90:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8005d94:	ea40 0602 	orr.w	r6, r0, r2
 8005d98:	f8c7 6158 	str.w	r6, [r7, #344]	@ 0x158
 8005d9c:	430b      	orrs	r3, r1
 8005d9e:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8005da2:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	@ 0x158
 8005da6:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      u_st_position.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8005daa:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8005dae:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8005db2:	1cda      	adds	r2, r3, #3
 8005db4:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005db8:	4413      	add	r3, r2
 8005dba:	781b      	ldrb	r3, [r3, #0]
 8005dbc:	b2db      	uxtb	r3, r3
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 8005dc4:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8005dc8:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8005dcc:	0a1d      	lsrs	r5, r3, #8
 8005dce:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8005dd2:	061c      	lsls	r4, r3, #24
 8005dd4:	ea40 0304 	orr.w	r3, r0, r4
 8005dd8:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8005ddc:	ea41 0305 	orr.w	r3, r1, r5
 8005de0:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8005de4:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 8005de8:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      u_st_position.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8005dec:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8005df0:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8005df4:	1d1a      	adds	r2, r3, #4
 8005df6:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005dfa:	4413      	add	r3, r2
 8005dfc:	781b      	ldrb	r3, [r3, #0]
 8005dfe:	b2db      	uxtb	r3, r3
 8005e00:	2200      	movs	r2, #0
 8005e02:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 8005e06:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8005e0a:	f04f 0200 	mov.w	r2, #0
 8005e0e:	f04f 0300 	mov.w	r3, #0
 8005e12:	f8d7 6148 	ldr.w	r6, [r7, #328]	@ 0x148
 8005e16:	0033      	movs	r3, r6
 8005e18:	2200      	movs	r2, #0
 8005e1a:	ea40 0602 	orr.w	r6, r0, r2
 8005e1e:	f8c7 6140 	str.w	r6, [r7, #320]	@ 0x140
 8005e22:	430b      	orrs	r3, r1
 8005e24:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8005e28:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 8005e2c:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      u_st_position.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8005e30:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8005e34:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8005e38:	1d5a      	adds	r2, r3, #5
 8005e3a:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005e3e:	4413      	add	r3, r2
 8005e40:	781b      	ldrb	r3, [r3, #0]
 8005e42:	b2db      	uxtb	r3, r3
 8005e44:	2200      	movs	r2, #0
 8005e46:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8005e4a:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 8005e4e:	f04f 0200 	mov.w	r2, #0
 8005e52:	f04f 0300 	mov.w	r3, #0
 8005e56:	f8d7 6138 	ldr.w	r6, [r7, #312]	@ 0x138
 8005e5a:	0233      	lsls	r3, r6, #8
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	ea40 0602 	orr.w	r6, r0, r2
 8005e62:	f8c7 6130 	str.w	r6, [r7, #304]	@ 0x130
 8005e66:	430b      	orrs	r3, r1
 8005e68:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8005e6c:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 8005e70:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      u_st_position.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8005e74:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8005e78:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8005e7c:	1d9a      	adds	r2, r3, #6
 8005e7e:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005e82:	4413      	add	r3, r2
 8005e84:	781b      	ldrb	r3, [r3, #0]
 8005e86:	b2db      	uxtb	r3, r3
 8005e88:	2200      	movs	r2, #0
 8005e8a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8005e8e:	f8c7 212c 	str.w	r2, [r7, #300]	@ 0x12c
 8005e92:	f04f 0200 	mov.w	r2, #0
 8005e96:	f04f 0300 	mov.w	r3, #0
 8005e9a:	f8d7 6128 	ldr.w	r6, [r7, #296]	@ 0x128
 8005e9e:	0433      	lsls	r3, r6, #16
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	ea40 0602 	orr.w	r6, r0, r2
 8005ea6:	f8c7 6120 	str.w	r6, [r7, #288]	@ 0x120
 8005eaa:	430b      	orrs	r3, r1
 8005eac:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8005eb0:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8005eb4:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      u_st_position.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8005eb8:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8005ebc:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8005ec0:	1dda      	adds	r2, r3, #7
 8005ec2:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005ec6:	4413      	add	r3, r2
 8005ec8:	781b      	ldrb	r3, [r3, #0]
 8005eca:	b2db      	uxtb	r3, r3
 8005ecc:	2200      	movs	r2, #0
 8005ece:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8005ed2:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8005ed6:	f04f 0200 	mov.w	r2, #0
 8005eda:	f04f 0300 	mov.w	r3, #0
 8005ede:	f8d7 6118 	ldr.w	r6, [r7, #280]	@ 0x118
 8005ee2:	0633      	lsls	r3, r6, #24
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	ea40 0602 	orr.w	r6, r0, r2
 8005eea:	f8c7 6110 	str.w	r6, [r7, #272]	@ 0x110
 8005eee:	430b      	orrs	r3, r1
 8005ef0:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8005ef4:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8005ef8:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      this->st_position = u_st_position.real;
 8005efc:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8005f00:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8005f04:	e9c3 010a 	strd	r0, r1, [r3, #40]	@ 0x28
      offset += sizeof(this->st_position);
 8005f08:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8005f0c:	3308      	adds	r3, #8
 8005f0e:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
        memcpy( &(this->position[i]), &(this->st_position), sizeof(double));
 8005f12:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8005f16:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005f18:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8005f1c:	00db      	lsls	r3, r3, #3
 8005f1e:	18d0      	adds	r0, r2, r3
 8005f20:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8005f24:	3328      	adds	r3, #40	@ 0x28
 8005f26:	2208      	movs	r2, #8
 8005f28:	4619      	mov	r1, r3
 8005f2a:	f00a fbdb 	bl	80106e4 <memcpy>
      for( uint32_t i = 0; i < position_length; i++){
 8005f2e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8005f32:	3301      	adds	r3, #1
 8005f34:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8005f38:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8005f3c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005f3e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8005f42:	4293      	cmp	r3, r2
 8005f44:	f4ff aecc 	bcc.w	8005ce0 <_ZN11sensor_msgs10JointState11deserializeEPh+0x246>
      }
      uint32_t velocity_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8005f48:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 8005f4c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005f50:	4413      	add	r3, r2
 8005f52:	781b      	ldrb	r3, [r3, #0]
 8005f54:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
      velocity_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8005f58:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8005f5c:	1c5a      	adds	r2, r3, #1
 8005f5e:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005f62:	4413      	add	r3, r2
 8005f64:	781b      	ldrb	r3, [r3, #0]
 8005f66:	021a      	lsls	r2, r3, #8
 8005f68:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
      velocity_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8005f72:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8005f76:	1c9a      	adds	r2, r3, #2
 8005f78:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005f7c:	4413      	add	r3, r2
 8005f7e:	781b      	ldrb	r3, [r3, #0]
 8005f80:	041a      	lsls	r2, r3, #16
 8005f82:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8005f86:	4313      	orrs	r3, r2
 8005f88:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
      velocity_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8005f8c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8005f90:	1cda      	adds	r2, r3, #3
 8005f92:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005f96:	4413      	add	r3, r2
 8005f98:	781b      	ldrb	r3, [r3, #0]
 8005f9a:	061a      	lsls	r2, r3, #24
 8005f9c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
      offset += sizeof(this->velocity_length);
 8005fa6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8005faa:	3304      	adds	r3, #4
 8005fac:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
      if(velocity_lengthT > velocity_length)
 8005fb0:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8005fb4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005fb6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d90d      	bls.n	8005fda <_ZN11sensor_msgs10JointState11deserializeEPh+0x540>
        this->velocity = (double*)realloc(this->velocity, velocity_lengthT * sizeof(double));
 8005fbe:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8005fc2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005fc4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8005fc8:	00db      	lsls	r3, r3, #3
 8005fca:	4619      	mov	r1, r3
 8005fcc:	4610      	mov	r0, r2
 8005fce:	f00a facb 	bl	8010568 <realloc>
 8005fd2:	4602      	mov	r2, r0
 8005fd4:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8005fd8:	641a      	str	r2, [r3, #64]	@ 0x40
      velocity_length = velocity_lengthT;
 8005fda:	f8d7 2184 	ldr.w	r2, [r7, #388]	@ 0x184
 8005fde:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8005fe2:	6353      	str	r3, [r2, #52]	@ 0x34
      for( uint32_t i = 0; i < velocity_length; i++){
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8005fea:	e13e      	b.n	800626a <_ZN11sensor_msgs10JointState11deserializeEPh+0x7d0>
      union {
        double real;
        uint64_t base;
      } u_st_velocity;
      u_st_velocity.base = 0;
 8005fec:	f04f 0200 	mov.w	r2, #0
 8005ff0:	f04f 0300 	mov.w	r3, #0
 8005ff4:	e9c7 2364 	strd	r2, r3, [r7, #400]	@ 0x190
      u_st_velocity.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8005ff8:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8005ffc:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 8006000:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8006004:	4413      	add	r3, r2
 8006006:	781b      	ldrb	r3, [r3, #0]
 8006008:	b2db      	uxtb	r3, r3
 800600a:	2200      	movs	r2, #0
 800600c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8006010:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 8006014:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	@ 0x108
 8006018:	461a      	mov	r2, r3
 800601a:	4302      	orrs	r2, r0
 800601c:	f8c7 2100 	str.w	r2, [r7, #256]	@ 0x100
 8006020:	4623      	mov	r3, r4
 8006022:	430b      	orrs	r3, r1
 8006024:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006028:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	@ 0x100
 800602c:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_st_velocity.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8006030:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8006034:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8006038:	1c5a      	adds	r2, r3, #1
 800603a:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800603e:	4413      	add	r3, r2
 8006040:	781b      	ldrb	r3, [r3, #0]
 8006042:	b2db      	uxtb	r3, r3
 8006044:	2200      	movs	r2, #0
 8006046:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800604a:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 800604e:	f04f 0200 	mov.w	r2, #0
 8006052:	f04f 0300 	mov.w	r3, #0
 8006056:	e9d7 563e 	ldrd	r5, r6, [r7, #248]	@ 0xf8
 800605a:	4634      	mov	r4, r6
 800605c:	0223      	lsls	r3, r4, #8
 800605e:	462c      	mov	r4, r5
 8006060:	4635      	mov	r5, r6
 8006062:	4626      	mov	r6, r4
 8006064:	ea43 6316 	orr.w	r3, r3, r6, lsr #24
 8006068:	0222      	lsls	r2, r4, #8
 800606a:	ea40 0402 	orr.w	r4, r0, r2
 800606e:	f8c7 40f0 	str.w	r4, [r7, #240]	@ 0xf0
 8006072:	430b      	orrs	r3, r1
 8006074:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006078:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	@ 0xf0
 800607c:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_st_velocity.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8006080:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8006084:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8006088:	1c9a      	adds	r2, r3, #2
 800608a:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800608e:	4413      	add	r3, r2
 8006090:	781b      	ldrb	r3, [r3, #0]
 8006092:	b2db      	uxtb	r3, r3
 8006094:	2200      	movs	r2, #0
 8006096:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800609a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800609e:	f04f 0200 	mov.w	r2, #0
 80060a2:	f04f 0300 	mov.w	r3, #0
 80060a6:	e9d7 563a 	ldrd	r5, r6, [r7, #232]	@ 0xe8
 80060aa:	4634      	mov	r4, r6
 80060ac:	0423      	lsls	r3, r4, #16
 80060ae:	462c      	mov	r4, r5
 80060b0:	4635      	mov	r5, r6
 80060b2:	4626      	mov	r6, r4
 80060b4:	ea43 4316 	orr.w	r3, r3, r6, lsr #16
 80060b8:	0422      	lsls	r2, r4, #16
 80060ba:	ea40 0402 	orr.w	r4, r0, r2
 80060be:	f8c7 40e0 	str.w	r4, [r7, #224]	@ 0xe0
 80060c2:	430b      	orrs	r3, r1
 80060c4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80060c8:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	@ 0xe0
 80060cc:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_st_velocity.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80060d0:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 80060d4:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80060d8:	1cda      	adds	r2, r3, #3
 80060da:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80060de:	4413      	add	r3, r2
 80060e0:	781b      	ldrb	r3, [r3, #0]
 80060e2:	b2db      	uxtb	r3, r3
 80060e4:	2200      	movs	r2, #0
 80060e6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80060ea:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80060ee:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 80060f2:	4623      	mov	r3, r4
 80060f4:	0a1b      	lsrs	r3, r3, #8
 80060f6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80060fa:	4623      	mov	r3, r4
 80060fc:	061b      	lsls	r3, r3, #24
 80060fe:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006102:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	@ 0xd0
 8006106:	461a      	mov	r2, r3
 8006108:	4302      	orrs	r2, r0
 800610a:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 800610e:	4623      	mov	r3, r4
 8006110:	430b      	orrs	r3, r1
 8006112:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006116:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	@ 0xc8
 800611a:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_st_velocity.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800611e:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8006122:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8006126:	1d1a      	adds	r2, r3, #4
 8006128:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800612c:	4413      	add	r3, r2
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	b2db      	uxtb	r3, r3
 8006132:	2200      	movs	r2, #0
 8006134:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006138:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800613c:	f04f 0200 	mov.w	r2, #0
 8006140:	f04f 0300 	mov.w	r3, #0
 8006144:	f8d7 40c0 	ldr.w	r4, [r7, #192]	@ 0xc0
 8006148:	0023      	movs	r3, r4
 800614a:	2200      	movs	r2, #0
 800614c:	ea40 0402 	orr.w	r4, r0, r2
 8006150:	f8c7 40b8 	str.w	r4, [r7, #184]	@ 0xb8
 8006154:	430b      	orrs	r3, r1
 8006156:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800615a:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	@ 0xb8
 800615e:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_st_velocity.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8006162:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8006166:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 800616a:	1d5a      	adds	r2, r3, #5
 800616c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8006170:	4413      	add	r3, r2
 8006172:	781b      	ldrb	r3, [r3, #0]
 8006174:	b2db      	uxtb	r3, r3
 8006176:	2200      	movs	r2, #0
 8006178:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800617c:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8006180:	f04f 0200 	mov.w	r2, #0
 8006184:	f04f 0300 	mov.w	r3, #0
 8006188:	f8d7 40b0 	ldr.w	r4, [r7, #176]	@ 0xb0
 800618c:	0223      	lsls	r3, r4, #8
 800618e:	2200      	movs	r2, #0
 8006190:	ea40 0402 	orr.w	r4, r0, r2
 8006194:	f8c7 40a8 	str.w	r4, [r7, #168]	@ 0xa8
 8006198:	430b      	orrs	r3, r1
 800619a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800619e:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	@ 0xa8
 80061a2:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_st_velocity.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80061a6:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 80061aa:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80061ae:	1d9a      	adds	r2, r3, #6
 80061b0:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80061b4:	4413      	add	r3, r2
 80061b6:	781b      	ldrb	r3, [r3, #0]
 80061b8:	b2db      	uxtb	r3, r3
 80061ba:	2200      	movs	r2, #0
 80061bc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80061c0:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80061c4:	f04f 0200 	mov.w	r2, #0
 80061c8:	f04f 0300 	mov.w	r3, #0
 80061cc:	f8d7 40a0 	ldr.w	r4, [r7, #160]	@ 0xa0
 80061d0:	0423      	lsls	r3, r4, #16
 80061d2:	2200      	movs	r2, #0
 80061d4:	ea40 0402 	orr.w	r4, r0, r2
 80061d8:	f8c7 4098 	str.w	r4, [r7, #152]	@ 0x98
 80061dc:	430b      	orrs	r3, r1
 80061de:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80061e2:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	@ 0x98
 80061e6:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_st_velocity.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80061ea:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 80061ee:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80061f2:	1dda      	adds	r2, r3, #7
 80061f4:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80061f8:	4413      	add	r3, r2
 80061fa:	781b      	ldrb	r3, [r3, #0]
 80061fc:	b2db      	uxtb	r3, r3
 80061fe:	2200      	movs	r2, #0
 8006200:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006204:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006208:	f04f 0200 	mov.w	r2, #0
 800620c:	f04f 0300 	mov.w	r3, #0
 8006210:	f8d7 4090 	ldr.w	r4, [r7, #144]	@ 0x90
 8006214:	0623      	lsls	r3, r4, #24
 8006216:	2200      	movs	r2, #0
 8006218:	ea40 0402 	orr.w	r4, r0, r2
 800621c:	f8c7 4088 	str.w	r4, [r7, #136]	@ 0x88
 8006220:	430b      	orrs	r3, r1
 8006222:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006226:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	@ 0x88
 800622a:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      this->st_velocity = u_st_velocity.real;
 800622e:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8006232:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8006236:	e9c3 010e 	strd	r0, r1, [r3, #56]	@ 0x38
      offset += sizeof(this->st_velocity);
 800623a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 800623e:	3308      	adds	r3, #8
 8006240:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
        memcpy( &(this->velocity[i]), &(this->st_velocity), sizeof(double));
 8006244:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8006248:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800624a:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 800624e:	00db      	lsls	r3, r3, #3
 8006250:	18d0      	adds	r0, r2, r3
 8006252:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8006256:	3338      	adds	r3, #56	@ 0x38
 8006258:	2208      	movs	r2, #8
 800625a:	4619      	mov	r1, r3
 800625c:	f00a fa42 	bl	80106e4 <memcpy>
      for( uint32_t i = 0; i < velocity_length; i++){
 8006260:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8006264:	3301      	adds	r3, #1
 8006266:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 800626a:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800626e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006270:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8006274:	4293      	cmp	r3, r2
 8006276:	f4ff aeb9 	bcc.w	8005fec <_ZN11sensor_msgs10JointState11deserializeEPh+0x552>
      }
      uint32_t effort_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800627a:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 800627e:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8006282:	4413      	add	r3, r2
 8006284:	781b      	ldrb	r3, [r3, #0]
 8006286:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
      effort_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800628a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 800628e:	1c5a      	adds	r2, r3, #1
 8006290:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8006294:	4413      	add	r3, r2
 8006296:	781b      	ldrb	r3, [r3, #0]
 8006298:	021a      	lsls	r2, r3, #8
 800629a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 800629e:	4313      	orrs	r3, r2
 80062a0:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
      effort_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80062a4:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80062a8:	1c9a      	adds	r2, r3, #2
 80062aa:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80062ae:	4413      	add	r3, r2
 80062b0:	781b      	ldrb	r3, [r3, #0]
 80062b2:	041a      	lsls	r2, r3, #16
 80062b4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80062b8:	4313      	orrs	r3, r2
 80062ba:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
      effort_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80062be:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80062c2:	1cda      	adds	r2, r3, #3
 80062c4:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80062c8:	4413      	add	r3, r2
 80062ca:	781b      	ldrb	r3, [r3, #0]
 80062cc:	061a      	lsls	r2, r3, #24
 80062ce:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80062d2:	4313      	orrs	r3, r2
 80062d4:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
      offset += sizeof(this->effort_length);
 80062d8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80062dc:	3304      	adds	r3, #4
 80062de:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
      if(effort_lengthT > effort_length)
 80062e2:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80062e6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80062e8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d90d      	bls.n	800630c <_ZN11sensor_msgs10JointState11deserializeEPh+0x872>
        this->effort = (double*)realloc(this->effort, effort_lengthT * sizeof(double));
 80062f0:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80062f4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80062f6:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80062fa:	00db      	lsls	r3, r3, #3
 80062fc:	4619      	mov	r1, r3
 80062fe:	4610      	mov	r0, r2
 8006300:	f00a f932 	bl	8010568 <realloc>
 8006304:	4602      	mov	r2, r0
 8006306:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800630a:	651a      	str	r2, [r3, #80]	@ 0x50
      effort_length = effort_lengthT;
 800630c:	f8d7 2184 	ldr.w	r2, [r7, #388]	@ 0x184
 8006310:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8006314:	6453      	str	r3, [r2, #68]	@ 0x44
      for( uint32_t i = 0; i < effort_length; i++){
 8006316:	2300      	movs	r3, #0
 8006318:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 800631c:	e11a      	b.n	8006554 <_ZN11sensor_msgs10JointState11deserializeEPh+0xaba>
      union {
        double real;
        uint64_t base;
      } u_st_effort;
      u_st_effort.base = 0;
 800631e:	f04f 0200 	mov.w	r2, #0
 8006322:	f04f 0300 	mov.w	r3, #0
 8006326:	e9c7 2362 	strd	r2, r3, [r7, #392]	@ 0x188
      u_st_effort.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800632a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 800632e:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 8006332:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8006336:	4413      	add	r3, r2
 8006338:	781b      	ldrb	r3, [r3, #0]
 800633a:	b2db      	uxtb	r3, r3
 800633c:	2200      	movs	r2, #0
 800633e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006342:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8006346:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	@ 0x80
 800634a:	461a      	mov	r2, r3
 800634c:	4302      	orrs	r2, r0
 800634e:	67ba      	str	r2, [r7, #120]	@ 0x78
 8006350:	4623      	mov	r3, r4
 8006352:	430b      	orrs	r3, r1
 8006354:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006356:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	@ 0x78
 800635a:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_st_effort.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800635e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8006362:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8006366:	1c5a      	adds	r2, r3, #1
 8006368:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800636c:	4413      	add	r3, r2
 800636e:	781b      	ldrb	r3, [r3, #0]
 8006370:	b2db      	uxtb	r3, r3
 8006372:	2200      	movs	r2, #0
 8006374:	673b      	str	r3, [r7, #112]	@ 0x70
 8006376:	677a      	str	r2, [r7, #116]	@ 0x74
 8006378:	f04f 0200 	mov.w	r2, #0
 800637c:	f04f 0300 	mov.w	r3, #0
 8006380:	e9d7 561c 	ldrd	r5, r6, [r7, #112]	@ 0x70
 8006384:	4634      	mov	r4, r6
 8006386:	0223      	lsls	r3, r4, #8
 8006388:	462c      	mov	r4, r5
 800638a:	4635      	mov	r5, r6
 800638c:	4626      	mov	r6, r4
 800638e:	ea43 6316 	orr.w	r3, r3, r6, lsr #24
 8006392:	0222      	lsls	r2, r4, #8
 8006394:	ea40 0402 	orr.w	r4, r0, r2
 8006398:	66bc      	str	r4, [r7, #104]	@ 0x68
 800639a:	430b      	orrs	r3, r1
 800639c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800639e:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	@ 0x68
 80063a2:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_st_effort.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80063a6:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 80063aa:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80063ae:	1c9a      	adds	r2, r3, #2
 80063b0:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80063b4:	4413      	add	r3, r2
 80063b6:	781b      	ldrb	r3, [r3, #0]
 80063b8:	b2db      	uxtb	r3, r3
 80063ba:	2200      	movs	r2, #0
 80063bc:	663b      	str	r3, [r7, #96]	@ 0x60
 80063be:	667a      	str	r2, [r7, #100]	@ 0x64
 80063c0:	f04f 0200 	mov.w	r2, #0
 80063c4:	f04f 0300 	mov.w	r3, #0
 80063c8:	e9d7 5618 	ldrd	r5, r6, [r7, #96]	@ 0x60
 80063cc:	4634      	mov	r4, r6
 80063ce:	0423      	lsls	r3, r4, #16
 80063d0:	462c      	mov	r4, r5
 80063d2:	4635      	mov	r5, r6
 80063d4:	4626      	mov	r6, r4
 80063d6:	ea43 4316 	orr.w	r3, r3, r6, lsr #16
 80063da:	0422      	lsls	r2, r4, #16
 80063dc:	ea40 0402 	orr.w	r4, r0, r2
 80063e0:	65bc      	str	r4, [r7, #88]	@ 0x58
 80063e2:	430b      	orrs	r3, r1
 80063e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80063e6:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	@ 0x58
 80063ea:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_st_effort.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80063ee:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 80063f2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80063f6:	1cda      	adds	r2, r3, #3
 80063f8:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80063fc:	4413      	add	r3, r2
 80063fe:	781b      	ldrb	r3, [r3, #0]
 8006400:	b2db      	uxtb	r3, r3
 8006402:	2200      	movs	r2, #0
 8006404:	653b      	str	r3, [r7, #80]	@ 0x50
 8006406:	657a      	str	r2, [r7, #84]	@ 0x54
 8006408:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 800640c:	4623      	mov	r3, r4
 800640e:	0a1b      	lsrs	r3, r3, #8
 8006410:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006412:	4623      	mov	r3, r4
 8006414:	061b      	lsls	r3, r3, #24
 8006416:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006418:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 800641c:	461a      	mov	r2, r3
 800641e:	4302      	orrs	r2, r0
 8006420:	643a      	str	r2, [r7, #64]	@ 0x40
 8006422:	4623      	mov	r3, r4
 8006424:	430b      	orrs	r3, r1
 8006426:	647b      	str	r3, [r7, #68]	@ 0x44
 8006428:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 800642c:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_st_effort.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8006430:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8006434:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8006438:	1d1a      	adds	r2, r3, #4
 800643a:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800643e:	4413      	add	r3, r2
 8006440:	781b      	ldrb	r3, [r3, #0]
 8006442:	b2db      	uxtb	r3, r3
 8006444:	2200      	movs	r2, #0
 8006446:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006448:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800644a:	f04f 0200 	mov.w	r2, #0
 800644e:	f04f 0300 	mov.w	r3, #0
 8006452:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 8006454:	0023      	movs	r3, r4
 8006456:	2200      	movs	r2, #0
 8006458:	ea40 0402 	orr.w	r4, r0, r2
 800645c:	633c      	str	r4, [r7, #48]	@ 0x30
 800645e:	430b      	orrs	r3, r1
 8006460:	637b      	str	r3, [r7, #52]	@ 0x34
 8006462:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8006466:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_st_effort.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800646a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 800646e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8006472:	1d5a      	adds	r2, r3, #5
 8006474:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8006478:	4413      	add	r3, r2
 800647a:	781b      	ldrb	r3, [r3, #0]
 800647c:	b2db      	uxtb	r3, r3
 800647e:	2200      	movs	r2, #0
 8006480:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006482:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006484:	f04f 0200 	mov.w	r2, #0
 8006488:	f04f 0300 	mov.w	r3, #0
 800648c:	6abc      	ldr	r4, [r7, #40]	@ 0x28
 800648e:	0223      	lsls	r3, r4, #8
 8006490:	2200      	movs	r2, #0
 8006492:	ea40 0402 	orr.w	r4, r0, r2
 8006496:	623c      	str	r4, [r7, #32]
 8006498:	430b      	orrs	r3, r1
 800649a:	627b      	str	r3, [r7, #36]	@ 0x24
 800649c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80064a0:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_st_effort.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80064a4:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 80064a8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80064ac:	1d9a      	adds	r2, r3, #6
 80064ae:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80064b2:	4413      	add	r3, r2
 80064b4:	781b      	ldrb	r3, [r3, #0]
 80064b6:	b2db      	uxtb	r3, r3
 80064b8:	2200      	movs	r2, #0
 80064ba:	61bb      	str	r3, [r7, #24]
 80064bc:	61fa      	str	r2, [r7, #28]
 80064be:	f04f 0200 	mov.w	r2, #0
 80064c2:	f04f 0300 	mov.w	r3, #0
 80064c6:	69bc      	ldr	r4, [r7, #24]
 80064c8:	0423      	lsls	r3, r4, #16
 80064ca:	2200      	movs	r2, #0
 80064cc:	ea40 0402 	orr.w	r4, r0, r2
 80064d0:	613c      	str	r4, [r7, #16]
 80064d2:	430b      	orrs	r3, r1
 80064d4:	617b      	str	r3, [r7, #20]
 80064d6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80064da:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_st_effort.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80064de:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 80064e2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80064e6:	1dda      	adds	r2, r3, #7
 80064e8:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80064ec:	4413      	add	r3, r2
 80064ee:	781b      	ldrb	r3, [r3, #0]
 80064f0:	b2db      	uxtb	r3, r3
 80064f2:	2200      	movs	r2, #0
 80064f4:	60bb      	str	r3, [r7, #8]
 80064f6:	60fa      	str	r2, [r7, #12]
 80064f8:	f04f 0200 	mov.w	r2, #0
 80064fc:	f04f 0300 	mov.w	r3, #0
 8006500:	68bc      	ldr	r4, [r7, #8]
 8006502:	0623      	lsls	r3, r4, #24
 8006504:	2200      	movs	r2, #0
 8006506:	ea40 0402 	orr.w	r4, r0, r2
 800650a:	603c      	str	r4, [r7, #0]
 800650c:	430b      	orrs	r3, r1
 800650e:	607b      	str	r3, [r7, #4]
 8006510:	e9d7 3400 	ldrd	r3, r4, [r7]
 8006514:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      this->st_effort = u_st_effort.real;
 8006518:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 800651c:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8006520:	e9c3 0112 	strd	r0, r1, [r3, #72]	@ 0x48
      offset += sizeof(this->st_effort);
 8006524:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8006528:	3308      	adds	r3, #8
 800652a:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
        memcpy( &(this->effort[i]), &(this->st_effort), sizeof(double));
 800652e:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8006532:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006534:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8006538:	00db      	lsls	r3, r3, #3
 800653a:	18d0      	adds	r0, r2, r3
 800653c:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8006540:	3348      	adds	r3, #72	@ 0x48
 8006542:	2208      	movs	r2, #8
 8006544:	4619      	mov	r1, r3
 8006546:	f00a f8cd 	bl	80106e4 <memcpy>
      for( uint32_t i = 0; i < effort_length; i++){
 800654a:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 800654e:	3301      	adds	r3, #1
 8006550:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 8006554:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8006558:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800655a:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 800655e:	4293      	cmp	r3, r2
 8006560:	f4ff aedd 	bcc.w	800631e <_ZN11sensor_msgs10JointState11deserializeEPh+0x884>
      }
     return offset;
 8006564:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
    }
 8006568:	4618      	mov	r0, r3
 800656a:	f507 77ea 	add.w	r7, r7, #468	@ 0x1d4
 800656e:	46bd      	mov	sp, r7
 8006570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006574 <_ZN11sensor_msgs10JointState7getTypeEv>:

    virtual const char * getType() override { return "sensor_msgs/JointState"; };
 8006574:	b480      	push	{r7}
 8006576:	b083      	sub	sp, #12
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
 800657c:	4b02      	ldr	r3, [pc, #8]	@ (8006588 <_ZN11sensor_msgs10JointState7getTypeEv+0x14>)
 800657e:	4618      	mov	r0, r3
 8006580:	370c      	adds	r7, #12
 8006582:	46bd      	mov	sp, r7
 8006584:	bc80      	pop	{r7}
 8006586:	4770      	bx	lr
 8006588:	08010a10 	.word	0x08010a10

0800658c <_ZN11sensor_msgs10JointState6getMD5Ev>:
    virtual const char * getMD5() override { return "3066dcd76a6cfaef579bd0f34173e9fd"; };
 800658c:	b480      	push	{r7}
 800658e:	b083      	sub	sp, #12
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
 8006594:	4b02      	ldr	r3, [pc, #8]	@ (80065a0 <_ZN11sensor_msgs10JointState6getMD5Ev+0x14>)
 8006596:	4618      	mov	r0, r3
 8006598:	370c      	adds	r7, #12
 800659a:	46bd      	mov	sp, r7
 800659c:	bc80      	pop	{r7}
 800659e:	4770      	bx	lr
 80065a0:	08010a28 	.word	0x08010a28

080065a4 <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b082      	sub	sp, #8
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	4618      	mov	r0, r3
 80065b0:	f7fb faf8 	bl	8001ba4 <_ZN3ros3MsgC1Ev>
 80065b4:	4a08      	ldr	r2, [pc, #32]	@ (80065d8 <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	601a      	str	r2, [r3, #0]
      linear(),
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	3308      	adds	r3, #8
 80065be:	4618      	mov	r0, r3
 80065c0:	f7fd fc86 	bl	8003ed0 <_ZN13geometry_msgs7Vector3C1Ev>
      angular()
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	3328      	adds	r3, #40	@ 0x28
 80065c8:	4618      	mov	r0, r3
 80065ca:	f7fd fc81 	bl	8003ed0 <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	4618      	mov	r0, r3
 80065d2:	3708      	adds	r7, #8
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}
 80065d8:	08010e58 	.word	0x08010e58

080065dc <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80065dc:	b580      	push	{r7, lr}
 80065de:	b084      	sub	sp, #16
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
 80065e4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80065e6:	2300      	movs	r3, #0
 80065e8:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f103 0008 	add.w	r0, r3, #8
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	683a      	ldr	r2, [r7, #0]
 80065f4:	4413      	add	r3, r2
 80065f6:	4619      	mov	r1, r3
 80065f8:	f7fd fc92 	bl	8003f20 <_ZNK13geometry_msgs7Vector39serializeEPh>
 80065fc:	4602      	mov	r2, r0
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	4413      	add	r3, r2
 8006602:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	683a      	ldr	r2, [r7, #0]
 800660e:	4413      	add	r3, r2
 8006610:	4619      	mov	r1, r3
 8006612:	f7fd fc85 	bl	8003f20 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8006616:	4602      	mov	r2, r0
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	4413      	add	r3, r2
 800661c:	60fb      	str	r3, [r7, #12]
      return offset;
 800661e:	68fb      	ldr	r3, [r7, #12]
    }
 8006620:	4618      	mov	r0, r3
 8006622:	3710      	adds	r7, #16
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}

08006628 <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8006628:	b580      	push	{r7, lr}
 800662a:	b084      	sub	sp, #16
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
 8006630:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8006632:	2300      	movs	r3, #0
 8006634:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f103 0008 	add.w	r0, r3, #8
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	683a      	ldr	r2, [r7, #0]
 8006640:	4413      	add	r3, r2
 8006642:	4619      	mov	r1, r3
 8006644:	f7fd fdde 	bl	8004204 <_ZN13geometry_msgs7Vector311deserializeEPh>
 8006648:	4602      	mov	r2, r0
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	4413      	add	r3, r2
 800664e:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	683a      	ldr	r2, [r7, #0]
 800665a:	4413      	add	r3, r2
 800665c:	4619      	mov	r1, r3
 800665e:	f7fd fdd1 	bl	8004204 <_ZN13geometry_msgs7Vector311deserializeEPh>
 8006662:	4602      	mov	r2, r0
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	4413      	add	r3, r2
 8006668:	60fb      	str	r3, [r7, #12]
     return offset;
 800666a:	68fb      	ldr	r3, [r7, #12]
    }
 800666c:	4618      	mov	r0, r3
 800666e:	3710      	adds	r7, #16
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}

08006674 <_ZN13geometry_msgs5Twist7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Twist"; };
 8006674:	b480      	push	{r7}
 8006676:	b083      	sub	sp, #12
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
 800667c:	4b02      	ldr	r3, [pc, #8]	@ (8006688 <_ZN13geometry_msgs5Twist7getTypeEv+0x14>)
 800667e:	4618      	mov	r0, r3
 8006680:	370c      	adds	r7, #12
 8006682:	46bd      	mov	sp, r7
 8006684:	bc80      	pop	{r7}
 8006686:	4770      	bx	lr
 8006688:	08010a4c 	.word	0x08010a4c

0800668c <_ZN13geometry_msgs5Twist6getMD5Ev>:
    virtual const char * getMD5() override { return "9f195f881246fdfa2798d1d3eebca84a"; };
 800668c:	b480      	push	{r7}
 800668e:	b083      	sub	sp, #12
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
 8006694:	4b02      	ldr	r3, [pc, #8]	@ (80066a0 <_ZN13geometry_msgs5Twist6getMD5Ev+0x14>)
 8006696:	4618      	mov	r0, r3
 8006698:	370c      	adds	r7, #12
 800669a:	46bd      	mov	sp, r7
 800669c:	bc80      	pop	{r7}
 800669e:	4770      	bx	lr
 80066a0:	08010a60 	.word	0x08010a60

080066a4 <_ZN13geometry_msgs5PointC1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Point():
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b082      	sub	sp, #8
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	4618      	mov	r0, r3
 80066b0:	f7fb fa78 	bl	8001ba4 <_ZN3ros3MsgC1Ev>
 80066b4:	4a0e      	ldr	r2, [pc, #56]	@ (80066f0 <_ZN13geometry_msgs5PointC1Ev+0x4c>)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	601a      	str	r2, [r3, #0]
      x(0),
 80066ba:	6879      	ldr	r1, [r7, #4]
 80066bc:	f04f 0200 	mov.w	r2, #0
 80066c0:	f04f 0300 	mov.w	r3, #0
 80066c4:	e9c1 2302 	strd	r2, r3, [r1, #8]
      y(0),
 80066c8:	6879      	ldr	r1, [r7, #4]
 80066ca:	f04f 0200 	mov.w	r2, #0
 80066ce:	f04f 0300 	mov.w	r3, #0
 80066d2:	e9c1 2304 	strd	r2, r3, [r1, #16]
      z(0)
 80066d6:	6879      	ldr	r1, [r7, #4]
 80066d8:	f04f 0200 	mov.w	r2, #0
 80066dc:	f04f 0300 	mov.w	r3, #0
 80066e0:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	4618      	mov	r0, r3
 80066e8:	3708      	adds	r7, #8
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}
 80066ee:	bf00      	nop
 80066f0:	08010e40 	.word	0x08010e40

080066f4 <_ZNK13geometry_msgs5Point9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80066f4:	b480      	push	{r7}
 80066f6:	b08b      	sub	sp, #44	@ 0x2c
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
 80066fc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80066fe:	2300      	movs	r3, #0
 8006700:	627b      	str	r3, [r7, #36]	@ 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8006708:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 800670c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006710:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006712:	6838      	ldr	r0, [r7, #0]
 8006714:	4401      	add	r1, r0
 8006716:	b2d3      	uxtb	r3, r2
 8006718:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 800671a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800671e:	f04f 0200 	mov.w	r2, #0
 8006722:	f04f 0300 	mov.w	r3, #0
 8006726:	0a02      	lsrs	r2, r0, #8
 8006728:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800672c:	0a0b      	lsrs	r3, r1, #8
 800672e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006730:	3101      	adds	r1, #1
 8006732:	6838      	ldr	r0, [r7, #0]
 8006734:	4401      	add	r1, r0
 8006736:	b2d3      	uxtb	r3, r2
 8006738:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 800673a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800673e:	f04f 0200 	mov.w	r2, #0
 8006742:	f04f 0300 	mov.w	r3, #0
 8006746:	0c02      	lsrs	r2, r0, #16
 8006748:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800674c:	0c0b      	lsrs	r3, r1, #16
 800674e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006750:	3102      	adds	r1, #2
 8006752:	6838      	ldr	r0, [r7, #0]
 8006754:	4401      	add	r1, r0
 8006756:	b2d3      	uxtb	r3, r2
 8006758:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 800675a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800675e:	f04f 0200 	mov.w	r2, #0
 8006762:	f04f 0300 	mov.w	r3, #0
 8006766:	0e02      	lsrs	r2, r0, #24
 8006768:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800676c:	0e0b      	lsrs	r3, r1, #24
 800676e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006770:	3103      	adds	r1, #3
 8006772:	6838      	ldr	r0, [r7, #0]
 8006774:	4401      	add	r1, r0
 8006776:	b2d3      	uxtb	r3, r2
 8006778:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 800677a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800677e:	f04f 0200 	mov.w	r2, #0
 8006782:	f04f 0300 	mov.w	r3, #0
 8006786:	000a      	movs	r2, r1
 8006788:	2300      	movs	r3, #0
 800678a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800678c:	3104      	adds	r1, #4
 800678e:	6838      	ldr	r0, [r7, #0]
 8006790:	4401      	add	r1, r0
 8006792:	b2d3      	uxtb	r3, r2
 8006794:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 8006796:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800679a:	f04f 0200 	mov.w	r2, #0
 800679e:	f04f 0300 	mov.w	r3, #0
 80067a2:	0a0a      	lsrs	r2, r1, #8
 80067a4:	2300      	movs	r3, #0
 80067a6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80067a8:	3105      	adds	r1, #5
 80067aa:	6838      	ldr	r0, [r7, #0]
 80067ac:	4401      	add	r1, r0
 80067ae:	b2d3      	uxtb	r3, r2
 80067b0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 80067b2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80067b6:	f04f 0200 	mov.w	r2, #0
 80067ba:	f04f 0300 	mov.w	r3, #0
 80067be:	0c0a      	lsrs	r2, r1, #16
 80067c0:	2300      	movs	r3, #0
 80067c2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80067c4:	3106      	adds	r1, #6
 80067c6:	6838      	ldr	r0, [r7, #0]
 80067c8:	4401      	add	r1, r0
 80067ca:	b2d3      	uxtb	r3, r2
 80067cc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 80067ce:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80067d2:	f04f 0200 	mov.w	r2, #0
 80067d6:	f04f 0300 	mov.w	r3, #0
 80067da:	0e0a      	lsrs	r2, r1, #24
 80067dc:	2300      	movs	r3, #0
 80067de:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80067e0:	3107      	adds	r1, #7
 80067e2:	6838      	ldr	r0, [r7, #0]
 80067e4:	4401      	add	r1, r0
 80067e6:	b2d3      	uxtb	r3, r2
 80067e8:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 80067ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ec:	3308      	adds	r3, #8
 80067ee:	627b      	str	r3, [r7, #36]	@ 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80067f6:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 80067fa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80067fe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006800:	6838      	ldr	r0, [r7, #0]
 8006802:	4401      	add	r1, r0
 8006804:	b2d3      	uxtb	r3, r2
 8006806:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8006808:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800680c:	f04f 0200 	mov.w	r2, #0
 8006810:	f04f 0300 	mov.w	r3, #0
 8006814:	0a02      	lsrs	r2, r0, #8
 8006816:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800681a:	0a0b      	lsrs	r3, r1, #8
 800681c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800681e:	3101      	adds	r1, #1
 8006820:	6838      	ldr	r0, [r7, #0]
 8006822:	4401      	add	r1, r0
 8006824:	b2d3      	uxtb	r3, r2
 8006826:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8006828:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800682c:	f04f 0200 	mov.w	r2, #0
 8006830:	f04f 0300 	mov.w	r3, #0
 8006834:	0c02      	lsrs	r2, r0, #16
 8006836:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800683a:	0c0b      	lsrs	r3, r1, #16
 800683c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800683e:	3102      	adds	r1, #2
 8006840:	6838      	ldr	r0, [r7, #0]
 8006842:	4401      	add	r1, r0
 8006844:	b2d3      	uxtb	r3, r2
 8006846:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8006848:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800684c:	f04f 0200 	mov.w	r2, #0
 8006850:	f04f 0300 	mov.w	r3, #0
 8006854:	0e02      	lsrs	r2, r0, #24
 8006856:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800685a:	0e0b      	lsrs	r3, r1, #24
 800685c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800685e:	3103      	adds	r1, #3
 8006860:	6838      	ldr	r0, [r7, #0]
 8006862:	4401      	add	r1, r0
 8006864:	b2d3      	uxtb	r3, r2
 8006866:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8006868:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800686c:	f04f 0200 	mov.w	r2, #0
 8006870:	f04f 0300 	mov.w	r3, #0
 8006874:	000a      	movs	r2, r1
 8006876:	2300      	movs	r3, #0
 8006878:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800687a:	3104      	adds	r1, #4
 800687c:	6838      	ldr	r0, [r7, #0]
 800687e:	4401      	add	r1, r0
 8006880:	b2d3      	uxtb	r3, r2
 8006882:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8006884:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006888:	f04f 0200 	mov.w	r2, #0
 800688c:	f04f 0300 	mov.w	r3, #0
 8006890:	0a0a      	lsrs	r2, r1, #8
 8006892:	2300      	movs	r3, #0
 8006894:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006896:	3105      	adds	r1, #5
 8006898:	6838      	ldr	r0, [r7, #0]
 800689a:	4401      	add	r1, r0
 800689c:	b2d3      	uxtb	r3, r2
 800689e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 80068a0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80068a4:	f04f 0200 	mov.w	r2, #0
 80068a8:	f04f 0300 	mov.w	r3, #0
 80068ac:	0c0a      	lsrs	r2, r1, #16
 80068ae:	2300      	movs	r3, #0
 80068b0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80068b2:	3106      	adds	r1, #6
 80068b4:	6838      	ldr	r0, [r7, #0]
 80068b6:	4401      	add	r1, r0
 80068b8:	b2d3      	uxtb	r3, r2
 80068ba:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 80068bc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80068c0:	f04f 0200 	mov.w	r2, #0
 80068c4:	f04f 0300 	mov.w	r3, #0
 80068c8:	0e0a      	lsrs	r2, r1, #24
 80068ca:	2300      	movs	r3, #0
 80068cc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80068ce:	3107      	adds	r1, #7
 80068d0:	6838      	ldr	r0, [r7, #0]
 80068d2:	4401      	add	r1, r0
 80068d4:	b2d3      	uxtb	r3, r2
 80068d6:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 80068d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068da:	3308      	adds	r3, #8
 80068dc:	627b      	str	r3, [r7, #36]	@ 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80068e4:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 80068e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80068ec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80068ee:	6838      	ldr	r0, [r7, #0]
 80068f0:	4401      	add	r1, r0
 80068f2:	b2d3      	uxtb	r3, r2
 80068f4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 80068f6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80068fa:	f04f 0200 	mov.w	r2, #0
 80068fe:	f04f 0300 	mov.w	r3, #0
 8006902:	0a02      	lsrs	r2, r0, #8
 8006904:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8006908:	0a0b      	lsrs	r3, r1, #8
 800690a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800690c:	3101      	adds	r1, #1
 800690e:	6838      	ldr	r0, [r7, #0]
 8006910:	4401      	add	r1, r0
 8006912:	b2d3      	uxtb	r3, r2
 8006914:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8006916:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800691a:	f04f 0200 	mov.w	r2, #0
 800691e:	f04f 0300 	mov.w	r3, #0
 8006922:	0c02      	lsrs	r2, r0, #16
 8006924:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8006928:	0c0b      	lsrs	r3, r1, #16
 800692a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800692c:	3102      	adds	r1, #2
 800692e:	6838      	ldr	r0, [r7, #0]
 8006930:	4401      	add	r1, r0
 8006932:	b2d3      	uxtb	r3, r2
 8006934:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8006936:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800693a:	f04f 0200 	mov.w	r2, #0
 800693e:	f04f 0300 	mov.w	r3, #0
 8006942:	0e02      	lsrs	r2, r0, #24
 8006944:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8006948:	0e0b      	lsrs	r3, r1, #24
 800694a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800694c:	3103      	adds	r1, #3
 800694e:	6838      	ldr	r0, [r7, #0]
 8006950:	4401      	add	r1, r0
 8006952:	b2d3      	uxtb	r3, r2
 8006954:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8006956:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800695a:	f04f 0200 	mov.w	r2, #0
 800695e:	f04f 0300 	mov.w	r3, #0
 8006962:	000a      	movs	r2, r1
 8006964:	2300      	movs	r3, #0
 8006966:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006968:	3104      	adds	r1, #4
 800696a:	6838      	ldr	r0, [r7, #0]
 800696c:	4401      	add	r1, r0
 800696e:	b2d3      	uxtb	r3, r2
 8006970:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8006972:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006976:	f04f 0200 	mov.w	r2, #0
 800697a:	f04f 0300 	mov.w	r3, #0
 800697e:	0a0a      	lsrs	r2, r1, #8
 8006980:	2300      	movs	r3, #0
 8006982:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006984:	3105      	adds	r1, #5
 8006986:	6838      	ldr	r0, [r7, #0]
 8006988:	4401      	add	r1, r0
 800698a:	b2d3      	uxtb	r3, r2
 800698c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 800698e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006992:	f04f 0200 	mov.w	r2, #0
 8006996:	f04f 0300 	mov.w	r3, #0
 800699a:	0c0a      	lsrs	r2, r1, #16
 800699c:	2300      	movs	r3, #0
 800699e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80069a0:	3106      	adds	r1, #6
 80069a2:	6838      	ldr	r0, [r7, #0]
 80069a4:	4401      	add	r1, r0
 80069a6:	b2d3      	uxtb	r3, r2
 80069a8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 80069aa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80069ae:	f04f 0200 	mov.w	r2, #0
 80069b2:	f04f 0300 	mov.w	r3, #0
 80069b6:	0e0a      	lsrs	r2, r1, #24
 80069b8:	2300      	movs	r3, #0
 80069ba:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80069bc:	3107      	adds	r1, #7
 80069be:	6838      	ldr	r0, [r7, #0]
 80069c0:	4401      	add	r1, r0
 80069c2:	b2d3      	uxtb	r3, r2
 80069c4:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 80069c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069c8:	3308      	adds	r3, #8
 80069ca:	627b      	str	r3, [r7, #36]	@ 0x24
      return offset;
 80069cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 80069ce:	4618      	mov	r0, r3
 80069d0:	372c      	adds	r7, #44	@ 0x2c
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bc80      	pop	{r7}
 80069d6:	4770      	bx	lr

080069d8 <_ZN13geometry_msgs5Point11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80069d8:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80069dc:	b0eb      	sub	sp, #428	@ 0x1ac
 80069de:	af00      	add	r7, sp, #0
 80069e0:	f8c7 0184 	str.w	r0, [r7, #388]	@ 0x184
 80069e4:	f8c7 1180 	str.w	r1, [r7, #384]	@ 0x180
    {
      int offset = 0;
 80069e8:	2300      	movs	r3, #0
 80069ea:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 80069ee:	f04f 0200 	mov.w	r2, #0
 80069f2:	f04f 0300 	mov.w	r3, #0
 80069f6:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80069fa:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 80069fe:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 8006a02:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8006a06:	4413      	add	r3, r2
 8006a08:	781b      	ldrb	r3, [r3, #0]
 8006a0a:	b2db      	uxtb	r3, r3
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	461c      	mov	r4, r3
 8006a10:	4615      	mov	r5, r2
 8006a12:	ea40 0804 	orr.w	r8, r0, r4
 8006a16:	ea41 0905 	orr.w	r9, r1, r5
 8006a1a:	e9c7 8966 	strd	r8, r9, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8006a1e:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8006a22:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8006a26:	1c5a      	adds	r2, r3, #1
 8006a28:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8006a2c:	4413      	add	r3, r2
 8006a2e:	781b      	ldrb	r3, [r3, #0]
 8006a30:	b2db      	uxtb	r3, r3
 8006a32:	2200      	movs	r2, #0
 8006a34:	469a      	mov	sl, r3
 8006a36:	4693      	mov	fp, r2
 8006a38:	f04f 0200 	mov.w	r2, #0
 8006a3c:	f04f 0300 	mov.w	r3, #0
 8006a40:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8006a44:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8006a48:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8006a4c:	ea40 0402 	orr.w	r4, r0, r2
 8006a50:	f8c7 4178 	str.w	r4, [r7, #376]	@ 0x178
 8006a54:	430b      	orrs	r3, r1
 8006a56:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8006a5a:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	@ 0x178
 8006a5e:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8006a62:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8006a66:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8006a6a:	1c9a      	adds	r2, r3, #2
 8006a6c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8006a70:	4413      	add	r3, r2
 8006a72:	781b      	ldrb	r3, [r3, #0]
 8006a74:	b2db      	uxtb	r3, r3
 8006a76:	2200      	movs	r2, #0
 8006a78:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 8006a7c:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
 8006a80:	f04f 0200 	mov.w	r2, #0
 8006a84:	f04f 0300 	mov.w	r3, #0
 8006a88:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	@ 0x170
 8006a8c:	464c      	mov	r4, r9
 8006a8e:	0423      	lsls	r3, r4, #16
 8006a90:	46c4      	mov	ip, r8
 8006a92:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
 8006a96:	4644      	mov	r4, r8
 8006a98:	0422      	lsls	r2, r4, #16
 8006a9a:	ea40 0402 	orr.w	r4, r0, r2
 8006a9e:	f8c7 4168 	str.w	r4, [r7, #360]	@ 0x168
 8006aa2:	430b      	orrs	r3, r1
 8006aa4:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 8006aa8:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	@ 0x168
 8006aac:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8006ab0:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8006ab4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8006ab8:	1cda      	adds	r2, r3, #3
 8006aba:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8006abe:	4413      	add	r3, r2
 8006ac0:	781b      	ldrb	r3, [r3, #0]
 8006ac2:	b2db      	uxtb	r3, r3
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 8006aca:	f8c7 2164 	str.w	r2, [r7, #356]	@ 0x164
 8006ace:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	@ 0x160
 8006ad2:	4623      	mov	r3, r4
 8006ad4:	0a1b      	lsrs	r3, r3, #8
 8006ad6:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8006ada:	4623      	mov	r3, r4
 8006adc:	061b      	lsls	r3, r3, #24
 8006ade:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8006ae2:	e9d7 3456 	ldrd	r3, r4, [r7, #344]	@ 0x158
 8006ae6:	461a      	mov	r2, r3
 8006ae8:	4302      	orrs	r2, r0
 8006aea:	f8c7 2150 	str.w	r2, [r7, #336]	@ 0x150
 8006aee:	4623      	mov	r3, r4
 8006af0:	430b      	orrs	r3, r1
 8006af2:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8006af6:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	@ 0x150
 8006afa:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8006afe:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8006b02:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8006b06:	1d1a      	adds	r2, r3, #4
 8006b08:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8006b0c:	4413      	add	r3, r2
 8006b0e:	781b      	ldrb	r3, [r3, #0]
 8006b10:	b2db      	uxtb	r3, r3
 8006b12:	2200      	movs	r2, #0
 8006b14:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 8006b18:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8006b1c:	f04f 0200 	mov.w	r2, #0
 8006b20:	f04f 0300 	mov.w	r3, #0
 8006b24:	f8d7 4148 	ldr.w	r4, [r7, #328]	@ 0x148
 8006b28:	0023      	movs	r3, r4
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	ea40 0402 	orr.w	r4, r0, r2
 8006b30:	f8c7 4140 	str.w	r4, [r7, #320]	@ 0x140
 8006b34:	430b      	orrs	r3, r1
 8006b36:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8006b3a:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	@ 0x140
 8006b3e:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8006b42:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8006b46:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8006b4a:	1d5a      	adds	r2, r3, #5
 8006b4c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8006b50:	4413      	add	r3, r2
 8006b52:	781b      	ldrb	r3, [r3, #0]
 8006b54:	b2db      	uxtb	r3, r3
 8006b56:	2200      	movs	r2, #0
 8006b58:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8006b5c:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 8006b60:	f04f 0200 	mov.w	r2, #0
 8006b64:	f04f 0300 	mov.w	r3, #0
 8006b68:	f8d7 4138 	ldr.w	r4, [r7, #312]	@ 0x138
 8006b6c:	0223      	lsls	r3, r4, #8
 8006b6e:	2200      	movs	r2, #0
 8006b70:	ea40 0402 	orr.w	r4, r0, r2
 8006b74:	f8c7 4130 	str.w	r4, [r7, #304]	@ 0x130
 8006b78:	430b      	orrs	r3, r1
 8006b7a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8006b7e:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	@ 0x130
 8006b82:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8006b86:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8006b8a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8006b8e:	1d9a      	adds	r2, r3, #6
 8006b90:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8006b94:	4413      	add	r3, r2
 8006b96:	781b      	ldrb	r3, [r3, #0]
 8006b98:	b2db      	uxtb	r3, r3
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8006ba0:	f8c7 212c 	str.w	r2, [r7, #300]	@ 0x12c
 8006ba4:	f04f 0200 	mov.w	r2, #0
 8006ba8:	f04f 0300 	mov.w	r3, #0
 8006bac:	f8d7 4128 	ldr.w	r4, [r7, #296]	@ 0x128
 8006bb0:	0423      	lsls	r3, r4, #16
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	ea40 0402 	orr.w	r4, r0, r2
 8006bb8:	f8c7 4120 	str.w	r4, [r7, #288]	@ 0x120
 8006bbc:	430b      	orrs	r3, r1
 8006bbe:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8006bc2:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	@ 0x120
 8006bc6:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8006bca:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8006bce:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8006bd2:	1dda      	adds	r2, r3, #7
 8006bd4:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8006bd8:	4413      	add	r3, r2
 8006bda:	781b      	ldrb	r3, [r3, #0]
 8006bdc:	b2db      	uxtb	r3, r3
 8006bde:	2200      	movs	r2, #0
 8006be0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8006be4:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8006be8:	f04f 0200 	mov.w	r2, #0
 8006bec:	f04f 0300 	mov.w	r3, #0
 8006bf0:	f8d7 4118 	ldr.w	r4, [r7, #280]	@ 0x118
 8006bf4:	0623      	lsls	r3, r4, #24
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	ea40 0402 	orr.w	r4, r0, r2
 8006bfc:	f8c7 4110 	str.w	r4, [r7, #272]	@ 0x110
 8006c00:	430b      	orrs	r3, r1
 8006c02:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8006c06:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	@ 0x110
 8006c0a:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      this->x = u_x.real;
 8006c0e:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8006c12:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8006c16:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 8006c1a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8006c1e:	3308      	adds	r3, #8
 8006c20:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8006c24:	f04f 0200 	mov.w	r2, #0
 8006c28:	f04f 0300 	mov.w	r3, #0
 8006c2c:	e9c7 2364 	strd	r2, r3, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8006c30:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8006c34:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 8006c38:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8006c3c:	4413      	add	r3, r2
 8006c3e:	781b      	ldrb	r3, [r3, #0]
 8006c40:	b2db      	uxtb	r3, r3
 8006c42:	2200      	movs	r2, #0
 8006c44:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8006c48:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 8006c4c:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	@ 0x108
 8006c50:	461a      	mov	r2, r3
 8006c52:	4302      	orrs	r2, r0
 8006c54:	f8c7 2100 	str.w	r2, [r7, #256]	@ 0x100
 8006c58:	4623      	mov	r3, r4
 8006c5a:	430b      	orrs	r3, r1
 8006c5c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006c60:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	@ 0x100
 8006c64:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8006c68:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8006c6c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8006c70:	1c5a      	adds	r2, r3, #1
 8006c72:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8006c76:	4413      	add	r3, r2
 8006c78:	781b      	ldrb	r3, [r3, #0]
 8006c7a:	b2db      	uxtb	r3, r3
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006c82:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 8006c86:	f04f 0200 	mov.w	r2, #0
 8006c8a:	f04f 0300 	mov.w	r3, #0
 8006c8e:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	@ 0xf8
 8006c92:	464c      	mov	r4, r9
 8006c94:	0223      	lsls	r3, r4, #8
 8006c96:	46c4      	mov	ip, r8
 8006c98:	ea43 631c 	orr.w	r3, r3, ip, lsr #24
 8006c9c:	4644      	mov	r4, r8
 8006c9e:	0222      	lsls	r2, r4, #8
 8006ca0:	ea40 0402 	orr.w	r4, r0, r2
 8006ca4:	f8c7 40f0 	str.w	r4, [r7, #240]	@ 0xf0
 8006ca8:	430b      	orrs	r3, r1
 8006caa:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006cae:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	@ 0xf0
 8006cb2:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8006cb6:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8006cba:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8006cbe:	1c9a      	adds	r2, r3, #2
 8006cc0:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8006cc4:	4413      	add	r3, r2
 8006cc6:	781b      	ldrb	r3, [r3, #0]
 8006cc8:	b2db      	uxtb	r3, r3
 8006cca:	2200      	movs	r2, #0
 8006ccc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006cd0:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006cd4:	f04f 0200 	mov.w	r2, #0
 8006cd8:	f04f 0300 	mov.w	r3, #0
 8006cdc:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8006ce0:	464c      	mov	r4, r9
 8006ce2:	0423      	lsls	r3, r4, #16
 8006ce4:	46c4      	mov	ip, r8
 8006ce6:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
 8006cea:	4644      	mov	r4, r8
 8006cec:	0422      	lsls	r2, r4, #16
 8006cee:	ea40 0402 	orr.w	r4, r0, r2
 8006cf2:	f8c7 40e0 	str.w	r4, [r7, #224]	@ 0xe0
 8006cf6:	430b      	orrs	r3, r1
 8006cf8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006cfc:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	@ 0xe0
 8006d00:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8006d04:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8006d08:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8006d0c:	1cda      	adds	r2, r3, #3
 8006d0e:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8006d12:	4413      	add	r3, r2
 8006d14:	781b      	ldrb	r3, [r3, #0]
 8006d16:	b2db      	uxtb	r3, r3
 8006d18:	2200      	movs	r2, #0
 8006d1a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006d1e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006d22:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8006d26:	4623      	mov	r3, r4
 8006d28:	0a1b      	lsrs	r3, r3, #8
 8006d2a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006d2e:	4623      	mov	r3, r4
 8006d30:	061b      	lsls	r3, r3, #24
 8006d32:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006d36:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	@ 0xd0
 8006d3a:	461a      	mov	r2, r3
 8006d3c:	4302      	orrs	r2, r0
 8006d3e:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8006d42:	4623      	mov	r3, r4
 8006d44:	430b      	orrs	r3, r1
 8006d46:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006d4a:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	@ 0xc8
 8006d4e:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8006d52:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8006d56:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8006d5a:	1d1a      	adds	r2, r3, #4
 8006d5c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8006d60:	4413      	add	r3, r2
 8006d62:	781b      	ldrb	r3, [r3, #0]
 8006d64:	b2db      	uxtb	r3, r3
 8006d66:	2200      	movs	r2, #0
 8006d68:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006d6c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006d70:	f04f 0200 	mov.w	r2, #0
 8006d74:	f04f 0300 	mov.w	r3, #0
 8006d78:	f8d7 40c0 	ldr.w	r4, [r7, #192]	@ 0xc0
 8006d7c:	0023      	movs	r3, r4
 8006d7e:	2200      	movs	r2, #0
 8006d80:	ea40 0402 	orr.w	r4, r0, r2
 8006d84:	f8c7 40b8 	str.w	r4, [r7, #184]	@ 0xb8
 8006d88:	430b      	orrs	r3, r1
 8006d8a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006d8e:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	@ 0xb8
 8006d92:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8006d96:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8006d9a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8006d9e:	1d5a      	adds	r2, r3, #5
 8006da0:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8006da4:	4413      	add	r3, r2
 8006da6:	781b      	ldrb	r3, [r3, #0]
 8006da8:	b2db      	uxtb	r3, r3
 8006daa:	2200      	movs	r2, #0
 8006dac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006db0:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8006db4:	f04f 0200 	mov.w	r2, #0
 8006db8:	f04f 0300 	mov.w	r3, #0
 8006dbc:	f8d7 40b0 	ldr.w	r4, [r7, #176]	@ 0xb0
 8006dc0:	0223      	lsls	r3, r4, #8
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	ea40 0402 	orr.w	r4, r0, r2
 8006dc8:	f8c7 40a8 	str.w	r4, [r7, #168]	@ 0xa8
 8006dcc:	430b      	orrs	r3, r1
 8006dce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006dd2:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	@ 0xa8
 8006dd6:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8006dda:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8006dde:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8006de2:	1d9a      	adds	r2, r3, #6
 8006de4:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8006de8:	4413      	add	r3, r2
 8006dea:	781b      	ldrb	r3, [r3, #0]
 8006dec:	b2db      	uxtb	r3, r3
 8006dee:	2200      	movs	r2, #0
 8006df0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006df4:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006df8:	f04f 0200 	mov.w	r2, #0
 8006dfc:	f04f 0300 	mov.w	r3, #0
 8006e00:	f8d7 40a0 	ldr.w	r4, [r7, #160]	@ 0xa0
 8006e04:	0423      	lsls	r3, r4, #16
 8006e06:	2200      	movs	r2, #0
 8006e08:	ea40 0402 	orr.w	r4, r0, r2
 8006e0c:	f8c7 4098 	str.w	r4, [r7, #152]	@ 0x98
 8006e10:	430b      	orrs	r3, r1
 8006e12:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006e16:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	@ 0x98
 8006e1a:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8006e1e:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8006e22:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8006e26:	1dda      	adds	r2, r3, #7
 8006e28:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8006e2c:	4413      	add	r3, r2
 8006e2e:	781b      	ldrb	r3, [r3, #0]
 8006e30:	b2db      	uxtb	r3, r3
 8006e32:	2200      	movs	r2, #0
 8006e34:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006e38:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006e3c:	f04f 0200 	mov.w	r2, #0
 8006e40:	f04f 0300 	mov.w	r3, #0
 8006e44:	f8d7 4090 	ldr.w	r4, [r7, #144]	@ 0x90
 8006e48:	0623      	lsls	r3, r4, #24
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	ea40 0402 	orr.w	r4, r0, r2
 8006e50:	f8c7 4088 	str.w	r4, [r7, #136]	@ 0x88
 8006e54:	430b      	orrs	r3, r1
 8006e56:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006e5a:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	@ 0x88
 8006e5e:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      this->y = u_y.real;
 8006e62:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8006e66:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8006e6a:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8006e6e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8006e72:	3308      	adds	r3, #8
 8006e74:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8006e78:	f04f 0200 	mov.w	r2, #0
 8006e7c:	f04f 0300 	mov.w	r3, #0
 8006e80:	e9c7 2362 	strd	r2, r3, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8006e84:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8006e88:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 8006e8c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8006e90:	4413      	add	r3, r2
 8006e92:	781b      	ldrb	r3, [r3, #0]
 8006e94:	b2db      	uxtb	r3, r3
 8006e96:	2200      	movs	r2, #0
 8006e98:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006e9c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8006ea0:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	@ 0x80
 8006ea4:	461a      	mov	r2, r3
 8006ea6:	4302      	orrs	r2, r0
 8006ea8:	67ba      	str	r2, [r7, #120]	@ 0x78
 8006eaa:	4623      	mov	r3, r4
 8006eac:	430b      	orrs	r3, r1
 8006eae:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006eb0:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	@ 0x78
 8006eb4:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8006eb8:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8006ebc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8006ec0:	1c5a      	adds	r2, r3, #1
 8006ec2:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8006ec6:	4413      	add	r3, r2
 8006ec8:	781b      	ldrb	r3, [r3, #0]
 8006eca:	b2db      	uxtb	r3, r3
 8006ecc:	2200      	movs	r2, #0
 8006ece:	673b      	str	r3, [r7, #112]	@ 0x70
 8006ed0:	677a      	str	r2, [r7, #116]	@ 0x74
 8006ed2:	f04f 0200 	mov.w	r2, #0
 8006ed6:	f04f 0300 	mov.w	r3, #0
 8006eda:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006ede:	464c      	mov	r4, r9
 8006ee0:	0223      	lsls	r3, r4, #8
 8006ee2:	46c4      	mov	ip, r8
 8006ee4:	ea43 631c 	orr.w	r3, r3, ip, lsr #24
 8006ee8:	4644      	mov	r4, r8
 8006eea:	0222      	lsls	r2, r4, #8
 8006eec:	ea40 0402 	orr.w	r4, r0, r2
 8006ef0:	66bc      	str	r4, [r7, #104]	@ 0x68
 8006ef2:	430b      	orrs	r3, r1
 8006ef4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006ef6:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	@ 0x68
 8006efa:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8006efe:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8006f02:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8006f06:	1c9a      	adds	r2, r3, #2
 8006f08:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8006f0c:	4413      	add	r3, r2
 8006f0e:	781b      	ldrb	r3, [r3, #0]
 8006f10:	b2db      	uxtb	r3, r3
 8006f12:	2200      	movs	r2, #0
 8006f14:	663b      	str	r3, [r7, #96]	@ 0x60
 8006f16:	667a      	str	r2, [r7, #100]	@ 0x64
 8006f18:	f04f 0200 	mov.w	r2, #0
 8006f1c:	f04f 0300 	mov.w	r3, #0
 8006f20:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006f24:	464c      	mov	r4, r9
 8006f26:	0423      	lsls	r3, r4, #16
 8006f28:	46c4      	mov	ip, r8
 8006f2a:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
 8006f2e:	4644      	mov	r4, r8
 8006f30:	0422      	lsls	r2, r4, #16
 8006f32:	ea40 0402 	orr.w	r4, r0, r2
 8006f36:	65bc      	str	r4, [r7, #88]	@ 0x58
 8006f38:	430b      	orrs	r3, r1
 8006f3a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006f3c:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	@ 0x58
 8006f40:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8006f44:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8006f48:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8006f4c:	1cda      	adds	r2, r3, #3
 8006f4e:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8006f52:	4413      	add	r3, r2
 8006f54:	781b      	ldrb	r3, [r3, #0]
 8006f56:	b2db      	uxtb	r3, r3
 8006f58:	2200      	movs	r2, #0
 8006f5a:	653b      	str	r3, [r7, #80]	@ 0x50
 8006f5c:	657a      	str	r2, [r7, #84]	@ 0x54
 8006f5e:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8006f62:	4623      	mov	r3, r4
 8006f64:	0a1b      	lsrs	r3, r3, #8
 8006f66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f68:	4623      	mov	r3, r4
 8006f6a:	061b      	lsls	r3, r3, #24
 8006f6c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f6e:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 8006f72:	461a      	mov	r2, r3
 8006f74:	4302      	orrs	r2, r0
 8006f76:	643a      	str	r2, [r7, #64]	@ 0x40
 8006f78:	4623      	mov	r3, r4
 8006f7a:	430b      	orrs	r3, r1
 8006f7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f7e:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8006f82:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8006f86:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8006f8a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8006f8e:	1d1a      	adds	r2, r3, #4
 8006f90:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8006f94:	4413      	add	r3, r2
 8006f96:	781b      	ldrb	r3, [r3, #0]
 8006f98:	b2db      	uxtb	r3, r3
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006f9e:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006fa0:	f04f 0200 	mov.w	r2, #0
 8006fa4:	f04f 0300 	mov.w	r3, #0
 8006fa8:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 8006faa:	0023      	movs	r3, r4
 8006fac:	2200      	movs	r2, #0
 8006fae:	ea40 0402 	orr.w	r4, r0, r2
 8006fb2:	633c      	str	r4, [r7, #48]	@ 0x30
 8006fb4:	430b      	orrs	r3, r1
 8006fb6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fb8:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8006fbc:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8006fc0:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8006fc4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8006fc8:	1d5a      	adds	r2, r3, #5
 8006fca:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8006fce:	4413      	add	r3, r2
 8006fd0:	781b      	ldrb	r3, [r3, #0]
 8006fd2:	b2db      	uxtb	r3, r3
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006fd8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006fda:	f04f 0200 	mov.w	r2, #0
 8006fde:	f04f 0300 	mov.w	r3, #0
 8006fe2:	6abc      	ldr	r4, [r7, #40]	@ 0x28
 8006fe4:	0223      	lsls	r3, r4, #8
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	ea40 0402 	orr.w	r4, r0, r2
 8006fec:	623c      	str	r4, [r7, #32]
 8006fee:	430b      	orrs	r3, r1
 8006ff0:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ff2:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8006ff6:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8006ffa:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8006ffe:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8007002:	3306      	adds	r3, #6
 8007004:	f8d7 2180 	ldr.w	r2, [r7, #384]	@ 0x180
 8007008:	4413      	add	r3, r2
 800700a:	781b      	ldrb	r3, [r3, #0]
 800700c:	b2db      	uxtb	r3, r3
 800700e:	2200      	movs	r2, #0
 8007010:	61bb      	str	r3, [r7, #24]
 8007012:	61fa      	str	r2, [r7, #28]
 8007014:	f04f 0200 	mov.w	r2, #0
 8007018:	f04f 0300 	mov.w	r3, #0
 800701c:	69bc      	ldr	r4, [r7, #24]
 800701e:	0423      	lsls	r3, r4, #16
 8007020:	2200      	movs	r2, #0
 8007022:	ea40 0402 	orr.w	r4, r0, r2
 8007026:	613c      	str	r4, [r7, #16]
 8007028:	430b      	orrs	r3, r1
 800702a:	617b      	str	r3, [r7, #20]
 800702c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8007030:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8007034:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8007038:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 800703c:	3307      	adds	r3, #7
 800703e:	f8d7 2180 	ldr.w	r2, [r7, #384]	@ 0x180
 8007042:	4413      	add	r3, r2
 8007044:	781b      	ldrb	r3, [r3, #0]
 8007046:	b2db      	uxtb	r3, r3
 8007048:	2200      	movs	r2, #0
 800704a:	60bb      	str	r3, [r7, #8]
 800704c:	60fa      	str	r2, [r7, #12]
 800704e:	f04f 0200 	mov.w	r2, #0
 8007052:	f04f 0300 	mov.w	r3, #0
 8007056:	68bc      	ldr	r4, [r7, #8]
 8007058:	0623      	lsls	r3, r4, #24
 800705a:	2200      	movs	r2, #0
 800705c:	ea40 0402 	orr.w	r4, r0, r2
 8007060:	603c      	str	r4, [r7, #0]
 8007062:	430b      	orrs	r3, r1
 8007064:	607b      	str	r3, [r7, #4]
 8007066:	e9d7 3400 	ldrd	r3, r4, [r7]
 800706a:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      this->z = u_z.real;
 800706e:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 8007072:	f8d7 1184 	ldr.w	r1, [r7, #388]	@ 0x184
 8007076:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 800707a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 800707e:	3308      	adds	r3, #8
 8007080:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
     return offset;
 8007084:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
    }
 8007088:	4618      	mov	r0, r3
 800708a:	f507 77d6 	add.w	r7, r7, #428	@ 0x1ac
 800708e:	46bd      	mov	sp, r7
 8007090:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8007094:	4770      	bx	lr
	...

08007098 <_ZN13geometry_msgs5Point7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Point"; };
 8007098:	b480      	push	{r7}
 800709a:	b083      	sub	sp, #12
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
 80070a0:	4b02      	ldr	r3, [pc, #8]	@ (80070ac <_ZN13geometry_msgs5Point7getTypeEv+0x14>)
 80070a2:	4618      	mov	r0, r3
 80070a4:	370c      	adds	r7, #12
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bc80      	pop	{r7}
 80070aa:	4770      	bx	lr
 80070ac:	08010a84 	.word	0x08010a84

080070b0 <_ZN13geometry_msgs5Point6getMD5Ev>:
    virtual const char * getMD5() override { return "4a842b65f413084dc2b10fb484ea7f17"; };
 80070b0:	b480      	push	{r7}
 80070b2:	b083      	sub	sp, #12
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
 80070b8:	4b02      	ldr	r3, [pc, #8]	@ (80070c4 <_ZN13geometry_msgs5Point6getMD5Ev+0x14>)
 80070ba:	4618      	mov	r0, r3
 80070bc:	370c      	adds	r7, #12
 80070be:	46bd      	mov	sp, r7
 80070c0:	bc80      	pop	{r7}
 80070c2:	4770      	bx	lr
 80070c4:	080109b8 	.word	0x080109b8

080070c8 <_ZN13geometry_msgs4PoseC1Ev>:
      typedef geometry_msgs::Point _position_type;
      _position_type position;
      typedef geometry_msgs::Quaternion _orientation_type;
      _orientation_type orientation;

    Pose():
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b082      	sub	sp, #8
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
      position(),
      orientation()
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	4618      	mov	r0, r3
 80070d4:	f7fa fd66 	bl	8001ba4 <_ZN3ros3MsgC1Ev>
 80070d8:	4a08      	ldr	r2, [pc, #32]	@ (80070fc <_ZN13geometry_msgs4PoseC1Ev+0x34>)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	601a      	str	r2, [r3, #0]
      position(),
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	3308      	adds	r3, #8
 80070e2:	4618      	mov	r0, r3
 80070e4:	f7ff fade 	bl	80066a4 <_ZN13geometry_msgs5PointC1Ev>
      orientation()
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	3328      	adds	r3, #40	@ 0x28
 80070ec:	4618      	mov	r0, r3
 80070ee:	f7fc f835 	bl	800315c <_ZN13geometry_msgs10QuaternionC1Ev>
    {
    }
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	4618      	mov	r0, r3
 80070f6:	3708      	adds	r7, #8
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}
 80070fc:	08010e28 	.word	0x08010e28

08007100 <_ZNK13geometry_msgs4Pose9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8007100:	b580      	push	{r7, lr}
 8007102:	b084      	sub	sp, #16
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800710a:	2300      	movs	r3, #0
 800710c:	60fb      	str	r3, [r7, #12]
      offset += this->position.serialize(outbuffer + offset);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f103 0008 	add.w	r0, r3, #8
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	683a      	ldr	r2, [r7, #0]
 8007118:	4413      	add	r3, r2
 800711a:	4619      	mov	r1, r3
 800711c:	f7ff faea 	bl	80066f4 <_ZNK13geometry_msgs5Point9serializeEPh>
 8007120:	4602      	mov	r2, r0
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	4413      	add	r3, r2
 8007126:	60fb      	str	r3, [r7, #12]
      offset += this->orientation.serialize(outbuffer + offset);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	683a      	ldr	r2, [r7, #0]
 8007132:	4413      	add	r3, r2
 8007134:	4619      	mov	r1, r3
 8007136:	f7fc f83f 	bl	80031b8 <_ZNK13geometry_msgs10Quaternion9serializeEPh>
 800713a:	4602      	mov	r2, r0
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	4413      	add	r3, r2
 8007140:	60fb      	str	r3, [r7, #12]
      return offset;
 8007142:	68fb      	ldr	r3, [r7, #12]
    }
 8007144:	4618      	mov	r0, r3
 8007146:	3710      	adds	r7, #16
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}

0800714c <_ZN13geometry_msgs4Pose11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800714c:	b580      	push	{r7, lr}
 800714e:	b084      	sub	sp, #16
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
 8007154:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8007156:	2300      	movs	r3, #0
 8007158:	60fb      	str	r3, [r7, #12]
      offset += this->position.deserialize(inbuffer + offset);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f103 0008 	add.w	r0, r3, #8
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	683a      	ldr	r2, [r7, #0]
 8007164:	4413      	add	r3, r2
 8007166:	4619      	mov	r1, r3
 8007168:	f7ff fc36 	bl	80069d8 <_ZN13geometry_msgs5Point11deserializeEPh>
 800716c:	4602      	mov	r2, r0
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	4413      	add	r3, r2
 8007172:	60fb      	str	r3, [r7, #12]
      offset += this->orientation.deserialize(inbuffer + offset);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	683a      	ldr	r2, [r7, #0]
 800717e:	4413      	add	r3, r2
 8007180:	4619      	mov	r1, r3
 8007182:	f7fc fa02 	bl	800358a <_ZN13geometry_msgs10Quaternion11deserializeEPh>
 8007186:	4602      	mov	r2, r0
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	4413      	add	r3, r2
 800718c:	60fb      	str	r3, [r7, #12]
     return offset;
 800718e:	68fb      	ldr	r3, [r7, #12]
    }
 8007190:	4618      	mov	r0, r3
 8007192:	3710      	adds	r7, #16
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}

08007198 <_ZN13geometry_msgs4Pose7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Pose"; };
 8007198:	b480      	push	{r7}
 800719a:	b083      	sub	sp, #12
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
 80071a0:	4b02      	ldr	r3, [pc, #8]	@ (80071ac <_ZN13geometry_msgs4Pose7getTypeEv+0x14>)
 80071a2:	4618      	mov	r0, r3
 80071a4:	370c      	adds	r7, #12
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bc80      	pop	{r7}
 80071aa:	4770      	bx	lr
 80071ac:	08010a98 	.word	0x08010a98

080071b0 <_ZN13geometry_msgs4Pose6getMD5Ev>:
    virtual const char * getMD5() override { return "e45d45a5a1ce597b249e23fb30fc871f"; };
 80071b0:	b480      	push	{r7}
 80071b2:	b083      	sub	sp, #12
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
 80071b8:	4b02      	ldr	r3, [pc, #8]	@ (80071c4 <_ZN13geometry_msgs4Pose6getMD5Ev+0x14>)
 80071ba:	4618      	mov	r0, r3
 80071bc:	370c      	adds	r7, #12
 80071be:	46bd      	mov	sp, r7
 80071c0:	bc80      	pop	{r7}
 80071c2:	4770      	bx	lr
 80071c4:	08010aac 	.word	0x08010aac

080071c8 <_ZN13geometry_msgs18PoseWithCovarianceC1Ev>:
    public:
      typedef geometry_msgs::Pose _pose_type;
      _pose_type pose;
      double covariance[36];

    PoseWithCovariance():
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b082      	sub	sp, #8
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
      pose(),
      covariance()
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	4618      	mov	r0, r3
 80071d4:	f7fa fce6 	bl	8001ba4 <_ZN3ros3MsgC1Ev>
 80071d8:	4a0d      	ldr	r2, [pc, #52]	@ (8007210 <_ZN13geometry_msgs18PoseWithCovarianceC1Ev+0x48>)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	601a      	str	r2, [r3, #0]
      pose(),
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	3308      	adds	r3, #8
 80071e2:	4618      	mov	r0, r3
 80071e4:	f7ff ff70 	bl	80070c8 <_ZN13geometry_msgs4PoseC1Ev>
      covariance()
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f103 0258 	add.w	r2, r3, #88	@ 0x58
 80071ee:	2323      	movs	r3, #35	@ 0x23
 80071f0:	e007      	b.n	8007202 <_ZN13geometry_msgs18PoseWithCovarianceC1Ev+0x3a>
 80071f2:	f04f 0000 	mov.w	r0, #0
 80071f6:	f04f 0100 	mov.w	r1, #0
 80071fa:	e9c2 0100 	strd	r0, r1, [r2]
 80071fe:	3b01      	subs	r3, #1
 8007200:	3208      	adds	r2, #8
 8007202:	2b00      	cmp	r3, #0
 8007204:	daf5      	bge.n	80071f2 <_ZN13geometry_msgs18PoseWithCovarianceC1Ev+0x2a>
    {
    }
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	4618      	mov	r0, r3
 800720a:	3708      	adds	r7, #8
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}
 8007210:	08010e10 	.word	0x08010e10

08007214 <_ZNK13geometry_msgs18PoseWithCovariance9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8007214:	b580      	push	{r7, lr}
 8007216:	b086      	sub	sp, #24
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
 800721c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800721e:	2300      	movs	r3, #0
 8007220:	617b      	str	r3, [r7, #20]
      offset += this->pose.serialize(outbuffer + offset);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f103 0008 	add.w	r0, r3, #8
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	683a      	ldr	r2, [r7, #0]
 800722c:	4413      	add	r3, r2
 800722e:	4619      	mov	r1, r3
 8007230:	f7ff ff66 	bl	8007100 <_ZNK13geometry_msgs4Pose9serializeEPh>
 8007234:	4602      	mov	r2, r0
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	4413      	add	r3, r2
 800723a:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 36; i++){
 800723c:	2300      	movs	r3, #0
 800723e:	613b      	str	r3, [r7, #16]
 8007240:	e07d      	b.n	800733e <_ZNK13geometry_msgs18PoseWithCovariance9serializeEPh+0x12a>
      union {
        double real;
        uint64_t base;
      } u_covariancei;
      u_covariancei.real = this->covariance[i];
 8007242:	687a      	ldr	r2, [r7, #4]
 8007244:	693b      	ldr	r3, [r7, #16]
 8007246:	330b      	adds	r3, #11
 8007248:	00db      	lsls	r3, r3, #3
 800724a:	4413      	add	r3, r2
 800724c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007250:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_covariancei.base >> (8 * 0)) & 0xFF;
 8007254:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007258:	6979      	ldr	r1, [r7, #20]
 800725a:	6838      	ldr	r0, [r7, #0]
 800725c:	4401      	add	r1, r0
 800725e:	b2d3      	uxtb	r3, r2
 8007260:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_covariancei.base >> (8 * 1)) & 0xFF;
 8007262:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007266:	f04f 0200 	mov.w	r2, #0
 800726a:	f04f 0300 	mov.w	r3, #0
 800726e:	0a02      	lsrs	r2, r0, #8
 8007270:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8007274:	0a0b      	lsrs	r3, r1, #8
 8007276:	6979      	ldr	r1, [r7, #20]
 8007278:	3101      	adds	r1, #1
 800727a:	6838      	ldr	r0, [r7, #0]
 800727c:	4401      	add	r1, r0
 800727e:	b2d3      	uxtb	r3, r2
 8007280:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_covariancei.base >> (8 * 2)) & 0xFF;
 8007282:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007286:	f04f 0200 	mov.w	r2, #0
 800728a:	f04f 0300 	mov.w	r3, #0
 800728e:	0c02      	lsrs	r2, r0, #16
 8007290:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8007294:	0c0b      	lsrs	r3, r1, #16
 8007296:	6979      	ldr	r1, [r7, #20]
 8007298:	3102      	adds	r1, #2
 800729a:	6838      	ldr	r0, [r7, #0]
 800729c:	4401      	add	r1, r0
 800729e:	b2d3      	uxtb	r3, r2
 80072a0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_covariancei.base >> (8 * 3)) & 0xFF;
 80072a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80072a6:	f04f 0200 	mov.w	r2, #0
 80072aa:	f04f 0300 	mov.w	r3, #0
 80072ae:	0e02      	lsrs	r2, r0, #24
 80072b0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80072b4:	0e0b      	lsrs	r3, r1, #24
 80072b6:	6979      	ldr	r1, [r7, #20]
 80072b8:	3103      	adds	r1, #3
 80072ba:	6838      	ldr	r0, [r7, #0]
 80072bc:	4401      	add	r1, r0
 80072be:	b2d3      	uxtb	r3, r2
 80072c0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_covariancei.base >> (8 * 4)) & 0xFF;
 80072c2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80072c6:	f04f 0200 	mov.w	r2, #0
 80072ca:	f04f 0300 	mov.w	r3, #0
 80072ce:	000a      	movs	r2, r1
 80072d0:	2300      	movs	r3, #0
 80072d2:	6979      	ldr	r1, [r7, #20]
 80072d4:	3104      	adds	r1, #4
 80072d6:	6838      	ldr	r0, [r7, #0]
 80072d8:	4401      	add	r1, r0
 80072da:	b2d3      	uxtb	r3, r2
 80072dc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_covariancei.base >> (8 * 5)) & 0xFF;
 80072de:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80072e2:	f04f 0200 	mov.w	r2, #0
 80072e6:	f04f 0300 	mov.w	r3, #0
 80072ea:	0a0a      	lsrs	r2, r1, #8
 80072ec:	2300      	movs	r3, #0
 80072ee:	6979      	ldr	r1, [r7, #20]
 80072f0:	3105      	adds	r1, #5
 80072f2:	6838      	ldr	r0, [r7, #0]
 80072f4:	4401      	add	r1, r0
 80072f6:	b2d3      	uxtb	r3, r2
 80072f8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_covariancei.base >> (8 * 6)) & 0xFF;
 80072fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80072fe:	f04f 0200 	mov.w	r2, #0
 8007302:	f04f 0300 	mov.w	r3, #0
 8007306:	0c0a      	lsrs	r2, r1, #16
 8007308:	2300      	movs	r3, #0
 800730a:	6979      	ldr	r1, [r7, #20]
 800730c:	3106      	adds	r1, #6
 800730e:	6838      	ldr	r0, [r7, #0]
 8007310:	4401      	add	r1, r0
 8007312:	b2d3      	uxtb	r3, r2
 8007314:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_covariancei.base >> (8 * 7)) & 0xFF;
 8007316:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800731a:	f04f 0200 	mov.w	r2, #0
 800731e:	f04f 0300 	mov.w	r3, #0
 8007322:	0e0a      	lsrs	r2, r1, #24
 8007324:	2300      	movs	r3, #0
 8007326:	6979      	ldr	r1, [r7, #20]
 8007328:	3107      	adds	r1, #7
 800732a:	6838      	ldr	r0, [r7, #0]
 800732c:	4401      	add	r1, r0
 800732e:	b2d3      	uxtb	r3, r2
 8007330:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->covariance[i]);
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	3308      	adds	r3, #8
 8007336:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 36; i++){
 8007338:	693b      	ldr	r3, [r7, #16]
 800733a:	3301      	adds	r3, #1
 800733c:	613b      	str	r3, [r7, #16]
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	2b23      	cmp	r3, #35	@ 0x23
 8007342:	f67f af7e 	bls.w	8007242 <_ZNK13geometry_msgs18PoseWithCovariance9serializeEPh+0x2e>
      }
      return offset;
 8007346:	697b      	ldr	r3, [r7, #20]
    }
 8007348:	4618      	mov	r0, r3
 800734a:	3718      	adds	r7, #24
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}

08007350 <_ZN13geometry_msgs18PoseWithCovariance11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8007350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007354:	b0a3      	sub	sp, #140	@ 0x8c
 8007356:	af00      	add	r7, sp, #0
 8007358:	6778      	str	r0, [r7, #116]	@ 0x74
 800735a:	6739      	str	r1, [r7, #112]	@ 0x70
    {
      int offset = 0;
 800735c:	2300      	movs	r3, #0
 800735e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      offset += this->pose.deserialize(inbuffer + offset);
 8007362:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007364:	f103 0008 	add.w	r0, r3, #8
 8007368:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800736c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800736e:	4413      	add	r3, r2
 8007370:	4619      	mov	r1, r3
 8007372:	f7ff feeb 	bl	800714c <_ZN13geometry_msgs4Pose11deserializeEPh>
 8007376:	4602      	mov	r2, r0
 8007378:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800737c:	4413      	add	r3, r2
 800737e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      for( uint32_t i = 0; i < 36; i++){
 8007382:	2300      	movs	r3, #0
 8007384:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007388:	e0f7      	b.n	800757a <_ZN13geometry_msgs18PoseWithCovariance11deserializeEPh+0x22a>
      union {
        double real;
        uint64_t base;
      } u_covariancei;
      u_covariancei.base = 0;
 800738a:	f04f 0200 	mov.w	r2, #0
 800738e:	f04f 0300 	mov.w	r3, #0
 8007392:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8007396:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800739a:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800739e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80073a0:	4413      	add	r3, r2
 80073a2:	781b      	ldrb	r3, [r3, #0]
 80073a4:	b2db      	uxtb	r3, r3
 80073a6:	2200      	movs	r2, #0
 80073a8:	663b      	str	r3, [r7, #96]	@ 0x60
 80073aa:	667a      	str	r2, [r7, #100]	@ 0x64
 80073ac:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80073b0:	4616      	mov	r6, r2
 80073b2:	4306      	orrs	r6, r0
 80073b4:	65be      	str	r6, [r7, #88]	@ 0x58
 80073b6:	430b      	orrs	r3, r1
 80073b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80073ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80073be:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80073c2:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80073c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80073ca:	1c5a      	adds	r2, r3, #1
 80073cc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80073ce:	4413      	add	r3, r2
 80073d0:	781b      	ldrb	r3, [r3, #0]
 80073d2:	b2db      	uxtb	r3, r3
 80073d4:	2200      	movs	r2, #0
 80073d6:	469a      	mov	sl, r3
 80073d8:	4693      	mov	fp, r2
 80073da:	f04f 0200 	mov.w	r2, #0
 80073de:	f04f 0300 	mov.w	r3, #0
 80073e2:	ea4f 230b 	mov.w	r3, fp, lsl #8
 80073e6:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 80073ea:	ea4f 220a 	mov.w	r2, sl, lsl #8
 80073ee:	ea40 0602 	orr.w	r6, r0, r2
 80073f2:	653e      	str	r6, [r7, #80]	@ 0x50
 80073f4:	430b      	orrs	r3, r1
 80073f6:	657b      	str	r3, [r7, #84]	@ 0x54
 80073f8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80073fc:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8007400:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8007404:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007408:	1c9a      	adds	r2, r3, #2
 800740a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800740c:	4413      	add	r3, r2
 800740e:	781b      	ldrb	r3, [r3, #0]
 8007410:	b2db      	uxtb	r3, r3
 8007412:	2200      	movs	r2, #0
 8007414:	4698      	mov	r8, r3
 8007416:	4691      	mov	r9, r2
 8007418:	f04f 0200 	mov.w	r2, #0
 800741c:	f04f 0300 	mov.w	r3, #0
 8007420:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8007424:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8007428:	ea4f 4208 	mov.w	r2, r8, lsl #16
 800742c:	ea40 0602 	orr.w	r6, r0, r2
 8007430:	64be      	str	r6, [r7, #72]	@ 0x48
 8007432:	430b      	orrs	r3, r1
 8007434:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007436:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800743a:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800743e:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8007442:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007446:	1cda      	adds	r2, r3, #3
 8007448:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800744a:	4413      	add	r3, r2
 800744c:	781b      	ldrb	r3, [r3, #0]
 800744e:	b2db      	uxtb	r3, r3
 8007450:	2200      	movs	r2, #0
 8007452:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007454:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007456:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007458:	0a1d      	lsrs	r5, r3, #8
 800745a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800745c:	061c      	lsls	r4, r3, #24
 800745e:	ea40 0304 	orr.w	r3, r0, r4
 8007462:	643b      	str	r3, [r7, #64]	@ 0x40
 8007464:	ea41 0305 	orr.w	r3, r1, r5
 8007468:	647b      	str	r3, [r7, #68]	@ 0x44
 800746a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800746e:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8007472:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8007476:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800747a:	1d1a      	adds	r2, r3, #4
 800747c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800747e:	4413      	add	r3, r2
 8007480:	781b      	ldrb	r3, [r3, #0]
 8007482:	b2db      	uxtb	r3, r3
 8007484:	2200      	movs	r2, #0
 8007486:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007488:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800748a:	f04f 0200 	mov.w	r2, #0
 800748e:	f04f 0300 	mov.w	r3, #0
 8007492:	6bbe      	ldr	r6, [r7, #56]	@ 0x38
 8007494:	0033      	movs	r3, r6
 8007496:	2200      	movs	r2, #0
 8007498:	ea40 0602 	orr.w	r6, r0, r2
 800749c:	633e      	str	r6, [r7, #48]	@ 0x30
 800749e:	430b      	orrs	r3, r1
 80074a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80074a2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80074a6:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80074aa:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80074ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80074b2:	1d5a      	adds	r2, r3, #5
 80074b4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80074b6:	4413      	add	r3, r2
 80074b8:	781b      	ldrb	r3, [r3, #0]
 80074ba:	b2db      	uxtb	r3, r3
 80074bc:	2200      	movs	r2, #0
 80074be:	62bb      	str	r3, [r7, #40]	@ 0x28
 80074c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80074c2:	f04f 0200 	mov.w	r2, #0
 80074c6:	f04f 0300 	mov.w	r3, #0
 80074ca:	6abe      	ldr	r6, [r7, #40]	@ 0x28
 80074cc:	0233      	lsls	r3, r6, #8
 80074ce:	2200      	movs	r2, #0
 80074d0:	ea40 0602 	orr.w	r6, r0, r2
 80074d4:	623e      	str	r6, [r7, #32]
 80074d6:	430b      	orrs	r3, r1
 80074d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80074da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80074de:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80074e2:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80074e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80074ea:	1d9a      	adds	r2, r3, #6
 80074ec:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80074ee:	4413      	add	r3, r2
 80074f0:	781b      	ldrb	r3, [r3, #0]
 80074f2:	b2db      	uxtb	r3, r3
 80074f4:	2200      	movs	r2, #0
 80074f6:	61bb      	str	r3, [r7, #24]
 80074f8:	61fa      	str	r2, [r7, #28]
 80074fa:	f04f 0200 	mov.w	r2, #0
 80074fe:	f04f 0300 	mov.w	r3, #0
 8007502:	69be      	ldr	r6, [r7, #24]
 8007504:	0433      	lsls	r3, r6, #16
 8007506:	2200      	movs	r2, #0
 8007508:	ea40 0602 	orr.w	r6, r0, r2
 800750c:	613e      	str	r6, [r7, #16]
 800750e:	430b      	orrs	r3, r1
 8007510:	617b      	str	r3, [r7, #20]
 8007512:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007516:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800751a:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800751e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007522:	1dda      	adds	r2, r3, #7
 8007524:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007526:	4413      	add	r3, r2
 8007528:	781b      	ldrb	r3, [r3, #0]
 800752a:	b2db      	uxtb	r3, r3
 800752c:	2200      	movs	r2, #0
 800752e:	60bb      	str	r3, [r7, #8]
 8007530:	60fa      	str	r2, [r7, #12]
 8007532:	f04f 0200 	mov.w	r2, #0
 8007536:	f04f 0300 	mov.w	r3, #0
 800753a:	68be      	ldr	r6, [r7, #8]
 800753c:	0633      	lsls	r3, r6, #24
 800753e:	2200      	movs	r2, #0
 8007540:	ea40 0602 	orr.w	r6, r0, r2
 8007544:	603e      	str	r6, [r7, #0]
 8007546:	430b      	orrs	r3, r1
 8007548:	607b      	str	r3, [r7, #4]
 800754a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800754e:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
      this->covariance[i] = u_covariancei.real;
 8007552:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8007556:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8007558:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800755c:	330b      	adds	r3, #11
 800755e:	00db      	lsls	r3, r3, #3
 8007560:	4413      	add	r3, r2
 8007562:	e9c3 0100 	strd	r0, r1, [r3]
      offset += sizeof(this->covariance[i]);
 8007566:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800756a:	3308      	adds	r3, #8
 800756c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      for( uint32_t i = 0; i < 36; i++){
 8007570:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007574:	3301      	adds	r3, #1
 8007576:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800757a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800757e:	2b23      	cmp	r3, #35	@ 0x23
 8007580:	f67f af03 	bls.w	800738a <_ZN13geometry_msgs18PoseWithCovariance11deserializeEPh+0x3a>
      }
     return offset;
 8007584:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
    }
 8007588:	4618      	mov	r0, r3
 800758a:	378c      	adds	r7, #140	@ 0x8c
 800758c:	46bd      	mov	sp, r7
 800758e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08007594 <_ZN13geometry_msgs18PoseWithCovariance7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/PoseWithCovariance"; };
 8007594:	b480      	push	{r7}
 8007596:	b083      	sub	sp, #12
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	4b02      	ldr	r3, [pc, #8]	@ (80075a8 <_ZN13geometry_msgs18PoseWithCovariance7getTypeEv+0x14>)
 800759e:	4618      	mov	r0, r3
 80075a0:	370c      	adds	r7, #12
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bc80      	pop	{r7}
 80075a6:	4770      	bx	lr
 80075a8:	08010ad0 	.word	0x08010ad0

080075ac <_ZN13geometry_msgs18PoseWithCovariance6getMD5Ev>:
    virtual const char * getMD5() override { return "c23e848cf1b7533a8d7c259073a97e6f"; };
 80075ac:	b480      	push	{r7}
 80075ae:	b083      	sub	sp, #12
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
 80075b4:	4b02      	ldr	r3, [pc, #8]	@ (80075c0 <_ZN13geometry_msgs18PoseWithCovariance6getMD5Ev+0x14>)
 80075b6:	4618      	mov	r0, r3
 80075b8:	370c      	adds	r7, #12
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bc80      	pop	{r7}
 80075be:	4770      	bx	lr
 80075c0:	08010af4 	.word	0x08010af4

080075c4 <_ZN13geometry_msgs19TwistWithCovarianceC1Ev>:
    public:
      typedef geometry_msgs::Twist _twist_type;
      _twist_type twist;
      double covariance[36];

    TwistWithCovariance():
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b082      	sub	sp, #8
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
      twist(),
      covariance()
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	4618      	mov	r0, r3
 80075d0:	f7fa fae8 	bl	8001ba4 <_ZN3ros3MsgC1Ev>
 80075d4:	4a0d      	ldr	r2, [pc, #52]	@ (800760c <_ZN13geometry_msgs19TwistWithCovarianceC1Ev+0x48>)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	601a      	str	r2, [r3, #0]
      twist(),
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	3308      	adds	r3, #8
 80075de:	4618      	mov	r0, r3
 80075e0:	f7fe ffe0 	bl	80065a4 <_ZN13geometry_msgs5TwistC1Ev>
      covariance()
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f103 0250 	add.w	r2, r3, #80	@ 0x50
 80075ea:	2323      	movs	r3, #35	@ 0x23
 80075ec:	e007      	b.n	80075fe <_ZN13geometry_msgs19TwistWithCovarianceC1Ev+0x3a>
 80075ee:	f04f 0000 	mov.w	r0, #0
 80075f2:	f04f 0100 	mov.w	r1, #0
 80075f6:	e9c2 0100 	strd	r0, r1, [r2]
 80075fa:	3b01      	subs	r3, #1
 80075fc:	3208      	adds	r2, #8
 80075fe:	2b00      	cmp	r3, #0
 8007600:	daf5      	bge.n	80075ee <_ZN13geometry_msgs19TwistWithCovarianceC1Ev+0x2a>
    {
    }
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	4618      	mov	r0, r3
 8007606:	3708      	adds	r7, #8
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}
 800760c:	08010df8 	.word	0x08010df8

08007610 <_ZNK13geometry_msgs19TwistWithCovariance9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8007610:	b580      	push	{r7, lr}
 8007612:	b086      	sub	sp, #24
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
 8007618:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800761a:	2300      	movs	r3, #0
 800761c:	617b      	str	r3, [r7, #20]
      offset += this->twist.serialize(outbuffer + offset);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f103 0008 	add.w	r0, r3, #8
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	683a      	ldr	r2, [r7, #0]
 8007628:	4413      	add	r3, r2
 800762a:	4619      	mov	r1, r3
 800762c:	f7fe ffd6 	bl	80065dc <_ZNK13geometry_msgs5Twist9serializeEPh>
 8007630:	4602      	mov	r2, r0
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	4413      	add	r3, r2
 8007636:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 36; i++){
 8007638:	2300      	movs	r3, #0
 800763a:	613b      	str	r3, [r7, #16]
 800763c:	e07d      	b.n	800773a <_ZNK13geometry_msgs19TwistWithCovariance9serializeEPh+0x12a>
      union {
        double real;
        uint64_t base;
      } u_covariancei;
      u_covariancei.real = this->covariance[i];
 800763e:	687a      	ldr	r2, [r7, #4]
 8007640:	693b      	ldr	r3, [r7, #16]
 8007642:	330a      	adds	r3, #10
 8007644:	00db      	lsls	r3, r3, #3
 8007646:	4413      	add	r3, r2
 8007648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800764c:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_covariancei.base >> (8 * 0)) & 0xFF;
 8007650:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007654:	6979      	ldr	r1, [r7, #20]
 8007656:	6838      	ldr	r0, [r7, #0]
 8007658:	4401      	add	r1, r0
 800765a:	b2d3      	uxtb	r3, r2
 800765c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_covariancei.base >> (8 * 1)) & 0xFF;
 800765e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007662:	f04f 0200 	mov.w	r2, #0
 8007666:	f04f 0300 	mov.w	r3, #0
 800766a:	0a02      	lsrs	r2, r0, #8
 800766c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8007670:	0a0b      	lsrs	r3, r1, #8
 8007672:	6979      	ldr	r1, [r7, #20]
 8007674:	3101      	adds	r1, #1
 8007676:	6838      	ldr	r0, [r7, #0]
 8007678:	4401      	add	r1, r0
 800767a:	b2d3      	uxtb	r3, r2
 800767c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_covariancei.base >> (8 * 2)) & 0xFF;
 800767e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007682:	f04f 0200 	mov.w	r2, #0
 8007686:	f04f 0300 	mov.w	r3, #0
 800768a:	0c02      	lsrs	r2, r0, #16
 800768c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8007690:	0c0b      	lsrs	r3, r1, #16
 8007692:	6979      	ldr	r1, [r7, #20]
 8007694:	3102      	adds	r1, #2
 8007696:	6838      	ldr	r0, [r7, #0]
 8007698:	4401      	add	r1, r0
 800769a:	b2d3      	uxtb	r3, r2
 800769c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_covariancei.base >> (8 * 3)) & 0xFF;
 800769e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80076a2:	f04f 0200 	mov.w	r2, #0
 80076a6:	f04f 0300 	mov.w	r3, #0
 80076aa:	0e02      	lsrs	r2, r0, #24
 80076ac:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80076b0:	0e0b      	lsrs	r3, r1, #24
 80076b2:	6979      	ldr	r1, [r7, #20]
 80076b4:	3103      	adds	r1, #3
 80076b6:	6838      	ldr	r0, [r7, #0]
 80076b8:	4401      	add	r1, r0
 80076ba:	b2d3      	uxtb	r3, r2
 80076bc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_covariancei.base >> (8 * 4)) & 0xFF;
 80076be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80076c2:	f04f 0200 	mov.w	r2, #0
 80076c6:	f04f 0300 	mov.w	r3, #0
 80076ca:	000a      	movs	r2, r1
 80076cc:	2300      	movs	r3, #0
 80076ce:	6979      	ldr	r1, [r7, #20]
 80076d0:	3104      	adds	r1, #4
 80076d2:	6838      	ldr	r0, [r7, #0]
 80076d4:	4401      	add	r1, r0
 80076d6:	b2d3      	uxtb	r3, r2
 80076d8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_covariancei.base >> (8 * 5)) & 0xFF;
 80076da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80076de:	f04f 0200 	mov.w	r2, #0
 80076e2:	f04f 0300 	mov.w	r3, #0
 80076e6:	0a0a      	lsrs	r2, r1, #8
 80076e8:	2300      	movs	r3, #0
 80076ea:	6979      	ldr	r1, [r7, #20]
 80076ec:	3105      	adds	r1, #5
 80076ee:	6838      	ldr	r0, [r7, #0]
 80076f0:	4401      	add	r1, r0
 80076f2:	b2d3      	uxtb	r3, r2
 80076f4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_covariancei.base >> (8 * 6)) & 0xFF;
 80076f6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80076fa:	f04f 0200 	mov.w	r2, #0
 80076fe:	f04f 0300 	mov.w	r3, #0
 8007702:	0c0a      	lsrs	r2, r1, #16
 8007704:	2300      	movs	r3, #0
 8007706:	6979      	ldr	r1, [r7, #20]
 8007708:	3106      	adds	r1, #6
 800770a:	6838      	ldr	r0, [r7, #0]
 800770c:	4401      	add	r1, r0
 800770e:	b2d3      	uxtb	r3, r2
 8007710:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_covariancei.base >> (8 * 7)) & 0xFF;
 8007712:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007716:	f04f 0200 	mov.w	r2, #0
 800771a:	f04f 0300 	mov.w	r3, #0
 800771e:	0e0a      	lsrs	r2, r1, #24
 8007720:	2300      	movs	r3, #0
 8007722:	6979      	ldr	r1, [r7, #20]
 8007724:	3107      	adds	r1, #7
 8007726:	6838      	ldr	r0, [r7, #0]
 8007728:	4401      	add	r1, r0
 800772a:	b2d3      	uxtb	r3, r2
 800772c:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->covariance[i]);
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	3308      	adds	r3, #8
 8007732:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 36; i++){
 8007734:	693b      	ldr	r3, [r7, #16]
 8007736:	3301      	adds	r3, #1
 8007738:	613b      	str	r3, [r7, #16]
 800773a:	693b      	ldr	r3, [r7, #16]
 800773c:	2b23      	cmp	r3, #35	@ 0x23
 800773e:	f67f af7e 	bls.w	800763e <_ZNK13geometry_msgs19TwistWithCovariance9serializeEPh+0x2e>
      }
      return offset;
 8007742:	697b      	ldr	r3, [r7, #20]
    }
 8007744:	4618      	mov	r0, r3
 8007746:	3718      	adds	r7, #24
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}

0800774c <_ZN13geometry_msgs19TwistWithCovariance11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800774c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007750:	b0a3      	sub	sp, #140	@ 0x8c
 8007752:	af00      	add	r7, sp, #0
 8007754:	6778      	str	r0, [r7, #116]	@ 0x74
 8007756:	6739      	str	r1, [r7, #112]	@ 0x70
    {
      int offset = 0;
 8007758:	2300      	movs	r3, #0
 800775a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      offset += this->twist.deserialize(inbuffer + offset);
 800775e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007760:	f103 0008 	add.w	r0, r3, #8
 8007764:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007768:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800776a:	4413      	add	r3, r2
 800776c:	4619      	mov	r1, r3
 800776e:	f7fe ff5b 	bl	8006628 <_ZN13geometry_msgs5Twist11deserializeEPh>
 8007772:	4602      	mov	r2, r0
 8007774:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007778:	4413      	add	r3, r2
 800777a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      for( uint32_t i = 0; i < 36; i++){
 800777e:	2300      	movs	r3, #0
 8007780:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007784:	e0f7      	b.n	8007976 <_ZN13geometry_msgs19TwistWithCovariance11deserializeEPh+0x22a>
      union {
        double real;
        uint64_t base;
      } u_covariancei;
      u_covariancei.base = 0;
 8007786:	f04f 0200 	mov.w	r2, #0
 800778a:	f04f 0300 	mov.w	r3, #0
 800778e:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8007792:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8007796:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800779a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800779c:	4413      	add	r3, r2
 800779e:	781b      	ldrb	r3, [r3, #0]
 80077a0:	b2db      	uxtb	r3, r3
 80077a2:	2200      	movs	r2, #0
 80077a4:	663b      	str	r3, [r7, #96]	@ 0x60
 80077a6:	667a      	str	r2, [r7, #100]	@ 0x64
 80077a8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80077ac:	4616      	mov	r6, r2
 80077ae:	4306      	orrs	r6, r0
 80077b0:	65be      	str	r6, [r7, #88]	@ 0x58
 80077b2:	430b      	orrs	r3, r1
 80077b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80077b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80077ba:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80077be:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80077c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80077c6:	1c5a      	adds	r2, r3, #1
 80077c8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80077ca:	4413      	add	r3, r2
 80077cc:	781b      	ldrb	r3, [r3, #0]
 80077ce:	b2db      	uxtb	r3, r3
 80077d0:	2200      	movs	r2, #0
 80077d2:	469a      	mov	sl, r3
 80077d4:	4693      	mov	fp, r2
 80077d6:	f04f 0200 	mov.w	r2, #0
 80077da:	f04f 0300 	mov.w	r3, #0
 80077de:	ea4f 230b 	mov.w	r3, fp, lsl #8
 80077e2:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 80077e6:	ea4f 220a 	mov.w	r2, sl, lsl #8
 80077ea:	ea40 0602 	orr.w	r6, r0, r2
 80077ee:	653e      	str	r6, [r7, #80]	@ 0x50
 80077f0:	430b      	orrs	r3, r1
 80077f2:	657b      	str	r3, [r7, #84]	@ 0x54
 80077f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80077f8:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80077fc:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8007800:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007804:	1c9a      	adds	r2, r3, #2
 8007806:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007808:	4413      	add	r3, r2
 800780a:	781b      	ldrb	r3, [r3, #0]
 800780c:	b2db      	uxtb	r3, r3
 800780e:	2200      	movs	r2, #0
 8007810:	4698      	mov	r8, r3
 8007812:	4691      	mov	r9, r2
 8007814:	f04f 0200 	mov.w	r2, #0
 8007818:	f04f 0300 	mov.w	r3, #0
 800781c:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8007820:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8007824:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8007828:	ea40 0602 	orr.w	r6, r0, r2
 800782c:	64be      	str	r6, [r7, #72]	@ 0x48
 800782e:	430b      	orrs	r3, r1
 8007830:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007832:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007836:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800783a:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800783e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007842:	1cda      	adds	r2, r3, #3
 8007844:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007846:	4413      	add	r3, r2
 8007848:	781b      	ldrb	r3, [r3, #0]
 800784a:	b2db      	uxtb	r3, r3
 800784c:	2200      	movs	r2, #0
 800784e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007850:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007852:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007854:	0a1d      	lsrs	r5, r3, #8
 8007856:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007858:	061c      	lsls	r4, r3, #24
 800785a:	ea40 0304 	orr.w	r3, r0, r4
 800785e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007860:	ea41 0305 	orr.w	r3, r1, r5
 8007864:	647b      	str	r3, [r7, #68]	@ 0x44
 8007866:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800786a:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800786e:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8007872:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007876:	1d1a      	adds	r2, r3, #4
 8007878:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800787a:	4413      	add	r3, r2
 800787c:	781b      	ldrb	r3, [r3, #0]
 800787e:	b2db      	uxtb	r3, r3
 8007880:	2200      	movs	r2, #0
 8007882:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007884:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8007886:	f04f 0200 	mov.w	r2, #0
 800788a:	f04f 0300 	mov.w	r3, #0
 800788e:	6bbe      	ldr	r6, [r7, #56]	@ 0x38
 8007890:	0033      	movs	r3, r6
 8007892:	2200      	movs	r2, #0
 8007894:	ea40 0602 	orr.w	r6, r0, r2
 8007898:	633e      	str	r6, [r7, #48]	@ 0x30
 800789a:	430b      	orrs	r3, r1
 800789c:	637b      	str	r3, [r7, #52]	@ 0x34
 800789e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80078a2:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80078a6:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80078aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80078ae:	1d5a      	adds	r2, r3, #5
 80078b0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80078b2:	4413      	add	r3, r2
 80078b4:	781b      	ldrb	r3, [r3, #0]
 80078b6:	b2db      	uxtb	r3, r3
 80078b8:	2200      	movs	r2, #0
 80078ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 80078bc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80078be:	f04f 0200 	mov.w	r2, #0
 80078c2:	f04f 0300 	mov.w	r3, #0
 80078c6:	6abe      	ldr	r6, [r7, #40]	@ 0x28
 80078c8:	0233      	lsls	r3, r6, #8
 80078ca:	2200      	movs	r2, #0
 80078cc:	ea40 0602 	orr.w	r6, r0, r2
 80078d0:	623e      	str	r6, [r7, #32]
 80078d2:	430b      	orrs	r3, r1
 80078d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80078d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80078da:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80078de:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80078e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80078e6:	1d9a      	adds	r2, r3, #6
 80078e8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80078ea:	4413      	add	r3, r2
 80078ec:	781b      	ldrb	r3, [r3, #0]
 80078ee:	b2db      	uxtb	r3, r3
 80078f0:	2200      	movs	r2, #0
 80078f2:	61bb      	str	r3, [r7, #24]
 80078f4:	61fa      	str	r2, [r7, #28]
 80078f6:	f04f 0200 	mov.w	r2, #0
 80078fa:	f04f 0300 	mov.w	r3, #0
 80078fe:	69be      	ldr	r6, [r7, #24]
 8007900:	0433      	lsls	r3, r6, #16
 8007902:	2200      	movs	r2, #0
 8007904:	ea40 0602 	orr.w	r6, r0, r2
 8007908:	613e      	str	r6, [r7, #16]
 800790a:	430b      	orrs	r3, r1
 800790c:	617b      	str	r3, [r7, #20]
 800790e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007912:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8007916:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800791a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800791e:	1dda      	adds	r2, r3, #7
 8007920:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007922:	4413      	add	r3, r2
 8007924:	781b      	ldrb	r3, [r3, #0]
 8007926:	b2db      	uxtb	r3, r3
 8007928:	2200      	movs	r2, #0
 800792a:	60bb      	str	r3, [r7, #8]
 800792c:	60fa      	str	r2, [r7, #12]
 800792e:	f04f 0200 	mov.w	r2, #0
 8007932:	f04f 0300 	mov.w	r3, #0
 8007936:	68be      	ldr	r6, [r7, #8]
 8007938:	0633      	lsls	r3, r6, #24
 800793a:	2200      	movs	r2, #0
 800793c:	ea40 0602 	orr.w	r6, r0, r2
 8007940:	603e      	str	r6, [r7, #0]
 8007942:	430b      	orrs	r3, r1
 8007944:	607b      	str	r3, [r7, #4]
 8007946:	e9d7 2300 	ldrd	r2, r3, [r7]
 800794a:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
      this->covariance[i] = u_covariancei.real;
 800794e:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8007952:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8007954:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007958:	330a      	adds	r3, #10
 800795a:	00db      	lsls	r3, r3, #3
 800795c:	4413      	add	r3, r2
 800795e:	e9c3 0100 	strd	r0, r1, [r3]
      offset += sizeof(this->covariance[i]);
 8007962:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007966:	3308      	adds	r3, #8
 8007968:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      for( uint32_t i = 0; i < 36; i++){
 800796c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007970:	3301      	adds	r3, #1
 8007972:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007976:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800797a:	2b23      	cmp	r3, #35	@ 0x23
 800797c:	f67f af03 	bls.w	8007786 <_ZN13geometry_msgs19TwistWithCovariance11deserializeEPh+0x3a>
      }
     return offset;
 8007980:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
    }
 8007984:	4618      	mov	r0, r3
 8007986:	378c      	adds	r7, #140	@ 0x8c
 8007988:	46bd      	mov	sp, r7
 800798a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08007990 <_ZN13geometry_msgs19TwistWithCovariance7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/TwistWithCovariance"; };
 8007990:	b480      	push	{r7}
 8007992:	b083      	sub	sp, #12
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
 8007998:	4b02      	ldr	r3, [pc, #8]	@ (80079a4 <_ZN13geometry_msgs19TwistWithCovariance7getTypeEv+0x14>)
 800799a:	4618      	mov	r0, r3
 800799c:	370c      	adds	r7, #12
 800799e:	46bd      	mov	sp, r7
 80079a0:	bc80      	pop	{r7}
 80079a2:	4770      	bx	lr
 80079a4:	08010b18 	.word	0x08010b18

080079a8 <_ZN13geometry_msgs19TwistWithCovariance6getMD5Ev>:
    virtual const char * getMD5() override { return "1fe8a28e6890a4cc3ae4c3ca5c7d82e6"; };
 80079a8:	b480      	push	{r7}
 80079aa:	b083      	sub	sp, #12
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
 80079b0:	4b02      	ldr	r3, [pc, #8]	@ (80079bc <_ZN13geometry_msgs19TwistWithCovariance6getMD5Ev+0x14>)
 80079b2:	4618      	mov	r0, r3
 80079b4:	370c      	adds	r7, #12
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bc80      	pop	{r7}
 80079ba:	4770      	bx	lr
 80079bc:	08010b3c 	.word	0x08010b3c

080079c0 <_ZN8nav_msgs8OdometryC1Ev>:
      typedef geometry_msgs::PoseWithCovariance _pose_type;
      _pose_type pose;
      typedef geometry_msgs::TwistWithCovariance _twist_type;
      _twist_type twist;

    Odometry():
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b082      	sub	sp, #8
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
      header(),
      child_frame_id(""),
      pose(),
      twist()
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	4618      	mov	r0, r3
 80079cc:	f7fa f8ea 	bl	8001ba4 <_ZN3ros3MsgC1Ev>
 80079d0:	4a0d      	ldr	r2, [pc, #52]	@ (8007a08 <_ZN8nav_msgs8OdometryC1Ev+0x48>)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	601a      	str	r2, [r3, #0]
      header(),
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	3304      	adds	r3, #4
 80079da:	4618      	mov	r0, r3
 80079dc:	f7fb fa2e 	bl	8002e3c <_ZN8std_msgs6HeaderC1Ev>
      child_frame_id(""),
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	4a0a      	ldr	r2, [pc, #40]	@ (8007a0c <_ZN8nav_msgs8OdometryC1Ev+0x4c>)
 80079e4:	619a      	str	r2, [r3, #24]
      pose(),
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	3320      	adds	r3, #32
 80079ea:	4618      	mov	r0, r3
 80079ec:	f7ff fbec 	bl	80071c8 <_ZN13geometry_msgs18PoseWithCovarianceC1Ev>
      twist()
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 80079f6:	4618      	mov	r0, r3
 80079f8:	f7ff fde4 	bl	80075c4 <_ZN13geometry_msgs19TwistWithCovarianceC1Ev>
    {
    }
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	4618      	mov	r0, r3
 8007a00:	3708      	adds	r7, #8
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}
 8007a06:	bf00      	nop
 8007a08:	08010de0 	.word	0x08010de0
 8007a0c:	080107ec 	.word	0x080107ec

08007a10 <_ZNK8nav_msgs8Odometry9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b084      	sub	sp, #16
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
 8007a18:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	60fb      	str	r3, [r7, #12]
      offset += this->header.serialize(outbuffer + offset);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	1d18      	adds	r0, r3, #4
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	683a      	ldr	r2, [r7, #0]
 8007a26:	4413      	add	r3, r2
 8007a28:	4619      	mov	r1, r3
 8007a2a:	f7fb fa27 	bl	8002e7c <_ZNK8std_msgs6Header9serializeEPh>
 8007a2e:	4602      	mov	r2, r0
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	4413      	add	r3, r2
 8007a34:	60fb      	str	r3, [r7, #12]
      uint32_t length_child_frame_id = strlen(this->child_frame_id);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	699b      	ldr	r3, [r3, #24]
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	f7f8 fbf4 	bl	8000228 <strlen>
 8007a40:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_child_frame_id);
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	683a      	ldr	r2, [r7, #0]
 8007a46:	4413      	add	r3, r2
 8007a48:	68b9      	ldr	r1, [r7, #8]
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	f001 f9bc 	bl	8008dc8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	3304      	adds	r3, #4
 8007a54:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->child_frame_id, length_child_frame_id);
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	683a      	ldr	r2, [r7, #0]
 8007a5a:	18d0      	adds	r0, r2, r3
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	699b      	ldr	r3, [r3, #24]
 8007a60:	68ba      	ldr	r2, [r7, #8]
 8007a62:	4619      	mov	r1, r3
 8007a64:	f008 fe3e 	bl	80106e4 <memcpy>
      offset += length_child_frame_id;
 8007a68:	68fa      	ldr	r2, [r7, #12]
 8007a6a:	68bb      	ldr	r3, [r7, #8]
 8007a6c:	4413      	add	r3, r2
 8007a6e:	60fb      	str	r3, [r7, #12]
      offset += this->pose.serialize(outbuffer + offset);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f103 0020 	add.w	r0, r3, #32
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	683a      	ldr	r2, [r7, #0]
 8007a7a:	4413      	add	r3, r2
 8007a7c:	4619      	mov	r1, r3
 8007a7e:	f7ff fbc9 	bl	8007214 <_ZNK13geometry_msgs18PoseWithCovariance9serializeEPh>
 8007a82:	4602      	mov	r2, r0
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	4413      	add	r3, r2
 8007a88:	60fb      	str	r3, [r7, #12]
      offset += this->twist.serialize(outbuffer + offset);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f503 70cc 	add.w	r0, r3, #408	@ 0x198
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	683a      	ldr	r2, [r7, #0]
 8007a94:	4413      	add	r3, r2
 8007a96:	4619      	mov	r1, r3
 8007a98:	f7ff fdba 	bl	8007610 <_ZNK13geometry_msgs19TwistWithCovariance9serializeEPh>
 8007a9c:	4602      	mov	r2, r0
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	4413      	add	r3, r2
 8007aa2:	60fb      	str	r3, [r7, #12]
      return offset;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
    }
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	3710      	adds	r7, #16
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bd80      	pop	{r7, pc}

08007aae <_ZN8nav_msgs8Odometry11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8007aae:	b580      	push	{r7, lr}
 8007ab0:	b086      	sub	sp, #24
 8007ab2:	af00      	add	r7, sp, #0
 8007ab4:	6078      	str	r0, [r7, #4]
 8007ab6:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	613b      	str	r3, [r7, #16]
      offset += this->header.deserialize(inbuffer + offset);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	1d18      	adds	r0, r3, #4
 8007ac0:	693b      	ldr	r3, [r7, #16]
 8007ac2:	683a      	ldr	r2, [r7, #0]
 8007ac4:	4413      	add	r3, r2
 8007ac6:	4619      	mov	r1, r3
 8007ac8:	f7fb fa70 	bl	8002fac <_ZN8std_msgs6Header11deserializeEPh>
 8007acc:	4602      	mov	r2, r0
 8007ace:	693b      	ldr	r3, [r7, #16]
 8007ad0:	4413      	add	r3, r2
 8007ad2:	613b      	str	r3, [r7, #16]
      uint32_t length_child_frame_id;
      arrToVar(length_child_frame_id, (inbuffer + offset));
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	683a      	ldr	r2, [r7, #0]
 8007ad8:	441a      	add	r2, r3
 8007ada:	f107 030c 	add.w	r3, r7, #12
 8007ade:	4611      	mov	r1, r2
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	f001 f98f 	bl	8008e04 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8007ae6:	693b      	ldr	r3, [r7, #16]
 8007ae8:	3304      	adds	r3, #4
 8007aea:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_child_frame_id; ++k){
 8007aec:	693b      	ldr	r3, [r7, #16]
 8007aee:	617b      	str	r3, [r7, #20]
 8007af0:	e00b      	b.n	8007b0a <_ZN8nav_msgs8Odometry11deserializeEPh+0x5c>
          inbuffer[k-1]=inbuffer[k];
 8007af2:	683a      	ldr	r2, [r7, #0]
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	441a      	add	r2, r3
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	3b01      	subs	r3, #1
 8007afc:	6839      	ldr	r1, [r7, #0]
 8007afe:	440b      	add	r3, r1
 8007b00:	7812      	ldrb	r2, [r2, #0]
 8007b02:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_child_frame_id; ++k){
 8007b04:	697b      	ldr	r3, [r7, #20]
 8007b06:	3301      	adds	r3, #1
 8007b08:	617b      	str	r3, [r7, #20]
 8007b0a:	693a      	ldr	r2, [r7, #16]
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	4413      	add	r3, r2
 8007b10:	697a      	ldr	r2, [r7, #20]
 8007b12:	429a      	cmp	r2, r3
 8007b14:	d3ed      	bcc.n	8007af2 <_ZN8nav_msgs8Odometry11deserializeEPh+0x44>
      }
      inbuffer[offset+length_child_frame_id-1]=0;
 8007b16:	693a      	ldr	r2, [r7, #16]
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	4413      	add	r3, r2
 8007b1c:	3b01      	subs	r3, #1
 8007b1e:	683a      	ldr	r2, [r7, #0]
 8007b20:	4413      	add	r3, r2
 8007b22:	2200      	movs	r2, #0
 8007b24:	701a      	strb	r2, [r3, #0]
      this->child_frame_id = (char *)(inbuffer + offset-1);
 8007b26:	693b      	ldr	r3, [r7, #16]
 8007b28:	3b01      	subs	r3, #1
 8007b2a:	683a      	ldr	r2, [r7, #0]
 8007b2c:	441a      	add	r2, r3
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	619a      	str	r2, [r3, #24]
      offset += length_child_frame_id;
 8007b32:	693a      	ldr	r2, [r7, #16]
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	4413      	add	r3, r2
 8007b38:	613b      	str	r3, [r7, #16]
      offset += this->pose.deserialize(inbuffer + offset);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f103 0020 	add.w	r0, r3, #32
 8007b40:	693b      	ldr	r3, [r7, #16]
 8007b42:	683a      	ldr	r2, [r7, #0]
 8007b44:	4413      	add	r3, r2
 8007b46:	4619      	mov	r1, r3
 8007b48:	f7ff fc02 	bl	8007350 <_ZN13geometry_msgs18PoseWithCovariance11deserializeEPh>
 8007b4c:	4602      	mov	r2, r0
 8007b4e:	693b      	ldr	r3, [r7, #16]
 8007b50:	4413      	add	r3, r2
 8007b52:	613b      	str	r3, [r7, #16]
      offset += this->twist.deserialize(inbuffer + offset);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f503 70cc 	add.w	r0, r3, #408	@ 0x198
 8007b5a:	693b      	ldr	r3, [r7, #16]
 8007b5c:	683a      	ldr	r2, [r7, #0]
 8007b5e:	4413      	add	r3, r2
 8007b60:	4619      	mov	r1, r3
 8007b62:	f7ff fdf3 	bl	800774c <_ZN13geometry_msgs19TwistWithCovariance11deserializeEPh>
 8007b66:	4602      	mov	r2, r0
 8007b68:	693b      	ldr	r3, [r7, #16]
 8007b6a:	4413      	add	r3, r2
 8007b6c:	613b      	str	r3, [r7, #16]
     return offset;
 8007b6e:	693b      	ldr	r3, [r7, #16]
    }
 8007b70:	4618      	mov	r0, r3
 8007b72:	3718      	adds	r7, #24
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bd80      	pop	{r7, pc}

08007b78 <_ZN8nav_msgs8Odometry7getTypeEv>:

    virtual const char * getType() override { return "nav_msgs/Odometry"; };
 8007b78:	b480      	push	{r7}
 8007b7a:	b083      	sub	sp, #12
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
 8007b80:	4b02      	ldr	r3, [pc, #8]	@ (8007b8c <_ZN8nav_msgs8Odometry7getTypeEv+0x14>)
 8007b82:	4618      	mov	r0, r3
 8007b84:	370c      	adds	r7, #12
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bc80      	pop	{r7}
 8007b8a:	4770      	bx	lr
 8007b8c:	08010b60 	.word	0x08010b60

08007b90 <_ZN8nav_msgs8Odometry6getMD5Ev>:
    virtual const char * getMD5() override { return "cd5e73d190d741a2f92e81eda573aca7"; };
 8007b90:	b480      	push	{r7}
 8007b92:	b083      	sub	sp, #12
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
 8007b98:	4b02      	ldr	r3, [pc, #8]	@ (8007ba4 <_ZN8nav_msgs8Odometry6getMD5Ev+0x14>)
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	370c      	adds	r7, #12
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bc80      	pop	{r7}
 8007ba2:	4770      	bx	lr
 8007ba4:	08010b74 	.word	0x08010b74

08007ba8 <_ZN2tfL23createQuaternionFromYawEd>:

namespace tf
{

static inline geometry_msgs::Quaternion createQuaternionFromYaw(double yaw)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b084      	sub	sp, #16
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	60f8      	str	r0, [r7, #12]
 8007bb0:	e9c7 2300 	strd	r2, r3, [r7]
  geometry_msgs::Quaternion q;
 8007bb4:	68f8      	ldr	r0, [r7, #12]
 8007bb6:	f7fb fad1 	bl	800315c <_ZN13geometry_msgs10QuaternionC1Ev>
  q.x = 0;
 8007bba:	68f9      	ldr	r1, [r7, #12]
 8007bbc:	f04f 0200 	mov.w	r2, #0
 8007bc0:	f04f 0300 	mov.w	r3, #0
 8007bc4:	e9c1 2302 	strd	r2, r3, [r1, #8]
  q.y = 0;
 8007bc8:	68f9      	ldr	r1, [r7, #12]
 8007bca:	f04f 0200 	mov.w	r2, #0
 8007bce:	f04f 0300 	mov.w	r3, #0
 8007bd2:	e9c1 2304 	strd	r2, r3, [r1, #16]
  q.z = sin(yaw * 0.5);
 8007bd6:	f04f 0200 	mov.w	r2, #0
 8007bda:	4b13      	ldr	r3, [pc, #76]	@ (8007c28 <_ZN2tfL23createQuaternionFromYawEd+0x80>)
 8007bdc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007be0:	f7f8 fce6 	bl	80005b0 <__aeabi_dmul>
 8007be4:	4602      	mov	r2, r0
 8007be6:	460b      	mov	r3, r1
 8007be8:	4610      	mov	r0, r2
 8007bea:	4619      	mov	r1, r3
 8007bec:	f006 fe0c 	bl	800e808 <sin>
 8007bf0:	4602      	mov	r2, r0
 8007bf2:	460b      	mov	r3, r1
 8007bf4:	68f9      	ldr	r1, [r7, #12]
 8007bf6:	e9c1 2306 	strd	r2, r3, [r1, #24]
  q.w = cos(yaw * 0.5);
 8007bfa:	f04f 0200 	mov.w	r2, #0
 8007bfe:	4b0a      	ldr	r3, [pc, #40]	@ (8007c28 <_ZN2tfL23createQuaternionFromYawEd+0x80>)
 8007c00:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007c04:	f7f8 fcd4 	bl	80005b0 <__aeabi_dmul>
 8007c08:	4602      	mov	r2, r0
 8007c0a:	460b      	mov	r3, r1
 8007c0c:	4610      	mov	r0, r2
 8007c0e:	4619      	mov	r1, r3
 8007c10:	f006 fdb4 	bl	800e77c <cos>
 8007c14:	4602      	mov	r2, r0
 8007c16:	460b      	mov	r3, r1
 8007c18:	68f9      	ldr	r1, [r7, #12]
 8007c1a:	e9c1 2308 	strd	r2, r3, [r1, #32]
  return q;
 8007c1e:	bf00      	nop
}
 8007c20:	68f8      	ldr	r0, [r7, #12]
 8007c22:	3710      	adds	r7, #16
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}
 8007c28:	3fe00000 	.word	0x3fe00000

08007c2c <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8007c2c:	b480      	push	{r7}
 8007c2e:	b083      	sub	sp, #12
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
 8007c34:	4a04      	ldr	r2, [pc, #16]	@ (8007c48 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	601a      	str	r2, [r3, #0]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	370c      	adds	r7, #12
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bc80      	pop	{r7}
 8007c44:	4770      	bx	lr
 8007c46:	bf00      	nop
 8007c48:	08010f48 	.word	0x08010f48

08007c4c <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b082      	sub	sp, #8
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	4618      	mov	r0, r3
 8007c58:	f7ff ffe8 	bl	8007c2c <_ZN3ros15NodeHandleBase_C1Ev>
 8007c5c:	4a41      	ldr	r2, [pc, #260]	@ (8007d64 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EEC1Ev+0x118>)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	601a      	str	r2, [r3, #0]
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	3304      	adds	r3, #4
 8007c66:	4618      	mov	r0, r3
 8007c68:	f7fa ff4a 	bl	8002b00 <_ZN13STM32HardwareC1Ev>
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	609a      	str	r2, [r3, #8]
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2200      	movs	r2, #0
 8007c76:	60da      	str	r2, [r3, #12]
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	611a      	str	r2, [r3, #16]
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2200      	movs	r2, #0
 8007c82:	615a      	str	r2, [r3, #20]
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	3318      	adds	r3, #24
 8007c88:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8007c8c:	2100      	movs	r1, #0
 8007c8e:	4618      	mov	r0, r3
 8007c90:	f008 fca0 	bl	80105d4 <memset>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8007c9a:	3318      	adds	r3, #24
 8007c9c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8007ca0:	2100      	movs	r1, #0
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f008 fc96 	bl	80105d4 <memset>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8007cae:	3318      	adds	r3, #24
 8007cb0:	2228      	movs	r2, #40	@ 0x28
 8007cb2:	2100      	movs	r1, #0
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	f008 fc8d 	bl	80105d4 <memset>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8007cc0:	3340      	adds	r3, #64	@ 0x40
 8007cc2:	2228      	movs	r2, #40	@ 0x28
 8007cc4:	2100      	movs	r1, #0
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f008 fc84 	bl	80105d4 <memset>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8007cd2:	461a      	mov	r2, r3
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	6693      	str	r3, [r2, #104]	@ 0x68
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8007cde:	461a      	mov	r2, r3
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	66d3      	str	r3, [r2, #108]	@ 0x6c
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8007cea:	461a      	mov	r2, r3
 8007cec:	2300      	movs	r3, #0
 8007cee:	6713      	str	r3, [r2, #112]	@ 0x70
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8007cf6:	461a      	mov	r2, r3
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	6753      	str	r3, [r2, #116]	@ 0x74
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8007d02:	461a      	mov	r2, r3
 8007d04:	2300      	movs	r3, #0
 8007d06:	6793      	str	r3, [r2, #120]	@ 0x78
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8007d0e:	2200      	movs	r2, #0
 8007d10:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8007d1a:	461a      	mov	r2, r3
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8007d28:	461a      	mov	r2, r3
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8007d36:	461a      	mov	r2, r3
 8007d38:	2300      	movs	r3, #0
 8007d3a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8007d44:	2200      	movs	r2, #0
 8007d46:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f503 4381 	add.w	r3, r3, #16512	@ 0x4080
 8007d50:	3310      	adds	r3, #16
 8007d52:	4618      	mov	r0, r3
 8007d54:	f7fa fa8c 	bl	8002270 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3708      	adds	r7, #8
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}
 8007d62:	bf00      	nop
 8007d64:	08010dcc 	.word	0x08010dcc

08007d68 <_Z10constraintfff>:

#define MAX(x, y) (((x) > (y)) ? (x) : (y))
#define MIN(x, y) (((x) < (y)) ? (x) : (y))

float constraint(float var, float min, float max)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b084      	sub	sp, #16
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	60f8      	str	r0, [r7, #12]
 8007d70:	60b9      	str	r1, [r7, #8]
 8007d72:	607a      	str	r2, [r7, #4]
	if (var < min)	return min;
 8007d74:	68b9      	ldr	r1, [r7, #8]
 8007d76:	68f8      	ldr	r0, [r7, #12]
 8007d78:	f7f9 f9d8 	bl	800112c <__aeabi_fcmplt>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d001      	beq.n	8007d86 <_Z10constraintfff+0x1e>
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	e009      	b.n	8007d9a <_Z10constraintfff+0x32>
	if (var > max) 	return max;
 8007d86:	6879      	ldr	r1, [r7, #4]
 8007d88:	68f8      	ldr	r0, [r7, #12]
 8007d8a:	f7f9 f9ed 	bl	8001168 <__aeabi_fcmpgt>
 8007d8e:	4603      	mov	r3, r0
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d001      	beq.n	8007d98 <_Z10constraintfff+0x30>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	e000      	b.n	8007d9a <_Z10constraintfff+0x32>
	else 			return var;
 8007d98:	68fb      	ldr	r3, [r7, #12]
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	3710      	adds	r7, #16
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}
	...

08007da4 <HAL_UART_TxCpltCallback>:
bool is_testing = false;
uint32_t test_start_time = 0;
/* DEBUG PARAMETERS START */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b082      	sub	sp, #8
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
	comm_rosserial.set_tx_cplt();
 8007dac:	4803      	ldr	r0, [pc, #12]	@ (8007dbc <HAL_UART_TxCpltCallback+0x18>)
 8007dae:	f7fa fe85 	bl	8002abc <_ZN10SerialComm11set_tx_cpltEv>
}
 8007db2:	bf00      	nop
 8007db4:	3708      	adds	r7, #8
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bd80      	pop	{r7, pc}
 8007dba:	bf00      	nop
 8007dbc:	20000264 	.word	0x20000264

08007dc0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b082      	sub	sp, #8
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
	comm_rosserial.reset_rbuf();
 8007dc8:	4803      	ldr	r0, [pc, #12]	@ (8007dd8 <HAL_UART_RxCpltCallback+0x18>)
 8007dca:	f7fa fe85 	bl	8002ad8 <_ZN10SerialComm10reset_rbufEv>
}
 8007dce:	bf00      	nop
 8007dd0:	3708      	adds	r7, #8
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}
 8007dd6:	bf00      	nop
 8007dd8:	20000264 	.word	0x20000264

08007ddc <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b083      	sub	sp, #12
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
	switch (htim->Channel)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	7f1b      	ldrb	r3, [r3, #28]
 8007de8:	3b01      	subs	r3, #1
 8007dea:	2b07      	cmp	r3, #7
 8007dec:	d82d      	bhi.n	8007e4a <HAL_TIM_IC_CaptureCallback+0x6e>
 8007dee:	a201      	add	r2, pc, #4	@ (adr r2, 8007df4 <HAL_TIM_IC_CaptureCallback+0x18>)
 8007df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007df4:	08007e23 	.word	0x08007e23
 8007df8:	08007e3f 	.word	0x08007e3f
 8007dfc:	08007e4b 	.word	0x08007e4b
 8007e00:	08007e15 	.word	0x08007e15
 8007e04:	08007e4b 	.word	0x08007e4b
 8007e08:	08007e4b 	.word	0x08007e4b
 8007e0c:	08007e4b 	.word	0x08007e4b
 8007e10:	08007e31 	.word	0x08007e31
	{
	case HAL_TIM_ACTIVE_CHANNEL_3:
		encoder[front_left]->tick++;
 8007e14:	4b10      	ldr	r3, [pc, #64]	@ (8007e58 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	881a      	ldrh	r2, [r3, #0]
 8007e1a:	3201      	adds	r2, #1
 8007e1c:	b292      	uxth	r2, r2
 8007e1e:	801a      	strh	r2, [r3, #0]
		break;
 8007e20:	e014      	b.n	8007e4c <HAL_TIM_IC_CaptureCallback+0x70>
	case HAL_TIM_ACTIVE_CHANNEL_1:
		encoder[front_right]->tick++;
 8007e22:	4b0d      	ldr	r3, [pc, #52]	@ (8007e58 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8007e24:	685b      	ldr	r3, [r3, #4]
 8007e26:	881a      	ldrh	r2, [r3, #0]
 8007e28:	3201      	adds	r2, #1
 8007e2a:	b292      	uxth	r2, r2
 8007e2c:	801a      	strh	r2, [r3, #0]
		break;
 8007e2e:	e00d      	b.n	8007e4c <HAL_TIM_IC_CaptureCallback+0x70>
	case HAL_TIM_ACTIVE_CHANNEL_4:
		encoder[back_left]->tick++;
 8007e30:	4b09      	ldr	r3, [pc, #36]	@ (8007e58 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8007e32:	689b      	ldr	r3, [r3, #8]
 8007e34:	881a      	ldrh	r2, [r3, #0]
 8007e36:	3201      	adds	r2, #1
 8007e38:	b292      	uxth	r2, r2
 8007e3a:	801a      	strh	r2, [r3, #0]
		break;
 8007e3c:	e006      	b.n	8007e4c <HAL_TIM_IC_CaptureCallback+0x70>
	case HAL_TIM_ACTIVE_CHANNEL_2:
		encoder[back_right]->tick++;
 8007e3e:	4b06      	ldr	r3, [pc, #24]	@ (8007e58 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8007e40:	68db      	ldr	r3, [r3, #12]
 8007e42:	881a      	ldrh	r2, [r3, #0]
 8007e44:	3201      	adds	r2, #1
 8007e46:	b292      	uxth	r2, r2
 8007e48:	801a      	strh	r2, [r3, #0]
	default:
		break;
 8007e4a:	bf00      	nop
	}
}
 8007e4c:	bf00      	nop
 8007e4e:	370c      	adds	r7, #12
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bc80      	pop	{r7}
 8007e54:	4770      	bx	lr
 8007e56:	bf00      	nop
 8007e58:	200089dc 	.word	0x200089dc

08007e5c <commandVelocityCallback>:

/* CALLBACK FUNCTIONS START */
void commandVelocityCallback(const geometry_msgs::Twist& cmd_vel_msg)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b082      	sub	sp, #8
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
	goal_vel[linear_x] = cmd_vel_msg.linear.x;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8007e6a:	4610      	mov	r0, r2
 8007e6c:	4619      	mov	r1, r3
 8007e6e:	f7f8 fe61 	bl	8000b34 <__aeabi_d2f>
 8007e72:	4603      	mov	r3, r0
 8007e74:	4a0c      	ldr	r2, [pc, #48]	@ (8007ea8 <commandVelocityCallback+0x4c>)
 8007e76:	6013      	str	r3, [r2, #0]
	goal_vel[linear_y] = cmd_vel_msg.linear.y;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8007e7e:	4610      	mov	r0, r2
 8007e80:	4619      	mov	r1, r3
 8007e82:	f7f8 fe57 	bl	8000b34 <__aeabi_d2f>
 8007e86:	4603      	mov	r3, r0
 8007e88:	4a07      	ldr	r2, [pc, #28]	@ (8007ea8 <commandVelocityCallback+0x4c>)
 8007e8a:	6053      	str	r3, [r2, #4]
	goal_vel[angular_z] = cmd_vel_msg.angular.z;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8007e92:	4610      	mov	r0, r2
 8007e94:	4619      	mov	r1, r3
 8007e96:	f7f8 fe4d 	bl	8000b34 <__aeabi_d2f>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	4a02      	ldr	r2, [pc, #8]	@ (8007ea8 <commandVelocityCallback+0x4c>)
 8007e9e:	6093      	str	r3, [r2, #8]
}
 8007ea0:	bf00      	nop
 8007ea2:	3708      	adds	r7, #8
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}
 8007ea8:	2000892c 	.word	0x2000892c

08007eac <enablePidCallback>:
void enablePidCallback(const std_msgs::UInt8& use_pid_msg)
{
 8007eac:	b480      	push	{r7}
 8007eae:	b083      	sub	sp, #12
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
	if (use_pid_msg.data == 1)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	791b      	ldrb	r3, [r3, #4]
 8007eb8:	2b01      	cmp	r3, #1
 8007eba:	d103      	bne.n	8007ec4 <enablePidCallback+0x18>
	{
		use_pid = true;
 8007ebc:	4b05      	ldr	r3, [pc, #20]	@ (8007ed4 <enablePidCallback+0x28>)
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		use_pid = false;
	}
}
 8007ec2:	e002      	b.n	8007eca <enablePidCallback+0x1e>
		use_pid = false;
 8007ec4:	4b03      	ldr	r3, [pc, #12]	@ (8007ed4 <enablePidCallback+0x28>)
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	701a      	strb	r2, [r3, #0]
}
 8007eca:	bf00      	nop
 8007ecc:	370c      	adds	r7, #12
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bc80      	pop	{r7}
 8007ed2:	4770      	bx	lr
 8007ed4:	20000028 	.word	0x20000028

08007ed8 <kpTuneCallback>:
void kpTuneCallback(const std_msgs::Float32& kp_msg)
{
 8007ed8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007edc:	b089      	sub	sp, #36	@ 0x24
 8007ede:	af04      	add	r7, sp, #16
 8007ee0:	6078      	str	r0, [r7, #4]
	kp = kp_msg.data;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	685b      	ldr	r3, [r3, #4]
 8007ee6:	4a19      	ldr	r2, [pc, #100]	@ (8007f4c <kpTuneCallback+0x74>)
 8007ee8:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < NUM_OF_MOTOR; i++)
 8007eea:	2300      	movs	r3, #0
 8007eec:	60fb      	str	r3, [r7, #12]
 8007eee:	e024      	b.n	8007f3a <kpTuneCallback+0x62>
	{
		PID_SetGain(controller[i], kp, ki, kd);
 8007ef0:	4a17      	ldr	r2, [pc, #92]	@ (8007f50 <kpTuneCallback+0x78>)
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 8007ef8:	4b14      	ldr	r3, [pc, #80]	@ (8007f4c <kpTuneCallback+0x74>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4618      	mov	r0, r3
 8007efe:	f7f8 faff 	bl	8000500 <__aeabi_f2d>
 8007f02:	4680      	mov	r8, r0
 8007f04:	4689      	mov	r9, r1
 8007f06:	4b13      	ldr	r3, [pc, #76]	@ (8007f54 <kpTuneCallback+0x7c>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	f7f8 faf8 	bl	8000500 <__aeabi_f2d>
 8007f10:	4604      	mov	r4, r0
 8007f12:	460d      	mov	r5, r1
 8007f14:	4b10      	ldr	r3, [pc, #64]	@ (8007f58 <kpTuneCallback+0x80>)
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	4618      	mov	r0, r3
 8007f1a:	f7f8 faf1 	bl	8000500 <__aeabi_f2d>
 8007f1e:	4602      	mov	r2, r0
 8007f20:	460b      	mov	r3, r1
 8007f22:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007f26:	e9cd 4500 	strd	r4, r5, [sp]
 8007f2a:	4642      	mov	r2, r8
 8007f2c:	464b      	mov	r3, r9
 8007f2e:	4630      	mov	r0, r6
 8007f30:	f002 f874 	bl	800a01c <PID_SetGain>
	for (int i = 0; i < NUM_OF_MOTOR; i++)
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	3301      	adds	r3, #1
 8007f38:	60fb      	str	r3, [r7, #12]
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	2b03      	cmp	r3, #3
 8007f3e:	ddd7      	ble.n	8007ef0 <kpTuneCallback+0x18>
	}
}
 8007f40:	bf00      	nop
 8007f42:	bf00      	nop
 8007f44:	3714      	adds	r7, #20
 8007f46:	46bd      	mov	sp, r7
 8007f48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007f4c:	2000002c 	.word	0x2000002c
 8007f50:	200089fc 	.word	0x200089fc
 8007f54:	20000030 	.word	0x20000030
 8007f58:	20008a18 	.word	0x20008a18

08007f5c <kiTuneCallback>:
void kiTuneCallback(const std_msgs::Float32& ki_msg)
{
 8007f5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007f60:	b089      	sub	sp, #36	@ 0x24
 8007f62:	af04      	add	r7, sp, #16
 8007f64:	6078      	str	r0, [r7, #4]
	ki = ki_msg.data;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	685b      	ldr	r3, [r3, #4]
 8007f6a:	4a19      	ldr	r2, [pc, #100]	@ (8007fd0 <kiTuneCallback+0x74>)
 8007f6c:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < NUM_OF_MOTOR; i++)
 8007f6e:	2300      	movs	r3, #0
 8007f70:	60fb      	str	r3, [r7, #12]
 8007f72:	e024      	b.n	8007fbe <kiTuneCallback+0x62>
	{
		PID_SetGain(controller[i], kp, ki, kd);
 8007f74:	4a17      	ldr	r2, [pc, #92]	@ (8007fd4 <kiTuneCallback+0x78>)
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 8007f7c:	4b16      	ldr	r3, [pc, #88]	@ (8007fd8 <kiTuneCallback+0x7c>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	4618      	mov	r0, r3
 8007f82:	f7f8 fabd 	bl	8000500 <__aeabi_f2d>
 8007f86:	4680      	mov	r8, r0
 8007f88:	4689      	mov	r9, r1
 8007f8a:	4b11      	ldr	r3, [pc, #68]	@ (8007fd0 <kiTuneCallback+0x74>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	4618      	mov	r0, r3
 8007f90:	f7f8 fab6 	bl	8000500 <__aeabi_f2d>
 8007f94:	4604      	mov	r4, r0
 8007f96:	460d      	mov	r5, r1
 8007f98:	4b10      	ldr	r3, [pc, #64]	@ (8007fdc <kiTuneCallback+0x80>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	f7f8 faaf 	bl	8000500 <__aeabi_f2d>
 8007fa2:	4602      	mov	r2, r0
 8007fa4:	460b      	mov	r3, r1
 8007fa6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007faa:	e9cd 4500 	strd	r4, r5, [sp]
 8007fae:	4642      	mov	r2, r8
 8007fb0:	464b      	mov	r3, r9
 8007fb2:	4630      	mov	r0, r6
 8007fb4:	f002 f832 	bl	800a01c <PID_SetGain>
	for (int i = 0; i < NUM_OF_MOTOR; i++)
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	3301      	adds	r3, #1
 8007fbc:	60fb      	str	r3, [r7, #12]
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	2b03      	cmp	r3, #3
 8007fc2:	ddd7      	ble.n	8007f74 <kiTuneCallback+0x18>
	}
}
 8007fc4:	bf00      	nop
 8007fc6:	bf00      	nop
 8007fc8:	3714      	adds	r7, #20
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007fd0:	20000030 	.word	0x20000030
 8007fd4:	200089fc 	.word	0x200089fc
 8007fd8:	2000002c 	.word	0x2000002c
 8007fdc:	20008a18 	.word	0x20008a18

08007fe0 <kdTuneCallback>:
void kdTuneCallback(const std_msgs::Float32& kd_msg)
{
 8007fe0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007fe4:	b089      	sub	sp, #36	@ 0x24
 8007fe6:	af04      	add	r7, sp, #16
 8007fe8:	6078      	str	r0, [r7, #4]
	kd = kd_msg.data;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	685b      	ldr	r3, [r3, #4]
 8007fee:	4a19      	ldr	r2, [pc, #100]	@ (8008054 <kdTuneCallback+0x74>)
 8007ff0:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < NUM_OF_MOTOR; i++)
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	60fb      	str	r3, [r7, #12]
 8007ff6:	e024      	b.n	8008042 <kdTuneCallback+0x62>
	{
		PID_SetGain(controller[i], kp, ki, kd);
 8007ff8:	4a17      	ldr	r2, [pc, #92]	@ (8008058 <kdTuneCallback+0x78>)
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 8008000:	4b16      	ldr	r3, [pc, #88]	@ (800805c <kdTuneCallback+0x7c>)
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	4618      	mov	r0, r3
 8008006:	f7f8 fa7b 	bl	8000500 <__aeabi_f2d>
 800800a:	4680      	mov	r8, r0
 800800c:	4689      	mov	r9, r1
 800800e:	4b14      	ldr	r3, [pc, #80]	@ (8008060 <kdTuneCallback+0x80>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	4618      	mov	r0, r3
 8008014:	f7f8 fa74 	bl	8000500 <__aeabi_f2d>
 8008018:	4604      	mov	r4, r0
 800801a:	460d      	mov	r5, r1
 800801c:	4b0d      	ldr	r3, [pc, #52]	@ (8008054 <kdTuneCallback+0x74>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4618      	mov	r0, r3
 8008022:	f7f8 fa6d 	bl	8000500 <__aeabi_f2d>
 8008026:	4602      	mov	r2, r0
 8008028:	460b      	mov	r3, r1
 800802a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800802e:	e9cd 4500 	strd	r4, r5, [sp]
 8008032:	4642      	mov	r2, r8
 8008034:	464b      	mov	r3, r9
 8008036:	4630      	mov	r0, r6
 8008038:	f001 fff0 	bl	800a01c <PID_SetGain>
	for (int i = 0; i < NUM_OF_MOTOR; i++)
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	3301      	adds	r3, #1
 8008040:	60fb      	str	r3, [r7, #12]
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	2b03      	cmp	r3, #3
 8008046:	ddd7      	ble.n	8007ff8 <kdTuneCallback+0x18>
	}
}
 8008048:	bf00      	nop
 800804a:	bf00      	nop
 800804c:	3714      	adds	r7, #20
 800804e:	46bd      	mov	sp, r7
 8008050:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008054:	20008a18 	.word	0x20008a18
 8008058:	200089fc 	.word	0x200089fc
 800805c:	2000002c 	.word	0x2000002c
 8008060:	20000030 	.word	0x20000030

08008064 <testIdCallback>:
void testIdCallback(const std_msgs::Int8& test_id_msg)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b084      	sub	sp, #16
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
	int i = test_id_msg.data;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8008072:	60fb      	str	r3, [r7, #12]
	if (i != 0)
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d028      	beq.n	80080cc <testIdCallback+0x68>
	{
		goal_vel[linear_x] = odom_test[i][linear_x];
 800807a:	4918      	ldr	r1, [pc, #96]	@ (80080dc <testIdCallback+0x78>)
 800807c:	68fa      	ldr	r2, [r7, #12]
 800807e:	4613      	mov	r3, r2
 8008080:	005b      	lsls	r3, r3, #1
 8008082:	4413      	add	r3, r2
 8008084:	009b      	lsls	r3, r3, #2
 8008086:	440b      	add	r3, r1
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	4a15      	ldr	r2, [pc, #84]	@ (80080e0 <testIdCallback+0x7c>)
 800808c:	6013      	str	r3, [r2, #0]
		goal_vel[linear_y] = odom_test[i][linear_y];
 800808e:	4913      	ldr	r1, [pc, #76]	@ (80080dc <testIdCallback+0x78>)
 8008090:	68fa      	ldr	r2, [r7, #12]
 8008092:	4613      	mov	r3, r2
 8008094:	005b      	lsls	r3, r3, #1
 8008096:	4413      	add	r3, r2
 8008098:	009b      	lsls	r3, r3, #2
 800809a:	440b      	add	r3, r1
 800809c:	3304      	adds	r3, #4
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4a0f      	ldr	r2, [pc, #60]	@ (80080e0 <testIdCallback+0x7c>)
 80080a2:	6053      	str	r3, [r2, #4]
		goal_vel[angular_z] = odom_test[i][angular_z];
 80080a4:	490d      	ldr	r1, [pc, #52]	@ (80080dc <testIdCallback+0x78>)
 80080a6:	68fa      	ldr	r2, [r7, #12]
 80080a8:	4613      	mov	r3, r2
 80080aa:	005b      	lsls	r3, r3, #1
 80080ac:	4413      	add	r3, r2
 80080ae:	009b      	lsls	r3, r3, #2
 80080b0:	440b      	add	r3, r1
 80080b2:	3308      	adds	r3, #8
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	4a0a      	ldr	r2, [pc, #40]	@ (80080e0 <testIdCallback+0x7c>)
 80080b8:	6093      	str	r3, [r2, #8]

		is_testing = true;
 80080ba:	4b0a      	ldr	r3, [pc, #40]	@ (80080e4 <testIdCallback+0x80>)
 80080bc:	2201      	movs	r2, #1
 80080be:	701a      	strb	r2, [r3, #0]
		test_start_time = millis();
 80080c0:	f001 fe4e 	bl	8009d60 <_Z6millisv>
 80080c4:	4603      	mov	r3, r0
 80080c6:	4a08      	ldr	r2, [pc, #32]	@ (80080e8 <testIdCallback+0x84>)
 80080c8:	6013      	str	r3, [r2, #0]
	}
	else
	{
		is_testing = false;
	}
}
 80080ca:	e002      	b.n	80080d2 <testIdCallback+0x6e>
		is_testing = false;
 80080cc:	4b05      	ldr	r3, [pc, #20]	@ (80080e4 <testIdCallback+0x80>)
 80080ce:	2200      	movs	r2, #0
 80080d0:	701a      	strb	r2, [r3, #0]
}
 80080d2:	bf00      	nop
 80080d4:	3710      	adds	r7, #16
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}
 80080da:	bf00      	nop
 80080dc:	08010cf8 	.word	0x08010cf8
 80080e0:	2000892c 	.word	0x2000892c
 80080e4:	200089c6 	.word	0x200089c6
 80080e8:	200089c8 	.word	0x200089c8

080080ec <ros_setup>:
/* CALLBACK FUNCTIONS END */

void ros_setup()
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	af00      	add	r7, sp, #0
	nh.initNode();
 80080f0:	4814      	ldr	r0, [pc, #80]	@ (8008144 <ros_setup+0x58>)
 80080f2:	f000 ff4d 	bl	8008f90 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8initNodeEv>

	nh.subscribe(sub_cmd_vel);
 80080f6:	4914      	ldr	r1, [pc, #80]	@ (8008148 <ros_setup+0x5c>)
 80080f8:	4812      	ldr	r0, [pc, #72]	@ (8008144 <ros_setup+0x58>)
 80080fa:	f000 ff6e 	bl	8008fda <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE9subscribeERNS_11Subscriber_E>
	nh.subscribe(sub_use_pid);
 80080fe:	4913      	ldr	r1, [pc, #76]	@ (800814c <ros_setup+0x60>)
 8008100:	4810      	ldr	r0, [pc, #64]	@ (8008144 <ros_setup+0x58>)
 8008102:	f000 ff6a 	bl	8008fda <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE9subscribeERNS_11Subscriber_E>
	nh.subscribe(sub_kp);
 8008106:	4912      	ldr	r1, [pc, #72]	@ (8008150 <ros_setup+0x64>)
 8008108:	480e      	ldr	r0, [pc, #56]	@ (8008144 <ros_setup+0x58>)
 800810a:	f000 ff66 	bl	8008fda <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE9subscribeERNS_11Subscriber_E>
	nh.subscribe(sub_ki);
 800810e:	4911      	ldr	r1, [pc, #68]	@ (8008154 <ros_setup+0x68>)
 8008110:	480c      	ldr	r0, [pc, #48]	@ (8008144 <ros_setup+0x58>)
 8008112:	f000 ff62 	bl	8008fda <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE9subscribeERNS_11Subscriber_E>
	nh.subscribe(sub_kd);
 8008116:	4910      	ldr	r1, [pc, #64]	@ (8008158 <ros_setup+0x6c>)
 8008118:	480a      	ldr	r0, [pc, #40]	@ (8008144 <ros_setup+0x58>)
 800811a:	f000 ff5e 	bl	8008fda <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE9subscribeERNS_11Subscriber_E>
	nh.subscribe(sub_test_id);
 800811e:	490f      	ldr	r1, [pc, #60]	@ (800815c <ros_setup+0x70>)
 8008120:	4808      	ldr	r0, [pc, #32]	@ (8008144 <ros_setup+0x58>)
 8008122:	f000 ff5a 	bl	8008fda <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE9subscribeERNS_11Subscriber_E>

	//nh.advertise(pub_imu);
    nh.advertise(pub_odom);
 8008126:	490e      	ldr	r1, [pc, #56]	@ (8008160 <ros_setup+0x74>)
 8008128:	4806      	ldr	r0, [pc, #24]	@ (8008144 <ros_setup+0x58>)
 800812a:	f000 ff82 	bl	8009032 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE9advertiseERNS_9PublisherE>
	nh.advertise(pub_joint_states);
 800812e:	490d      	ldr	r1, [pc, #52]	@ (8008164 <ros_setup+0x78>)
 8008130:	4804      	ldr	r0, [pc, #16]	@ (8008144 <ros_setup+0x58>)
 8008132:	f000 ff7e 	bl	8009032 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE9advertiseERNS_9PublisherE>

	initOdom();
 8008136:	f000 f8c5 	bl	80082c4 <initOdom>
	initJointStates();
 800813a:	f000 f939 	bl	80083b0 <initJointStates>
}
 800813e:	bf00      	nop
 8008140:	bd80      	pop	{r7, pc}
 8008142:	bf00      	nop
 8008144:	20004270 	.word	0x20004270
 8008148:	20008328 	.word	0x20008328
 800814c:	20008388 	.word	0x20008388
 8008150:	200083a4 	.word	0x200083a4
 8008154:	200083c0 	.word	0x200083c0
 8008158:	200083dc 	.word	0x200083dc
 800815c:	200083f8 	.word	0x200083f8
 8008160:	20008890 	.word	0x20008890
 8008164:	20008900 	.word	0x20008900

08008168 <setup>:

void setup()
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b082      	sub	sp, #8
 800816c:	af00      	add	r7, sp, #0
	ros_setup();
 800816e:	f7ff ffbd 	bl	80080ec <ros_setup>

	mecabot_motor_init();
 8008172:	f001 fdfd 	bl	8009d70 <_Z18mecabot_motor_initv>
	mecabot_encoder_init();
 8008176:	f001 fe3d 	bl	8009df4 <_Z20mecabot_encoder_initv>
	mecabot_pid_init();
 800817a:	f001 fea7 	bl	8009ecc <_Z16mecabot_pid_initv>

	//while (mecabot_mpu_init() != STATUS_OK);
	//MPU6050_Calibrate(&hi2c1, &my_mpu);
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800817e:	2200      	movs	r2, #0
 8008180:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8008184:	480f      	ldr	r0, [pc, #60]	@ (80081c4 <setup+0x5c>)
 8008186:	f003 faa1 	bl	800b6cc <HAL_GPIO_WritePin>

	for (int i=0; i<NUM_OF_MOTOR; i++)
 800818a:	2300      	movs	r3, #0
 800818c:	607b      	str	r3, [r7, #4]
 800818e:	e010      	b.n	80081b2 <setup+0x4a>
	{
		mecabot_motor_start(mecabot_motor[i]);
 8008190:	4a0d      	ldr	r2, [pc, #52]	@ (80081c8 <setup+0x60>)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008198:	4618      	mov	r0, r3
 800819a:	f001 fed5 	bl	8009f48 <_Z19mecabot_motor_startP7Motor_t>
		mecabot_encoder_start(encoder[i]);
 800819e:	4a0b      	ldr	r2, [pc, #44]	@ (80081cc <setup+0x64>)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80081a6:	4618      	mov	r0, r3
 80081a8:	f001 feda 	bl	8009f60 <_Z21mecabot_encoder_startP9Encoder_t>
	for (int i=0; i<NUM_OF_MOTOR; i++)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	3301      	adds	r3, #1
 80081b0:	607b      	str	r3, [r7, #4]
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2b03      	cmp	r3, #3
 80081b6:	ddeb      	ble.n	8008190 <setup+0x28>
	}
}
 80081b8:	bf00      	nop
 80081ba:	bf00      	nop
 80081bc:	3708      	adds	r7, #8
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}
 80081c2:	bf00      	nop
 80081c4:	40011000 	.word	0x40011000
 80081c8:	200089cc 	.word	0x200089cc
 80081cc:	200089dc 	.word	0x200089dc

080081d0 <loop>:

void loop()
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	af00      	add	r7, sp, #0
	t = millis();
 80081d4:	f001 fdc4 	bl	8009d60 <_Z6millisv>
 80081d8:	4603      	mov	r3, r0
 80081da:	4a33      	ldr	r2, [pc, #204]	@ (80082a8 <loop+0xd8>)
 80081dc:	6013      	str	r3, [r2, #0]

	/* Wheel velocity feedback */
    if ((t - t_previous[wheel_velocity_feedback_event]) >= dt[wheel_velocity_feedback_event])
 80081de:	4b32      	ldr	r3, [pc, #200]	@ (80082a8 <loop+0xd8>)
 80081e0:	681a      	ldr	r2, [r3, #0]
 80081e2:	4b32      	ldr	r3, [pc, #200]	@ (80082ac <loop+0xdc>)
 80081e4:	685b      	ldr	r3, [r3, #4]
 80081e6:	1ad2      	subs	r2, r2, r3
 80081e8:	4b31      	ldr	r3, [pc, #196]	@ (80082b0 <loop+0xe0>)
 80081ea:	685b      	ldr	r3, [r3, #4]
 80081ec:	429a      	cmp	r2, r3
 80081ee:	d305      	bcc.n	80081fc <loop+0x2c>
	{
    	calculateRpm();
 80081f0:	f000 f9fe 	bl	80085f0 <calculateRpm>
		t_previous[wheel_velocity_feedback_event] = t;
 80081f4:	4b2c      	ldr	r3, [pc, #176]	@ (80082a8 <loop+0xd8>)
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	4a2c      	ldr	r2, [pc, #176]	@ (80082ac <loop+0xdc>)
 80081fa:	6053      	str	r3, [r2, #4]
	}
	/* Motor control */
	if ((t - t_previous[motor_control_event]) >= dt[motor_control_event])
 80081fc:	4b2a      	ldr	r3, [pc, #168]	@ (80082a8 <loop+0xd8>)
 80081fe:	681a      	ldr	r2, [r3, #0]
 8008200:	4b2a      	ldr	r3, [pc, #168]	@ (80082ac <loop+0xdc>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	1ad2      	subs	r2, r2, r3
 8008206:	4b2a      	ldr	r3, [pc, #168]	@ (80082b0 <loop+0xe0>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	429a      	cmp	r2, r3
 800820c:	d307      	bcc.n	800821e <loop+0x4e>
	{
		calculateWheelVelocity();
 800820e:	f000 fc47 	bl	8008aa0 <calculateWheelVelocity>
		controlMotors();
 8008212:	f000 fd25 	bl	8008c60 <controlMotors>
		t_previous[motor_control_event] = t;
 8008216:	4b24      	ldr	r3, [pc, #144]	@ (80082a8 <loop+0xd8>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	4a24      	ldr	r2, [pc, #144]	@ (80082ac <loop+0xdc>)
 800821c:	6013      	str	r3, [r2, #0]
	}
	/* Imu publish */
    if ((t - t_previous[imu_publish_event]) >= dt[imu_publish_event])
 800821e:	4b22      	ldr	r3, [pc, #136]	@ (80082a8 <loop+0xd8>)
 8008220:	681a      	ldr	r2, [r3, #0]
 8008222:	4b22      	ldr	r3, [pc, #136]	@ (80082ac <loop+0xdc>)
 8008224:	689b      	ldr	r3, [r3, #8]
 8008226:	1ad2      	subs	r2, r2, r3
 8008228:	4b21      	ldr	r3, [pc, #132]	@ (80082b0 <loop+0xe0>)
 800822a:	689b      	ldr	r3, [r3, #8]
 800822c:	429a      	cmp	r2, r3
 800822e:	d303      	bcc.n	8008238 <loop+0x68>
	{
		//updateImu();
		//publishImu();
		t_previous[imu_publish_event] = t;
 8008230:	4b1d      	ldr	r3, [pc, #116]	@ (80082a8 <loop+0xd8>)
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	4a1d      	ldr	r2, [pc, #116]	@ (80082ac <loop+0xdc>)
 8008236:	6093      	str	r3, [r2, #8]
	}
	/* Robot states (Odometry, TF, joint states) publish */
    if ((t - t_previous[odom_publish_event]) >= dt[odom_publish_event])
 8008238:	4b1b      	ldr	r3, [pc, #108]	@ (80082a8 <loop+0xd8>)
 800823a:	681a      	ldr	r2, [r3, #0]
 800823c:	4b1b      	ldr	r3, [pc, #108]	@ (80082ac <loop+0xdc>)
 800823e:	68db      	ldr	r3, [r3, #12]
 8008240:	1ad2      	subs	r2, r2, r3
 8008242:	4b1b      	ldr	r3, [pc, #108]	@ (80082b0 <loop+0xe0>)
 8008244:	68db      	ldr	r3, [r3, #12]
 8008246:	429a      	cmp	r2, r3
 8008248:	d309      	bcc.n	800825e <loop+0x8e>
	{
		updateOdom();
 800824a:	f000 f905 	bl	8008458 <updateOdom>
		updateJointStates();
 800824e:	f000 f97b 	bl	8008548 <updateJointStates>

		publishRobotState();
 8008252:	f000 fcf1 	bl	8008c38 <publishRobotState>

		t_previous[odom_publish_event] = t;
 8008256:	4b14      	ldr	r3, [pc, #80]	@ (80082a8 <loop+0xd8>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	4a14      	ldr	r2, [pc, #80]	@ (80082ac <loop+0xdc>)
 800825c:	60d3      	str	r3, [r2, #12]
	}

    /* Odom navigation testing */
    if (is_testing)
 800825e:	4b15      	ldr	r3, [pc, #84]	@ (80082b4 <loop+0xe4>)
 8008260:	781b      	ldrb	r3, [r3, #0]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d01a      	beq.n	800829c <loop+0xcc>
    {
    	if ((t - test_start_time) >= 5200) // Run the test for 5 seconds
 8008266:	4b10      	ldr	r3, [pc, #64]	@ (80082a8 <loop+0xd8>)
 8008268:	681a      	ldr	r2, [r3, #0]
 800826a:	4b13      	ldr	r3, [pc, #76]	@ (80082b8 <loop+0xe8>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	1ad3      	subs	r3, r2, r3
 8008270:	f241 424f 	movw	r2, #5199	@ 0x144f
 8008274:	4293      	cmp	r3, r2
 8008276:	d911      	bls.n	800829c <loop+0xcc>
    	{
    		goal_vel[linear_x] = 0;
 8008278:	4b10      	ldr	r3, [pc, #64]	@ (80082bc <loop+0xec>)
 800827a:	f04f 0200 	mov.w	r2, #0
 800827e:	601a      	str	r2, [r3, #0]
    		goal_vel[linear_y] = 0;
 8008280:	4b0e      	ldr	r3, [pc, #56]	@ (80082bc <loop+0xec>)
 8008282:	f04f 0200 	mov.w	r2, #0
 8008286:	605a      	str	r2, [r3, #4]
    		goal_vel[angular_z] = 0;
 8008288:	4b0c      	ldr	r3, [pc, #48]	@ (80082bc <loop+0xec>)
 800828a:	f04f 0200 	mov.w	r2, #0
 800828e:	609a      	str	r2, [r3, #8]
    		is_testing = false;
 8008290:	4b08      	ldr	r3, [pc, #32]	@ (80082b4 <loop+0xe4>)
 8008292:	2200      	movs	r2, #0
 8008294:	701a      	strb	r2, [r3, #0]
    		test_start_time = 0;
 8008296:	4b08      	ldr	r3, [pc, #32]	@ (80082b8 <loop+0xe8>)
 8008298:	2200      	movs	r2, #0
 800829a:	601a      	str	r2, [r3, #0]
     	}
    }

	nh.spinOnce();
 800829c:	4808      	ldr	r0, [pc, #32]	@ (80082c0 <loop+0xf0>)
 800829e:	f000 fef7 	bl	8009090 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv>
}
 80082a2:	bf00      	nop
 80082a4:	bd80      	pop	{r7, pc}
 80082a6:	bf00      	nop
 80082a8:	200089c0 	.word	0x200089c0
 80082ac:	200089b0 	.word	0x200089b0
 80082b0:	20000008 	.word	0x20000008
 80082b4:	200089c6 	.word	0x200089c6
 80082b8:	200089c8 	.word	0x200089c8
 80082bc:	2000892c 	.word	0x2000892c
 80082c0:	20004270 	.word	0x20004270

080082c4 <initOdom>:

/* MSG INITIALIZATION FUNCTIONS START */
void initOdom(void)
{
 80082c4:	b480      	push	{r7}
 80082c6:	b083      	sub	sp, #12
 80082c8:	af00      	add	r7, sp, #0
	for (int i = 0; i < 3; i++)
 80082ca:	2300      	movs	r3, #0
 80082cc:	607b      	str	r3, [r7, #4]
 80082ce:	e00e      	b.n	80082ee <initOdom+0x2a>
    {
        odom_pose[i] = 0.0;
 80082d0:	4a31      	ldr	r2, [pc, #196]	@ (8008398 <initOdom+0xd4>)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f04f 0100 	mov.w	r1, #0
 80082d8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        odom_vel[i]  = 0.0;
 80082dc:	4a2f      	ldr	r2, [pc, #188]	@ (800839c <initOdom+0xd8>)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f04f 0100 	mov.w	r1, #0
 80082e4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 3; i++)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	3301      	adds	r3, #1
 80082ec:	607b      	str	r3, [r7, #4]
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2b02      	cmp	r3, #2
 80082f2:	dded      	ble.n	80082d0 <initOdom+0xc>
    }

	odom_msg.header.frame_id = odom_frame_id;
 80082f4:	4b2a      	ldr	r3, [pc, #168]	@ (80083a0 <initOdom+0xdc>)
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	4a2a      	ldr	r2, [pc, #168]	@ (80083a4 <initOdom+0xe0>)
 80082fa:	6153      	str	r3, [r2, #20]
	odom_msg.child_frame_id = base_frame_id;
 80082fc:	4b2a      	ldr	r3, [pc, #168]	@ (80083a8 <initOdom+0xe4>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	4a28      	ldr	r2, [pc, #160]	@ (80083a4 <initOdom+0xe0>)
 8008302:	6193      	str	r3, [r2, #24]

    odom_msg.pose.pose.position.x = 0.0;
 8008304:	4927      	ldr	r1, [pc, #156]	@ (80083a4 <initOdom+0xe0>)
 8008306:	f04f 0200 	mov.w	r2, #0
 800830a:	f04f 0300 	mov.w	r3, #0
 800830e:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    odom_msg.pose.pose.position.y = 0.0;
 8008312:	4924      	ldr	r1, [pc, #144]	@ (80083a4 <initOdom+0xe0>)
 8008314:	f04f 0200 	mov.w	r2, #0
 8008318:	f04f 0300 	mov.w	r3, #0
 800831c:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
    odom_msg.pose.pose.position.z = 0.0;
 8008320:	4920      	ldr	r1, [pc, #128]	@ (80083a4 <initOdom+0xe0>)
 8008322:	f04f 0200 	mov.w	r2, #0
 8008326:	f04f 0300 	mov.w	r3, #0
 800832a:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48

    odom_msg.pose.pose.orientation.x = 0.0;
 800832e:	491d      	ldr	r1, [pc, #116]	@ (80083a4 <initOdom+0xe0>)
 8008330:	f04f 0200 	mov.w	r2, #0
 8008334:	f04f 0300 	mov.w	r3, #0
 8008338:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
    odom_msg.pose.pose.orientation.y = 0.0;
 800833c:	4919      	ldr	r1, [pc, #100]	@ (80083a4 <initOdom+0xe0>)
 800833e:	f04f 0200 	mov.w	r2, #0
 8008342:	f04f 0300 	mov.w	r3, #0
 8008346:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
    odom_msg.pose.pose.orientation.z = 0.0;
 800834a:	4916      	ldr	r1, [pc, #88]	@ (80083a4 <initOdom+0xe0>)
 800834c:	f04f 0200 	mov.w	r2, #0
 8008350:	f04f 0300 	mov.w	r3, #0
 8008354:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
    odom_msg.pose.pose.orientation.w = 1.0;
 8008358:	4912      	ldr	r1, [pc, #72]	@ (80083a4 <initOdom+0xe0>)
 800835a:	f04f 0200 	mov.w	r2, #0
 800835e:	4b13      	ldr	r3, [pc, #76]	@ (80083ac <initOdom+0xe8>)
 8008360:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70

    odom_msg.twist.twist.linear.x  = 0.0;
 8008364:	490f      	ldr	r1, [pc, #60]	@ (80083a4 <initOdom+0xe0>)
 8008366:	f04f 0200 	mov.w	r2, #0
 800836a:	f04f 0300 	mov.w	r3, #0
 800836e:	e9c1 236c 	strd	r2, r3, [r1, #432]	@ 0x1b0
	odom_msg.twist.twist.linear.y  = 0.0;
 8008372:	490c      	ldr	r1, [pc, #48]	@ (80083a4 <initOdom+0xe0>)
 8008374:	f04f 0200 	mov.w	r2, #0
 8008378:	f04f 0300 	mov.w	r3, #0
 800837c:	e9c1 236e 	strd	r2, r3, [r1, #440]	@ 0x1b8
    odom_msg.twist.twist.angular.z = 0.0;
 8008380:	4908      	ldr	r1, [pc, #32]	@ (80083a4 <initOdom+0xe0>)
 8008382:	f04f 0200 	mov.w	r2, #0
 8008386:	f04f 0300 	mov.w	r3, #0
 800838a:	e9c1 2378 	strd	r2, r3, [r1, #480]	@ 0x1e0
}
 800838e:	bf00      	nop
 8008390:	370c      	adds	r7, #12
 8008392:	46bd      	mov	sp, r7
 8008394:	bc80      	pop	{r7}
 8008396:	4770      	bx	lr
 8008398:	20008914 	.word	0x20008914
 800839c:	20008920 	.word	0x20008920
 80083a0:	20000004 	.word	0x20000004
 80083a4:	20008588 	.word	0x20008588
 80083a8:	20000000 	.word	0x20000000
 80083ac:	3ff00000 	.word	0x3ff00000

080083b0 <initJointStates>:
void initJointStates(void)
{
 80083b0:	b480      	push	{r7}
 80083b2:	af00      	add	r7, sp, #0
	static char *joint_states_name[4] {(char*)"front_left_wheel_joint", (char*)"front_right_wheel_joint",
												(char*)"back_left_wheel_joint" , (char*)"back_right_wheel_joint"};

	joint_states_msg.header.frame_id = base_frame_id;
 80083b4:	4b0b      	ldr	r3, [pc, #44]	@ (80083e4 <initJointStates+0x34>)
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	4a0b      	ldr	r2, [pc, #44]	@ (80083e8 <initJointStates+0x38>)
 80083ba:	6153      	str	r3, [r2, #20]
	joint_states_msg.name = joint_states_name;
 80083bc:	4b0a      	ldr	r3, [pc, #40]	@ (80083e8 <initJointStates+0x38>)
 80083be:	4a0b      	ldr	r2, [pc, #44]	@ (80083ec <initJointStates+0x3c>)
 80083c0:	621a      	str	r2, [r3, #32]

	joint_states_msg.name_length 	 = NUM_OF_MOTOR;
 80083c2:	4b09      	ldr	r3, [pc, #36]	@ (80083e8 <initJointStates+0x38>)
 80083c4:	2204      	movs	r2, #4
 80083c6:	619a      	str	r2, [r3, #24]
	joint_states_msg.position_length = NUM_OF_MOTOR;
 80083c8:	4b07      	ldr	r3, [pc, #28]	@ (80083e8 <initJointStates+0x38>)
 80083ca:	2204      	movs	r2, #4
 80083cc:	625a      	str	r2, [r3, #36]	@ 0x24
	joint_states_msg.velocity_length = NUM_OF_MOTOR;
 80083ce:	4b06      	ldr	r3, [pc, #24]	@ (80083e8 <initJointStates+0x38>)
 80083d0:	2204      	movs	r2, #4
 80083d2:	635a      	str	r2, [r3, #52]	@ 0x34
	joint_states_msg.effort_length	 = NUM_OF_MOTOR;
 80083d4:	4b04      	ldr	r3, [pc, #16]	@ (80083e8 <initJointStates+0x38>)
 80083d6:	2204      	movs	r2, #4
 80083d8:	645a      	str	r2, [r3, #68]	@ 0x44
}
 80083da:	bf00      	nop
 80083dc:	46bd      	mov	sp, r7
 80083de:	bc80      	pop	{r7}
 80083e0:	4770      	bx	lr
 80083e2:	bf00      	nop
 80083e4:	20000000 	.word	0x20000000
 80083e8:	200088a8 	.word	0x200088a8
 80083ec:	20000018 	.word	0x20000018

080083f0 <_ZN3ros3MsgaSEOS0_>:
 80083f0:	b480      	push	{r7}
 80083f2:	b083      	sub	sp, #12
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
 80083f8:	6039      	str	r1, [r7, #0]
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	4618      	mov	r0, r3
 80083fe:	370c      	adds	r7, #12
 8008400:	46bd      	mov	sp, r7
 8008402:	bc80      	pop	{r7}
 8008404:	4770      	bx	lr

08008406 <_ZN13geometry_msgs10QuaternionaSEOS0_>:
  class Quaternion : public ros::Msg
 8008406:	b580      	push	{r7, lr}
 8008408:	b082      	sub	sp, #8
 800840a:	af00      	add	r7, sp, #0
 800840c:	6078      	str	r0, [r7, #4]
 800840e:	6039      	str	r1, [r7, #0]
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	683a      	ldr	r2, [r7, #0]
 8008414:	4611      	mov	r1, r2
 8008416:	4618      	mov	r0, r3
 8008418:	f7ff ffea 	bl	80083f0 <_ZN3ros3MsgaSEOS0_>
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8008422:	6879      	ldr	r1, [r7, #4]
 8008424:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800842e:	6879      	ldr	r1, [r7, #4]
 8008430:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800843a:	6879      	ldr	r1, [r7, #4]
 800843c:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008446:	6879      	ldr	r1, [r7, #4]
 8008448:	e9c1 2308 	strd	r2, r3, [r1, #32]
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	4618      	mov	r0, r3
 8008450:	3708      	adds	r7, #8
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}
	...

08008458 <updateOdom>:
void updateYaw(float gz, float dt)
{
	imu_yaw += gz * dt;
}
void updateOdom(void)
{
 8008458:	b590      	push	{r4, r7, lr}
 800845a:	b08d      	sub	sp, #52	@ 0x34
 800845c:	af00      	add	r7, sp, #0
	calculateOdometry();
 800845e:	f000 f9cf 	bl	8008800 <calculateOdometry>

	odom_msg.header.stamp = nh.now();
 8008462:	4c32      	ldr	r4, [pc, #200]	@ (800852c <updateOdom+0xd4>)
 8008464:	463b      	mov	r3, r7
 8008466:	4932      	ldr	r1, [pc, #200]	@ (8008530 <updateOdom+0xd8>)
 8008468:	4618      	mov	r0, r3
 800846a:	f001 f845 	bl	80094f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE3nowEv>
 800846e:	f104 030c 	add.w	r3, r4, #12
 8008472:	463a      	mov	r2, r7
 8008474:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008478:	e883 0003 	stmia.w	r3, {r0, r1}

	odom_msg.header.frame_id = odom_frame_id;
 800847c:	4b2d      	ldr	r3, [pc, #180]	@ (8008534 <updateOdom+0xdc>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4a2a      	ldr	r2, [pc, #168]	@ (800852c <updateOdom+0xd4>)
 8008482:	6153      	str	r3, [r2, #20]
	odom_msg.child_frame_id = base_frame_id;
 8008484:	4b2c      	ldr	r3, [pc, #176]	@ (8008538 <updateOdom+0xe0>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	4a28      	ldr	r2, [pc, #160]	@ (800852c <updateOdom+0xd4>)
 800848a:	6193      	str	r3, [r2, #24]

	odom_msg.pose.pose.position.x = odom_pose[linear_x];
 800848c:	4b2b      	ldr	r3, [pc, #172]	@ (800853c <updateOdom+0xe4>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4618      	mov	r0, r3
 8008492:	f7f8 f835 	bl	8000500 <__aeabi_f2d>
 8008496:	4602      	mov	r2, r0
 8008498:	460b      	mov	r3, r1
 800849a:	4924      	ldr	r1, [pc, #144]	@ (800852c <updateOdom+0xd4>)
 800849c:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    odom_msg.pose.pose.position.y = odom_pose[linear_y];
 80084a0:	4b26      	ldr	r3, [pc, #152]	@ (800853c <updateOdom+0xe4>)
 80084a2:	685b      	ldr	r3, [r3, #4]
 80084a4:	4618      	mov	r0, r3
 80084a6:	f7f8 f82b 	bl	8000500 <__aeabi_f2d>
 80084aa:	4602      	mov	r2, r0
 80084ac:	460b      	mov	r3, r1
 80084ae:	491f      	ldr	r1, [pc, #124]	@ (800852c <updateOdom+0xd4>)
 80084b0:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
	odom_msg.pose.pose.position.z = 0.0;
 80084b4:	491d      	ldr	r1, [pc, #116]	@ (800852c <updateOdom+0xd4>)
 80084b6:	f04f 0200 	mov.w	r2, #0
 80084ba:	f04f 0300 	mov.w	r3, #0
 80084be:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
    odom_msg.pose.pose.orientation = tf::createQuaternionFromYaw(odom_pose[angular_z]);
 80084c2:	4b1e      	ldr	r3, [pc, #120]	@ (800853c <updateOdom+0xe4>)
 80084c4:	689b      	ldr	r3, [r3, #8]
 80084c6:	4618      	mov	r0, r3
 80084c8:	f7f8 f81a 	bl	8000500 <__aeabi_f2d>
 80084cc:	4602      	mov	r2, r0
 80084ce:	460b      	mov	r3, r1
 80084d0:	f107 0108 	add.w	r1, r7, #8
 80084d4:	4608      	mov	r0, r1
 80084d6:	f7ff fb67 	bl	8007ba8 <_ZN2tfL23createQuaternionFromYawEd>
 80084da:	f107 0308 	add.w	r3, r7, #8
 80084de:	4619      	mov	r1, r3
 80084e0:	4817      	ldr	r0, [pc, #92]	@ (8008540 <updateOdom+0xe8>)
 80084e2:	f7ff ff90 	bl	8008406 <_ZN13geometry_msgs10QuaternionaSEOS0_>

    odom_msg.twist.twist.linear.x  = odom_vel[linear_x];
 80084e6:	4b17      	ldr	r3, [pc, #92]	@ (8008544 <updateOdom+0xec>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	4618      	mov	r0, r3
 80084ec:	f7f8 f808 	bl	8000500 <__aeabi_f2d>
 80084f0:	4602      	mov	r2, r0
 80084f2:	460b      	mov	r3, r1
 80084f4:	490d      	ldr	r1, [pc, #52]	@ (800852c <updateOdom+0xd4>)
 80084f6:	e9c1 236c 	strd	r2, r3, [r1, #432]	@ 0x1b0
	odom_msg.twist.twist.linear.y  = odom_vel[linear_y];
 80084fa:	4b12      	ldr	r3, [pc, #72]	@ (8008544 <updateOdom+0xec>)
 80084fc:	685b      	ldr	r3, [r3, #4]
 80084fe:	4618      	mov	r0, r3
 8008500:	f7f7 fffe 	bl	8000500 <__aeabi_f2d>
 8008504:	4602      	mov	r2, r0
 8008506:	460b      	mov	r3, r1
 8008508:	4908      	ldr	r1, [pc, #32]	@ (800852c <updateOdom+0xd4>)
 800850a:	e9c1 236e 	strd	r2, r3, [r1, #440]	@ 0x1b8
    odom_msg.twist.twist.angular.z = odom_vel[angular_z];
 800850e:	4b0d      	ldr	r3, [pc, #52]	@ (8008544 <updateOdom+0xec>)
 8008510:	689b      	ldr	r3, [r3, #8]
 8008512:	4618      	mov	r0, r3
 8008514:	f7f7 fff4 	bl	8000500 <__aeabi_f2d>
 8008518:	4602      	mov	r2, r0
 800851a:	460b      	mov	r3, r1
 800851c:	4903      	ldr	r1, [pc, #12]	@ (800852c <updateOdom+0xd4>)
 800851e:	e9c1 2378 	strd	r2, r3, [r1, #480]	@ 0x1e0
}
 8008522:	bf00      	nop
 8008524:	3734      	adds	r7, #52	@ 0x34
 8008526:	46bd      	mov	sp, r7
 8008528:	bd90      	pop	{r4, r7, pc}
 800852a:	bf00      	nop
 800852c:	20008588 	.word	0x20008588
 8008530:	20004270 	.word	0x20004270
 8008534:	20000004 	.word	0x20000004
 8008538:	20000000 	.word	0x20000000
 800853c:	20008914 	.word	0x20008914
 8008540:	200085d8 	.word	0x200085d8
 8008544:	20008920 	.word	0x20008920

08008548 <updateJointStates>:
void updateJointStates(void)
{
 8008548:	b590      	push	{r4, r7, lr}
 800854a:	b085      	sub	sp, #20
 800854c:	af00      	add	r7, sp, #0
	joint_states_msg.header.stamp = nh.now();
 800854e:	4c21      	ldr	r4, [pc, #132]	@ (80085d4 <updateJointStates+0x8c>)
 8008550:	463b      	mov	r3, r7
 8008552:	4921      	ldr	r1, [pc, #132]	@ (80085d8 <updateJointStates+0x90>)
 8008554:	4618      	mov	r0, r3
 8008556:	f000 ffcf 	bl	80094f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE3nowEv>
 800855a:	f104 030c 	add.w	r3, r4, #12
 800855e:	463a      	mov	r2, r7
 8008560:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008564:	e883 0003 	stmia.w	r3, {r0, r1}

	joint_states_msg.header.frame_id = base_frame_id;
 8008568:	4b1c      	ldr	r3, [pc, #112]	@ (80085dc <updateJointStates+0x94>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	4a19      	ldr	r2, [pc, #100]	@ (80085d4 <updateJointStates+0x8c>)
 800856e:	6153      	str	r3, [r2, #20]
	for (int i = 0; i < NUM_OF_MOTOR; i++)
 8008570:	2300      	movs	r3, #0
 8008572:	60fb      	str	r3, [r7, #12]
 8008574:	e020      	b.n	80085b8 <updateJointStates+0x70>
	{
		joint_states_pos[i] = meas_theta[i];
 8008576:	4a1a      	ldr	r2, [pc, #104]	@ (80085e0 <updateJointStates+0x98>)
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800857e:	4618      	mov	r0, r3
 8008580:	f7f7 ffbe 	bl	8000500 <__aeabi_f2d>
 8008584:	4602      	mov	r2, r0
 8008586:	460b      	mov	r3, r1
 8008588:	4816      	ldr	r0, [pc, #88]	@ (80085e4 <updateJointStates+0x9c>)
 800858a:	68f9      	ldr	r1, [r7, #12]
 800858c:	00c9      	lsls	r1, r1, #3
 800858e:	4401      	add	r1, r0
 8008590:	e9c1 2300 	strd	r2, r3, [r1]
		joint_states_vel[i] = meas_wheel_angular_vel[i];
 8008594:	4a14      	ldr	r2, [pc, #80]	@ (80085e8 <updateJointStates+0xa0>)
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800859c:	4618      	mov	r0, r3
 800859e:	f7f7 ffaf 	bl	8000500 <__aeabi_f2d>
 80085a2:	4602      	mov	r2, r0
 80085a4:	460b      	mov	r3, r1
 80085a6:	4811      	ldr	r0, [pc, #68]	@ (80085ec <updateJointStates+0xa4>)
 80085a8:	68f9      	ldr	r1, [r7, #12]
 80085aa:	00c9      	lsls	r1, r1, #3
 80085ac:	4401      	add	r1, r0
 80085ae:	e9c1 2300 	strd	r2, r3, [r1]
	for (int i = 0; i < NUM_OF_MOTOR; i++)
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	3301      	adds	r3, #1
 80085b6:	60fb      	str	r3, [r7, #12]
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	2b03      	cmp	r3, #3
 80085bc:	dddb      	ble.n	8008576 <updateJointStates+0x2e>
	}

	joint_states_msg.position = reinterpret_cast<double *>(joint_states_pos);
 80085be:	4b05      	ldr	r3, [pc, #20]	@ (80085d4 <updateJointStates+0x8c>)
 80085c0:	4a08      	ldr	r2, [pc, #32]	@ (80085e4 <updateJointStates+0x9c>)
 80085c2:	631a      	str	r2, [r3, #48]	@ 0x30
	joint_states_msg.velocity = reinterpret_cast<double *>(joint_states_vel);
 80085c4:	4b03      	ldr	r3, [pc, #12]	@ (80085d4 <updateJointStates+0x8c>)
 80085c6:	4a09      	ldr	r2, [pc, #36]	@ (80085ec <updateJointStates+0xa4>)
 80085c8:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80085ca:	bf00      	nop
 80085cc:	3714      	adds	r7, #20
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd90      	pop	{r4, r7, pc}
 80085d2:	bf00      	nop
 80085d4:	200088a8 	.word	0x200088a8
 80085d8:	20004270 	.word	0x20004270
 80085dc:	20000000 	.word	0x20000000
 80085e0:	20008960 	.word	0x20008960
 80085e4:	20008970 	.word	0x20008970
 80085e8:	20008950 	.word	0x20008950
 80085ec:	20008990 	.word	0x20008990

080085f0 <calculateRpm>:
/* MSG UPDATE FUNCTIONS END */

/* DATA HANDLE FUNCTIONS START */
void calculateRpm(void)
{
 80085f0:	b5b0      	push	{r4, r5, r7, lr}
 80085f2:	b082      	sub	sp, #8
 80085f4:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_OF_MOTOR; ++i)
 80085f6:	2300      	movs	r3, #0
 80085f8:	607b      	str	r3, [r7, #4]
 80085fa:	e0de      	b.n	80087ba <calculateRpm+0x1ca>
	{
		if (encoder[i]->tick < prev_tick[i])	// Over-flow
 80085fc:	4a73      	ldr	r2, [pc, #460]	@ (80087cc <calculateRpm+0x1dc>)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008604:	881a      	ldrh	r2, [r3, #0]
 8008606:	4972      	ldr	r1, [pc, #456]	@ (80087d0 <calculateRpm+0x1e0>)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800860e:	429a      	cmp	r2, r3
 8008610:	d215      	bcs.n	800863e <calculateRpm+0x4e>
		{
			d_tick = encoder[i]->tick + (encoder[i]->max_count - prev_tick[i]);
 8008612:	4a6e      	ldr	r2, [pc, #440]	@ (80087cc <calculateRpm+0x1dc>)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800861a:	881a      	ldrh	r2, [r3, #0]
 800861c:	496b      	ldr	r1, [pc, #428]	@ (80087cc <calculateRpm+0x1dc>)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008624:	685b      	ldr	r3, [r3, #4]
 8008626:	b299      	uxth	r1, r3
 8008628:	4869      	ldr	r0, [pc, #420]	@ (80087d0 <calculateRpm+0x1e0>)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8008630:	1acb      	subs	r3, r1, r3
 8008632:	b29b      	uxth	r3, r3
 8008634:	4413      	add	r3, r2
 8008636:	b29a      	uxth	r2, r3
 8008638:	4b66      	ldr	r3, [pc, #408]	@ (80087d4 <calculateRpm+0x1e4>)
 800863a:	801a      	strh	r2, [r3, #0]
 800863c:	e01b      	b.n	8008676 <calculateRpm+0x86>
		}
		else if (encoder[i]->tick > prev_tick[i])
 800863e:	4a63      	ldr	r2, [pc, #396]	@ (80087cc <calculateRpm+0x1dc>)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008646:	881a      	ldrh	r2, [r3, #0]
 8008648:	4961      	ldr	r1, [pc, #388]	@ (80087d0 <calculateRpm+0x1e0>)
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8008650:	429a      	cmp	r2, r3
 8008652:	d90d      	bls.n	8008670 <calculateRpm+0x80>
		{
			d_tick = encoder[i]->tick - prev_tick[i];
 8008654:	4a5d      	ldr	r2, [pc, #372]	@ (80087cc <calculateRpm+0x1dc>)
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800865c:	881a      	ldrh	r2, [r3, #0]
 800865e:	495c      	ldr	r1, [pc, #368]	@ (80087d0 <calculateRpm+0x1e0>)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8008666:	1ad3      	subs	r3, r2, r3
 8008668:	b29a      	uxth	r2, r3
 800866a:	4b5a      	ldr	r3, [pc, #360]	@ (80087d4 <calculateRpm+0x1e4>)
 800866c:	801a      	strh	r2, [r3, #0]
 800866e:	e002      	b.n	8008676 <calculateRpm+0x86>
		}
		else
		{
			d_tick = 0;
 8008670:	4b58      	ldr	r3, [pc, #352]	@ (80087d4 <calculateRpm+0x1e4>)
 8008672:	2200      	movs	r2, #0
 8008674:	801a      	strh	r2, [r3, #0]
		}

		prev_tick[i] = encoder[i]->tick;
 8008676:	4a55      	ldr	r2, [pc, #340]	@ (80087cc <calculateRpm+0x1dc>)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800867e:	8819      	ldrh	r1, [r3, #0]
 8008680:	4a53      	ldr	r2, [pc, #332]	@ (80087d0 <calculateRpm+0x1e0>)
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		// Get the number of rotation
		meas_wheel_angular_vel[i] = static_cast<float>(d_tick) / ENCODER_RESOLUTION;
 8008688:	4b52      	ldr	r3, [pc, #328]	@ (80087d4 <calculateRpm+0x1e4>)
 800868a:	881b      	ldrh	r3, [r3, #0]
 800868c:	4618      	mov	r0, r3
 800868e:	f7f8 fb57 	bl	8000d40 <__aeabi_ui2f>
 8008692:	4603      	mov	r3, r0
 8008694:	4950      	ldr	r1, [pc, #320]	@ (80087d8 <calculateRpm+0x1e8>)
 8008696:	4618      	mov	r0, r3
 8008698:	f7f8 fc5e 	bl	8000f58 <__aeabi_fdiv>
 800869c:	4603      	mov	r3, r0
 800869e:	4619      	mov	r1, r3
 80086a0:	4a4e      	ldr	r2, [pc, #312]	@ (80087dc <calculateRpm+0x1ec>)
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		// Get the rotation per second
		meas_wheel_angular_vel[i] /= (float)dt[wheel_velocity_feedback_event]/1000;
 80086a8:	4a4c      	ldr	r2, [pc, #304]	@ (80087dc <calculateRpm+0x1ec>)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80086b0:	4b4b      	ldr	r3, [pc, #300]	@ (80087e0 <calculateRpm+0x1f0>)
 80086b2:	685b      	ldr	r3, [r3, #4]
 80086b4:	4618      	mov	r0, r3
 80086b6:	f7f8 fb43 	bl	8000d40 <__aeabi_ui2f>
 80086ba:	4603      	mov	r3, r0
 80086bc:	4949      	ldr	r1, [pc, #292]	@ (80087e4 <calculateRpm+0x1f4>)
 80086be:	4618      	mov	r0, r3
 80086c0:	f7f8 fc4a 	bl	8000f58 <__aeabi_fdiv>
 80086c4:	4603      	mov	r3, r0
 80086c6:	4619      	mov	r1, r3
 80086c8:	4620      	mov	r0, r4
 80086ca:	f7f8 fc45 	bl	8000f58 <__aeabi_fdiv>
 80086ce:	4603      	mov	r3, r0
 80086d0:	4619      	mov	r1, r3
 80086d2:	4a42      	ldr	r2, [pc, #264]	@ (80087dc <calculateRpm+0x1ec>)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		// Get the radians per second
		meas_wheel_angular_vel[i] *= 2 * PI;
 80086da:	4a40      	ldr	r2, [pc, #256]	@ (80087dc <calculateRpm+0x1ec>)
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80086e2:	4941      	ldr	r1, [pc, #260]	@ (80087e8 <calculateRpm+0x1f8>)
 80086e4:	4618      	mov	r0, r3
 80086e6:	f7f8 fb83 	bl	8000df0 <__aeabi_fmul>
 80086ea:	4603      	mov	r3, r0
 80086ec:	4619      	mov	r1, r3
 80086ee:	4a3b      	ldr	r2, [pc, #236]	@ (80087dc <calculateRpm+0x1ec>)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		// Apply Low Pass filter
		meas_wheel_angular_vel[i] = mecabot_motor[i]->direction * FO_IIR_Compute(encoder_filter[i], meas_wheel_angular_vel[i]);
 80086f6:	4a3d      	ldr	r2, [pc, #244]	@ (80087ec <calculateRpm+0x1fc>)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80086fe:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8008702:	4618      	mov	r0, r3
 8008704:	f7f8 fb20 	bl	8000d48 <__aeabi_i2f>
 8008708:	4604      	mov	r4, r0
 800870a:	4a39      	ldr	r2, [pc, #228]	@ (80087f0 <calculateRpm+0x200>)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008712:	4932      	ldr	r1, [pc, #200]	@ (80087dc <calculateRpm+0x1ec>)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800871a:	4619      	mov	r1, r3
 800871c:	4610      	mov	r0, r2
 800871e:	f7f8 fda0 	bl	8001262 <FO_IIR_Compute>
 8008722:	4603      	mov	r3, r0
 8008724:	4619      	mov	r1, r3
 8008726:	4620      	mov	r0, r4
 8008728:	f7f8 fb62 	bl	8000df0 <__aeabi_fmul>
 800872c:	4603      	mov	r3, r0
 800872e:	4619      	mov	r1, r3
 8008730:	4a2a      	ldr	r2, [pc, #168]	@ (80087dc <calculateRpm+0x1ec>)
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		if ((meas_wheel_angular_vel[i] > -0.001f) && (meas_wheel_angular_vel[i] < 0.001f))	meas_wheel_angular_vel[i] = 0;
 8008738:	4a28      	ldr	r2, [pc, #160]	@ (80087dc <calculateRpm+0x1ec>)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008740:	492c      	ldr	r1, [pc, #176]	@ (80087f4 <calculateRpm+0x204>)
 8008742:	4618      	mov	r0, r3
 8008744:	f7f8 fd10 	bl	8001168 <__aeabi_fcmpgt>
 8008748:	4603      	mov	r3, r0
 800874a:	2b00      	cmp	r3, #0
 800874c:	d010      	beq.n	8008770 <calculateRpm+0x180>
 800874e:	4a23      	ldr	r2, [pc, #140]	@ (80087dc <calculateRpm+0x1ec>)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008756:	4928      	ldr	r1, [pc, #160]	@ (80087f8 <calculateRpm+0x208>)
 8008758:	4618      	mov	r0, r3
 800875a:	f7f8 fce7 	bl	800112c <__aeabi_fcmplt>
 800875e:	4603      	mov	r3, r0
 8008760:	2b00      	cmp	r3, #0
 8008762:	d005      	beq.n	8008770 <calculateRpm+0x180>
 8008764:	4a1d      	ldr	r2, [pc, #116]	@ (80087dc <calculateRpm+0x1ec>)
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	f04f 0100 	mov.w	r1, #0
 800876c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		meas_theta[i] += meas_wheel_angular_vel[i] * (float)dt[wheel_velocity_feedback_event] / 1000.0f;
 8008770:	4a22      	ldr	r2, [pc, #136]	@ (80087fc <calculateRpm+0x20c>)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008778:	4a18      	ldr	r2, [pc, #96]	@ (80087dc <calculateRpm+0x1ec>)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 8008780:	4b17      	ldr	r3, [pc, #92]	@ (80087e0 <calculateRpm+0x1f0>)
 8008782:	685b      	ldr	r3, [r3, #4]
 8008784:	4618      	mov	r0, r3
 8008786:	f7f8 fadb 	bl	8000d40 <__aeabi_ui2f>
 800878a:	4603      	mov	r3, r0
 800878c:	4619      	mov	r1, r3
 800878e:	4628      	mov	r0, r5
 8008790:	f7f8 fb2e 	bl	8000df0 <__aeabi_fmul>
 8008794:	4603      	mov	r3, r0
 8008796:	4913      	ldr	r1, [pc, #76]	@ (80087e4 <calculateRpm+0x1f4>)
 8008798:	4618      	mov	r0, r3
 800879a:	f7f8 fbdd 	bl	8000f58 <__aeabi_fdiv>
 800879e:	4603      	mov	r3, r0
 80087a0:	4619      	mov	r1, r3
 80087a2:	4620      	mov	r0, r4
 80087a4:	f7f8 fa1c 	bl	8000be0 <__addsf3>
 80087a8:	4603      	mov	r3, r0
 80087aa:	4619      	mov	r1, r3
 80087ac:	4a13      	ldr	r2, [pc, #76]	@ (80087fc <calculateRpm+0x20c>)
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < NUM_OF_MOTOR; ++i)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	3301      	adds	r3, #1
 80087b8:	607b      	str	r3, [r7, #4]
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2b03      	cmp	r3, #3
 80087be:	f77f af1d 	ble.w	80085fc <calculateRpm+0xc>
	}
}
 80087c2:	bf00      	nop
 80087c4:	bf00      	nop
 80087c6:	3708      	adds	r7, #8
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bdb0      	pop	{r4, r5, r7, pc}
 80087cc:	200089dc 	.word	0x200089dc
 80087d0:	20008938 	.word	0x20008938
 80087d4:	200089c4 	.word	0x200089c4
 80087d8:	41a00000 	.word	0x41a00000
 80087dc:	20008950 	.word	0x20008950
 80087e0:	20000008 	.word	0x20000008
 80087e4:	447a0000 	.word	0x447a0000
 80087e8:	40c90fdb 	.word	0x40c90fdb
 80087ec:	200089cc 	.word	0x200089cc
 80087f0:	200089ec 	.word	0x200089ec
 80087f4:	ba83126f 	.word	0xba83126f
 80087f8:	3a83126f 	.word	0x3a83126f
 80087fc:	20008960 	.word	0x20008960

08008800 <calculateOdometry>:
void calculateOdometry(void)
{
 8008800:	b5b0      	push	{r4, r5, r7, lr}
 8008802:	b086      	sub	sp, #24
 8008804:	af00      	add	r7, sp, #0
	float w[NUM_OF_MOTOR] = { 0.0 };
 8008806:	463b      	mov	r3, r7
 8008808:	2200      	movs	r2, #0
 800880a:	601a      	str	r2, [r3, #0]
 800880c:	605a      	str	r2, [r3, #4]
 800880e:	609a      	str	r2, [r3, #8]
 8008810:	60da      	str	r2, [r3, #12]

	for (int i = 0; i < NUM_OF_MOTOR; i++)
 8008812:	2300      	movs	r3, #0
 8008814:	617b      	str	r3, [r7, #20]
 8008816:	e00c      	b.n	8008832 <calculateOdometry+0x32>
	{
		// Calculate filtered wheel velocity (rad/s) from d_tick
		w[i] = meas_wheel_angular_vel[i];
 8008818:	4a99      	ldr	r2, [pc, #612]	@ (8008a80 <calculateOdometry+0x280>)
 800881a:	697b      	ldr	r3, [r7, #20]
 800881c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008820:	697b      	ldr	r3, [r7, #20]
 8008822:	009b      	lsls	r3, r3, #2
 8008824:	3318      	adds	r3, #24
 8008826:	443b      	add	r3, r7
 8008828:	f843 2c18 	str.w	r2, [r3, #-24]
	for (int i = 0; i < NUM_OF_MOTOR; i++)
 800882c:	697b      	ldr	r3, [r7, #20]
 800882e:	3301      	adds	r3, #1
 8008830:	617b      	str	r3, [r7, #20]
 8008832:	697b      	ldr	r3, [r7, #20]
 8008834:	2b03      	cmp	r3, #3
 8008836:	ddef      	ble.n	8008818 <calculateOdometry+0x18>
	}

	// Robot velocity in the base frame (calculated from Inverse Kinematics)
	float C = 2 / (WHEEL_SEPARATION_X + WHEEL_SEPARATION_Y);
 8008838:	4b92      	ldr	r3, [pc, #584]	@ (8008a84 <calculateOdometry+0x284>)
 800883a:	613b      	str	r3, [r7, #16]
	odom_vel[linear_x]  = (WHEEL_RADIUS / 4) * ( w[0] + w[1] + w[2] + w[3]);
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	687a      	ldr	r2, [r7, #4]
 8008840:	4611      	mov	r1, r2
 8008842:	4618      	mov	r0, r3
 8008844:	f7f8 f9cc 	bl	8000be0 <__addsf3>
 8008848:	4603      	mov	r3, r0
 800884a:	461a      	mov	r2, r3
 800884c:	68bb      	ldr	r3, [r7, #8]
 800884e:	4619      	mov	r1, r3
 8008850:	4610      	mov	r0, r2
 8008852:	f7f8 f9c5 	bl	8000be0 <__addsf3>
 8008856:	4603      	mov	r3, r0
 8008858:	461a      	mov	r2, r3
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	4619      	mov	r1, r3
 800885e:	4610      	mov	r0, r2
 8008860:	f7f8 f9be 	bl	8000be0 <__addsf3>
 8008864:	4603      	mov	r3, r0
 8008866:	4618      	mov	r0, r3
 8008868:	f7f7 fe4a 	bl	8000500 <__aeabi_f2d>
 800886c:	a382      	add	r3, pc, #520	@ (adr r3, 8008a78 <calculateOdometry+0x278>)
 800886e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008872:	f7f7 fe9d 	bl	80005b0 <__aeabi_dmul>
 8008876:	4602      	mov	r2, r0
 8008878:	460b      	mov	r3, r1
 800887a:	4610      	mov	r0, r2
 800887c:	4619      	mov	r1, r3
 800887e:	f7f8 f959 	bl	8000b34 <__aeabi_d2f>
 8008882:	4603      	mov	r3, r0
 8008884:	4a80      	ldr	r2, [pc, #512]	@ (8008a88 <calculateOdometry+0x288>)
 8008886:	6013      	str	r3, [r2, #0]
	odom_vel[linear_y]  = (WHEEL_RADIUS / 4) * (-w[0] + w[1] + w[2] - w[3]);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	683a      	ldr	r2, [r7, #0]
 800888c:	4611      	mov	r1, r2
 800888e:	4618      	mov	r0, r3
 8008890:	f7f8 f9a4 	bl	8000bdc <__aeabi_fsub>
 8008894:	4603      	mov	r3, r0
 8008896:	461a      	mov	r2, r3
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	4619      	mov	r1, r3
 800889c:	4610      	mov	r0, r2
 800889e:	f7f8 f99f 	bl	8000be0 <__addsf3>
 80088a2:	4603      	mov	r3, r0
 80088a4:	461a      	mov	r2, r3
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	4619      	mov	r1, r3
 80088aa:	4610      	mov	r0, r2
 80088ac:	f7f8 f996 	bl	8000bdc <__aeabi_fsub>
 80088b0:	4603      	mov	r3, r0
 80088b2:	4618      	mov	r0, r3
 80088b4:	f7f7 fe24 	bl	8000500 <__aeabi_f2d>
 80088b8:	a36f      	add	r3, pc, #444	@ (adr r3, 8008a78 <calculateOdometry+0x278>)
 80088ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088be:	f7f7 fe77 	bl	80005b0 <__aeabi_dmul>
 80088c2:	4602      	mov	r2, r0
 80088c4:	460b      	mov	r3, r1
 80088c6:	4610      	mov	r0, r2
 80088c8:	4619      	mov	r1, r3
 80088ca:	f7f8 f933 	bl	8000b34 <__aeabi_d2f>
 80088ce:	4603      	mov	r3, r0
 80088d0:	4a6d      	ldr	r2, [pc, #436]	@ (8008a88 <calculateOdometry+0x288>)
 80088d2:	6053      	str	r3, [r2, #4]
	odom_vel[angular_z] = (WHEEL_RADIUS / 4) * C * (-w[0] + w[1] - w[2] + w[3]);
 80088d4:	6938      	ldr	r0, [r7, #16]
 80088d6:	f7f7 fe13 	bl	8000500 <__aeabi_f2d>
 80088da:	a367      	add	r3, pc, #412	@ (adr r3, 8008a78 <calculateOdometry+0x278>)
 80088dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088e0:	f7f7 fe66 	bl	80005b0 <__aeabi_dmul>
 80088e4:	4602      	mov	r2, r0
 80088e6:	460b      	mov	r3, r1
 80088e8:	4614      	mov	r4, r2
 80088ea:	461d      	mov	r5, r3
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	683a      	ldr	r2, [r7, #0]
 80088f0:	4611      	mov	r1, r2
 80088f2:	4618      	mov	r0, r3
 80088f4:	f7f8 f972 	bl	8000bdc <__aeabi_fsub>
 80088f8:	4603      	mov	r3, r0
 80088fa:	461a      	mov	r2, r3
 80088fc:	68bb      	ldr	r3, [r7, #8]
 80088fe:	4619      	mov	r1, r3
 8008900:	4610      	mov	r0, r2
 8008902:	f7f8 f96b 	bl	8000bdc <__aeabi_fsub>
 8008906:	4603      	mov	r3, r0
 8008908:	461a      	mov	r2, r3
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	4619      	mov	r1, r3
 800890e:	4610      	mov	r0, r2
 8008910:	f7f8 f966 	bl	8000be0 <__addsf3>
 8008914:	4603      	mov	r3, r0
 8008916:	4618      	mov	r0, r3
 8008918:	f7f7 fdf2 	bl	8000500 <__aeabi_f2d>
 800891c:	4602      	mov	r2, r0
 800891e:	460b      	mov	r3, r1
 8008920:	4620      	mov	r0, r4
 8008922:	4629      	mov	r1, r5
 8008924:	f7f7 fe44 	bl	80005b0 <__aeabi_dmul>
 8008928:	4602      	mov	r2, r0
 800892a:	460b      	mov	r3, r1
 800892c:	4610      	mov	r0, r2
 800892e:	4619      	mov	r1, r3
 8008930:	f7f8 f900 	bl	8000b34 <__aeabi_d2f>
 8008934:	4603      	mov	r3, r0
 8008936:	4a54      	ldr	r2, [pc, #336]	@ (8008a88 <calculateOdometry+0x288>)
 8008938:	6093      	str	r3, [r2, #8]

	encoder_yaw += odom_vel[angular_z] *  ((float)dt[odom_publish_event])/1000.0f;
 800893a:	4b53      	ldr	r3, [pc, #332]	@ (8008a88 <calculateOdometry+0x288>)
 800893c:	689c      	ldr	r4, [r3, #8]
 800893e:	4b53      	ldr	r3, [pc, #332]	@ (8008a8c <calculateOdometry+0x28c>)
 8008940:	68db      	ldr	r3, [r3, #12]
 8008942:	4618      	mov	r0, r3
 8008944:	f7f8 f9fc 	bl	8000d40 <__aeabi_ui2f>
 8008948:	4603      	mov	r3, r0
 800894a:	4619      	mov	r1, r3
 800894c:	4620      	mov	r0, r4
 800894e:	f7f8 fa4f 	bl	8000df0 <__aeabi_fmul>
 8008952:	4603      	mov	r3, r0
 8008954:	494e      	ldr	r1, [pc, #312]	@ (8008a90 <calculateOdometry+0x290>)
 8008956:	4618      	mov	r0, r3
 8008958:	f7f8 fafe 	bl	8000f58 <__aeabi_fdiv>
 800895c:	4603      	mov	r3, r0
 800895e:	461a      	mov	r2, r3
 8008960:	4b4c      	ldr	r3, [pc, #304]	@ (8008a94 <calculateOdometry+0x294>)
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	4619      	mov	r1, r3
 8008966:	4610      	mov	r0, r2
 8008968:	f7f8 f93a 	bl	8000be0 <__addsf3>
 800896c:	4603      	mov	r3, r0
 800896e:	461a      	mov	r2, r3
 8008970:	4b48      	ldr	r3, [pc, #288]	@ (8008a94 <calculateOdometry+0x294>)
 8008972:	601a      	str	r2, [r3, #0]

	// Robot position in the world frame
	odom_pose[linear_x] += (odom_vel[linear_x] * cos(encoder_yaw) - odom_vel[linear_y] * sin(encoder_yaw)) * ((float)dt[odom_publish_event]) / 1000.0f;
 8008974:	4b44      	ldr	r3, [pc, #272]	@ (8008a88 <calculateOdometry+0x288>)
 8008976:	681c      	ldr	r4, [r3, #0]
 8008978:	4b46      	ldr	r3, [pc, #280]	@ (8008a94 <calculateOdometry+0x294>)
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	4618      	mov	r0, r3
 800897e:	f7f9 f8e9 	bl	8001b54 <_ZSt3cosf>
 8008982:	4603      	mov	r3, r0
 8008984:	4619      	mov	r1, r3
 8008986:	4620      	mov	r0, r4
 8008988:	f7f8 fa32 	bl	8000df0 <__aeabi_fmul>
 800898c:	4603      	mov	r3, r0
 800898e:	461d      	mov	r5, r3
 8008990:	4b3d      	ldr	r3, [pc, #244]	@ (8008a88 <calculateOdometry+0x288>)
 8008992:	685c      	ldr	r4, [r3, #4]
 8008994:	4b3f      	ldr	r3, [pc, #252]	@ (8008a94 <calculateOdometry+0x294>)
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	4618      	mov	r0, r3
 800899a:	f7f9 f8e7 	bl	8001b6c <_ZSt3sinf>
 800899e:	4603      	mov	r3, r0
 80089a0:	4619      	mov	r1, r3
 80089a2:	4620      	mov	r0, r4
 80089a4:	f7f8 fa24 	bl	8000df0 <__aeabi_fmul>
 80089a8:	4603      	mov	r3, r0
 80089aa:	4619      	mov	r1, r3
 80089ac:	4628      	mov	r0, r5
 80089ae:	f7f8 f915 	bl	8000bdc <__aeabi_fsub>
 80089b2:	4603      	mov	r3, r0
 80089b4:	461c      	mov	r4, r3
 80089b6:	4b35      	ldr	r3, [pc, #212]	@ (8008a8c <calculateOdometry+0x28c>)
 80089b8:	68db      	ldr	r3, [r3, #12]
 80089ba:	4618      	mov	r0, r3
 80089bc:	f7f8 f9c0 	bl	8000d40 <__aeabi_ui2f>
 80089c0:	4603      	mov	r3, r0
 80089c2:	4619      	mov	r1, r3
 80089c4:	4620      	mov	r0, r4
 80089c6:	f7f8 fa13 	bl	8000df0 <__aeabi_fmul>
 80089ca:	4603      	mov	r3, r0
 80089cc:	4930      	ldr	r1, [pc, #192]	@ (8008a90 <calculateOdometry+0x290>)
 80089ce:	4618      	mov	r0, r3
 80089d0:	f7f8 fac2 	bl	8000f58 <__aeabi_fdiv>
 80089d4:	4603      	mov	r3, r0
 80089d6:	461a      	mov	r2, r3
 80089d8:	4b2f      	ldr	r3, [pc, #188]	@ (8008a98 <calculateOdometry+0x298>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	4619      	mov	r1, r3
 80089de:	4610      	mov	r0, r2
 80089e0:	f7f8 f8fe 	bl	8000be0 <__addsf3>
 80089e4:	4603      	mov	r3, r0
 80089e6:	461a      	mov	r2, r3
 80089e8:	4b2b      	ldr	r3, [pc, #172]	@ (8008a98 <calculateOdometry+0x298>)
 80089ea:	601a      	str	r2, [r3, #0]
	odom_pose[linear_y] += (odom_vel[linear_x] * sin(encoder_yaw) + odom_vel[linear_y] * cos(encoder_yaw)) * ((float)dt[odom_publish_event]) / 1000.0f;
 80089ec:	4b26      	ldr	r3, [pc, #152]	@ (8008a88 <calculateOdometry+0x288>)
 80089ee:	681c      	ldr	r4, [r3, #0]
 80089f0:	4b28      	ldr	r3, [pc, #160]	@ (8008a94 <calculateOdometry+0x294>)
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	4618      	mov	r0, r3
 80089f6:	f7f9 f8b9 	bl	8001b6c <_ZSt3sinf>
 80089fa:	4603      	mov	r3, r0
 80089fc:	4619      	mov	r1, r3
 80089fe:	4620      	mov	r0, r4
 8008a00:	f7f8 f9f6 	bl	8000df0 <__aeabi_fmul>
 8008a04:	4603      	mov	r3, r0
 8008a06:	461d      	mov	r5, r3
 8008a08:	4b1f      	ldr	r3, [pc, #124]	@ (8008a88 <calculateOdometry+0x288>)
 8008a0a:	685c      	ldr	r4, [r3, #4]
 8008a0c:	4b21      	ldr	r3, [pc, #132]	@ (8008a94 <calculateOdometry+0x294>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	4618      	mov	r0, r3
 8008a12:	f7f9 f89f 	bl	8001b54 <_ZSt3cosf>
 8008a16:	4603      	mov	r3, r0
 8008a18:	4619      	mov	r1, r3
 8008a1a:	4620      	mov	r0, r4
 8008a1c:	f7f8 f9e8 	bl	8000df0 <__aeabi_fmul>
 8008a20:	4603      	mov	r3, r0
 8008a22:	4619      	mov	r1, r3
 8008a24:	4628      	mov	r0, r5
 8008a26:	f7f8 f8db 	bl	8000be0 <__addsf3>
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	461c      	mov	r4, r3
 8008a2e:	4b17      	ldr	r3, [pc, #92]	@ (8008a8c <calculateOdometry+0x28c>)
 8008a30:	68db      	ldr	r3, [r3, #12]
 8008a32:	4618      	mov	r0, r3
 8008a34:	f7f8 f984 	bl	8000d40 <__aeabi_ui2f>
 8008a38:	4603      	mov	r3, r0
 8008a3a:	4619      	mov	r1, r3
 8008a3c:	4620      	mov	r0, r4
 8008a3e:	f7f8 f9d7 	bl	8000df0 <__aeabi_fmul>
 8008a42:	4603      	mov	r3, r0
 8008a44:	4912      	ldr	r1, [pc, #72]	@ (8008a90 <calculateOdometry+0x290>)
 8008a46:	4618      	mov	r0, r3
 8008a48:	f7f8 fa86 	bl	8000f58 <__aeabi_fdiv>
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	461a      	mov	r2, r3
 8008a50:	4b11      	ldr	r3, [pc, #68]	@ (8008a98 <calculateOdometry+0x298>)
 8008a52:	685b      	ldr	r3, [r3, #4]
 8008a54:	4619      	mov	r1, r3
 8008a56:	4610      	mov	r0, r2
 8008a58:	f7f8 f8c2 	bl	8000be0 <__addsf3>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	461a      	mov	r2, r3
 8008a60:	4b0d      	ldr	r3, [pc, #52]	@ (8008a98 <calculateOdometry+0x298>)
 8008a62:	605a      	str	r2, [r3, #4]
	odom_pose[angular_z] = encoder_yaw;
 8008a64:	4b0b      	ldr	r3, [pc, #44]	@ (8008a94 <calculateOdometry+0x294>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	4a0b      	ldr	r2, [pc, #44]	@ (8008a98 <calculateOdometry+0x298>)
 8008a6a:	6093      	str	r3, [r2, #8]
}
 8008a6c:	bf00      	nop
 8008a6e:	3718      	adds	r7, #24
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bdb0      	pop	{r4, r5, r7, pc}
 8008a74:	f3af 8000 	nop.w
 8008a78:	3126e979 	.word	0x3126e979
 8008a7c:	3f7cac08 	.word	0x3f7cac08
 8008a80:	20008950 	.word	0x20008950
 8008a84:	40fcf6e5 	.word	0x40fcf6e5
 8008a88:	20008920 	.word	0x20008920
 8008a8c:	20000008 	.word	0x20000008
 8008a90:	447a0000 	.word	0x447a0000
 8008a94:	20008a14 	.word	0x20008a14
 8008a98:	20008914 	.word	0x20008914
 8008a9c:	00000000 	.word	0x00000000

08008aa0 <calculateWheelVelocity>:
void calculateWheelVelocity(void)
{
 8008aa0:	b590      	push	{r4, r7, lr}
 8008aa2:	b083      	sub	sp, #12
 8008aa4:	af00      	add	r7, sp, #0
	float C = (WHEEL_SEPARATION_X + WHEEL_SEPARATION_Y) / 2;
 8008aa6:	4b60      	ldr	r3, [pc, #384]	@ (8008c28 <calculateWheelVelocity+0x188>)
 8008aa8:	603b      	str	r3, [r7, #0]
	// Inverse kinematics
	wheel_angular_vel[front_left] = INV_WHEEL_RADIUS *
									(goal_vel[linear_x] - goal_vel[linear_y] - C * goal_vel[angular_z]);
 8008aaa:	4b60      	ldr	r3, [pc, #384]	@ (8008c2c <calculateWheelVelocity+0x18c>)
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	4a5f      	ldr	r2, [pc, #380]	@ (8008c2c <calculateWheelVelocity+0x18c>)
 8008ab0:	6852      	ldr	r2, [r2, #4]
 8008ab2:	4611      	mov	r1, r2
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	f7f8 f891 	bl	8000bdc <__aeabi_fsub>
 8008aba:	4603      	mov	r3, r0
 8008abc:	461c      	mov	r4, r3
 8008abe:	4b5b      	ldr	r3, [pc, #364]	@ (8008c2c <calculateWheelVelocity+0x18c>)
 8008ac0:	689b      	ldr	r3, [r3, #8]
 8008ac2:	6839      	ldr	r1, [r7, #0]
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	f7f8 f993 	bl	8000df0 <__aeabi_fmul>
 8008aca:	4603      	mov	r3, r0
 8008acc:	4619      	mov	r1, r3
 8008ace:	4620      	mov	r0, r4
 8008ad0:	f7f8 f884 	bl	8000bdc <__aeabi_fsub>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f7f7 fd12 	bl	8000500 <__aeabi_f2d>
	wheel_angular_vel[front_left] = INV_WHEEL_RADIUS *
 8008adc:	a350      	add	r3, pc, #320	@ (adr r3, 8008c20 <calculateWheelVelocity+0x180>)
 8008ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ae2:	f7f7 fd65 	bl	80005b0 <__aeabi_dmul>
 8008ae6:	4602      	mov	r2, r0
 8008ae8:	460b      	mov	r3, r1
 8008aea:	4610      	mov	r0, r2
 8008aec:	4619      	mov	r1, r3
 8008aee:	f7f8 f821 	bl	8000b34 <__aeabi_d2f>
 8008af2:	4603      	mov	r3, r0
 8008af4:	4a4e      	ldr	r2, [pc, #312]	@ (8008c30 <calculateWheelVelocity+0x190>)
 8008af6:	6013      	str	r3, [r2, #0]
	wheel_angular_vel[front_right] = INV_WHEEL_RADIUS *
									(goal_vel[linear_x] + goal_vel[linear_y] + C * goal_vel[angular_z]);
 8008af8:	4b4c      	ldr	r3, [pc, #304]	@ (8008c2c <calculateWheelVelocity+0x18c>)
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	4a4b      	ldr	r2, [pc, #300]	@ (8008c2c <calculateWheelVelocity+0x18c>)
 8008afe:	6852      	ldr	r2, [r2, #4]
 8008b00:	4611      	mov	r1, r2
 8008b02:	4618      	mov	r0, r3
 8008b04:	f7f8 f86c 	bl	8000be0 <__addsf3>
 8008b08:	4603      	mov	r3, r0
 8008b0a:	461c      	mov	r4, r3
 8008b0c:	4b47      	ldr	r3, [pc, #284]	@ (8008c2c <calculateWheelVelocity+0x18c>)
 8008b0e:	689b      	ldr	r3, [r3, #8]
 8008b10:	6839      	ldr	r1, [r7, #0]
 8008b12:	4618      	mov	r0, r3
 8008b14:	f7f8 f96c 	bl	8000df0 <__aeabi_fmul>
 8008b18:	4603      	mov	r3, r0
 8008b1a:	4619      	mov	r1, r3
 8008b1c:	4620      	mov	r0, r4
 8008b1e:	f7f8 f85f 	bl	8000be0 <__addsf3>
 8008b22:	4603      	mov	r3, r0
 8008b24:	4618      	mov	r0, r3
 8008b26:	f7f7 fceb 	bl	8000500 <__aeabi_f2d>
	wheel_angular_vel[front_right] = INV_WHEEL_RADIUS *
 8008b2a:	a33d      	add	r3, pc, #244	@ (adr r3, 8008c20 <calculateWheelVelocity+0x180>)
 8008b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b30:	f7f7 fd3e 	bl	80005b0 <__aeabi_dmul>
 8008b34:	4602      	mov	r2, r0
 8008b36:	460b      	mov	r3, r1
 8008b38:	4610      	mov	r0, r2
 8008b3a:	4619      	mov	r1, r3
 8008b3c:	f7f7 fffa 	bl	8000b34 <__aeabi_d2f>
 8008b40:	4603      	mov	r3, r0
 8008b42:	4a3b      	ldr	r2, [pc, #236]	@ (8008c30 <calculateWheelVelocity+0x190>)
 8008b44:	6053      	str	r3, [r2, #4]
	wheel_angular_vel[back_left] = INV_WHEEL_RADIUS *
									(goal_vel[linear_x] + goal_vel[linear_y] - C * goal_vel[angular_z]);
 8008b46:	4b39      	ldr	r3, [pc, #228]	@ (8008c2c <calculateWheelVelocity+0x18c>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	4a38      	ldr	r2, [pc, #224]	@ (8008c2c <calculateWheelVelocity+0x18c>)
 8008b4c:	6852      	ldr	r2, [r2, #4]
 8008b4e:	4611      	mov	r1, r2
 8008b50:	4618      	mov	r0, r3
 8008b52:	f7f8 f845 	bl	8000be0 <__addsf3>
 8008b56:	4603      	mov	r3, r0
 8008b58:	461c      	mov	r4, r3
 8008b5a:	4b34      	ldr	r3, [pc, #208]	@ (8008c2c <calculateWheelVelocity+0x18c>)
 8008b5c:	689b      	ldr	r3, [r3, #8]
 8008b5e:	6839      	ldr	r1, [r7, #0]
 8008b60:	4618      	mov	r0, r3
 8008b62:	f7f8 f945 	bl	8000df0 <__aeabi_fmul>
 8008b66:	4603      	mov	r3, r0
 8008b68:	4619      	mov	r1, r3
 8008b6a:	4620      	mov	r0, r4
 8008b6c:	f7f8 f836 	bl	8000bdc <__aeabi_fsub>
 8008b70:	4603      	mov	r3, r0
 8008b72:	4618      	mov	r0, r3
 8008b74:	f7f7 fcc4 	bl	8000500 <__aeabi_f2d>
	wheel_angular_vel[back_left] = INV_WHEEL_RADIUS *
 8008b78:	a329      	add	r3, pc, #164	@ (adr r3, 8008c20 <calculateWheelVelocity+0x180>)
 8008b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b7e:	f7f7 fd17 	bl	80005b0 <__aeabi_dmul>
 8008b82:	4602      	mov	r2, r0
 8008b84:	460b      	mov	r3, r1
 8008b86:	4610      	mov	r0, r2
 8008b88:	4619      	mov	r1, r3
 8008b8a:	f7f7 ffd3 	bl	8000b34 <__aeabi_d2f>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	4a27      	ldr	r2, [pc, #156]	@ (8008c30 <calculateWheelVelocity+0x190>)
 8008b92:	6093      	str	r3, [r2, #8]
	wheel_angular_vel[back_right] = INV_WHEEL_RADIUS *
									(goal_vel[linear_x] - goal_vel[linear_y] + C * goal_vel[angular_z]);
 8008b94:	4b25      	ldr	r3, [pc, #148]	@ (8008c2c <calculateWheelVelocity+0x18c>)
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	4a24      	ldr	r2, [pc, #144]	@ (8008c2c <calculateWheelVelocity+0x18c>)
 8008b9a:	6852      	ldr	r2, [r2, #4]
 8008b9c:	4611      	mov	r1, r2
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f7f8 f81c 	bl	8000bdc <__aeabi_fsub>
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	461c      	mov	r4, r3
 8008ba8:	4b20      	ldr	r3, [pc, #128]	@ (8008c2c <calculateWheelVelocity+0x18c>)
 8008baa:	689b      	ldr	r3, [r3, #8]
 8008bac:	6839      	ldr	r1, [r7, #0]
 8008bae:	4618      	mov	r0, r3
 8008bb0:	f7f8 f91e 	bl	8000df0 <__aeabi_fmul>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	4619      	mov	r1, r3
 8008bb8:	4620      	mov	r0, r4
 8008bba:	f7f8 f811 	bl	8000be0 <__addsf3>
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	f7f7 fc9d 	bl	8000500 <__aeabi_f2d>
	wheel_angular_vel[back_right] = INV_WHEEL_RADIUS *
 8008bc6:	a316      	add	r3, pc, #88	@ (adr r3, 8008c20 <calculateWheelVelocity+0x180>)
 8008bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bcc:	f7f7 fcf0 	bl	80005b0 <__aeabi_dmul>
 8008bd0:	4602      	mov	r2, r0
 8008bd2:	460b      	mov	r3, r1
 8008bd4:	4610      	mov	r0, r2
 8008bd6:	4619      	mov	r1, r3
 8008bd8:	f7f7 ffac 	bl	8000b34 <__aeabi_d2f>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	4a14      	ldr	r2, [pc, #80]	@ (8008c30 <calculateWheelVelocity+0x190>)
 8008be0:	60d3      	str	r3, [r2, #12]

	for (int i = 0; i < NUM_OF_MOTOR; i++)
 8008be2:	2300      	movs	r3, #0
 8008be4:	607b      	str	r3, [r7, #4]
 8008be6:	e011      	b.n	8008c0c <calculateWheelVelocity+0x16c>
	{
		controller[i]->set_point = wheel_angular_vel[i];
 8008be8:	4a11      	ldr	r2, [pc, #68]	@ (8008c30 <calculateWheelVelocity+0x190>)
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008bf0:	4910      	ldr	r1, [pc, #64]	@ (8008c34 <calculateWheelVelocity+0x194>)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 8008bf8:	4610      	mov	r0, r2
 8008bfa:	f7f7 fc81 	bl	8000500 <__aeabi_f2d>
 8008bfe:	4602      	mov	r2, r0
 8008c00:	460b      	mov	r3, r1
 8008c02:	e9c4 2300 	strd	r2, r3, [r4]
	for (int i = 0; i < NUM_OF_MOTOR; i++)
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	3301      	adds	r3, #1
 8008c0a:	607b      	str	r3, [r7, #4]
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2b03      	cmp	r3, #3
 8008c10:	ddea      	ble.n	8008be8 <calculateWheelVelocity+0x148>
	}
}
 8008c12:	bf00      	nop
 8008c14:	bf00      	nop
 8008c16:	370c      	adds	r7, #12
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd90      	pop	{r4, r7, pc}
 8008c1c:	f3af 8000 	nop.w
 8008c20:	b6db6db7 	.word	0xb6db6db7
 8008c24:	4041db6d 	.word	0x4041db6d
 8008c28:	3e018937 	.word	0x3e018937
 8008c2c:	2000892c 	.word	0x2000892c
 8008c30:	20008940 	.word	0x20008940
 8008c34:	200089fc 	.word	0x200089fc

08008c38 <publishRobotState>:
	imu_msg.header.frame_id = imu_frame_id;
	imu_msg.header.stamp = nh.now();
	pub_imu.publish(&imu_msg);
}
void publishRobotState(void)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	af00      	add	r7, sp, #0
	pub_odom.publish(&odom_msg);
 8008c3c:	4904      	ldr	r1, [pc, #16]	@ (8008c50 <publishRobotState+0x18>)
 8008c3e:	4805      	ldr	r0, [pc, #20]	@ (8008c54 <publishRobotState+0x1c>)
 8008c40:	f7f9 fdf4 	bl	800282c <_ZN3ros9Publisher7publishEPKNS_3MsgE>
	pub_joint_states.publish(&joint_states_msg);
 8008c44:	4904      	ldr	r1, [pc, #16]	@ (8008c58 <publishRobotState+0x20>)
 8008c46:	4805      	ldr	r0, [pc, #20]	@ (8008c5c <publishRobotState+0x24>)
 8008c48:	f7f9 fdf0 	bl	800282c <_ZN3ros9Publisher7publishEPKNS_3MsgE>
}
 8008c4c:	bf00      	nop
 8008c4e:	bd80      	pop	{r7, pc}
 8008c50:	20008588 	.word	0x20008588
 8008c54:	20008890 	.word	0x20008890
 8008c58:	200088a8 	.word	0x200088a8
 8008c5c:	20008900 	.word	0x20008900

08008c60 <controlMotors>:
/* PUBLISH FUNCTIONS START */

/* CONTROL FUNCTIONS START */
void controlMotors(void)
{
 8008c60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c62:	b085      	sub	sp, #20
 8008c64:	af02      	add	r7, sp, #8
	for (int i = 0; i < NUM_OF_MOTOR; i++)
 8008c66:	2300      	movs	r3, #0
 8008c68:	607b      	str	r3, [r7, #4]
 8008c6a:	e077      	b.n	8008d5c <controlMotors+0xfc>
	{
		if (mecabot_motor[i]->state != STATE_STOP)
 8008c6c:	4a4a      	ldr	r2, [pc, #296]	@ (8008d98 <controlMotors+0x138>)
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c74:	f993 3000 	ldrsb.w	r3, [r3]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d023      	beq.n	8008cc4 <controlMotors+0x64>
		{
			if ((meas_wheel_angular_vel[i] > -WHEEL_MIN_ANGULAR_VELOCITY) && (meas_wheel_angular_vel[i] < WHEEL_MIN_ANGULAR_VELOCITY))
 8008c7c:	4a47      	ldr	r2, [pc, #284]	@ (8008d9c <controlMotors+0x13c>)
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c84:	4946      	ldr	r1, [pc, #280]	@ (8008da0 <controlMotors+0x140>)
 8008c86:	4618      	mov	r0, r3
 8008c88:	f7f8 fa6e 	bl	8001168 <__aeabi_fcmpgt>
 8008c8c:	4603      	mov	r3, r0
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d018      	beq.n	8008cc4 <controlMotors+0x64>
 8008c92:	4a42      	ldr	r2, [pc, #264]	@ (8008d9c <controlMotors+0x13c>)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c9a:	4942      	ldr	r1, [pc, #264]	@ (8008da4 <controlMotors+0x144>)
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	f7f8 fa45 	bl	800112c <__aeabi_fcmplt>
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d00d      	beq.n	8008cc4 <controlMotors+0x64>
			{
				duty[i] = 0;
 8008ca8:	4a3f      	ldr	r2, [pc, #252]	@ (8008da8 <controlMotors+0x148>)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2100      	movs	r1, #0
 8008cae:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				Motor_ChangeState(mecabot_motor[i], STATE_STOP);
 8008cb2:	4a39      	ldr	r2, [pc, #228]	@ (8008d98 <controlMotors+0x138>)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008cba:	2100      	movs	r1, #0
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	f7f8 fc31 	bl	8001524 <Motor_ChangeState>
				continue;
 8008cc2:	e048      	b.n	8008d56 <controlMotors+0xf6>
			}
		}

	    if (use_pid)
 8008cc4:	4b39      	ldr	r3, [pc, #228]	@ (8008dac <controlMotors+0x14c>)
 8008cc6:	781b      	ldrb	r3, [r3, #0]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d027      	beq.n	8008d1c <controlMotors+0xbc>
	    {
	    	duty[i] = PID_Compute(controller[i], meas_wheel_angular_vel[i], dt[motor_control_event]);
 8008ccc:	4a38      	ldr	r2, [pc, #224]	@ (8008db0 <controlMotors+0x150>)
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 8008cd4:	4a31      	ldr	r2, [pc, #196]	@ (8008d9c <controlMotors+0x13c>)
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008cdc:	4618      	mov	r0, r3
 8008cde:	f7f7 fc0f 	bl	8000500 <__aeabi_f2d>
 8008ce2:	4604      	mov	r4, r0
 8008ce4:	460d      	mov	r5, r1
 8008ce6:	4b33      	ldr	r3, [pc, #204]	@ (8008db4 <controlMotors+0x154>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	4618      	mov	r0, r3
 8008cec:	f7f7 fbe6 	bl	80004bc <__aeabi_ui2d>
 8008cf0:	4602      	mov	r2, r0
 8008cf2:	460b      	mov	r3, r1
 8008cf4:	e9cd 2300 	strd	r2, r3, [sp]
 8008cf8:	4622      	mov	r2, r4
 8008cfa:	462b      	mov	r3, r5
 8008cfc:	4630      	mov	r0, r6
 8008cfe:	f001 f9a7 	bl	800a050 <PID_Compute>
 8008d02:	4602      	mov	r2, r0
 8008d04:	460b      	mov	r3, r1
 8008d06:	4610      	mov	r0, r2
 8008d08:	4619      	mov	r1, r3
 8008d0a:	f7f7 feeb 	bl	8000ae4 <__aeabi_d2iz>
 8008d0e:	4603      	mov	r3, r0
 8008d10:	b219      	sxth	r1, r3
 8008d12:	4a25      	ldr	r2, [pc, #148]	@ (8008da8 <controlMotors+0x148>)
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8008d1a:	e01c      	b.n	8008d56 <controlMotors+0xf6>
	    }
	    else
	    {
	    	duty[i] = constraint(wheel_angular_vel[i]/WHEEL_MAX_ANGULAR_VELOCITY * 255, -255, 255);
 8008d1c:	4a26      	ldr	r2, [pc, #152]	@ (8008db8 <controlMotors+0x158>)
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d24:	4925      	ldr	r1, [pc, #148]	@ (8008dbc <controlMotors+0x15c>)
 8008d26:	4618      	mov	r0, r3
 8008d28:	f7f8 f916 	bl	8000f58 <__aeabi_fdiv>
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	4924      	ldr	r1, [pc, #144]	@ (8008dc0 <controlMotors+0x160>)
 8008d30:	4618      	mov	r0, r3
 8008d32:	f7f8 f85d 	bl	8000df0 <__aeabi_fmul>
 8008d36:	4603      	mov	r3, r0
 8008d38:	4a21      	ldr	r2, [pc, #132]	@ (8008dc0 <controlMotors+0x160>)
 8008d3a:	4922      	ldr	r1, [pc, #136]	@ (8008dc4 <controlMotors+0x164>)
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	f7ff f813 	bl	8007d68 <_Z10constraintfff>
 8008d42:	4603      	mov	r3, r0
 8008d44:	4618      	mov	r0, r3
 8008d46:	f7f8 fa19 	bl	800117c <__aeabi_f2iz>
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	b219      	sxth	r1, r3
 8008d4e:	4a16      	ldr	r2, [pc, #88]	@ (8008da8 <controlMotors+0x148>)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < NUM_OF_MOTOR; i++)
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	3301      	adds	r3, #1
 8008d5a:	607b      	str	r3, [r7, #4]
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2b03      	cmp	r3, #3
 8008d60:	dd84      	ble.n	8008c6c <controlMotors+0xc>
	    }
	}

	for (int i = 0; i < NUM_OF_MOTOR; i++)
 8008d62:	2300      	movs	r3, #0
 8008d64:	603b      	str	r3, [r7, #0]
 8008d66:	e00e      	b.n	8008d86 <controlMotors+0x126>
	{
		Motor_Set_PWM_Duty(mecabot_motor[i], duty[i]);
 8008d68:	4a0b      	ldr	r2, [pc, #44]	@ (8008d98 <controlMotors+0x138>)
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008d70:	490d      	ldr	r1, [pc, #52]	@ (8008da8 <controlMotors+0x148>)
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8008d78:	4619      	mov	r1, r3
 8008d7a:	4610      	mov	r0, r2
 8008d7c:	f7f8 fb02 	bl	8001384 <Motor_Set_PWM_Duty>
	for (int i = 0; i < NUM_OF_MOTOR; i++)
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	3301      	adds	r3, #1
 8008d84:	603b      	str	r3, [r7, #0]
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	2b03      	cmp	r3, #3
 8008d8a:	dded      	ble.n	8008d68 <controlMotors+0x108>
	}
}
 8008d8c:	bf00      	nop
 8008d8e:	bf00      	nop
 8008d90:	370c      	adds	r7, #12
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d96:	bf00      	nop
 8008d98:	200089cc 	.word	0x200089cc
 8008d9c:	20008950 	.word	0x20008950
 8008da0:	bf060a92 	.word	0xbf060a92
 8008da4:	3f060a92 	.word	0x3f060a92
 8008da8:	20008a0c 	.word	0x20008a0c
 8008dac:	20000028 	.word	0x20000028
 8008db0:	200089fc 	.word	0x200089fc
 8008db4:	20000008 	.word	0x20000008
 8008db8:	20008940 	.word	0x20008940
 8008dbc:	41fb53d2 	.word	0x41fb53d2
 8008dc0:	437f0000 	.word	0x437f0000
 8008dc4:	c37f0000 	.word	0xc37f0000

08008dc8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8008dc8:	b480      	push	{r7}
 8008dca:	b085      	sub	sp, #20
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
 8008dd0:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	60fb      	str	r3, [r7, #12]
 8008dd6:	e00c      	b.n	8008df2 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x2a>
      arr[i] = (var >> (8 * i));
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	00db      	lsls	r3, r3, #3
 8008ddc:	683a      	ldr	r2, [r7, #0]
 8008dde:	fa22 f103 	lsr.w	r1, r2, r3
 8008de2:	687a      	ldr	r2, [r7, #4]
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	4413      	add	r3, r2
 8008de8:	b2ca      	uxtb	r2, r1
 8008dea:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	3301      	adds	r3, #1
 8008df0:	60fb      	str	r3, [r7, #12]
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	2b03      	cmp	r3, #3
 8008df6:	d9ef      	bls.n	8008dd8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x10>
  }
 8008df8:	bf00      	nop
 8008dfa:	bf00      	nop
 8008dfc:	3714      	adds	r7, #20
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bc80      	pop	{r7}
 8008e02:	4770      	bx	lr

08008e04 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8008e04:	b480      	push	{r7}
 8008e06:	b085      	sub	sp, #20
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
 8008e0c:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2200      	movs	r2, #0
 8008e12:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8008e14:	2300      	movs	r3, #0
 8008e16:	60fb      	str	r3, [r7, #12]
 8008e18:	e010      	b.n	8008e3c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x38>
      var |= (arr[i] << (8 * i));
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	6839      	ldr	r1, [r7, #0]
 8008e20:	68fa      	ldr	r2, [r7, #12]
 8008e22:	440a      	add	r2, r1
 8008e24:	7812      	ldrb	r2, [r2, #0]
 8008e26:	4611      	mov	r1, r2
 8008e28:	68fa      	ldr	r2, [r7, #12]
 8008e2a:	00d2      	lsls	r2, r2, #3
 8008e2c:	fa01 f202 	lsl.w	r2, r1, r2
 8008e30:	431a      	orrs	r2, r3
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	3301      	adds	r3, #1
 8008e3a:	60fb      	str	r3, [r7, #12]
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	2b03      	cmp	r3, #3
 8008e40:	d9eb      	bls.n	8008e1a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x16>
  }
 8008e42:	bf00      	nop
 8008e44:	bf00      	nop
 8008e46:	3714      	adds	r7, #20
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bc80      	pop	{r7}
 8008e4c:	4770      	bx	lr
	...

08008e50 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8008e50:	b480      	push	{r7}
 8008e52:	b083      	sub	sp, #12
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
 8008e58:	4a04      	ldr	r2, [pc, #16]	@ (8008e6c <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	601a      	str	r2, [r3, #0]
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	4618      	mov	r0, r3
 8008e62:	370c      	adds	r7, #12
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bc80      	pop	{r7}
 8008e68:	4770      	bx	lr
 8008e6a:	bf00      	nop
 8008e6c:	08010f30 	.word	0x08010f30

08008e70 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b084      	sub	sp, #16
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	60f8      	str	r0, [r7, #12]
 8008e78:	60b9      	str	r1, [r7, #8]
 8008e7a:	607a      	str	r2, [r7, #4]
 8008e7c:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	4618      	mov	r0, r3
 8008e82:	f7ff ffe5 	bl	8008e50 <_ZN3ros11Subscriber_C1Ev>
 8008e86:	4a0b      	ldr	r2, [pc, #44]	@ (8008eb4 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei+0x44>)
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	601a      	str	r2, [r3, #0]
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	3310      	adds	r3, #16
 8008e90:	4618      	mov	r0, r3
 8008e92:	f7fd fb87 	bl	80065a4 <_ZN13geometry_msgs5TwistC1Ev>
    cb_(cb),
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	687a      	ldr	r2, [r7, #4]
 8008e9a:	659a      	str	r2, [r3, #88]	@ 0x58
    endpoint_(endpoint)
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	683a      	ldr	r2, [r7, #0]
 8008ea0:	65da      	str	r2, [r3, #92]	@ 0x5c
  {
    topic_ = topic_name;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	68ba      	ldr	r2, [r7, #8]
 8008ea6:	609a      	str	r2, [r3, #8]
  };
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	4618      	mov	r0, r3
 8008eac:	3710      	adds	r7, #16
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd80      	pop	{r7, pc}
 8008eb2:	bf00      	nop
 8008eb4:	08010db4 	.word	0x08010db4

08008eb8 <_ZN3ros10SubscriberIN8std_msgs5UInt8EvEC1EPKcPFvRKS2_Ei>:
  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b084      	sub	sp, #16
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	60f8      	str	r0, [r7, #12]
 8008ec0:	60b9      	str	r1, [r7, #8]
 8008ec2:	607a      	str	r2, [r7, #4]
 8008ec4:	603b      	str	r3, [r7, #0]
    endpoint_(endpoint)
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	4618      	mov	r0, r3
 8008eca:	f7ff ffc1 	bl	8008e50 <_ZN3ros11Subscriber_C1Ev>
 8008ece:	4a0b      	ldr	r2, [pc, #44]	@ (8008efc <_ZN3ros10SubscriberIN8std_msgs5UInt8EvEC1EPKcPFvRKS2_Ei+0x44>)
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	601a      	str	r2, [r3, #0]
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	330c      	adds	r3, #12
 8008ed8:	4618      	mov	r0, r3
 8008eda:	f7f9 fe59 	bl	8002b90 <_ZN8std_msgs5UInt8C1Ev>
    cb_(cb),
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	687a      	ldr	r2, [r7, #4]
 8008ee2:	615a      	str	r2, [r3, #20]
    endpoint_(endpoint)
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	683a      	ldr	r2, [r7, #0]
 8008ee8:	619a      	str	r2, [r3, #24]
    topic_ = topic_name;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	68ba      	ldr	r2, [r7, #8]
 8008eee:	609a      	str	r2, [r3, #8]
  };
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	3710      	adds	r7, #16
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}
 8008efa:	bf00      	nop
 8008efc:	08010d9c 	.word	0x08010d9c

08008f00 <_ZN3ros10SubscriberIN8std_msgs7Float32EvEC1EPKcPFvRKS2_Ei>:
  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b084      	sub	sp, #16
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	60f8      	str	r0, [r7, #12]
 8008f08:	60b9      	str	r1, [r7, #8]
 8008f0a:	607a      	str	r2, [r7, #4]
 8008f0c:	603b      	str	r3, [r7, #0]
    endpoint_(endpoint)
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	4618      	mov	r0, r3
 8008f12:	f7ff ff9d 	bl	8008e50 <_ZN3ros11Subscriber_C1Ev>
 8008f16:	4a0b      	ldr	r2, [pc, #44]	@ (8008f44 <_ZN3ros10SubscriberIN8std_msgs7Float32EvEC1EPKcPFvRKS2_Ei+0x44>)
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	601a      	str	r2, [r3, #0]
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	330c      	adds	r3, #12
 8008f20:	4618      	mov	r0, r3
 8008f22:	f7f9 fef5 	bl	8002d10 <_ZN8std_msgs7Float32C1Ev>
    cb_(cb),
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	687a      	ldr	r2, [r7, #4]
 8008f2a:	615a      	str	r2, [r3, #20]
    endpoint_(endpoint)
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	683a      	ldr	r2, [r7, #0]
 8008f30:	619a      	str	r2, [r3, #24]
    topic_ = topic_name;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	68ba      	ldr	r2, [r7, #8]
 8008f36:	609a      	str	r2, [r3, #8]
  };
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	3710      	adds	r7, #16
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	bd80      	pop	{r7, pc}
 8008f42:	bf00      	nop
 8008f44:	08010d84 	.word	0x08010d84

08008f48 <_ZN3ros10SubscriberIN8std_msgs4Int8EvEC1EPKcPFvRKS2_Ei>:
  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b084      	sub	sp, #16
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	60f8      	str	r0, [r7, #12]
 8008f50:	60b9      	str	r1, [r7, #8]
 8008f52:	607a      	str	r2, [r7, #4]
 8008f54:	603b      	str	r3, [r7, #0]
    endpoint_(endpoint)
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	4618      	mov	r0, r3
 8008f5a:	f7ff ff79 	bl	8008e50 <_ZN3ros11Subscriber_C1Ev>
 8008f5e:	4a0b      	ldr	r2, [pc, #44]	@ (8008f8c <_ZN3ros10SubscriberIN8std_msgs4Int8EvEC1EPKcPFvRKS2_Ei+0x44>)
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	601a      	str	r2, [r3, #0]
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	330c      	adds	r3, #12
 8008f68:	4618      	mov	r0, r3
 8008f6a:	f7f9 fe6b 	bl	8002c44 <_ZN8std_msgs4Int8C1Ev>
    cb_(cb),
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	687a      	ldr	r2, [r7, #4]
 8008f72:	615a      	str	r2, [r3, #20]
    endpoint_(endpoint)
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	683a      	ldr	r2, [r7, #0]
 8008f78:	619a      	str	r2, [r3, #24]
    topic_ = topic_name;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	68ba      	ldr	r2, [r7, #8]
 8008f7e:	609a      	str	r2, [r3, #8]
  };
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	4618      	mov	r0, r3
 8008f84:	3710      	adds	r7, #16
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bd80      	pop	{r7, pc}
 8008f8a:	bf00      	nop
 8008f8c:	08010d6c 	.word	0x08010d6c

08008f90 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8initNodeEv>:
  {
    return &hardware_;
  }

  /* Start serial, initialize buffers */
  void initNode()
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b082      	sub	sp, #8
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	3304      	adds	r3, #4
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	f7f9 fdbf 	bl	8002b20 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8008fa8:	461a      	mov	r2, r3
 8008faa:	2300      	movs	r3, #0
 8008fac:	6693      	str	r3, [r2, #104]	@ 0x68
    bytes_ = 0;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8008fb4:	461a      	mov	r2, r3
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	66d3      	str	r3, [r2, #108]	@ 0x6c
    index_ = 0;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8008fc0:	461a      	mov	r2, r3
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	6753      	str	r3, [r2, #116]	@ 0x74
    topic_ = 0;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8008fcc:	461a      	mov	r2, r3
 8008fce:	2300      	movs	r3, #0
 8008fd0:	6713      	str	r3, [r2, #112]	@ 0x70
  };
 8008fd2:	bf00      	nop
 8008fd4:	3708      	adds	r7, #8
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}

08008fda <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE9subscribeERNS_11Subscriber_E>:
    }
    return false;
  }

  /* Register a new subscriber */
  bool subscribe(Subscriber_& s)
 8008fda:	b480      	push	{r7}
 8008fdc:	b085      	sub	sp, #20
 8008fde:	af00      	add	r7, sp, #0
 8008fe0:	6078      	str	r0, [r7, #4]
 8008fe2:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	60fb      	str	r3, [r7, #12]
 8008fe8:	e01a      	b.n	8009020 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE9subscribeERNS_11Subscriber_E+0x46>
    {
      if (subscribers[i] == 0) // empty slot
 8008fea:	687a      	ldr	r2, [r7, #4]
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008ff2:	3310      	adds	r3, #16
 8008ff4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d10e      	bne.n	800901a <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE9subscribeERNS_11Subscriber_E+0x40>
      {
        subscribers[i] = &s;
 8008ffc:	687a      	ldr	r2, [r7, #4]
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009004:	3310      	adds	r3, #16
 8009006:	6839      	ldr	r1, [r7, #0]
 8009008:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        s.id_ = i + 100;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	605a      	str	r2, [r3, #4]
        return true;
 8009016:	2301      	movs	r3, #1
 8009018:	e006      	b.n	8009028 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE9subscribeERNS_11Subscriber_E+0x4e>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	3301      	adds	r3, #1
 800901e:	60fb      	str	r3, [r7, #12]
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	2b09      	cmp	r3, #9
 8009024:	dde1      	ble.n	8008fea <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE9subscribeERNS_11Subscriber_E+0x10>
      }
    }
    return false;
 8009026:	2300      	movs	r3, #0
  }
 8009028:	4618      	mov	r0, r3
 800902a:	3714      	adds	r7, #20
 800902c:	46bd      	mov	sp, r7
 800902e:	bc80      	pop	{r7}
 8009030:	4770      	bx	lr

08009032 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE9advertiseERNS_9PublisherE>:
  bool advertise(Publisher & p)
 8009032:	b480      	push	{r7}
 8009034:	b085      	sub	sp, #20
 8009036:	af00      	add	r7, sp, #0
 8009038:	6078      	str	r0, [r7, #4]
 800903a:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 800903c:	2300      	movs	r3, #0
 800903e:	60fb      	str	r3, [r7, #12]
 8009040:	e01d      	b.n	800907e <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE9advertiseERNS_9PublisherE+0x4c>
      if (publishers[i] == 0) // empty slot
 8009042:	687a      	ldr	r2, [r7, #4]
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800904a:	3306      	adds	r3, #6
 800904c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d111      	bne.n	8009078 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE9advertiseERNS_9PublisherE+0x46>
        publishers[i] = &p;
 8009054:	687a      	ldr	r2, [r7, #4]
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800905c:	3306      	adds	r3, #6
 800905e:	6839      	ldr	r1, [r7, #0]
 8009060:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	f103 026e 	add.w	r2, r3, #110	@ 0x6e
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 800906e:	687a      	ldr	r2, [r7, #4]
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	60da      	str	r2, [r3, #12]
        return true;
 8009074:	2301      	movs	r3, #1
 8009076:	e006      	b.n	8009086 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	3301      	adds	r3, #1
 800907c:	60fb      	str	r3, [r7, #12]
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	2b09      	cmp	r3, #9
 8009082:	ddde      	ble.n	8009042 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE9advertiseERNS_9PublisherE+0x10>
    return false;
 8009084:	2300      	movs	r3, #0
  }
 8009086:	4618      	mov	r0, r3
 8009088:	3714      	adds	r7, #20
 800908a:	46bd      	mov	sp, r7
 800908c:	bc80      	pop	{r7}
 800908e:	4770      	bx	lr

08009090 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv>:
  virtual int spinOnce() override
 8009090:	b580      	push	{r7, lr}
 8009092:	b084      	sub	sp, #16
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	3304      	adds	r3, #4
 800909c:	4618      	mov	r0, r3
 800909e:	f7f9 fd6b 	bl	8002b78 <_ZN13STM32Hardware4timeEv>
 80090a2:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80090aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80090ae:	68fa      	ldr	r2, [r7, #12]
 80090b0:	1ad3      	subs	r3, r2, r3
 80090b2:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 80090b6:	4293      	cmp	r3, r2
 80090b8:	d905      	bls.n	80090c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x36>
      configured_ = false;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80090c0:	2200      	movs	r2, #0
 80090c2:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
    if (mode_ != MODE_FIRST_FF)
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80090cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d00d      	beq.n	80090ee <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
      if (c_time > last_msg_timeout_time)
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80090d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80090dc:	68fa      	ldr	r2, [r7, #12]
 80090de:	429a      	cmp	r2, r3
 80090e0:	d905      	bls.n	80090ee <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
        mode_ = MODE_FIRST_FF;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80090e8:	461a      	mov	r2, r3
 80090ea:	2300      	movs	r3, #0
 80090ec:	6693      	str	r3, [r2, #104]	@ 0x68
      if (spin_timeout_ > 0)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	695b      	ldr	r3, [r3, #20]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d013      	beq.n	800911e <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x8e>
        if ((hardware_.time() - c_time) > spin_timeout_)
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	3304      	adds	r3, #4
 80090fa:	4618      	mov	r0, r3
 80090fc:	f7f9 fd3c 	bl	8002b78 <_ZN13STM32Hardware4timeEv>
 8009100:	4602      	mov	r2, r0
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	1ad2      	subs	r2, r2, r3
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	695b      	ldr	r3, [r3, #20]
 800910a:	429a      	cmp	r2, r3
 800910c:	bf8c      	ite	hi
 800910e:	2301      	movhi	r3, #1
 8009110:	2300      	movls	r3, #0
 8009112:	b2db      	uxtb	r3, r3
 8009114:	2b00      	cmp	r3, #0
 8009116:	d002      	beq.n	800911e <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x8e>
          return SPIN_TIMEOUT;
 8009118:	f06f 0301 	mvn.w	r3, #1
 800911c:	e1e8      	b.n	80094f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x460>
      int data = hardware_.read();
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	3304      	adds	r3, #4
 8009122:	4618      	mov	r0, r3
 8009124:	f7f9 fd09 	bl	8002b3a <_ZN13STM32Hardware4readEv>
 8009128:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 800912a:	68bb      	ldr	r3, [r7, #8]
 800912c:	2b00      	cmp	r3, #0
 800912e:	f2c0 81c1 	blt.w	80094b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x424>
      checksum_ += data;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8009138:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	4413      	add	r3, r2
 800913e:	687a      	ldr	r2, [r7, #4]
 8009140:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 8009144:	6793      	str	r3, [r2, #120]	@ 0x78
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800914c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800914e:	2b07      	cmp	r3, #7
 8009150:	d124      	bne.n	800919c <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x10c>
        message_in[index_++] = data;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8009158:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800915a:	1c5a      	adds	r2, r3, #1
 800915c:	6879      	ldr	r1, [r7, #4]
 800915e:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
 8009162:	674a      	str	r2, [r1, #116]	@ 0x74
 8009164:	68ba      	ldr	r2, [r7, #8]
 8009166:	b2d1      	uxtb	r1, r2
 8009168:	687a      	ldr	r2, [r7, #4]
 800916a:	4413      	add	r3, r2
 800916c:	460a      	mov	r2, r1
 800916e:	761a      	strb	r2, [r3, #24]
        bytes_--;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8009176:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009178:	3b01      	subs	r3, #1
 800917a:	687a      	ldr	r2, [r7, #4]
 800917c:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 8009180:	66d3      	str	r3, [r2, #108]	@ 0x6c
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8009188:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800918a:	2b00      	cmp	r3, #0
 800918c:	d1af      	bne.n	80090ee <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
          mode_ = MODE_MSG_CHECKSUM;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8009194:	461a      	mov	r2, r3
 8009196:	2308      	movs	r3, #8
 8009198:	6693      	str	r3, [r2, #104]	@ 0x68
 800919a:	e7a8      	b.n	80090ee <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
      else if (mode_ == MODE_FIRST_FF)
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80091a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d12e      	bne.n	8009206 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x176>
        if (data == 0xff)
 80091a8:	68bb      	ldr	r3, [r7, #8]
 80091aa:	2bff      	cmp	r3, #255	@ 0xff
 80091ac:	d110      	bne.n	80091d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x140>
          mode_++;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80091b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80091b6:	3301      	adds	r3, #1
 80091b8:	687a      	ldr	r2, [r7, #4]
 80091ba:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 80091be:	6693      	str	r3, [r2, #104]	@ 0x68
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	3314      	adds	r3, #20
 80091c4:	687a      	ldr	r2, [r7, #4]
 80091c6:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 80091ca:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 80091ce:	e78e      	b.n	80090ee <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	3304      	adds	r3, #4
 80091d4:	4618      	mov	r0, r3
 80091d6:	f7f9 fccf 	bl	8002b78 <_ZN13STM32Hardware4timeEv>
 80091da:	4602      	mov	r2, r0
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	1ad3      	subs	r3, r2, r3
 80091e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80091e4:	4293      	cmp	r3, r2
 80091e6:	bf8c      	ite	hi
 80091e8:	2301      	movhi	r3, #1
 80091ea:	2300      	movls	r3, #0
 80091ec:	b2db      	uxtb	r3, r3
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	f43f af7d 	beq.w	80090ee <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
          configured_ = false;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80091fa:	2200      	movs	r2, #0
 80091fc:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
          return SPIN_TIMEOUT;
 8009200:	f06f 0301 	mvn.w	r3, #1
 8009204:	e174      	b.n	80094f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x460>
      else if (mode_ == MODE_PROTOCOL_VER)
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800920c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800920e:	2b01      	cmp	r3, #1
 8009210:	d11e      	bne.n	8009250 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x1c0>
        if (data == PROTOCOL_VER)
 8009212:	68bb      	ldr	r3, [r7, #8]
 8009214:	2bfe      	cmp	r3, #254	@ 0xfe
 8009216:	d109      	bne.n	800922c <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x19c>
          mode_++;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800921e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009220:	3301      	adds	r3, #1
 8009222:	687a      	ldr	r2, [r7, #4]
 8009224:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 8009228:	6693      	str	r3, [r2, #104]	@ 0x68
 800922a:	e760      	b.n	80090ee <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
          mode_ = MODE_FIRST_FF;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8009232:	461a      	mov	r2, r3
 8009234:	2300      	movs	r3, #0
 8009236:	6693      	str	r3, [r2, #104]	@ 0x68
          if (configured_ == false)
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800923e:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8009242:	2b00      	cmp	r3, #0
 8009244:	f47f af53 	bne.w	80090ee <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f000 f98f 	bl	800956c <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE15requestSyncTimeEv>
 800924e:	e74e      	b.n	80090ee <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8009256:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009258:	2b02      	cmp	r3, #2
 800925a:	d11b      	bne.n	8009294 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x204>
        bytes_ = data;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8009262:	461a      	mov	r2, r3
 8009264:	68bb      	ldr	r3, [r7, #8]
 8009266:	66d3      	str	r3, [r2, #108]	@ 0x6c
        index_ = 0;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800926e:	461a      	mov	r2, r3
 8009270:	2300      	movs	r3, #0
 8009272:	6753      	str	r3, [r2, #116]	@ 0x74
        mode_++;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800927a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800927c:	3301      	adds	r3, #1
 800927e:	687a      	ldr	r2, [r7, #4]
 8009280:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 8009284:	6693      	str	r3, [r2, #104]	@ 0x68
        checksum_ = data;               /* first byte for calculating size checksum */
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800928c:	461a      	mov	r2, r3
 800928e:	68bb      	ldr	r3, [r7, #8]
 8009290:	6793      	str	r3, [r2, #120]	@ 0x78
 8009292:	e72c      	b.n	80090ee <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800929a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800929c:	2b03      	cmp	r3, #3
 800929e:	d114      	bne.n	80092ca <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x23a>
        bytes_ += data << 8;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80092a6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80092a8:	68bb      	ldr	r3, [r7, #8]
 80092aa:	021b      	lsls	r3, r3, #8
 80092ac:	4413      	add	r3, r2
 80092ae:	687a      	ldr	r2, [r7, #4]
 80092b0:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 80092b4:	66d3      	str	r3, [r2, #108]	@ 0x6c
        mode_++;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80092bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80092be:	3301      	adds	r3, #1
 80092c0:	687a      	ldr	r2, [r7, #4]
 80092c2:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 80092c6:	6693      	str	r3, [r2, #104]	@ 0x68
 80092c8:	e711      	b.n	80090ee <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80092d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80092d2:	2b04      	cmp	r3, #4
 80092d4:	d11b      	bne.n	800930e <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x27e>
        if ((checksum_ % 256) == 255)
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80092dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80092de:	425a      	negs	r2, r3
 80092e0:	b2db      	uxtb	r3, r3
 80092e2:	b2d2      	uxtb	r2, r2
 80092e4:	bf58      	it	pl
 80092e6:	4253      	negpl	r3, r2
 80092e8:	2bff      	cmp	r3, #255	@ 0xff
 80092ea:	d109      	bne.n	8009300 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x270>
          mode_++;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80092f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80092f4:	3301      	adds	r3, #1
 80092f6:	687a      	ldr	r2, [r7, #4]
 80092f8:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 80092fc:	6693      	str	r3, [r2, #104]	@ 0x68
 80092fe:	e6f6      	b.n	80090ee <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8009306:	461a      	mov	r2, r3
 8009308:	2300      	movs	r3, #0
 800930a:	6693      	str	r3, [r2, #104]	@ 0x68
 800930c:	e6ef      	b.n	80090ee <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8009314:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009316:	2b05      	cmp	r3, #5
 8009318:	d115      	bne.n	8009346 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x2b6>
        topic_ = data;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8009320:	461a      	mov	r2, r3
 8009322:	68bb      	ldr	r3, [r7, #8]
 8009324:	6713      	str	r3, [r2, #112]	@ 0x70
        mode_++;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800932c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800932e:	3301      	adds	r3, #1
 8009330:	687a      	ldr	r2, [r7, #4]
 8009332:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 8009336:	6693      	str	r3, [r2, #104]	@ 0x68
        checksum_ = data;               /* first byte included in checksum */
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800933e:	461a      	mov	r2, r3
 8009340:	68bb      	ldr	r3, [r7, #8]
 8009342:	6793      	str	r3, [r2, #120]	@ 0x78
 8009344:	e6d3      	b.n	80090ee <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800934c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800934e:	2b06      	cmp	r3, #6
 8009350:	d11e      	bne.n	8009390 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x300>
        topic_ += data << 8;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8009358:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800935a:	68bb      	ldr	r3, [r7, #8]
 800935c:	021b      	lsls	r3, r3, #8
 800935e:	4413      	add	r3, r2
 8009360:	687a      	ldr	r2, [r7, #4]
 8009362:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 8009366:	6713      	str	r3, [r2, #112]	@ 0x70
        mode_ = MODE_MESSAGE;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800936e:	461a      	mov	r2, r3
 8009370:	2307      	movs	r3, #7
 8009372:	6693      	str	r3, [r2, #104]	@ 0x68
        if (bytes_ == 0)
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800937a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800937c:	2b00      	cmp	r3, #0
 800937e:	f47f aeb6 	bne.w	80090ee <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
          mode_ = MODE_MSG_CHECKSUM;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8009388:	461a      	mov	r2, r3
 800938a:	2308      	movs	r3, #8
 800938c:	6693      	str	r3, [r2, #104]	@ 0x68
 800938e:	e6ae      	b.n	80090ee <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8009396:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009398:	2b08      	cmp	r3, #8
 800939a:	f47f aea8 	bne.w	80090ee <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
        mode_ = MODE_FIRST_FF;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80093a4:	461a      	mov	r2, r3
 80093a6:	2300      	movs	r3, #0
 80093a8:	6693      	str	r3, [r2, #104]	@ 0x68
        if ((checksum_ % 256) == 255)
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80093b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80093b2:	425a      	negs	r2, r3
 80093b4:	b2db      	uxtb	r3, r3
 80093b6:	b2d2      	uxtb	r2, r2
 80093b8:	bf58      	it	pl
 80093ba:	4253      	negpl	r3, r2
 80093bc:	2bff      	cmp	r3, #255	@ 0xff
 80093be:	f47f ae96 	bne.w	80090ee <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80093c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d116      	bne.n	80093fc <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x36c>
            requestSyncTime();
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f000 f8cc 	bl	800956c <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE15requestSyncTimeEv>
            negotiateTopics();
 80093d4:	6878      	ldr	r0, [r7, #4]
 80093d6:	f000 f8e6 	bl	80095a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE15negotiateTopicsEv>
            last_sync_time = c_time;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80093e0:	461a      	mov	r2, r3
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
            last_sync_receive_time = c_time;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80093ee:	461a      	mov	r2, r3
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
            return SPIN_ERR;
 80093f6:	f04f 33ff 	mov.w	r3, #4294967295
 80093fa:	e079      	b.n	80094f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x460>
          else if (topic_ == TopicInfo::ID_TIME)
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8009402:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009404:	2b0a      	cmp	r3, #10
 8009406:	d106      	bne.n	8009416 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x386>
            syncTime(message_in);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	3318      	adds	r3, #24
 800940c:	4619      	mov	r1, r3
 800940e:	6878      	ldr	r0, [r7, #4]
 8009410:	f000 f9b4 	bl	800977c <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8syncTimeEPh>
 8009414:	e66b      	b.n	80090ee <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800941c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800941e:	2b06      	cmp	r3, #6
 8009420:	d110      	bne.n	8009444 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x3b4>
            req_param_resp.deserialize(message_in);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f503 4381 	add.w	r3, r3, #16512	@ 0x4080
 8009428:	3310      	adds	r3, #16
 800942a:	687a      	ldr	r2, [r7, #4]
 800942c:	3218      	adds	r2, #24
 800942e:	4611      	mov	r1, r2
 8009430:	4618      	mov	r0, r3
 8009432:	f7f9 f85c 	bl	80024ee <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800943c:	2201      	movs	r2, #1
 800943e:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
 8009442:	e654      	b.n	80090ee <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800944a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800944c:	2b0b      	cmp	r3, #11
 800944e:	d106      	bne.n	800945e <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x3ce>
            configured_ = false;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8009456:	2200      	movs	r2, #0
 8009458:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
 800945c:	e647      	b.n	80090ee <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
            if (subscribers[topic_ - 100])
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8009464:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009466:	3b64      	subs	r3, #100	@ 0x64
 8009468:	687a      	ldr	r2, [r7, #4]
 800946a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800946e:	3310      	adds	r3, #16
 8009470:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009474:	2b00      	cmp	r3, #0
 8009476:	f43f ae3a 	beq.w	80090ee <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
              subscribers[topic_ - 100]->callback(message_in);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8009480:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009482:	3b64      	subs	r3, #100	@ 0x64
 8009484:	687a      	ldr	r2, [r7, #4]
 8009486:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800948a:	3310      	adds	r3, #16
 800948c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8009496:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009498:	3b64      	subs	r3, #100	@ 0x64
 800949a:	687a      	ldr	r2, [r7, #4]
 800949c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80094a0:	3310      	adds	r3, #16
 80094a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	687a      	ldr	r2, [r7, #4]
 80094ac:	3218      	adds	r2, #24
 80094ae:	4611      	mov	r1, r2
 80094b0:	4798      	blx	r3
    while (true)
 80094b2:	e61c      	b.n	80090ee <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
        break;
 80094b4:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80094bc:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d014      	beq.n	80094ee <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x45e>
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80094ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80094ce:	68fa      	ldr	r2, [r7, #12]
 80094d0:	1ad3      	subs	r3, r2, r3
 80094d2:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 80094d6:	4293      	cmp	r3, r2
 80094d8:	d909      	bls.n	80094ee <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x45e>
      requestSyncTime();
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	f000 f846 	bl	800956c <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE15requestSyncTimeEv>
      last_sync_time = c_time;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80094e6:	461a      	mov	r2, r3
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
    return SPIN_OK;
 80094ee:	2300      	movs	r3, #0
  }
 80094f0:	4618      	mov	r0, r3
 80094f2:	3710      	adds	r7, #16
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bd80      	pop	{r7, pc}

080094f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE3nowEv>:
  Time now()
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b084      	sub	sp, #16
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
 8009500:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	3304      	adds	r3, #4
 8009506:	4618      	mov	r0, r3
 8009508:	f7f9 fb36 	bl	8002b78 <_ZN13STM32Hardware4timeEv>
 800950c:	60f8      	str	r0, [r7, #12]
    Time current_time;
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f7f8 fb38 	bl	8001b84 <_ZN3ros4TimeC1Ev>
    current_time.sec = ms / 1000 + sec_offset;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	4a13      	ldr	r2, [pc, #76]	@ (8009564 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE3nowEv+0x6c>)
 8009518:	fba2 2303 	umull	r2, r3, r2, r3
 800951c:	099a      	lsrs	r2, r3, #6
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	68db      	ldr	r3, [r3, #12]
 8009522:	441a      	add	r2, r3
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	601a      	str	r2, [r3, #0]
    current_time.nsec = (ms % 1000) * 1000000UL + nsec_offset;
 8009528:	68fa      	ldr	r2, [r7, #12]
 800952a:	4b0e      	ldr	r3, [pc, #56]	@ (8009564 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE3nowEv+0x6c>)
 800952c:	fba3 1302 	umull	r1, r3, r3, r2
 8009530:	099b      	lsrs	r3, r3, #6
 8009532:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8009536:	fb01 f303 	mul.w	r3, r1, r3
 800953a:	1ad3      	subs	r3, r2, r3
 800953c:	4a0a      	ldr	r2, [pc, #40]	@ (8009568 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE3nowEv+0x70>)
 800953e:	fb03 f202 	mul.w	r2, r3, r2
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	691b      	ldr	r3, [r3, #16]
 8009546:	441a      	add	r2, r3
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	605a      	str	r2, [r3, #4]
    normalizeSecNSec(current_time.sec, current_time.nsec);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	3304      	adds	r3, #4
 8009550:	4619      	mov	r1, r3
 8009552:	6878      	ldr	r0, [r7, #4]
 8009554:	f001 f8e0 	bl	800a718 <_ZN3ros16normalizeSecNSecERmS0_>
    return current_time;
 8009558:	bf00      	nop
  }
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	3710      	adds	r7, #16
 800955e:	46bd      	mov	sp, r7
 8009560:	bd80      	pop	{r7, pc}
 8009562:	bf00      	nop
 8009564:	10624dd3 	.word	0x10624dd3
 8009568:	000f4240 	.word	0x000f4240

0800956c <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE15requestSyncTimeEv>:
  void requestSyncTime()
 800956c:	b580      	push	{r7, lr}
 800956e:	b086      	sub	sp, #24
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8009574:	f107 030c 	add.w	r3, r7, #12
 8009578:	4618      	mov	r0, r3
 800957a:	f7f8 fb23 	bl	8001bc4 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	f107 020c 	add.w	r2, r7, #12
 8009588:	210a      	movs	r1, #10
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	4798      	blx	r3
    rt_time = hardware_.time();
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	3304      	adds	r3, #4
 8009592:	4618      	mov	r0, r3
 8009594:	f7f9 faf0 	bl	8002b78 <_ZN13STM32Hardware4timeEv>
 8009598:	4602      	mov	r2, r0
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	609a      	str	r2, [r3, #8]
  }
 800959e:	bf00      	nop
 80095a0:	3718      	adds	r7, #24
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bd80      	pop	{r7, pc}

080095a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 80095a6:	b590      	push	{r4, r7, lr}
 80095a8:	b08b      	sub	sp, #44	@ 0x2c
 80095aa:	af00      	add	r7, sp, #0
 80095ac:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 80095ae:	f107 030c 	add.w	r3, r7, #12
 80095b2:	4618      	mov	r0, r3
 80095b4:	f7f8 fbf0 	bl	8001d98 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80095b8:	2300      	movs	r3, #0
 80095ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80095bc:	e062      	b.n	8009684 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE15negotiateTopicsEv+0xde>
    {
      if (publishers[i] != 0) // non-empty slot
 80095be:	687a      	ldr	r2, [r7, #4]
 80095c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80095c6:	3306      	adds	r3, #6
 80095c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d056      	beq.n	800967e <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE15negotiateTopicsEv+0xd8>
      {
        ti.topic_id = publishers[i]->id_;
 80095d0:	687a      	ldr	r2, [r7, #4]
 80095d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80095d8:	3306      	adds	r3, #6
 80095da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80095de:	689b      	ldr	r3, [r3, #8]
 80095e0:	b29b      	uxth	r3, r3
 80095e2:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 80095e4:	687a      	ldr	r2, [r7, #4]
 80095e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80095ec:	3306      	adds	r3, #6
 80095ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 80095f6:	687a      	ldr	r2, [r7, #4]
 80095f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80095fe:	3306      	adds	r3, #6
 8009600:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009604:	6859      	ldr	r1, [r3, #4]
 8009606:	687a      	ldr	r2, [r7, #4]
 8009608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800960a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800960e:	3306      	adds	r3, #6
 8009610:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009614:	685b      	ldr	r3, [r3, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	3308      	adds	r3, #8
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	4608      	mov	r0, r1
 800961e:	4798      	blx	r3
 8009620:	4603      	mov	r3, r0
 8009622:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8009624:	687a      	ldr	r2, [r7, #4]
 8009626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009628:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800962c:	3306      	adds	r3, #6
 800962e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009632:	6859      	ldr	r1, [r3, #4]
 8009634:	687a      	ldr	r2, [r7, #4]
 8009636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009638:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800963c:	3306      	adds	r3, #6
 800963e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009642:	685b      	ldr	r3, [r3, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	330c      	adds	r3, #12
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	4608      	mov	r0, r1
 800964c:	4798      	blx	r3
 800964e:	4603      	mov	r3, r0
 8009650:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8009652:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009656:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	681c      	ldr	r4, [r3, #0]
 800965e:	687a      	ldr	r2, [r7, #4]
 8009660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009662:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009666:	3306      	adds	r3, #6
 8009668:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800966c:	4618      	mov	r0, r3
 800966e:	f7f9 f8f1 	bl	8002854 <_ZN3ros9Publisher15getEndpointTypeEv>
 8009672:	4601      	mov	r1, r0
 8009674:	f107 030c 	add.w	r3, r7, #12
 8009678:	461a      	mov	r2, r3
 800967a:	6878      	ldr	r0, [r7, #4]
 800967c:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 800967e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009680:	3301      	adds	r3, #1
 8009682:	627b      	str	r3, [r7, #36]	@ 0x24
 8009684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009686:	2b09      	cmp	r3, #9
 8009688:	dd99      	ble.n	80095be <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE15negotiateTopicsEv+0x18>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 800968a:	2300      	movs	r3, #0
 800968c:	627b      	str	r3, [r7, #36]	@ 0x24
 800968e:	e067      	b.n	8009760 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE15negotiateTopicsEv+0x1ba>
    {
      if (subscribers[i] != 0) // non-empty slot
 8009690:	687a      	ldr	r2, [r7, #4]
 8009692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009694:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009698:	3310      	adds	r3, #16
 800969a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d05b      	beq.n	800975a <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE15negotiateTopicsEv+0x1b4>
      {
        ti.topic_id = subscribers[i]->id_;
 80096a2:	687a      	ldr	r2, [r7, #4]
 80096a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80096aa:	3310      	adds	r3, #16
 80096ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80096b0:	685b      	ldr	r3, [r3, #4]
 80096b2:	b29b      	uxth	r3, r3
 80096b4:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 80096b6:	687a      	ldr	r2, [r7, #4]
 80096b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80096be:	3310      	adds	r3, #16
 80096c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80096c4:	689b      	ldr	r3, [r3, #8]
 80096c6:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 80096c8:	687a      	ldr	r2, [r7, #4]
 80096ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80096d0:	3310      	adds	r3, #16
 80096d2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80096d6:	687a      	ldr	r2, [r7, #4]
 80096d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80096de:	3310      	adds	r3, #16
 80096e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	3308      	adds	r3, #8
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	4608      	mov	r0, r1
 80096ec:	4798      	blx	r3
 80096ee:	4603      	mov	r3, r0
 80096f0:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 80096f2:	687a      	ldr	r2, [r7, #4]
 80096f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80096fa:	3310      	adds	r3, #16
 80096fc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009700:	687a      	ldr	r2, [r7, #4]
 8009702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009704:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009708:	3310      	adds	r3, #16
 800970a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	330c      	adds	r3, #12
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	4608      	mov	r0, r1
 8009716:	4798      	blx	r3
 8009718:	4603      	mov	r3, r0
 800971a:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 800971c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009720:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	681c      	ldr	r4, [r3, #0]
 8009728:	687a      	ldr	r2, [r7, #4]
 800972a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800972c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009730:	3310      	adds	r3, #16
 8009732:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009736:	687a      	ldr	r2, [r7, #4]
 8009738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800973a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800973e:	3310      	adds	r3, #16
 8009740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	3304      	adds	r3, #4
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	4608      	mov	r0, r1
 800974c:	4798      	blx	r3
 800974e:	4601      	mov	r1, r0
 8009750:	f107 030c 	add.w	r3, r7, #12
 8009754:	461a      	mov	r2, r3
 8009756:	6878      	ldr	r0, [r7, #4]
 8009758:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 800975a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800975c:	3301      	adds	r3, #1
 800975e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009762:	2b09      	cmp	r3, #9
 8009764:	dd94      	ble.n	8009690 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE15negotiateTopicsEv+0xea>
      }
    }
    configured_ = true;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800976c:	2201      	movs	r2, #1
 800976e:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
  }
 8009772:	bf00      	nop
 8009774:	372c      	adds	r7, #44	@ 0x2c
 8009776:	46bd      	mov	sp, r7
 8009778:	bd90      	pop	{r4, r7, pc}
	...

0800977c <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 800977c:	b580      	push	{r7, lr}
 800977e:	b086      	sub	sp, #24
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
 8009784:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8009786:	f107 0308 	add.w	r3, r7, #8
 800978a:	4618      	mov	r0, r3
 800978c:	f7f8 fa1a 	bl	8001bc4 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	3304      	adds	r3, #4
 8009794:	4618      	mov	r0, r3
 8009796:	f7f9 f9ef 	bl	8002b78 <_ZN13STM32Hardware4timeEv>
 800979a:	4602      	mov	r2, r0
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	689b      	ldr	r3, [r3, #8]
 80097a0:	1ad3      	subs	r3, r2, r3
 80097a2:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 80097a4:	f107 0308 	add.w	r3, r7, #8
 80097a8:	6839      	ldr	r1, [r7, #0]
 80097aa:	4618      	mov	r0, r3
 80097ac:	f7f8 fa79 	bl	8001ca2 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 80097b0:	68fa      	ldr	r2, [r7, #12]
 80097b2:	697b      	ldr	r3, [r7, #20]
 80097b4:	4915      	ldr	r1, [pc, #84]	@ (800980c <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8syncTimeEPh+0x90>)
 80097b6:	fba1 1303 	umull	r1, r3, r1, r3
 80097ba:	099b      	lsrs	r3, r3, #6
 80097bc:	4413      	add	r3, r2
 80097be:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 80097c0:	6939      	ldr	r1, [r7, #16]
 80097c2:	697a      	ldr	r2, [r7, #20]
 80097c4:	4b11      	ldr	r3, [pc, #68]	@ (800980c <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8syncTimeEPh+0x90>)
 80097c6:	fba3 0302 	umull	r0, r3, r3, r2
 80097ca:	099b      	lsrs	r3, r3, #6
 80097cc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80097d0:	fb00 f303 	mul.w	r3, r0, r3
 80097d4:	1ad3      	subs	r3, r2, r3
 80097d6:	4a0e      	ldr	r2, [pc, #56]	@ (8009810 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8syncTimeEPh+0x94>)
 80097d8:	fb02 f303 	mul.w	r3, r2, r3
 80097dc:	440b      	add	r3, r1
 80097de:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 80097e0:	f107 0308 	add.w	r3, r7, #8
 80097e4:	3304      	adds	r3, #4
 80097e6:	4619      	mov	r1, r3
 80097e8:	6878      	ldr	r0, [r7, #4]
 80097ea:	f000 f8b7 	bl	800995c <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	3304      	adds	r3, #4
 80097f2:	4618      	mov	r0, r3
 80097f4:	f7f9 f9c0 	bl	8002b78 <_ZN13STM32Hardware4timeEv>
 80097f8:	4602      	mov	r2, r0
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8009800:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
 8009804:	bf00      	nop
 8009806:	3718      	adds	r7, #24
 8009808:	46bd      	mov	sp, r7
 800980a:	bd80      	pop	{r7, pc}
 800980c:	10624dd3 	.word	0x10624dd3
 8009810:	000f4240 	.word	0x000f4240

08009814 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 8009814:	b580      	push	{r7, lr}
 8009816:	b088      	sub	sp, #32
 8009818:	af00      	add	r7, sp, #0
 800981a:	60f8      	str	r0, [r7, #12]
 800981c:	60b9      	str	r1, [r7, #8]
 800981e:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8009820:	68bb      	ldr	r3, [r7, #8]
 8009822:	2b63      	cmp	r3, #99	@ 0x63
 8009824:	dd0b      	ble.n	800983e <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE7publishEiPKNS_3MsgE+0x2a>
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800982c:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8009830:	f083 0301 	eor.w	r3, r3, #1
 8009834:	b2db      	uxtb	r3, r3
 8009836:	2b00      	cmp	r3, #0
 8009838:	d001      	beq.n	800983e <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE7publishEiPKNS_3MsgE+0x2a>
      return 0;
 800983a:	2300      	movs	r3, #0
 800983c:	e087      	b.n	800994e <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE7publishEiPKNS_3MsgE+0x13a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	681a      	ldr	r2, [r3, #0]
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800984a:	3318      	adds	r3, #24
 800984c:	3307      	adds	r3, #7
 800984e:	4619      	mov	r1, r3
 8009850:	6878      	ldr	r0, [r7, #4]
 8009852:	4790      	blx	r2
 8009854:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800985c:	22ff      	movs	r2, #255	@ 0xff
 800985e:	761a      	strb	r2, [r3, #24]
    message_out[1] = PROTOCOL_VER;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8009866:	22fe      	movs	r2, #254	@ 0xfe
 8009868:	765a      	strb	r2, [r3, #25]
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 800986a:	697b      	ldr	r3, [r7, #20]
 800986c:	b2da      	uxtb	r2, r3
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8009874:	769a      	strb	r2, [r3, #26]
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8009876:	697b      	ldr	r3, [r7, #20]
 8009878:	b29b      	uxth	r3, r3
 800987a:	0a1b      	lsrs	r3, r3, #8
 800987c:	b29b      	uxth	r3, r3
 800987e:	b2da      	uxtb	r2, r3
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8009886:	76da      	strb	r2, [r3, #27]
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800988e:	7e9a      	ldrb	r2, [r3, #26]
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8009896:	7edb      	ldrb	r3, [r3, #27]
 8009898:	4413      	add	r3, r2
 800989a:	b2db      	uxtb	r3, r3
 800989c:	43db      	mvns	r3, r3
 800989e:	b2da      	uxtb	r2, r3
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80098a6:	771a      	strb	r2, [r3, #28]
    message_out[5] = (uint8_t)((int16_t)id & 255);
 80098a8:	68bb      	ldr	r3, [r7, #8]
 80098aa:	b2da      	uxtb	r2, r3
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80098b2:	775a      	strb	r2, [r3, #29]
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 80098b4:	68bb      	ldr	r3, [r7, #8]
 80098b6:	b21b      	sxth	r3, r3
 80098b8:	121b      	asrs	r3, r3, #8
 80098ba:	b21b      	sxth	r3, r3
 80098bc:	b2da      	uxtb	r2, r3
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80098c4:	779a      	strb	r2, [r3, #30]

    /* calculate checksum */
    int chk = 0;
 80098c6:	2300      	movs	r3, #0
 80098c8:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80098ca:	2305      	movs	r3, #5
 80098cc:	61bb      	str	r3, [r7, #24]
 80098ce:	e00d      	b.n	80098ec <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE7publishEiPKNS_3MsgE+0xd8>
      chk += message_out[i];
 80098d0:	68fa      	ldr	r2, [r7, #12]
 80098d2:	69bb      	ldr	r3, [r7, #24]
 80098d4:	4413      	add	r3, r2
 80098d6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80098da:	3318      	adds	r3, #24
 80098dc:	781b      	ldrb	r3, [r3, #0]
 80098de:	461a      	mov	r2, r3
 80098e0:	69fb      	ldr	r3, [r7, #28]
 80098e2:	4413      	add	r3, r2
 80098e4:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80098e6:	69bb      	ldr	r3, [r7, #24]
 80098e8:	3301      	adds	r3, #1
 80098ea:	61bb      	str	r3, [r7, #24]
 80098ec:	697b      	ldr	r3, [r7, #20]
 80098ee:	3306      	adds	r3, #6
 80098f0:	69ba      	ldr	r2, [r7, #24]
 80098f2:	429a      	cmp	r2, r3
 80098f4:	ddec      	ble.n	80098d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE7publishEiPKNS_3MsgE+0xbc>
    l += 7;
 80098f6:	697b      	ldr	r3, [r7, #20]
 80098f8:	3307      	adds	r3, #7
 80098fa:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 80098fc:	69fb      	ldr	r3, [r7, #28]
 80098fe:	425a      	negs	r2, r3
 8009900:	b2db      	uxtb	r3, r3
 8009902:	b2d2      	uxtb	r2, r2
 8009904:	bf58      	it	pl
 8009906:	4253      	negpl	r3, r2
 8009908:	b2da      	uxtb	r2, r3
 800990a:	697b      	ldr	r3, [r7, #20]
 800990c:	1c59      	adds	r1, r3, #1
 800990e:	6179      	str	r1, [r7, #20]
 8009910:	43d2      	mvns	r2, r2
 8009912:	b2d1      	uxtb	r1, r2
 8009914:	68fa      	ldr	r2, [r7, #12]
 8009916:	4413      	add	r3, r2
 8009918:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800991c:	3318      	adds	r3, #24
 800991e:	460a      	mov	r2, r1
 8009920:	701a      	strb	r2, [r3, #0]

    if (l <= OUTPUT_SIZE)
 8009922:	697b      	ldr	r3, [r7, #20]
 8009924:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009928:	dc0b      	bgt.n	8009942 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE7publishEiPKNS_3MsgE+0x12e>
    {
      hardware_.write(message_out, l);
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	1d18      	adds	r0, r3, #4
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8009934:	3318      	adds	r3, #24
 8009936:	697a      	ldr	r2, [r7, #20]
 8009938:	4619      	mov	r1, r3
 800993a:	f7f9 f90c 	bl	8002b56 <_ZN13STM32Hardware5writeEPhi>
      return l;
 800993e:	697b      	ldr	r3, [r7, #20]
 8009940:	e005      	b.n	800994e <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE7publishEiPKNS_3MsgE+0x13a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8009942:	4905      	ldr	r1, [pc, #20]	@ (8009958 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE7publishEiPKNS_3MsgE+0x144>)
 8009944:	68f8      	ldr	r0, [r7, #12]
 8009946:	f000 f847 	bl	80099d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8logerrorEPKc>
      return -1;
 800994a:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 800994e:	4618      	mov	r0, r3
 8009950:	3720      	adds	r7, #32
 8009952:	46bd      	mov	sp, r7
 8009954:	bd80      	pop	{r7, pc}
 8009956:	bf00      	nop
 8009958:	08010c18 	.word	0x08010c18

0800995c <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 800995c:	b580      	push	{r7, lr}
 800995e:	b084      	sub	sp, #16
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
 8009964:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	3304      	adds	r3, #4
 800996a:	4618      	mov	r0, r3
 800996c:	f7f9 f904 	bl	8002b78 <_ZN13STM32Hardware4timeEv>
 8009970:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8009972:	683b      	ldr	r3, [r7, #0]
 8009974:	681a      	ldr	r2, [r3, #0]
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	4914      	ldr	r1, [pc, #80]	@ (80099cc <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE6setNowERKNS_4TimeE+0x70>)
 800997a:	fba1 1303 	umull	r1, r3, r1, r3
 800997e:	099b      	lsrs	r3, r3, #6
 8009980:	1ad3      	subs	r3, r2, r3
 8009982:	1e5a      	subs	r2, r3, #1
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	60da      	str	r2, [r3, #12]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8009988:	683b      	ldr	r3, [r7, #0]
 800998a:	6859      	ldr	r1, [r3, #4]
 800998c:	68fa      	ldr	r2, [r7, #12]
 800998e:	4b0f      	ldr	r3, [pc, #60]	@ (80099cc <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE6setNowERKNS_4TimeE+0x70>)
 8009990:	fba3 0302 	umull	r0, r3, r3, r2
 8009994:	099b      	lsrs	r3, r3, #6
 8009996:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800999a:	fb00 f303 	mul.w	r3, r0, r3
 800999e:	1ad3      	subs	r3, r2, r3
 80099a0:	4a0b      	ldr	r2, [pc, #44]	@ (80099d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE6setNowERKNS_4TimeE+0x74>)
 80099a2:	fb02 f303 	mul.w	r3, r2, r3
 80099a6:	1aca      	subs	r2, r1, r3
 80099a8:	4b0a      	ldr	r3, [pc, #40]	@ (80099d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE6setNowERKNS_4TimeE+0x78>)
 80099aa:	4413      	add	r3, r2
 80099ac:	687a      	ldr	r2, [r7, #4]
 80099ae:	6113      	str	r3, [r2, #16]
    normalizeSecNSec(sec_offset, nsec_offset);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	f103 020c 	add.w	r2, r3, #12
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	3310      	adds	r3, #16
 80099ba:	4619      	mov	r1, r3
 80099bc:	4610      	mov	r0, r2
 80099be:	f000 feab 	bl	800a718 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 80099c2:	bf00      	nop
 80099c4:	3710      	adds	r7, #16
 80099c6:	46bd      	mov	sp, r7
 80099c8:	bd80      	pop	{r7, pc}
 80099ca:	bf00      	nop
 80099cc:	10624dd3 	.word	0x10624dd3
 80099d0:	000f4240 	.word	0x000f4240
 80099d4:	3b9aca00 	.word	0x3b9aca00

080099d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 80099d8:	b580      	push	{r7, lr}
 80099da:	b082      	sub	sp, #8
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
 80099e0:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 80099e2:	683a      	ldr	r2, [r7, #0]
 80099e4:	2103      	movs	r1, #3
 80099e6:	6878      	ldr	r0, [r7, #4]
 80099e8:	f000 f804 	bl	80099f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE3logEcPKc>
  }
 80099ec:	bf00      	nop
 80099ee:	3708      	adds	r7, #8
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bd80      	pop	{r7, pc}

080099f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE3logEcPKc>:
  void log(char byte, const char * msg)
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b088      	sub	sp, #32
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	60f8      	str	r0, [r7, #12]
 80099fc:	460b      	mov	r3, r1
 80099fe:	607a      	str	r2, [r7, #4]
 8009a00:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8009a02:	f107 0314 	add.w	r3, r7, #20
 8009a06:	4618      	mov	r0, r3
 8009a08:	f7f8 fb86 	bl	8002118 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8009a0c:	7afb      	ldrb	r3, [r7, #11]
 8009a0e:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	f107 0214 	add.w	r2, r7, #20
 8009a1e:	2107      	movs	r1, #7
 8009a20:	68f8      	ldr	r0, [r7, #12]
 8009a22:	4798      	blx	r3
  }
 8009a24:	bf00      	nop
 8009a26:	3720      	adds	r7, #32
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	bd80      	pop	{r7, pc}

08009a2c <_Z41__static_initialization_and_destruction_0ii>:
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b082      	sub	sp, #8
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
 8009a34:	6039      	str	r1, [r7, #0]
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	2b01      	cmp	r3, #1
 8009a3a:	d14a      	bne.n	8009ad2 <_Z41__static_initialization_and_destruction_0ii+0xa6>
 8009a3c:	683b      	ldr	r3, [r7, #0]
 8009a3e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009a42:	4293      	cmp	r3, r2
 8009a44:	d145      	bne.n	8009ad2 <_Z41__static_initialization_and_destruction_0ii+0xa6>
};

SerialComm comm_rosserial(huart_rosserial);
 8009a46:	4925      	ldr	r1, [pc, #148]	@ (8009adc <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009a48:	4825      	ldr	r0, [pc, #148]	@ (8009ae0 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8009a4a:	f7f8 ff0e 	bl	800286a <_ZN10SerialCommC1ER20__UART_HandleTypeDef>
/* GLOBAL VARIABLES START */

/*
 * ROS NodeHandle
 */
ros::NodeHandle nh;
 8009a4e:	4825      	ldr	r0, [pc, #148]	@ (8009ae4 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8009a50:	f7fe f8fc 	bl	8007c4c <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EEC1Ev>
const char* imu_frame_id = "imu_frame";

/*
 * Subscribers
 */
ros::Subscriber<geometry_msgs::Twist> sub_cmd_vel("/cmd_vel", &commandVelocityCallback);
 8009a54:	2301      	movs	r3, #1
 8009a56:	4a24      	ldr	r2, [pc, #144]	@ (8009ae8 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8009a58:	4924      	ldr	r1, [pc, #144]	@ (8009aec <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8009a5a:	4825      	ldr	r0, [pc, #148]	@ (8009af0 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8009a5c:	f7ff fa08 	bl	8008e70 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::UInt8> sub_use_pid("/use_pid", &enablePidCallback);
 8009a60:	2301      	movs	r3, #1
 8009a62:	4a24      	ldr	r2, [pc, #144]	@ (8009af4 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8009a64:	4924      	ldr	r1, [pc, #144]	@ (8009af8 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8009a66:	4825      	ldr	r0, [pc, #148]	@ (8009afc <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8009a68:	f7ff fa26 	bl	8008eb8 <_ZN3ros10SubscriberIN8std_msgs5UInt8EvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Float32> sub_kp("/kp", &kpTuneCallback);
 8009a6c:	2301      	movs	r3, #1
 8009a6e:	4a24      	ldr	r2, [pc, #144]	@ (8009b00 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8009a70:	4924      	ldr	r1, [pc, #144]	@ (8009b04 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 8009a72:	4825      	ldr	r0, [pc, #148]	@ (8009b08 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 8009a74:	f7ff fa44 	bl	8008f00 <_ZN3ros10SubscriberIN8std_msgs7Float32EvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Float32> sub_ki("/ki", &kiTuneCallback);
 8009a78:	2301      	movs	r3, #1
 8009a7a:	4a24      	ldr	r2, [pc, #144]	@ (8009b0c <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 8009a7c:	4924      	ldr	r1, [pc, #144]	@ (8009b10 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 8009a7e:	4825      	ldr	r0, [pc, #148]	@ (8009b14 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 8009a80:	f7ff fa3e 	bl	8008f00 <_ZN3ros10SubscriberIN8std_msgs7Float32EvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Float32> sub_kd("/kd", &kdTuneCallback);
 8009a84:	2301      	movs	r3, #1
 8009a86:	4a24      	ldr	r2, [pc, #144]	@ (8009b18 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 8009a88:	4924      	ldr	r1, [pc, #144]	@ (8009b1c <_Z41__static_initialization_and_destruction_0ii+0xf0>)
 8009a8a:	4825      	ldr	r0, [pc, #148]	@ (8009b20 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 8009a8c:	f7ff fa38 	bl	8008f00 <_ZN3ros10SubscriberIN8std_msgs7Float32EvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Int8> sub_test_id("/test_id", &testIdCallback);
 8009a90:	2301      	movs	r3, #1
 8009a92:	4a24      	ldr	r2, [pc, #144]	@ (8009b24 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
 8009a94:	4924      	ldr	r1, [pc, #144]	@ (8009b28 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
 8009a96:	4825      	ldr	r0, [pc, #148]	@ (8009b2c <_Z41__static_initialization_and_destruction_0ii+0x100>)
 8009a98:	f7ff fa56 	bl	8008f48 <_ZN3ros10SubscriberIN8std_msgs4Int8EvEC1EPKcPFvRKS2_Ei>

/*
 * Publishers
 */
sensor_msgs::Imu imu_msg;
 8009a9c:	4824      	ldr	r0, [pc, #144]	@ (8009b30 <_Z41__static_initialization_and_destruction_0ii+0x104>)
 8009a9e:	f7fa ff29 	bl	80048f4 <_ZN11sensor_msgs3ImuC1Ev>
ros::Publisher pub_imu("/imu/data", &imu_msg);
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	4a22      	ldr	r2, [pc, #136]	@ (8009b30 <_Z41__static_initialization_and_destruction_0ii+0x104>)
 8009aa6:	4923      	ldr	r1, [pc, #140]	@ (8009b34 <_Z41__static_initialization_and_destruction_0ii+0x108>)
 8009aa8:	4823      	ldr	r0, [pc, #140]	@ (8009b38 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
 8009aaa:	f7f8 fea9 	bl	8002800 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>

nav_msgs::Odometry odom_msg;
 8009aae:	4823      	ldr	r0, [pc, #140]	@ (8009b3c <_Z41__static_initialization_and_destruction_0ii+0x110>)
 8009ab0:	f7fd ff86 	bl	80079c0 <_ZN8nav_msgs8OdometryC1Ev>
ros::Publisher pub_odom("/encoder/odom", &odom_msg);	// Encoder odometry
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	4a21      	ldr	r2, [pc, #132]	@ (8009b3c <_Z41__static_initialization_and_destruction_0ii+0x110>)
 8009ab8:	4921      	ldr	r1, [pc, #132]	@ (8009b40 <_Z41__static_initialization_and_destruction_0ii+0x114>)
 8009aba:	4822      	ldr	r0, [pc, #136]	@ (8009b44 <_Z41__static_initialization_and_destruction_0ii+0x118>)
 8009abc:	f7f8 fea0 	bl	8002800 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>

sensor_msgs::JointState joint_states_msg;
 8009ac0:	4821      	ldr	r0, [pc, #132]	@ (8009b48 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
 8009ac2:	f7fb fd31 	bl	8005528 <_ZN11sensor_msgs10JointStateC1Ev>
ros::Publisher pub_joint_states("/joint_states", &joint_states_msg);
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	4a1f      	ldr	r2, [pc, #124]	@ (8009b48 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
 8009aca:	4920      	ldr	r1, [pc, #128]	@ (8009b4c <_Z41__static_initialization_and_destruction_0ii+0x120>)
 8009acc:	4820      	ldr	r0, [pc, #128]	@ (8009b50 <_Z41__static_initialization_and_destruction_0ii+0x124>)
 8009ace:	f7f8 fe97 	bl	8002800 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
 8009ad2:	bf00      	nop
 8009ad4:	3708      	adds	r7, #8
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	bd80      	pop	{r7, pc}
 8009ada:	bf00      	nop
 8009adc:	20000194 	.word	0x20000194
 8009ae0:	20000264 	.word	0x20000264
 8009ae4:	20004270 	.word	0x20004270
 8009ae8:	08007e5d 	.word	0x08007e5d
 8009aec:	08010c54 	.word	0x08010c54
 8009af0:	20008328 	.word	0x20008328
 8009af4:	08007ead 	.word	0x08007ead
 8009af8:	08010c60 	.word	0x08010c60
 8009afc:	20008388 	.word	0x20008388
 8009b00:	08007ed9 	.word	0x08007ed9
 8009b04:	08010c6c 	.word	0x08010c6c
 8009b08:	200083a4 	.word	0x200083a4
 8009b0c:	08007f5d 	.word	0x08007f5d
 8009b10:	08010c70 	.word	0x08010c70
 8009b14:	200083c0 	.word	0x200083c0
 8009b18:	08007fe1 	.word	0x08007fe1
 8009b1c:	08010c74 	.word	0x08010c74
 8009b20:	200083dc 	.word	0x200083dc
 8009b24:	08008065 	.word	0x08008065
 8009b28:	08010c78 	.word	0x08010c78
 8009b2c:	200083f8 	.word	0x200083f8
 8009b30:	20008418 	.word	0x20008418
 8009b34:	08010c84 	.word	0x08010c84
 8009b38:	20008570 	.word	0x20008570
 8009b3c:	20008588 	.word	0x20008588
 8009b40:	08010c90 	.word	0x08010c90
 8009b44:	20008890 	.word	0x20008890
 8009b48:	200088a8 	.word	0x200088a8
 8009b4c:	08010ca0 	.word	0x08010ca0
 8009b50:	20008900 	.word	0x20008900

08009b54 <_ZN3ros10SubscriberIN8std_msgs4Int8EvE8callbackEPh>:

  virtual void callback(unsigned char* data) override
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b082      	sub	sp, #8
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
 8009b5c:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	330c      	adds	r3, #12
 8009b62:	6839      	ldr	r1, [r7, #0]
 8009b64:	4618      	mov	r0, r3
 8009b66:	f7f9 f89c 	bl	8002ca2 <_ZN8std_msgs4Int811deserializeEPh>
    this->cb_(msg);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	695b      	ldr	r3, [r3, #20]
 8009b6e:	687a      	ldr	r2, [r7, #4]
 8009b70:	320c      	adds	r2, #12
 8009b72:	4610      	mov	r0, r2
 8009b74:	4798      	blx	r3
  }
 8009b76:	bf00      	nop
 8009b78:	3708      	adds	r7, #8
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	bd80      	pop	{r7, pc}

08009b7e <_ZN3ros10SubscriberIN8std_msgs4Int8EvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5() override
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType() override
 8009b7e:	b480      	push	{r7}
 8009b80:	b083      	sub	sp, #12
 8009b82:	af00      	add	r7, sp, #0
 8009b84:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	699b      	ldr	r3, [r3, #24]
  }
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	370c      	adds	r7, #12
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	bc80      	pop	{r7}
 8009b92:	4770      	bx	lr

08009b94 <_ZN3ros10SubscriberIN8std_msgs4Int8EvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b082      	sub	sp, #8
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	330c      	adds	r3, #12
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	f7f9 f89d 	bl	8002ce0 <_ZN8std_msgs4Int87getTypeEv>
 8009ba6:	4603      	mov	r3, r0
  }
 8009ba8:	4618      	mov	r0, r3
 8009baa:	3708      	adds	r7, #8
 8009bac:	46bd      	mov	sp, r7
 8009bae:	bd80      	pop	{r7, pc}

08009bb0 <_ZN3ros10SubscriberIN8std_msgs4Int8EvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b082      	sub	sp, #8
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	330c      	adds	r3, #12
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	f7f9 f89b 	bl	8002cf8 <_ZN8std_msgs4Int86getMD5Ev>
 8009bc2:	4603      	mov	r3, r0
  }
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	3708      	adds	r7, #8
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	bd80      	pop	{r7, pc}

08009bcc <_ZN3ros10SubscriberIN8std_msgs7Float32EvE8callbackEPh>:
  virtual void callback(unsigned char* data) override
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b082      	sub	sp, #8
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
 8009bd4:	6039      	str	r1, [r7, #0]
    msg.deserialize(data);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	330c      	adds	r3, #12
 8009bda:	6839      	ldr	r1, [r7, #0]
 8009bdc:	4618      	mov	r0, r3
 8009bde:	f7f9 f8de 	bl	8002d9e <_ZN8std_msgs7Float3211deserializeEPh>
    this->cb_(msg);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	695b      	ldr	r3, [r3, #20]
 8009be6:	687a      	ldr	r2, [r7, #4]
 8009be8:	320c      	adds	r2, #12
 8009bea:	4610      	mov	r0, r2
 8009bec:	4798      	blx	r3
  }
 8009bee:	bf00      	nop
 8009bf0:	3708      	adds	r7, #8
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	bd80      	pop	{r7, pc}

08009bf6 <_ZN3ros10SubscriberIN8std_msgs7Float32EvE15getEndpointTypeEv>:
  virtual int getEndpointType() override
 8009bf6:	b480      	push	{r7}
 8009bf8:	b083      	sub	sp, #12
 8009bfa:	af00      	add	r7, sp, #0
 8009bfc:	6078      	str	r0, [r7, #4]
    return endpoint_;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	699b      	ldr	r3, [r3, #24]
  }
 8009c02:	4618      	mov	r0, r3
 8009c04:	370c      	adds	r7, #12
 8009c06:	46bd      	mov	sp, r7
 8009c08:	bc80      	pop	{r7}
 8009c0a:	4770      	bx	lr

08009c0c <_ZN3ros10SubscriberIN8std_msgs7Float32EvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b082      	sub	sp, #8
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	330c      	adds	r3, #12
 8009c18:	4618      	mov	r0, r3
 8009c1a:	f7f9 f8f7 	bl	8002e0c <_ZN8std_msgs7Float327getTypeEv>
 8009c1e:	4603      	mov	r3, r0
  }
 8009c20:	4618      	mov	r0, r3
 8009c22:	3708      	adds	r7, #8
 8009c24:	46bd      	mov	sp, r7
 8009c26:	bd80      	pop	{r7, pc}

08009c28 <_ZN3ros10SubscriberIN8std_msgs7Float32EvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b082      	sub	sp, #8
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	330c      	adds	r3, #12
 8009c34:	4618      	mov	r0, r3
 8009c36:	f7f9 f8f5 	bl	8002e24 <_ZN8std_msgs7Float326getMD5Ev>
 8009c3a:	4603      	mov	r3, r0
  }
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	3708      	adds	r7, #8
 8009c40:	46bd      	mov	sp, r7
 8009c42:	bd80      	pop	{r7, pc}

08009c44 <_ZN3ros10SubscriberIN8std_msgs5UInt8EvE8callbackEPh>:
  virtual void callback(unsigned char* data) override
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b082      	sub	sp, #8
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
 8009c4c:	6039      	str	r1, [r7, #0]
    msg.deserialize(data);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	330c      	adds	r3, #12
 8009c52:	6839      	ldr	r1, [r7, #0]
 8009c54:	4618      	mov	r0, r3
 8009c56:	f7f8 ffc7 	bl	8002be8 <_ZN8std_msgs5UInt811deserializeEPh>
    this->cb_(msg);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	695b      	ldr	r3, [r3, #20]
 8009c5e:	687a      	ldr	r2, [r7, #4]
 8009c60:	320c      	adds	r2, #12
 8009c62:	4610      	mov	r0, r2
 8009c64:	4798      	blx	r3
  }
 8009c66:	bf00      	nop
 8009c68:	3708      	adds	r7, #8
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	bd80      	pop	{r7, pc}

08009c6e <_ZN3ros10SubscriberIN8std_msgs5UInt8EvE15getEndpointTypeEv>:
  virtual int getEndpointType() override
 8009c6e:	b480      	push	{r7}
 8009c70:	b083      	sub	sp, #12
 8009c72:	af00      	add	r7, sp, #0
 8009c74:	6078      	str	r0, [r7, #4]
    return endpoint_;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	699b      	ldr	r3, [r3, #24]
  }
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	370c      	adds	r7, #12
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	bc80      	pop	{r7}
 8009c82:	4770      	bx	lr

08009c84 <_ZN3ros10SubscriberIN8std_msgs5UInt8EvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b082      	sub	sp, #8
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	330c      	adds	r3, #12
 8009c90:	4618      	mov	r0, r3
 8009c92:	f7f8 ffbf 	bl	8002c14 <_ZN8std_msgs5UInt87getTypeEv>
 8009c96:	4603      	mov	r3, r0
  }
 8009c98:	4618      	mov	r0, r3
 8009c9a:	3708      	adds	r7, #8
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	bd80      	pop	{r7, pc}

08009ca0 <_ZN3ros10SubscriberIN8std_msgs5UInt8EvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b082      	sub	sp, #8
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	330c      	adds	r3, #12
 8009cac:	4618      	mov	r0, r3
 8009cae:	f7f8 ffbd 	bl	8002c2c <_ZN8std_msgs5UInt86getMD5Ev>
 8009cb2:	4603      	mov	r3, r0
  }
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	3708      	adds	r7, #8
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	bd80      	pop	{r7, pc}

08009cbc <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:
  virtual void callback(unsigned char* data) override
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b082      	sub	sp, #8
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
 8009cc4:	6039      	str	r1, [r7, #0]
    msg.deserialize(data);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	3310      	adds	r3, #16
 8009cca:	6839      	ldr	r1, [r7, #0]
 8009ccc:	4618      	mov	r0, r3
 8009cce:	f7fc fcab 	bl	8006628 <_ZN13geometry_msgs5Twist11deserializeEPh>
    this->cb_(msg);
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009cd6:	687a      	ldr	r2, [r7, #4]
 8009cd8:	3210      	adds	r2, #16
 8009cda:	4610      	mov	r0, r2
 8009cdc:	4798      	blx	r3
  }
 8009cde:	bf00      	nop
 8009ce0:	3708      	adds	r7, #8
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bd80      	pop	{r7, pc}

08009ce6 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
  virtual int getEndpointType() override
 8009ce6:	b480      	push	{r7}
 8009ce8:	b083      	sub	sp, #12
 8009cea:	af00      	add	r7, sp, #0
 8009cec:	6078      	str	r0, [r7, #4]
    return endpoint_;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
  }
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	370c      	adds	r7, #12
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	bc80      	pop	{r7}
 8009cfa:	4770      	bx	lr

08009cfc <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b082      	sub	sp, #8
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	3310      	adds	r3, #16
 8009d08:	4618      	mov	r0, r3
 8009d0a:	f7fc fcb3 	bl	8006674 <_ZN13geometry_msgs5Twist7getTypeEv>
 8009d0e:	4603      	mov	r3, r0
  }
 8009d10:	4618      	mov	r0, r3
 8009d12:	3708      	adds	r7, #8
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bd80      	pop	{r7, pc}

08009d18 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b082      	sub	sp, #8
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	3310      	adds	r3, #16
 8009d24:	4618      	mov	r0, r3
 8009d26:	f7fc fcb1 	bl	800668c <_ZN13geometry_msgs5Twist6getMD5Ev>
 8009d2a:	4603      	mov	r3, r0
  }
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	3708      	adds	r7, #8
 8009d30:	46bd      	mov	sp, r7
 8009d32:	bd80      	pop	{r7, pc}

08009d34 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE9connectedEv>:
  virtual bool connected() override
 8009d34:	b480      	push	{r7}
 8009d36:	b083      	sub	sp, #12
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
    return configured_;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8009d42:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
  };
 8009d46:	4618      	mov	r0, r3
 8009d48:	370c      	adds	r7, #12
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	bc80      	pop	{r7}
 8009d4e:	4770      	bx	lr

08009d50 <_GLOBAL__sub_I_comm_rosserial>:
 8009d50:	b580      	push	{r7, lr}
 8009d52:	af00      	add	r7, sp, #0
 8009d54:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8009d58:	2001      	movs	r0, #1
 8009d5a:	f7ff fe67 	bl	8009a2c <_Z41__static_initialization_and_destruction_0ii>
 8009d5e:	bd80      	pop	{r7, pc}

08009d60 <_Z6millisv>:
float encoder_yaw = 0.0f, imu_yaw = 0.0f;			// Orientation (in radians);
bool use_pid = true;
float kp = 7.3, ki = 16.0, kd = 0;

uint32_t millis(void)
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	af00      	add	r7, sp, #0
    return HAL_GetTick();
 8009d64:	f000 fd82 	bl	800a86c <HAL_GetTick>
 8009d68:	4603      	mov	r3, r0
}
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	bd80      	pop	{r7, pc}
	...

08009d70 <_Z18mecabot_motor_initv>:

status_t mecabot_motor_init(void)
{
 8009d70:	b590      	push	{r4, r7, lr}
 8009d72:	b085      	sub	sp, #20
 8009d74:	af00      	add	r7, sp, #0
    /* Hard-coded value for the Control Board */

	// Front Left motor setting
    Motor_Handle_t handle = {
 8009d76:	4b1c      	ldr	r3, [pc, #112]	@ (8009de8 <_Z18mecabot_motor_initv+0x78>)
 8009d78:	463c      	mov	r4, r7
 8009d7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009d7c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        .pwm_channel = TIM_CHANNEL_3,
        .direction_port = GPIOC,
        .direction_pin = GPIO_PIN_2,
        .pwm_frequency = MOTOR_PWM_FREQUENCY
    };
    mecabot_motor[front_left] = Motor_Init(handle);
 8009d80:	463b      	mov	r3, r7
 8009d82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009d84:	f7f7 faa6 	bl	80012d4 <Motor_Init>
 8009d88:	4603      	mov	r3, r0
 8009d8a:	4a18      	ldr	r2, [pc, #96]	@ (8009dec <_Z18mecabot_motor_initv+0x7c>)
 8009d8c:	6013      	str	r3, [r2, #0]
    // Front Right motor setting
    handle.pwm_channel = TIM_CHANNEL_1;
 8009d8e:	2300      	movs	r3, #0
 8009d90:	603b      	str	r3, [r7, #0]
    handle.direction_port = GPIOC;
 8009d92:	4b17      	ldr	r3, [pc, #92]	@ (8009df0 <_Z18mecabot_motor_initv+0x80>)
 8009d94:	607b      	str	r3, [r7, #4]
    handle.direction_pin = GPIO_PIN_3;
 8009d96:	2308      	movs	r3, #8
 8009d98:	813b      	strh	r3, [r7, #8]
    mecabot_motor[front_right] = Motor_Init(handle);
 8009d9a:	463b      	mov	r3, r7
 8009d9c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009d9e:	f7f7 fa99 	bl	80012d4 <Motor_Init>
 8009da2:	4603      	mov	r3, r0
 8009da4:	4a11      	ldr	r2, [pc, #68]	@ (8009dec <_Z18mecabot_motor_initv+0x7c>)
 8009da6:	6053      	str	r3, [r2, #4]
    // Back Left motor setting
    handle.pwm_channel = TIM_CHANNEL_4;
 8009da8:	230c      	movs	r3, #12
 8009daa:	603b      	str	r3, [r7, #0]
    handle.direction_port = GPIOC;
 8009dac:	4b10      	ldr	r3, [pc, #64]	@ (8009df0 <_Z18mecabot_motor_initv+0x80>)
 8009dae:	607b      	str	r3, [r7, #4]
    handle.direction_pin = GPIO_PIN_0;
 8009db0:	2301      	movs	r3, #1
 8009db2:	813b      	strh	r3, [r7, #8]
    mecabot_motor[back_left] = Motor_Init(handle);
 8009db4:	463b      	mov	r3, r7
 8009db6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009db8:	f7f7 fa8c 	bl	80012d4 <Motor_Init>
 8009dbc:	4603      	mov	r3, r0
 8009dbe:	4a0b      	ldr	r2, [pc, #44]	@ (8009dec <_Z18mecabot_motor_initv+0x7c>)
 8009dc0:	6093      	str	r3, [r2, #8]
    // Back Right motor setting
    handle.pwm_channel = TIM_CHANNEL_2;
 8009dc2:	2304      	movs	r3, #4
 8009dc4:	603b      	str	r3, [r7, #0]
    handle.direction_port = GPIOC;
 8009dc6:	4b0a      	ldr	r3, [pc, #40]	@ (8009df0 <_Z18mecabot_motor_initv+0x80>)
 8009dc8:	607b      	str	r3, [r7, #4]
    handle.direction_pin = GPIO_PIN_1;
 8009dca:	2302      	movs	r3, #2
 8009dcc:	813b      	strh	r3, [r7, #8]
    mecabot_motor[back_right] = Motor_Init(handle);
 8009dce:	463b      	mov	r3, r7
 8009dd0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009dd2:	f7f7 fa7f 	bl	80012d4 <Motor_Init>
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	4a04      	ldr	r2, [pc, #16]	@ (8009dec <_Z18mecabot_motor_initv+0x7c>)
 8009dda:	60d3      	str	r3, [r2, #12]

    // TODO: Check if all motors were initialized correctly
    return STATUS_OK;
 8009ddc:	2300      	movs	r3, #0
}
 8009dde:	4618      	mov	r0, r3
 8009de0:	3714      	adds	r7, #20
 8009de2:	46bd      	mov	sp, r7
 8009de4:	bd90      	pop	{r4, r7, pc}
 8009de6:	bf00      	nop
 8009de8:	08010cb0 	.word	0x08010cb0
 8009dec:	200089cc 	.word	0x200089cc
 8009df0:	40011000 	.word	0x40011000

08009df4 <_Z20mecabot_encoder_initv>:

status_t mecabot_encoder_init(void)
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b088      	sub	sp, #32
 8009df8:	af00      	add	r7, sp, #0
	/* Hard-coded value for the Control Board */

	// Front Left encoder setting
    Encoder_Handle_t handle_encoder = {
 8009dfa:	4a2f      	ldr	r2, [pc, #188]	@ (8009eb8 <_Z20mecabot_encoder_initv+0xc4>)
 8009dfc:	f107 0314 	add.w	r3, r7, #20
 8009e00:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009e04:	e883 0003 	stmia.w	r3, {r0, r1}
        .max_count = 0xFFFFFFFF,
        .tick_read_channel = TIM_CHANNEL_3
    };
    encoder[front_left] = Encoder_Init(handle_encoder);
 8009e08:	f107 0314 	add.w	r3, r7, #20
 8009e0c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009e10:	f7f7 fbda 	bl	80015c8 <Encoder_Init>
 8009e14:	4603      	mov	r3, r0
 8009e16:	4a29      	ldr	r2, [pc, #164]	@ (8009ebc <_Z20mecabot_encoder_initv+0xc8>)
 8009e18:	6013      	str	r3, [r2, #0]
    // Front Right encoder setting
    handle_encoder.tick_read_channel = TIM_CHANNEL_1;
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	833b      	strh	r3, [r7, #24]
    encoder[front_right] = Encoder_Init(handle_encoder);
 8009e1e:	f107 0314 	add.w	r3, r7, #20
 8009e22:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009e26:	f7f7 fbcf 	bl	80015c8 <Encoder_Init>
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	4a23      	ldr	r2, [pc, #140]	@ (8009ebc <_Z20mecabot_encoder_initv+0xc8>)
 8009e2e:	6053      	str	r3, [r2, #4]
    // Back Left encoder setting
    handle_encoder.tick_read_channel = TIM_CHANNEL_4;
 8009e30:	230c      	movs	r3, #12
 8009e32:	833b      	strh	r3, [r7, #24]
    encoder[back_left] = Encoder_Init(handle_encoder);
 8009e34:	f107 0314 	add.w	r3, r7, #20
 8009e38:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009e3c:	f7f7 fbc4 	bl	80015c8 <Encoder_Init>
 8009e40:	4603      	mov	r3, r0
 8009e42:	4a1e      	ldr	r2, [pc, #120]	@ (8009ebc <_Z20mecabot_encoder_initv+0xc8>)
 8009e44:	6093      	str	r3, [r2, #8]
    // Back Right encoder setting
    handle_encoder.tick_read_channel = TIM_CHANNEL_2;
 8009e46:	2304      	movs	r3, #4
 8009e48:	833b      	strh	r3, [r7, #24]
    encoder[back_right] = Encoder_Init(handle_encoder);
 8009e4a:	f107 0314 	add.w	r3, r7, #20
 8009e4e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009e52:	f7f7 fbb9 	bl	80015c8 <Encoder_Init>
 8009e56:	4603      	mov	r3, r0
 8009e58:	4a18      	ldr	r2, [pc, #96]	@ (8009ebc <_Z20mecabot_encoder_initv+0xc8>)
 8009e5a:	60d3      	str	r3, [r2, #12]

    // Initialize the encoder Low-pass Filter
    float b_coeff[] = { 0.2452,	0.2452 };
 8009e5c:	4a18      	ldr	r2, [pc, #96]	@ (8009ec0 <_Z20mecabot_encoder_initv+0xcc>)
 8009e5e:	f107 030c 	add.w	r3, r7, #12
 8009e62:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009e66:	e883 0003 	stmia.w	r3, {r0, r1}
    float a_coeff[] = {    1.0, -0.5095 };
 8009e6a:	4a16      	ldr	r2, [pc, #88]	@ (8009ec4 <_Z20mecabot_encoder_initv+0xd0>)
 8009e6c:	1d3b      	adds	r3, r7, #4
 8009e6e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009e72:	e883 0003 	stmia.w	r3, {r0, r1}
	for (int i = 0; i < NUM_OF_MOTOR; i++)
 8009e76:	2300      	movs	r3, #0
 8009e78:	61fb      	str	r3, [r7, #28]
 8009e7a:	e015      	b.n	8009ea8 <_Z20mecabot_encoder_initv+0xb4>
	{
		encoder_filter[i] = new FO_IIR_Filter_t;
 8009e7c:	2018      	movs	r0, #24
 8009e7e:	f004 fc63 	bl	800e748 <_Znwj>
 8009e82:	4603      	mov	r3, r0
 8009e84:	4619      	mov	r1, r3
 8009e86:	4a10      	ldr	r2, [pc, #64]	@ (8009ec8 <_Z20mecabot_encoder_initv+0xd4>)
 8009e88:	69fb      	ldr	r3, [r7, #28]
 8009e8a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		FO_IIR_Init(encoder_filter[i], b_coeff, a_coeff);
 8009e8e:	4a0e      	ldr	r2, [pc, #56]	@ (8009ec8 <_Z20mecabot_encoder_initv+0xd4>)
 8009e90:	69fb      	ldr	r3, [r7, #28]
 8009e92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009e96:	1d3a      	adds	r2, r7, #4
 8009e98:	f107 010c 	add.w	r1, r7, #12
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	f7f7 f9b3 	bl	8001208 <FO_IIR_Init>
	for (int i = 0; i < NUM_OF_MOTOR; i++)
 8009ea2:	69fb      	ldr	r3, [r7, #28]
 8009ea4:	3301      	adds	r3, #1
 8009ea6:	61fb      	str	r3, [r7, #28]
 8009ea8:	69fb      	ldr	r3, [r7, #28]
 8009eaa:	2b03      	cmp	r3, #3
 8009eac:	dde6      	ble.n	8009e7c <_Z20mecabot_encoder_initv+0x88>
	}
    // TODO: Check if all encoders were initialized correctly
    return STATUS_OK;
 8009eae:	2300      	movs	r3, #0
}
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	3720      	adds	r7, #32
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	bd80      	pop	{r7, pc}
 8009eb8:	08010cc0 	.word	0x08010cc0
 8009ebc:	200089dc 	.word	0x200089dc
 8009ec0:	08010cc8 	.word	0x08010cc8
 8009ec4:	08010cd0 	.word	0x08010cd0
 8009ec8:	200089ec 	.word	0x200089ec

08009ecc <_Z16mecabot_pid_initv>:

status_t mecabot_pid_init(void)
{
 8009ecc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009ed0:	b084      	sub	sp, #16
 8009ed2:	af02      	add	r7, sp, #8
	for (int i = 0; i < NUM_OF_MOTOR; i++)
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	607b      	str	r3, [r7, #4]
 8009ed8:	e024      	b.n	8009f24 <_Z16mecabot_pid_initv+0x58>
	{
		controller[i] = PID_Init(kp, ki, kd);
 8009eda:	4b17      	ldr	r3, [pc, #92]	@ (8009f38 <_Z16mecabot_pid_initv+0x6c>)
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	4618      	mov	r0, r3
 8009ee0:	f7f6 fb0e 	bl	8000500 <__aeabi_f2d>
 8009ee4:	4604      	mov	r4, r0
 8009ee6:	460d      	mov	r5, r1
 8009ee8:	4b14      	ldr	r3, [pc, #80]	@ (8009f3c <_Z16mecabot_pid_initv+0x70>)
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	4618      	mov	r0, r3
 8009eee:	f7f6 fb07 	bl	8000500 <__aeabi_f2d>
 8009ef2:	4680      	mov	r8, r0
 8009ef4:	4689      	mov	r9, r1
 8009ef6:	4b12      	ldr	r3, [pc, #72]	@ (8009f40 <_Z16mecabot_pid_initv+0x74>)
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	4618      	mov	r0, r3
 8009efc:	f7f6 fb00 	bl	8000500 <__aeabi_f2d>
 8009f00:	4602      	mov	r2, r0
 8009f02:	460b      	mov	r3, r1
 8009f04:	e9cd 2300 	strd	r2, r3, [sp]
 8009f08:	4642      	mov	r2, r8
 8009f0a:	464b      	mov	r3, r9
 8009f0c:	4620      	mov	r0, r4
 8009f0e:	4629      	mov	r1, r5
 8009f10:	f000 f832 	bl	8009f78 <PID_Init>
 8009f14:	4602      	mov	r2, r0
 8009f16:	490b      	ldr	r1, [pc, #44]	@ (8009f44 <_Z16mecabot_pid_initv+0x78>)
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < NUM_OF_MOTOR; i++)
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	3301      	adds	r3, #1
 8009f22:	607b      	str	r3, [r7, #4]
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2b03      	cmp	r3, #3
 8009f28:	ddd7      	ble.n	8009eda <_Z16mecabot_pid_initv+0xe>
	}

	return STATUS_OK;
 8009f2a:	2300      	movs	r3, #0
}
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	3708      	adds	r7, #8
 8009f30:	46bd      	mov	sp, r7
 8009f32:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8009f36:	bf00      	nop
 8009f38:	2000002c 	.word	0x2000002c
 8009f3c:	20000030 	.word	0x20000030
 8009f40:	20008a18 	.word	0x20008a18
 8009f44:	200089fc 	.word	0x200089fc

08009f48 <_Z19mecabot_motor_startP7Motor_t>:

    return MPU6050_Init(&hi2c1, &my_mpu, mpu_handle, 0);
}

status_t mecabot_motor_start(Motor motor)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b082      	sub	sp, #8
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
    return Motor_Start(motor);
 8009f50:	6878      	ldr	r0, [r7, #4]
 8009f52:	f7f7 fac9 	bl	80014e8 <Motor_Start>
 8009f56:	4603      	mov	r3, r0
}
 8009f58:	4618      	mov	r0, r3
 8009f5a:	3708      	adds	r7, #8
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	bd80      	pop	{r7, pc}

08009f60 <_Z21mecabot_encoder_startP9Encoder_t>:
{
    return Motor_Stop(motor);
}

status_t mecabot_encoder_start(Encoder encoder)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b082      	sub	sp, #8
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
	return Encoder_Start(encoder);
 8009f68:	6878      	ldr	r0, [r7, #4]
 8009f6a:	f7f7 fb49 	bl	8001600 <Encoder_Start>
 8009f6e:	4603      	mov	r3, r0
}
 8009f70:	4618      	mov	r0, r3
 8009f72:	3708      	adds	r7, #8
 8009f74:	46bd      	mov	sp, r7
 8009f76:	bd80      	pop	{r7, pc}

08009f78 <PID_Init>:
#include "pid.h"

PID_t* PID_Init(double p, double i, double d)
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b086      	sub	sp, #24
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8009f82:	e9c7 2300 	strd	r2, r3, [r7]
    PID_t *object = calloc(1, sizeof(PID_t));
 8009f86:	2150      	movs	r1, #80	@ 0x50
 8009f88:	2001      	movs	r0, #1
 8009f8a:	f006 fa1b 	bl	80103c4 <calloc>
 8009f8e:	4603      	mov	r3, r0
 8009f90:	617b      	str	r3, [r7, #20]

    object->set_point = 0;
 8009f92:	6979      	ldr	r1, [r7, #20]
 8009f94:	f04f 0200 	mov.w	r2, #0
 8009f98:	f04f 0300 	mov.w	r3, #0
 8009f9c:	e9c1 2300 	strd	r2, r3, [r1]
    object->error = 0;
 8009fa0:	6979      	ldr	r1, [r7, #20]
 8009fa2:	f04f 0200 	mov.w	r2, #0
 8009fa6:	f04f 0300 	mov.w	r3, #0
 8009faa:	e9c1 2302 	strd	r2, r3, [r1, #8]
    
    object->kp = p;
 8009fae:	6979      	ldr	r1, [r7, #20]
 8009fb0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009fb4:	e9c1 2304 	strd	r2, r3, [r1, #16]
    object->ki = i;
 8009fb8:	6979      	ldr	r1, [r7, #20]
 8009fba:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009fbe:	e9c1 2306 	strd	r2, r3, [r1, #24]
    object->kd = d;
 8009fc2:	6979      	ldr	r1, [r7, #20]
 8009fc4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009fc8:	e9c1 2308 	strd	r2, r3, [r1, #32]

    object->P = 0;
 8009fcc:	6979      	ldr	r1, [r7, #20]
 8009fce:	f04f 0200 	mov.w	r2, #0
 8009fd2:	f04f 0300 	mov.w	r3, #0
 8009fd6:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    object->I = 0;
 8009fda:	6979      	ldr	r1, [r7, #20]
 8009fdc:	f04f 0200 	mov.w	r2, #0
 8009fe0:	f04f 0300 	mov.w	r3, #0
 8009fe4:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    object->D = 0;
 8009fe8:	6979      	ldr	r1, [r7, #20]
 8009fea:	f04f 0200 	mov.w	r2, #0
 8009fee:	f04f 0300 	mov.w	r3, #0
 8009ff2:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38

    object->integral_sum = 0;
 8009ff6:	6979      	ldr	r1, [r7, #20]
 8009ff8:	f04f 0200 	mov.w	r2, #0
 8009ffc:	f04f 0300 	mov.w	r3, #0
 800a000:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
    object->last_input = 0;
 800a004:	6979      	ldr	r1, [r7, #20]
 800a006:	f04f 0200 	mov.w	r2, #0
 800a00a:	f04f 0300 	mov.w	r3, #0
 800a00e:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48

    return object;
 800a012:	697b      	ldr	r3, [r7, #20]
}
 800a014:	4618      	mov	r0, r3
 800a016:	3718      	adds	r7, #24
 800a018:	46bd      	mov	sp, r7
 800a01a:	bd80      	pop	{r7, pc}

0800a01c <PID_SetGain>:

void PID_SetGain(PID_t *controller, double p, double i, double d)
{
 800a01c:	b480      	push	{r7}
 800a01e:	b085      	sub	sp, #20
 800a020:	af00      	add	r7, sp, #0
 800a022:	60f8      	str	r0, [r7, #12]
 800a024:	e9c7 2300 	strd	r2, r3, [r7]
    controller->kp = p;
 800a028:	68f9      	ldr	r1, [r7, #12]
 800a02a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a02e:	e9c1 2304 	strd	r2, r3, [r1, #16]
    controller->ki = i;
 800a032:	68f9      	ldr	r1, [r7, #12]
 800a034:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a038:	e9c1 2306 	strd	r2, r3, [r1, #24]
    controller->kd = d;
 800a03c:	68f9      	ldr	r1, [r7, #12]
 800a03e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a042:	e9c1 2308 	strd	r2, r3, [r1, #32]
}
 800a046:	bf00      	nop
 800a048:	3714      	adds	r7, #20
 800a04a:	46bd      	mov	sp, r7
 800a04c:	bc80      	pop	{r7}
 800a04e:	4770      	bx	lr

0800a050 <PID_Compute>:

double PID_Compute(PID_t *controller, double input, double dt)
{
 800a050:	b5b0      	push	{r4, r5, r7, lr}
 800a052:	b08a      	sub	sp, #40	@ 0x28
 800a054:	af00      	add	r7, sp, #0
 800a056:	60f8      	str	r0, [r7, #12]
 800a058:	e9c7 2300 	strd	r2, r3, [r7]
    // Error calculation
    controller->error = controller->set_point - input;
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a062:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a066:	f7f6 f8eb 	bl	8000240 <__aeabi_dsub>
 800a06a:	4602      	mov	r2, r0
 800a06c:	460b      	mov	r3, r1
 800a06e:	68f9      	ldr	r1, [r7, #12]
 800a070:	e9c1 2302 	strd	r2, r3, [r1, #8]

    double err = controller->error;
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800a07a:	e9c7 2306 	strd	r2, r3, [r7, #24]

    // P
    controller->P = err * controller->kp;
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800a084:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a088:	f7f6 fa92 	bl	80005b0 <__aeabi_dmul>
 800a08c:	4602      	mov	r2, r0
 800a08e:	460b      	mov	r3, r1
 800a090:	68f9      	ldr	r1, [r7, #12]
 800a092:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28

    // I
    controller->integral_sum += err * (dt/1000);
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 800a09c:	f04f 0200 	mov.w	r2, #0
 800a0a0:	4b5b      	ldr	r3, [pc, #364]	@ (800a210 <PID_Compute+0x1c0>)
 800a0a2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800a0a6:	f7f6 fbad 	bl	8000804 <__aeabi_ddiv>
 800a0aa:	4602      	mov	r2, r0
 800a0ac:	460b      	mov	r3, r1
 800a0ae:	4610      	mov	r0, r2
 800a0b0:	4619      	mov	r1, r3
 800a0b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a0b6:	f7f6 fa7b 	bl	80005b0 <__aeabi_dmul>
 800a0ba:	4602      	mov	r2, r0
 800a0bc:	460b      	mov	r3, r1
 800a0be:	4620      	mov	r0, r4
 800a0c0:	4629      	mov	r1, r5
 800a0c2:	f7f6 f8bf 	bl	8000244 <__adddf3>
 800a0c6:	4602      	mov	r2, r0
 800a0c8:	460b      	mov	r3, r1
 800a0ca:	68f9      	ldr	r1, [r7, #12]
 800a0cc:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
    controller->I = controller->integral_sum * controller->ki;
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800a0dc:	f7f6 fa68 	bl	80005b0 <__aeabi_dmul>
 800a0e0:	4602      	mov	r2, r0
 800a0e2:	460b      	mov	r3, r1
 800a0e4:	68f9      	ldr	r1, [r7, #12]
 800a0e6:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    if (controller->I >= MAX_INTEGRAL)
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 800a0f0:	f04f 0200 	mov.w	r2, #0
 800a0f4:	4b47      	ldr	r3, [pc, #284]	@ (800a214 <PID_Compute+0x1c4>)
 800a0f6:	f7f6 fce1 	bl	8000abc <__aeabi_dcmpge>
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d005      	beq.n	800a10c <PID_Compute+0xbc>
    {
        controller->I = MAX_INTEGRAL;
 800a100:	68f9      	ldr	r1, [r7, #12]
 800a102:	f04f 0200 	mov.w	r2, #0
 800a106:	4b43      	ldr	r3, [pc, #268]	@ (800a214 <PID_Compute+0x1c4>)
 800a108:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    }
    if (controller->I <= MIN_INTEGRAL)
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 800a112:	f04f 0200 	mov.w	r2, #0
 800a116:	4b40      	ldr	r3, [pc, #256]	@ (800a218 <PID_Compute+0x1c8>)
 800a118:	f7f6 fcc6 	bl	8000aa8 <__aeabi_dcmple>
 800a11c:	4603      	mov	r3, r0
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d005      	beq.n	800a12e <PID_Compute+0xde>
    {
        controller->I = MIN_INTEGRAL;
 800a122:	68f9      	ldr	r1, [r7, #12]
 800a124:	f04f 0200 	mov.w	r2, #0
 800a128:	4b3b      	ldr	r3, [pc, #236]	@ (800a218 <PID_Compute+0x1c8>)
 800a12a:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    }

    // D
    double dError = (input - controller->last_input) / (dt/1000);
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 800a134:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a138:	f7f6 f882 	bl	8000240 <__aeabi_dsub>
 800a13c:	4602      	mov	r2, r0
 800a13e:	460b      	mov	r3, r1
 800a140:	4614      	mov	r4, r2
 800a142:	461d      	mov	r5, r3
 800a144:	f04f 0200 	mov.w	r2, #0
 800a148:	4b31      	ldr	r3, [pc, #196]	@ (800a210 <PID_Compute+0x1c0>)
 800a14a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800a14e:	f7f6 fb59 	bl	8000804 <__aeabi_ddiv>
 800a152:	4602      	mov	r2, r0
 800a154:	460b      	mov	r3, r1
 800a156:	4620      	mov	r0, r4
 800a158:	4629      	mov	r1, r5
 800a15a:	f7f6 fb53 	bl	8000804 <__aeabi_ddiv>
 800a15e:	4602      	mov	r2, r0
 800a160:	460b      	mov	r3, r1
 800a162:	e9c7 2304 	strd	r2, r3, [r7, #16]
    controller->last_input = input;
 800a166:	68f9      	ldr	r1, [r7, #12]
 800a168:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a16c:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
    controller->D = dError  * controller->kd;
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800a176:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a17a:	f7f6 fa19 	bl	80005b0 <__aeabi_dmul>
 800a17e:	4602      	mov	r2, r0
 800a180:	460b      	mov	r3, r1
 800a182:	68f9      	ldr	r1, [r7, #12]
 800a184:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38

    // Calculate the output
    double output = controller->P + controller->I + controller->D;
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800a194:	f7f6 f856 	bl	8000244 <__adddf3>
 800a198:	4602      	mov	r2, r0
 800a19a:	460b      	mov	r3, r1
 800a19c:	4610      	mov	r0, r2
 800a19e:	4619      	mov	r1, r3
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800a1a6:	f7f6 f84d 	bl	8000244 <__adddf3>
 800a1aa:	4602      	mov	r2, r0
 800a1ac:	460b      	mov	r3, r1
 800a1ae:	e9c7 2308 	strd	r2, r3, [r7, #32]
    if (output >= MAX_PID_OUTPUT)
 800a1b2:	a313      	add	r3, pc, #76	@ (adr r3, 800a200 <PID_Compute+0x1b0>)
 800a1b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1b8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800a1bc:	f7f6 fc7e 	bl	8000abc <__aeabi_dcmpge>
 800a1c0:	4603      	mov	r3, r0
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d005      	beq.n	800a1d2 <PID_Compute+0x182>
    {
        output = MAX_PID_OUTPUT;
 800a1c6:	a30e      	add	r3, pc, #56	@ (adr r3, 800a200 <PID_Compute+0x1b0>)
 800a1c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1cc:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800a1d0:	e00e      	b.n	800a1f0 <PID_Compute+0x1a0>
    }
    else if (output <= MIN_PID_OUTPUT)
 800a1d2:	a30d      	add	r3, pc, #52	@ (adr r3, 800a208 <PID_Compute+0x1b8>)
 800a1d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1d8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800a1dc:	f7f6 fc64 	bl	8000aa8 <__aeabi_dcmple>
 800a1e0:	4603      	mov	r3, r0
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d004      	beq.n	800a1f0 <PID_Compute+0x1a0>
    {
        output = MIN_PID_OUTPUT;
 800a1e6:	a308      	add	r3, pc, #32	@ (adr r3, 800a208 <PID_Compute+0x1b8>)
 800a1e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ec:	e9c7 2308 	strd	r2, r3, [r7, #32]
    }

    return output;
 800a1f0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
}
 800a1f4:	4610      	mov	r0, r2
 800a1f6:	4619      	mov	r1, r3
 800a1f8:	3728      	adds	r7, #40	@ 0x28
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bdb0      	pop	{r4, r5, r7, pc}
 800a1fe:	bf00      	nop
 800a200:	00000000 	.word	0x00000000
 800a204:	406fe000 	.word	0x406fe000
 800a208:	00000000 	.word	0x00000000
 800a20c:	c06fe000 	.word	0xc06fe000
 800a210:	408f4000 	.word	0x408f4000
 800a214:	40640000 	.word	0x40640000
 800a218:	c0640000 	.word	0xc0640000

0800a21c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a21c:	b480      	push	{r7}
 800a21e:	b085      	sub	sp, #20
 800a220:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800a222:	4b15      	ldr	r3, [pc, #84]	@ (800a278 <HAL_MspInit+0x5c>)
 800a224:	699b      	ldr	r3, [r3, #24]
 800a226:	4a14      	ldr	r2, [pc, #80]	@ (800a278 <HAL_MspInit+0x5c>)
 800a228:	f043 0301 	orr.w	r3, r3, #1
 800a22c:	6193      	str	r3, [r2, #24]
 800a22e:	4b12      	ldr	r3, [pc, #72]	@ (800a278 <HAL_MspInit+0x5c>)
 800a230:	699b      	ldr	r3, [r3, #24]
 800a232:	f003 0301 	and.w	r3, r3, #1
 800a236:	60bb      	str	r3, [r7, #8]
 800a238:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800a23a:	4b0f      	ldr	r3, [pc, #60]	@ (800a278 <HAL_MspInit+0x5c>)
 800a23c:	69db      	ldr	r3, [r3, #28]
 800a23e:	4a0e      	ldr	r2, [pc, #56]	@ (800a278 <HAL_MspInit+0x5c>)
 800a240:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a244:	61d3      	str	r3, [r2, #28]
 800a246:	4b0c      	ldr	r3, [pc, #48]	@ (800a278 <HAL_MspInit+0x5c>)
 800a248:	69db      	ldr	r3, [r3, #28]
 800a24a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a24e:	607b      	str	r3, [r7, #4]
 800a250:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800a252:	4b0a      	ldr	r3, [pc, #40]	@ (800a27c <HAL_MspInit+0x60>)
 800a254:	685b      	ldr	r3, [r3, #4]
 800a256:	60fb      	str	r3, [r7, #12]
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800a25e:	60fb      	str	r3, [r7, #12]
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800a266:	60fb      	str	r3, [r7, #12]
 800a268:	4a04      	ldr	r2, [pc, #16]	@ (800a27c <HAL_MspInit+0x60>)
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a26e:	bf00      	nop
 800a270:	3714      	adds	r7, #20
 800a272:	46bd      	mov	sp, r7
 800a274:	bc80      	pop	{r7}
 800a276:	4770      	bx	lr
 800a278:	40021000 	.word	0x40021000
 800a27c:	40010000 	.word	0x40010000

0800a280 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800a280:	b580      	push	{r7, lr}
 800a282:	b08a      	sub	sp, #40	@ 0x28
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a288:	f107 0314 	add.w	r3, r7, #20
 800a28c:	2200      	movs	r2, #0
 800a28e:	601a      	str	r2, [r3, #0]
 800a290:	605a      	str	r2, [r3, #4]
 800a292:	609a      	str	r2, [r3, #8]
 800a294:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	4a1d      	ldr	r2, [pc, #116]	@ (800a310 <HAL_I2C_MspInit+0x90>)
 800a29c:	4293      	cmp	r3, r2
 800a29e:	d132      	bne.n	800a306 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a2a0:	4b1c      	ldr	r3, [pc, #112]	@ (800a314 <HAL_I2C_MspInit+0x94>)
 800a2a2:	699b      	ldr	r3, [r3, #24]
 800a2a4:	4a1b      	ldr	r2, [pc, #108]	@ (800a314 <HAL_I2C_MspInit+0x94>)
 800a2a6:	f043 0308 	orr.w	r3, r3, #8
 800a2aa:	6193      	str	r3, [r2, #24]
 800a2ac:	4b19      	ldr	r3, [pc, #100]	@ (800a314 <HAL_I2C_MspInit+0x94>)
 800a2ae:	699b      	ldr	r3, [r3, #24]
 800a2b0:	f003 0308 	and.w	r3, r3, #8
 800a2b4:	613b      	str	r3, [r7, #16]
 800a2b6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800a2b8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800a2bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a2be:	2312      	movs	r3, #18
 800a2c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800a2c2:	2303      	movs	r3, #3
 800a2c4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a2c6:	f107 0314 	add.w	r3, r7, #20
 800a2ca:	4619      	mov	r1, r3
 800a2cc:	4812      	ldr	r0, [pc, #72]	@ (800a318 <HAL_I2C_MspInit+0x98>)
 800a2ce:	f001 f869 	bl	800b3a4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800a2d2:	4b12      	ldr	r3, [pc, #72]	@ (800a31c <HAL_I2C_MspInit+0x9c>)
 800a2d4:	685b      	ldr	r3, [r3, #4]
 800a2d6:	627b      	str	r3, [r7, #36]	@ 0x24
 800a2d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2da:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800a2de:	627b      	str	r3, [r7, #36]	@ 0x24
 800a2e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2e2:	f043 0302 	orr.w	r3, r3, #2
 800a2e6:	627b      	str	r3, [r7, #36]	@ 0x24
 800a2e8:	4a0c      	ldr	r2, [pc, #48]	@ (800a31c <HAL_I2C_MspInit+0x9c>)
 800a2ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2ec:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800a2ee:	4b09      	ldr	r3, [pc, #36]	@ (800a314 <HAL_I2C_MspInit+0x94>)
 800a2f0:	69db      	ldr	r3, [r3, #28]
 800a2f2:	4a08      	ldr	r2, [pc, #32]	@ (800a314 <HAL_I2C_MspInit+0x94>)
 800a2f4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a2f8:	61d3      	str	r3, [r2, #28]
 800a2fa:	4b06      	ldr	r3, [pc, #24]	@ (800a314 <HAL_I2C_MspInit+0x94>)
 800a2fc:	69db      	ldr	r3, [r3, #28]
 800a2fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a302:	60fb      	str	r3, [r7, #12]
 800a304:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800a306:	bf00      	nop
 800a308:	3728      	adds	r7, #40	@ 0x28
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bd80      	pop	{r7, pc}
 800a30e:	bf00      	nop
 800a310:	40005400 	.word	0x40005400
 800a314:	40021000 	.word	0x40021000
 800a318:	40010c00 	.word	0x40010c00
 800a31c:	40010000 	.word	0x40010000

0800a320 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b08a      	sub	sp, #40	@ 0x28
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a328:	f107 0318 	add.w	r3, r7, #24
 800a32c:	2200      	movs	r2, #0
 800a32e:	601a      	str	r2, [r3, #0]
 800a330:	605a      	str	r2, [r3, #4]
 800a332:	609a      	str	r2, [r3, #8]
 800a334:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	4a23      	ldr	r2, [pc, #140]	@ (800a3c8 <HAL_TIM_Base_MspInit+0xa8>)
 800a33c:	4293      	cmp	r3, r2
 800a33e:	d10c      	bne.n	800a35a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800a340:	4b22      	ldr	r3, [pc, #136]	@ (800a3cc <HAL_TIM_Base_MspInit+0xac>)
 800a342:	699b      	ldr	r3, [r3, #24]
 800a344:	4a21      	ldr	r2, [pc, #132]	@ (800a3cc <HAL_TIM_Base_MspInit+0xac>)
 800a346:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800a34a:	6193      	str	r3, [r2, #24]
 800a34c:	4b1f      	ldr	r3, [pc, #124]	@ (800a3cc <HAL_TIM_Base_MspInit+0xac>)
 800a34e:	699b      	ldr	r3, [r3, #24]
 800a350:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a354:	617b      	str	r3, [r7, #20]
 800a356:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800a358:	e031      	b.n	800a3be <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM8)
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	4a1c      	ldr	r2, [pc, #112]	@ (800a3d0 <HAL_TIM_Base_MspInit+0xb0>)
 800a360:	4293      	cmp	r3, r2
 800a362:	d12c      	bne.n	800a3be <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800a364:	4b19      	ldr	r3, [pc, #100]	@ (800a3cc <HAL_TIM_Base_MspInit+0xac>)
 800a366:	699b      	ldr	r3, [r3, #24]
 800a368:	4a18      	ldr	r2, [pc, #96]	@ (800a3cc <HAL_TIM_Base_MspInit+0xac>)
 800a36a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800a36e:	6193      	str	r3, [r2, #24]
 800a370:	4b16      	ldr	r3, [pc, #88]	@ (800a3cc <HAL_TIM_Base_MspInit+0xac>)
 800a372:	699b      	ldr	r3, [r3, #24]
 800a374:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a378:	613b      	str	r3, [r7, #16]
 800a37a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a37c:	4b13      	ldr	r3, [pc, #76]	@ (800a3cc <HAL_TIM_Base_MspInit+0xac>)
 800a37e:	699b      	ldr	r3, [r3, #24]
 800a380:	4a12      	ldr	r2, [pc, #72]	@ (800a3cc <HAL_TIM_Base_MspInit+0xac>)
 800a382:	f043 0310 	orr.w	r3, r3, #16
 800a386:	6193      	str	r3, [r2, #24]
 800a388:	4b10      	ldr	r3, [pc, #64]	@ (800a3cc <HAL_TIM_Base_MspInit+0xac>)
 800a38a:	699b      	ldr	r3, [r3, #24]
 800a38c:	f003 0310 	and.w	r3, r3, #16
 800a390:	60fb      	str	r3, [r7, #12]
 800a392:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800a394:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 800a398:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a39a:	2300      	movs	r3, #0
 800a39c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a39e:	2300      	movs	r3, #0
 800a3a0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a3a2:	f107 0318 	add.w	r3, r7, #24
 800a3a6:	4619      	mov	r1, r3
 800a3a8:	480a      	ldr	r0, [pc, #40]	@ (800a3d4 <HAL_TIM_Base_MspInit+0xb4>)
 800a3aa:	f000 fffb 	bl	800b3a4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	2100      	movs	r1, #0
 800a3b2:	202e      	movs	r0, #46	@ 0x2e
 800a3b4:	f000 fb3b 	bl	800aa2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 800a3b8:	202e      	movs	r0, #46	@ 0x2e
 800a3ba:	f000 fb54 	bl	800aa66 <HAL_NVIC_EnableIRQ>
}
 800a3be:	bf00      	nop
 800a3c0:	3728      	adds	r7, #40	@ 0x28
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	bd80      	pop	{r7, pc}
 800a3c6:	bf00      	nop
 800a3c8:	40012c00 	.word	0x40012c00
 800a3cc:	40021000 	.word	0x40021000
 800a3d0:	40013400 	.word	0x40013400
 800a3d4:	40011000 	.word	0x40011000

0800a3d8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b088      	sub	sp, #32
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a3e0:	f107 0310 	add.w	r3, r7, #16
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	601a      	str	r2, [r3, #0]
 800a3e8:	605a      	str	r2, [r3, #4]
 800a3ea:	609a      	str	r2, [r3, #8]
 800a3ec:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	4a10      	ldr	r2, [pc, #64]	@ (800a434 <HAL_TIM_MspPostInit+0x5c>)
 800a3f4:	4293      	cmp	r3, r2
 800a3f6:	d118      	bne.n	800a42a <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a3f8:	4b0f      	ldr	r3, [pc, #60]	@ (800a438 <HAL_TIM_MspPostInit+0x60>)
 800a3fa:	699b      	ldr	r3, [r3, #24]
 800a3fc:	4a0e      	ldr	r2, [pc, #56]	@ (800a438 <HAL_TIM_MspPostInit+0x60>)
 800a3fe:	f043 0304 	orr.w	r3, r3, #4
 800a402:	6193      	str	r3, [r2, #24]
 800a404:	4b0c      	ldr	r3, [pc, #48]	@ (800a438 <HAL_TIM_MspPostInit+0x60>)
 800a406:	699b      	ldr	r3, [r3, #24]
 800a408:	f003 0304 	and.w	r3, r3, #4
 800a40c:	60fb      	str	r3, [r7, #12]
 800a40e:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800a410:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 800a414:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a416:	2302      	movs	r3, #2
 800a418:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a41a:	2302      	movs	r3, #2
 800a41c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a41e:	f107 0310 	add.w	r3, r7, #16
 800a422:	4619      	mov	r1, r3
 800a424:	4805      	ldr	r0, [pc, #20]	@ (800a43c <HAL_TIM_MspPostInit+0x64>)
 800a426:	f000 ffbd 	bl	800b3a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800a42a:	bf00      	nop
 800a42c:	3720      	adds	r7, #32
 800a42e:	46bd      	mov	sp, r7
 800a430:	bd80      	pop	{r7, pc}
 800a432:	bf00      	nop
 800a434:	40012c00 	.word	0x40012c00
 800a438:	40021000 	.word	0x40021000
 800a43c:	40010800 	.word	0x40010800

0800a440 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b08a      	sub	sp, #40	@ 0x28
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a448:	f107 0314 	add.w	r3, r7, #20
 800a44c:	2200      	movs	r2, #0
 800a44e:	601a      	str	r2, [r3, #0]
 800a450:	605a      	str	r2, [r3, #4]
 800a452:	609a      	str	r2, [r3, #8]
 800a454:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	4a4e      	ldr	r2, [pc, #312]	@ (800a594 <HAL_UART_MspInit+0x154>)
 800a45c:	4293      	cmp	r3, r2
 800a45e:	f040 8094 	bne.w	800a58a <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800a462:	4b4d      	ldr	r3, [pc, #308]	@ (800a598 <HAL_UART_MspInit+0x158>)
 800a464:	699b      	ldr	r3, [r3, #24]
 800a466:	4a4c      	ldr	r2, [pc, #304]	@ (800a598 <HAL_UART_MspInit+0x158>)
 800a468:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a46c:	6193      	str	r3, [r2, #24]
 800a46e:	4b4a      	ldr	r3, [pc, #296]	@ (800a598 <HAL_UART_MspInit+0x158>)
 800a470:	699b      	ldr	r3, [r3, #24]
 800a472:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a476:	613b      	str	r3, [r7, #16]
 800a478:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a47a:	4b47      	ldr	r3, [pc, #284]	@ (800a598 <HAL_UART_MspInit+0x158>)
 800a47c:	699b      	ldr	r3, [r3, #24]
 800a47e:	4a46      	ldr	r2, [pc, #280]	@ (800a598 <HAL_UART_MspInit+0x158>)
 800a480:	f043 0308 	orr.w	r3, r3, #8
 800a484:	6193      	str	r3, [r2, #24]
 800a486:	4b44      	ldr	r3, [pc, #272]	@ (800a598 <HAL_UART_MspInit+0x158>)
 800a488:	699b      	ldr	r3, [r3, #24]
 800a48a:	f003 0308 	and.w	r3, r3, #8
 800a48e:	60fb      	str	r3, [r7, #12]
 800a490:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800a492:	2340      	movs	r3, #64	@ 0x40
 800a494:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a496:	2302      	movs	r3, #2
 800a498:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800a49a:	2303      	movs	r3, #3
 800a49c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a49e:	f107 0314 	add.w	r3, r7, #20
 800a4a2:	4619      	mov	r1, r3
 800a4a4:	483d      	ldr	r0, [pc, #244]	@ (800a59c <HAL_UART_MspInit+0x15c>)
 800a4a6:	f000 ff7d 	bl	800b3a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800a4aa:	2380      	movs	r3, #128	@ 0x80
 800a4ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a4b6:	f107 0314 	add.w	r3, r7, #20
 800a4ba:	4619      	mov	r1, r3
 800a4bc:	4837      	ldr	r0, [pc, #220]	@ (800a59c <HAL_UART_MspInit+0x15c>)
 800a4be:	f000 ff71 	bl	800b3a4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 800a4c2:	4b37      	ldr	r3, [pc, #220]	@ (800a5a0 <HAL_UART_MspInit+0x160>)
 800a4c4:	685b      	ldr	r3, [r3, #4]
 800a4c6:	627b      	str	r3, [r7, #36]	@ 0x24
 800a4c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4ca:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800a4ce:	627b      	str	r3, [r7, #36]	@ 0x24
 800a4d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4d2:	f043 0304 	orr.w	r3, r3, #4
 800a4d6:	627b      	str	r3, [r7, #36]	@ 0x24
 800a4d8:	4a31      	ldr	r2, [pc, #196]	@ (800a5a0 <HAL_UART_MspInit+0x160>)
 800a4da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4dc:	6053      	str	r3, [r2, #4]

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800a4de:	4b31      	ldr	r3, [pc, #196]	@ (800a5a4 <HAL_UART_MspInit+0x164>)
 800a4e0:	4a31      	ldr	r2, [pc, #196]	@ (800a5a8 <HAL_UART_MspInit+0x168>)
 800a4e2:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a4e4:	4b2f      	ldr	r3, [pc, #188]	@ (800a5a4 <HAL_UART_MspInit+0x164>)
 800a4e6:	2210      	movs	r2, #16
 800a4e8:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a4ea:	4b2e      	ldr	r3, [pc, #184]	@ (800a5a4 <HAL_UART_MspInit+0x164>)
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800a4f0:	4b2c      	ldr	r3, [pc, #176]	@ (800a5a4 <HAL_UART_MspInit+0x164>)
 800a4f2:	2280      	movs	r2, #128	@ 0x80
 800a4f4:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a4f6:	4b2b      	ldr	r3, [pc, #172]	@ (800a5a4 <HAL_UART_MspInit+0x164>)
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a4fc:	4b29      	ldr	r3, [pc, #164]	@ (800a5a4 <HAL_UART_MspInit+0x164>)
 800a4fe:	2200      	movs	r2, #0
 800a500:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800a502:	4b28      	ldr	r3, [pc, #160]	@ (800a5a4 <HAL_UART_MspInit+0x164>)
 800a504:	2200      	movs	r2, #0
 800a506:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800a508:	4b26      	ldr	r3, [pc, #152]	@ (800a5a4 <HAL_UART_MspInit+0x164>)
 800a50a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800a50e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800a510:	4824      	ldr	r0, [pc, #144]	@ (800a5a4 <HAL_UART_MspInit+0x164>)
 800a512:	f000 fac3 	bl	800aa9c <HAL_DMA_Init>
 800a516:	4603      	mov	r3, r0
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d001      	beq.n	800a520 <HAL_UART_MspInit+0xe0>
    {
      Error_Handler();
 800a51c:	f7f7 fb14 	bl	8001b48 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	4a20      	ldr	r2, [pc, #128]	@ (800a5a4 <HAL_UART_MspInit+0x164>)
 800a524:	639a      	str	r2, [r3, #56]	@ 0x38
 800a526:	4a1f      	ldr	r2, [pc, #124]	@ (800a5a4 <HAL_UART_MspInit+0x164>)
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800a52c:	4b1f      	ldr	r3, [pc, #124]	@ (800a5ac <HAL_UART_MspInit+0x16c>)
 800a52e:	4a20      	ldr	r2, [pc, #128]	@ (800a5b0 <HAL_UART_MspInit+0x170>)
 800a530:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a532:	4b1e      	ldr	r3, [pc, #120]	@ (800a5ac <HAL_UART_MspInit+0x16c>)
 800a534:	2200      	movs	r2, #0
 800a536:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a538:	4b1c      	ldr	r3, [pc, #112]	@ (800a5ac <HAL_UART_MspInit+0x16c>)
 800a53a:	2200      	movs	r2, #0
 800a53c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800a53e:	4b1b      	ldr	r3, [pc, #108]	@ (800a5ac <HAL_UART_MspInit+0x16c>)
 800a540:	2280      	movs	r2, #128	@ 0x80
 800a542:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a544:	4b19      	ldr	r3, [pc, #100]	@ (800a5ac <HAL_UART_MspInit+0x16c>)
 800a546:	2200      	movs	r2, #0
 800a548:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a54a:	4b18      	ldr	r3, [pc, #96]	@ (800a5ac <HAL_UART_MspInit+0x16c>)
 800a54c:	2200      	movs	r2, #0
 800a54e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800a550:	4b16      	ldr	r3, [pc, #88]	@ (800a5ac <HAL_UART_MspInit+0x16c>)
 800a552:	2200      	movs	r2, #0
 800a554:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800a556:	4b15      	ldr	r3, [pc, #84]	@ (800a5ac <HAL_UART_MspInit+0x16c>)
 800a558:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800a55c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800a55e:	4813      	ldr	r0, [pc, #76]	@ (800a5ac <HAL_UART_MspInit+0x16c>)
 800a560:	f000 fa9c 	bl	800aa9c <HAL_DMA_Init>
 800a564:	4603      	mov	r3, r0
 800a566:	2b00      	cmp	r3, #0
 800a568:	d001      	beq.n	800a56e <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 800a56a:	f7f7 faed 	bl	8001b48 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	4a0e      	ldr	r2, [pc, #56]	@ (800a5ac <HAL_UART_MspInit+0x16c>)
 800a572:	63da      	str	r2, [r3, #60]	@ 0x3c
 800a574:	4a0d      	ldr	r2, [pc, #52]	@ (800a5ac <HAL_UART_MspInit+0x16c>)
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800a57a:	2200      	movs	r2, #0
 800a57c:	2100      	movs	r1, #0
 800a57e:	2025      	movs	r0, #37	@ 0x25
 800a580:	f000 fa55 	bl	800aa2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800a584:	2025      	movs	r0, #37	@ 0x25
 800a586:	f000 fa6e 	bl	800aa66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800a58a:	bf00      	nop
 800a58c:	3728      	adds	r7, #40	@ 0x28
 800a58e:	46bd      	mov	sp, r7
 800a590:	bd80      	pop	{r7, pc}
 800a592:	bf00      	nop
 800a594:	40013800 	.word	0x40013800
 800a598:	40021000 	.word	0x40021000
 800a59c:	40010c00 	.word	0x40010c00
 800a5a0:	40010000 	.word	0x40010000
 800a5a4:	200001dc 	.word	0x200001dc
 800a5a8:	40020044 	.word	0x40020044
 800a5ac:	20000220 	.word	0x20000220
 800a5b0:	40020058 	.word	0x40020058

0800a5b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a5b4:	b480      	push	{r7}
 800a5b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800a5b8:	bf00      	nop
 800a5ba:	e7fd      	b.n	800a5b8 <NMI_Handler+0x4>

0800a5bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a5bc:	b480      	push	{r7}
 800a5be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800a5c0:	bf00      	nop
 800a5c2:	e7fd      	b.n	800a5c0 <HardFault_Handler+0x4>

0800a5c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a5c4:	b480      	push	{r7}
 800a5c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800a5c8:	bf00      	nop
 800a5ca:	e7fd      	b.n	800a5c8 <MemManage_Handler+0x4>

0800a5cc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a5cc:	b480      	push	{r7}
 800a5ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800a5d0:	bf00      	nop
 800a5d2:	e7fd      	b.n	800a5d0 <BusFault_Handler+0x4>

0800a5d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a5d4:	b480      	push	{r7}
 800a5d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800a5d8:	bf00      	nop
 800a5da:	e7fd      	b.n	800a5d8 <UsageFault_Handler+0x4>

0800a5dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800a5dc:	b480      	push	{r7}
 800a5de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800a5e0:	bf00      	nop
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	bc80      	pop	{r7}
 800a5e6:	4770      	bx	lr

0800a5e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800a5e8:	b480      	push	{r7}
 800a5ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800a5ec:	bf00      	nop
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	bc80      	pop	{r7}
 800a5f2:	4770      	bx	lr

0800a5f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800a5f4:	b480      	push	{r7}
 800a5f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800a5f8:	bf00      	nop
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	bc80      	pop	{r7}
 800a5fe:	4770      	bx	lr

0800a600 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800a600:	b580      	push	{r7, lr}
 800a602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800a604:	f000 f920 	bl	800a848 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800a608:	bf00      	nop
 800a60a:	bd80      	pop	{r7, pc}

0800a60c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800a610:	4802      	ldr	r0, [pc, #8]	@ (800a61c <DMA1_Channel4_IRQHandler+0x10>)
 800a612:	f000 fc5d 	bl	800aed0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800a616:	bf00      	nop
 800a618:	bd80      	pop	{r7, pc}
 800a61a:	bf00      	nop
 800a61c:	200001dc 	.word	0x200001dc

0800a620 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800a620:	b580      	push	{r7, lr}
 800a622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800a624:	4802      	ldr	r0, [pc, #8]	@ (800a630 <DMA1_Channel5_IRQHandler+0x10>)
 800a626:	f000 fc53 	bl	800aed0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800a62a:	bf00      	nop
 800a62c:	bd80      	pop	{r7, pc}
 800a62e:	bf00      	nop
 800a630:	20000220 	.word	0x20000220

0800a634 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800a634:	b580      	push	{r7, lr}
 800a636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart_rosserial);
 800a638:	4802      	ldr	r0, [pc, #8]	@ (800a644 <USART1_IRQHandler+0x10>)
 800a63a:	f003 f989 	bl	800d950 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800a63e:	bf00      	nop
 800a640:	bd80      	pop	{r7, pc}
 800a642:	bf00      	nop
 800a644:	20000194 	.word	0x20000194

0800a648 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim_encoder);
 800a64c:	4802      	ldr	r0, [pc, #8]	@ (800a658 <TIM8_CC_IRQHandler+0x10>)
 800a64e:	f002 f87d 	bl	800c74c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 800a652:	bf00      	nop
 800a654:	bd80      	pop	{r7, pc}
 800a656:	bf00      	nop
 800a658:	2000014c 	.word	0x2000014c

0800a65c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800a65c:	b480      	push	{r7}
 800a65e:	af00      	add	r7, sp, #0
  return 1;
 800a660:	2301      	movs	r3, #1
}
 800a662:	4618      	mov	r0, r3
 800a664:	46bd      	mov	sp, r7
 800a666:	bc80      	pop	{r7}
 800a668:	4770      	bx	lr

0800a66a <_kill>:

int _kill(int pid, int sig)
{
 800a66a:	b580      	push	{r7, lr}
 800a66c:	b082      	sub	sp, #8
 800a66e:	af00      	add	r7, sp, #0
 800a670:	6078      	str	r0, [r7, #4]
 800a672:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800a674:	f006 f80a 	bl	801068c <__errno>
 800a678:	4603      	mov	r3, r0
 800a67a:	2216      	movs	r2, #22
 800a67c:	601a      	str	r2, [r3, #0]
  return -1;
 800a67e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a682:	4618      	mov	r0, r3
 800a684:	3708      	adds	r7, #8
 800a686:	46bd      	mov	sp, r7
 800a688:	bd80      	pop	{r7, pc}

0800a68a <_exit>:

void _exit (int status)
{
 800a68a:	b580      	push	{r7, lr}
 800a68c:	b082      	sub	sp, #8
 800a68e:	af00      	add	r7, sp, #0
 800a690:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800a692:	f04f 31ff 	mov.w	r1, #4294967295
 800a696:	6878      	ldr	r0, [r7, #4]
 800a698:	f7ff ffe7 	bl	800a66a <_kill>
  while (1) {}    /* Make sure we hang here */
 800a69c:	bf00      	nop
 800a69e:	e7fd      	b.n	800a69c <_exit+0x12>

0800a6a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b086      	sub	sp, #24
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800a6a8:	4a14      	ldr	r2, [pc, #80]	@ (800a6fc <_sbrk+0x5c>)
 800a6aa:	4b15      	ldr	r3, [pc, #84]	@ (800a700 <_sbrk+0x60>)
 800a6ac:	1ad3      	subs	r3, r2, r3
 800a6ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800a6b0:	697b      	ldr	r3, [r7, #20]
 800a6b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800a6b4:	4b13      	ldr	r3, [pc, #76]	@ (800a704 <_sbrk+0x64>)
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d102      	bne.n	800a6c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800a6bc:	4b11      	ldr	r3, [pc, #68]	@ (800a704 <_sbrk+0x64>)
 800a6be:	4a12      	ldr	r2, [pc, #72]	@ (800a708 <_sbrk+0x68>)
 800a6c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800a6c2:	4b10      	ldr	r3, [pc, #64]	@ (800a704 <_sbrk+0x64>)
 800a6c4:	681a      	ldr	r2, [r3, #0]
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	4413      	add	r3, r2
 800a6ca:	693a      	ldr	r2, [r7, #16]
 800a6cc:	429a      	cmp	r2, r3
 800a6ce:	d207      	bcs.n	800a6e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800a6d0:	f005 ffdc 	bl	801068c <__errno>
 800a6d4:	4603      	mov	r3, r0
 800a6d6:	220c      	movs	r2, #12
 800a6d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800a6da:	f04f 33ff 	mov.w	r3, #4294967295
 800a6de:	e009      	b.n	800a6f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800a6e0:	4b08      	ldr	r3, [pc, #32]	@ (800a704 <_sbrk+0x64>)
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800a6e6:	4b07      	ldr	r3, [pc, #28]	@ (800a704 <_sbrk+0x64>)
 800a6e8:	681a      	ldr	r2, [r3, #0]
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	4413      	add	r3, r2
 800a6ee:	4a05      	ldr	r2, [pc, #20]	@ (800a704 <_sbrk+0x64>)
 800a6f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800a6f2:	68fb      	ldr	r3, [r7, #12]
}
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	3718      	adds	r7, #24
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	bd80      	pop	{r7, pc}
 800a6fc:	2000c000 	.word	0x2000c000
 800a700:	00000400 	.word	0x00000400
 800a704:	20008a1c 	.word	0x20008a1c
 800a708:	20008b70 	.word	0x20008b70

0800a70c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800a70c:	b480      	push	{r7}
 800a70e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800a710:	bf00      	nop
 800a712:	46bd      	mov	sp, r7
 800a714:	bc80      	pop	{r7}
 800a716:	4770      	bx	lr

0800a718 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 800a718:	b480      	push	{r7}
 800a71a:	b085      	sub	sp, #20
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
 800a720:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800a722:	683b      	ldr	r3, [r7, #0]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	0a5a      	lsrs	r2, r3, #9
 800a728:	490f      	ldr	r1, [pc, #60]	@ (800a768 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800a72a:	fba1 1202 	umull	r1, r2, r1, r2
 800a72e:	09d2      	lsrs	r2, r2, #7
 800a730:	490e      	ldr	r1, [pc, #56]	@ (800a76c <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800a732:	fb01 f202 	mul.w	r2, r1, r2
 800a736:	1a9b      	subs	r3, r3, r2
 800a738:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 800a73a:	683b      	ldr	r3, [r7, #0]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	0a5b      	lsrs	r3, r3, #9
 800a740:	4a09      	ldr	r2, [pc, #36]	@ (800a768 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800a742:	fba2 2303 	umull	r2, r3, r2, r3
 800a746:	09db      	lsrs	r3, r3, #7
 800a748:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681a      	ldr	r2, [r3, #0]
 800a74e:	68bb      	ldr	r3, [r7, #8]
 800a750:	441a      	add	r2, r3
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 800a756:	683b      	ldr	r3, [r7, #0]
 800a758:	68fa      	ldr	r2, [r7, #12]
 800a75a:	601a      	str	r2, [r3, #0]
}
 800a75c:	bf00      	nop
 800a75e:	3714      	adds	r7, #20
 800a760:	46bd      	mov	sp, r7
 800a762:	bc80      	pop	{r7}
 800a764:	4770      	bx	lr
 800a766:	bf00      	nop
 800a768:	00044b83 	.word	0x00044b83
 800a76c:	3b9aca00 	.word	0x3b9aca00

0800a770 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800a770:	f7ff ffcc 	bl	800a70c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800a774:	480b      	ldr	r0, [pc, #44]	@ (800a7a4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800a776:	490c      	ldr	r1, [pc, #48]	@ (800a7a8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800a778:	4a0c      	ldr	r2, [pc, #48]	@ (800a7ac <LoopFillZerobss+0x16>)
  movs r3, #0
 800a77a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800a77c:	e002      	b.n	800a784 <LoopCopyDataInit>

0800a77e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800a77e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800a780:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800a782:	3304      	adds	r3, #4

0800a784 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800a784:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800a786:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800a788:	d3f9      	bcc.n	800a77e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800a78a:	4a09      	ldr	r2, [pc, #36]	@ (800a7b0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800a78c:	4c09      	ldr	r4, [pc, #36]	@ (800a7b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800a78e:	2300      	movs	r3, #0
  b LoopFillZerobss
 800a790:	e001      	b.n	800a796 <LoopFillZerobss>

0800a792 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800a792:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800a794:	3204      	adds	r2, #4

0800a796 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800a796:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800a798:	d3fb      	bcc.n	800a792 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800a79a:	f005 ff7d 	bl	8010698 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800a79e:	f7f6 ff49 	bl	8001634 <main>
  bx lr
 800a7a2:	4770      	bx	lr
  ldr r0, =_sdata
 800a7a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800a7a8:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 800a7ac:	080115b4 	.word	0x080115b4
  ldr r2, =_sbss
 800a7b0:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 800a7b4:	20008b70 	.word	0x20008b70

0800a7b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800a7b8:	e7fe      	b.n	800a7b8 <ADC1_2_IRQHandler>
	...

0800a7bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800a7c0:	4b08      	ldr	r3, [pc, #32]	@ (800a7e4 <HAL_Init+0x28>)
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	4a07      	ldr	r2, [pc, #28]	@ (800a7e4 <HAL_Init+0x28>)
 800a7c6:	f043 0310 	orr.w	r3, r3, #16
 800a7ca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a7cc:	2003      	movs	r0, #3
 800a7ce:	f000 f923 	bl	800aa18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800a7d2:	200f      	movs	r0, #15
 800a7d4:	f000 f808 	bl	800a7e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800a7d8:	f7ff fd20 	bl	800a21c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800a7dc:	2300      	movs	r3, #0
}
 800a7de:	4618      	mov	r0, r3
 800a7e0:	bd80      	pop	{r7, pc}
 800a7e2:	bf00      	nop
 800a7e4:	40022000 	.word	0x40022000

0800a7e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b082      	sub	sp, #8
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800a7f0:	4b12      	ldr	r3, [pc, #72]	@ (800a83c <HAL_InitTick+0x54>)
 800a7f2:	681a      	ldr	r2, [r3, #0]
 800a7f4:	4b12      	ldr	r3, [pc, #72]	@ (800a840 <HAL_InitTick+0x58>)
 800a7f6:	781b      	ldrb	r3, [r3, #0]
 800a7f8:	4619      	mov	r1, r3
 800a7fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800a7fe:	fbb3 f3f1 	udiv	r3, r3, r1
 800a802:	fbb2 f3f3 	udiv	r3, r2, r3
 800a806:	4618      	mov	r0, r3
 800a808:	f000 f93b 	bl	800aa82 <HAL_SYSTICK_Config>
 800a80c:	4603      	mov	r3, r0
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d001      	beq.n	800a816 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800a812:	2301      	movs	r3, #1
 800a814:	e00e      	b.n	800a834 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	2b0f      	cmp	r3, #15
 800a81a:	d80a      	bhi.n	800a832 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800a81c:	2200      	movs	r2, #0
 800a81e:	6879      	ldr	r1, [r7, #4]
 800a820:	f04f 30ff 	mov.w	r0, #4294967295
 800a824:	f000 f903 	bl	800aa2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800a828:	4a06      	ldr	r2, [pc, #24]	@ (800a844 <HAL_InitTick+0x5c>)
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800a82e:	2300      	movs	r3, #0
 800a830:	e000      	b.n	800a834 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800a832:	2301      	movs	r3, #1
}
 800a834:	4618      	mov	r0, r3
 800a836:	3708      	adds	r7, #8
 800a838:	46bd      	mov	sp, r7
 800a83a:	bd80      	pop	{r7, pc}
 800a83c:	20000034 	.word	0x20000034
 800a840:	2000003c 	.word	0x2000003c
 800a844:	20000038 	.word	0x20000038

0800a848 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800a848:	b480      	push	{r7}
 800a84a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800a84c:	4b05      	ldr	r3, [pc, #20]	@ (800a864 <HAL_IncTick+0x1c>)
 800a84e:	781b      	ldrb	r3, [r3, #0]
 800a850:	461a      	mov	r2, r3
 800a852:	4b05      	ldr	r3, [pc, #20]	@ (800a868 <HAL_IncTick+0x20>)
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	4413      	add	r3, r2
 800a858:	4a03      	ldr	r2, [pc, #12]	@ (800a868 <HAL_IncTick+0x20>)
 800a85a:	6013      	str	r3, [r2, #0]
}
 800a85c:	bf00      	nop
 800a85e:	46bd      	mov	sp, r7
 800a860:	bc80      	pop	{r7}
 800a862:	4770      	bx	lr
 800a864:	2000003c 	.word	0x2000003c
 800a868:	20008a20 	.word	0x20008a20

0800a86c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800a86c:	b480      	push	{r7}
 800a86e:	af00      	add	r7, sp, #0
  return uwTick;
 800a870:	4b02      	ldr	r3, [pc, #8]	@ (800a87c <HAL_GetTick+0x10>)
 800a872:	681b      	ldr	r3, [r3, #0]
}
 800a874:	4618      	mov	r0, r3
 800a876:	46bd      	mov	sp, r7
 800a878:	bc80      	pop	{r7}
 800a87a:	4770      	bx	lr
 800a87c:	20008a20 	.word	0x20008a20

0800a880 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a880:	b480      	push	{r7}
 800a882:	b085      	sub	sp, #20
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	f003 0307 	and.w	r3, r3, #7
 800a88e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a890:	4b0c      	ldr	r3, [pc, #48]	@ (800a8c4 <__NVIC_SetPriorityGrouping+0x44>)
 800a892:	68db      	ldr	r3, [r3, #12]
 800a894:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a896:	68ba      	ldr	r2, [r7, #8]
 800a898:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800a89c:	4013      	ands	r3, r2
 800a89e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a8a4:	68bb      	ldr	r3, [r7, #8]
 800a8a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a8a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800a8ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a8b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a8b2:	4a04      	ldr	r2, [pc, #16]	@ (800a8c4 <__NVIC_SetPriorityGrouping+0x44>)
 800a8b4:	68bb      	ldr	r3, [r7, #8]
 800a8b6:	60d3      	str	r3, [r2, #12]
}
 800a8b8:	bf00      	nop
 800a8ba:	3714      	adds	r7, #20
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	bc80      	pop	{r7}
 800a8c0:	4770      	bx	lr
 800a8c2:	bf00      	nop
 800a8c4:	e000ed00 	.word	0xe000ed00

0800a8c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a8c8:	b480      	push	{r7}
 800a8ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a8cc:	4b04      	ldr	r3, [pc, #16]	@ (800a8e0 <__NVIC_GetPriorityGrouping+0x18>)
 800a8ce:	68db      	ldr	r3, [r3, #12]
 800a8d0:	0a1b      	lsrs	r3, r3, #8
 800a8d2:	f003 0307 	and.w	r3, r3, #7
}
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	bc80      	pop	{r7}
 800a8dc:	4770      	bx	lr
 800a8de:	bf00      	nop
 800a8e0:	e000ed00 	.word	0xe000ed00

0800a8e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a8e4:	b480      	push	{r7}
 800a8e6:	b083      	sub	sp, #12
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	4603      	mov	r3, r0
 800a8ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a8ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	db0b      	blt.n	800a90e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a8f6:	79fb      	ldrb	r3, [r7, #7]
 800a8f8:	f003 021f 	and.w	r2, r3, #31
 800a8fc:	4906      	ldr	r1, [pc, #24]	@ (800a918 <__NVIC_EnableIRQ+0x34>)
 800a8fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a902:	095b      	lsrs	r3, r3, #5
 800a904:	2001      	movs	r0, #1
 800a906:	fa00 f202 	lsl.w	r2, r0, r2
 800a90a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800a90e:	bf00      	nop
 800a910:	370c      	adds	r7, #12
 800a912:	46bd      	mov	sp, r7
 800a914:	bc80      	pop	{r7}
 800a916:	4770      	bx	lr
 800a918:	e000e100 	.word	0xe000e100

0800a91c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a91c:	b480      	push	{r7}
 800a91e:	b083      	sub	sp, #12
 800a920:	af00      	add	r7, sp, #0
 800a922:	4603      	mov	r3, r0
 800a924:	6039      	str	r1, [r7, #0]
 800a926:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a928:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	db0a      	blt.n	800a946 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a930:	683b      	ldr	r3, [r7, #0]
 800a932:	b2da      	uxtb	r2, r3
 800a934:	490c      	ldr	r1, [pc, #48]	@ (800a968 <__NVIC_SetPriority+0x4c>)
 800a936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a93a:	0112      	lsls	r2, r2, #4
 800a93c:	b2d2      	uxtb	r2, r2
 800a93e:	440b      	add	r3, r1
 800a940:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a944:	e00a      	b.n	800a95c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a946:	683b      	ldr	r3, [r7, #0]
 800a948:	b2da      	uxtb	r2, r3
 800a94a:	4908      	ldr	r1, [pc, #32]	@ (800a96c <__NVIC_SetPriority+0x50>)
 800a94c:	79fb      	ldrb	r3, [r7, #7]
 800a94e:	f003 030f 	and.w	r3, r3, #15
 800a952:	3b04      	subs	r3, #4
 800a954:	0112      	lsls	r2, r2, #4
 800a956:	b2d2      	uxtb	r2, r2
 800a958:	440b      	add	r3, r1
 800a95a:	761a      	strb	r2, [r3, #24]
}
 800a95c:	bf00      	nop
 800a95e:	370c      	adds	r7, #12
 800a960:	46bd      	mov	sp, r7
 800a962:	bc80      	pop	{r7}
 800a964:	4770      	bx	lr
 800a966:	bf00      	nop
 800a968:	e000e100 	.word	0xe000e100
 800a96c:	e000ed00 	.word	0xe000ed00

0800a970 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a970:	b480      	push	{r7}
 800a972:	b089      	sub	sp, #36	@ 0x24
 800a974:	af00      	add	r7, sp, #0
 800a976:	60f8      	str	r0, [r7, #12]
 800a978:	60b9      	str	r1, [r7, #8]
 800a97a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	f003 0307 	and.w	r3, r3, #7
 800a982:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a984:	69fb      	ldr	r3, [r7, #28]
 800a986:	f1c3 0307 	rsb	r3, r3, #7
 800a98a:	2b04      	cmp	r3, #4
 800a98c:	bf28      	it	cs
 800a98e:	2304      	movcs	r3, #4
 800a990:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a992:	69fb      	ldr	r3, [r7, #28]
 800a994:	3304      	adds	r3, #4
 800a996:	2b06      	cmp	r3, #6
 800a998:	d902      	bls.n	800a9a0 <NVIC_EncodePriority+0x30>
 800a99a:	69fb      	ldr	r3, [r7, #28]
 800a99c:	3b03      	subs	r3, #3
 800a99e:	e000      	b.n	800a9a2 <NVIC_EncodePriority+0x32>
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a9a4:	f04f 32ff 	mov.w	r2, #4294967295
 800a9a8:	69bb      	ldr	r3, [r7, #24]
 800a9aa:	fa02 f303 	lsl.w	r3, r2, r3
 800a9ae:	43da      	mvns	r2, r3
 800a9b0:	68bb      	ldr	r3, [r7, #8]
 800a9b2:	401a      	ands	r2, r3
 800a9b4:	697b      	ldr	r3, [r7, #20]
 800a9b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a9b8:	f04f 31ff 	mov.w	r1, #4294967295
 800a9bc:	697b      	ldr	r3, [r7, #20]
 800a9be:	fa01 f303 	lsl.w	r3, r1, r3
 800a9c2:	43d9      	mvns	r1, r3
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a9c8:	4313      	orrs	r3, r2
         );
}
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	3724      	adds	r7, #36	@ 0x24
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	bc80      	pop	{r7}
 800a9d2:	4770      	bx	lr

0800a9d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b082      	sub	sp, #8
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	3b01      	subs	r3, #1
 800a9e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a9e4:	d301      	bcc.n	800a9ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a9e6:	2301      	movs	r3, #1
 800a9e8:	e00f      	b.n	800aa0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a9ea:	4a0a      	ldr	r2, [pc, #40]	@ (800aa14 <SysTick_Config+0x40>)
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	3b01      	subs	r3, #1
 800a9f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a9f2:	210f      	movs	r1, #15
 800a9f4:	f04f 30ff 	mov.w	r0, #4294967295
 800a9f8:	f7ff ff90 	bl	800a91c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a9fc:	4b05      	ldr	r3, [pc, #20]	@ (800aa14 <SysTick_Config+0x40>)
 800a9fe:	2200      	movs	r2, #0
 800aa00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800aa02:	4b04      	ldr	r3, [pc, #16]	@ (800aa14 <SysTick_Config+0x40>)
 800aa04:	2207      	movs	r2, #7
 800aa06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800aa08:	2300      	movs	r3, #0
}
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	3708      	adds	r7, #8
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	bd80      	pop	{r7, pc}
 800aa12:	bf00      	nop
 800aa14:	e000e010 	.word	0xe000e010

0800aa18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	b082      	sub	sp, #8
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800aa20:	6878      	ldr	r0, [r7, #4]
 800aa22:	f7ff ff2d 	bl	800a880 <__NVIC_SetPriorityGrouping>
}
 800aa26:	bf00      	nop
 800aa28:	3708      	adds	r7, #8
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	bd80      	pop	{r7, pc}

0800aa2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800aa2e:	b580      	push	{r7, lr}
 800aa30:	b086      	sub	sp, #24
 800aa32:	af00      	add	r7, sp, #0
 800aa34:	4603      	mov	r3, r0
 800aa36:	60b9      	str	r1, [r7, #8]
 800aa38:	607a      	str	r2, [r7, #4]
 800aa3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800aa40:	f7ff ff42 	bl	800a8c8 <__NVIC_GetPriorityGrouping>
 800aa44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800aa46:	687a      	ldr	r2, [r7, #4]
 800aa48:	68b9      	ldr	r1, [r7, #8]
 800aa4a:	6978      	ldr	r0, [r7, #20]
 800aa4c:	f7ff ff90 	bl	800a970 <NVIC_EncodePriority>
 800aa50:	4602      	mov	r2, r0
 800aa52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aa56:	4611      	mov	r1, r2
 800aa58:	4618      	mov	r0, r3
 800aa5a:	f7ff ff5f 	bl	800a91c <__NVIC_SetPriority>
}
 800aa5e:	bf00      	nop
 800aa60:	3718      	adds	r7, #24
 800aa62:	46bd      	mov	sp, r7
 800aa64:	bd80      	pop	{r7, pc}

0800aa66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800aa66:	b580      	push	{r7, lr}
 800aa68:	b082      	sub	sp, #8
 800aa6a:	af00      	add	r7, sp, #0
 800aa6c:	4603      	mov	r3, r0
 800aa6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800aa70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aa74:	4618      	mov	r0, r3
 800aa76:	f7ff ff35 	bl	800a8e4 <__NVIC_EnableIRQ>
}
 800aa7a:	bf00      	nop
 800aa7c:	3708      	adds	r7, #8
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	bd80      	pop	{r7, pc}

0800aa82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800aa82:	b580      	push	{r7, lr}
 800aa84:	b082      	sub	sp, #8
 800aa86:	af00      	add	r7, sp, #0
 800aa88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800aa8a:	6878      	ldr	r0, [r7, #4]
 800aa8c:	f7ff ffa2 	bl	800a9d4 <SysTick_Config>
 800aa90:	4603      	mov	r3, r0
}
 800aa92:	4618      	mov	r0, r3
 800aa94:	3708      	adds	r7, #8
 800aa96:	46bd      	mov	sp, r7
 800aa98:	bd80      	pop	{r7, pc}
	...

0800aa9c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800aa9c:	b480      	push	{r7}
 800aa9e:	b085      	sub	sp, #20
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d101      	bne.n	800aab2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800aaae:	2301      	movs	r3, #1
 800aab0:	e059      	b.n	800ab66 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	461a      	mov	r2, r3
 800aab8:	4b2d      	ldr	r3, [pc, #180]	@ (800ab70 <HAL_DMA_Init+0xd4>)
 800aaba:	429a      	cmp	r2, r3
 800aabc:	d80f      	bhi.n	800aade <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	461a      	mov	r2, r3
 800aac4:	4b2b      	ldr	r3, [pc, #172]	@ (800ab74 <HAL_DMA_Init+0xd8>)
 800aac6:	4413      	add	r3, r2
 800aac8:	4a2b      	ldr	r2, [pc, #172]	@ (800ab78 <HAL_DMA_Init+0xdc>)
 800aaca:	fba2 2303 	umull	r2, r3, r2, r3
 800aace:	091b      	lsrs	r3, r3, #4
 800aad0:	009a      	lsls	r2, r3, #2
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	4a28      	ldr	r2, [pc, #160]	@ (800ab7c <HAL_DMA_Init+0xe0>)
 800aada:	63da      	str	r2, [r3, #60]	@ 0x3c
 800aadc:	e00e      	b.n	800aafc <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	461a      	mov	r2, r3
 800aae4:	4b26      	ldr	r3, [pc, #152]	@ (800ab80 <HAL_DMA_Init+0xe4>)
 800aae6:	4413      	add	r3, r2
 800aae8:	4a23      	ldr	r2, [pc, #140]	@ (800ab78 <HAL_DMA_Init+0xdc>)
 800aaea:	fba2 2303 	umull	r2, r3, r2, r3
 800aaee:	091b      	lsrs	r3, r3, #4
 800aaf0:	009a      	lsls	r2, r3, #2
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	4a22      	ldr	r2, [pc, #136]	@ (800ab84 <HAL_DMA_Init+0xe8>)
 800aafa:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	2202      	movs	r2, #2
 800ab00:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800ab12:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800ab16:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800ab20:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	68db      	ldr	r3, [r3, #12]
 800ab26:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ab2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	695b      	ldr	r3, [r3, #20]
 800ab32:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ab38:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	69db      	ldr	r3, [r3, #28]
 800ab3e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800ab40:	68fa      	ldr	r2, [r7, #12]
 800ab42:	4313      	orrs	r3, r2
 800ab44:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	68fa      	ldr	r2, [r7, #12]
 800ab4c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	2200      	movs	r2, #0
 800ab52:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	2201      	movs	r2, #1
 800ab58:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	2200      	movs	r2, #0
 800ab60:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800ab64:	2300      	movs	r3, #0
}
 800ab66:	4618      	mov	r0, r3
 800ab68:	3714      	adds	r7, #20
 800ab6a:	46bd      	mov	sp, r7
 800ab6c:	bc80      	pop	{r7}
 800ab6e:	4770      	bx	lr
 800ab70:	40020407 	.word	0x40020407
 800ab74:	bffdfff8 	.word	0xbffdfff8
 800ab78:	cccccccd 	.word	0xcccccccd
 800ab7c:	40020000 	.word	0x40020000
 800ab80:	bffdfbf8 	.word	0xbffdfbf8
 800ab84:	40020400 	.word	0x40020400

0800ab88 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	b086      	sub	sp, #24
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	60f8      	str	r0, [r7, #12]
 800ab90:	60b9      	str	r1, [r7, #8]
 800ab92:	607a      	str	r2, [r7, #4]
 800ab94:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ab96:	2300      	movs	r3, #0
 800ab98:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800aba0:	2b01      	cmp	r3, #1
 800aba2:	d101      	bne.n	800aba8 <HAL_DMA_Start_IT+0x20>
 800aba4:	2302      	movs	r3, #2
 800aba6:	e04b      	b.n	800ac40 <HAL_DMA_Start_IT+0xb8>
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	2201      	movs	r2, #1
 800abac:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800abb6:	b2db      	uxtb	r3, r3
 800abb8:	2b01      	cmp	r3, #1
 800abba:	d13a      	bne.n	800ac32 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	2202      	movs	r2, #2
 800abc0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	2200      	movs	r2, #0
 800abc8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	681a      	ldr	r2, [r3, #0]
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	f022 0201 	bic.w	r2, r2, #1
 800abd8:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	687a      	ldr	r2, [r7, #4]
 800abde:	68b9      	ldr	r1, [r7, #8]
 800abe0:	68f8      	ldr	r0, [r7, #12]
 800abe2:	f000 fbb1 	bl	800b348 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abea:	2b00      	cmp	r3, #0
 800abec:	d008      	beq.n	800ac00 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	681a      	ldr	r2, [r3, #0]
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	f042 020e 	orr.w	r2, r2, #14
 800abfc:	601a      	str	r2, [r3, #0]
 800abfe:	e00f      	b.n	800ac20 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	681a      	ldr	r2, [r3, #0]
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	f022 0204 	bic.w	r2, r2, #4
 800ac0e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	681a      	ldr	r2, [r3, #0]
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	f042 020a 	orr.w	r2, r2, #10
 800ac1e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	681a      	ldr	r2, [r3, #0]
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	f042 0201 	orr.w	r2, r2, #1
 800ac2e:	601a      	str	r2, [r3, #0]
 800ac30:	e005      	b.n	800ac3e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	2200      	movs	r2, #0
 800ac36:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800ac3a:	2302      	movs	r3, #2
 800ac3c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800ac3e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac40:	4618      	mov	r0, r3
 800ac42:	3718      	adds	r7, #24
 800ac44:	46bd      	mov	sp, r7
 800ac46:	bd80      	pop	{r7, pc}

0800ac48 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800ac48:	b480      	push	{r7}
 800ac4a:	b085      	sub	sp, #20
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ac50:	2300      	movs	r3, #0
 800ac52:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800ac5a:	b2db      	uxtb	r3, r3
 800ac5c:	2b02      	cmp	r3, #2
 800ac5e:	d008      	beq.n	800ac72 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	2204      	movs	r2, #4
 800ac64:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	2200      	movs	r2, #0
 800ac6a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800ac6e:	2301      	movs	r3, #1
 800ac70:	e020      	b.n	800acb4 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	681a      	ldr	r2, [r3, #0]
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	f022 020e 	bic.w	r2, r2, #14
 800ac80:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	681a      	ldr	r2, [r3, #0]
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	f022 0201 	bic.w	r2, r2, #1
 800ac90:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac9a:	2101      	movs	r1, #1
 800ac9c:	fa01 f202 	lsl.w	r2, r1, r2
 800aca0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	2201      	movs	r2, #1
 800aca6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	2200      	movs	r2, #0
 800acae:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800acb2:	7bfb      	ldrb	r3, [r7, #15]
}
 800acb4:	4618      	mov	r0, r3
 800acb6:	3714      	adds	r7, #20
 800acb8:	46bd      	mov	sp, r7
 800acba:	bc80      	pop	{r7}
 800acbc:	4770      	bx	lr
	...

0800acc0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b084      	sub	sp, #16
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800acc8:	2300      	movs	r3, #0
 800acca:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800acd2:	b2db      	uxtb	r3, r3
 800acd4:	2b02      	cmp	r3, #2
 800acd6:	d005      	beq.n	800ace4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	2204      	movs	r2, #4
 800acdc:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800acde:	2301      	movs	r3, #1
 800ace0:	73fb      	strb	r3, [r7, #15]
 800ace2:	e0d6      	b.n	800ae92 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	681a      	ldr	r2, [r3, #0]
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	f022 020e 	bic.w	r2, r2, #14
 800acf2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	681a      	ldr	r2, [r3, #0]
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	f022 0201 	bic.w	r2, r2, #1
 800ad02:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	461a      	mov	r2, r3
 800ad0a:	4b64      	ldr	r3, [pc, #400]	@ (800ae9c <HAL_DMA_Abort_IT+0x1dc>)
 800ad0c:	429a      	cmp	r2, r3
 800ad0e:	d958      	bls.n	800adc2 <HAL_DMA_Abort_IT+0x102>
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	4a62      	ldr	r2, [pc, #392]	@ (800aea0 <HAL_DMA_Abort_IT+0x1e0>)
 800ad16:	4293      	cmp	r3, r2
 800ad18:	d04f      	beq.n	800adba <HAL_DMA_Abort_IT+0xfa>
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	4a61      	ldr	r2, [pc, #388]	@ (800aea4 <HAL_DMA_Abort_IT+0x1e4>)
 800ad20:	4293      	cmp	r3, r2
 800ad22:	d048      	beq.n	800adb6 <HAL_DMA_Abort_IT+0xf6>
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	4a5f      	ldr	r2, [pc, #380]	@ (800aea8 <HAL_DMA_Abort_IT+0x1e8>)
 800ad2a:	4293      	cmp	r3, r2
 800ad2c:	d040      	beq.n	800adb0 <HAL_DMA_Abort_IT+0xf0>
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	4a5e      	ldr	r2, [pc, #376]	@ (800aeac <HAL_DMA_Abort_IT+0x1ec>)
 800ad34:	4293      	cmp	r3, r2
 800ad36:	d038      	beq.n	800adaa <HAL_DMA_Abort_IT+0xea>
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	4a5c      	ldr	r2, [pc, #368]	@ (800aeb0 <HAL_DMA_Abort_IT+0x1f0>)
 800ad3e:	4293      	cmp	r3, r2
 800ad40:	d030      	beq.n	800ada4 <HAL_DMA_Abort_IT+0xe4>
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	4a5b      	ldr	r2, [pc, #364]	@ (800aeb4 <HAL_DMA_Abort_IT+0x1f4>)
 800ad48:	4293      	cmp	r3, r2
 800ad4a:	d028      	beq.n	800ad9e <HAL_DMA_Abort_IT+0xde>
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	4a52      	ldr	r2, [pc, #328]	@ (800ae9c <HAL_DMA_Abort_IT+0x1dc>)
 800ad52:	4293      	cmp	r3, r2
 800ad54:	d020      	beq.n	800ad98 <HAL_DMA_Abort_IT+0xd8>
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	4a57      	ldr	r2, [pc, #348]	@ (800aeb8 <HAL_DMA_Abort_IT+0x1f8>)
 800ad5c:	4293      	cmp	r3, r2
 800ad5e:	d019      	beq.n	800ad94 <HAL_DMA_Abort_IT+0xd4>
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	4a55      	ldr	r2, [pc, #340]	@ (800aebc <HAL_DMA_Abort_IT+0x1fc>)
 800ad66:	4293      	cmp	r3, r2
 800ad68:	d012      	beq.n	800ad90 <HAL_DMA_Abort_IT+0xd0>
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	4a54      	ldr	r2, [pc, #336]	@ (800aec0 <HAL_DMA_Abort_IT+0x200>)
 800ad70:	4293      	cmp	r3, r2
 800ad72:	d00a      	beq.n	800ad8a <HAL_DMA_Abort_IT+0xca>
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	4a52      	ldr	r2, [pc, #328]	@ (800aec4 <HAL_DMA_Abort_IT+0x204>)
 800ad7a:	4293      	cmp	r3, r2
 800ad7c:	d102      	bne.n	800ad84 <HAL_DMA_Abort_IT+0xc4>
 800ad7e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ad82:	e01b      	b.n	800adbc <HAL_DMA_Abort_IT+0xfc>
 800ad84:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800ad88:	e018      	b.n	800adbc <HAL_DMA_Abort_IT+0xfc>
 800ad8a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ad8e:	e015      	b.n	800adbc <HAL_DMA_Abort_IT+0xfc>
 800ad90:	2310      	movs	r3, #16
 800ad92:	e013      	b.n	800adbc <HAL_DMA_Abort_IT+0xfc>
 800ad94:	2301      	movs	r3, #1
 800ad96:	e011      	b.n	800adbc <HAL_DMA_Abort_IT+0xfc>
 800ad98:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ad9c:	e00e      	b.n	800adbc <HAL_DMA_Abort_IT+0xfc>
 800ad9e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800ada2:	e00b      	b.n	800adbc <HAL_DMA_Abort_IT+0xfc>
 800ada4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800ada8:	e008      	b.n	800adbc <HAL_DMA_Abort_IT+0xfc>
 800adaa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800adae:	e005      	b.n	800adbc <HAL_DMA_Abort_IT+0xfc>
 800adb0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800adb4:	e002      	b.n	800adbc <HAL_DMA_Abort_IT+0xfc>
 800adb6:	2310      	movs	r3, #16
 800adb8:	e000      	b.n	800adbc <HAL_DMA_Abort_IT+0xfc>
 800adba:	2301      	movs	r3, #1
 800adbc:	4a42      	ldr	r2, [pc, #264]	@ (800aec8 <HAL_DMA_Abort_IT+0x208>)
 800adbe:	6053      	str	r3, [r2, #4]
 800adc0:	e057      	b.n	800ae72 <HAL_DMA_Abort_IT+0x1b2>
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	4a36      	ldr	r2, [pc, #216]	@ (800aea0 <HAL_DMA_Abort_IT+0x1e0>)
 800adc8:	4293      	cmp	r3, r2
 800adca:	d04f      	beq.n	800ae6c <HAL_DMA_Abort_IT+0x1ac>
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	4a34      	ldr	r2, [pc, #208]	@ (800aea4 <HAL_DMA_Abort_IT+0x1e4>)
 800add2:	4293      	cmp	r3, r2
 800add4:	d048      	beq.n	800ae68 <HAL_DMA_Abort_IT+0x1a8>
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	4a33      	ldr	r2, [pc, #204]	@ (800aea8 <HAL_DMA_Abort_IT+0x1e8>)
 800addc:	4293      	cmp	r3, r2
 800adde:	d040      	beq.n	800ae62 <HAL_DMA_Abort_IT+0x1a2>
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	4a31      	ldr	r2, [pc, #196]	@ (800aeac <HAL_DMA_Abort_IT+0x1ec>)
 800ade6:	4293      	cmp	r3, r2
 800ade8:	d038      	beq.n	800ae5c <HAL_DMA_Abort_IT+0x19c>
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	4a30      	ldr	r2, [pc, #192]	@ (800aeb0 <HAL_DMA_Abort_IT+0x1f0>)
 800adf0:	4293      	cmp	r3, r2
 800adf2:	d030      	beq.n	800ae56 <HAL_DMA_Abort_IT+0x196>
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	4a2e      	ldr	r2, [pc, #184]	@ (800aeb4 <HAL_DMA_Abort_IT+0x1f4>)
 800adfa:	4293      	cmp	r3, r2
 800adfc:	d028      	beq.n	800ae50 <HAL_DMA_Abort_IT+0x190>
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	4a26      	ldr	r2, [pc, #152]	@ (800ae9c <HAL_DMA_Abort_IT+0x1dc>)
 800ae04:	4293      	cmp	r3, r2
 800ae06:	d020      	beq.n	800ae4a <HAL_DMA_Abort_IT+0x18a>
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	4a2a      	ldr	r2, [pc, #168]	@ (800aeb8 <HAL_DMA_Abort_IT+0x1f8>)
 800ae0e:	4293      	cmp	r3, r2
 800ae10:	d019      	beq.n	800ae46 <HAL_DMA_Abort_IT+0x186>
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	4a29      	ldr	r2, [pc, #164]	@ (800aebc <HAL_DMA_Abort_IT+0x1fc>)
 800ae18:	4293      	cmp	r3, r2
 800ae1a:	d012      	beq.n	800ae42 <HAL_DMA_Abort_IT+0x182>
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	4a27      	ldr	r2, [pc, #156]	@ (800aec0 <HAL_DMA_Abort_IT+0x200>)
 800ae22:	4293      	cmp	r3, r2
 800ae24:	d00a      	beq.n	800ae3c <HAL_DMA_Abort_IT+0x17c>
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	4a26      	ldr	r2, [pc, #152]	@ (800aec4 <HAL_DMA_Abort_IT+0x204>)
 800ae2c:	4293      	cmp	r3, r2
 800ae2e:	d102      	bne.n	800ae36 <HAL_DMA_Abort_IT+0x176>
 800ae30:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ae34:	e01b      	b.n	800ae6e <HAL_DMA_Abort_IT+0x1ae>
 800ae36:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800ae3a:	e018      	b.n	800ae6e <HAL_DMA_Abort_IT+0x1ae>
 800ae3c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ae40:	e015      	b.n	800ae6e <HAL_DMA_Abort_IT+0x1ae>
 800ae42:	2310      	movs	r3, #16
 800ae44:	e013      	b.n	800ae6e <HAL_DMA_Abort_IT+0x1ae>
 800ae46:	2301      	movs	r3, #1
 800ae48:	e011      	b.n	800ae6e <HAL_DMA_Abort_IT+0x1ae>
 800ae4a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ae4e:	e00e      	b.n	800ae6e <HAL_DMA_Abort_IT+0x1ae>
 800ae50:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800ae54:	e00b      	b.n	800ae6e <HAL_DMA_Abort_IT+0x1ae>
 800ae56:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800ae5a:	e008      	b.n	800ae6e <HAL_DMA_Abort_IT+0x1ae>
 800ae5c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ae60:	e005      	b.n	800ae6e <HAL_DMA_Abort_IT+0x1ae>
 800ae62:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ae66:	e002      	b.n	800ae6e <HAL_DMA_Abort_IT+0x1ae>
 800ae68:	2310      	movs	r3, #16
 800ae6a:	e000      	b.n	800ae6e <HAL_DMA_Abort_IT+0x1ae>
 800ae6c:	2301      	movs	r3, #1
 800ae6e:	4a17      	ldr	r2, [pc, #92]	@ (800aecc <HAL_DMA_Abort_IT+0x20c>)
 800ae70:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	2201      	movs	r2, #1
 800ae76:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	2200      	movs	r2, #0
 800ae7e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d003      	beq.n	800ae92 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae8e:	6878      	ldr	r0, [r7, #4]
 800ae90:	4798      	blx	r3
    } 
  }
  return status;
 800ae92:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae94:	4618      	mov	r0, r3
 800ae96:	3710      	adds	r7, #16
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	bd80      	pop	{r7, pc}
 800ae9c:	40020080 	.word	0x40020080
 800aea0:	40020008 	.word	0x40020008
 800aea4:	4002001c 	.word	0x4002001c
 800aea8:	40020030 	.word	0x40020030
 800aeac:	40020044 	.word	0x40020044
 800aeb0:	40020058 	.word	0x40020058
 800aeb4:	4002006c 	.word	0x4002006c
 800aeb8:	40020408 	.word	0x40020408
 800aebc:	4002041c 	.word	0x4002041c
 800aec0:	40020430 	.word	0x40020430
 800aec4:	40020444 	.word	0x40020444
 800aec8:	40020400 	.word	0x40020400
 800aecc:	40020000 	.word	0x40020000

0800aed0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b084      	sub	sp, #16
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aeec:	2204      	movs	r2, #4
 800aeee:	409a      	lsls	r2, r3
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	4013      	ands	r3, r2
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	f000 80f1 	beq.w	800b0dc <HAL_DMA_IRQHandler+0x20c>
 800aefa:	68bb      	ldr	r3, [r7, #8]
 800aefc:	f003 0304 	and.w	r3, r3, #4
 800af00:	2b00      	cmp	r3, #0
 800af02:	f000 80eb 	beq.w	800b0dc <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	f003 0320 	and.w	r3, r3, #32
 800af10:	2b00      	cmp	r3, #0
 800af12:	d107      	bne.n	800af24 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	681a      	ldr	r2, [r3, #0]
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	f022 0204 	bic.w	r2, r2, #4
 800af22:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	461a      	mov	r2, r3
 800af2a:	4b5f      	ldr	r3, [pc, #380]	@ (800b0a8 <HAL_DMA_IRQHandler+0x1d8>)
 800af2c:	429a      	cmp	r2, r3
 800af2e:	d958      	bls.n	800afe2 <HAL_DMA_IRQHandler+0x112>
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	4a5d      	ldr	r2, [pc, #372]	@ (800b0ac <HAL_DMA_IRQHandler+0x1dc>)
 800af36:	4293      	cmp	r3, r2
 800af38:	d04f      	beq.n	800afda <HAL_DMA_IRQHandler+0x10a>
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	4a5c      	ldr	r2, [pc, #368]	@ (800b0b0 <HAL_DMA_IRQHandler+0x1e0>)
 800af40:	4293      	cmp	r3, r2
 800af42:	d048      	beq.n	800afd6 <HAL_DMA_IRQHandler+0x106>
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	4a5a      	ldr	r2, [pc, #360]	@ (800b0b4 <HAL_DMA_IRQHandler+0x1e4>)
 800af4a:	4293      	cmp	r3, r2
 800af4c:	d040      	beq.n	800afd0 <HAL_DMA_IRQHandler+0x100>
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	4a59      	ldr	r2, [pc, #356]	@ (800b0b8 <HAL_DMA_IRQHandler+0x1e8>)
 800af54:	4293      	cmp	r3, r2
 800af56:	d038      	beq.n	800afca <HAL_DMA_IRQHandler+0xfa>
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	4a57      	ldr	r2, [pc, #348]	@ (800b0bc <HAL_DMA_IRQHandler+0x1ec>)
 800af5e:	4293      	cmp	r3, r2
 800af60:	d030      	beq.n	800afc4 <HAL_DMA_IRQHandler+0xf4>
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	4a56      	ldr	r2, [pc, #344]	@ (800b0c0 <HAL_DMA_IRQHandler+0x1f0>)
 800af68:	4293      	cmp	r3, r2
 800af6a:	d028      	beq.n	800afbe <HAL_DMA_IRQHandler+0xee>
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	4a4d      	ldr	r2, [pc, #308]	@ (800b0a8 <HAL_DMA_IRQHandler+0x1d8>)
 800af72:	4293      	cmp	r3, r2
 800af74:	d020      	beq.n	800afb8 <HAL_DMA_IRQHandler+0xe8>
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	4a52      	ldr	r2, [pc, #328]	@ (800b0c4 <HAL_DMA_IRQHandler+0x1f4>)
 800af7c:	4293      	cmp	r3, r2
 800af7e:	d019      	beq.n	800afb4 <HAL_DMA_IRQHandler+0xe4>
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	4a50      	ldr	r2, [pc, #320]	@ (800b0c8 <HAL_DMA_IRQHandler+0x1f8>)
 800af86:	4293      	cmp	r3, r2
 800af88:	d012      	beq.n	800afb0 <HAL_DMA_IRQHandler+0xe0>
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	4a4f      	ldr	r2, [pc, #316]	@ (800b0cc <HAL_DMA_IRQHandler+0x1fc>)
 800af90:	4293      	cmp	r3, r2
 800af92:	d00a      	beq.n	800afaa <HAL_DMA_IRQHandler+0xda>
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	4a4d      	ldr	r2, [pc, #308]	@ (800b0d0 <HAL_DMA_IRQHandler+0x200>)
 800af9a:	4293      	cmp	r3, r2
 800af9c:	d102      	bne.n	800afa4 <HAL_DMA_IRQHandler+0xd4>
 800af9e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800afa2:	e01b      	b.n	800afdc <HAL_DMA_IRQHandler+0x10c>
 800afa4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800afa8:	e018      	b.n	800afdc <HAL_DMA_IRQHandler+0x10c>
 800afaa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800afae:	e015      	b.n	800afdc <HAL_DMA_IRQHandler+0x10c>
 800afb0:	2340      	movs	r3, #64	@ 0x40
 800afb2:	e013      	b.n	800afdc <HAL_DMA_IRQHandler+0x10c>
 800afb4:	2304      	movs	r3, #4
 800afb6:	e011      	b.n	800afdc <HAL_DMA_IRQHandler+0x10c>
 800afb8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800afbc:	e00e      	b.n	800afdc <HAL_DMA_IRQHandler+0x10c>
 800afbe:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800afc2:	e00b      	b.n	800afdc <HAL_DMA_IRQHandler+0x10c>
 800afc4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800afc8:	e008      	b.n	800afdc <HAL_DMA_IRQHandler+0x10c>
 800afca:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800afce:	e005      	b.n	800afdc <HAL_DMA_IRQHandler+0x10c>
 800afd0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800afd4:	e002      	b.n	800afdc <HAL_DMA_IRQHandler+0x10c>
 800afd6:	2340      	movs	r3, #64	@ 0x40
 800afd8:	e000      	b.n	800afdc <HAL_DMA_IRQHandler+0x10c>
 800afda:	2304      	movs	r3, #4
 800afdc:	4a3d      	ldr	r2, [pc, #244]	@ (800b0d4 <HAL_DMA_IRQHandler+0x204>)
 800afde:	6053      	str	r3, [r2, #4]
 800afe0:	e057      	b.n	800b092 <HAL_DMA_IRQHandler+0x1c2>
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	4a31      	ldr	r2, [pc, #196]	@ (800b0ac <HAL_DMA_IRQHandler+0x1dc>)
 800afe8:	4293      	cmp	r3, r2
 800afea:	d04f      	beq.n	800b08c <HAL_DMA_IRQHandler+0x1bc>
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	4a2f      	ldr	r2, [pc, #188]	@ (800b0b0 <HAL_DMA_IRQHandler+0x1e0>)
 800aff2:	4293      	cmp	r3, r2
 800aff4:	d048      	beq.n	800b088 <HAL_DMA_IRQHandler+0x1b8>
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	4a2e      	ldr	r2, [pc, #184]	@ (800b0b4 <HAL_DMA_IRQHandler+0x1e4>)
 800affc:	4293      	cmp	r3, r2
 800affe:	d040      	beq.n	800b082 <HAL_DMA_IRQHandler+0x1b2>
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	4a2c      	ldr	r2, [pc, #176]	@ (800b0b8 <HAL_DMA_IRQHandler+0x1e8>)
 800b006:	4293      	cmp	r3, r2
 800b008:	d038      	beq.n	800b07c <HAL_DMA_IRQHandler+0x1ac>
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	4a2b      	ldr	r2, [pc, #172]	@ (800b0bc <HAL_DMA_IRQHandler+0x1ec>)
 800b010:	4293      	cmp	r3, r2
 800b012:	d030      	beq.n	800b076 <HAL_DMA_IRQHandler+0x1a6>
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	4a29      	ldr	r2, [pc, #164]	@ (800b0c0 <HAL_DMA_IRQHandler+0x1f0>)
 800b01a:	4293      	cmp	r3, r2
 800b01c:	d028      	beq.n	800b070 <HAL_DMA_IRQHandler+0x1a0>
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	4a21      	ldr	r2, [pc, #132]	@ (800b0a8 <HAL_DMA_IRQHandler+0x1d8>)
 800b024:	4293      	cmp	r3, r2
 800b026:	d020      	beq.n	800b06a <HAL_DMA_IRQHandler+0x19a>
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	4a25      	ldr	r2, [pc, #148]	@ (800b0c4 <HAL_DMA_IRQHandler+0x1f4>)
 800b02e:	4293      	cmp	r3, r2
 800b030:	d019      	beq.n	800b066 <HAL_DMA_IRQHandler+0x196>
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	4a24      	ldr	r2, [pc, #144]	@ (800b0c8 <HAL_DMA_IRQHandler+0x1f8>)
 800b038:	4293      	cmp	r3, r2
 800b03a:	d012      	beq.n	800b062 <HAL_DMA_IRQHandler+0x192>
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	4a22      	ldr	r2, [pc, #136]	@ (800b0cc <HAL_DMA_IRQHandler+0x1fc>)
 800b042:	4293      	cmp	r3, r2
 800b044:	d00a      	beq.n	800b05c <HAL_DMA_IRQHandler+0x18c>
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	4a21      	ldr	r2, [pc, #132]	@ (800b0d0 <HAL_DMA_IRQHandler+0x200>)
 800b04c:	4293      	cmp	r3, r2
 800b04e:	d102      	bne.n	800b056 <HAL_DMA_IRQHandler+0x186>
 800b050:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800b054:	e01b      	b.n	800b08e <HAL_DMA_IRQHandler+0x1be>
 800b056:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800b05a:	e018      	b.n	800b08e <HAL_DMA_IRQHandler+0x1be>
 800b05c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b060:	e015      	b.n	800b08e <HAL_DMA_IRQHandler+0x1be>
 800b062:	2340      	movs	r3, #64	@ 0x40
 800b064:	e013      	b.n	800b08e <HAL_DMA_IRQHandler+0x1be>
 800b066:	2304      	movs	r3, #4
 800b068:	e011      	b.n	800b08e <HAL_DMA_IRQHandler+0x1be>
 800b06a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800b06e:	e00e      	b.n	800b08e <HAL_DMA_IRQHandler+0x1be>
 800b070:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800b074:	e00b      	b.n	800b08e <HAL_DMA_IRQHandler+0x1be>
 800b076:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800b07a:	e008      	b.n	800b08e <HAL_DMA_IRQHandler+0x1be>
 800b07c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800b080:	e005      	b.n	800b08e <HAL_DMA_IRQHandler+0x1be>
 800b082:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b086:	e002      	b.n	800b08e <HAL_DMA_IRQHandler+0x1be>
 800b088:	2340      	movs	r3, #64	@ 0x40
 800b08a:	e000      	b.n	800b08e <HAL_DMA_IRQHandler+0x1be>
 800b08c:	2304      	movs	r3, #4
 800b08e:	4a12      	ldr	r2, [pc, #72]	@ (800b0d8 <HAL_DMA_IRQHandler+0x208>)
 800b090:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b096:	2b00      	cmp	r3, #0
 800b098:	f000 8136 	beq.w	800b308 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0a0:	6878      	ldr	r0, [r7, #4]
 800b0a2:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800b0a4:	e130      	b.n	800b308 <HAL_DMA_IRQHandler+0x438>
 800b0a6:	bf00      	nop
 800b0a8:	40020080 	.word	0x40020080
 800b0ac:	40020008 	.word	0x40020008
 800b0b0:	4002001c 	.word	0x4002001c
 800b0b4:	40020030 	.word	0x40020030
 800b0b8:	40020044 	.word	0x40020044
 800b0bc:	40020058 	.word	0x40020058
 800b0c0:	4002006c 	.word	0x4002006c
 800b0c4:	40020408 	.word	0x40020408
 800b0c8:	4002041c 	.word	0x4002041c
 800b0cc:	40020430 	.word	0x40020430
 800b0d0:	40020444 	.word	0x40020444
 800b0d4:	40020400 	.word	0x40020400
 800b0d8:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b0e0:	2202      	movs	r2, #2
 800b0e2:	409a      	lsls	r2, r3
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	4013      	ands	r3, r2
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	f000 80dd 	beq.w	800b2a8 <HAL_DMA_IRQHandler+0x3d8>
 800b0ee:	68bb      	ldr	r3, [r7, #8]
 800b0f0:	f003 0302 	and.w	r3, r3, #2
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	f000 80d7 	beq.w	800b2a8 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	f003 0320 	and.w	r3, r3, #32
 800b104:	2b00      	cmp	r3, #0
 800b106:	d10b      	bne.n	800b120 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	681a      	ldr	r2, [r3, #0]
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	f022 020a 	bic.w	r2, r2, #10
 800b116:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	2201      	movs	r2, #1
 800b11c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	461a      	mov	r2, r3
 800b126:	4b7b      	ldr	r3, [pc, #492]	@ (800b314 <HAL_DMA_IRQHandler+0x444>)
 800b128:	429a      	cmp	r2, r3
 800b12a:	d958      	bls.n	800b1de <HAL_DMA_IRQHandler+0x30e>
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	4a79      	ldr	r2, [pc, #484]	@ (800b318 <HAL_DMA_IRQHandler+0x448>)
 800b132:	4293      	cmp	r3, r2
 800b134:	d04f      	beq.n	800b1d6 <HAL_DMA_IRQHandler+0x306>
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	4a78      	ldr	r2, [pc, #480]	@ (800b31c <HAL_DMA_IRQHandler+0x44c>)
 800b13c:	4293      	cmp	r3, r2
 800b13e:	d048      	beq.n	800b1d2 <HAL_DMA_IRQHandler+0x302>
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	4a76      	ldr	r2, [pc, #472]	@ (800b320 <HAL_DMA_IRQHandler+0x450>)
 800b146:	4293      	cmp	r3, r2
 800b148:	d040      	beq.n	800b1cc <HAL_DMA_IRQHandler+0x2fc>
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	4a75      	ldr	r2, [pc, #468]	@ (800b324 <HAL_DMA_IRQHandler+0x454>)
 800b150:	4293      	cmp	r3, r2
 800b152:	d038      	beq.n	800b1c6 <HAL_DMA_IRQHandler+0x2f6>
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	4a73      	ldr	r2, [pc, #460]	@ (800b328 <HAL_DMA_IRQHandler+0x458>)
 800b15a:	4293      	cmp	r3, r2
 800b15c:	d030      	beq.n	800b1c0 <HAL_DMA_IRQHandler+0x2f0>
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	4a72      	ldr	r2, [pc, #456]	@ (800b32c <HAL_DMA_IRQHandler+0x45c>)
 800b164:	4293      	cmp	r3, r2
 800b166:	d028      	beq.n	800b1ba <HAL_DMA_IRQHandler+0x2ea>
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	4a69      	ldr	r2, [pc, #420]	@ (800b314 <HAL_DMA_IRQHandler+0x444>)
 800b16e:	4293      	cmp	r3, r2
 800b170:	d020      	beq.n	800b1b4 <HAL_DMA_IRQHandler+0x2e4>
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	4a6e      	ldr	r2, [pc, #440]	@ (800b330 <HAL_DMA_IRQHandler+0x460>)
 800b178:	4293      	cmp	r3, r2
 800b17a:	d019      	beq.n	800b1b0 <HAL_DMA_IRQHandler+0x2e0>
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	4a6c      	ldr	r2, [pc, #432]	@ (800b334 <HAL_DMA_IRQHandler+0x464>)
 800b182:	4293      	cmp	r3, r2
 800b184:	d012      	beq.n	800b1ac <HAL_DMA_IRQHandler+0x2dc>
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	4a6b      	ldr	r2, [pc, #428]	@ (800b338 <HAL_DMA_IRQHandler+0x468>)
 800b18c:	4293      	cmp	r3, r2
 800b18e:	d00a      	beq.n	800b1a6 <HAL_DMA_IRQHandler+0x2d6>
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	4a69      	ldr	r2, [pc, #420]	@ (800b33c <HAL_DMA_IRQHandler+0x46c>)
 800b196:	4293      	cmp	r3, r2
 800b198:	d102      	bne.n	800b1a0 <HAL_DMA_IRQHandler+0x2d0>
 800b19a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b19e:	e01b      	b.n	800b1d8 <HAL_DMA_IRQHandler+0x308>
 800b1a0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800b1a4:	e018      	b.n	800b1d8 <HAL_DMA_IRQHandler+0x308>
 800b1a6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b1aa:	e015      	b.n	800b1d8 <HAL_DMA_IRQHandler+0x308>
 800b1ac:	2320      	movs	r3, #32
 800b1ae:	e013      	b.n	800b1d8 <HAL_DMA_IRQHandler+0x308>
 800b1b0:	2302      	movs	r3, #2
 800b1b2:	e011      	b.n	800b1d8 <HAL_DMA_IRQHandler+0x308>
 800b1b4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b1b8:	e00e      	b.n	800b1d8 <HAL_DMA_IRQHandler+0x308>
 800b1ba:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800b1be:	e00b      	b.n	800b1d8 <HAL_DMA_IRQHandler+0x308>
 800b1c0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800b1c4:	e008      	b.n	800b1d8 <HAL_DMA_IRQHandler+0x308>
 800b1c6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b1ca:	e005      	b.n	800b1d8 <HAL_DMA_IRQHandler+0x308>
 800b1cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b1d0:	e002      	b.n	800b1d8 <HAL_DMA_IRQHandler+0x308>
 800b1d2:	2320      	movs	r3, #32
 800b1d4:	e000      	b.n	800b1d8 <HAL_DMA_IRQHandler+0x308>
 800b1d6:	2302      	movs	r3, #2
 800b1d8:	4a59      	ldr	r2, [pc, #356]	@ (800b340 <HAL_DMA_IRQHandler+0x470>)
 800b1da:	6053      	str	r3, [r2, #4]
 800b1dc:	e057      	b.n	800b28e <HAL_DMA_IRQHandler+0x3be>
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	4a4d      	ldr	r2, [pc, #308]	@ (800b318 <HAL_DMA_IRQHandler+0x448>)
 800b1e4:	4293      	cmp	r3, r2
 800b1e6:	d04f      	beq.n	800b288 <HAL_DMA_IRQHandler+0x3b8>
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	4a4b      	ldr	r2, [pc, #300]	@ (800b31c <HAL_DMA_IRQHandler+0x44c>)
 800b1ee:	4293      	cmp	r3, r2
 800b1f0:	d048      	beq.n	800b284 <HAL_DMA_IRQHandler+0x3b4>
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	4a4a      	ldr	r2, [pc, #296]	@ (800b320 <HAL_DMA_IRQHandler+0x450>)
 800b1f8:	4293      	cmp	r3, r2
 800b1fa:	d040      	beq.n	800b27e <HAL_DMA_IRQHandler+0x3ae>
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	4a48      	ldr	r2, [pc, #288]	@ (800b324 <HAL_DMA_IRQHandler+0x454>)
 800b202:	4293      	cmp	r3, r2
 800b204:	d038      	beq.n	800b278 <HAL_DMA_IRQHandler+0x3a8>
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	4a47      	ldr	r2, [pc, #284]	@ (800b328 <HAL_DMA_IRQHandler+0x458>)
 800b20c:	4293      	cmp	r3, r2
 800b20e:	d030      	beq.n	800b272 <HAL_DMA_IRQHandler+0x3a2>
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	4a45      	ldr	r2, [pc, #276]	@ (800b32c <HAL_DMA_IRQHandler+0x45c>)
 800b216:	4293      	cmp	r3, r2
 800b218:	d028      	beq.n	800b26c <HAL_DMA_IRQHandler+0x39c>
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	4a3d      	ldr	r2, [pc, #244]	@ (800b314 <HAL_DMA_IRQHandler+0x444>)
 800b220:	4293      	cmp	r3, r2
 800b222:	d020      	beq.n	800b266 <HAL_DMA_IRQHandler+0x396>
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	4a41      	ldr	r2, [pc, #260]	@ (800b330 <HAL_DMA_IRQHandler+0x460>)
 800b22a:	4293      	cmp	r3, r2
 800b22c:	d019      	beq.n	800b262 <HAL_DMA_IRQHandler+0x392>
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	4a40      	ldr	r2, [pc, #256]	@ (800b334 <HAL_DMA_IRQHandler+0x464>)
 800b234:	4293      	cmp	r3, r2
 800b236:	d012      	beq.n	800b25e <HAL_DMA_IRQHandler+0x38e>
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	4a3e      	ldr	r2, [pc, #248]	@ (800b338 <HAL_DMA_IRQHandler+0x468>)
 800b23e:	4293      	cmp	r3, r2
 800b240:	d00a      	beq.n	800b258 <HAL_DMA_IRQHandler+0x388>
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	4a3d      	ldr	r2, [pc, #244]	@ (800b33c <HAL_DMA_IRQHandler+0x46c>)
 800b248:	4293      	cmp	r3, r2
 800b24a:	d102      	bne.n	800b252 <HAL_DMA_IRQHandler+0x382>
 800b24c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b250:	e01b      	b.n	800b28a <HAL_DMA_IRQHandler+0x3ba>
 800b252:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800b256:	e018      	b.n	800b28a <HAL_DMA_IRQHandler+0x3ba>
 800b258:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b25c:	e015      	b.n	800b28a <HAL_DMA_IRQHandler+0x3ba>
 800b25e:	2320      	movs	r3, #32
 800b260:	e013      	b.n	800b28a <HAL_DMA_IRQHandler+0x3ba>
 800b262:	2302      	movs	r3, #2
 800b264:	e011      	b.n	800b28a <HAL_DMA_IRQHandler+0x3ba>
 800b266:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b26a:	e00e      	b.n	800b28a <HAL_DMA_IRQHandler+0x3ba>
 800b26c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800b270:	e00b      	b.n	800b28a <HAL_DMA_IRQHandler+0x3ba>
 800b272:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800b276:	e008      	b.n	800b28a <HAL_DMA_IRQHandler+0x3ba>
 800b278:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b27c:	e005      	b.n	800b28a <HAL_DMA_IRQHandler+0x3ba>
 800b27e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b282:	e002      	b.n	800b28a <HAL_DMA_IRQHandler+0x3ba>
 800b284:	2320      	movs	r3, #32
 800b286:	e000      	b.n	800b28a <HAL_DMA_IRQHandler+0x3ba>
 800b288:	2302      	movs	r3, #2
 800b28a:	4a2e      	ldr	r2, [pc, #184]	@ (800b344 <HAL_DMA_IRQHandler+0x474>)
 800b28c:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	2200      	movs	r2, #0
 800b292:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d034      	beq.n	800b308 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2a2:	6878      	ldr	r0, [r7, #4]
 800b2a4:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800b2a6:	e02f      	b.n	800b308 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2ac:	2208      	movs	r2, #8
 800b2ae:	409a      	lsls	r2, r3
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	4013      	ands	r3, r2
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d028      	beq.n	800b30a <HAL_DMA_IRQHandler+0x43a>
 800b2b8:	68bb      	ldr	r3, [r7, #8]
 800b2ba:	f003 0308 	and.w	r3, r3, #8
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d023      	beq.n	800b30a <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	681a      	ldr	r2, [r3, #0]
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	f022 020e 	bic.w	r2, r2, #14
 800b2d0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b2da:	2101      	movs	r1, #1
 800b2dc:	fa01 f202 	lsl.w	r2, r1, r2
 800b2e0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	2201      	movs	r2, #1
 800b2e6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	2201      	movs	r2, #1
 800b2ec:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d004      	beq.n	800b30a <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b304:	6878      	ldr	r0, [r7, #4]
 800b306:	4798      	blx	r3
    }
  }
  return;
 800b308:	bf00      	nop
 800b30a:	bf00      	nop
}
 800b30c:	3710      	adds	r7, #16
 800b30e:	46bd      	mov	sp, r7
 800b310:	bd80      	pop	{r7, pc}
 800b312:	bf00      	nop
 800b314:	40020080 	.word	0x40020080
 800b318:	40020008 	.word	0x40020008
 800b31c:	4002001c 	.word	0x4002001c
 800b320:	40020030 	.word	0x40020030
 800b324:	40020044 	.word	0x40020044
 800b328:	40020058 	.word	0x40020058
 800b32c:	4002006c 	.word	0x4002006c
 800b330:	40020408 	.word	0x40020408
 800b334:	4002041c 	.word	0x4002041c
 800b338:	40020430 	.word	0x40020430
 800b33c:	40020444 	.word	0x40020444
 800b340:	40020400 	.word	0x40020400
 800b344:	40020000 	.word	0x40020000

0800b348 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b348:	b480      	push	{r7}
 800b34a:	b085      	sub	sp, #20
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	60f8      	str	r0, [r7, #12]
 800b350:	60b9      	str	r1, [r7, #8]
 800b352:	607a      	str	r2, [r7, #4]
 800b354:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b35e:	2101      	movs	r1, #1
 800b360:	fa01 f202 	lsl.w	r2, r1, r2
 800b364:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	683a      	ldr	r2, [r7, #0]
 800b36c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	685b      	ldr	r3, [r3, #4]
 800b372:	2b10      	cmp	r3, #16
 800b374:	d108      	bne.n	800b388 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	687a      	ldr	r2, [r7, #4]
 800b37c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	68ba      	ldr	r2, [r7, #8]
 800b384:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800b386:	e007      	b.n	800b398 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	68ba      	ldr	r2, [r7, #8]
 800b38e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	687a      	ldr	r2, [r7, #4]
 800b396:	60da      	str	r2, [r3, #12]
}
 800b398:	bf00      	nop
 800b39a:	3714      	adds	r7, #20
 800b39c:	46bd      	mov	sp, r7
 800b39e:	bc80      	pop	{r7}
 800b3a0:	4770      	bx	lr
	...

0800b3a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b3a4:	b480      	push	{r7}
 800b3a6:	b08b      	sub	sp, #44	@ 0x2c
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
 800b3ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800b3b6:	e179      	b.n	800b6ac <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800b3b8:	2201      	movs	r2, #1
 800b3ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3bc:	fa02 f303 	lsl.w	r3, r2, r3
 800b3c0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800b3c2:	683b      	ldr	r3, [r7, #0]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	69fa      	ldr	r2, [r7, #28]
 800b3c8:	4013      	ands	r3, r2
 800b3ca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800b3cc:	69ba      	ldr	r2, [r7, #24]
 800b3ce:	69fb      	ldr	r3, [r7, #28]
 800b3d0:	429a      	cmp	r2, r3
 800b3d2:	f040 8168 	bne.w	800b6a6 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800b3d6:	683b      	ldr	r3, [r7, #0]
 800b3d8:	685b      	ldr	r3, [r3, #4]
 800b3da:	4a96      	ldr	r2, [pc, #600]	@ (800b634 <HAL_GPIO_Init+0x290>)
 800b3dc:	4293      	cmp	r3, r2
 800b3de:	d05e      	beq.n	800b49e <HAL_GPIO_Init+0xfa>
 800b3e0:	4a94      	ldr	r2, [pc, #592]	@ (800b634 <HAL_GPIO_Init+0x290>)
 800b3e2:	4293      	cmp	r3, r2
 800b3e4:	d875      	bhi.n	800b4d2 <HAL_GPIO_Init+0x12e>
 800b3e6:	4a94      	ldr	r2, [pc, #592]	@ (800b638 <HAL_GPIO_Init+0x294>)
 800b3e8:	4293      	cmp	r3, r2
 800b3ea:	d058      	beq.n	800b49e <HAL_GPIO_Init+0xfa>
 800b3ec:	4a92      	ldr	r2, [pc, #584]	@ (800b638 <HAL_GPIO_Init+0x294>)
 800b3ee:	4293      	cmp	r3, r2
 800b3f0:	d86f      	bhi.n	800b4d2 <HAL_GPIO_Init+0x12e>
 800b3f2:	4a92      	ldr	r2, [pc, #584]	@ (800b63c <HAL_GPIO_Init+0x298>)
 800b3f4:	4293      	cmp	r3, r2
 800b3f6:	d052      	beq.n	800b49e <HAL_GPIO_Init+0xfa>
 800b3f8:	4a90      	ldr	r2, [pc, #576]	@ (800b63c <HAL_GPIO_Init+0x298>)
 800b3fa:	4293      	cmp	r3, r2
 800b3fc:	d869      	bhi.n	800b4d2 <HAL_GPIO_Init+0x12e>
 800b3fe:	4a90      	ldr	r2, [pc, #576]	@ (800b640 <HAL_GPIO_Init+0x29c>)
 800b400:	4293      	cmp	r3, r2
 800b402:	d04c      	beq.n	800b49e <HAL_GPIO_Init+0xfa>
 800b404:	4a8e      	ldr	r2, [pc, #568]	@ (800b640 <HAL_GPIO_Init+0x29c>)
 800b406:	4293      	cmp	r3, r2
 800b408:	d863      	bhi.n	800b4d2 <HAL_GPIO_Init+0x12e>
 800b40a:	4a8e      	ldr	r2, [pc, #568]	@ (800b644 <HAL_GPIO_Init+0x2a0>)
 800b40c:	4293      	cmp	r3, r2
 800b40e:	d046      	beq.n	800b49e <HAL_GPIO_Init+0xfa>
 800b410:	4a8c      	ldr	r2, [pc, #560]	@ (800b644 <HAL_GPIO_Init+0x2a0>)
 800b412:	4293      	cmp	r3, r2
 800b414:	d85d      	bhi.n	800b4d2 <HAL_GPIO_Init+0x12e>
 800b416:	2b12      	cmp	r3, #18
 800b418:	d82a      	bhi.n	800b470 <HAL_GPIO_Init+0xcc>
 800b41a:	2b12      	cmp	r3, #18
 800b41c:	d859      	bhi.n	800b4d2 <HAL_GPIO_Init+0x12e>
 800b41e:	a201      	add	r2, pc, #4	@ (adr r2, 800b424 <HAL_GPIO_Init+0x80>)
 800b420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b424:	0800b49f 	.word	0x0800b49f
 800b428:	0800b479 	.word	0x0800b479
 800b42c:	0800b48b 	.word	0x0800b48b
 800b430:	0800b4cd 	.word	0x0800b4cd
 800b434:	0800b4d3 	.word	0x0800b4d3
 800b438:	0800b4d3 	.word	0x0800b4d3
 800b43c:	0800b4d3 	.word	0x0800b4d3
 800b440:	0800b4d3 	.word	0x0800b4d3
 800b444:	0800b4d3 	.word	0x0800b4d3
 800b448:	0800b4d3 	.word	0x0800b4d3
 800b44c:	0800b4d3 	.word	0x0800b4d3
 800b450:	0800b4d3 	.word	0x0800b4d3
 800b454:	0800b4d3 	.word	0x0800b4d3
 800b458:	0800b4d3 	.word	0x0800b4d3
 800b45c:	0800b4d3 	.word	0x0800b4d3
 800b460:	0800b4d3 	.word	0x0800b4d3
 800b464:	0800b4d3 	.word	0x0800b4d3
 800b468:	0800b481 	.word	0x0800b481
 800b46c:	0800b495 	.word	0x0800b495
 800b470:	4a75      	ldr	r2, [pc, #468]	@ (800b648 <HAL_GPIO_Init+0x2a4>)
 800b472:	4293      	cmp	r3, r2
 800b474:	d013      	beq.n	800b49e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800b476:	e02c      	b.n	800b4d2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800b478:	683b      	ldr	r3, [r7, #0]
 800b47a:	68db      	ldr	r3, [r3, #12]
 800b47c:	623b      	str	r3, [r7, #32]
          break;
 800b47e:	e029      	b.n	800b4d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800b480:	683b      	ldr	r3, [r7, #0]
 800b482:	68db      	ldr	r3, [r3, #12]
 800b484:	3304      	adds	r3, #4
 800b486:	623b      	str	r3, [r7, #32]
          break;
 800b488:	e024      	b.n	800b4d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800b48a:	683b      	ldr	r3, [r7, #0]
 800b48c:	68db      	ldr	r3, [r3, #12]
 800b48e:	3308      	adds	r3, #8
 800b490:	623b      	str	r3, [r7, #32]
          break;
 800b492:	e01f      	b.n	800b4d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800b494:	683b      	ldr	r3, [r7, #0]
 800b496:	68db      	ldr	r3, [r3, #12]
 800b498:	330c      	adds	r3, #12
 800b49a:	623b      	str	r3, [r7, #32]
          break;
 800b49c:	e01a      	b.n	800b4d4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800b49e:	683b      	ldr	r3, [r7, #0]
 800b4a0:	689b      	ldr	r3, [r3, #8]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d102      	bne.n	800b4ac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800b4a6:	2304      	movs	r3, #4
 800b4a8:	623b      	str	r3, [r7, #32]
          break;
 800b4aa:	e013      	b.n	800b4d4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800b4ac:	683b      	ldr	r3, [r7, #0]
 800b4ae:	689b      	ldr	r3, [r3, #8]
 800b4b0:	2b01      	cmp	r3, #1
 800b4b2:	d105      	bne.n	800b4c0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800b4b4:	2308      	movs	r3, #8
 800b4b6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	69fa      	ldr	r2, [r7, #28]
 800b4bc:	611a      	str	r2, [r3, #16]
          break;
 800b4be:	e009      	b.n	800b4d4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800b4c0:	2308      	movs	r3, #8
 800b4c2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	69fa      	ldr	r2, [r7, #28]
 800b4c8:	615a      	str	r2, [r3, #20]
          break;
 800b4ca:	e003      	b.n	800b4d4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	623b      	str	r3, [r7, #32]
          break;
 800b4d0:	e000      	b.n	800b4d4 <HAL_GPIO_Init+0x130>
          break;
 800b4d2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800b4d4:	69bb      	ldr	r3, [r7, #24]
 800b4d6:	2bff      	cmp	r3, #255	@ 0xff
 800b4d8:	d801      	bhi.n	800b4de <HAL_GPIO_Init+0x13a>
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	e001      	b.n	800b4e2 <HAL_GPIO_Init+0x13e>
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	3304      	adds	r3, #4
 800b4e2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800b4e4:	69bb      	ldr	r3, [r7, #24]
 800b4e6:	2bff      	cmp	r3, #255	@ 0xff
 800b4e8:	d802      	bhi.n	800b4f0 <HAL_GPIO_Init+0x14c>
 800b4ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4ec:	009b      	lsls	r3, r3, #2
 800b4ee:	e002      	b.n	800b4f6 <HAL_GPIO_Init+0x152>
 800b4f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4f2:	3b08      	subs	r3, #8
 800b4f4:	009b      	lsls	r3, r3, #2
 800b4f6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800b4f8:	697b      	ldr	r3, [r7, #20]
 800b4fa:	681a      	ldr	r2, [r3, #0]
 800b4fc:	210f      	movs	r1, #15
 800b4fe:	693b      	ldr	r3, [r7, #16]
 800b500:	fa01 f303 	lsl.w	r3, r1, r3
 800b504:	43db      	mvns	r3, r3
 800b506:	401a      	ands	r2, r3
 800b508:	6a39      	ldr	r1, [r7, #32]
 800b50a:	693b      	ldr	r3, [r7, #16]
 800b50c:	fa01 f303 	lsl.w	r3, r1, r3
 800b510:	431a      	orrs	r2, r3
 800b512:	697b      	ldr	r3, [r7, #20]
 800b514:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800b516:	683b      	ldr	r3, [r7, #0]
 800b518:	685b      	ldr	r3, [r3, #4]
 800b51a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b51e:	2b00      	cmp	r3, #0
 800b520:	f000 80c1 	beq.w	800b6a6 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800b524:	4b49      	ldr	r3, [pc, #292]	@ (800b64c <HAL_GPIO_Init+0x2a8>)
 800b526:	699b      	ldr	r3, [r3, #24]
 800b528:	4a48      	ldr	r2, [pc, #288]	@ (800b64c <HAL_GPIO_Init+0x2a8>)
 800b52a:	f043 0301 	orr.w	r3, r3, #1
 800b52e:	6193      	str	r3, [r2, #24]
 800b530:	4b46      	ldr	r3, [pc, #280]	@ (800b64c <HAL_GPIO_Init+0x2a8>)
 800b532:	699b      	ldr	r3, [r3, #24]
 800b534:	f003 0301 	and.w	r3, r3, #1
 800b538:	60bb      	str	r3, [r7, #8]
 800b53a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800b53c:	4a44      	ldr	r2, [pc, #272]	@ (800b650 <HAL_GPIO_Init+0x2ac>)
 800b53e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b540:	089b      	lsrs	r3, r3, #2
 800b542:	3302      	adds	r3, #2
 800b544:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b548:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800b54a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b54c:	f003 0303 	and.w	r3, r3, #3
 800b550:	009b      	lsls	r3, r3, #2
 800b552:	220f      	movs	r2, #15
 800b554:	fa02 f303 	lsl.w	r3, r2, r3
 800b558:	43db      	mvns	r3, r3
 800b55a:	68fa      	ldr	r2, [r7, #12]
 800b55c:	4013      	ands	r3, r2
 800b55e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	4a3c      	ldr	r2, [pc, #240]	@ (800b654 <HAL_GPIO_Init+0x2b0>)
 800b564:	4293      	cmp	r3, r2
 800b566:	d01f      	beq.n	800b5a8 <HAL_GPIO_Init+0x204>
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	4a3b      	ldr	r2, [pc, #236]	@ (800b658 <HAL_GPIO_Init+0x2b4>)
 800b56c:	4293      	cmp	r3, r2
 800b56e:	d019      	beq.n	800b5a4 <HAL_GPIO_Init+0x200>
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	4a3a      	ldr	r2, [pc, #232]	@ (800b65c <HAL_GPIO_Init+0x2b8>)
 800b574:	4293      	cmp	r3, r2
 800b576:	d013      	beq.n	800b5a0 <HAL_GPIO_Init+0x1fc>
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	4a39      	ldr	r2, [pc, #228]	@ (800b660 <HAL_GPIO_Init+0x2bc>)
 800b57c:	4293      	cmp	r3, r2
 800b57e:	d00d      	beq.n	800b59c <HAL_GPIO_Init+0x1f8>
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	4a38      	ldr	r2, [pc, #224]	@ (800b664 <HAL_GPIO_Init+0x2c0>)
 800b584:	4293      	cmp	r3, r2
 800b586:	d007      	beq.n	800b598 <HAL_GPIO_Init+0x1f4>
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	4a37      	ldr	r2, [pc, #220]	@ (800b668 <HAL_GPIO_Init+0x2c4>)
 800b58c:	4293      	cmp	r3, r2
 800b58e:	d101      	bne.n	800b594 <HAL_GPIO_Init+0x1f0>
 800b590:	2305      	movs	r3, #5
 800b592:	e00a      	b.n	800b5aa <HAL_GPIO_Init+0x206>
 800b594:	2306      	movs	r3, #6
 800b596:	e008      	b.n	800b5aa <HAL_GPIO_Init+0x206>
 800b598:	2304      	movs	r3, #4
 800b59a:	e006      	b.n	800b5aa <HAL_GPIO_Init+0x206>
 800b59c:	2303      	movs	r3, #3
 800b59e:	e004      	b.n	800b5aa <HAL_GPIO_Init+0x206>
 800b5a0:	2302      	movs	r3, #2
 800b5a2:	e002      	b.n	800b5aa <HAL_GPIO_Init+0x206>
 800b5a4:	2301      	movs	r3, #1
 800b5a6:	e000      	b.n	800b5aa <HAL_GPIO_Init+0x206>
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b5ac:	f002 0203 	and.w	r2, r2, #3
 800b5b0:	0092      	lsls	r2, r2, #2
 800b5b2:	4093      	lsls	r3, r2
 800b5b4:	68fa      	ldr	r2, [r7, #12]
 800b5b6:	4313      	orrs	r3, r2
 800b5b8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800b5ba:	4925      	ldr	r1, [pc, #148]	@ (800b650 <HAL_GPIO_Init+0x2ac>)
 800b5bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5be:	089b      	lsrs	r3, r3, #2
 800b5c0:	3302      	adds	r3, #2
 800b5c2:	68fa      	ldr	r2, [r7, #12]
 800b5c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800b5c8:	683b      	ldr	r3, [r7, #0]
 800b5ca:	685b      	ldr	r3, [r3, #4]
 800b5cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d006      	beq.n	800b5e2 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800b5d4:	4b25      	ldr	r3, [pc, #148]	@ (800b66c <HAL_GPIO_Init+0x2c8>)
 800b5d6:	689a      	ldr	r2, [r3, #8]
 800b5d8:	4924      	ldr	r1, [pc, #144]	@ (800b66c <HAL_GPIO_Init+0x2c8>)
 800b5da:	69bb      	ldr	r3, [r7, #24]
 800b5dc:	4313      	orrs	r3, r2
 800b5de:	608b      	str	r3, [r1, #8]
 800b5e0:	e006      	b.n	800b5f0 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800b5e2:	4b22      	ldr	r3, [pc, #136]	@ (800b66c <HAL_GPIO_Init+0x2c8>)
 800b5e4:	689a      	ldr	r2, [r3, #8]
 800b5e6:	69bb      	ldr	r3, [r7, #24]
 800b5e8:	43db      	mvns	r3, r3
 800b5ea:	4920      	ldr	r1, [pc, #128]	@ (800b66c <HAL_GPIO_Init+0x2c8>)
 800b5ec:	4013      	ands	r3, r2
 800b5ee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800b5f0:	683b      	ldr	r3, [r7, #0]
 800b5f2:	685b      	ldr	r3, [r3, #4]
 800b5f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d006      	beq.n	800b60a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800b5fc:	4b1b      	ldr	r3, [pc, #108]	@ (800b66c <HAL_GPIO_Init+0x2c8>)
 800b5fe:	68da      	ldr	r2, [r3, #12]
 800b600:	491a      	ldr	r1, [pc, #104]	@ (800b66c <HAL_GPIO_Init+0x2c8>)
 800b602:	69bb      	ldr	r3, [r7, #24]
 800b604:	4313      	orrs	r3, r2
 800b606:	60cb      	str	r3, [r1, #12]
 800b608:	e006      	b.n	800b618 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800b60a:	4b18      	ldr	r3, [pc, #96]	@ (800b66c <HAL_GPIO_Init+0x2c8>)
 800b60c:	68da      	ldr	r2, [r3, #12]
 800b60e:	69bb      	ldr	r3, [r7, #24]
 800b610:	43db      	mvns	r3, r3
 800b612:	4916      	ldr	r1, [pc, #88]	@ (800b66c <HAL_GPIO_Init+0x2c8>)
 800b614:	4013      	ands	r3, r2
 800b616:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800b618:	683b      	ldr	r3, [r7, #0]
 800b61a:	685b      	ldr	r3, [r3, #4]
 800b61c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b620:	2b00      	cmp	r3, #0
 800b622:	d025      	beq.n	800b670 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800b624:	4b11      	ldr	r3, [pc, #68]	@ (800b66c <HAL_GPIO_Init+0x2c8>)
 800b626:	685a      	ldr	r2, [r3, #4]
 800b628:	4910      	ldr	r1, [pc, #64]	@ (800b66c <HAL_GPIO_Init+0x2c8>)
 800b62a:	69bb      	ldr	r3, [r7, #24]
 800b62c:	4313      	orrs	r3, r2
 800b62e:	604b      	str	r3, [r1, #4]
 800b630:	e025      	b.n	800b67e <HAL_GPIO_Init+0x2da>
 800b632:	bf00      	nop
 800b634:	10320000 	.word	0x10320000
 800b638:	10310000 	.word	0x10310000
 800b63c:	10220000 	.word	0x10220000
 800b640:	10210000 	.word	0x10210000
 800b644:	10120000 	.word	0x10120000
 800b648:	10110000 	.word	0x10110000
 800b64c:	40021000 	.word	0x40021000
 800b650:	40010000 	.word	0x40010000
 800b654:	40010800 	.word	0x40010800
 800b658:	40010c00 	.word	0x40010c00
 800b65c:	40011000 	.word	0x40011000
 800b660:	40011400 	.word	0x40011400
 800b664:	40011800 	.word	0x40011800
 800b668:	40011c00 	.word	0x40011c00
 800b66c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800b670:	4b15      	ldr	r3, [pc, #84]	@ (800b6c8 <HAL_GPIO_Init+0x324>)
 800b672:	685a      	ldr	r2, [r3, #4]
 800b674:	69bb      	ldr	r3, [r7, #24]
 800b676:	43db      	mvns	r3, r3
 800b678:	4913      	ldr	r1, [pc, #76]	@ (800b6c8 <HAL_GPIO_Init+0x324>)
 800b67a:	4013      	ands	r3, r2
 800b67c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800b67e:	683b      	ldr	r3, [r7, #0]
 800b680:	685b      	ldr	r3, [r3, #4]
 800b682:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b686:	2b00      	cmp	r3, #0
 800b688:	d006      	beq.n	800b698 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800b68a:	4b0f      	ldr	r3, [pc, #60]	@ (800b6c8 <HAL_GPIO_Init+0x324>)
 800b68c:	681a      	ldr	r2, [r3, #0]
 800b68e:	490e      	ldr	r1, [pc, #56]	@ (800b6c8 <HAL_GPIO_Init+0x324>)
 800b690:	69bb      	ldr	r3, [r7, #24]
 800b692:	4313      	orrs	r3, r2
 800b694:	600b      	str	r3, [r1, #0]
 800b696:	e006      	b.n	800b6a6 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800b698:	4b0b      	ldr	r3, [pc, #44]	@ (800b6c8 <HAL_GPIO_Init+0x324>)
 800b69a:	681a      	ldr	r2, [r3, #0]
 800b69c:	69bb      	ldr	r3, [r7, #24]
 800b69e:	43db      	mvns	r3, r3
 800b6a0:	4909      	ldr	r1, [pc, #36]	@ (800b6c8 <HAL_GPIO_Init+0x324>)
 800b6a2:	4013      	ands	r3, r2
 800b6a4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800b6a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6a8:	3301      	adds	r3, #1
 800b6aa:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800b6ac:	683b      	ldr	r3, [r7, #0]
 800b6ae:	681a      	ldr	r2, [r3, #0]
 800b6b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6b2:	fa22 f303 	lsr.w	r3, r2, r3
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	f47f ae7e 	bne.w	800b3b8 <HAL_GPIO_Init+0x14>
  }
}
 800b6bc:	bf00      	nop
 800b6be:	bf00      	nop
 800b6c0:	372c      	adds	r7, #44	@ 0x2c
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	bc80      	pop	{r7}
 800b6c6:	4770      	bx	lr
 800b6c8:	40010400 	.word	0x40010400

0800b6cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b6cc:	b480      	push	{r7}
 800b6ce:	b083      	sub	sp, #12
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
 800b6d4:	460b      	mov	r3, r1
 800b6d6:	807b      	strh	r3, [r7, #2]
 800b6d8:	4613      	mov	r3, r2
 800b6da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800b6dc:	787b      	ldrb	r3, [r7, #1]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d003      	beq.n	800b6ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b6e2:	887a      	ldrh	r2, [r7, #2]
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800b6e8:	e003      	b.n	800b6f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800b6ea:	887b      	ldrh	r3, [r7, #2]
 800b6ec:	041a      	lsls	r2, r3, #16
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	611a      	str	r2, [r3, #16]
}
 800b6f2:	bf00      	nop
 800b6f4:	370c      	adds	r7, #12
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	bc80      	pop	{r7}
 800b6fa:	4770      	bx	lr

0800b6fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b084      	sub	sp, #16
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d101      	bne.n	800b70e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b70a:	2301      	movs	r3, #1
 800b70c:	e12b      	b.n	800b966 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b714:	b2db      	uxtb	r3, r3
 800b716:	2b00      	cmp	r3, #0
 800b718:	d106      	bne.n	800b728 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	2200      	movs	r2, #0
 800b71e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800b722:	6878      	ldr	r0, [r7, #4]
 800b724:	f7fe fdac 	bl	800a280 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	2224      	movs	r2, #36	@ 0x24
 800b72c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	681a      	ldr	r2, [r3, #0]
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	f022 0201 	bic.w	r2, r2, #1
 800b73e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	681a      	ldr	r2, [r3, #0]
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b74e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	681a      	ldr	r2, [r3, #0]
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800b75e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800b760:	f000 fcda 	bl	800c118 <HAL_RCC_GetPCLK1Freq>
 800b764:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	685b      	ldr	r3, [r3, #4]
 800b76a:	4a81      	ldr	r2, [pc, #516]	@ (800b970 <HAL_I2C_Init+0x274>)
 800b76c:	4293      	cmp	r3, r2
 800b76e:	d807      	bhi.n	800b780 <HAL_I2C_Init+0x84>
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	4a80      	ldr	r2, [pc, #512]	@ (800b974 <HAL_I2C_Init+0x278>)
 800b774:	4293      	cmp	r3, r2
 800b776:	bf94      	ite	ls
 800b778:	2301      	movls	r3, #1
 800b77a:	2300      	movhi	r3, #0
 800b77c:	b2db      	uxtb	r3, r3
 800b77e:	e006      	b.n	800b78e <HAL_I2C_Init+0x92>
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	4a7d      	ldr	r2, [pc, #500]	@ (800b978 <HAL_I2C_Init+0x27c>)
 800b784:	4293      	cmp	r3, r2
 800b786:	bf94      	ite	ls
 800b788:	2301      	movls	r3, #1
 800b78a:	2300      	movhi	r3, #0
 800b78c:	b2db      	uxtb	r3, r3
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d001      	beq.n	800b796 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800b792:	2301      	movs	r3, #1
 800b794:	e0e7      	b.n	800b966 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	4a78      	ldr	r2, [pc, #480]	@ (800b97c <HAL_I2C_Init+0x280>)
 800b79a:	fba2 2303 	umull	r2, r3, r2, r3
 800b79e:	0c9b      	lsrs	r3, r3, #18
 800b7a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	685b      	ldr	r3, [r3, #4]
 800b7a8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	68ba      	ldr	r2, [r7, #8]
 800b7b2:	430a      	orrs	r2, r1
 800b7b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	6a1b      	ldr	r3, [r3, #32]
 800b7bc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	685b      	ldr	r3, [r3, #4]
 800b7c4:	4a6a      	ldr	r2, [pc, #424]	@ (800b970 <HAL_I2C_Init+0x274>)
 800b7c6:	4293      	cmp	r3, r2
 800b7c8:	d802      	bhi.n	800b7d0 <HAL_I2C_Init+0xd4>
 800b7ca:	68bb      	ldr	r3, [r7, #8]
 800b7cc:	3301      	adds	r3, #1
 800b7ce:	e009      	b.n	800b7e4 <HAL_I2C_Init+0xe8>
 800b7d0:	68bb      	ldr	r3, [r7, #8]
 800b7d2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800b7d6:	fb02 f303 	mul.w	r3, r2, r3
 800b7da:	4a69      	ldr	r2, [pc, #420]	@ (800b980 <HAL_I2C_Init+0x284>)
 800b7dc:	fba2 2303 	umull	r2, r3, r2, r3
 800b7e0:	099b      	lsrs	r3, r3, #6
 800b7e2:	3301      	adds	r3, #1
 800b7e4:	687a      	ldr	r2, [r7, #4]
 800b7e6:	6812      	ldr	r2, [r2, #0]
 800b7e8:	430b      	orrs	r3, r1
 800b7ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	69db      	ldr	r3, [r3, #28]
 800b7f2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800b7f6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	685b      	ldr	r3, [r3, #4]
 800b7fe:	495c      	ldr	r1, [pc, #368]	@ (800b970 <HAL_I2C_Init+0x274>)
 800b800:	428b      	cmp	r3, r1
 800b802:	d819      	bhi.n	800b838 <HAL_I2C_Init+0x13c>
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	1e59      	subs	r1, r3, #1
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	685b      	ldr	r3, [r3, #4]
 800b80c:	005b      	lsls	r3, r3, #1
 800b80e:	fbb1 f3f3 	udiv	r3, r1, r3
 800b812:	1c59      	adds	r1, r3, #1
 800b814:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800b818:	400b      	ands	r3, r1
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d00a      	beq.n	800b834 <HAL_I2C_Init+0x138>
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	1e59      	subs	r1, r3, #1
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	685b      	ldr	r3, [r3, #4]
 800b826:	005b      	lsls	r3, r3, #1
 800b828:	fbb1 f3f3 	udiv	r3, r1, r3
 800b82c:	3301      	adds	r3, #1
 800b82e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b832:	e051      	b.n	800b8d8 <HAL_I2C_Init+0x1dc>
 800b834:	2304      	movs	r3, #4
 800b836:	e04f      	b.n	800b8d8 <HAL_I2C_Init+0x1dc>
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	689b      	ldr	r3, [r3, #8]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d111      	bne.n	800b864 <HAL_I2C_Init+0x168>
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	1e58      	subs	r0, r3, #1
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	6859      	ldr	r1, [r3, #4]
 800b848:	460b      	mov	r3, r1
 800b84a:	005b      	lsls	r3, r3, #1
 800b84c:	440b      	add	r3, r1
 800b84e:	fbb0 f3f3 	udiv	r3, r0, r3
 800b852:	3301      	adds	r3, #1
 800b854:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b858:	2b00      	cmp	r3, #0
 800b85a:	bf0c      	ite	eq
 800b85c:	2301      	moveq	r3, #1
 800b85e:	2300      	movne	r3, #0
 800b860:	b2db      	uxtb	r3, r3
 800b862:	e012      	b.n	800b88a <HAL_I2C_Init+0x18e>
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	1e58      	subs	r0, r3, #1
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	6859      	ldr	r1, [r3, #4]
 800b86c:	460b      	mov	r3, r1
 800b86e:	009b      	lsls	r3, r3, #2
 800b870:	440b      	add	r3, r1
 800b872:	0099      	lsls	r1, r3, #2
 800b874:	440b      	add	r3, r1
 800b876:	fbb0 f3f3 	udiv	r3, r0, r3
 800b87a:	3301      	adds	r3, #1
 800b87c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b880:	2b00      	cmp	r3, #0
 800b882:	bf0c      	ite	eq
 800b884:	2301      	moveq	r3, #1
 800b886:	2300      	movne	r3, #0
 800b888:	b2db      	uxtb	r3, r3
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d001      	beq.n	800b892 <HAL_I2C_Init+0x196>
 800b88e:	2301      	movs	r3, #1
 800b890:	e022      	b.n	800b8d8 <HAL_I2C_Init+0x1dc>
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	689b      	ldr	r3, [r3, #8]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d10e      	bne.n	800b8b8 <HAL_I2C_Init+0x1bc>
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	1e58      	subs	r0, r3, #1
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	6859      	ldr	r1, [r3, #4]
 800b8a2:	460b      	mov	r3, r1
 800b8a4:	005b      	lsls	r3, r3, #1
 800b8a6:	440b      	add	r3, r1
 800b8a8:	fbb0 f3f3 	udiv	r3, r0, r3
 800b8ac:	3301      	adds	r3, #1
 800b8ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b8b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b8b6:	e00f      	b.n	800b8d8 <HAL_I2C_Init+0x1dc>
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	1e58      	subs	r0, r3, #1
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	6859      	ldr	r1, [r3, #4]
 800b8c0:	460b      	mov	r3, r1
 800b8c2:	009b      	lsls	r3, r3, #2
 800b8c4:	440b      	add	r3, r1
 800b8c6:	0099      	lsls	r1, r3, #2
 800b8c8:	440b      	add	r3, r1
 800b8ca:	fbb0 f3f3 	udiv	r3, r0, r3
 800b8ce:	3301      	adds	r3, #1
 800b8d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b8d4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b8d8:	6879      	ldr	r1, [r7, #4]
 800b8da:	6809      	ldr	r1, [r1, #0]
 800b8dc:	4313      	orrs	r3, r2
 800b8de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	69da      	ldr	r2, [r3, #28]
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	6a1b      	ldr	r3, [r3, #32]
 800b8f2:	431a      	orrs	r2, r3
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	430a      	orrs	r2, r1
 800b8fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	689b      	ldr	r3, [r3, #8]
 800b902:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800b906:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800b90a:	687a      	ldr	r2, [r7, #4]
 800b90c:	6911      	ldr	r1, [r2, #16]
 800b90e:	687a      	ldr	r2, [r7, #4]
 800b910:	68d2      	ldr	r2, [r2, #12]
 800b912:	4311      	orrs	r1, r2
 800b914:	687a      	ldr	r2, [r7, #4]
 800b916:	6812      	ldr	r2, [r2, #0]
 800b918:	430b      	orrs	r3, r1
 800b91a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	68db      	ldr	r3, [r3, #12]
 800b922:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	695a      	ldr	r2, [r3, #20]
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	699b      	ldr	r3, [r3, #24]
 800b92e:	431a      	orrs	r2, r3
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	430a      	orrs	r2, r1
 800b936:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	681a      	ldr	r2, [r3, #0]
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	f042 0201 	orr.w	r2, r2, #1
 800b946:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	2200      	movs	r2, #0
 800b94c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	2220      	movs	r2, #32
 800b952:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	2200      	movs	r2, #0
 800b95a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	2200      	movs	r2, #0
 800b960:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800b964:	2300      	movs	r3, #0
}
 800b966:	4618      	mov	r0, r3
 800b968:	3710      	adds	r7, #16
 800b96a:	46bd      	mov	sp, r7
 800b96c:	bd80      	pop	{r7, pc}
 800b96e:	bf00      	nop
 800b970:	000186a0 	.word	0x000186a0
 800b974:	001e847f 	.word	0x001e847f
 800b978:	003d08ff 	.word	0x003d08ff
 800b97c:	431bde83 	.word	0x431bde83
 800b980:	10624dd3 	.word	0x10624dd3

0800b984 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b984:	b580      	push	{r7, lr}
 800b986:	b086      	sub	sp, #24
 800b988:	af00      	add	r7, sp, #0
 800b98a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d101      	bne.n	800b996 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b992:	2301      	movs	r3, #1
 800b994:	e272      	b.n	800be7c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	f003 0301 	and.w	r3, r3, #1
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	f000 8087 	beq.w	800bab2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800b9a4:	4b92      	ldr	r3, [pc, #584]	@ (800bbf0 <HAL_RCC_OscConfig+0x26c>)
 800b9a6:	685b      	ldr	r3, [r3, #4]
 800b9a8:	f003 030c 	and.w	r3, r3, #12
 800b9ac:	2b04      	cmp	r3, #4
 800b9ae:	d00c      	beq.n	800b9ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800b9b0:	4b8f      	ldr	r3, [pc, #572]	@ (800bbf0 <HAL_RCC_OscConfig+0x26c>)
 800b9b2:	685b      	ldr	r3, [r3, #4]
 800b9b4:	f003 030c 	and.w	r3, r3, #12
 800b9b8:	2b08      	cmp	r3, #8
 800b9ba:	d112      	bne.n	800b9e2 <HAL_RCC_OscConfig+0x5e>
 800b9bc:	4b8c      	ldr	r3, [pc, #560]	@ (800bbf0 <HAL_RCC_OscConfig+0x26c>)
 800b9be:	685b      	ldr	r3, [r3, #4]
 800b9c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b9c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b9c8:	d10b      	bne.n	800b9e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b9ca:	4b89      	ldr	r3, [pc, #548]	@ (800bbf0 <HAL_RCC_OscConfig+0x26c>)
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d06c      	beq.n	800bab0 <HAL_RCC_OscConfig+0x12c>
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	685b      	ldr	r3, [r3, #4]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d168      	bne.n	800bab0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800b9de:	2301      	movs	r3, #1
 800b9e0:	e24c      	b.n	800be7c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	685b      	ldr	r3, [r3, #4]
 800b9e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b9ea:	d106      	bne.n	800b9fa <HAL_RCC_OscConfig+0x76>
 800b9ec:	4b80      	ldr	r3, [pc, #512]	@ (800bbf0 <HAL_RCC_OscConfig+0x26c>)
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	4a7f      	ldr	r2, [pc, #508]	@ (800bbf0 <HAL_RCC_OscConfig+0x26c>)
 800b9f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b9f6:	6013      	str	r3, [r2, #0]
 800b9f8:	e02e      	b.n	800ba58 <HAL_RCC_OscConfig+0xd4>
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	685b      	ldr	r3, [r3, #4]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d10c      	bne.n	800ba1c <HAL_RCC_OscConfig+0x98>
 800ba02:	4b7b      	ldr	r3, [pc, #492]	@ (800bbf0 <HAL_RCC_OscConfig+0x26c>)
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	4a7a      	ldr	r2, [pc, #488]	@ (800bbf0 <HAL_RCC_OscConfig+0x26c>)
 800ba08:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ba0c:	6013      	str	r3, [r2, #0]
 800ba0e:	4b78      	ldr	r3, [pc, #480]	@ (800bbf0 <HAL_RCC_OscConfig+0x26c>)
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	4a77      	ldr	r2, [pc, #476]	@ (800bbf0 <HAL_RCC_OscConfig+0x26c>)
 800ba14:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ba18:	6013      	str	r3, [r2, #0]
 800ba1a:	e01d      	b.n	800ba58 <HAL_RCC_OscConfig+0xd4>
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	685b      	ldr	r3, [r3, #4]
 800ba20:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ba24:	d10c      	bne.n	800ba40 <HAL_RCC_OscConfig+0xbc>
 800ba26:	4b72      	ldr	r3, [pc, #456]	@ (800bbf0 <HAL_RCC_OscConfig+0x26c>)
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	4a71      	ldr	r2, [pc, #452]	@ (800bbf0 <HAL_RCC_OscConfig+0x26c>)
 800ba2c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800ba30:	6013      	str	r3, [r2, #0]
 800ba32:	4b6f      	ldr	r3, [pc, #444]	@ (800bbf0 <HAL_RCC_OscConfig+0x26c>)
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	4a6e      	ldr	r2, [pc, #440]	@ (800bbf0 <HAL_RCC_OscConfig+0x26c>)
 800ba38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ba3c:	6013      	str	r3, [r2, #0]
 800ba3e:	e00b      	b.n	800ba58 <HAL_RCC_OscConfig+0xd4>
 800ba40:	4b6b      	ldr	r3, [pc, #428]	@ (800bbf0 <HAL_RCC_OscConfig+0x26c>)
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	4a6a      	ldr	r2, [pc, #424]	@ (800bbf0 <HAL_RCC_OscConfig+0x26c>)
 800ba46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ba4a:	6013      	str	r3, [r2, #0]
 800ba4c:	4b68      	ldr	r3, [pc, #416]	@ (800bbf0 <HAL_RCC_OscConfig+0x26c>)
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	4a67      	ldr	r2, [pc, #412]	@ (800bbf0 <HAL_RCC_OscConfig+0x26c>)
 800ba52:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ba56:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	685b      	ldr	r3, [r3, #4]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d013      	beq.n	800ba88 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ba60:	f7fe ff04 	bl	800a86c <HAL_GetTick>
 800ba64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ba66:	e008      	b.n	800ba7a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ba68:	f7fe ff00 	bl	800a86c <HAL_GetTick>
 800ba6c:	4602      	mov	r2, r0
 800ba6e:	693b      	ldr	r3, [r7, #16]
 800ba70:	1ad3      	subs	r3, r2, r3
 800ba72:	2b64      	cmp	r3, #100	@ 0x64
 800ba74:	d901      	bls.n	800ba7a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800ba76:	2303      	movs	r3, #3
 800ba78:	e200      	b.n	800be7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ba7a:	4b5d      	ldr	r3, [pc, #372]	@ (800bbf0 <HAL_RCC_OscConfig+0x26c>)
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d0f0      	beq.n	800ba68 <HAL_RCC_OscConfig+0xe4>
 800ba86:	e014      	b.n	800bab2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ba88:	f7fe fef0 	bl	800a86c <HAL_GetTick>
 800ba8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ba8e:	e008      	b.n	800baa2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ba90:	f7fe feec 	bl	800a86c <HAL_GetTick>
 800ba94:	4602      	mov	r2, r0
 800ba96:	693b      	ldr	r3, [r7, #16]
 800ba98:	1ad3      	subs	r3, r2, r3
 800ba9a:	2b64      	cmp	r3, #100	@ 0x64
 800ba9c:	d901      	bls.n	800baa2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800ba9e:	2303      	movs	r3, #3
 800baa0:	e1ec      	b.n	800be7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800baa2:	4b53      	ldr	r3, [pc, #332]	@ (800bbf0 <HAL_RCC_OscConfig+0x26c>)
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d1f0      	bne.n	800ba90 <HAL_RCC_OscConfig+0x10c>
 800baae:	e000      	b.n	800bab2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bab0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	f003 0302 	and.w	r3, r3, #2
 800baba:	2b00      	cmp	r3, #0
 800babc:	d063      	beq.n	800bb86 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800babe:	4b4c      	ldr	r3, [pc, #304]	@ (800bbf0 <HAL_RCC_OscConfig+0x26c>)
 800bac0:	685b      	ldr	r3, [r3, #4]
 800bac2:	f003 030c 	and.w	r3, r3, #12
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d00b      	beq.n	800bae2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800baca:	4b49      	ldr	r3, [pc, #292]	@ (800bbf0 <HAL_RCC_OscConfig+0x26c>)
 800bacc:	685b      	ldr	r3, [r3, #4]
 800bace:	f003 030c 	and.w	r3, r3, #12
 800bad2:	2b08      	cmp	r3, #8
 800bad4:	d11c      	bne.n	800bb10 <HAL_RCC_OscConfig+0x18c>
 800bad6:	4b46      	ldr	r3, [pc, #280]	@ (800bbf0 <HAL_RCC_OscConfig+0x26c>)
 800bad8:	685b      	ldr	r3, [r3, #4]
 800bada:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d116      	bne.n	800bb10 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bae2:	4b43      	ldr	r3, [pc, #268]	@ (800bbf0 <HAL_RCC_OscConfig+0x26c>)
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	f003 0302 	and.w	r3, r3, #2
 800baea:	2b00      	cmp	r3, #0
 800baec:	d005      	beq.n	800bafa <HAL_RCC_OscConfig+0x176>
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	691b      	ldr	r3, [r3, #16]
 800baf2:	2b01      	cmp	r3, #1
 800baf4:	d001      	beq.n	800bafa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800baf6:	2301      	movs	r3, #1
 800baf8:	e1c0      	b.n	800be7c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bafa:	4b3d      	ldr	r3, [pc, #244]	@ (800bbf0 <HAL_RCC_OscConfig+0x26c>)
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	695b      	ldr	r3, [r3, #20]
 800bb06:	00db      	lsls	r3, r3, #3
 800bb08:	4939      	ldr	r1, [pc, #228]	@ (800bbf0 <HAL_RCC_OscConfig+0x26c>)
 800bb0a:	4313      	orrs	r3, r2
 800bb0c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bb0e:	e03a      	b.n	800bb86 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	691b      	ldr	r3, [r3, #16]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d020      	beq.n	800bb5a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800bb18:	4b36      	ldr	r3, [pc, #216]	@ (800bbf4 <HAL_RCC_OscConfig+0x270>)
 800bb1a:	2201      	movs	r2, #1
 800bb1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bb1e:	f7fe fea5 	bl	800a86c <HAL_GetTick>
 800bb22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bb24:	e008      	b.n	800bb38 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bb26:	f7fe fea1 	bl	800a86c <HAL_GetTick>
 800bb2a:	4602      	mov	r2, r0
 800bb2c:	693b      	ldr	r3, [r7, #16]
 800bb2e:	1ad3      	subs	r3, r2, r3
 800bb30:	2b02      	cmp	r3, #2
 800bb32:	d901      	bls.n	800bb38 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800bb34:	2303      	movs	r3, #3
 800bb36:	e1a1      	b.n	800be7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bb38:	4b2d      	ldr	r3, [pc, #180]	@ (800bbf0 <HAL_RCC_OscConfig+0x26c>)
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	f003 0302 	and.w	r3, r3, #2
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d0f0      	beq.n	800bb26 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bb44:	4b2a      	ldr	r3, [pc, #168]	@ (800bbf0 <HAL_RCC_OscConfig+0x26c>)
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	695b      	ldr	r3, [r3, #20]
 800bb50:	00db      	lsls	r3, r3, #3
 800bb52:	4927      	ldr	r1, [pc, #156]	@ (800bbf0 <HAL_RCC_OscConfig+0x26c>)
 800bb54:	4313      	orrs	r3, r2
 800bb56:	600b      	str	r3, [r1, #0]
 800bb58:	e015      	b.n	800bb86 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800bb5a:	4b26      	ldr	r3, [pc, #152]	@ (800bbf4 <HAL_RCC_OscConfig+0x270>)
 800bb5c:	2200      	movs	r2, #0
 800bb5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bb60:	f7fe fe84 	bl	800a86c <HAL_GetTick>
 800bb64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bb66:	e008      	b.n	800bb7a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bb68:	f7fe fe80 	bl	800a86c <HAL_GetTick>
 800bb6c:	4602      	mov	r2, r0
 800bb6e:	693b      	ldr	r3, [r7, #16]
 800bb70:	1ad3      	subs	r3, r2, r3
 800bb72:	2b02      	cmp	r3, #2
 800bb74:	d901      	bls.n	800bb7a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800bb76:	2303      	movs	r3, #3
 800bb78:	e180      	b.n	800be7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bb7a:	4b1d      	ldr	r3, [pc, #116]	@ (800bbf0 <HAL_RCC_OscConfig+0x26c>)
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	f003 0302 	and.w	r3, r3, #2
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d1f0      	bne.n	800bb68 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	f003 0308 	and.w	r3, r3, #8
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d03a      	beq.n	800bc08 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	699b      	ldr	r3, [r3, #24]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d019      	beq.n	800bbce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800bb9a:	4b17      	ldr	r3, [pc, #92]	@ (800bbf8 <HAL_RCC_OscConfig+0x274>)
 800bb9c:	2201      	movs	r2, #1
 800bb9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800bba0:	f7fe fe64 	bl	800a86c <HAL_GetTick>
 800bba4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bba6:	e008      	b.n	800bbba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bba8:	f7fe fe60 	bl	800a86c <HAL_GetTick>
 800bbac:	4602      	mov	r2, r0
 800bbae:	693b      	ldr	r3, [r7, #16]
 800bbb0:	1ad3      	subs	r3, r2, r3
 800bbb2:	2b02      	cmp	r3, #2
 800bbb4:	d901      	bls.n	800bbba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800bbb6:	2303      	movs	r3, #3
 800bbb8:	e160      	b.n	800be7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bbba:	4b0d      	ldr	r3, [pc, #52]	@ (800bbf0 <HAL_RCC_OscConfig+0x26c>)
 800bbbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbbe:	f003 0302 	and.w	r3, r3, #2
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d0f0      	beq.n	800bba8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800bbc6:	2001      	movs	r0, #1
 800bbc8:	f000 face 	bl	800c168 <RCC_Delay>
 800bbcc:	e01c      	b.n	800bc08 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800bbce:	4b0a      	ldr	r3, [pc, #40]	@ (800bbf8 <HAL_RCC_OscConfig+0x274>)
 800bbd0:	2200      	movs	r2, #0
 800bbd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800bbd4:	f7fe fe4a 	bl	800a86c <HAL_GetTick>
 800bbd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bbda:	e00f      	b.n	800bbfc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bbdc:	f7fe fe46 	bl	800a86c <HAL_GetTick>
 800bbe0:	4602      	mov	r2, r0
 800bbe2:	693b      	ldr	r3, [r7, #16]
 800bbe4:	1ad3      	subs	r3, r2, r3
 800bbe6:	2b02      	cmp	r3, #2
 800bbe8:	d908      	bls.n	800bbfc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800bbea:	2303      	movs	r3, #3
 800bbec:	e146      	b.n	800be7c <HAL_RCC_OscConfig+0x4f8>
 800bbee:	bf00      	nop
 800bbf0:	40021000 	.word	0x40021000
 800bbf4:	42420000 	.word	0x42420000
 800bbf8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bbfc:	4b92      	ldr	r3, [pc, #584]	@ (800be48 <HAL_RCC_OscConfig+0x4c4>)
 800bbfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc00:	f003 0302 	and.w	r3, r3, #2
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d1e9      	bne.n	800bbdc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	f003 0304 	and.w	r3, r3, #4
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	f000 80a6 	beq.w	800bd62 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800bc16:	2300      	movs	r3, #0
 800bc18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800bc1a:	4b8b      	ldr	r3, [pc, #556]	@ (800be48 <HAL_RCC_OscConfig+0x4c4>)
 800bc1c:	69db      	ldr	r3, [r3, #28]
 800bc1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d10d      	bne.n	800bc42 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bc26:	4b88      	ldr	r3, [pc, #544]	@ (800be48 <HAL_RCC_OscConfig+0x4c4>)
 800bc28:	69db      	ldr	r3, [r3, #28]
 800bc2a:	4a87      	ldr	r2, [pc, #540]	@ (800be48 <HAL_RCC_OscConfig+0x4c4>)
 800bc2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bc30:	61d3      	str	r3, [r2, #28]
 800bc32:	4b85      	ldr	r3, [pc, #532]	@ (800be48 <HAL_RCC_OscConfig+0x4c4>)
 800bc34:	69db      	ldr	r3, [r3, #28]
 800bc36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bc3a:	60bb      	str	r3, [r7, #8]
 800bc3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800bc3e:	2301      	movs	r3, #1
 800bc40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bc42:	4b82      	ldr	r3, [pc, #520]	@ (800be4c <HAL_RCC_OscConfig+0x4c8>)
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d118      	bne.n	800bc80 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800bc4e:	4b7f      	ldr	r3, [pc, #508]	@ (800be4c <HAL_RCC_OscConfig+0x4c8>)
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	4a7e      	ldr	r2, [pc, #504]	@ (800be4c <HAL_RCC_OscConfig+0x4c8>)
 800bc54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bc58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800bc5a:	f7fe fe07 	bl	800a86c <HAL_GetTick>
 800bc5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bc60:	e008      	b.n	800bc74 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bc62:	f7fe fe03 	bl	800a86c <HAL_GetTick>
 800bc66:	4602      	mov	r2, r0
 800bc68:	693b      	ldr	r3, [r7, #16]
 800bc6a:	1ad3      	subs	r3, r2, r3
 800bc6c:	2b64      	cmp	r3, #100	@ 0x64
 800bc6e:	d901      	bls.n	800bc74 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800bc70:	2303      	movs	r3, #3
 800bc72:	e103      	b.n	800be7c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bc74:	4b75      	ldr	r3, [pc, #468]	@ (800be4c <HAL_RCC_OscConfig+0x4c8>)
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d0f0      	beq.n	800bc62 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	68db      	ldr	r3, [r3, #12]
 800bc84:	2b01      	cmp	r3, #1
 800bc86:	d106      	bne.n	800bc96 <HAL_RCC_OscConfig+0x312>
 800bc88:	4b6f      	ldr	r3, [pc, #444]	@ (800be48 <HAL_RCC_OscConfig+0x4c4>)
 800bc8a:	6a1b      	ldr	r3, [r3, #32]
 800bc8c:	4a6e      	ldr	r2, [pc, #440]	@ (800be48 <HAL_RCC_OscConfig+0x4c4>)
 800bc8e:	f043 0301 	orr.w	r3, r3, #1
 800bc92:	6213      	str	r3, [r2, #32]
 800bc94:	e02d      	b.n	800bcf2 <HAL_RCC_OscConfig+0x36e>
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	68db      	ldr	r3, [r3, #12]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d10c      	bne.n	800bcb8 <HAL_RCC_OscConfig+0x334>
 800bc9e:	4b6a      	ldr	r3, [pc, #424]	@ (800be48 <HAL_RCC_OscConfig+0x4c4>)
 800bca0:	6a1b      	ldr	r3, [r3, #32]
 800bca2:	4a69      	ldr	r2, [pc, #420]	@ (800be48 <HAL_RCC_OscConfig+0x4c4>)
 800bca4:	f023 0301 	bic.w	r3, r3, #1
 800bca8:	6213      	str	r3, [r2, #32]
 800bcaa:	4b67      	ldr	r3, [pc, #412]	@ (800be48 <HAL_RCC_OscConfig+0x4c4>)
 800bcac:	6a1b      	ldr	r3, [r3, #32]
 800bcae:	4a66      	ldr	r2, [pc, #408]	@ (800be48 <HAL_RCC_OscConfig+0x4c4>)
 800bcb0:	f023 0304 	bic.w	r3, r3, #4
 800bcb4:	6213      	str	r3, [r2, #32]
 800bcb6:	e01c      	b.n	800bcf2 <HAL_RCC_OscConfig+0x36e>
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	68db      	ldr	r3, [r3, #12]
 800bcbc:	2b05      	cmp	r3, #5
 800bcbe:	d10c      	bne.n	800bcda <HAL_RCC_OscConfig+0x356>
 800bcc0:	4b61      	ldr	r3, [pc, #388]	@ (800be48 <HAL_RCC_OscConfig+0x4c4>)
 800bcc2:	6a1b      	ldr	r3, [r3, #32]
 800bcc4:	4a60      	ldr	r2, [pc, #384]	@ (800be48 <HAL_RCC_OscConfig+0x4c4>)
 800bcc6:	f043 0304 	orr.w	r3, r3, #4
 800bcca:	6213      	str	r3, [r2, #32]
 800bccc:	4b5e      	ldr	r3, [pc, #376]	@ (800be48 <HAL_RCC_OscConfig+0x4c4>)
 800bcce:	6a1b      	ldr	r3, [r3, #32]
 800bcd0:	4a5d      	ldr	r2, [pc, #372]	@ (800be48 <HAL_RCC_OscConfig+0x4c4>)
 800bcd2:	f043 0301 	orr.w	r3, r3, #1
 800bcd6:	6213      	str	r3, [r2, #32]
 800bcd8:	e00b      	b.n	800bcf2 <HAL_RCC_OscConfig+0x36e>
 800bcda:	4b5b      	ldr	r3, [pc, #364]	@ (800be48 <HAL_RCC_OscConfig+0x4c4>)
 800bcdc:	6a1b      	ldr	r3, [r3, #32]
 800bcde:	4a5a      	ldr	r2, [pc, #360]	@ (800be48 <HAL_RCC_OscConfig+0x4c4>)
 800bce0:	f023 0301 	bic.w	r3, r3, #1
 800bce4:	6213      	str	r3, [r2, #32]
 800bce6:	4b58      	ldr	r3, [pc, #352]	@ (800be48 <HAL_RCC_OscConfig+0x4c4>)
 800bce8:	6a1b      	ldr	r3, [r3, #32]
 800bcea:	4a57      	ldr	r2, [pc, #348]	@ (800be48 <HAL_RCC_OscConfig+0x4c4>)
 800bcec:	f023 0304 	bic.w	r3, r3, #4
 800bcf0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	68db      	ldr	r3, [r3, #12]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d015      	beq.n	800bd26 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800bcfa:	f7fe fdb7 	bl	800a86c <HAL_GetTick>
 800bcfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bd00:	e00a      	b.n	800bd18 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bd02:	f7fe fdb3 	bl	800a86c <HAL_GetTick>
 800bd06:	4602      	mov	r2, r0
 800bd08:	693b      	ldr	r3, [r7, #16]
 800bd0a:	1ad3      	subs	r3, r2, r3
 800bd0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bd10:	4293      	cmp	r3, r2
 800bd12:	d901      	bls.n	800bd18 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800bd14:	2303      	movs	r3, #3
 800bd16:	e0b1      	b.n	800be7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bd18:	4b4b      	ldr	r3, [pc, #300]	@ (800be48 <HAL_RCC_OscConfig+0x4c4>)
 800bd1a:	6a1b      	ldr	r3, [r3, #32]
 800bd1c:	f003 0302 	and.w	r3, r3, #2
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d0ee      	beq.n	800bd02 <HAL_RCC_OscConfig+0x37e>
 800bd24:	e014      	b.n	800bd50 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800bd26:	f7fe fda1 	bl	800a86c <HAL_GetTick>
 800bd2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bd2c:	e00a      	b.n	800bd44 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bd2e:	f7fe fd9d 	bl	800a86c <HAL_GetTick>
 800bd32:	4602      	mov	r2, r0
 800bd34:	693b      	ldr	r3, [r7, #16]
 800bd36:	1ad3      	subs	r3, r2, r3
 800bd38:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bd3c:	4293      	cmp	r3, r2
 800bd3e:	d901      	bls.n	800bd44 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800bd40:	2303      	movs	r3, #3
 800bd42:	e09b      	b.n	800be7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bd44:	4b40      	ldr	r3, [pc, #256]	@ (800be48 <HAL_RCC_OscConfig+0x4c4>)
 800bd46:	6a1b      	ldr	r3, [r3, #32]
 800bd48:	f003 0302 	and.w	r3, r3, #2
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d1ee      	bne.n	800bd2e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800bd50:	7dfb      	ldrb	r3, [r7, #23]
 800bd52:	2b01      	cmp	r3, #1
 800bd54:	d105      	bne.n	800bd62 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bd56:	4b3c      	ldr	r3, [pc, #240]	@ (800be48 <HAL_RCC_OscConfig+0x4c4>)
 800bd58:	69db      	ldr	r3, [r3, #28]
 800bd5a:	4a3b      	ldr	r2, [pc, #236]	@ (800be48 <HAL_RCC_OscConfig+0x4c4>)
 800bd5c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bd60:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	69db      	ldr	r3, [r3, #28]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	f000 8087 	beq.w	800be7a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800bd6c:	4b36      	ldr	r3, [pc, #216]	@ (800be48 <HAL_RCC_OscConfig+0x4c4>)
 800bd6e:	685b      	ldr	r3, [r3, #4]
 800bd70:	f003 030c 	and.w	r3, r3, #12
 800bd74:	2b08      	cmp	r3, #8
 800bd76:	d061      	beq.n	800be3c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	69db      	ldr	r3, [r3, #28]
 800bd7c:	2b02      	cmp	r3, #2
 800bd7e:	d146      	bne.n	800be0e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bd80:	4b33      	ldr	r3, [pc, #204]	@ (800be50 <HAL_RCC_OscConfig+0x4cc>)
 800bd82:	2200      	movs	r2, #0
 800bd84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bd86:	f7fe fd71 	bl	800a86c <HAL_GetTick>
 800bd8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800bd8c:	e008      	b.n	800bda0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bd8e:	f7fe fd6d 	bl	800a86c <HAL_GetTick>
 800bd92:	4602      	mov	r2, r0
 800bd94:	693b      	ldr	r3, [r7, #16]
 800bd96:	1ad3      	subs	r3, r2, r3
 800bd98:	2b02      	cmp	r3, #2
 800bd9a:	d901      	bls.n	800bda0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800bd9c:	2303      	movs	r3, #3
 800bd9e:	e06d      	b.n	800be7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800bda0:	4b29      	ldr	r3, [pc, #164]	@ (800be48 <HAL_RCC_OscConfig+0x4c4>)
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d1f0      	bne.n	800bd8e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	6a1b      	ldr	r3, [r3, #32]
 800bdb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bdb4:	d108      	bne.n	800bdc8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800bdb6:	4b24      	ldr	r3, [pc, #144]	@ (800be48 <HAL_RCC_OscConfig+0x4c4>)
 800bdb8:	685b      	ldr	r3, [r3, #4]
 800bdba:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	689b      	ldr	r3, [r3, #8]
 800bdc2:	4921      	ldr	r1, [pc, #132]	@ (800be48 <HAL_RCC_OscConfig+0x4c4>)
 800bdc4:	4313      	orrs	r3, r2
 800bdc6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800bdc8:	4b1f      	ldr	r3, [pc, #124]	@ (800be48 <HAL_RCC_OscConfig+0x4c4>)
 800bdca:	685b      	ldr	r3, [r3, #4]
 800bdcc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	6a19      	ldr	r1, [r3, #32]
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bdd8:	430b      	orrs	r3, r1
 800bdda:	491b      	ldr	r1, [pc, #108]	@ (800be48 <HAL_RCC_OscConfig+0x4c4>)
 800bddc:	4313      	orrs	r3, r2
 800bdde:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800bde0:	4b1b      	ldr	r3, [pc, #108]	@ (800be50 <HAL_RCC_OscConfig+0x4cc>)
 800bde2:	2201      	movs	r2, #1
 800bde4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bde6:	f7fe fd41 	bl	800a86c <HAL_GetTick>
 800bdea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800bdec:	e008      	b.n	800be00 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bdee:	f7fe fd3d 	bl	800a86c <HAL_GetTick>
 800bdf2:	4602      	mov	r2, r0
 800bdf4:	693b      	ldr	r3, [r7, #16]
 800bdf6:	1ad3      	subs	r3, r2, r3
 800bdf8:	2b02      	cmp	r3, #2
 800bdfa:	d901      	bls.n	800be00 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800bdfc:	2303      	movs	r3, #3
 800bdfe:	e03d      	b.n	800be7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800be00:	4b11      	ldr	r3, [pc, #68]	@ (800be48 <HAL_RCC_OscConfig+0x4c4>)
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d0f0      	beq.n	800bdee <HAL_RCC_OscConfig+0x46a>
 800be0c:	e035      	b.n	800be7a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800be0e:	4b10      	ldr	r3, [pc, #64]	@ (800be50 <HAL_RCC_OscConfig+0x4cc>)
 800be10:	2200      	movs	r2, #0
 800be12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800be14:	f7fe fd2a 	bl	800a86c <HAL_GetTick>
 800be18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800be1a:	e008      	b.n	800be2e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800be1c:	f7fe fd26 	bl	800a86c <HAL_GetTick>
 800be20:	4602      	mov	r2, r0
 800be22:	693b      	ldr	r3, [r7, #16]
 800be24:	1ad3      	subs	r3, r2, r3
 800be26:	2b02      	cmp	r3, #2
 800be28:	d901      	bls.n	800be2e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800be2a:	2303      	movs	r3, #3
 800be2c:	e026      	b.n	800be7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800be2e:	4b06      	ldr	r3, [pc, #24]	@ (800be48 <HAL_RCC_OscConfig+0x4c4>)
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800be36:	2b00      	cmp	r3, #0
 800be38:	d1f0      	bne.n	800be1c <HAL_RCC_OscConfig+0x498>
 800be3a:	e01e      	b.n	800be7a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	69db      	ldr	r3, [r3, #28]
 800be40:	2b01      	cmp	r3, #1
 800be42:	d107      	bne.n	800be54 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800be44:	2301      	movs	r3, #1
 800be46:	e019      	b.n	800be7c <HAL_RCC_OscConfig+0x4f8>
 800be48:	40021000 	.word	0x40021000
 800be4c:	40007000 	.word	0x40007000
 800be50:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800be54:	4b0b      	ldr	r3, [pc, #44]	@ (800be84 <HAL_RCC_OscConfig+0x500>)
 800be56:	685b      	ldr	r3, [r3, #4]
 800be58:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	6a1b      	ldr	r3, [r3, #32]
 800be64:	429a      	cmp	r2, r3
 800be66:	d106      	bne.n	800be76 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800be72:	429a      	cmp	r2, r3
 800be74:	d001      	beq.n	800be7a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800be76:	2301      	movs	r3, #1
 800be78:	e000      	b.n	800be7c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800be7a:	2300      	movs	r3, #0
}
 800be7c:	4618      	mov	r0, r3
 800be7e:	3718      	adds	r7, #24
 800be80:	46bd      	mov	sp, r7
 800be82:	bd80      	pop	{r7, pc}
 800be84:	40021000 	.word	0x40021000

0800be88 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800be88:	b580      	push	{r7, lr}
 800be8a:	b084      	sub	sp, #16
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	6078      	str	r0, [r7, #4]
 800be90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d101      	bne.n	800be9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800be98:	2301      	movs	r3, #1
 800be9a:	e0d0      	b.n	800c03e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800be9c:	4b6a      	ldr	r3, [pc, #424]	@ (800c048 <HAL_RCC_ClockConfig+0x1c0>)
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	f003 0307 	and.w	r3, r3, #7
 800bea4:	683a      	ldr	r2, [r7, #0]
 800bea6:	429a      	cmp	r2, r3
 800bea8:	d910      	bls.n	800becc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800beaa:	4b67      	ldr	r3, [pc, #412]	@ (800c048 <HAL_RCC_ClockConfig+0x1c0>)
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	f023 0207 	bic.w	r2, r3, #7
 800beb2:	4965      	ldr	r1, [pc, #404]	@ (800c048 <HAL_RCC_ClockConfig+0x1c0>)
 800beb4:	683b      	ldr	r3, [r7, #0]
 800beb6:	4313      	orrs	r3, r2
 800beb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800beba:	4b63      	ldr	r3, [pc, #396]	@ (800c048 <HAL_RCC_ClockConfig+0x1c0>)
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	f003 0307 	and.w	r3, r3, #7
 800bec2:	683a      	ldr	r2, [r7, #0]
 800bec4:	429a      	cmp	r2, r3
 800bec6:	d001      	beq.n	800becc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800bec8:	2301      	movs	r3, #1
 800beca:	e0b8      	b.n	800c03e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	f003 0302 	and.w	r3, r3, #2
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d020      	beq.n	800bf1a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	f003 0304 	and.w	r3, r3, #4
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d005      	beq.n	800bef0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800bee4:	4b59      	ldr	r3, [pc, #356]	@ (800c04c <HAL_RCC_ClockConfig+0x1c4>)
 800bee6:	685b      	ldr	r3, [r3, #4]
 800bee8:	4a58      	ldr	r2, [pc, #352]	@ (800c04c <HAL_RCC_ClockConfig+0x1c4>)
 800beea:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800beee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	f003 0308 	and.w	r3, r3, #8
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d005      	beq.n	800bf08 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800befc:	4b53      	ldr	r3, [pc, #332]	@ (800c04c <HAL_RCC_ClockConfig+0x1c4>)
 800befe:	685b      	ldr	r3, [r3, #4]
 800bf00:	4a52      	ldr	r2, [pc, #328]	@ (800c04c <HAL_RCC_ClockConfig+0x1c4>)
 800bf02:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800bf06:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bf08:	4b50      	ldr	r3, [pc, #320]	@ (800c04c <HAL_RCC_ClockConfig+0x1c4>)
 800bf0a:	685b      	ldr	r3, [r3, #4]
 800bf0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	689b      	ldr	r3, [r3, #8]
 800bf14:	494d      	ldr	r1, [pc, #308]	@ (800c04c <HAL_RCC_ClockConfig+0x1c4>)
 800bf16:	4313      	orrs	r3, r2
 800bf18:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	f003 0301 	and.w	r3, r3, #1
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d040      	beq.n	800bfa8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	685b      	ldr	r3, [r3, #4]
 800bf2a:	2b01      	cmp	r3, #1
 800bf2c:	d107      	bne.n	800bf3e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bf2e:	4b47      	ldr	r3, [pc, #284]	@ (800c04c <HAL_RCC_ClockConfig+0x1c4>)
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d115      	bne.n	800bf66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bf3a:	2301      	movs	r3, #1
 800bf3c:	e07f      	b.n	800c03e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	685b      	ldr	r3, [r3, #4]
 800bf42:	2b02      	cmp	r3, #2
 800bf44:	d107      	bne.n	800bf56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bf46:	4b41      	ldr	r3, [pc, #260]	@ (800c04c <HAL_RCC_ClockConfig+0x1c4>)
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d109      	bne.n	800bf66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bf52:	2301      	movs	r3, #1
 800bf54:	e073      	b.n	800c03e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bf56:	4b3d      	ldr	r3, [pc, #244]	@ (800c04c <HAL_RCC_ClockConfig+0x1c4>)
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	f003 0302 	and.w	r3, r3, #2
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d101      	bne.n	800bf66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bf62:	2301      	movs	r3, #1
 800bf64:	e06b      	b.n	800c03e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800bf66:	4b39      	ldr	r3, [pc, #228]	@ (800c04c <HAL_RCC_ClockConfig+0x1c4>)
 800bf68:	685b      	ldr	r3, [r3, #4]
 800bf6a:	f023 0203 	bic.w	r2, r3, #3
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	685b      	ldr	r3, [r3, #4]
 800bf72:	4936      	ldr	r1, [pc, #216]	@ (800c04c <HAL_RCC_ClockConfig+0x1c4>)
 800bf74:	4313      	orrs	r3, r2
 800bf76:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800bf78:	f7fe fc78 	bl	800a86c <HAL_GetTick>
 800bf7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bf7e:	e00a      	b.n	800bf96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bf80:	f7fe fc74 	bl	800a86c <HAL_GetTick>
 800bf84:	4602      	mov	r2, r0
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	1ad3      	subs	r3, r2, r3
 800bf8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bf8e:	4293      	cmp	r3, r2
 800bf90:	d901      	bls.n	800bf96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800bf92:	2303      	movs	r3, #3
 800bf94:	e053      	b.n	800c03e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bf96:	4b2d      	ldr	r3, [pc, #180]	@ (800c04c <HAL_RCC_ClockConfig+0x1c4>)
 800bf98:	685b      	ldr	r3, [r3, #4]
 800bf9a:	f003 020c 	and.w	r2, r3, #12
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	685b      	ldr	r3, [r3, #4]
 800bfa2:	009b      	lsls	r3, r3, #2
 800bfa4:	429a      	cmp	r2, r3
 800bfa6:	d1eb      	bne.n	800bf80 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800bfa8:	4b27      	ldr	r3, [pc, #156]	@ (800c048 <HAL_RCC_ClockConfig+0x1c0>)
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	f003 0307 	and.w	r3, r3, #7
 800bfb0:	683a      	ldr	r2, [r7, #0]
 800bfb2:	429a      	cmp	r2, r3
 800bfb4:	d210      	bcs.n	800bfd8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bfb6:	4b24      	ldr	r3, [pc, #144]	@ (800c048 <HAL_RCC_ClockConfig+0x1c0>)
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	f023 0207 	bic.w	r2, r3, #7
 800bfbe:	4922      	ldr	r1, [pc, #136]	@ (800c048 <HAL_RCC_ClockConfig+0x1c0>)
 800bfc0:	683b      	ldr	r3, [r7, #0]
 800bfc2:	4313      	orrs	r3, r2
 800bfc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bfc6:	4b20      	ldr	r3, [pc, #128]	@ (800c048 <HAL_RCC_ClockConfig+0x1c0>)
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	f003 0307 	and.w	r3, r3, #7
 800bfce:	683a      	ldr	r2, [r7, #0]
 800bfd0:	429a      	cmp	r2, r3
 800bfd2:	d001      	beq.n	800bfd8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800bfd4:	2301      	movs	r3, #1
 800bfd6:	e032      	b.n	800c03e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	f003 0304 	and.w	r3, r3, #4
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d008      	beq.n	800bff6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800bfe4:	4b19      	ldr	r3, [pc, #100]	@ (800c04c <HAL_RCC_ClockConfig+0x1c4>)
 800bfe6:	685b      	ldr	r3, [r3, #4]
 800bfe8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	68db      	ldr	r3, [r3, #12]
 800bff0:	4916      	ldr	r1, [pc, #88]	@ (800c04c <HAL_RCC_ClockConfig+0x1c4>)
 800bff2:	4313      	orrs	r3, r2
 800bff4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	f003 0308 	and.w	r3, r3, #8
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d009      	beq.n	800c016 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800c002:	4b12      	ldr	r3, [pc, #72]	@ (800c04c <HAL_RCC_ClockConfig+0x1c4>)
 800c004:	685b      	ldr	r3, [r3, #4]
 800c006:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	691b      	ldr	r3, [r3, #16]
 800c00e:	00db      	lsls	r3, r3, #3
 800c010:	490e      	ldr	r1, [pc, #56]	@ (800c04c <HAL_RCC_ClockConfig+0x1c4>)
 800c012:	4313      	orrs	r3, r2
 800c014:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800c016:	f000 f821 	bl	800c05c <HAL_RCC_GetSysClockFreq>
 800c01a:	4602      	mov	r2, r0
 800c01c:	4b0b      	ldr	r3, [pc, #44]	@ (800c04c <HAL_RCC_ClockConfig+0x1c4>)
 800c01e:	685b      	ldr	r3, [r3, #4]
 800c020:	091b      	lsrs	r3, r3, #4
 800c022:	f003 030f 	and.w	r3, r3, #15
 800c026:	490a      	ldr	r1, [pc, #40]	@ (800c050 <HAL_RCC_ClockConfig+0x1c8>)
 800c028:	5ccb      	ldrb	r3, [r1, r3]
 800c02a:	fa22 f303 	lsr.w	r3, r2, r3
 800c02e:	4a09      	ldr	r2, [pc, #36]	@ (800c054 <HAL_RCC_ClockConfig+0x1cc>)
 800c030:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800c032:	4b09      	ldr	r3, [pc, #36]	@ (800c058 <HAL_RCC_ClockConfig+0x1d0>)
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	4618      	mov	r0, r3
 800c038:	f7fe fbd6 	bl	800a7e8 <HAL_InitTick>

  return HAL_OK;
 800c03c:	2300      	movs	r3, #0
}
 800c03e:	4618      	mov	r0, r3
 800c040:	3710      	adds	r7, #16
 800c042:	46bd      	mov	sp, r7
 800c044:	bd80      	pop	{r7, pc}
 800c046:	bf00      	nop
 800c048:	40022000 	.word	0x40022000
 800c04c:	40021000 	.word	0x40021000
 800c050:	08010fcc 	.word	0x08010fcc
 800c054:	20000034 	.word	0x20000034
 800c058:	20000038 	.word	0x20000038

0800c05c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c05c:	b480      	push	{r7}
 800c05e:	b087      	sub	sp, #28
 800c060:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800c062:	2300      	movs	r3, #0
 800c064:	60fb      	str	r3, [r7, #12]
 800c066:	2300      	movs	r3, #0
 800c068:	60bb      	str	r3, [r7, #8]
 800c06a:	2300      	movs	r3, #0
 800c06c:	617b      	str	r3, [r7, #20]
 800c06e:	2300      	movs	r3, #0
 800c070:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800c072:	2300      	movs	r3, #0
 800c074:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800c076:	4b1e      	ldr	r3, [pc, #120]	@ (800c0f0 <HAL_RCC_GetSysClockFreq+0x94>)
 800c078:	685b      	ldr	r3, [r3, #4]
 800c07a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	f003 030c 	and.w	r3, r3, #12
 800c082:	2b04      	cmp	r3, #4
 800c084:	d002      	beq.n	800c08c <HAL_RCC_GetSysClockFreq+0x30>
 800c086:	2b08      	cmp	r3, #8
 800c088:	d003      	beq.n	800c092 <HAL_RCC_GetSysClockFreq+0x36>
 800c08a:	e027      	b.n	800c0dc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800c08c:	4b19      	ldr	r3, [pc, #100]	@ (800c0f4 <HAL_RCC_GetSysClockFreq+0x98>)
 800c08e:	613b      	str	r3, [r7, #16]
      break;
 800c090:	e027      	b.n	800c0e2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	0c9b      	lsrs	r3, r3, #18
 800c096:	f003 030f 	and.w	r3, r3, #15
 800c09a:	4a17      	ldr	r2, [pc, #92]	@ (800c0f8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800c09c:	5cd3      	ldrb	r3, [r2, r3]
 800c09e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d010      	beq.n	800c0cc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800c0aa:	4b11      	ldr	r3, [pc, #68]	@ (800c0f0 <HAL_RCC_GetSysClockFreq+0x94>)
 800c0ac:	685b      	ldr	r3, [r3, #4]
 800c0ae:	0c5b      	lsrs	r3, r3, #17
 800c0b0:	f003 0301 	and.w	r3, r3, #1
 800c0b4:	4a11      	ldr	r2, [pc, #68]	@ (800c0fc <HAL_RCC_GetSysClockFreq+0xa0>)
 800c0b6:	5cd3      	ldrb	r3, [r2, r3]
 800c0b8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	4a0d      	ldr	r2, [pc, #52]	@ (800c0f4 <HAL_RCC_GetSysClockFreq+0x98>)
 800c0be:	fb03 f202 	mul.w	r2, r3, r2
 800c0c2:	68bb      	ldr	r3, [r7, #8]
 800c0c4:	fbb2 f3f3 	udiv	r3, r2, r3
 800c0c8:	617b      	str	r3, [r7, #20]
 800c0ca:	e004      	b.n	800c0d6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	4a0c      	ldr	r2, [pc, #48]	@ (800c100 <HAL_RCC_GetSysClockFreq+0xa4>)
 800c0d0:	fb02 f303 	mul.w	r3, r2, r3
 800c0d4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800c0d6:	697b      	ldr	r3, [r7, #20]
 800c0d8:	613b      	str	r3, [r7, #16]
      break;
 800c0da:	e002      	b.n	800c0e2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800c0dc:	4b05      	ldr	r3, [pc, #20]	@ (800c0f4 <HAL_RCC_GetSysClockFreq+0x98>)
 800c0de:	613b      	str	r3, [r7, #16]
      break;
 800c0e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c0e2:	693b      	ldr	r3, [r7, #16]
}
 800c0e4:	4618      	mov	r0, r3
 800c0e6:	371c      	adds	r7, #28
 800c0e8:	46bd      	mov	sp, r7
 800c0ea:	bc80      	pop	{r7}
 800c0ec:	4770      	bx	lr
 800c0ee:	bf00      	nop
 800c0f0:	40021000 	.word	0x40021000
 800c0f4:	007a1200 	.word	0x007a1200
 800c0f8:	08010fe4 	.word	0x08010fe4
 800c0fc:	08010ff4 	.word	0x08010ff4
 800c100:	003d0900 	.word	0x003d0900

0800c104 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c104:	b480      	push	{r7}
 800c106:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c108:	4b02      	ldr	r3, [pc, #8]	@ (800c114 <HAL_RCC_GetHCLKFreq+0x10>)
 800c10a:	681b      	ldr	r3, [r3, #0]
}
 800c10c:	4618      	mov	r0, r3
 800c10e:	46bd      	mov	sp, r7
 800c110:	bc80      	pop	{r7}
 800c112:	4770      	bx	lr
 800c114:	20000034 	.word	0x20000034

0800c118 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c118:	b580      	push	{r7, lr}
 800c11a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800c11c:	f7ff fff2 	bl	800c104 <HAL_RCC_GetHCLKFreq>
 800c120:	4602      	mov	r2, r0
 800c122:	4b05      	ldr	r3, [pc, #20]	@ (800c138 <HAL_RCC_GetPCLK1Freq+0x20>)
 800c124:	685b      	ldr	r3, [r3, #4]
 800c126:	0a1b      	lsrs	r3, r3, #8
 800c128:	f003 0307 	and.w	r3, r3, #7
 800c12c:	4903      	ldr	r1, [pc, #12]	@ (800c13c <HAL_RCC_GetPCLK1Freq+0x24>)
 800c12e:	5ccb      	ldrb	r3, [r1, r3]
 800c130:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c134:	4618      	mov	r0, r3
 800c136:	bd80      	pop	{r7, pc}
 800c138:	40021000 	.word	0x40021000
 800c13c:	08010fdc 	.word	0x08010fdc

0800c140 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c140:	b580      	push	{r7, lr}
 800c142:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800c144:	f7ff ffde 	bl	800c104 <HAL_RCC_GetHCLKFreq>
 800c148:	4602      	mov	r2, r0
 800c14a:	4b05      	ldr	r3, [pc, #20]	@ (800c160 <HAL_RCC_GetPCLK2Freq+0x20>)
 800c14c:	685b      	ldr	r3, [r3, #4]
 800c14e:	0adb      	lsrs	r3, r3, #11
 800c150:	f003 0307 	and.w	r3, r3, #7
 800c154:	4903      	ldr	r1, [pc, #12]	@ (800c164 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c156:	5ccb      	ldrb	r3, [r1, r3]
 800c158:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c15c:	4618      	mov	r0, r3
 800c15e:	bd80      	pop	{r7, pc}
 800c160:	40021000 	.word	0x40021000
 800c164:	08010fdc 	.word	0x08010fdc

0800c168 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800c168:	b480      	push	{r7}
 800c16a:	b085      	sub	sp, #20
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800c170:	4b0a      	ldr	r3, [pc, #40]	@ (800c19c <RCC_Delay+0x34>)
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	4a0a      	ldr	r2, [pc, #40]	@ (800c1a0 <RCC_Delay+0x38>)
 800c176:	fba2 2303 	umull	r2, r3, r2, r3
 800c17a:	0a5b      	lsrs	r3, r3, #9
 800c17c:	687a      	ldr	r2, [r7, #4]
 800c17e:	fb02 f303 	mul.w	r3, r2, r3
 800c182:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800c184:	bf00      	nop
  }
  while (Delay --);
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	1e5a      	subs	r2, r3, #1
 800c18a:	60fa      	str	r2, [r7, #12]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d1f9      	bne.n	800c184 <RCC_Delay+0x1c>
}
 800c190:	bf00      	nop
 800c192:	bf00      	nop
 800c194:	3714      	adds	r7, #20
 800c196:	46bd      	mov	sp, r7
 800c198:	bc80      	pop	{r7}
 800c19a:	4770      	bx	lr
 800c19c:	20000034 	.word	0x20000034
 800c1a0:	10624dd3 	.word	0x10624dd3

0800c1a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	b082      	sub	sp, #8
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d101      	bne.n	800c1b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c1b2:	2301      	movs	r3, #1
 800c1b4:	e041      	b.n	800c23a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c1bc:	b2db      	uxtb	r3, r3
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d106      	bne.n	800c1d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	2200      	movs	r2, #0
 800c1c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c1ca:	6878      	ldr	r0, [r7, #4]
 800c1cc:	f7fe f8a8 	bl	800a320 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	2202      	movs	r2, #2
 800c1d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	681a      	ldr	r2, [r3, #0]
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	3304      	adds	r3, #4
 800c1e0:	4619      	mov	r1, r3
 800c1e2:	4610      	mov	r0, r2
 800c1e4:	f000 fe04 	bl	800cdf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	2201      	movs	r2, #1
 800c1ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	2201      	movs	r2, #1
 800c1f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	2201      	movs	r2, #1
 800c1fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	2201      	movs	r2, #1
 800c204:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	2201      	movs	r2, #1
 800c20c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	2201      	movs	r2, #1
 800c214:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	2201      	movs	r2, #1
 800c21c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	2201      	movs	r2, #1
 800c224:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	2201      	movs	r2, #1
 800c22c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	2201      	movs	r2, #1
 800c234:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c238:	2300      	movs	r3, #0
}
 800c23a:	4618      	mov	r0, r3
 800c23c:	3708      	adds	r7, #8
 800c23e:	46bd      	mov	sp, r7
 800c240:	bd80      	pop	{r7, pc}

0800c242 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c242:	b580      	push	{r7, lr}
 800c244:	b082      	sub	sp, #8
 800c246:	af00      	add	r7, sp, #0
 800c248:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d101      	bne.n	800c254 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c250:	2301      	movs	r3, #1
 800c252:	e041      	b.n	800c2d8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c25a:	b2db      	uxtb	r3, r3
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d106      	bne.n	800c26e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	2200      	movs	r2, #0
 800c264:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c268:	6878      	ldr	r0, [r7, #4]
 800c26a:	f000 f839 	bl	800c2e0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	2202      	movs	r2, #2
 800c272:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	681a      	ldr	r2, [r3, #0]
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	3304      	adds	r3, #4
 800c27e:	4619      	mov	r1, r3
 800c280:	4610      	mov	r0, r2
 800c282:	f000 fdb5 	bl	800cdf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	2201      	movs	r2, #1
 800c28a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	2201      	movs	r2, #1
 800c292:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	2201      	movs	r2, #1
 800c29a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	2201      	movs	r2, #1
 800c2a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	2201      	movs	r2, #1
 800c2aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	2201      	movs	r2, #1
 800c2b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	2201      	movs	r2, #1
 800c2ba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	2201      	movs	r2, #1
 800c2c2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	2201      	movs	r2, #1
 800c2ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	2201      	movs	r2, #1
 800c2d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c2d6:	2300      	movs	r3, #0
}
 800c2d8:	4618      	mov	r0, r3
 800c2da:	3708      	adds	r7, #8
 800c2dc:	46bd      	mov	sp, r7
 800c2de:	bd80      	pop	{r7, pc}

0800c2e0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800c2e0:	b480      	push	{r7}
 800c2e2:	b083      	sub	sp, #12
 800c2e4:	af00      	add	r7, sp, #0
 800c2e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800c2e8:	bf00      	nop
 800c2ea:	370c      	adds	r7, #12
 800c2ec:	46bd      	mov	sp, r7
 800c2ee:	bc80      	pop	{r7}
 800c2f0:	4770      	bx	lr
	...

0800c2f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c2f4:	b580      	push	{r7, lr}
 800c2f6:	b084      	sub	sp, #16
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	6078      	str	r0, [r7, #4]
 800c2fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c2fe:	683b      	ldr	r3, [r7, #0]
 800c300:	2b00      	cmp	r3, #0
 800c302:	d109      	bne.n	800c318 <HAL_TIM_PWM_Start+0x24>
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800c30a:	b2db      	uxtb	r3, r3
 800c30c:	2b01      	cmp	r3, #1
 800c30e:	bf14      	ite	ne
 800c310:	2301      	movne	r3, #1
 800c312:	2300      	moveq	r3, #0
 800c314:	b2db      	uxtb	r3, r3
 800c316:	e022      	b.n	800c35e <HAL_TIM_PWM_Start+0x6a>
 800c318:	683b      	ldr	r3, [r7, #0]
 800c31a:	2b04      	cmp	r3, #4
 800c31c:	d109      	bne.n	800c332 <HAL_TIM_PWM_Start+0x3e>
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800c324:	b2db      	uxtb	r3, r3
 800c326:	2b01      	cmp	r3, #1
 800c328:	bf14      	ite	ne
 800c32a:	2301      	movne	r3, #1
 800c32c:	2300      	moveq	r3, #0
 800c32e:	b2db      	uxtb	r3, r3
 800c330:	e015      	b.n	800c35e <HAL_TIM_PWM_Start+0x6a>
 800c332:	683b      	ldr	r3, [r7, #0]
 800c334:	2b08      	cmp	r3, #8
 800c336:	d109      	bne.n	800c34c <HAL_TIM_PWM_Start+0x58>
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c33e:	b2db      	uxtb	r3, r3
 800c340:	2b01      	cmp	r3, #1
 800c342:	bf14      	ite	ne
 800c344:	2301      	movne	r3, #1
 800c346:	2300      	moveq	r3, #0
 800c348:	b2db      	uxtb	r3, r3
 800c34a:	e008      	b.n	800c35e <HAL_TIM_PWM_Start+0x6a>
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c352:	b2db      	uxtb	r3, r3
 800c354:	2b01      	cmp	r3, #1
 800c356:	bf14      	ite	ne
 800c358:	2301      	movne	r3, #1
 800c35a:	2300      	moveq	r3, #0
 800c35c:	b2db      	uxtb	r3, r3
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d001      	beq.n	800c366 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800c362:	2301      	movs	r3, #1
 800c364:	e072      	b.n	800c44c <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c366:	683b      	ldr	r3, [r7, #0]
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d104      	bne.n	800c376 <HAL_TIM_PWM_Start+0x82>
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	2202      	movs	r2, #2
 800c370:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c374:	e013      	b.n	800c39e <HAL_TIM_PWM_Start+0xaa>
 800c376:	683b      	ldr	r3, [r7, #0]
 800c378:	2b04      	cmp	r3, #4
 800c37a:	d104      	bne.n	800c386 <HAL_TIM_PWM_Start+0x92>
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	2202      	movs	r2, #2
 800c380:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c384:	e00b      	b.n	800c39e <HAL_TIM_PWM_Start+0xaa>
 800c386:	683b      	ldr	r3, [r7, #0]
 800c388:	2b08      	cmp	r3, #8
 800c38a:	d104      	bne.n	800c396 <HAL_TIM_PWM_Start+0xa2>
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	2202      	movs	r2, #2
 800c390:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c394:	e003      	b.n	800c39e <HAL_TIM_PWM_Start+0xaa>
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	2202      	movs	r2, #2
 800c39a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	2201      	movs	r2, #1
 800c3a4:	6839      	ldr	r1, [r7, #0]
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	f001 f8f7 	bl	800d59a <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	4a28      	ldr	r2, [pc, #160]	@ (800c454 <HAL_TIM_PWM_Start+0x160>)
 800c3b2:	4293      	cmp	r3, r2
 800c3b4:	d004      	beq.n	800c3c0 <HAL_TIM_PWM_Start+0xcc>
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	4a27      	ldr	r2, [pc, #156]	@ (800c458 <HAL_TIM_PWM_Start+0x164>)
 800c3bc:	4293      	cmp	r3, r2
 800c3be:	d101      	bne.n	800c3c4 <HAL_TIM_PWM_Start+0xd0>
 800c3c0:	2301      	movs	r3, #1
 800c3c2:	e000      	b.n	800c3c6 <HAL_TIM_PWM_Start+0xd2>
 800c3c4:	2300      	movs	r3, #0
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d007      	beq.n	800c3da <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800c3d8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	4a1d      	ldr	r2, [pc, #116]	@ (800c454 <HAL_TIM_PWM_Start+0x160>)
 800c3e0:	4293      	cmp	r3, r2
 800c3e2:	d018      	beq.n	800c416 <HAL_TIM_PWM_Start+0x122>
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	4a1b      	ldr	r2, [pc, #108]	@ (800c458 <HAL_TIM_PWM_Start+0x164>)
 800c3ea:	4293      	cmp	r3, r2
 800c3ec:	d013      	beq.n	800c416 <HAL_TIM_PWM_Start+0x122>
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c3f6:	d00e      	beq.n	800c416 <HAL_TIM_PWM_Start+0x122>
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	4a17      	ldr	r2, [pc, #92]	@ (800c45c <HAL_TIM_PWM_Start+0x168>)
 800c3fe:	4293      	cmp	r3, r2
 800c400:	d009      	beq.n	800c416 <HAL_TIM_PWM_Start+0x122>
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	4a16      	ldr	r2, [pc, #88]	@ (800c460 <HAL_TIM_PWM_Start+0x16c>)
 800c408:	4293      	cmp	r3, r2
 800c40a:	d004      	beq.n	800c416 <HAL_TIM_PWM_Start+0x122>
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	4a14      	ldr	r2, [pc, #80]	@ (800c464 <HAL_TIM_PWM_Start+0x170>)
 800c412:	4293      	cmp	r3, r2
 800c414:	d111      	bne.n	800c43a <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	689b      	ldr	r3, [r3, #8]
 800c41c:	f003 0307 	and.w	r3, r3, #7
 800c420:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	2b06      	cmp	r3, #6
 800c426:	d010      	beq.n	800c44a <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	681a      	ldr	r2, [r3, #0]
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	f042 0201 	orr.w	r2, r2, #1
 800c436:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c438:	e007      	b.n	800c44a <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	681a      	ldr	r2, [r3, #0]
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	f042 0201 	orr.w	r2, r2, #1
 800c448:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c44a:	2300      	movs	r3, #0
}
 800c44c:	4618      	mov	r0, r3
 800c44e:	3710      	adds	r7, #16
 800c450:	46bd      	mov	sp, r7
 800c452:	bd80      	pop	{r7, pc}
 800c454:	40012c00 	.word	0x40012c00
 800c458:	40013400 	.word	0x40013400
 800c45c:	40000400 	.word	0x40000400
 800c460:	40000800 	.word	0x40000800
 800c464:	40000c00 	.word	0x40000c00

0800c468 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800c468:	b580      	push	{r7, lr}
 800c46a:	b082      	sub	sp, #8
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	2b00      	cmp	r3, #0
 800c474:	d101      	bne.n	800c47a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800c476:	2301      	movs	r3, #1
 800c478:	e041      	b.n	800c4fe <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c480:	b2db      	uxtb	r3, r3
 800c482:	2b00      	cmp	r3, #0
 800c484:	d106      	bne.n	800c494 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	2200      	movs	r2, #0
 800c48a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800c48e:	6878      	ldr	r0, [r7, #4]
 800c490:	f000 f839 	bl	800c506 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	2202      	movs	r2, #2
 800c498:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	681a      	ldr	r2, [r3, #0]
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	3304      	adds	r3, #4
 800c4a4:	4619      	mov	r1, r3
 800c4a6:	4610      	mov	r0, r2
 800c4a8:	f000 fca2 	bl	800cdf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	2201      	movs	r2, #1
 800c4b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	2201      	movs	r2, #1
 800c4b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	2201      	movs	r2, #1
 800c4c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	2201      	movs	r2, #1
 800c4c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	2201      	movs	r2, #1
 800c4d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	2201      	movs	r2, #1
 800c4d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	2201      	movs	r2, #1
 800c4e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	2201      	movs	r2, #1
 800c4e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	2201      	movs	r2, #1
 800c4f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	2201      	movs	r2, #1
 800c4f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c4fc:	2300      	movs	r3, #0
}
 800c4fe:	4618      	mov	r0, r3
 800c500:	3708      	adds	r7, #8
 800c502:	46bd      	mov	sp, r7
 800c504:	bd80      	pop	{r7, pc}

0800c506 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800c506:	b480      	push	{r7}
 800c508:	b083      	sub	sp, #12
 800c50a:	af00      	add	r7, sp, #0
 800c50c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800c50e:	bf00      	nop
 800c510:	370c      	adds	r7, #12
 800c512:	46bd      	mov	sp, r7
 800c514:	bc80      	pop	{r7}
 800c516:	4770      	bx	lr

0800c518 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c518:	b580      	push	{r7, lr}
 800c51a:	b084      	sub	sp, #16
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	6078      	str	r0, [r7, #4]
 800c520:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c522:	2300      	movs	r3, #0
 800c524:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800c526:	683b      	ldr	r3, [r7, #0]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d104      	bne.n	800c536 <HAL_TIM_IC_Start_IT+0x1e>
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800c532:	b2db      	uxtb	r3, r3
 800c534:	e013      	b.n	800c55e <HAL_TIM_IC_Start_IT+0x46>
 800c536:	683b      	ldr	r3, [r7, #0]
 800c538:	2b04      	cmp	r3, #4
 800c53a:	d104      	bne.n	800c546 <HAL_TIM_IC_Start_IT+0x2e>
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800c542:	b2db      	uxtb	r3, r3
 800c544:	e00b      	b.n	800c55e <HAL_TIM_IC_Start_IT+0x46>
 800c546:	683b      	ldr	r3, [r7, #0]
 800c548:	2b08      	cmp	r3, #8
 800c54a:	d104      	bne.n	800c556 <HAL_TIM_IC_Start_IT+0x3e>
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c552:	b2db      	uxtb	r3, r3
 800c554:	e003      	b.n	800c55e <HAL_TIM_IC_Start_IT+0x46>
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c55c:	b2db      	uxtb	r3, r3
 800c55e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800c560:	683b      	ldr	r3, [r7, #0]
 800c562:	2b00      	cmp	r3, #0
 800c564:	d104      	bne.n	800c570 <HAL_TIM_IC_Start_IT+0x58>
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c56c:	b2db      	uxtb	r3, r3
 800c56e:	e013      	b.n	800c598 <HAL_TIM_IC_Start_IT+0x80>
 800c570:	683b      	ldr	r3, [r7, #0]
 800c572:	2b04      	cmp	r3, #4
 800c574:	d104      	bne.n	800c580 <HAL_TIM_IC_Start_IT+0x68>
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800c57c:	b2db      	uxtb	r3, r3
 800c57e:	e00b      	b.n	800c598 <HAL_TIM_IC_Start_IT+0x80>
 800c580:	683b      	ldr	r3, [r7, #0]
 800c582:	2b08      	cmp	r3, #8
 800c584:	d104      	bne.n	800c590 <HAL_TIM_IC_Start_IT+0x78>
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c58c:	b2db      	uxtb	r3, r3
 800c58e:	e003      	b.n	800c598 <HAL_TIM_IC_Start_IT+0x80>
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c596:	b2db      	uxtb	r3, r3
 800c598:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800c59a:	7bbb      	ldrb	r3, [r7, #14]
 800c59c:	2b01      	cmp	r3, #1
 800c59e:	d102      	bne.n	800c5a6 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800c5a0:	7b7b      	ldrb	r3, [r7, #13]
 800c5a2:	2b01      	cmp	r3, #1
 800c5a4:	d001      	beq.n	800c5aa <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800c5a6:	2301      	movs	r3, #1
 800c5a8:	e0c2      	b.n	800c730 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c5aa:	683b      	ldr	r3, [r7, #0]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d104      	bne.n	800c5ba <HAL_TIM_IC_Start_IT+0xa2>
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	2202      	movs	r2, #2
 800c5b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c5b8:	e013      	b.n	800c5e2 <HAL_TIM_IC_Start_IT+0xca>
 800c5ba:	683b      	ldr	r3, [r7, #0]
 800c5bc:	2b04      	cmp	r3, #4
 800c5be:	d104      	bne.n	800c5ca <HAL_TIM_IC_Start_IT+0xb2>
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	2202      	movs	r2, #2
 800c5c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c5c8:	e00b      	b.n	800c5e2 <HAL_TIM_IC_Start_IT+0xca>
 800c5ca:	683b      	ldr	r3, [r7, #0]
 800c5cc:	2b08      	cmp	r3, #8
 800c5ce:	d104      	bne.n	800c5da <HAL_TIM_IC_Start_IT+0xc2>
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	2202      	movs	r2, #2
 800c5d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c5d8:	e003      	b.n	800c5e2 <HAL_TIM_IC_Start_IT+0xca>
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	2202      	movs	r2, #2
 800c5de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c5e2:	683b      	ldr	r3, [r7, #0]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d104      	bne.n	800c5f2 <HAL_TIM_IC_Start_IT+0xda>
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	2202      	movs	r2, #2
 800c5ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c5f0:	e013      	b.n	800c61a <HAL_TIM_IC_Start_IT+0x102>
 800c5f2:	683b      	ldr	r3, [r7, #0]
 800c5f4:	2b04      	cmp	r3, #4
 800c5f6:	d104      	bne.n	800c602 <HAL_TIM_IC_Start_IT+0xea>
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	2202      	movs	r2, #2
 800c5fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c600:	e00b      	b.n	800c61a <HAL_TIM_IC_Start_IT+0x102>
 800c602:	683b      	ldr	r3, [r7, #0]
 800c604:	2b08      	cmp	r3, #8
 800c606:	d104      	bne.n	800c612 <HAL_TIM_IC_Start_IT+0xfa>
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	2202      	movs	r2, #2
 800c60c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c610:	e003      	b.n	800c61a <HAL_TIM_IC_Start_IT+0x102>
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	2202      	movs	r2, #2
 800c616:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 800c61a:	683b      	ldr	r3, [r7, #0]
 800c61c:	2b0c      	cmp	r3, #12
 800c61e:	d841      	bhi.n	800c6a4 <HAL_TIM_IC_Start_IT+0x18c>
 800c620:	a201      	add	r2, pc, #4	@ (adr r2, 800c628 <HAL_TIM_IC_Start_IT+0x110>)
 800c622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c626:	bf00      	nop
 800c628:	0800c65d 	.word	0x0800c65d
 800c62c:	0800c6a5 	.word	0x0800c6a5
 800c630:	0800c6a5 	.word	0x0800c6a5
 800c634:	0800c6a5 	.word	0x0800c6a5
 800c638:	0800c66f 	.word	0x0800c66f
 800c63c:	0800c6a5 	.word	0x0800c6a5
 800c640:	0800c6a5 	.word	0x0800c6a5
 800c644:	0800c6a5 	.word	0x0800c6a5
 800c648:	0800c681 	.word	0x0800c681
 800c64c:	0800c6a5 	.word	0x0800c6a5
 800c650:	0800c6a5 	.word	0x0800c6a5
 800c654:	0800c6a5 	.word	0x0800c6a5
 800c658:	0800c693 	.word	0x0800c693
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	68da      	ldr	r2, [r3, #12]
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	f042 0202 	orr.w	r2, r2, #2
 800c66a:	60da      	str	r2, [r3, #12]
      break;
 800c66c:	e01d      	b.n	800c6aa <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	68da      	ldr	r2, [r3, #12]
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	f042 0204 	orr.w	r2, r2, #4
 800c67c:	60da      	str	r2, [r3, #12]
      break;
 800c67e:	e014      	b.n	800c6aa <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	68da      	ldr	r2, [r3, #12]
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	f042 0208 	orr.w	r2, r2, #8
 800c68e:	60da      	str	r2, [r3, #12]
      break;
 800c690:	e00b      	b.n	800c6aa <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	68da      	ldr	r2, [r3, #12]
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	f042 0210 	orr.w	r2, r2, #16
 800c6a0:	60da      	str	r2, [r3, #12]
      break;
 800c6a2:	e002      	b.n	800c6aa <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800c6a4:	2301      	movs	r3, #1
 800c6a6:	73fb      	strb	r3, [r7, #15]
      break;
 800c6a8:	bf00      	nop
  }

  if (status == HAL_OK)
 800c6aa:	7bfb      	ldrb	r3, [r7, #15]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d13e      	bne.n	800c72e <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	2201      	movs	r2, #1
 800c6b6:	6839      	ldr	r1, [r7, #0]
 800c6b8:	4618      	mov	r0, r3
 800c6ba:	f000 ff6e 	bl	800d59a <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	4a1d      	ldr	r2, [pc, #116]	@ (800c738 <HAL_TIM_IC_Start_IT+0x220>)
 800c6c4:	4293      	cmp	r3, r2
 800c6c6:	d018      	beq.n	800c6fa <HAL_TIM_IC_Start_IT+0x1e2>
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	4a1b      	ldr	r2, [pc, #108]	@ (800c73c <HAL_TIM_IC_Start_IT+0x224>)
 800c6ce:	4293      	cmp	r3, r2
 800c6d0:	d013      	beq.n	800c6fa <HAL_TIM_IC_Start_IT+0x1e2>
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c6da:	d00e      	beq.n	800c6fa <HAL_TIM_IC_Start_IT+0x1e2>
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	4a17      	ldr	r2, [pc, #92]	@ (800c740 <HAL_TIM_IC_Start_IT+0x228>)
 800c6e2:	4293      	cmp	r3, r2
 800c6e4:	d009      	beq.n	800c6fa <HAL_TIM_IC_Start_IT+0x1e2>
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	4a16      	ldr	r2, [pc, #88]	@ (800c744 <HAL_TIM_IC_Start_IT+0x22c>)
 800c6ec:	4293      	cmp	r3, r2
 800c6ee:	d004      	beq.n	800c6fa <HAL_TIM_IC_Start_IT+0x1e2>
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	4a14      	ldr	r2, [pc, #80]	@ (800c748 <HAL_TIM_IC_Start_IT+0x230>)
 800c6f6:	4293      	cmp	r3, r2
 800c6f8:	d111      	bne.n	800c71e <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	689b      	ldr	r3, [r3, #8]
 800c700:	f003 0307 	and.w	r3, r3, #7
 800c704:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c706:	68bb      	ldr	r3, [r7, #8]
 800c708:	2b06      	cmp	r3, #6
 800c70a:	d010      	beq.n	800c72e <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	681a      	ldr	r2, [r3, #0]
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	f042 0201 	orr.w	r2, r2, #1
 800c71a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c71c:	e007      	b.n	800c72e <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	681a      	ldr	r2, [r3, #0]
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	f042 0201 	orr.w	r2, r2, #1
 800c72c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800c72e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c730:	4618      	mov	r0, r3
 800c732:	3710      	adds	r7, #16
 800c734:	46bd      	mov	sp, r7
 800c736:	bd80      	pop	{r7, pc}
 800c738:	40012c00 	.word	0x40012c00
 800c73c:	40013400 	.word	0x40013400
 800c740:	40000400 	.word	0x40000400
 800c744:	40000800 	.word	0x40000800
 800c748:	40000c00 	.word	0x40000c00

0800c74c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c74c:	b580      	push	{r7, lr}
 800c74e:	b082      	sub	sp, #8
 800c750:	af00      	add	r7, sp, #0
 800c752:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	691b      	ldr	r3, [r3, #16]
 800c75a:	f003 0302 	and.w	r3, r3, #2
 800c75e:	2b02      	cmp	r3, #2
 800c760:	d122      	bne.n	800c7a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	68db      	ldr	r3, [r3, #12]
 800c768:	f003 0302 	and.w	r3, r3, #2
 800c76c:	2b02      	cmp	r3, #2
 800c76e:	d11b      	bne.n	800c7a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	f06f 0202 	mvn.w	r2, #2
 800c778:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	2201      	movs	r2, #1
 800c77e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	699b      	ldr	r3, [r3, #24]
 800c786:	f003 0303 	and.w	r3, r3, #3
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d003      	beq.n	800c796 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c78e:	6878      	ldr	r0, [r7, #4]
 800c790:	f7fb fb24 	bl	8007ddc <HAL_TIM_IC_CaptureCallback>
 800c794:	e005      	b.n	800c7a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c796:	6878      	ldr	r0, [r7, #4]
 800c798:	f000 fb0e 	bl	800cdb8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c79c:	6878      	ldr	r0, [r7, #4]
 800c79e:	f000 fb14 	bl	800cdca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	2200      	movs	r2, #0
 800c7a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	691b      	ldr	r3, [r3, #16]
 800c7ae:	f003 0304 	and.w	r3, r3, #4
 800c7b2:	2b04      	cmp	r3, #4
 800c7b4:	d122      	bne.n	800c7fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	68db      	ldr	r3, [r3, #12]
 800c7bc:	f003 0304 	and.w	r3, r3, #4
 800c7c0:	2b04      	cmp	r3, #4
 800c7c2:	d11b      	bne.n	800c7fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	f06f 0204 	mvn.w	r2, #4
 800c7cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	2202      	movs	r2, #2
 800c7d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	699b      	ldr	r3, [r3, #24]
 800c7da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d003      	beq.n	800c7ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c7e2:	6878      	ldr	r0, [r7, #4]
 800c7e4:	f7fb fafa 	bl	8007ddc <HAL_TIM_IC_CaptureCallback>
 800c7e8:	e005      	b.n	800c7f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c7ea:	6878      	ldr	r0, [r7, #4]
 800c7ec:	f000 fae4 	bl	800cdb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c7f0:	6878      	ldr	r0, [r7, #4]
 800c7f2:	f000 faea 	bl	800cdca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	2200      	movs	r2, #0
 800c7fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	691b      	ldr	r3, [r3, #16]
 800c802:	f003 0308 	and.w	r3, r3, #8
 800c806:	2b08      	cmp	r3, #8
 800c808:	d122      	bne.n	800c850 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	68db      	ldr	r3, [r3, #12]
 800c810:	f003 0308 	and.w	r3, r3, #8
 800c814:	2b08      	cmp	r3, #8
 800c816:	d11b      	bne.n	800c850 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	f06f 0208 	mvn.w	r2, #8
 800c820:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	2204      	movs	r2, #4
 800c826:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	69db      	ldr	r3, [r3, #28]
 800c82e:	f003 0303 	and.w	r3, r3, #3
 800c832:	2b00      	cmp	r3, #0
 800c834:	d003      	beq.n	800c83e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c836:	6878      	ldr	r0, [r7, #4]
 800c838:	f7fb fad0 	bl	8007ddc <HAL_TIM_IC_CaptureCallback>
 800c83c:	e005      	b.n	800c84a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c83e:	6878      	ldr	r0, [r7, #4]
 800c840:	f000 faba 	bl	800cdb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c844:	6878      	ldr	r0, [r7, #4]
 800c846:	f000 fac0 	bl	800cdca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	2200      	movs	r2, #0
 800c84e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	691b      	ldr	r3, [r3, #16]
 800c856:	f003 0310 	and.w	r3, r3, #16
 800c85a:	2b10      	cmp	r3, #16
 800c85c:	d122      	bne.n	800c8a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	68db      	ldr	r3, [r3, #12]
 800c864:	f003 0310 	and.w	r3, r3, #16
 800c868:	2b10      	cmp	r3, #16
 800c86a:	d11b      	bne.n	800c8a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	f06f 0210 	mvn.w	r2, #16
 800c874:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	2208      	movs	r2, #8
 800c87a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	69db      	ldr	r3, [r3, #28]
 800c882:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c886:	2b00      	cmp	r3, #0
 800c888:	d003      	beq.n	800c892 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c88a:	6878      	ldr	r0, [r7, #4]
 800c88c:	f7fb faa6 	bl	8007ddc <HAL_TIM_IC_CaptureCallback>
 800c890:	e005      	b.n	800c89e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c892:	6878      	ldr	r0, [r7, #4]
 800c894:	f000 fa90 	bl	800cdb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c898:	6878      	ldr	r0, [r7, #4]
 800c89a:	f000 fa96 	bl	800cdca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	2200      	movs	r2, #0
 800c8a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	691b      	ldr	r3, [r3, #16]
 800c8aa:	f003 0301 	and.w	r3, r3, #1
 800c8ae:	2b01      	cmp	r3, #1
 800c8b0:	d10e      	bne.n	800c8d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	68db      	ldr	r3, [r3, #12]
 800c8b8:	f003 0301 	and.w	r3, r3, #1
 800c8bc:	2b01      	cmp	r3, #1
 800c8be:	d107      	bne.n	800c8d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	f06f 0201 	mvn.w	r2, #1
 800c8c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c8ca:	6878      	ldr	r0, [r7, #4]
 800c8cc:	f000 fa6b 	bl	800cda6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	691b      	ldr	r3, [r3, #16]
 800c8d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c8da:	2b80      	cmp	r3, #128	@ 0x80
 800c8dc:	d10e      	bne.n	800c8fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	68db      	ldr	r3, [r3, #12]
 800c8e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c8e8:	2b80      	cmp	r3, #128	@ 0x80
 800c8ea:	d107      	bne.n	800c8fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800c8f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c8f6:	6878      	ldr	r0, [r7, #4]
 800c8f8:	f000 ff3a 	bl	800d770 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	691b      	ldr	r3, [r3, #16]
 800c902:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c906:	2b40      	cmp	r3, #64	@ 0x40
 800c908:	d10e      	bne.n	800c928 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	68db      	ldr	r3, [r3, #12]
 800c910:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c914:	2b40      	cmp	r3, #64	@ 0x40
 800c916:	d107      	bne.n	800c928 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800c920:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c922:	6878      	ldr	r0, [r7, #4]
 800c924:	f000 fa5a 	bl	800cddc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	691b      	ldr	r3, [r3, #16]
 800c92e:	f003 0320 	and.w	r3, r3, #32
 800c932:	2b20      	cmp	r3, #32
 800c934:	d10e      	bne.n	800c954 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	68db      	ldr	r3, [r3, #12]
 800c93c:	f003 0320 	and.w	r3, r3, #32
 800c940:	2b20      	cmp	r3, #32
 800c942:	d107      	bne.n	800c954 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	f06f 0220 	mvn.w	r2, #32
 800c94c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c94e:	6878      	ldr	r0, [r7, #4]
 800c950:	f000 ff05 	bl	800d75e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c954:	bf00      	nop
 800c956:	3708      	adds	r7, #8
 800c958:	46bd      	mov	sp, r7
 800c95a:	bd80      	pop	{r7, pc}

0800c95c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800c95c:	b580      	push	{r7, lr}
 800c95e:	b086      	sub	sp, #24
 800c960:	af00      	add	r7, sp, #0
 800c962:	60f8      	str	r0, [r7, #12]
 800c964:	60b9      	str	r1, [r7, #8]
 800c966:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c968:	2300      	movs	r3, #0
 800c96a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c972:	2b01      	cmp	r3, #1
 800c974:	d101      	bne.n	800c97a <HAL_TIM_IC_ConfigChannel+0x1e>
 800c976:	2302      	movs	r3, #2
 800c978:	e088      	b.n	800ca8c <HAL_TIM_IC_ConfigChannel+0x130>
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	2201      	movs	r2, #1
 800c97e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	2b00      	cmp	r3, #0
 800c986:	d11b      	bne.n	800c9c0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800c98c:	68bb      	ldr	r3, [r7, #8]
 800c98e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800c990:	68bb      	ldr	r3, [r7, #8]
 800c992:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800c994:	68bb      	ldr	r3, [r7, #8]
 800c996:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800c998:	f000 fc50 	bl	800d23c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	699a      	ldr	r2, [r3, #24]
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	f022 020c 	bic.w	r2, r2, #12
 800c9aa:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	6999      	ldr	r1, [r3, #24]
 800c9b2:	68bb      	ldr	r3, [r7, #8]
 800c9b4:	689a      	ldr	r2, [r3, #8]
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	430a      	orrs	r2, r1
 800c9bc:	619a      	str	r2, [r3, #24]
 800c9be:	e060      	b.n	800ca82 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	2b04      	cmp	r3, #4
 800c9c4:	d11c      	bne.n	800ca00 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800c9ca:	68bb      	ldr	r3, [r7, #8]
 800c9cc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800c9ce:	68bb      	ldr	r3, [r7, #8]
 800c9d0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800c9d2:	68bb      	ldr	r3, [r7, #8]
 800c9d4:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800c9d6:	f000 fcc5 	bl	800d364 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	699a      	ldr	r2, [r3, #24]
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800c9e8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	6999      	ldr	r1, [r3, #24]
 800c9f0:	68bb      	ldr	r3, [r7, #8]
 800c9f2:	689b      	ldr	r3, [r3, #8]
 800c9f4:	021a      	lsls	r2, r3, #8
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	430a      	orrs	r2, r1
 800c9fc:	619a      	str	r2, [r3, #24]
 800c9fe:	e040      	b.n	800ca82 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	2b08      	cmp	r3, #8
 800ca04:	d11b      	bne.n	800ca3e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800ca0a:	68bb      	ldr	r3, [r7, #8]
 800ca0c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800ca0e:	68bb      	ldr	r3, [r7, #8]
 800ca10:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800ca12:	68bb      	ldr	r3, [r7, #8]
 800ca14:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800ca16:	f000 fd10 	bl	800d43a <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	69da      	ldr	r2, [r3, #28]
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	f022 020c 	bic.w	r2, r2, #12
 800ca28:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	69d9      	ldr	r1, [r3, #28]
 800ca30:	68bb      	ldr	r3, [r7, #8]
 800ca32:	689a      	ldr	r2, [r3, #8]
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	430a      	orrs	r2, r1
 800ca3a:	61da      	str	r2, [r3, #28]
 800ca3c:	e021      	b.n	800ca82 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	2b0c      	cmp	r3, #12
 800ca42:	d11c      	bne.n	800ca7e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800ca48:	68bb      	ldr	r3, [r7, #8]
 800ca4a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800ca4c:	68bb      	ldr	r3, [r7, #8]
 800ca4e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800ca50:	68bb      	ldr	r3, [r7, #8]
 800ca52:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800ca54:	f000 fd2c 	bl	800d4b0 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	69da      	ldr	r2, [r3, #28]
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800ca66:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	69d9      	ldr	r1, [r3, #28]
 800ca6e:	68bb      	ldr	r3, [r7, #8]
 800ca70:	689b      	ldr	r3, [r3, #8]
 800ca72:	021a      	lsls	r2, r3, #8
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	430a      	orrs	r2, r1
 800ca7a:	61da      	str	r2, [r3, #28]
 800ca7c:	e001      	b.n	800ca82 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800ca7e:	2301      	movs	r3, #1
 800ca80:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	2200      	movs	r2, #0
 800ca86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ca8a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca8c:	4618      	mov	r0, r3
 800ca8e:	3718      	adds	r7, #24
 800ca90:	46bd      	mov	sp, r7
 800ca92:	bd80      	pop	{r7, pc}

0800ca94 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ca94:	b580      	push	{r7, lr}
 800ca96:	b086      	sub	sp, #24
 800ca98:	af00      	add	r7, sp, #0
 800ca9a:	60f8      	str	r0, [r7, #12]
 800ca9c:	60b9      	str	r1, [r7, #8]
 800ca9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800caa0:	2300      	movs	r3, #0
 800caa2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800caaa:	2b01      	cmp	r3, #1
 800caac:	d101      	bne.n	800cab2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800caae:	2302      	movs	r3, #2
 800cab0:	e0ae      	b.n	800cc10 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	2201      	movs	r2, #1
 800cab6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	2b0c      	cmp	r3, #12
 800cabe:	f200 809f 	bhi.w	800cc00 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800cac2:	a201      	add	r2, pc, #4	@ (adr r2, 800cac8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800cac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cac8:	0800cafd 	.word	0x0800cafd
 800cacc:	0800cc01 	.word	0x0800cc01
 800cad0:	0800cc01 	.word	0x0800cc01
 800cad4:	0800cc01 	.word	0x0800cc01
 800cad8:	0800cb3d 	.word	0x0800cb3d
 800cadc:	0800cc01 	.word	0x0800cc01
 800cae0:	0800cc01 	.word	0x0800cc01
 800cae4:	0800cc01 	.word	0x0800cc01
 800cae8:	0800cb7f 	.word	0x0800cb7f
 800caec:	0800cc01 	.word	0x0800cc01
 800caf0:	0800cc01 	.word	0x0800cc01
 800caf4:	0800cc01 	.word	0x0800cc01
 800caf8:	0800cbbf 	.word	0x0800cbbf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	68b9      	ldr	r1, [r7, #8]
 800cb02:	4618      	mov	r0, r3
 800cb04:	f000 f9ee 	bl	800cee4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	699a      	ldr	r2, [r3, #24]
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	f042 0208 	orr.w	r2, r2, #8
 800cb16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	699a      	ldr	r2, [r3, #24]
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	f022 0204 	bic.w	r2, r2, #4
 800cb26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	6999      	ldr	r1, [r3, #24]
 800cb2e:	68bb      	ldr	r3, [r7, #8]
 800cb30:	691a      	ldr	r2, [r3, #16]
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	430a      	orrs	r2, r1
 800cb38:	619a      	str	r2, [r3, #24]
      break;
 800cb3a:	e064      	b.n	800cc06 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	68b9      	ldr	r1, [r7, #8]
 800cb42:	4618      	mov	r0, r3
 800cb44:	f000 fa3e 	bl	800cfc4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	699a      	ldr	r2, [r3, #24]
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800cb56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	699a      	ldr	r2, [r3, #24]
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800cb66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	6999      	ldr	r1, [r3, #24]
 800cb6e:	68bb      	ldr	r3, [r7, #8]
 800cb70:	691b      	ldr	r3, [r3, #16]
 800cb72:	021a      	lsls	r2, r3, #8
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	430a      	orrs	r2, r1
 800cb7a:	619a      	str	r2, [r3, #24]
      break;
 800cb7c:	e043      	b.n	800cc06 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	68b9      	ldr	r1, [r7, #8]
 800cb84:	4618      	mov	r0, r3
 800cb86:	f000 fa91 	bl	800d0ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	69da      	ldr	r2, [r3, #28]
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	f042 0208 	orr.w	r2, r2, #8
 800cb98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	69da      	ldr	r2, [r3, #28]
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	f022 0204 	bic.w	r2, r2, #4
 800cba8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	69d9      	ldr	r1, [r3, #28]
 800cbb0:	68bb      	ldr	r3, [r7, #8]
 800cbb2:	691a      	ldr	r2, [r3, #16]
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	430a      	orrs	r2, r1
 800cbba:	61da      	str	r2, [r3, #28]
      break;
 800cbbc:	e023      	b.n	800cc06 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	68b9      	ldr	r1, [r7, #8]
 800cbc4:	4618      	mov	r0, r3
 800cbc6:	f000 fae5 	bl	800d194 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	69da      	ldr	r2, [r3, #28]
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800cbd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	69da      	ldr	r2, [r3, #28]
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800cbe8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	69d9      	ldr	r1, [r3, #28]
 800cbf0:	68bb      	ldr	r3, [r7, #8]
 800cbf2:	691b      	ldr	r3, [r3, #16]
 800cbf4:	021a      	lsls	r2, r3, #8
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	430a      	orrs	r2, r1
 800cbfc:	61da      	str	r2, [r3, #28]
      break;
 800cbfe:	e002      	b.n	800cc06 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800cc00:	2301      	movs	r3, #1
 800cc02:	75fb      	strb	r3, [r7, #23]
      break;
 800cc04:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	2200      	movs	r2, #0
 800cc0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800cc0e:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc10:	4618      	mov	r0, r3
 800cc12:	3718      	adds	r7, #24
 800cc14:	46bd      	mov	sp, r7
 800cc16:	bd80      	pop	{r7, pc}

0800cc18 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800cc18:	b580      	push	{r7, lr}
 800cc1a:	b084      	sub	sp, #16
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	6078      	str	r0, [r7, #4]
 800cc20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800cc22:	2300      	movs	r3, #0
 800cc24:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cc2c:	2b01      	cmp	r3, #1
 800cc2e:	d101      	bne.n	800cc34 <HAL_TIM_ConfigClockSource+0x1c>
 800cc30:	2302      	movs	r3, #2
 800cc32:	e0b4      	b.n	800cd9e <HAL_TIM_ConfigClockSource+0x186>
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	2201      	movs	r2, #1
 800cc38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	2202      	movs	r2, #2
 800cc40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	689b      	ldr	r3, [r3, #8]
 800cc4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800cc4c:	68bb      	ldr	r3, [r7, #8]
 800cc4e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800cc52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cc54:	68bb      	ldr	r3, [r7, #8]
 800cc56:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800cc5a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	68ba      	ldr	r2, [r7, #8]
 800cc62:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800cc64:	683b      	ldr	r3, [r7, #0]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cc6c:	d03e      	beq.n	800ccec <HAL_TIM_ConfigClockSource+0xd4>
 800cc6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cc72:	f200 8087 	bhi.w	800cd84 <HAL_TIM_ConfigClockSource+0x16c>
 800cc76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cc7a:	f000 8086 	beq.w	800cd8a <HAL_TIM_ConfigClockSource+0x172>
 800cc7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cc82:	d87f      	bhi.n	800cd84 <HAL_TIM_ConfigClockSource+0x16c>
 800cc84:	2b70      	cmp	r3, #112	@ 0x70
 800cc86:	d01a      	beq.n	800ccbe <HAL_TIM_ConfigClockSource+0xa6>
 800cc88:	2b70      	cmp	r3, #112	@ 0x70
 800cc8a:	d87b      	bhi.n	800cd84 <HAL_TIM_ConfigClockSource+0x16c>
 800cc8c:	2b60      	cmp	r3, #96	@ 0x60
 800cc8e:	d050      	beq.n	800cd32 <HAL_TIM_ConfigClockSource+0x11a>
 800cc90:	2b60      	cmp	r3, #96	@ 0x60
 800cc92:	d877      	bhi.n	800cd84 <HAL_TIM_ConfigClockSource+0x16c>
 800cc94:	2b50      	cmp	r3, #80	@ 0x50
 800cc96:	d03c      	beq.n	800cd12 <HAL_TIM_ConfigClockSource+0xfa>
 800cc98:	2b50      	cmp	r3, #80	@ 0x50
 800cc9a:	d873      	bhi.n	800cd84 <HAL_TIM_ConfigClockSource+0x16c>
 800cc9c:	2b40      	cmp	r3, #64	@ 0x40
 800cc9e:	d058      	beq.n	800cd52 <HAL_TIM_ConfigClockSource+0x13a>
 800cca0:	2b40      	cmp	r3, #64	@ 0x40
 800cca2:	d86f      	bhi.n	800cd84 <HAL_TIM_ConfigClockSource+0x16c>
 800cca4:	2b30      	cmp	r3, #48	@ 0x30
 800cca6:	d064      	beq.n	800cd72 <HAL_TIM_ConfigClockSource+0x15a>
 800cca8:	2b30      	cmp	r3, #48	@ 0x30
 800ccaa:	d86b      	bhi.n	800cd84 <HAL_TIM_ConfigClockSource+0x16c>
 800ccac:	2b20      	cmp	r3, #32
 800ccae:	d060      	beq.n	800cd72 <HAL_TIM_ConfigClockSource+0x15a>
 800ccb0:	2b20      	cmp	r3, #32
 800ccb2:	d867      	bhi.n	800cd84 <HAL_TIM_ConfigClockSource+0x16c>
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d05c      	beq.n	800cd72 <HAL_TIM_ConfigClockSource+0x15a>
 800ccb8:	2b10      	cmp	r3, #16
 800ccba:	d05a      	beq.n	800cd72 <HAL_TIM_ConfigClockSource+0x15a>
 800ccbc:	e062      	b.n	800cd84 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ccc2:	683b      	ldr	r3, [r7, #0]
 800ccc4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ccc6:	683b      	ldr	r3, [r7, #0]
 800ccc8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ccca:	683b      	ldr	r3, [r7, #0]
 800cccc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ccce:	f000 fc45 	bl	800d55c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	689b      	ldr	r3, [r3, #8]
 800ccd8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ccda:	68bb      	ldr	r3, [r7, #8]
 800ccdc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800cce0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	68ba      	ldr	r2, [r7, #8]
 800cce8:	609a      	str	r2, [r3, #8]
      break;
 800ccea:	e04f      	b.n	800cd8c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ccf0:	683b      	ldr	r3, [r7, #0]
 800ccf2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ccf4:	683b      	ldr	r3, [r7, #0]
 800ccf6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ccf8:	683b      	ldr	r3, [r7, #0]
 800ccfa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ccfc:	f000 fc2e 	bl	800d55c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	689a      	ldr	r2, [r3, #8]
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800cd0e:	609a      	str	r2, [r3, #8]
      break;
 800cd10:	e03c      	b.n	800cd8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800cd16:	683b      	ldr	r3, [r7, #0]
 800cd18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cd1a:	683b      	ldr	r3, [r7, #0]
 800cd1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cd1e:	461a      	mov	r2, r3
 800cd20:	f000 faf2 	bl	800d308 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	2150      	movs	r1, #80	@ 0x50
 800cd2a:	4618      	mov	r0, r3
 800cd2c:	f000 fbfc 	bl	800d528 <TIM_ITRx_SetConfig>
      break;
 800cd30:	e02c      	b.n	800cd8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800cd36:	683b      	ldr	r3, [r7, #0]
 800cd38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cd3a:	683b      	ldr	r3, [r7, #0]
 800cd3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800cd3e:	461a      	mov	r2, r3
 800cd40:	f000 fb4c 	bl	800d3dc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	2160      	movs	r1, #96	@ 0x60
 800cd4a:	4618      	mov	r0, r3
 800cd4c:	f000 fbec 	bl	800d528 <TIM_ITRx_SetConfig>
      break;
 800cd50:	e01c      	b.n	800cd8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800cd56:	683b      	ldr	r3, [r7, #0]
 800cd58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cd5a:	683b      	ldr	r3, [r7, #0]
 800cd5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cd5e:	461a      	mov	r2, r3
 800cd60:	f000 fad2 	bl	800d308 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	2140      	movs	r1, #64	@ 0x40
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	f000 fbdc 	bl	800d528 <TIM_ITRx_SetConfig>
      break;
 800cd70:	e00c      	b.n	800cd8c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	681a      	ldr	r2, [r3, #0]
 800cd76:	683b      	ldr	r3, [r7, #0]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	4619      	mov	r1, r3
 800cd7c:	4610      	mov	r0, r2
 800cd7e:	f000 fbd3 	bl	800d528 <TIM_ITRx_SetConfig>
      break;
 800cd82:	e003      	b.n	800cd8c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800cd84:	2301      	movs	r3, #1
 800cd86:	73fb      	strb	r3, [r7, #15]
      break;
 800cd88:	e000      	b.n	800cd8c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800cd8a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	2201      	movs	r2, #1
 800cd90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	2200      	movs	r2, #0
 800cd98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800cd9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd9e:	4618      	mov	r0, r3
 800cda0:	3710      	adds	r7, #16
 800cda2:	46bd      	mov	sp, r7
 800cda4:	bd80      	pop	{r7, pc}

0800cda6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cda6:	b480      	push	{r7}
 800cda8:	b083      	sub	sp, #12
 800cdaa:	af00      	add	r7, sp, #0
 800cdac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800cdae:	bf00      	nop
 800cdb0:	370c      	adds	r7, #12
 800cdb2:	46bd      	mov	sp, r7
 800cdb4:	bc80      	pop	{r7}
 800cdb6:	4770      	bx	lr

0800cdb8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cdb8:	b480      	push	{r7}
 800cdba:	b083      	sub	sp, #12
 800cdbc:	af00      	add	r7, sp, #0
 800cdbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800cdc0:	bf00      	nop
 800cdc2:	370c      	adds	r7, #12
 800cdc4:	46bd      	mov	sp, r7
 800cdc6:	bc80      	pop	{r7}
 800cdc8:	4770      	bx	lr

0800cdca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cdca:	b480      	push	{r7}
 800cdcc:	b083      	sub	sp, #12
 800cdce:	af00      	add	r7, sp, #0
 800cdd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cdd2:	bf00      	nop
 800cdd4:	370c      	adds	r7, #12
 800cdd6:	46bd      	mov	sp, r7
 800cdd8:	bc80      	pop	{r7}
 800cdda:	4770      	bx	lr

0800cddc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cddc:	b480      	push	{r7}
 800cdde:	b083      	sub	sp, #12
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cde4:	bf00      	nop
 800cde6:	370c      	adds	r7, #12
 800cde8:	46bd      	mov	sp, r7
 800cdea:	bc80      	pop	{r7}
 800cdec:	4770      	bx	lr
	...

0800cdf0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800cdf0:	b480      	push	{r7}
 800cdf2:	b085      	sub	sp, #20
 800cdf4:	af00      	add	r7, sp, #0
 800cdf6:	6078      	str	r0, [r7, #4]
 800cdf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	4a33      	ldr	r2, [pc, #204]	@ (800ced0 <TIM_Base_SetConfig+0xe0>)
 800ce04:	4293      	cmp	r3, r2
 800ce06:	d013      	beq.n	800ce30 <TIM_Base_SetConfig+0x40>
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	4a32      	ldr	r2, [pc, #200]	@ (800ced4 <TIM_Base_SetConfig+0xe4>)
 800ce0c:	4293      	cmp	r3, r2
 800ce0e:	d00f      	beq.n	800ce30 <TIM_Base_SetConfig+0x40>
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ce16:	d00b      	beq.n	800ce30 <TIM_Base_SetConfig+0x40>
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	4a2f      	ldr	r2, [pc, #188]	@ (800ced8 <TIM_Base_SetConfig+0xe8>)
 800ce1c:	4293      	cmp	r3, r2
 800ce1e:	d007      	beq.n	800ce30 <TIM_Base_SetConfig+0x40>
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	4a2e      	ldr	r2, [pc, #184]	@ (800cedc <TIM_Base_SetConfig+0xec>)
 800ce24:	4293      	cmp	r3, r2
 800ce26:	d003      	beq.n	800ce30 <TIM_Base_SetConfig+0x40>
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	4a2d      	ldr	r2, [pc, #180]	@ (800cee0 <TIM_Base_SetConfig+0xf0>)
 800ce2c:	4293      	cmp	r3, r2
 800ce2e:	d108      	bne.n	800ce42 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ce36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ce38:	683b      	ldr	r3, [r7, #0]
 800ce3a:	685b      	ldr	r3, [r3, #4]
 800ce3c:	68fa      	ldr	r2, [r7, #12]
 800ce3e:	4313      	orrs	r3, r2
 800ce40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	4a22      	ldr	r2, [pc, #136]	@ (800ced0 <TIM_Base_SetConfig+0xe0>)
 800ce46:	4293      	cmp	r3, r2
 800ce48:	d013      	beq.n	800ce72 <TIM_Base_SetConfig+0x82>
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	4a21      	ldr	r2, [pc, #132]	@ (800ced4 <TIM_Base_SetConfig+0xe4>)
 800ce4e:	4293      	cmp	r3, r2
 800ce50:	d00f      	beq.n	800ce72 <TIM_Base_SetConfig+0x82>
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ce58:	d00b      	beq.n	800ce72 <TIM_Base_SetConfig+0x82>
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	4a1e      	ldr	r2, [pc, #120]	@ (800ced8 <TIM_Base_SetConfig+0xe8>)
 800ce5e:	4293      	cmp	r3, r2
 800ce60:	d007      	beq.n	800ce72 <TIM_Base_SetConfig+0x82>
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	4a1d      	ldr	r2, [pc, #116]	@ (800cedc <TIM_Base_SetConfig+0xec>)
 800ce66:	4293      	cmp	r3, r2
 800ce68:	d003      	beq.n	800ce72 <TIM_Base_SetConfig+0x82>
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	4a1c      	ldr	r2, [pc, #112]	@ (800cee0 <TIM_Base_SetConfig+0xf0>)
 800ce6e:	4293      	cmp	r3, r2
 800ce70:	d108      	bne.n	800ce84 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ce78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ce7a:	683b      	ldr	r3, [r7, #0]
 800ce7c:	68db      	ldr	r3, [r3, #12]
 800ce7e:	68fa      	ldr	r2, [r7, #12]
 800ce80:	4313      	orrs	r3, r2
 800ce82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ce8a:	683b      	ldr	r3, [r7, #0]
 800ce8c:	695b      	ldr	r3, [r3, #20]
 800ce8e:	4313      	orrs	r3, r2
 800ce90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	68fa      	ldr	r2, [r7, #12]
 800ce96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ce98:	683b      	ldr	r3, [r7, #0]
 800ce9a:	689a      	ldr	r2, [r3, #8]
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cea0:	683b      	ldr	r3, [r7, #0]
 800cea2:	681a      	ldr	r2, [r3, #0]
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	4a09      	ldr	r2, [pc, #36]	@ (800ced0 <TIM_Base_SetConfig+0xe0>)
 800ceac:	4293      	cmp	r3, r2
 800ceae:	d003      	beq.n	800ceb8 <TIM_Base_SetConfig+0xc8>
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	4a08      	ldr	r2, [pc, #32]	@ (800ced4 <TIM_Base_SetConfig+0xe4>)
 800ceb4:	4293      	cmp	r3, r2
 800ceb6:	d103      	bne.n	800cec0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ceb8:	683b      	ldr	r3, [r7, #0]
 800ceba:	691a      	ldr	r2, [r3, #16]
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	2201      	movs	r2, #1
 800cec4:	615a      	str	r2, [r3, #20]
}
 800cec6:	bf00      	nop
 800cec8:	3714      	adds	r7, #20
 800ceca:	46bd      	mov	sp, r7
 800cecc:	bc80      	pop	{r7}
 800cece:	4770      	bx	lr
 800ced0:	40012c00 	.word	0x40012c00
 800ced4:	40013400 	.word	0x40013400
 800ced8:	40000400 	.word	0x40000400
 800cedc:	40000800 	.word	0x40000800
 800cee0:	40000c00 	.word	0x40000c00

0800cee4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cee4:	b480      	push	{r7}
 800cee6:	b087      	sub	sp, #28
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	6078      	str	r0, [r7, #4]
 800ceec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	6a1b      	ldr	r3, [r3, #32]
 800cef2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	6a1b      	ldr	r3, [r3, #32]
 800cef8:	f023 0201 	bic.w	r2, r3, #1
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	685b      	ldr	r3, [r3, #4]
 800cf04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	699b      	ldr	r3, [r3, #24]
 800cf0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cf12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	f023 0303 	bic.w	r3, r3, #3
 800cf1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cf1c:	683b      	ldr	r3, [r7, #0]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	68fa      	ldr	r2, [r7, #12]
 800cf22:	4313      	orrs	r3, r2
 800cf24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800cf26:	697b      	ldr	r3, [r7, #20]
 800cf28:	f023 0302 	bic.w	r3, r3, #2
 800cf2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800cf2e:	683b      	ldr	r3, [r7, #0]
 800cf30:	689b      	ldr	r3, [r3, #8]
 800cf32:	697a      	ldr	r2, [r7, #20]
 800cf34:	4313      	orrs	r3, r2
 800cf36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	4a20      	ldr	r2, [pc, #128]	@ (800cfbc <TIM_OC1_SetConfig+0xd8>)
 800cf3c:	4293      	cmp	r3, r2
 800cf3e:	d003      	beq.n	800cf48 <TIM_OC1_SetConfig+0x64>
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	4a1f      	ldr	r2, [pc, #124]	@ (800cfc0 <TIM_OC1_SetConfig+0xdc>)
 800cf44:	4293      	cmp	r3, r2
 800cf46:	d10c      	bne.n	800cf62 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800cf48:	697b      	ldr	r3, [r7, #20]
 800cf4a:	f023 0308 	bic.w	r3, r3, #8
 800cf4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800cf50:	683b      	ldr	r3, [r7, #0]
 800cf52:	68db      	ldr	r3, [r3, #12]
 800cf54:	697a      	ldr	r2, [r7, #20]
 800cf56:	4313      	orrs	r3, r2
 800cf58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800cf5a:	697b      	ldr	r3, [r7, #20]
 800cf5c:	f023 0304 	bic.w	r3, r3, #4
 800cf60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	4a15      	ldr	r2, [pc, #84]	@ (800cfbc <TIM_OC1_SetConfig+0xd8>)
 800cf66:	4293      	cmp	r3, r2
 800cf68:	d003      	beq.n	800cf72 <TIM_OC1_SetConfig+0x8e>
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	4a14      	ldr	r2, [pc, #80]	@ (800cfc0 <TIM_OC1_SetConfig+0xdc>)
 800cf6e:	4293      	cmp	r3, r2
 800cf70:	d111      	bne.n	800cf96 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800cf72:	693b      	ldr	r3, [r7, #16]
 800cf74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cf78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800cf7a:	693b      	ldr	r3, [r7, #16]
 800cf7c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800cf80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800cf82:	683b      	ldr	r3, [r7, #0]
 800cf84:	695b      	ldr	r3, [r3, #20]
 800cf86:	693a      	ldr	r2, [r7, #16]
 800cf88:	4313      	orrs	r3, r2
 800cf8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800cf8c:	683b      	ldr	r3, [r7, #0]
 800cf8e:	699b      	ldr	r3, [r3, #24]
 800cf90:	693a      	ldr	r2, [r7, #16]
 800cf92:	4313      	orrs	r3, r2
 800cf94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	693a      	ldr	r2, [r7, #16]
 800cf9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	68fa      	ldr	r2, [r7, #12]
 800cfa0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800cfa2:	683b      	ldr	r3, [r7, #0]
 800cfa4:	685a      	ldr	r2, [r3, #4]
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	697a      	ldr	r2, [r7, #20]
 800cfae:	621a      	str	r2, [r3, #32]
}
 800cfb0:	bf00      	nop
 800cfb2:	371c      	adds	r7, #28
 800cfb4:	46bd      	mov	sp, r7
 800cfb6:	bc80      	pop	{r7}
 800cfb8:	4770      	bx	lr
 800cfba:	bf00      	nop
 800cfbc:	40012c00 	.word	0x40012c00
 800cfc0:	40013400 	.word	0x40013400

0800cfc4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cfc4:	b480      	push	{r7}
 800cfc6:	b087      	sub	sp, #28
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	6078      	str	r0, [r7, #4]
 800cfcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	6a1b      	ldr	r3, [r3, #32]
 800cfd2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	6a1b      	ldr	r3, [r3, #32]
 800cfd8:	f023 0210 	bic.w	r2, r3, #16
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	685b      	ldr	r3, [r3, #4]
 800cfe4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	699b      	ldr	r3, [r3, #24]
 800cfea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cff2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800cffa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cffc:	683b      	ldr	r3, [r7, #0]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	021b      	lsls	r3, r3, #8
 800d002:	68fa      	ldr	r2, [r7, #12]
 800d004:	4313      	orrs	r3, r2
 800d006:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d008:	697b      	ldr	r3, [r7, #20]
 800d00a:	f023 0320 	bic.w	r3, r3, #32
 800d00e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d010:	683b      	ldr	r3, [r7, #0]
 800d012:	689b      	ldr	r3, [r3, #8]
 800d014:	011b      	lsls	r3, r3, #4
 800d016:	697a      	ldr	r2, [r7, #20]
 800d018:	4313      	orrs	r3, r2
 800d01a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	4a21      	ldr	r2, [pc, #132]	@ (800d0a4 <TIM_OC2_SetConfig+0xe0>)
 800d020:	4293      	cmp	r3, r2
 800d022:	d003      	beq.n	800d02c <TIM_OC2_SetConfig+0x68>
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	4a20      	ldr	r2, [pc, #128]	@ (800d0a8 <TIM_OC2_SetConfig+0xe4>)
 800d028:	4293      	cmp	r3, r2
 800d02a:	d10d      	bne.n	800d048 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d02c:	697b      	ldr	r3, [r7, #20]
 800d02e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d032:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d034:	683b      	ldr	r3, [r7, #0]
 800d036:	68db      	ldr	r3, [r3, #12]
 800d038:	011b      	lsls	r3, r3, #4
 800d03a:	697a      	ldr	r2, [r7, #20]
 800d03c:	4313      	orrs	r3, r2
 800d03e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d040:	697b      	ldr	r3, [r7, #20]
 800d042:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d046:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	4a16      	ldr	r2, [pc, #88]	@ (800d0a4 <TIM_OC2_SetConfig+0xe0>)
 800d04c:	4293      	cmp	r3, r2
 800d04e:	d003      	beq.n	800d058 <TIM_OC2_SetConfig+0x94>
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	4a15      	ldr	r2, [pc, #84]	@ (800d0a8 <TIM_OC2_SetConfig+0xe4>)
 800d054:	4293      	cmp	r3, r2
 800d056:	d113      	bne.n	800d080 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d058:	693b      	ldr	r3, [r7, #16]
 800d05a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d05e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d060:	693b      	ldr	r3, [r7, #16]
 800d062:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d066:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d068:	683b      	ldr	r3, [r7, #0]
 800d06a:	695b      	ldr	r3, [r3, #20]
 800d06c:	009b      	lsls	r3, r3, #2
 800d06e:	693a      	ldr	r2, [r7, #16]
 800d070:	4313      	orrs	r3, r2
 800d072:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d074:	683b      	ldr	r3, [r7, #0]
 800d076:	699b      	ldr	r3, [r3, #24]
 800d078:	009b      	lsls	r3, r3, #2
 800d07a:	693a      	ldr	r2, [r7, #16]
 800d07c:	4313      	orrs	r3, r2
 800d07e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	693a      	ldr	r2, [r7, #16]
 800d084:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	68fa      	ldr	r2, [r7, #12]
 800d08a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d08c:	683b      	ldr	r3, [r7, #0]
 800d08e:	685a      	ldr	r2, [r3, #4]
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	697a      	ldr	r2, [r7, #20]
 800d098:	621a      	str	r2, [r3, #32]
}
 800d09a:	bf00      	nop
 800d09c:	371c      	adds	r7, #28
 800d09e:	46bd      	mov	sp, r7
 800d0a0:	bc80      	pop	{r7}
 800d0a2:	4770      	bx	lr
 800d0a4:	40012c00 	.word	0x40012c00
 800d0a8:	40013400 	.word	0x40013400

0800d0ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d0ac:	b480      	push	{r7}
 800d0ae:	b087      	sub	sp, #28
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	6078      	str	r0, [r7, #4]
 800d0b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	6a1b      	ldr	r3, [r3, #32]
 800d0ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	6a1b      	ldr	r3, [r3, #32]
 800d0c0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	685b      	ldr	r3, [r3, #4]
 800d0cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	69db      	ldr	r3, [r3, #28]
 800d0d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d0da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	f023 0303 	bic.w	r3, r3, #3
 800d0e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d0e4:	683b      	ldr	r3, [r7, #0]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	68fa      	ldr	r2, [r7, #12]
 800d0ea:	4313      	orrs	r3, r2
 800d0ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d0ee:	697b      	ldr	r3, [r7, #20]
 800d0f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800d0f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d0f6:	683b      	ldr	r3, [r7, #0]
 800d0f8:	689b      	ldr	r3, [r3, #8]
 800d0fa:	021b      	lsls	r3, r3, #8
 800d0fc:	697a      	ldr	r2, [r7, #20]
 800d0fe:	4313      	orrs	r3, r2
 800d100:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	4a21      	ldr	r2, [pc, #132]	@ (800d18c <TIM_OC3_SetConfig+0xe0>)
 800d106:	4293      	cmp	r3, r2
 800d108:	d003      	beq.n	800d112 <TIM_OC3_SetConfig+0x66>
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	4a20      	ldr	r2, [pc, #128]	@ (800d190 <TIM_OC3_SetConfig+0xe4>)
 800d10e:	4293      	cmp	r3, r2
 800d110:	d10d      	bne.n	800d12e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d112:	697b      	ldr	r3, [r7, #20]
 800d114:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d118:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d11a:	683b      	ldr	r3, [r7, #0]
 800d11c:	68db      	ldr	r3, [r3, #12]
 800d11e:	021b      	lsls	r3, r3, #8
 800d120:	697a      	ldr	r2, [r7, #20]
 800d122:	4313      	orrs	r3, r2
 800d124:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d126:	697b      	ldr	r3, [r7, #20]
 800d128:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d12c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	4a16      	ldr	r2, [pc, #88]	@ (800d18c <TIM_OC3_SetConfig+0xe0>)
 800d132:	4293      	cmp	r3, r2
 800d134:	d003      	beq.n	800d13e <TIM_OC3_SetConfig+0x92>
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	4a15      	ldr	r2, [pc, #84]	@ (800d190 <TIM_OC3_SetConfig+0xe4>)
 800d13a:	4293      	cmp	r3, r2
 800d13c:	d113      	bne.n	800d166 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d13e:	693b      	ldr	r3, [r7, #16]
 800d140:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d144:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d146:	693b      	ldr	r3, [r7, #16]
 800d148:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800d14c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d14e:	683b      	ldr	r3, [r7, #0]
 800d150:	695b      	ldr	r3, [r3, #20]
 800d152:	011b      	lsls	r3, r3, #4
 800d154:	693a      	ldr	r2, [r7, #16]
 800d156:	4313      	orrs	r3, r2
 800d158:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d15a:	683b      	ldr	r3, [r7, #0]
 800d15c:	699b      	ldr	r3, [r3, #24]
 800d15e:	011b      	lsls	r3, r3, #4
 800d160:	693a      	ldr	r2, [r7, #16]
 800d162:	4313      	orrs	r3, r2
 800d164:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	693a      	ldr	r2, [r7, #16]
 800d16a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	68fa      	ldr	r2, [r7, #12]
 800d170:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d172:	683b      	ldr	r3, [r7, #0]
 800d174:	685a      	ldr	r2, [r3, #4]
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	697a      	ldr	r2, [r7, #20]
 800d17e:	621a      	str	r2, [r3, #32]
}
 800d180:	bf00      	nop
 800d182:	371c      	adds	r7, #28
 800d184:	46bd      	mov	sp, r7
 800d186:	bc80      	pop	{r7}
 800d188:	4770      	bx	lr
 800d18a:	bf00      	nop
 800d18c:	40012c00 	.word	0x40012c00
 800d190:	40013400 	.word	0x40013400

0800d194 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d194:	b480      	push	{r7}
 800d196:	b087      	sub	sp, #28
 800d198:	af00      	add	r7, sp, #0
 800d19a:	6078      	str	r0, [r7, #4]
 800d19c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	6a1b      	ldr	r3, [r3, #32]
 800d1a2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	6a1b      	ldr	r3, [r3, #32]
 800d1a8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	685b      	ldr	r3, [r3, #4]
 800d1b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	69db      	ldr	r3, [r3, #28]
 800d1ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d1c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d1ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d1cc:	683b      	ldr	r3, [r7, #0]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	021b      	lsls	r3, r3, #8
 800d1d2:	68fa      	ldr	r2, [r7, #12]
 800d1d4:	4313      	orrs	r3, r2
 800d1d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d1d8:	693b      	ldr	r3, [r7, #16]
 800d1da:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800d1de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d1e0:	683b      	ldr	r3, [r7, #0]
 800d1e2:	689b      	ldr	r3, [r3, #8]
 800d1e4:	031b      	lsls	r3, r3, #12
 800d1e6:	693a      	ldr	r2, [r7, #16]
 800d1e8:	4313      	orrs	r3, r2
 800d1ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	4a11      	ldr	r2, [pc, #68]	@ (800d234 <TIM_OC4_SetConfig+0xa0>)
 800d1f0:	4293      	cmp	r3, r2
 800d1f2:	d003      	beq.n	800d1fc <TIM_OC4_SetConfig+0x68>
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	4a10      	ldr	r2, [pc, #64]	@ (800d238 <TIM_OC4_SetConfig+0xa4>)
 800d1f8:	4293      	cmp	r3, r2
 800d1fa:	d109      	bne.n	800d210 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d1fc:	697b      	ldr	r3, [r7, #20]
 800d1fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d202:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d204:	683b      	ldr	r3, [r7, #0]
 800d206:	695b      	ldr	r3, [r3, #20]
 800d208:	019b      	lsls	r3, r3, #6
 800d20a:	697a      	ldr	r2, [r7, #20]
 800d20c:	4313      	orrs	r3, r2
 800d20e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	697a      	ldr	r2, [r7, #20]
 800d214:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	68fa      	ldr	r2, [r7, #12]
 800d21a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d21c:	683b      	ldr	r3, [r7, #0]
 800d21e:	685a      	ldr	r2, [r3, #4]
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	693a      	ldr	r2, [r7, #16]
 800d228:	621a      	str	r2, [r3, #32]
}
 800d22a:	bf00      	nop
 800d22c:	371c      	adds	r7, #28
 800d22e:	46bd      	mov	sp, r7
 800d230:	bc80      	pop	{r7}
 800d232:	4770      	bx	lr
 800d234:	40012c00 	.word	0x40012c00
 800d238:	40013400 	.word	0x40013400

0800d23c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800d23c:	b480      	push	{r7}
 800d23e:	b087      	sub	sp, #28
 800d240:	af00      	add	r7, sp, #0
 800d242:	60f8      	str	r0, [r7, #12]
 800d244:	60b9      	str	r1, [r7, #8]
 800d246:	607a      	str	r2, [r7, #4]
 800d248:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	6a1b      	ldr	r3, [r3, #32]
 800d24e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	6a1b      	ldr	r3, [r3, #32]
 800d254:	f023 0201 	bic.w	r2, r3, #1
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	699b      	ldr	r3, [r3, #24]
 800d260:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	4a23      	ldr	r2, [pc, #140]	@ (800d2f4 <TIM_TI1_SetConfig+0xb8>)
 800d266:	4293      	cmp	r3, r2
 800d268:	d013      	beq.n	800d292 <TIM_TI1_SetConfig+0x56>
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	4a22      	ldr	r2, [pc, #136]	@ (800d2f8 <TIM_TI1_SetConfig+0xbc>)
 800d26e:	4293      	cmp	r3, r2
 800d270:	d00f      	beq.n	800d292 <TIM_TI1_SetConfig+0x56>
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d278:	d00b      	beq.n	800d292 <TIM_TI1_SetConfig+0x56>
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	4a1f      	ldr	r2, [pc, #124]	@ (800d2fc <TIM_TI1_SetConfig+0xc0>)
 800d27e:	4293      	cmp	r3, r2
 800d280:	d007      	beq.n	800d292 <TIM_TI1_SetConfig+0x56>
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	4a1e      	ldr	r2, [pc, #120]	@ (800d300 <TIM_TI1_SetConfig+0xc4>)
 800d286:	4293      	cmp	r3, r2
 800d288:	d003      	beq.n	800d292 <TIM_TI1_SetConfig+0x56>
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	4a1d      	ldr	r2, [pc, #116]	@ (800d304 <TIM_TI1_SetConfig+0xc8>)
 800d28e:	4293      	cmp	r3, r2
 800d290:	d101      	bne.n	800d296 <TIM_TI1_SetConfig+0x5a>
 800d292:	2301      	movs	r3, #1
 800d294:	e000      	b.n	800d298 <TIM_TI1_SetConfig+0x5c>
 800d296:	2300      	movs	r3, #0
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d008      	beq.n	800d2ae <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800d29c:	697b      	ldr	r3, [r7, #20]
 800d29e:	f023 0303 	bic.w	r3, r3, #3
 800d2a2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800d2a4:	697a      	ldr	r2, [r7, #20]
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	4313      	orrs	r3, r2
 800d2aa:	617b      	str	r3, [r7, #20]
 800d2ac:	e003      	b.n	800d2b6 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800d2ae:	697b      	ldr	r3, [r7, #20]
 800d2b0:	f043 0301 	orr.w	r3, r3, #1
 800d2b4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d2b6:	697b      	ldr	r3, [r7, #20]
 800d2b8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800d2bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800d2be:	683b      	ldr	r3, [r7, #0]
 800d2c0:	011b      	lsls	r3, r3, #4
 800d2c2:	b2db      	uxtb	r3, r3
 800d2c4:	697a      	ldr	r2, [r7, #20]
 800d2c6:	4313      	orrs	r3, r2
 800d2c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d2ca:	693b      	ldr	r3, [r7, #16]
 800d2cc:	f023 030a 	bic.w	r3, r3, #10
 800d2d0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800d2d2:	68bb      	ldr	r3, [r7, #8]
 800d2d4:	f003 030a 	and.w	r3, r3, #10
 800d2d8:	693a      	ldr	r2, [r7, #16]
 800d2da:	4313      	orrs	r3, r2
 800d2dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	697a      	ldr	r2, [r7, #20]
 800d2e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	693a      	ldr	r2, [r7, #16]
 800d2e8:	621a      	str	r2, [r3, #32]
}
 800d2ea:	bf00      	nop
 800d2ec:	371c      	adds	r7, #28
 800d2ee:	46bd      	mov	sp, r7
 800d2f0:	bc80      	pop	{r7}
 800d2f2:	4770      	bx	lr
 800d2f4:	40012c00 	.word	0x40012c00
 800d2f8:	40013400 	.word	0x40013400
 800d2fc:	40000400 	.word	0x40000400
 800d300:	40000800 	.word	0x40000800
 800d304:	40000c00 	.word	0x40000c00

0800d308 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d308:	b480      	push	{r7}
 800d30a:	b087      	sub	sp, #28
 800d30c:	af00      	add	r7, sp, #0
 800d30e:	60f8      	str	r0, [r7, #12]
 800d310:	60b9      	str	r1, [r7, #8]
 800d312:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	6a1b      	ldr	r3, [r3, #32]
 800d318:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	6a1b      	ldr	r3, [r3, #32]
 800d31e:	f023 0201 	bic.w	r2, r3, #1
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	699b      	ldr	r3, [r3, #24]
 800d32a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d32c:	693b      	ldr	r3, [r7, #16]
 800d32e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800d332:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	011b      	lsls	r3, r3, #4
 800d338:	693a      	ldr	r2, [r7, #16]
 800d33a:	4313      	orrs	r3, r2
 800d33c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d33e:	697b      	ldr	r3, [r7, #20]
 800d340:	f023 030a 	bic.w	r3, r3, #10
 800d344:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d346:	697a      	ldr	r2, [r7, #20]
 800d348:	68bb      	ldr	r3, [r7, #8]
 800d34a:	4313      	orrs	r3, r2
 800d34c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	693a      	ldr	r2, [r7, #16]
 800d352:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	697a      	ldr	r2, [r7, #20]
 800d358:	621a      	str	r2, [r3, #32]
}
 800d35a:	bf00      	nop
 800d35c:	371c      	adds	r7, #28
 800d35e:	46bd      	mov	sp, r7
 800d360:	bc80      	pop	{r7}
 800d362:	4770      	bx	lr

0800d364 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800d364:	b480      	push	{r7}
 800d366:	b087      	sub	sp, #28
 800d368:	af00      	add	r7, sp, #0
 800d36a:	60f8      	str	r0, [r7, #12]
 800d36c:	60b9      	str	r1, [r7, #8]
 800d36e:	607a      	str	r2, [r7, #4]
 800d370:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	6a1b      	ldr	r3, [r3, #32]
 800d376:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	6a1b      	ldr	r3, [r3, #32]
 800d37c:	f023 0210 	bic.w	r2, r3, #16
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	699b      	ldr	r3, [r3, #24]
 800d388:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800d38a:	693b      	ldr	r3, [r7, #16]
 800d38c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d390:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	021b      	lsls	r3, r3, #8
 800d396:	693a      	ldr	r2, [r7, #16]
 800d398:	4313      	orrs	r3, r2
 800d39a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d39c:	693b      	ldr	r3, [r7, #16]
 800d39e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800d3a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800d3a4:	683b      	ldr	r3, [r7, #0]
 800d3a6:	031b      	lsls	r3, r3, #12
 800d3a8:	b29b      	uxth	r3, r3
 800d3aa:	693a      	ldr	r2, [r7, #16]
 800d3ac:	4313      	orrs	r3, r2
 800d3ae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d3b0:	697b      	ldr	r3, [r7, #20]
 800d3b2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800d3b6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800d3b8:	68bb      	ldr	r3, [r7, #8]
 800d3ba:	011b      	lsls	r3, r3, #4
 800d3bc:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800d3c0:	697a      	ldr	r2, [r7, #20]
 800d3c2:	4313      	orrs	r3, r2
 800d3c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	693a      	ldr	r2, [r7, #16]
 800d3ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	697a      	ldr	r2, [r7, #20]
 800d3d0:	621a      	str	r2, [r3, #32]
}
 800d3d2:	bf00      	nop
 800d3d4:	371c      	adds	r7, #28
 800d3d6:	46bd      	mov	sp, r7
 800d3d8:	bc80      	pop	{r7}
 800d3da:	4770      	bx	lr

0800d3dc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d3dc:	b480      	push	{r7}
 800d3de:	b087      	sub	sp, #28
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	60f8      	str	r0, [r7, #12]
 800d3e4:	60b9      	str	r1, [r7, #8]
 800d3e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	6a1b      	ldr	r3, [r3, #32]
 800d3ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	6a1b      	ldr	r3, [r3, #32]
 800d3f2:	f023 0210 	bic.w	r2, r3, #16
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	699b      	ldr	r3, [r3, #24]
 800d3fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d400:	693b      	ldr	r3, [r7, #16]
 800d402:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800d406:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	031b      	lsls	r3, r3, #12
 800d40c:	693a      	ldr	r2, [r7, #16]
 800d40e:	4313      	orrs	r3, r2
 800d410:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d412:	697b      	ldr	r3, [r7, #20]
 800d414:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800d418:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d41a:	68bb      	ldr	r3, [r7, #8]
 800d41c:	011b      	lsls	r3, r3, #4
 800d41e:	697a      	ldr	r2, [r7, #20]
 800d420:	4313      	orrs	r3, r2
 800d422:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	693a      	ldr	r2, [r7, #16]
 800d428:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	697a      	ldr	r2, [r7, #20]
 800d42e:	621a      	str	r2, [r3, #32]
}
 800d430:	bf00      	nop
 800d432:	371c      	adds	r7, #28
 800d434:	46bd      	mov	sp, r7
 800d436:	bc80      	pop	{r7}
 800d438:	4770      	bx	lr

0800d43a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800d43a:	b480      	push	{r7}
 800d43c:	b087      	sub	sp, #28
 800d43e:	af00      	add	r7, sp, #0
 800d440:	60f8      	str	r0, [r7, #12]
 800d442:	60b9      	str	r1, [r7, #8]
 800d444:	607a      	str	r2, [r7, #4]
 800d446:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	6a1b      	ldr	r3, [r3, #32]
 800d44c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	6a1b      	ldr	r3, [r3, #32]
 800d452:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	69db      	ldr	r3, [r3, #28]
 800d45e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800d460:	693b      	ldr	r3, [r7, #16]
 800d462:	f023 0303 	bic.w	r3, r3, #3
 800d466:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800d468:	693a      	ldr	r2, [r7, #16]
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	4313      	orrs	r3, r2
 800d46e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800d470:	693b      	ldr	r3, [r7, #16]
 800d472:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800d476:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800d478:	683b      	ldr	r3, [r7, #0]
 800d47a:	011b      	lsls	r3, r3, #4
 800d47c:	b2db      	uxtb	r3, r3
 800d47e:	693a      	ldr	r2, [r7, #16]
 800d480:	4313      	orrs	r3, r2
 800d482:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 800d484:	697b      	ldr	r3, [r7, #20]
 800d486:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800d48a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 800d48c:	68bb      	ldr	r3, [r7, #8]
 800d48e:	021b      	lsls	r3, r3, #8
 800d490:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d494:	697a      	ldr	r2, [r7, #20]
 800d496:	4313      	orrs	r3, r2
 800d498:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	693a      	ldr	r2, [r7, #16]
 800d49e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	697a      	ldr	r2, [r7, #20]
 800d4a4:	621a      	str	r2, [r3, #32]
}
 800d4a6:	bf00      	nop
 800d4a8:	371c      	adds	r7, #28
 800d4aa:	46bd      	mov	sp, r7
 800d4ac:	bc80      	pop	{r7}
 800d4ae:	4770      	bx	lr

0800d4b0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800d4b0:	b480      	push	{r7}
 800d4b2:	b087      	sub	sp, #28
 800d4b4:	af00      	add	r7, sp, #0
 800d4b6:	60f8      	str	r0, [r7, #12]
 800d4b8:	60b9      	str	r1, [r7, #8]
 800d4ba:	607a      	str	r2, [r7, #4]
 800d4bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	6a1b      	ldr	r3, [r3, #32]
 800d4c2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	6a1b      	ldr	r3, [r3, #32]
 800d4c8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	69db      	ldr	r3, [r3, #28]
 800d4d4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800d4d6:	693b      	ldr	r3, [r7, #16]
 800d4d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d4dc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	021b      	lsls	r3, r3, #8
 800d4e2:	693a      	ldr	r2, [r7, #16]
 800d4e4:	4313      	orrs	r3, r2
 800d4e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800d4e8:	693b      	ldr	r3, [r7, #16]
 800d4ea:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800d4ee:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800d4f0:	683b      	ldr	r3, [r7, #0]
 800d4f2:	031b      	lsls	r3, r3, #12
 800d4f4:	b29b      	uxth	r3, r3
 800d4f6:	693a      	ldr	r2, [r7, #16]
 800d4f8:	4313      	orrs	r3, r2
 800d4fa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 800d4fc:	697b      	ldr	r3, [r7, #20]
 800d4fe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800d502:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 800d504:	68bb      	ldr	r3, [r7, #8]
 800d506:	031b      	lsls	r3, r3, #12
 800d508:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d50c:	697a      	ldr	r2, [r7, #20]
 800d50e:	4313      	orrs	r3, r2
 800d510:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	693a      	ldr	r2, [r7, #16]
 800d516:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	697a      	ldr	r2, [r7, #20]
 800d51c:	621a      	str	r2, [r3, #32]
}
 800d51e:	bf00      	nop
 800d520:	371c      	adds	r7, #28
 800d522:	46bd      	mov	sp, r7
 800d524:	bc80      	pop	{r7}
 800d526:	4770      	bx	lr

0800d528 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d528:	b480      	push	{r7}
 800d52a:	b085      	sub	sp, #20
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	6078      	str	r0, [r7, #4]
 800d530:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	689b      	ldr	r3, [r3, #8]
 800d536:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d53e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d540:	683a      	ldr	r2, [r7, #0]
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	4313      	orrs	r3, r2
 800d546:	f043 0307 	orr.w	r3, r3, #7
 800d54a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	68fa      	ldr	r2, [r7, #12]
 800d550:	609a      	str	r2, [r3, #8]
}
 800d552:	bf00      	nop
 800d554:	3714      	adds	r7, #20
 800d556:	46bd      	mov	sp, r7
 800d558:	bc80      	pop	{r7}
 800d55a:	4770      	bx	lr

0800d55c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d55c:	b480      	push	{r7}
 800d55e:	b087      	sub	sp, #28
 800d560:	af00      	add	r7, sp, #0
 800d562:	60f8      	str	r0, [r7, #12]
 800d564:	60b9      	str	r1, [r7, #8]
 800d566:	607a      	str	r2, [r7, #4]
 800d568:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	689b      	ldr	r3, [r3, #8]
 800d56e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d570:	697b      	ldr	r3, [r7, #20]
 800d572:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d576:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d578:	683b      	ldr	r3, [r7, #0]
 800d57a:	021a      	lsls	r2, r3, #8
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	431a      	orrs	r2, r3
 800d580:	68bb      	ldr	r3, [r7, #8]
 800d582:	4313      	orrs	r3, r2
 800d584:	697a      	ldr	r2, [r7, #20]
 800d586:	4313      	orrs	r3, r2
 800d588:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	697a      	ldr	r2, [r7, #20]
 800d58e:	609a      	str	r2, [r3, #8]
}
 800d590:	bf00      	nop
 800d592:	371c      	adds	r7, #28
 800d594:	46bd      	mov	sp, r7
 800d596:	bc80      	pop	{r7}
 800d598:	4770      	bx	lr

0800d59a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d59a:	b480      	push	{r7}
 800d59c:	b087      	sub	sp, #28
 800d59e:	af00      	add	r7, sp, #0
 800d5a0:	60f8      	str	r0, [r7, #12]
 800d5a2:	60b9      	str	r1, [r7, #8]
 800d5a4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d5a6:	68bb      	ldr	r3, [r7, #8]
 800d5a8:	f003 031f 	and.w	r3, r3, #31
 800d5ac:	2201      	movs	r2, #1
 800d5ae:	fa02 f303 	lsl.w	r3, r2, r3
 800d5b2:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	6a1a      	ldr	r2, [r3, #32]
 800d5b8:	697b      	ldr	r3, [r7, #20]
 800d5ba:	43db      	mvns	r3, r3
 800d5bc:	401a      	ands	r2, r3
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	6a1a      	ldr	r2, [r3, #32]
 800d5c6:	68bb      	ldr	r3, [r7, #8]
 800d5c8:	f003 031f 	and.w	r3, r3, #31
 800d5cc:	6879      	ldr	r1, [r7, #4]
 800d5ce:	fa01 f303 	lsl.w	r3, r1, r3
 800d5d2:	431a      	orrs	r2, r3
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	621a      	str	r2, [r3, #32]
}
 800d5d8:	bf00      	nop
 800d5da:	371c      	adds	r7, #28
 800d5dc:	46bd      	mov	sp, r7
 800d5de:	bc80      	pop	{r7}
 800d5e0:	4770      	bx	lr
	...

0800d5e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d5e4:	b480      	push	{r7}
 800d5e6:	b085      	sub	sp, #20
 800d5e8:	af00      	add	r7, sp, #0
 800d5ea:	6078      	str	r0, [r7, #4]
 800d5ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d5f4:	2b01      	cmp	r3, #1
 800d5f6:	d101      	bne.n	800d5fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d5f8:	2302      	movs	r3, #2
 800d5fa:	e050      	b.n	800d69e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	2201      	movs	r2, #1
 800d600:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	2202      	movs	r2, #2
 800d608:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	685b      	ldr	r3, [r3, #4]
 800d612:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	689b      	ldr	r3, [r3, #8]
 800d61a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d622:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d624:	683b      	ldr	r3, [r7, #0]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	68fa      	ldr	r2, [r7, #12]
 800d62a:	4313      	orrs	r3, r2
 800d62c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	68fa      	ldr	r2, [r7, #12]
 800d634:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	4a1b      	ldr	r2, [pc, #108]	@ (800d6a8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800d63c:	4293      	cmp	r3, r2
 800d63e:	d018      	beq.n	800d672 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	4a19      	ldr	r2, [pc, #100]	@ (800d6ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800d646:	4293      	cmp	r3, r2
 800d648:	d013      	beq.n	800d672 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d652:	d00e      	beq.n	800d672 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	4a15      	ldr	r2, [pc, #84]	@ (800d6b0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800d65a:	4293      	cmp	r3, r2
 800d65c:	d009      	beq.n	800d672 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	4a14      	ldr	r2, [pc, #80]	@ (800d6b4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800d664:	4293      	cmp	r3, r2
 800d666:	d004      	beq.n	800d672 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	4a12      	ldr	r2, [pc, #72]	@ (800d6b8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800d66e:	4293      	cmp	r3, r2
 800d670:	d10c      	bne.n	800d68c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d672:	68bb      	ldr	r3, [r7, #8]
 800d674:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d678:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d67a:	683b      	ldr	r3, [r7, #0]
 800d67c:	685b      	ldr	r3, [r3, #4]
 800d67e:	68ba      	ldr	r2, [r7, #8]
 800d680:	4313      	orrs	r3, r2
 800d682:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	68ba      	ldr	r2, [r7, #8]
 800d68a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	2201      	movs	r2, #1
 800d690:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	2200      	movs	r2, #0
 800d698:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d69c:	2300      	movs	r3, #0
}
 800d69e:	4618      	mov	r0, r3
 800d6a0:	3714      	adds	r7, #20
 800d6a2:	46bd      	mov	sp, r7
 800d6a4:	bc80      	pop	{r7}
 800d6a6:	4770      	bx	lr
 800d6a8:	40012c00 	.word	0x40012c00
 800d6ac:	40013400 	.word	0x40013400
 800d6b0:	40000400 	.word	0x40000400
 800d6b4:	40000800 	.word	0x40000800
 800d6b8:	40000c00 	.word	0x40000c00

0800d6bc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d6bc:	b480      	push	{r7}
 800d6be:	b085      	sub	sp, #20
 800d6c0:	af00      	add	r7, sp, #0
 800d6c2:	6078      	str	r0, [r7, #4]
 800d6c4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d6c6:	2300      	movs	r3, #0
 800d6c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d6d0:	2b01      	cmp	r3, #1
 800d6d2:	d101      	bne.n	800d6d8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d6d4:	2302      	movs	r3, #2
 800d6d6:	e03d      	b.n	800d754 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	2201      	movs	r2, #1
 800d6dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800d6e6:	683b      	ldr	r3, [r7, #0]
 800d6e8:	68db      	ldr	r3, [r3, #12]
 800d6ea:	4313      	orrs	r3, r2
 800d6ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800d6f4:	683b      	ldr	r3, [r7, #0]
 800d6f6:	689b      	ldr	r3, [r3, #8]
 800d6f8:	4313      	orrs	r3, r2
 800d6fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800d702:	683b      	ldr	r3, [r7, #0]
 800d704:	685b      	ldr	r3, [r3, #4]
 800d706:	4313      	orrs	r3, r2
 800d708:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800d710:	683b      	ldr	r3, [r7, #0]
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	4313      	orrs	r3, r2
 800d716:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800d71e:	683b      	ldr	r3, [r7, #0]
 800d720:	691b      	ldr	r3, [r3, #16]
 800d722:	4313      	orrs	r3, r2
 800d724:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800d72c:	683b      	ldr	r3, [r7, #0]
 800d72e:	695b      	ldr	r3, [r3, #20]
 800d730:	4313      	orrs	r3, r2
 800d732:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800d73a:	683b      	ldr	r3, [r7, #0]
 800d73c:	69db      	ldr	r3, [r3, #28]
 800d73e:	4313      	orrs	r3, r2
 800d740:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	68fa      	ldr	r2, [r7, #12]
 800d748:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	2200      	movs	r2, #0
 800d74e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d752:	2300      	movs	r3, #0
}
 800d754:	4618      	mov	r0, r3
 800d756:	3714      	adds	r7, #20
 800d758:	46bd      	mov	sp, r7
 800d75a:	bc80      	pop	{r7}
 800d75c:	4770      	bx	lr

0800d75e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d75e:	b480      	push	{r7}
 800d760:	b083      	sub	sp, #12
 800d762:	af00      	add	r7, sp, #0
 800d764:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d766:	bf00      	nop
 800d768:	370c      	adds	r7, #12
 800d76a:	46bd      	mov	sp, r7
 800d76c:	bc80      	pop	{r7}
 800d76e:	4770      	bx	lr

0800d770 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d770:	b480      	push	{r7}
 800d772:	b083      	sub	sp, #12
 800d774:	af00      	add	r7, sp, #0
 800d776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d778:	bf00      	nop
 800d77a:	370c      	adds	r7, #12
 800d77c:	46bd      	mov	sp, r7
 800d77e:	bc80      	pop	{r7}
 800d780:	4770      	bx	lr

0800d782 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d782:	b580      	push	{r7, lr}
 800d784:	b082      	sub	sp, #8
 800d786:	af00      	add	r7, sp, #0
 800d788:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d101      	bne.n	800d794 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d790:	2301      	movs	r3, #1
 800d792:	e042      	b.n	800d81a <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d79a:	b2db      	uxtb	r3, r3
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d106      	bne.n	800d7ae <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	2200      	movs	r2, #0
 800d7a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d7a8:	6878      	ldr	r0, [r7, #4]
 800d7aa:	f7fc fe49 	bl	800a440 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	2224      	movs	r2, #36	@ 0x24
 800d7b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	68da      	ldr	r2, [r3, #12]
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800d7c4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800d7c6:	6878      	ldr	r0, [r7, #4]
 800d7c8:	f000 ff30 	bl	800e62c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	691a      	ldr	r2, [r3, #16]
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800d7da:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	695a      	ldr	r2, [r3, #20]
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800d7ea:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	68da      	ldr	r2, [r3, #12]
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800d7fa:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	2200      	movs	r2, #0
 800d800:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	2220      	movs	r2, #32
 800d806:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	2220      	movs	r2, #32
 800d80e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	2200      	movs	r2, #0
 800d816:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800d818:	2300      	movs	r3, #0
}
 800d81a:	4618      	mov	r0, r3
 800d81c:	3708      	adds	r7, #8
 800d81e:	46bd      	mov	sp, r7
 800d820:	bd80      	pop	{r7, pc}
	...

0800d824 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800d824:	b580      	push	{r7, lr}
 800d826:	b08c      	sub	sp, #48	@ 0x30
 800d828:	af00      	add	r7, sp, #0
 800d82a:	60f8      	str	r0, [r7, #12]
 800d82c:	60b9      	str	r1, [r7, #8]
 800d82e:	4613      	mov	r3, r2
 800d830:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d838:	b2db      	uxtb	r3, r3
 800d83a:	2b20      	cmp	r3, #32
 800d83c:	d156      	bne.n	800d8ec <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800d83e:	68bb      	ldr	r3, [r7, #8]
 800d840:	2b00      	cmp	r3, #0
 800d842:	d002      	beq.n	800d84a <HAL_UART_Transmit_DMA+0x26>
 800d844:	88fb      	ldrh	r3, [r7, #6]
 800d846:	2b00      	cmp	r3, #0
 800d848:	d101      	bne.n	800d84e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800d84a:	2301      	movs	r3, #1
 800d84c:	e04f      	b.n	800d8ee <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800d84e:	68ba      	ldr	r2, [r7, #8]
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	88fa      	ldrh	r2, [r7, #6]
 800d858:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	88fa      	ldrh	r2, [r7, #6]
 800d85e:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	2200      	movs	r2, #0
 800d864:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	2221      	movs	r2, #33	@ 0x21
 800d86a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d872:	4a21      	ldr	r2, [pc, #132]	@ (800d8f8 <HAL_UART_Transmit_DMA+0xd4>)
 800d874:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d87a:	4a20      	ldr	r2, [pc, #128]	@ (800d8fc <HAL_UART_Transmit_DMA+0xd8>)
 800d87c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d882:	4a1f      	ldr	r2, [pc, #124]	@ (800d900 <HAL_UART_Transmit_DMA+0xdc>)
 800d884:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d88a:	2200      	movs	r2, #0
 800d88c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 800d88e:	f107 0308 	add.w	r3, r7, #8
 800d892:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800d898:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d89a:	6819      	ldr	r1, [r3, #0]
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	3304      	adds	r3, #4
 800d8a2:	461a      	mov	r2, r3
 800d8a4:	88fb      	ldrh	r3, [r7, #6]
 800d8a6:	f7fd f96f 	bl	800ab88 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800d8b2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	3314      	adds	r3, #20
 800d8ba:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8bc:	69bb      	ldr	r3, [r7, #24]
 800d8be:	e853 3f00 	ldrex	r3, [r3]
 800d8c2:	617b      	str	r3, [r7, #20]
   return(result);
 800d8c4:	697b      	ldr	r3, [r7, #20]
 800d8c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d8ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	3314      	adds	r3, #20
 800d8d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d8d4:	627a      	str	r2, [r7, #36]	@ 0x24
 800d8d6:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8d8:	6a39      	ldr	r1, [r7, #32]
 800d8da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d8dc:	e841 2300 	strex	r3, r2, [r1]
 800d8e0:	61fb      	str	r3, [r7, #28]
   return(result);
 800d8e2:	69fb      	ldr	r3, [r7, #28]
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d1e5      	bne.n	800d8b4 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 800d8e8:	2300      	movs	r3, #0
 800d8ea:	e000      	b.n	800d8ee <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 800d8ec:	2302      	movs	r3, #2
  }
}
 800d8ee:	4618      	mov	r0, r3
 800d8f0:	3730      	adds	r7, #48	@ 0x30
 800d8f2:	46bd      	mov	sp, r7
 800d8f4:	bd80      	pop	{r7, pc}
 800d8f6:	bf00      	nop
 800d8f8:	0800dec1 	.word	0x0800dec1
 800d8fc:	0800df5b 	.word	0x0800df5b
 800d900:	0800e0df 	.word	0x0800e0df

0800d904 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d904:	b580      	push	{r7, lr}
 800d906:	b084      	sub	sp, #16
 800d908:	af00      	add	r7, sp, #0
 800d90a:	60f8      	str	r0, [r7, #12]
 800d90c:	60b9      	str	r1, [r7, #8]
 800d90e:	4613      	mov	r3, r2
 800d910:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d918:	b2db      	uxtb	r3, r3
 800d91a:	2b20      	cmp	r3, #32
 800d91c:	d112      	bne.n	800d944 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800d91e:	68bb      	ldr	r3, [r7, #8]
 800d920:	2b00      	cmp	r3, #0
 800d922:	d002      	beq.n	800d92a <HAL_UART_Receive_DMA+0x26>
 800d924:	88fb      	ldrh	r3, [r7, #6]
 800d926:	2b00      	cmp	r3, #0
 800d928:	d101      	bne.n	800d92e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800d92a:	2301      	movs	r3, #1
 800d92c:	e00b      	b.n	800d946 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	2200      	movs	r2, #0
 800d932:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800d934:	88fb      	ldrh	r3, [r7, #6]
 800d936:	461a      	mov	r2, r3
 800d938:	68b9      	ldr	r1, [r7, #8]
 800d93a:	68f8      	ldr	r0, [r7, #12]
 800d93c:	f000 fc1a 	bl	800e174 <UART_Start_Receive_DMA>
 800d940:	4603      	mov	r3, r0
 800d942:	e000      	b.n	800d946 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800d944:	2302      	movs	r3, #2
  }
}
 800d946:	4618      	mov	r0, r3
 800d948:	3710      	adds	r7, #16
 800d94a:	46bd      	mov	sp, r7
 800d94c:	bd80      	pop	{r7, pc}
	...

0800d950 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d950:	b580      	push	{r7, lr}
 800d952:	b0ba      	sub	sp, #232	@ 0xe8
 800d954:	af00      	add	r7, sp, #0
 800d956:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	68db      	ldr	r3, [r3, #12]
 800d968:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	695b      	ldr	r3, [r3, #20]
 800d972:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800d976:	2300      	movs	r3, #0
 800d978:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800d97c:	2300      	movs	r3, #0
 800d97e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800d982:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d986:	f003 030f 	and.w	r3, r3, #15
 800d98a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800d98e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d992:	2b00      	cmp	r3, #0
 800d994:	d10f      	bne.n	800d9b6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800d996:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d99a:	f003 0320 	and.w	r3, r3, #32
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d009      	beq.n	800d9b6 <HAL_UART_IRQHandler+0x66>
 800d9a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d9a6:	f003 0320 	and.w	r3, r3, #32
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d003      	beq.n	800d9b6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800d9ae:	6878      	ldr	r0, [r7, #4]
 800d9b0:	f000 fd7e 	bl	800e4b0 <UART_Receive_IT>
      return;
 800d9b4:	e25b      	b.n	800de6e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800d9b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	f000 80de 	beq.w	800db7c <HAL_UART_IRQHandler+0x22c>
 800d9c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d9c4:	f003 0301 	and.w	r3, r3, #1
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d106      	bne.n	800d9da <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800d9cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d9d0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	f000 80d1 	beq.w	800db7c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800d9da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d9de:	f003 0301 	and.w	r3, r3, #1
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d00b      	beq.n	800d9fe <HAL_UART_IRQHandler+0xae>
 800d9e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d9ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d005      	beq.n	800d9fe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d9f6:	f043 0201 	orr.w	r2, r3, #1
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d9fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800da02:	f003 0304 	and.w	r3, r3, #4
 800da06:	2b00      	cmp	r3, #0
 800da08:	d00b      	beq.n	800da22 <HAL_UART_IRQHandler+0xd2>
 800da0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800da0e:	f003 0301 	and.w	r3, r3, #1
 800da12:	2b00      	cmp	r3, #0
 800da14:	d005      	beq.n	800da22 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800da1a:	f043 0202 	orr.w	r2, r3, #2
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800da22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800da26:	f003 0302 	and.w	r3, r3, #2
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d00b      	beq.n	800da46 <HAL_UART_IRQHandler+0xf6>
 800da2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800da32:	f003 0301 	and.w	r3, r3, #1
 800da36:	2b00      	cmp	r3, #0
 800da38:	d005      	beq.n	800da46 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800da3e:	f043 0204 	orr.w	r2, r3, #4
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800da46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800da4a:	f003 0308 	and.w	r3, r3, #8
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d011      	beq.n	800da76 <HAL_UART_IRQHandler+0x126>
 800da52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800da56:	f003 0320 	and.w	r3, r3, #32
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d105      	bne.n	800da6a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800da5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800da62:	f003 0301 	and.w	r3, r3, #1
 800da66:	2b00      	cmp	r3, #0
 800da68:	d005      	beq.n	800da76 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800da6e:	f043 0208 	orr.w	r2, r3, #8
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	f000 81f2 	beq.w	800de64 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800da80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800da84:	f003 0320 	and.w	r3, r3, #32
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d008      	beq.n	800da9e <HAL_UART_IRQHandler+0x14e>
 800da8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800da90:	f003 0320 	and.w	r3, r3, #32
 800da94:	2b00      	cmp	r3, #0
 800da96:	d002      	beq.n	800da9e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800da98:	6878      	ldr	r0, [r7, #4]
 800da9a:	f000 fd09 	bl	800e4b0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	695b      	ldr	r3, [r3, #20]
 800daa4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	bf14      	ite	ne
 800daac:	2301      	movne	r3, #1
 800daae:	2300      	moveq	r3, #0
 800dab0:	b2db      	uxtb	r3, r3
 800dab2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800daba:	f003 0308 	and.w	r3, r3, #8
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d103      	bne.n	800daca <HAL_UART_IRQHandler+0x17a>
 800dac2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d04f      	beq.n	800db6a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800daca:	6878      	ldr	r0, [r7, #4]
 800dacc:	f000 fc13 	bl	800e2f6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	695b      	ldr	r3, [r3, #20]
 800dad6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d041      	beq.n	800db62 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	3314      	adds	r3, #20
 800dae4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dae8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800daec:	e853 3f00 	ldrex	r3, [r3]
 800daf0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800daf4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800daf8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dafc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	3314      	adds	r3, #20
 800db06:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800db0a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800db0e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db12:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800db16:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800db1a:	e841 2300 	strex	r3, r2, [r1]
 800db1e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800db22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800db26:	2b00      	cmp	r3, #0
 800db28:	d1d9      	bne.n	800dade <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d013      	beq.n	800db5a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800db36:	4a7e      	ldr	r2, [pc, #504]	@ (800dd30 <HAL_UART_IRQHandler+0x3e0>)
 800db38:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800db3e:	4618      	mov	r0, r3
 800db40:	f7fd f8be 	bl	800acc0 <HAL_DMA_Abort_IT>
 800db44:	4603      	mov	r3, r0
 800db46:	2b00      	cmp	r3, #0
 800db48:	d016      	beq.n	800db78 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800db4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800db50:	687a      	ldr	r2, [r7, #4]
 800db52:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800db54:	4610      	mov	r0, r2
 800db56:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800db58:	e00e      	b.n	800db78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800db5a:	6878      	ldr	r0, [r7, #4]
 800db5c:	f000 f99c 	bl	800de98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800db60:	e00a      	b.n	800db78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800db62:	6878      	ldr	r0, [r7, #4]
 800db64:	f000 f998 	bl	800de98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800db68:	e006      	b.n	800db78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800db6a:	6878      	ldr	r0, [r7, #4]
 800db6c:	f000 f994 	bl	800de98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	2200      	movs	r2, #0
 800db74:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800db76:	e175      	b.n	800de64 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800db78:	bf00      	nop
    return;
 800db7a:	e173      	b.n	800de64 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800db80:	2b01      	cmp	r3, #1
 800db82:	f040 814f 	bne.w	800de24 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800db86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800db8a:	f003 0310 	and.w	r3, r3, #16
 800db8e:	2b00      	cmp	r3, #0
 800db90:	f000 8148 	beq.w	800de24 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800db94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800db98:	f003 0310 	and.w	r3, r3, #16
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	f000 8141 	beq.w	800de24 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800dba2:	2300      	movs	r3, #0
 800dba4:	60bb      	str	r3, [r7, #8]
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	60bb      	str	r3, [r7, #8]
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	685b      	ldr	r3, [r3, #4]
 800dbb4:	60bb      	str	r3, [r7, #8]
 800dbb6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	695b      	ldr	r3, [r3, #20]
 800dbbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	f000 80b6 	beq.w	800dd34 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	685b      	ldr	r3, [r3, #4]
 800dbd0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800dbd4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	f000 8145 	beq.w	800de68 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800dbe2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800dbe6:	429a      	cmp	r2, r3
 800dbe8:	f080 813e 	bcs.w	800de68 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800dbf2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dbf8:	699b      	ldr	r3, [r3, #24]
 800dbfa:	2b20      	cmp	r3, #32
 800dbfc:	f000 8088 	beq.w	800dd10 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	330c      	adds	r3, #12
 800dc06:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc0a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800dc0e:	e853 3f00 	ldrex	r3, [r3]
 800dc12:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800dc16:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800dc1a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800dc1e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	330c      	adds	r3, #12
 800dc28:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800dc2c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800dc30:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc34:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800dc38:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800dc3c:	e841 2300 	strex	r3, r2, [r1]
 800dc40:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800dc44:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d1d9      	bne.n	800dc00 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	3314      	adds	r3, #20
 800dc52:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc54:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800dc56:	e853 3f00 	ldrex	r3, [r3]
 800dc5a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800dc5c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800dc5e:	f023 0301 	bic.w	r3, r3, #1
 800dc62:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	3314      	adds	r3, #20
 800dc6c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800dc70:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800dc74:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc76:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800dc78:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800dc7c:	e841 2300 	strex	r3, r2, [r1]
 800dc80:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800dc82:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d1e1      	bne.n	800dc4c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	3314      	adds	r3, #20
 800dc8e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc90:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800dc92:	e853 3f00 	ldrex	r3, [r3]
 800dc96:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800dc98:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dc9a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dc9e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	3314      	adds	r3, #20
 800dca8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800dcac:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800dcae:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcb0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800dcb2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800dcb4:	e841 2300 	strex	r3, r2, [r1]
 800dcb8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800dcba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d1e3      	bne.n	800dc88 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	2220      	movs	r2, #32
 800dcc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	2200      	movs	r2, #0
 800dccc:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	330c      	adds	r3, #12
 800dcd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcd6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dcd8:	e853 3f00 	ldrex	r3, [r3]
 800dcdc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800dcde:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dce0:	f023 0310 	bic.w	r3, r3, #16
 800dce4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	330c      	adds	r3, #12
 800dcee:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800dcf2:	65ba      	str	r2, [r7, #88]	@ 0x58
 800dcf4:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcf6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800dcf8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800dcfa:	e841 2300 	strex	r3, r2, [r1]
 800dcfe:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800dd00:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d1e3      	bne.n	800dcce <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dd0a:	4618      	mov	r0, r3
 800dd0c:	f7fc ff9c 	bl	800ac48 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	2202      	movs	r2, #2
 800dd14:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800dd1e:	b29b      	uxth	r3, r3
 800dd20:	1ad3      	subs	r3, r2, r3
 800dd22:	b29b      	uxth	r3, r3
 800dd24:	4619      	mov	r1, r3
 800dd26:	6878      	ldr	r0, [r7, #4]
 800dd28:	f000 f8bf 	bl	800deaa <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800dd2c:	e09c      	b.n	800de68 <HAL_UART_IRQHandler+0x518>
 800dd2e:	bf00      	nop
 800dd30:	0800e3bb 	.word	0x0800e3bb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800dd3c:	b29b      	uxth	r3, r3
 800dd3e:	1ad3      	subs	r3, r2, r3
 800dd40:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800dd48:	b29b      	uxth	r3, r3
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	f000 808e 	beq.w	800de6c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800dd50:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	f000 8089 	beq.w	800de6c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	330c      	adds	r3, #12
 800dd60:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd64:	e853 3f00 	ldrex	r3, [r3]
 800dd68:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800dd6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd6c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800dd70:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	330c      	adds	r3, #12
 800dd7a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800dd7e:	647a      	str	r2, [r7, #68]	@ 0x44
 800dd80:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd82:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800dd84:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800dd86:	e841 2300 	strex	r3, r2, [r1]
 800dd8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800dd8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d1e3      	bne.n	800dd5a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	3314      	adds	r3, #20
 800dd98:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd9c:	e853 3f00 	ldrex	r3, [r3]
 800dda0:	623b      	str	r3, [r7, #32]
   return(result);
 800dda2:	6a3b      	ldr	r3, [r7, #32]
 800dda4:	f023 0301 	bic.w	r3, r3, #1
 800dda8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	3314      	adds	r3, #20
 800ddb2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800ddb6:	633a      	str	r2, [r7, #48]	@ 0x30
 800ddb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ddbc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ddbe:	e841 2300 	strex	r3, r2, [r1]
 800ddc2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ddc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d1e3      	bne.n	800dd92 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	2220      	movs	r2, #32
 800ddce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	2200      	movs	r2, #0
 800ddd6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	330c      	adds	r3, #12
 800ddde:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dde0:	693b      	ldr	r3, [r7, #16]
 800dde2:	e853 3f00 	ldrex	r3, [r3]
 800dde6:	60fb      	str	r3, [r7, #12]
   return(result);
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	f023 0310 	bic.w	r3, r3, #16
 800ddee:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	330c      	adds	r3, #12
 800ddf8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800ddfc:	61fa      	str	r2, [r7, #28]
 800ddfe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de00:	69b9      	ldr	r1, [r7, #24]
 800de02:	69fa      	ldr	r2, [r7, #28]
 800de04:	e841 2300 	strex	r3, r2, [r1]
 800de08:	617b      	str	r3, [r7, #20]
   return(result);
 800de0a:	697b      	ldr	r3, [r7, #20]
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d1e3      	bne.n	800ddd8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	2202      	movs	r2, #2
 800de14:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800de16:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800de1a:	4619      	mov	r1, r3
 800de1c:	6878      	ldr	r0, [r7, #4]
 800de1e:	f000 f844 	bl	800deaa <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800de22:	e023      	b.n	800de6c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800de24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800de28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d009      	beq.n	800de44 <HAL_UART_IRQHandler+0x4f4>
 800de30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800de34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d003      	beq.n	800de44 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800de3c:	6878      	ldr	r0, [r7, #4]
 800de3e:	f000 fad0 	bl	800e3e2 <UART_Transmit_IT>
    return;
 800de42:	e014      	b.n	800de6e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800de44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800de48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d00e      	beq.n	800de6e <HAL_UART_IRQHandler+0x51e>
 800de50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800de54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d008      	beq.n	800de6e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800de5c:	6878      	ldr	r0, [r7, #4]
 800de5e:	f000 fb0f 	bl	800e480 <UART_EndTransmit_IT>
    return;
 800de62:	e004      	b.n	800de6e <HAL_UART_IRQHandler+0x51e>
    return;
 800de64:	bf00      	nop
 800de66:	e002      	b.n	800de6e <HAL_UART_IRQHandler+0x51e>
      return;
 800de68:	bf00      	nop
 800de6a:	e000      	b.n	800de6e <HAL_UART_IRQHandler+0x51e>
      return;
 800de6c:	bf00      	nop
  }
}
 800de6e:	37e8      	adds	r7, #232	@ 0xe8
 800de70:	46bd      	mov	sp, r7
 800de72:	bd80      	pop	{r7, pc}

0800de74 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800de74:	b480      	push	{r7}
 800de76:	b083      	sub	sp, #12
 800de78:	af00      	add	r7, sp, #0
 800de7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800de7c:	bf00      	nop
 800de7e:	370c      	adds	r7, #12
 800de80:	46bd      	mov	sp, r7
 800de82:	bc80      	pop	{r7}
 800de84:	4770      	bx	lr

0800de86 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800de86:	b480      	push	{r7}
 800de88:	b083      	sub	sp, #12
 800de8a:	af00      	add	r7, sp, #0
 800de8c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800de8e:	bf00      	nop
 800de90:	370c      	adds	r7, #12
 800de92:	46bd      	mov	sp, r7
 800de94:	bc80      	pop	{r7}
 800de96:	4770      	bx	lr

0800de98 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800de98:	b480      	push	{r7}
 800de9a:	b083      	sub	sp, #12
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800dea0:	bf00      	nop
 800dea2:	370c      	adds	r7, #12
 800dea4:	46bd      	mov	sp, r7
 800dea6:	bc80      	pop	{r7}
 800dea8:	4770      	bx	lr

0800deaa <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800deaa:	b480      	push	{r7}
 800deac:	b083      	sub	sp, #12
 800deae:	af00      	add	r7, sp, #0
 800deb0:	6078      	str	r0, [r7, #4]
 800deb2:	460b      	mov	r3, r1
 800deb4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800deb6:	bf00      	nop
 800deb8:	370c      	adds	r7, #12
 800deba:	46bd      	mov	sp, r7
 800debc:	bc80      	pop	{r7}
 800debe:	4770      	bx	lr

0800dec0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800dec0:	b580      	push	{r7, lr}
 800dec2:	b090      	sub	sp, #64	@ 0x40
 800dec4:	af00      	add	r7, sp, #0
 800dec6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800decc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	f003 0320 	and.w	r3, r3, #32
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d137      	bne.n	800df4c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800dedc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dede:	2200      	movs	r2, #0
 800dee0:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800dee2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	3314      	adds	r3, #20
 800dee8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800deea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800deec:	e853 3f00 	ldrex	r3, [r3]
 800def0:	623b      	str	r3, [r7, #32]
   return(result);
 800def2:	6a3b      	ldr	r3, [r7, #32]
 800def4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800def8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800defa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	3314      	adds	r3, #20
 800df00:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800df02:	633a      	str	r2, [r7, #48]	@ 0x30
 800df04:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df06:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800df08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800df0a:	e841 2300 	strex	r3, r2, [r1]
 800df0e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800df10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df12:	2b00      	cmp	r3, #0
 800df14:	d1e5      	bne.n	800dee2 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800df16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	330c      	adds	r3, #12
 800df1c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df1e:	693b      	ldr	r3, [r7, #16]
 800df20:	e853 3f00 	ldrex	r3, [r3]
 800df24:	60fb      	str	r3, [r7, #12]
   return(result);
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800df2c:	637b      	str	r3, [r7, #52]	@ 0x34
 800df2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	330c      	adds	r3, #12
 800df34:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800df36:	61fa      	str	r2, [r7, #28]
 800df38:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df3a:	69b9      	ldr	r1, [r7, #24]
 800df3c:	69fa      	ldr	r2, [r7, #28]
 800df3e:	e841 2300 	strex	r3, r2, [r1]
 800df42:	617b      	str	r3, [r7, #20]
   return(result);
 800df44:	697b      	ldr	r3, [r7, #20]
 800df46:	2b00      	cmp	r3, #0
 800df48:	d1e5      	bne.n	800df16 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800df4a:	e002      	b.n	800df52 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800df4c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800df4e:	f7f9 ff29 	bl	8007da4 <HAL_UART_TxCpltCallback>
}
 800df52:	bf00      	nop
 800df54:	3740      	adds	r7, #64	@ 0x40
 800df56:	46bd      	mov	sp, r7
 800df58:	bd80      	pop	{r7, pc}

0800df5a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800df5a:	b580      	push	{r7, lr}
 800df5c:	b084      	sub	sp, #16
 800df5e:	af00      	add	r7, sp, #0
 800df60:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df66:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800df68:	68f8      	ldr	r0, [r7, #12]
 800df6a:	f7ff ff83 	bl	800de74 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800df6e:	bf00      	nop
 800df70:	3710      	adds	r7, #16
 800df72:	46bd      	mov	sp, r7
 800df74:	bd80      	pop	{r7, pc}

0800df76 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800df76:	b580      	push	{r7, lr}
 800df78:	b09c      	sub	sp, #112	@ 0x70
 800df7a:	af00      	add	r7, sp, #0
 800df7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df82:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	f003 0320 	and.w	r3, r3, #32
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d172      	bne.n	800e078 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800df92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800df94:	2200      	movs	r2, #0
 800df96:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800df98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	330c      	adds	r3, #12
 800df9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfa0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dfa2:	e853 3f00 	ldrex	r3, [r3]
 800dfa6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800dfa8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dfaa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800dfae:	66bb      	str	r3, [r7, #104]	@ 0x68
 800dfb0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	330c      	adds	r3, #12
 800dfb6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800dfb8:	65ba      	str	r2, [r7, #88]	@ 0x58
 800dfba:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfbc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800dfbe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800dfc0:	e841 2300 	strex	r3, r2, [r1]
 800dfc4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800dfc6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d1e5      	bne.n	800df98 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dfcc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	3314      	adds	r3, #20
 800dfd2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfd6:	e853 3f00 	ldrex	r3, [r3]
 800dfda:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800dfdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dfde:	f023 0301 	bic.w	r3, r3, #1
 800dfe2:	667b      	str	r3, [r7, #100]	@ 0x64
 800dfe4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	3314      	adds	r3, #20
 800dfea:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800dfec:	647a      	str	r2, [r7, #68]	@ 0x44
 800dfee:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dff0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800dff2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800dff4:	e841 2300 	strex	r3, r2, [r1]
 800dff8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800dffa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d1e5      	bne.n	800dfcc <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e000:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	3314      	adds	r3, #20
 800e006:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e00a:	e853 3f00 	ldrex	r3, [r3]
 800e00e:	623b      	str	r3, [r7, #32]
   return(result);
 800e010:	6a3b      	ldr	r3, [r7, #32]
 800e012:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e016:	663b      	str	r3, [r7, #96]	@ 0x60
 800e018:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	3314      	adds	r3, #20
 800e01e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e020:	633a      	str	r2, [r7, #48]	@ 0x30
 800e022:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e024:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e026:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e028:	e841 2300 	strex	r3, r2, [r1]
 800e02c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e02e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e030:	2b00      	cmp	r3, #0
 800e032:	d1e5      	bne.n	800e000 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e034:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e036:	2220      	movs	r2, #32
 800e038:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e03c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e03e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e040:	2b01      	cmp	r3, #1
 800e042:	d119      	bne.n	800e078 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e044:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	330c      	adds	r3, #12
 800e04a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e04c:	693b      	ldr	r3, [r7, #16]
 800e04e:	e853 3f00 	ldrex	r3, [r3]
 800e052:	60fb      	str	r3, [r7, #12]
   return(result);
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	f023 0310 	bic.w	r3, r3, #16
 800e05a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e05c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	330c      	adds	r3, #12
 800e062:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800e064:	61fa      	str	r2, [r7, #28]
 800e066:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e068:	69b9      	ldr	r1, [r7, #24]
 800e06a:	69fa      	ldr	r2, [r7, #28]
 800e06c:	e841 2300 	strex	r3, r2, [r1]
 800e070:	617b      	str	r3, [r7, #20]
   return(result);
 800e072:	697b      	ldr	r3, [r7, #20]
 800e074:	2b00      	cmp	r3, #0
 800e076:	d1e5      	bne.n	800e044 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e078:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e07a:	2200      	movs	r2, #0
 800e07c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e07e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e082:	2b01      	cmp	r3, #1
 800e084:	d106      	bne.n	800e094 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e086:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e088:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800e08a:	4619      	mov	r1, r3
 800e08c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800e08e:	f7ff ff0c 	bl	800deaa <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e092:	e002      	b.n	800e09a <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800e094:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800e096:	f7f9 fe93 	bl	8007dc0 <HAL_UART_RxCpltCallback>
}
 800e09a:	bf00      	nop
 800e09c:	3770      	adds	r7, #112	@ 0x70
 800e09e:	46bd      	mov	sp, r7
 800e0a0:	bd80      	pop	{r7, pc}

0800e0a2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e0a2:	b580      	push	{r7, lr}
 800e0a4:	b084      	sub	sp, #16
 800e0a6:	af00      	add	r7, sp, #0
 800e0a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e0ae:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	2201      	movs	r2, #1
 800e0b4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e0ba:	2b01      	cmp	r3, #1
 800e0bc:	d108      	bne.n	800e0d0 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800e0c2:	085b      	lsrs	r3, r3, #1
 800e0c4:	b29b      	uxth	r3, r3
 800e0c6:	4619      	mov	r1, r3
 800e0c8:	68f8      	ldr	r0, [r7, #12]
 800e0ca:	f7ff feee 	bl	800deaa <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e0ce:	e002      	b.n	800e0d6 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800e0d0:	68f8      	ldr	r0, [r7, #12]
 800e0d2:	f7ff fed8 	bl	800de86 <HAL_UART_RxHalfCpltCallback>
}
 800e0d6:	bf00      	nop
 800e0d8:	3710      	adds	r7, #16
 800e0da:	46bd      	mov	sp, r7
 800e0dc:	bd80      	pop	{r7, pc}

0800e0de <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e0de:	b580      	push	{r7, lr}
 800e0e0:	b084      	sub	sp, #16
 800e0e2:	af00      	add	r7, sp, #0
 800e0e4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800e0e6:	2300      	movs	r3, #0
 800e0e8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e0ee:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800e0f0:	68bb      	ldr	r3, [r7, #8]
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	695b      	ldr	r3, [r3, #20]
 800e0f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	bf14      	ite	ne
 800e0fe:	2301      	movne	r3, #1
 800e100:	2300      	moveq	r3, #0
 800e102:	b2db      	uxtb	r3, r3
 800e104:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800e106:	68bb      	ldr	r3, [r7, #8]
 800e108:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e10c:	b2db      	uxtb	r3, r3
 800e10e:	2b21      	cmp	r3, #33	@ 0x21
 800e110:	d108      	bne.n	800e124 <UART_DMAError+0x46>
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	2b00      	cmp	r3, #0
 800e116:	d005      	beq.n	800e124 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800e118:	68bb      	ldr	r3, [r7, #8]
 800e11a:	2200      	movs	r2, #0
 800e11c:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800e11e:	68b8      	ldr	r0, [r7, #8]
 800e120:	f000 f8c2 	bl	800e2a8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800e124:	68bb      	ldr	r3, [r7, #8]
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	695b      	ldr	r3, [r3, #20]
 800e12a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e12e:	2b00      	cmp	r3, #0
 800e130:	bf14      	ite	ne
 800e132:	2301      	movne	r3, #1
 800e134:	2300      	moveq	r3, #0
 800e136:	b2db      	uxtb	r3, r3
 800e138:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800e13a:	68bb      	ldr	r3, [r7, #8]
 800e13c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e140:	b2db      	uxtb	r3, r3
 800e142:	2b22      	cmp	r3, #34	@ 0x22
 800e144:	d108      	bne.n	800e158 <UART_DMAError+0x7a>
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d005      	beq.n	800e158 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800e14c:	68bb      	ldr	r3, [r7, #8]
 800e14e:	2200      	movs	r2, #0
 800e150:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800e152:	68b8      	ldr	r0, [r7, #8]
 800e154:	f000 f8cf 	bl	800e2f6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800e158:	68bb      	ldr	r3, [r7, #8]
 800e15a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e15c:	f043 0210 	orr.w	r2, r3, #16
 800e160:	68bb      	ldr	r3, [r7, #8]
 800e162:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e164:	68b8      	ldr	r0, [r7, #8]
 800e166:	f7ff fe97 	bl	800de98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e16a:	bf00      	nop
 800e16c:	3710      	adds	r7, #16
 800e16e:	46bd      	mov	sp, r7
 800e170:	bd80      	pop	{r7, pc}
	...

0800e174 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e174:	b580      	push	{r7, lr}
 800e176:	b098      	sub	sp, #96	@ 0x60
 800e178:	af00      	add	r7, sp, #0
 800e17a:	60f8      	str	r0, [r7, #12]
 800e17c:	60b9      	str	r1, [r7, #8]
 800e17e:	4613      	mov	r3, r2
 800e180:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800e182:	68ba      	ldr	r2, [r7, #8]
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	88fa      	ldrh	r2, [r7, #6]
 800e18c:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	2200      	movs	r2, #0
 800e192:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	2222      	movs	r2, #34	@ 0x22
 800e198:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e1a0:	4a3e      	ldr	r2, [pc, #248]	@ (800e29c <UART_Start_Receive_DMA+0x128>)
 800e1a2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e1a8:	4a3d      	ldr	r2, [pc, #244]	@ (800e2a0 <UART_Start_Receive_DMA+0x12c>)
 800e1aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e1b0:	4a3c      	ldr	r2, [pc, #240]	@ (800e2a4 <UART_Start_Receive_DMA+0x130>)
 800e1b2:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e1b8:	2200      	movs	r2, #0
 800e1ba:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800e1bc:	f107 0308 	add.w	r3, r7, #8
 800e1c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	3304      	adds	r3, #4
 800e1cc:	4619      	mov	r1, r3
 800e1ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e1d0:	681a      	ldr	r2, [r3, #0]
 800e1d2:	88fb      	ldrh	r3, [r7, #6]
 800e1d4:	f7fc fcd8 	bl	800ab88 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800e1d8:	2300      	movs	r3, #0
 800e1da:	613b      	str	r3, [r7, #16]
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	613b      	str	r3, [r7, #16]
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	685b      	ldr	r3, [r3, #4]
 800e1ea:	613b      	str	r3, [r7, #16]
 800e1ec:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	691b      	ldr	r3, [r3, #16]
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d019      	beq.n	800e22a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	330c      	adds	r3, #12
 800e1fc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e200:	e853 3f00 	ldrex	r3, [r3]
 800e204:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e206:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e208:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e20c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	330c      	adds	r3, #12
 800e214:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e216:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800e218:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e21a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800e21c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e21e:	e841 2300 	strex	r3, r2, [r1]
 800e222:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800e224:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e226:	2b00      	cmp	r3, #0
 800e228:	d1e5      	bne.n	800e1f6 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	3314      	adds	r3, #20
 800e230:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e232:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e234:	e853 3f00 	ldrex	r3, [r3]
 800e238:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e23a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e23c:	f043 0301 	orr.w	r3, r3, #1
 800e240:	657b      	str	r3, [r7, #84]	@ 0x54
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	3314      	adds	r3, #20
 800e248:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e24a:	63ba      	str	r2, [r7, #56]	@ 0x38
 800e24c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e24e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800e250:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e252:	e841 2300 	strex	r3, r2, [r1]
 800e256:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800e258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d1e5      	bne.n	800e22a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	3314      	adds	r3, #20
 800e264:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e266:	69bb      	ldr	r3, [r7, #24]
 800e268:	e853 3f00 	ldrex	r3, [r3]
 800e26c:	617b      	str	r3, [r7, #20]
   return(result);
 800e26e:	697b      	ldr	r3, [r7, #20]
 800e270:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e274:	653b      	str	r3, [r7, #80]	@ 0x50
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	3314      	adds	r3, #20
 800e27c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e27e:	627a      	str	r2, [r7, #36]	@ 0x24
 800e280:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e282:	6a39      	ldr	r1, [r7, #32]
 800e284:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e286:	e841 2300 	strex	r3, r2, [r1]
 800e28a:	61fb      	str	r3, [r7, #28]
   return(result);
 800e28c:	69fb      	ldr	r3, [r7, #28]
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d1e5      	bne.n	800e25e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800e292:	2300      	movs	r3, #0
}
 800e294:	4618      	mov	r0, r3
 800e296:	3760      	adds	r7, #96	@ 0x60
 800e298:	46bd      	mov	sp, r7
 800e29a:	bd80      	pop	{r7, pc}
 800e29c:	0800df77 	.word	0x0800df77
 800e2a0:	0800e0a3 	.word	0x0800e0a3
 800e2a4:	0800e0df 	.word	0x0800e0df

0800e2a8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800e2a8:	b480      	push	{r7}
 800e2aa:	b089      	sub	sp, #36	@ 0x24
 800e2ac:	af00      	add	r7, sp, #0
 800e2ae:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	330c      	adds	r3, #12
 800e2b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	e853 3f00 	ldrex	r3, [r3]
 800e2be:	60bb      	str	r3, [r7, #8]
   return(result);
 800e2c0:	68bb      	ldr	r3, [r7, #8]
 800e2c2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800e2c6:	61fb      	str	r3, [r7, #28]
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	330c      	adds	r3, #12
 800e2ce:	69fa      	ldr	r2, [r7, #28]
 800e2d0:	61ba      	str	r2, [r7, #24]
 800e2d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2d4:	6979      	ldr	r1, [r7, #20]
 800e2d6:	69ba      	ldr	r2, [r7, #24]
 800e2d8:	e841 2300 	strex	r3, r2, [r1]
 800e2dc:	613b      	str	r3, [r7, #16]
   return(result);
 800e2de:	693b      	ldr	r3, [r7, #16]
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d1e5      	bne.n	800e2b0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	2220      	movs	r2, #32
 800e2e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800e2ec:	bf00      	nop
 800e2ee:	3724      	adds	r7, #36	@ 0x24
 800e2f0:	46bd      	mov	sp, r7
 800e2f2:	bc80      	pop	{r7}
 800e2f4:	4770      	bx	lr

0800e2f6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e2f6:	b480      	push	{r7}
 800e2f8:	b095      	sub	sp, #84	@ 0x54
 800e2fa:	af00      	add	r7, sp, #0
 800e2fc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	330c      	adds	r3, #12
 800e304:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e306:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e308:	e853 3f00 	ldrex	r3, [r3]
 800e30c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800e30e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e310:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e314:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	330c      	adds	r3, #12
 800e31c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e31e:	643a      	str	r2, [r7, #64]	@ 0x40
 800e320:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e322:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e324:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e326:	e841 2300 	strex	r3, r2, [r1]
 800e32a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e32c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d1e5      	bne.n	800e2fe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	3314      	adds	r3, #20
 800e338:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e33a:	6a3b      	ldr	r3, [r7, #32]
 800e33c:	e853 3f00 	ldrex	r3, [r3]
 800e340:	61fb      	str	r3, [r7, #28]
   return(result);
 800e342:	69fb      	ldr	r3, [r7, #28]
 800e344:	f023 0301 	bic.w	r3, r3, #1
 800e348:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	3314      	adds	r3, #20
 800e350:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e352:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e354:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e356:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e358:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e35a:	e841 2300 	strex	r3, r2, [r1]
 800e35e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e362:	2b00      	cmp	r3, #0
 800e364:	d1e5      	bne.n	800e332 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e36a:	2b01      	cmp	r3, #1
 800e36c:	d119      	bne.n	800e3a2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	330c      	adds	r3, #12
 800e374:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	e853 3f00 	ldrex	r3, [r3]
 800e37c:	60bb      	str	r3, [r7, #8]
   return(result);
 800e37e:	68bb      	ldr	r3, [r7, #8]
 800e380:	f023 0310 	bic.w	r3, r3, #16
 800e384:	647b      	str	r3, [r7, #68]	@ 0x44
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	330c      	adds	r3, #12
 800e38c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e38e:	61ba      	str	r2, [r7, #24]
 800e390:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e392:	6979      	ldr	r1, [r7, #20]
 800e394:	69ba      	ldr	r2, [r7, #24]
 800e396:	e841 2300 	strex	r3, r2, [r1]
 800e39a:	613b      	str	r3, [r7, #16]
   return(result);
 800e39c:	693b      	ldr	r3, [r7, #16]
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d1e5      	bne.n	800e36e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	2220      	movs	r2, #32
 800e3a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	2200      	movs	r2, #0
 800e3ae:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800e3b0:	bf00      	nop
 800e3b2:	3754      	adds	r7, #84	@ 0x54
 800e3b4:	46bd      	mov	sp, r7
 800e3b6:	bc80      	pop	{r7}
 800e3b8:	4770      	bx	lr

0800e3ba <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e3ba:	b580      	push	{r7, lr}
 800e3bc:	b084      	sub	sp, #16
 800e3be:	af00      	add	r7, sp, #0
 800e3c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e3c6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	2200      	movs	r2, #0
 800e3cc:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	2200      	movs	r2, #0
 800e3d2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e3d4:	68f8      	ldr	r0, [r7, #12]
 800e3d6:	f7ff fd5f 	bl	800de98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e3da:	bf00      	nop
 800e3dc:	3710      	adds	r7, #16
 800e3de:	46bd      	mov	sp, r7
 800e3e0:	bd80      	pop	{r7, pc}

0800e3e2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800e3e2:	b480      	push	{r7}
 800e3e4:	b085      	sub	sp, #20
 800e3e6:	af00      	add	r7, sp, #0
 800e3e8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e3f0:	b2db      	uxtb	r3, r3
 800e3f2:	2b21      	cmp	r3, #33	@ 0x21
 800e3f4:	d13e      	bne.n	800e474 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	689b      	ldr	r3, [r3, #8]
 800e3fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e3fe:	d114      	bne.n	800e42a <UART_Transmit_IT+0x48>
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	691b      	ldr	r3, [r3, #16]
 800e404:	2b00      	cmp	r3, #0
 800e406:	d110      	bne.n	800e42a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	6a1b      	ldr	r3, [r3, #32]
 800e40c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	881b      	ldrh	r3, [r3, #0]
 800e412:	461a      	mov	r2, r3
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e41c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	6a1b      	ldr	r3, [r3, #32]
 800e422:	1c9a      	adds	r2, r3, #2
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	621a      	str	r2, [r3, #32]
 800e428:	e008      	b.n	800e43c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	6a1b      	ldr	r3, [r3, #32]
 800e42e:	1c59      	adds	r1, r3, #1
 800e430:	687a      	ldr	r2, [r7, #4]
 800e432:	6211      	str	r1, [r2, #32]
 800e434:	781a      	ldrb	r2, [r3, #0]
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800e440:	b29b      	uxth	r3, r3
 800e442:	3b01      	subs	r3, #1
 800e444:	b29b      	uxth	r3, r3
 800e446:	687a      	ldr	r2, [r7, #4]
 800e448:	4619      	mov	r1, r3
 800e44a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d10f      	bne.n	800e470 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	68da      	ldr	r2, [r3, #12]
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800e45e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	68da      	ldr	r2, [r3, #12]
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e46e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800e470:	2300      	movs	r3, #0
 800e472:	e000      	b.n	800e476 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800e474:	2302      	movs	r3, #2
  }
}
 800e476:	4618      	mov	r0, r3
 800e478:	3714      	adds	r7, #20
 800e47a:	46bd      	mov	sp, r7
 800e47c:	bc80      	pop	{r7}
 800e47e:	4770      	bx	lr

0800e480 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e480:	b580      	push	{r7, lr}
 800e482:	b082      	sub	sp, #8
 800e484:	af00      	add	r7, sp, #0
 800e486:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	68da      	ldr	r2, [r3, #12]
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800e496:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	2220      	movs	r2, #32
 800e49c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e4a0:	6878      	ldr	r0, [r7, #4]
 800e4a2:	f7f9 fc7f 	bl	8007da4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800e4a6:	2300      	movs	r3, #0
}
 800e4a8:	4618      	mov	r0, r3
 800e4aa:	3708      	adds	r7, #8
 800e4ac:	46bd      	mov	sp, r7
 800e4ae:	bd80      	pop	{r7, pc}

0800e4b0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800e4b0:	b580      	push	{r7, lr}
 800e4b2:	b08c      	sub	sp, #48	@ 0x30
 800e4b4:	af00      	add	r7, sp, #0
 800e4b6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e4be:	b2db      	uxtb	r3, r3
 800e4c0:	2b22      	cmp	r3, #34	@ 0x22
 800e4c2:	f040 80ae 	bne.w	800e622 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	689b      	ldr	r3, [r3, #8]
 800e4ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e4ce:	d117      	bne.n	800e500 <UART_Receive_IT+0x50>
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	691b      	ldr	r3, [r3, #16]
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d113      	bne.n	800e500 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800e4d8:	2300      	movs	r3, #0
 800e4da:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e4e0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	685b      	ldr	r3, [r3, #4]
 800e4e8:	b29b      	uxth	r3, r3
 800e4ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e4ee:	b29a      	uxth	r2, r3
 800e4f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4f2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e4f8:	1c9a      	adds	r2, r3, #2
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	629a      	str	r2, [r3, #40]	@ 0x28
 800e4fe:	e026      	b.n	800e54e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e504:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800e506:	2300      	movs	r3, #0
 800e508:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	689b      	ldr	r3, [r3, #8]
 800e50e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e512:	d007      	beq.n	800e524 <UART_Receive_IT+0x74>
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	689b      	ldr	r3, [r3, #8]
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d10a      	bne.n	800e532 <UART_Receive_IT+0x82>
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	691b      	ldr	r3, [r3, #16]
 800e520:	2b00      	cmp	r3, #0
 800e522:	d106      	bne.n	800e532 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	685b      	ldr	r3, [r3, #4]
 800e52a:	b2da      	uxtb	r2, r3
 800e52c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e52e:	701a      	strb	r2, [r3, #0]
 800e530:	e008      	b.n	800e544 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	685b      	ldr	r3, [r3, #4]
 800e538:	b2db      	uxtb	r3, r3
 800e53a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e53e:	b2da      	uxtb	r2, r3
 800e540:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e542:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e548:	1c5a      	adds	r2, r3, #1
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800e552:	b29b      	uxth	r3, r3
 800e554:	3b01      	subs	r3, #1
 800e556:	b29b      	uxth	r3, r3
 800e558:	687a      	ldr	r2, [r7, #4]
 800e55a:	4619      	mov	r1, r3
 800e55c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d15d      	bne.n	800e61e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	68da      	ldr	r2, [r3, #12]
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	f022 0220 	bic.w	r2, r2, #32
 800e570:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	68da      	ldr	r2, [r3, #12]
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800e580:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	695a      	ldr	r2, [r3, #20]
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	f022 0201 	bic.w	r2, r2, #1
 800e590:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	2220      	movs	r2, #32
 800e596:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	2200      	movs	r2, #0
 800e59e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e5a4:	2b01      	cmp	r3, #1
 800e5a6:	d135      	bne.n	800e614 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	2200      	movs	r2, #0
 800e5ac:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	330c      	adds	r3, #12
 800e5b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5b6:	697b      	ldr	r3, [r7, #20]
 800e5b8:	e853 3f00 	ldrex	r3, [r3]
 800e5bc:	613b      	str	r3, [r7, #16]
   return(result);
 800e5be:	693b      	ldr	r3, [r7, #16]
 800e5c0:	f023 0310 	bic.w	r3, r3, #16
 800e5c4:	627b      	str	r3, [r7, #36]	@ 0x24
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	330c      	adds	r3, #12
 800e5cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e5ce:	623a      	str	r2, [r7, #32]
 800e5d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5d2:	69f9      	ldr	r1, [r7, #28]
 800e5d4:	6a3a      	ldr	r2, [r7, #32]
 800e5d6:	e841 2300 	strex	r3, r2, [r1]
 800e5da:	61bb      	str	r3, [r7, #24]
   return(result);
 800e5dc:	69bb      	ldr	r3, [r7, #24]
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d1e5      	bne.n	800e5ae <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	f003 0310 	and.w	r3, r3, #16
 800e5ec:	2b10      	cmp	r3, #16
 800e5ee:	d10a      	bne.n	800e606 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800e5f0:	2300      	movs	r3, #0
 800e5f2:	60fb      	str	r3, [r7, #12]
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	60fb      	str	r3, [r7, #12]
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	685b      	ldr	r3, [r3, #4]
 800e602:	60fb      	str	r3, [r7, #12]
 800e604:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800e60a:	4619      	mov	r1, r3
 800e60c:	6878      	ldr	r0, [r7, #4]
 800e60e:	f7ff fc4c 	bl	800deaa <HAL_UARTEx_RxEventCallback>
 800e612:	e002      	b.n	800e61a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800e614:	6878      	ldr	r0, [r7, #4]
 800e616:	f7f9 fbd3 	bl	8007dc0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800e61a:	2300      	movs	r3, #0
 800e61c:	e002      	b.n	800e624 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800e61e:	2300      	movs	r3, #0
 800e620:	e000      	b.n	800e624 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800e622:	2302      	movs	r3, #2
  }
}
 800e624:	4618      	mov	r0, r3
 800e626:	3730      	adds	r7, #48	@ 0x30
 800e628:	46bd      	mov	sp, r7
 800e62a:	bd80      	pop	{r7, pc}

0800e62c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e62c:	b580      	push	{r7, lr}
 800e62e:	b084      	sub	sp, #16
 800e630:	af00      	add	r7, sp, #0
 800e632:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	691b      	ldr	r3, [r3, #16]
 800e63a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	68da      	ldr	r2, [r3, #12]
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	430a      	orrs	r2, r1
 800e648:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	689a      	ldr	r2, [r3, #8]
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	691b      	ldr	r3, [r3, #16]
 800e652:	431a      	orrs	r2, r3
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	695b      	ldr	r3, [r3, #20]
 800e658:	4313      	orrs	r3, r2
 800e65a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	68db      	ldr	r3, [r3, #12]
 800e662:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800e666:	f023 030c 	bic.w	r3, r3, #12
 800e66a:	687a      	ldr	r2, [r7, #4]
 800e66c:	6812      	ldr	r2, [r2, #0]
 800e66e:	68b9      	ldr	r1, [r7, #8]
 800e670:	430b      	orrs	r3, r1
 800e672:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	695b      	ldr	r3, [r3, #20]
 800e67a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	699a      	ldr	r2, [r3, #24]
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	430a      	orrs	r2, r1
 800e688:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	4a2c      	ldr	r2, [pc, #176]	@ (800e740 <UART_SetConfig+0x114>)
 800e690:	4293      	cmp	r3, r2
 800e692:	d103      	bne.n	800e69c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800e694:	f7fd fd54 	bl	800c140 <HAL_RCC_GetPCLK2Freq>
 800e698:	60f8      	str	r0, [r7, #12]
 800e69a:	e002      	b.n	800e6a2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800e69c:	f7fd fd3c 	bl	800c118 <HAL_RCC_GetPCLK1Freq>
 800e6a0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800e6a2:	68fa      	ldr	r2, [r7, #12]
 800e6a4:	4613      	mov	r3, r2
 800e6a6:	009b      	lsls	r3, r3, #2
 800e6a8:	4413      	add	r3, r2
 800e6aa:	009a      	lsls	r2, r3, #2
 800e6ac:	441a      	add	r2, r3
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	685b      	ldr	r3, [r3, #4]
 800e6b2:	009b      	lsls	r3, r3, #2
 800e6b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800e6b8:	4a22      	ldr	r2, [pc, #136]	@ (800e744 <UART_SetConfig+0x118>)
 800e6ba:	fba2 2303 	umull	r2, r3, r2, r3
 800e6be:	095b      	lsrs	r3, r3, #5
 800e6c0:	0119      	lsls	r1, r3, #4
 800e6c2:	68fa      	ldr	r2, [r7, #12]
 800e6c4:	4613      	mov	r3, r2
 800e6c6:	009b      	lsls	r3, r3, #2
 800e6c8:	4413      	add	r3, r2
 800e6ca:	009a      	lsls	r2, r3, #2
 800e6cc:	441a      	add	r2, r3
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	685b      	ldr	r3, [r3, #4]
 800e6d2:	009b      	lsls	r3, r3, #2
 800e6d4:	fbb2 f2f3 	udiv	r2, r2, r3
 800e6d8:	4b1a      	ldr	r3, [pc, #104]	@ (800e744 <UART_SetConfig+0x118>)
 800e6da:	fba3 0302 	umull	r0, r3, r3, r2
 800e6de:	095b      	lsrs	r3, r3, #5
 800e6e0:	2064      	movs	r0, #100	@ 0x64
 800e6e2:	fb00 f303 	mul.w	r3, r0, r3
 800e6e6:	1ad3      	subs	r3, r2, r3
 800e6e8:	011b      	lsls	r3, r3, #4
 800e6ea:	3332      	adds	r3, #50	@ 0x32
 800e6ec:	4a15      	ldr	r2, [pc, #84]	@ (800e744 <UART_SetConfig+0x118>)
 800e6ee:	fba2 2303 	umull	r2, r3, r2, r3
 800e6f2:	095b      	lsrs	r3, r3, #5
 800e6f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e6f8:	4419      	add	r1, r3
 800e6fa:	68fa      	ldr	r2, [r7, #12]
 800e6fc:	4613      	mov	r3, r2
 800e6fe:	009b      	lsls	r3, r3, #2
 800e700:	4413      	add	r3, r2
 800e702:	009a      	lsls	r2, r3, #2
 800e704:	441a      	add	r2, r3
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	685b      	ldr	r3, [r3, #4]
 800e70a:	009b      	lsls	r3, r3, #2
 800e70c:	fbb2 f2f3 	udiv	r2, r2, r3
 800e710:	4b0c      	ldr	r3, [pc, #48]	@ (800e744 <UART_SetConfig+0x118>)
 800e712:	fba3 0302 	umull	r0, r3, r3, r2
 800e716:	095b      	lsrs	r3, r3, #5
 800e718:	2064      	movs	r0, #100	@ 0x64
 800e71a:	fb00 f303 	mul.w	r3, r0, r3
 800e71e:	1ad3      	subs	r3, r2, r3
 800e720:	011b      	lsls	r3, r3, #4
 800e722:	3332      	adds	r3, #50	@ 0x32
 800e724:	4a07      	ldr	r2, [pc, #28]	@ (800e744 <UART_SetConfig+0x118>)
 800e726:	fba2 2303 	umull	r2, r3, r2, r3
 800e72a:	095b      	lsrs	r3, r3, #5
 800e72c:	f003 020f 	and.w	r2, r3, #15
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	440a      	add	r2, r1
 800e736:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800e738:	bf00      	nop
 800e73a:	3710      	adds	r7, #16
 800e73c:	46bd      	mov	sp, r7
 800e73e:	bd80      	pop	{r7, pc}
 800e740:	40013800 	.word	0x40013800
 800e744:	51eb851f 	.word	0x51eb851f

0800e748 <_Znwj>:
 800e748:	2801      	cmp	r0, #1
 800e74a:	bf38      	it	cc
 800e74c:	2001      	movcc	r0, #1
 800e74e:	b510      	push	{r4, lr}
 800e750:	4604      	mov	r4, r0
 800e752:	4620      	mov	r0, r4
 800e754:	f001 fe52 	bl	80103fc <malloc>
 800e758:	b100      	cbz	r0, 800e75c <_Znwj+0x14>
 800e75a:	bd10      	pop	{r4, pc}
 800e75c:	f000 f806 	bl	800e76c <_ZSt15get_new_handlerv>
 800e760:	b908      	cbnz	r0, 800e766 <_Znwj+0x1e>
 800e762:	f001 fe27 	bl	80103b4 <abort>
 800e766:	4780      	blx	r0
 800e768:	e7f3      	b.n	800e752 <_Znwj+0xa>
	...

0800e76c <_ZSt15get_new_handlerv>:
 800e76c:	4b02      	ldr	r3, [pc, #8]	@ (800e778 <_ZSt15get_new_handlerv+0xc>)
 800e76e:	6818      	ldr	r0, [r3, #0]
 800e770:	f3bf 8f5b 	dmb	ish
 800e774:	4770      	bx	lr
 800e776:	bf00      	nop
 800e778:	20008a24 	.word	0x20008a24

0800e77c <cos>:
 800e77c:	b530      	push	{r4, r5, lr}
 800e77e:	4d20      	ldr	r5, [pc, #128]	@ (800e800 <cos+0x84>)
 800e780:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 800e784:	42ac      	cmp	r4, r5
 800e786:	4602      	mov	r2, r0
 800e788:	460b      	mov	r3, r1
 800e78a:	b087      	sub	sp, #28
 800e78c:	d806      	bhi.n	800e79c <cos+0x20>
 800e78e:	2200      	movs	r2, #0
 800e790:	2300      	movs	r3, #0
 800e792:	b007      	add	sp, #28
 800e794:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e798:	f000 b8ee 	b.w	800e978 <__kernel_cos>
 800e79c:	4d19      	ldr	r5, [pc, #100]	@ (800e804 <cos+0x88>)
 800e79e:	42ac      	cmp	r4, r5
 800e7a0:	d903      	bls.n	800e7aa <cos+0x2e>
 800e7a2:	f7f1 fd4d 	bl	8000240 <__aeabi_dsub>
 800e7a6:	b007      	add	sp, #28
 800e7a8:	bd30      	pop	{r4, r5, pc}
 800e7aa:	aa02      	add	r2, sp, #8
 800e7ac:	f000 fa5c 	bl	800ec68 <__ieee754_rem_pio2>
 800e7b0:	f000 0003 	and.w	r0, r0, #3
 800e7b4:	2801      	cmp	r0, #1
 800e7b6:	d009      	beq.n	800e7cc <cos+0x50>
 800e7b8:	2802      	cmp	r0, #2
 800e7ba:	d011      	beq.n	800e7e0 <cos+0x64>
 800e7bc:	b9b8      	cbnz	r0, 800e7ee <cos+0x72>
 800e7be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e7c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e7c6:	f000 f8d7 	bl	800e978 <__kernel_cos>
 800e7ca:	e7ec      	b.n	800e7a6 <cos+0x2a>
 800e7cc:	9000      	str	r0, [sp, #0]
 800e7ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e7d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e7d6:	f000 f98f 	bl	800eaf8 <__kernel_sin>
 800e7da:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 800e7de:	e7e2      	b.n	800e7a6 <cos+0x2a>
 800e7e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e7e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e7e8:	f000 f8c6 	bl	800e978 <__kernel_cos>
 800e7ec:	e7f5      	b.n	800e7da <cos+0x5e>
 800e7ee:	2301      	movs	r3, #1
 800e7f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e7f4:	9300      	str	r3, [sp, #0]
 800e7f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e7fa:	f000 f97d 	bl	800eaf8 <__kernel_sin>
 800e7fe:	e7d2      	b.n	800e7a6 <cos+0x2a>
 800e800:	3fe921fb 	.word	0x3fe921fb
 800e804:	7fefffff 	.word	0x7fefffff

0800e808 <sin>:
 800e808:	b530      	push	{r4, r5, lr}
 800e80a:	4d20      	ldr	r5, [pc, #128]	@ (800e88c <sin+0x84>)
 800e80c:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 800e810:	42ac      	cmp	r4, r5
 800e812:	4602      	mov	r2, r0
 800e814:	460b      	mov	r3, r1
 800e816:	b087      	sub	sp, #28
 800e818:	d806      	bhi.n	800e828 <sin+0x20>
 800e81a:	2300      	movs	r3, #0
 800e81c:	2200      	movs	r2, #0
 800e81e:	9300      	str	r3, [sp, #0]
 800e820:	2300      	movs	r3, #0
 800e822:	f000 f969 	bl	800eaf8 <__kernel_sin>
 800e826:	e004      	b.n	800e832 <sin+0x2a>
 800e828:	4d19      	ldr	r5, [pc, #100]	@ (800e890 <sin+0x88>)
 800e82a:	42ac      	cmp	r4, r5
 800e82c:	d903      	bls.n	800e836 <sin+0x2e>
 800e82e:	f7f1 fd07 	bl	8000240 <__aeabi_dsub>
 800e832:	b007      	add	sp, #28
 800e834:	bd30      	pop	{r4, r5, pc}
 800e836:	aa02      	add	r2, sp, #8
 800e838:	f000 fa16 	bl	800ec68 <__ieee754_rem_pio2>
 800e83c:	f000 0003 	and.w	r0, r0, #3
 800e840:	2801      	cmp	r0, #1
 800e842:	d009      	beq.n	800e858 <sin+0x50>
 800e844:	2802      	cmp	r0, #2
 800e846:	d00e      	beq.n	800e866 <sin+0x5e>
 800e848:	b9c0      	cbnz	r0, 800e87c <sin+0x74>
 800e84a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e84e:	2301      	movs	r3, #1
 800e850:	9300      	str	r3, [sp, #0]
 800e852:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e856:	e7e4      	b.n	800e822 <sin+0x1a>
 800e858:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e85c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e860:	f000 f88a 	bl	800e978 <__kernel_cos>
 800e864:	e7e5      	b.n	800e832 <sin+0x2a>
 800e866:	2301      	movs	r3, #1
 800e868:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e86c:	9300      	str	r3, [sp, #0]
 800e86e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e872:	f000 f941 	bl	800eaf8 <__kernel_sin>
 800e876:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 800e87a:	e7da      	b.n	800e832 <sin+0x2a>
 800e87c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e880:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e884:	f000 f878 	bl	800e978 <__kernel_cos>
 800e888:	e7f5      	b.n	800e876 <sin+0x6e>
 800e88a:	bf00      	nop
 800e88c:	3fe921fb 	.word	0x3fe921fb
 800e890:	7fefffff 	.word	0x7fefffff

0800e894 <cosf>:
 800e894:	b507      	push	{r0, r1, r2, lr}
 800e896:	4a1a      	ldr	r2, [pc, #104]	@ (800e900 <cosf+0x6c>)
 800e898:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800e89c:	4293      	cmp	r3, r2
 800e89e:	4601      	mov	r1, r0
 800e8a0:	d805      	bhi.n	800e8ae <cosf+0x1a>
 800e8a2:	2100      	movs	r1, #0
 800e8a4:	b003      	add	sp, #12
 800e8a6:	f85d eb04 	ldr.w	lr, [sp], #4
 800e8aa:	f000 bbd7 	b.w	800f05c <__kernel_cosf>
 800e8ae:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800e8b2:	d304      	bcc.n	800e8be <cosf+0x2a>
 800e8b4:	f7f2 f992 	bl	8000bdc <__aeabi_fsub>
 800e8b8:	b003      	add	sp, #12
 800e8ba:	f85d fb04 	ldr.w	pc, [sp], #4
 800e8be:	4669      	mov	r1, sp
 800e8c0:	f000 fcc2 	bl	800f248 <__ieee754_rem_pio2f>
 800e8c4:	f000 0203 	and.w	r2, r0, #3
 800e8c8:	2a01      	cmp	r2, #1
 800e8ca:	d007      	beq.n	800e8dc <cosf+0x48>
 800e8cc:	2a02      	cmp	r2, #2
 800e8ce:	d00c      	beq.n	800e8ea <cosf+0x56>
 800e8d0:	b982      	cbnz	r2, 800e8f4 <cosf+0x60>
 800e8d2:	9901      	ldr	r1, [sp, #4]
 800e8d4:	9800      	ldr	r0, [sp, #0]
 800e8d6:	f000 fbc1 	bl	800f05c <__kernel_cosf>
 800e8da:	e7ed      	b.n	800e8b8 <cosf+0x24>
 800e8dc:	9901      	ldr	r1, [sp, #4]
 800e8de:	9800      	ldr	r0, [sp, #0]
 800e8e0:	f000 fc3c 	bl	800f15c <__kernel_sinf>
 800e8e4:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800e8e8:	e7e6      	b.n	800e8b8 <cosf+0x24>
 800e8ea:	9901      	ldr	r1, [sp, #4]
 800e8ec:	9800      	ldr	r0, [sp, #0]
 800e8ee:	f000 fbb5 	bl	800f05c <__kernel_cosf>
 800e8f2:	e7f7      	b.n	800e8e4 <cosf+0x50>
 800e8f4:	2201      	movs	r2, #1
 800e8f6:	9901      	ldr	r1, [sp, #4]
 800e8f8:	9800      	ldr	r0, [sp, #0]
 800e8fa:	f000 fc2f 	bl	800f15c <__kernel_sinf>
 800e8fe:	e7db      	b.n	800e8b8 <cosf+0x24>
 800e900:	3f490fd8 	.word	0x3f490fd8

0800e904 <sinf>:
 800e904:	b507      	push	{r0, r1, r2, lr}
 800e906:	4a1b      	ldr	r2, [pc, #108]	@ (800e974 <sinf+0x70>)
 800e908:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800e90c:	4293      	cmp	r3, r2
 800e90e:	4601      	mov	r1, r0
 800e910:	d806      	bhi.n	800e920 <sinf+0x1c>
 800e912:	2200      	movs	r2, #0
 800e914:	2100      	movs	r1, #0
 800e916:	b003      	add	sp, #12
 800e918:	f85d eb04 	ldr.w	lr, [sp], #4
 800e91c:	f000 bc1e 	b.w	800f15c <__kernel_sinf>
 800e920:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800e924:	d304      	bcc.n	800e930 <sinf+0x2c>
 800e926:	f7f2 f959 	bl	8000bdc <__aeabi_fsub>
 800e92a:	b003      	add	sp, #12
 800e92c:	f85d fb04 	ldr.w	pc, [sp], #4
 800e930:	4669      	mov	r1, sp
 800e932:	f000 fc89 	bl	800f248 <__ieee754_rem_pio2f>
 800e936:	f000 0003 	and.w	r0, r0, #3
 800e93a:	2801      	cmp	r0, #1
 800e93c:	d008      	beq.n	800e950 <sinf+0x4c>
 800e93e:	2802      	cmp	r0, #2
 800e940:	d00b      	beq.n	800e95a <sinf+0x56>
 800e942:	b990      	cbnz	r0, 800e96a <sinf+0x66>
 800e944:	2201      	movs	r2, #1
 800e946:	9901      	ldr	r1, [sp, #4]
 800e948:	9800      	ldr	r0, [sp, #0]
 800e94a:	f000 fc07 	bl	800f15c <__kernel_sinf>
 800e94e:	e7ec      	b.n	800e92a <sinf+0x26>
 800e950:	9901      	ldr	r1, [sp, #4]
 800e952:	9800      	ldr	r0, [sp, #0]
 800e954:	f000 fb82 	bl	800f05c <__kernel_cosf>
 800e958:	e7e7      	b.n	800e92a <sinf+0x26>
 800e95a:	2201      	movs	r2, #1
 800e95c:	9901      	ldr	r1, [sp, #4]
 800e95e:	9800      	ldr	r0, [sp, #0]
 800e960:	f000 fbfc 	bl	800f15c <__kernel_sinf>
 800e964:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800e968:	e7df      	b.n	800e92a <sinf+0x26>
 800e96a:	9901      	ldr	r1, [sp, #4]
 800e96c:	9800      	ldr	r0, [sp, #0]
 800e96e:	f000 fb75 	bl	800f05c <__kernel_cosf>
 800e972:	e7f7      	b.n	800e964 <sinf+0x60>
 800e974:	3f490fd8 	.word	0x3f490fd8

0800e978 <__kernel_cos>:
 800e978:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e97c:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 800e980:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 800e984:	4680      	mov	r8, r0
 800e986:	4689      	mov	r9, r1
 800e988:	e9cd 2300 	strd	r2, r3, [sp]
 800e98c:	d204      	bcs.n	800e998 <__kernel_cos+0x20>
 800e98e:	f7f2 f8a9 	bl	8000ae4 <__aeabi_d2iz>
 800e992:	2800      	cmp	r0, #0
 800e994:	f000 8086 	beq.w	800eaa4 <__kernel_cos+0x12c>
 800e998:	4642      	mov	r2, r8
 800e99a:	464b      	mov	r3, r9
 800e99c:	4640      	mov	r0, r8
 800e99e:	4649      	mov	r1, r9
 800e9a0:	f7f1 fe06 	bl	80005b0 <__aeabi_dmul>
 800e9a4:	2200      	movs	r2, #0
 800e9a6:	4b4e      	ldr	r3, [pc, #312]	@ (800eae0 <__kernel_cos+0x168>)
 800e9a8:	4604      	mov	r4, r0
 800e9aa:	460d      	mov	r5, r1
 800e9ac:	f7f1 fe00 	bl	80005b0 <__aeabi_dmul>
 800e9b0:	a33f      	add	r3, pc, #252	@ (adr r3, 800eab0 <__kernel_cos+0x138>)
 800e9b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9b6:	4682      	mov	sl, r0
 800e9b8:	468b      	mov	fp, r1
 800e9ba:	4620      	mov	r0, r4
 800e9bc:	4629      	mov	r1, r5
 800e9be:	f7f1 fdf7 	bl	80005b0 <__aeabi_dmul>
 800e9c2:	a33d      	add	r3, pc, #244	@ (adr r3, 800eab8 <__kernel_cos+0x140>)
 800e9c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9c8:	f7f1 fc3c 	bl	8000244 <__adddf3>
 800e9cc:	4622      	mov	r2, r4
 800e9ce:	462b      	mov	r3, r5
 800e9d0:	f7f1 fdee 	bl	80005b0 <__aeabi_dmul>
 800e9d4:	a33a      	add	r3, pc, #232	@ (adr r3, 800eac0 <__kernel_cos+0x148>)
 800e9d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9da:	f7f1 fc31 	bl	8000240 <__aeabi_dsub>
 800e9de:	4622      	mov	r2, r4
 800e9e0:	462b      	mov	r3, r5
 800e9e2:	f7f1 fde5 	bl	80005b0 <__aeabi_dmul>
 800e9e6:	a338      	add	r3, pc, #224	@ (adr r3, 800eac8 <__kernel_cos+0x150>)
 800e9e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9ec:	f7f1 fc2a 	bl	8000244 <__adddf3>
 800e9f0:	4622      	mov	r2, r4
 800e9f2:	462b      	mov	r3, r5
 800e9f4:	f7f1 fddc 	bl	80005b0 <__aeabi_dmul>
 800e9f8:	a335      	add	r3, pc, #212	@ (adr r3, 800ead0 <__kernel_cos+0x158>)
 800e9fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9fe:	f7f1 fc1f 	bl	8000240 <__aeabi_dsub>
 800ea02:	4622      	mov	r2, r4
 800ea04:	462b      	mov	r3, r5
 800ea06:	f7f1 fdd3 	bl	80005b0 <__aeabi_dmul>
 800ea0a:	a333      	add	r3, pc, #204	@ (adr r3, 800ead8 <__kernel_cos+0x160>)
 800ea0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea10:	f7f1 fc18 	bl	8000244 <__adddf3>
 800ea14:	4622      	mov	r2, r4
 800ea16:	462b      	mov	r3, r5
 800ea18:	f7f1 fdca 	bl	80005b0 <__aeabi_dmul>
 800ea1c:	4622      	mov	r2, r4
 800ea1e:	462b      	mov	r3, r5
 800ea20:	f7f1 fdc6 	bl	80005b0 <__aeabi_dmul>
 800ea24:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ea28:	4604      	mov	r4, r0
 800ea2a:	460d      	mov	r5, r1
 800ea2c:	4640      	mov	r0, r8
 800ea2e:	4649      	mov	r1, r9
 800ea30:	f7f1 fdbe 	bl	80005b0 <__aeabi_dmul>
 800ea34:	460b      	mov	r3, r1
 800ea36:	4602      	mov	r2, r0
 800ea38:	4629      	mov	r1, r5
 800ea3a:	4620      	mov	r0, r4
 800ea3c:	f7f1 fc00 	bl	8000240 <__aeabi_dsub>
 800ea40:	4b28      	ldr	r3, [pc, #160]	@ (800eae4 <__kernel_cos+0x16c>)
 800ea42:	4680      	mov	r8, r0
 800ea44:	429e      	cmp	r6, r3
 800ea46:	4689      	mov	r9, r1
 800ea48:	d80e      	bhi.n	800ea68 <__kernel_cos+0xf0>
 800ea4a:	4602      	mov	r2, r0
 800ea4c:	460b      	mov	r3, r1
 800ea4e:	4650      	mov	r0, sl
 800ea50:	4659      	mov	r1, fp
 800ea52:	f7f1 fbf5 	bl	8000240 <__aeabi_dsub>
 800ea56:	4602      	mov	r2, r0
 800ea58:	2000      	movs	r0, #0
 800ea5a:	460b      	mov	r3, r1
 800ea5c:	4922      	ldr	r1, [pc, #136]	@ (800eae8 <__kernel_cos+0x170>)
 800ea5e:	f7f1 fbef 	bl	8000240 <__aeabi_dsub>
 800ea62:	b003      	add	sp, #12
 800ea64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea68:	2400      	movs	r4, #0
 800ea6a:	4b20      	ldr	r3, [pc, #128]	@ (800eaec <__kernel_cos+0x174>)
 800ea6c:	4622      	mov	r2, r4
 800ea6e:	429e      	cmp	r6, r3
 800ea70:	bf8c      	ite	hi
 800ea72:	4d1f      	ldrhi	r5, [pc, #124]	@ (800eaf0 <__kernel_cos+0x178>)
 800ea74:	f5a6 1500 	subls.w	r5, r6, #2097152	@ 0x200000
 800ea78:	462b      	mov	r3, r5
 800ea7a:	2000      	movs	r0, #0
 800ea7c:	491a      	ldr	r1, [pc, #104]	@ (800eae8 <__kernel_cos+0x170>)
 800ea7e:	f7f1 fbdf 	bl	8000240 <__aeabi_dsub>
 800ea82:	4622      	mov	r2, r4
 800ea84:	4606      	mov	r6, r0
 800ea86:	460f      	mov	r7, r1
 800ea88:	462b      	mov	r3, r5
 800ea8a:	4650      	mov	r0, sl
 800ea8c:	4659      	mov	r1, fp
 800ea8e:	f7f1 fbd7 	bl	8000240 <__aeabi_dsub>
 800ea92:	4642      	mov	r2, r8
 800ea94:	464b      	mov	r3, r9
 800ea96:	f7f1 fbd3 	bl	8000240 <__aeabi_dsub>
 800ea9a:	4602      	mov	r2, r0
 800ea9c:	460b      	mov	r3, r1
 800ea9e:	4630      	mov	r0, r6
 800eaa0:	4639      	mov	r1, r7
 800eaa2:	e7dc      	b.n	800ea5e <__kernel_cos+0xe6>
 800eaa4:	2000      	movs	r0, #0
 800eaa6:	4910      	ldr	r1, [pc, #64]	@ (800eae8 <__kernel_cos+0x170>)
 800eaa8:	e7db      	b.n	800ea62 <__kernel_cos+0xea>
 800eaaa:	bf00      	nop
 800eaac:	f3af 8000 	nop.w
 800eab0:	be8838d4 	.word	0xbe8838d4
 800eab4:	bda8fae9 	.word	0xbda8fae9
 800eab8:	bdb4b1c4 	.word	0xbdb4b1c4
 800eabc:	3e21ee9e 	.word	0x3e21ee9e
 800eac0:	809c52ad 	.word	0x809c52ad
 800eac4:	3e927e4f 	.word	0x3e927e4f
 800eac8:	19cb1590 	.word	0x19cb1590
 800eacc:	3efa01a0 	.word	0x3efa01a0
 800ead0:	16c15177 	.word	0x16c15177
 800ead4:	3f56c16c 	.word	0x3f56c16c
 800ead8:	5555554c 	.word	0x5555554c
 800eadc:	3fa55555 	.word	0x3fa55555
 800eae0:	3fe00000 	.word	0x3fe00000
 800eae4:	3fd33332 	.word	0x3fd33332
 800eae8:	3ff00000 	.word	0x3ff00000
 800eaec:	3fe90000 	.word	0x3fe90000
 800eaf0:	3fd20000 	.word	0x3fd20000
 800eaf4:	00000000 	.word	0x00000000

0800eaf8 <__kernel_sin>:
 800eaf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eafc:	461f      	mov	r7, r3
 800eafe:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800eb02:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800eb06:	4604      	mov	r4, r0
 800eb08:	460d      	mov	r5, r1
 800eb0a:	4616      	mov	r6, r2
 800eb0c:	b085      	sub	sp, #20
 800eb0e:	d203      	bcs.n	800eb18 <__kernel_sin+0x20>
 800eb10:	f7f1 ffe8 	bl	8000ae4 <__aeabi_d2iz>
 800eb14:	2800      	cmp	r0, #0
 800eb16:	d051      	beq.n	800ebbc <__kernel_sin+0xc4>
 800eb18:	4622      	mov	r2, r4
 800eb1a:	462b      	mov	r3, r5
 800eb1c:	4620      	mov	r0, r4
 800eb1e:	4629      	mov	r1, r5
 800eb20:	f7f1 fd46 	bl	80005b0 <__aeabi_dmul>
 800eb24:	4682      	mov	sl, r0
 800eb26:	468b      	mov	fp, r1
 800eb28:	4602      	mov	r2, r0
 800eb2a:	460b      	mov	r3, r1
 800eb2c:	4620      	mov	r0, r4
 800eb2e:	4629      	mov	r1, r5
 800eb30:	f7f1 fd3e 	bl	80005b0 <__aeabi_dmul>
 800eb34:	a33e      	add	r3, pc, #248	@ (adr r3, 800ec30 <__kernel_sin+0x138>)
 800eb36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb3a:	4680      	mov	r8, r0
 800eb3c:	4689      	mov	r9, r1
 800eb3e:	4650      	mov	r0, sl
 800eb40:	4659      	mov	r1, fp
 800eb42:	f7f1 fd35 	bl	80005b0 <__aeabi_dmul>
 800eb46:	a33c      	add	r3, pc, #240	@ (adr r3, 800ec38 <__kernel_sin+0x140>)
 800eb48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb4c:	f7f1 fb78 	bl	8000240 <__aeabi_dsub>
 800eb50:	4652      	mov	r2, sl
 800eb52:	465b      	mov	r3, fp
 800eb54:	f7f1 fd2c 	bl	80005b0 <__aeabi_dmul>
 800eb58:	a339      	add	r3, pc, #228	@ (adr r3, 800ec40 <__kernel_sin+0x148>)
 800eb5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb5e:	f7f1 fb71 	bl	8000244 <__adddf3>
 800eb62:	4652      	mov	r2, sl
 800eb64:	465b      	mov	r3, fp
 800eb66:	f7f1 fd23 	bl	80005b0 <__aeabi_dmul>
 800eb6a:	a337      	add	r3, pc, #220	@ (adr r3, 800ec48 <__kernel_sin+0x150>)
 800eb6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb70:	f7f1 fb66 	bl	8000240 <__aeabi_dsub>
 800eb74:	4652      	mov	r2, sl
 800eb76:	465b      	mov	r3, fp
 800eb78:	f7f1 fd1a 	bl	80005b0 <__aeabi_dmul>
 800eb7c:	a334      	add	r3, pc, #208	@ (adr r3, 800ec50 <__kernel_sin+0x158>)
 800eb7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb82:	f7f1 fb5f 	bl	8000244 <__adddf3>
 800eb86:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800eb88:	e9cd 0100 	strd	r0, r1, [sp]
 800eb8c:	b9db      	cbnz	r3, 800ebc6 <__kernel_sin+0xce>
 800eb8e:	4602      	mov	r2, r0
 800eb90:	460b      	mov	r3, r1
 800eb92:	4650      	mov	r0, sl
 800eb94:	4659      	mov	r1, fp
 800eb96:	f7f1 fd0b 	bl	80005b0 <__aeabi_dmul>
 800eb9a:	a32f      	add	r3, pc, #188	@ (adr r3, 800ec58 <__kernel_sin+0x160>)
 800eb9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eba0:	f7f1 fb4e 	bl	8000240 <__aeabi_dsub>
 800eba4:	4642      	mov	r2, r8
 800eba6:	464b      	mov	r3, r9
 800eba8:	f7f1 fd02 	bl	80005b0 <__aeabi_dmul>
 800ebac:	4602      	mov	r2, r0
 800ebae:	460b      	mov	r3, r1
 800ebb0:	4620      	mov	r0, r4
 800ebb2:	4629      	mov	r1, r5
 800ebb4:	f7f1 fb46 	bl	8000244 <__adddf3>
 800ebb8:	4604      	mov	r4, r0
 800ebba:	460d      	mov	r5, r1
 800ebbc:	4620      	mov	r0, r4
 800ebbe:	4629      	mov	r1, r5
 800ebc0:	b005      	add	sp, #20
 800ebc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebc6:	2200      	movs	r2, #0
 800ebc8:	4630      	mov	r0, r6
 800ebca:	4639      	mov	r1, r7
 800ebcc:	4b24      	ldr	r3, [pc, #144]	@ (800ec60 <__kernel_sin+0x168>)
 800ebce:	f7f1 fcef 	bl	80005b0 <__aeabi_dmul>
 800ebd2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ebd6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ebda:	4640      	mov	r0, r8
 800ebdc:	4649      	mov	r1, r9
 800ebde:	f7f1 fce7 	bl	80005b0 <__aeabi_dmul>
 800ebe2:	4602      	mov	r2, r0
 800ebe4:	460b      	mov	r3, r1
 800ebe6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ebea:	f7f1 fb29 	bl	8000240 <__aeabi_dsub>
 800ebee:	4652      	mov	r2, sl
 800ebf0:	465b      	mov	r3, fp
 800ebf2:	f7f1 fcdd 	bl	80005b0 <__aeabi_dmul>
 800ebf6:	4632      	mov	r2, r6
 800ebf8:	463b      	mov	r3, r7
 800ebfa:	f7f1 fb21 	bl	8000240 <__aeabi_dsub>
 800ebfe:	a316      	add	r3, pc, #88	@ (adr r3, 800ec58 <__kernel_sin+0x160>)
 800ec00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec04:	4606      	mov	r6, r0
 800ec06:	460f      	mov	r7, r1
 800ec08:	4640      	mov	r0, r8
 800ec0a:	4649      	mov	r1, r9
 800ec0c:	f7f1 fcd0 	bl	80005b0 <__aeabi_dmul>
 800ec10:	4602      	mov	r2, r0
 800ec12:	460b      	mov	r3, r1
 800ec14:	4630      	mov	r0, r6
 800ec16:	4639      	mov	r1, r7
 800ec18:	f7f1 fb14 	bl	8000244 <__adddf3>
 800ec1c:	4602      	mov	r2, r0
 800ec1e:	460b      	mov	r3, r1
 800ec20:	4620      	mov	r0, r4
 800ec22:	4629      	mov	r1, r5
 800ec24:	f7f1 fb0c 	bl	8000240 <__aeabi_dsub>
 800ec28:	e7c6      	b.n	800ebb8 <__kernel_sin+0xc0>
 800ec2a:	bf00      	nop
 800ec2c:	f3af 8000 	nop.w
 800ec30:	5acfd57c 	.word	0x5acfd57c
 800ec34:	3de5d93a 	.word	0x3de5d93a
 800ec38:	8a2b9ceb 	.word	0x8a2b9ceb
 800ec3c:	3e5ae5e6 	.word	0x3e5ae5e6
 800ec40:	57b1fe7d 	.word	0x57b1fe7d
 800ec44:	3ec71de3 	.word	0x3ec71de3
 800ec48:	19c161d5 	.word	0x19c161d5
 800ec4c:	3f2a01a0 	.word	0x3f2a01a0
 800ec50:	1110f8a6 	.word	0x1110f8a6
 800ec54:	3f811111 	.word	0x3f811111
 800ec58:	55555549 	.word	0x55555549
 800ec5c:	3fc55555 	.word	0x3fc55555
 800ec60:	3fe00000 	.word	0x3fe00000
 800ec64:	00000000 	.word	0x00000000

0800ec68 <__ieee754_rem_pio2>:
 800ec68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec6c:	4bc4      	ldr	r3, [pc, #784]	@ (800ef80 <__ieee754_rem_pio2+0x318>)
 800ec6e:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 800ec72:	b08d      	sub	sp, #52	@ 0x34
 800ec74:	4598      	cmp	r8, r3
 800ec76:	4606      	mov	r6, r0
 800ec78:	460f      	mov	r7, r1
 800ec7a:	4614      	mov	r4, r2
 800ec7c:	9104      	str	r1, [sp, #16]
 800ec7e:	d807      	bhi.n	800ec90 <__ieee754_rem_pio2+0x28>
 800ec80:	e9c2 6700 	strd	r6, r7, [r2]
 800ec84:	2300      	movs	r3, #0
 800ec86:	2200      	movs	r2, #0
 800ec88:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800ec8c:	2500      	movs	r5, #0
 800ec8e:	e026      	b.n	800ecde <__ieee754_rem_pio2+0x76>
 800ec90:	4bbc      	ldr	r3, [pc, #752]	@ (800ef84 <__ieee754_rem_pio2+0x31c>)
 800ec92:	4598      	cmp	r8, r3
 800ec94:	d876      	bhi.n	800ed84 <__ieee754_rem_pio2+0x11c>
 800ec96:	9b04      	ldr	r3, [sp, #16]
 800ec98:	4dbb      	ldr	r5, [pc, #748]	@ (800ef88 <__ieee754_rem_pio2+0x320>)
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	a3aa      	add	r3, pc, #680	@ (adr r3, 800ef48 <__ieee754_rem_pio2+0x2e0>)
 800ec9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eca2:	dd38      	ble.n	800ed16 <__ieee754_rem_pio2+0xae>
 800eca4:	f7f1 facc 	bl	8000240 <__aeabi_dsub>
 800eca8:	45a8      	cmp	r8, r5
 800ecaa:	4606      	mov	r6, r0
 800ecac:	460f      	mov	r7, r1
 800ecae:	d01a      	beq.n	800ece6 <__ieee754_rem_pio2+0x7e>
 800ecb0:	a3a7      	add	r3, pc, #668	@ (adr r3, 800ef50 <__ieee754_rem_pio2+0x2e8>)
 800ecb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecb6:	f7f1 fac3 	bl	8000240 <__aeabi_dsub>
 800ecba:	4602      	mov	r2, r0
 800ecbc:	460b      	mov	r3, r1
 800ecbe:	4680      	mov	r8, r0
 800ecc0:	4689      	mov	r9, r1
 800ecc2:	4630      	mov	r0, r6
 800ecc4:	4639      	mov	r1, r7
 800ecc6:	f7f1 fabb 	bl	8000240 <__aeabi_dsub>
 800ecca:	a3a1      	add	r3, pc, #644	@ (adr r3, 800ef50 <__ieee754_rem_pio2+0x2e8>)
 800eccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecd0:	f7f1 fab6 	bl	8000240 <__aeabi_dsub>
 800ecd4:	2501      	movs	r5, #1
 800ecd6:	e9c4 8900 	strd	r8, r9, [r4]
 800ecda:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ecde:	4628      	mov	r0, r5
 800ece0:	b00d      	add	sp, #52	@ 0x34
 800ece2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ece6:	a39c      	add	r3, pc, #624	@ (adr r3, 800ef58 <__ieee754_rem_pio2+0x2f0>)
 800ece8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecec:	f7f1 faa8 	bl	8000240 <__aeabi_dsub>
 800ecf0:	a39b      	add	r3, pc, #620	@ (adr r3, 800ef60 <__ieee754_rem_pio2+0x2f8>)
 800ecf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecf6:	4606      	mov	r6, r0
 800ecf8:	460f      	mov	r7, r1
 800ecfa:	f7f1 faa1 	bl	8000240 <__aeabi_dsub>
 800ecfe:	4602      	mov	r2, r0
 800ed00:	460b      	mov	r3, r1
 800ed02:	4680      	mov	r8, r0
 800ed04:	4689      	mov	r9, r1
 800ed06:	4630      	mov	r0, r6
 800ed08:	4639      	mov	r1, r7
 800ed0a:	f7f1 fa99 	bl	8000240 <__aeabi_dsub>
 800ed0e:	a394      	add	r3, pc, #592	@ (adr r3, 800ef60 <__ieee754_rem_pio2+0x2f8>)
 800ed10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed14:	e7dc      	b.n	800ecd0 <__ieee754_rem_pio2+0x68>
 800ed16:	f7f1 fa95 	bl	8000244 <__adddf3>
 800ed1a:	45a8      	cmp	r8, r5
 800ed1c:	4606      	mov	r6, r0
 800ed1e:	460f      	mov	r7, r1
 800ed20:	d018      	beq.n	800ed54 <__ieee754_rem_pio2+0xec>
 800ed22:	a38b      	add	r3, pc, #556	@ (adr r3, 800ef50 <__ieee754_rem_pio2+0x2e8>)
 800ed24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed28:	f7f1 fa8c 	bl	8000244 <__adddf3>
 800ed2c:	4602      	mov	r2, r0
 800ed2e:	460b      	mov	r3, r1
 800ed30:	4680      	mov	r8, r0
 800ed32:	4689      	mov	r9, r1
 800ed34:	4630      	mov	r0, r6
 800ed36:	4639      	mov	r1, r7
 800ed38:	f7f1 fa82 	bl	8000240 <__aeabi_dsub>
 800ed3c:	a384      	add	r3, pc, #528	@ (adr r3, 800ef50 <__ieee754_rem_pio2+0x2e8>)
 800ed3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed42:	f7f1 fa7f 	bl	8000244 <__adddf3>
 800ed46:	f04f 35ff 	mov.w	r5, #4294967295
 800ed4a:	e9c4 8900 	strd	r8, r9, [r4]
 800ed4e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ed52:	e7c4      	b.n	800ecde <__ieee754_rem_pio2+0x76>
 800ed54:	a380      	add	r3, pc, #512	@ (adr r3, 800ef58 <__ieee754_rem_pio2+0x2f0>)
 800ed56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed5a:	f7f1 fa73 	bl	8000244 <__adddf3>
 800ed5e:	a380      	add	r3, pc, #512	@ (adr r3, 800ef60 <__ieee754_rem_pio2+0x2f8>)
 800ed60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed64:	4606      	mov	r6, r0
 800ed66:	460f      	mov	r7, r1
 800ed68:	f7f1 fa6c 	bl	8000244 <__adddf3>
 800ed6c:	4602      	mov	r2, r0
 800ed6e:	460b      	mov	r3, r1
 800ed70:	4680      	mov	r8, r0
 800ed72:	4689      	mov	r9, r1
 800ed74:	4630      	mov	r0, r6
 800ed76:	4639      	mov	r1, r7
 800ed78:	f7f1 fa62 	bl	8000240 <__aeabi_dsub>
 800ed7c:	a378      	add	r3, pc, #480	@ (adr r3, 800ef60 <__ieee754_rem_pio2+0x2f8>)
 800ed7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed82:	e7de      	b.n	800ed42 <__ieee754_rem_pio2+0xda>
 800ed84:	4b81      	ldr	r3, [pc, #516]	@ (800ef8c <__ieee754_rem_pio2+0x324>)
 800ed86:	4598      	cmp	r8, r3
 800ed88:	f200 80cf 	bhi.w	800ef2a <__ieee754_rem_pio2+0x2c2>
 800ed8c:	f000 f962 	bl	800f054 <fabs>
 800ed90:	a375      	add	r3, pc, #468	@ (adr r3, 800ef68 <__ieee754_rem_pio2+0x300>)
 800ed92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed96:	4606      	mov	r6, r0
 800ed98:	460f      	mov	r7, r1
 800ed9a:	f7f1 fc09 	bl	80005b0 <__aeabi_dmul>
 800ed9e:	2200      	movs	r2, #0
 800eda0:	4b7b      	ldr	r3, [pc, #492]	@ (800ef90 <__ieee754_rem_pio2+0x328>)
 800eda2:	f7f1 fa4f 	bl	8000244 <__adddf3>
 800eda6:	f7f1 fe9d 	bl	8000ae4 <__aeabi_d2iz>
 800edaa:	4605      	mov	r5, r0
 800edac:	f7f1 fb96 	bl	80004dc <__aeabi_i2d>
 800edb0:	4602      	mov	r2, r0
 800edb2:	460b      	mov	r3, r1
 800edb4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800edb8:	a363      	add	r3, pc, #396	@ (adr r3, 800ef48 <__ieee754_rem_pio2+0x2e0>)
 800edba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edbe:	f7f1 fbf7 	bl	80005b0 <__aeabi_dmul>
 800edc2:	4602      	mov	r2, r0
 800edc4:	460b      	mov	r3, r1
 800edc6:	4630      	mov	r0, r6
 800edc8:	4639      	mov	r1, r7
 800edca:	f7f1 fa39 	bl	8000240 <__aeabi_dsub>
 800edce:	a360      	add	r3, pc, #384	@ (adr r3, 800ef50 <__ieee754_rem_pio2+0x2e8>)
 800edd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edd4:	4682      	mov	sl, r0
 800edd6:	468b      	mov	fp, r1
 800edd8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eddc:	f7f1 fbe8 	bl	80005b0 <__aeabi_dmul>
 800ede0:	2d1f      	cmp	r5, #31
 800ede2:	4606      	mov	r6, r0
 800ede4:	460f      	mov	r7, r1
 800ede6:	dc0c      	bgt.n	800ee02 <__ieee754_rem_pio2+0x19a>
 800ede8:	4b6a      	ldr	r3, [pc, #424]	@ (800ef94 <__ieee754_rem_pio2+0x32c>)
 800edea:	1e6a      	subs	r2, r5, #1
 800edec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800edf0:	4543      	cmp	r3, r8
 800edf2:	d006      	beq.n	800ee02 <__ieee754_rem_pio2+0x19a>
 800edf4:	4632      	mov	r2, r6
 800edf6:	463b      	mov	r3, r7
 800edf8:	4650      	mov	r0, sl
 800edfa:	4659      	mov	r1, fp
 800edfc:	f7f1 fa20 	bl	8000240 <__aeabi_dsub>
 800ee00:	e00e      	b.n	800ee20 <__ieee754_rem_pio2+0x1b8>
 800ee02:	463b      	mov	r3, r7
 800ee04:	4632      	mov	r2, r6
 800ee06:	4650      	mov	r0, sl
 800ee08:	4659      	mov	r1, fp
 800ee0a:	f7f1 fa19 	bl	8000240 <__aeabi_dsub>
 800ee0e:	ea4f 5328 	mov.w	r3, r8, asr #20
 800ee12:	9305      	str	r3, [sp, #20]
 800ee14:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ee18:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800ee1c:	2b10      	cmp	r3, #16
 800ee1e:	dc02      	bgt.n	800ee26 <__ieee754_rem_pio2+0x1be>
 800ee20:	e9c4 0100 	strd	r0, r1, [r4]
 800ee24:	e039      	b.n	800ee9a <__ieee754_rem_pio2+0x232>
 800ee26:	a34c      	add	r3, pc, #304	@ (adr r3, 800ef58 <__ieee754_rem_pio2+0x2f0>)
 800ee28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ee30:	f7f1 fbbe 	bl	80005b0 <__aeabi_dmul>
 800ee34:	4606      	mov	r6, r0
 800ee36:	460f      	mov	r7, r1
 800ee38:	4602      	mov	r2, r0
 800ee3a:	460b      	mov	r3, r1
 800ee3c:	4650      	mov	r0, sl
 800ee3e:	4659      	mov	r1, fp
 800ee40:	f7f1 f9fe 	bl	8000240 <__aeabi_dsub>
 800ee44:	4602      	mov	r2, r0
 800ee46:	460b      	mov	r3, r1
 800ee48:	4680      	mov	r8, r0
 800ee4a:	4689      	mov	r9, r1
 800ee4c:	4650      	mov	r0, sl
 800ee4e:	4659      	mov	r1, fp
 800ee50:	f7f1 f9f6 	bl	8000240 <__aeabi_dsub>
 800ee54:	4632      	mov	r2, r6
 800ee56:	463b      	mov	r3, r7
 800ee58:	f7f1 f9f2 	bl	8000240 <__aeabi_dsub>
 800ee5c:	a340      	add	r3, pc, #256	@ (adr r3, 800ef60 <__ieee754_rem_pio2+0x2f8>)
 800ee5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee62:	4606      	mov	r6, r0
 800ee64:	460f      	mov	r7, r1
 800ee66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ee6a:	f7f1 fba1 	bl	80005b0 <__aeabi_dmul>
 800ee6e:	4632      	mov	r2, r6
 800ee70:	463b      	mov	r3, r7
 800ee72:	f7f1 f9e5 	bl	8000240 <__aeabi_dsub>
 800ee76:	4602      	mov	r2, r0
 800ee78:	460b      	mov	r3, r1
 800ee7a:	4606      	mov	r6, r0
 800ee7c:	460f      	mov	r7, r1
 800ee7e:	4640      	mov	r0, r8
 800ee80:	4649      	mov	r1, r9
 800ee82:	f7f1 f9dd 	bl	8000240 <__aeabi_dsub>
 800ee86:	9a05      	ldr	r2, [sp, #20]
 800ee88:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ee8c:	1ad3      	subs	r3, r2, r3
 800ee8e:	2b31      	cmp	r3, #49	@ 0x31
 800ee90:	dc20      	bgt.n	800eed4 <__ieee754_rem_pio2+0x26c>
 800ee92:	46c2      	mov	sl, r8
 800ee94:	46cb      	mov	fp, r9
 800ee96:	e9c4 0100 	strd	r0, r1, [r4]
 800ee9a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800ee9e:	4650      	mov	r0, sl
 800eea0:	4642      	mov	r2, r8
 800eea2:	464b      	mov	r3, r9
 800eea4:	4659      	mov	r1, fp
 800eea6:	f7f1 f9cb 	bl	8000240 <__aeabi_dsub>
 800eeaa:	463b      	mov	r3, r7
 800eeac:	4632      	mov	r2, r6
 800eeae:	f7f1 f9c7 	bl	8000240 <__aeabi_dsub>
 800eeb2:	9b04      	ldr	r3, [sp, #16]
 800eeb4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	f6bf af10 	bge.w	800ecde <__ieee754_rem_pio2+0x76>
 800eebe:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800eec2:	6063      	str	r3, [r4, #4]
 800eec4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800eec8:	f8c4 8000 	str.w	r8, [r4]
 800eecc:	60a0      	str	r0, [r4, #8]
 800eece:	60e3      	str	r3, [r4, #12]
 800eed0:	426d      	negs	r5, r5
 800eed2:	e704      	b.n	800ecde <__ieee754_rem_pio2+0x76>
 800eed4:	a326      	add	r3, pc, #152	@ (adr r3, 800ef70 <__ieee754_rem_pio2+0x308>)
 800eed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eeda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eede:	f7f1 fb67 	bl	80005b0 <__aeabi_dmul>
 800eee2:	4606      	mov	r6, r0
 800eee4:	460f      	mov	r7, r1
 800eee6:	4602      	mov	r2, r0
 800eee8:	460b      	mov	r3, r1
 800eeea:	4640      	mov	r0, r8
 800eeec:	4649      	mov	r1, r9
 800eeee:	f7f1 f9a7 	bl	8000240 <__aeabi_dsub>
 800eef2:	4602      	mov	r2, r0
 800eef4:	460b      	mov	r3, r1
 800eef6:	4682      	mov	sl, r0
 800eef8:	468b      	mov	fp, r1
 800eefa:	4640      	mov	r0, r8
 800eefc:	4649      	mov	r1, r9
 800eefe:	f7f1 f99f 	bl	8000240 <__aeabi_dsub>
 800ef02:	4632      	mov	r2, r6
 800ef04:	463b      	mov	r3, r7
 800ef06:	f7f1 f99b 	bl	8000240 <__aeabi_dsub>
 800ef0a:	a31b      	add	r3, pc, #108	@ (adr r3, 800ef78 <__ieee754_rem_pio2+0x310>)
 800ef0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef10:	4606      	mov	r6, r0
 800ef12:	460f      	mov	r7, r1
 800ef14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ef18:	f7f1 fb4a 	bl	80005b0 <__aeabi_dmul>
 800ef1c:	4632      	mov	r2, r6
 800ef1e:	463b      	mov	r3, r7
 800ef20:	f7f1 f98e 	bl	8000240 <__aeabi_dsub>
 800ef24:	4606      	mov	r6, r0
 800ef26:	460f      	mov	r7, r1
 800ef28:	e764      	b.n	800edf4 <__ieee754_rem_pio2+0x18c>
 800ef2a:	4b1b      	ldr	r3, [pc, #108]	@ (800ef98 <__ieee754_rem_pio2+0x330>)
 800ef2c:	4598      	cmp	r8, r3
 800ef2e:	d935      	bls.n	800ef9c <__ieee754_rem_pio2+0x334>
 800ef30:	4602      	mov	r2, r0
 800ef32:	460b      	mov	r3, r1
 800ef34:	f7f1 f984 	bl	8000240 <__aeabi_dsub>
 800ef38:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ef3c:	e9c4 0100 	strd	r0, r1, [r4]
 800ef40:	e6a4      	b.n	800ec8c <__ieee754_rem_pio2+0x24>
 800ef42:	bf00      	nop
 800ef44:	f3af 8000 	nop.w
 800ef48:	54400000 	.word	0x54400000
 800ef4c:	3ff921fb 	.word	0x3ff921fb
 800ef50:	1a626331 	.word	0x1a626331
 800ef54:	3dd0b461 	.word	0x3dd0b461
 800ef58:	1a600000 	.word	0x1a600000
 800ef5c:	3dd0b461 	.word	0x3dd0b461
 800ef60:	2e037073 	.word	0x2e037073
 800ef64:	3ba3198a 	.word	0x3ba3198a
 800ef68:	6dc9c883 	.word	0x6dc9c883
 800ef6c:	3fe45f30 	.word	0x3fe45f30
 800ef70:	2e000000 	.word	0x2e000000
 800ef74:	3ba3198a 	.word	0x3ba3198a
 800ef78:	252049c1 	.word	0x252049c1
 800ef7c:	397b839a 	.word	0x397b839a
 800ef80:	3fe921fb 	.word	0x3fe921fb
 800ef84:	4002d97b 	.word	0x4002d97b
 800ef88:	3ff921fb 	.word	0x3ff921fb
 800ef8c:	413921fb 	.word	0x413921fb
 800ef90:	3fe00000 	.word	0x3fe00000
 800ef94:	08010ff8 	.word	0x08010ff8
 800ef98:	7fefffff 	.word	0x7fefffff
 800ef9c:	ea4f 5528 	mov.w	r5, r8, asr #20
 800efa0:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800efa4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800efa8:	460f      	mov	r7, r1
 800efaa:	f7f1 fd9b 	bl	8000ae4 <__aeabi_d2iz>
 800efae:	f7f1 fa95 	bl	80004dc <__aeabi_i2d>
 800efb2:	4602      	mov	r2, r0
 800efb4:	460b      	mov	r3, r1
 800efb6:	4630      	mov	r0, r6
 800efb8:	4639      	mov	r1, r7
 800efba:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800efbe:	f7f1 f93f 	bl	8000240 <__aeabi_dsub>
 800efc2:	2200      	movs	r2, #0
 800efc4:	4b21      	ldr	r3, [pc, #132]	@ (800f04c <__ieee754_rem_pio2+0x3e4>)
 800efc6:	f7f1 faf3 	bl	80005b0 <__aeabi_dmul>
 800efca:	460f      	mov	r7, r1
 800efcc:	4606      	mov	r6, r0
 800efce:	f7f1 fd89 	bl	8000ae4 <__aeabi_d2iz>
 800efd2:	f7f1 fa83 	bl	80004dc <__aeabi_i2d>
 800efd6:	4602      	mov	r2, r0
 800efd8:	460b      	mov	r3, r1
 800efda:	4630      	mov	r0, r6
 800efdc:	4639      	mov	r1, r7
 800efde:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800efe2:	f7f1 f92d 	bl	8000240 <__aeabi_dsub>
 800efe6:	2200      	movs	r2, #0
 800efe8:	4b18      	ldr	r3, [pc, #96]	@ (800f04c <__ieee754_rem_pio2+0x3e4>)
 800efea:	f7f1 fae1 	bl	80005b0 <__aeabi_dmul>
 800efee:	f04f 0803 	mov.w	r8, #3
 800eff2:	2600      	movs	r6, #0
 800eff4:	2700      	movs	r7, #0
 800eff6:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800effa:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800effe:	4632      	mov	r2, r6
 800f000:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800f004:	463b      	mov	r3, r7
 800f006:	46c2      	mov	sl, r8
 800f008:	f108 38ff 	add.w	r8, r8, #4294967295
 800f00c:	f7f1 fd38 	bl	8000a80 <__aeabi_dcmpeq>
 800f010:	2800      	cmp	r0, #0
 800f012:	d1f4      	bne.n	800effe <__ieee754_rem_pio2+0x396>
 800f014:	4b0e      	ldr	r3, [pc, #56]	@ (800f050 <__ieee754_rem_pio2+0x3e8>)
 800f016:	462a      	mov	r2, r5
 800f018:	9301      	str	r3, [sp, #4]
 800f01a:	2302      	movs	r3, #2
 800f01c:	4621      	mov	r1, r4
 800f01e:	9300      	str	r3, [sp, #0]
 800f020:	a806      	add	r0, sp, #24
 800f022:	4653      	mov	r3, sl
 800f024:	f000 fa7a 	bl	800f51c <__kernel_rem_pio2>
 800f028:	9b04      	ldr	r3, [sp, #16]
 800f02a:	4605      	mov	r5, r0
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	f6bf ae56 	bge.w	800ecde <__ieee754_rem_pio2+0x76>
 800f032:	e9d4 2100 	ldrd	r2, r1, [r4]
 800f036:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f03a:	e9c4 2300 	strd	r2, r3, [r4]
 800f03e:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800f042:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f046:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800f04a:	e741      	b.n	800eed0 <__ieee754_rem_pio2+0x268>
 800f04c:	41700000 	.word	0x41700000
 800f050:	08011078 	.word	0x08011078

0800f054 <fabs>:
 800f054:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800f058:	4619      	mov	r1, r3
 800f05a:	4770      	bx	lr

0800f05c <__kernel_cosf>:
 800f05c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f060:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 800f064:	f1b5 5f48 	cmp.w	r5, #838860800	@ 0x32000000
 800f068:	4606      	mov	r6, r0
 800f06a:	4688      	mov	r8, r1
 800f06c:	d203      	bcs.n	800f076 <__kernel_cosf+0x1a>
 800f06e:	f7f2 f885 	bl	800117c <__aeabi_f2iz>
 800f072:	2800      	cmp	r0, #0
 800f074:	d05c      	beq.n	800f130 <__kernel_cosf+0xd4>
 800f076:	4631      	mov	r1, r6
 800f078:	4630      	mov	r0, r6
 800f07a:	f7f1 feb9 	bl	8000df0 <__aeabi_fmul>
 800f07e:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800f082:	4604      	mov	r4, r0
 800f084:	f7f1 feb4 	bl	8000df0 <__aeabi_fmul>
 800f088:	492b      	ldr	r1, [pc, #172]	@ (800f138 <__kernel_cosf+0xdc>)
 800f08a:	4607      	mov	r7, r0
 800f08c:	4620      	mov	r0, r4
 800f08e:	f7f1 feaf 	bl	8000df0 <__aeabi_fmul>
 800f092:	492a      	ldr	r1, [pc, #168]	@ (800f13c <__kernel_cosf+0xe0>)
 800f094:	f7f1 fda4 	bl	8000be0 <__addsf3>
 800f098:	4621      	mov	r1, r4
 800f09a:	f7f1 fea9 	bl	8000df0 <__aeabi_fmul>
 800f09e:	4928      	ldr	r1, [pc, #160]	@ (800f140 <__kernel_cosf+0xe4>)
 800f0a0:	f7f1 fd9c 	bl	8000bdc <__aeabi_fsub>
 800f0a4:	4621      	mov	r1, r4
 800f0a6:	f7f1 fea3 	bl	8000df0 <__aeabi_fmul>
 800f0aa:	4926      	ldr	r1, [pc, #152]	@ (800f144 <__kernel_cosf+0xe8>)
 800f0ac:	f7f1 fd98 	bl	8000be0 <__addsf3>
 800f0b0:	4621      	mov	r1, r4
 800f0b2:	f7f1 fe9d 	bl	8000df0 <__aeabi_fmul>
 800f0b6:	4924      	ldr	r1, [pc, #144]	@ (800f148 <__kernel_cosf+0xec>)
 800f0b8:	f7f1 fd90 	bl	8000bdc <__aeabi_fsub>
 800f0bc:	4621      	mov	r1, r4
 800f0be:	f7f1 fe97 	bl	8000df0 <__aeabi_fmul>
 800f0c2:	4922      	ldr	r1, [pc, #136]	@ (800f14c <__kernel_cosf+0xf0>)
 800f0c4:	f7f1 fd8c 	bl	8000be0 <__addsf3>
 800f0c8:	4621      	mov	r1, r4
 800f0ca:	f7f1 fe91 	bl	8000df0 <__aeabi_fmul>
 800f0ce:	4621      	mov	r1, r4
 800f0d0:	f7f1 fe8e 	bl	8000df0 <__aeabi_fmul>
 800f0d4:	4641      	mov	r1, r8
 800f0d6:	4604      	mov	r4, r0
 800f0d8:	4630      	mov	r0, r6
 800f0da:	f7f1 fe89 	bl	8000df0 <__aeabi_fmul>
 800f0de:	4601      	mov	r1, r0
 800f0e0:	4620      	mov	r0, r4
 800f0e2:	f7f1 fd7b 	bl	8000bdc <__aeabi_fsub>
 800f0e6:	4b1a      	ldr	r3, [pc, #104]	@ (800f150 <__kernel_cosf+0xf4>)
 800f0e8:	4604      	mov	r4, r0
 800f0ea:	429d      	cmp	r5, r3
 800f0ec:	d80a      	bhi.n	800f104 <__kernel_cosf+0xa8>
 800f0ee:	4601      	mov	r1, r0
 800f0f0:	4638      	mov	r0, r7
 800f0f2:	f7f1 fd73 	bl	8000bdc <__aeabi_fsub>
 800f0f6:	4601      	mov	r1, r0
 800f0f8:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800f0fc:	f7f1 fd6e 	bl	8000bdc <__aeabi_fsub>
 800f100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f104:	4b13      	ldr	r3, [pc, #76]	@ (800f154 <__kernel_cosf+0xf8>)
 800f106:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800f10a:	429d      	cmp	r5, r3
 800f10c:	bf8c      	ite	hi
 800f10e:	4d12      	ldrhi	r5, [pc, #72]	@ (800f158 <__kernel_cosf+0xfc>)
 800f110:	f105 457f 	addls.w	r5, r5, #4278190080	@ 0xff000000
 800f114:	4629      	mov	r1, r5
 800f116:	f7f1 fd61 	bl	8000bdc <__aeabi_fsub>
 800f11a:	4629      	mov	r1, r5
 800f11c:	4606      	mov	r6, r0
 800f11e:	4638      	mov	r0, r7
 800f120:	f7f1 fd5c 	bl	8000bdc <__aeabi_fsub>
 800f124:	4621      	mov	r1, r4
 800f126:	f7f1 fd59 	bl	8000bdc <__aeabi_fsub>
 800f12a:	4601      	mov	r1, r0
 800f12c:	4630      	mov	r0, r6
 800f12e:	e7e5      	b.n	800f0fc <__kernel_cosf+0xa0>
 800f130:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800f134:	e7e4      	b.n	800f100 <__kernel_cosf+0xa4>
 800f136:	bf00      	nop
 800f138:	ad47d74e 	.word	0xad47d74e
 800f13c:	310f74f6 	.word	0x310f74f6
 800f140:	3493f27c 	.word	0x3493f27c
 800f144:	37d00d01 	.word	0x37d00d01
 800f148:	3ab60b61 	.word	0x3ab60b61
 800f14c:	3d2aaaab 	.word	0x3d2aaaab
 800f150:	3e999999 	.word	0x3e999999
 800f154:	3f480000 	.word	0x3f480000
 800f158:	3e900000 	.word	0x3e900000

0800f15c <__kernel_sinf>:
 800f15c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f160:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800f164:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800f168:	4604      	mov	r4, r0
 800f16a:	460f      	mov	r7, r1
 800f16c:	4691      	mov	r9, r2
 800f16e:	d203      	bcs.n	800f178 <__kernel_sinf+0x1c>
 800f170:	f7f2 f804 	bl	800117c <__aeabi_f2iz>
 800f174:	2800      	cmp	r0, #0
 800f176:	d035      	beq.n	800f1e4 <__kernel_sinf+0x88>
 800f178:	4621      	mov	r1, r4
 800f17a:	4620      	mov	r0, r4
 800f17c:	f7f1 fe38 	bl	8000df0 <__aeabi_fmul>
 800f180:	4605      	mov	r5, r0
 800f182:	4601      	mov	r1, r0
 800f184:	4620      	mov	r0, r4
 800f186:	f7f1 fe33 	bl	8000df0 <__aeabi_fmul>
 800f18a:	4929      	ldr	r1, [pc, #164]	@ (800f230 <__kernel_sinf+0xd4>)
 800f18c:	4606      	mov	r6, r0
 800f18e:	4628      	mov	r0, r5
 800f190:	f7f1 fe2e 	bl	8000df0 <__aeabi_fmul>
 800f194:	4927      	ldr	r1, [pc, #156]	@ (800f234 <__kernel_sinf+0xd8>)
 800f196:	f7f1 fd21 	bl	8000bdc <__aeabi_fsub>
 800f19a:	4629      	mov	r1, r5
 800f19c:	f7f1 fe28 	bl	8000df0 <__aeabi_fmul>
 800f1a0:	4925      	ldr	r1, [pc, #148]	@ (800f238 <__kernel_sinf+0xdc>)
 800f1a2:	f7f1 fd1d 	bl	8000be0 <__addsf3>
 800f1a6:	4629      	mov	r1, r5
 800f1a8:	f7f1 fe22 	bl	8000df0 <__aeabi_fmul>
 800f1ac:	4923      	ldr	r1, [pc, #140]	@ (800f23c <__kernel_sinf+0xe0>)
 800f1ae:	f7f1 fd15 	bl	8000bdc <__aeabi_fsub>
 800f1b2:	4629      	mov	r1, r5
 800f1b4:	f7f1 fe1c 	bl	8000df0 <__aeabi_fmul>
 800f1b8:	4921      	ldr	r1, [pc, #132]	@ (800f240 <__kernel_sinf+0xe4>)
 800f1ba:	f7f1 fd11 	bl	8000be0 <__addsf3>
 800f1be:	4680      	mov	r8, r0
 800f1c0:	f1b9 0f00 	cmp.w	r9, #0
 800f1c4:	d111      	bne.n	800f1ea <__kernel_sinf+0x8e>
 800f1c6:	4601      	mov	r1, r0
 800f1c8:	4628      	mov	r0, r5
 800f1ca:	f7f1 fe11 	bl	8000df0 <__aeabi_fmul>
 800f1ce:	491d      	ldr	r1, [pc, #116]	@ (800f244 <__kernel_sinf+0xe8>)
 800f1d0:	f7f1 fd04 	bl	8000bdc <__aeabi_fsub>
 800f1d4:	4631      	mov	r1, r6
 800f1d6:	f7f1 fe0b 	bl	8000df0 <__aeabi_fmul>
 800f1da:	4601      	mov	r1, r0
 800f1dc:	4620      	mov	r0, r4
 800f1de:	f7f1 fcff 	bl	8000be0 <__addsf3>
 800f1e2:	4604      	mov	r4, r0
 800f1e4:	4620      	mov	r0, r4
 800f1e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f1ea:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800f1ee:	4638      	mov	r0, r7
 800f1f0:	f7f1 fdfe 	bl	8000df0 <__aeabi_fmul>
 800f1f4:	4641      	mov	r1, r8
 800f1f6:	4681      	mov	r9, r0
 800f1f8:	4630      	mov	r0, r6
 800f1fa:	f7f1 fdf9 	bl	8000df0 <__aeabi_fmul>
 800f1fe:	4601      	mov	r1, r0
 800f200:	4648      	mov	r0, r9
 800f202:	f7f1 fceb 	bl	8000bdc <__aeabi_fsub>
 800f206:	4629      	mov	r1, r5
 800f208:	f7f1 fdf2 	bl	8000df0 <__aeabi_fmul>
 800f20c:	4639      	mov	r1, r7
 800f20e:	f7f1 fce5 	bl	8000bdc <__aeabi_fsub>
 800f212:	490c      	ldr	r1, [pc, #48]	@ (800f244 <__kernel_sinf+0xe8>)
 800f214:	4605      	mov	r5, r0
 800f216:	4630      	mov	r0, r6
 800f218:	f7f1 fdea 	bl	8000df0 <__aeabi_fmul>
 800f21c:	4601      	mov	r1, r0
 800f21e:	4628      	mov	r0, r5
 800f220:	f7f1 fcde 	bl	8000be0 <__addsf3>
 800f224:	4601      	mov	r1, r0
 800f226:	4620      	mov	r0, r4
 800f228:	f7f1 fcd8 	bl	8000bdc <__aeabi_fsub>
 800f22c:	e7d9      	b.n	800f1e2 <__kernel_sinf+0x86>
 800f22e:	bf00      	nop
 800f230:	2f2ec9d3 	.word	0x2f2ec9d3
 800f234:	32d72f34 	.word	0x32d72f34
 800f238:	3638ef1b 	.word	0x3638ef1b
 800f23c:	39500d01 	.word	0x39500d01
 800f240:	3c088889 	.word	0x3c088889
 800f244:	3e2aaaab 	.word	0x3e2aaaab

0800f248 <__ieee754_rem_pio2f>:
 800f248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f24c:	4aa4      	ldr	r2, [pc, #656]	@ (800f4e0 <__ieee754_rem_pio2f+0x298>)
 800f24e:	f020 4800 	bic.w	r8, r0, #2147483648	@ 0x80000000
 800f252:	4590      	cmp	r8, r2
 800f254:	460c      	mov	r4, r1
 800f256:	4682      	mov	sl, r0
 800f258:	b087      	sub	sp, #28
 800f25a:	d804      	bhi.n	800f266 <__ieee754_rem_pio2f+0x1e>
 800f25c:	2300      	movs	r3, #0
 800f25e:	6008      	str	r0, [r1, #0]
 800f260:	604b      	str	r3, [r1, #4]
 800f262:	2500      	movs	r5, #0
 800f264:	e01d      	b.n	800f2a2 <__ieee754_rem_pio2f+0x5a>
 800f266:	4a9f      	ldr	r2, [pc, #636]	@ (800f4e4 <__ieee754_rem_pio2f+0x29c>)
 800f268:	4590      	cmp	r8, r2
 800f26a:	d84f      	bhi.n	800f30c <__ieee754_rem_pio2f+0xc4>
 800f26c:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 800f270:	2800      	cmp	r0, #0
 800f272:	499d      	ldr	r1, [pc, #628]	@ (800f4e8 <__ieee754_rem_pio2f+0x2a0>)
 800f274:	4f9d      	ldr	r7, [pc, #628]	@ (800f4ec <__ieee754_rem_pio2f+0x2a4>)
 800f276:	f025 050f 	bic.w	r5, r5, #15
 800f27a:	dd24      	ble.n	800f2c6 <__ieee754_rem_pio2f+0x7e>
 800f27c:	f7f1 fcae 	bl	8000bdc <__aeabi_fsub>
 800f280:	42bd      	cmp	r5, r7
 800f282:	4606      	mov	r6, r0
 800f284:	d011      	beq.n	800f2aa <__ieee754_rem_pio2f+0x62>
 800f286:	499a      	ldr	r1, [pc, #616]	@ (800f4f0 <__ieee754_rem_pio2f+0x2a8>)
 800f288:	f7f1 fca8 	bl	8000bdc <__aeabi_fsub>
 800f28c:	4601      	mov	r1, r0
 800f28e:	4605      	mov	r5, r0
 800f290:	4630      	mov	r0, r6
 800f292:	f7f1 fca3 	bl	8000bdc <__aeabi_fsub>
 800f296:	4996      	ldr	r1, [pc, #600]	@ (800f4f0 <__ieee754_rem_pio2f+0x2a8>)
 800f298:	f7f1 fca0 	bl	8000bdc <__aeabi_fsub>
 800f29c:	6025      	str	r5, [r4, #0]
 800f29e:	2501      	movs	r5, #1
 800f2a0:	6060      	str	r0, [r4, #4]
 800f2a2:	4628      	mov	r0, r5
 800f2a4:	b007      	add	sp, #28
 800f2a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2aa:	4992      	ldr	r1, [pc, #584]	@ (800f4f4 <__ieee754_rem_pio2f+0x2ac>)
 800f2ac:	f7f1 fc96 	bl	8000bdc <__aeabi_fsub>
 800f2b0:	4991      	ldr	r1, [pc, #580]	@ (800f4f8 <__ieee754_rem_pio2f+0x2b0>)
 800f2b2:	4606      	mov	r6, r0
 800f2b4:	f7f1 fc92 	bl	8000bdc <__aeabi_fsub>
 800f2b8:	4601      	mov	r1, r0
 800f2ba:	4605      	mov	r5, r0
 800f2bc:	4630      	mov	r0, r6
 800f2be:	f7f1 fc8d 	bl	8000bdc <__aeabi_fsub>
 800f2c2:	498d      	ldr	r1, [pc, #564]	@ (800f4f8 <__ieee754_rem_pio2f+0x2b0>)
 800f2c4:	e7e8      	b.n	800f298 <__ieee754_rem_pio2f+0x50>
 800f2c6:	f7f1 fc8b 	bl	8000be0 <__addsf3>
 800f2ca:	42bd      	cmp	r5, r7
 800f2cc:	4606      	mov	r6, r0
 800f2ce:	d00f      	beq.n	800f2f0 <__ieee754_rem_pio2f+0xa8>
 800f2d0:	4987      	ldr	r1, [pc, #540]	@ (800f4f0 <__ieee754_rem_pio2f+0x2a8>)
 800f2d2:	f7f1 fc85 	bl	8000be0 <__addsf3>
 800f2d6:	4601      	mov	r1, r0
 800f2d8:	4605      	mov	r5, r0
 800f2da:	4630      	mov	r0, r6
 800f2dc:	f7f1 fc7e 	bl	8000bdc <__aeabi_fsub>
 800f2e0:	4983      	ldr	r1, [pc, #524]	@ (800f4f0 <__ieee754_rem_pio2f+0x2a8>)
 800f2e2:	f7f1 fc7d 	bl	8000be0 <__addsf3>
 800f2e6:	6025      	str	r5, [r4, #0]
 800f2e8:	6060      	str	r0, [r4, #4]
 800f2ea:	f04f 35ff 	mov.w	r5, #4294967295
 800f2ee:	e7d8      	b.n	800f2a2 <__ieee754_rem_pio2f+0x5a>
 800f2f0:	4980      	ldr	r1, [pc, #512]	@ (800f4f4 <__ieee754_rem_pio2f+0x2ac>)
 800f2f2:	f7f1 fc75 	bl	8000be0 <__addsf3>
 800f2f6:	4980      	ldr	r1, [pc, #512]	@ (800f4f8 <__ieee754_rem_pio2f+0x2b0>)
 800f2f8:	4606      	mov	r6, r0
 800f2fa:	f7f1 fc71 	bl	8000be0 <__addsf3>
 800f2fe:	4601      	mov	r1, r0
 800f300:	4605      	mov	r5, r0
 800f302:	4630      	mov	r0, r6
 800f304:	f7f1 fc6a 	bl	8000bdc <__aeabi_fsub>
 800f308:	497b      	ldr	r1, [pc, #492]	@ (800f4f8 <__ieee754_rem_pio2f+0x2b0>)
 800f30a:	e7ea      	b.n	800f2e2 <__ieee754_rem_pio2f+0x9a>
 800f30c:	4a7b      	ldr	r2, [pc, #492]	@ (800f4fc <__ieee754_rem_pio2f+0x2b4>)
 800f30e:	4590      	cmp	r8, r2
 800f310:	f200 8095 	bhi.w	800f43e <__ieee754_rem_pio2f+0x1f6>
 800f314:	f000 f8fe 	bl	800f514 <fabsf>
 800f318:	4979      	ldr	r1, [pc, #484]	@ (800f500 <__ieee754_rem_pio2f+0x2b8>)
 800f31a:	4606      	mov	r6, r0
 800f31c:	f7f1 fd68 	bl	8000df0 <__aeabi_fmul>
 800f320:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800f324:	f7f1 fc5c 	bl	8000be0 <__addsf3>
 800f328:	f7f1 ff28 	bl	800117c <__aeabi_f2iz>
 800f32c:	4605      	mov	r5, r0
 800f32e:	f7f1 fd0b 	bl	8000d48 <__aeabi_i2f>
 800f332:	496d      	ldr	r1, [pc, #436]	@ (800f4e8 <__ieee754_rem_pio2f+0x2a0>)
 800f334:	4681      	mov	r9, r0
 800f336:	f7f1 fd5b 	bl	8000df0 <__aeabi_fmul>
 800f33a:	4601      	mov	r1, r0
 800f33c:	4630      	mov	r0, r6
 800f33e:	f7f1 fc4d 	bl	8000bdc <__aeabi_fsub>
 800f342:	496b      	ldr	r1, [pc, #428]	@ (800f4f0 <__ieee754_rem_pio2f+0x2a8>)
 800f344:	4607      	mov	r7, r0
 800f346:	4648      	mov	r0, r9
 800f348:	f7f1 fd52 	bl	8000df0 <__aeabi_fmul>
 800f34c:	2d1f      	cmp	r5, #31
 800f34e:	4606      	mov	r6, r0
 800f350:	dc0e      	bgt.n	800f370 <__ieee754_rem_pio2f+0x128>
 800f352:	4a6c      	ldr	r2, [pc, #432]	@ (800f504 <__ieee754_rem_pio2f+0x2bc>)
 800f354:	1e69      	subs	r1, r5, #1
 800f356:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800f35a:	f02a 4300 	bic.w	r3, sl, #2147483648	@ 0x80000000
 800f35e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800f362:	4293      	cmp	r3, r2
 800f364:	d004      	beq.n	800f370 <__ieee754_rem_pio2f+0x128>
 800f366:	4631      	mov	r1, r6
 800f368:	4638      	mov	r0, r7
 800f36a:	f7f1 fc37 	bl	8000bdc <__aeabi_fsub>
 800f36e:	e00b      	b.n	800f388 <__ieee754_rem_pio2f+0x140>
 800f370:	4631      	mov	r1, r6
 800f372:	4638      	mov	r0, r7
 800f374:	f7f1 fc32 	bl	8000bdc <__aeabi_fsub>
 800f378:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800f37c:	ebc3 53d8 	rsb	r3, r3, r8, lsr #23
 800f380:	2b08      	cmp	r3, #8
 800f382:	ea4f 5be8 	mov.w	fp, r8, asr #23
 800f386:	dc01      	bgt.n	800f38c <__ieee754_rem_pio2f+0x144>
 800f388:	6020      	str	r0, [r4, #0]
 800f38a:	e026      	b.n	800f3da <__ieee754_rem_pio2f+0x192>
 800f38c:	4959      	ldr	r1, [pc, #356]	@ (800f4f4 <__ieee754_rem_pio2f+0x2ac>)
 800f38e:	4648      	mov	r0, r9
 800f390:	f7f1 fd2e 	bl	8000df0 <__aeabi_fmul>
 800f394:	4606      	mov	r6, r0
 800f396:	4601      	mov	r1, r0
 800f398:	4638      	mov	r0, r7
 800f39a:	f7f1 fc1f 	bl	8000bdc <__aeabi_fsub>
 800f39e:	4601      	mov	r1, r0
 800f3a0:	4680      	mov	r8, r0
 800f3a2:	4638      	mov	r0, r7
 800f3a4:	f7f1 fc1a 	bl	8000bdc <__aeabi_fsub>
 800f3a8:	4631      	mov	r1, r6
 800f3aa:	f7f1 fc17 	bl	8000bdc <__aeabi_fsub>
 800f3ae:	4606      	mov	r6, r0
 800f3b0:	4951      	ldr	r1, [pc, #324]	@ (800f4f8 <__ieee754_rem_pio2f+0x2b0>)
 800f3b2:	4648      	mov	r0, r9
 800f3b4:	f7f1 fd1c 	bl	8000df0 <__aeabi_fmul>
 800f3b8:	4631      	mov	r1, r6
 800f3ba:	f7f1 fc0f 	bl	8000bdc <__aeabi_fsub>
 800f3be:	4601      	mov	r1, r0
 800f3c0:	4606      	mov	r6, r0
 800f3c2:	4640      	mov	r0, r8
 800f3c4:	f7f1 fc0a 	bl	8000bdc <__aeabi_fsub>
 800f3c8:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800f3cc:	ebab 0b03 	sub.w	fp, fp, r3
 800f3d0:	f1bb 0f19 	cmp.w	fp, #25
 800f3d4:	dc18      	bgt.n	800f408 <__ieee754_rem_pio2f+0x1c0>
 800f3d6:	4647      	mov	r7, r8
 800f3d8:	6020      	str	r0, [r4, #0]
 800f3da:	f8d4 8000 	ldr.w	r8, [r4]
 800f3de:	4638      	mov	r0, r7
 800f3e0:	4641      	mov	r1, r8
 800f3e2:	f7f1 fbfb 	bl	8000bdc <__aeabi_fsub>
 800f3e6:	4631      	mov	r1, r6
 800f3e8:	f7f1 fbf8 	bl	8000bdc <__aeabi_fsub>
 800f3ec:	f1ba 0f00 	cmp.w	sl, #0
 800f3f0:	6060      	str	r0, [r4, #4]
 800f3f2:	f6bf af56 	bge.w	800f2a2 <__ieee754_rem_pio2f+0x5a>
 800f3f6:	f108 4800 	add.w	r8, r8, #2147483648	@ 0x80000000
 800f3fa:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800f3fe:	f8c4 8000 	str.w	r8, [r4]
 800f402:	6060      	str	r0, [r4, #4]
 800f404:	426d      	negs	r5, r5
 800f406:	e74c      	b.n	800f2a2 <__ieee754_rem_pio2f+0x5a>
 800f408:	493f      	ldr	r1, [pc, #252]	@ (800f508 <__ieee754_rem_pio2f+0x2c0>)
 800f40a:	4648      	mov	r0, r9
 800f40c:	f7f1 fcf0 	bl	8000df0 <__aeabi_fmul>
 800f410:	4606      	mov	r6, r0
 800f412:	4601      	mov	r1, r0
 800f414:	4640      	mov	r0, r8
 800f416:	f7f1 fbe1 	bl	8000bdc <__aeabi_fsub>
 800f41a:	4601      	mov	r1, r0
 800f41c:	4607      	mov	r7, r0
 800f41e:	4640      	mov	r0, r8
 800f420:	f7f1 fbdc 	bl	8000bdc <__aeabi_fsub>
 800f424:	4631      	mov	r1, r6
 800f426:	f7f1 fbd9 	bl	8000bdc <__aeabi_fsub>
 800f42a:	4606      	mov	r6, r0
 800f42c:	4937      	ldr	r1, [pc, #220]	@ (800f50c <__ieee754_rem_pio2f+0x2c4>)
 800f42e:	4648      	mov	r0, r9
 800f430:	f7f1 fcde 	bl	8000df0 <__aeabi_fmul>
 800f434:	4631      	mov	r1, r6
 800f436:	f7f1 fbd1 	bl	8000bdc <__aeabi_fsub>
 800f43a:	4606      	mov	r6, r0
 800f43c:	e793      	b.n	800f366 <__ieee754_rem_pio2f+0x11e>
 800f43e:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800f442:	d305      	bcc.n	800f450 <__ieee754_rem_pio2f+0x208>
 800f444:	4601      	mov	r1, r0
 800f446:	f7f1 fbc9 	bl	8000bdc <__aeabi_fsub>
 800f44a:	6060      	str	r0, [r4, #4]
 800f44c:	6020      	str	r0, [r4, #0]
 800f44e:	e708      	b.n	800f262 <__ieee754_rem_pio2f+0x1a>
 800f450:	ea4f 56e8 	mov.w	r6, r8, asr #23
 800f454:	3e86      	subs	r6, #134	@ 0x86
 800f456:	eba8 58c6 	sub.w	r8, r8, r6, lsl #23
 800f45a:	4640      	mov	r0, r8
 800f45c:	f7f1 fe8e 	bl	800117c <__aeabi_f2iz>
 800f460:	f7f1 fc72 	bl	8000d48 <__aeabi_i2f>
 800f464:	4601      	mov	r1, r0
 800f466:	9003      	str	r0, [sp, #12]
 800f468:	4640      	mov	r0, r8
 800f46a:	f7f1 fbb7 	bl	8000bdc <__aeabi_fsub>
 800f46e:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 800f472:	f7f1 fcbd 	bl	8000df0 <__aeabi_fmul>
 800f476:	4607      	mov	r7, r0
 800f478:	f7f1 fe80 	bl	800117c <__aeabi_f2iz>
 800f47c:	f7f1 fc64 	bl	8000d48 <__aeabi_i2f>
 800f480:	4601      	mov	r1, r0
 800f482:	9004      	str	r0, [sp, #16]
 800f484:	4605      	mov	r5, r0
 800f486:	4638      	mov	r0, r7
 800f488:	f7f1 fba8 	bl	8000bdc <__aeabi_fsub>
 800f48c:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 800f490:	f7f1 fcae 	bl	8000df0 <__aeabi_fmul>
 800f494:	2100      	movs	r1, #0
 800f496:	9005      	str	r0, [sp, #20]
 800f498:	f7f1 fe3e 	bl	8001118 <__aeabi_fcmpeq>
 800f49c:	b1f0      	cbz	r0, 800f4dc <__ieee754_rem_pio2f+0x294>
 800f49e:	2100      	movs	r1, #0
 800f4a0:	4628      	mov	r0, r5
 800f4a2:	f7f1 fe39 	bl	8001118 <__aeabi_fcmpeq>
 800f4a6:	2800      	cmp	r0, #0
 800f4a8:	bf14      	ite	ne
 800f4aa:	2301      	movne	r3, #1
 800f4ac:	2302      	moveq	r3, #2
 800f4ae:	4a18      	ldr	r2, [pc, #96]	@ (800f510 <__ieee754_rem_pio2f+0x2c8>)
 800f4b0:	4621      	mov	r1, r4
 800f4b2:	9201      	str	r2, [sp, #4]
 800f4b4:	2202      	movs	r2, #2
 800f4b6:	a803      	add	r0, sp, #12
 800f4b8:	9200      	str	r2, [sp, #0]
 800f4ba:	4632      	mov	r2, r6
 800f4bc:	f000 fb52 	bl	800fb64 <__kernel_rem_pio2f>
 800f4c0:	f1ba 0f00 	cmp.w	sl, #0
 800f4c4:	4605      	mov	r5, r0
 800f4c6:	f6bf aeec 	bge.w	800f2a2 <__ieee754_rem_pio2f+0x5a>
 800f4ca:	6823      	ldr	r3, [r4, #0]
 800f4cc:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800f4d0:	6023      	str	r3, [r4, #0]
 800f4d2:	6863      	ldr	r3, [r4, #4]
 800f4d4:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800f4d8:	6063      	str	r3, [r4, #4]
 800f4da:	e793      	b.n	800f404 <__ieee754_rem_pio2f+0x1bc>
 800f4dc:	2303      	movs	r3, #3
 800f4de:	e7e6      	b.n	800f4ae <__ieee754_rem_pio2f+0x266>
 800f4e0:	3f490fd8 	.word	0x3f490fd8
 800f4e4:	4016cbe3 	.word	0x4016cbe3
 800f4e8:	3fc90f80 	.word	0x3fc90f80
 800f4ec:	3fc90fd0 	.word	0x3fc90fd0
 800f4f0:	37354443 	.word	0x37354443
 800f4f4:	37354400 	.word	0x37354400
 800f4f8:	2e85a308 	.word	0x2e85a308
 800f4fc:	43490f80 	.word	0x43490f80
 800f500:	3f22f984 	.word	0x3f22f984
 800f504:	08011180 	.word	0x08011180
 800f508:	2e85a300 	.word	0x2e85a300
 800f50c:	248d3132 	.word	0x248d3132
 800f510:	08011200 	.word	0x08011200

0800f514 <fabsf>:
 800f514:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800f518:	4770      	bx	lr
	...

0800f51c <__kernel_rem_pio2>:
 800f51c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f520:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800f524:	9308      	str	r3, [sp, #32]
 800f526:	9104      	str	r1, [sp, #16]
 800f528:	4bb6      	ldr	r3, [pc, #728]	@ (800f804 <__kernel_rem_pio2+0x2e8>)
 800f52a:	99a2      	ldr	r1, [sp, #648]	@ 0x288
 800f52c:	f112 0f14 	cmn.w	r2, #20
 800f530:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f534:	bfa8      	it	ge
 800f536:	1ed4      	subge	r4, r2, #3
 800f538:	9302      	str	r3, [sp, #8]
 800f53a:	9b08      	ldr	r3, [sp, #32]
 800f53c:	bfb8      	it	lt
 800f53e:	2400      	movlt	r4, #0
 800f540:	f103 33ff 	add.w	r3, r3, #4294967295
 800f544:	9306      	str	r3, [sp, #24]
 800f546:	bfa4      	itt	ge
 800f548:	2318      	movge	r3, #24
 800f54a:	fb94 f4f3 	sdivge	r4, r4, r3
 800f54e:	f06f 0317 	mvn.w	r3, #23
 800f552:	fb04 3303 	mla	r3, r4, r3, r3
 800f556:	eb03 0a02 	add.w	sl, r3, r2
 800f55a:	9a06      	ldr	r2, [sp, #24]
 800f55c:	9b02      	ldr	r3, [sp, #8]
 800f55e:	1aa7      	subs	r7, r4, r2
 800f560:	eb03 0802 	add.w	r8, r3, r2
 800f564:	9ba3      	ldr	r3, [sp, #652]	@ 0x28c
 800f566:	2500      	movs	r5, #0
 800f568:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800f56c:	2200      	movs	r2, #0
 800f56e:	2300      	movs	r3, #0
 800f570:	9009      	str	r0, [sp, #36]	@ 0x24
 800f572:	ae20      	add	r6, sp, #128	@ 0x80
 800f574:	4545      	cmp	r5, r8
 800f576:	dd14      	ble.n	800f5a2 <__kernel_rem_pio2+0x86>
 800f578:	f04f 0800 	mov.w	r8, #0
 800f57c:	9a08      	ldr	r2, [sp, #32]
 800f57e:	ab20      	add	r3, sp, #128	@ 0x80
 800f580:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 800f584:	f50d 7be0 	add.w	fp, sp, #448	@ 0x1c0
 800f588:	9b02      	ldr	r3, [sp, #8]
 800f58a:	4598      	cmp	r8, r3
 800f58c:	dc35      	bgt.n	800f5fa <__kernel_rem_pio2+0xde>
 800f58e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f590:	2200      	movs	r2, #0
 800f592:	f1a3 0908 	sub.w	r9, r3, #8
 800f596:	2300      	movs	r3, #0
 800f598:	462f      	mov	r7, r5
 800f59a:	2600      	movs	r6, #0
 800f59c:	e9cd 2300 	strd	r2, r3, [sp]
 800f5a0:	e01f      	b.n	800f5e2 <__kernel_rem_pio2+0xc6>
 800f5a2:	42ef      	cmn	r7, r5
 800f5a4:	d40b      	bmi.n	800f5be <__kernel_rem_pio2+0xa2>
 800f5a6:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800f5aa:	e9cd 2300 	strd	r2, r3, [sp]
 800f5ae:	f7f0 ff95 	bl	80004dc <__aeabi_i2d>
 800f5b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f5b6:	e8e6 0102 	strd	r0, r1, [r6], #8
 800f5ba:	3501      	adds	r5, #1
 800f5bc:	e7da      	b.n	800f574 <__kernel_rem_pio2+0x58>
 800f5be:	4610      	mov	r0, r2
 800f5c0:	4619      	mov	r1, r3
 800f5c2:	e7f8      	b.n	800f5b6 <__kernel_rem_pio2+0x9a>
 800f5c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f5c8:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800f5cc:	f7f0 fff0 	bl	80005b0 <__aeabi_dmul>
 800f5d0:	4602      	mov	r2, r0
 800f5d2:	460b      	mov	r3, r1
 800f5d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f5d8:	f7f0 fe34 	bl	8000244 <__adddf3>
 800f5dc:	e9cd 0100 	strd	r0, r1, [sp]
 800f5e0:	3601      	adds	r6, #1
 800f5e2:	9b06      	ldr	r3, [sp, #24]
 800f5e4:	3f08      	subs	r7, #8
 800f5e6:	429e      	cmp	r6, r3
 800f5e8:	ddec      	ble.n	800f5c4 <__kernel_rem_pio2+0xa8>
 800f5ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f5ee:	f108 0801 	add.w	r8, r8, #1
 800f5f2:	e8eb 2302 	strd	r2, r3, [fp], #8
 800f5f6:	3508      	adds	r5, #8
 800f5f8:	e7c6      	b.n	800f588 <__kernel_rem_pio2+0x6c>
 800f5fa:	9b02      	ldr	r3, [sp, #8]
 800f5fc:	aa0c      	add	r2, sp, #48	@ 0x30
 800f5fe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f602:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f604:	9ba3      	ldr	r3, [sp, #652]	@ 0x28c
 800f606:	f8dd b008 	ldr.w	fp, [sp, #8]
 800f60a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800f60e:	930a      	str	r3, [sp, #40]	@ 0x28
 800f610:	ab98      	add	r3, sp, #608	@ 0x260
 800f612:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f616:	e953 4528 	ldrd	r4, r5, [r3, #-160]	@ 0xa0
 800f61a:	ab70      	add	r3, sp, #448	@ 0x1c0
 800f61c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f620:	ae0c      	add	r6, sp, #48	@ 0x30
 800f622:	4698      	mov	r8, r3
 800f624:	46b1      	mov	r9, r6
 800f626:	465f      	mov	r7, fp
 800f628:	9307      	str	r3, [sp, #28]
 800f62a:	2f00      	cmp	r7, #0
 800f62c:	f1a8 0808 	sub.w	r8, r8, #8
 800f630:	dc71      	bgt.n	800f716 <__kernel_rem_pio2+0x1fa>
 800f632:	4652      	mov	r2, sl
 800f634:	4620      	mov	r0, r4
 800f636:	4629      	mov	r1, r5
 800f638:	f000 fd36 	bl	80100a8 <scalbn>
 800f63c:	2200      	movs	r2, #0
 800f63e:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800f642:	4604      	mov	r4, r0
 800f644:	460d      	mov	r5, r1
 800f646:	f7f0 ffb3 	bl	80005b0 <__aeabi_dmul>
 800f64a:	f000 fdf1 	bl	8010230 <floor>
 800f64e:	2200      	movs	r2, #0
 800f650:	4b6d      	ldr	r3, [pc, #436]	@ (800f808 <__kernel_rem_pio2+0x2ec>)
 800f652:	f7f0 ffad 	bl	80005b0 <__aeabi_dmul>
 800f656:	4602      	mov	r2, r0
 800f658:	460b      	mov	r3, r1
 800f65a:	4620      	mov	r0, r4
 800f65c:	4629      	mov	r1, r5
 800f65e:	f7f0 fdef 	bl	8000240 <__aeabi_dsub>
 800f662:	460d      	mov	r5, r1
 800f664:	4604      	mov	r4, r0
 800f666:	f7f1 fa3d 	bl	8000ae4 <__aeabi_d2iz>
 800f66a:	9005      	str	r0, [sp, #20]
 800f66c:	f7f0 ff36 	bl	80004dc <__aeabi_i2d>
 800f670:	4602      	mov	r2, r0
 800f672:	460b      	mov	r3, r1
 800f674:	4620      	mov	r0, r4
 800f676:	4629      	mov	r1, r5
 800f678:	f7f0 fde2 	bl	8000240 <__aeabi_dsub>
 800f67c:	f1ba 0f00 	cmp.w	sl, #0
 800f680:	4680      	mov	r8, r0
 800f682:	4689      	mov	r9, r1
 800f684:	dd6d      	ble.n	800f762 <__kernel_rem_pio2+0x246>
 800f686:	f10b 31ff 	add.w	r1, fp, #4294967295
 800f68a:	ab0c      	add	r3, sp, #48	@ 0x30
 800f68c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f690:	9c05      	ldr	r4, [sp, #20]
 800f692:	f1ca 0018 	rsb	r0, sl, #24
 800f696:	fa43 f200 	asr.w	r2, r3, r0
 800f69a:	4414      	add	r4, r2
 800f69c:	4082      	lsls	r2, r0
 800f69e:	1a9b      	subs	r3, r3, r2
 800f6a0:	aa0c      	add	r2, sp, #48	@ 0x30
 800f6a2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800f6a6:	f1ca 0217 	rsb	r2, sl, #23
 800f6aa:	9405      	str	r4, [sp, #20]
 800f6ac:	4113      	asrs	r3, r2
 800f6ae:	9300      	str	r3, [sp, #0]
 800f6b0:	9b00      	ldr	r3, [sp, #0]
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	dd64      	ble.n	800f780 <__kernel_rem_pio2+0x264>
 800f6b6:	2200      	movs	r2, #0
 800f6b8:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800f6bc:	4614      	mov	r4, r2
 800f6be:	9b05      	ldr	r3, [sp, #20]
 800f6c0:	3301      	adds	r3, #1
 800f6c2:	9305      	str	r3, [sp, #20]
 800f6c4:	4593      	cmp	fp, r2
 800f6c6:	f300 80ab 	bgt.w	800f820 <__kernel_rem_pio2+0x304>
 800f6ca:	f1ba 0f00 	cmp.w	sl, #0
 800f6ce:	dd07      	ble.n	800f6e0 <__kernel_rem_pio2+0x1c4>
 800f6d0:	f1ba 0f01 	cmp.w	sl, #1
 800f6d4:	f000 80b2 	beq.w	800f83c <__kernel_rem_pio2+0x320>
 800f6d8:	f1ba 0f02 	cmp.w	sl, #2
 800f6dc:	f000 80b9 	beq.w	800f852 <__kernel_rem_pio2+0x336>
 800f6e0:	9b00      	ldr	r3, [sp, #0]
 800f6e2:	2b02      	cmp	r3, #2
 800f6e4:	d14c      	bne.n	800f780 <__kernel_rem_pio2+0x264>
 800f6e6:	4642      	mov	r2, r8
 800f6e8:	464b      	mov	r3, r9
 800f6ea:	2000      	movs	r0, #0
 800f6ec:	4947      	ldr	r1, [pc, #284]	@ (800f80c <__kernel_rem_pio2+0x2f0>)
 800f6ee:	f7f0 fda7 	bl	8000240 <__aeabi_dsub>
 800f6f2:	4680      	mov	r8, r0
 800f6f4:	4689      	mov	r9, r1
 800f6f6:	2c00      	cmp	r4, #0
 800f6f8:	d042      	beq.n	800f780 <__kernel_rem_pio2+0x264>
 800f6fa:	4652      	mov	r2, sl
 800f6fc:	2000      	movs	r0, #0
 800f6fe:	4943      	ldr	r1, [pc, #268]	@ (800f80c <__kernel_rem_pio2+0x2f0>)
 800f700:	f000 fcd2 	bl	80100a8 <scalbn>
 800f704:	4602      	mov	r2, r0
 800f706:	460b      	mov	r3, r1
 800f708:	4640      	mov	r0, r8
 800f70a:	4649      	mov	r1, r9
 800f70c:	f7f0 fd98 	bl	8000240 <__aeabi_dsub>
 800f710:	4680      	mov	r8, r0
 800f712:	4689      	mov	r9, r1
 800f714:	e034      	b.n	800f780 <__kernel_rem_pio2+0x264>
 800f716:	2200      	movs	r2, #0
 800f718:	4b3d      	ldr	r3, [pc, #244]	@ (800f810 <__kernel_rem_pio2+0x2f4>)
 800f71a:	4620      	mov	r0, r4
 800f71c:	4629      	mov	r1, r5
 800f71e:	f7f0 ff47 	bl	80005b0 <__aeabi_dmul>
 800f722:	f7f1 f9df 	bl	8000ae4 <__aeabi_d2iz>
 800f726:	f7f0 fed9 	bl	80004dc <__aeabi_i2d>
 800f72a:	4602      	mov	r2, r0
 800f72c:	460b      	mov	r3, r1
 800f72e:	e9cd 2300 	strd	r2, r3, [sp]
 800f732:	2200      	movs	r2, #0
 800f734:	4b37      	ldr	r3, [pc, #220]	@ (800f814 <__kernel_rem_pio2+0x2f8>)
 800f736:	f7f0 ff3b 	bl	80005b0 <__aeabi_dmul>
 800f73a:	4602      	mov	r2, r0
 800f73c:	460b      	mov	r3, r1
 800f73e:	4620      	mov	r0, r4
 800f740:	4629      	mov	r1, r5
 800f742:	f7f0 fd7d 	bl	8000240 <__aeabi_dsub>
 800f746:	f7f1 f9cd 	bl	8000ae4 <__aeabi_d2iz>
 800f74a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800f74e:	f849 0b04 	str.w	r0, [r9], #4
 800f752:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f756:	f7f0 fd75 	bl	8000244 <__adddf3>
 800f75a:	3f01      	subs	r7, #1
 800f75c:	4604      	mov	r4, r0
 800f75e:	460d      	mov	r5, r1
 800f760:	e763      	b.n	800f62a <__kernel_rem_pio2+0x10e>
 800f762:	d106      	bne.n	800f772 <__kernel_rem_pio2+0x256>
 800f764:	f10b 33ff 	add.w	r3, fp, #4294967295
 800f768:	aa0c      	add	r2, sp, #48	@ 0x30
 800f76a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f76e:	15db      	asrs	r3, r3, #23
 800f770:	e79d      	b.n	800f6ae <__kernel_rem_pio2+0x192>
 800f772:	2200      	movs	r2, #0
 800f774:	4b28      	ldr	r3, [pc, #160]	@ (800f818 <__kernel_rem_pio2+0x2fc>)
 800f776:	f7f1 f9a1 	bl	8000abc <__aeabi_dcmpge>
 800f77a:	2800      	cmp	r0, #0
 800f77c:	d13f      	bne.n	800f7fe <__kernel_rem_pio2+0x2e2>
 800f77e:	9000      	str	r0, [sp, #0]
 800f780:	2200      	movs	r2, #0
 800f782:	2300      	movs	r3, #0
 800f784:	4640      	mov	r0, r8
 800f786:	4649      	mov	r1, r9
 800f788:	f7f1 f97a 	bl	8000a80 <__aeabi_dcmpeq>
 800f78c:	2800      	cmp	r0, #0
 800f78e:	f000 80af 	beq.w	800f8f0 <__kernel_rem_pio2+0x3d4>
 800f792:	2200      	movs	r2, #0
 800f794:	f10b 33ff 	add.w	r3, fp, #4294967295
 800f798:	9902      	ldr	r1, [sp, #8]
 800f79a:	428b      	cmp	r3, r1
 800f79c:	da61      	bge.n	800f862 <__kernel_rem_pio2+0x346>
 800f79e:	2a00      	cmp	r2, #0
 800f7a0:	d076      	beq.n	800f890 <__kernel_rem_pio2+0x374>
 800f7a2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f7a6:	ab0c      	add	r3, sp, #48	@ 0x30
 800f7a8:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800f7ac:	f1aa 0a18 	sub.w	sl, sl, #24
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d0f6      	beq.n	800f7a2 <__kernel_rem_pio2+0x286>
 800f7b4:	4652      	mov	r2, sl
 800f7b6:	2000      	movs	r0, #0
 800f7b8:	4914      	ldr	r1, [pc, #80]	@ (800f80c <__kernel_rem_pio2+0x2f0>)
 800f7ba:	f000 fc75 	bl	80100a8 <scalbn>
 800f7be:	465d      	mov	r5, fp
 800f7c0:	4606      	mov	r6, r0
 800f7c2:	460f      	mov	r7, r1
 800f7c4:	f04f 0900 	mov.w	r9, #0
 800f7c8:	ab70      	add	r3, sp, #448	@ 0x1c0
 800f7ca:	f8df a044 	ldr.w	sl, [pc, #68]	@ 800f810 <__kernel_rem_pio2+0x2f4>
 800f7ce:	ea4f 04cb 	mov.w	r4, fp, lsl #3
 800f7d2:	eb03 08cb 	add.w	r8, r3, fp, lsl #3
 800f7d6:	2d00      	cmp	r5, #0
 800f7d8:	f280 80c0 	bge.w	800f95c <__kernel_rem_pio2+0x440>
 800f7dc:	465d      	mov	r5, fp
 800f7de:	2d00      	cmp	r5, #0
 800f7e0:	f2c0 80f0 	blt.w	800f9c4 <__kernel_rem_pio2+0x4a8>
 800f7e4:	4b0d      	ldr	r3, [pc, #52]	@ (800f81c <__kernel_rem_pio2+0x300>)
 800f7e6:	f04f 0900 	mov.w	r9, #0
 800f7ea:	9306      	str	r3, [sp, #24]
 800f7ec:	ab70      	add	r3, sp, #448	@ 0x1c0
 800f7ee:	f04f 0a00 	mov.w	sl, #0
 800f7f2:	2700      	movs	r7, #0
 800f7f4:	eb03 08c5 	add.w	r8, r3, r5, lsl #3
 800f7f8:	ebab 0605 	sub.w	r6, fp, r5
 800f7fc:	e0d6      	b.n	800f9ac <__kernel_rem_pio2+0x490>
 800f7fe:	2302      	movs	r3, #2
 800f800:	9300      	str	r3, [sp, #0]
 800f802:	e758      	b.n	800f6b6 <__kernel_rem_pio2+0x19a>
 800f804:	08011558 	.word	0x08011558
 800f808:	40200000 	.word	0x40200000
 800f80c:	3ff00000 	.word	0x3ff00000
 800f810:	3e700000 	.word	0x3e700000
 800f814:	41700000 	.word	0x41700000
 800f818:	3fe00000 	.word	0x3fe00000
 800f81c:	08011518 	.word	0x08011518
 800f820:	f856 3b04 	ldr.w	r3, [r6], #4
 800f824:	b944      	cbnz	r4, 800f838 <__kernel_rem_pio2+0x31c>
 800f826:	b123      	cbz	r3, 800f832 <__kernel_rem_pio2+0x316>
 800f828:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800f82c:	f846 3c04 	str.w	r3, [r6, #-4]
 800f830:	2301      	movs	r3, #1
 800f832:	461c      	mov	r4, r3
 800f834:	3201      	adds	r2, #1
 800f836:	e745      	b.n	800f6c4 <__kernel_rem_pio2+0x1a8>
 800f838:	1acb      	subs	r3, r1, r3
 800f83a:	e7f7      	b.n	800f82c <__kernel_rem_pio2+0x310>
 800f83c:	f10b 32ff 	add.w	r2, fp, #4294967295
 800f840:	ab0c      	add	r3, sp, #48	@ 0x30
 800f842:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f846:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800f84a:	a90c      	add	r1, sp, #48	@ 0x30
 800f84c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800f850:	e746      	b.n	800f6e0 <__kernel_rem_pio2+0x1c4>
 800f852:	f10b 32ff 	add.w	r2, fp, #4294967295
 800f856:	ab0c      	add	r3, sp, #48	@ 0x30
 800f858:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f85c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800f860:	e7f3      	b.n	800f84a <__kernel_rem_pio2+0x32e>
 800f862:	a90c      	add	r1, sp, #48	@ 0x30
 800f864:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800f868:	3b01      	subs	r3, #1
 800f86a:	430a      	orrs	r2, r1
 800f86c:	e794      	b.n	800f798 <__kernel_rem_pio2+0x27c>
 800f86e:	3401      	adds	r4, #1
 800f870:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800f874:	2a00      	cmp	r2, #0
 800f876:	d0fa      	beq.n	800f86e <__kernel_rem_pio2+0x352>
 800f878:	9b08      	ldr	r3, [sp, #32]
 800f87a:	aa20      	add	r2, sp, #128	@ 0x80
 800f87c:	445b      	add	r3, fp
 800f87e:	f10b 0801 	add.w	r8, fp, #1
 800f882:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800f886:	445c      	add	r4, fp
 800f888:	4544      	cmp	r4, r8
 800f88a:	da04      	bge.n	800f896 <__kernel_rem_pio2+0x37a>
 800f88c:	46a3      	mov	fp, r4
 800f88e:	e6bf      	b.n	800f610 <__kernel_rem_pio2+0xf4>
 800f890:	2401      	movs	r4, #1
 800f892:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f894:	e7ec      	b.n	800f870 <__kernel_rem_pio2+0x354>
 800f896:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f898:	46ab      	mov	fp, r5
 800f89a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800f89e:	f7f0 fe1d 	bl	80004dc <__aeabi_i2d>
 800f8a2:	f04f 0900 	mov.w	r9, #0
 800f8a6:	2600      	movs	r6, #0
 800f8a8:	2700      	movs	r7, #0
 800f8aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f8ac:	e9c5 0100 	strd	r0, r1, [r5]
 800f8b0:	3b08      	subs	r3, #8
 800f8b2:	9300      	str	r3, [sp, #0]
 800f8b4:	9b06      	ldr	r3, [sp, #24]
 800f8b6:	4599      	cmp	r9, r3
 800f8b8:	dd07      	ble.n	800f8ca <__kernel_rem_pio2+0x3ae>
 800f8ba:	9b07      	ldr	r3, [sp, #28]
 800f8bc:	f108 0801 	add.w	r8, r8, #1
 800f8c0:	e9e3 6702 	strd	r6, r7, [r3, #8]!
 800f8c4:	3508      	adds	r5, #8
 800f8c6:	9307      	str	r3, [sp, #28]
 800f8c8:	e7de      	b.n	800f888 <__kernel_rem_pio2+0x36c>
 800f8ca:	9900      	ldr	r1, [sp, #0]
 800f8cc:	f109 0901 	add.w	r9, r9, #1
 800f8d0:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 800f8d4:	9100      	str	r1, [sp, #0]
 800f8d6:	e87b 0102 	ldrd	r0, r1, [fp], #-8
 800f8da:	f7f0 fe69 	bl	80005b0 <__aeabi_dmul>
 800f8de:	4602      	mov	r2, r0
 800f8e0:	460b      	mov	r3, r1
 800f8e2:	4630      	mov	r0, r6
 800f8e4:	4639      	mov	r1, r7
 800f8e6:	f7f0 fcad 	bl	8000244 <__adddf3>
 800f8ea:	4606      	mov	r6, r0
 800f8ec:	460f      	mov	r7, r1
 800f8ee:	e7e1      	b.n	800f8b4 <__kernel_rem_pio2+0x398>
 800f8f0:	f1ca 0200 	rsb	r2, sl, #0
 800f8f4:	4640      	mov	r0, r8
 800f8f6:	4649      	mov	r1, r9
 800f8f8:	f000 fbd6 	bl	80100a8 <scalbn>
 800f8fc:	2200      	movs	r2, #0
 800f8fe:	4b97      	ldr	r3, [pc, #604]	@ (800fb5c <__kernel_rem_pio2+0x640>)
 800f900:	4604      	mov	r4, r0
 800f902:	460d      	mov	r5, r1
 800f904:	f7f1 f8da 	bl	8000abc <__aeabi_dcmpge>
 800f908:	b300      	cbz	r0, 800f94c <__kernel_rem_pio2+0x430>
 800f90a:	2200      	movs	r2, #0
 800f90c:	4b94      	ldr	r3, [pc, #592]	@ (800fb60 <__kernel_rem_pio2+0x644>)
 800f90e:	4620      	mov	r0, r4
 800f910:	4629      	mov	r1, r5
 800f912:	f7f0 fe4d 	bl	80005b0 <__aeabi_dmul>
 800f916:	f7f1 f8e5 	bl	8000ae4 <__aeabi_d2iz>
 800f91a:	4606      	mov	r6, r0
 800f91c:	f7f0 fdde 	bl	80004dc <__aeabi_i2d>
 800f920:	2200      	movs	r2, #0
 800f922:	4b8e      	ldr	r3, [pc, #568]	@ (800fb5c <__kernel_rem_pio2+0x640>)
 800f924:	f7f0 fe44 	bl	80005b0 <__aeabi_dmul>
 800f928:	460b      	mov	r3, r1
 800f92a:	4602      	mov	r2, r0
 800f92c:	4629      	mov	r1, r5
 800f92e:	4620      	mov	r0, r4
 800f930:	f7f0 fc86 	bl	8000240 <__aeabi_dsub>
 800f934:	f7f1 f8d6 	bl	8000ae4 <__aeabi_d2iz>
 800f938:	ab0c      	add	r3, sp, #48	@ 0x30
 800f93a:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 800f93e:	f10b 0b01 	add.w	fp, fp, #1
 800f942:	f10a 0a18 	add.w	sl, sl, #24
 800f946:	f843 602b 	str.w	r6, [r3, fp, lsl #2]
 800f94a:	e733      	b.n	800f7b4 <__kernel_rem_pio2+0x298>
 800f94c:	4620      	mov	r0, r4
 800f94e:	4629      	mov	r1, r5
 800f950:	f7f1 f8c8 	bl	8000ae4 <__aeabi_d2iz>
 800f954:	ab0c      	add	r3, sp, #48	@ 0x30
 800f956:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 800f95a:	e72b      	b.n	800f7b4 <__kernel_rem_pio2+0x298>
 800f95c:	ab0c      	add	r3, sp, #48	@ 0x30
 800f95e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f962:	f7f0 fdbb 	bl	80004dc <__aeabi_i2d>
 800f966:	4632      	mov	r2, r6
 800f968:	463b      	mov	r3, r7
 800f96a:	f7f0 fe21 	bl	80005b0 <__aeabi_dmul>
 800f96e:	464a      	mov	r2, r9
 800f970:	e868 0102 	strd	r0, r1, [r8], #-8
 800f974:	4653      	mov	r3, sl
 800f976:	4630      	mov	r0, r6
 800f978:	4639      	mov	r1, r7
 800f97a:	f7f0 fe19 	bl	80005b0 <__aeabi_dmul>
 800f97e:	3d01      	subs	r5, #1
 800f980:	4606      	mov	r6, r0
 800f982:	460f      	mov	r7, r1
 800f984:	e727      	b.n	800f7d6 <__kernel_rem_pio2+0x2ba>
 800f986:	f8dd c018 	ldr.w	ip, [sp, #24]
 800f98a:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800f98e:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 800f992:	f8cd c018 	str.w	ip, [sp, #24]
 800f996:	f7f0 fe0b 	bl	80005b0 <__aeabi_dmul>
 800f99a:	4602      	mov	r2, r0
 800f99c:	460b      	mov	r3, r1
 800f99e:	4648      	mov	r0, r9
 800f9a0:	4651      	mov	r1, sl
 800f9a2:	f7f0 fc4f 	bl	8000244 <__adddf3>
 800f9a6:	4681      	mov	r9, r0
 800f9a8:	468a      	mov	sl, r1
 800f9aa:	3701      	adds	r7, #1
 800f9ac:	9b02      	ldr	r3, [sp, #8]
 800f9ae:	429f      	cmp	r7, r3
 800f9b0:	dc01      	bgt.n	800f9b6 <__kernel_rem_pio2+0x49a>
 800f9b2:	42be      	cmp	r6, r7
 800f9b4:	dae7      	bge.n	800f986 <__kernel_rem_pio2+0x46a>
 800f9b6:	ab48      	add	r3, sp, #288	@ 0x120
 800f9b8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800f9bc:	e9c6 9a00 	strd	r9, sl, [r6]
 800f9c0:	3d01      	subs	r5, #1
 800f9c2:	e70c      	b.n	800f7de <__kernel_rem_pio2+0x2c2>
 800f9c4:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 800f9c6:	2b02      	cmp	r3, #2
 800f9c8:	dc09      	bgt.n	800f9de <__kernel_rem_pio2+0x4c2>
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	dc2c      	bgt.n	800fa28 <__kernel_rem_pio2+0x50c>
 800f9ce:	d04e      	beq.n	800fa6e <__kernel_rem_pio2+0x552>
 800f9d0:	9b05      	ldr	r3, [sp, #20]
 800f9d2:	f003 0007 	and.w	r0, r3, #7
 800f9d6:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800f9da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9de:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 800f9e0:	2b03      	cmp	r3, #3
 800f9e2:	d1f5      	bne.n	800f9d0 <__kernel_rem_pio2+0x4b4>
 800f9e4:	ab48      	add	r3, sp, #288	@ 0x120
 800f9e6:	441c      	add	r4, r3
 800f9e8:	4625      	mov	r5, r4
 800f9ea:	46da      	mov	sl, fp
 800f9ec:	f1ba 0f00 	cmp.w	sl, #0
 800f9f0:	dc63      	bgt.n	800faba <__kernel_rem_pio2+0x59e>
 800f9f2:	4625      	mov	r5, r4
 800f9f4:	46da      	mov	sl, fp
 800f9f6:	f1ba 0f01 	cmp.w	sl, #1
 800f9fa:	dc7b      	bgt.n	800faf4 <__kernel_rem_pio2+0x5d8>
 800f9fc:	2000      	movs	r0, #0
 800f9fe:	2100      	movs	r1, #0
 800fa00:	f1bb 0f01 	cmp.w	fp, #1
 800fa04:	f300 8093 	bgt.w	800fb2e <__kernel_rem_pio2+0x612>
 800fa08:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800fa0c:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800fa10:	9b00      	ldr	r3, [sp, #0]
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	f040 8092 	bne.w	800fb3c <__kernel_rem_pio2+0x620>
 800fa18:	9b04      	ldr	r3, [sp, #16]
 800fa1a:	e9c3 7800 	strd	r7, r8, [r3]
 800fa1e:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800fa22:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800fa26:	e7d3      	b.n	800f9d0 <__kernel_rem_pio2+0x4b4>
 800fa28:	465d      	mov	r5, fp
 800fa2a:	2000      	movs	r0, #0
 800fa2c:	2100      	movs	r1, #0
 800fa2e:	ab48      	add	r3, sp, #288	@ 0x120
 800fa30:	441c      	add	r4, r3
 800fa32:	2d00      	cmp	r5, #0
 800fa34:	da32      	bge.n	800fa9c <__kernel_rem_pio2+0x580>
 800fa36:	9b00      	ldr	r3, [sp, #0]
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d035      	beq.n	800faa8 <__kernel_rem_pio2+0x58c>
 800fa3c:	4602      	mov	r2, r0
 800fa3e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800fa42:	9c04      	ldr	r4, [sp, #16]
 800fa44:	2501      	movs	r5, #1
 800fa46:	e9c4 2300 	strd	r2, r3, [r4]
 800fa4a:	4602      	mov	r2, r0
 800fa4c:	460b      	mov	r3, r1
 800fa4e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800fa52:	f7f0 fbf5 	bl	8000240 <__aeabi_dsub>
 800fa56:	ac48      	add	r4, sp, #288	@ 0x120
 800fa58:	45ab      	cmp	fp, r5
 800fa5a:	da28      	bge.n	800faae <__kernel_rem_pio2+0x592>
 800fa5c:	9b00      	ldr	r3, [sp, #0]
 800fa5e:	b113      	cbz	r3, 800fa66 <__kernel_rem_pio2+0x54a>
 800fa60:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800fa64:	4619      	mov	r1, r3
 800fa66:	9b04      	ldr	r3, [sp, #16]
 800fa68:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800fa6c:	e7b0      	b.n	800f9d0 <__kernel_rem_pio2+0x4b4>
 800fa6e:	2000      	movs	r0, #0
 800fa70:	2100      	movs	r1, #0
 800fa72:	ab48      	add	r3, sp, #288	@ 0x120
 800fa74:	441c      	add	r4, r3
 800fa76:	f1bb 0f00 	cmp.w	fp, #0
 800fa7a:	da08      	bge.n	800fa8e <__kernel_rem_pio2+0x572>
 800fa7c:	9b00      	ldr	r3, [sp, #0]
 800fa7e:	b113      	cbz	r3, 800fa86 <__kernel_rem_pio2+0x56a>
 800fa80:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800fa84:	4619      	mov	r1, r3
 800fa86:	9b04      	ldr	r3, [sp, #16]
 800fa88:	e9c3 0100 	strd	r0, r1, [r3]
 800fa8c:	e7a0      	b.n	800f9d0 <__kernel_rem_pio2+0x4b4>
 800fa8e:	e874 2302 	ldrd	r2, r3, [r4], #-8
 800fa92:	f7f0 fbd7 	bl	8000244 <__adddf3>
 800fa96:	f10b 3bff 	add.w	fp, fp, #4294967295
 800fa9a:	e7ec      	b.n	800fa76 <__kernel_rem_pio2+0x55a>
 800fa9c:	e874 2302 	ldrd	r2, r3, [r4], #-8
 800faa0:	f7f0 fbd0 	bl	8000244 <__adddf3>
 800faa4:	3d01      	subs	r5, #1
 800faa6:	e7c4      	b.n	800fa32 <__kernel_rem_pio2+0x516>
 800faa8:	4602      	mov	r2, r0
 800faaa:	460b      	mov	r3, r1
 800faac:	e7c9      	b.n	800fa42 <__kernel_rem_pio2+0x526>
 800faae:	e9f4 2302 	ldrd	r2, r3, [r4, #8]!
 800fab2:	f7f0 fbc7 	bl	8000244 <__adddf3>
 800fab6:	3501      	adds	r5, #1
 800fab8:	e7ce      	b.n	800fa58 <__kernel_rem_pio2+0x53c>
 800faba:	e9d5 2300 	ldrd	r2, r3, [r5]
 800fabe:	e955 8902 	ldrd	r8, r9, [r5, #-8]
 800fac2:	4640      	mov	r0, r8
 800fac4:	4649      	mov	r1, r9
 800fac6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800faca:	f7f0 fbbb 	bl	8000244 <__adddf3>
 800face:	4602      	mov	r2, r0
 800fad0:	460b      	mov	r3, r1
 800fad2:	4606      	mov	r6, r0
 800fad4:	460f      	mov	r7, r1
 800fad6:	4640      	mov	r0, r8
 800fad8:	4649      	mov	r1, r9
 800fada:	f7f0 fbb1 	bl	8000240 <__aeabi_dsub>
 800fade:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fae2:	f7f0 fbaf 	bl	8000244 <__adddf3>
 800fae6:	e865 0102 	strd	r0, r1, [r5], #-8
 800faea:	f10a 3aff 	add.w	sl, sl, #4294967295
 800faee:	e9c5 6700 	strd	r6, r7, [r5]
 800faf2:	e77b      	b.n	800f9ec <__kernel_rem_pio2+0x4d0>
 800faf4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800faf8:	e955 8902 	ldrd	r8, r9, [r5, #-8]
 800fafc:	4640      	mov	r0, r8
 800fafe:	4649      	mov	r1, r9
 800fb00:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800fb04:	f7f0 fb9e 	bl	8000244 <__adddf3>
 800fb08:	4602      	mov	r2, r0
 800fb0a:	460b      	mov	r3, r1
 800fb0c:	4606      	mov	r6, r0
 800fb0e:	460f      	mov	r7, r1
 800fb10:	4640      	mov	r0, r8
 800fb12:	4649      	mov	r1, r9
 800fb14:	f7f0 fb94 	bl	8000240 <__aeabi_dsub>
 800fb18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fb1c:	f7f0 fb92 	bl	8000244 <__adddf3>
 800fb20:	e865 0102 	strd	r0, r1, [r5], #-8
 800fb24:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fb28:	e9c5 6700 	strd	r6, r7, [r5]
 800fb2c:	e763      	b.n	800f9f6 <__kernel_rem_pio2+0x4da>
 800fb2e:	e874 2302 	ldrd	r2, r3, [r4], #-8
 800fb32:	f7f0 fb87 	bl	8000244 <__adddf3>
 800fb36:	f10b 3bff 	add.w	fp, fp, #4294967295
 800fb3a:	e761      	b.n	800fa00 <__kernel_rem_pio2+0x4e4>
 800fb3c:	9b04      	ldr	r3, [sp, #16]
 800fb3e:	9a04      	ldr	r2, [sp, #16]
 800fb40:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800fb44:	601f      	str	r7, [r3, #0]
 800fb46:	605c      	str	r4, [r3, #4]
 800fb48:	609d      	str	r5, [r3, #8]
 800fb4a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800fb4e:	60d3      	str	r3, [r2, #12]
 800fb50:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800fb54:	6110      	str	r0, [r2, #16]
 800fb56:	6153      	str	r3, [r2, #20]
 800fb58:	e73a      	b.n	800f9d0 <__kernel_rem_pio2+0x4b4>
 800fb5a:	bf00      	nop
 800fb5c:	41700000 	.word	0x41700000
 800fb60:	3e700000 	.word	0x3e700000

0800fb64 <__kernel_rem_pio2f>:
 800fb64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb68:	b0db      	sub	sp, #364	@ 0x16c
 800fb6a:	9202      	str	r2, [sp, #8]
 800fb6c:	9304      	str	r3, [sp, #16]
 800fb6e:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 800fb70:	4bad      	ldr	r3, [pc, #692]	@ (800fe28 <__kernel_rem_pio2f+0x2c4>)
 800fb72:	9005      	str	r0, [sp, #20]
 800fb74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb78:	9100      	str	r1, [sp, #0]
 800fb7a:	9301      	str	r3, [sp, #4]
 800fb7c:	9b04      	ldr	r3, [sp, #16]
 800fb7e:	3b01      	subs	r3, #1
 800fb80:	9303      	str	r3, [sp, #12]
 800fb82:	9b02      	ldr	r3, [sp, #8]
 800fb84:	1d1a      	adds	r2, r3, #4
 800fb86:	f2c0 8099 	blt.w	800fcbc <__kernel_rem_pio2f+0x158>
 800fb8a:	1edc      	subs	r4, r3, #3
 800fb8c:	bf48      	it	mi
 800fb8e:	1d1c      	addmi	r4, r3, #4
 800fb90:	10e4      	asrs	r4, r4, #3
 800fb92:	2500      	movs	r5, #0
 800fb94:	f04f 0b00 	mov.w	fp, #0
 800fb98:	1c67      	adds	r7, r4, #1
 800fb9a:	00fb      	lsls	r3, r7, #3
 800fb9c:	9306      	str	r3, [sp, #24]
 800fb9e:	9b02      	ldr	r3, [sp, #8]
 800fba0:	9a03      	ldr	r2, [sp, #12]
 800fba2:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 800fba6:	9b01      	ldr	r3, [sp, #4]
 800fba8:	eba4 0802 	sub.w	r8, r4, r2
 800fbac:	eb03 0902 	add.w	r9, r3, r2
 800fbb0:	9b65      	ldr	r3, [sp, #404]	@ 0x194
 800fbb2:	ae1e      	add	r6, sp, #120	@ 0x78
 800fbb4:	eb03 0a88 	add.w	sl, r3, r8, lsl #2
 800fbb8:	454d      	cmp	r5, r9
 800fbba:	f340 8081 	ble.w	800fcc0 <__kernel_rem_pio2f+0x15c>
 800fbbe:	9a04      	ldr	r2, [sp, #16]
 800fbc0:	ab1e      	add	r3, sp, #120	@ 0x78
 800fbc2:	eb03 0582 	add.w	r5, r3, r2, lsl #2
 800fbc6:	f04f 0900 	mov.w	r9, #0
 800fbca:	2300      	movs	r3, #0
 800fbcc:	f50d 7b8c 	add.w	fp, sp, #280	@ 0x118
 800fbd0:	9a01      	ldr	r2, [sp, #4]
 800fbd2:	4591      	cmp	r9, r2
 800fbd4:	f340 809c 	ble.w	800fd10 <__kernel_rem_pio2f+0x1ac>
 800fbd8:	4613      	mov	r3, r2
 800fbda:	aa0a      	add	r2, sp, #40	@ 0x28
 800fbdc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fbe0:	9308      	str	r3, [sp, #32]
 800fbe2:	9b65      	ldr	r3, [sp, #404]	@ 0x194
 800fbe4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800fbe8:	9c01      	ldr	r4, [sp, #4]
 800fbea:	9307      	str	r3, [sp, #28]
 800fbec:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 800fbf0:	4646      	mov	r6, r8
 800fbf2:	4625      	mov	r5, r4
 800fbf4:	f04f 4987 	mov.w	r9, #1132462080	@ 0x43800000
 800fbf8:	ab5a      	add	r3, sp, #360	@ 0x168
 800fbfa:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800fbfe:	f853 bc50 	ldr.w	fp, [r3, #-80]
 800fc02:	f50d 7a8c 	add.w	sl, sp, #280	@ 0x118
 800fc06:	2d00      	cmp	r5, #0
 800fc08:	f300 8087 	bgt.w	800fd1a <__kernel_rem_pio2f+0x1b6>
 800fc0c:	4639      	mov	r1, r7
 800fc0e:	4658      	mov	r0, fp
 800fc10:	f000 fac0 	bl	8010194 <scalbnf>
 800fc14:	f04f 5178 	mov.w	r1, #1040187392	@ 0x3e000000
 800fc18:	4605      	mov	r5, r0
 800fc1a:	f7f1 f8e9 	bl	8000df0 <__aeabi_fmul>
 800fc1e:	f000 fb87 	bl	8010330 <floorf>
 800fc22:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 800fc26:	f7f1 f8e3 	bl	8000df0 <__aeabi_fmul>
 800fc2a:	4601      	mov	r1, r0
 800fc2c:	4628      	mov	r0, r5
 800fc2e:	f7f0 ffd5 	bl	8000bdc <__aeabi_fsub>
 800fc32:	4605      	mov	r5, r0
 800fc34:	f7f1 faa2 	bl	800117c <__aeabi_f2iz>
 800fc38:	4606      	mov	r6, r0
 800fc3a:	f7f1 f885 	bl	8000d48 <__aeabi_i2f>
 800fc3e:	4601      	mov	r1, r0
 800fc40:	4628      	mov	r0, r5
 800fc42:	f7f0 ffcb 	bl	8000bdc <__aeabi_fsub>
 800fc46:	2f00      	cmp	r7, #0
 800fc48:	4681      	mov	r9, r0
 800fc4a:	f340 8083 	ble.w	800fd54 <__kernel_rem_pio2f+0x1f0>
 800fc4e:	1e62      	subs	r2, r4, #1
 800fc50:	ab0a      	add	r3, sp, #40	@ 0x28
 800fc52:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800fc56:	f1c7 0108 	rsb	r1, r7, #8
 800fc5a:	fa45 f301 	asr.w	r3, r5, r1
 800fc5e:	441e      	add	r6, r3
 800fc60:	408b      	lsls	r3, r1
 800fc62:	1aed      	subs	r5, r5, r3
 800fc64:	ab0a      	add	r3, sp, #40	@ 0x28
 800fc66:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800fc6a:	f1c7 0307 	rsb	r3, r7, #7
 800fc6e:	411d      	asrs	r5, r3
 800fc70:	2d00      	cmp	r5, #0
 800fc72:	dd7c      	ble.n	800fd6e <__kernel_rem_pio2f+0x20a>
 800fc74:	2200      	movs	r2, #0
 800fc76:	4692      	mov	sl, r2
 800fc78:	3601      	adds	r6, #1
 800fc7a:	4294      	cmp	r4, r2
 800fc7c:	f300 80ac 	bgt.w	800fdd8 <__kernel_rem_pio2f+0x274>
 800fc80:	2f00      	cmp	r7, #0
 800fc82:	dd05      	ble.n	800fc90 <__kernel_rem_pio2f+0x12c>
 800fc84:	2f01      	cmp	r7, #1
 800fc86:	f000 80b8 	beq.w	800fdfa <__kernel_rem_pio2f+0x296>
 800fc8a:	2f02      	cmp	r7, #2
 800fc8c:	f000 80bf 	beq.w	800fe0e <__kernel_rem_pio2f+0x2aa>
 800fc90:	2d02      	cmp	r5, #2
 800fc92:	d16c      	bne.n	800fd6e <__kernel_rem_pio2f+0x20a>
 800fc94:	4649      	mov	r1, r9
 800fc96:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800fc9a:	f7f0 ff9f 	bl	8000bdc <__aeabi_fsub>
 800fc9e:	4681      	mov	r9, r0
 800fca0:	f1ba 0f00 	cmp.w	sl, #0
 800fca4:	d063      	beq.n	800fd6e <__kernel_rem_pio2f+0x20a>
 800fca6:	4639      	mov	r1, r7
 800fca8:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800fcac:	f000 fa72 	bl	8010194 <scalbnf>
 800fcb0:	4601      	mov	r1, r0
 800fcb2:	4648      	mov	r0, r9
 800fcb4:	f7f0 ff92 	bl	8000bdc <__aeabi_fsub>
 800fcb8:	4681      	mov	r9, r0
 800fcba:	e058      	b.n	800fd6e <__kernel_rem_pio2f+0x20a>
 800fcbc:	2400      	movs	r4, #0
 800fcbe:	e768      	b.n	800fb92 <__kernel_rem_pio2f+0x2e>
 800fcc0:	eb18 0f05 	cmn.w	r8, r5
 800fcc4:	d407      	bmi.n	800fcd6 <__kernel_rem_pio2f+0x172>
 800fcc6:	f85a 0025 	ldr.w	r0, [sl, r5, lsl #2]
 800fcca:	f7f1 f83d 	bl	8000d48 <__aeabi_i2f>
 800fcce:	f846 0b04 	str.w	r0, [r6], #4
 800fcd2:	3501      	adds	r5, #1
 800fcd4:	e770      	b.n	800fbb8 <__kernel_rem_pio2f+0x54>
 800fcd6:	4658      	mov	r0, fp
 800fcd8:	e7f9      	b.n	800fcce <__kernel_rem_pio2f+0x16a>
 800fcda:	9307      	str	r3, [sp, #28]
 800fcdc:	9b05      	ldr	r3, [sp, #20]
 800fcde:	f8da 1000 	ldr.w	r1, [sl]
 800fce2:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800fce6:	f7f1 f883 	bl	8000df0 <__aeabi_fmul>
 800fcea:	4601      	mov	r1, r0
 800fcec:	4630      	mov	r0, r6
 800fcee:	f7f0 ff77 	bl	8000be0 <__addsf3>
 800fcf2:	4606      	mov	r6, r0
 800fcf4:	9b07      	ldr	r3, [sp, #28]
 800fcf6:	f108 0801 	add.w	r8, r8, #1
 800fcfa:	9a03      	ldr	r2, [sp, #12]
 800fcfc:	f1aa 0a04 	sub.w	sl, sl, #4
 800fd00:	4590      	cmp	r8, r2
 800fd02:	ddea      	ble.n	800fcda <__kernel_rem_pio2f+0x176>
 800fd04:	f84b 6b04 	str.w	r6, [fp], #4
 800fd08:	f109 0901 	add.w	r9, r9, #1
 800fd0c:	3504      	adds	r5, #4
 800fd0e:	e75f      	b.n	800fbd0 <__kernel_rem_pio2f+0x6c>
 800fd10:	46aa      	mov	sl, r5
 800fd12:	461e      	mov	r6, r3
 800fd14:	f04f 0800 	mov.w	r8, #0
 800fd18:	e7ef      	b.n	800fcfa <__kernel_rem_pio2f+0x196>
 800fd1a:	f04f 516e 	mov.w	r1, #998244352	@ 0x3b800000
 800fd1e:	4658      	mov	r0, fp
 800fd20:	f7f1 f866 	bl	8000df0 <__aeabi_fmul>
 800fd24:	f7f1 fa2a 	bl	800117c <__aeabi_f2iz>
 800fd28:	f7f1 f80e 	bl	8000d48 <__aeabi_i2f>
 800fd2c:	4649      	mov	r1, r9
 800fd2e:	9009      	str	r0, [sp, #36]	@ 0x24
 800fd30:	f7f1 f85e 	bl	8000df0 <__aeabi_fmul>
 800fd34:	4601      	mov	r1, r0
 800fd36:	4658      	mov	r0, fp
 800fd38:	f7f0 ff50 	bl	8000bdc <__aeabi_fsub>
 800fd3c:	f7f1 fa1e 	bl	800117c <__aeabi_f2iz>
 800fd40:	3d01      	subs	r5, #1
 800fd42:	f846 0b04 	str.w	r0, [r6], #4
 800fd46:	f85a 1025 	ldr.w	r1, [sl, r5, lsl #2]
 800fd4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fd4c:	f7f0 ff48 	bl	8000be0 <__addsf3>
 800fd50:	4683      	mov	fp, r0
 800fd52:	e758      	b.n	800fc06 <__kernel_rem_pio2f+0xa2>
 800fd54:	d105      	bne.n	800fd62 <__kernel_rem_pio2f+0x1fe>
 800fd56:	1e63      	subs	r3, r4, #1
 800fd58:	aa0a      	add	r2, sp, #40	@ 0x28
 800fd5a:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 800fd5e:	11ed      	asrs	r5, r5, #7
 800fd60:	e786      	b.n	800fc70 <__kernel_rem_pio2f+0x10c>
 800fd62:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800fd66:	f7f1 f9f5 	bl	8001154 <__aeabi_fcmpge>
 800fd6a:	4605      	mov	r5, r0
 800fd6c:	bb90      	cbnz	r0, 800fdd4 <__kernel_rem_pio2f+0x270>
 800fd6e:	2100      	movs	r1, #0
 800fd70:	4648      	mov	r0, r9
 800fd72:	f7f1 f9d1 	bl	8001118 <__aeabi_fcmpeq>
 800fd76:	2800      	cmp	r0, #0
 800fd78:	f000 8090 	beq.w	800fe9c <__kernel_rem_pio2f+0x338>
 800fd7c:	2200      	movs	r2, #0
 800fd7e:	1e63      	subs	r3, r4, #1
 800fd80:	9901      	ldr	r1, [sp, #4]
 800fd82:	428b      	cmp	r3, r1
 800fd84:	da4a      	bge.n	800fe1c <__kernel_rem_pio2f+0x2b8>
 800fd86:	2a00      	cmp	r2, #0
 800fd88:	d076      	beq.n	800fe78 <__kernel_rem_pio2f+0x314>
 800fd8a:	3c01      	subs	r4, #1
 800fd8c:	ab0a      	add	r3, sp, #40	@ 0x28
 800fd8e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800fd92:	3f08      	subs	r7, #8
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d0f8      	beq.n	800fd8a <__kernel_rem_pio2f+0x226>
 800fd98:	4639      	mov	r1, r7
 800fd9a:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800fd9e:	f000 f9f9 	bl	8010194 <scalbnf>
 800fda2:	46a2      	mov	sl, r4
 800fda4:	4607      	mov	r7, r0
 800fda6:	f04f 596e 	mov.w	r9, #998244352	@ 0x3b800000
 800fdaa:	f50d 788c 	add.w	r8, sp, #280	@ 0x118
 800fdae:	f1ba 0f00 	cmp.w	sl, #0
 800fdb2:	f280 80a1 	bge.w	800fef8 <__kernel_rem_pio2f+0x394>
 800fdb6:	4627      	mov	r7, r4
 800fdb8:	2200      	movs	r2, #0
 800fdba:	2f00      	cmp	r7, #0
 800fdbc:	f2c0 80cb 	blt.w	800ff56 <__kernel_rem_pio2f+0x3f2>
 800fdc0:	a946      	add	r1, sp, #280	@ 0x118
 800fdc2:	4690      	mov	r8, r2
 800fdc4:	f04f 0a00 	mov.w	sl, #0
 800fdc8:	4b18      	ldr	r3, [pc, #96]	@ (800fe2c <__kernel_rem_pio2f+0x2c8>)
 800fdca:	eb01 0b87 	add.w	fp, r1, r7, lsl #2
 800fdce:	eba4 0907 	sub.w	r9, r4, r7
 800fdd2:	e0b4      	b.n	800ff3e <__kernel_rem_pio2f+0x3da>
 800fdd4:	2502      	movs	r5, #2
 800fdd6:	e74d      	b.n	800fc74 <__kernel_rem_pio2f+0x110>
 800fdd8:	f858 3b04 	ldr.w	r3, [r8], #4
 800fddc:	f1ba 0f00 	cmp.w	sl, #0
 800fde0:	d108      	bne.n	800fdf4 <__kernel_rem_pio2f+0x290>
 800fde2:	b123      	cbz	r3, 800fdee <__kernel_rem_pio2f+0x28a>
 800fde4:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 800fde8:	f848 3c04 	str.w	r3, [r8, #-4]
 800fdec:	2301      	movs	r3, #1
 800fdee:	469a      	mov	sl, r3
 800fdf0:	3201      	adds	r2, #1
 800fdf2:	e742      	b.n	800fc7a <__kernel_rem_pio2f+0x116>
 800fdf4:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 800fdf8:	e7f6      	b.n	800fde8 <__kernel_rem_pio2f+0x284>
 800fdfa:	1e62      	subs	r2, r4, #1
 800fdfc:	ab0a      	add	r3, sp, #40	@ 0x28
 800fdfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fe02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fe06:	a90a      	add	r1, sp, #40	@ 0x28
 800fe08:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800fe0c:	e740      	b.n	800fc90 <__kernel_rem_pio2f+0x12c>
 800fe0e:	1e62      	subs	r2, r4, #1
 800fe10:	ab0a      	add	r3, sp, #40	@ 0x28
 800fe12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fe16:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800fe1a:	e7f4      	b.n	800fe06 <__kernel_rem_pio2f+0x2a2>
 800fe1c:	a90a      	add	r1, sp, #40	@ 0x28
 800fe1e:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800fe22:	3b01      	subs	r3, #1
 800fe24:	430a      	orrs	r2, r1
 800fe26:	e7ab      	b.n	800fd80 <__kernel_rem_pio2f+0x21c>
 800fe28:	08011594 	.word	0x08011594
 800fe2c:	08011568 	.word	0x08011568
 800fe30:	3301      	adds	r3, #1
 800fe32:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800fe36:	2900      	cmp	r1, #0
 800fe38:	d0fa      	beq.n	800fe30 <__kernel_rem_pio2f+0x2cc>
 800fe3a:	9a04      	ldr	r2, [sp, #16]
 800fe3c:	a91e      	add	r1, sp, #120	@ 0x78
 800fe3e:	18a2      	adds	r2, r4, r2
 800fe40:	1c66      	adds	r6, r4, #1
 800fe42:	eb01 0582 	add.w	r5, r1, r2, lsl #2
 800fe46:	441c      	add	r4, r3
 800fe48:	f50d 798c 	add.w	r9, sp, #280	@ 0x118
 800fe4c:	42b4      	cmp	r4, r6
 800fe4e:	f6ff aecd 	blt.w	800fbec <__kernel_rem_pio2f+0x88>
 800fe52:	9b07      	ldr	r3, [sp, #28]
 800fe54:	46ab      	mov	fp, r5
 800fe56:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800fe5a:	f7f0 ff75 	bl	8000d48 <__aeabi_i2f>
 800fe5e:	f04f 0a00 	mov.w	sl, #0
 800fe62:	f04f 0800 	mov.w	r8, #0
 800fe66:	6028      	str	r0, [r5, #0]
 800fe68:	9b03      	ldr	r3, [sp, #12]
 800fe6a:	459a      	cmp	sl, r3
 800fe6c:	dd07      	ble.n	800fe7e <__kernel_rem_pio2f+0x31a>
 800fe6e:	f849 8026 	str.w	r8, [r9, r6, lsl #2]
 800fe72:	3504      	adds	r5, #4
 800fe74:	3601      	adds	r6, #1
 800fe76:	e7e9      	b.n	800fe4c <__kernel_rem_pio2f+0x2e8>
 800fe78:	2301      	movs	r3, #1
 800fe7a:	9a08      	ldr	r2, [sp, #32]
 800fe7c:	e7d9      	b.n	800fe32 <__kernel_rem_pio2f+0x2ce>
 800fe7e:	9b05      	ldr	r3, [sp, #20]
 800fe80:	f85b 0904 	ldr.w	r0, [fp], #-4
 800fe84:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 800fe88:	f7f0 ffb2 	bl	8000df0 <__aeabi_fmul>
 800fe8c:	4601      	mov	r1, r0
 800fe8e:	4640      	mov	r0, r8
 800fe90:	f7f0 fea6 	bl	8000be0 <__addsf3>
 800fe94:	f10a 0a01 	add.w	sl, sl, #1
 800fe98:	4680      	mov	r8, r0
 800fe9a:	e7e5      	b.n	800fe68 <__kernel_rem_pio2f+0x304>
 800fe9c:	9b06      	ldr	r3, [sp, #24]
 800fe9e:	9a02      	ldr	r2, [sp, #8]
 800fea0:	4648      	mov	r0, r9
 800fea2:	1a99      	subs	r1, r3, r2
 800fea4:	f000 f976 	bl	8010194 <scalbnf>
 800fea8:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 800feac:	4680      	mov	r8, r0
 800feae:	f7f1 f951 	bl	8001154 <__aeabi_fcmpge>
 800feb2:	b1f8      	cbz	r0, 800fef4 <__kernel_rem_pio2f+0x390>
 800feb4:	f04f 516e 	mov.w	r1, #998244352	@ 0x3b800000
 800feb8:	4640      	mov	r0, r8
 800feba:	f7f0 ff99 	bl	8000df0 <__aeabi_fmul>
 800febe:	f7f1 f95d 	bl	800117c <__aeabi_f2iz>
 800fec2:	f7f0 ff41 	bl	8000d48 <__aeabi_i2f>
 800fec6:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 800feca:	4681      	mov	r9, r0
 800fecc:	f7f0 ff90 	bl	8000df0 <__aeabi_fmul>
 800fed0:	4601      	mov	r1, r0
 800fed2:	4640      	mov	r0, r8
 800fed4:	f7f0 fe82 	bl	8000bdc <__aeabi_fsub>
 800fed8:	f7f1 f950 	bl	800117c <__aeabi_f2iz>
 800fedc:	ab0a      	add	r3, sp, #40	@ 0x28
 800fede:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800fee2:	4648      	mov	r0, r9
 800fee4:	3401      	adds	r4, #1
 800fee6:	3708      	adds	r7, #8
 800fee8:	f7f1 f948 	bl	800117c <__aeabi_f2iz>
 800feec:	ab0a      	add	r3, sp, #40	@ 0x28
 800feee:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800fef2:	e751      	b.n	800fd98 <__kernel_rem_pio2f+0x234>
 800fef4:	4640      	mov	r0, r8
 800fef6:	e7f7      	b.n	800fee8 <__kernel_rem_pio2f+0x384>
 800fef8:	ab0a      	add	r3, sp, #40	@ 0x28
 800fefa:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800fefe:	f7f0 ff23 	bl	8000d48 <__aeabi_i2f>
 800ff02:	4639      	mov	r1, r7
 800ff04:	f7f0 ff74 	bl	8000df0 <__aeabi_fmul>
 800ff08:	4649      	mov	r1, r9
 800ff0a:	f848 002a 	str.w	r0, [r8, sl, lsl #2]
 800ff0e:	4638      	mov	r0, r7
 800ff10:	f7f0 ff6e 	bl	8000df0 <__aeabi_fmul>
 800ff14:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ff18:	4607      	mov	r7, r0
 800ff1a:	e748      	b.n	800fdae <__kernel_rem_pio2f+0x24a>
 800ff1c:	f853 0b04 	ldr.w	r0, [r3], #4
 800ff20:	f85b 1b04 	ldr.w	r1, [fp], #4
 800ff24:	9203      	str	r2, [sp, #12]
 800ff26:	9302      	str	r3, [sp, #8]
 800ff28:	f7f0 ff62 	bl	8000df0 <__aeabi_fmul>
 800ff2c:	4601      	mov	r1, r0
 800ff2e:	4640      	mov	r0, r8
 800ff30:	f7f0 fe56 	bl	8000be0 <__addsf3>
 800ff34:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800ff38:	4680      	mov	r8, r0
 800ff3a:	f10a 0a01 	add.w	sl, sl, #1
 800ff3e:	9901      	ldr	r1, [sp, #4]
 800ff40:	458a      	cmp	sl, r1
 800ff42:	dc01      	bgt.n	800ff48 <__kernel_rem_pio2f+0x3e4>
 800ff44:	45d1      	cmp	r9, sl
 800ff46:	dae9      	bge.n	800ff1c <__kernel_rem_pio2f+0x3b8>
 800ff48:	ab5a      	add	r3, sp, #360	@ 0x168
 800ff4a:	eb03 0989 	add.w	r9, r3, r9, lsl #2
 800ff4e:	f849 8ca0 	str.w	r8, [r9, #-160]
 800ff52:	3f01      	subs	r7, #1
 800ff54:	e731      	b.n	800fdba <__kernel_rem_pio2f+0x256>
 800ff56:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 800ff58:	2b02      	cmp	r3, #2
 800ff5a:	dc07      	bgt.n	800ff6c <__kernel_rem_pio2f+0x408>
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	dc4e      	bgt.n	800fffe <__kernel_rem_pio2f+0x49a>
 800ff60:	d02e      	beq.n	800ffc0 <__kernel_rem_pio2f+0x45c>
 800ff62:	f006 0007 	and.w	r0, r6, #7
 800ff66:	b05b      	add	sp, #364	@ 0x16c
 800ff68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff6c:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 800ff6e:	2b03      	cmp	r3, #3
 800ff70:	d1f7      	bne.n	800ff62 <__kernel_rem_pio2f+0x3fe>
 800ff72:	f10d 0bc8 	add.w	fp, sp, #200	@ 0xc8
 800ff76:	eb0b 0784 	add.w	r7, fp, r4, lsl #2
 800ff7a:	46b8      	mov	r8, r7
 800ff7c:	46a2      	mov	sl, r4
 800ff7e:	f1ba 0f00 	cmp.w	sl, #0
 800ff82:	dc49      	bgt.n	8010018 <__kernel_rem_pio2f+0x4b4>
 800ff84:	46a1      	mov	r9, r4
 800ff86:	f1b9 0f01 	cmp.w	r9, #1
 800ff8a:	dc60      	bgt.n	801004e <__kernel_rem_pio2f+0x4ea>
 800ff8c:	2000      	movs	r0, #0
 800ff8e:	2c01      	cmp	r4, #1
 800ff90:	dc76      	bgt.n	8010080 <__kernel_rem_pio2f+0x51c>
 800ff92:	9a32      	ldr	r2, [sp, #200]	@ 0xc8
 800ff94:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
 800ff96:	2d00      	cmp	r5, #0
 800ff98:	d178      	bne.n	801008c <__kernel_rem_pio2f+0x528>
 800ff9a:	9900      	ldr	r1, [sp, #0]
 800ff9c:	600a      	str	r2, [r1, #0]
 800ff9e:	460a      	mov	r2, r1
 800ffa0:	604b      	str	r3, [r1, #4]
 800ffa2:	6090      	str	r0, [r2, #8]
 800ffa4:	e7dd      	b.n	800ff62 <__kernel_rem_pio2f+0x3fe>
 800ffa6:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 800ffaa:	f7f0 fe19 	bl	8000be0 <__addsf3>
 800ffae:	3c01      	subs	r4, #1
 800ffb0:	2c00      	cmp	r4, #0
 800ffb2:	daf8      	bge.n	800ffa6 <__kernel_rem_pio2f+0x442>
 800ffb4:	b10d      	cbz	r5, 800ffba <__kernel_rem_pio2f+0x456>
 800ffb6:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800ffba:	9b00      	ldr	r3, [sp, #0]
 800ffbc:	6018      	str	r0, [r3, #0]
 800ffbe:	e7d0      	b.n	800ff62 <__kernel_rem_pio2f+0x3fe>
 800ffc0:	2000      	movs	r0, #0
 800ffc2:	af32      	add	r7, sp, #200	@ 0xc8
 800ffc4:	e7f4      	b.n	800ffb0 <__kernel_rem_pio2f+0x44c>
 800ffc6:	f857 1028 	ldr.w	r1, [r7, r8, lsl #2]
 800ffca:	f7f0 fe09 	bl	8000be0 <__addsf3>
 800ffce:	f108 38ff 	add.w	r8, r8, #4294967295
 800ffd2:	f1b8 0f00 	cmp.w	r8, #0
 800ffd6:	daf6      	bge.n	800ffc6 <__kernel_rem_pio2f+0x462>
 800ffd8:	b1ad      	cbz	r5, 8010006 <__kernel_rem_pio2f+0x4a2>
 800ffda:	f100 4300 	add.w	r3, r0, #2147483648	@ 0x80000000
 800ffde:	9a00      	ldr	r2, [sp, #0]
 800ffe0:	4601      	mov	r1, r0
 800ffe2:	6013      	str	r3, [r2, #0]
 800ffe4:	9832      	ldr	r0, [sp, #200]	@ 0xc8
 800ffe6:	f7f0 fdf9 	bl	8000bdc <__aeabi_fsub>
 800ffea:	f04f 0801 	mov.w	r8, #1
 800ffee:	4544      	cmp	r4, r8
 800fff0:	da0b      	bge.n	801000a <__kernel_rem_pio2f+0x4a6>
 800fff2:	b10d      	cbz	r5, 800fff8 <__kernel_rem_pio2f+0x494>
 800fff4:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800fff8:	9b00      	ldr	r3, [sp, #0]
 800fffa:	6058      	str	r0, [r3, #4]
 800fffc:	e7b1      	b.n	800ff62 <__kernel_rem_pio2f+0x3fe>
 800fffe:	46a0      	mov	r8, r4
 8010000:	2000      	movs	r0, #0
 8010002:	af32      	add	r7, sp, #200	@ 0xc8
 8010004:	e7e5      	b.n	800ffd2 <__kernel_rem_pio2f+0x46e>
 8010006:	4603      	mov	r3, r0
 8010008:	e7e9      	b.n	800ffde <__kernel_rem_pio2f+0x47a>
 801000a:	f857 1f04 	ldr.w	r1, [r7, #4]!
 801000e:	f7f0 fde7 	bl	8000be0 <__addsf3>
 8010012:	f108 0801 	add.w	r8, r8, #1
 8010016:	e7ea      	b.n	800ffee <__kernel_rem_pio2f+0x48a>
 8010018:	f8d8 3000 	ldr.w	r3, [r8]
 801001c:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8010020:	4619      	mov	r1, r3
 8010022:	4610      	mov	r0, r2
 8010024:	9302      	str	r3, [sp, #8]
 8010026:	9201      	str	r2, [sp, #4]
 8010028:	f7f0 fdda 	bl	8000be0 <__addsf3>
 801002c:	9a01      	ldr	r2, [sp, #4]
 801002e:	4601      	mov	r1, r0
 8010030:	4681      	mov	r9, r0
 8010032:	4610      	mov	r0, r2
 8010034:	f7f0 fdd2 	bl	8000bdc <__aeabi_fsub>
 8010038:	9b02      	ldr	r3, [sp, #8]
 801003a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801003e:	4619      	mov	r1, r3
 8010040:	f7f0 fdce 	bl	8000be0 <__addsf3>
 8010044:	f848 0904 	str.w	r0, [r8], #-4
 8010048:	f8c8 9000 	str.w	r9, [r8]
 801004c:	e797      	b.n	800ff7e <__kernel_rem_pio2f+0x41a>
 801004e:	f857 3c04 	ldr.w	r3, [r7, #-4]
 8010052:	f8d7 a000 	ldr.w	sl, [r7]
 8010056:	4618      	mov	r0, r3
 8010058:	4651      	mov	r1, sl
 801005a:	9301      	str	r3, [sp, #4]
 801005c:	f7f0 fdc0 	bl	8000be0 <__addsf3>
 8010060:	9b01      	ldr	r3, [sp, #4]
 8010062:	4601      	mov	r1, r0
 8010064:	4680      	mov	r8, r0
 8010066:	4618      	mov	r0, r3
 8010068:	f7f0 fdb8 	bl	8000bdc <__aeabi_fsub>
 801006c:	4651      	mov	r1, sl
 801006e:	f7f0 fdb7 	bl	8000be0 <__addsf3>
 8010072:	f847 0904 	str.w	r0, [r7], #-4
 8010076:	f109 39ff 	add.w	r9, r9, #4294967295
 801007a:	f8c7 8000 	str.w	r8, [r7]
 801007e:	e782      	b.n	800ff86 <__kernel_rem_pio2f+0x422>
 8010080:	f85b 1024 	ldr.w	r1, [fp, r4, lsl #2]
 8010084:	f7f0 fdac 	bl	8000be0 <__addsf3>
 8010088:	3c01      	subs	r4, #1
 801008a:	e780      	b.n	800ff8e <__kernel_rem_pio2f+0x42a>
 801008c:	9900      	ldr	r1, [sp, #0]
 801008e:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
 8010092:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8010096:	600a      	str	r2, [r1, #0]
 8010098:	604b      	str	r3, [r1, #4]
 801009a:	460a      	mov	r2, r1
 801009c:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 80100a0:	e77f      	b.n	800ffa2 <__kernel_rem_pio2f+0x43e>
 80100a2:	bf00      	nop
 80100a4:	0000      	movs	r0, r0
	...

080100a8 <scalbn>:
 80100a8:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 80100ac:	4616      	mov	r6, r2
 80100ae:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80100b2:	4683      	mov	fp, r0
 80100b4:	468c      	mov	ip, r1
 80100b6:	460b      	mov	r3, r1
 80100b8:	b982      	cbnz	r2, 80100dc <scalbn+0x34>
 80100ba:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80100be:	4303      	orrs	r3, r0
 80100c0:	d039      	beq.n	8010136 <scalbn+0x8e>
 80100c2:	4b2f      	ldr	r3, [pc, #188]	@ (8010180 <scalbn+0xd8>)
 80100c4:	2200      	movs	r2, #0
 80100c6:	f7f0 fa73 	bl	80005b0 <__aeabi_dmul>
 80100ca:	4b2e      	ldr	r3, [pc, #184]	@ (8010184 <scalbn+0xdc>)
 80100cc:	4683      	mov	fp, r0
 80100ce:	429e      	cmp	r6, r3
 80100d0:	468c      	mov	ip, r1
 80100d2:	da0d      	bge.n	80100f0 <scalbn+0x48>
 80100d4:	a326      	add	r3, pc, #152	@ (adr r3, 8010170 <scalbn+0xc8>)
 80100d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100da:	e01b      	b.n	8010114 <scalbn+0x6c>
 80100dc:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 80100e0:	42ba      	cmp	r2, r7
 80100e2:	d109      	bne.n	80100f8 <scalbn+0x50>
 80100e4:	4602      	mov	r2, r0
 80100e6:	f7f0 f8ad 	bl	8000244 <__adddf3>
 80100ea:	4683      	mov	fp, r0
 80100ec:	468c      	mov	ip, r1
 80100ee:	e022      	b.n	8010136 <scalbn+0x8e>
 80100f0:	460b      	mov	r3, r1
 80100f2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80100f6:	3a36      	subs	r2, #54	@ 0x36
 80100f8:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80100fc:	428e      	cmp	r6, r1
 80100fe:	dd0c      	ble.n	801011a <scalbn+0x72>
 8010100:	a31d      	add	r3, pc, #116	@ (adr r3, 8010178 <scalbn+0xd0>)
 8010102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010106:	461c      	mov	r4, r3
 8010108:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 801010c:	f361 74df 	bfi	r4, r1, #31, #1
 8010110:	4621      	mov	r1, r4
 8010112:	481d      	ldr	r0, [pc, #116]	@ (8010188 <scalbn+0xe0>)
 8010114:	f7f0 fa4c 	bl	80005b0 <__aeabi_dmul>
 8010118:	e7e7      	b.n	80100ea <scalbn+0x42>
 801011a:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 801011e:	4432      	add	r2, r6
 8010120:	428a      	cmp	r2, r1
 8010122:	dced      	bgt.n	8010100 <scalbn+0x58>
 8010124:	2a00      	cmp	r2, #0
 8010126:	dd0a      	ble.n	801013e <scalbn+0x96>
 8010128:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801012c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8010130:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010134:	46ac      	mov	ip, r5
 8010136:	4658      	mov	r0, fp
 8010138:	4661      	mov	r1, ip
 801013a:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 801013e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8010142:	da09      	bge.n	8010158 <scalbn+0xb0>
 8010144:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 8010148:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 801014c:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 8010150:	480e      	ldr	r0, [pc, #56]	@ (801018c <scalbn+0xe4>)
 8010152:	f041 011f 	orr.w	r1, r1, #31
 8010156:	e7bd      	b.n	80100d4 <scalbn+0x2c>
 8010158:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801015c:	3236      	adds	r2, #54	@ 0x36
 801015e:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8010162:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010166:	4658      	mov	r0, fp
 8010168:	4629      	mov	r1, r5
 801016a:	2200      	movs	r2, #0
 801016c:	4b08      	ldr	r3, [pc, #32]	@ (8010190 <scalbn+0xe8>)
 801016e:	e7d1      	b.n	8010114 <scalbn+0x6c>
 8010170:	c2f8f359 	.word	0xc2f8f359
 8010174:	01a56e1f 	.word	0x01a56e1f
 8010178:	8800759c 	.word	0x8800759c
 801017c:	7e37e43c 	.word	0x7e37e43c
 8010180:	43500000 	.word	0x43500000
 8010184:	ffff3cb0 	.word	0xffff3cb0
 8010188:	8800759c 	.word	0x8800759c
 801018c:	c2f8f359 	.word	0xc2f8f359
 8010190:	3c900000 	.word	0x3c900000

08010194 <scalbnf>:
 8010194:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8010198:	b538      	push	{r3, r4, r5, lr}
 801019a:	4603      	mov	r3, r0
 801019c:	460d      	mov	r5, r1
 801019e:	4604      	mov	r4, r0
 80101a0:	d02e      	beq.n	8010200 <scalbnf+0x6c>
 80101a2:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80101a6:	d304      	bcc.n	80101b2 <scalbnf+0x1e>
 80101a8:	4601      	mov	r1, r0
 80101aa:	f7f0 fd19 	bl	8000be0 <__addsf3>
 80101ae:	4603      	mov	r3, r0
 80101b0:	e026      	b.n	8010200 <scalbnf+0x6c>
 80101b2:	f010 4fff 	tst.w	r0, #2139095040	@ 0x7f800000
 80101b6:	d118      	bne.n	80101ea <scalbnf+0x56>
 80101b8:	f04f 4198 	mov.w	r1, #1275068416	@ 0x4c000000
 80101bc:	f7f0 fe18 	bl	8000df0 <__aeabi_fmul>
 80101c0:	4a17      	ldr	r2, [pc, #92]	@ (8010220 <scalbnf+0x8c>)
 80101c2:	4603      	mov	r3, r0
 80101c4:	4295      	cmp	r5, r2
 80101c6:	db0c      	blt.n	80101e2 <scalbnf+0x4e>
 80101c8:	4604      	mov	r4, r0
 80101ca:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 80101ce:	3a19      	subs	r2, #25
 80101d0:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80101d4:	428d      	cmp	r5, r1
 80101d6:	dd0a      	ble.n	80101ee <scalbnf+0x5a>
 80101d8:	4912      	ldr	r1, [pc, #72]	@ (8010224 <scalbnf+0x90>)
 80101da:	4618      	mov	r0, r3
 80101dc:	f361 001e 	bfi	r0, r1, #0, #31
 80101e0:	e000      	b.n	80101e4 <scalbnf+0x50>
 80101e2:	4911      	ldr	r1, [pc, #68]	@ (8010228 <scalbnf+0x94>)
 80101e4:	f7f0 fe04 	bl	8000df0 <__aeabi_fmul>
 80101e8:	e7e1      	b.n	80101ae <scalbnf+0x1a>
 80101ea:	0dd2      	lsrs	r2, r2, #23
 80101ec:	e7f0      	b.n	80101d0 <scalbnf+0x3c>
 80101ee:	1951      	adds	r1, r2, r5
 80101f0:	29fe      	cmp	r1, #254	@ 0xfe
 80101f2:	dcf1      	bgt.n	80101d8 <scalbnf+0x44>
 80101f4:	2900      	cmp	r1, #0
 80101f6:	dd05      	ble.n	8010204 <scalbnf+0x70>
 80101f8:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 80101fc:	ea44 53c1 	orr.w	r3, r4, r1, lsl #23
 8010200:	4618      	mov	r0, r3
 8010202:	bd38      	pop	{r3, r4, r5, pc}
 8010204:	f111 0f16 	cmn.w	r1, #22
 8010208:	da01      	bge.n	801020e <scalbnf+0x7a>
 801020a:	4907      	ldr	r1, [pc, #28]	@ (8010228 <scalbnf+0x94>)
 801020c:	e7e5      	b.n	80101da <scalbnf+0x46>
 801020e:	f101 0019 	add.w	r0, r1, #25
 8010212:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 8010216:	f04f 514c 	mov.w	r1, #855638016	@ 0x33000000
 801021a:	ea44 50c0 	orr.w	r0, r4, r0, lsl #23
 801021e:	e7e1      	b.n	80101e4 <scalbnf+0x50>
 8010220:	ffff3cb0 	.word	0xffff3cb0
 8010224:	7149f2ca 	.word	0x7149f2ca
 8010228:	0da24260 	.word	0x0da24260
 801022c:	00000000 	.word	0x00000000

08010230 <floor>:
 8010230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010234:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8010238:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 801023c:	2e13      	cmp	r6, #19
 801023e:	4602      	mov	r2, r0
 8010240:	460b      	mov	r3, r1
 8010242:	460c      	mov	r4, r1
 8010244:	4605      	mov	r5, r0
 8010246:	4680      	mov	r8, r0
 8010248:	dc35      	bgt.n	80102b6 <floor+0x86>
 801024a:	2e00      	cmp	r6, #0
 801024c:	da17      	bge.n	801027e <floor+0x4e>
 801024e:	a334      	add	r3, pc, #208	@ (adr r3, 8010320 <floor+0xf0>)
 8010250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010254:	f7ef fff6 	bl	8000244 <__adddf3>
 8010258:	2200      	movs	r2, #0
 801025a:	2300      	movs	r3, #0
 801025c:	f7f0 fc38 	bl	8000ad0 <__aeabi_dcmpgt>
 8010260:	b150      	cbz	r0, 8010278 <floor+0x48>
 8010262:	2c00      	cmp	r4, #0
 8010264:	da57      	bge.n	8010316 <floor+0xe6>
 8010266:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801026a:	432c      	orrs	r4, r5
 801026c:	2500      	movs	r5, #0
 801026e:	42ac      	cmp	r4, r5
 8010270:	4c2d      	ldr	r4, [pc, #180]	@ (8010328 <floor+0xf8>)
 8010272:	bf08      	it	eq
 8010274:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8010278:	4623      	mov	r3, r4
 801027a:	462a      	mov	r2, r5
 801027c:	e024      	b.n	80102c8 <floor+0x98>
 801027e:	4f2b      	ldr	r7, [pc, #172]	@ (801032c <floor+0xfc>)
 8010280:	4137      	asrs	r7, r6
 8010282:	ea01 0c07 	and.w	ip, r1, r7
 8010286:	ea5c 0c00 	orrs.w	ip, ip, r0
 801028a:	d01d      	beq.n	80102c8 <floor+0x98>
 801028c:	a324      	add	r3, pc, #144	@ (adr r3, 8010320 <floor+0xf0>)
 801028e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010292:	f7ef ffd7 	bl	8000244 <__adddf3>
 8010296:	2200      	movs	r2, #0
 8010298:	2300      	movs	r3, #0
 801029a:	f7f0 fc19 	bl	8000ad0 <__aeabi_dcmpgt>
 801029e:	2800      	cmp	r0, #0
 80102a0:	d0ea      	beq.n	8010278 <floor+0x48>
 80102a2:	2c00      	cmp	r4, #0
 80102a4:	bfbe      	ittt	lt
 80102a6:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 80102aa:	4133      	asrlt	r3, r6
 80102ac:	18e4      	addlt	r4, r4, r3
 80102ae:	2500      	movs	r5, #0
 80102b0:	ea24 0407 	bic.w	r4, r4, r7
 80102b4:	e7e0      	b.n	8010278 <floor+0x48>
 80102b6:	2e33      	cmp	r6, #51	@ 0x33
 80102b8:	dd0a      	ble.n	80102d0 <floor+0xa0>
 80102ba:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 80102be:	d103      	bne.n	80102c8 <floor+0x98>
 80102c0:	f7ef ffc0 	bl	8000244 <__adddf3>
 80102c4:	4602      	mov	r2, r0
 80102c6:	460b      	mov	r3, r1
 80102c8:	4610      	mov	r0, r2
 80102ca:	4619      	mov	r1, r3
 80102cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80102d0:	f04f 3cff 	mov.w	ip, #4294967295
 80102d4:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 80102d8:	fa2c f707 	lsr.w	r7, ip, r7
 80102dc:	4207      	tst	r7, r0
 80102de:	d0f3      	beq.n	80102c8 <floor+0x98>
 80102e0:	a30f      	add	r3, pc, #60	@ (adr r3, 8010320 <floor+0xf0>)
 80102e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102e6:	f7ef ffad 	bl	8000244 <__adddf3>
 80102ea:	2200      	movs	r2, #0
 80102ec:	2300      	movs	r3, #0
 80102ee:	f7f0 fbef 	bl	8000ad0 <__aeabi_dcmpgt>
 80102f2:	2800      	cmp	r0, #0
 80102f4:	d0c0      	beq.n	8010278 <floor+0x48>
 80102f6:	2c00      	cmp	r4, #0
 80102f8:	da0a      	bge.n	8010310 <floor+0xe0>
 80102fa:	2e14      	cmp	r6, #20
 80102fc:	d101      	bne.n	8010302 <floor+0xd2>
 80102fe:	3401      	adds	r4, #1
 8010300:	e006      	b.n	8010310 <floor+0xe0>
 8010302:	2301      	movs	r3, #1
 8010304:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8010308:	40b3      	lsls	r3, r6
 801030a:	441d      	add	r5, r3
 801030c:	4545      	cmp	r5, r8
 801030e:	d3f6      	bcc.n	80102fe <floor+0xce>
 8010310:	ea25 0507 	bic.w	r5, r5, r7
 8010314:	e7b0      	b.n	8010278 <floor+0x48>
 8010316:	2500      	movs	r5, #0
 8010318:	462c      	mov	r4, r5
 801031a:	e7ad      	b.n	8010278 <floor+0x48>
 801031c:	f3af 8000 	nop.w
 8010320:	8800759c 	.word	0x8800759c
 8010324:	7e37e43c 	.word	0x7e37e43c
 8010328:	bff00000 	.word	0xbff00000
 801032c:	000fffff 	.word	0x000fffff

08010330 <floorf>:
 8010330:	b570      	push	{r4, r5, r6, lr}
 8010332:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 8010336:	3d7f      	subs	r5, #127	@ 0x7f
 8010338:	2d16      	cmp	r5, #22
 801033a:	4601      	mov	r1, r0
 801033c:	4604      	mov	r4, r0
 801033e:	f020 4600 	bic.w	r6, r0, #2147483648	@ 0x80000000
 8010342:	dc26      	bgt.n	8010392 <floorf+0x62>
 8010344:	2d00      	cmp	r5, #0
 8010346:	da0f      	bge.n	8010368 <floorf+0x38>
 8010348:	4917      	ldr	r1, [pc, #92]	@ (80103a8 <floorf+0x78>)
 801034a:	f7f0 fc49 	bl	8000be0 <__addsf3>
 801034e:	2100      	movs	r1, #0
 8010350:	f7f0 ff0a 	bl	8001168 <__aeabi_fcmpgt>
 8010354:	b130      	cbz	r0, 8010364 <floorf+0x34>
 8010356:	2c00      	cmp	r4, #0
 8010358:	da23      	bge.n	80103a2 <floorf+0x72>
 801035a:	2e00      	cmp	r6, #0
 801035c:	4c13      	ldr	r4, [pc, #76]	@ (80103ac <floorf+0x7c>)
 801035e:	bf08      	it	eq
 8010360:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8010364:	4621      	mov	r1, r4
 8010366:	e01a      	b.n	801039e <floorf+0x6e>
 8010368:	4e11      	ldr	r6, [pc, #68]	@ (80103b0 <floorf+0x80>)
 801036a:	412e      	asrs	r6, r5
 801036c:	4230      	tst	r0, r6
 801036e:	d016      	beq.n	801039e <floorf+0x6e>
 8010370:	490d      	ldr	r1, [pc, #52]	@ (80103a8 <floorf+0x78>)
 8010372:	f7f0 fc35 	bl	8000be0 <__addsf3>
 8010376:	2100      	movs	r1, #0
 8010378:	f7f0 fef6 	bl	8001168 <__aeabi_fcmpgt>
 801037c:	2800      	cmp	r0, #0
 801037e:	d0f1      	beq.n	8010364 <floorf+0x34>
 8010380:	2c00      	cmp	r4, #0
 8010382:	bfbe      	ittt	lt
 8010384:	f44f 0300 	movlt.w	r3, #8388608	@ 0x800000
 8010388:	412b      	asrlt	r3, r5
 801038a:	18e4      	addlt	r4, r4, r3
 801038c:	ea24 0406 	bic.w	r4, r4, r6
 8010390:	e7e8      	b.n	8010364 <floorf+0x34>
 8010392:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 8010396:	d302      	bcc.n	801039e <floorf+0x6e>
 8010398:	f7f0 fc22 	bl	8000be0 <__addsf3>
 801039c:	4601      	mov	r1, r0
 801039e:	4608      	mov	r0, r1
 80103a0:	bd70      	pop	{r4, r5, r6, pc}
 80103a2:	2400      	movs	r4, #0
 80103a4:	e7de      	b.n	8010364 <floorf+0x34>
 80103a6:	bf00      	nop
 80103a8:	7149f2ca 	.word	0x7149f2ca
 80103ac:	bf800000 	.word	0xbf800000
 80103b0:	007fffff 	.word	0x007fffff

080103b4 <abort>:
 80103b4:	2006      	movs	r0, #6
 80103b6:	b508      	push	{r3, lr}
 80103b8:	f000 f93c 	bl	8010634 <raise>
 80103bc:	2001      	movs	r0, #1
 80103be:	f7fa f964 	bl	800a68a <_exit>
	...

080103c4 <calloc>:
 80103c4:	4b02      	ldr	r3, [pc, #8]	@ (80103d0 <calloc+0xc>)
 80103c6:	460a      	mov	r2, r1
 80103c8:	4601      	mov	r1, r0
 80103ca:	6818      	ldr	r0, [r3, #0]
 80103cc:	f000 b802 	b.w	80103d4 <_calloc_r>
 80103d0:	20000040 	.word	0x20000040

080103d4 <_calloc_r>:
 80103d4:	b570      	push	{r4, r5, r6, lr}
 80103d6:	fba1 5402 	umull	r5, r4, r1, r2
 80103da:	b93c      	cbnz	r4, 80103ec <_calloc_r+0x18>
 80103dc:	4629      	mov	r1, r5
 80103de:	f000 f837 	bl	8010450 <_malloc_r>
 80103e2:	4606      	mov	r6, r0
 80103e4:	b928      	cbnz	r0, 80103f2 <_calloc_r+0x1e>
 80103e6:	2600      	movs	r6, #0
 80103e8:	4630      	mov	r0, r6
 80103ea:	bd70      	pop	{r4, r5, r6, pc}
 80103ec:	220c      	movs	r2, #12
 80103ee:	6002      	str	r2, [r0, #0]
 80103f0:	e7f9      	b.n	80103e6 <_calloc_r+0x12>
 80103f2:	462a      	mov	r2, r5
 80103f4:	4621      	mov	r1, r4
 80103f6:	f000 f8ed 	bl	80105d4 <memset>
 80103fa:	e7f5      	b.n	80103e8 <_calloc_r+0x14>

080103fc <malloc>:
 80103fc:	4b02      	ldr	r3, [pc, #8]	@ (8010408 <malloc+0xc>)
 80103fe:	4601      	mov	r1, r0
 8010400:	6818      	ldr	r0, [r3, #0]
 8010402:	f000 b825 	b.w	8010450 <_malloc_r>
 8010406:	bf00      	nop
 8010408:	20000040 	.word	0x20000040

0801040c <sbrk_aligned>:
 801040c:	b570      	push	{r4, r5, r6, lr}
 801040e:	4e0f      	ldr	r6, [pc, #60]	@ (801044c <sbrk_aligned+0x40>)
 8010410:	460c      	mov	r4, r1
 8010412:	6831      	ldr	r1, [r6, #0]
 8010414:	4605      	mov	r5, r0
 8010416:	b911      	cbnz	r1, 801041e <sbrk_aligned+0x12>
 8010418:	f000 f928 	bl	801066c <_sbrk_r>
 801041c:	6030      	str	r0, [r6, #0]
 801041e:	4621      	mov	r1, r4
 8010420:	4628      	mov	r0, r5
 8010422:	f000 f923 	bl	801066c <_sbrk_r>
 8010426:	1c43      	adds	r3, r0, #1
 8010428:	d103      	bne.n	8010432 <sbrk_aligned+0x26>
 801042a:	f04f 34ff 	mov.w	r4, #4294967295
 801042e:	4620      	mov	r0, r4
 8010430:	bd70      	pop	{r4, r5, r6, pc}
 8010432:	1cc4      	adds	r4, r0, #3
 8010434:	f024 0403 	bic.w	r4, r4, #3
 8010438:	42a0      	cmp	r0, r4
 801043a:	d0f8      	beq.n	801042e <sbrk_aligned+0x22>
 801043c:	1a21      	subs	r1, r4, r0
 801043e:	4628      	mov	r0, r5
 8010440:	f000 f914 	bl	801066c <_sbrk_r>
 8010444:	3001      	adds	r0, #1
 8010446:	d1f2      	bne.n	801042e <sbrk_aligned+0x22>
 8010448:	e7ef      	b.n	801042a <sbrk_aligned+0x1e>
 801044a:	bf00      	nop
 801044c:	20008a28 	.word	0x20008a28

08010450 <_malloc_r>:
 8010450:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010454:	1ccd      	adds	r5, r1, #3
 8010456:	f025 0503 	bic.w	r5, r5, #3
 801045a:	3508      	adds	r5, #8
 801045c:	2d0c      	cmp	r5, #12
 801045e:	bf38      	it	cc
 8010460:	250c      	movcc	r5, #12
 8010462:	2d00      	cmp	r5, #0
 8010464:	4606      	mov	r6, r0
 8010466:	db01      	blt.n	801046c <_malloc_r+0x1c>
 8010468:	42a9      	cmp	r1, r5
 801046a:	d904      	bls.n	8010476 <_malloc_r+0x26>
 801046c:	230c      	movs	r3, #12
 801046e:	6033      	str	r3, [r6, #0]
 8010470:	2000      	movs	r0, #0
 8010472:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010476:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801054c <_malloc_r+0xfc>
 801047a:	f000 f869 	bl	8010550 <__malloc_lock>
 801047e:	f8d8 3000 	ldr.w	r3, [r8]
 8010482:	461c      	mov	r4, r3
 8010484:	bb44      	cbnz	r4, 80104d8 <_malloc_r+0x88>
 8010486:	4629      	mov	r1, r5
 8010488:	4630      	mov	r0, r6
 801048a:	f7ff ffbf 	bl	801040c <sbrk_aligned>
 801048e:	1c43      	adds	r3, r0, #1
 8010490:	4604      	mov	r4, r0
 8010492:	d158      	bne.n	8010546 <_malloc_r+0xf6>
 8010494:	f8d8 4000 	ldr.w	r4, [r8]
 8010498:	4627      	mov	r7, r4
 801049a:	2f00      	cmp	r7, #0
 801049c:	d143      	bne.n	8010526 <_malloc_r+0xd6>
 801049e:	2c00      	cmp	r4, #0
 80104a0:	d04b      	beq.n	801053a <_malloc_r+0xea>
 80104a2:	6823      	ldr	r3, [r4, #0]
 80104a4:	4639      	mov	r1, r7
 80104a6:	4630      	mov	r0, r6
 80104a8:	eb04 0903 	add.w	r9, r4, r3
 80104ac:	f000 f8de 	bl	801066c <_sbrk_r>
 80104b0:	4581      	cmp	r9, r0
 80104b2:	d142      	bne.n	801053a <_malloc_r+0xea>
 80104b4:	6821      	ldr	r1, [r4, #0]
 80104b6:	4630      	mov	r0, r6
 80104b8:	1a6d      	subs	r5, r5, r1
 80104ba:	4629      	mov	r1, r5
 80104bc:	f7ff ffa6 	bl	801040c <sbrk_aligned>
 80104c0:	3001      	adds	r0, #1
 80104c2:	d03a      	beq.n	801053a <_malloc_r+0xea>
 80104c4:	6823      	ldr	r3, [r4, #0]
 80104c6:	442b      	add	r3, r5
 80104c8:	6023      	str	r3, [r4, #0]
 80104ca:	f8d8 3000 	ldr.w	r3, [r8]
 80104ce:	685a      	ldr	r2, [r3, #4]
 80104d0:	bb62      	cbnz	r2, 801052c <_malloc_r+0xdc>
 80104d2:	f8c8 7000 	str.w	r7, [r8]
 80104d6:	e00f      	b.n	80104f8 <_malloc_r+0xa8>
 80104d8:	6822      	ldr	r2, [r4, #0]
 80104da:	1b52      	subs	r2, r2, r5
 80104dc:	d420      	bmi.n	8010520 <_malloc_r+0xd0>
 80104de:	2a0b      	cmp	r2, #11
 80104e0:	d917      	bls.n	8010512 <_malloc_r+0xc2>
 80104e2:	1961      	adds	r1, r4, r5
 80104e4:	42a3      	cmp	r3, r4
 80104e6:	6025      	str	r5, [r4, #0]
 80104e8:	bf18      	it	ne
 80104ea:	6059      	strne	r1, [r3, #4]
 80104ec:	6863      	ldr	r3, [r4, #4]
 80104ee:	bf08      	it	eq
 80104f0:	f8c8 1000 	streq.w	r1, [r8]
 80104f4:	5162      	str	r2, [r4, r5]
 80104f6:	604b      	str	r3, [r1, #4]
 80104f8:	4630      	mov	r0, r6
 80104fa:	f000 f82f 	bl	801055c <__malloc_unlock>
 80104fe:	f104 000b 	add.w	r0, r4, #11
 8010502:	1d23      	adds	r3, r4, #4
 8010504:	f020 0007 	bic.w	r0, r0, #7
 8010508:	1ac2      	subs	r2, r0, r3
 801050a:	bf1c      	itt	ne
 801050c:	1a1b      	subne	r3, r3, r0
 801050e:	50a3      	strne	r3, [r4, r2]
 8010510:	e7af      	b.n	8010472 <_malloc_r+0x22>
 8010512:	6862      	ldr	r2, [r4, #4]
 8010514:	42a3      	cmp	r3, r4
 8010516:	bf0c      	ite	eq
 8010518:	f8c8 2000 	streq.w	r2, [r8]
 801051c:	605a      	strne	r2, [r3, #4]
 801051e:	e7eb      	b.n	80104f8 <_malloc_r+0xa8>
 8010520:	4623      	mov	r3, r4
 8010522:	6864      	ldr	r4, [r4, #4]
 8010524:	e7ae      	b.n	8010484 <_malloc_r+0x34>
 8010526:	463c      	mov	r4, r7
 8010528:	687f      	ldr	r7, [r7, #4]
 801052a:	e7b6      	b.n	801049a <_malloc_r+0x4a>
 801052c:	461a      	mov	r2, r3
 801052e:	685b      	ldr	r3, [r3, #4]
 8010530:	42a3      	cmp	r3, r4
 8010532:	d1fb      	bne.n	801052c <_malloc_r+0xdc>
 8010534:	2300      	movs	r3, #0
 8010536:	6053      	str	r3, [r2, #4]
 8010538:	e7de      	b.n	80104f8 <_malloc_r+0xa8>
 801053a:	230c      	movs	r3, #12
 801053c:	4630      	mov	r0, r6
 801053e:	6033      	str	r3, [r6, #0]
 8010540:	f000 f80c 	bl	801055c <__malloc_unlock>
 8010544:	e794      	b.n	8010470 <_malloc_r+0x20>
 8010546:	6005      	str	r5, [r0, #0]
 8010548:	e7d6      	b.n	80104f8 <_malloc_r+0xa8>
 801054a:	bf00      	nop
 801054c:	20008a2c 	.word	0x20008a2c

08010550 <__malloc_lock>:
 8010550:	4801      	ldr	r0, [pc, #4]	@ (8010558 <__malloc_lock+0x8>)
 8010552:	f000 b8c5 	b.w	80106e0 <__retarget_lock_acquire_recursive>
 8010556:	bf00      	nop
 8010558:	20008b6c 	.word	0x20008b6c

0801055c <__malloc_unlock>:
 801055c:	4801      	ldr	r0, [pc, #4]	@ (8010564 <__malloc_unlock+0x8>)
 801055e:	f000 b8c0 	b.w	80106e2 <__retarget_lock_release_recursive>
 8010562:	bf00      	nop
 8010564:	20008b6c 	.word	0x20008b6c

08010568 <realloc>:
 8010568:	4b02      	ldr	r3, [pc, #8]	@ (8010574 <realloc+0xc>)
 801056a:	460a      	mov	r2, r1
 801056c:	4601      	mov	r1, r0
 801056e:	6818      	ldr	r0, [r3, #0]
 8010570:	f000 b802 	b.w	8010578 <_realloc_r>
 8010574:	20000040 	.word	0x20000040

08010578 <_realloc_r>:
 8010578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801057c:	4680      	mov	r8, r0
 801057e:	4615      	mov	r5, r2
 8010580:	460c      	mov	r4, r1
 8010582:	b921      	cbnz	r1, 801058e <_realloc_r+0x16>
 8010584:	4611      	mov	r1, r2
 8010586:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801058a:	f7ff bf61 	b.w	8010450 <_malloc_r>
 801058e:	b92a      	cbnz	r2, 801059c <_realloc_r+0x24>
 8010590:	f000 f8b6 	bl	8010700 <_free_r>
 8010594:	2400      	movs	r4, #0
 8010596:	4620      	mov	r0, r4
 8010598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801059c:	f000 f8f8 	bl	8010790 <_malloc_usable_size_r>
 80105a0:	4285      	cmp	r5, r0
 80105a2:	4606      	mov	r6, r0
 80105a4:	d802      	bhi.n	80105ac <_realloc_r+0x34>
 80105a6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80105aa:	d8f4      	bhi.n	8010596 <_realloc_r+0x1e>
 80105ac:	4629      	mov	r1, r5
 80105ae:	4640      	mov	r0, r8
 80105b0:	f7ff ff4e 	bl	8010450 <_malloc_r>
 80105b4:	4607      	mov	r7, r0
 80105b6:	2800      	cmp	r0, #0
 80105b8:	d0ec      	beq.n	8010594 <_realloc_r+0x1c>
 80105ba:	42b5      	cmp	r5, r6
 80105bc:	462a      	mov	r2, r5
 80105be:	4621      	mov	r1, r4
 80105c0:	bf28      	it	cs
 80105c2:	4632      	movcs	r2, r6
 80105c4:	f000 f88e 	bl	80106e4 <memcpy>
 80105c8:	4621      	mov	r1, r4
 80105ca:	4640      	mov	r0, r8
 80105cc:	f000 f898 	bl	8010700 <_free_r>
 80105d0:	463c      	mov	r4, r7
 80105d2:	e7e0      	b.n	8010596 <_realloc_r+0x1e>

080105d4 <memset>:
 80105d4:	4603      	mov	r3, r0
 80105d6:	4402      	add	r2, r0
 80105d8:	4293      	cmp	r3, r2
 80105da:	d100      	bne.n	80105de <memset+0xa>
 80105dc:	4770      	bx	lr
 80105de:	f803 1b01 	strb.w	r1, [r3], #1
 80105e2:	e7f9      	b.n	80105d8 <memset+0x4>

080105e4 <_raise_r>:
 80105e4:	291f      	cmp	r1, #31
 80105e6:	b538      	push	{r3, r4, r5, lr}
 80105e8:	4605      	mov	r5, r0
 80105ea:	460c      	mov	r4, r1
 80105ec:	d904      	bls.n	80105f8 <_raise_r+0x14>
 80105ee:	2316      	movs	r3, #22
 80105f0:	6003      	str	r3, [r0, #0]
 80105f2:	f04f 30ff 	mov.w	r0, #4294967295
 80105f6:	bd38      	pop	{r3, r4, r5, pc}
 80105f8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80105fa:	b112      	cbz	r2, 8010602 <_raise_r+0x1e>
 80105fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010600:	b94b      	cbnz	r3, 8010616 <_raise_r+0x32>
 8010602:	4628      	mov	r0, r5
 8010604:	f000 f830 	bl	8010668 <_getpid_r>
 8010608:	4622      	mov	r2, r4
 801060a:	4601      	mov	r1, r0
 801060c:	4628      	mov	r0, r5
 801060e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010612:	f000 b817 	b.w	8010644 <_kill_r>
 8010616:	2b01      	cmp	r3, #1
 8010618:	d00a      	beq.n	8010630 <_raise_r+0x4c>
 801061a:	1c59      	adds	r1, r3, #1
 801061c:	d103      	bne.n	8010626 <_raise_r+0x42>
 801061e:	2316      	movs	r3, #22
 8010620:	6003      	str	r3, [r0, #0]
 8010622:	2001      	movs	r0, #1
 8010624:	e7e7      	b.n	80105f6 <_raise_r+0x12>
 8010626:	2100      	movs	r1, #0
 8010628:	4620      	mov	r0, r4
 801062a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801062e:	4798      	blx	r3
 8010630:	2000      	movs	r0, #0
 8010632:	e7e0      	b.n	80105f6 <_raise_r+0x12>

08010634 <raise>:
 8010634:	4b02      	ldr	r3, [pc, #8]	@ (8010640 <raise+0xc>)
 8010636:	4601      	mov	r1, r0
 8010638:	6818      	ldr	r0, [r3, #0]
 801063a:	f7ff bfd3 	b.w	80105e4 <_raise_r>
 801063e:	bf00      	nop
 8010640:	20000040 	.word	0x20000040

08010644 <_kill_r>:
 8010644:	b538      	push	{r3, r4, r5, lr}
 8010646:	2300      	movs	r3, #0
 8010648:	4d06      	ldr	r5, [pc, #24]	@ (8010664 <_kill_r+0x20>)
 801064a:	4604      	mov	r4, r0
 801064c:	4608      	mov	r0, r1
 801064e:	4611      	mov	r1, r2
 8010650:	602b      	str	r3, [r5, #0]
 8010652:	f7fa f80a 	bl	800a66a <_kill>
 8010656:	1c43      	adds	r3, r0, #1
 8010658:	d102      	bne.n	8010660 <_kill_r+0x1c>
 801065a:	682b      	ldr	r3, [r5, #0]
 801065c:	b103      	cbz	r3, 8010660 <_kill_r+0x1c>
 801065e:	6023      	str	r3, [r4, #0]
 8010660:	bd38      	pop	{r3, r4, r5, pc}
 8010662:	bf00      	nop
 8010664:	20008b68 	.word	0x20008b68

08010668 <_getpid_r>:
 8010668:	f7f9 bff8 	b.w	800a65c <_getpid>

0801066c <_sbrk_r>:
 801066c:	b538      	push	{r3, r4, r5, lr}
 801066e:	2300      	movs	r3, #0
 8010670:	4d05      	ldr	r5, [pc, #20]	@ (8010688 <_sbrk_r+0x1c>)
 8010672:	4604      	mov	r4, r0
 8010674:	4608      	mov	r0, r1
 8010676:	602b      	str	r3, [r5, #0]
 8010678:	f7fa f812 	bl	800a6a0 <_sbrk>
 801067c:	1c43      	adds	r3, r0, #1
 801067e:	d102      	bne.n	8010686 <_sbrk_r+0x1a>
 8010680:	682b      	ldr	r3, [r5, #0]
 8010682:	b103      	cbz	r3, 8010686 <_sbrk_r+0x1a>
 8010684:	6023      	str	r3, [r4, #0]
 8010686:	bd38      	pop	{r3, r4, r5, pc}
 8010688:	20008b68 	.word	0x20008b68

0801068c <__errno>:
 801068c:	4b01      	ldr	r3, [pc, #4]	@ (8010694 <__errno+0x8>)
 801068e:	6818      	ldr	r0, [r3, #0]
 8010690:	4770      	bx	lr
 8010692:	bf00      	nop
 8010694:	20000040 	.word	0x20000040

08010698 <__libc_init_array>:
 8010698:	b570      	push	{r4, r5, r6, lr}
 801069a:	2600      	movs	r6, #0
 801069c:	4d0c      	ldr	r5, [pc, #48]	@ (80106d0 <__libc_init_array+0x38>)
 801069e:	4c0d      	ldr	r4, [pc, #52]	@ (80106d4 <__libc_init_array+0x3c>)
 80106a0:	1b64      	subs	r4, r4, r5
 80106a2:	10a4      	asrs	r4, r4, #2
 80106a4:	42a6      	cmp	r6, r4
 80106a6:	d109      	bne.n	80106bc <__libc_init_array+0x24>
 80106a8:	f000 f87a 	bl	80107a0 <_init>
 80106ac:	2600      	movs	r6, #0
 80106ae:	4d0a      	ldr	r5, [pc, #40]	@ (80106d8 <__libc_init_array+0x40>)
 80106b0:	4c0a      	ldr	r4, [pc, #40]	@ (80106dc <__libc_init_array+0x44>)
 80106b2:	1b64      	subs	r4, r4, r5
 80106b4:	10a4      	asrs	r4, r4, #2
 80106b6:	42a6      	cmp	r6, r4
 80106b8:	d105      	bne.n	80106c6 <__libc_init_array+0x2e>
 80106ba:	bd70      	pop	{r4, r5, r6, pc}
 80106bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80106c0:	4798      	blx	r3
 80106c2:	3601      	adds	r6, #1
 80106c4:	e7ee      	b.n	80106a4 <__libc_init_array+0xc>
 80106c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80106ca:	4798      	blx	r3
 80106cc:	3601      	adds	r6, #1
 80106ce:	e7f2      	b.n	80106b6 <__libc_init_array+0x1e>
 80106d0:	080115a8 	.word	0x080115a8
 80106d4:	080115a8 	.word	0x080115a8
 80106d8:	080115a8 	.word	0x080115a8
 80106dc:	080115b0 	.word	0x080115b0

080106e0 <__retarget_lock_acquire_recursive>:
 80106e0:	4770      	bx	lr

080106e2 <__retarget_lock_release_recursive>:
 80106e2:	4770      	bx	lr

080106e4 <memcpy>:
 80106e4:	440a      	add	r2, r1
 80106e6:	4291      	cmp	r1, r2
 80106e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80106ec:	d100      	bne.n	80106f0 <memcpy+0xc>
 80106ee:	4770      	bx	lr
 80106f0:	b510      	push	{r4, lr}
 80106f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80106f6:	4291      	cmp	r1, r2
 80106f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80106fc:	d1f9      	bne.n	80106f2 <memcpy+0xe>
 80106fe:	bd10      	pop	{r4, pc}

08010700 <_free_r>:
 8010700:	b538      	push	{r3, r4, r5, lr}
 8010702:	4605      	mov	r5, r0
 8010704:	2900      	cmp	r1, #0
 8010706:	d040      	beq.n	801078a <_free_r+0x8a>
 8010708:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801070c:	1f0c      	subs	r4, r1, #4
 801070e:	2b00      	cmp	r3, #0
 8010710:	bfb8      	it	lt
 8010712:	18e4      	addlt	r4, r4, r3
 8010714:	f7ff ff1c 	bl	8010550 <__malloc_lock>
 8010718:	4a1c      	ldr	r2, [pc, #112]	@ (801078c <_free_r+0x8c>)
 801071a:	6813      	ldr	r3, [r2, #0]
 801071c:	b933      	cbnz	r3, 801072c <_free_r+0x2c>
 801071e:	6063      	str	r3, [r4, #4]
 8010720:	6014      	str	r4, [r2, #0]
 8010722:	4628      	mov	r0, r5
 8010724:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010728:	f7ff bf18 	b.w	801055c <__malloc_unlock>
 801072c:	42a3      	cmp	r3, r4
 801072e:	d908      	bls.n	8010742 <_free_r+0x42>
 8010730:	6820      	ldr	r0, [r4, #0]
 8010732:	1821      	adds	r1, r4, r0
 8010734:	428b      	cmp	r3, r1
 8010736:	bf01      	itttt	eq
 8010738:	6819      	ldreq	r1, [r3, #0]
 801073a:	685b      	ldreq	r3, [r3, #4]
 801073c:	1809      	addeq	r1, r1, r0
 801073e:	6021      	streq	r1, [r4, #0]
 8010740:	e7ed      	b.n	801071e <_free_r+0x1e>
 8010742:	461a      	mov	r2, r3
 8010744:	685b      	ldr	r3, [r3, #4]
 8010746:	b10b      	cbz	r3, 801074c <_free_r+0x4c>
 8010748:	42a3      	cmp	r3, r4
 801074a:	d9fa      	bls.n	8010742 <_free_r+0x42>
 801074c:	6811      	ldr	r1, [r2, #0]
 801074e:	1850      	adds	r0, r2, r1
 8010750:	42a0      	cmp	r0, r4
 8010752:	d10b      	bne.n	801076c <_free_r+0x6c>
 8010754:	6820      	ldr	r0, [r4, #0]
 8010756:	4401      	add	r1, r0
 8010758:	1850      	adds	r0, r2, r1
 801075a:	4283      	cmp	r3, r0
 801075c:	6011      	str	r1, [r2, #0]
 801075e:	d1e0      	bne.n	8010722 <_free_r+0x22>
 8010760:	6818      	ldr	r0, [r3, #0]
 8010762:	685b      	ldr	r3, [r3, #4]
 8010764:	4408      	add	r0, r1
 8010766:	6010      	str	r0, [r2, #0]
 8010768:	6053      	str	r3, [r2, #4]
 801076a:	e7da      	b.n	8010722 <_free_r+0x22>
 801076c:	d902      	bls.n	8010774 <_free_r+0x74>
 801076e:	230c      	movs	r3, #12
 8010770:	602b      	str	r3, [r5, #0]
 8010772:	e7d6      	b.n	8010722 <_free_r+0x22>
 8010774:	6820      	ldr	r0, [r4, #0]
 8010776:	1821      	adds	r1, r4, r0
 8010778:	428b      	cmp	r3, r1
 801077a:	bf01      	itttt	eq
 801077c:	6819      	ldreq	r1, [r3, #0]
 801077e:	685b      	ldreq	r3, [r3, #4]
 8010780:	1809      	addeq	r1, r1, r0
 8010782:	6021      	streq	r1, [r4, #0]
 8010784:	6063      	str	r3, [r4, #4]
 8010786:	6054      	str	r4, [r2, #4]
 8010788:	e7cb      	b.n	8010722 <_free_r+0x22>
 801078a:	bd38      	pop	{r3, r4, r5, pc}
 801078c:	20008a2c 	.word	0x20008a2c

08010790 <_malloc_usable_size_r>:
 8010790:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010794:	1f18      	subs	r0, r3, #4
 8010796:	2b00      	cmp	r3, #0
 8010798:	bfbc      	itt	lt
 801079a:	580b      	ldrlt	r3, [r1, r0]
 801079c:	18c0      	addlt	r0, r0, r3
 801079e:	4770      	bx	lr

080107a0 <_init>:
 80107a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107a2:	bf00      	nop
 80107a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80107a6:	bc08      	pop	{r3}
 80107a8:	469e      	mov	lr, r3
 80107aa:	4770      	bx	lr

080107ac <_fini>:
 80107ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107ae:	bf00      	nop
 80107b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80107b2:	bc08      	pop	{r3}
 80107b4:	469e      	mov	lr, r3
 80107b6:	4770      	bx	lr
