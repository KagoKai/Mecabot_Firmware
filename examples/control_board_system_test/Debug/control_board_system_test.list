
control_board_system_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000102e0  080001e8  080001e8  000011e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d90  080104c8  080104c8  000114c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011258  08011258  00013084  2**0
                  CONTENTS
  4 .ARM          00000008  08011258  08011258  00012258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011260  08011260  00013084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08011260  08011260  00012260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011268  08011268  00012268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  0801126c  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008bac  20000088  080112f0  00013088  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20008c34  080112f0  00013c34  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00013084  2**0
                  CONTENTS, READONLY
 12 .debug_info   000207e3  00000000  00000000  000130ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038a1  00000000  00000000  00033890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001758  00000000  00000000  00037138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001250  00000000  00000000  00038890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dc2b  00000000  00000000  00039ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d7ee  00000000  00000000  0005770b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a803a  00000000  00000000  00074ef9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011cf33  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007248  00000000  00000000  0011cf78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  001241c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	@ (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	@ (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000088 	.word	0x20000088
 8000204:	00000000 	.word	0x00000000
 8000208:	080104b0 	.word	0x080104b0

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	@ (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	@ (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	@ (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	2000008c 	.word	0x2000008c
 8000224:	080104b0 	.word	0x080104b0

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	@ 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_d2iz>:
 8000ae4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000aec:	d215      	bcs.n	8000b1a <__aeabi_d2iz+0x36>
 8000aee:	d511      	bpl.n	8000b14 <__aeabi_d2iz+0x30>
 8000af0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000af4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af8:	d912      	bls.n	8000b20 <__aeabi_d2iz+0x3c>
 8000afa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000afe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b02:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b06:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b0e:	bf18      	it	ne
 8000b10:	4240      	negne	r0, r0
 8000b12:	4770      	bx	lr
 8000b14:	f04f 0000 	mov.w	r0, #0
 8000b18:	4770      	bx	lr
 8000b1a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b1e:	d105      	bne.n	8000b2c <__aeabi_d2iz+0x48>
 8000b20:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b24:	bf08      	it	eq
 8000b26:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b2a:	4770      	bx	lr
 8000b2c:	f04f 0000 	mov.w	r0, #0
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop

08000b34 <__aeabi_d2f>:
 8000b34:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b38:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b3c:	bf24      	itt	cs
 8000b3e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b42:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b46:	d90d      	bls.n	8000b64 <__aeabi_d2f+0x30>
 8000b48:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b4c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b50:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b54:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b58:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b5c:	bf08      	it	eq
 8000b5e:	f020 0001 	biceq.w	r0, r0, #1
 8000b62:	4770      	bx	lr
 8000b64:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b68:	d121      	bne.n	8000bae <__aeabi_d2f+0x7a>
 8000b6a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b6e:	bfbc      	itt	lt
 8000b70:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b74:	4770      	bxlt	lr
 8000b76:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b7a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b7e:	f1c2 0218 	rsb	r2, r2, #24
 8000b82:	f1c2 0c20 	rsb	ip, r2, #32
 8000b86:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b8a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b8e:	bf18      	it	ne
 8000b90:	f040 0001 	orrne.w	r0, r0, #1
 8000b94:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b98:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b9c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ba0:	ea40 000c 	orr.w	r0, r0, ip
 8000ba4:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bac:	e7cc      	b.n	8000b48 <__aeabi_d2f+0x14>
 8000bae:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bb2:	d107      	bne.n	8000bc4 <__aeabi_d2f+0x90>
 8000bb4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb8:	bf1e      	ittt	ne
 8000bba:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bbe:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bc2:	4770      	bxne	lr
 8000bc4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bcc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop

08000bd4 <__aeabi_frsub>:
 8000bd4:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000bd8:	e002      	b.n	8000be0 <__addsf3>
 8000bda:	bf00      	nop

08000bdc <__aeabi_fsub>:
 8000bdc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000be0 <__addsf3>:
 8000be0:	0042      	lsls	r2, r0, #1
 8000be2:	bf1f      	itttt	ne
 8000be4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000be8:	ea92 0f03 	teqne	r2, r3
 8000bec:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bf0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bf4:	d06a      	beq.n	8000ccc <__addsf3+0xec>
 8000bf6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bfa:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bfe:	bfc1      	itttt	gt
 8000c00:	18d2      	addgt	r2, r2, r3
 8000c02:	4041      	eorgt	r1, r0
 8000c04:	4048      	eorgt	r0, r1
 8000c06:	4041      	eorgt	r1, r0
 8000c08:	bfb8      	it	lt
 8000c0a:	425b      	neglt	r3, r3
 8000c0c:	2b19      	cmp	r3, #25
 8000c0e:	bf88      	it	hi
 8000c10:	4770      	bxhi	lr
 8000c12:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c16:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c1a:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c1e:	bf18      	it	ne
 8000c20:	4240      	negne	r0, r0
 8000c22:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c26:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c2a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c2e:	bf18      	it	ne
 8000c30:	4249      	negne	r1, r1
 8000c32:	ea92 0f03 	teq	r2, r3
 8000c36:	d03f      	beq.n	8000cb8 <__addsf3+0xd8>
 8000c38:	f1a2 0201 	sub.w	r2, r2, #1
 8000c3c:	fa41 fc03 	asr.w	ip, r1, r3
 8000c40:	eb10 000c 	adds.w	r0, r0, ip
 8000c44:	f1c3 0320 	rsb	r3, r3, #32
 8000c48:	fa01 f103 	lsl.w	r1, r1, r3
 8000c4c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c50:	d502      	bpl.n	8000c58 <__addsf3+0x78>
 8000c52:	4249      	negs	r1, r1
 8000c54:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c58:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c5c:	d313      	bcc.n	8000c86 <__addsf3+0xa6>
 8000c5e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c62:	d306      	bcc.n	8000c72 <__addsf3+0x92>
 8000c64:	0840      	lsrs	r0, r0, #1
 8000c66:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c6a:	f102 0201 	add.w	r2, r2, #1
 8000c6e:	2afe      	cmp	r2, #254	@ 0xfe
 8000c70:	d251      	bcs.n	8000d16 <__addsf3+0x136>
 8000c72:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c76:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c7a:	bf08      	it	eq
 8000c7c:	f020 0001 	biceq.w	r0, r0, #1
 8000c80:	ea40 0003 	orr.w	r0, r0, r3
 8000c84:	4770      	bx	lr
 8000c86:	0049      	lsls	r1, r1, #1
 8000c88:	eb40 0000 	adc.w	r0, r0, r0
 8000c8c:	3a01      	subs	r2, #1
 8000c8e:	bf28      	it	cs
 8000c90:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c94:	d2ed      	bcs.n	8000c72 <__addsf3+0x92>
 8000c96:	fab0 fc80 	clz	ip, r0
 8000c9a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c9e:	ebb2 020c 	subs.w	r2, r2, ip
 8000ca2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000ca6:	bfaa      	itet	ge
 8000ca8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cac:	4252      	neglt	r2, r2
 8000cae:	4318      	orrge	r0, r3
 8000cb0:	bfbc      	itt	lt
 8000cb2:	40d0      	lsrlt	r0, r2
 8000cb4:	4318      	orrlt	r0, r3
 8000cb6:	4770      	bx	lr
 8000cb8:	f092 0f00 	teq	r2, #0
 8000cbc:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000cc0:	bf06      	itte	eq
 8000cc2:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000cc6:	3201      	addeq	r2, #1
 8000cc8:	3b01      	subne	r3, #1
 8000cca:	e7b5      	b.n	8000c38 <__addsf3+0x58>
 8000ccc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cd0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cd4:	bf18      	it	ne
 8000cd6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cda:	d021      	beq.n	8000d20 <__addsf3+0x140>
 8000cdc:	ea92 0f03 	teq	r2, r3
 8000ce0:	d004      	beq.n	8000cec <__addsf3+0x10c>
 8000ce2:	f092 0f00 	teq	r2, #0
 8000ce6:	bf08      	it	eq
 8000ce8:	4608      	moveq	r0, r1
 8000cea:	4770      	bx	lr
 8000cec:	ea90 0f01 	teq	r0, r1
 8000cf0:	bf1c      	itt	ne
 8000cf2:	2000      	movne	r0, #0
 8000cf4:	4770      	bxne	lr
 8000cf6:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000cfa:	d104      	bne.n	8000d06 <__addsf3+0x126>
 8000cfc:	0040      	lsls	r0, r0, #1
 8000cfe:	bf28      	it	cs
 8000d00:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d04:	4770      	bx	lr
 8000d06:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d0a:	bf3c      	itt	cc
 8000d0c:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d10:	4770      	bxcc	lr
 8000d12:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d16:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d1a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d1e:	4770      	bx	lr
 8000d20:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d24:	bf16      	itet	ne
 8000d26:	4608      	movne	r0, r1
 8000d28:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d2c:	4601      	movne	r1, r0
 8000d2e:	0242      	lsls	r2, r0, #9
 8000d30:	bf06      	itte	eq
 8000d32:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d36:	ea90 0f01 	teqeq	r0, r1
 8000d3a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d3e:	4770      	bx	lr

08000d40 <__aeabi_ui2f>:
 8000d40:	f04f 0300 	mov.w	r3, #0
 8000d44:	e004      	b.n	8000d50 <__aeabi_i2f+0x8>
 8000d46:	bf00      	nop

08000d48 <__aeabi_i2f>:
 8000d48:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d4c:	bf48      	it	mi
 8000d4e:	4240      	negmi	r0, r0
 8000d50:	ea5f 0c00 	movs.w	ip, r0
 8000d54:	bf08      	it	eq
 8000d56:	4770      	bxeq	lr
 8000d58:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d5c:	4601      	mov	r1, r0
 8000d5e:	f04f 0000 	mov.w	r0, #0
 8000d62:	e01c      	b.n	8000d9e <__aeabi_l2f+0x2a>

08000d64 <__aeabi_ul2f>:
 8000d64:	ea50 0201 	orrs.w	r2, r0, r1
 8000d68:	bf08      	it	eq
 8000d6a:	4770      	bxeq	lr
 8000d6c:	f04f 0300 	mov.w	r3, #0
 8000d70:	e00a      	b.n	8000d88 <__aeabi_l2f+0x14>
 8000d72:	bf00      	nop

08000d74 <__aeabi_l2f>:
 8000d74:	ea50 0201 	orrs.w	r2, r0, r1
 8000d78:	bf08      	it	eq
 8000d7a:	4770      	bxeq	lr
 8000d7c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d80:	d502      	bpl.n	8000d88 <__aeabi_l2f+0x14>
 8000d82:	4240      	negs	r0, r0
 8000d84:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d88:	ea5f 0c01 	movs.w	ip, r1
 8000d8c:	bf02      	ittt	eq
 8000d8e:	4684      	moveq	ip, r0
 8000d90:	4601      	moveq	r1, r0
 8000d92:	2000      	moveq	r0, #0
 8000d94:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d98:	bf08      	it	eq
 8000d9a:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d9e:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000da2:	fabc f28c 	clz	r2, ip
 8000da6:	3a08      	subs	r2, #8
 8000da8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000dac:	db10      	blt.n	8000dd0 <__aeabi_l2f+0x5c>
 8000dae:	fa01 fc02 	lsl.w	ip, r1, r2
 8000db2:	4463      	add	r3, ip
 8000db4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000db8:	f1c2 0220 	rsb	r2, r2, #32
 8000dbc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000dc0:	fa20 f202 	lsr.w	r2, r0, r2
 8000dc4:	eb43 0002 	adc.w	r0, r3, r2
 8000dc8:	bf08      	it	eq
 8000dca:	f020 0001 	biceq.w	r0, r0, #1
 8000dce:	4770      	bx	lr
 8000dd0:	f102 0220 	add.w	r2, r2, #32
 8000dd4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dd8:	f1c2 0220 	rsb	r2, r2, #32
 8000ddc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000de0:	fa21 f202 	lsr.w	r2, r1, r2
 8000de4:	eb43 0002 	adc.w	r0, r3, r2
 8000de8:	bf08      	it	eq
 8000dea:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dee:	4770      	bx	lr

08000df0 <__aeabi_fmul>:
 8000df0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000df4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000df8:	bf1e      	ittt	ne
 8000dfa:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dfe:	ea92 0f0c 	teqne	r2, ip
 8000e02:	ea93 0f0c 	teqne	r3, ip
 8000e06:	d06f      	beq.n	8000ee8 <__aeabi_fmul+0xf8>
 8000e08:	441a      	add	r2, r3
 8000e0a:	ea80 0c01 	eor.w	ip, r0, r1
 8000e0e:	0240      	lsls	r0, r0, #9
 8000e10:	bf18      	it	ne
 8000e12:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e16:	d01e      	beq.n	8000e56 <__aeabi_fmul+0x66>
 8000e18:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000e1c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e20:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e24:	fba0 3101 	umull	r3, r1, r0, r1
 8000e28:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e2c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000e30:	bf3e      	ittt	cc
 8000e32:	0049      	lslcc	r1, r1, #1
 8000e34:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e38:	005b      	lslcc	r3, r3, #1
 8000e3a:	ea40 0001 	orr.w	r0, r0, r1
 8000e3e:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000e42:	2afd      	cmp	r2, #253	@ 0xfd
 8000e44:	d81d      	bhi.n	8000e82 <__aeabi_fmul+0x92>
 8000e46:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000e4a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e4e:	bf08      	it	eq
 8000e50:	f020 0001 	biceq.w	r0, r0, #1
 8000e54:	4770      	bx	lr
 8000e56:	f090 0f00 	teq	r0, #0
 8000e5a:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000e5e:	bf08      	it	eq
 8000e60:	0249      	lsleq	r1, r1, #9
 8000e62:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e66:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e6a:	3a7f      	subs	r2, #127	@ 0x7f
 8000e6c:	bfc2      	ittt	gt
 8000e6e:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e72:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e76:	4770      	bxgt	lr
 8000e78:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e7c:	f04f 0300 	mov.w	r3, #0
 8000e80:	3a01      	subs	r2, #1
 8000e82:	dc5d      	bgt.n	8000f40 <__aeabi_fmul+0x150>
 8000e84:	f112 0f19 	cmn.w	r2, #25
 8000e88:	bfdc      	itt	le
 8000e8a:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e8e:	4770      	bxle	lr
 8000e90:	f1c2 0200 	rsb	r2, r2, #0
 8000e94:	0041      	lsls	r1, r0, #1
 8000e96:	fa21 f102 	lsr.w	r1, r1, r2
 8000e9a:	f1c2 0220 	rsb	r2, r2, #32
 8000e9e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ea2:	ea5f 0031 	movs.w	r0, r1, rrx
 8000ea6:	f140 0000 	adc.w	r0, r0, #0
 8000eaa:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000eae:	bf08      	it	eq
 8000eb0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000eb4:	4770      	bx	lr
 8000eb6:	f092 0f00 	teq	r2, #0
 8000eba:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ebe:	bf02      	ittt	eq
 8000ec0:	0040      	lsleq	r0, r0, #1
 8000ec2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000ec6:	3a01      	subeq	r2, #1
 8000ec8:	d0f9      	beq.n	8000ebe <__aeabi_fmul+0xce>
 8000eca:	ea40 000c 	orr.w	r0, r0, ip
 8000ece:	f093 0f00 	teq	r3, #0
 8000ed2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ed6:	bf02      	ittt	eq
 8000ed8:	0049      	lsleq	r1, r1, #1
 8000eda:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000ede:	3b01      	subeq	r3, #1
 8000ee0:	d0f9      	beq.n	8000ed6 <__aeabi_fmul+0xe6>
 8000ee2:	ea41 010c 	orr.w	r1, r1, ip
 8000ee6:	e78f      	b.n	8000e08 <__aeabi_fmul+0x18>
 8000ee8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000eec:	ea92 0f0c 	teq	r2, ip
 8000ef0:	bf18      	it	ne
 8000ef2:	ea93 0f0c 	teqne	r3, ip
 8000ef6:	d00a      	beq.n	8000f0e <__aeabi_fmul+0x11e>
 8000ef8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000efc:	bf18      	it	ne
 8000efe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f02:	d1d8      	bne.n	8000eb6 <__aeabi_fmul+0xc6>
 8000f04:	ea80 0001 	eor.w	r0, r0, r1
 8000f08:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000f0c:	4770      	bx	lr
 8000f0e:	f090 0f00 	teq	r0, #0
 8000f12:	bf17      	itett	ne
 8000f14:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000f18:	4608      	moveq	r0, r1
 8000f1a:	f091 0f00 	teqne	r1, #0
 8000f1e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000f22:	d014      	beq.n	8000f4e <__aeabi_fmul+0x15e>
 8000f24:	ea92 0f0c 	teq	r2, ip
 8000f28:	d101      	bne.n	8000f2e <__aeabi_fmul+0x13e>
 8000f2a:	0242      	lsls	r2, r0, #9
 8000f2c:	d10f      	bne.n	8000f4e <__aeabi_fmul+0x15e>
 8000f2e:	ea93 0f0c 	teq	r3, ip
 8000f32:	d103      	bne.n	8000f3c <__aeabi_fmul+0x14c>
 8000f34:	024b      	lsls	r3, r1, #9
 8000f36:	bf18      	it	ne
 8000f38:	4608      	movne	r0, r1
 8000f3a:	d108      	bne.n	8000f4e <__aeabi_fmul+0x15e>
 8000f3c:	ea80 0001 	eor.w	r0, r0, r1
 8000f40:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000f44:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000f48:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f4c:	4770      	bx	lr
 8000f4e:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000f52:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000f56:	4770      	bx	lr

08000f58 <__aeabi_fdiv>:
 8000f58:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000f5c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f60:	bf1e      	ittt	ne
 8000f62:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f66:	ea92 0f0c 	teqne	r2, ip
 8000f6a:	ea93 0f0c 	teqne	r3, ip
 8000f6e:	d069      	beq.n	8001044 <__aeabi_fdiv+0xec>
 8000f70:	eba2 0203 	sub.w	r2, r2, r3
 8000f74:	ea80 0c01 	eor.w	ip, r0, r1
 8000f78:	0249      	lsls	r1, r1, #9
 8000f7a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f7e:	d037      	beq.n	8000ff0 <__aeabi_fdiv+0x98>
 8000f80:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f84:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f88:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f8c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f90:	428b      	cmp	r3, r1
 8000f92:	bf38      	it	cc
 8000f94:	005b      	lslcc	r3, r3, #1
 8000f96:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f9a:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f9e:	428b      	cmp	r3, r1
 8000fa0:	bf24      	itt	cs
 8000fa2:	1a5b      	subcs	r3, r3, r1
 8000fa4:	ea40 000c 	orrcs.w	r0, r0, ip
 8000fa8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000fac:	bf24      	itt	cs
 8000fae:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000fb2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000fb6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000fba:	bf24      	itt	cs
 8000fbc:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000fc0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000fc4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000fc8:	bf24      	itt	cs
 8000fca:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000fce:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000fd2:	011b      	lsls	r3, r3, #4
 8000fd4:	bf18      	it	ne
 8000fd6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fda:	d1e0      	bne.n	8000f9e <__aeabi_fdiv+0x46>
 8000fdc:	2afd      	cmp	r2, #253	@ 0xfd
 8000fde:	f63f af50 	bhi.w	8000e82 <__aeabi_fmul+0x92>
 8000fe2:	428b      	cmp	r3, r1
 8000fe4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fe8:	bf08      	it	eq
 8000fea:	f020 0001 	biceq.w	r0, r0, #1
 8000fee:	4770      	bx	lr
 8000ff0:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ff4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ff8:	327f      	adds	r2, #127	@ 0x7f
 8000ffa:	bfc2      	ittt	gt
 8000ffc:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8001000:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001004:	4770      	bxgt	lr
 8001006:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800100a:	f04f 0300 	mov.w	r3, #0
 800100e:	3a01      	subs	r2, #1
 8001010:	e737      	b.n	8000e82 <__aeabi_fmul+0x92>
 8001012:	f092 0f00 	teq	r2, #0
 8001016:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800101a:	bf02      	ittt	eq
 800101c:	0040      	lsleq	r0, r0, #1
 800101e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8001022:	3a01      	subeq	r2, #1
 8001024:	d0f9      	beq.n	800101a <__aeabi_fdiv+0xc2>
 8001026:	ea40 000c 	orr.w	r0, r0, ip
 800102a:	f093 0f00 	teq	r3, #0
 800102e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8001032:	bf02      	ittt	eq
 8001034:	0049      	lsleq	r1, r1, #1
 8001036:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800103a:	3b01      	subeq	r3, #1
 800103c:	d0f9      	beq.n	8001032 <__aeabi_fdiv+0xda>
 800103e:	ea41 010c 	orr.w	r1, r1, ip
 8001042:	e795      	b.n	8000f70 <__aeabi_fdiv+0x18>
 8001044:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001048:	ea92 0f0c 	teq	r2, ip
 800104c:	d108      	bne.n	8001060 <__aeabi_fdiv+0x108>
 800104e:	0242      	lsls	r2, r0, #9
 8001050:	f47f af7d 	bne.w	8000f4e <__aeabi_fmul+0x15e>
 8001054:	ea93 0f0c 	teq	r3, ip
 8001058:	f47f af70 	bne.w	8000f3c <__aeabi_fmul+0x14c>
 800105c:	4608      	mov	r0, r1
 800105e:	e776      	b.n	8000f4e <__aeabi_fmul+0x15e>
 8001060:	ea93 0f0c 	teq	r3, ip
 8001064:	d104      	bne.n	8001070 <__aeabi_fdiv+0x118>
 8001066:	024b      	lsls	r3, r1, #9
 8001068:	f43f af4c 	beq.w	8000f04 <__aeabi_fmul+0x114>
 800106c:	4608      	mov	r0, r1
 800106e:	e76e      	b.n	8000f4e <__aeabi_fmul+0x15e>
 8001070:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001074:	bf18      	it	ne
 8001076:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800107a:	d1ca      	bne.n	8001012 <__aeabi_fdiv+0xba>
 800107c:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001080:	f47f af5c 	bne.w	8000f3c <__aeabi_fmul+0x14c>
 8001084:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8001088:	f47f af3c 	bne.w	8000f04 <__aeabi_fmul+0x114>
 800108c:	e75f      	b.n	8000f4e <__aeabi_fmul+0x15e>
 800108e:	bf00      	nop

08001090 <__gesf2>:
 8001090:	f04f 3cff 	mov.w	ip, #4294967295
 8001094:	e006      	b.n	80010a4 <__cmpsf2+0x4>
 8001096:	bf00      	nop

08001098 <__lesf2>:
 8001098:	f04f 0c01 	mov.w	ip, #1
 800109c:	e002      	b.n	80010a4 <__cmpsf2+0x4>
 800109e:	bf00      	nop

080010a0 <__cmpsf2>:
 80010a0:	f04f 0c01 	mov.w	ip, #1
 80010a4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80010a8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010ac:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010b0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010b4:	bf18      	it	ne
 80010b6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80010ba:	d011      	beq.n	80010e0 <__cmpsf2+0x40>
 80010bc:	b001      	add	sp, #4
 80010be:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80010c2:	bf18      	it	ne
 80010c4:	ea90 0f01 	teqne	r0, r1
 80010c8:	bf58      	it	pl
 80010ca:	ebb2 0003 	subspl.w	r0, r2, r3
 80010ce:	bf88      	it	hi
 80010d0:	17c8      	asrhi	r0, r1, #31
 80010d2:	bf38      	it	cc
 80010d4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80010d8:	bf18      	it	ne
 80010da:	f040 0001 	orrne.w	r0, r0, #1
 80010de:	4770      	bx	lr
 80010e0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010e4:	d102      	bne.n	80010ec <__cmpsf2+0x4c>
 80010e6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010ea:	d105      	bne.n	80010f8 <__cmpsf2+0x58>
 80010ec:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010f0:	d1e4      	bne.n	80010bc <__cmpsf2+0x1c>
 80010f2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010f6:	d0e1      	beq.n	80010bc <__cmpsf2+0x1c>
 80010f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop

08001100 <__aeabi_cfrcmple>:
 8001100:	4684      	mov	ip, r0
 8001102:	4608      	mov	r0, r1
 8001104:	4661      	mov	r1, ip
 8001106:	e7ff      	b.n	8001108 <__aeabi_cfcmpeq>

08001108 <__aeabi_cfcmpeq>:
 8001108:	b50f      	push	{r0, r1, r2, r3, lr}
 800110a:	f7ff ffc9 	bl	80010a0 <__cmpsf2>
 800110e:	2800      	cmp	r0, #0
 8001110:	bf48      	it	mi
 8001112:	f110 0f00 	cmnmi.w	r0, #0
 8001116:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001118 <__aeabi_fcmpeq>:
 8001118:	f84d ed08 	str.w	lr, [sp, #-8]!
 800111c:	f7ff fff4 	bl	8001108 <__aeabi_cfcmpeq>
 8001120:	bf0c      	ite	eq
 8001122:	2001      	moveq	r0, #1
 8001124:	2000      	movne	r0, #0
 8001126:	f85d fb08 	ldr.w	pc, [sp], #8
 800112a:	bf00      	nop

0800112c <__aeabi_fcmplt>:
 800112c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001130:	f7ff ffea 	bl	8001108 <__aeabi_cfcmpeq>
 8001134:	bf34      	ite	cc
 8001136:	2001      	movcc	r0, #1
 8001138:	2000      	movcs	r0, #0
 800113a:	f85d fb08 	ldr.w	pc, [sp], #8
 800113e:	bf00      	nop

08001140 <__aeabi_fcmple>:
 8001140:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001144:	f7ff ffe0 	bl	8001108 <__aeabi_cfcmpeq>
 8001148:	bf94      	ite	ls
 800114a:	2001      	movls	r0, #1
 800114c:	2000      	movhi	r0, #0
 800114e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001152:	bf00      	nop

08001154 <__aeabi_fcmpge>:
 8001154:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001158:	f7ff ffd2 	bl	8001100 <__aeabi_cfrcmple>
 800115c:	bf94      	ite	ls
 800115e:	2001      	movls	r0, #1
 8001160:	2000      	movhi	r0, #0
 8001162:	f85d fb08 	ldr.w	pc, [sp], #8
 8001166:	bf00      	nop

08001168 <__aeabi_fcmpgt>:
 8001168:	f84d ed08 	str.w	lr, [sp, #-8]!
 800116c:	f7ff ffc8 	bl	8001100 <__aeabi_cfrcmple>
 8001170:	bf34      	ite	cc
 8001172:	2001      	movcc	r0, #1
 8001174:	2000      	movcs	r0, #0
 8001176:	f85d fb08 	ldr.w	pc, [sp], #8
 800117a:	bf00      	nop

0800117c <__aeabi_f2iz>:
 800117c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001180:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001184:	d30f      	bcc.n	80011a6 <__aeabi_f2iz+0x2a>
 8001186:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800118a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800118e:	d90d      	bls.n	80011ac <__aeabi_f2iz+0x30>
 8001190:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001194:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001198:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800119c:	fa23 f002 	lsr.w	r0, r3, r2
 80011a0:	bf18      	it	ne
 80011a2:	4240      	negne	r0, r0
 80011a4:	4770      	bx	lr
 80011a6:	f04f 0000 	mov.w	r0, #0
 80011aa:	4770      	bx	lr
 80011ac:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80011b0:	d101      	bne.n	80011b6 <__aeabi_f2iz+0x3a>
 80011b2:	0242      	lsls	r2, r0, #9
 80011b4:	d105      	bne.n	80011c2 <__aeabi_f2iz+0x46>
 80011b6:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 80011ba:	bf08      	it	eq
 80011bc:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80011c0:	4770      	bx	lr
 80011c2:	f04f 0000 	mov.w	r0, #0
 80011c6:	4770      	bx	lr

080011c8 <__aeabi_f2uiz>:
 80011c8:	0042      	lsls	r2, r0, #1
 80011ca:	d20e      	bcs.n	80011ea <__aeabi_f2uiz+0x22>
 80011cc:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80011d0:	d30b      	bcc.n	80011ea <__aeabi_f2uiz+0x22>
 80011d2:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80011d6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80011da:	d409      	bmi.n	80011f0 <__aeabi_f2uiz+0x28>
 80011dc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80011e0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80011e4:	fa23 f002 	lsr.w	r0, r3, r2
 80011e8:	4770      	bx	lr
 80011ea:	f04f 0000 	mov.w	r0, #0
 80011ee:	4770      	bx	lr
 80011f0:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80011f4:	d101      	bne.n	80011fa <__aeabi_f2uiz+0x32>
 80011f6:	0242      	lsls	r2, r0, #9
 80011f8:	d102      	bne.n	8001200 <__aeabi_f2uiz+0x38>
 80011fa:	f04f 30ff 	mov.w	r0, #4294967295
 80011fe:	4770      	bx	lr
 8001200:	f04f 0000 	mov.w	r0, #0
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop

08001208 <FO_IIR_Init>:
#include "IIR_filter.h"

void FO_IIR_Init(FO_IIR_Filter_t *instance, const float (&b_coefficient)[2], const float (&a_coefficient)[2])
{
 8001208:	b480      	push	{r7}
 800120a:	b087      	sub	sp, #28
 800120c:	af00      	add	r7, sp, #0
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	60b9      	str	r1, [r7, #8]
 8001212:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < 2; i++)
 8001214:	2300      	movs	r3, #0
 8001216:	617b      	str	r3, [r7, #20]
 8001218:	e013      	b.n	8001242 <FO_IIR_Init+0x3a>
    {
        instance->b[i] = b_coefficient[i];
 800121a:	68bb      	ldr	r3, [r7, #8]
 800121c:	697a      	ldr	r2, [r7, #20]
 800121e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	697a      	ldr	r2, [r7, #20]
 8001226:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        instance->a[i] = a_coefficient[i];
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	697a      	ldr	r2, [r7, #20]
 800122e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	697a      	ldr	r2, [r7, #20]
 8001236:	3202      	adds	r2, #2
 8001238:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (int i = 0; i < 2; i++)
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	3301      	adds	r3, #1
 8001240:	617b      	str	r3, [r7, #20]
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	2b01      	cmp	r3, #1
 8001246:	dde8      	ble.n	800121a <FO_IIR_Init+0x12>
    }

    instance->prev_y = 0.0f;
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	f04f 0200 	mov.w	r2, #0
 800124e:	611a      	str	r2, [r3, #16]
    instance->prev_x = 0.0f;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	f04f 0200 	mov.w	r2, #0
 8001256:	615a      	str	r2, [r3, #20]
}
 8001258:	bf00      	nop
 800125a:	371c      	adds	r7, #28
 800125c:	46bd      	mov	sp, r7
 800125e:	bc80      	pop	{r7}
 8001260:	4770      	bx	lr

08001262 <FO_IIR_Compute>:

float FO_IIR_Compute(FO_IIR_Filter_t *instance, float input)
{
 8001262:	b5b0      	push	{r4, r5, r7, lr}
 8001264:	b084      	sub	sp, #16
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]
 800126a:	6039      	str	r1, [r7, #0]
    float output = -instance->a[1] * instance->prev_y + (instance->b[0] * input + instance->b[1] * instance->prev_x);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	f083 4200 	eor.w	r2, r3, #2147483648	@ 0x80000000
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	691b      	ldr	r3, [r3, #16]
 8001278:	4619      	mov	r1, r3
 800127a:	4610      	mov	r0, r2
 800127c:	f7ff fdb8 	bl	8000df0 <__aeabi_fmul>
 8001280:	4603      	mov	r3, r0
 8001282:	461c      	mov	r4, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	6839      	ldr	r1, [r7, #0]
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff fdb0 	bl	8000df0 <__aeabi_fmul>
 8001290:	4603      	mov	r3, r0
 8001292:	461d      	mov	r5, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	685a      	ldr	r2, [r3, #4]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	695b      	ldr	r3, [r3, #20]
 800129c:	4619      	mov	r1, r3
 800129e:	4610      	mov	r0, r2
 80012a0:	f7ff fda6 	bl	8000df0 <__aeabi_fmul>
 80012a4:	4603      	mov	r3, r0
 80012a6:	4619      	mov	r1, r3
 80012a8:	4628      	mov	r0, r5
 80012aa:	f7ff fc99 	bl	8000be0 <__addsf3>
 80012ae:	4603      	mov	r3, r0
 80012b0:	4619      	mov	r1, r3
 80012b2:	4620      	mov	r0, r4
 80012b4:	f7ff fc94 	bl	8000be0 <__addsf3>
 80012b8:	4603      	mov	r3, r0
 80012ba:	60fb      	str	r3, [r7, #12]

    instance->prev_y = output;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	68fa      	ldr	r2, [r7, #12]
 80012c0:	611a      	str	r2, [r3, #16]
    instance->prev_x = input;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	683a      	ldr	r2, [r7, #0]
 80012c6:	615a      	str	r2, [r3, #20]

    return output;
 80012c8:	68fb      	ldr	r3, [r7, #12]
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3710      	adds	r7, #16
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080012d4 <Motor_Init>:
#include "dc_motor.h"

uint32_t pwm_freq;

Motor_t* Motor_Init(Motor_Handle_t handle)
{
 80012d4:	b590      	push	{r4, r7, lr}
 80012d6:	b087      	sub	sp, #28
 80012d8:	af00      	add	r7, sp, #0
 80012da:	463c      	mov	r4, r7
 80012dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    Motor_t *object = calloc(1, sizeof(Motor_t));
 80012e0:	2110      	movs	r1, #16
 80012e2:	2001      	movs	r0, #1
 80012e4:	f00e fef6 	bl	80100d4 <calloc>
 80012e8:	4603      	mov	r3, r0
 80012ea:	617b      	str	r3, [r7, #20]

    object->direction = DIRECTION_FORWARD;
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	2201      	movs	r2, #1
 80012f0:	701a      	strb	r2, [r3, #0]
    object->pwm_duty = 0;
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	2200      	movs	r2, #0
 80012f6:	705a      	strb	r2, [r3, #1]

    object->pwm_channel = handle.pwm_channel;
 80012f8:	683a      	ldr	r2, [r7, #0]
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	605a      	str	r2, [r3, #4]
    object->direction_port = handle.direction_port;
 80012fe:	687a      	ldr	r2, [r7, #4]
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	609a      	str	r2, [r3, #8]
    object->direction_pin = handle.direction_pin;
 8001304:	893a      	ldrh	r2, [r7, #8]
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	819a      	strh	r2, [r3, #12]

    pwm_freq = handle.pwm_frequency;
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	4a07      	ldr	r2, [pc, #28]	@ (800132c <Motor_Init+0x58>)
 800130e:	6013      	str	r3, [r2, #0]

    // Duty cycle Setting
    Motor_Set_PWM_Duty(object, 0);
 8001310:	2100      	movs	r1, #0
 8001312:	6978      	ldr	r0, [r7, #20]
 8001314:	f000 f832 	bl	800137c <Motor_Set_PWM_Duty>
    // Frequency Setting
    Motor_Set_PWM_Frequency(pwm_freq);
 8001318:	4b04      	ldr	r3, [pc, #16]	@ (800132c <Motor_Init+0x58>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4618      	mov	r0, r3
 800131e:	f000 f807 	bl	8001330 <Motor_Set_PWM_Frequency>

    return object;
 8001322:	697b      	ldr	r3, [r7, #20]
}
 8001324:	4618      	mov	r0, r3
 8001326:	371c      	adds	r7, #28
 8001328:	46bd      	mov	sp, r7
 800132a:	bd90      	pop	{r4, r7, pc}
 800132c:	200000a4 	.word	0x200000a4

08001330 <Motor_Set_PWM_Frequency>:

status_t Motor_Set_PWM_Frequency(uint32_t freq)
{
 8001330:	b480      	push	{r7}
 8001332:	b085      	sub	sp, #20
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
    // The PWM frequency depends on: The clock frequency, the ARR value, the PSC value. 
    //              PWM frequency = Clock frequency / [ (ARR + 1) * (PSC + 1) ]
    pwm_freq = freq;
 8001338:	4a0d      	ldr	r2, [pc, #52]	@ (8001370 <Motor_Set_PWM_Frequency+0x40>)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6013      	str	r3, [r2, #0]

    uint32_t tim_arr_val = __HAL_TIM_GET_AUTORELOAD(&htim_motor);
 800133e:	4b0d      	ldr	r3, [pc, #52]	@ (8001374 <Motor_Set_PWM_Frequency+0x44>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001344:	60fb      	str	r3, [r7, #12]
    uint32_t tim_psc_val = (uint32_t)(DEFAULT_CLOCK_FREQ / (pwm_freq * (tim_arr_val + 1)) - 1);
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	3301      	adds	r3, #1
 800134a:	4a09      	ldr	r2, [pc, #36]	@ (8001370 <Motor_Set_PWM_Frequency+0x40>)
 800134c:	6812      	ldr	r2, [r2, #0]
 800134e:	fb02 f303 	mul.w	r3, r2, r3
 8001352:	4a09      	ldr	r2, [pc, #36]	@ (8001378 <Motor_Set_PWM_Frequency+0x48>)
 8001354:	fbb2 f3f3 	udiv	r3, r2, r3
 8001358:	3b01      	subs	r3, #1
 800135a:	60bb      	str	r3, [r7, #8]

    __HAL_TIM_SET_PRESCALER(&htim_motor, tim_psc_val);
 800135c:	4b05      	ldr	r3, [pc, #20]	@ (8001374 <Motor_Set_PWM_Frequency+0x44>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	68ba      	ldr	r2, [r7, #8]
 8001362:	629a      	str	r2, [r3, #40]	@ 0x28
    
    return STATUS_OK;
 8001364:	2300      	movs	r3, #0
}
 8001366:	4618      	mov	r0, r3
 8001368:	3714      	adds	r7, #20
 800136a:	46bd      	mov	sp, r7
 800136c:	bc80      	pop	{r7}
 800136e:	4770      	bx	lr
 8001370:	200000a4 	.word	0x200000a4
 8001374:	200000fc 	.word	0x200000fc
 8001378:	007a1200 	.word	0x007a1200

0800137c <Motor_Set_PWM_Duty>:

status_t Motor_Set_PWM_Duty(Motor_t *motor, int16_t duty)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b086      	sub	sp, #24
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	460b      	mov	r3, r1
 8001386:	807b      	strh	r3, [r7, #2]
    if (duty == 0)
 8001388:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d107      	bne.n	80013a0 <Motor_Set_PWM_Duty+0x24>
    {
        Motor_SetDirection(motor, DIRECTION_STOP);
 8001390:	2100      	movs	r1, #0
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f000 f8cc 	bl	8001530 <Motor_SetDirection>
        motor->pwm_duty = 0;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2200      	movs	r2, #0
 800139c:	705a      	strb	r2, [r3, #1]
 800139e:	e061      	b.n	8001464 <Motor_Set_PWM_Duty+0xe8>
    }
    else
    {
        switch (motor->direction)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	f993 3000 	ldrsb.w	r3, [r3]
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d007      	beq.n	80013ba <Motor_Set_PWM_Duty+0x3e>
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	dc53      	bgt.n	8001456 <Motor_Set_PWM_Duty+0xda>
 80013ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013b2:	d017      	beq.n	80013e4 <Motor_Set_PWM_Duty+0x68>
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d031      	beq.n	800141c <Motor_Set_PWM_Duty+0xa0>
                        motor->pwm_duty = 255 + duty;
                    }
                }
                break;
            default:
                break;
 80013b8:	e04d      	b.n	8001456 <Motor_Set_PWM_Duty+0xda>
                    if (duty > 0)          motor->pwm_duty = duty;            // duty: 0 - Min, 255 - Max
 80013ba:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	dd04      	ble.n	80013cc <Motor_Set_PWM_Duty+0x50>
 80013c2:	887b      	ldrh	r3, [r7, #2]
 80013c4:	b2da      	uxtb	r2, r3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	705a      	strb	r2, [r3, #1]
                break;
 80013ca:	e046      	b.n	800145a <Motor_Set_PWM_Duty+0xde>
                    else if (duty < 0)      
 80013cc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	da42      	bge.n	800145a <Motor_Set_PWM_Duty+0xde>
                        Motor_SetDirection(motor, DIRECTION_STOP);
 80013d4:	2100      	movs	r1, #0
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f000 f8aa 	bl	8001530 <Motor_SetDirection>
                        motor->pwm_duty = 0;    
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2200      	movs	r2, #0
 80013e0:	705a      	strb	r2, [r3, #1]
                break;
 80013e2:	e03a      	b.n	800145a <Motor_Set_PWM_Duty+0xde>
                    if (duty > 0)
 80013e4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	dd07      	ble.n	80013fc <Motor_Set_PWM_Duty+0x80>
                        Motor_SetDirection(motor, DIRECTION_STOP);
 80013ec:	2100      	movs	r1, #0
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f000 f89e 	bl	8001530 <Motor_SetDirection>
                        motor->pwm_duty = 0; 
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2200      	movs	r2, #0
 80013f8:	705a      	strb	r2, [r3, #1]
                break;
 80013fa:	e030      	b.n	800145e <Motor_Set_PWM_Duty+0xe2>
                    else if (duty < 0)      motor->pwm_duty = 255 - abs(duty);
 80013fc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001400:	2b00      	cmp	r3, #0
 8001402:	da2c      	bge.n	800145e <Motor_Set_PWM_Duty+0xe2>
 8001404:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001408:	2b00      	cmp	r3, #0
 800140a:	bfb8      	it	lt
 800140c:	425b      	neglt	r3, r3
 800140e:	b29b      	uxth	r3, r3
 8001410:	b2db      	uxtb	r3, r3
 8001412:	43db      	mvns	r3, r3
 8001414:	b2da      	uxtb	r2, r3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	705a      	strb	r2, [r3, #1]
                break;
 800141a:	e020      	b.n	800145e <Motor_Set_PWM_Duty+0xe2>
                    if (duty > 0)
 800141c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001420:	2b00      	cmp	r3, #0
 8001422:	dd08      	ble.n	8001436 <Motor_Set_PWM_Duty+0xba>
                        Motor_SetDirection(motor, DIRECTION_FORWARD);
 8001424:	2101      	movs	r1, #1
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f000 f882 	bl	8001530 <Motor_SetDirection>
                        motor->pwm_duty = duty;
 800142c:	887b      	ldrh	r3, [r7, #2]
 800142e:	b2da      	uxtb	r2, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	705a      	strb	r2, [r3, #1]
                break;
 8001434:	e015      	b.n	8001462 <Motor_Set_PWM_Duty+0xe6>
                    else if (duty < 0)
 8001436:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800143a:	2b00      	cmp	r3, #0
 800143c:	da11      	bge.n	8001462 <Motor_Set_PWM_Duty+0xe6>
                        Motor_SetDirection(motor, DIRECTION_BACKWARD);
 800143e:	f04f 31ff 	mov.w	r1, #4294967295
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f000 f874 	bl	8001530 <Motor_SetDirection>
                        motor->pwm_duty = 255 + duty;
 8001448:	887b      	ldrh	r3, [r7, #2]
 800144a:	b2db      	uxtb	r3, r3
 800144c:	3b01      	subs	r3, #1
 800144e:	b2da      	uxtb	r2, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	705a      	strb	r2, [r3, #1]
                break;
 8001454:	e005      	b.n	8001462 <Motor_Set_PWM_Duty+0xe6>
                break;
 8001456:	bf00      	nop
 8001458:	e004      	b.n	8001464 <Motor_Set_PWM_Duty+0xe8>
                break;
 800145a:	bf00      	nop
 800145c:	e002      	b.n	8001464 <Motor_Set_PWM_Duty+0xe8>
                break;
 800145e:	bf00      	nop
 8001460:	e000      	b.n	8001464 <Motor_Set_PWM_Duty+0xe8>
                break;
 8001462:	bf00      	nop
        }
    }

    float duty_percentage = motor->pwm_duty / 255.0f;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	785b      	ldrb	r3, [r3, #1]
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff fc6d 	bl	8000d48 <__aeabi_i2f>
 800146e:	4603      	mov	r3, r0
 8001470:	491d      	ldr	r1, [pc, #116]	@ (80014e8 <Motor_Set_PWM_Duty+0x16c>)
 8001472:	4618      	mov	r0, r3
 8001474:	f7ff fd70 	bl	8000f58 <__aeabi_fdiv>
 8001478:	4603      	mov	r3, r0
 800147a:	617b      	str	r3, [r7, #20]

    uint32_t tim_arr_val = __HAL_TIM_GET_AUTORELOAD(&htim_motor);
 800147c:	4b1b      	ldr	r3, [pc, #108]	@ (80014ec <Motor_Set_PWM_Duty+0x170>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001482:	613b      	str	r3, [r7, #16]
    uint32_t tim_ccr_val = (uint32_t)(duty_percentage * tim_arr_val);
 8001484:	6938      	ldr	r0, [r7, #16]
 8001486:	f7ff fc5b 	bl	8000d40 <__aeabi_ui2f>
 800148a:	4603      	mov	r3, r0
 800148c:	6979      	ldr	r1, [r7, #20]
 800148e:	4618      	mov	r0, r3
 8001490:	f7ff fcae 	bl	8000df0 <__aeabi_fmul>
 8001494:	4603      	mov	r3, r0
 8001496:	4618      	mov	r0, r3
 8001498:	f7ff fe96 	bl	80011c8 <__aeabi_f2uiz>
 800149c:	4603      	mov	r3, r0
 800149e:	60fb      	str	r3, [r7, #12]

    __HAL_TIM_SET_COMPARE(&htim_motor, motor->pwm_channel, tim_ccr_val);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d104      	bne.n	80014b2 <Motor_Set_PWM_Duty+0x136>
 80014a8:	4b10      	ldr	r3, [pc, #64]	@ (80014ec <Motor_Set_PWM_Duty+0x170>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	68fa      	ldr	r2, [r7, #12]
 80014ae:	635a      	str	r2, [r3, #52]	@ 0x34
 80014b0:	e015      	b.n	80014de <Motor_Set_PWM_Duty+0x162>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	2b04      	cmp	r3, #4
 80014b8:	d104      	bne.n	80014c4 <Motor_Set_PWM_Duty+0x148>
 80014ba:	4b0c      	ldr	r3, [pc, #48]	@ (80014ec <Motor_Set_PWM_Duty+0x170>)
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	6393      	str	r3, [r2, #56]	@ 0x38
 80014c2:	e00c      	b.n	80014de <Motor_Set_PWM_Duty+0x162>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	2b08      	cmp	r3, #8
 80014ca:	d104      	bne.n	80014d6 <Motor_Set_PWM_Duty+0x15a>
 80014cc:	4b07      	ldr	r3, [pc, #28]	@ (80014ec <Motor_Set_PWM_Duty+0x170>)
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80014d4:	e003      	b.n	80014de <Motor_Set_PWM_Duty+0x162>
 80014d6:	4b05      	ldr	r3, [pc, #20]	@ (80014ec <Motor_Set_PWM_Duty+0x170>)
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	6413      	str	r3, [r2, #64]	@ 0x40

    return STATUS_OK;
 80014de:	2300      	movs	r3, #0
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3718      	adds	r7, #24
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	437f0000 	.word	0x437f0000
 80014ec:	200000fc 	.word	0x200000fc

080014f0 <Motor_Start>:

status_t Motor_Start(Motor_t *motor)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
    Motor_SetDirection(motor, motor->direction);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	f993 3000 	ldrsb.w	r3, [r3]
 80014fe:	4619      	mov	r1, r3
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f000 f815 	bl	8001530 <Motor_SetDirection>
    HAL_StatusTypeDef ret = HAL_TIM_PWM_Start(&htim_motor, motor->pwm_channel);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	4619      	mov	r1, r3
 800150c:	4807      	ldr	r0, [pc, #28]	@ (800152c <Motor_Start+0x3c>)
 800150e:	f00a fd79 	bl	800c004 <HAL_TIM_PWM_Start>
 8001512:	4603      	mov	r3, r0
 8001514:	73fb      	strb	r3, [r7, #15]

    if (ret != HAL_OK) return STATUS_FAIL;
 8001516:	7bfb      	ldrb	r3, [r7, #15]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d002      	beq.n	8001522 <Motor_Start+0x32>
 800151c:	f04f 33ff 	mov.w	r3, #4294967295
 8001520:	e000      	b.n	8001524 <Motor_Start+0x34>

    return STATUS_OK;
 8001522:	2300      	movs	r3, #0
}
 8001524:	4618      	mov	r0, r3
 8001526:	3710      	adds	r7, #16
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	200000fc 	.word	0x200000fc

08001530 <Motor_SetDirection>:

    return STATUS_OK;
}

status_t Motor_SetDirection(Motor_t *motor, int8_t direction)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	460b      	mov	r3, r1
 800153a:	70fb      	strb	r3, [r7, #3]
    motor->direction = direction;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	78fa      	ldrb	r2, [r7, #3]
 8001540:	701a      	strb	r2, [r3, #0]

    switch (direction)
 8001542:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800154a:	d00d      	beq.n	8001568 <Motor_SetDirection+0x38>
 800154c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001550:	db13      	blt.n	800157a <Motor_SetDirection+0x4a>
 8001552:	2b01      	cmp	r3, #1
 8001554:	d811      	bhi.n	800157a <Motor_SetDirection+0x4a>
    {
    case DIRECTION_FORWARD:
    case DIRECTION_STOP:
        HAL_GPIO_WritePin(motor->direction_port, motor->direction_pin, GPIO_PIN_RESET);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6898      	ldr	r0, [r3, #8]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	899b      	ldrh	r3, [r3, #12]
 800155e:	2200      	movs	r2, #0
 8001560:	4619      	mov	r1, r3
 8001562:	f009 ff3b 	bl	800b3dc <HAL_GPIO_WritePin>
        break;
 8001566:	e009      	b.n	800157c <Motor_SetDirection+0x4c>
    case DIRECTION_BACKWARD:
        HAL_GPIO_WritePin(motor->direction_port, motor->direction_pin, GPIO_PIN_SET);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6898      	ldr	r0, [r3, #8]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	899b      	ldrh	r3, [r3, #12]
 8001570:	2201      	movs	r2, #1
 8001572:	4619      	mov	r1, r3
 8001574:	f009 ff32 	bl	800b3dc <HAL_GPIO_WritePin>
        break;
 8001578:	e000      	b.n	800157c <Motor_SetDirection+0x4c>
    default:
        break;
 800157a:	bf00      	nop
    }

    return STATUS_OK;
 800157c:	2300      	movs	r3, #0
}
 800157e:	4618      	mov	r0, r3
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <Encoder_Init>:
#include "encoder.h"

Encoder_t* Encoder_Init(Encoder_Handle_t handle)
{
 8001586:	b580      	push	{r7, lr}
 8001588:	b084      	sub	sp, #16
 800158a:	af00      	add	r7, sp, #0
 800158c:	463b      	mov	r3, r7
 800158e:	e883 0003 	stmia.w	r3, {r0, r1}
    Encoder_t* object = calloc(1, sizeof(Encoder_t));
 8001592:	210c      	movs	r1, #12
 8001594:	2001      	movs	r0, #1
 8001596:	f00e fd9d 	bl	80100d4 <calloc>
 800159a:	4603      	mov	r3, r0
 800159c:	60fb      	str	r3, [r7, #12]

    object->tick = 0;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	2200      	movs	r2, #0
 80015a2:	801a      	strh	r2, [r3, #0]
    object->max_count = handle.max_count;
 80015a4:	683a      	ldr	r2, [r7, #0]
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	605a      	str	r2, [r3, #4]
    object->tick_read_channel = handle.tick_read_channel;
 80015aa:	88bb      	ldrh	r3, [r7, #4]
 80015ac:	461a      	mov	r2, r3
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	609a      	str	r2, [r3, #8]

    return object;
 80015b2:	68fb      	ldr	r3, [r7, #12]
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3710      	adds	r7, #16
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}

080015bc <Encoder_Start>:

status_t Encoder_Start(Encoder_t *encoder)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef ret = HAL_TIM_IC_Start_IT(&htim_encoder, encoder->tick_read_channel);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	4619      	mov	r1, r3
 80015ca:	4808      	ldr	r0, [pc, #32]	@ (80015ec <Encoder_Start+0x30>)
 80015cc:	f00a fe2c 	bl	800c228 <HAL_TIM_IC_Start_IT>
 80015d0:	4603      	mov	r3, r0
 80015d2:	73fb      	strb	r3, [r7, #15]

    if (ret != HAL_OK) return STATUS_FAIL;
 80015d4:	7bfb      	ldrb	r3, [r7, #15]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d002      	beq.n	80015e0 <Encoder_Start+0x24>
 80015da:	f04f 33ff 	mov.w	r3, #4294967295
 80015de:	e000      	b.n	80015e2 <Encoder_Start+0x26>

    return STATUS_OK;
 80015e0:	2300      	movs	r3, #0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3710      	adds	r7, #16
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	20000144 	.word	0x20000144

080015f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015f4:	f008 ff6a 	bl	800a4cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015f8:	f000 f811 	bl	800161e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015fc:	f000 fa20 	bl	8001a40 <MX_GPIO_Init>
  MX_DMA_Init();
 8001600:	f000 f9f8 	bl	80019f4 <MX_DMA_Init>
  MX_TIM1_Init();
 8001604:	f000 f874 	bl	80016f0 <MX_TIM1_Init>
  MX_TIM8_Init();
 8001608:	f000 f936 	bl	8001878 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 800160c:	f000 f9c8 	bl	80019a0 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001610:	f000 f840 	bl	8001694 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  setup();
 8001614:	f006 fe1e 	bl	8008254 <setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  loop();
 8001618:	f006 fe50 	bl	80082bc <loop>
 800161c:	e7fc      	b.n	8001618 <main+0x28>

0800161e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800161e:	b580      	push	{r7, lr}
 8001620:	b090      	sub	sp, #64	@ 0x40
 8001622:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001624:	f107 0318 	add.w	r3, r7, #24
 8001628:	2228      	movs	r2, #40	@ 0x28
 800162a:	2100      	movs	r1, #0
 800162c:	4618      	mov	r0, r3
 800162e:	f00e fe59 	bl	80102e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001632:	1d3b      	adds	r3, r7, #4
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	605a      	str	r2, [r3, #4]
 800163a:	609a      	str	r2, [r3, #8]
 800163c:	60da      	str	r2, [r3, #12]
 800163e:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001640:	2302      	movs	r3, #2
 8001642:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001644:	2301      	movs	r3, #1
 8001646:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001648:	2310      	movs	r3, #16
 800164a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800164c:	2300      	movs	r3, #0
 800164e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001650:	f107 0318 	add.w	r3, r7, #24
 8001654:	4618      	mov	r0, r3
 8001656:	f00a f81d 	bl	800b694 <HAL_RCC_OscConfig>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001660:	f000 fa4a 	bl	8001af8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001664:	230f      	movs	r3, #15
 8001666:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001668:	2300      	movs	r3, #0
 800166a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800166c:	2300      	movs	r3, #0
 800166e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001670:	2300      	movs	r3, #0
 8001672:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001674:	2300      	movs	r3, #0
 8001676:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001678:	1d3b      	adds	r3, r7, #4
 800167a:	2100      	movs	r1, #0
 800167c:	4618      	mov	r0, r3
 800167e:	f00a fa8b 	bl	800bb98 <HAL_RCC_ClockConfig>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001688:	f000 fa36 	bl	8001af8 <Error_Handler>
  }
}
 800168c:	bf00      	nop
 800168e:	3740      	adds	r7, #64	@ 0x40
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}

08001694 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001698:	4b12      	ldr	r3, [pc, #72]	@ (80016e4 <MX_I2C1_Init+0x50>)
 800169a:	4a13      	ldr	r2, [pc, #76]	@ (80016e8 <MX_I2C1_Init+0x54>)
 800169c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800169e:	4b11      	ldr	r3, [pc, #68]	@ (80016e4 <MX_I2C1_Init+0x50>)
 80016a0:	4a12      	ldr	r2, [pc, #72]	@ (80016ec <MX_I2C1_Init+0x58>)
 80016a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016a4:	4b0f      	ldr	r3, [pc, #60]	@ (80016e4 <MX_I2C1_Init+0x50>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80016aa:	4b0e      	ldr	r3, [pc, #56]	@ (80016e4 <MX_I2C1_Init+0x50>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016b0:	4b0c      	ldr	r3, [pc, #48]	@ (80016e4 <MX_I2C1_Init+0x50>)
 80016b2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80016b6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016b8:	4b0a      	ldr	r3, [pc, #40]	@ (80016e4 <MX_I2C1_Init+0x50>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80016be:	4b09      	ldr	r3, [pc, #36]	@ (80016e4 <MX_I2C1_Init+0x50>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016c4:	4b07      	ldr	r3, [pc, #28]	@ (80016e4 <MX_I2C1_Init+0x50>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016ca:	4b06      	ldr	r3, [pc, #24]	@ (80016e4 <MX_I2C1_Init+0x50>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016d0:	4804      	ldr	r0, [pc, #16]	@ (80016e4 <MX_I2C1_Init+0x50>)
 80016d2:	f009 fe9b 	bl	800b40c <HAL_I2C_Init>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80016dc:	f000 fa0c 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016e0:	bf00      	nop
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	200000a8 	.word	0x200000a8
 80016e8:	40005400 	.word	0x40005400
 80016ec:	00061a80 	.word	0x00061a80

080016f0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b096      	sub	sp, #88	@ 0x58
 80016f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016f6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80016fa:	2200      	movs	r2, #0
 80016fc:	601a      	str	r2, [r3, #0]
 80016fe:	605a      	str	r2, [r3, #4]
 8001700:	609a      	str	r2, [r3, #8]
 8001702:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001704:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800170e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001712:	2200      	movs	r2, #0
 8001714:	601a      	str	r2, [r3, #0]
 8001716:	605a      	str	r2, [r3, #4]
 8001718:	609a      	str	r2, [r3, #8]
 800171a:	60da      	str	r2, [r3, #12]
 800171c:	611a      	str	r2, [r3, #16]
 800171e:	615a      	str	r2, [r3, #20]
 8001720:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001722:	1d3b      	adds	r3, r7, #4
 8001724:	2220      	movs	r2, #32
 8001726:	2100      	movs	r1, #0
 8001728:	4618      	mov	r0, r3
 800172a:	f00e fddb 	bl	80102e4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim_motor.Instance = TIM1;
 800172e:	4b50      	ldr	r3, [pc, #320]	@ (8001870 <MX_TIM1_Init+0x180>)
 8001730:	4a50      	ldr	r2, [pc, #320]	@ (8001874 <MX_TIM1_Init+0x184>)
 8001732:	601a      	str	r2, [r3, #0]
  htim_motor.Init.Prescaler = 8-1;
 8001734:	4b4e      	ldr	r3, [pc, #312]	@ (8001870 <MX_TIM1_Init+0x180>)
 8001736:	2207      	movs	r2, #7
 8001738:	605a      	str	r2, [r3, #4]
  htim_motor.Init.CounterMode = TIM_COUNTERMODE_UP;
 800173a:	4b4d      	ldr	r3, [pc, #308]	@ (8001870 <MX_TIM1_Init+0x180>)
 800173c:	2200      	movs	r2, #0
 800173e:	609a      	str	r2, [r3, #8]
  htim_motor.Init.Period = 100-1;
 8001740:	4b4b      	ldr	r3, [pc, #300]	@ (8001870 <MX_TIM1_Init+0x180>)
 8001742:	2263      	movs	r2, #99	@ 0x63
 8001744:	60da      	str	r2, [r3, #12]
  htim_motor.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001746:	4b4a      	ldr	r3, [pc, #296]	@ (8001870 <MX_TIM1_Init+0x180>)
 8001748:	2200      	movs	r2, #0
 800174a:	611a      	str	r2, [r3, #16]
  htim_motor.Init.RepetitionCounter = 0;
 800174c:	4b48      	ldr	r3, [pc, #288]	@ (8001870 <MX_TIM1_Init+0x180>)
 800174e:	2200      	movs	r2, #0
 8001750:	615a      	str	r2, [r3, #20]
  htim_motor.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001752:	4b47      	ldr	r3, [pc, #284]	@ (8001870 <MX_TIM1_Init+0x180>)
 8001754:	2200      	movs	r2, #0
 8001756:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim_motor) != HAL_OK)
 8001758:	4845      	ldr	r0, [pc, #276]	@ (8001870 <MX_TIM1_Init+0x180>)
 800175a:	f00a fbab 	bl	800beb4 <HAL_TIM_Base_Init>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001764:	f000 f9c8 	bl	8001af8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001768:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800176c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim_motor, &sClockSourceConfig) != HAL_OK)
 800176e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001772:	4619      	mov	r1, r3
 8001774:	483e      	ldr	r0, [pc, #248]	@ (8001870 <MX_TIM1_Init+0x180>)
 8001776:	f00b f8d7 	bl	800c928 <HAL_TIM_ConfigClockSource>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001780:	f000 f9ba 	bl	8001af8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim_motor) != HAL_OK)
 8001784:	483a      	ldr	r0, [pc, #232]	@ (8001870 <MX_TIM1_Init+0x180>)
 8001786:	f00a fbe4 	bl	800bf52 <HAL_TIM_PWM_Init>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001790:	f000 f9b2 	bl	8001af8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001794:	2300      	movs	r3, #0
 8001796:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001798:	2300      	movs	r3, #0
 800179a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim_motor, &sMasterConfig) != HAL_OK)
 800179c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80017a0:	4619      	mov	r1, r3
 80017a2:	4833      	ldr	r0, [pc, #204]	@ (8001870 <MX_TIM1_Init+0x180>)
 80017a4:	f00b fda6 	bl	800d2f4 <HAL_TIMEx_MasterConfigSynchronization>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80017ae:	f000 f9a3 	bl	8001af8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017b2:	2360      	movs	r3, #96	@ 0x60
 80017b4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80017b6:	2300      	movs	r3, #0
 80017b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017ba:	2300      	movs	r3, #0
 80017bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80017be:	2300      	movs	r3, #0
 80017c0:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017c2:	2300      	movs	r3, #0
 80017c4:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80017c6:	2300      	movs	r3, #0
 80017c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80017ca:	2300      	movs	r3, #0
 80017cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim_motor, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017d2:	2200      	movs	r2, #0
 80017d4:	4619      	mov	r1, r3
 80017d6:	4826      	ldr	r0, [pc, #152]	@ (8001870 <MX_TIM1_Init+0x180>)
 80017d8:	f00a ffe4 	bl	800c7a4 <HAL_TIM_PWM_ConfigChannel>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80017e2:	f000 f989 	bl	8001af8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim_motor, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017ea:	2204      	movs	r2, #4
 80017ec:	4619      	mov	r1, r3
 80017ee:	4820      	ldr	r0, [pc, #128]	@ (8001870 <MX_TIM1_Init+0x180>)
 80017f0:	f00a ffd8 	bl	800c7a4 <HAL_TIM_PWM_ConfigChannel>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 80017fa:	f000 f97d 	bl	8001af8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim_motor, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80017fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001802:	2208      	movs	r2, #8
 8001804:	4619      	mov	r1, r3
 8001806:	481a      	ldr	r0, [pc, #104]	@ (8001870 <MX_TIM1_Init+0x180>)
 8001808:	f00a ffcc 	bl	800c7a4 <HAL_TIM_PWM_ConfigChannel>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8001812:	f000 f971 	bl	8001af8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim_motor, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001816:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800181a:	220c      	movs	r2, #12
 800181c:	4619      	mov	r1, r3
 800181e:	4814      	ldr	r0, [pc, #80]	@ (8001870 <MX_TIM1_Init+0x180>)
 8001820:	f00a ffc0 	bl	800c7a4 <HAL_TIM_PWM_ConfigChannel>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <MX_TIM1_Init+0x13e>
  {
    Error_Handler();
 800182a:	f000 f965 	bl	8001af8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800182e:	2300      	movs	r3, #0
 8001830:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001832:	2300      	movs	r3, #0
 8001834:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001836:	2300      	movs	r3, #0
 8001838:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800183a:	2300      	movs	r3, #0
 800183c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800183e:	2300      	movs	r3, #0
 8001840:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001842:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001846:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001848:	2300      	movs	r3, #0
 800184a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim_motor, &sBreakDeadTimeConfig) != HAL_OK)
 800184c:	1d3b      	adds	r3, r7, #4
 800184e:	4619      	mov	r1, r3
 8001850:	4807      	ldr	r0, [pc, #28]	@ (8001870 <MX_TIM1_Init+0x180>)
 8001852:	f00b fdbb 	bl	800d3cc <HAL_TIMEx_ConfigBreakDeadTime>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <MX_TIM1_Init+0x170>
  {
    Error_Handler();
 800185c:	f000 f94c 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim_motor);
 8001860:	4803      	ldr	r0, [pc, #12]	@ (8001870 <MX_TIM1_Init+0x180>)
 8001862:	f008 fc41 	bl	800a0e8 <HAL_TIM_MspPostInit>

}
 8001866:	bf00      	nop
 8001868:	3758      	adds	r7, #88	@ 0x58
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	200000fc 	.word	0x200000fc
 8001874:	40012c00 	.word	0x40012c00

08001878 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b08a      	sub	sp, #40	@ 0x28
 800187c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800187e:	f107 0318 	add.w	r3, r7, #24
 8001882:	2200      	movs	r2, #0
 8001884:	601a      	str	r2, [r3, #0]
 8001886:	605a      	str	r2, [r3, #4]
 8001888:	609a      	str	r2, [r3, #8]
 800188a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800188c:	f107 0310 	add.w	r3, r7, #16
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001896:	463b      	mov	r3, r7
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]
 800189c:	605a      	str	r2, [r3, #4]
 800189e:	609a      	str	r2, [r3, #8]
 80018a0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim_encoder.Instance = TIM8;
 80018a2:	4b3d      	ldr	r3, [pc, #244]	@ (8001998 <MX_TIM8_Init+0x120>)
 80018a4:	4a3d      	ldr	r2, [pc, #244]	@ (800199c <MX_TIM8_Init+0x124>)
 80018a6:	601a      	str	r2, [r3, #0]
  htim_encoder.Init.Prescaler = 0;
 80018a8:	4b3b      	ldr	r3, [pc, #236]	@ (8001998 <MX_TIM8_Init+0x120>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	605a      	str	r2, [r3, #4]
  htim_encoder.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018ae:	4b3a      	ldr	r3, [pc, #232]	@ (8001998 <MX_TIM8_Init+0x120>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	609a      	str	r2, [r3, #8]
  htim_encoder.Init.Period = 65535;
 80018b4:	4b38      	ldr	r3, [pc, #224]	@ (8001998 <MX_TIM8_Init+0x120>)
 80018b6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80018ba:	60da      	str	r2, [r3, #12]
  htim_encoder.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018bc:	4b36      	ldr	r3, [pc, #216]	@ (8001998 <MX_TIM8_Init+0x120>)
 80018be:	2200      	movs	r2, #0
 80018c0:	611a      	str	r2, [r3, #16]
  htim_encoder.Init.RepetitionCounter = 0;
 80018c2:	4b35      	ldr	r3, [pc, #212]	@ (8001998 <MX_TIM8_Init+0x120>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	615a      	str	r2, [r3, #20]
  htim_encoder.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018c8:	4b33      	ldr	r3, [pc, #204]	@ (8001998 <MX_TIM8_Init+0x120>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim_encoder) != HAL_OK)
 80018ce:	4832      	ldr	r0, [pc, #200]	@ (8001998 <MX_TIM8_Init+0x120>)
 80018d0:	f00a faf0 	bl	800beb4 <HAL_TIM_Base_Init>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <MX_TIM8_Init+0x66>
  {
    Error_Handler();
 80018da:	f000 f90d 	bl	8001af8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018e2:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim_encoder, &sClockSourceConfig) != HAL_OK)
 80018e4:	f107 0318 	add.w	r3, r7, #24
 80018e8:	4619      	mov	r1, r3
 80018ea:	482b      	ldr	r0, [pc, #172]	@ (8001998 <MX_TIM8_Init+0x120>)
 80018ec:	f00b f81c 	bl	800c928 <HAL_TIM_ConfigClockSource>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 80018f6:	f000 f8ff 	bl	8001af8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim_encoder) != HAL_OK)
 80018fa:	4827      	ldr	r0, [pc, #156]	@ (8001998 <MX_TIM8_Init+0x120>)
 80018fc:	f00a fc3c 	bl	800c178 <HAL_TIM_IC_Init>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <MX_TIM8_Init+0x92>
  {
    Error_Handler();
 8001906:	f000 f8f7 	bl	8001af8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800190a:	2300      	movs	r3, #0
 800190c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800190e:	2300      	movs	r3, #0
 8001910:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim_encoder, &sMasterConfig) != HAL_OK)
 8001912:	f107 0310 	add.w	r3, r7, #16
 8001916:	4619      	mov	r1, r3
 8001918:	481f      	ldr	r0, [pc, #124]	@ (8001998 <MX_TIM8_Init+0x120>)
 800191a:	f00b fceb 	bl	800d2f4 <HAL_TIMEx_MasterConfigSynchronization>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <MX_TIM8_Init+0xb0>
  {
    Error_Handler();
 8001924:	f000 f8e8 	bl	8001af8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001928:	2300      	movs	r3, #0
 800192a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800192c:	2301      	movs	r3, #1
 800192e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001930:	2300      	movs	r3, #0
 8001932:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 8001934:	230f      	movs	r3, #15
 8001936:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim_encoder, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001938:	463b      	mov	r3, r7
 800193a:	2200      	movs	r2, #0
 800193c:	4619      	mov	r1, r3
 800193e:	4816      	ldr	r0, [pc, #88]	@ (8001998 <MX_TIM8_Init+0x120>)
 8001940:	f00a fe94 	bl	800c66c <HAL_TIM_IC_ConfigChannel>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 800194a:	f000 f8d5 	bl	8001af8 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim_encoder, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800194e:	463b      	mov	r3, r7
 8001950:	2204      	movs	r2, #4
 8001952:	4619      	mov	r1, r3
 8001954:	4810      	ldr	r0, [pc, #64]	@ (8001998 <MX_TIM8_Init+0x120>)
 8001956:	f00a fe89 	bl	800c66c <HAL_TIM_IC_ConfigChannel>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <MX_TIM8_Init+0xec>
  {
    Error_Handler();
 8001960:	f000 f8ca 	bl	8001af8 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim_encoder, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001964:	463b      	mov	r3, r7
 8001966:	2208      	movs	r2, #8
 8001968:	4619      	mov	r1, r3
 800196a:	480b      	ldr	r0, [pc, #44]	@ (8001998 <MX_TIM8_Init+0x120>)
 800196c:	f00a fe7e 	bl	800c66c <HAL_TIM_IC_ConfigChannel>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <MX_TIM8_Init+0x102>
  {
    Error_Handler();
 8001976:	f000 f8bf 	bl	8001af8 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim_encoder, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 800197a:	463b      	mov	r3, r7
 800197c:	220c      	movs	r2, #12
 800197e:	4619      	mov	r1, r3
 8001980:	4805      	ldr	r0, [pc, #20]	@ (8001998 <MX_TIM8_Init+0x120>)
 8001982:	f00a fe73 	bl	800c66c <HAL_TIM_IC_ConfigChannel>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 800198c:	f000 f8b4 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001990:	bf00      	nop
 8001992:	3728      	adds	r7, #40	@ 0x28
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	20000144 	.word	0x20000144
 800199c:	40013400 	.word	0x40013400

080019a0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart_rosserial.Instance = USART1;
 80019a4:	4b11      	ldr	r3, [pc, #68]	@ (80019ec <MX_USART1_UART_Init+0x4c>)
 80019a6:	4a12      	ldr	r2, [pc, #72]	@ (80019f0 <MX_USART1_UART_Init+0x50>)
 80019a8:	601a      	str	r2, [r3, #0]
  huart_rosserial.Init.BaudRate = 115200;
 80019aa:	4b10      	ldr	r3, [pc, #64]	@ (80019ec <MX_USART1_UART_Init+0x4c>)
 80019ac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80019b0:	605a      	str	r2, [r3, #4]
  huart_rosserial.Init.WordLength = UART_WORDLENGTH_8B;
 80019b2:	4b0e      	ldr	r3, [pc, #56]	@ (80019ec <MX_USART1_UART_Init+0x4c>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	609a      	str	r2, [r3, #8]
  huart_rosserial.Init.StopBits = UART_STOPBITS_1;
 80019b8:	4b0c      	ldr	r3, [pc, #48]	@ (80019ec <MX_USART1_UART_Init+0x4c>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	60da      	str	r2, [r3, #12]
  huart_rosserial.Init.Parity = UART_PARITY_NONE;
 80019be:	4b0b      	ldr	r3, [pc, #44]	@ (80019ec <MX_USART1_UART_Init+0x4c>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	611a      	str	r2, [r3, #16]
  huart_rosserial.Init.Mode = UART_MODE_TX_RX;
 80019c4:	4b09      	ldr	r3, [pc, #36]	@ (80019ec <MX_USART1_UART_Init+0x4c>)
 80019c6:	220c      	movs	r2, #12
 80019c8:	615a      	str	r2, [r3, #20]
  huart_rosserial.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019ca:	4b08      	ldr	r3, [pc, #32]	@ (80019ec <MX_USART1_UART_Init+0x4c>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	619a      	str	r2, [r3, #24]
  huart_rosserial.Init.OverSampling = UART_OVERSAMPLING_16;
 80019d0:	4b06      	ldr	r3, [pc, #24]	@ (80019ec <MX_USART1_UART_Init+0x4c>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart_rosserial) != HAL_OK)
 80019d6:	4805      	ldr	r0, [pc, #20]	@ (80019ec <MX_USART1_UART_Init+0x4c>)
 80019d8:	f00b fd5b 	bl	800d492 <HAL_UART_Init>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80019e2:	f000 f889 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80019e6:	bf00      	nop
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	2000018c 	.word	0x2000018c
 80019f0:	40013800 	.word	0x40013800

080019f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80019fa:	4b10      	ldr	r3, [pc, #64]	@ (8001a3c <MX_DMA_Init+0x48>)
 80019fc:	695b      	ldr	r3, [r3, #20]
 80019fe:	4a0f      	ldr	r2, [pc, #60]	@ (8001a3c <MX_DMA_Init+0x48>)
 8001a00:	f043 0301 	orr.w	r3, r3, #1
 8001a04:	6153      	str	r3, [r2, #20]
 8001a06:	4b0d      	ldr	r3, [pc, #52]	@ (8001a3c <MX_DMA_Init+0x48>)
 8001a08:	695b      	ldr	r3, [r3, #20]
 8001a0a:	f003 0301 	and.w	r3, r3, #1
 8001a0e:	607b      	str	r3, [r7, #4]
 8001a10:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001a12:	2200      	movs	r2, #0
 8001a14:	2100      	movs	r1, #0
 8001a16:	200e      	movs	r0, #14
 8001a18:	f008 fe91 	bl	800a73e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001a1c:	200e      	movs	r0, #14
 8001a1e:	f008 feaa 	bl	800a776 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001a22:	2200      	movs	r2, #0
 8001a24:	2100      	movs	r1, #0
 8001a26:	200f      	movs	r0, #15
 8001a28:	f008 fe89 	bl	800a73e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001a2c:	200f      	movs	r0, #15
 8001a2e:	f008 fea2 	bl	800a776 <HAL_NVIC_EnableIRQ>

}
 8001a32:	bf00      	nop
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	40021000 	.word	0x40021000

08001a40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b088      	sub	sp, #32
 8001a44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a46:	f107 0310 	add.w	r3, r7, #16
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	601a      	str	r2, [r3, #0]
 8001a4e:	605a      	str	r2, [r3, #4]
 8001a50:	609a      	str	r2, [r3, #8]
 8001a52:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a54:	4b26      	ldr	r3, [pc, #152]	@ (8001af0 <MX_GPIO_Init+0xb0>)
 8001a56:	699b      	ldr	r3, [r3, #24]
 8001a58:	4a25      	ldr	r2, [pc, #148]	@ (8001af0 <MX_GPIO_Init+0xb0>)
 8001a5a:	f043 0310 	orr.w	r3, r3, #16
 8001a5e:	6193      	str	r3, [r2, #24]
 8001a60:	4b23      	ldr	r3, [pc, #140]	@ (8001af0 <MX_GPIO_Init+0xb0>)
 8001a62:	699b      	ldr	r3, [r3, #24]
 8001a64:	f003 0310 	and.w	r3, r3, #16
 8001a68:	60fb      	str	r3, [r7, #12]
 8001a6a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a6c:	4b20      	ldr	r3, [pc, #128]	@ (8001af0 <MX_GPIO_Init+0xb0>)
 8001a6e:	699b      	ldr	r3, [r3, #24]
 8001a70:	4a1f      	ldr	r2, [pc, #124]	@ (8001af0 <MX_GPIO_Init+0xb0>)
 8001a72:	f043 0320 	orr.w	r3, r3, #32
 8001a76:	6193      	str	r3, [r2, #24]
 8001a78:	4b1d      	ldr	r3, [pc, #116]	@ (8001af0 <MX_GPIO_Init+0xb0>)
 8001a7a:	699b      	ldr	r3, [r3, #24]
 8001a7c:	f003 0320 	and.w	r3, r3, #32
 8001a80:	60bb      	str	r3, [r7, #8]
 8001a82:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a84:	4b1a      	ldr	r3, [pc, #104]	@ (8001af0 <MX_GPIO_Init+0xb0>)
 8001a86:	699b      	ldr	r3, [r3, #24]
 8001a88:	4a19      	ldr	r2, [pc, #100]	@ (8001af0 <MX_GPIO_Init+0xb0>)
 8001a8a:	f043 0304 	orr.w	r3, r3, #4
 8001a8e:	6193      	str	r3, [r2, #24]
 8001a90:	4b17      	ldr	r3, [pc, #92]	@ (8001af0 <MX_GPIO_Init+0xb0>)
 8001a92:	699b      	ldr	r3, [r3, #24]
 8001a94:	f003 0304 	and.w	r3, r3, #4
 8001a98:	607b      	str	r3, [r7, #4]
 8001a9a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a9c:	4b14      	ldr	r3, [pc, #80]	@ (8001af0 <MX_GPIO_Init+0xb0>)
 8001a9e:	699b      	ldr	r3, [r3, #24]
 8001aa0:	4a13      	ldr	r2, [pc, #76]	@ (8001af0 <MX_GPIO_Init+0xb0>)
 8001aa2:	f043 0308 	orr.w	r3, r3, #8
 8001aa6:	6193      	str	r3, [r2, #24]
 8001aa8:	4b11      	ldr	r3, [pc, #68]	@ (8001af0 <MX_GPIO_Init+0xb0>)
 8001aaa:	699b      	ldr	r3, [r3, #24]
 8001aac:	f003 0308 	and.w	r3, r3, #8
 8001ab0:	603b      	str	r3, [r7, #0]
 8001ab2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001aba:	480e      	ldr	r0, [pc, #56]	@ (8001af4 <MX_GPIO_Init+0xb4>)
 8001abc:	f009 fc8e 	bl	800b3dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	210f      	movs	r1, #15
 8001ac4:	480b      	ldr	r0, [pc, #44]	@ (8001af4 <MX_GPIO_Init+0xb4>)
 8001ac6:	f009 fc89 	bl	800b3dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_Pin PC0 PC1 PC2
                           PC3 */
  GPIO_InitStruct.Pin = LED_Pin|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 8001aca:	f242 030f 	movw	r3, #8207	@ 0x200f
 8001ace:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad8:	2302      	movs	r3, #2
 8001ada:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001adc:	f107 0310 	add.w	r3, r7, #16
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4804      	ldr	r0, [pc, #16]	@ (8001af4 <MX_GPIO_Init+0xb4>)
 8001ae4:	f009 fae6 	bl	800b0b4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ae8:	bf00      	nop
 8001aea:	3720      	adds	r7, #32
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	40021000 	.word	0x40021000
 8001af4:	40011000 	.word	0x40011000

08001af8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001afc:	b672      	cpsid	i
}
 8001afe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b00:	bf00      	nop
 8001b02:	e7fd      	b.n	8001b00 <Error_Handler+0x8>

08001b04 <_ZSt3cosf>:
  using ::cos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  cos(float __x)
  { return __builtin_cosf(__x); }
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f00c fd49 	bl	800e5a4 <cosf>
 8001b12:	4603      	mov	r3, r0
 8001b14:	4618      	mov	r0, r3
 8001b16:	3708      	adds	r7, #8
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <_ZSt3sinf>:
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f00c fd75 	bl	800e614 <sinf>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3708      	adds	r7, #8
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	601a      	str	r2, [r3, #0]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2200      	movs	r2, #0
 8001b46:	605a      	str	r2, [r3, #4]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bc80      	pop	{r7}
 8001b52:	4770      	bx	lr

08001b54 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	4a04      	ldr	r2, [pc, #16]	@ (8001b70 <_ZN3ros3MsgC1Ev+0x1c>)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	601a      	str	r2, [r3, #0]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4618      	mov	r0, r3
 8001b66:	370c      	adds	r7, #12
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bc80      	pop	{r7}
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	08010c74 	.word	0x08010c74

08001b74 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
      data()
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7ff ffe8 	bl	8001b54 <_ZN3ros3MsgC1Ev>
 8001b84:	4a06      	ldr	r2, [pc, #24]	@ (8001ba0 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	601a      	str	r2, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	3304      	adds	r3, #4
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7ff ffd0 	bl	8001b34 <_ZN3ros4TimeC1Ev>
    {
    }
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	4618      	mov	r0, r3
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	08010c5c 	.word	0x08010c5c

08001ba4 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001ba4:	b480      	push	{r7}
 8001ba6:	b085      	sub	sp, #20
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6859      	ldr	r1, [r3, #4]
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	683a      	ldr	r2, [r7, #0]
 8001bba:	4413      	add	r3, r2
 8001bbc:	b2ca      	uxtb	r2, r1
 8001bbe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	0a19      	lsrs	r1, r3, #8
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	3301      	adds	r3, #1
 8001bca:	683a      	ldr	r2, [r7, #0]
 8001bcc:	4413      	add	r3, r2
 8001bce:	b2ca      	uxtb	r2, r1
 8001bd0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	0c19      	lsrs	r1, r3, #16
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	3302      	adds	r3, #2
 8001bdc:	683a      	ldr	r2, [r7, #0]
 8001bde:	4413      	add	r3, r2
 8001be0:	b2ca      	uxtb	r2, r1
 8001be2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	0e19      	lsrs	r1, r3, #24
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	3303      	adds	r3, #3
 8001bee:	683a      	ldr	r2, [r7, #0]
 8001bf0:	4413      	add	r3, r2
 8001bf2:	b2ca      	uxtb	r2, r1
 8001bf4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	3304      	adds	r3, #4
 8001bfa:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6899      	ldr	r1, [r3, #8]
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	683a      	ldr	r2, [r7, #0]
 8001c04:	4413      	add	r3, r2
 8001c06:	b2ca      	uxtb	r2, r1
 8001c08:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	0a19      	lsrs	r1, r3, #8
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	3301      	adds	r3, #1
 8001c14:	683a      	ldr	r2, [r7, #0]
 8001c16:	4413      	add	r3, r2
 8001c18:	b2ca      	uxtb	r2, r1
 8001c1a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	0c19      	lsrs	r1, r3, #16
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	3302      	adds	r3, #2
 8001c26:	683a      	ldr	r2, [r7, #0]
 8001c28:	4413      	add	r3, r2
 8001c2a:	b2ca      	uxtb	r2, r1
 8001c2c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	0e19      	lsrs	r1, r3, #24
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	3303      	adds	r3, #3
 8001c38:	683a      	ldr	r2, [r7, #0]
 8001c3a:	4413      	add	r3, r2
 8001c3c:	b2ca      	uxtb	r2, r1
 8001c3e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	3304      	adds	r3, #4
 8001c44:	60fb      	str	r3, [r7, #12]
      return offset;
 8001c46:	68fb      	ldr	r3, [r7, #12]
    }
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3714      	adds	r7, #20
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bc80      	pop	{r7}
 8001c50:	4770      	bx	lr

08001c52 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001c52:	b480      	push	{r7}
 8001c54:	b085      	sub	sp, #20
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
 8001c5a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	683a      	ldr	r2, [r7, #0]
 8001c64:	4413      	add	r3, r2
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	461a      	mov	r2, r3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685a      	ldr	r2, [r3, #4]
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	3301      	adds	r3, #1
 8001c76:	6839      	ldr	r1, [r7, #0]
 8001c78:	440b      	add	r3, r1
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	021b      	lsls	r3, r3, #8
 8001c7e:	431a      	orrs	r2, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685a      	ldr	r2, [r3, #4]
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	3302      	adds	r3, #2
 8001c8c:	6839      	ldr	r1, [r7, #0]
 8001c8e:	440b      	add	r3, r1
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	041b      	lsls	r3, r3, #16
 8001c94:	431a      	orrs	r2, r3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685a      	ldr	r2, [r3, #4]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	3303      	adds	r3, #3
 8001ca2:	6839      	ldr	r1, [r7, #0]
 8001ca4:	440b      	add	r3, r1
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	061b      	lsls	r3, r3, #24
 8001caa:	431a      	orrs	r2, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	3304      	adds	r3, #4
 8001cb4:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	683a      	ldr	r2, [r7, #0]
 8001cba:	4413      	add	r3, r2
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689a      	ldr	r2, [r3, #8]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	3301      	adds	r3, #1
 8001ccc:	6839      	ldr	r1, [r7, #0]
 8001cce:	440b      	add	r3, r1
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	021b      	lsls	r3, r3, #8
 8001cd4:	431a      	orrs	r2, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	689a      	ldr	r2, [r3, #8]
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	3302      	adds	r3, #2
 8001ce2:	6839      	ldr	r1, [r7, #0]
 8001ce4:	440b      	add	r3, r1
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	041b      	lsls	r3, r3, #16
 8001cea:	431a      	orrs	r2, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	689a      	ldr	r2, [r3, #8]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	3303      	adds	r3, #3
 8001cf8:	6839      	ldr	r1, [r7, #0]
 8001cfa:	440b      	add	r3, r1
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	061b      	lsls	r3, r3, #24
 8001d00:	431a      	orrs	r2, r3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	3304      	adds	r3, #4
 8001d0a:	60fb      	str	r3, [r7, #12]
     return offset;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
    }
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3714      	adds	r7, #20
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bc80      	pop	{r7}
 8001d16:	4770      	bx	lr

08001d18 <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	4b02      	ldr	r3, [pc, #8]	@ (8001d2c <_ZN8std_msgs4Time7getTypeEv+0x14>)
 8001d22:	4618      	mov	r0, r3
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bc80      	pop	{r7}
 8001d2a:	4770      	bx	lr
 8001d2c:	080104c8 	.word	0x080104c8

08001d30 <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	4b02      	ldr	r3, [pc, #8]	@ (8001d44 <_ZN8std_msgs4Time6getMD5Ev+0x14>)
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bc80      	pop	{r7}
 8001d42:	4770      	bx	lr
 8001d44:	080104d8 	.word	0x080104d8

08001d48 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7ff fefe 	bl	8001b54 <_ZN3ros3MsgC1Ev>
 8001d58:	4a0b      	ldr	r2, [pc, #44]	@ (8001d88 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	601a      	str	r2, [r3, #0]
      topic_id(0),
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2200      	movs	r2, #0
 8001d62:	809a      	strh	r2, [r3, #4]
      topic_name(""),
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	4a09      	ldr	r2, [pc, #36]	@ (8001d8c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001d68:	609a      	str	r2, [r3, #8]
      message_type(""),
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a07      	ldr	r2, [pc, #28]	@ (8001d8c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001d6e:	60da      	str	r2, [r3, #12]
      md5sum(""),
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	4a06      	ldr	r2, [pc, #24]	@ (8001d8c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001d74:	611a      	str	r2, [r3, #16]
      buffer_size(0)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	615a      	str	r2, [r3, #20]
    {
    }
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	08010c44 	.word	0x08010c44
 8001d8c:	080104fc 	.word	0x080104fc

08001d90 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b088      	sub	sp, #32
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	8899      	ldrh	r1, [r3, #4]
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	683a      	ldr	r2, [r7, #0]
 8001da6:	4413      	add	r3, r2
 8001da8:	b2ca      	uxtb	r2, r1
 8001daa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	889b      	ldrh	r3, [r3, #4]
 8001db0:	0a1b      	lsrs	r3, r3, #8
 8001db2:	b299      	uxth	r1, r3
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	3301      	adds	r3, #1
 8001db8:	683a      	ldr	r2, [r7, #0]
 8001dba:	4413      	add	r3, r2
 8001dbc:	b2ca      	uxtb	r2, r1
 8001dbe:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	3302      	adds	r3, #2
 8001dc4:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7fe fa2c 	bl	8000228 <strlen>
 8001dd0:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	683a      	ldr	r2, [r7, #0]
 8001dd6:	4413      	add	r3, r2
 8001dd8:	69b9      	ldr	r1, [r7, #24]
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f007 f8a6 	bl	8008f2c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	3304      	adds	r3, #4
 8001de4:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	683a      	ldr	r2, [r7, #0]
 8001dea:	18d0      	adds	r0, r2, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	4619      	mov	r1, r3
 8001df4:	f00e fafe 	bl	80103f4 <memcpy>
      offset += length_topic_name;
 8001df8:	69fa      	ldr	r2, [r7, #28]
 8001dfa:	69bb      	ldr	r3, [r7, #24]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7fe fa0f 	bl	8000228 <strlen>
 8001e0a:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	683a      	ldr	r2, [r7, #0]
 8001e10:	4413      	add	r3, r2
 8001e12:	6979      	ldr	r1, [r7, #20]
 8001e14:	4618      	mov	r0, r3
 8001e16:	f007 f889 	bl	8008f2c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	3304      	adds	r3, #4
 8001e1e:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	683a      	ldr	r2, [r7, #0]
 8001e24:	18d0      	adds	r0, r2, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	68db      	ldr	r3, [r3, #12]
 8001e2a:	697a      	ldr	r2, [r7, #20]
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	f00e fae1 	bl	80103f4 <memcpy>
      offset += length_message_type;
 8001e32:	69fa      	ldr	r2, [r7, #28]
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	4413      	add	r3, r2
 8001e38:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	691b      	ldr	r3, [r3, #16]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7fe f9f2 	bl	8000228 <strlen>
 8001e44:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	683a      	ldr	r2, [r7, #0]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	6939      	ldr	r1, [r7, #16]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f007 f86c 	bl	8008f2c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	3304      	adds	r3, #4
 8001e58:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	683a      	ldr	r2, [r7, #0]
 8001e5e:	18d0      	adds	r0, r2, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	691b      	ldr	r3, [r3, #16]
 8001e64:	693a      	ldr	r2, [r7, #16]
 8001e66:	4619      	mov	r1, r3
 8001e68:	f00e fac4 	bl	80103f4 <memcpy>
      offset += length_md5sum;
 8001e6c:	69fa      	ldr	r2, [r7, #28]
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	4413      	add	r3, r2
 8001e72:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	695b      	ldr	r3, [r3, #20]
 8001e78:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8001e7a:	68f9      	ldr	r1, [r7, #12]
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	683a      	ldr	r2, [r7, #0]
 8001e80:	4413      	add	r3, r2
 8001e82:	b2ca      	uxtb	r2, r1
 8001e84:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	0a19      	lsrs	r1, r3, #8
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	683a      	ldr	r2, [r7, #0]
 8001e90:	4413      	add	r3, r2
 8001e92:	b2ca      	uxtb	r2, r1
 8001e94:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	0c19      	lsrs	r1, r3, #16
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	3302      	adds	r3, #2
 8001e9e:	683a      	ldr	r2, [r7, #0]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	b2ca      	uxtb	r2, r1
 8001ea4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	0e19      	lsrs	r1, r3, #24
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	3303      	adds	r3, #3
 8001eae:	683a      	ldr	r2, [r7, #0]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	b2ca      	uxtb	r2, r1
 8001eb4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	3304      	adds	r3, #4
 8001eba:	61fb      	str	r3, [r7, #28]
      return offset;
 8001ebc:	69fb      	ldr	r3, [r7, #28]
    }
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3720      	adds	r7, #32
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}

08001ec6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	b08a      	sub	sp, #40	@ 0x28
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
 8001ece:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	683a      	ldr	r2, [r7, #0]
 8001ed8:	4413      	add	r3, r2
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	461a      	mov	r2, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	889b      	ldrh	r3, [r3, #4]
 8001ee6:	b21a      	sxth	r2, r3
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	3301      	adds	r3, #1
 8001eec:	6839      	ldr	r1, [r7, #0]
 8001eee:	440b      	add	r3, r1
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	021b      	lsls	r3, r3, #8
 8001ef4:	b21b      	sxth	r3, r3
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	b21b      	sxth	r3, r3
 8001efa:	b29a      	uxth	r2, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	3302      	adds	r3, #2
 8001f04:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8001f06:	69bb      	ldr	r3, [r7, #24]
 8001f08:	683a      	ldr	r2, [r7, #0]
 8001f0a:	441a      	add	r2, r3
 8001f0c:	f107 0314 	add.w	r3, r7, #20
 8001f10:	4611      	mov	r1, r2
 8001f12:	4618      	mov	r0, r3
 8001f14:	f007 f828 	bl	8008f68 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	3304      	adds	r3, #4
 8001f1c:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001f1e:	69bb      	ldr	r3, [r7, #24]
 8001f20:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f22:	e00b      	b.n	8001f3c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x76>
          inbuffer[k-1]=inbuffer[k];
 8001f24:	683a      	ldr	r2, [r7, #0]
 8001f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f28:	441a      	add	r2, r3
 8001f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f2c:	3b01      	subs	r3, #1
 8001f2e:	6839      	ldr	r1, [r7, #0]
 8001f30:	440b      	add	r3, r1
 8001f32:	7812      	ldrb	r2, [r2, #0]
 8001f34:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f38:	3301      	adds	r3, #1
 8001f3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	4413      	add	r3, r2
 8001f42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d3ed      	bcc.n	8001f24 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5e>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	683a      	ldr	r2, [r7, #0]
 8001f52:	4413      	add	r3, r2
 8001f54:	2200      	movs	r2, #0
 8001f56:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8001f58:	69bb      	ldr	r3, [r7, #24]
 8001f5a:	3b01      	subs	r3, #1
 8001f5c:	683a      	ldr	r2, [r7, #0]
 8001f5e:	441a      	add	r2, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	4413      	add	r3, r2
 8001f6a:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	683a      	ldr	r2, [r7, #0]
 8001f70:	441a      	add	r2, r3
 8001f72:	f107 0310 	add.w	r3, r7, #16
 8001f76:	4611      	mov	r1, r2
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f006 fff5 	bl	8008f68 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	3304      	adds	r3, #4
 8001f82:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001f84:	69bb      	ldr	r3, [r7, #24]
 8001f86:	623b      	str	r3, [r7, #32]
 8001f88:	e00b      	b.n	8001fa2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xdc>
          inbuffer[k-1]=inbuffer[k];
 8001f8a:	683a      	ldr	r2, [r7, #0]
 8001f8c:	6a3b      	ldr	r3, [r7, #32]
 8001f8e:	441a      	add	r2, r3
 8001f90:	6a3b      	ldr	r3, [r7, #32]
 8001f92:	3b01      	subs	r3, #1
 8001f94:	6839      	ldr	r1, [r7, #0]
 8001f96:	440b      	add	r3, r1
 8001f98:	7812      	ldrb	r2, [r2, #0]
 8001f9a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001f9c:	6a3b      	ldr	r3, [r7, #32]
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	623b      	str	r3, [r7, #32]
 8001fa2:	69ba      	ldr	r2, [r7, #24]
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	6a3a      	ldr	r2, [r7, #32]
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d3ed      	bcc.n	8001f8a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc4>
      }
      inbuffer[offset+length_message_type-1]=0;
 8001fae:	69ba      	ldr	r2, [r7, #24]
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	4413      	add	r3, r2
 8001fb4:	3b01      	subs	r3, #1
 8001fb6:	683a      	ldr	r2, [r7, #0]
 8001fb8:	4413      	add	r3, r2
 8001fba:	2200      	movs	r2, #0
 8001fbc:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8001fbe:	69bb      	ldr	r3, [r7, #24]
 8001fc0:	3b01      	subs	r3, #1
 8001fc2:	683a      	ldr	r2, [r7, #0]
 8001fc4:	441a      	add	r2, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	4413      	add	r3, r2
 8001fd0:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8001fd2:	69bb      	ldr	r3, [r7, #24]
 8001fd4:	683a      	ldr	r2, [r7, #0]
 8001fd6:	441a      	add	r2, r3
 8001fd8:	f107 030c 	add.w	r3, r7, #12
 8001fdc:	4611      	mov	r1, r2
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f006 ffc2 	bl	8008f68 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001fe4:	69bb      	ldr	r3, [r7, #24]
 8001fe6:	3304      	adds	r3, #4
 8001fe8:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001fea:	69bb      	ldr	r3, [r7, #24]
 8001fec:	61fb      	str	r3, [r7, #28]
 8001fee:	e00b      	b.n	8002008 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x142>
          inbuffer[k-1]=inbuffer[k];
 8001ff0:	683a      	ldr	r2, [r7, #0]
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	441a      	add	r2, r3
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	3b01      	subs	r3, #1
 8001ffa:	6839      	ldr	r1, [r7, #0]
 8001ffc:	440b      	add	r3, r1
 8001ffe:	7812      	ldrb	r2, [r2, #0]
 8002000:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	3301      	adds	r3, #1
 8002006:	61fb      	str	r3, [r7, #28]
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	4413      	add	r3, r2
 800200e:	69fa      	ldr	r2, [r7, #28]
 8002010:	429a      	cmp	r2, r3
 8002012:	d3ed      	bcc.n	8001ff0 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x12a>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8002014:	69ba      	ldr	r2, [r7, #24]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	4413      	add	r3, r2
 800201a:	3b01      	subs	r3, #1
 800201c:	683a      	ldr	r2, [r7, #0]
 800201e:	4413      	add	r3, r2
 8002020:	2200      	movs	r2, #0
 8002022:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8002024:	69bb      	ldr	r3, [r7, #24]
 8002026:	3b01      	subs	r3, #1
 8002028:	683a      	ldr	r2, [r7, #0]
 800202a:	441a      	add	r2, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8002030:	69ba      	ldr	r2, [r7, #24]
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	4413      	add	r3, r2
 8002036:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8002038:	2300      	movs	r3, #0
 800203a:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	69ba      	ldr	r2, [r7, #24]
 8002040:	6839      	ldr	r1, [r7, #0]
 8002042:	440a      	add	r2, r1
 8002044:	7812      	ldrb	r2, [r2, #0]
 8002046:	4313      	orrs	r3, r2
 8002048:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800204a:	68ba      	ldr	r2, [r7, #8]
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	3301      	adds	r3, #1
 8002050:	6839      	ldr	r1, [r7, #0]
 8002052:	440b      	add	r3, r1
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	021b      	lsls	r3, r3, #8
 8002058:	4313      	orrs	r3, r2
 800205a:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800205c:	68ba      	ldr	r2, [r7, #8]
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	3302      	adds	r3, #2
 8002062:	6839      	ldr	r1, [r7, #0]
 8002064:	440b      	add	r3, r1
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	041b      	lsls	r3, r3, #16
 800206a:	4313      	orrs	r3, r2
 800206c:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800206e:	68ba      	ldr	r2, [r7, #8]
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	3303      	adds	r3, #3
 8002074:	6839      	ldr	r1, [r7, #0]
 8002076:	440b      	add	r3, r1
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	061b      	lsls	r3, r3, #24
 800207c:	4313      	orrs	r3, r2
 800207e:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8002080:	68ba      	ldr	r2, [r7, #8]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	3304      	adds	r3, #4
 800208a:	61bb      	str	r3, [r7, #24]
     return offset;
 800208c:	69bb      	ldr	r3, [r7, #24]
    }
 800208e:	4618      	mov	r0, r3
 8002090:	3728      	adds	r7, #40	@ 0x28
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
	...

08002098 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	4b02      	ldr	r3, [pc, #8]	@ (80020ac <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x14>)
 80020a2:	4618      	mov	r0, r3
 80020a4:	370c      	adds	r7, #12
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bc80      	pop	{r7}
 80020aa:	4770      	bx	lr
 80020ac:	08010500 	.word	0x08010500

080020b0 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	4b02      	ldr	r3, [pc, #8]	@ (80020c4 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x14>)
 80020ba:	4618      	mov	r0, r3
 80020bc:	370c      	adds	r7, #12
 80020be:	46bd      	mov	sp, r7
 80020c0:	bc80      	pop	{r7}
 80020c2:	4770      	bx	lr
 80020c4:	0801051c 	.word	0x0801051c

080020c8 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7ff fd3e 	bl	8001b54 <_ZN3ros3MsgC1Ev>
 80020d8:	4a06      	ldr	r2, [pc, #24]	@ (80020f4 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	601a      	str	r2, [r3, #0]
      level(0),
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2200      	movs	r2, #0
 80020e2:	711a      	strb	r2, [r3, #4]
      msg("")
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	4a04      	ldr	r2, [pc, #16]	@ (80020f8 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 80020e8:	609a      	str	r2, [r3, #8]
    {
    }
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4618      	mov	r0, r3
 80020ee:	3708      	adds	r7, #8
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	08010c2c 	.word	0x08010c2c
 80020f8:	080104fc 	.word	0x080104fc

080020fc <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002106:	2300      	movs	r3, #0
 8002108:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	683a      	ldr	r2, [r7, #0]
 800210e:	4413      	add	r3, r2
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	7912      	ldrb	r2, [r2, #4]
 8002114:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	3301      	adds	r3, #1
 800211a:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	4618      	mov	r0, r3
 8002122:	f7fe f881 	bl	8000228 <strlen>
 8002126:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	683a      	ldr	r2, [r7, #0]
 800212c:	4413      	add	r3, r2
 800212e:	68b9      	ldr	r1, [r7, #8]
 8002130:	4618      	mov	r0, r3
 8002132:	f006 fefb 	bl	8008f2c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	3304      	adds	r3, #4
 800213a:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	683a      	ldr	r2, [r7, #0]
 8002140:	18d0      	adds	r0, r2, r3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	68ba      	ldr	r2, [r7, #8]
 8002148:	4619      	mov	r1, r3
 800214a:	f00e f953 	bl	80103f4 <memcpy>
      offset += length_msg;
 800214e:	68fa      	ldr	r2, [r7, #12]
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	4413      	add	r3, r2
 8002154:	60fb      	str	r3, [r7, #12]
      return offset;
 8002156:	68fb      	ldr	r3, [r7, #12]
    }
 8002158:	4618      	mov	r0, r3
 800215a:	3710      	adds	r7, #16
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}

08002160 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002160:	b580      	push	{r7, lr}
 8002162:	b086      	sub	sp, #24
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800216a:	2300      	movs	r3, #0
 800216c:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	683a      	ldr	r2, [r7, #0]
 8002172:	4413      	add	r3, r2
 8002174:	781a      	ldrb	r2, [r3, #0]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	3301      	adds	r3, #1
 800217e:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	683a      	ldr	r2, [r7, #0]
 8002184:	441a      	add	r2, r3
 8002186:	f107 030c 	add.w	r3, r7, #12
 800218a:	4611      	mov	r1, r2
 800218c:	4618      	mov	r0, r3
 800218e:	f006 feeb 	bl	8008f68 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	3304      	adds	r3, #4
 8002196:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	617b      	str	r3, [r7, #20]
 800219c:	e00b      	b.n	80021b6 <_ZN14rosserial_msgs3Log11deserializeEPh+0x56>
          inbuffer[k-1]=inbuffer[k];
 800219e:	683a      	ldr	r2, [r7, #0]
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	441a      	add	r2, r3
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	3b01      	subs	r3, #1
 80021a8:	6839      	ldr	r1, [r7, #0]
 80021aa:	440b      	add	r3, r1
 80021ac:	7812      	ldrb	r2, [r2, #0]
 80021ae:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	3301      	adds	r3, #1
 80021b4:	617b      	str	r3, [r7, #20]
 80021b6:	693a      	ldr	r2, [r7, #16]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	4413      	add	r3, r2
 80021bc:	697a      	ldr	r2, [r7, #20]
 80021be:	429a      	cmp	r2, r3
 80021c0:	d3ed      	bcc.n	800219e <_ZN14rosserial_msgs3Log11deserializeEPh+0x3e>
      }
      inbuffer[offset+length_msg-1]=0;
 80021c2:	693a      	ldr	r2, [r7, #16]
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	4413      	add	r3, r2
 80021c8:	3b01      	subs	r3, #1
 80021ca:	683a      	ldr	r2, [r7, #0]
 80021cc:	4413      	add	r3, r2
 80021ce:	2200      	movs	r2, #0
 80021d0:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	3b01      	subs	r3, #1
 80021d6:	683a      	ldr	r2, [r7, #0]
 80021d8:	441a      	add	r2, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 80021de:	693a      	ldr	r2, [r7, #16]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	4413      	add	r3, r2
 80021e4:	613b      	str	r3, [r7, #16]
     return offset;
 80021e6:	693b      	ldr	r3, [r7, #16]
    }
 80021e8:	4618      	mov	r0, r3
 80021ea:	3718      	adds	r7, #24
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}

080021f0 <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	4b02      	ldr	r3, [pc, #8]	@ (8002204 <_ZN14rosserial_msgs3Log7getTypeEv+0x14>)
 80021fa:	4618      	mov	r0, r3
 80021fc:	370c      	adds	r7, #12
 80021fe:	46bd      	mov	sp, r7
 8002200:	bc80      	pop	{r7}
 8002202:	4770      	bx	lr
 8002204:	08010540 	.word	0x08010540

08002208 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	4b02      	ldr	r3, [pc, #8]	@ (800221c <_ZN14rosserial_msgs3Log6getMD5Ev+0x14>)
 8002212:	4618      	mov	r0, r3
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	bc80      	pop	{r7}
 800221a:	4770      	bx	lr
 800221c:	08010554 	.word	0x08010554

08002220 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	4618      	mov	r0, r3
 800222c:	f7ff fc92 	bl	8001b54 <_ZN3ros3MsgC1Ev>
 8002230:	4a11      	ldr	r2, [pc, #68]	@ (8002278 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	601a      	str	r2, [r3, #0]
      ints_length(0), st_ints(), ints(nullptr),
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2200      	movs	r2, #0
 800223a:	605a      	str	r2, [r3, #4]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2200      	movs	r2, #0
 8002240:	609a      	str	r2, [r3, #8]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	60da      	str	r2, [r3, #12]
      floats_length(0), st_floats(), floats(nullptr),
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	611a      	str	r2, [r3, #16]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f04f 0200 	mov.w	r2, #0
 8002254:	615a      	str	r2, [r3, #20]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	619a      	str	r2, [r3, #24]
      strings_length(0), st_strings(), strings(nullptr)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	61da      	str	r2, [r3, #28]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2200      	movs	r2, #0
 8002266:	621a      	str	r2, [r3, #32]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2200      	movs	r2, #0
 800226c:	625a      	str	r2, [r3, #36]	@ 0x24
    {
    }
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4618      	mov	r0, r3
 8002272:	3708      	adds	r7, #8
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	08010c14 	.word	0x08010c14

0800227c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 800227c:	b580      	push	{r7, lr}
 800227e:	b08a      	sub	sp, #40	@ 0x28
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002286:	2300      	movs	r3, #0
 8002288:	627b      	str	r3, [r7, #36]	@ 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6859      	ldr	r1, [r3, #4]
 800228e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002290:	683a      	ldr	r2, [r7, #0]
 8002292:	4413      	add	r3, r2
 8002294:	b2ca      	uxtb	r2, r1
 8002296:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	0a19      	lsrs	r1, r3, #8
 800229e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022a0:	3301      	adds	r3, #1
 80022a2:	683a      	ldr	r2, [r7, #0]
 80022a4:	4413      	add	r3, r2
 80022a6:	b2ca      	uxtb	r2, r1
 80022a8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	0c19      	lsrs	r1, r3, #16
 80022b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b2:	3302      	adds	r3, #2
 80022b4:	683a      	ldr	r2, [r7, #0]
 80022b6:	4413      	add	r3, r2
 80022b8:	b2ca      	uxtb	r2, r1
 80022ba:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	0e19      	lsrs	r1, r3, #24
 80022c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022c4:	3303      	adds	r3, #3
 80022c6:	683a      	ldr	r2, [r7, #0]
 80022c8:	4413      	add	r3, r2
 80022ca:	b2ca      	uxtb	r2, r1
 80022cc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 80022ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022d0:	3304      	adds	r3, #4
 80022d2:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80022d4:	2300      	movs	r3, #0
 80022d6:	623b      	str	r3, [r7, #32]
 80022d8:	e02a      	b.n	8002330 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xb4>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	68da      	ldr	r2, [r3, #12]
 80022de:	6a3b      	ldr	r3, [r7, #32]
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	4413      	add	r3, r2
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 80022e8:	6939      	ldr	r1, [r7, #16]
 80022ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ec:	683a      	ldr	r2, [r7, #0]
 80022ee:	4413      	add	r3, r2
 80022f0:	b2ca      	uxtb	r2, r1
 80022f2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	0a19      	lsrs	r1, r3, #8
 80022f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022fa:	3301      	adds	r3, #1
 80022fc:	683a      	ldr	r2, [r7, #0]
 80022fe:	4413      	add	r3, r2
 8002300:	b2ca      	uxtb	r2, r1
 8002302:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	0c19      	lsrs	r1, r3, #16
 8002308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800230a:	3302      	adds	r3, #2
 800230c:	683a      	ldr	r2, [r7, #0]
 800230e:	4413      	add	r3, r2
 8002310:	b2ca      	uxtb	r2, r1
 8002312:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	0e19      	lsrs	r1, r3, #24
 8002318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800231a:	3303      	adds	r3, #3
 800231c:	683a      	ldr	r2, [r7, #0]
 800231e:	4413      	add	r3, r2
 8002320:	b2ca      	uxtb	r2, r1
 8002322:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8002324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002326:	3304      	adds	r3, #4
 8002328:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 800232a:	6a3b      	ldr	r3, [r7, #32]
 800232c:	3301      	adds	r3, #1
 800232e:	623b      	str	r3, [r7, #32]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	6a3a      	ldr	r2, [r7, #32]
 8002336:	429a      	cmp	r2, r3
 8002338:	d3cf      	bcc.n	80022da <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6919      	ldr	r1, [r3, #16]
 800233e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002340:	683a      	ldr	r2, [r7, #0]
 8002342:	4413      	add	r3, r2
 8002344:	b2ca      	uxtb	r2, r1
 8002346:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	691b      	ldr	r3, [r3, #16]
 800234c:	0a19      	lsrs	r1, r3, #8
 800234e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002350:	3301      	adds	r3, #1
 8002352:	683a      	ldr	r2, [r7, #0]
 8002354:	4413      	add	r3, r2
 8002356:	b2ca      	uxtb	r2, r1
 8002358:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	0c19      	lsrs	r1, r3, #16
 8002360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002362:	3302      	adds	r3, #2
 8002364:	683a      	ldr	r2, [r7, #0]
 8002366:	4413      	add	r3, r2
 8002368:	b2ca      	uxtb	r2, r1
 800236a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	691b      	ldr	r3, [r3, #16]
 8002370:	0e19      	lsrs	r1, r3, #24
 8002372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002374:	3303      	adds	r3, #3
 8002376:	683a      	ldr	r2, [r7, #0]
 8002378:	4413      	add	r3, r2
 800237a:	b2ca      	uxtb	r2, r1
 800237c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 800237e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002380:	3304      	adds	r3, #4
 8002382:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002384:	2300      	movs	r3, #0
 8002386:	61fb      	str	r3, [r7, #28]
 8002388:	e02a      	b.n	80023e0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x164>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	699a      	ldr	r2, [r3, #24]
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	4413      	add	r3, r2
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8002398:	68f9      	ldr	r1, [r7, #12]
 800239a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800239c:	683a      	ldr	r2, [r7, #0]
 800239e:	4413      	add	r3, r2
 80023a0:	b2ca      	uxtb	r2, r1
 80023a2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	0a19      	lsrs	r1, r3, #8
 80023a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023aa:	3301      	adds	r3, #1
 80023ac:	683a      	ldr	r2, [r7, #0]
 80023ae:	4413      	add	r3, r2
 80023b0:	b2ca      	uxtb	r2, r1
 80023b2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	0c19      	lsrs	r1, r3, #16
 80023b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ba:	3302      	adds	r3, #2
 80023bc:	683a      	ldr	r2, [r7, #0]
 80023be:	4413      	add	r3, r2
 80023c0:	b2ca      	uxtb	r2, r1
 80023c2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	0e19      	lsrs	r1, r3, #24
 80023c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ca:	3303      	adds	r3, #3
 80023cc:	683a      	ldr	r2, [r7, #0]
 80023ce:	4413      	add	r3, r2
 80023d0:	b2ca      	uxtb	r2, r1
 80023d2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 80023d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023d6:	3304      	adds	r3, #4
 80023d8:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	3301      	adds	r3, #1
 80023de:	61fb      	str	r3, [r7, #28]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	691b      	ldr	r3, [r3, #16]
 80023e4:	69fa      	ldr	r2, [r7, #28]
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d3cf      	bcc.n	800238a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10e>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	69d9      	ldr	r1, [r3, #28]
 80023ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023f0:	683a      	ldr	r2, [r7, #0]
 80023f2:	4413      	add	r3, r2
 80023f4:	b2ca      	uxtb	r2, r1
 80023f6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	69db      	ldr	r3, [r3, #28]
 80023fc:	0a19      	lsrs	r1, r3, #8
 80023fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002400:	3301      	adds	r3, #1
 8002402:	683a      	ldr	r2, [r7, #0]
 8002404:	4413      	add	r3, r2
 8002406:	b2ca      	uxtb	r2, r1
 8002408:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	69db      	ldr	r3, [r3, #28]
 800240e:	0c19      	lsrs	r1, r3, #16
 8002410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002412:	3302      	adds	r3, #2
 8002414:	683a      	ldr	r2, [r7, #0]
 8002416:	4413      	add	r3, r2
 8002418:	b2ca      	uxtb	r2, r1
 800241a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	69db      	ldr	r3, [r3, #28]
 8002420:	0e19      	lsrs	r1, r3, #24
 8002422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002424:	3303      	adds	r3, #3
 8002426:	683a      	ldr	r2, [r7, #0]
 8002428:	4413      	add	r3, r2
 800242a:	b2ca      	uxtb	r2, r1
 800242c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 800242e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002430:	3304      	adds	r3, #4
 8002432:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002434:	2300      	movs	r3, #0
 8002436:	61bb      	str	r3, [r7, #24]
 8002438:	e027      	b.n	800248a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x20e>
      uint32_t length_stringsi = strlen(this->strings[i]);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800243e:	69bb      	ldr	r3, [r7, #24]
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	4413      	add	r3, r2
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4618      	mov	r0, r3
 8002448:	f7fd feee 	bl	8000228 <strlen>
 800244c:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 800244e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002450:	683a      	ldr	r2, [r7, #0]
 8002452:	4413      	add	r3, r2
 8002454:	6979      	ldr	r1, [r7, #20]
 8002456:	4618      	mov	r0, r3
 8002458:	f006 fd68 	bl	8008f2c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800245c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800245e:	3304      	adds	r3, #4
 8002460:	627b      	str	r3, [r7, #36]	@ 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8002462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002464:	683a      	ldr	r2, [r7, #0]
 8002466:	18d0      	adds	r0, r2, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	4413      	add	r3, r2
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	697a      	ldr	r2, [r7, #20]
 8002476:	4619      	mov	r1, r3
 8002478:	f00d ffbc 	bl	80103f4 <memcpy>
      offset += length_stringsi;
 800247c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	4413      	add	r3, r2
 8002482:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	3301      	adds	r3, #1
 8002488:	61bb      	str	r3, [r7, #24]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	69db      	ldr	r3, [r3, #28]
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	429a      	cmp	r2, r3
 8002492:	d3d2      	bcc.n	800243a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1be>
      }
      return offset;
 8002494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8002496:	4618      	mov	r0, r3
 8002498:	3728      	adds	r7, #40	@ 0x28
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}

0800249e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800249e:	b580      	push	{r7, lr}
 80024a0:	b08e      	sub	sp, #56	@ 0x38
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
 80024a6:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80024a8:	2300      	movs	r3, #0
 80024aa:	637b      	str	r3, [r7, #52]	@ 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80024ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024ae:	683a      	ldr	r2, [r7, #0]
 80024b0:	4413      	add	r3, r2
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80024b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024b8:	3301      	adds	r3, #1
 80024ba:	683a      	ldr	r2, [r7, #0]
 80024bc:	4413      	add	r3, r2
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	021b      	lsls	r3, r3, #8
 80024c2:	6a3a      	ldr	r2, [r7, #32]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80024c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024ca:	3302      	adds	r3, #2
 80024cc:	683a      	ldr	r2, [r7, #0]
 80024ce:	4413      	add	r3, r2
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	041b      	lsls	r3, r3, #16
 80024d4:	6a3a      	ldr	r2, [r7, #32]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80024da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024dc:	3303      	adds	r3, #3
 80024de:	683a      	ldr	r2, [r7, #0]
 80024e0:	4413      	add	r3, r2
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	061b      	lsls	r3, r3, #24
 80024e6:	6a3a      	ldr	r2, [r7, #32]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 80024ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024ee:	3304      	adds	r3, #4
 80024f0:	637b      	str	r3, [r7, #52]	@ 0x34
      if(ints_lengthT > ints_length)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	6a3a      	ldr	r2, [r7, #32]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d90a      	bls.n	8002512 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	68da      	ldr	r2, [r3, #12]
 8002500:	6a3b      	ldr	r3, [r7, #32]
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	4619      	mov	r1, r3
 8002506:	4610      	mov	r0, r2
 8002508:	f00d feb6 	bl	8010278 <realloc>
 800250c:	4602      	mov	r2, r0
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6a3a      	ldr	r2, [r7, #32]
 8002516:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8002518:	2300      	movs	r3, #0
 800251a:	633b      	str	r3, [r7, #48]	@ 0x30
 800251c:	e035      	b.n	800258a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xec>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 800251e:	2300      	movs	r3, #0
 8002520:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002526:	6839      	ldr	r1, [r7, #0]
 8002528:	440a      	add	r2, r1
 800252a:	7812      	ldrb	r2, [r2, #0]
 800252c:	4313      	orrs	r3, r2
 800252e:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002530:	697a      	ldr	r2, [r7, #20]
 8002532:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002534:	3301      	adds	r3, #1
 8002536:	6839      	ldr	r1, [r7, #0]
 8002538:	440b      	add	r3, r1
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	021b      	lsls	r3, r3, #8
 800253e:	4313      	orrs	r3, r2
 8002540:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002542:	697a      	ldr	r2, [r7, #20]
 8002544:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002546:	3302      	adds	r3, #2
 8002548:	6839      	ldr	r1, [r7, #0]
 800254a:	440b      	add	r3, r1
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	041b      	lsls	r3, r3, #16
 8002550:	4313      	orrs	r3, r2
 8002552:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002554:	697a      	ldr	r2, [r7, #20]
 8002556:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002558:	3303      	adds	r3, #3
 800255a:	6839      	ldr	r1, [r7, #0]
 800255c:	440b      	add	r3, r1
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	061b      	lsls	r3, r3, #24
 8002562:	4313      	orrs	r3, r2
 8002564:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8002566:	697a      	ldr	r2, [r7, #20]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 800256c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800256e:	3304      	adds	r3, #4
 8002570:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	68da      	ldr	r2, [r3, #12]
 8002576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	4413      	add	r3, r2
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	3208      	adds	r2, #8
 8002580:	6812      	ldr	r2, [r2, #0]
 8002582:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8002584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002586:	3301      	adds	r3, #1
 8002588:	633b      	str	r3, [r7, #48]	@ 0x30
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002590:	429a      	cmp	r2, r3
 8002592:	d3c4      	bcc.n	800251e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x80>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002594:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002596:	683a      	ldr	r2, [r7, #0]
 8002598:	4413      	add	r3, r2
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800259e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025a0:	3301      	adds	r3, #1
 80025a2:	683a      	ldr	r2, [r7, #0]
 80025a4:	4413      	add	r3, r2
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	021b      	lsls	r3, r3, #8
 80025aa:	69fa      	ldr	r2, [r7, #28]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80025b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025b2:	3302      	adds	r3, #2
 80025b4:	683a      	ldr	r2, [r7, #0]
 80025b6:	4413      	add	r3, r2
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	041b      	lsls	r3, r3, #16
 80025bc:	69fa      	ldr	r2, [r7, #28]
 80025be:	4313      	orrs	r3, r2
 80025c0:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80025c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025c4:	3303      	adds	r3, #3
 80025c6:	683a      	ldr	r2, [r7, #0]
 80025c8:	4413      	add	r3, r2
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	061b      	lsls	r3, r3, #24
 80025ce:	69fa      	ldr	r2, [r7, #28]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 80025d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025d6:	3304      	adds	r3, #4
 80025d8:	637b      	str	r3, [r7, #52]	@ 0x34
      if(floats_lengthT > floats_length)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	691b      	ldr	r3, [r3, #16]
 80025de:	69fa      	ldr	r2, [r7, #28]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d90a      	bls.n	80025fa <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	699a      	ldr	r2, [r3, #24]
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	4619      	mov	r1, r3
 80025ee:	4610      	mov	r0, r2
 80025f0:	f00d fe42 	bl	8010278 <realloc>
 80025f4:	4602      	mov	r2, r0
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	69fa      	ldr	r2, [r7, #28]
 80025fe:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8002600:	2300      	movs	r3, #0
 8002602:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002604:	e035      	b.n	8002672 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1d4>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8002606:	2300      	movs	r3, #0
 8002608:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800260e:	6839      	ldr	r1, [r7, #0]
 8002610:	440a      	add	r2, r1
 8002612:	7812      	ldrb	r2, [r2, #0]
 8002614:	4313      	orrs	r3, r2
 8002616:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002618:	693a      	ldr	r2, [r7, #16]
 800261a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800261c:	3301      	adds	r3, #1
 800261e:	6839      	ldr	r1, [r7, #0]
 8002620:	440b      	add	r3, r1
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	021b      	lsls	r3, r3, #8
 8002626:	4313      	orrs	r3, r2
 8002628:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800262a:	693a      	ldr	r2, [r7, #16]
 800262c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800262e:	3302      	adds	r3, #2
 8002630:	6839      	ldr	r1, [r7, #0]
 8002632:	440b      	add	r3, r1
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	041b      	lsls	r3, r3, #16
 8002638:	4313      	orrs	r3, r2
 800263a:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800263c:	693a      	ldr	r2, [r7, #16]
 800263e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002640:	3303      	adds	r3, #3
 8002642:	6839      	ldr	r1, [r7, #0]
 8002644:	440b      	add	r3, r1
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	061b      	lsls	r3, r3, #24
 800264a:	4313      	orrs	r3, r2
 800264c:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 800264e:	693a      	ldr	r2, [r7, #16]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8002654:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002656:	3304      	adds	r3, #4
 8002658:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	699a      	ldr	r2, [r3, #24]
 800265e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	4413      	add	r3, r2
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	3214      	adds	r2, #20
 8002668:	6812      	ldr	r2, [r2, #0]
 800266a:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 800266c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800266e:	3301      	adds	r3, #1
 8002670:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	691b      	ldr	r3, [r3, #16]
 8002676:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002678:	429a      	cmp	r2, r3
 800267a:	d3c4      	bcc.n	8002606 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x168>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800267c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800267e:	683a      	ldr	r2, [r7, #0]
 8002680:	4413      	add	r3, r2
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002686:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002688:	3301      	adds	r3, #1
 800268a:	683a      	ldr	r2, [r7, #0]
 800268c:	4413      	add	r3, r2
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	021b      	lsls	r3, r3, #8
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	4313      	orrs	r3, r2
 8002696:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002698:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800269a:	3302      	adds	r3, #2
 800269c:	683a      	ldr	r2, [r7, #0]
 800269e:	4413      	add	r3, r2
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	041b      	lsls	r3, r3, #16
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80026aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026ac:	3303      	adds	r3, #3
 80026ae:	683a      	ldr	r2, [r7, #0]
 80026b0:	4413      	add	r3, r2
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	061b      	lsls	r3, r3, #24
 80026b6:	69ba      	ldr	r2, [r7, #24]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 80026bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026be:	3304      	adds	r3, #4
 80026c0:	637b      	str	r3, [r7, #52]	@ 0x34
      if(strings_lengthT > strings_length)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	69db      	ldr	r3, [r3, #28]
 80026c6:	69ba      	ldr	r2, [r7, #24]
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d90a      	bls.n	80026e2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	4619      	mov	r1, r3
 80026d6:	4610      	mov	r0, r2
 80026d8:	f00d fdce 	bl	8010278 <realloc>
 80026dc:	4602      	mov	r2, r0
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	625a      	str	r2, [r3, #36]	@ 0x24
      strings_length = strings_lengthT;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 80026e8:	2300      	movs	r3, #0
 80026ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 80026ec:	e03e      	b.n	800276c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2ce>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 80026ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026f0:	683a      	ldr	r2, [r7, #0]
 80026f2:	441a      	add	r2, r3
 80026f4:	f107 030c 	add.w	r3, r7, #12
 80026f8:	4611      	mov	r1, r2
 80026fa:	4618      	mov	r0, r3
 80026fc:	f006 fc34 	bl	8008f68 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002700:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002702:	3304      	adds	r3, #4
 8002704:	637b      	str	r3, [r7, #52]	@ 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002706:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002708:	627b      	str	r3, [r7, #36]	@ 0x24
 800270a:	e00b      	b.n	8002724 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x286>
          inbuffer[k-1]=inbuffer[k];
 800270c:	683a      	ldr	r2, [r7, #0]
 800270e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002710:	441a      	add	r2, r3
 8002712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002714:	3b01      	subs	r3, #1
 8002716:	6839      	ldr	r1, [r7, #0]
 8002718:	440b      	add	r3, r1
 800271a:	7812      	ldrb	r2, [r2, #0]
 800271c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800271e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002720:	3301      	adds	r3, #1
 8002722:	627b      	str	r3, [r7, #36]	@ 0x24
 8002724:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	4413      	add	r3, r2
 800272a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800272c:	429a      	cmp	r2, r3
 800272e:	d3ed      	bcc.n	800270c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26e>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8002730:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	4413      	add	r3, r2
 8002736:	3b01      	subs	r3, #1
 8002738:	683a      	ldr	r2, [r7, #0]
 800273a:	4413      	add	r3, r2
 800273c:	2200      	movs	r2, #0
 800273e:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8002740:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002742:	3b01      	subs	r3, #1
 8002744:	683a      	ldr	r2, [r7, #0]
 8002746:	441a      	add	r2, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 800274c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	4413      	add	r3, r2
 8002752:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	4413      	add	r3, r2
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	3220      	adds	r2, #32
 8002762:	6812      	ldr	r2, [r2, #0]
 8002764:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8002766:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002768:	3301      	adds	r3, #1
 800276a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	69db      	ldr	r3, [r3, #28]
 8002770:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002772:	429a      	cmp	r2, r3
 8002774:	d3bb      	bcc.n	80026ee <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x250>
      }
     return offset;
 8002776:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 8002778:	4618      	mov	r0, r3
 800277a:	3738      	adds	r7, #56	@ 0x38
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}

08002780 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	4b02      	ldr	r3, [pc, #8]	@ (8002794 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x14>)
 800278a:	4618      	mov	r0, r3
 800278c:	370c      	adds	r7, #12
 800278e:	46bd      	mov	sp, r7
 8002790:	bc80      	pop	{r7}
 8002792:	4770      	bx	lr
 8002794:	08010a30 	.word	0x08010a30

08002798 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	4b02      	ldr	r3, [pc, #8]	@ (80027ac <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x14>)
 80027a2:	4618      	mov	r0, r3
 80027a4:	370c      	adds	r7, #12
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bc80      	pop	{r7}
 80027aa:	4770      	bx	lr
 80027ac:	08010578 	.word	0x08010578

080027b0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 80027b0:	b480      	push	{r7}
 80027b2:	b085      	sub	sp, #20
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	60b9      	str	r1, [r7, #8]
 80027ba:	607a      	str	r2, [r7, #4]
 80027bc:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	68ba      	ldr	r2, [r7, #8]
 80027c2:	601a      	str	r2, [r3, #0]
    msg_(msg),
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	605a      	str	r2, [r3, #4]
    endpoint_(endpoint) {};
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	683a      	ldr	r2, [r7, #0]
 80027ce:	611a      	str	r2, [r3, #16]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	4618      	mov	r0, r3
 80027d4:	3714      	adds	r7, #20
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bc80      	pop	{r7}
 80027da:	4770      	bx	lr

080027dc <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	68d8      	ldr	r0, [r3, #12]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	6891      	ldr	r1, [r2, #8]
 80027f6:	683a      	ldr	r2, [r7, #0]
 80027f8:	4798      	blx	r3
 80027fa:	4603      	mov	r3, r0
  };
 80027fc:	4618      	mov	r0, r3
 80027fe:	3708      	adds	r7, #8
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}

08002804 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	691b      	ldr	r3, [r3, #16]
  }
 8002810:	4618      	mov	r0, r3
 8002812:	370c      	adds	r7, #12
 8002814:	46bd      	mov	sp, r7
 8002816:	bc80      	pop	{r7}
 8002818:	4770      	bx	lr

0800281a <_ZN10SerialCommC1ER20__UART_HandleTypeDef>:
    uint16_t tx_tail = 0;
    uint16_t rx_tail = 0;
    static constexpr uint16_t buf_mask = buffer_size - 1;

public:
    SerialComm(UART_HandleTypeDef &huart) : huart(huart)
 800281a:	b480      	push	{r7}
 800281c:	b083      	sub	sp, #12
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]
 8002822:	6039      	str	r1, [r7, #0]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	683a      	ldr	r2, [r7, #0]
 8002828:	601a      	str	r2, [r3, #0]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8002830:	2201      	movs	r2, #1
 8002832:	711a      	strb	r2, [r3, #4]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800283a:	2200      	movs	r2, #0
 800283c:	80da      	strh	r2, [r3, #6]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8002844:	2200      	movs	r2, #0
 8002846:	811a      	strh	r2, [r3, #8]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800284e:	2200      	movs	r2, #0
 8002850:	815a      	strh	r2, [r3, #10]
    {
        // Other initialization code
    }
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4618      	mov	r0, r3
 8002856:	370c      	adds	r7, #12
 8002858:	46bd      	mov	sp, r7
 800285a:	bc80      	pop	{r7}
 800285c:	4770      	bx	lr

0800285e <_ZN10SerialComm4initEv>:

    void init(void)
 800285e:	b580      	push	{r7, lr}
 8002860:	b082      	sub	sp, #8
 8002862:	af00      	add	r7, sp, #0
 8002864:	6078      	str	r0, [r7, #4]
    {
        reset_rbuf();
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f000 f90e 	bl	8002a88 <_ZN10SerialComm10reset_rbufEv>
    }
 800286c:	bf00      	nop
 800286e:	3708      	adds	r7, #8
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}

08002874 <_ZN10SerialComm4readEv>:

    /** @brief Read a character from the Rx buffer using the FIFO method.
     * 
     * @return The read character.
    */
    int read(void)
 8002874:	b480      	push	{r7}
 8002876:	b085      	sub	sp, #20
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
    {
       uint16_t rx_head = (buffer_size - huart.hdmarx->Instance->CNDTR) & buf_mask;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	b29b      	uxth	r3, r3
 8002888:	f5c3 5300 	rsb	r3, r3, #8192	@ 0x2000
 800288c:	b29b      	uxth	r3, r3
 800288e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002892:	81fb      	strh	r3, [r7, #14]

        // Check for overlapping (which is bad, data will be overwritten)
        if (rx_tail == rx_head)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800289a:	895b      	ldrh	r3, [r3, #10]
 800289c:	89fa      	ldrh	r2, [r7, #14]
 800289e:	429a      	cmp	r2, r3
 80028a0:	d102      	bne.n	80028a8 <_ZN10SerialComm4readEv+0x34>
        {
            return -1;
 80028a2:	f04f 33ff 	mov.w	r3, #4294967295
 80028a6:	e01d      	b.n	80028e4 <_ZN10SerialComm4readEv+0x70>
        }

        // Read a value and increment the read pointer (TAIL).
        int c = (int) rx_buf[rx_tail++];
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80028ae:	895b      	ldrh	r3, [r3, #10]
 80028b0:	1c5a      	adds	r2, r3, #1
 80028b2:	b291      	uxth	r1, r2
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 80028ba:	8151      	strh	r1, [r2, #10]
 80028bc:	461a      	mov	r2, r3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4413      	add	r3, r2
 80028c2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80028c6:	3304      	adds	r3, #4
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	60bb      	str	r3, [r7, #8]
        rx_tail &= buf_mask;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80028d2:	895b      	ldrh	r3, [r3, #10]
 80028d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80028d8:	b29a      	uxth	r2, r3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80028e0:	815a      	strh	r2, [r3, #10]

        return c;
 80028e2:	68bb      	ldr	r3, [r7, #8]
    }
 80028e4:	4618      	mov	r0, r3
 80028e6:	3714      	adds	r7, #20
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bc80      	pop	{r7}
 80028ec:	4770      	bx	lr

080028ee <_ZN10SerialComm5writeEPKhi>:
     * @param data The pointer to the data string.
     * @param length The length of the data string.
     * 
     * @return Void. 
    */
    void write(const uint8_t* const data, const int length)
 80028ee:	b580      	push	{r7, lr}
 80028f0:	b086      	sub	sp, #24
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	60f8      	str	r0, [r7, #12]
 80028f6:	60b9      	str	r1, [r7, #8]
 80028f8:	607a      	str	r2, [r7, #4]
    {
        // Faulty data guard.
        if (length > buffer_size || length < 1)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002900:	dc46      	bgt.n	8002990 <_ZN10SerialComm5writeEPKhi+0xa2>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2b00      	cmp	r3, #0
 8002906:	dd43      	ble.n	8002990 <_ZN10SerialComm5writeEPKhi+0xa2>
        {
            return;
        }

        // Wait for the completion of the previous Tx transfer.
        while (!is_tx_cplt);
 8002908:	bf00      	nop
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8002910:	791b      	ldrb	r3, [r3, #4]
 8002912:	f083 0301 	eor.w	r3, r3, #1
 8002916:	b2db      	uxtb	r3, r3
 8002918:	2b00      	cmp	r3, #0
 800291a:	d1f6      	bne.n	800290a <_ZN10SerialComm5writeEPKhi+0x1c>

        // Check if the data is bigger than the remaining storage
        int w_len = (length <= (buffer_size - tx_head)) ? length : (buffer_size - tx_head);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8002922:	88db      	ldrh	r3, [r3, #6]
 8002924:	f5c3 5300 	rsb	r3, r3, #8192	@ 0x2000
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	4293      	cmp	r3, r2
 800292c:	bfa8      	it	ge
 800292e:	4613      	movge	r3, r2
 8002930:	617b      	str	r3, [r7, #20]

        // Write the data and increment the write pointer (TX_HEAD)
        memcpy(&tx_buf[tx_head], data, w_len);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8002938:	88db      	ldrh	r3, [r3, #6]
 800293a:	461a      	mov	r2, r3
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	4413      	add	r3, r2
 8002940:	3304      	adds	r3, #4
 8002942:	697a      	ldr	r2, [r7, #20]
 8002944:	68b9      	ldr	r1, [r7, #8]
 8002946:	4618      	mov	r0, r3
 8002948:	f00d fd54 	bl	80103f4 <memcpy>
        tx_head = (tx_head + length) & buf_mask;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8002952:	88da      	ldrh	r2, [r3, #6]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	b29b      	uxth	r3, r3
 8002958:	4413      	add	r3, r2
 800295a:	b29b      	uxth	r3, r3
 800295c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002960:	b29a      	uxth	r2, r3
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8002968:	80da      	strh	r2, [r3, #6]

        // Reset the TX_HEAD pointer and write the remaining data
        // (If data is bigger than the previous remaining data)
        if (length != w_len)
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	429a      	cmp	r2, r3
 8002970:	d00a      	beq.n	8002988 <_ZN10SerialComm5writeEPKhi+0x9a>
        {
            memcpy(tx_buf, &data[w_len], length - w_len);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	1d18      	adds	r0, r3, #4
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	68ba      	ldr	r2, [r7, #8]
 800297a:	18d1      	adds	r1, r2, r3
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	461a      	mov	r2, r3
 8002984:	f00d fd36 	bl	80103f4 <memcpy>
        }

        // TODO: Start transfering
        flush();
 8002988:	68f8      	ldr	r0, [r7, #12]
 800298a:	f000 f805 	bl	8002998 <_ZN10SerialComm5flushEv>
 800298e:	e000      	b.n	8002992 <_ZN10SerialComm5writeEPKhi+0xa4>
            return;
 8002990:	bf00      	nop
    }
 8002992:	3718      	adds	r7, #24
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}

08002998 <_ZN10SerialComm5flushEv>:

    /** @brief Transmit the just written data in the Tx buffer
     * 
     * @return void.
    */
    void flush()
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
    {
        if (is_tx_cplt)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80029a6:	791b      	ldrb	r3, [r3, #4]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d05b      	beq.n	8002a64 <_ZN10SerialComm5flushEv+0xcc>
        {
            // if HEAD == TAIL => The buffer is empty => Nothing to send.
            if (tx_head != tx_tail)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80029b2:	88da      	ldrh	r2, [r3, #6]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80029ba:	891b      	ldrh	r3, [r3, #8]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d04c      	beq.n	8002a5a <_ZN10SerialComm5flushEv+0xc2>
            {
                uint16_t len = 0;
 80029c0:	2300      	movs	r3, #0
 80029c2:	81fb      	strh	r3, [r7, #14]

                if (tx_tail < tx_head)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80029ca:	891a      	ldrh	r2, [r3, #8]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80029d2:	88db      	ldrh	r3, [r3, #6]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d218      	bcs.n	8002a0a <_ZN10SerialComm5flushEv+0x72>
                {
                    len = tx_head - tx_tail;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80029de:	88da      	ldrh	r2, [r3, #6]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80029e6:	891b      	ldrh	r3, [r3, #8]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	81fb      	strh	r3, [r7, #14]
                    HAL_UART_Transmit_DMA(&huart, &tx_buf[tx_tail], len);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6818      	ldr	r0, [r3, #0]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80029f6:	891b      	ldrh	r3, [r3, #8]
 80029f8:	461a      	mov	r2, r3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4413      	add	r3, r2
 80029fe:	3304      	adds	r3, #4
 8002a00:	89fa      	ldrh	r2, [r7, #14]
 8002a02:	4619      	mov	r1, r3
 8002a04:	f00a fd96 	bl	800d534 <HAL_UART_Transmit_DMA>
 8002a08:	e01f      	b.n	8002a4a <_ZN10SerialComm5flushEv+0xb2>
                }
                else
                {
                    len = buffer_size - tx_tail;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8002a10:	891b      	ldrh	r3, [r3, #8]
 8002a12:	f5c3 5300 	rsb	r3, r3, #8192	@ 0x2000
 8002a16:	81fb      	strh	r3, [r7, #14]
                    HAL_UART_Transmit_DMA(&huart, &tx_buf[tx_tail], len);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6818      	ldr	r0, [r3, #0]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8002a22:	891b      	ldrh	r3, [r3, #8]
 8002a24:	461a      	mov	r2, r3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4413      	add	r3, r2
 8002a2a:	3304      	adds	r3, #4
 8002a2c:	89fa      	ldrh	r2, [r7, #14]
 8002a2e:	4619      	mov	r1, r3
 8002a30:	f00a fd80 	bl	800d534 <HAL_UART_Transmit_DMA>
                    HAL_UART_Transmit_DMA(&huart, tx_buf, tx_head);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6818      	ldr	r0, [r3, #0]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	1d19      	adds	r1, r3, #4
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8002a42:	88db      	ldrh	r3, [r3, #6]
 8002a44:	461a      	mov	r2, r3
 8002a46:	f00a fd75 	bl	800d534 <HAL_UART_Transmit_DMA>
                }
                
                tx_tail = tx_head;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8002a50:	88da      	ldrh	r2, [r3, #6]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8002a58:	811a      	strh	r2, [r3, #8]
            }
            
            is_tx_cplt = false;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8002a60:	2200      	movs	r2, #0
 8002a62:	711a      	strb	r2, [r3, #4]
        }
    }
 8002a64:	bf00      	nop
 8002a66:	3710      	adds	r7, #16
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <_ZN10SerialComm11set_tx_cpltEv>:

    void set_tx_cplt(void)
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
    {
        is_tx_cplt = true;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	711a      	strb	r2, [r3, #4]
    }
 8002a7e:	bf00      	nop
 8002a80:	370c      	adds	r7, #12
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bc80      	pop	{r7}
 8002a86:	4770      	bx	lr

08002a88 <_ZN10SerialComm10reset_rbufEv>:

    void reset_rbuf(void)
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
    {
        HAL_UART_Receive_DMA(&huart, (uint8_t *)rx_buf, buffer_size);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6818      	ldr	r0, [r3, #0]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002a9a:	3304      	adds	r3, #4
 8002a9c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	f00a fdb7 	bl	800d614 <HAL_UART_Receive_DMA>
    }
 8002aa6:	bf00      	nop
 8002aa8:	3708      	adds	r7, #8
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
	...

08002ab0 <_ZN13STM32HardwareC1Ev>:
class STM32Hardware {
  protected:
    SerialComm &comm;

  public:
    STM32Hardware() : comm(comm_rosserial)
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	4a04      	ldr	r2, [pc, #16]	@ (8002acc <_ZN13STM32HardwareC1Ev+0x1c>)
 8002abc:	601a      	str	r2, [r3, #0]
    {
        // TODO:
    }
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	370c      	adds	r7, #12
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bc80      	pop	{r7}
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop
 8002acc:	2000025c 	.word	0x2000025c

08002ad0 <_ZN13STM32Hardware4initEv>:
    STM32Hardware(SerialComm &comm) : comm(comm)
    {
        // TODO: 
    }
  
    void init()
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
    {
        comm.init();
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7ff febe 	bl	800285e <_ZN10SerialComm4initEv>
    }
 8002ae2:	bf00      	nop
 8002ae4:	3708      	adds	r7, #8
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}

08002aea <_ZN13STM32Hardware4readEv>:

    int read()  
 8002aea:	b580      	push	{r7, lr}
 8002aec:	b082      	sub	sp, #8
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	6078      	str	r0, [r7, #4]
    {
        return comm.read();
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4618      	mov	r0, r3
 8002af8:	f7ff febc 	bl	8002874 <_ZN10SerialComm4readEv>
 8002afc:	4603      	mov	r3, r0
    }
 8002afe:	4618      	mov	r0, r3
 8002b00:	3708      	adds	r7, #8
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length)
 8002b06:	b580      	push	{r7, lr}
 8002b08:	b084      	sub	sp, #16
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	60f8      	str	r0, [r7, #12]
 8002b0e:	60b9      	str	r1, [r7, #8]
 8002b10:	607a      	str	r2, [r7, #4]
    {
        comm.write(data, length);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	68b9      	ldr	r1, [r7, #8]
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f7ff fee7 	bl	80028ee <_ZN10SerialComm5writeEPKhi>
    }
 8002b20:	bf00      	nop
 8002b22:	3710      	adds	r7, #16
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <_ZN13STM32Hardware4timeEv>:

    unsigned long time()
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
    { 
        return HAL_GetTick(); 
 8002b30:	f007 fd24 	bl	800a57c <HAL_GetTick>
 8002b34:	4603      	mov	r3, r0
    }
 8002b36:	4618      	mov	r0, r3
 8002b38:	3708      	adds	r7, #8
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
	...

08002b40 <_ZN8std_msgs7Float32C1Ev>:
  {
    public:
      typedef float _data_type;
      _data_type data;

    Float32():
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
      data(0)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7ff f802 	bl	8001b54 <_ZN3ros3MsgC1Ev>
 8002b50:	4a05      	ldr	r2, [pc, #20]	@ (8002b68 <_ZN8std_msgs7Float32C1Ev+0x28>)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	601a      	str	r2, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f04f 0200 	mov.w	r2, #0
 8002b5c:	605a      	str	r2, [r3, #4]
    {
    }
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4618      	mov	r0, r3
 8002b62:	3708      	adds	r7, #8
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	08010bd0 	.word	0x08010bd0

08002b6c <_ZNK8std_msgs7Float329serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002b6c:	b480      	push	{r7}
 8002b6e:	b085      	sub	sp, #20
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002b76:	2300      	movs	r3, #0
 8002b78:	60fb      	str	r3, [r7, #12]
      union {
        float real;
        uint32_t base;
      } u_data;
      u_data.real = this->data;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	60bb      	str	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8002b80:	68b9      	ldr	r1, [r7, #8]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	683a      	ldr	r2, [r7, #0]
 8002b86:	4413      	add	r3, r2
 8002b88:	b2ca      	uxtb	r2, r1
 8002b8a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	0a19      	lsrs	r1, r3, #8
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	3301      	adds	r3, #1
 8002b94:	683a      	ldr	r2, [r7, #0]
 8002b96:	4413      	add	r3, r2
 8002b98:	b2ca      	uxtb	r2, r1
 8002b9a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_data.base >> (8 * 2)) & 0xFF;
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	0c19      	lsrs	r1, r3, #16
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	3302      	adds	r3, #2
 8002ba4:	683a      	ldr	r2, [r7, #0]
 8002ba6:	4413      	add	r3, r2
 8002ba8:	b2ca      	uxtb	r2, r1
 8002baa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_data.base >> (8 * 3)) & 0xFF;
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	0e19      	lsrs	r1, r3, #24
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	3303      	adds	r3, #3
 8002bb4:	683a      	ldr	r2, [r7, #0]
 8002bb6:	4413      	add	r3, r2
 8002bb8:	b2ca      	uxtb	r2, r1
 8002bba:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	3304      	adds	r3, #4
 8002bc0:	60fb      	str	r3, [r7, #12]
      return offset;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
    }
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3714      	adds	r7, #20
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bc80      	pop	{r7}
 8002bcc:	4770      	bx	lr

08002bce <_ZN8std_msgs7Float3211deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002bce:	b480      	push	{r7}
 8002bd0:	b085      	sub	sp, #20
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
 8002bd6:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	60fb      	str	r3, [r7, #12]
      union {
        float real;
        uint32_t base;
      } u_data;
      u_data.base = 0;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	68fa      	ldr	r2, [r7, #12]
 8002be4:	6839      	ldr	r1, [r7, #0]
 8002be6:	440a      	add	r2, r1
 8002be8:	7812      	ldrb	r2, [r2, #0]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002bee:	68ba      	ldr	r2, [r7, #8]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	3301      	adds	r3, #1
 8002bf4:	6839      	ldr	r1, [r7, #0]
 8002bf6:	440b      	add	r3, r1
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	021b      	lsls	r3, r3, #8
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002c00:	68ba      	ldr	r2, [r7, #8]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	3302      	adds	r3, #2
 8002c06:	6839      	ldr	r1, [r7, #0]
 8002c08:	440b      	add	r3, r1
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	041b      	lsls	r3, r3, #16
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002c12:	68ba      	ldr	r2, [r7, #8]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	3303      	adds	r3, #3
 8002c18:	6839      	ldr	r1, [r7, #0]
 8002c1a:	440b      	add	r3, r1
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	061b      	lsls	r3, r3, #24
 8002c20:	4313      	orrs	r3, r2
 8002c22:	60bb      	str	r3, [r7, #8]
      this->data = u_data.real;
 8002c24:	68ba      	ldr	r2, [r7, #8]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	3304      	adds	r3, #4
 8002c2e:	60fb      	str	r3, [r7, #12]
     return offset;
 8002c30:	68fb      	ldr	r3, [r7, #12]
    }
 8002c32:	4618      	mov	r0, r3
 8002c34:	3714      	adds	r7, #20
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bc80      	pop	{r7}
 8002c3a:	4770      	bx	lr

08002c3c <_ZN8std_msgs7Float327getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Float32"; };
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	4b02      	ldr	r3, [pc, #8]	@ (8002c50 <_ZN8std_msgs7Float327getTypeEv+0x14>)
 8002c46:	4618      	mov	r0, r3
 8002c48:	370c      	adds	r7, #12
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bc80      	pop	{r7}
 8002c4e:	4770      	bx	lr
 8002c50:	0801059c 	.word	0x0801059c

08002c54 <_ZN8std_msgs7Float326getMD5Ev>:
    virtual const char * getMD5() override { return "73fcbf46b49191e672908e50842a83d4"; };
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	4b02      	ldr	r3, [pc, #8]	@ (8002c68 <_ZN8std_msgs7Float326getMD5Ev+0x14>)
 8002c5e:	4618      	mov	r0, r3
 8002c60:	370c      	adds	r7, #12
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bc80      	pop	{r7}
 8002c66:	4770      	bx	lr
 8002c68:	080105b0 	.word	0x080105b0

08002c6c <_ZN8std_msgs6HeaderC1Ev>:
      typedef ros::Time _stamp_type;
      _stamp_type stamp;
      typedef const char* _frame_id_type;
      _frame_id_type frame_id;

    Header():
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
      seq(0),
      stamp(),
      frame_id("")
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7fe ff6c 	bl	8001b54 <_ZN3ros3MsgC1Ev>
 8002c7c:	4a09      	ldr	r2, [pc, #36]	@ (8002ca4 <_ZN8std_msgs6HeaderC1Ev+0x38>)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	601a      	str	r2, [r3, #0]
      seq(0),
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	605a      	str	r2, [r3, #4]
      stamp(),
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	3308      	adds	r3, #8
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f7fe ff51 	bl	8001b34 <_ZN3ros4TimeC1Ev>
      frame_id("")
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a04      	ldr	r2, [pc, #16]	@ (8002ca8 <_ZN8std_msgs6HeaderC1Ev+0x3c>)
 8002c96:	611a      	str	r2, [r3, #16]
    {
    }
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3708      	adds	r7, #8
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	08010bb8 	.word	0x08010bb8
 8002ca8:	080104fc 	.word	0x080104fc

08002cac <_ZNK8std_msgs6Header9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->seq >> (8 * 0)) & 0xFF;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6859      	ldr	r1, [r3, #4]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	683a      	ldr	r2, [r7, #0]
 8002cc2:	4413      	add	r3, r2
 8002cc4:	b2ca      	uxtb	r2, r1
 8002cc6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->seq >> (8 * 1)) & 0xFF;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	0a19      	lsrs	r1, r3, #8
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	683a      	ldr	r2, [r7, #0]
 8002cd4:	4413      	add	r3, r2
 8002cd6:	b2ca      	uxtb	r2, r1
 8002cd8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->seq >> (8 * 2)) & 0xFF;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	0c19      	lsrs	r1, r3, #16
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	3302      	adds	r3, #2
 8002ce4:	683a      	ldr	r2, [r7, #0]
 8002ce6:	4413      	add	r3, r2
 8002ce8:	b2ca      	uxtb	r2, r1
 8002cea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->seq >> (8 * 3)) & 0xFF;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	0e19      	lsrs	r1, r3, #24
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	3303      	adds	r3, #3
 8002cf6:	683a      	ldr	r2, [r7, #0]
 8002cf8:	4413      	add	r3, r2
 8002cfa:	b2ca      	uxtb	r2, r1
 8002cfc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->seq);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	3304      	adds	r3, #4
 8002d02:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stamp.sec >> (8 * 0)) & 0xFF;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6899      	ldr	r1, [r3, #8]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	683a      	ldr	r2, [r7, #0]
 8002d0c:	4413      	add	r3, r2
 8002d0e:	b2ca      	uxtb	r2, r1
 8002d10:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stamp.sec >> (8 * 1)) & 0xFF;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	0a19      	lsrs	r1, r3, #8
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	683a      	ldr	r2, [r7, #0]
 8002d1e:	4413      	add	r3, r2
 8002d20:	b2ca      	uxtb	r2, r1
 8002d22:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stamp.sec >> (8 * 2)) & 0xFF;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	0c19      	lsrs	r1, r3, #16
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	3302      	adds	r3, #2
 8002d2e:	683a      	ldr	r2, [r7, #0]
 8002d30:	4413      	add	r3, r2
 8002d32:	b2ca      	uxtb	r2, r1
 8002d34:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stamp.sec >> (8 * 3)) & 0xFF;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	0e19      	lsrs	r1, r3, #24
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	3303      	adds	r3, #3
 8002d40:	683a      	ldr	r2, [r7, #0]
 8002d42:	4413      	add	r3, r2
 8002d44:	b2ca      	uxtb	r2, r1
 8002d46:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stamp.sec);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	3304      	adds	r3, #4
 8002d4c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stamp.nsec >> (8 * 0)) & 0xFF;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	68d9      	ldr	r1, [r3, #12]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	683a      	ldr	r2, [r7, #0]
 8002d56:	4413      	add	r3, r2
 8002d58:	b2ca      	uxtb	r2, r1
 8002d5a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stamp.nsec >> (8 * 1)) & 0xFF;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	0a19      	lsrs	r1, r3, #8
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	3301      	adds	r3, #1
 8002d66:	683a      	ldr	r2, [r7, #0]
 8002d68:	4413      	add	r3, r2
 8002d6a:	b2ca      	uxtb	r2, r1
 8002d6c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stamp.nsec >> (8 * 2)) & 0xFF;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	68db      	ldr	r3, [r3, #12]
 8002d72:	0c19      	lsrs	r1, r3, #16
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	3302      	adds	r3, #2
 8002d78:	683a      	ldr	r2, [r7, #0]
 8002d7a:	4413      	add	r3, r2
 8002d7c:	b2ca      	uxtb	r2, r1
 8002d7e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stamp.nsec >> (8 * 3)) & 0xFF;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	0e19      	lsrs	r1, r3, #24
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	3303      	adds	r3, #3
 8002d8a:	683a      	ldr	r2, [r7, #0]
 8002d8c:	4413      	add	r3, r2
 8002d8e:	b2ca      	uxtb	r2, r1
 8002d90:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stamp.nsec);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	3304      	adds	r3, #4
 8002d96:	60fb      	str	r3, [r7, #12]
      uint32_t length_frame_id = strlen(this->frame_id);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	691b      	ldr	r3, [r3, #16]
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7fd fa43 	bl	8000228 <strlen>
 8002da2:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_frame_id);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	683a      	ldr	r2, [r7, #0]
 8002da8:	4413      	add	r3, r2
 8002daa:	68b9      	ldr	r1, [r7, #8]
 8002dac:	4618      	mov	r0, r3
 8002dae:	f006 f8bd 	bl	8008f2c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	3304      	adds	r3, #4
 8002db6:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->frame_id, length_frame_id);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	683a      	ldr	r2, [r7, #0]
 8002dbc:	18d0      	adds	r0, r2, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	691b      	ldr	r3, [r3, #16]
 8002dc2:	68ba      	ldr	r2, [r7, #8]
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	f00d fb15 	bl	80103f4 <memcpy>
      offset += length_frame_id;
 8002dca:	68fa      	ldr	r2, [r7, #12]
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	4413      	add	r3, r2
 8002dd0:	60fb      	str	r3, [r7, #12]
      return offset;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
    }
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3710      	adds	r7, #16
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <_ZN8std_msgs6Header11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b086      	sub	sp, #24
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002de6:	2300      	movs	r3, #0
 8002de8:	613b      	str	r3, [r7, #16]
      this->seq =  ((uint32_t) (*(inbuffer + offset)));
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	683a      	ldr	r2, [r7, #0]
 8002dee:	4413      	add	r3, r2
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	461a      	mov	r2, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	685a      	ldr	r2, [r3, #4]
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	3301      	adds	r3, #1
 8002e00:	6839      	ldr	r1, [r7, #0]
 8002e02:	440b      	add	r3, r1
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	021b      	lsls	r3, r3, #8
 8002e08:	431a      	orrs	r2, r3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	685a      	ldr	r2, [r3, #4]
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	3302      	adds	r3, #2
 8002e16:	6839      	ldr	r1, [r7, #0]
 8002e18:	440b      	add	r3, r1
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	041b      	lsls	r3, r3, #16
 8002e1e:	431a      	orrs	r2, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	685a      	ldr	r2, [r3, #4]
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	3303      	adds	r3, #3
 8002e2c:	6839      	ldr	r1, [r7, #0]
 8002e2e:	440b      	add	r3, r1
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	061b      	lsls	r3, r3, #24
 8002e34:	431a      	orrs	r2, r3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->seq);
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	3304      	adds	r3, #4
 8002e3e:	613b      	str	r3, [r7, #16]
      this->stamp.sec =  ((uint32_t) (*(inbuffer + offset)));
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	683a      	ldr	r2, [r7, #0]
 8002e44:	4413      	add	r3, r2
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	461a      	mov	r2, r3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	689a      	ldr	r2, [r3, #8]
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	3301      	adds	r3, #1
 8002e56:	6839      	ldr	r1, [r7, #0]
 8002e58:	440b      	add	r3, r1
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	021b      	lsls	r3, r3, #8
 8002e5e:	431a      	orrs	r2, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	689a      	ldr	r2, [r3, #8]
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	3302      	adds	r3, #2
 8002e6c:	6839      	ldr	r1, [r7, #0]
 8002e6e:	440b      	add	r3, r1
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	041b      	lsls	r3, r3, #16
 8002e74:	431a      	orrs	r2, r3
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	689a      	ldr	r2, [r3, #8]
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	3303      	adds	r3, #3
 8002e82:	6839      	ldr	r1, [r7, #0]
 8002e84:	440b      	add	r3, r1
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	061b      	lsls	r3, r3, #24
 8002e8a:	431a      	orrs	r2, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->stamp.sec);
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	3304      	adds	r3, #4
 8002e94:	613b      	str	r3, [r7, #16]
      this->stamp.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	683a      	ldr	r2, [r7, #0]
 8002e9a:	4413      	add	r3, r2
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	68da      	ldr	r2, [r3, #12]
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	3301      	adds	r3, #1
 8002eac:	6839      	ldr	r1, [r7, #0]
 8002eae:	440b      	add	r3, r1
 8002eb0:	781b      	ldrb	r3, [r3, #0]
 8002eb2:	021b      	lsls	r3, r3, #8
 8002eb4:	431a      	orrs	r2, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	68da      	ldr	r2, [r3, #12]
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	3302      	adds	r3, #2
 8002ec2:	6839      	ldr	r1, [r7, #0]
 8002ec4:	440b      	add	r3, r1
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	041b      	lsls	r3, r3, #16
 8002eca:	431a      	orrs	r2, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	68da      	ldr	r2, [r3, #12]
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	3303      	adds	r3, #3
 8002ed8:	6839      	ldr	r1, [r7, #0]
 8002eda:	440b      	add	r3, r1
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	061b      	lsls	r3, r3, #24
 8002ee0:	431a      	orrs	r2, r3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->stamp.nsec);
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	3304      	adds	r3, #4
 8002eea:	613b      	str	r3, [r7, #16]
      uint32_t length_frame_id;
      arrToVar(length_frame_id, (inbuffer + offset));
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	683a      	ldr	r2, [r7, #0]
 8002ef0:	441a      	add	r2, r3
 8002ef2:	f107 030c 	add.w	r3, r7, #12
 8002ef6:	4611      	mov	r1, r2
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f006 f835 	bl	8008f68 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	3304      	adds	r3, #4
 8002f02:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	617b      	str	r3, [r7, #20]
 8002f08:	e00b      	b.n	8002f22 <_ZN8std_msgs6Header11deserializeEPh+0x146>
          inbuffer[k-1]=inbuffer[k];
 8002f0a:	683a      	ldr	r2, [r7, #0]
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	441a      	add	r2, r3
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	3b01      	subs	r3, #1
 8002f14:	6839      	ldr	r1, [r7, #0]
 8002f16:	440b      	add	r3, r1
 8002f18:	7812      	ldrb	r2, [r2, #0]
 8002f1a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	3301      	adds	r3, #1
 8002f20:	617b      	str	r3, [r7, #20]
 8002f22:	693a      	ldr	r2, [r7, #16]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	4413      	add	r3, r2
 8002f28:	697a      	ldr	r2, [r7, #20]
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d3ed      	bcc.n	8002f0a <_ZN8std_msgs6Header11deserializeEPh+0x12e>
      }
      inbuffer[offset+length_frame_id-1]=0;
 8002f2e:	693a      	ldr	r2, [r7, #16]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	4413      	add	r3, r2
 8002f34:	3b01      	subs	r3, #1
 8002f36:	683a      	ldr	r2, [r7, #0]
 8002f38:	4413      	add	r3, r2
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	701a      	strb	r2, [r3, #0]
      this->frame_id = (char *)(inbuffer + offset-1);
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	3b01      	subs	r3, #1
 8002f42:	683a      	ldr	r2, [r7, #0]
 8002f44:	441a      	add	r2, r3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	611a      	str	r2, [r3, #16]
      offset += length_frame_id;
 8002f4a:	693a      	ldr	r2, [r7, #16]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	4413      	add	r3, r2
 8002f50:	613b      	str	r3, [r7, #16]
     return offset;
 8002f52:	693b      	ldr	r3, [r7, #16]
    }
 8002f54:	4618      	mov	r0, r3
 8002f56:	3718      	adds	r7, #24
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}

08002f5c <_ZN8std_msgs6Header7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Header"; };
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	4b02      	ldr	r3, [pc, #8]	@ (8002f70 <_ZN8std_msgs6Header7getTypeEv+0x14>)
 8002f66:	4618      	mov	r0, r3
 8002f68:	370c      	adds	r7, #12
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bc80      	pop	{r7}
 8002f6e:	4770      	bx	lr
 8002f70:	080105d4 	.word	0x080105d4

08002f74 <_ZN8std_msgs6Header6getMD5Ev>:
    virtual const char * getMD5() override { return "2176decaecbce78abc3b96ef049fabed"; };
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	4b02      	ldr	r3, [pc, #8]	@ (8002f88 <_ZN8std_msgs6Header6getMD5Ev+0x14>)
 8002f7e:	4618      	mov	r0, r3
 8002f80:	370c      	adds	r7, #12
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bc80      	pop	{r7}
 8002f86:	4770      	bx	lr
 8002f88:	080105e4 	.word	0x080105e4

08002f8c <_ZN13geometry_msgs10QuaternionC1Ev>:
      typedef double _z_type;
      _z_type z;
      typedef double _w_type;
      _w_type w;

    Quaternion():
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0),
      w(0)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	4618      	mov	r0, r3
 8002f98:	f7fe fddc 	bl	8001b54 <_ZN3ros3MsgC1Ev>
 8002f9c:	4a11      	ldr	r2, [pc, #68]	@ (8002fe4 <_ZN13geometry_msgs10QuaternionC1Ev+0x58>)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	601a      	str	r2, [r3, #0]
      x(0),
 8002fa2:	6879      	ldr	r1, [r7, #4]
 8002fa4:	f04f 0200 	mov.w	r2, #0
 8002fa8:	f04f 0300 	mov.w	r3, #0
 8002fac:	e9c1 2302 	strd	r2, r3, [r1, #8]
      y(0),
 8002fb0:	6879      	ldr	r1, [r7, #4]
 8002fb2:	f04f 0200 	mov.w	r2, #0
 8002fb6:	f04f 0300 	mov.w	r3, #0
 8002fba:	e9c1 2304 	strd	r2, r3, [r1, #16]
      z(0),
 8002fbe:	6879      	ldr	r1, [r7, #4]
 8002fc0:	f04f 0200 	mov.w	r2, #0
 8002fc4:	f04f 0300 	mov.w	r3, #0
 8002fc8:	e9c1 2306 	strd	r2, r3, [r1, #24]
      w(0)
 8002fcc:	6879      	ldr	r1, [r7, #4]
 8002fce:	f04f 0200 	mov.w	r2, #0
 8002fd2:	f04f 0300 	mov.w	r3, #0
 8002fd6:	e9c1 2308 	strd	r2, r3, [r1, #32]
    {
    }
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3708      	adds	r7, #8
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	08010ba0 	.word	0x08010ba0

08002fe8 <_ZNK13geometry_msgs10Quaternion9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002fe8:	b480      	push	{r7}
 8002fea:	b08d      	sub	sp, #52	@ 0x34
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002ffc:	e9c7 2308 	strd	r2, r3, [r7, #32]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8003000:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003004:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003006:	6838      	ldr	r0, [r7, #0]
 8003008:	4401      	add	r1, r0
 800300a:	b2d3      	uxtb	r3, r2
 800300c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 800300e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003012:	f04f 0200 	mov.w	r2, #0
 8003016:	f04f 0300 	mov.w	r3, #0
 800301a:	0a02      	lsrs	r2, r0, #8
 800301c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003020:	0a0b      	lsrs	r3, r1, #8
 8003022:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003024:	3101      	adds	r1, #1
 8003026:	6838      	ldr	r0, [r7, #0]
 8003028:	4401      	add	r1, r0
 800302a:	b2d3      	uxtb	r3, r2
 800302c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 800302e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003032:	f04f 0200 	mov.w	r2, #0
 8003036:	f04f 0300 	mov.w	r3, #0
 800303a:	0c02      	lsrs	r2, r0, #16
 800303c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003040:	0c0b      	lsrs	r3, r1, #16
 8003042:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003044:	3102      	adds	r1, #2
 8003046:	6838      	ldr	r0, [r7, #0]
 8003048:	4401      	add	r1, r0
 800304a:	b2d3      	uxtb	r3, r2
 800304c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 800304e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003052:	f04f 0200 	mov.w	r2, #0
 8003056:	f04f 0300 	mov.w	r3, #0
 800305a:	0e02      	lsrs	r2, r0, #24
 800305c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003060:	0e0b      	lsrs	r3, r1, #24
 8003062:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003064:	3103      	adds	r1, #3
 8003066:	6838      	ldr	r0, [r7, #0]
 8003068:	4401      	add	r1, r0
 800306a:	b2d3      	uxtb	r3, r2
 800306c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 800306e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003072:	f04f 0200 	mov.w	r2, #0
 8003076:	f04f 0300 	mov.w	r3, #0
 800307a:	000a      	movs	r2, r1
 800307c:	2300      	movs	r3, #0
 800307e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003080:	3104      	adds	r1, #4
 8003082:	6838      	ldr	r0, [r7, #0]
 8003084:	4401      	add	r1, r0
 8003086:	b2d3      	uxtb	r3, r2
 8003088:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 800308a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800308e:	f04f 0200 	mov.w	r2, #0
 8003092:	f04f 0300 	mov.w	r3, #0
 8003096:	0a0a      	lsrs	r2, r1, #8
 8003098:	2300      	movs	r3, #0
 800309a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800309c:	3105      	adds	r1, #5
 800309e:	6838      	ldr	r0, [r7, #0]
 80030a0:	4401      	add	r1, r0
 80030a2:	b2d3      	uxtb	r3, r2
 80030a4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 80030a6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80030aa:	f04f 0200 	mov.w	r2, #0
 80030ae:	f04f 0300 	mov.w	r3, #0
 80030b2:	0c0a      	lsrs	r2, r1, #16
 80030b4:	2300      	movs	r3, #0
 80030b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80030b8:	3106      	adds	r1, #6
 80030ba:	6838      	ldr	r0, [r7, #0]
 80030bc:	4401      	add	r1, r0
 80030be:	b2d3      	uxtb	r3, r2
 80030c0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 80030c2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80030c6:	f04f 0200 	mov.w	r2, #0
 80030ca:	f04f 0300 	mov.w	r3, #0
 80030ce:	0e0a      	lsrs	r2, r1, #24
 80030d0:	2300      	movs	r3, #0
 80030d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80030d4:	3107      	adds	r1, #7
 80030d6:	6838      	ldr	r0, [r7, #0]
 80030d8:	4401      	add	r1, r0
 80030da:	b2d3      	uxtb	r3, r2
 80030dc:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 80030de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030e0:	3308      	adds	r3, #8
 80030e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80030ea:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 80030ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80030f4:	6838      	ldr	r0, [r7, #0]
 80030f6:	4401      	add	r1, r0
 80030f8:	b2d3      	uxtb	r3, r2
 80030fa:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 80030fc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003100:	f04f 0200 	mov.w	r2, #0
 8003104:	f04f 0300 	mov.w	r3, #0
 8003108:	0a02      	lsrs	r2, r0, #8
 800310a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800310e:	0a0b      	lsrs	r3, r1, #8
 8003110:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003112:	3101      	adds	r1, #1
 8003114:	6838      	ldr	r0, [r7, #0]
 8003116:	4401      	add	r1, r0
 8003118:	b2d3      	uxtb	r3, r2
 800311a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 800311c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003120:	f04f 0200 	mov.w	r2, #0
 8003124:	f04f 0300 	mov.w	r3, #0
 8003128:	0c02      	lsrs	r2, r0, #16
 800312a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800312e:	0c0b      	lsrs	r3, r1, #16
 8003130:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003132:	3102      	adds	r1, #2
 8003134:	6838      	ldr	r0, [r7, #0]
 8003136:	4401      	add	r1, r0
 8003138:	b2d3      	uxtb	r3, r2
 800313a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 800313c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003140:	f04f 0200 	mov.w	r2, #0
 8003144:	f04f 0300 	mov.w	r3, #0
 8003148:	0e02      	lsrs	r2, r0, #24
 800314a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800314e:	0e0b      	lsrs	r3, r1, #24
 8003150:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003152:	3103      	adds	r1, #3
 8003154:	6838      	ldr	r0, [r7, #0]
 8003156:	4401      	add	r1, r0
 8003158:	b2d3      	uxtb	r3, r2
 800315a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 800315c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003160:	f04f 0200 	mov.w	r2, #0
 8003164:	f04f 0300 	mov.w	r3, #0
 8003168:	000a      	movs	r2, r1
 800316a:	2300      	movs	r3, #0
 800316c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800316e:	3104      	adds	r1, #4
 8003170:	6838      	ldr	r0, [r7, #0]
 8003172:	4401      	add	r1, r0
 8003174:	b2d3      	uxtb	r3, r2
 8003176:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8003178:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800317c:	f04f 0200 	mov.w	r2, #0
 8003180:	f04f 0300 	mov.w	r3, #0
 8003184:	0a0a      	lsrs	r2, r1, #8
 8003186:	2300      	movs	r3, #0
 8003188:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800318a:	3105      	adds	r1, #5
 800318c:	6838      	ldr	r0, [r7, #0]
 800318e:	4401      	add	r1, r0
 8003190:	b2d3      	uxtb	r3, r2
 8003192:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8003194:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003198:	f04f 0200 	mov.w	r2, #0
 800319c:	f04f 0300 	mov.w	r3, #0
 80031a0:	0c0a      	lsrs	r2, r1, #16
 80031a2:	2300      	movs	r3, #0
 80031a4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80031a6:	3106      	adds	r1, #6
 80031a8:	6838      	ldr	r0, [r7, #0]
 80031aa:	4401      	add	r1, r0
 80031ac:	b2d3      	uxtb	r3, r2
 80031ae:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 80031b0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80031b4:	f04f 0200 	mov.w	r2, #0
 80031b8:	f04f 0300 	mov.w	r3, #0
 80031bc:	0e0a      	lsrs	r2, r1, #24
 80031be:	2300      	movs	r3, #0
 80031c0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80031c2:	3107      	adds	r1, #7
 80031c4:	6838      	ldr	r0, [r7, #0]
 80031c6:	4401      	add	r1, r0
 80031c8:	b2d3      	uxtb	r3, r2
 80031ca:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 80031cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031ce:	3308      	adds	r3, #8
 80031d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80031d8:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 80031dc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80031e0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80031e2:	6838      	ldr	r0, [r7, #0]
 80031e4:	4401      	add	r1, r0
 80031e6:	b2d3      	uxtb	r3, r2
 80031e8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 80031ea:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80031ee:	f04f 0200 	mov.w	r2, #0
 80031f2:	f04f 0300 	mov.w	r3, #0
 80031f6:	0a02      	lsrs	r2, r0, #8
 80031f8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80031fc:	0a0b      	lsrs	r3, r1, #8
 80031fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003200:	3101      	adds	r1, #1
 8003202:	6838      	ldr	r0, [r7, #0]
 8003204:	4401      	add	r1, r0
 8003206:	b2d3      	uxtb	r3, r2
 8003208:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 800320a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800320e:	f04f 0200 	mov.w	r2, #0
 8003212:	f04f 0300 	mov.w	r3, #0
 8003216:	0c02      	lsrs	r2, r0, #16
 8003218:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800321c:	0c0b      	lsrs	r3, r1, #16
 800321e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003220:	3102      	adds	r1, #2
 8003222:	6838      	ldr	r0, [r7, #0]
 8003224:	4401      	add	r1, r0
 8003226:	b2d3      	uxtb	r3, r2
 8003228:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 800322a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800322e:	f04f 0200 	mov.w	r2, #0
 8003232:	f04f 0300 	mov.w	r3, #0
 8003236:	0e02      	lsrs	r2, r0, #24
 8003238:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800323c:	0e0b      	lsrs	r3, r1, #24
 800323e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003240:	3103      	adds	r1, #3
 8003242:	6838      	ldr	r0, [r7, #0]
 8003244:	4401      	add	r1, r0
 8003246:	b2d3      	uxtb	r3, r2
 8003248:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 800324a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800324e:	f04f 0200 	mov.w	r2, #0
 8003252:	f04f 0300 	mov.w	r3, #0
 8003256:	000a      	movs	r2, r1
 8003258:	2300      	movs	r3, #0
 800325a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800325c:	3104      	adds	r1, #4
 800325e:	6838      	ldr	r0, [r7, #0]
 8003260:	4401      	add	r1, r0
 8003262:	b2d3      	uxtb	r3, r2
 8003264:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8003266:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800326a:	f04f 0200 	mov.w	r2, #0
 800326e:	f04f 0300 	mov.w	r3, #0
 8003272:	0a0a      	lsrs	r2, r1, #8
 8003274:	2300      	movs	r3, #0
 8003276:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003278:	3105      	adds	r1, #5
 800327a:	6838      	ldr	r0, [r7, #0]
 800327c:	4401      	add	r1, r0
 800327e:	b2d3      	uxtb	r3, r2
 8003280:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8003282:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003286:	f04f 0200 	mov.w	r2, #0
 800328a:	f04f 0300 	mov.w	r3, #0
 800328e:	0c0a      	lsrs	r2, r1, #16
 8003290:	2300      	movs	r3, #0
 8003292:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003294:	3106      	adds	r1, #6
 8003296:	6838      	ldr	r0, [r7, #0]
 8003298:	4401      	add	r1, r0
 800329a:	b2d3      	uxtb	r3, r2
 800329c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 800329e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80032a2:	f04f 0200 	mov.w	r2, #0
 80032a6:	f04f 0300 	mov.w	r3, #0
 80032aa:	0e0a      	lsrs	r2, r1, #24
 80032ac:	2300      	movs	r3, #0
 80032ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80032b0:	3107      	adds	r1, #7
 80032b2:	6838      	ldr	r0, [r7, #0]
 80032b4:	4401      	add	r1, r0
 80032b6:	b2d3      	uxtb	r3, r2
 80032b8:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 80032ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032bc:	3308      	adds	r3, #8
 80032be:	62fb      	str	r3, [r7, #44]	@ 0x2c
      union {
        double real;
        uint64_t base;
      } u_w;
      u_w.real = this->w;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80032c6:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_w.base >> (8 * 0)) & 0xFF;
 80032ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80032ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80032d0:	6838      	ldr	r0, [r7, #0]
 80032d2:	4401      	add	r1, r0
 80032d4:	b2d3      	uxtb	r3, r2
 80032d6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_w.base >> (8 * 1)) & 0xFF;
 80032d8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80032dc:	f04f 0200 	mov.w	r2, #0
 80032e0:	f04f 0300 	mov.w	r3, #0
 80032e4:	0a02      	lsrs	r2, r0, #8
 80032e6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80032ea:	0a0b      	lsrs	r3, r1, #8
 80032ec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80032ee:	3101      	adds	r1, #1
 80032f0:	6838      	ldr	r0, [r7, #0]
 80032f2:	4401      	add	r1, r0
 80032f4:	b2d3      	uxtb	r3, r2
 80032f6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_w.base >> (8 * 2)) & 0xFF;
 80032f8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80032fc:	f04f 0200 	mov.w	r2, #0
 8003300:	f04f 0300 	mov.w	r3, #0
 8003304:	0c02      	lsrs	r2, r0, #16
 8003306:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800330a:	0c0b      	lsrs	r3, r1, #16
 800330c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800330e:	3102      	adds	r1, #2
 8003310:	6838      	ldr	r0, [r7, #0]
 8003312:	4401      	add	r1, r0
 8003314:	b2d3      	uxtb	r3, r2
 8003316:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_w.base >> (8 * 3)) & 0xFF;
 8003318:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800331c:	f04f 0200 	mov.w	r2, #0
 8003320:	f04f 0300 	mov.w	r3, #0
 8003324:	0e02      	lsrs	r2, r0, #24
 8003326:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800332a:	0e0b      	lsrs	r3, r1, #24
 800332c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800332e:	3103      	adds	r1, #3
 8003330:	6838      	ldr	r0, [r7, #0]
 8003332:	4401      	add	r1, r0
 8003334:	b2d3      	uxtb	r3, r2
 8003336:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_w.base >> (8 * 4)) & 0xFF;
 8003338:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800333c:	f04f 0200 	mov.w	r2, #0
 8003340:	f04f 0300 	mov.w	r3, #0
 8003344:	000a      	movs	r2, r1
 8003346:	2300      	movs	r3, #0
 8003348:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800334a:	3104      	adds	r1, #4
 800334c:	6838      	ldr	r0, [r7, #0]
 800334e:	4401      	add	r1, r0
 8003350:	b2d3      	uxtb	r3, r2
 8003352:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_w.base >> (8 * 5)) & 0xFF;
 8003354:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003358:	f04f 0200 	mov.w	r2, #0
 800335c:	f04f 0300 	mov.w	r3, #0
 8003360:	0a0a      	lsrs	r2, r1, #8
 8003362:	2300      	movs	r3, #0
 8003364:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003366:	3105      	adds	r1, #5
 8003368:	6838      	ldr	r0, [r7, #0]
 800336a:	4401      	add	r1, r0
 800336c:	b2d3      	uxtb	r3, r2
 800336e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_w.base >> (8 * 6)) & 0xFF;
 8003370:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003374:	f04f 0200 	mov.w	r2, #0
 8003378:	f04f 0300 	mov.w	r3, #0
 800337c:	0c0a      	lsrs	r2, r1, #16
 800337e:	2300      	movs	r3, #0
 8003380:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003382:	3106      	adds	r1, #6
 8003384:	6838      	ldr	r0, [r7, #0]
 8003386:	4401      	add	r1, r0
 8003388:	b2d3      	uxtb	r3, r2
 800338a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_w.base >> (8 * 7)) & 0xFF;
 800338c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003390:	f04f 0200 	mov.w	r2, #0
 8003394:	f04f 0300 	mov.w	r3, #0
 8003398:	0e0a      	lsrs	r2, r1, #24
 800339a:	2300      	movs	r3, #0
 800339c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800339e:	3107      	adds	r1, #7
 80033a0:	6838      	ldr	r0, [r7, #0]
 80033a2:	4401      	add	r1, r0
 80033a4:	b2d3      	uxtb	r3, r2
 80033a6:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->w);
 80033a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033aa:	3308      	adds	r3, #8
 80033ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
      return offset;
 80033ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
 80033b0:	4618      	mov	r0, r3
 80033b2:	3734      	adds	r7, #52	@ 0x34
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bc80      	pop	{r7}
 80033b8:	4770      	bx	lr

080033ba <_ZN13geometry_msgs10Quaternion11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80033ba:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80033be:	f5ad 7d0f 	sub.w	sp, sp, #572	@ 0x23c
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	f8c7 020c 	str.w	r0, [r7, #524]	@ 0x20c
 80033c8:	f8c7 1208 	str.w	r1, [r7, #520]	@ 0x208
    {
      int offset = 0;
 80033cc:	2300      	movs	r3, #0
 80033ce:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 80033d2:	f04f 0200 	mov.w	r2, #0
 80033d6:	f04f 0300 	mov.w	r3, #0
 80033da:	e9c7 238a 	strd	r2, r3, [r7, #552]	@ 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80033de:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
 80033e2:	f8d7 2234 	ldr.w	r2, [r7, #564]	@ 0x234
 80033e6:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 80033ea:	4413      	add	r3, r2
 80033ec:	781b      	ldrb	r3, [r3, #0]
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	2200      	movs	r2, #0
 80033f2:	461c      	mov	r4, r3
 80033f4:	4615      	mov	r5, r2
 80033f6:	ea40 0804 	orr.w	r8, r0, r4
 80033fa:	ea41 0905 	orr.w	r9, r1, r5
 80033fe:	e9c7 898a 	strd	r8, r9, [r7, #552]	@ 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003402:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
 8003406:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 800340a:	1c5a      	adds	r2, r3, #1
 800340c:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8003410:	4413      	add	r3, r2
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	b2db      	uxtb	r3, r3
 8003416:	2200      	movs	r2, #0
 8003418:	469a      	mov	sl, r3
 800341a:	4693      	mov	fp, r2
 800341c:	f04f 0200 	mov.w	r2, #0
 8003420:	f04f 0300 	mov.w	r3, #0
 8003424:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8003428:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 800342c:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8003430:	ea40 0402 	orr.w	r4, r0, r2
 8003434:	f8c7 4200 	str.w	r4, [r7, #512]	@ 0x200
 8003438:	430b      	orrs	r3, r1
 800343a:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
 800343e:	e9d7 3480 	ldrd	r3, r4, [r7, #512]	@ 0x200
 8003442:	e9c7 348a 	strd	r3, r4, [r7, #552]	@ 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003446:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
 800344a:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 800344e:	1c9a      	adds	r2, r3, #2
 8003450:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8003454:	4413      	add	r3, r2
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	b2db      	uxtb	r3, r3
 800345a:	2200      	movs	r2, #0
 800345c:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
 8003460:	f8c7 21fc 	str.w	r2, [r7, #508]	@ 0x1fc
 8003464:	f04f 0200 	mov.w	r2, #0
 8003468:	f04f 0300 	mov.w	r3, #0
 800346c:	e9d7 897e 	ldrd	r8, r9, [r7, #504]	@ 0x1f8
 8003470:	464c      	mov	r4, r9
 8003472:	0423      	lsls	r3, r4, #16
 8003474:	46c4      	mov	ip, r8
 8003476:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
 800347a:	4644      	mov	r4, r8
 800347c:	0422      	lsls	r2, r4, #16
 800347e:	ea40 0402 	orr.w	r4, r0, r2
 8003482:	f8c7 41f0 	str.w	r4, [r7, #496]	@ 0x1f0
 8003486:	430b      	orrs	r3, r1
 8003488:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
 800348c:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	@ 0x1f0
 8003490:	e9c7 348a 	strd	r3, r4, [r7, #552]	@ 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003494:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
 8003498:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 800349c:	1cda      	adds	r2, r3, #3
 800349e:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 80034a2:	4413      	add	r3, r2
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	2200      	movs	r2, #0
 80034aa:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 80034ae:	f8c7 21ec 	str.w	r2, [r7, #492]	@ 0x1ec
 80034b2:	e9d7 457a 	ldrd	r4, r5, [r7, #488]	@ 0x1e8
 80034b6:	4623      	mov	r3, r4
 80034b8:	0a1b      	lsrs	r3, r3, #8
 80034ba:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80034be:	4623      	mov	r3, r4
 80034c0:	061b      	lsls	r3, r3, #24
 80034c2:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80034c6:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	@ 0x1e0
 80034ca:	461a      	mov	r2, r3
 80034cc:	4302      	orrs	r2, r0
 80034ce:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80034d2:	4623      	mov	r3, r4
 80034d4:	430b      	orrs	r3, r1
 80034d6:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80034da:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	@ 0x1d8
 80034de:	e9c7 348a 	strd	r3, r4, [r7, #552]	@ 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80034e2:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
 80034e6:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 80034ea:	1d1a      	adds	r2, r3, #4
 80034ec:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 80034f0:	4413      	add	r3, r2
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	2200      	movs	r2, #0
 80034f8:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 80034fc:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
 8003500:	f04f 0200 	mov.w	r2, #0
 8003504:	f04f 0300 	mov.w	r3, #0
 8003508:	f8d7 41d0 	ldr.w	r4, [r7, #464]	@ 0x1d0
 800350c:	0023      	movs	r3, r4
 800350e:	2200      	movs	r2, #0
 8003510:	ea40 0402 	orr.w	r4, r0, r2
 8003514:	f8c7 41c8 	str.w	r4, [r7, #456]	@ 0x1c8
 8003518:	430b      	orrs	r3, r1
 800351a:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 800351e:	e9d7 3472 	ldrd	r3, r4, [r7, #456]	@ 0x1c8
 8003522:	e9c7 348a 	strd	r3, r4, [r7, #552]	@ 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003526:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
 800352a:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 800352e:	1d5a      	adds	r2, r3, #5
 8003530:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8003534:	4413      	add	r3, r2
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	b2db      	uxtb	r3, r3
 800353a:	2200      	movs	r2, #0
 800353c:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8003540:	f8c7 21c4 	str.w	r2, [r7, #452]	@ 0x1c4
 8003544:	f04f 0200 	mov.w	r2, #0
 8003548:	f04f 0300 	mov.w	r3, #0
 800354c:	f8d7 41c0 	ldr.w	r4, [r7, #448]	@ 0x1c0
 8003550:	0223      	lsls	r3, r4, #8
 8003552:	2200      	movs	r2, #0
 8003554:	ea40 0402 	orr.w	r4, r0, r2
 8003558:	f8c7 41b8 	str.w	r4, [r7, #440]	@ 0x1b8
 800355c:	430b      	orrs	r3, r1
 800355e:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8003562:	e9d7 346e 	ldrd	r3, r4, [r7, #440]	@ 0x1b8
 8003566:	e9c7 348a 	strd	r3, r4, [r7, #552]	@ 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800356a:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
 800356e:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8003572:	1d9a      	adds	r2, r3, #6
 8003574:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8003578:	4413      	add	r3, r2
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	b2db      	uxtb	r3, r3
 800357e:	2200      	movs	r2, #0
 8003580:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 8003584:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
 8003588:	f04f 0200 	mov.w	r2, #0
 800358c:	f04f 0300 	mov.w	r3, #0
 8003590:	f8d7 41b0 	ldr.w	r4, [r7, #432]	@ 0x1b0
 8003594:	0423      	lsls	r3, r4, #16
 8003596:	2200      	movs	r2, #0
 8003598:	ea40 0402 	orr.w	r4, r0, r2
 800359c:	f8c7 41a8 	str.w	r4, [r7, #424]	@ 0x1a8
 80035a0:	430b      	orrs	r3, r1
 80035a2:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 80035a6:	e9d7 346a 	ldrd	r3, r4, [r7, #424]	@ 0x1a8
 80035aa:	e9c7 348a 	strd	r3, r4, [r7, #552]	@ 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80035ae:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
 80035b2:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 80035b6:	1dda      	adds	r2, r3, #7
 80035b8:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 80035bc:	4413      	add	r3, r2
 80035be:	781b      	ldrb	r3, [r3, #0]
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	2200      	movs	r2, #0
 80035c4:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80035c8:	f8c7 21a4 	str.w	r2, [r7, #420]	@ 0x1a4
 80035cc:	f04f 0200 	mov.w	r2, #0
 80035d0:	f04f 0300 	mov.w	r3, #0
 80035d4:	f8d7 41a0 	ldr.w	r4, [r7, #416]	@ 0x1a0
 80035d8:	0623      	lsls	r3, r4, #24
 80035da:	2200      	movs	r2, #0
 80035dc:	ea40 0402 	orr.w	r4, r0, r2
 80035e0:	f8c7 4198 	str.w	r4, [r7, #408]	@ 0x198
 80035e4:	430b      	orrs	r3, r1
 80035e6:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80035ea:	e9d7 3466 	ldrd	r3, r4, [r7, #408]	@ 0x198
 80035ee:	e9c7 348a 	strd	r3, r4, [r7, #552]	@ 0x228
      this->x = u_x.real;
 80035f2:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
 80035f6:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 80035fa:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 80035fe:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8003602:	3308      	adds	r3, #8
 8003604:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8003608:	f04f 0200 	mov.w	r2, #0
 800360c:	f04f 0300 	mov.w	r3, #0
 8003610:	e9c7 2388 	strd	r2, r3, [r7, #544]	@ 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003614:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 8003618:	f8d7 2234 	ldr.w	r2, [r7, #564]	@ 0x234
 800361c:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8003620:	4413      	add	r3, r2
 8003622:	781b      	ldrb	r3, [r3, #0]
 8003624:	b2db      	uxtb	r3, r3
 8003626:	2200      	movs	r2, #0
 8003628:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 800362c:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
 8003630:	e9d7 3464 	ldrd	r3, r4, [r7, #400]	@ 0x190
 8003634:	461a      	mov	r2, r3
 8003636:	4302      	orrs	r2, r0
 8003638:	f8c7 2188 	str.w	r2, [r7, #392]	@ 0x188
 800363c:	4623      	mov	r3, r4
 800363e:	430b      	orrs	r3, r1
 8003640:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 8003644:	e9d7 3462 	ldrd	r3, r4, [r7, #392]	@ 0x188
 8003648:	e9c7 3488 	strd	r3, r4, [r7, #544]	@ 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800364c:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 8003650:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8003654:	1c5a      	adds	r2, r3, #1
 8003656:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 800365a:	4413      	add	r3, r2
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	b2db      	uxtb	r3, r3
 8003660:	2200      	movs	r2, #0
 8003662:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8003666:	f8c7 2184 	str.w	r2, [r7, #388]	@ 0x184
 800366a:	f04f 0200 	mov.w	r2, #0
 800366e:	f04f 0300 	mov.w	r3, #0
 8003672:	e9d7 8960 	ldrd	r8, r9, [r7, #384]	@ 0x180
 8003676:	464c      	mov	r4, r9
 8003678:	0223      	lsls	r3, r4, #8
 800367a:	46c4      	mov	ip, r8
 800367c:	ea43 631c 	orr.w	r3, r3, ip, lsr #24
 8003680:	4644      	mov	r4, r8
 8003682:	0222      	lsls	r2, r4, #8
 8003684:	ea40 0402 	orr.w	r4, r0, r2
 8003688:	f8c7 4178 	str.w	r4, [r7, #376]	@ 0x178
 800368c:	430b      	orrs	r3, r1
 800368e:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8003692:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	@ 0x178
 8003696:	e9c7 3488 	strd	r3, r4, [r7, #544]	@ 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800369a:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 800369e:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 80036a2:	1c9a      	adds	r2, r3, #2
 80036a4:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 80036a8:	4413      	add	r3, r2
 80036aa:	781b      	ldrb	r3, [r3, #0]
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	2200      	movs	r2, #0
 80036b0:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 80036b4:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
 80036b8:	f04f 0200 	mov.w	r2, #0
 80036bc:	f04f 0300 	mov.w	r3, #0
 80036c0:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	@ 0x170
 80036c4:	464c      	mov	r4, r9
 80036c6:	0423      	lsls	r3, r4, #16
 80036c8:	46c4      	mov	ip, r8
 80036ca:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
 80036ce:	4644      	mov	r4, r8
 80036d0:	0422      	lsls	r2, r4, #16
 80036d2:	ea40 0402 	orr.w	r4, r0, r2
 80036d6:	f8c7 4168 	str.w	r4, [r7, #360]	@ 0x168
 80036da:	430b      	orrs	r3, r1
 80036dc:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 80036e0:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	@ 0x168
 80036e4:	e9c7 3488 	strd	r3, r4, [r7, #544]	@ 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80036e8:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 80036ec:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 80036f0:	1cda      	adds	r2, r3, #3
 80036f2:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 80036f6:	4413      	add	r3, r2
 80036f8:	781b      	ldrb	r3, [r3, #0]
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	2200      	movs	r2, #0
 80036fe:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 8003702:	f8c7 2164 	str.w	r2, [r7, #356]	@ 0x164
 8003706:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	@ 0x160
 800370a:	4623      	mov	r3, r4
 800370c:	0a1b      	lsrs	r3, r3, #8
 800370e:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8003712:	4623      	mov	r3, r4
 8003714:	061b      	lsls	r3, r3, #24
 8003716:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 800371a:	e9d7 3456 	ldrd	r3, r4, [r7, #344]	@ 0x158
 800371e:	461a      	mov	r2, r3
 8003720:	4302      	orrs	r2, r0
 8003722:	f8c7 2150 	str.w	r2, [r7, #336]	@ 0x150
 8003726:	4623      	mov	r3, r4
 8003728:	430b      	orrs	r3, r1
 800372a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800372e:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	@ 0x150
 8003732:	e9c7 3488 	strd	r3, r4, [r7, #544]	@ 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003736:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 800373a:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 800373e:	1d1a      	adds	r2, r3, #4
 8003740:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8003744:	4413      	add	r3, r2
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	b2db      	uxtb	r3, r3
 800374a:	2200      	movs	r2, #0
 800374c:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 8003750:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8003754:	f04f 0200 	mov.w	r2, #0
 8003758:	f04f 0300 	mov.w	r3, #0
 800375c:	f8d7 4148 	ldr.w	r4, [r7, #328]	@ 0x148
 8003760:	0023      	movs	r3, r4
 8003762:	2200      	movs	r2, #0
 8003764:	ea40 0402 	orr.w	r4, r0, r2
 8003768:	f8c7 4140 	str.w	r4, [r7, #320]	@ 0x140
 800376c:	430b      	orrs	r3, r1
 800376e:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8003772:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	@ 0x140
 8003776:	e9c7 3488 	strd	r3, r4, [r7, #544]	@ 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800377a:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 800377e:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8003782:	1d5a      	adds	r2, r3, #5
 8003784:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8003788:	4413      	add	r3, r2
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	b2db      	uxtb	r3, r3
 800378e:	2200      	movs	r2, #0
 8003790:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8003794:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 8003798:	f04f 0200 	mov.w	r2, #0
 800379c:	f04f 0300 	mov.w	r3, #0
 80037a0:	f8d7 4138 	ldr.w	r4, [r7, #312]	@ 0x138
 80037a4:	0223      	lsls	r3, r4, #8
 80037a6:	2200      	movs	r2, #0
 80037a8:	ea40 0402 	orr.w	r4, r0, r2
 80037ac:	f8c7 4130 	str.w	r4, [r7, #304]	@ 0x130
 80037b0:	430b      	orrs	r3, r1
 80037b2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 80037b6:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	@ 0x130
 80037ba:	e9c7 3488 	strd	r3, r4, [r7, #544]	@ 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80037be:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 80037c2:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 80037c6:	1d9a      	adds	r2, r3, #6
 80037c8:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 80037cc:	4413      	add	r3, r2
 80037ce:	781b      	ldrb	r3, [r3, #0]
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	2200      	movs	r2, #0
 80037d4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80037d8:	f8c7 212c 	str.w	r2, [r7, #300]	@ 0x12c
 80037dc:	f04f 0200 	mov.w	r2, #0
 80037e0:	f04f 0300 	mov.w	r3, #0
 80037e4:	f8d7 4128 	ldr.w	r4, [r7, #296]	@ 0x128
 80037e8:	0423      	lsls	r3, r4, #16
 80037ea:	2200      	movs	r2, #0
 80037ec:	ea40 0402 	orr.w	r4, r0, r2
 80037f0:	f8c7 4120 	str.w	r4, [r7, #288]	@ 0x120
 80037f4:	430b      	orrs	r3, r1
 80037f6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80037fa:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	@ 0x120
 80037fe:	e9c7 3488 	strd	r3, r4, [r7, #544]	@ 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003802:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 8003806:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 800380a:	1dda      	adds	r2, r3, #7
 800380c:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8003810:	4413      	add	r3, r2
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	b2db      	uxtb	r3, r3
 8003816:	2200      	movs	r2, #0
 8003818:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800381c:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8003820:	f04f 0200 	mov.w	r2, #0
 8003824:	f04f 0300 	mov.w	r3, #0
 8003828:	f8d7 4118 	ldr.w	r4, [r7, #280]	@ 0x118
 800382c:	0623      	lsls	r3, r4, #24
 800382e:	2200      	movs	r2, #0
 8003830:	ea40 0402 	orr.w	r4, r0, r2
 8003834:	f8c7 4110 	str.w	r4, [r7, #272]	@ 0x110
 8003838:	430b      	orrs	r3, r1
 800383a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 800383e:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	@ 0x110
 8003842:	e9c7 3488 	strd	r3, r4, [r7, #544]	@ 0x220
      this->y = u_y.real;
 8003846:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 800384a:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 800384e:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8003852:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8003856:	3308      	adds	r3, #8
 8003858:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 800385c:	f04f 0200 	mov.w	r2, #0
 8003860:	f04f 0300 	mov.w	r3, #0
 8003864:	e9c7 2386 	strd	r2, r3, [r7, #536]	@ 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003868:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
 800386c:	f8d7 2234 	ldr.w	r2, [r7, #564]	@ 0x234
 8003870:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8003874:	4413      	add	r3, r2
 8003876:	781b      	ldrb	r3, [r3, #0]
 8003878:	b2db      	uxtb	r3, r3
 800387a:	2200      	movs	r2, #0
 800387c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003880:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 8003884:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	@ 0x108
 8003888:	461a      	mov	r2, r3
 800388a:	4302      	orrs	r2, r0
 800388c:	f8c7 2100 	str.w	r2, [r7, #256]	@ 0x100
 8003890:	4623      	mov	r3, r4
 8003892:	430b      	orrs	r3, r1
 8003894:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003898:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	@ 0x100
 800389c:	e9c7 3486 	strd	r3, r4, [r7, #536]	@ 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80038a0:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
 80038a4:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 80038a8:	1c5a      	adds	r2, r3, #1
 80038aa:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 80038ae:	4413      	add	r3, r2
 80038b0:	781b      	ldrb	r3, [r3, #0]
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	2200      	movs	r2, #0
 80038b6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80038ba:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 80038be:	f04f 0200 	mov.w	r2, #0
 80038c2:	f04f 0300 	mov.w	r3, #0
 80038c6:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	@ 0xf8
 80038ca:	464c      	mov	r4, r9
 80038cc:	0223      	lsls	r3, r4, #8
 80038ce:	46c4      	mov	ip, r8
 80038d0:	ea43 631c 	orr.w	r3, r3, ip, lsr #24
 80038d4:	4644      	mov	r4, r8
 80038d6:	0222      	lsls	r2, r4, #8
 80038d8:	ea40 0402 	orr.w	r4, r0, r2
 80038dc:	f8c7 40f0 	str.w	r4, [r7, #240]	@ 0xf0
 80038e0:	430b      	orrs	r3, r1
 80038e2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80038e6:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	@ 0xf0
 80038ea:	e9c7 3486 	strd	r3, r4, [r7, #536]	@ 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80038ee:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
 80038f2:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 80038f6:	1c9a      	adds	r2, r3, #2
 80038f8:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 80038fc:	4413      	add	r3, r2
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	b2db      	uxtb	r3, r3
 8003902:	2200      	movs	r2, #0
 8003904:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003908:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800390c:	f04f 0200 	mov.w	r2, #0
 8003910:	f04f 0300 	mov.w	r3, #0
 8003914:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8003918:	464c      	mov	r4, r9
 800391a:	0423      	lsls	r3, r4, #16
 800391c:	46c4      	mov	ip, r8
 800391e:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
 8003922:	4644      	mov	r4, r8
 8003924:	0422      	lsls	r2, r4, #16
 8003926:	ea40 0402 	orr.w	r4, r0, r2
 800392a:	f8c7 40e0 	str.w	r4, [r7, #224]	@ 0xe0
 800392e:	430b      	orrs	r3, r1
 8003930:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003934:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	@ 0xe0
 8003938:	e9c7 3486 	strd	r3, r4, [r7, #536]	@ 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800393c:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
 8003940:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8003944:	1cda      	adds	r2, r3, #3
 8003946:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 800394a:	4413      	add	r3, r2
 800394c:	781b      	ldrb	r3, [r3, #0]
 800394e:	b2db      	uxtb	r3, r3
 8003950:	2200      	movs	r2, #0
 8003952:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003956:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800395a:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 800395e:	4623      	mov	r3, r4
 8003960:	0a1b      	lsrs	r3, r3, #8
 8003962:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003966:	4623      	mov	r3, r4
 8003968:	061b      	lsls	r3, r3, #24
 800396a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800396e:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	@ 0xd0
 8003972:	461a      	mov	r2, r3
 8003974:	4302      	orrs	r2, r0
 8003976:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 800397a:	4623      	mov	r3, r4
 800397c:	430b      	orrs	r3, r1
 800397e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003982:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	@ 0xc8
 8003986:	e9c7 3486 	strd	r3, r4, [r7, #536]	@ 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800398a:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
 800398e:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8003992:	1d1a      	adds	r2, r3, #4
 8003994:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8003998:	4413      	add	r3, r2
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	b2db      	uxtb	r3, r3
 800399e:	2200      	movs	r2, #0
 80039a0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80039a4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80039a8:	f04f 0200 	mov.w	r2, #0
 80039ac:	f04f 0300 	mov.w	r3, #0
 80039b0:	f8d7 40c0 	ldr.w	r4, [r7, #192]	@ 0xc0
 80039b4:	0023      	movs	r3, r4
 80039b6:	2200      	movs	r2, #0
 80039b8:	ea40 0402 	orr.w	r4, r0, r2
 80039bc:	f8c7 40b8 	str.w	r4, [r7, #184]	@ 0xb8
 80039c0:	430b      	orrs	r3, r1
 80039c2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80039c6:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	@ 0xb8
 80039ca:	e9c7 3486 	strd	r3, r4, [r7, #536]	@ 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80039ce:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
 80039d2:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 80039d6:	1d5a      	adds	r2, r3, #5
 80039d8:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 80039dc:	4413      	add	r3, r2
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	2200      	movs	r2, #0
 80039e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80039e8:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80039ec:	f04f 0200 	mov.w	r2, #0
 80039f0:	f04f 0300 	mov.w	r3, #0
 80039f4:	f8d7 40b0 	ldr.w	r4, [r7, #176]	@ 0xb0
 80039f8:	0223      	lsls	r3, r4, #8
 80039fa:	2200      	movs	r2, #0
 80039fc:	ea40 0402 	orr.w	r4, r0, r2
 8003a00:	f8c7 40a8 	str.w	r4, [r7, #168]	@ 0xa8
 8003a04:	430b      	orrs	r3, r1
 8003a06:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003a0a:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	@ 0xa8
 8003a0e:	e9c7 3486 	strd	r3, r4, [r7, #536]	@ 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003a12:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
 8003a16:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8003a1a:	1d9a      	adds	r2, r3, #6
 8003a1c:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8003a20:	4413      	add	r3, r2
 8003a22:	781b      	ldrb	r3, [r3, #0]
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	2200      	movs	r2, #0
 8003a28:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003a2c:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003a30:	f04f 0200 	mov.w	r2, #0
 8003a34:	f04f 0300 	mov.w	r3, #0
 8003a38:	f8d7 40a0 	ldr.w	r4, [r7, #160]	@ 0xa0
 8003a3c:	0423      	lsls	r3, r4, #16
 8003a3e:	2200      	movs	r2, #0
 8003a40:	ea40 0402 	orr.w	r4, r0, r2
 8003a44:	f8c7 4098 	str.w	r4, [r7, #152]	@ 0x98
 8003a48:	430b      	orrs	r3, r1
 8003a4a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003a4e:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	@ 0x98
 8003a52:	e9c7 3486 	strd	r3, r4, [r7, #536]	@ 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003a56:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
 8003a5a:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8003a5e:	1dda      	adds	r2, r3, #7
 8003a60:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8003a64:	4413      	add	r3, r2
 8003a66:	781b      	ldrb	r3, [r3, #0]
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003a70:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003a74:	f04f 0200 	mov.w	r2, #0
 8003a78:	f04f 0300 	mov.w	r3, #0
 8003a7c:	f8d7 4090 	ldr.w	r4, [r7, #144]	@ 0x90
 8003a80:	0623      	lsls	r3, r4, #24
 8003a82:	2200      	movs	r2, #0
 8003a84:	ea40 0402 	orr.w	r4, r0, r2
 8003a88:	f8c7 4088 	str.w	r4, [r7, #136]	@ 0x88
 8003a8c:	430b      	orrs	r3, r1
 8003a8e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003a92:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	@ 0x88
 8003a96:	e9c7 3486 	strd	r3, r4, [r7, #536]	@ 0x218
      this->z = u_z.real;
 8003a9a:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
 8003a9e:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8003aa2:	e9c3 0106 	strd	r0, r1, [r3, #24]
      offset += sizeof(this->z);
 8003aa6:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8003aaa:	3308      	adds	r3, #8
 8003aac:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
      union {
        double real;
        uint64_t base;
      } u_w;
      u_w.base = 0;
 8003ab0:	f04f 0200 	mov.w	r2, #0
 8003ab4:	f04f 0300 	mov.w	r3, #0
 8003ab8:	e9c7 2384 	strd	r2, r3, [r7, #528]	@ 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003abc:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	@ 0x210
 8003ac0:	f8d7 2234 	ldr.w	r2, [r7, #564]	@ 0x234
 8003ac4:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8003ac8:	4413      	add	r3, r2
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003ad4:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003ad8:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	@ 0x80
 8003adc:	461a      	mov	r2, r3
 8003ade:	4302      	orrs	r2, r0
 8003ae0:	67ba      	str	r2, [r7, #120]	@ 0x78
 8003ae2:	4623      	mov	r3, r4
 8003ae4:	430b      	orrs	r3, r1
 8003ae6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003ae8:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	@ 0x78
 8003aec:	e9c7 3484 	strd	r3, r4, [r7, #528]	@ 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003af0:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	@ 0x210
 8003af4:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8003af8:	1c5a      	adds	r2, r3, #1
 8003afa:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8003afe:	4413      	add	r3, r2
 8003b00:	781b      	ldrb	r3, [r3, #0]
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	2200      	movs	r2, #0
 8003b06:	673b      	str	r3, [r7, #112]	@ 0x70
 8003b08:	677a      	str	r2, [r7, #116]	@ 0x74
 8003b0a:	f04f 0200 	mov.w	r2, #0
 8003b0e:	f04f 0300 	mov.w	r3, #0
 8003b12:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003b16:	464c      	mov	r4, r9
 8003b18:	0223      	lsls	r3, r4, #8
 8003b1a:	46c4      	mov	ip, r8
 8003b1c:	ea43 631c 	orr.w	r3, r3, ip, lsr #24
 8003b20:	4644      	mov	r4, r8
 8003b22:	0222      	lsls	r2, r4, #8
 8003b24:	ea40 0402 	orr.w	r4, r0, r2
 8003b28:	66bc      	str	r4, [r7, #104]	@ 0x68
 8003b2a:	430b      	orrs	r3, r1
 8003b2c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003b2e:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	@ 0x68
 8003b32:	e9c7 3484 	strd	r3, r4, [r7, #528]	@ 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003b36:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	@ 0x210
 8003b3a:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8003b3e:	1c9a      	adds	r2, r3, #2
 8003b40:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8003b44:	4413      	add	r3, r2
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	663b      	str	r3, [r7, #96]	@ 0x60
 8003b4e:	667a      	str	r2, [r7, #100]	@ 0x64
 8003b50:	f04f 0200 	mov.w	r2, #0
 8003b54:	f04f 0300 	mov.w	r3, #0
 8003b58:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003b5c:	464c      	mov	r4, r9
 8003b5e:	0423      	lsls	r3, r4, #16
 8003b60:	46c4      	mov	ip, r8
 8003b62:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
 8003b66:	4644      	mov	r4, r8
 8003b68:	0422      	lsls	r2, r4, #16
 8003b6a:	ea40 0402 	orr.w	r4, r0, r2
 8003b6e:	65bc      	str	r4, [r7, #88]	@ 0x58
 8003b70:	430b      	orrs	r3, r1
 8003b72:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003b74:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	@ 0x58
 8003b78:	e9c7 3484 	strd	r3, r4, [r7, #528]	@ 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003b7c:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	@ 0x210
 8003b80:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8003b84:	1cda      	adds	r2, r3, #3
 8003b86:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8003b8a:	4413      	add	r3, r2
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	2200      	movs	r2, #0
 8003b92:	653b      	str	r3, [r7, #80]	@ 0x50
 8003b94:	657a      	str	r2, [r7, #84]	@ 0x54
 8003b96:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8003b9a:	4623      	mov	r3, r4
 8003b9c:	0a1b      	lsrs	r3, r3, #8
 8003b9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ba0:	4623      	mov	r3, r4
 8003ba2:	061b      	lsls	r3, r3, #24
 8003ba4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ba6:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 8003baa:	461a      	mov	r2, r3
 8003bac:	4302      	orrs	r2, r0
 8003bae:	643a      	str	r2, [r7, #64]	@ 0x40
 8003bb0:	4623      	mov	r3, r4
 8003bb2:	430b      	orrs	r3, r1
 8003bb4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003bb6:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8003bba:	e9c7 3484 	strd	r3, r4, [r7, #528]	@ 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003bbe:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	@ 0x210
 8003bc2:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8003bc6:	1d1a      	adds	r2, r3, #4
 8003bc8:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8003bcc:	4413      	add	r3, r2
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003bd6:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003bd8:	f04f 0200 	mov.w	r2, #0
 8003bdc:	f04f 0300 	mov.w	r3, #0
 8003be0:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 8003be2:	0023      	movs	r3, r4
 8003be4:	2200      	movs	r2, #0
 8003be6:	ea40 0402 	orr.w	r4, r0, r2
 8003bea:	633c      	str	r4, [r7, #48]	@ 0x30
 8003bec:	430b      	orrs	r3, r1
 8003bee:	637b      	str	r3, [r7, #52]	@ 0x34
 8003bf0:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8003bf4:	e9c7 3484 	strd	r3, r4, [r7, #528]	@ 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003bf8:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	@ 0x210
 8003bfc:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8003c00:	1d5a      	adds	r2, r3, #5
 8003c02:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8003c06:	4413      	add	r3, r2
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c10:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c12:	f04f 0200 	mov.w	r2, #0
 8003c16:	f04f 0300 	mov.w	r3, #0
 8003c1a:	6abc      	ldr	r4, [r7, #40]	@ 0x28
 8003c1c:	0223      	lsls	r3, r4, #8
 8003c1e:	2200      	movs	r2, #0
 8003c20:	ea40 0402 	orr.w	r4, r0, r2
 8003c24:	623c      	str	r4, [r7, #32]
 8003c26:	430b      	orrs	r3, r1
 8003c28:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c2a:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003c2e:	e9c7 3484 	strd	r3, r4, [r7, #528]	@ 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003c32:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	@ 0x210
 8003c36:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8003c3a:	3306      	adds	r3, #6
 8003c3c:	f8d7 2208 	ldr.w	r2, [r7, #520]	@ 0x208
 8003c40:	4413      	add	r3, r2
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	2200      	movs	r2, #0
 8003c48:	61bb      	str	r3, [r7, #24]
 8003c4a:	61fa      	str	r2, [r7, #28]
 8003c4c:	f04f 0200 	mov.w	r2, #0
 8003c50:	f04f 0300 	mov.w	r3, #0
 8003c54:	69bc      	ldr	r4, [r7, #24]
 8003c56:	0423      	lsls	r3, r4, #16
 8003c58:	2200      	movs	r2, #0
 8003c5a:	ea40 0402 	orr.w	r4, r0, r2
 8003c5e:	613c      	str	r4, [r7, #16]
 8003c60:	430b      	orrs	r3, r1
 8003c62:	617b      	str	r3, [r7, #20]
 8003c64:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003c68:	e9c7 3484 	strd	r3, r4, [r7, #528]	@ 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003c6c:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	@ 0x210
 8003c70:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8003c74:	3307      	adds	r3, #7
 8003c76:	f8d7 2208 	ldr.w	r2, [r7, #520]	@ 0x208
 8003c7a:	4413      	add	r3, r2
 8003c7c:	781b      	ldrb	r3, [r3, #0]
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	2200      	movs	r2, #0
 8003c82:	60bb      	str	r3, [r7, #8]
 8003c84:	60fa      	str	r2, [r7, #12]
 8003c86:	f04f 0200 	mov.w	r2, #0
 8003c8a:	f04f 0300 	mov.w	r3, #0
 8003c8e:	68bc      	ldr	r4, [r7, #8]
 8003c90:	0623      	lsls	r3, r4, #24
 8003c92:	2200      	movs	r2, #0
 8003c94:	ea40 0402 	orr.w	r4, r0, r2
 8003c98:	603c      	str	r4, [r7, #0]
 8003c9a:	430b      	orrs	r3, r1
 8003c9c:	607b      	str	r3, [r7, #4]
 8003c9e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003ca2:	e9c7 3484 	strd	r3, r4, [r7, #528]	@ 0x210
      this->w = u_w.real;
 8003ca6:	e9d7 2384 	ldrd	r2, r3, [r7, #528]	@ 0x210
 8003caa:	f8d7 120c 	ldr.w	r1, [r7, #524]	@ 0x20c
 8003cae:	e9c1 2308 	strd	r2, r3, [r1, #32]
      offset += sizeof(this->w);
 8003cb2:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8003cb6:	3308      	adds	r3, #8
 8003cb8:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
     return offset;
 8003cbc:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
    }
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f507 770f 	add.w	r7, r7, #572	@ 0x23c
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003ccc:	4770      	bx	lr
	...

08003cd0 <_ZN13geometry_msgs10Quaternion7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Quaternion"; };
 8003cd0:	b480      	push	{r7}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	4b02      	ldr	r3, [pc, #8]	@ (8003ce4 <_ZN13geometry_msgs10Quaternion7getTypeEv+0x14>)
 8003cda:	4618      	mov	r0, r3
 8003cdc:	370c      	adds	r7, #12
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bc80      	pop	{r7}
 8003ce2:	4770      	bx	lr
 8003ce4:	08010608 	.word	0x08010608

08003ce8 <_ZN13geometry_msgs10Quaternion6getMD5Ev>:
    virtual const char * getMD5() override { return "a779879fadf0160734f906b8c19c7004"; };
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	4b02      	ldr	r3, [pc, #8]	@ (8003cfc <_ZN13geometry_msgs10Quaternion6getMD5Ev+0x14>)
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	370c      	adds	r7, #12
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bc80      	pop	{r7}
 8003cfa:	4770      	bx	lr
 8003cfc:	08010624 	.word	0x08010624

08003d00 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b082      	sub	sp, #8
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f7fd ff22 	bl	8001b54 <_ZN3ros3MsgC1Ev>
 8003d10:	4a0e      	ldr	r2, [pc, #56]	@ (8003d4c <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	601a      	str	r2, [r3, #0]
      x(0),
 8003d16:	6879      	ldr	r1, [r7, #4]
 8003d18:	f04f 0200 	mov.w	r2, #0
 8003d1c:	f04f 0300 	mov.w	r3, #0
 8003d20:	e9c1 2302 	strd	r2, r3, [r1, #8]
      y(0),
 8003d24:	6879      	ldr	r1, [r7, #4]
 8003d26:	f04f 0200 	mov.w	r2, #0
 8003d2a:	f04f 0300 	mov.w	r3, #0
 8003d2e:	e9c1 2304 	strd	r2, r3, [r1, #16]
      z(0)
 8003d32:	6879      	ldr	r1, [r7, #4]
 8003d34:	f04f 0200 	mov.w	r2, #0
 8003d38:	f04f 0300 	mov.w	r3, #0
 8003d3c:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4618      	mov	r0, r3
 8003d44:	3708      	adds	r7, #8
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	08010b88 	.word	0x08010b88

08003d50 <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8003d50:	b480      	push	{r7}
 8003d52:	b08b      	sub	sp, #44	@ 0x2c
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	627b      	str	r3, [r7, #36]	@ 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003d64:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8003d68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d6c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003d6e:	6838      	ldr	r0, [r7, #0]
 8003d70:	4401      	add	r1, r0
 8003d72:	b2d3      	uxtb	r3, r2
 8003d74:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 8003d76:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003d7a:	f04f 0200 	mov.w	r2, #0
 8003d7e:	f04f 0300 	mov.w	r3, #0
 8003d82:	0a02      	lsrs	r2, r0, #8
 8003d84:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003d88:	0a0b      	lsrs	r3, r1, #8
 8003d8a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003d8c:	3101      	adds	r1, #1
 8003d8e:	6838      	ldr	r0, [r7, #0]
 8003d90:	4401      	add	r1, r0
 8003d92:	b2d3      	uxtb	r3, r2
 8003d94:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 8003d96:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003d9a:	f04f 0200 	mov.w	r2, #0
 8003d9e:	f04f 0300 	mov.w	r3, #0
 8003da2:	0c02      	lsrs	r2, r0, #16
 8003da4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003da8:	0c0b      	lsrs	r3, r1, #16
 8003daa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003dac:	3102      	adds	r1, #2
 8003dae:	6838      	ldr	r0, [r7, #0]
 8003db0:	4401      	add	r1, r0
 8003db2:	b2d3      	uxtb	r3, r2
 8003db4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 8003db6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003dba:	f04f 0200 	mov.w	r2, #0
 8003dbe:	f04f 0300 	mov.w	r3, #0
 8003dc2:	0e02      	lsrs	r2, r0, #24
 8003dc4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003dc8:	0e0b      	lsrs	r3, r1, #24
 8003dca:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003dcc:	3103      	adds	r1, #3
 8003dce:	6838      	ldr	r0, [r7, #0]
 8003dd0:	4401      	add	r1, r0
 8003dd2:	b2d3      	uxtb	r3, r2
 8003dd4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 8003dd6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003dda:	f04f 0200 	mov.w	r2, #0
 8003dde:	f04f 0300 	mov.w	r3, #0
 8003de2:	000a      	movs	r2, r1
 8003de4:	2300      	movs	r3, #0
 8003de6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003de8:	3104      	adds	r1, #4
 8003dea:	6838      	ldr	r0, [r7, #0]
 8003dec:	4401      	add	r1, r0
 8003dee:	b2d3      	uxtb	r3, r2
 8003df0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 8003df2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003df6:	f04f 0200 	mov.w	r2, #0
 8003dfa:	f04f 0300 	mov.w	r3, #0
 8003dfe:	0a0a      	lsrs	r2, r1, #8
 8003e00:	2300      	movs	r3, #0
 8003e02:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003e04:	3105      	adds	r1, #5
 8003e06:	6838      	ldr	r0, [r7, #0]
 8003e08:	4401      	add	r1, r0
 8003e0a:	b2d3      	uxtb	r3, r2
 8003e0c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8003e0e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003e12:	f04f 0200 	mov.w	r2, #0
 8003e16:	f04f 0300 	mov.w	r3, #0
 8003e1a:	0c0a      	lsrs	r2, r1, #16
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003e20:	3106      	adds	r1, #6
 8003e22:	6838      	ldr	r0, [r7, #0]
 8003e24:	4401      	add	r1, r0
 8003e26:	b2d3      	uxtb	r3, r2
 8003e28:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8003e2a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003e2e:	f04f 0200 	mov.w	r2, #0
 8003e32:	f04f 0300 	mov.w	r3, #0
 8003e36:	0e0a      	lsrs	r2, r1, #24
 8003e38:	2300      	movs	r3, #0
 8003e3a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003e3c:	3107      	adds	r1, #7
 8003e3e:	6838      	ldr	r0, [r7, #0]
 8003e40:	4401      	add	r1, r0
 8003e42:	b2d3      	uxtb	r3, r2
 8003e44:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 8003e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e48:	3308      	adds	r3, #8
 8003e4a:	627b      	str	r3, [r7, #36]	@ 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003e52:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 8003e56:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003e5a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003e5c:	6838      	ldr	r0, [r7, #0]
 8003e5e:	4401      	add	r1, r0
 8003e60:	b2d3      	uxtb	r3, r2
 8003e62:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8003e64:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003e68:	f04f 0200 	mov.w	r2, #0
 8003e6c:	f04f 0300 	mov.w	r3, #0
 8003e70:	0a02      	lsrs	r2, r0, #8
 8003e72:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003e76:	0a0b      	lsrs	r3, r1, #8
 8003e78:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003e7a:	3101      	adds	r1, #1
 8003e7c:	6838      	ldr	r0, [r7, #0]
 8003e7e:	4401      	add	r1, r0
 8003e80:	b2d3      	uxtb	r3, r2
 8003e82:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8003e84:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003e88:	f04f 0200 	mov.w	r2, #0
 8003e8c:	f04f 0300 	mov.w	r3, #0
 8003e90:	0c02      	lsrs	r2, r0, #16
 8003e92:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003e96:	0c0b      	lsrs	r3, r1, #16
 8003e98:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003e9a:	3102      	adds	r1, #2
 8003e9c:	6838      	ldr	r0, [r7, #0]
 8003e9e:	4401      	add	r1, r0
 8003ea0:	b2d3      	uxtb	r3, r2
 8003ea2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8003ea4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003ea8:	f04f 0200 	mov.w	r2, #0
 8003eac:	f04f 0300 	mov.w	r3, #0
 8003eb0:	0e02      	lsrs	r2, r0, #24
 8003eb2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003eb6:	0e0b      	lsrs	r3, r1, #24
 8003eb8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003eba:	3103      	adds	r1, #3
 8003ebc:	6838      	ldr	r0, [r7, #0]
 8003ebe:	4401      	add	r1, r0
 8003ec0:	b2d3      	uxtb	r3, r2
 8003ec2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8003ec4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003ec8:	f04f 0200 	mov.w	r2, #0
 8003ecc:	f04f 0300 	mov.w	r3, #0
 8003ed0:	000a      	movs	r2, r1
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003ed6:	3104      	adds	r1, #4
 8003ed8:	6838      	ldr	r0, [r7, #0]
 8003eda:	4401      	add	r1, r0
 8003edc:	b2d3      	uxtb	r3, r2
 8003ede:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8003ee0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003ee4:	f04f 0200 	mov.w	r2, #0
 8003ee8:	f04f 0300 	mov.w	r3, #0
 8003eec:	0a0a      	lsrs	r2, r1, #8
 8003eee:	2300      	movs	r3, #0
 8003ef0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003ef2:	3105      	adds	r1, #5
 8003ef4:	6838      	ldr	r0, [r7, #0]
 8003ef6:	4401      	add	r1, r0
 8003ef8:	b2d3      	uxtb	r3, r2
 8003efa:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8003efc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003f00:	f04f 0200 	mov.w	r2, #0
 8003f04:	f04f 0300 	mov.w	r3, #0
 8003f08:	0c0a      	lsrs	r2, r1, #16
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003f0e:	3106      	adds	r1, #6
 8003f10:	6838      	ldr	r0, [r7, #0]
 8003f12:	4401      	add	r1, r0
 8003f14:	b2d3      	uxtb	r3, r2
 8003f16:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8003f18:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003f1c:	f04f 0200 	mov.w	r2, #0
 8003f20:	f04f 0300 	mov.w	r3, #0
 8003f24:	0e0a      	lsrs	r2, r1, #24
 8003f26:	2300      	movs	r3, #0
 8003f28:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003f2a:	3107      	adds	r1, #7
 8003f2c:	6838      	ldr	r0, [r7, #0]
 8003f2e:	4401      	add	r1, r0
 8003f30:	b2d3      	uxtb	r3, r2
 8003f32:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 8003f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f36:	3308      	adds	r3, #8
 8003f38:	627b      	str	r3, [r7, #36]	@ 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003f40:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8003f44:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f48:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003f4a:	6838      	ldr	r0, [r7, #0]
 8003f4c:	4401      	add	r1, r0
 8003f4e:	b2d3      	uxtb	r3, r2
 8003f50:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8003f52:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003f56:	f04f 0200 	mov.w	r2, #0
 8003f5a:	f04f 0300 	mov.w	r3, #0
 8003f5e:	0a02      	lsrs	r2, r0, #8
 8003f60:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003f64:	0a0b      	lsrs	r3, r1, #8
 8003f66:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003f68:	3101      	adds	r1, #1
 8003f6a:	6838      	ldr	r0, [r7, #0]
 8003f6c:	4401      	add	r1, r0
 8003f6e:	b2d3      	uxtb	r3, r2
 8003f70:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8003f72:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003f76:	f04f 0200 	mov.w	r2, #0
 8003f7a:	f04f 0300 	mov.w	r3, #0
 8003f7e:	0c02      	lsrs	r2, r0, #16
 8003f80:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003f84:	0c0b      	lsrs	r3, r1, #16
 8003f86:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003f88:	3102      	adds	r1, #2
 8003f8a:	6838      	ldr	r0, [r7, #0]
 8003f8c:	4401      	add	r1, r0
 8003f8e:	b2d3      	uxtb	r3, r2
 8003f90:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8003f92:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003f96:	f04f 0200 	mov.w	r2, #0
 8003f9a:	f04f 0300 	mov.w	r3, #0
 8003f9e:	0e02      	lsrs	r2, r0, #24
 8003fa0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003fa4:	0e0b      	lsrs	r3, r1, #24
 8003fa6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003fa8:	3103      	adds	r1, #3
 8003faa:	6838      	ldr	r0, [r7, #0]
 8003fac:	4401      	add	r1, r0
 8003fae:	b2d3      	uxtb	r3, r2
 8003fb0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8003fb2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003fb6:	f04f 0200 	mov.w	r2, #0
 8003fba:	f04f 0300 	mov.w	r3, #0
 8003fbe:	000a      	movs	r2, r1
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003fc4:	3104      	adds	r1, #4
 8003fc6:	6838      	ldr	r0, [r7, #0]
 8003fc8:	4401      	add	r1, r0
 8003fca:	b2d3      	uxtb	r3, r2
 8003fcc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8003fce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003fd2:	f04f 0200 	mov.w	r2, #0
 8003fd6:	f04f 0300 	mov.w	r3, #0
 8003fda:	0a0a      	lsrs	r2, r1, #8
 8003fdc:	2300      	movs	r3, #0
 8003fde:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003fe0:	3105      	adds	r1, #5
 8003fe2:	6838      	ldr	r0, [r7, #0]
 8003fe4:	4401      	add	r1, r0
 8003fe6:	b2d3      	uxtb	r3, r2
 8003fe8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8003fea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003fee:	f04f 0200 	mov.w	r2, #0
 8003ff2:	f04f 0300 	mov.w	r3, #0
 8003ff6:	0c0a      	lsrs	r2, r1, #16
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003ffc:	3106      	adds	r1, #6
 8003ffe:	6838      	ldr	r0, [r7, #0]
 8004000:	4401      	add	r1, r0
 8004002:	b2d3      	uxtb	r3, r2
 8004004:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 8004006:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800400a:	f04f 0200 	mov.w	r2, #0
 800400e:	f04f 0300 	mov.w	r3, #0
 8004012:	0e0a      	lsrs	r2, r1, #24
 8004014:	2300      	movs	r3, #0
 8004016:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004018:	3107      	adds	r1, #7
 800401a:	6838      	ldr	r0, [r7, #0]
 800401c:	4401      	add	r1, r0
 800401e:	b2d3      	uxtb	r3, r2
 8004020:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 8004022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004024:	3308      	adds	r3, #8
 8004026:	627b      	str	r3, [r7, #36]	@ 0x24
      return offset;
 8004028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 800402a:	4618      	mov	r0, r3
 800402c:	372c      	adds	r7, #44	@ 0x2c
 800402e:	46bd      	mov	sp, r7
 8004030:	bc80      	pop	{r7}
 8004032:	4770      	bx	lr

08004034 <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8004034:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8004038:	b0eb      	sub	sp, #428	@ 0x1ac
 800403a:	af00      	add	r7, sp, #0
 800403c:	f8c7 0184 	str.w	r0, [r7, #388]	@ 0x184
 8004040:	f8c7 1180 	str.w	r1, [r7, #384]	@ 0x180
    {
      int offset = 0;
 8004044:	2300      	movs	r3, #0
 8004046:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 800404a:	f04f 0200 	mov.w	r2, #0
 800404e:	f04f 0300 	mov.w	r3, #0
 8004052:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8004056:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 800405a:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 800405e:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004062:	4413      	add	r3, r2
 8004064:	781b      	ldrb	r3, [r3, #0]
 8004066:	b2db      	uxtb	r3, r3
 8004068:	2200      	movs	r2, #0
 800406a:	461c      	mov	r4, r3
 800406c:	4615      	mov	r5, r2
 800406e:	ea40 0804 	orr.w	r8, r0, r4
 8004072:	ea41 0905 	orr.w	r9, r1, r5
 8004076:	e9c7 8966 	strd	r8, r9, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800407a:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 800407e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8004082:	1c5a      	adds	r2, r3, #1
 8004084:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004088:	4413      	add	r3, r2
 800408a:	781b      	ldrb	r3, [r3, #0]
 800408c:	b2db      	uxtb	r3, r3
 800408e:	2200      	movs	r2, #0
 8004090:	469a      	mov	sl, r3
 8004092:	4693      	mov	fp, r2
 8004094:	f04f 0200 	mov.w	r2, #0
 8004098:	f04f 0300 	mov.w	r3, #0
 800409c:	ea4f 230b 	mov.w	r3, fp, lsl #8
 80040a0:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 80040a4:	ea4f 220a 	mov.w	r2, sl, lsl #8
 80040a8:	ea40 0402 	orr.w	r4, r0, r2
 80040ac:	f8c7 4178 	str.w	r4, [r7, #376]	@ 0x178
 80040b0:	430b      	orrs	r3, r1
 80040b2:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80040b6:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	@ 0x178
 80040ba:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80040be:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 80040c2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80040c6:	1c9a      	adds	r2, r3, #2
 80040c8:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80040cc:	4413      	add	r3, r2
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	2200      	movs	r2, #0
 80040d4:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 80040d8:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
 80040dc:	f04f 0200 	mov.w	r2, #0
 80040e0:	f04f 0300 	mov.w	r3, #0
 80040e4:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	@ 0x170
 80040e8:	464c      	mov	r4, r9
 80040ea:	0423      	lsls	r3, r4, #16
 80040ec:	46c4      	mov	ip, r8
 80040ee:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
 80040f2:	4644      	mov	r4, r8
 80040f4:	0422      	lsls	r2, r4, #16
 80040f6:	ea40 0402 	orr.w	r4, r0, r2
 80040fa:	f8c7 4168 	str.w	r4, [r7, #360]	@ 0x168
 80040fe:	430b      	orrs	r3, r1
 8004100:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 8004104:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	@ 0x168
 8004108:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800410c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8004110:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8004114:	1cda      	adds	r2, r3, #3
 8004116:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800411a:	4413      	add	r3, r2
 800411c:	781b      	ldrb	r3, [r3, #0]
 800411e:	b2db      	uxtb	r3, r3
 8004120:	2200      	movs	r2, #0
 8004122:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 8004126:	f8c7 2164 	str.w	r2, [r7, #356]	@ 0x164
 800412a:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	@ 0x160
 800412e:	4623      	mov	r3, r4
 8004130:	0a1b      	lsrs	r3, r3, #8
 8004132:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8004136:	4623      	mov	r3, r4
 8004138:	061b      	lsls	r3, r3, #24
 800413a:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 800413e:	e9d7 3456 	ldrd	r3, r4, [r7, #344]	@ 0x158
 8004142:	461a      	mov	r2, r3
 8004144:	4302      	orrs	r2, r0
 8004146:	f8c7 2150 	str.w	r2, [r7, #336]	@ 0x150
 800414a:	4623      	mov	r3, r4
 800414c:	430b      	orrs	r3, r1
 800414e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8004152:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	@ 0x150
 8004156:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800415a:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 800415e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8004162:	1d1a      	adds	r2, r3, #4
 8004164:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004168:	4413      	add	r3, r2
 800416a:	781b      	ldrb	r3, [r3, #0]
 800416c:	b2db      	uxtb	r3, r3
 800416e:	2200      	movs	r2, #0
 8004170:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 8004174:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8004178:	f04f 0200 	mov.w	r2, #0
 800417c:	f04f 0300 	mov.w	r3, #0
 8004180:	f8d7 4148 	ldr.w	r4, [r7, #328]	@ 0x148
 8004184:	0023      	movs	r3, r4
 8004186:	2200      	movs	r2, #0
 8004188:	ea40 0402 	orr.w	r4, r0, r2
 800418c:	f8c7 4140 	str.w	r4, [r7, #320]	@ 0x140
 8004190:	430b      	orrs	r3, r1
 8004192:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8004196:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	@ 0x140
 800419a:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800419e:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 80041a2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80041a6:	1d5a      	adds	r2, r3, #5
 80041a8:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80041ac:	4413      	add	r3, r2
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	2200      	movs	r2, #0
 80041b4:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 80041b8:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 80041bc:	f04f 0200 	mov.w	r2, #0
 80041c0:	f04f 0300 	mov.w	r3, #0
 80041c4:	f8d7 4138 	ldr.w	r4, [r7, #312]	@ 0x138
 80041c8:	0223      	lsls	r3, r4, #8
 80041ca:	2200      	movs	r2, #0
 80041cc:	ea40 0402 	orr.w	r4, r0, r2
 80041d0:	f8c7 4130 	str.w	r4, [r7, #304]	@ 0x130
 80041d4:	430b      	orrs	r3, r1
 80041d6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 80041da:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	@ 0x130
 80041de:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80041e2:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 80041e6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80041ea:	1d9a      	adds	r2, r3, #6
 80041ec:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80041f0:	4413      	add	r3, r2
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	2200      	movs	r2, #0
 80041f8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80041fc:	f8c7 212c 	str.w	r2, [r7, #300]	@ 0x12c
 8004200:	f04f 0200 	mov.w	r2, #0
 8004204:	f04f 0300 	mov.w	r3, #0
 8004208:	f8d7 4128 	ldr.w	r4, [r7, #296]	@ 0x128
 800420c:	0423      	lsls	r3, r4, #16
 800420e:	2200      	movs	r2, #0
 8004210:	ea40 0402 	orr.w	r4, r0, r2
 8004214:	f8c7 4120 	str.w	r4, [r7, #288]	@ 0x120
 8004218:	430b      	orrs	r3, r1
 800421a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800421e:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	@ 0x120
 8004222:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8004226:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 800422a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 800422e:	1dda      	adds	r2, r3, #7
 8004230:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004234:	4413      	add	r3, r2
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	b2db      	uxtb	r3, r3
 800423a:	2200      	movs	r2, #0
 800423c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8004240:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8004244:	f04f 0200 	mov.w	r2, #0
 8004248:	f04f 0300 	mov.w	r3, #0
 800424c:	f8d7 4118 	ldr.w	r4, [r7, #280]	@ 0x118
 8004250:	0623      	lsls	r3, r4, #24
 8004252:	2200      	movs	r2, #0
 8004254:	ea40 0402 	orr.w	r4, r0, r2
 8004258:	f8c7 4110 	str.w	r4, [r7, #272]	@ 0x110
 800425c:	430b      	orrs	r3, r1
 800425e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8004262:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	@ 0x110
 8004266:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      this->x = u_x.real;
 800426a:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 800426e:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8004272:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 8004276:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 800427a:	3308      	adds	r3, #8
 800427c:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8004280:	f04f 0200 	mov.w	r2, #0
 8004284:	f04f 0300 	mov.w	r3, #0
 8004288:	e9c7 2364 	strd	r2, r3, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800428c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8004290:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 8004294:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004298:	4413      	add	r3, r2
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	b2db      	uxtb	r3, r3
 800429e:	2200      	movs	r2, #0
 80042a0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80042a4:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 80042a8:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	@ 0x108
 80042ac:	461a      	mov	r2, r3
 80042ae:	4302      	orrs	r2, r0
 80042b0:	f8c7 2100 	str.w	r2, [r7, #256]	@ 0x100
 80042b4:	4623      	mov	r3, r4
 80042b6:	430b      	orrs	r3, r1
 80042b8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80042bc:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	@ 0x100
 80042c0:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80042c4:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 80042c8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80042cc:	1c5a      	adds	r2, r3, #1
 80042ce:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80042d2:	4413      	add	r3, r2
 80042d4:	781b      	ldrb	r3, [r3, #0]
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	2200      	movs	r2, #0
 80042da:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80042de:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 80042e2:	f04f 0200 	mov.w	r2, #0
 80042e6:	f04f 0300 	mov.w	r3, #0
 80042ea:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	@ 0xf8
 80042ee:	464c      	mov	r4, r9
 80042f0:	0223      	lsls	r3, r4, #8
 80042f2:	46c4      	mov	ip, r8
 80042f4:	ea43 631c 	orr.w	r3, r3, ip, lsr #24
 80042f8:	4644      	mov	r4, r8
 80042fa:	0222      	lsls	r2, r4, #8
 80042fc:	ea40 0402 	orr.w	r4, r0, r2
 8004300:	f8c7 40f0 	str.w	r4, [r7, #240]	@ 0xf0
 8004304:	430b      	orrs	r3, r1
 8004306:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800430a:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	@ 0xf0
 800430e:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004312:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8004316:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 800431a:	1c9a      	adds	r2, r3, #2
 800431c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004320:	4413      	add	r3, r2
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	b2db      	uxtb	r3, r3
 8004326:	2200      	movs	r2, #0
 8004328:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800432c:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004330:	f04f 0200 	mov.w	r2, #0
 8004334:	f04f 0300 	mov.w	r3, #0
 8004338:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 800433c:	464c      	mov	r4, r9
 800433e:	0423      	lsls	r3, r4, #16
 8004340:	46c4      	mov	ip, r8
 8004342:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
 8004346:	4644      	mov	r4, r8
 8004348:	0422      	lsls	r2, r4, #16
 800434a:	ea40 0402 	orr.w	r4, r0, r2
 800434e:	f8c7 40e0 	str.w	r4, [r7, #224]	@ 0xe0
 8004352:	430b      	orrs	r3, r1
 8004354:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004358:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	@ 0xe0
 800435c:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004360:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8004364:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8004368:	1cda      	adds	r2, r3, #3
 800436a:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800436e:	4413      	add	r3, r2
 8004370:	781b      	ldrb	r3, [r3, #0]
 8004372:	b2db      	uxtb	r3, r3
 8004374:	2200      	movs	r2, #0
 8004376:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800437a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800437e:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8004382:	4623      	mov	r3, r4
 8004384:	0a1b      	lsrs	r3, r3, #8
 8004386:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800438a:	4623      	mov	r3, r4
 800438c:	061b      	lsls	r3, r3, #24
 800438e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004392:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	@ 0xd0
 8004396:	461a      	mov	r2, r3
 8004398:	4302      	orrs	r2, r0
 800439a:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 800439e:	4623      	mov	r3, r4
 80043a0:	430b      	orrs	r3, r1
 80043a2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80043a6:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	@ 0xc8
 80043aa:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80043ae:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 80043b2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80043b6:	1d1a      	adds	r2, r3, #4
 80043b8:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80043bc:	4413      	add	r3, r2
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	2200      	movs	r2, #0
 80043c4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80043c8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80043cc:	f04f 0200 	mov.w	r2, #0
 80043d0:	f04f 0300 	mov.w	r3, #0
 80043d4:	f8d7 40c0 	ldr.w	r4, [r7, #192]	@ 0xc0
 80043d8:	0023      	movs	r3, r4
 80043da:	2200      	movs	r2, #0
 80043dc:	ea40 0402 	orr.w	r4, r0, r2
 80043e0:	f8c7 40b8 	str.w	r4, [r7, #184]	@ 0xb8
 80043e4:	430b      	orrs	r3, r1
 80043e6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80043ea:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	@ 0xb8
 80043ee:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80043f2:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 80043f6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80043fa:	1d5a      	adds	r2, r3, #5
 80043fc:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004400:	4413      	add	r3, r2
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	b2db      	uxtb	r3, r3
 8004406:	2200      	movs	r2, #0
 8004408:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800440c:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8004410:	f04f 0200 	mov.w	r2, #0
 8004414:	f04f 0300 	mov.w	r3, #0
 8004418:	f8d7 40b0 	ldr.w	r4, [r7, #176]	@ 0xb0
 800441c:	0223      	lsls	r3, r4, #8
 800441e:	2200      	movs	r2, #0
 8004420:	ea40 0402 	orr.w	r4, r0, r2
 8004424:	f8c7 40a8 	str.w	r4, [r7, #168]	@ 0xa8
 8004428:	430b      	orrs	r3, r1
 800442a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800442e:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	@ 0xa8
 8004432:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8004436:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 800443a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 800443e:	1d9a      	adds	r2, r3, #6
 8004440:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004444:	4413      	add	r3, r2
 8004446:	781b      	ldrb	r3, [r3, #0]
 8004448:	b2db      	uxtb	r3, r3
 800444a:	2200      	movs	r2, #0
 800444c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004450:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004454:	f04f 0200 	mov.w	r2, #0
 8004458:	f04f 0300 	mov.w	r3, #0
 800445c:	f8d7 40a0 	ldr.w	r4, [r7, #160]	@ 0xa0
 8004460:	0423      	lsls	r3, r4, #16
 8004462:	2200      	movs	r2, #0
 8004464:	ea40 0402 	orr.w	r4, r0, r2
 8004468:	f8c7 4098 	str.w	r4, [r7, #152]	@ 0x98
 800446c:	430b      	orrs	r3, r1
 800446e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004472:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	@ 0x98
 8004476:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800447a:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 800447e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8004482:	1dda      	adds	r2, r3, #7
 8004484:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004488:	4413      	add	r3, r2
 800448a:	781b      	ldrb	r3, [r3, #0]
 800448c:	b2db      	uxtb	r3, r3
 800448e:	2200      	movs	r2, #0
 8004490:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004494:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004498:	f04f 0200 	mov.w	r2, #0
 800449c:	f04f 0300 	mov.w	r3, #0
 80044a0:	f8d7 4090 	ldr.w	r4, [r7, #144]	@ 0x90
 80044a4:	0623      	lsls	r3, r4, #24
 80044a6:	2200      	movs	r2, #0
 80044a8:	ea40 0402 	orr.w	r4, r0, r2
 80044ac:	f8c7 4088 	str.w	r4, [r7, #136]	@ 0x88
 80044b0:	430b      	orrs	r3, r1
 80044b2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80044b6:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	@ 0x88
 80044ba:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      this->y = u_y.real;
 80044be:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 80044c2:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80044c6:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 80044ca:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80044ce:	3308      	adds	r3, #8
 80044d0:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 80044d4:	f04f 0200 	mov.w	r2, #0
 80044d8:	f04f 0300 	mov.w	r3, #0
 80044dc:	e9c7 2362 	strd	r2, r3, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80044e0:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 80044e4:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 80044e8:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80044ec:	4413      	add	r3, r2
 80044ee:	781b      	ldrb	r3, [r3, #0]
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	2200      	movs	r2, #0
 80044f4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80044f8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80044fc:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	@ 0x80
 8004500:	461a      	mov	r2, r3
 8004502:	4302      	orrs	r2, r0
 8004504:	67ba      	str	r2, [r7, #120]	@ 0x78
 8004506:	4623      	mov	r3, r4
 8004508:	430b      	orrs	r3, r1
 800450a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800450c:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	@ 0x78
 8004510:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004514:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8004518:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 800451c:	1c5a      	adds	r2, r3, #1
 800451e:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004522:	4413      	add	r3, r2
 8004524:	781b      	ldrb	r3, [r3, #0]
 8004526:	b2db      	uxtb	r3, r3
 8004528:	2200      	movs	r2, #0
 800452a:	673b      	str	r3, [r7, #112]	@ 0x70
 800452c:	677a      	str	r2, [r7, #116]	@ 0x74
 800452e:	f04f 0200 	mov.w	r2, #0
 8004532:	f04f 0300 	mov.w	r3, #0
 8004536:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800453a:	464c      	mov	r4, r9
 800453c:	0223      	lsls	r3, r4, #8
 800453e:	46c4      	mov	ip, r8
 8004540:	ea43 631c 	orr.w	r3, r3, ip, lsr #24
 8004544:	4644      	mov	r4, r8
 8004546:	0222      	lsls	r2, r4, #8
 8004548:	ea40 0402 	orr.w	r4, r0, r2
 800454c:	66bc      	str	r4, [r7, #104]	@ 0x68
 800454e:	430b      	orrs	r3, r1
 8004550:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004552:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	@ 0x68
 8004556:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800455a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 800455e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8004562:	1c9a      	adds	r2, r3, #2
 8004564:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004568:	4413      	add	r3, r2
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	b2db      	uxtb	r3, r3
 800456e:	2200      	movs	r2, #0
 8004570:	663b      	str	r3, [r7, #96]	@ 0x60
 8004572:	667a      	str	r2, [r7, #100]	@ 0x64
 8004574:	f04f 0200 	mov.w	r2, #0
 8004578:	f04f 0300 	mov.w	r3, #0
 800457c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004580:	464c      	mov	r4, r9
 8004582:	0423      	lsls	r3, r4, #16
 8004584:	46c4      	mov	ip, r8
 8004586:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
 800458a:	4644      	mov	r4, r8
 800458c:	0422      	lsls	r2, r4, #16
 800458e:	ea40 0402 	orr.w	r4, r0, r2
 8004592:	65bc      	str	r4, [r7, #88]	@ 0x58
 8004594:	430b      	orrs	r3, r1
 8004596:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004598:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	@ 0x58
 800459c:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80045a0:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 80045a4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80045a8:	1cda      	adds	r2, r3, #3
 80045aa:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80045ae:	4413      	add	r3, r2
 80045b0:	781b      	ldrb	r3, [r3, #0]
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	2200      	movs	r2, #0
 80045b6:	653b      	str	r3, [r7, #80]	@ 0x50
 80045b8:	657a      	str	r2, [r7, #84]	@ 0x54
 80045ba:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 80045be:	4623      	mov	r3, r4
 80045c0:	0a1b      	lsrs	r3, r3, #8
 80045c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80045c4:	4623      	mov	r3, r4
 80045c6:	061b      	lsls	r3, r3, #24
 80045c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80045ca:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 80045ce:	461a      	mov	r2, r3
 80045d0:	4302      	orrs	r2, r0
 80045d2:	643a      	str	r2, [r7, #64]	@ 0x40
 80045d4:	4623      	mov	r3, r4
 80045d6:	430b      	orrs	r3, r1
 80045d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80045da:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 80045de:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80045e2:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 80045e6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80045ea:	1d1a      	adds	r2, r3, #4
 80045ec:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80045f0:	4413      	add	r3, r2
 80045f2:	781b      	ldrb	r3, [r3, #0]
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	2200      	movs	r2, #0
 80045f8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80045fa:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80045fc:	f04f 0200 	mov.w	r2, #0
 8004600:	f04f 0300 	mov.w	r3, #0
 8004604:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 8004606:	0023      	movs	r3, r4
 8004608:	2200      	movs	r2, #0
 800460a:	ea40 0402 	orr.w	r4, r0, r2
 800460e:	633c      	str	r4, [r7, #48]	@ 0x30
 8004610:	430b      	orrs	r3, r1
 8004612:	637b      	str	r3, [r7, #52]	@ 0x34
 8004614:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8004618:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800461c:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8004620:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8004624:	1d5a      	adds	r2, r3, #5
 8004626:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800462a:	4413      	add	r3, r2
 800462c:	781b      	ldrb	r3, [r3, #0]
 800462e:	b2db      	uxtb	r3, r3
 8004630:	2200      	movs	r2, #0
 8004632:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004634:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004636:	f04f 0200 	mov.w	r2, #0
 800463a:	f04f 0300 	mov.w	r3, #0
 800463e:	6abc      	ldr	r4, [r7, #40]	@ 0x28
 8004640:	0223      	lsls	r3, r4, #8
 8004642:	2200      	movs	r2, #0
 8004644:	ea40 0402 	orr.w	r4, r0, r2
 8004648:	623c      	str	r4, [r7, #32]
 800464a:	430b      	orrs	r3, r1
 800464c:	627b      	str	r3, [r7, #36]	@ 0x24
 800464e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8004652:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8004656:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 800465a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 800465e:	3306      	adds	r3, #6
 8004660:	f8d7 2180 	ldr.w	r2, [r7, #384]	@ 0x180
 8004664:	4413      	add	r3, r2
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	b2db      	uxtb	r3, r3
 800466a:	2200      	movs	r2, #0
 800466c:	61bb      	str	r3, [r7, #24]
 800466e:	61fa      	str	r2, [r7, #28]
 8004670:	f04f 0200 	mov.w	r2, #0
 8004674:	f04f 0300 	mov.w	r3, #0
 8004678:	69bc      	ldr	r4, [r7, #24]
 800467a:	0423      	lsls	r3, r4, #16
 800467c:	2200      	movs	r2, #0
 800467e:	ea40 0402 	orr.w	r4, r0, r2
 8004682:	613c      	str	r4, [r7, #16]
 8004684:	430b      	orrs	r3, r1
 8004686:	617b      	str	r3, [r7, #20]
 8004688:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800468c:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8004690:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8004694:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8004698:	3307      	adds	r3, #7
 800469a:	f8d7 2180 	ldr.w	r2, [r7, #384]	@ 0x180
 800469e:	4413      	add	r3, r2
 80046a0:	781b      	ldrb	r3, [r3, #0]
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	2200      	movs	r2, #0
 80046a6:	60bb      	str	r3, [r7, #8]
 80046a8:	60fa      	str	r2, [r7, #12]
 80046aa:	f04f 0200 	mov.w	r2, #0
 80046ae:	f04f 0300 	mov.w	r3, #0
 80046b2:	68bc      	ldr	r4, [r7, #8]
 80046b4:	0623      	lsls	r3, r4, #24
 80046b6:	2200      	movs	r2, #0
 80046b8:	ea40 0402 	orr.w	r4, r0, r2
 80046bc:	603c      	str	r4, [r7, #0]
 80046be:	430b      	orrs	r3, r1
 80046c0:	607b      	str	r3, [r7, #4]
 80046c2:	e9d7 3400 	ldrd	r3, r4, [r7]
 80046c6:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      this->z = u_z.real;
 80046ca:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 80046ce:	f8d7 1184 	ldr.w	r1, [r7, #388]	@ 0x184
 80046d2:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 80046d6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80046da:	3308      	adds	r3, #8
 80046dc:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
     return offset;
 80046e0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
    }
 80046e4:	4618      	mov	r0, r3
 80046e6:	f507 77d6 	add.w	r7, r7, #428	@ 0x1ac
 80046ea:	46bd      	mov	sp, r7
 80046ec:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80046f0:	4770      	bx	lr
	...

080046f4 <_ZN13geometry_msgs7Vector37getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Vector3"; };
 80046f4:	b480      	push	{r7}
 80046f6:	b083      	sub	sp, #12
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	4b02      	ldr	r3, [pc, #8]	@ (8004708 <_ZN13geometry_msgs7Vector37getTypeEv+0x14>)
 80046fe:	4618      	mov	r0, r3
 8004700:	370c      	adds	r7, #12
 8004702:	46bd      	mov	sp, r7
 8004704:	bc80      	pop	{r7}
 8004706:	4770      	bx	lr
 8004708:	08010648 	.word	0x08010648

0800470c <_ZN13geometry_msgs7Vector36getMD5Ev>:
    virtual const char * getMD5() override { return "4a842b65f413084dc2b10fb484ea7f17"; };
 800470c:	b480      	push	{r7}
 800470e:	b083      	sub	sp, #12
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	4b02      	ldr	r3, [pc, #8]	@ (8004720 <_ZN13geometry_msgs7Vector36getMD5Ev+0x14>)
 8004716:	4618      	mov	r0, r3
 8004718:	370c      	adds	r7, #12
 800471a:	46bd      	mov	sp, r7
 800471c:	bc80      	pop	{r7}
 800471e:	4770      	bx	lr
 8004720:	08010660 	.word	0x08010660

08004724 <_ZN11sensor_msgs3ImuC1Ev>:
      double angular_velocity_covariance[9];
      typedef geometry_msgs::Vector3 _linear_acceleration_type;
      _linear_acceleration_type linear_acceleration;
      double linear_acceleration_covariance[9];

    Imu():
 8004724:	b580      	push	{r7, lr}
 8004726:	b082      	sub	sp, #8
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
      orientation(),
      orientation_covariance(),
      angular_velocity(),
      angular_velocity_covariance(),
      linear_acceleration(),
      linear_acceleration_covariance()
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	4618      	mov	r0, r3
 8004730:	f7fd fa10 	bl	8001b54 <_ZN3ros3MsgC1Ev>
 8004734:	4a24      	ldr	r2, [pc, #144]	@ (80047c8 <_ZN11sensor_msgs3ImuC1Ev+0xa4>)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	601a      	str	r2, [r3, #0]
      header(),
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	3304      	adds	r3, #4
 800473e:	4618      	mov	r0, r3
 8004740:	f7fe fa94 	bl	8002c6c <_ZN8std_msgs6HeaderC1Ev>
      orientation(),
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	3318      	adds	r3, #24
 8004748:	4618      	mov	r0, r3
 800474a:	f7fe fc1f 	bl	8002f8c <_ZN13geometry_msgs10QuaternionC1Ev>
      orientation_covariance(),
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8004754:	2308      	movs	r3, #8
 8004756:	e007      	b.n	8004768 <_ZN11sensor_msgs3ImuC1Ev+0x44>
 8004758:	f04f 0000 	mov.w	r0, #0
 800475c:	f04f 0100 	mov.w	r1, #0
 8004760:	e9c2 0100 	strd	r0, r1, [r2]
 8004764:	3b01      	subs	r3, #1
 8004766:	3208      	adds	r2, #8
 8004768:	2b00      	cmp	r3, #0
 800476a:	daf5      	bge.n	8004758 <_ZN11sensor_msgs3ImuC1Ev+0x34>
      angular_velocity(),
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	3388      	adds	r3, #136	@ 0x88
 8004770:	4618      	mov	r0, r3
 8004772:	f7ff fac5 	bl	8003d00 <_ZN13geometry_msgs7Vector3C1Ev>
      angular_velocity_covariance(),
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f103 02a8 	add.w	r2, r3, #168	@ 0xa8
 800477c:	2308      	movs	r3, #8
 800477e:	e007      	b.n	8004790 <_ZN11sensor_msgs3ImuC1Ev+0x6c>
 8004780:	f04f 0000 	mov.w	r0, #0
 8004784:	f04f 0100 	mov.w	r1, #0
 8004788:	e9c2 0100 	strd	r0, r1, [r2]
 800478c:	3b01      	subs	r3, #1
 800478e:	3208      	adds	r2, #8
 8004790:	2b00      	cmp	r3, #0
 8004792:	daf5      	bge.n	8004780 <_ZN11sensor_msgs3ImuC1Ev+0x5c>
      linear_acceleration(),
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	33f0      	adds	r3, #240	@ 0xf0
 8004798:	4618      	mov	r0, r3
 800479a:	f7ff fab1 	bl	8003d00 <_ZN13geometry_msgs7Vector3C1Ev>
      linear_acceleration_covariance()
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f503 7288 	add.w	r2, r3, #272	@ 0x110
 80047a4:	2308      	movs	r3, #8
 80047a6:	e007      	b.n	80047b8 <_ZN11sensor_msgs3ImuC1Ev+0x94>
 80047a8:	f04f 0000 	mov.w	r0, #0
 80047ac:	f04f 0100 	mov.w	r1, #0
 80047b0:	e9c2 0100 	strd	r0, r1, [r2]
 80047b4:	3b01      	subs	r3, #1
 80047b6:	3208      	adds	r2, #8
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	daf5      	bge.n	80047a8 <_ZN11sensor_msgs3ImuC1Ev+0x84>
    {
    }
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	4618      	mov	r0, r3
 80047c0:	3708      	adds	r7, #8
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	bf00      	nop
 80047c8:	08010b70 	.word	0x08010b70

080047cc <_ZNK11sensor_msgs3Imu9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b08c      	sub	sp, #48	@ 0x30
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80047d6:	2300      	movs	r3, #0
 80047d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      offset += this->header.serialize(outbuffer + offset);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	1d18      	adds	r0, r3, #4
 80047de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047e0:	683a      	ldr	r2, [r7, #0]
 80047e2:	4413      	add	r3, r2
 80047e4:	4619      	mov	r1, r3
 80047e6:	f7fe fa61 	bl	8002cac <_ZNK8std_msgs6Header9serializeEPh>
 80047ea:	4602      	mov	r2, r0
 80047ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047ee:	4413      	add	r3, r2
 80047f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      offset += this->orientation.serialize(outbuffer + offset);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f103 0018 	add.w	r0, r3, #24
 80047f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047fa:	683a      	ldr	r2, [r7, #0]
 80047fc:	4413      	add	r3, r2
 80047fe:	4619      	mov	r1, r3
 8004800:	f7fe fbf2 	bl	8002fe8 <_ZNK13geometry_msgs10Quaternion9serializeEPh>
 8004804:	4602      	mov	r2, r0
 8004806:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004808:	4413      	add	r3, r2
 800480a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      for( uint32_t i = 0; i < 9; i++){
 800480c:	2300      	movs	r3, #0
 800480e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004810:	e07d      	b.n	800490e <_ZNK11sensor_msgs3Imu9serializeEPh+0x142>
      union {
        double real;
        uint64_t base;
      } u_orientation_covariancei;
      u_orientation_covariancei.real = this->orientation_covariance[i];
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004816:	3308      	adds	r3, #8
 8004818:	00db      	lsls	r3, r3, #3
 800481a:	4413      	add	r3, r2
 800481c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004820:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_orientation_covariancei.base >> (8 * 0)) & 0xFF;
 8004824:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004828:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800482a:	6838      	ldr	r0, [r7, #0]
 800482c:	4401      	add	r1, r0
 800482e:	b2d3      	uxtb	r3, r2
 8004830:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_orientation_covariancei.base >> (8 * 1)) & 0xFF;
 8004832:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004836:	f04f 0200 	mov.w	r2, #0
 800483a:	f04f 0300 	mov.w	r3, #0
 800483e:	0a02      	lsrs	r2, r0, #8
 8004840:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8004844:	0a0b      	lsrs	r3, r1, #8
 8004846:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004848:	3101      	adds	r1, #1
 800484a:	6838      	ldr	r0, [r7, #0]
 800484c:	4401      	add	r1, r0
 800484e:	b2d3      	uxtb	r3, r2
 8004850:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_orientation_covariancei.base >> (8 * 2)) & 0xFF;
 8004852:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004856:	f04f 0200 	mov.w	r2, #0
 800485a:	f04f 0300 	mov.w	r3, #0
 800485e:	0c02      	lsrs	r2, r0, #16
 8004860:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004864:	0c0b      	lsrs	r3, r1, #16
 8004866:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004868:	3102      	adds	r1, #2
 800486a:	6838      	ldr	r0, [r7, #0]
 800486c:	4401      	add	r1, r0
 800486e:	b2d3      	uxtb	r3, r2
 8004870:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_orientation_covariancei.base >> (8 * 3)) & 0xFF;
 8004872:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004876:	f04f 0200 	mov.w	r2, #0
 800487a:	f04f 0300 	mov.w	r3, #0
 800487e:	0e02      	lsrs	r2, r0, #24
 8004880:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004884:	0e0b      	lsrs	r3, r1, #24
 8004886:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004888:	3103      	adds	r1, #3
 800488a:	6838      	ldr	r0, [r7, #0]
 800488c:	4401      	add	r1, r0
 800488e:	b2d3      	uxtb	r3, r2
 8004890:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_orientation_covariancei.base >> (8 * 4)) & 0xFF;
 8004892:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004896:	f04f 0200 	mov.w	r2, #0
 800489a:	f04f 0300 	mov.w	r3, #0
 800489e:	000a      	movs	r2, r1
 80048a0:	2300      	movs	r3, #0
 80048a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80048a4:	3104      	adds	r1, #4
 80048a6:	6838      	ldr	r0, [r7, #0]
 80048a8:	4401      	add	r1, r0
 80048aa:	b2d3      	uxtb	r3, r2
 80048ac:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_orientation_covariancei.base >> (8 * 5)) & 0xFF;
 80048ae:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80048b2:	f04f 0200 	mov.w	r2, #0
 80048b6:	f04f 0300 	mov.w	r3, #0
 80048ba:	0a0a      	lsrs	r2, r1, #8
 80048bc:	2300      	movs	r3, #0
 80048be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80048c0:	3105      	adds	r1, #5
 80048c2:	6838      	ldr	r0, [r7, #0]
 80048c4:	4401      	add	r1, r0
 80048c6:	b2d3      	uxtb	r3, r2
 80048c8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_orientation_covariancei.base >> (8 * 6)) & 0xFF;
 80048ca:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80048ce:	f04f 0200 	mov.w	r2, #0
 80048d2:	f04f 0300 	mov.w	r3, #0
 80048d6:	0c0a      	lsrs	r2, r1, #16
 80048d8:	2300      	movs	r3, #0
 80048da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80048dc:	3106      	adds	r1, #6
 80048de:	6838      	ldr	r0, [r7, #0]
 80048e0:	4401      	add	r1, r0
 80048e2:	b2d3      	uxtb	r3, r2
 80048e4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_orientation_covariancei.base >> (8 * 7)) & 0xFF;
 80048e6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80048ea:	f04f 0200 	mov.w	r2, #0
 80048ee:	f04f 0300 	mov.w	r3, #0
 80048f2:	0e0a      	lsrs	r2, r1, #24
 80048f4:	2300      	movs	r3, #0
 80048f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80048f8:	3107      	adds	r1, #7
 80048fa:	6838      	ldr	r0, [r7, #0]
 80048fc:	4401      	add	r1, r0
 80048fe:	b2d3      	uxtb	r3, r2
 8004900:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->orientation_covariance[i]);
 8004902:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004904:	3308      	adds	r3, #8
 8004906:	62fb      	str	r3, [r7, #44]	@ 0x2c
      for( uint32_t i = 0; i < 9; i++){
 8004908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800490a:	3301      	adds	r3, #1
 800490c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800490e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004910:	2b08      	cmp	r3, #8
 8004912:	f67f af7e 	bls.w	8004812 <_ZNK11sensor_msgs3Imu9serializeEPh+0x46>
      }
      offset += this->angular_velocity.serialize(outbuffer + offset);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f103 0088 	add.w	r0, r3, #136	@ 0x88
 800491c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800491e:	683a      	ldr	r2, [r7, #0]
 8004920:	4413      	add	r3, r2
 8004922:	4619      	mov	r1, r3
 8004924:	f7ff fa14 	bl	8003d50 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8004928:	4602      	mov	r2, r0
 800492a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800492c:	4413      	add	r3, r2
 800492e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      for( uint32_t i = 0; i < 9; i++){
 8004930:	2300      	movs	r3, #0
 8004932:	627b      	str	r3, [r7, #36]	@ 0x24
 8004934:	e07d      	b.n	8004a32 <_ZNK11sensor_msgs3Imu9serializeEPh+0x266>
      union {
        double real;
        uint64_t base;
      } u_angular_velocity_covariancei;
      u_angular_velocity_covariancei.real = this->angular_velocity_covariance[i];
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800493a:	3315      	adds	r3, #21
 800493c:	00db      	lsls	r3, r3, #3
 800493e:	4413      	add	r3, r2
 8004940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004944:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_angular_velocity_covariancei.base >> (8 * 0)) & 0xFF;
 8004948:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800494c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800494e:	6838      	ldr	r0, [r7, #0]
 8004950:	4401      	add	r1, r0
 8004952:	b2d3      	uxtb	r3, r2
 8004954:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_angular_velocity_covariancei.base >> (8 * 1)) & 0xFF;
 8004956:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800495a:	f04f 0200 	mov.w	r2, #0
 800495e:	f04f 0300 	mov.w	r3, #0
 8004962:	0a02      	lsrs	r2, r0, #8
 8004964:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8004968:	0a0b      	lsrs	r3, r1, #8
 800496a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800496c:	3101      	adds	r1, #1
 800496e:	6838      	ldr	r0, [r7, #0]
 8004970:	4401      	add	r1, r0
 8004972:	b2d3      	uxtb	r3, r2
 8004974:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_angular_velocity_covariancei.base >> (8 * 2)) & 0xFF;
 8004976:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800497a:	f04f 0200 	mov.w	r2, #0
 800497e:	f04f 0300 	mov.w	r3, #0
 8004982:	0c02      	lsrs	r2, r0, #16
 8004984:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004988:	0c0b      	lsrs	r3, r1, #16
 800498a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800498c:	3102      	adds	r1, #2
 800498e:	6838      	ldr	r0, [r7, #0]
 8004990:	4401      	add	r1, r0
 8004992:	b2d3      	uxtb	r3, r2
 8004994:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_angular_velocity_covariancei.base >> (8 * 3)) & 0xFF;
 8004996:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800499a:	f04f 0200 	mov.w	r2, #0
 800499e:	f04f 0300 	mov.w	r3, #0
 80049a2:	0e02      	lsrs	r2, r0, #24
 80049a4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80049a8:	0e0b      	lsrs	r3, r1, #24
 80049aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80049ac:	3103      	adds	r1, #3
 80049ae:	6838      	ldr	r0, [r7, #0]
 80049b0:	4401      	add	r1, r0
 80049b2:	b2d3      	uxtb	r3, r2
 80049b4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_angular_velocity_covariancei.base >> (8 * 4)) & 0xFF;
 80049b6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80049ba:	f04f 0200 	mov.w	r2, #0
 80049be:	f04f 0300 	mov.w	r3, #0
 80049c2:	000a      	movs	r2, r1
 80049c4:	2300      	movs	r3, #0
 80049c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80049c8:	3104      	adds	r1, #4
 80049ca:	6838      	ldr	r0, [r7, #0]
 80049cc:	4401      	add	r1, r0
 80049ce:	b2d3      	uxtb	r3, r2
 80049d0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_angular_velocity_covariancei.base >> (8 * 5)) & 0xFF;
 80049d2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80049d6:	f04f 0200 	mov.w	r2, #0
 80049da:	f04f 0300 	mov.w	r3, #0
 80049de:	0a0a      	lsrs	r2, r1, #8
 80049e0:	2300      	movs	r3, #0
 80049e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80049e4:	3105      	adds	r1, #5
 80049e6:	6838      	ldr	r0, [r7, #0]
 80049e8:	4401      	add	r1, r0
 80049ea:	b2d3      	uxtb	r3, r2
 80049ec:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_angular_velocity_covariancei.base >> (8 * 6)) & 0xFF;
 80049ee:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80049f2:	f04f 0200 	mov.w	r2, #0
 80049f6:	f04f 0300 	mov.w	r3, #0
 80049fa:	0c0a      	lsrs	r2, r1, #16
 80049fc:	2300      	movs	r3, #0
 80049fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004a00:	3106      	adds	r1, #6
 8004a02:	6838      	ldr	r0, [r7, #0]
 8004a04:	4401      	add	r1, r0
 8004a06:	b2d3      	uxtb	r3, r2
 8004a08:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_angular_velocity_covariancei.base >> (8 * 7)) & 0xFF;
 8004a0a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004a0e:	f04f 0200 	mov.w	r2, #0
 8004a12:	f04f 0300 	mov.w	r3, #0
 8004a16:	0e0a      	lsrs	r2, r1, #24
 8004a18:	2300      	movs	r3, #0
 8004a1a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004a1c:	3107      	adds	r1, #7
 8004a1e:	6838      	ldr	r0, [r7, #0]
 8004a20:	4401      	add	r1, r0
 8004a22:	b2d3      	uxtb	r3, r2
 8004a24:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->angular_velocity_covariance[i]);
 8004a26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a28:	3308      	adds	r3, #8
 8004a2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      for( uint32_t i = 0; i < 9; i++){
 8004a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a2e:	3301      	adds	r3, #1
 8004a30:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a34:	2b08      	cmp	r3, #8
 8004a36:	f67f af7e 	bls.w	8004936 <_ZNK11sensor_msgs3Imu9serializeEPh+0x16a>
      }
      offset += this->linear_acceleration.serialize(outbuffer + offset);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f103 00f0 	add.w	r0, r3, #240	@ 0xf0
 8004a40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a42:	683a      	ldr	r2, [r7, #0]
 8004a44:	4413      	add	r3, r2
 8004a46:	4619      	mov	r1, r3
 8004a48:	f7ff f982 	bl	8003d50 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a50:	4413      	add	r3, r2
 8004a52:	62fb      	str	r3, [r7, #44]	@ 0x2c
      for( uint32_t i = 0; i < 9; i++){
 8004a54:	2300      	movs	r3, #0
 8004a56:	623b      	str	r3, [r7, #32]
 8004a58:	e07d      	b.n	8004b56 <_ZNK11sensor_msgs3Imu9serializeEPh+0x38a>
      union {
        double real;
        uint64_t base;
      } u_linear_acceleration_covariancei;
      u_linear_acceleration_covariancei.real = this->linear_acceleration_covariance[i];
 8004a5a:	687a      	ldr	r2, [r7, #4]
 8004a5c:	6a3b      	ldr	r3, [r7, #32]
 8004a5e:	3322      	adds	r3, #34	@ 0x22
 8004a60:	00db      	lsls	r3, r3, #3
 8004a62:	4413      	add	r3, r2
 8004a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a68:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_linear_acceleration_covariancei.base >> (8 * 0)) & 0xFF;
 8004a6c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a70:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004a72:	6838      	ldr	r0, [r7, #0]
 8004a74:	4401      	add	r1, r0
 8004a76:	b2d3      	uxtb	r3, r2
 8004a78:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_linear_acceleration_covariancei.base >> (8 * 1)) & 0xFF;
 8004a7a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004a7e:	f04f 0200 	mov.w	r2, #0
 8004a82:	f04f 0300 	mov.w	r3, #0
 8004a86:	0a02      	lsrs	r2, r0, #8
 8004a88:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8004a8c:	0a0b      	lsrs	r3, r1, #8
 8004a8e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004a90:	3101      	adds	r1, #1
 8004a92:	6838      	ldr	r0, [r7, #0]
 8004a94:	4401      	add	r1, r0
 8004a96:	b2d3      	uxtb	r3, r2
 8004a98:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_linear_acceleration_covariancei.base >> (8 * 2)) & 0xFF;
 8004a9a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004a9e:	f04f 0200 	mov.w	r2, #0
 8004aa2:	f04f 0300 	mov.w	r3, #0
 8004aa6:	0c02      	lsrs	r2, r0, #16
 8004aa8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004aac:	0c0b      	lsrs	r3, r1, #16
 8004aae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004ab0:	3102      	adds	r1, #2
 8004ab2:	6838      	ldr	r0, [r7, #0]
 8004ab4:	4401      	add	r1, r0
 8004ab6:	b2d3      	uxtb	r3, r2
 8004ab8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_linear_acceleration_covariancei.base >> (8 * 3)) & 0xFF;
 8004aba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004abe:	f04f 0200 	mov.w	r2, #0
 8004ac2:	f04f 0300 	mov.w	r3, #0
 8004ac6:	0e02      	lsrs	r2, r0, #24
 8004ac8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004acc:	0e0b      	lsrs	r3, r1, #24
 8004ace:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004ad0:	3103      	adds	r1, #3
 8004ad2:	6838      	ldr	r0, [r7, #0]
 8004ad4:	4401      	add	r1, r0
 8004ad6:	b2d3      	uxtb	r3, r2
 8004ad8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_linear_acceleration_covariancei.base >> (8 * 4)) & 0xFF;
 8004ada:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004ade:	f04f 0200 	mov.w	r2, #0
 8004ae2:	f04f 0300 	mov.w	r3, #0
 8004ae6:	000a      	movs	r2, r1
 8004ae8:	2300      	movs	r3, #0
 8004aea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004aec:	3104      	adds	r1, #4
 8004aee:	6838      	ldr	r0, [r7, #0]
 8004af0:	4401      	add	r1, r0
 8004af2:	b2d3      	uxtb	r3, r2
 8004af4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_linear_acceleration_covariancei.base >> (8 * 5)) & 0xFF;
 8004af6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004afa:	f04f 0200 	mov.w	r2, #0
 8004afe:	f04f 0300 	mov.w	r3, #0
 8004b02:	0a0a      	lsrs	r2, r1, #8
 8004b04:	2300      	movs	r3, #0
 8004b06:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004b08:	3105      	adds	r1, #5
 8004b0a:	6838      	ldr	r0, [r7, #0]
 8004b0c:	4401      	add	r1, r0
 8004b0e:	b2d3      	uxtb	r3, r2
 8004b10:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_linear_acceleration_covariancei.base >> (8 * 6)) & 0xFF;
 8004b12:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004b16:	f04f 0200 	mov.w	r2, #0
 8004b1a:	f04f 0300 	mov.w	r3, #0
 8004b1e:	0c0a      	lsrs	r2, r1, #16
 8004b20:	2300      	movs	r3, #0
 8004b22:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004b24:	3106      	adds	r1, #6
 8004b26:	6838      	ldr	r0, [r7, #0]
 8004b28:	4401      	add	r1, r0
 8004b2a:	b2d3      	uxtb	r3, r2
 8004b2c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_linear_acceleration_covariancei.base >> (8 * 7)) & 0xFF;
 8004b2e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004b32:	f04f 0200 	mov.w	r2, #0
 8004b36:	f04f 0300 	mov.w	r3, #0
 8004b3a:	0e0a      	lsrs	r2, r1, #24
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004b40:	3107      	adds	r1, #7
 8004b42:	6838      	ldr	r0, [r7, #0]
 8004b44:	4401      	add	r1, r0
 8004b46:	b2d3      	uxtb	r3, r2
 8004b48:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->linear_acceleration_covariance[i]);
 8004b4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b4c:	3308      	adds	r3, #8
 8004b4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      for( uint32_t i = 0; i < 9; i++){
 8004b50:	6a3b      	ldr	r3, [r7, #32]
 8004b52:	3301      	adds	r3, #1
 8004b54:	623b      	str	r3, [r7, #32]
 8004b56:	6a3b      	ldr	r3, [r7, #32]
 8004b58:	2b08      	cmp	r3, #8
 8004b5a:	f67f af7e 	bls.w	8004a5a <_ZNK11sensor_msgs3Imu9serializeEPh+0x28e>
      }
      return offset;
 8004b5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
 8004b60:	4618      	mov	r0, r3
 8004b62:	3730      	adds	r7, #48	@ 0x30
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}

08004b68 <_ZN11sensor_msgs3Imu11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8004b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b6c:	b0ed      	sub	sp, #436	@ 0x1b4
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	f8c7 0184 	str.w	r0, [r7, #388]	@ 0x184
 8004b74:	f8c7 1180 	str.w	r1, [r7, #384]	@ 0x180
    {
      int offset = 0;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
      offset += this->header.deserialize(inbuffer + offset);
 8004b7e:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8004b82:	1d18      	adds	r0, r3, #4
 8004b84:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8004b88:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004b8c:	4413      	add	r3, r2
 8004b8e:	4619      	mov	r1, r3
 8004b90:	f7fe f924 	bl	8002ddc <_ZN8std_msgs6Header11deserializeEPh>
 8004b94:	4602      	mov	r2, r0
 8004b96:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8004b9a:	4413      	add	r3, r2
 8004b9c:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
      offset += this->orientation.deserialize(inbuffer + offset);
 8004ba0:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8004ba4:	f103 0018 	add.w	r0, r3, #24
 8004ba8:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8004bac:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004bb0:	4413      	add	r3, r2
 8004bb2:	4619      	mov	r1, r3
 8004bb4:	f7fe fc01 	bl	80033ba <_ZN13geometry_msgs10Quaternion11deserializeEPh>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8004bbe:	4413      	add	r3, r2
 8004bc0:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
      for( uint32_t i = 0; i < 9; i++){
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8004bca:	e122      	b.n	8004e12 <_ZN11sensor_msgs3Imu11deserializeEPh+0x2aa>
      union {
        double real;
        uint64_t base;
      } u_orientation_covariancei;
      u_orientation_covariancei.base = 0;
 8004bcc:	f04f 0200 	mov.w	r2, #0
 8004bd0:	f04f 0300 	mov.w	r3, #0
 8004bd4:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8004bd8:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8004bdc:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8004be0:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004be4:	4413      	add	r3, r2
 8004be6:	781b      	ldrb	r3, [r3, #0]
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	2200      	movs	r2, #0
 8004bec:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 8004bf0:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
 8004bf4:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	@ 0x170
 8004bf8:	4616      	mov	r6, r2
 8004bfa:	4306      	orrs	r6, r0
 8004bfc:	f8c7 6168 	str.w	r6, [r7, #360]	@ 0x168
 8004c00:	430b      	orrs	r3, r1
 8004c02:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 8004c06:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	@ 0x168
 8004c0a:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004c0e:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8004c12:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8004c16:	1c5a      	adds	r2, r3, #1
 8004c18:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004c1c:	4413      	add	r3, r2
 8004c1e:	781b      	ldrb	r3, [r3, #0]
 8004c20:	b2db      	uxtb	r3, r3
 8004c22:	2200      	movs	r2, #0
 8004c24:	469a      	mov	sl, r3
 8004c26:	4693      	mov	fp, r2
 8004c28:	f04f 0200 	mov.w	r2, #0
 8004c2c:	f04f 0300 	mov.w	r3, #0
 8004c30:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8004c34:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8004c38:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8004c3c:	ea40 0602 	orr.w	r6, r0, r2
 8004c40:	f8c7 6160 	str.w	r6, [r7, #352]	@ 0x160
 8004c44:	430b      	orrs	r3, r1
 8004c46:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8004c4a:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	@ 0x160
 8004c4e:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004c52:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8004c56:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8004c5a:	1c9a      	adds	r2, r3, #2
 8004c5c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004c60:	4413      	add	r3, r2
 8004c62:	781b      	ldrb	r3, [r3, #0]
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	2200      	movs	r2, #0
 8004c68:	4698      	mov	r8, r3
 8004c6a:	4691      	mov	r9, r2
 8004c6c:	f04f 0200 	mov.w	r2, #0
 8004c70:	f04f 0300 	mov.w	r3, #0
 8004c74:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8004c78:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8004c7c:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8004c80:	ea40 0602 	orr.w	r6, r0, r2
 8004c84:	f8c7 6158 	str.w	r6, [r7, #344]	@ 0x158
 8004c88:	430b      	orrs	r3, r1
 8004c8a:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8004c8e:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	@ 0x158
 8004c92:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004c96:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8004c9a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8004c9e:	1cda      	adds	r2, r3, #3
 8004ca0:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004ca4:	4413      	add	r3, r2
 8004ca6:	781b      	ldrb	r3, [r3, #0]
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	2200      	movs	r2, #0
 8004cac:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 8004cb0:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8004cb4:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8004cb8:	0a1d      	lsrs	r5, r3, #8
 8004cba:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8004cbe:	061c      	lsls	r4, r3, #24
 8004cc0:	ea40 0304 	orr.w	r3, r0, r4
 8004cc4:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8004cc8:	ea41 0305 	orr.w	r3, r1, r5
 8004ccc:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8004cd0:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 8004cd4:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8004cd8:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8004cdc:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8004ce0:	1d1a      	adds	r2, r3, #4
 8004ce2:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004ce6:	4413      	add	r3, r2
 8004ce8:	781b      	ldrb	r3, [r3, #0]
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	2200      	movs	r2, #0
 8004cee:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 8004cf2:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8004cf6:	f04f 0200 	mov.w	r2, #0
 8004cfa:	f04f 0300 	mov.w	r3, #0
 8004cfe:	f8d7 6148 	ldr.w	r6, [r7, #328]	@ 0x148
 8004d02:	0033      	movs	r3, r6
 8004d04:	2200      	movs	r2, #0
 8004d06:	ea40 0602 	orr.w	r6, r0, r2
 8004d0a:	f8c7 6140 	str.w	r6, [r7, #320]	@ 0x140
 8004d0e:	430b      	orrs	r3, r1
 8004d10:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8004d14:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 8004d18:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8004d1c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8004d20:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8004d24:	1d5a      	adds	r2, r3, #5
 8004d26:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004d2a:	4413      	add	r3, r2
 8004d2c:	781b      	ldrb	r3, [r3, #0]
 8004d2e:	b2db      	uxtb	r3, r3
 8004d30:	2200      	movs	r2, #0
 8004d32:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8004d36:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 8004d3a:	f04f 0200 	mov.w	r2, #0
 8004d3e:	f04f 0300 	mov.w	r3, #0
 8004d42:	f8d7 6138 	ldr.w	r6, [r7, #312]	@ 0x138
 8004d46:	0233      	lsls	r3, r6, #8
 8004d48:	2200      	movs	r2, #0
 8004d4a:	ea40 0602 	orr.w	r6, r0, r2
 8004d4e:	f8c7 6130 	str.w	r6, [r7, #304]	@ 0x130
 8004d52:	430b      	orrs	r3, r1
 8004d54:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8004d58:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 8004d5c:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8004d60:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8004d64:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8004d68:	1d9a      	adds	r2, r3, #6
 8004d6a:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004d6e:	4413      	add	r3, r2
 8004d70:	781b      	ldrb	r3, [r3, #0]
 8004d72:	b2db      	uxtb	r3, r3
 8004d74:	2200      	movs	r2, #0
 8004d76:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8004d7a:	f8c7 212c 	str.w	r2, [r7, #300]	@ 0x12c
 8004d7e:	f04f 0200 	mov.w	r2, #0
 8004d82:	f04f 0300 	mov.w	r3, #0
 8004d86:	f8d7 6128 	ldr.w	r6, [r7, #296]	@ 0x128
 8004d8a:	0433      	lsls	r3, r6, #16
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	ea40 0602 	orr.w	r6, r0, r2
 8004d92:	f8c7 6120 	str.w	r6, [r7, #288]	@ 0x120
 8004d96:	430b      	orrs	r3, r1
 8004d98:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8004d9c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8004da0:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8004da4:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8004da8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8004dac:	1dda      	adds	r2, r3, #7
 8004dae:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004db2:	4413      	add	r3, r2
 8004db4:	781b      	ldrb	r3, [r3, #0]
 8004db6:	b2db      	uxtb	r3, r3
 8004db8:	2200      	movs	r2, #0
 8004dba:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8004dbe:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8004dc2:	f04f 0200 	mov.w	r2, #0
 8004dc6:	f04f 0300 	mov.w	r3, #0
 8004dca:	f8d7 6118 	ldr.w	r6, [r7, #280]	@ 0x118
 8004dce:	0633      	lsls	r3, r6, #24
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	ea40 0602 	orr.w	r6, r0, r2
 8004dd6:	f8c7 6110 	str.w	r6, [r7, #272]	@ 0x110
 8004dda:	430b      	orrs	r3, r1
 8004ddc:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8004de0:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8004de4:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      this->orientation_covariance[i] = u_orientation_covariancei.real;
 8004de8:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8004dec:	f8d7 2184 	ldr.w	r2, [r7, #388]	@ 0x184
 8004df0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8004df4:	3308      	adds	r3, #8
 8004df6:	00db      	lsls	r3, r3, #3
 8004df8:	4413      	add	r3, r2
 8004dfa:	e9c3 0100 	strd	r0, r1, [r3]
      offset += sizeof(this->orientation_covariance[i]);
 8004dfe:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8004e02:	3308      	adds	r3, #8
 8004e04:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
      for( uint32_t i = 0; i < 9; i++){
 8004e08:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8004e0c:	3301      	adds	r3, #1
 8004e0e:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8004e12:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8004e16:	2b08      	cmp	r3, #8
 8004e18:	f67f aed8 	bls.w	8004bcc <_ZN11sensor_msgs3Imu11deserializeEPh+0x64>
      }
      offset += this->angular_velocity.deserialize(inbuffer + offset);
 8004e1c:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8004e20:	f103 0088 	add.w	r0, r3, #136	@ 0x88
 8004e24:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8004e28:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004e2c:	4413      	add	r3, r2
 8004e2e:	4619      	mov	r1, r3
 8004e30:	f7ff f900 	bl	8004034 <_ZN13geometry_msgs7Vector311deserializeEPh>
 8004e34:	4602      	mov	r2, r0
 8004e36:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8004e3a:	4413      	add	r3, r2
 8004e3c:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
      for( uint32_t i = 0; i < 9; i++){
 8004e40:	2300      	movs	r3, #0
 8004e42:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8004e46:	e135      	b.n	80050b4 <_ZN11sensor_msgs3Imu11deserializeEPh+0x54c>
      union {
        double real;
        uint64_t base;
      } u_angular_velocity_covariancei;
      u_angular_velocity_covariancei.base = 0;
 8004e48:	f04f 0200 	mov.w	r2, #0
 8004e4c:	f04f 0300 	mov.w	r3, #0
 8004e50:	e9c7 2364 	strd	r2, r3, [r7, #400]	@ 0x190
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8004e54:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8004e58:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8004e5c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004e60:	4413      	add	r3, r2
 8004e62:	781b      	ldrb	r3, [r3, #0]
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	2200      	movs	r2, #0
 8004e68:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8004e6c:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 8004e70:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	@ 0x108
 8004e74:	461a      	mov	r2, r3
 8004e76:	4302      	orrs	r2, r0
 8004e78:	f8c7 2100 	str.w	r2, [r7, #256]	@ 0x100
 8004e7c:	4623      	mov	r3, r4
 8004e7e:	430b      	orrs	r3, r1
 8004e80:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004e84:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	@ 0x100
 8004e88:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004e8c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8004e90:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8004e94:	1c5a      	adds	r2, r3, #1
 8004e96:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004e9a:	4413      	add	r3, r2
 8004e9c:	781b      	ldrb	r3, [r3, #0]
 8004e9e:	b2db      	uxtb	r3, r3
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004ea6:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 8004eaa:	f04f 0200 	mov.w	r2, #0
 8004eae:	f04f 0300 	mov.w	r3, #0
 8004eb2:	e9d7 563e 	ldrd	r5, r6, [r7, #248]	@ 0xf8
 8004eb6:	4634      	mov	r4, r6
 8004eb8:	0223      	lsls	r3, r4, #8
 8004eba:	462c      	mov	r4, r5
 8004ebc:	4635      	mov	r5, r6
 8004ebe:	4626      	mov	r6, r4
 8004ec0:	ea43 6316 	orr.w	r3, r3, r6, lsr #24
 8004ec4:	0222      	lsls	r2, r4, #8
 8004ec6:	ea40 0402 	orr.w	r4, r0, r2
 8004eca:	f8c7 40f0 	str.w	r4, [r7, #240]	@ 0xf0
 8004ece:	430b      	orrs	r3, r1
 8004ed0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004ed4:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	@ 0xf0
 8004ed8:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004edc:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8004ee0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8004ee4:	1c9a      	adds	r2, r3, #2
 8004ee6:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004eea:	4413      	add	r3, r2
 8004eec:	781b      	ldrb	r3, [r3, #0]
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004ef6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004efa:	f04f 0200 	mov.w	r2, #0
 8004efe:	f04f 0300 	mov.w	r3, #0
 8004f02:	e9d7 563a 	ldrd	r5, r6, [r7, #232]	@ 0xe8
 8004f06:	4634      	mov	r4, r6
 8004f08:	0423      	lsls	r3, r4, #16
 8004f0a:	462c      	mov	r4, r5
 8004f0c:	4635      	mov	r5, r6
 8004f0e:	4626      	mov	r6, r4
 8004f10:	ea43 4316 	orr.w	r3, r3, r6, lsr #16
 8004f14:	0422      	lsls	r2, r4, #16
 8004f16:	ea40 0402 	orr.w	r4, r0, r2
 8004f1a:	f8c7 40e0 	str.w	r4, [r7, #224]	@ 0xe0
 8004f1e:	430b      	orrs	r3, r1
 8004f20:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004f24:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	@ 0xe0
 8004f28:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004f2c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8004f30:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8004f34:	1cda      	adds	r2, r3, #3
 8004f36:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004f3a:	4413      	add	r3, r2
 8004f3c:	781b      	ldrb	r3, [r3, #0]
 8004f3e:	b2db      	uxtb	r3, r3
 8004f40:	2200      	movs	r2, #0
 8004f42:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004f46:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004f4a:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8004f4e:	4623      	mov	r3, r4
 8004f50:	0a1b      	lsrs	r3, r3, #8
 8004f52:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004f56:	4623      	mov	r3, r4
 8004f58:	061b      	lsls	r3, r3, #24
 8004f5a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004f5e:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	@ 0xd0
 8004f62:	461a      	mov	r2, r3
 8004f64:	4302      	orrs	r2, r0
 8004f66:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8004f6a:	4623      	mov	r3, r4
 8004f6c:	430b      	orrs	r3, r1
 8004f6e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004f72:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	@ 0xc8
 8004f76:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8004f7a:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8004f7e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8004f82:	1d1a      	adds	r2, r3, #4
 8004f84:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004f88:	4413      	add	r3, r2
 8004f8a:	781b      	ldrb	r3, [r3, #0]
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	2200      	movs	r2, #0
 8004f90:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004f94:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004f98:	f04f 0200 	mov.w	r2, #0
 8004f9c:	f04f 0300 	mov.w	r3, #0
 8004fa0:	f8d7 40c0 	ldr.w	r4, [r7, #192]	@ 0xc0
 8004fa4:	0023      	movs	r3, r4
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	ea40 0402 	orr.w	r4, r0, r2
 8004fac:	f8c7 40b8 	str.w	r4, [r7, #184]	@ 0xb8
 8004fb0:	430b      	orrs	r3, r1
 8004fb2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004fb6:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	@ 0xb8
 8004fba:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8004fbe:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8004fc2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8004fc6:	1d5a      	adds	r2, r3, #5
 8004fc8:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004fcc:	4413      	add	r3, r2
 8004fce:	781b      	ldrb	r3, [r3, #0]
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004fd8:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8004fdc:	f04f 0200 	mov.w	r2, #0
 8004fe0:	f04f 0300 	mov.w	r3, #0
 8004fe4:	f8d7 40b0 	ldr.w	r4, [r7, #176]	@ 0xb0
 8004fe8:	0223      	lsls	r3, r4, #8
 8004fea:	2200      	movs	r2, #0
 8004fec:	ea40 0402 	orr.w	r4, r0, r2
 8004ff0:	f8c7 40a8 	str.w	r4, [r7, #168]	@ 0xa8
 8004ff4:	430b      	orrs	r3, r1
 8004ff6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004ffa:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	@ 0xa8
 8004ffe:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8005002:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8005006:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 800500a:	1d9a      	adds	r2, r3, #6
 800500c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005010:	4413      	add	r3, r2
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	b2db      	uxtb	r3, r3
 8005016:	2200      	movs	r2, #0
 8005018:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800501c:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005020:	f04f 0200 	mov.w	r2, #0
 8005024:	f04f 0300 	mov.w	r3, #0
 8005028:	f8d7 40a0 	ldr.w	r4, [r7, #160]	@ 0xa0
 800502c:	0423      	lsls	r3, r4, #16
 800502e:	2200      	movs	r2, #0
 8005030:	ea40 0402 	orr.w	r4, r0, r2
 8005034:	f8c7 4098 	str.w	r4, [r7, #152]	@ 0x98
 8005038:	430b      	orrs	r3, r1
 800503a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800503e:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	@ 0x98
 8005042:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8005046:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 800504a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 800504e:	1dda      	adds	r2, r3, #7
 8005050:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005054:	4413      	add	r3, r2
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	b2db      	uxtb	r3, r3
 800505a:	2200      	movs	r2, #0
 800505c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005060:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005064:	f04f 0200 	mov.w	r2, #0
 8005068:	f04f 0300 	mov.w	r3, #0
 800506c:	f8d7 4090 	ldr.w	r4, [r7, #144]	@ 0x90
 8005070:	0623      	lsls	r3, r4, #24
 8005072:	2200      	movs	r2, #0
 8005074:	ea40 0402 	orr.w	r4, r0, r2
 8005078:	f8c7 4088 	str.w	r4, [r7, #136]	@ 0x88
 800507c:	430b      	orrs	r3, r1
 800507e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005082:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	@ 0x88
 8005086:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      this->angular_velocity_covariance[i] = u_angular_velocity_covariancei.real;
 800508a:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 800508e:	f8d7 2184 	ldr.w	r2, [r7, #388]	@ 0x184
 8005092:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8005096:	3315      	adds	r3, #21
 8005098:	00db      	lsls	r3, r3, #3
 800509a:	4413      	add	r3, r2
 800509c:	e9c3 0100 	strd	r0, r1, [r3]
      offset += sizeof(this->angular_velocity_covariance[i]);
 80050a0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80050a4:	3308      	adds	r3, #8
 80050a6:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
      for( uint32_t i = 0; i < 9; i++){
 80050aa:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80050ae:	3301      	adds	r3, #1
 80050b0:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80050b4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80050b8:	2b08      	cmp	r3, #8
 80050ba:	f67f aec5 	bls.w	8004e48 <_ZN11sensor_msgs3Imu11deserializeEPh+0x2e0>
      }
      offset += this->linear_acceleration.deserialize(inbuffer + offset);
 80050be:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80050c2:	f103 00f0 	add.w	r0, r3, #240	@ 0xf0
 80050c6:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 80050ca:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80050ce:	4413      	add	r3, r2
 80050d0:	4619      	mov	r1, r3
 80050d2:	f7fe ffaf 	bl	8004034 <_ZN13geometry_msgs7Vector311deserializeEPh>
 80050d6:	4602      	mov	r2, r0
 80050d8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80050dc:	4413      	add	r3, r2
 80050de:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
      for( uint32_t i = 0; i < 9; i++){
 80050e2:	2300      	movs	r3, #0
 80050e4:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80050e8:	e111      	b.n	800530e <_ZN11sensor_msgs3Imu11deserializeEPh+0x7a6>
      union {
        double real;
        uint64_t base;
      } u_linear_acceleration_covariancei;
      u_linear_acceleration_covariancei.base = 0;
 80050ea:	f04f 0200 	mov.w	r2, #0
 80050ee:	f04f 0300 	mov.w	r3, #0
 80050f2:	e9c7 2362 	strd	r2, r3, [r7, #392]	@ 0x188
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80050f6:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 80050fa:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 80050fe:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005102:	4413      	add	r3, r2
 8005104:	781b      	ldrb	r3, [r3, #0]
 8005106:	b2db      	uxtb	r3, r3
 8005108:	2200      	movs	r2, #0
 800510a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800510e:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8005112:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	@ 0x80
 8005116:	461a      	mov	r2, r3
 8005118:	4302      	orrs	r2, r0
 800511a:	67ba      	str	r2, [r7, #120]	@ 0x78
 800511c:	4623      	mov	r3, r4
 800511e:	430b      	orrs	r3, r1
 8005120:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005122:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	@ 0x78
 8005126:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800512a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 800512e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8005132:	1c5a      	adds	r2, r3, #1
 8005134:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005138:	4413      	add	r3, r2
 800513a:	781b      	ldrb	r3, [r3, #0]
 800513c:	b2db      	uxtb	r3, r3
 800513e:	2200      	movs	r2, #0
 8005140:	673b      	str	r3, [r7, #112]	@ 0x70
 8005142:	677a      	str	r2, [r7, #116]	@ 0x74
 8005144:	f04f 0200 	mov.w	r2, #0
 8005148:	f04f 0300 	mov.w	r3, #0
 800514c:	e9d7 561c 	ldrd	r5, r6, [r7, #112]	@ 0x70
 8005150:	4634      	mov	r4, r6
 8005152:	0223      	lsls	r3, r4, #8
 8005154:	462c      	mov	r4, r5
 8005156:	4635      	mov	r5, r6
 8005158:	4626      	mov	r6, r4
 800515a:	ea43 6316 	orr.w	r3, r3, r6, lsr #24
 800515e:	0222      	lsls	r2, r4, #8
 8005160:	ea40 0402 	orr.w	r4, r0, r2
 8005164:	66bc      	str	r4, [r7, #104]	@ 0x68
 8005166:	430b      	orrs	r3, r1
 8005168:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800516a:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	@ 0x68
 800516e:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8005172:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8005176:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 800517a:	1c9a      	adds	r2, r3, #2
 800517c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005180:	4413      	add	r3, r2
 8005182:	781b      	ldrb	r3, [r3, #0]
 8005184:	b2db      	uxtb	r3, r3
 8005186:	2200      	movs	r2, #0
 8005188:	663b      	str	r3, [r7, #96]	@ 0x60
 800518a:	667a      	str	r2, [r7, #100]	@ 0x64
 800518c:	f04f 0200 	mov.w	r2, #0
 8005190:	f04f 0300 	mov.w	r3, #0
 8005194:	e9d7 5618 	ldrd	r5, r6, [r7, #96]	@ 0x60
 8005198:	4634      	mov	r4, r6
 800519a:	0423      	lsls	r3, r4, #16
 800519c:	462c      	mov	r4, r5
 800519e:	4635      	mov	r5, r6
 80051a0:	4626      	mov	r6, r4
 80051a2:	ea43 4316 	orr.w	r3, r3, r6, lsr #16
 80051a6:	0422      	lsls	r2, r4, #16
 80051a8:	ea40 0402 	orr.w	r4, r0, r2
 80051ac:	65bc      	str	r4, [r7, #88]	@ 0x58
 80051ae:	430b      	orrs	r3, r1
 80051b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80051b2:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	@ 0x58
 80051b6:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80051ba:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 80051be:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80051c2:	1cda      	adds	r2, r3, #3
 80051c4:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80051c8:	4413      	add	r3, r2
 80051ca:	781b      	ldrb	r3, [r3, #0]
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	2200      	movs	r2, #0
 80051d0:	653b      	str	r3, [r7, #80]	@ 0x50
 80051d2:	657a      	str	r2, [r7, #84]	@ 0x54
 80051d4:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 80051d8:	4623      	mov	r3, r4
 80051da:	0a1b      	lsrs	r3, r3, #8
 80051dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80051de:	4623      	mov	r3, r4
 80051e0:	061b      	lsls	r3, r3, #24
 80051e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80051e4:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 80051e8:	461a      	mov	r2, r3
 80051ea:	4302      	orrs	r2, r0
 80051ec:	643a      	str	r2, [r7, #64]	@ 0x40
 80051ee:	4623      	mov	r3, r4
 80051f0:	430b      	orrs	r3, r1
 80051f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80051f4:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 80051f8:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80051fc:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8005200:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8005204:	1d1a      	adds	r2, r3, #4
 8005206:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800520a:	4413      	add	r3, r2
 800520c:	781b      	ldrb	r3, [r3, #0]
 800520e:	b2db      	uxtb	r3, r3
 8005210:	2200      	movs	r2, #0
 8005212:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005214:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005216:	f04f 0200 	mov.w	r2, #0
 800521a:	f04f 0300 	mov.w	r3, #0
 800521e:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 8005220:	0023      	movs	r3, r4
 8005222:	2200      	movs	r2, #0
 8005224:	ea40 0402 	orr.w	r4, r0, r2
 8005228:	633c      	str	r4, [r7, #48]	@ 0x30
 800522a:	430b      	orrs	r3, r1
 800522c:	637b      	str	r3, [r7, #52]	@ 0x34
 800522e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8005232:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8005236:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 800523a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 800523e:	1d5a      	adds	r2, r3, #5
 8005240:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005244:	4413      	add	r3, r2
 8005246:	781b      	ldrb	r3, [r3, #0]
 8005248:	b2db      	uxtb	r3, r3
 800524a:	2200      	movs	r2, #0
 800524c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800524e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005250:	f04f 0200 	mov.w	r2, #0
 8005254:	f04f 0300 	mov.w	r3, #0
 8005258:	6abc      	ldr	r4, [r7, #40]	@ 0x28
 800525a:	0223      	lsls	r3, r4, #8
 800525c:	2200      	movs	r2, #0
 800525e:	ea40 0402 	orr.w	r4, r0, r2
 8005262:	623c      	str	r4, [r7, #32]
 8005264:	430b      	orrs	r3, r1
 8005266:	627b      	str	r3, [r7, #36]	@ 0x24
 8005268:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800526c:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8005270:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8005274:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8005278:	1d9a      	adds	r2, r3, #6
 800527a:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800527e:	4413      	add	r3, r2
 8005280:	781b      	ldrb	r3, [r3, #0]
 8005282:	b2db      	uxtb	r3, r3
 8005284:	2200      	movs	r2, #0
 8005286:	61bb      	str	r3, [r7, #24]
 8005288:	61fa      	str	r2, [r7, #28]
 800528a:	f04f 0200 	mov.w	r2, #0
 800528e:	f04f 0300 	mov.w	r3, #0
 8005292:	69bc      	ldr	r4, [r7, #24]
 8005294:	0423      	lsls	r3, r4, #16
 8005296:	2200      	movs	r2, #0
 8005298:	ea40 0402 	orr.w	r4, r0, r2
 800529c:	613c      	str	r4, [r7, #16]
 800529e:	430b      	orrs	r3, r1
 80052a0:	617b      	str	r3, [r7, #20]
 80052a2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80052a6:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80052aa:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 80052ae:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80052b2:	1dda      	adds	r2, r3, #7
 80052b4:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80052b8:	4413      	add	r3, r2
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	2200      	movs	r2, #0
 80052c0:	60bb      	str	r3, [r7, #8]
 80052c2:	60fa      	str	r2, [r7, #12]
 80052c4:	f04f 0200 	mov.w	r2, #0
 80052c8:	f04f 0300 	mov.w	r3, #0
 80052cc:	68bc      	ldr	r4, [r7, #8]
 80052ce:	0623      	lsls	r3, r4, #24
 80052d0:	2200      	movs	r2, #0
 80052d2:	ea40 0402 	orr.w	r4, r0, r2
 80052d6:	603c      	str	r4, [r7, #0]
 80052d8:	430b      	orrs	r3, r1
 80052da:	607b      	str	r3, [r7, #4]
 80052dc:	e9d7 3400 	ldrd	r3, r4, [r7]
 80052e0:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      this->linear_acceleration_covariance[i] = u_linear_acceleration_covariancei.real;
 80052e4:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 80052e8:	f8d7 2184 	ldr.w	r2, [r7, #388]	@ 0x184
 80052ec:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80052f0:	3322      	adds	r3, #34	@ 0x22
 80052f2:	00db      	lsls	r3, r3, #3
 80052f4:	4413      	add	r3, r2
 80052f6:	e9c3 0100 	strd	r0, r1, [r3]
      offset += sizeof(this->linear_acceleration_covariance[i]);
 80052fa:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80052fe:	3308      	adds	r3, #8
 8005300:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
      for( uint32_t i = 0; i < 9; i++){
 8005304:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8005308:	3301      	adds	r3, #1
 800530a:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 800530e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8005312:	2b08      	cmp	r3, #8
 8005314:	f67f aee9 	bls.w	80050ea <_ZN11sensor_msgs3Imu11deserializeEPh+0x582>
      }
     return offset;
 8005318:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
    }
 800531c:	4618      	mov	r0, r3
 800531e:	f507 77da 	add.w	r7, r7, #436	@ 0x1b4
 8005322:	46bd      	mov	sp, r7
 8005324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005328 <_ZN11sensor_msgs3Imu7getTypeEv>:

    virtual const char * getType() override { return "sensor_msgs/Imu"; };
 8005328:	b480      	push	{r7}
 800532a:	b083      	sub	sp, #12
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	4b02      	ldr	r3, [pc, #8]	@ (800533c <_ZN11sensor_msgs3Imu7getTypeEv+0x14>)
 8005332:	4618      	mov	r0, r3
 8005334:	370c      	adds	r7, #12
 8005336:	46bd      	mov	sp, r7
 8005338:	bc80      	pop	{r7}
 800533a:	4770      	bx	lr
 800533c:	08010684 	.word	0x08010684

08005340 <_ZN11sensor_msgs3Imu6getMD5Ev>:
    virtual const char * getMD5() override { return "6a62c6daae103f4ff57a132d6f95cec2"; };
 8005340:	b480      	push	{r7}
 8005342:	b083      	sub	sp, #12
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
 8005348:	4b02      	ldr	r3, [pc, #8]	@ (8005354 <_ZN11sensor_msgs3Imu6getMD5Ev+0x14>)
 800534a:	4618      	mov	r0, r3
 800534c:	370c      	adds	r7, #12
 800534e:	46bd      	mov	sp, r7
 8005350:	bc80      	pop	{r7}
 8005352:	4770      	bx	lr
 8005354:	08010694 	.word	0x08010694

08005358 <_ZN11sensor_msgs10JointStateC1Ev>:
      uint32_t effort_length;
      typedef double _effort_type;
      _effort_type st_effort;
      _effort_type * effort;

    JointState():
 8005358:	b580      	push	{r7, lr}
 800535a:	b082      	sub	sp, #8
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
      header(),
      name_length(0), st_name(), name(nullptr),
      position_length(0), st_position(), position(nullptr),
      velocity_length(0), st_velocity(), velocity(nullptr),
      effort_length(0), st_effort(), effort(nullptr)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	4618      	mov	r0, r3
 8005364:	f7fc fbf6 	bl	8001b54 <_ZN3ros3MsgC1Ev>
 8005368:	4a1e      	ldr	r2, [pc, #120]	@ (80053e4 <_ZN11sensor_msgs10JointStateC1Ev+0x8c>)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	601a      	str	r2, [r3, #0]
      header(),
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	3304      	adds	r3, #4
 8005372:	4618      	mov	r0, r3
 8005374:	f7fd fc7a 	bl	8002c6c <_ZN8std_msgs6HeaderC1Ev>
      name_length(0), st_name(), name(nullptr),
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2200      	movs	r2, #0
 800537c:	619a      	str	r2, [r3, #24]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2200      	movs	r2, #0
 8005382:	61da      	str	r2, [r3, #28]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2200      	movs	r2, #0
 8005388:	621a      	str	r2, [r3, #32]
      position_length(0), st_position(), position(nullptr),
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	625a      	str	r2, [r3, #36]	@ 0x24
 8005390:	6879      	ldr	r1, [r7, #4]
 8005392:	f04f 0200 	mov.w	r2, #0
 8005396:	f04f 0300 	mov.w	r3, #0
 800539a:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2200      	movs	r2, #0
 80053a2:	631a      	str	r2, [r3, #48]	@ 0x30
      velocity_length(0), st_velocity(), velocity(nullptr),
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2200      	movs	r2, #0
 80053a8:	635a      	str	r2, [r3, #52]	@ 0x34
 80053aa:	6879      	ldr	r1, [r7, #4]
 80053ac:	f04f 0200 	mov.w	r2, #0
 80053b0:	f04f 0300 	mov.w	r3, #0
 80053b4:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2200      	movs	r2, #0
 80053bc:	641a      	str	r2, [r3, #64]	@ 0x40
      effort_length(0), st_effort(), effort(nullptr)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	645a      	str	r2, [r3, #68]	@ 0x44
 80053c4:	6879      	ldr	r1, [r7, #4]
 80053c6:	f04f 0200 	mov.w	r2, #0
 80053ca:	f04f 0300 	mov.w	r3, #0
 80053ce:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2200      	movs	r2, #0
 80053d6:	651a      	str	r2, [r3, #80]	@ 0x50
    {
    }
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	4618      	mov	r0, r3
 80053dc:	3708      	adds	r7, #8
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}
 80053e2:	bf00      	nop
 80053e4:	08010b58 	.word	0x08010b58

080053e8 <_ZNK11sensor_msgs10JointState9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b08e      	sub	sp, #56	@ 0x38
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80053f2:	2300      	movs	r3, #0
 80053f4:	637b      	str	r3, [r7, #52]	@ 0x34
      offset += this->header.serialize(outbuffer + offset);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	1d18      	adds	r0, r3, #4
 80053fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053fc:	683a      	ldr	r2, [r7, #0]
 80053fe:	4413      	add	r3, r2
 8005400:	4619      	mov	r1, r3
 8005402:	f7fd fc53 	bl	8002cac <_ZNK8std_msgs6Header9serializeEPh>
 8005406:	4602      	mov	r2, r0
 8005408:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800540a:	4413      	add	r3, r2
 800540c:	637b      	str	r3, [r7, #52]	@ 0x34
      *(outbuffer + offset + 0) = (this->name_length >> (8 * 0)) & 0xFF;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6999      	ldr	r1, [r3, #24]
 8005412:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005414:	683a      	ldr	r2, [r7, #0]
 8005416:	4413      	add	r3, r2
 8005418:	b2ca      	uxtb	r2, r1
 800541a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->name_length >> (8 * 1)) & 0xFF;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	699b      	ldr	r3, [r3, #24]
 8005420:	0a19      	lsrs	r1, r3, #8
 8005422:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005424:	3301      	adds	r3, #1
 8005426:	683a      	ldr	r2, [r7, #0]
 8005428:	4413      	add	r3, r2
 800542a:	b2ca      	uxtb	r2, r1
 800542c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->name_length >> (8 * 2)) & 0xFF;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	699b      	ldr	r3, [r3, #24]
 8005432:	0c19      	lsrs	r1, r3, #16
 8005434:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005436:	3302      	adds	r3, #2
 8005438:	683a      	ldr	r2, [r7, #0]
 800543a:	4413      	add	r3, r2
 800543c:	b2ca      	uxtb	r2, r1
 800543e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->name_length >> (8 * 3)) & 0xFF;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	699b      	ldr	r3, [r3, #24]
 8005444:	0e19      	lsrs	r1, r3, #24
 8005446:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005448:	3303      	adds	r3, #3
 800544a:	683a      	ldr	r2, [r7, #0]
 800544c:	4413      	add	r3, r2
 800544e:	b2ca      	uxtb	r2, r1
 8005450:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->name_length);
 8005452:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005454:	3304      	adds	r3, #4
 8005456:	637b      	str	r3, [r7, #52]	@ 0x34
      for( uint32_t i = 0; i < name_length; i++){
 8005458:	2300      	movs	r3, #0
 800545a:	633b      	str	r3, [r7, #48]	@ 0x30
 800545c:	e027      	b.n	80054ae <_ZNK11sensor_msgs10JointState9serializeEPh+0xc6>
      uint32_t length_namei = strlen(this->name[i]);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6a1a      	ldr	r2, [r3, #32]
 8005462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	4413      	add	r3, r2
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4618      	mov	r0, r3
 800546c:	f7fa fedc 	bl	8000228 <strlen>
 8005470:	6238      	str	r0, [r7, #32]
      varToArr(outbuffer + offset, length_namei);
 8005472:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005474:	683a      	ldr	r2, [r7, #0]
 8005476:	4413      	add	r3, r2
 8005478:	6a39      	ldr	r1, [r7, #32]
 800547a:	4618      	mov	r0, r3
 800547c:	f003 fd56 	bl	8008f2c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8005480:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005482:	3304      	adds	r3, #4
 8005484:	637b      	str	r3, [r7, #52]	@ 0x34
      memcpy(outbuffer + offset, this->name[i], length_namei);
 8005486:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005488:	683a      	ldr	r2, [r7, #0]
 800548a:	18d0      	adds	r0, r2, r3
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6a1a      	ldr	r2, [r3, #32]
 8005490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	4413      	add	r3, r2
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	6a3a      	ldr	r2, [r7, #32]
 800549a:	4619      	mov	r1, r3
 800549c:	f00a ffaa 	bl	80103f4 <memcpy>
      offset += length_namei;
 80054a0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80054a2:	6a3b      	ldr	r3, [r7, #32]
 80054a4:	4413      	add	r3, r2
 80054a6:	637b      	str	r3, [r7, #52]	@ 0x34
      for( uint32_t i = 0; i < name_length; i++){
 80054a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054aa:	3301      	adds	r3, #1
 80054ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	699b      	ldr	r3, [r3, #24]
 80054b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d3d2      	bcc.n	800545e <_ZNK11sensor_msgs10JointState9serializeEPh+0x76>
      }
      *(outbuffer + offset + 0) = (this->position_length >> (8 * 0)) & 0xFF;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80054bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054be:	683a      	ldr	r2, [r7, #0]
 80054c0:	4413      	add	r3, r2
 80054c2:	b2ca      	uxtb	r2, r1
 80054c4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->position_length >> (8 * 1)) & 0xFF;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054ca:	0a19      	lsrs	r1, r3, #8
 80054cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054ce:	3301      	adds	r3, #1
 80054d0:	683a      	ldr	r2, [r7, #0]
 80054d2:	4413      	add	r3, r2
 80054d4:	b2ca      	uxtb	r2, r1
 80054d6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->position_length >> (8 * 2)) & 0xFF;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054dc:	0c19      	lsrs	r1, r3, #16
 80054de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054e0:	3302      	adds	r3, #2
 80054e2:	683a      	ldr	r2, [r7, #0]
 80054e4:	4413      	add	r3, r2
 80054e6:	b2ca      	uxtb	r2, r1
 80054e8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->position_length >> (8 * 3)) & 0xFF;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054ee:	0e19      	lsrs	r1, r3, #24
 80054f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054f2:	3303      	adds	r3, #3
 80054f4:	683a      	ldr	r2, [r7, #0]
 80054f6:	4413      	add	r3, r2
 80054f8:	b2ca      	uxtb	r2, r1
 80054fa:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->position_length);
 80054fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054fe:	3304      	adds	r3, #4
 8005500:	637b      	str	r3, [r7, #52]	@ 0x34
      for( uint32_t i = 0; i < position_length; i++){
 8005502:	2300      	movs	r3, #0
 8005504:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005506:	e07d      	b.n	8005604 <_ZNK11sensor_msgs10JointState9serializeEPh+0x21c>
      union {
        double real;
        uint64_t base;
      } u_positioni;
      u_positioni.real = this->position[i];
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800550c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800550e:	00db      	lsls	r3, r3, #3
 8005510:	4413      	add	r3, r2
 8005512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005516:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_positioni.base >> (8 * 0)) & 0xFF;
 800551a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800551e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005520:	6838      	ldr	r0, [r7, #0]
 8005522:	4401      	add	r1, r0
 8005524:	b2d3      	uxtb	r3, r2
 8005526:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_positioni.base >> (8 * 1)) & 0xFF;
 8005528:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800552c:	f04f 0200 	mov.w	r2, #0
 8005530:	f04f 0300 	mov.w	r3, #0
 8005534:	0a02      	lsrs	r2, r0, #8
 8005536:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800553a:	0a0b      	lsrs	r3, r1, #8
 800553c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800553e:	3101      	adds	r1, #1
 8005540:	6838      	ldr	r0, [r7, #0]
 8005542:	4401      	add	r1, r0
 8005544:	b2d3      	uxtb	r3, r2
 8005546:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_positioni.base >> (8 * 2)) & 0xFF;
 8005548:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800554c:	f04f 0200 	mov.w	r2, #0
 8005550:	f04f 0300 	mov.w	r3, #0
 8005554:	0c02      	lsrs	r2, r0, #16
 8005556:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800555a:	0c0b      	lsrs	r3, r1, #16
 800555c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800555e:	3102      	adds	r1, #2
 8005560:	6838      	ldr	r0, [r7, #0]
 8005562:	4401      	add	r1, r0
 8005564:	b2d3      	uxtb	r3, r2
 8005566:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_positioni.base >> (8 * 3)) & 0xFF;
 8005568:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800556c:	f04f 0200 	mov.w	r2, #0
 8005570:	f04f 0300 	mov.w	r3, #0
 8005574:	0e02      	lsrs	r2, r0, #24
 8005576:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800557a:	0e0b      	lsrs	r3, r1, #24
 800557c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800557e:	3103      	adds	r1, #3
 8005580:	6838      	ldr	r0, [r7, #0]
 8005582:	4401      	add	r1, r0
 8005584:	b2d3      	uxtb	r3, r2
 8005586:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_positioni.base >> (8 * 4)) & 0xFF;
 8005588:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800558c:	f04f 0200 	mov.w	r2, #0
 8005590:	f04f 0300 	mov.w	r3, #0
 8005594:	000a      	movs	r2, r1
 8005596:	2300      	movs	r3, #0
 8005598:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800559a:	3104      	adds	r1, #4
 800559c:	6838      	ldr	r0, [r7, #0]
 800559e:	4401      	add	r1, r0
 80055a0:	b2d3      	uxtb	r3, r2
 80055a2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_positioni.base >> (8 * 5)) & 0xFF;
 80055a4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80055a8:	f04f 0200 	mov.w	r2, #0
 80055ac:	f04f 0300 	mov.w	r3, #0
 80055b0:	0a0a      	lsrs	r2, r1, #8
 80055b2:	2300      	movs	r3, #0
 80055b4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80055b6:	3105      	adds	r1, #5
 80055b8:	6838      	ldr	r0, [r7, #0]
 80055ba:	4401      	add	r1, r0
 80055bc:	b2d3      	uxtb	r3, r2
 80055be:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_positioni.base >> (8 * 6)) & 0xFF;
 80055c0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80055c4:	f04f 0200 	mov.w	r2, #0
 80055c8:	f04f 0300 	mov.w	r3, #0
 80055cc:	0c0a      	lsrs	r2, r1, #16
 80055ce:	2300      	movs	r3, #0
 80055d0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80055d2:	3106      	adds	r1, #6
 80055d4:	6838      	ldr	r0, [r7, #0]
 80055d6:	4401      	add	r1, r0
 80055d8:	b2d3      	uxtb	r3, r2
 80055da:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_positioni.base >> (8 * 7)) & 0xFF;
 80055dc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80055e0:	f04f 0200 	mov.w	r2, #0
 80055e4:	f04f 0300 	mov.w	r3, #0
 80055e8:	0e0a      	lsrs	r2, r1, #24
 80055ea:	2300      	movs	r3, #0
 80055ec:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80055ee:	3107      	adds	r1, #7
 80055f0:	6838      	ldr	r0, [r7, #0]
 80055f2:	4401      	add	r1, r0
 80055f4:	b2d3      	uxtb	r3, r2
 80055f6:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->position[i]);
 80055f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055fa:	3308      	adds	r3, #8
 80055fc:	637b      	str	r3, [r7, #52]	@ 0x34
      for( uint32_t i = 0; i < position_length; i++){
 80055fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005600:	3301      	adds	r3, #1
 8005602:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005608:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800560a:	429a      	cmp	r2, r3
 800560c:	f4ff af7c 	bcc.w	8005508 <_ZNK11sensor_msgs10JointState9serializeEPh+0x120>
      }
      *(outbuffer + offset + 0) = (this->velocity_length >> (8 * 0)) & 0xFF;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005614:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005616:	683a      	ldr	r2, [r7, #0]
 8005618:	4413      	add	r3, r2
 800561a:	b2ca      	uxtb	r2, r1
 800561c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->velocity_length >> (8 * 1)) & 0xFF;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005622:	0a19      	lsrs	r1, r3, #8
 8005624:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005626:	3301      	adds	r3, #1
 8005628:	683a      	ldr	r2, [r7, #0]
 800562a:	4413      	add	r3, r2
 800562c:	b2ca      	uxtb	r2, r1
 800562e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->velocity_length >> (8 * 2)) & 0xFF;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005634:	0c19      	lsrs	r1, r3, #16
 8005636:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005638:	3302      	adds	r3, #2
 800563a:	683a      	ldr	r2, [r7, #0]
 800563c:	4413      	add	r3, r2
 800563e:	b2ca      	uxtb	r2, r1
 8005640:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->velocity_length >> (8 * 3)) & 0xFF;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005646:	0e19      	lsrs	r1, r3, #24
 8005648:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800564a:	3303      	adds	r3, #3
 800564c:	683a      	ldr	r2, [r7, #0]
 800564e:	4413      	add	r3, r2
 8005650:	b2ca      	uxtb	r2, r1
 8005652:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->velocity_length);
 8005654:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005656:	3304      	adds	r3, #4
 8005658:	637b      	str	r3, [r7, #52]	@ 0x34
      for( uint32_t i = 0; i < velocity_length; i++){
 800565a:	2300      	movs	r3, #0
 800565c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800565e:	e07d      	b.n	800575c <_ZNK11sensor_msgs10JointState9serializeEPh+0x374>
      union {
        double real;
        uint64_t base;
      } u_velocityi;
      u_velocityi.real = this->velocity[i];
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005664:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005666:	00db      	lsls	r3, r3, #3
 8005668:	4413      	add	r3, r2
 800566a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800566e:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_velocityi.base >> (8 * 0)) & 0xFF;
 8005672:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005676:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005678:	6838      	ldr	r0, [r7, #0]
 800567a:	4401      	add	r1, r0
 800567c:	b2d3      	uxtb	r3, r2
 800567e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_velocityi.base >> (8 * 1)) & 0xFF;
 8005680:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005684:	f04f 0200 	mov.w	r2, #0
 8005688:	f04f 0300 	mov.w	r3, #0
 800568c:	0a02      	lsrs	r2, r0, #8
 800568e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8005692:	0a0b      	lsrs	r3, r1, #8
 8005694:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005696:	3101      	adds	r1, #1
 8005698:	6838      	ldr	r0, [r7, #0]
 800569a:	4401      	add	r1, r0
 800569c:	b2d3      	uxtb	r3, r2
 800569e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_velocityi.base >> (8 * 2)) & 0xFF;
 80056a0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80056a4:	f04f 0200 	mov.w	r2, #0
 80056a8:	f04f 0300 	mov.w	r3, #0
 80056ac:	0c02      	lsrs	r2, r0, #16
 80056ae:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80056b2:	0c0b      	lsrs	r3, r1, #16
 80056b4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80056b6:	3102      	adds	r1, #2
 80056b8:	6838      	ldr	r0, [r7, #0]
 80056ba:	4401      	add	r1, r0
 80056bc:	b2d3      	uxtb	r3, r2
 80056be:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_velocityi.base >> (8 * 3)) & 0xFF;
 80056c0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80056c4:	f04f 0200 	mov.w	r2, #0
 80056c8:	f04f 0300 	mov.w	r3, #0
 80056cc:	0e02      	lsrs	r2, r0, #24
 80056ce:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80056d2:	0e0b      	lsrs	r3, r1, #24
 80056d4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80056d6:	3103      	adds	r1, #3
 80056d8:	6838      	ldr	r0, [r7, #0]
 80056da:	4401      	add	r1, r0
 80056dc:	b2d3      	uxtb	r3, r2
 80056de:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_velocityi.base >> (8 * 4)) & 0xFF;
 80056e0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80056e4:	f04f 0200 	mov.w	r2, #0
 80056e8:	f04f 0300 	mov.w	r3, #0
 80056ec:	000a      	movs	r2, r1
 80056ee:	2300      	movs	r3, #0
 80056f0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80056f2:	3104      	adds	r1, #4
 80056f4:	6838      	ldr	r0, [r7, #0]
 80056f6:	4401      	add	r1, r0
 80056f8:	b2d3      	uxtb	r3, r2
 80056fa:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_velocityi.base >> (8 * 5)) & 0xFF;
 80056fc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005700:	f04f 0200 	mov.w	r2, #0
 8005704:	f04f 0300 	mov.w	r3, #0
 8005708:	0a0a      	lsrs	r2, r1, #8
 800570a:	2300      	movs	r3, #0
 800570c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800570e:	3105      	adds	r1, #5
 8005710:	6838      	ldr	r0, [r7, #0]
 8005712:	4401      	add	r1, r0
 8005714:	b2d3      	uxtb	r3, r2
 8005716:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_velocityi.base >> (8 * 6)) & 0xFF;
 8005718:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800571c:	f04f 0200 	mov.w	r2, #0
 8005720:	f04f 0300 	mov.w	r3, #0
 8005724:	0c0a      	lsrs	r2, r1, #16
 8005726:	2300      	movs	r3, #0
 8005728:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800572a:	3106      	adds	r1, #6
 800572c:	6838      	ldr	r0, [r7, #0]
 800572e:	4401      	add	r1, r0
 8005730:	b2d3      	uxtb	r3, r2
 8005732:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_velocityi.base >> (8 * 7)) & 0xFF;
 8005734:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005738:	f04f 0200 	mov.w	r2, #0
 800573c:	f04f 0300 	mov.w	r3, #0
 8005740:	0e0a      	lsrs	r2, r1, #24
 8005742:	2300      	movs	r3, #0
 8005744:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005746:	3107      	adds	r1, #7
 8005748:	6838      	ldr	r0, [r7, #0]
 800574a:	4401      	add	r1, r0
 800574c:	b2d3      	uxtb	r3, r2
 800574e:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->velocity[i]);
 8005750:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005752:	3308      	adds	r3, #8
 8005754:	637b      	str	r3, [r7, #52]	@ 0x34
      for( uint32_t i = 0; i < velocity_length; i++){
 8005756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005758:	3301      	adds	r3, #1
 800575a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005760:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005762:	429a      	cmp	r2, r3
 8005764:	f4ff af7c 	bcc.w	8005660 <_ZNK11sensor_msgs10JointState9serializeEPh+0x278>
      }
      *(outbuffer + offset + 0) = (this->effort_length >> (8 * 0)) & 0xFF;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800576c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800576e:	683a      	ldr	r2, [r7, #0]
 8005770:	4413      	add	r3, r2
 8005772:	b2ca      	uxtb	r2, r1
 8005774:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->effort_length >> (8 * 1)) & 0xFF;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800577a:	0a19      	lsrs	r1, r3, #8
 800577c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800577e:	3301      	adds	r3, #1
 8005780:	683a      	ldr	r2, [r7, #0]
 8005782:	4413      	add	r3, r2
 8005784:	b2ca      	uxtb	r2, r1
 8005786:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->effort_length >> (8 * 2)) & 0xFF;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800578c:	0c19      	lsrs	r1, r3, #16
 800578e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005790:	3302      	adds	r3, #2
 8005792:	683a      	ldr	r2, [r7, #0]
 8005794:	4413      	add	r3, r2
 8005796:	b2ca      	uxtb	r2, r1
 8005798:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->effort_length >> (8 * 3)) & 0xFF;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800579e:	0e19      	lsrs	r1, r3, #24
 80057a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057a2:	3303      	adds	r3, #3
 80057a4:	683a      	ldr	r2, [r7, #0]
 80057a6:	4413      	add	r3, r2
 80057a8:	b2ca      	uxtb	r2, r1
 80057aa:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->effort_length);
 80057ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057ae:	3304      	adds	r3, #4
 80057b0:	637b      	str	r3, [r7, #52]	@ 0x34
      for( uint32_t i = 0; i < effort_length; i++){
 80057b2:	2300      	movs	r3, #0
 80057b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80057b6:	e07d      	b.n	80058b4 <_ZNK11sensor_msgs10JointState9serializeEPh+0x4cc>
      union {
        double real;
        uint64_t base;
      } u_efforti;
      u_efforti.real = this->effort[i];
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80057bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057be:	00db      	lsls	r3, r3, #3
 80057c0:	4413      	add	r3, r2
 80057c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057c6:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_efforti.base >> (8 * 0)) & 0xFF;
 80057ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80057ce:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80057d0:	6838      	ldr	r0, [r7, #0]
 80057d2:	4401      	add	r1, r0
 80057d4:	b2d3      	uxtb	r3, r2
 80057d6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_efforti.base >> (8 * 1)) & 0xFF;
 80057d8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80057dc:	f04f 0200 	mov.w	r2, #0
 80057e0:	f04f 0300 	mov.w	r3, #0
 80057e4:	0a02      	lsrs	r2, r0, #8
 80057e6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80057ea:	0a0b      	lsrs	r3, r1, #8
 80057ec:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80057ee:	3101      	adds	r1, #1
 80057f0:	6838      	ldr	r0, [r7, #0]
 80057f2:	4401      	add	r1, r0
 80057f4:	b2d3      	uxtb	r3, r2
 80057f6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_efforti.base >> (8 * 2)) & 0xFF;
 80057f8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80057fc:	f04f 0200 	mov.w	r2, #0
 8005800:	f04f 0300 	mov.w	r3, #0
 8005804:	0c02      	lsrs	r2, r0, #16
 8005806:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800580a:	0c0b      	lsrs	r3, r1, #16
 800580c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800580e:	3102      	adds	r1, #2
 8005810:	6838      	ldr	r0, [r7, #0]
 8005812:	4401      	add	r1, r0
 8005814:	b2d3      	uxtb	r3, r2
 8005816:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_efforti.base >> (8 * 3)) & 0xFF;
 8005818:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800581c:	f04f 0200 	mov.w	r2, #0
 8005820:	f04f 0300 	mov.w	r3, #0
 8005824:	0e02      	lsrs	r2, r0, #24
 8005826:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800582a:	0e0b      	lsrs	r3, r1, #24
 800582c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800582e:	3103      	adds	r1, #3
 8005830:	6838      	ldr	r0, [r7, #0]
 8005832:	4401      	add	r1, r0
 8005834:	b2d3      	uxtb	r3, r2
 8005836:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_efforti.base >> (8 * 4)) & 0xFF;
 8005838:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800583c:	f04f 0200 	mov.w	r2, #0
 8005840:	f04f 0300 	mov.w	r3, #0
 8005844:	000a      	movs	r2, r1
 8005846:	2300      	movs	r3, #0
 8005848:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800584a:	3104      	adds	r1, #4
 800584c:	6838      	ldr	r0, [r7, #0]
 800584e:	4401      	add	r1, r0
 8005850:	b2d3      	uxtb	r3, r2
 8005852:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_efforti.base >> (8 * 5)) & 0xFF;
 8005854:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005858:	f04f 0200 	mov.w	r2, #0
 800585c:	f04f 0300 	mov.w	r3, #0
 8005860:	0a0a      	lsrs	r2, r1, #8
 8005862:	2300      	movs	r3, #0
 8005864:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005866:	3105      	adds	r1, #5
 8005868:	6838      	ldr	r0, [r7, #0]
 800586a:	4401      	add	r1, r0
 800586c:	b2d3      	uxtb	r3, r2
 800586e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_efforti.base >> (8 * 6)) & 0xFF;
 8005870:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005874:	f04f 0200 	mov.w	r2, #0
 8005878:	f04f 0300 	mov.w	r3, #0
 800587c:	0c0a      	lsrs	r2, r1, #16
 800587e:	2300      	movs	r3, #0
 8005880:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005882:	3106      	adds	r1, #6
 8005884:	6838      	ldr	r0, [r7, #0]
 8005886:	4401      	add	r1, r0
 8005888:	b2d3      	uxtb	r3, r2
 800588a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_efforti.base >> (8 * 7)) & 0xFF;
 800588c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005890:	f04f 0200 	mov.w	r2, #0
 8005894:	f04f 0300 	mov.w	r3, #0
 8005898:	0e0a      	lsrs	r2, r1, #24
 800589a:	2300      	movs	r3, #0
 800589c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800589e:	3107      	adds	r1, #7
 80058a0:	6838      	ldr	r0, [r7, #0]
 80058a2:	4401      	add	r1, r0
 80058a4:	b2d3      	uxtb	r3, r2
 80058a6:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->effort[i]);
 80058a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058aa:	3308      	adds	r3, #8
 80058ac:	637b      	str	r3, [r7, #52]	@ 0x34
      for( uint32_t i = 0; i < effort_length; i++){
 80058ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058b0:	3301      	adds	r3, #1
 80058b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058ba:	429a      	cmp	r2, r3
 80058bc:	f4ff af7c 	bcc.w	80057b8 <_ZNK11sensor_msgs10JointState9serializeEPh+0x3d0>
      }
      return offset;
 80058c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 80058c2:	4618      	mov	r0, r3
 80058c4:	3738      	adds	r7, #56	@ 0x38
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}

080058ca <_ZN11sensor_msgs10JointState11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80058ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058ce:	b0f5      	sub	sp, #468	@ 0x1d4
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	f8c7 0184 	str.w	r0, [r7, #388]	@ 0x184
 80058d6:	f8c7 1180 	str.w	r1, [r7, #384]	@ 0x180
    {
      int offset = 0;
 80058da:	2300      	movs	r3, #0
 80058dc:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
      offset += this->header.deserialize(inbuffer + offset);
 80058e0:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80058e4:	1d18      	adds	r0, r3, #4
 80058e6:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 80058ea:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80058ee:	4413      	add	r3, r2
 80058f0:	4619      	mov	r1, r3
 80058f2:	f7fd fa73 	bl	8002ddc <_ZN8std_msgs6Header11deserializeEPh>
 80058f6:	4602      	mov	r2, r0
 80058f8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80058fc:	4413      	add	r3, r2
 80058fe:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
      uint32_t name_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8005902:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 8005906:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800590a:	4413      	add	r3, r2
 800590c:	781b      	ldrb	r3, [r3, #0]
 800590e:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
      name_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8005912:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8005916:	1c5a      	adds	r2, r3, #1
 8005918:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800591c:	4413      	add	r3, r2
 800591e:	781b      	ldrb	r3, [r3, #0]
 8005920:	021a      	lsls	r2, r3, #8
 8005922:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8005926:	4313      	orrs	r3, r2
 8005928:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
      name_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800592c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8005930:	1c9a      	adds	r2, r3, #2
 8005932:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005936:	4413      	add	r3, r2
 8005938:	781b      	ldrb	r3, [r3, #0]
 800593a:	041a      	lsls	r2, r3, #16
 800593c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8005940:	4313      	orrs	r3, r2
 8005942:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
      name_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8005946:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 800594a:	1cda      	adds	r2, r3, #3
 800594c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005950:	4413      	add	r3, r2
 8005952:	781b      	ldrb	r3, [r3, #0]
 8005954:	061a      	lsls	r2, r3, #24
 8005956:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 800595a:	4313      	orrs	r3, r2
 800595c:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
      offset += sizeof(this->name_length);
 8005960:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8005964:	3304      	adds	r3, #4
 8005966:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
      if(name_lengthT > name_length)
 800596a:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800596e:	699a      	ldr	r2, [r3, #24]
 8005970:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8005974:	4293      	cmp	r3, r2
 8005976:	d90d      	bls.n	8005994 <_ZN11sensor_msgs10JointState11deserializeEPh+0xca>
        this->name = (char**)realloc(this->name, name_lengthT * sizeof(char*));
 8005978:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800597c:	6a1a      	ldr	r2, [r3, #32]
 800597e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	4619      	mov	r1, r3
 8005986:	4610      	mov	r0, r2
 8005988:	f00a fc76 	bl	8010278 <realloc>
 800598c:	4602      	mov	r2, r0
 800598e:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8005992:	621a      	str	r2, [r3, #32]
      name_length = name_lengthT;
 8005994:	f8d7 2184 	ldr.w	r2, [r7, #388]	@ 0x184
 8005998:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 800599c:	6193      	str	r3, [r2, #24]
      for( uint32_t i = 0; i < name_length; i++){
 800599e:	2300      	movs	r3, #0
 80059a0:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 80059a4:	e05b      	b.n	8005a5e <_ZN11sensor_msgs10JointState11deserializeEPh+0x194>
      uint32_t length_st_name;
      arrToVar(length_st_name, (inbuffer + offset));
 80059a6:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 80059aa:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80059ae:	441a      	add	r2, r3
 80059b0:	f507 73d2 	add.w	r3, r7, #420	@ 0x1a4
 80059b4:	4611      	mov	r1, r2
 80059b6:	4618      	mov	r0, r3
 80059b8:	f003 fad6 	bl	8008f68 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80059bc:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80059c0:	3304      	adds	r3, #4
 80059c2:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
      for(unsigned int k= offset; k< offset+length_st_name; ++k){
 80059c6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80059ca:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80059ce:	e011      	b.n	80059f4 <_ZN11sensor_msgs10JointState11deserializeEPh+0x12a>
          inbuffer[k-1]=inbuffer[k];
 80059d0:	f8d7 2180 	ldr.w	r2, [r7, #384]	@ 0x180
 80059d4:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 80059d8:	18d1      	adds	r1, r2, r3
 80059da:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 80059de:	1e5a      	subs	r2, r3, #1
 80059e0:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80059e4:	441a      	add	r2, r3
 80059e6:	780b      	ldrb	r3, [r1, #0]
 80059e8:	7013      	strb	r3, [r2, #0]
      for(unsigned int k= offset; k< offset+length_st_name; ++k){
 80059ea:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 80059ee:	3301      	adds	r3, #1
 80059f0:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80059f4:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 80059f8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80059fc:	441a      	add	r2, r3
 80059fe:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d3e4      	bcc.n	80059d0 <_ZN11sensor_msgs10JointState11deserializeEPh+0x106>
      }
      inbuffer[offset+length_st_name-1]=0;
 8005a06:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 8005a0a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8005a0e:	4413      	add	r3, r2
 8005a10:	1e5a      	subs	r2, r3, #1
 8005a12:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005a16:	441a      	add	r2, r3
 8005a18:	2300      	movs	r3, #0
 8005a1a:	7013      	strb	r3, [r2, #0]
      this->st_name = (char *)(inbuffer + offset-1);
 8005a1c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8005a20:	1e5a      	subs	r2, r3, #1
 8005a22:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005a26:	441a      	add	r2, r3
 8005a28:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8005a2c:	61da      	str	r2, [r3, #28]
      offset += length_st_name;
 8005a2e:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 8005a32:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8005a36:	4413      	add	r3, r2
 8005a38:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
        memcpy( &(this->name[i]), &(this->st_name), sizeof(char*));
 8005a3c:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8005a40:	6a1a      	ldr	r2, [r3, #32]
 8005a42:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8005a46:	009b      	lsls	r3, r3, #2
 8005a48:	441a      	add	r2, r3
 8005a4a:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8005a4e:	331c      	adds	r3, #28
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	6013      	str	r3, [r2, #0]
      for( uint32_t i = 0; i < name_length; i++){
 8005a54:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8005a58:	3301      	adds	r3, #1
 8005a5a:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8005a5e:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8005a62:	699a      	ldr	r2, [r3, #24]
 8005a64:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d39c      	bcc.n	80059a6 <_ZN11sensor_msgs10JointState11deserializeEPh+0xdc>
      }
      uint32_t position_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8005a6c:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 8005a70:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005a74:	4413      	add	r3, r2
 8005a76:	781b      	ldrb	r3, [r3, #0]
 8005a78:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
      position_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8005a7c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8005a80:	1c5a      	adds	r2, r3, #1
 8005a82:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005a86:	4413      	add	r3, r2
 8005a88:	781b      	ldrb	r3, [r3, #0]
 8005a8a:	021a      	lsls	r2, r3, #8
 8005a8c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8005a90:	4313      	orrs	r3, r2
 8005a92:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
      position_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8005a96:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8005a9a:	1c9a      	adds	r2, r3, #2
 8005a9c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005aa0:	4413      	add	r3, r2
 8005aa2:	781b      	ldrb	r3, [r3, #0]
 8005aa4:	041a      	lsls	r2, r3, #16
 8005aa6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
      position_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8005ab0:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8005ab4:	1cda      	adds	r2, r3, #3
 8005ab6:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005aba:	4413      	add	r3, r2
 8005abc:	781b      	ldrb	r3, [r3, #0]
 8005abe:	061a      	lsls	r2, r3, #24
 8005ac0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
      offset += sizeof(this->position_length);
 8005aca:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8005ace:	3304      	adds	r3, #4
 8005ad0:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
      if(position_lengthT > position_length)
 8005ad4:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8005ad8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005ada:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d90d      	bls.n	8005afe <_ZN11sensor_msgs10JointState11deserializeEPh+0x234>
        this->position = (double*)realloc(this->position, position_lengthT * sizeof(double));
 8005ae2:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8005ae6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005ae8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8005aec:	00db      	lsls	r3, r3, #3
 8005aee:	4619      	mov	r1, r3
 8005af0:	4610      	mov	r0, r2
 8005af2:	f00a fbc1 	bl	8010278 <realloc>
 8005af6:	4602      	mov	r2, r0
 8005af8:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8005afc:	631a      	str	r2, [r3, #48]	@ 0x30
      position_length = position_lengthT;
 8005afe:	f8d7 2184 	ldr.w	r2, [r7, #388]	@ 0x184
 8005b02:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8005b06:	6253      	str	r3, [r2, #36]	@ 0x24
      for( uint32_t i = 0; i < position_length; i++){
 8005b08:	2300      	movs	r3, #0
 8005b0a:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8005b0e:	e12b      	b.n	8005d68 <_ZN11sensor_msgs10JointState11deserializeEPh+0x49e>
      union {
        double real;
        uint64_t base;
      } u_st_position;
      u_st_position.base = 0;
 8005b10:	f04f 0200 	mov.w	r2, #0
 8005b14:	f04f 0300 	mov.w	r3, #0
 8005b18:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      u_st_position.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8005b1c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8005b20:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 8005b24:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005b28:	4413      	add	r3, r2
 8005b2a:	781b      	ldrb	r3, [r3, #0]
 8005b2c:	b2db      	uxtb	r3, r3
 8005b2e:	2200      	movs	r2, #0
 8005b30:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 8005b34:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
 8005b38:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	@ 0x170
 8005b3c:	4616      	mov	r6, r2
 8005b3e:	4306      	orrs	r6, r0
 8005b40:	f8c7 6168 	str.w	r6, [r7, #360]	@ 0x168
 8005b44:	430b      	orrs	r3, r1
 8005b46:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 8005b4a:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	@ 0x168
 8005b4e:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      u_st_position.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8005b52:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8005b56:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8005b5a:	1c5a      	adds	r2, r3, #1
 8005b5c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005b60:	4413      	add	r3, r2
 8005b62:	781b      	ldrb	r3, [r3, #0]
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	2200      	movs	r2, #0
 8005b68:	469a      	mov	sl, r3
 8005b6a:	4693      	mov	fp, r2
 8005b6c:	f04f 0200 	mov.w	r2, #0
 8005b70:	f04f 0300 	mov.w	r3, #0
 8005b74:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8005b78:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8005b7c:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8005b80:	ea40 0602 	orr.w	r6, r0, r2
 8005b84:	f8c7 6160 	str.w	r6, [r7, #352]	@ 0x160
 8005b88:	430b      	orrs	r3, r1
 8005b8a:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8005b8e:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	@ 0x160
 8005b92:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      u_st_position.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8005b96:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8005b9a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8005b9e:	1c9a      	adds	r2, r3, #2
 8005ba0:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005ba4:	4413      	add	r3, r2
 8005ba6:	781b      	ldrb	r3, [r3, #0]
 8005ba8:	b2db      	uxtb	r3, r3
 8005baa:	2200      	movs	r2, #0
 8005bac:	4698      	mov	r8, r3
 8005bae:	4691      	mov	r9, r2
 8005bb0:	f04f 0200 	mov.w	r2, #0
 8005bb4:	f04f 0300 	mov.w	r3, #0
 8005bb8:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8005bbc:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8005bc0:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8005bc4:	ea40 0602 	orr.w	r6, r0, r2
 8005bc8:	f8c7 6158 	str.w	r6, [r7, #344]	@ 0x158
 8005bcc:	430b      	orrs	r3, r1
 8005bce:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8005bd2:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	@ 0x158
 8005bd6:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      u_st_position.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8005bda:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8005bde:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8005be2:	1cda      	adds	r2, r3, #3
 8005be4:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005be8:	4413      	add	r3, r2
 8005bea:	781b      	ldrb	r3, [r3, #0]
 8005bec:	b2db      	uxtb	r3, r3
 8005bee:	2200      	movs	r2, #0
 8005bf0:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 8005bf4:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8005bf8:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8005bfc:	0a1d      	lsrs	r5, r3, #8
 8005bfe:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8005c02:	061c      	lsls	r4, r3, #24
 8005c04:	ea40 0304 	orr.w	r3, r0, r4
 8005c08:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8005c0c:	ea41 0305 	orr.w	r3, r1, r5
 8005c10:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8005c14:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 8005c18:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      u_st_position.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8005c1c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8005c20:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8005c24:	1d1a      	adds	r2, r3, #4
 8005c26:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005c2a:	4413      	add	r3, r2
 8005c2c:	781b      	ldrb	r3, [r3, #0]
 8005c2e:	b2db      	uxtb	r3, r3
 8005c30:	2200      	movs	r2, #0
 8005c32:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 8005c36:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8005c3a:	f04f 0200 	mov.w	r2, #0
 8005c3e:	f04f 0300 	mov.w	r3, #0
 8005c42:	f8d7 6148 	ldr.w	r6, [r7, #328]	@ 0x148
 8005c46:	0033      	movs	r3, r6
 8005c48:	2200      	movs	r2, #0
 8005c4a:	ea40 0602 	orr.w	r6, r0, r2
 8005c4e:	f8c7 6140 	str.w	r6, [r7, #320]	@ 0x140
 8005c52:	430b      	orrs	r3, r1
 8005c54:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8005c58:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 8005c5c:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      u_st_position.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8005c60:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8005c64:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8005c68:	1d5a      	adds	r2, r3, #5
 8005c6a:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005c6e:	4413      	add	r3, r2
 8005c70:	781b      	ldrb	r3, [r3, #0]
 8005c72:	b2db      	uxtb	r3, r3
 8005c74:	2200      	movs	r2, #0
 8005c76:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8005c7a:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 8005c7e:	f04f 0200 	mov.w	r2, #0
 8005c82:	f04f 0300 	mov.w	r3, #0
 8005c86:	f8d7 6138 	ldr.w	r6, [r7, #312]	@ 0x138
 8005c8a:	0233      	lsls	r3, r6, #8
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	ea40 0602 	orr.w	r6, r0, r2
 8005c92:	f8c7 6130 	str.w	r6, [r7, #304]	@ 0x130
 8005c96:	430b      	orrs	r3, r1
 8005c98:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8005c9c:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 8005ca0:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      u_st_position.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8005ca4:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8005ca8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8005cac:	1d9a      	adds	r2, r3, #6
 8005cae:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005cb2:	4413      	add	r3, r2
 8005cb4:	781b      	ldrb	r3, [r3, #0]
 8005cb6:	b2db      	uxtb	r3, r3
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8005cbe:	f8c7 212c 	str.w	r2, [r7, #300]	@ 0x12c
 8005cc2:	f04f 0200 	mov.w	r2, #0
 8005cc6:	f04f 0300 	mov.w	r3, #0
 8005cca:	f8d7 6128 	ldr.w	r6, [r7, #296]	@ 0x128
 8005cce:	0433      	lsls	r3, r6, #16
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	ea40 0602 	orr.w	r6, r0, r2
 8005cd6:	f8c7 6120 	str.w	r6, [r7, #288]	@ 0x120
 8005cda:	430b      	orrs	r3, r1
 8005cdc:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8005ce0:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8005ce4:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      u_st_position.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8005ce8:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8005cec:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8005cf0:	1dda      	adds	r2, r3, #7
 8005cf2:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005cf6:	4413      	add	r3, r2
 8005cf8:	781b      	ldrb	r3, [r3, #0]
 8005cfa:	b2db      	uxtb	r3, r3
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8005d02:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8005d06:	f04f 0200 	mov.w	r2, #0
 8005d0a:	f04f 0300 	mov.w	r3, #0
 8005d0e:	f8d7 6118 	ldr.w	r6, [r7, #280]	@ 0x118
 8005d12:	0633      	lsls	r3, r6, #24
 8005d14:	2200      	movs	r2, #0
 8005d16:	ea40 0602 	orr.w	r6, r0, r2
 8005d1a:	f8c7 6110 	str.w	r6, [r7, #272]	@ 0x110
 8005d1e:	430b      	orrs	r3, r1
 8005d20:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8005d24:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8005d28:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      this->st_position = u_st_position.real;
 8005d2c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8005d30:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8005d34:	e9c3 010a 	strd	r0, r1, [r3, #40]	@ 0x28
      offset += sizeof(this->st_position);
 8005d38:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8005d3c:	3308      	adds	r3, #8
 8005d3e:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
        memcpy( &(this->position[i]), &(this->st_position), sizeof(double));
 8005d42:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8005d46:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005d48:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8005d4c:	00db      	lsls	r3, r3, #3
 8005d4e:	18d0      	adds	r0, r2, r3
 8005d50:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8005d54:	3328      	adds	r3, #40	@ 0x28
 8005d56:	2208      	movs	r2, #8
 8005d58:	4619      	mov	r1, r3
 8005d5a:	f00a fb4b 	bl	80103f4 <memcpy>
      for( uint32_t i = 0; i < position_length; i++){
 8005d5e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8005d62:	3301      	adds	r3, #1
 8005d64:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8005d68:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8005d6c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005d6e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8005d72:	4293      	cmp	r3, r2
 8005d74:	f4ff aecc 	bcc.w	8005b10 <_ZN11sensor_msgs10JointState11deserializeEPh+0x246>
      }
      uint32_t velocity_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8005d78:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 8005d7c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005d80:	4413      	add	r3, r2
 8005d82:	781b      	ldrb	r3, [r3, #0]
 8005d84:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
      velocity_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8005d88:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8005d8c:	1c5a      	adds	r2, r3, #1
 8005d8e:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005d92:	4413      	add	r3, r2
 8005d94:	781b      	ldrb	r3, [r3, #0]
 8005d96:	021a      	lsls	r2, r3, #8
 8005d98:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
      velocity_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8005da2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8005da6:	1c9a      	adds	r2, r3, #2
 8005da8:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005dac:	4413      	add	r3, r2
 8005dae:	781b      	ldrb	r3, [r3, #0]
 8005db0:	041a      	lsls	r2, r3, #16
 8005db2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8005db6:	4313      	orrs	r3, r2
 8005db8:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
      velocity_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8005dbc:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8005dc0:	1cda      	adds	r2, r3, #3
 8005dc2:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005dc6:	4413      	add	r3, r2
 8005dc8:	781b      	ldrb	r3, [r3, #0]
 8005dca:	061a      	lsls	r2, r3, #24
 8005dcc:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
      offset += sizeof(this->velocity_length);
 8005dd6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8005dda:	3304      	adds	r3, #4
 8005ddc:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
      if(velocity_lengthT > velocity_length)
 8005de0:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8005de4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005de6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d90d      	bls.n	8005e0a <_ZN11sensor_msgs10JointState11deserializeEPh+0x540>
        this->velocity = (double*)realloc(this->velocity, velocity_lengthT * sizeof(double));
 8005dee:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8005df2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005df4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8005df8:	00db      	lsls	r3, r3, #3
 8005dfa:	4619      	mov	r1, r3
 8005dfc:	4610      	mov	r0, r2
 8005dfe:	f00a fa3b 	bl	8010278 <realloc>
 8005e02:	4602      	mov	r2, r0
 8005e04:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8005e08:	641a      	str	r2, [r3, #64]	@ 0x40
      velocity_length = velocity_lengthT;
 8005e0a:	f8d7 2184 	ldr.w	r2, [r7, #388]	@ 0x184
 8005e0e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8005e12:	6353      	str	r3, [r2, #52]	@ 0x34
      for( uint32_t i = 0; i < velocity_length; i++){
 8005e14:	2300      	movs	r3, #0
 8005e16:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8005e1a:	e13e      	b.n	800609a <_ZN11sensor_msgs10JointState11deserializeEPh+0x7d0>
      union {
        double real;
        uint64_t base;
      } u_st_velocity;
      u_st_velocity.base = 0;
 8005e1c:	f04f 0200 	mov.w	r2, #0
 8005e20:	f04f 0300 	mov.w	r3, #0
 8005e24:	e9c7 2364 	strd	r2, r3, [r7, #400]	@ 0x190
      u_st_velocity.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8005e28:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8005e2c:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 8005e30:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005e34:	4413      	add	r3, r2
 8005e36:	781b      	ldrb	r3, [r3, #0]
 8005e38:	b2db      	uxtb	r3, r3
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8005e40:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 8005e44:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	@ 0x108
 8005e48:	461a      	mov	r2, r3
 8005e4a:	4302      	orrs	r2, r0
 8005e4c:	f8c7 2100 	str.w	r2, [r7, #256]	@ 0x100
 8005e50:	4623      	mov	r3, r4
 8005e52:	430b      	orrs	r3, r1
 8005e54:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005e58:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	@ 0x100
 8005e5c:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_st_velocity.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8005e60:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8005e64:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8005e68:	1c5a      	adds	r2, r3, #1
 8005e6a:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005e6e:	4413      	add	r3, r2
 8005e70:	781b      	ldrb	r3, [r3, #0]
 8005e72:	b2db      	uxtb	r3, r3
 8005e74:	2200      	movs	r2, #0
 8005e76:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005e7a:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 8005e7e:	f04f 0200 	mov.w	r2, #0
 8005e82:	f04f 0300 	mov.w	r3, #0
 8005e86:	e9d7 563e 	ldrd	r5, r6, [r7, #248]	@ 0xf8
 8005e8a:	4634      	mov	r4, r6
 8005e8c:	0223      	lsls	r3, r4, #8
 8005e8e:	462c      	mov	r4, r5
 8005e90:	4635      	mov	r5, r6
 8005e92:	4626      	mov	r6, r4
 8005e94:	ea43 6316 	orr.w	r3, r3, r6, lsr #24
 8005e98:	0222      	lsls	r2, r4, #8
 8005e9a:	ea40 0402 	orr.w	r4, r0, r2
 8005e9e:	f8c7 40f0 	str.w	r4, [r7, #240]	@ 0xf0
 8005ea2:	430b      	orrs	r3, r1
 8005ea4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005ea8:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	@ 0xf0
 8005eac:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_st_velocity.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8005eb0:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8005eb4:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8005eb8:	1c9a      	adds	r2, r3, #2
 8005eba:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005ebe:	4413      	add	r3, r2
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005eca:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005ece:	f04f 0200 	mov.w	r2, #0
 8005ed2:	f04f 0300 	mov.w	r3, #0
 8005ed6:	e9d7 563a 	ldrd	r5, r6, [r7, #232]	@ 0xe8
 8005eda:	4634      	mov	r4, r6
 8005edc:	0423      	lsls	r3, r4, #16
 8005ede:	462c      	mov	r4, r5
 8005ee0:	4635      	mov	r5, r6
 8005ee2:	4626      	mov	r6, r4
 8005ee4:	ea43 4316 	orr.w	r3, r3, r6, lsr #16
 8005ee8:	0422      	lsls	r2, r4, #16
 8005eea:	ea40 0402 	orr.w	r4, r0, r2
 8005eee:	f8c7 40e0 	str.w	r4, [r7, #224]	@ 0xe0
 8005ef2:	430b      	orrs	r3, r1
 8005ef4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005ef8:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	@ 0xe0
 8005efc:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_st_velocity.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8005f00:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8005f04:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8005f08:	1cda      	adds	r2, r3, #3
 8005f0a:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005f0e:	4413      	add	r3, r2
 8005f10:	781b      	ldrb	r3, [r3, #0]
 8005f12:	b2db      	uxtb	r3, r3
 8005f14:	2200      	movs	r2, #0
 8005f16:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005f1a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005f1e:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8005f22:	4623      	mov	r3, r4
 8005f24:	0a1b      	lsrs	r3, r3, #8
 8005f26:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005f2a:	4623      	mov	r3, r4
 8005f2c:	061b      	lsls	r3, r3, #24
 8005f2e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005f32:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	@ 0xd0
 8005f36:	461a      	mov	r2, r3
 8005f38:	4302      	orrs	r2, r0
 8005f3a:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8005f3e:	4623      	mov	r3, r4
 8005f40:	430b      	orrs	r3, r1
 8005f42:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005f46:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	@ 0xc8
 8005f4a:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_st_velocity.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8005f4e:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8005f52:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8005f56:	1d1a      	adds	r2, r3, #4
 8005f58:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005f5c:	4413      	add	r3, r2
 8005f5e:	781b      	ldrb	r3, [r3, #0]
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	2200      	movs	r2, #0
 8005f64:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005f68:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005f6c:	f04f 0200 	mov.w	r2, #0
 8005f70:	f04f 0300 	mov.w	r3, #0
 8005f74:	f8d7 40c0 	ldr.w	r4, [r7, #192]	@ 0xc0
 8005f78:	0023      	movs	r3, r4
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	ea40 0402 	orr.w	r4, r0, r2
 8005f80:	f8c7 40b8 	str.w	r4, [r7, #184]	@ 0xb8
 8005f84:	430b      	orrs	r3, r1
 8005f86:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005f8a:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	@ 0xb8
 8005f8e:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_st_velocity.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8005f92:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8005f96:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8005f9a:	1d5a      	adds	r2, r3, #5
 8005f9c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005fa0:	4413      	add	r3, r2
 8005fa2:	781b      	ldrb	r3, [r3, #0]
 8005fa4:	b2db      	uxtb	r3, r3
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005fac:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8005fb0:	f04f 0200 	mov.w	r2, #0
 8005fb4:	f04f 0300 	mov.w	r3, #0
 8005fb8:	f8d7 40b0 	ldr.w	r4, [r7, #176]	@ 0xb0
 8005fbc:	0223      	lsls	r3, r4, #8
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	ea40 0402 	orr.w	r4, r0, r2
 8005fc4:	f8c7 40a8 	str.w	r4, [r7, #168]	@ 0xa8
 8005fc8:	430b      	orrs	r3, r1
 8005fca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005fce:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	@ 0xa8
 8005fd2:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_st_velocity.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8005fd6:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8005fda:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8005fde:	1d9a      	adds	r2, r3, #6
 8005fe0:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005fe4:	4413      	add	r3, r2
 8005fe6:	781b      	ldrb	r3, [r3, #0]
 8005fe8:	b2db      	uxtb	r3, r3
 8005fea:	2200      	movs	r2, #0
 8005fec:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005ff0:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005ff4:	f04f 0200 	mov.w	r2, #0
 8005ff8:	f04f 0300 	mov.w	r3, #0
 8005ffc:	f8d7 40a0 	ldr.w	r4, [r7, #160]	@ 0xa0
 8006000:	0423      	lsls	r3, r4, #16
 8006002:	2200      	movs	r2, #0
 8006004:	ea40 0402 	orr.w	r4, r0, r2
 8006008:	f8c7 4098 	str.w	r4, [r7, #152]	@ 0x98
 800600c:	430b      	orrs	r3, r1
 800600e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006012:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	@ 0x98
 8006016:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_st_velocity.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800601a:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 800601e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8006022:	1dda      	adds	r2, r3, #7
 8006024:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8006028:	4413      	add	r3, r2
 800602a:	781b      	ldrb	r3, [r3, #0]
 800602c:	b2db      	uxtb	r3, r3
 800602e:	2200      	movs	r2, #0
 8006030:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006034:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006038:	f04f 0200 	mov.w	r2, #0
 800603c:	f04f 0300 	mov.w	r3, #0
 8006040:	f8d7 4090 	ldr.w	r4, [r7, #144]	@ 0x90
 8006044:	0623      	lsls	r3, r4, #24
 8006046:	2200      	movs	r2, #0
 8006048:	ea40 0402 	orr.w	r4, r0, r2
 800604c:	f8c7 4088 	str.w	r4, [r7, #136]	@ 0x88
 8006050:	430b      	orrs	r3, r1
 8006052:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006056:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	@ 0x88
 800605a:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      this->st_velocity = u_st_velocity.real;
 800605e:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8006062:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8006066:	e9c3 010e 	strd	r0, r1, [r3, #56]	@ 0x38
      offset += sizeof(this->st_velocity);
 800606a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 800606e:	3308      	adds	r3, #8
 8006070:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
        memcpy( &(this->velocity[i]), &(this->st_velocity), sizeof(double));
 8006074:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8006078:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800607a:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 800607e:	00db      	lsls	r3, r3, #3
 8006080:	18d0      	adds	r0, r2, r3
 8006082:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8006086:	3338      	adds	r3, #56	@ 0x38
 8006088:	2208      	movs	r2, #8
 800608a:	4619      	mov	r1, r3
 800608c:	f00a f9b2 	bl	80103f4 <memcpy>
      for( uint32_t i = 0; i < velocity_length; i++){
 8006090:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8006094:	3301      	adds	r3, #1
 8006096:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 800609a:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800609e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80060a0:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 80060a4:	4293      	cmp	r3, r2
 80060a6:	f4ff aeb9 	bcc.w	8005e1c <_ZN11sensor_msgs10JointState11deserializeEPh+0x552>
      }
      uint32_t effort_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80060aa:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 80060ae:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80060b2:	4413      	add	r3, r2
 80060b4:	781b      	ldrb	r3, [r3, #0]
 80060b6:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
      effort_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80060ba:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80060be:	1c5a      	adds	r2, r3, #1
 80060c0:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80060c4:	4413      	add	r3, r2
 80060c6:	781b      	ldrb	r3, [r3, #0]
 80060c8:	021a      	lsls	r2, r3, #8
 80060ca:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80060ce:	4313      	orrs	r3, r2
 80060d0:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
      effort_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80060d4:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80060d8:	1c9a      	adds	r2, r3, #2
 80060da:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80060de:	4413      	add	r3, r2
 80060e0:	781b      	ldrb	r3, [r3, #0]
 80060e2:	041a      	lsls	r2, r3, #16
 80060e4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80060e8:	4313      	orrs	r3, r2
 80060ea:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
      effort_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80060ee:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80060f2:	1cda      	adds	r2, r3, #3
 80060f4:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80060f8:	4413      	add	r3, r2
 80060fa:	781b      	ldrb	r3, [r3, #0]
 80060fc:	061a      	lsls	r2, r3, #24
 80060fe:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8006102:	4313      	orrs	r3, r2
 8006104:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
      offset += sizeof(this->effort_length);
 8006108:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 800610c:	3304      	adds	r3, #4
 800610e:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
      if(effort_lengthT > effort_length)
 8006112:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8006116:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006118:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 800611c:	4293      	cmp	r3, r2
 800611e:	d90d      	bls.n	800613c <_ZN11sensor_msgs10JointState11deserializeEPh+0x872>
        this->effort = (double*)realloc(this->effort, effort_lengthT * sizeof(double));
 8006120:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8006124:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006126:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 800612a:	00db      	lsls	r3, r3, #3
 800612c:	4619      	mov	r1, r3
 800612e:	4610      	mov	r0, r2
 8006130:	f00a f8a2 	bl	8010278 <realloc>
 8006134:	4602      	mov	r2, r0
 8006136:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800613a:	651a      	str	r2, [r3, #80]	@ 0x50
      effort_length = effort_lengthT;
 800613c:	f8d7 2184 	ldr.w	r2, [r7, #388]	@ 0x184
 8006140:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8006144:	6453      	str	r3, [r2, #68]	@ 0x44
      for( uint32_t i = 0; i < effort_length; i++){
 8006146:	2300      	movs	r3, #0
 8006148:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 800614c:	e11a      	b.n	8006384 <_ZN11sensor_msgs10JointState11deserializeEPh+0xaba>
      union {
        double real;
        uint64_t base;
      } u_st_effort;
      u_st_effort.base = 0;
 800614e:	f04f 0200 	mov.w	r2, #0
 8006152:	f04f 0300 	mov.w	r3, #0
 8006156:	e9c7 2362 	strd	r2, r3, [r7, #392]	@ 0x188
      u_st_effort.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800615a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 800615e:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 8006162:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8006166:	4413      	add	r3, r2
 8006168:	781b      	ldrb	r3, [r3, #0]
 800616a:	b2db      	uxtb	r3, r3
 800616c:	2200      	movs	r2, #0
 800616e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006172:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8006176:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	@ 0x80
 800617a:	461a      	mov	r2, r3
 800617c:	4302      	orrs	r2, r0
 800617e:	67ba      	str	r2, [r7, #120]	@ 0x78
 8006180:	4623      	mov	r3, r4
 8006182:	430b      	orrs	r3, r1
 8006184:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006186:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	@ 0x78
 800618a:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_st_effort.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800618e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8006192:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8006196:	1c5a      	adds	r2, r3, #1
 8006198:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800619c:	4413      	add	r3, r2
 800619e:	781b      	ldrb	r3, [r3, #0]
 80061a0:	b2db      	uxtb	r3, r3
 80061a2:	2200      	movs	r2, #0
 80061a4:	673b      	str	r3, [r7, #112]	@ 0x70
 80061a6:	677a      	str	r2, [r7, #116]	@ 0x74
 80061a8:	f04f 0200 	mov.w	r2, #0
 80061ac:	f04f 0300 	mov.w	r3, #0
 80061b0:	e9d7 561c 	ldrd	r5, r6, [r7, #112]	@ 0x70
 80061b4:	4634      	mov	r4, r6
 80061b6:	0223      	lsls	r3, r4, #8
 80061b8:	462c      	mov	r4, r5
 80061ba:	4635      	mov	r5, r6
 80061bc:	4626      	mov	r6, r4
 80061be:	ea43 6316 	orr.w	r3, r3, r6, lsr #24
 80061c2:	0222      	lsls	r2, r4, #8
 80061c4:	ea40 0402 	orr.w	r4, r0, r2
 80061c8:	66bc      	str	r4, [r7, #104]	@ 0x68
 80061ca:	430b      	orrs	r3, r1
 80061cc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80061ce:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	@ 0x68
 80061d2:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_st_effort.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80061d6:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 80061da:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80061de:	1c9a      	adds	r2, r3, #2
 80061e0:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80061e4:	4413      	add	r3, r2
 80061e6:	781b      	ldrb	r3, [r3, #0]
 80061e8:	b2db      	uxtb	r3, r3
 80061ea:	2200      	movs	r2, #0
 80061ec:	663b      	str	r3, [r7, #96]	@ 0x60
 80061ee:	667a      	str	r2, [r7, #100]	@ 0x64
 80061f0:	f04f 0200 	mov.w	r2, #0
 80061f4:	f04f 0300 	mov.w	r3, #0
 80061f8:	e9d7 5618 	ldrd	r5, r6, [r7, #96]	@ 0x60
 80061fc:	4634      	mov	r4, r6
 80061fe:	0423      	lsls	r3, r4, #16
 8006200:	462c      	mov	r4, r5
 8006202:	4635      	mov	r5, r6
 8006204:	4626      	mov	r6, r4
 8006206:	ea43 4316 	orr.w	r3, r3, r6, lsr #16
 800620a:	0422      	lsls	r2, r4, #16
 800620c:	ea40 0402 	orr.w	r4, r0, r2
 8006210:	65bc      	str	r4, [r7, #88]	@ 0x58
 8006212:	430b      	orrs	r3, r1
 8006214:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006216:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	@ 0x58
 800621a:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_st_effort.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800621e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8006222:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8006226:	1cda      	adds	r2, r3, #3
 8006228:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800622c:	4413      	add	r3, r2
 800622e:	781b      	ldrb	r3, [r3, #0]
 8006230:	b2db      	uxtb	r3, r3
 8006232:	2200      	movs	r2, #0
 8006234:	653b      	str	r3, [r7, #80]	@ 0x50
 8006236:	657a      	str	r2, [r7, #84]	@ 0x54
 8006238:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 800623c:	4623      	mov	r3, r4
 800623e:	0a1b      	lsrs	r3, r3, #8
 8006240:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006242:	4623      	mov	r3, r4
 8006244:	061b      	lsls	r3, r3, #24
 8006246:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006248:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 800624c:	461a      	mov	r2, r3
 800624e:	4302      	orrs	r2, r0
 8006250:	643a      	str	r2, [r7, #64]	@ 0x40
 8006252:	4623      	mov	r3, r4
 8006254:	430b      	orrs	r3, r1
 8006256:	647b      	str	r3, [r7, #68]	@ 0x44
 8006258:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 800625c:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_st_effort.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8006260:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8006264:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8006268:	1d1a      	adds	r2, r3, #4
 800626a:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800626e:	4413      	add	r3, r2
 8006270:	781b      	ldrb	r3, [r3, #0]
 8006272:	b2db      	uxtb	r3, r3
 8006274:	2200      	movs	r2, #0
 8006276:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006278:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800627a:	f04f 0200 	mov.w	r2, #0
 800627e:	f04f 0300 	mov.w	r3, #0
 8006282:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 8006284:	0023      	movs	r3, r4
 8006286:	2200      	movs	r2, #0
 8006288:	ea40 0402 	orr.w	r4, r0, r2
 800628c:	633c      	str	r4, [r7, #48]	@ 0x30
 800628e:	430b      	orrs	r3, r1
 8006290:	637b      	str	r3, [r7, #52]	@ 0x34
 8006292:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8006296:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_st_effort.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800629a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 800629e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80062a2:	1d5a      	adds	r2, r3, #5
 80062a4:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80062a8:	4413      	add	r3, r2
 80062aa:	781b      	ldrb	r3, [r3, #0]
 80062ac:	b2db      	uxtb	r3, r3
 80062ae:	2200      	movs	r2, #0
 80062b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80062b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80062b4:	f04f 0200 	mov.w	r2, #0
 80062b8:	f04f 0300 	mov.w	r3, #0
 80062bc:	6abc      	ldr	r4, [r7, #40]	@ 0x28
 80062be:	0223      	lsls	r3, r4, #8
 80062c0:	2200      	movs	r2, #0
 80062c2:	ea40 0402 	orr.w	r4, r0, r2
 80062c6:	623c      	str	r4, [r7, #32]
 80062c8:	430b      	orrs	r3, r1
 80062ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80062cc:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80062d0:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_st_effort.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80062d4:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 80062d8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80062dc:	1d9a      	adds	r2, r3, #6
 80062de:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80062e2:	4413      	add	r3, r2
 80062e4:	781b      	ldrb	r3, [r3, #0]
 80062e6:	b2db      	uxtb	r3, r3
 80062e8:	2200      	movs	r2, #0
 80062ea:	61bb      	str	r3, [r7, #24]
 80062ec:	61fa      	str	r2, [r7, #28]
 80062ee:	f04f 0200 	mov.w	r2, #0
 80062f2:	f04f 0300 	mov.w	r3, #0
 80062f6:	69bc      	ldr	r4, [r7, #24]
 80062f8:	0423      	lsls	r3, r4, #16
 80062fa:	2200      	movs	r2, #0
 80062fc:	ea40 0402 	orr.w	r4, r0, r2
 8006300:	613c      	str	r4, [r7, #16]
 8006302:	430b      	orrs	r3, r1
 8006304:	617b      	str	r3, [r7, #20]
 8006306:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800630a:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_st_effort.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800630e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8006312:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8006316:	1dda      	adds	r2, r3, #7
 8006318:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800631c:	4413      	add	r3, r2
 800631e:	781b      	ldrb	r3, [r3, #0]
 8006320:	b2db      	uxtb	r3, r3
 8006322:	2200      	movs	r2, #0
 8006324:	60bb      	str	r3, [r7, #8]
 8006326:	60fa      	str	r2, [r7, #12]
 8006328:	f04f 0200 	mov.w	r2, #0
 800632c:	f04f 0300 	mov.w	r3, #0
 8006330:	68bc      	ldr	r4, [r7, #8]
 8006332:	0623      	lsls	r3, r4, #24
 8006334:	2200      	movs	r2, #0
 8006336:	ea40 0402 	orr.w	r4, r0, r2
 800633a:	603c      	str	r4, [r7, #0]
 800633c:	430b      	orrs	r3, r1
 800633e:	607b      	str	r3, [r7, #4]
 8006340:	e9d7 3400 	ldrd	r3, r4, [r7]
 8006344:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      this->st_effort = u_st_effort.real;
 8006348:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 800634c:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8006350:	e9c3 0112 	strd	r0, r1, [r3, #72]	@ 0x48
      offset += sizeof(this->st_effort);
 8006354:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8006358:	3308      	adds	r3, #8
 800635a:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
        memcpy( &(this->effort[i]), &(this->st_effort), sizeof(double));
 800635e:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8006362:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006364:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8006368:	00db      	lsls	r3, r3, #3
 800636a:	18d0      	adds	r0, r2, r3
 800636c:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8006370:	3348      	adds	r3, #72	@ 0x48
 8006372:	2208      	movs	r2, #8
 8006374:	4619      	mov	r1, r3
 8006376:	f00a f83d 	bl	80103f4 <memcpy>
      for( uint32_t i = 0; i < effort_length; i++){
 800637a:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 800637e:	3301      	adds	r3, #1
 8006380:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 8006384:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8006388:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800638a:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 800638e:	4293      	cmp	r3, r2
 8006390:	f4ff aedd 	bcc.w	800614e <_ZN11sensor_msgs10JointState11deserializeEPh+0x884>
      }
     return offset;
 8006394:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
    }
 8006398:	4618      	mov	r0, r3
 800639a:	f507 77ea 	add.w	r7, r7, #468	@ 0x1d4
 800639e:	46bd      	mov	sp, r7
 80063a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080063a4 <_ZN11sensor_msgs10JointState7getTypeEv>:

    virtual const char * getType() override { return "sensor_msgs/JointState"; };
 80063a4:	b480      	push	{r7}
 80063a6:	b083      	sub	sp, #12
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
 80063ac:	4b02      	ldr	r3, [pc, #8]	@ (80063b8 <_ZN11sensor_msgs10JointState7getTypeEv+0x14>)
 80063ae:	4618      	mov	r0, r3
 80063b0:	370c      	adds	r7, #12
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bc80      	pop	{r7}
 80063b6:	4770      	bx	lr
 80063b8:	080106b8 	.word	0x080106b8

080063bc <_ZN11sensor_msgs10JointState6getMD5Ev>:
    virtual const char * getMD5() override { return "3066dcd76a6cfaef579bd0f34173e9fd"; };
 80063bc:	b480      	push	{r7}
 80063be:	b083      	sub	sp, #12
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	4b02      	ldr	r3, [pc, #8]	@ (80063d0 <_ZN11sensor_msgs10JointState6getMD5Ev+0x14>)
 80063c6:	4618      	mov	r0, r3
 80063c8:	370c      	adds	r7, #12
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bc80      	pop	{r7}
 80063ce:	4770      	bx	lr
 80063d0:	080106d0 	.word	0x080106d0

080063d4 <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b082      	sub	sp, #8
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	4618      	mov	r0, r3
 80063e0:	f7fb fbb8 	bl	8001b54 <_ZN3ros3MsgC1Ev>
 80063e4:	4a08      	ldr	r2, [pc, #32]	@ (8006408 <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	601a      	str	r2, [r3, #0]
      linear(),
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	3308      	adds	r3, #8
 80063ee:	4618      	mov	r0, r3
 80063f0:	f7fd fc86 	bl	8003d00 <_ZN13geometry_msgs7Vector3C1Ev>
      angular()
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	3328      	adds	r3, #40	@ 0x28
 80063f8:	4618      	mov	r0, r3
 80063fa:	f7fd fc81 	bl	8003d00 <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	4618      	mov	r0, r3
 8006402:	3708      	adds	r7, #8
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}
 8006408:	08010b40 	.word	0x08010b40

0800640c <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 800640c:	b580      	push	{r7, lr}
 800640e:	b084      	sub	sp, #16
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
 8006414:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8006416:	2300      	movs	r3, #0
 8006418:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f103 0008 	add.w	r0, r3, #8
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	683a      	ldr	r2, [r7, #0]
 8006424:	4413      	add	r3, r2
 8006426:	4619      	mov	r1, r3
 8006428:	f7fd fc92 	bl	8003d50 <_ZNK13geometry_msgs7Vector39serializeEPh>
 800642c:	4602      	mov	r2, r0
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	4413      	add	r3, r2
 8006432:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	683a      	ldr	r2, [r7, #0]
 800643e:	4413      	add	r3, r2
 8006440:	4619      	mov	r1, r3
 8006442:	f7fd fc85 	bl	8003d50 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8006446:	4602      	mov	r2, r0
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	4413      	add	r3, r2
 800644c:	60fb      	str	r3, [r7, #12]
      return offset;
 800644e:	68fb      	ldr	r3, [r7, #12]
    }
 8006450:	4618      	mov	r0, r3
 8006452:	3710      	adds	r7, #16
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}

08006458 <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8006458:	b580      	push	{r7, lr}
 800645a:	b084      	sub	sp, #16
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
 8006460:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8006462:	2300      	movs	r3, #0
 8006464:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f103 0008 	add.w	r0, r3, #8
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	683a      	ldr	r2, [r7, #0]
 8006470:	4413      	add	r3, r2
 8006472:	4619      	mov	r1, r3
 8006474:	f7fd fdde 	bl	8004034 <_ZN13geometry_msgs7Vector311deserializeEPh>
 8006478:	4602      	mov	r2, r0
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	4413      	add	r3, r2
 800647e:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	683a      	ldr	r2, [r7, #0]
 800648a:	4413      	add	r3, r2
 800648c:	4619      	mov	r1, r3
 800648e:	f7fd fdd1 	bl	8004034 <_ZN13geometry_msgs7Vector311deserializeEPh>
 8006492:	4602      	mov	r2, r0
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	4413      	add	r3, r2
 8006498:	60fb      	str	r3, [r7, #12]
     return offset;
 800649a:	68fb      	ldr	r3, [r7, #12]
    }
 800649c:	4618      	mov	r0, r3
 800649e:	3710      	adds	r7, #16
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}

080064a4 <_ZN13geometry_msgs5Twist7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Twist"; };
 80064a4:	b480      	push	{r7}
 80064a6:	b083      	sub	sp, #12
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
 80064ac:	4b02      	ldr	r3, [pc, #8]	@ (80064b8 <_ZN13geometry_msgs5Twist7getTypeEv+0x14>)
 80064ae:	4618      	mov	r0, r3
 80064b0:	370c      	adds	r7, #12
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bc80      	pop	{r7}
 80064b6:	4770      	bx	lr
 80064b8:	080106f4 	.word	0x080106f4

080064bc <_ZN13geometry_msgs5Twist6getMD5Ev>:
    virtual const char * getMD5() override { return "9f195f881246fdfa2798d1d3eebca84a"; };
 80064bc:	b480      	push	{r7}
 80064be:	b083      	sub	sp, #12
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
 80064c4:	4b02      	ldr	r3, [pc, #8]	@ (80064d0 <_ZN13geometry_msgs5Twist6getMD5Ev+0x14>)
 80064c6:	4618      	mov	r0, r3
 80064c8:	370c      	adds	r7, #12
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bc80      	pop	{r7}
 80064ce:	4770      	bx	lr
 80064d0:	08010708 	.word	0x08010708

080064d4 <_ZN13geometry_msgs9TransformC1Ev>:
      typedef geometry_msgs::Vector3 _translation_type;
      _translation_type translation;
      typedef geometry_msgs::Quaternion _rotation_type;
      _rotation_type rotation;

    Transform():
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b082      	sub	sp, #8
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
      translation(),
      rotation()
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	4618      	mov	r0, r3
 80064e0:	f7fb fb38 	bl	8001b54 <_ZN3ros3MsgC1Ev>
 80064e4:	4a08      	ldr	r2, [pc, #32]	@ (8006508 <_ZN13geometry_msgs9TransformC1Ev+0x34>)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	601a      	str	r2, [r3, #0]
      translation(),
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	3308      	adds	r3, #8
 80064ee:	4618      	mov	r0, r3
 80064f0:	f7fd fc06 	bl	8003d00 <_ZN13geometry_msgs7Vector3C1Ev>
      rotation()
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	3328      	adds	r3, #40	@ 0x28
 80064f8:	4618      	mov	r0, r3
 80064fa:	f7fc fd47 	bl	8002f8c <_ZN13geometry_msgs10QuaternionC1Ev>
    {
    }
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	4618      	mov	r0, r3
 8006502:	3708      	adds	r7, #8
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}
 8006508:	08010b28 	.word	0x08010b28

0800650c <_ZNK13geometry_msgs9Transform9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 800650c:	b580      	push	{r7, lr}
 800650e:	b084      	sub	sp, #16
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
 8006514:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8006516:	2300      	movs	r3, #0
 8006518:	60fb      	str	r3, [r7, #12]
      offset += this->translation.serialize(outbuffer + offset);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f103 0008 	add.w	r0, r3, #8
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	683a      	ldr	r2, [r7, #0]
 8006524:	4413      	add	r3, r2
 8006526:	4619      	mov	r1, r3
 8006528:	f7fd fc12 	bl	8003d50 <_ZNK13geometry_msgs7Vector39serializeEPh>
 800652c:	4602      	mov	r2, r0
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	4413      	add	r3, r2
 8006532:	60fb      	str	r3, [r7, #12]
      offset += this->rotation.serialize(outbuffer + offset);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	683a      	ldr	r2, [r7, #0]
 800653e:	4413      	add	r3, r2
 8006540:	4619      	mov	r1, r3
 8006542:	f7fc fd51 	bl	8002fe8 <_ZNK13geometry_msgs10Quaternion9serializeEPh>
 8006546:	4602      	mov	r2, r0
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	4413      	add	r3, r2
 800654c:	60fb      	str	r3, [r7, #12]
      return offset;
 800654e:	68fb      	ldr	r3, [r7, #12]
    }
 8006550:	4618      	mov	r0, r3
 8006552:	3710      	adds	r7, #16
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}

08006558 <_ZN13geometry_msgs9Transform11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8006558:	b580      	push	{r7, lr}
 800655a:	b084      	sub	sp, #16
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8006562:	2300      	movs	r3, #0
 8006564:	60fb      	str	r3, [r7, #12]
      offset += this->translation.deserialize(inbuffer + offset);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f103 0008 	add.w	r0, r3, #8
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	683a      	ldr	r2, [r7, #0]
 8006570:	4413      	add	r3, r2
 8006572:	4619      	mov	r1, r3
 8006574:	f7fd fd5e 	bl	8004034 <_ZN13geometry_msgs7Vector311deserializeEPh>
 8006578:	4602      	mov	r2, r0
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	4413      	add	r3, r2
 800657e:	60fb      	str	r3, [r7, #12]
      offset += this->rotation.deserialize(inbuffer + offset);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	683a      	ldr	r2, [r7, #0]
 800658a:	4413      	add	r3, r2
 800658c:	4619      	mov	r1, r3
 800658e:	f7fc ff14 	bl	80033ba <_ZN13geometry_msgs10Quaternion11deserializeEPh>
 8006592:	4602      	mov	r2, r0
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	4413      	add	r3, r2
 8006598:	60fb      	str	r3, [r7, #12]
     return offset;
 800659a:	68fb      	ldr	r3, [r7, #12]
    }
 800659c:	4618      	mov	r0, r3
 800659e:	3710      	adds	r7, #16
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}

080065a4 <_ZN13geometry_msgs9Transform7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Transform"; };
 80065a4:	b480      	push	{r7}
 80065a6:	b083      	sub	sp, #12
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
 80065ac:	4b02      	ldr	r3, [pc, #8]	@ (80065b8 <_ZN13geometry_msgs9Transform7getTypeEv+0x14>)
 80065ae:	4618      	mov	r0, r3
 80065b0:	370c      	adds	r7, #12
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bc80      	pop	{r7}
 80065b6:	4770      	bx	lr
 80065b8:	0801072c 	.word	0x0801072c

080065bc <_ZN13geometry_msgs9Transform6getMD5Ev>:
    virtual const char * getMD5() override { return "ac9eff44abf714214112b05d54a3cf9b"; };
 80065bc:	b480      	push	{r7}
 80065be:	b083      	sub	sp, #12
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
 80065c4:	4b02      	ldr	r3, [pc, #8]	@ (80065d0 <_ZN13geometry_msgs9Transform6getMD5Ev+0x14>)
 80065c6:	4618      	mov	r0, r3
 80065c8:	370c      	adds	r7, #12
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bc80      	pop	{r7}
 80065ce:	4770      	bx	lr
 80065d0:	08010744 	.word	0x08010744

080065d4 <_ZN13geometry_msgs16TransformStampedC1Ev>:
      typedef const char* _child_frame_id_type;
      _child_frame_id_type child_frame_id;
      typedef geometry_msgs::Transform _transform_type;
      _transform_type transform;

    TransformStamped():
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b082      	sub	sp, #8
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
      header(),
      child_frame_id(""),
      transform()
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	4618      	mov	r0, r3
 80065e0:	f7fb fab8 	bl	8001b54 <_ZN3ros3MsgC1Ev>
 80065e4:	4a0a      	ldr	r2, [pc, #40]	@ (8006610 <_ZN13geometry_msgs16TransformStampedC1Ev+0x3c>)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	601a      	str	r2, [r3, #0]
      header(),
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	3304      	adds	r3, #4
 80065ee:	4618      	mov	r0, r3
 80065f0:	f7fc fb3c 	bl	8002c6c <_ZN8std_msgs6HeaderC1Ev>
      child_frame_id(""),
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	4a07      	ldr	r2, [pc, #28]	@ (8006614 <_ZN13geometry_msgs16TransformStampedC1Ev+0x40>)
 80065f8:	619a      	str	r2, [r3, #24]
      transform()
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	3320      	adds	r3, #32
 80065fe:	4618      	mov	r0, r3
 8006600:	f7ff ff68 	bl	80064d4 <_ZN13geometry_msgs9TransformC1Ev>
    {
    }
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	4618      	mov	r0, r3
 8006608:	3708      	adds	r7, #8
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}
 800660e:	bf00      	nop
 8006610:	08010b10 	.word	0x08010b10
 8006614:	080104fc 	.word	0x080104fc

08006618 <_ZNK13geometry_msgs16TransformStamped9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8006618:	b580      	push	{r7, lr}
 800661a:	b084      	sub	sp, #16
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
 8006620:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8006622:	2300      	movs	r3, #0
 8006624:	60fb      	str	r3, [r7, #12]
      offset += this->header.serialize(outbuffer + offset);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	1d18      	adds	r0, r3, #4
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	683a      	ldr	r2, [r7, #0]
 800662e:	4413      	add	r3, r2
 8006630:	4619      	mov	r1, r3
 8006632:	f7fc fb3b 	bl	8002cac <_ZNK8std_msgs6Header9serializeEPh>
 8006636:	4602      	mov	r2, r0
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	4413      	add	r3, r2
 800663c:	60fb      	str	r3, [r7, #12]
      uint32_t length_child_frame_id = strlen(this->child_frame_id);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	699b      	ldr	r3, [r3, #24]
 8006642:	4618      	mov	r0, r3
 8006644:	f7f9 fdf0 	bl	8000228 <strlen>
 8006648:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_child_frame_id);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	683a      	ldr	r2, [r7, #0]
 800664e:	4413      	add	r3, r2
 8006650:	68b9      	ldr	r1, [r7, #8]
 8006652:	4618      	mov	r0, r3
 8006654:	f002 fc6a 	bl	8008f2c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	3304      	adds	r3, #4
 800665c:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->child_frame_id, length_child_frame_id);
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	683a      	ldr	r2, [r7, #0]
 8006662:	18d0      	adds	r0, r2, r3
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	699b      	ldr	r3, [r3, #24]
 8006668:	68ba      	ldr	r2, [r7, #8]
 800666a:	4619      	mov	r1, r3
 800666c:	f009 fec2 	bl	80103f4 <memcpy>
      offset += length_child_frame_id;
 8006670:	68fa      	ldr	r2, [r7, #12]
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	4413      	add	r3, r2
 8006676:	60fb      	str	r3, [r7, #12]
      offset += this->transform.serialize(outbuffer + offset);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f103 0020 	add.w	r0, r3, #32
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	683a      	ldr	r2, [r7, #0]
 8006682:	4413      	add	r3, r2
 8006684:	4619      	mov	r1, r3
 8006686:	f7ff ff41 	bl	800650c <_ZNK13geometry_msgs9Transform9serializeEPh>
 800668a:	4602      	mov	r2, r0
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	4413      	add	r3, r2
 8006690:	60fb      	str	r3, [r7, #12]
      return offset;
 8006692:	68fb      	ldr	r3, [r7, #12]
    }
 8006694:	4618      	mov	r0, r3
 8006696:	3710      	adds	r7, #16
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}

0800669c <_ZN13geometry_msgs16TransformStamped11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800669c:	b580      	push	{r7, lr}
 800669e:	b086      	sub	sp, #24
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
 80066a4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80066a6:	2300      	movs	r3, #0
 80066a8:	613b      	str	r3, [r7, #16]
      offset += this->header.deserialize(inbuffer + offset);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	1d18      	adds	r0, r3, #4
 80066ae:	693b      	ldr	r3, [r7, #16]
 80066b0:	683a      	ldr	r2, [r7, #0]
 80066b2:	4413      	add	r3, r2
 80066b4:	4619      	mov	r1, r3
 80066b6:	f7fc fb91 	bl	8002ddc <_ZN8std_msgs6Header11deserializeEPh>
 80066ba:	4602      	mov	r2, r0
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	4413      	add	r3, r2
 80066c0:	613b      	str	r3, [r7, #16]
      uint32_t length_child_frame_id;
      arrToVar(length_child_frame_id, (inbuffer + offset));
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	683a      	ldr	r2, [r7, #0]
 80066c6:	441a      	add	r2, r3
 80066c8:	f107 030c 	add.w	r3, r7, #12
 80066cc:	4611      	mov	r1, r2
 80066ce:	4618      	mov	r0, r3
 80066d0:	f002 fc4a 	bl	8008f68 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	3304      	adds	r3, #4
 80066d8:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_child_frame_id; ++k){
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	617b      	str	r3, [r7, #20]
 80066de:	e00b      	b.n	80066f8 <_ZN13geometry_msgs16TransformStamped11deserializeEPh+0x5c>
          inbuffer[k-1]=inbuffer[k];
 80066e0:	683a      	ldr	r2, [r7, #0]
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	441a      	add	r2, r3
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	3b01      	subs	r3, #1
 80066ea:	6839      	ldr	r1, [r7, #0]
 80066ec:	440b      	add	r3, r1
 80066ee:	7812      	ldrb	r2, [r2, #0]
 80066f0:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_child_frame_id; ++k){
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	3301      	adds	r3, #1
 80066f6:	617b      	str	r3, [r7, #20]
 80066f8:	693a      	ldr	r2, [r7, #16]
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	4413      	add	r3, r2
 80066fe:	697a      	ldr	r2, [r7, #20]
 8006700:	429a      	cmp	r2, r3
 8006702:	d3ed      	bcc.n	80066e0 <_ZN13geometry_msgs16TransformStamped11deserializeEPh+0x44>
      }
      inbuffer[offset+length_child_frame_id-1]=0;
 8006704:	693a      	ldr	r2, [r7, #16]
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	4413      	add	r3, r2
 800670a:	3b01      	subs	r3, #1
 800670c:	683a      	ldr	r2, [r7, #0]
 800670e:	4413      	add	r3, r2
 8006710:	2200      	movs	r2, #0
 8006712:	701a      	strb	r2, [r3, #0]
      this->child_frame_id = (char *)(inbuffer + offset-1);
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	3b01      	subs	r3, #1
 8006718:	683a      	ldr	r2, [r7, #0]
 800671a:	441a      	add	r2, r3
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	619a      	str	r2, [r3, #24]
      offset += length_child_frame_id;
 8006720:	693a      	ldr	r2, [r7, #16]
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	4413      	add	r3, r2
 8006726:	613b      	str	r3, [r7, #16]
      offset += this->transform.deserialize(inbuffer + offset);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f103 0020 	add.w	r0, r3, #32
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	683a      	ldr	r2, [r7, #0]
 8006732:	4413      	add	r3, r2
 8006734:	4619      	mov	r1, r3
 8006736:	f7ff ff0f 	bl	8006558 <_ZN13geometry_msgs9Transform11deserializeEPh>
 800673a:	4602      	mov	r2, r0
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	4413      	add	r3, r2
 8006740:	613b      	str	r3, [r7, #16]
     return offset;
 8006742:	693b      	ldr	r3, [r7, #16]
    }
 8006744:	4618      	mov	r0, r3
 8006746:	3718      	adds	r7, #24
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}

0800674c <_ZN13geometry_msgs16TransformStamped7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/TransformStamped"; };
 800674c:	b480      	push	{r7}
 800674e:	b083      	sub	sp, #12
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
 8006754:	4b02      	ldr	r3, [pc, #8]	@ (8006760 <_ZN13geometry_msgs16TransformStamped7getTypeEv+0x14>)
 8006756:	4618      	mov	r0, r3
 8006758:	370c      	adds	r7, #12
 800675a:	46bd      	mov	sp, r7
 800675c:	bc80      	pop	{r7}
 800675e:	4770      	bx	lr
 8006760:	08010768 	.word	0x08010768

08006764 <_ZN13geometry_msgs16TransformStamped6getMD5Ev>:
    virtual const char * getMD5() override { return "b5764a33bfeb3588febc2682852579b0"; };
 8006764:	b480      	push	{r7}
 8006766:	b083      	sub	sp, #12
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	4b02      	ldr	r3, [pc, #8]	@ (8006778 <_ZN13geometry_msgs16TransformStamped6getMD5Ev+0x14>)
 800676e:	4618      	mov	r0, r3
 8006770:	370c      	adds	r7, #12
 8006772:	46bd      	mov	sp, r7
 8006774:	bc80      	pop	{r7}
 8006776:	4770      	bx	lr
 8006778:	08010788 	.word	0x08010788

0800677c <_ZN13geometry_msgs5PointC1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Point():
 800677c:	b580      	push	{r7, lr}
 800677e:	b082      	sub	sp, #8
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	4618      	mov	r0, r3
 8006788:	f7fb f9e4 	bl	8001b54 <_ZN3ros3MsgC1Ev>
 800678c:	4a0e      	ldr	r2, [pc, #56]	@ (80067c8 <_ZN13geometry_msgs5PointC1Ev+0x4c>)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	601a      	str	r2, [r3, #0]
      x(0),
 8006792:	6879      	ldr	r1, [r7, #4]
 8006794:	f04f 0200 	mov.w	r2, #0
 8006798:	f04f 0300 	mov.w	r3, #0
 800679c:	e9c1 2302 	strd	r2, r3, [r1, #8]
      y(0),
 80067a0:	6879      	ldr	r1, [r7, #4]
 80067a2:	f04f 0200 	mov.w	r2, #0
 80067a6:	f04f 0300 	mov.w	r3, #0
 80067aa:	e9c1 2304 	strd	r2, r3, [r1, #16]
      z(0)
 80067ae:	6879      	ldr	r1, [r7, #4]
 80067b0:	f04f 0200 	mov.w	r2, #0
 80067b4:	f04f 0300 	mov.w	r3, #0
 80067b8:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	4618      	mov	r0, r3
 80067c0:	3708      	adds	r7, #8
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}
 80067c6:	bf00      	nop
 80067c8:	08010af8 	.word	0x08010af8

080067cc <_ZNK13geometry_msgs5Point9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80067cc:	b480      	push	{r7}
 80067ce:	b08b      	sub	sp, #44	@ 0x2c
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
 80067d4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80067d6:	2300      	movs	r3, #0
 80067d8:	627b      	str	r3, [r7, #36]	@ 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80067e0:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 80067e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80067e8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80067ea:	6838      	ldr	r0, [r7, #0]
 80067ec:	4401      	add	r1, r0
 80067ee:	b2d3      	uxtb	r3, r2
 80067f0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 80067f2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80067f6:	f04f 0200 	mov.w	r2, #0
 80067fa:	f04f 0300 	mov.w	r3, #0
 80067fe:	0a02      	lsrs	r2, r0, #8
 8006800:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8006804:	0a0b      	lsrs	r3, r1, #8
 8006806:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006808:	3101      	adds	r1, #1
 800680a:	6838      	ldr	r0, [r7, #0]
 800680c:	4401      	add	r1, r0
 800680e:	b2d3      	uxtb	r3, r2
 8006810:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 8006812:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006816:	f04f 0200 	mov.w	r2, #0
 800681a:	f04f 0300 	mov.w	r3, #0
 800681e:	0c02      	lsrs	r2, r0, #16
 8006820:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8006824:	0c0b      	lsrs	r3, r1, #16
 8006826:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006828:	3102      	adds	r1, #2
 800682a:	6838      	ldr	r0, [r7, #0]
 800682c:	4401      	add	r1, r0
 800682e:	b2d3      	uxtb	r3, r2
 8006830:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 8006832:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006836:	f04f 0200 	mov.w	r2, #0
 800683a:	f04f 0300 	mov.w	r3, #0
 800683e:	0e02      	lsrs	r2, r0, #24
 8006840:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8006844:	0e0b      	lsrs	r3, r1, #24
 8006846:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006848:	3103      	adds	r1, #3
 800684a:	6838      	ldr	r0, [r7, #0]
 800684c:	4401      	add	r1, r0
 800684e:	b2d3      	uxtb	r3, r2
 8006850:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 8006852:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006856:	f04f 0200 	mov.w	r2, #0
 800685a:	f04f 0300 	mov.w	r3, #0
 800685e:	000a      	movs	r2, r1
 8006860:	2300      	movs	r3, #0
 8006862:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006864:	3104      	adds	r1, #4
 8006866:	6838      	ldr	r0, [r7, #0]
 8006868:	4401      	add	r1, r0
 800686a:	b2d3      	uxtb	r3, r2
 800686c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 800686e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006872:	f04f 0200 	mov.w	r2, #0
 8006876:	f04f 0300 	mov.w	r3, #0
 800687a:	0a0a      	lsrs	r2, r1, #8
 800687c:	2300      	movs	r3, #0
 800687e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006880:	3105      	adds	r1, #5
 8006882:	6838      	ldr	r0, [r7, #0]
 8006884:	4401      	add	r1, r0
 8006886:	b2d3      	uxtb	r3, r2
 8006888:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 800688a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800688e:	f04f 0200 	mov.w	r2, #0
 8006892:	f04f 0300 	mov.w	r3, #0
 8006896:	0c0a      	lsrs	r2, r1, #16
 8006898:	2300      	movs	r3, #0
 800689a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800689c:	3106      	adds	r1, #6
 800689e:	6838      	ldr	r0, [r7, #0]
 80068a0:	4401      	add	r1, r0
 80068a2:	b2d3      	uxtb	r3, r2
 80068a4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 80068a6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80068aa:	f04f 0200 	mov.w	r2, #0
 80068ae:	f04f 0300 	mov.w	r3, #0
 80068b2:	0e0a      	lsrs	r2, r1, #24
 80068b4:	2300      	movs	r3, #0
 80068b6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80068b8:	3107      	adds	r1, #7
 80068ba:	6838      	ldr	r0, [r7, #0]
 80068bc:	4401      	add	r1, r0
 80068be:	b2d3      	uxtb	r3, r2
 80068c0:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 80068c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068c4:	3308      	adds	r3, #8
 80068c6:	627b      	str	r3, [r7, #36]	@ 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80068ce:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 80068d2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80068d6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80068d8:	6838      	ldr	r0, [r7, #0]
 80068da:	4401      	add	r1, r0
 80068dc:	b2d3      	uxtb	r3, r2
 80068de:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 80068e0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80068e4:	f04f 0200 	mov.w	r2, #0
 80068e8:	f04f 0300 	mov.w	r3, #0
 80068ec:	0a02      	lsrs	r2, r0, #8
 80068ee:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80068f2:	0a0b      	lsrs	r3, r1, #8
 80068f4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80068f6:	3101      	adds	r1, #1
 80068f8:	6838      	ldr	r0, [r7, #0]
 80068fa:	4401      	add	r1, r0
 80068fc:	b2d3      	uxtb	r3, r2
 80068fe:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8006900:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006904:	f04f 0200 	mov.w	r2, #0
 8006908:	f04f 0300 	mov.w	r3, #0
 800690c:	0c02      	lsrs	r2, r0, #16
 800690e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8006912:	0c0b      	lsrs	r3, r1, #16
 8006914:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006916:	3102      	adds	r1, #2
 8006918:	6838      	ldr	r0, [r7, #0]
 800691a:	4401      	add	r1, r0
 800691c:	b2d3      	uxtb	r3, r2
 800691e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8006920:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006924:	f04f 0200 	mov.w	r2, #0
 8006928:	f04f 0300 	mov.w	r3, #0
 800692c:	0e02      	lsrs	r2, r0, #24
 800692e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8006932:	0e0b      	lsrs	r3, r1, #24
 8006934:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006936:	3103      	adds	r1, #3
 8006938:	6838      	ldr	r0, [r7, #0]
 800693a:	4401      	add	r1, r0
 800693c:	b2d3      	uxtb	r3, r2
 800693e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8006940:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006944:	f04f 0200 	mov.w	r2, #0
 8006948:	f04f 0300 	mov.w	r3, #0
 800694c:	000a      	movs	r2, r1
 800694e:	2300      	movs	r3, #0
 8006950:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006952:	3104      	adds	r1, #4
 8006954:	6838      	ldr	r0, [r7, #0]
 8006956:	4401      	add	r1, r0
 8006958:	b2d3      	uxtb	r3, r2
 800695a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 800695c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006960:	f04f 0200 	mov.w	r2, #0
 8006964:	f04f 0300 	mov.w	r3, #0
 8006968:	0a0a      	lsrs	r2, r1, #8
 800696a:	2300      	movs	r3, #0
 800696c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800696e:	3105      	adds	r1, #5
 8006970:	6838      	ldr	r0, [r7, #0]
 8006972:	4401      	add	r1, r0
 8006974:	b2d3      	uxtb	r3, r2
 8006976:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8006978:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800697c:	f04f 0200 	mov.w	r2, #0
 8006980:	f04f 0300 	mov.w	r3, #0
 8006984:	0c0a      	lsrs	r2, r1, #16
 8006986:	2300      	movs	r3, #0
 8006988:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800698a:	3106      	adds	r1, #6
 800698c:	6838      	ldr	r0, [r7, #0]
 800698e:	4401      	add	r1, r0
 8006990:	b2d3      	uxtb	r3, r2
 8006992:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8006994:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006998:	f04f 0200 	mov.w	r2, #0
 800699c:	f04f 0300 	mov.w	r3, #0
 80069a0:	0e0a      	lsrs	r2, r1, #24
 80069a2:	2300      	movs	r3, #0
 80069a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80069a6:	3107      	adds	r1, #7
 80069a8:	6838      	ldr	r0, [r7, #0]
 80069aa:	4401      	add	r1, r0
 80069ac:	b2d3      	uxtb	r3, r2
 80069ae:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 80069b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069b2:	3308      	adds	r3, #8
 80069b4:	627b      	str	r3, [r7, #36]	@ 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80069bc:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 80069c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80069c4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80069c6:	6838      	ldr	r0, [r7, #0]
 80069c8:	4401      	add	r1, r0
 80069ca:	b2d3      	uxtb	r3, r2
 80069cc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 80069ce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80069d2:	f04f 0200 	mov.w	r2, #0
 80069d6:	f04f 0300 	mov.w	r3, #0
 80069da:	0a02      	lsrs	r2, r0, #8
 80069dc:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80069e0:	0a0b      	lsrs	r3, r1, #8
 80069e2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80069e4:	3101      	adds	r1, #1
 80069e6:	6838      	ldr	r0, [r7, #0]
 80069e8:	4401      	add	r1, r0
 80069ea:	b2d3      	uxtb	r3, r2
 80069ec:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 80069ee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80069f2:	f04f 0200 	mov.w	r2, #0
 80069f6:	f04f 0300 	mov.w	r3, #0
 80069fa:	0c02      	lsrs	r2, r0, #16
 80069fc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8006a00:	0c0b      	lsrs	r3, r1, #16
 8006a02:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006a04:	3102      	adds	r1, #2
 8006a06:	6838      	ldr	r0, [r7, #0]
 8006a08:	4401      	add	r1, r0
 8006a0a:	b2d3      	uxtb	r3, r2
 8006a0c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8006a0e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006a12:	f04f 0200 	mov.w	r2, #0
 8006a16:	f04f 0300 	mov.w	r3, #0
 8006a1a:	0e02      	lsrs	r2, r0, #24
 8006a1c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8006a20:	0e0b      	lsrs	r3, r1, #24
 8006a22:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006a24:	3103      	adds	r1, #3
 8006a26:	6838      	ldr	r0, [r7, #0]
 8006a28:	4401      	add	r1, r0
 8006a2a:	b2d3      	uxtb	r3, r2
 8006a2c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8006a2e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006a32:	f04f 0200 	mov.w	r2, #0
 8006a36:	f04f 0300 	mov.w	r3, #0
 8006a3a:	000a      	movs	r2, r1
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006a40:	3104      	adds	r1, #4
 8006a42:	6838      	ldr	r0, [r7, #0]
 8006a44:	4401      	add	r1, r0
 8006a46:	b2d3      	uxtb	r3, r2
 8006a48:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8006a4a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006a4e:	f04f 0200 	mov.w	r2, #0
 8006a52:	f04f 0300 	mov.w	r3, #0
 8006a56:	0a0a      	lsrs	r2, r1, #8
 8006a58:	2300      	movs	r3, #0
 8006a5a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006a5c:	3105      	adds	r1, #5
 8006a5e:	6838      	ldr	r0, [r7, #0]
 8006a60:	4401      	add	r1, r0
 8006a62:	b2d3      	uxtb	r3, r2
 8006a64:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8006a66:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006a6a:	f04f 0200 	mov.w	r2, #0
 8006a6e:	f04f 0300 	mov.w	r3, #0
 8006a72:	0c0a      	lsrs	r2, r1, #16
 8006a74:	2300      	movs	r3, #0
 8006a76:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006a78:	3106      	adds	r1, #6
 8006a7a:	6838      	ldr	r0, [r7, #0]
 8006a7c:	4401      	add	r1, r0
 8006a7e:	b2d3      	uxtb	r3, r2
 8006a80:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 8006a82:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006a86:	f04f 0200 	mov.w	r2, #0
 8006a8a:	f04f 0300 	mov.w	r3, #0
 8006a8e:	0e0a      	lsrs	r2, r1, #24
 8006a90:	2300      	movs	r3, #0
 8006a92:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006a94:	3107      	adds	r1, #7
 8006a96:	6838      	ldr	r0, [r7, #0]
 8006a98:	4401      	add	r1, r0
 8006a9a:	b2d3      	uxtb	r3, r2
 8006a9c:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 8006a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aa0:	3308      	adds	r3, #8
 8006aa2:	627b      	str	r3, [r7, #36]	@ 0x24
      return offset;
 8006aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	372c      	adds	r7, #44	@ 0x2c
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bc80      	pop	{r7}
 8006aae:	4770      	bx	lr

08006ab0 <_ZN13geometry_msgs5Point11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8006ab0:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8006ab4:	b0eb      	sub	sp, #428	@ 0x1ac
 8006ab6:	af00      	add	r7, sp, #0
 8006ab8:	f8c7 0184 	str.w	r0, [r7, #388]	@ 0x184
 8006abc:	f8c7 1180 	str.w	r1, [r7, #384]	@ 0x180
    {
      int offset = 0;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 8006ac6:	f04f 0200 	mov.w	r2, #0
 8006aca:	f04f 0300 	mov.w	r3, #0
 8006ace:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8006ad2:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8006ad6:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 8006ada:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8006ade:	4413      	add	r3, r2
 8006ae0:	781b      	ldrb	r3, [r3, #0]
 8006ae2:	b2db      	uxtb	r3, r3
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	461c      	mov	r4, r3
 8006ae8:	4615      	mov	r5, r2
 8006aea:	ea40 0804 	orr.w	r8, r0, r4
 8006aee:	ea41 0905 	orr.w	r9, r1, r5
 8006af2:	e9c7 8966 	strd	r8, r9, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8006af6:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8006afa:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8006afe:	1c5a      	adds	r2, r3, #1
 8006b00:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8006b04:	4413      	add	r3, r2
 8006b06:	781b      	ldrb	r3, [r3, #0]
 8006b08:	b2db      	uxtb	r3, r3
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	469a      	mov	sl, r3
 8006b0e:	4693      	mov	fp, r2
 8006b10:	f04f 0200 	mov.w	r2, #0
 8006b14:	f04f 0300 	mov.w	r3, #0
 8006b18:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8006b1c:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8006b20:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8006b24:	ea40 0402 	orr.w	r4, r0, r2
 8006b28:	f8c7 4178 	str.w	r4, [r7, #376]	@ 0x178
 8006b2c:	430b      	orrs	r3, r1
 8006b2e:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8006b32:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	@ 0x178
 8006b36:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8006b3a:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8006b3e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8006b42:	1c9a      	adds	r2, r3, #2
 8006b44:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8006b48:	4413      	add	r3, r2
 8006b4a:	781b      	ldrb	r3, [r3, #0]
 8006b4c:	b2db      	uxtb	r3, r3
 8006b4e:	2200      	movs	r2, #0
 8006b50:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 8006b54:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
 8006b58:	f04f 0200 	mov.w	r2, #0
 8006b5c:	f04f 0300 	mov.w	r3, #0
 8006b60:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	@ 0x170
 8006b64:	464c      	mov	r4, r9
 8006b66:	0423      	lsls	r3, r4, #16
 8006b68:	46c4      	mov	ip, r8
 8006b6a:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
 8006b6e:	4644      	mov	r4, r8
 8006b70:	0422      	lsls	r2, r4, #16
 8006b72:	ea40 0402 	orr.w	r4, r0, r2
 8006b76:	f8c7 4168 	str.w	r4, [r7, #360]	@ 0x168
 8006b7a:	430b      	orrs	r3, r1
 8006b7c:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 8006b80:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	@ 0x168
 8006b84:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8006b88:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8006b8c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8006b90:	1cda      	adds	r2, r3, #3
 8006b92:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8006b96:	4413      	add	r3, r2
 8006b98:	781b      	ldrb	r3, [r3, #0]
 8006b9a:	b2db      	uxtb	r3, r3
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 8006ba2:	f8c7 2164 	str.w	r2, [r7, #356]	@ 0x164
 8006ba6:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	@ 0x160
 8006baa:	4623      	mov	r3, r4
 8006bac:	0a1b      	lsrs	r3, r3, #8
 8006bae:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8006bb2:	4623      	mov	r3, r4
 8006bb4:	061b      	lsls	r3, r3, #24
 8006bb6:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8006bba:	e9d7 3456 	ldrd	r3, r4, [r7, #344]	@ 0x158
 8006bbe:	461a      	mov	r2, r3
 8006bc0:	4302      	orrs	r2, r0
 8006bc2:	f8c7 2150 	str.w	r2, [r7, #336]	@ 0x150
 8006bc6:	4623      	mov	r3, r4
 8006bc8:	430b      	orrs	r3, r1
 8006bca:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8006bce:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	@ 0x150
 8006bd2:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8006bd6:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8006bda:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8006bde:	1d1a      	adds	r2, r3, #4
 8006be0:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8006be4:	4413      	add	r3, r2
 8006be6:	781b      	ldrb	r3, [r3, #0]
 8006be8:	b2db      	uxtb	r3, r3
 8006bea:	2200      	movs	r2, #0
 8006bec:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 8006bf0:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8006bf4:	f04f 0200 	mov.w	r2, #0
 8006bf8:	f04f 0300 	mov.w	r3, #0
 8006bfc:	f8d7 4148 	ldr.w	r4, [r7, #328]	@ 0x148
 8006c00:	0023      	movs	r3, r4
 8006c02:	2200      	movs	r2, #0
 8006c04:	ea40 0402 	orr.w	r4, r0, r2
 8006c08:	f8c7 4140 	str.w	r4, [r7, #320]	@ 0x140
 8006c0c:	430b      	orrs	r3, r1
 8006c0e:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8006c12:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	@ 0x140
 8006c16:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8006c1a:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8006c1e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8006c22:	1d5a      	adds	r2, r3, #5
 8006c24:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8006c28:	4413      	add	r3, r2
 8006c2a:	781b      	ldrb	r3, [r3, #0]
 8006c2c:	b2db      	uxtb	r3, r3
 8006c2e:	2200      	movs	r2, #0
 8006c30:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8006c34:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 8006c38:	f04f 0200 	mov.w	r2, #0
 8006c3c:	f04f 0300 	mov.w	r3, #0
 8006c40:	f8d7 4138 	ldr.w	r4, [r7, #312]	@ 0x138
 8006c44:	0223      	lsls	r3, r4, #8
 8006c46:	2200      	movs	r2, #0
 8006c48:	ea40 0402 	orr.w	r4, r0, r2
 8006c4c:	f8c7 4130 	str.w	r4, [r7, #304]	@ 0x130
 8006c50:	430b      	orrs	r3, r1
 8006c52:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8006c56:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	@ 0x130
 8006c5a:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8006c5e:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8006c62:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8006c66:	1d9a      	adds	r2, r3, #6
 8006c68:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8006c6c:	4413      	add	r3, r2
 8006c6e:	781b      	ldrb	r3, [r3, #0]
 8006c70:	b2db      	uxtb	r3, r3
 8006c72:	2200      	movs	r2, #0
 8006c74:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8006c78:	f8c7 212c 	str.w	r2, [r7, #300]	@ 0x12c
 8006c7c:	f04f 0200 	mov.w	r2, #0
 8006c80:	f04f 0300 	mov.w	r3, #0
 8006c84:	f8d7 4128 	ldr.w	r4, [r7, #296]	@ 0x128
 8006c88:	0423      	lsls	r3, r4, #16
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	ea40 0402 	orr.w	r4, r0, r2
 8006c90:	f8c7 4120 	str.w	r4, [r7, #288]	@ 0x120
 8006c94:	430b      	orrs	r3, r1
 8006c96:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8006c9a:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	@ 0x120
 8006c9e:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8006ca2:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8006ca6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8006caa:	1dda      	adds	r2, r3, #7
 8006cac:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8006cb0:	4413      	add	r3, r2
 8006cb2:	781b      	ldrb	r3, [r3, #0]
 8006cb4:	b2db      	uxtb	r3, r3
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8006cbc:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8006cc0:	f04f 0200 	mov.w	r2, #0
 8006cc4:	f04f 0300 	mov.w	r3, #0
 8006cc8:	f8d7 4118 	ldr.w	r4, [r7, #280]	@ 0x118
 8006ccc:	0623      	lsls	r3, r4, #24
 8006cce:	2200      	movs	r2, #0
 8006cd0:	ea40 0402 	orr.w	r4, r0, r2
 8006cd4:	f8c7 4110 	str.w	r4, [r7, #272]	@ 0x110
 8006cd8:	430b      	orrs	r3, r1
 8006cda:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8006cde:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	@ 0x110
 8006ce2:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      this->x = u_x.real;
 8006ce6:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8006cea:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8006cee:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 8006cf2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8006cf6:	3308      	adds	r3, #8
 8006cf8:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8006cfc:	f04f 0200 	mov.w	r2, #0
 8006d00:	f04f 0300 	mov.w	r3, #0
 8006d04:	e9c7 2364 	strd	r2, r3, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8006d08:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8006d0c:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 8006d10:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8006d14:	4413      	add	r3, r2
 8006d16:	781b      	ldrb	r3, [r3, #0]
 8006d18:	b2db      	uxtb	r3, r3
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8006d20:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 8006d24:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	@ 0x108
 8006d28:	461a      	mov	r2, r3
 8006d2a:	4302      	orrs	r2, r0
 8006d2c:	f8c7 2100 	str.w	r2, [r7, #256]	@ 0x100
 8006d30:	4623      	mov	r3, r4
 8006d32:	430b      	orrs	r3, r1
 8006d34:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006d38:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	@ 0x100
 8006d3c:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8006d40:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8006d44:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8006d48:	1c5a      	adds	r2, r3, #1
 8006d4a:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8006d4e:	4413      	add	r3, r2
 8006d50:	781b      	ldrb	r3, [r3, #0]
 8006d52:	b2db      	uxtb	r3, r3
 8006d54:	2200      	movs	r2, #0
 8006d56:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006d5a:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 8006d5e:	f04f 0200 	mov.w	r2, #0
 8006d62:	f04f 0300 	mov.w	r3, #0
 8006d66:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	@ 0xf8
 8006d6a:	464c      	mov	r4, r9
 8006d6c:	0223      	lsls	r3, r4, #8
 8006d6e:	46c4      	mov	ip, r8
 8006d70:	ea43 631c 	orr.w	r3, r3, ip, lsr #24
 8006d74:	4644      	mov	r4, r8
 8006d76:	0222      	lsls	r2, r4, #8
 8006d78:	ea40 0402 	orr.w	r4, r0, r2
 8006d7c:	f8c7 40f0 	str.w	r4, [r7, #240]	@ 0xf0
 8006d80:	430b      	orrs	r3, r1
 8006d82:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006d86:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	@ 0xf0
 8006d8a:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8006d8e:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8006d92:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8006d96:	1c9a      	adds	r2, r3, #2
 8006d98:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8006d9c:	4413      	add	r3, r2
 8006d9e:	781b      	ldrb	r3, [r3, #0]
 8006da0:	b2db      	uxtb	r3, r3
 8006da2:	2200      	movs	r2, #0
 8006da4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006da8:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006dac:	f04f 0200 	mov.w	r2, #0
 8006db0:	f04f 0300 	mov.w	r3, #0
 8006db4:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8006db8:	464c      	mov	r4, r9
 8006dba:	0423      	lsls	r3, r4, #16
 8006dbc:	46c4      	mov	ip, r8
 8006dbe:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
 8006dc2:	4644      	mov	r4, r8
 8006dc4:	0422      	lsls	r2, r4, #16
 8006dc6:	ea40 0402 	orr.w	r4, r0, r2
 8006dca:	f8c7 40e0 	str.w	r4, [r7, #224]	@ 0xe0
 8006dce:	430b      	orrs	r3, r1
 8006dd0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006dd4:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	@ 0xe0
 8006dd8:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8006ddc:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8006de0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8006de4:	1cda      	adds	r2, r3, #3
 8006de6:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8006dea:	4413      	add	r3, r2
 8006dec:	781b      	ldrb	r3, [r3, #0]
 8006dee:	b2db      	uxtb	r3, r3
 8006df0:	2200      	movs	r2, #0
 8006df2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006df6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006dfa:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8006dfe:	4623      	mov	r3, r4
 8006e00:	0a1b      	lsrs	r3, r3, #8
 8006e02:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006e06:	4623      	mov	r3, r4
 8006e08:	061b      	lsls	r3, r3, #24
 8006e0a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006e0e:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	@ 0xd0
 8006e12:	461a      	mov	r2, r3
 8006e14:	4302      	orrs	r2, r0
 8006e16:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8006e1a:	4623      	mov	r3, r4
 8006e1c:	430b      	orrs	r3, r1
 8006e1e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006e22:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	@ 0xc8
 8006e26:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8006e2a:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8006e2e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8006e32:	1d1a      	adds	r2, r3, #4
 8006e34:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8006e38:	4413      	add	r3, r2
 8006e3a:	781b      	ldrb	r3, [r3, #0]
 8006e3c:	b2db      	uxtb	r3, r3
 8006e3e:	2200      	movs	r2, #0
 8006e40:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006e44:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006e48:	f04f 0200 	mov.w	r2, #0
 8006e4c:	f04f 0300 	mov.w	r3, #0
 8006e50:	f8d7 40c0 	ldr.w	r4, [r7, #192]	@ 0xc0
 8006e54:	0023      	movs	r3, r4
 8006e56:	2200      	movs	r2, #0
 8006e58:	ea40 0402 	orr.w	r4, r0, r2
 8006e5c:	f8c7 40b8 	str.w	r4, [r7, #184]	@ 0xb8
 8006e60:	430b      	orrs	r3, r1
 8006e62:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006e66:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	@ 0xb8
 8006e6a:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8006e6e:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8006e72:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8006e76:	1d5a      	adds	r2, r3, #5
 8006e78:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8006e7c:	4413      	add	r3, r2
 8006e7e:	781b      	ldrb	r3, [r3, #0]
 8006e80:	b2db      	uxtb	r3, r3
 8006e82:	2200      	movs	r2, #0
 8006e84:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006e88:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8006e8c:	f04f 0200 	mov.w	r2, #0
 8006e90:	f04f 0300 	mov.w	r3, #0
 8006e94:	f8d7 40b0 	ldr.w	r4, [r7, #176]	@ 0xb0
 8006e98:	0223      	lsls	r3, r4, #8
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	ea40 0402 	orr.w	r4, r0, r2
 8006ea0:	f8c7 40a8 	str.w	r4, [r7, #168]	@ 0xa8
 8006ea4:	430b      	orrs	r3, r1
 8006ea6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006eaa:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	@ 0xa8
 8006eae:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8006eb2:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8006eb6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8006eba:	1d9a      	adds	r2, r3, #6
 8006ebc:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8006ec0:	4413      	add	r3, r2
 8006ec2:	781b      	ldrb	r3, [r3, #0]
 8006ec4:	b2db      	uxtb	r3, r3
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006ecc:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006ed0:	f04f 0200 	mov.w	r2, #0
 8006ed4:	f04f 0300 	mov.w	r3, #0
 8006ed8:	f8d7 40a0 	ldr.w	r4, [r7, #160]	@ 0xa0
 8006edc:	0423      	lsls	r3, r4, #16
 8006ede:	2200      	movs	r2, #0
 8006ee0:	ea40 0402 	orr.w	r4, r0, r2
 8006ee4:	f8c7 4098 	str.w	r4, [r7, #152]	@ 0x98
 8006ee8:	430b      	orrs	r3, r1
 8006eea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006eee:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	@ 0x98
 8006ef2:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8006ef6:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8006efa:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8006efe:	1dda      	adds	r2, r3, #7
 8006f00:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8006f04:	4413      	add	r3, r2
 8006f06:	781b      	ldrb	r3, [r3, #0]
 8006f08:	b2db      	uxtb	r3, r3
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006f10:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006f14:	f04f 0200 	mov.w	r2, #0
 8006f18:	f04f 0300 	mov.w	r3, #0
 8006f1c:	f8d7 4090 	ldr.w	r4, [r7, #144]	@ 0x90
 8006f20:	0623      	lsls	r3, r4, #24
 8006f22:	2200      	movs	r2, #0
 8006f24:	ea40 0402 	orr.w	r4, r0, r2
 8006f28:	f8c7 4088 	str.w	r4, [r7, #136]	@ 0x88
 8006f2c:	430b      	orrs	r3, r1
 8006f2e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006f32:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	@ 0x88
 8006f36:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      this->y = u_y.real;
 8006f3a:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8006f3e:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8006f42:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8006f46:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8006f4a:	3308      	adds	r3, #8
 8006f4c:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8006f50:	f04f 0200 	mov.w	r2, #0
 8006f54:	f04f 0300 	mov.w	r3, #0
 8006f58:	e9c7 2362 	strd	r2, r3, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8006f5c:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8006f60:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 8006f64:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8006f68:	4413      	add	r3, r2
 8006f6a:	781b      	ldrb	r3, [r3, #0]
 8006f6c:	b2db      	uxtb	r3, r3
 8006f6e:	2200      	movs	r2, #0
 8006f70:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006f74:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8006f78:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	@ 0x80
 8006f7c:	461a      	mov	r2, r3
 8006f7e:	4302      	orrs	r2, r0
 8006f80:	67ba      	str	r2, [r7, #120]	@ 0x78
 8006f82:	4623      	mov	r3, r4
 8006f84:	430b      	orrs	r3, r1
 8006f86:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006f88:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	@ 0x78
 8006f8c:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8006f90:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8006f94:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8006f98:	1c5a      	adds	r2, r3, #1
 8006f9a:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8006f9e:	4413      	add	r3, r2
 8006fa0:	781b      	ldrb	r3, [r3, #0]
 8006fa2:	b2db      	uxtb	r3, r3
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	673b      	str	r3, [r7, #112]	@ 0x70
 8006fa8:	677a      	str	r2, [r7, #116]	@ 0x74
 8006faa:	f04f 0200 	mov.w	r2, #0
 8006fae:	f04f 0300 	mov.w	r3, #0
 8006fb2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006fb6:	464c      	mov	r4, r9
 8006fb8:	0223      	lsls	r3, r4, #8
 8006fba:	46c4      	mov	ip, r8
 8006fbc:	ea43 631c 	orr.w	r3, r3, ip, lsr #24
 8006fc0:	4644      	mov	r4, r8
 8006fc2:	0222      	lsls	r2, r4, #8
 8006fc4:	ea40 0402 	orr.w	r4, r0, r2
 8006fc8:	66bc      	str	r4, [r7, #104]	@ 0x68
 8006fca:	430b      	orrs	r3, r1
 8006fcc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006fce:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	@ 0x68
 8006fd2:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8006fd6:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8006fda:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8006fde:	1c9a      	adds	r2, r3, #2
 8006fe0:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8006fe4:	4413      	add	r3, r2
 8006fe6:	781b      	ldrb	r3, [r3, #0]
 8006fe8:	b2db      	uxtb	r3, r3
 8006fea:	2200      	movs	r2, #0
 8006fec:	663b      	str	r3, [r7, #96]	@ 0x60
 8006fee:	667a      	str	r2, [r7, #100]	@ 0x64
 8006ff0:	f04f 0200 	mov.w	r2, #0
 8006ff4:	f04f 0300 	mov.w	r3, #0
 8006ff8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006ffc:	464c      	mov	r4, r9
 8006ffe:	0423      	lsls	r3, r4, #16
 8007000:	46c4      	mov	ip, r8
 8007002:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
 8007006:	4644      	mov	r4, r8
 8007008:	0422      	lsls	r2, r4, #16
 800700a:	ea40 0402 	orr.w	r4, r0, r2
 800700e:	65bc      	str	r4, [r7, #88]	@ 0x58
 8007010:	430b      	orrs	r3, r1
 8007012:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007014:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	@ 0x58
 8007018:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800701c:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8007020:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8007024:	1cda      	adds	r2, r3, #3
 8007026:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800702a:	4413      	add	r3, r2
 800702c:	781b      	ldrb	r3, [r3, #0]
 800702e:	b2db      	uxtb	r3, r3
 8007030:	2200      	movs	r2, #0
 8007032:	653b      	str	r3, [r7, #80]	@ 0x50
 8007034:	657a      	str	r2, [r7, #84]	@ 0x54
 8007036:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 800703a:	4623      	mov	r3, r4
 800703c:	0a1b      	lsrs	r3, r3, #8
 800703e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007040:	4623      	mov	r3, r4
 8007042:	061b      	lsls	r3, r3, #24
 8007044:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007046:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 800704a:	461a      	mov	r2, r3
 800704c:	4302      	orrs	r2, r0
 800704e:	643a      	str	r2, [r7, #64]	@ 0x40
 8007050:	4623      	mov	r3, r4
 8007052:	430b      	orrs	r3, r1
 8007054:	647b      	str	r3, [r7, #68]	@ 0x44
 8007056:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 800705a:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800705e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8007062:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8007066:	1d1a      	adds	r2, r3, #4
 8007068:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800706c:	4413      	add	r3, r2
 800706e:	781b      	ldrb	r3, [r3, #0]
 8007070:	b2db      	uxtb	r3, r3
 8007072:	2200      	movs	r2, #0
 8007074:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007076:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8007078:	f04f 0200 	mov.w	r2, #0
 800707c:	f04f 0300 	mov.w	r3, #0
 8007080:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 8007082:	0023      	movs	r3, r4
 8007084:	2200      	movs	r2, #0
 8007086:	ea40 0402 	orr.w	r4, r0, r2
 800708a:	633c      	str	r4, [r7, #48]	@ 0x30
 800708c:	430b      	orrs	r3, r1
 800708e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007090:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8007094:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8007098:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 800709c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80070a0:	1d5a      	adds	r2, r3, #5
 80070a2:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80070a6:	4413      	add	r3, r2
 80070a8:	781b      	ldrb	r3, [r3, #0]
 80070aa:	b2db      	uxtb	r3, r3
 80070ac:	2200      	movs	r2, #0
 80070ae:	62bb      	str	r3, [r7, #40]	@ 0x28
 80070b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80070b2:	f04f 0200 	mov.w	r2, #0
 80070b6:	f04f 0300 	mov.w	r3, #0
 80070ba:	6abc      	ldr	r4, [r7, #40]	@ 0x28
 80070bc:	0223      	lsls	r3, r4, #8
 80070be:	2200      	movs	r2, #0
 80070c0:	ea40 0402 	orr.w	r4, r0, r2
 80070c4:	623c      	str	r4, [r7, #32]
 80070c6:	430b      	orrs	r3, r1
 80070c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80070ca:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80070ce:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80070d2:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 80070d6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80070da:	3306      	adds	r3, #6
 80070dc:	f8d7 2180 	ldr.w	r2, [r7, #384]	@ 0x180
 80070e0:	4413      	add	r3, r2
 80070e2:	781b      	ldrb	r3, [r3, #0]
 80070e4:	b2db      	uxtb	r3, r3
 80070e6:	2200      	movs	r2, #0
 80070e8:	61bb      	str	r3, [r7, #24]
 80070ea:	61fa      	str	r2, [r7, #28]
 80070ec:	f04f 0200 	mov.w	r2, #0
 80070f0:	f04f 0300 	mov.w	r3, #0
 80070f4:	69bc      	ldr	r4, [r7, #24]
 80070f6:	0423      	lsls	r3, r4, #16
 80070f8:	2200      	movs	r2, #0
 80070fa:	ea40 0402 	orr.w	r4, r0, r2
 80070fe:	613c      	str	r4, [r7, #16]
 8007100:	430b      	orrs	r3, r1
 8007102:	617b      	str	r3, [r7, #20]
 8007104:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8007108:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800710c:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8007110:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8007114:	3307      	adds	r3, #7
 8007116:	f8d7 2180 	ldr.w	r2, [r7, #384]	@ 0x180
 800711a:	4413      	add	r3, r2
 800711c:	781b      	ldrb	r3, [r3, #0]
 800711e:	b2db      	uxtb	r3, r3
 8007120:	2200      	movs	r2, #0
 8007122:	60bb      	str	r3, [r7, #8]
 8007124:	60fa      	str	r2, [r7, #12]
 8007126:	f04f 0200 	mov.w	r2, #0
 800712a:	f04f 0300 	mov.w	r3, #0
 800712e:	68bc      	ldr	r4, [r7, #8]
 8007130:	0623      	lsls	r3, r4, #24
 8007132:	2200      	movs	r2, #0
 8007134:	ea40 0402 	orr.w	r4, r0, r2
 8007138:	603c      	str	r4, [r7, #0]
 800713a:	430b      	orrs	r3, r1
 800713c:	607b      	str	r3, [r7, #4]
 800713e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8007142:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      this->z = u_z.real;
 8007146:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 800714a:	f8d7 1184 	ldr.w	r1, [r7, #388]	@ 0x184
 800714e:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 8007152:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8007156:	3308      	adds	r3, #8
 8007158:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
     return offset;
 800715c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
    }
 8007160:	4618      	mov	r0, r3
 8007162:	f507 77d6 	add.w	r7, r7, #428	@ 0x1ac
 8007166:	46bd      	mov	sp, r7
 8007168:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800716c:	4770      	bx	lr
	...

08007170 <_ZN13geometry_msgs5Point7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Point"; };
 8007170:	b480      	push	{r7}
 8007172:	b083      	sub	sp, #12
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
 8007178:	4b02      	ldr	r3, [pc, #8]	@ (8007184 <_ZN13geometry_msgs5Point7getTypeEv+0x14>)
 800717a:	4618      	mov	r0, r3
 800717c:	370c      	adds	r7, #12
 800717e:	46bd      	mov	sp, r7
 8007180:	bc80      	pop	{r7}
 8007182:	4770      	bx	lr
 8007184:	080107ac 	.word	0x080107ac

08007188 <_ZN13geometry_msgs5Point6getMD5Ev>:
    virtual const char * getMD5() override { return "4a842b65f413084dc2b10fb484ea7f17"; };
 8007188:	b480      	push	{r7}
 800718a:	b083      	sub	sp, #12
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
 8007190:	4b02      	ldr	r3, [pc, #8]	@ (800719c <_ZN13geometry_msgs5Point6getMD5Ev+0x14>)
 8007192:	4618      	mov	r0, r3
 8007194:	370c      	adds	r7, #12
 8007196:	46bd      	mov	sp, r7
 8007198:	bc80      	pop	{r7}
 800719a:	4770      	bx	lr
 800719c:	08010660 	.word	0x08010660

080071a0 <_ZN13geometry_msgs4PoseC1Ev>:
      typedef geometry_msgs::Point _position_type;
      _position_type position;
      typedef geometry_msgs::Quaternion _orientation_type;
      _orientation_type orientation;

    Pose():
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b082      	sub	sp, #8
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
      position(),
      orientation()
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	4618      	mov	r0, r3
 80071ac:	f7fa fcd2 	bl	8001b54 <_ZN3ros3MsgC1Ev>
 80071b0:	4a08      	ldr	r2, [pc, #32]	@ (80071d4 <_ZN13geometry_msgs4PoseC1Ev+0x34>)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	601a      	str	r2, [r3, #0]
      position(),
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	3308      	adds	r3, #8
 80071ba:	4618      	mov	r0, r3
 80071bc:	f7ff fade 	bl	800677c <_ZN13geometry_msgs5PointC1Ev>
      orientation()
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	3328      	adds	r3, #40	@ 0x28
 80071c4:	4618      	mov	r0, r3
 80071c6:	f7fb fee1 	bl	8002f8c <_ZN13geometry_msgs10QuaternionC1Ev>
    {
    }
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	4618      	mov	r0, r3
 80071ce:	3708      	adds	r7, #8
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}
 80071d4:	08010ae0 	.word	0x08010ae0

080071d8 <_ZNK13geometry_msgs4Pose9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80071d8:	b580      	push	{r7, lr}
 80071da:	b084      	sub	sp, #16
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
 80071e0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80071e2:	2300      	movs	r3, #0
 80071e4:	60fb      	str	r3, [r7, #12]
      offset += this->position.serialize(outbuffer + offset);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f103 0008 	add.w	r0, r3, #8
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	683a      	ldr	r2, [r7, #0]
 80071f0:	4413      	add	r3, r2
 80071f2:	4619      	mov	r1, r3
 80071f4:	f7ff faea 	bl	80067cc <_ZNK13geometry_msgs5Point9serializeEPh>
 80071f8:	4602      	mov	r2, r0
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	4413      	add	r3, r2
 80071fe:	60fb      	str	r3, [r7, #12]
      offset += this->orientation.serialize(outbuffer + offset);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	683a      	ldr	r2, [r7, #0]
 800720a:	4413      	add	r3, r2
 800720c:	4619      	mov	r1, r3
 800720e:	f7fb feeb 	bl	8002fe8 <_ZNK13geometry_msgs10Quaternion9serializeEPh>
 8007212:	4602      	mov	r2, r0
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	4413      	add	r3, r2
 8007218:	60fb      	str	r3, [r7, #12]
      return offset;
 800721a:	68fb      	ldr	r3, [r7, #12]
    }
 800721c:	4618      	mov	r0, r3
 800721e:	3710      	adds	r7, #16
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}

08007224 <_ZN13geometry_msgs4Pose11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8007224:	b580      	push	{r7, lr}
 8007226:	b084      	sub	sp, #16
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800722e:	2300      	movs	r3, #0
 8007230:	60fb      	str	r3, [r7, #12]
      offset += this->position.deserialize(inbuffer + offset);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f103 0008 	add.w	r0, r3, #8
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	683a      	ldr	r2, [r7, #0]
 800723c:	4413      	add	r3, r2
 800723e:	4619      	mov	r1, r3
 8007240:	f7ff fc36 	bl	8006ab0 <_ZN13geometry_msgs5Point11deserializeEPh>
 8007244:	4602      	mov	r2, r0
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	4413      	add	r3, r2
 800724a:	60fb      	str	r3, [r7, #12]
      offset += this->orientation.deserialize(inbuffer + offset);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	683a      	ldr	r2, [r7, #0]
 8007256:	4413      	add	r3, r2
 8007258:	4619      	mov	r1, r3
 800725a:	f7fc f8ae 	bl	80033ba <_ZN13geometry_msgs10Quaternion11deserializeEPh>
 800725e:	4602      	mov	r2, r0
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	4413      	add	r3, r2
 8007264:	60fb      	str	r3, [r7, #12]
     return offset;
 8007266:	68fb      	ldr	r3, [r7, #12]
    }
 8007268:	4618      	mov	r0, r3
 800726a:	3710      	adds	r7, #16
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}

08007270 <_ZN13geometry_msgs4Pose7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Pose"; };
 8007270:	b480      	push	{r7}
 8007272:	b083      	sub	sp, #12
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
 8007278:	4b02      	ldr	r3, [pc, #8]	@ (8007284 <_ZN13geometry_msgs4Pose7getTypeEv+0x14>)
 800727a:	4618      	mov	r0, r3
 800727c:	370c      	adds	r7, #12
 800727e:	46bd      	mov	sp, r7
 8007280:	bc80      	pop	{r7}
 8007282:	4770      	bx	lr
 8007284:	080107c0 	.word	0x080107c0

08007288 <_ZN13geometry_msgs4Pose6getMD5Ev>:
    virtual const char * getMD5() override { return "e45d45a5a1ce597b249e23fb30fc871f"; };
 8007288:	b480      	push	{r7}
 800728a:	b083      	sub	sp, #12
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
 8007290:	4b02      	ldr	r3, [pc, #8]	@ (800729c <_ZN13geometry_msgs4Pose6getMD5Ev+0x14>)
 8007292:	4618      	mov	r0, r3
 8007294:	370c      	adds	r7, #12
 8007296:	46bd      	mov	sp, r7
 8007298:	bc80      	pop	{r7}
 800729a:	4770      	bx	lr
 800729c:	080107d4 	.word	0x080107d4

080072a0 <_ZN13geometry_msgs18PoseWithCovarianceC1Ev>:
    public:
      typedef geometry_msgs::Pose _pose_type;
      _pose_type pose;
      double covariance[36];

    PoseWithCovariance():
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b082      	sub	sp, #8
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
      pose(),
      covariance()
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	4618      	mov	r0, r3
 80072ac:	f7fa fc52 	bl	8001b54 <_ZN3ros3MsgC1Ev>
 80072b0:	4a0d      	ldr	r2, [pc, #52]	@ (80072e8 <_ZN13geometry_msgs18PoseWithCovarianceC1Ev+0x48>)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	601a      	str	r2, [r3, #0]
      pose(),
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	3308      	adds	r3, #8
 80072ba:	4618      	mov	r0, r3
 80072bc:	f7ff ff70 	bl	80071a0 <_ZN13geometry_msgs4PoseC1Ev>
      covariance()
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f103 0258 	add.w	r2, r3, #88	@ 0x58
 80072c6:	2323      	movs	r3, #35	@ 0x23
 80072c8:	e007      	b.n	80072da <_ZN13geometry_msgs18PoseWithCovarianceC1Ev+0x3a>
 80072ca:	f04f 0000 	mov.w	r0, #0
 80072ce:	f04f 0100 	mov.w	r1, #0
 80072d2:	e9c2 0100 	strd	r0, r1, [r2]
 80072d6:	3b01      	subs	r3, #1
 80072d8:	3208      	adds	r2, #8
 80072da:	2b00      	cmp	r3, #0
 80072dc:	daf5      	bge.n	80072ca <_ZN13geometry_msgs18PoseWithCovarianceC1Ev+0x2a>
    {
    }
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	4618      	mov	r0, r3
 80072e2:	3708      	adds	r7, #8
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}
 80072e8:	08010ac8 	.word	0x08010ac8

080072ec <_ZNK13geometry_msgs18PoseWithCovariance9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b086      	sub	sp, #24
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
 80072f4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80072f6:	2300      	movs	r3, #0
 80072f8:	617b      	str	r3, [r7, #20]
      offset += this->pose.serialize(outbuffer + offset);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f103 0008 	add.w	r0, r3, #8
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	683a      	ldr	r2, [r7, #0]
 8007304:	4413      	add	r3, r2
 8007306:	4619      	mov	r1, r3
 8007308:	f7ff ff66 	bl	80071d8 <_ZNK13geometry_msgs4Pose9serializeEPh>
 800730c:	4602      	mov	r2, r0
 800730e:	697b      	ldr	r3, [r7, #20]
 8007310:	4413      	add	r3, r2
 8007312:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 36; i++){
 8007314:	2300      	movs	r3, #0
 8007316:	613b      	str	r3, [r7, #16]
 8007318:	e07d      	b.n	8007416 <_ZNK13geometry_msgs18PoseWithCovariance9serializeEPh+0x12a>
      union {
        double real;
        uint64_t base;
      } u_covariancei;
      u_covariancei.real = this->covariance[i];
 800731a:	687a      	ldr	r2, [r7, #4]
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	330b      	adds	r3, #11
 8007320:	00db      	lsls	r3, r3, #3
 8007322:	4413      	add	r3, r2
 8007324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007328:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_covariancei.base >> (8 * 0)) & 0xFF;
 800732c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007330:	6979      	ldr	r1, [r7, #20]
 8007332:	6838      	ldr	r0, [r7, #0]
 8007334:	4401      	add	r1, r0
 8007336:	b2d3      	uxtb	r3, r2
 8007338:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_covariancei.base >> (8 * 1)) & 0xFF;
 800733a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800733e:	f04f 0200 	mov.w	r2, #0
 8007342:	f04f 0300 	mov.w	r3, #0
 8007346:	0a02      	lsrs	r2, r0, #8
 8007348:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800734c:	0a0b      	lsrs	r3, r1, #8
 800734e:	6979      	ldr	r1, [r7, #20]
 8007350:	3101      	adds	r1, #1
 8007352:	6838      	ldr	r0, [r7, #0]
 8007354:	4401      	add	r1, r0
 8007356:	b2d3      	uxtb	r3, r2
 8007358:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_covariancei.base >> (8 * 2)) & 0xFF;
 800735a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800735e:	f04f 0200 	mov.w	r2, #0
 8007362:	f04f 0300 	mov.w	r3, #0
 8007366:	0c02      	lsrs	r2, r0, #16
 8007368:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800736c:	0c0b      	lsrs	r3, r1, #16
 800736e:	6979      	ldr	r1, [r7, #20]
 8007370:	3102      	adds	r1, #2
 8007372:	6838      	ldr	r0, [r7, #0]
 8007374:	4401      	add	r1, r0
 8007376:	b2d3      	uxtb	r3, r2
 8007378:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_covariancei.base >> (8 * 3)) & 0xFF;
 800737a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800737e:	f04f 0200 	mov.w	r2, #0
 8007382:	f04f 0300 	mov.w	r3, #0
 8007386:	0e02      	lsrs	r2, r0, #24
 8007388:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800738c:	0e0b      	lsrs	r3, r1, #24
 800738e:	6979      	ldr	r1, [r7, #20]
 8007390:	3103      	adds	r1, #3
 8007392:	6838      	ldr	r0, [r7, #0]
 8007394:	4401      	add	r1, r0
 8007396:	b2d3      	uxtb	r3, r2
 8007398:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_covariancei.base >> (8 * 4)) & 0xFF;
 800739a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800739e:	f04f 0200 	mov.w	r2, #0
 80073a2:	f04f 0300 	mov.w	r3, #0
 80073a6:	000a      	movs	r2, r1
 80073a8:	2300      	movs	r3, #0
 80073aa:	6979      	ldr	r1, [r7, #20]
 80073ac:	3104      	adds	r1, #4
 80073ae:	6838      	ldr	r0, [r7, #0]
 80073b0:	4401      	add	r1, r0
 80073b2:	b2d3      	uxtb	r3, r2
 80073b4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_covariancei.base >> (8 * 5)) & 0xFF;
 80073b6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80073ba:	f04f 0200 	mov.w	r2, #0
 80073be:	f04f 0300 	mov.w	r3, #0
 80073c2:	0a0a      	lsrs	r2, r1, #8
 80073c4:	2300      	movs	r3, #0
 80073c6:	6979      	ldr	r1, [r7, #20]
 80073c8:	3105      	adds	r1, #5
 80073ca:	6838      	ldr	r0, [r7, #0]
 80073cc:	4401      	add	r1, r0
 80073ce:	b2d3      	uxtb	r3, r2
 80073d0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_covariancei.base >> (8 * 6)) & 0xFF;
 80073d2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80073d6:	f04f 0200 	mov.w	r2, #0
 80073da:	f04f 0300 	mov.w	r3, #0
 80073de:	0c0a      	lsrs	r2, r1, #16
 80073e0:	2300      	movs	r3, #0
 80073e2:	6979      	ldr	r1, [r7, #20]
 80073e4:	3106      	adds	r1, #6
 80073e6:	6838      	ldr	r0, [r7, #0]
 80073e8:	4401      	add	r1, r0
 80073ea:	b2d3      	uxtb	r3, r2
 80073ec:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_covariancei.base >> (8 * 7)) & 0xFF;
 80073ee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80073f2:	f04f 0200 	mov.w	r2, #0
 80073f6:	f04f 0300 	mov.w	r3, #0
 80073fa:	0e0a      	lsrs	r2, r1, #24
 80073fc:	2300      	movs	r3, #0
 80073fe:	6979      	ldr	r1, [r7, #20]
 8007400:	3107      	adds	r1, #7
 8007402:	6838      	ldr	r0, [r7, #0]
 8007404:	4401      	add	r1, r0
 8007406:	b2d3      	uxtb	r3, r2
 8007408:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->covariance[i]);
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	3308      	adds	r3, #8
 800740e:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 36; i++){
 8007410:	693b      	ldr	r3, [r7, #16]
 8007412:	3301      	adds	r3, #1
 8007414:	613b      	str	r3, [r7, #16]
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	2b23      	cmp	r3, #35	@ 0x23
 800741a:	f67f af7e 	bls.w	800731a <_ZNK13geometry_msgs18PoseWithCovariance9serializeEPh+0x2e>
      }
      return offset;
 800741e:	697b      	ldr	r3, [r7, #20]
    }
 8007420:	4618      	mov	r0, r3
 8007422:	3718      	adds	r7, #24
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}

08007428 <_ZN13geometry_msgs18PoseWithCovariance11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8007428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800742c:	b0a3      	sub	sp, #140	@ 0x8c
 800742e:	af00      	add	r7, sp, #0
 8007430:	6778      	str	r0, [r7, #116]	@ 0x74
 8007432:	6739      	str	r1, [r7, #112]	@ 0x70
    {
      int offset = 0;
 8007434:	2300      	movs	r3, #0
 8007436:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      offset += this->pose.deserialize(inbuffer + offset);
 800743a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800743c:	f103 0008 	add.w	r0, r3, #8
 8007440:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007444:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007446:	4413      	add	r3, r2
 8007448:	4619      	mov	r1, r3
 800744a:	f7ff feeb 	bl	8007224 <_ZN13geometry_msgs4Pose11deserializeEPh>
 800744e:	4602      	mov	r2, r0
 8007450:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007454:	4413      	add	r3, r2
 8007456:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      for( uint32_t i = 0; i < 36; i++){
 800745a:	2300      	movs	r3, #0
 800745c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007460:	e0f7      	b.n	8007652 <_ZN13geometry_msgs18PoseWithCovariance11deserializeEPh+0x22a>
      union {
        double real;
        uint64_t base;
      } u_covariancei;
      u_covariancei.base = 0;
 8007462:	f04f 0200 	mov.w	r2, #0
 8007466:	f04f 0300 	mov.w	r3, #0
 800746a:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800746e:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8007472:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007476:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007478:	4413      	add	r3, r2
 800747a:	781b      	ldrb	r3, [r3, #0]
 800747c:	b2db      	uxtb	r3, r3
 800747e:	2200      	movs	r2, #0
 8007480:	663b      	str	r3, [r7, #96]	@ 0x60
 8007482:	667a      	str	r2, [r7, #100]	@ 0x64
 8007484:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8007488:	4616      	mov	r6, r2
 800748a:	4306      	orrs	r6, r0
 800748c:	65be      	str	r6, [r7, #88]	@ 0x58
 800748e:	430b      	orrs	r3, r1
 8007490:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007492:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007496:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800749a:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800749e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80074a2:	1c5a      	adds	r2, r3, #1
 80074a4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80074a6:	4413      	add	r3, r2
 80074a8:	781b      	ldrb	r3, [r3, #0]
 80074aa:	b2db      	uxtb	r3, r3
 80074ac:	2200      	movs	r2, #0
 80074ae:	469a      	mov	sl, r3
 80074b0:	4693      	mov	fp, r2
 80074b2:	f04f 0200 	mov.w	r2, #0
 80074b6:	f04f 0300 	mov.w	r3, #0
 80074ba:	ea4f 230b 	mov.w	r3, fp, lsl #8
 80074be:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 80074c2:	ea4f 220a 	mov.w	r2, sl, lsl #8
 80074c6:	ea40 0602 	orr.w	r6, r0, r2
 80074ca:	653e      	str	r6, [r7, #80]	@ 0x50
 80074cc:	430b      	orrs	r3, r1
 80074ce:	657b      	str	r3, [r7, #84]	@ 0x54
 80074d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80074d4:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80074d8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80074dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80074e0:	1c9a      	adds	r2, r3, #2
 80074e2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80074e4:	4413      	add	r3, r2
 80074e6:	781b      	ldrb	r3, [r3, #0]
 80074e8:	b2db      	uxtb	r3, r3
 80074ea:	2200      	movs	r2, #0
 80074ec:	4698      	mov	r8, r3
 80074ee:	4691      	mov	r9, r2
 80074f0:	f04f 0200 	mov.w	r2, #0
 80074f4:	f04f 0300 	mov.w	r3, #0
 80074f8:	ea4f 4309 	mov.w	r3, r9, lsl #16
 80074fc:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8007500:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8007504:	ea40 0602 	orr.w	r6, r0, r2
 8007508:	64be      	str	r6, [r7, #72]	@ 0x48
 800750a:	430b      	orrs	r3, r1
 800750c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800750e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007512:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8007516:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800751a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800751e:	1cda      	adds	r2, r3, #3
 8007520:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007522:	4413      	add	r3, r2
 8007524:	781b      	ldrb	r3, [r3, #0]
 8007526:	b2db      	uxtb	r3, r3
 8007528:	2200      	movs	r2, #0
 800752a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800752c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800752e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007530:	0a1d      	lsrs	r5, r3, #8
 8007532:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007534:	061c      	lsls	r4, r3, #24
 8007536:	ea40 0304 	orr.w	r3, r0, r4
 800753a:	643b      	str	r3, [r7, #64]	@ 0x40
 800753c:	ea41 0305 	orr.w	r3, r1, r5
 8007540:	647b      	str	r3, [r7, #68]	@ 0x44
 8007542:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007546:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800754a:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800754e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007552:	1d1a      	adds	r2, r3, #4
 8007554:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007556:	4413      	add	r3, r2
 8007558:	781b      	ldrb	r3, [r3, #0]
 800755a:	b2db      	uxtb	r3, r3
 800755c:	2200      	movs	r2, #0
 800755e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007560:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8007562:	f04f 0200 	mov.w	r2, #0
 8007566:	f04f 0300 	mov.w	r3, #0
 800756a:	6bbe      	ldr	r6, [r7, #56]	@ 0x38
 800756c:	0033      	movs	r3, r6
 800756e:	2200      	movs	r2, #0
 8007570:	ea40 0602 	orr.w	r6, r0, r2
 8007574:	633e      	str	r6, [r7, #48]	@ 0x30
 8007576:	430b      	orrs	r3, r1
 8007578:	637b      	str	r3, [r7, #52]	@ 0x34
 800757a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800757e:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8007582:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8007586:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800758a:	1d5a      	adds	r2, r3, #5
 800758c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800758e:	4413      	add	r3, r2
 8007590:	781b      	ldrb	r3, [r3, #0]
 8007592:	b2db      	uxtb	r3, r3
 8007594:	2200      	movs	r2, #0
 8007596:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007598:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800759a:	f04f 0200 	mov.w	r2, #0
 800759e:	f04f 0300 	mov.w	r3, #0
 80075a2:	6abe      	ldr	r6, [r7, #40]	@ 0x28
 80075a4:	0233      	lsls	r3, r6, #8
 80075a6:	2200      	movs	r2, #0
 80075a8:	ea40 0602 	orr.w	r6, r0, r2
 80075ac:	623e      	str	r6, [r7, #32]
 80075ae:	430b      	orrs	r3, r1
 80075b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80075b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80075b6:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80075ba:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80075be:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80075c2:	1d9a      	adds	r2, r3, #6
 80075c4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80075c6:	4413      	add	r3, r2
 80075c8:	781b      	ldrb	r3, [r3, #0]
 80075ca:	b2db      	uxtb	r3, r3
 80075cc:	2200      	movs	r2, #0
 80075ce:	61bb      	str	r3, [r7, #24]
 80075d0:	61fa      	str	r2, [r7, #28]
 80075d2:	f04f 0200 	mov.w	r2, #0
 80075d6:	f04f 0300 	mov.w	r3, #0
 80075da:	69be      	ldr	r6, [r7, #24]
 80075dc:	0433      	lsls	r3, r6, #16
 80075de:	2200      	movs	r2, #0
 80075e0:	ea40 0602 	orr.w	r6, r0, r2
 80075e4:	613e      	str	r6, [r7, #16]
 80075e6:	430b      	orrs	r3, r1
 80075e8:	617b      	str	r3, [r7, #20]
 80075ea:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80075ee:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80075f2:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80075f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80075fa:	1dda      	adds	r2, r3, #7
 80075fc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80075fe:	4413      	add	r3, r2
 8007600:	781b      	ldrb	r3, [r3, #0]
 8007602:	b2db      	uxtb	r3, r3
 8007604:	2200      	movs	r2, #0
 8007606:	60bb      	str	r3, [r7, #8]
 8007608:	60fa      	str	r2, [r7, #12]
 800760a:	f04f 0200 	mov.w	r2, #0
 800760e:	f04f 0300 	mov.w	r3, #0
 8007612:	68be      	ldr	r6, [r7, #8]
 8007614:	0633      	lsls	r3, r6, #24
 8007616:	2200      	movs	r2, #0
 8007618:	ea40 0602 	orr.w	r6, r0, r2
 800761c:	603e      	str	r6, [r7, #0]
 800761e:	430b      	orrs	r3, r1
 8007620:	607b      	str	r3, [r7, #4]
 8007622:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007626:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
      this->covariance[i] = u_covariancei.real;
 800762a:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800762e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8007630:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007634:	330b      	adds	r3, #11
 8007636:	00db      	lsls	r3, r3, #3
 8007638:	4413      	add	r3, r2
 800763a:	e9c3 0100 	strd	r0, r1, [r3]
      offset += sizeof(this->covariance[i]);
 800763e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007642:	3308      	adds	r3, #8
 8007644:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      for( uint32_t i = 0; i < 36; i++){
 8007648:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800764c:	3301      	adds	r3, #1
 800764e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007652:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007656:	2b23      	cmp	r3, #35	@ 0x23
 8007658:	f67f af03 	bls.w	8007462 <_ZN13geometry_msgs18PoseWithCovariance11deserializeEPh+0x3a>
      }
     return offset;
 800765c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
    }
 8007660:	4618      	mov	r0, r3
 8007662:	378c      	adds	r7, #140	@ 0x8c
 8007664:	46bd      	mov	sp, r7
 8007666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800766c <_ZN13geometry_msgs18PoseWithCovariance7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/PoseWithCovariance"; };
 800766c:	b480      	push	{r7}
 800766e:	b083      	sub	sp, #12
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
 8007674:	4b02      	ldr	r3, [pc, #8]	@ (8007680 <_ZN13geometry_msgs18PoseWithCovariance7getTypeEv+0x14>)
 8007676:	4618      	mov	r0, r3
 8007678:	370c      	adds	r7, #12
 800767a:	46bd      	mov	sp, r7
 800767c:	bc80      	pop	{r7}
 800767e:	4770      	bx	lr
 8007680:	080107f8 	.word	0x080107f8

08007684 <_ZN13geometry_msgs18PoseWithCovariance6getMD5Ev>:
    virtual const char * getMD5() override { return "c23e848cf1b7533a8d7c259073a97e6f"; };
 8007684:	b480      	push	{r7}
 8007686:	b083      	sub	sp, #12
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
 800768c:	4b02      	ldr	r3, [pc, #8]	@ (8007698 <_ZN13geometry_msgs18PoseWithCovariance6getMD5Ev+0x14>)
 800768e:	4618      	mov	r0, r3
 8007690:	370c      	adds	r7, #12
 8007692:	46bd      	mov	sp, r7
 8007694:	bc80      	pop	{r7}
 8007696:	4770      	bx	lr
 8007698:	0801081c 	.word	0x0801081c

0800769c <_ZN13geometry_msgs19TwistWithCovarianceC1Ev>:
    public:
      typedef geometry_msgs::Twist _twist_type;
      _twist_type twist;
      double covariance[36];

    TwistWithCovariance():
 800769c:	b580      	push	{r7, lr}
 800769e:	b082      	sub	sp, #8
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
      twist(),
      covariance()
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	4618      	mov	r0, r3
 80076a8:	f7fa fa54 	bl	8001b54 <_ZN3ros3MsgC1Ev>
 80076ac:	4a0d      	ldr	r2, [pc, #52]	@ (80076e4 <_ZN13geometry_msgs19TwistWithCovarianceC1Ev+0x48>)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	601a      	str	r2, [r3, #0]
      twist(),
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	3308      	adds	r3, #8
 80076b6:	4618      	mov	r0, r3
 80076b8:	f7fe fe8c 	bl	80063d4 <_ZN13geometry_msgs5TwistC1Ev>
      covariance()
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f103 0250 	add.w	r2, r3, #80	@ 0x50
 80076c2:	2323      	movs	r3, #35	@ 0x23
 80076c4:	e007      	b.n	80076d6 <_ZN13geometry_msgs19TwistWithCovarianceC1Ev+0x3a>
 80076c6:	f04f 0000 	mov.w	r0, #0
 80076ca:	f04f 0100 	mov.w	r1, #0
 80076ce:	e9c2 0100 	strd	r0, r1, [r2]
 80076d2:	3b01      	subs	r3, #1
 80076d4:	3208      	adds	r2, #8
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	daf5      	bge.n	80076c6 <_ZN13geometry_msgs19TwistWithCovarianceC1Ev+0x2a>
    {
    }
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	4618      	mov	r0, r3
 80076de:	3708      	adds	r7, #8
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bd80      	pop	{r7, pc}
 80076e4:	08010ab0 	.word	0x08010ab0

080076e8 <_ZNK13geometry_msgs19TwistWithCovariance9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b086      	sub	sp, #24
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
 80076f0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80076f2:	2300      	movs	r3, #0
 80076f4:	617b      	str	r3, [r7, #20]
      offset += this->twist.serialize(outbuffer + offset);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	f103 0008 	add.w	r0, r3, #8
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	683a      	ldr	r2, [r7, #0]
 8007700:	4413      	add	r3, r2
 8007702:	4619      	mov	r1, r3
 8007704:	f7fe fe82 	bl	800640c <_ZNK13geometry_msgs5Twist9serializeEPh>
 8007708:	4602      	mov	r2, r0
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	4413      	add	r3, r2
 800770e:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 36; i++){
 8007710:	2300      	movs	r3, #0
 8007712:	613b      	str	r3, [r7, #16]
 8007714:	e07d      	b.n	8007812 <_ZNK13geometry_msgs19TwistWithCovariance9serializeEPh+0x12a>
      union {
        double real;
        uint64_t base;
      } u_covariancei;
      u_covariancei.real = this->covariance[i];
 8007716:	687a      	ldr	r2, [r7, #4]
 8007718:	693b      	ldr	r3, [r7, #16]
 800771a:	330a      	adds	r3, #10
 800771c:	00db      	lsls	r3, r3, #3
 800771e:	4413      	add	r3, r2
 8007720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007724:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_covariancei.base >> (8 * 0)) & 0xFF;
 8007728:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800772c:	6979      	ldr	r1, [r7, #20]
 800772e:	6838      	ldr	r0, [r7, #0]
 8007730:	4401      	add	r1, r0
 8007732:	b2d3      	uxtb	r3, r2
 8007734:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_covariancei.base >> (8 * 1)) & 0xFF;
 8007736:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800773a:	f04f 0200 	mov.w	r2, #0
 800773e:	f04f 0300 	mov.w	r3, #0
 8007742:	0a02      	lsrs	r2, r0, #8
 8007744:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8007748:	0a0b      	lsrs	r3, r1, #8
 800774a:	6979      	ldr	r1, [r7, #20]
 800774c:	3101      	adds	r1, #1
 800774e:	6838      	ldr	r0, [r7, #0]
 8007750:	4401      	add	r1, r0
 8007752:	b2d3      	uxtb	r3, r2
 8007754:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_covariancei.base >> (8 * 2)) & 0xFF;
 8007756:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800775a:	f04f 0200 	mov.w	r2, #0
 800775e:	f04f 0300 	mov.w	r3, #0
 8007762:	0c02      	lsrs	r2, r0, #16
 8007764:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8007768:	0c0b      	lsrs	r3, r1, #16
 800776a:	6979      	ldr	r1, [r7, #20]
 800776c:	3102      	adds	r1, #2
 800776e:	6838      	ldr	r0, [r7, #0]
 8007770:	4401      	add	r1, r0
 8007772:	b2d3      	uxtb	r3, r2
 8007774:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_covariancei.base >> (8 * 3)) & 0xFF;
 8007776:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800777a:	f04f 0200 	mov.w	r2, #0
 800777e:	f04f 0300 	mov.w	r3, #0
 8007782:	0e02      	lsrs	r2, r0, #24
 8007784:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8007788:	0e0b      	lsrs	r3, r1, #24
 800778a:	6979      	ldr	r1, [r7, #20]
 800778c:	3103      	adds	r1, #3
 800778e:	6838      	ldr	r0, [r7, #0]
 8007790:	4401      	add	r1, r0
 8007792:	b2d3      	uxtb	r3, r2
 8007794:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_covariancei.base >> (8 * 4)) & 0xFF;
 8007796:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800779a:	f04f 0200 	mov.w	r2, #0
 800779e:	f04f 0300 	mov.w	r3, #0
 80077a2:	000a      	movs	r2, r1
 80077a4:	2300      	movs	r3, #0
 80077a6:	6979      	ldr	r1, [r7, #20]
 80077a8:	3104      	adds	r1, #4
 80077aa:	6838      	ldr	r0, [r7, #0]
 80077ac:	4401      	add	r1, r0
 80077ae:	b2d3      	uxtb	r3, r2
 80077b0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_covariancei.base >> (8 * 5)) & 0xFF;
 80077b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80077b6:	f04f 0200 	mov.w	r2, #0
 80077ba:	f04f 0300 	mov.w	r3, #0
 80077be:	0a0a      	lsrs	r2, r1, #8
 80077c0:	2300      	movs	r3, #0
 80077c2:	6979      	ldr	r1, [r7, #20]
 80077c4:	3105      	adds	r1, #5
 80077c6:	6838      	ldr	r0, [r7, #0]
 80077c8:	4401      	add	r1, r0
 80077ca:	b2d3      	uxtb	r3, r2
 80077cc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_covariancei.base >> (8 * 6)) & 0xFF;
 80077ce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80077d2:	f04f 0200 	mov.w	r2, #0
 80077d6:	f04f 0300 	mov.w	r3, #0
 80077da:	0c0a      	lsrs	r2, r1, #16
 80077dc:	2300      	movs	r3, #0
 80077de:	6979      	ldr	r1, [r7, #20]
 80077e0:	3106      	adds	r1, #6
 80077e2:	6838      	ldr	r0, [r7, #0]
 80077e4:	4401      	add	r1, r0
 80077e6:	b2d3      	uxtb	r3, r2
 80077e8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_covariancei.base >> (8 * 7)) & 0xFF;
 80077ea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80077ee:	f04f 0200 	mov.w	r2, #0
 80077f2:	f04f 0300 	mov.w	r3, #0
 80077f6:	0e0a      	lsrs	r2, r1, #24
 80077f8:	2300      	movs	r3, #0
 80077fa:	6979      	ldr	r1, [r7, #20]
 80077fc:	3107      	adds	r1, #7
 80077fe:	6838      	ldr	r0, [r7, #0]
 8007800:	4401      	add	r1, r0
 8007802:	b2d3      	uxtb	r3, r2
 8007804:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->covariance[i]);
 8007806:	697b      	ldr	r3, [r7, #20]
 8007808:	3308      	adds	r3, #8
 800780a:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 36; i++){
 800780c:	693b      	ldr	r3, [r7, #16]
 800780e:	3301      	adds	r3, #1
 8007810:	613b      	str	r3, [r7, #16]
 8007812:	693b      	ldr	r3, [r7, #16]
 8007814:	2b23      	cmp	r3, #35	@ 0x23
 8007816:	f67f af7e 	bls.w	8007716 <_ZNK13geometry_msgs19TwistWithCovariance9serializeEPh+0x2e>
      }
      return offset;
 800781a:	697b      	ldr	r3, [r7, #20]
    }
 800781c:	4618      	mov	r0, r3
 800781e:	3718      	adds	r7, #24
 8007820:	46bd      	mov	sp, r7
 8007822:	bd80      	pop	{r7, pc}

08007824 <_ZN13geometry_msgs19TwistWithCovariance11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8007824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007828:	b0a3      	sub	sp, #140	@ 0x8c
 800782a:	af00      	add	r7, sp, #0
 800782c:	6778      	str	r0, [r7, #116]	@ 0x74
 800782e:	6739      	str	r1, [r7, #112]	@ 0x70
    {
      int offset = 0;
 8007830:	2300      	movs	r3, #0
 8007832:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      offset += this->twist.deserialize(inbuffer + offset);
 8007836:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007838:	f103 0008 	add.w	r0, r3, #8
 800783c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007840:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007842:	4413      	add	r3, r2
 8007844:	4619      	mov	r1, r3
 8007846:	f7fe fe07 	bl	8006458 <_ZN13geometry_msgs5Twist11deserializeEPh>
 800784a:	4602      	mov	r2, r0
 800784c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007850:	4413      	add	r3, r2
 8007852:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      for( uint32_t i = 0; i < 36; i++){
 8007856:	2300      	movs	r3, #0
 8007858:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800785c:	e0f7      	b.n	8007a4e <_ZN13geometry_msgs19TwistWithCovariance11deserializeEPh+0x22a>
      union {
        double real;
        uint64_t base;
      } u_covariancei;
      u_covariancei.base = 0;
 800785e:	f04f 0200 	mov.w	r2, #0
 8007862:	f04f 0300 	mov.w	r3, #0
 8007866:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800786a:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800786e:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007872:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007874:	4413      	add	r3, r2
 8007876:	781b      	ldrb	r3, [r3, #0]
 8007878:	b2db      	uxtb	r3, r3
 800787a:	2200      	movs	r2, #0
 800787c:	663b      	str	r3, [r7, #96]	@ 0x60
 800787e:	667a      	str	r2, [r7, #100]	@ 0x64
 8007880:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8007884:	4616      	mov	r6, r2
 8007886:	4306      	orrs	r6, r0
 8007888:	65be      	str	r6, [r7, #88]	@ 0x58
 800788a:	430b      	orrs	r3, r1
 800788c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800788e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007892:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8007896:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800789a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800789e:	1c5a      	adds	r2, r3, #1
 80078a0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80078a2:	4413      	add	r3, r2
 80078a4:	781b      	ldrb	r3, [r3, #0]
 80078a6:	b2db      	uxtb	r3, r3
 80078a8:	2200      	movs	r2, #0
 80078aa:	469a      	mov	sl, r3
 80078ac:	4693      	mov	fp, r2
 80078ae:	f04f 0200 	mov.w	r2, #0
 80078b2:	f04f 0300 	mov.w	r3, #0
 80078b6:	ea4f 230b 	mov.w	r3, fp, lsl #8
 80078ba:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 80078be:	ea4f 220a 	mov.w	r2, sl, lsl #8
 80078c2:	ea40 0602 	orr.w	r6, r0, r2
 80078c6:	653e      	str	r6, [r7, #80]	@ 0x50
 80078c8:	430b      	orrs	r3, r1
 80078ca:	657b      	str	r3, [r7, #84]	@ 0x54
 80078cc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80078d0:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80078d4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80078d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80078dc:	1c9a      	adds	r2, r3, #2
 80078de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80078e0:	4413      	add	r3, r2
 80078e2:	781b      	ldrb	r3, [r3, #0]
 80078e4:	b2db      	uxtb	r3, r3
 80078e6:	2200      	movs	r2, #0
 80078e8:	4698      	mov	r8, r3
 80078ea:	4691      	mov	r9, r2
 80078ec:	f04f 0200 	mov.w	r2, #0
 80078f0:	f04f 0300 	mov.w	r3, #0
 80078f4:	ea4f 4309 	mov.w	r3, r9, lsl #16
 80078f8:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 80078fc:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8007900:	ea40 0602 	orr.w	r6, r0, r2
 8007904:	64be      	str	r6, [r7, #72]	@ 0x48
 8007906:	430b      	orrs	r3, r1
 8007908:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800790a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800790e:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8007912:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8007916:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800791a:	1cda      	adds	r2, r3, #3
 800791c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800791e:	4413      	add	r3, r2
 8007920:	781b      	ldrb	r3, [r3, #0]
 8007922:	b2db      	uxtb	r3, r3
 8007924:	2200      	movs	r2, #0
 8007926:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007928:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800792a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800792c:	0a1d      	lsrs	r5, r3, #8
 800792e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007930:	061c      	lsls	r4, r3, #24
 8007932:	ea40 0304 	orr.w	r3, r0, r4
 8007936:	643b      	str	r3, [r7, #64]	@ 0x40
 8007938:	ea41 0305 	orr.w	r3, r1, r5
 800793c:	647b      	str	r3, [r7, #68]	@ 0x44
 800793e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007942:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8007946:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800794a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800794e:	1d1a      	adds	r2, r3, #4
 8007950:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007952:	4413      	add	r3, r2
 8007954:	781b      	ldrb	r3, [r3, #0]
 8007956:	b2db      	uxtb	r3, r3
 8007958:	2200      	movs	r2, #0
 800795a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800795c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800795e:	f04f 0200 	mov.w	r2, #0
 8007962:	f04f 0300 	mov.w	r3, #0
 8007966:	6bbe      	ldr	r6, [r7, #56]	@ 0x38
 8007968:	0033      	movs	r3, r6
 800796a:	2200      	movs	r2, #0
 800796c:	ea40 0602 	orr.w	r6, r0, r2
 8007970:	633e      	str	r6, [r7, #48]	@ 0x30
 8007972:	430b      	orrs	r3, r1
 8007974:	637b      	str	r3, [r7, #52]	@ 0x34
 8007976:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800797a:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800797e:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8007982:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007986:	1d5a      	adds	r2, r3, #5
 8007988:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800798a:	4413      	add	r3, r2
 800798c:	781b      	ldrb	r3, [r3, #0]
 800798e:	b2db      	uxtb	r3, r3
 8007990:	2200      	movs	r2, #0
 8007992:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007994:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007996:	f04f 0200 	mov.w	r2, #0
 800799a:	f04f 0300 	mov.w	r3, #0
 800799e:	6abe      	ldr	r6, [r7, #40]	@ 0x28
 80079a0:	0233      	lsls	r3, r6, #8
 80079a2:	2200      	movs	r2, #0
 80079a4:	ea40 0602 	orr.w	r6, r0, r2
 80079a8:	623e      	str	r6, [r7, #32]
 80079aa:	430b      	orrs	r3, r1
 80079ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80079ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80079b2:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80079b6:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80079ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80079be:	1d9a      	adds	r2, r3, #6
 80079c0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80079c2:	4413      	add	r3, r2
 80079c4:	781b      	ldrb	r3, [r3, #0]
 80079c6:	b2db      	uxtb	r3, r3
 80079c8:	2200      	movs	r2, #0
 80079ca:	61bb      	str	r3, [r7, #24]
 80079cc:	61fa      	str	r2, [r7, #28]
 80079ce:	f04f 0200 	mov.w	r2, #0
 80079d2:	f04f 0300 	mov.w	r3, #0
 80079d6:	69be      	ldr	r6, [r7, #24]
 80079d8:	0433      	lsls	r3, r6, #16
 80079da:	2200      	movs	r2, #0
 80079dc:	ea40 0602 	orr.w	r6, r0, r2
 80079e0:	613e      	str	r6, [r7, #16]
 80079e2:	430b      	orrs	r3, r1
 80079e4:	617b      	str	r3, [r7, #20]
 80079e6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80079ea:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80079ee:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80079f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80079f6:	1dda      	adds	r2, r3, #7
 80079f8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80079fa:	4413      	add	r3, r2
 80079fc:	781b      	ldrb	r3, [r3, #0]
 80079fe:	b2db      	uxtb	r3, r3
 8007a00:	2200      	movs	r2, #0
 8007a02:	60bb      	str	r3, [r7, #8]
 8007a04:	60fa      	str	r2, [r7, #12]
 8007a06:	f04f 0200 	mov.w	r2, #0
 8007a0a:	f04f 0300 	mov.w	r3, #0
 8007a0e:	68be      	ldr	r6, [r7, #8]
 8007a10:	0633      	lsls	r3, r6, #24
 8007a12:	2200      	movs	r2, #0
 8007a14:	ea40 0602 	orr.w	r6, r0, r2
 8007a18:	603e      	str	r6, [r7, #0]
 8007a1a:	430b      	orrs	r3, r1
 8007a1c:	607b      	str	r3, [r7, #4]
 8007a1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a22:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
      this->covariance[i] = u_covariancei.real;
 8007a26:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8007a2a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8007a2c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007a30:	330a      	adds	r3, #10
 8007a32:	00db      	lsls	r3, r3, #3
 8007a34:	4413      	add	r3, r2
 8007a36:	e9c3 0100 	strd	r0, r1, [r3]
      offset += sizeof(this->covariance[i]);
 8007a3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007a3e:	3308      	adds	r3, #8
 8007a40:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      for( uint32_t i = 0; i < 36; i++){
 8007a44:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007a48:	3301      	adds	r3, #1
 8007a4a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007a4e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007a52:	2b23      	cmp	r3, #35	@ 0x23
 8007a54:	f67f af03 	bls.w	800785e <_ZN13geometry_msgs19TwistWithCovariance11deserializeEPh+0x3a>
      }
     return offset;
 8007a58:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
    }
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	378c      	adds	r7, #140	@ 0x8c
 8007a60:	46bd      	mov	sp, r7
 8007a62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08007a68 <_ZN13geometry_msgs19TwistWithCovariance7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/TwistWithCovariance"; };
 8007a68:	b480      	push	{r7}
 8007a6a:	b083      	sub	sp, #12
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
 8007a70:	4b02      	ldr	r3, [pc, #8]	@ (8007a7c <_ZN13geometry_msgs19TwistWithCovariance7getTypeEv+0x14>)
 8007a72:	4618      	mov	r0, r3
 8007a74:	370c      	adds	r7, #12
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bc80      	pop	{r7}
 8007a7a:	4770      	bx	lr
 8007a7c:	08010840 	.word	0x08010840

08007a80 <_ZN13geometry_msgs19TwistWithCovariance6getMD5Ev>:
    virtual const char * getMD5() override { return "1fe8a28e6890a4cc3ae4c3ca5c7d82e6"; };
 8007a80:	b480      	push	{r7}
 8007a82:	b083      	sub	sp, #12
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
 8007a88:	4b02      	ldr	r3, [pc, #8]	@ (8007a94 <_ZN13geometry_msgs19TwistWithCovariance6getMD5Ev+0x14>)
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	370c      	adds	r7, #12
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bc80      	pop	{r7}
 8007a92:	4770      	bx	lr
 8007a94:	08010864 	.word	0x08010864

08007a98 <_ZN8nav_msgs8OdometryC1Ev>:
      typedef geometry_msgs::PoseWithCovariance _pose_type;
      _pose_type pose;
      typedef geometry_msgs::TwistWithCovariance _twist_type;
      _twist_type twist;

    Odometry():
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b082      	sub	sp, #8
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
      header(),
      child_frame_id(""),
      pose(),
      twist()
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	f7fa f856 	bl	8001b54 <_ZN3ros3MsgC1Ev>
 8007aa8:	4a0d      	ldr	r2, [pc, #52]	@ (8007ae0 <_ZN8nav_msgs8OdometryC1Ev+0x48>)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	601a      	str	r2, [r3, #0]
      header(),
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	3304      	adds	r3, #4
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	f7fb f8da 	bl	8002c6c <_ZN8std_msgs6HeaderC1Ev>
      child_frame_id(""),
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	4a0a      	ldr	r2, [pc, #40]	@ (8007ae4 <_ZN8nav_msgs8OdometryC1Ev+0x4c>)
 8007abc:	619a      	str	r2, [r3, #24]
      pose(),
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	3320      	adds	r3, #32
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	f7ff fbec 	bl	80072a0 <_ZN13geometry_msgs18PoseWithCovarianceC1Ev>
      twist()
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 8007ace:	4618      	mov	r0, r3
 8007ad0:	f7ff fde4 	bl	800769c <_ZN13geometry_msgs19TwistWithCovarianceC1Ev>
    {
    }
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	3708      	adds	r7, #8
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bd80      	pop	{r7, pc}
 8007ade:	bf00      	nop
 8007ae0:	08010a98 	.word	0x08010a98
 8007ae4:	080104fc 	.word	0x080104fc

08007ae8 <_ZNK8nav_msgs8Odometry9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b084      	sub	sp, #16
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
 8007af0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8007af2:	2300      	movs	r3, #0
 8007af4:	60fb      	str	r3, [r7, #12]
      offset += this->header.serialize(outbuffer + offset);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	1d18      	adds	r0, r3, #4
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	683a      	ldr	r2, [r7, #0]
 8007afe:	4413      	add	r3, r2
 8007b00:	4619      	mov	r1, r3
 8007b02:	f7fb f8d3 	bl	8002cac <_ZNK8std_msgs6Header9serializeEPh>
 8007b06:	4602      	mov	r2, r0
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	4413      	add	r3, r2
 8007b0c:	60fb      	str	r3, [r7, #12]
      uint32_t length_child_frame_id = strlen(this->child_frame_id);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	699b      	ldr	r3, [r3, #24]
 8007b12:	4618      	mov	r0, r3
 8007b14:	f7f8 fb88 	bl	8000228 <strlen>
 8007b18:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_child_frame_id);
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	683a      	ldr	r2, [r7, #0]
 8007b1e:	4413      	add	r3, r2
 8007b20:	68b9      	ldr	r1, [r7, #8]
 8007b22:	4618      	mov	r0, r3
 8007b24:	f001 fa02 	bl	8008f2c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	3304      	adds	r3, #4
 8007b2c:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->child_frame_id, length_child_frame_id);
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	683a      	ldr	r2, [r7, #0]
 8007b32:	18d0      	adds	r0, r2, r3
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	699b      	ldr	r3, [r3, #24]
 8007b38:	68ba      	ldr	r2, [r7, #8]
 8007b3a:	4619      	mov	r1, r3
 8007b3c:	f008 fc5a 	bl	80103f4 <memcpy>
      offset += length_child_frame_id;
 8007b40:	68fa      	ldr	r2, [r7, #12]
 8007b42:	68bb      	ldr	r3, [r7, #8]
 8007b44:	4413      	add	r3, r2
 8007b46:	60fb      	str	r3, [r7, #12]
      offset += this->pose.serialize(outbuffer + offset);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f103 0020 	add.w	r0, r3, #32
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	683a      	ldr	r2, [r7, #0]
 8007b52:	4413      	add	r3, r2
 8007b54:	4619      	mov	r1, r3
 8007b56:	f7ff fbc9 	bl	80072ec <_ZNK13geometry_msgs18PoseWithCovariance9serializeEPh>
 8007b5a:	4602      	mov	r2, r0
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	4413      	add	r3, r2
 8007b60:	60fb      	str	r3, [r7, #12]
      offset += this->twist.serialize(outbuffer + offset);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	f503 70cc 	add.w	r0, r3, #408	@ 0x198
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	683a      	ldr	r2, [r7, #0]
 8007b6c:	4413      	add	r3, r2
 8007b6e:	4619      	mov	r1, r3
 8007b70:	f7ff fdba 	bl	80076e8 <_ZNK13geometry_msgs19TwistWithCovariance9serializeEPh>
 8007b74:	4602      	mov	r2, r0
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	4413      	add	r3, r2
 8007b7a:	60fb      	str	r3, [r7, #12]
      return offset;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
    }
 8007b7e:	4618      	mov	r0, r3
 8007b80:	3710      	adds	r7, #16
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}

08007b86 <_ZN8nav_msgs8Odometry11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8007b86:	b580      	push	{r7, lr}
 8007b88:	b086      	sub	sp, #24
 8007b8a:	af00      	add	r7, sp, #0
 8007b8c:	6078      	str	r0, [r7, #4]
 8007b8e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8007b90:	2300      	movs	r3, #0
 8007b92:	613b      	str	r3, [r7, #16]
      offset += this->header.deserialize(inbuffer + offset);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	1d18      	adds	r0, r3, #4
 8007b98:	693b      	ldr	r3, [r7, #16]
 8007b9a:	683a      	ldr	r2, [r7, #0]
 8007b9c:	4413      	add	r3, r2
 8007b9e:	4619      	mov	r1, r3
 8007ba0:	f7fb f91c 	bl	8002ddc <_ZN8std_msgs6Header11deserializeEPh>
 8007ba4:	4602      	mov	r2, r0
 8007ba6:	693b      	ldr	r3, [r7, #16]
 8007ba8:	4413      	add	r3, r2
 8007baa:	613b      	str	r3, [r7, #16]
      uint32_t length_child_frame_id;
      arrToVar(length_child_frame_id, (inbuffer + offset));
 8007bac:	693b      	ldr	r3, [r7, #16]
 8007bae:	683a      	ldr	r2, [r7, #0]
 8007bb0:	441a      	add	r2, r3
 8007bb2:	f107 030c 	add.w	r3, r7, #12
 8007bb6:	4611      	mov	r1, r2
 8007bb8:	4618      	mov	r0, r3
 8007bba:	f001 f9d5 	bl	8008f68 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8007bbe:	693b      	ldr	r3, [r7, #16]
 8007bc0:	3304      	adds	r3, #4
 8007bc2:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_child_frame_id; ++k){
 8007bc4:	693b      	ldr	r3, [r7, #16]
 8007bc6:	617b      	str	r3, [r7, #20]
 8007bc8:	e00b      	b.n	8007be2 <_ZN8nav_msgs8Odometry11deserializeEPh+0x5c>
          inbuffer[k-1]=inbuffer[k];
 8007bca:	683a      	ldr	r2, [r7, #0]
 8007bcc:	697b      	ldr	r3, [r7, #20]
 8007bce:	441a      	add	r2, r3
 8007bd0:	697b      	ldr	r3, [r7, #20]
 8007bd2:	3b01      	subs	r3, #1
 8007bd4:	6839      	ldr	r1, [r7, #0]
 8007bd6:	440b      	add	r3, r1
 8007bd8:	7812      	ldrb	r2, [r2, #0]
 8007bda:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_child_frame_id; ++k){
 8007bdc:	697b      	ldr	r3, [r7, #20]
 8007bde:	3301      	adds	r3, #1
 8007be0:	617b      	str	r3, [r7, #20]
 8007be2:	693a      	ldr	r2, [r7, #16]
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	4413      	add	r3, r2
 8007be8:	697a      	ldr	r2, [r7, #20]
 8007bea:	429a      	cmp	r2, r3
 8007bec:	d3ed      	bcc.n	8007bca <_ZN8nav_msgs8Odometry11deserializeEPh+0x44>
      }
      inbuffer[offset+length_child_frame_id-1]=0;
 8007bee:	693a      	ldr	r2, [r7, #16]
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	4413      	add	r3, r2
 8007bf4:	3b01      	subs	r3, #1
 8007bf6:	683a      	ldr	r2, [r7, #0]
 8007bf8:	4413      	add	r3, r2
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	701a      	strb	r2, [r3, #0]
      this->child_frame_id = (char *)(inbuffer + offset-1);
 8007bfe:	693b      	ldr	r3, [r7, #16]
 8007c00:	3b01      	subs	r3, #1
 8007c02:	683a      	ldr	r2, [r7, #0]
 8007c04:	441a      	add	r2, r3
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	619a      	str	r2, [r3, #24]
      offset += length_child_frame_id;
 8007c0a:	693a      	ldr	r2, [r7, #16]
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	4413      	add	r3, r2
 8007c10:	613b      	str	r3, [r7, #16]
      offset += this->pose.deserialize(inbuffer + offset);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f103 0020 	add.w	r0, r3, #32
 8007c18:	693b      	ldr	r3, [r7, #16]
 8007c1a:	683a      	ldr	r2, [r7, #0]
 8007c1c:	4413      	add	r3, r2
 8007c1e:	4619      	mov	r1, r3
 8007c20:	f7ff fc02 	bl	8007428 <_ZN13geometry_msgs18PoseWithCovariance11deserializeEPh>
 8007c24:	4602      	mov	r2, r0
 8007c26:	693b      	ldr	r3, [r7, #16]
 8007c28:	4413      	add	r3, r2
 8007c2a:	613b      	str	r3, [r7, #16]
      offset += this->twist.deserialize(inbuffer + offset);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f503 70cc 	add.w	r0, r3, #408	@ 0x198
 8007c32:	693b      	ldr	r3, [r7, #16]
 8007c34:	683a      	ldr	r2, [r7, #0]
 8007c36:	4413      	add	r3, r2
 8007c38:	4619      	mov	r1, r3
 8007c3a:	f7ff fdf3 	bl	8007824 <_ZN13geometry_msgs19TwistWithCovariance11deserializeEPh>
 8007c3e:	4602      	mov	r2, r0
 8007c40:	693b      	ldr	r3, [r7, #16]
 8007c42:	4413      	add	r3, r2
 8007c44:	613b      	str	r3, [r7, #16]
     return offset;
 8007c46:	693b      	ldr	r3, [r7, #16]
    }
 8007c48:	4618      	mov	r0, r3
 8007c4a:	3718      	adds	r7, #24
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}

08007c50 <_ZN8nav_msgs8Odometry7getTypeEv>:

    virtual const char * getType() override { return "nav_msgs/Odometry"; };
 8007c50:	b480      	push	{r7}
 8007c52:	b083      	sub	sp, #12
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
 8007c58:	4b02      	ldr	r3, [pc, #8]	@ (8007c64 <_ZN8nav_msgs8Odometry7getTypeEv+0x14>)
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	370c      	adds	r7, #12
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bc80      	pop	{r7}
 8007c62:	4770      	bx	lr
 8007c64:	08010888 	.word	0x08010888

08007c68 <_ZN8nav_msgs8Odometry6getMD5Ev>:
    virtual const char * getMD5() override { return "cd5e73d190d741a2f92e81eda573aca7"; };
 8007c68:	b480      	push	{r7}
 8007c6a:	b083      	sub	sp, #12
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
 8007c70:	4b02      	ldr	r3, [pc, #8]	@ (8007c7c <_ZN8nav_msgs8Odometry6getMD5Ev+0x14>)
 8007c72:	4618      	mov	r0, r3
 8007c74:	370c      	adds	r7, #12
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bc80      	pop	{r7}
 8007c7a:	4770      	bx	lr
 8007c7c:	0801089c 	.word	0x0801089c

08007c80 <_ZN2tfL23createQuaternionFromYawEd>:

namespace tf
{

static inline geometry_msgs::Quaternion createQuaternionFromYaw(double yaw)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b084      	sub	sp, #16
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	60f8      	str	r0, [r7, #12]
 8007c88:	e9c7 2300 	strd	r2, r3, [r7]
  geometry_msgs::Quaternion q;
 8007c8c:	68f8      	ldr	r0, [r7, #12]
 8007c8e:	f7fb f97d 	bl	8002f8c <_ZN13geometry_msgs10QuaternionC1Ev>
  q.x = 0;
 8007c92:	68f9      	ldr	r1, [r7, #12]
 8007c94:	f04f 0200 	mov.w	r2, #0
 8007c98:	f04f 0300 	mov.w	r3, #0
 8007c9c:	e9c1 2302 	strd	r2, r3, [r1, #8]
  q.y = 0;
 8007ca0:	68f9      	ldr	r1, [r7, #12]
 8007ca2:	f04f 0200 	mov.w	r2, #0
 8007ca6:	f04f 0300 	mov.w	r3, #0
 8007caa:	e9c1 2304 	strd	r2, r3, [r1, #16]
  q.z = sin(yaw * 0.5);
 8007cae:	f04f 0200 	mov.w	r2, #0
 8007cb2:	4b13      	ldr	r3, [pc, #76]	@ (8007d00 <_ZN2tfL23createQuaternionFromYawEd+0x80>)
 8007cb4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007cb8:	f7f8 fc7a 	bl	80005b0 <__aeabi_dmul>
 8007cbc:	4602      	mov	r2, r0
 8007cbe:	460b      	mov	r3, r1
 8007cc0:	4610      	mov	r0, r2
 8007cc2:	4619      	mov	r1, r3
 8007cc4:	f006 fc28 	bl	800e518 <sin>
 8007cc8:	4602      	mov	r2, r0
 8007cca:	460b      	mov	r3, r1
 8007ccc:	68f9      	ldr	r1, [r7, #12]
 8007cce:	e9c1 2306 	strd	r2, r3, [r1, #24]
  q.w = cos(yaw * 0.5);
 8007cd2:	f04f 0200 	mov.w	r2, #0
 8007cd6:	4b0a      	ldr	r3, [pc, #40]	@ (8007d00 <_ZN2tfL23createQuaternionFromYawEd+0x80>)
 8007cd8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007cdc:	f7f8 fc68 	bl	80005b0 <__aeabi_dmul>
 8007ce0:	4602      	mov	r2, r0
 8007ce2:	460b      	mov	r3, r1
 8007ce4:	4610      	mov	r0, r2
 8007ce6:	4619      	mov	r1, r3
 8007ce8:	f006 fbd0 	bl	800e48c <cos>
 8007cec:	4602      	mov	r2, r0
 8007cee:	460b      	mov	r3, r1
 8007cf0:	68f9      	ldr	r1, [r7, #12]
 8007cf2:	e9c1 2308 	strd	r2, r3, [r1, #32]
  return q;
 8007cf6:	bf00      	nop
}
 8007cf8:	68f8      	ldr	r0, [r7, #12]
 8007cfa:	3710      	adds	r7, #16
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}
 8007d00:	3fe00000 	.word	0x3fe00000

08007d04 <_ZN2tf9tfMessageC1Ev>:
      uint32_t transforms_length;
      typedef geometry_msgs::TransformStamped _transforms_type;
      _transforms_type st_transforms;
      _transforms_type * transforms;

    tfMessage():
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b082      	sub	sp, #8
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
      transforms_length(0), st_transforms(), transforms(nullptr)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f7f9 ff20 	bl	8001b54 <_ZN3ros3MsgC1Ev>
 8007d14:	4a09      	ldr	r2, [pc, #36]	@ (8007d3c <_ZN2tf9tfMessageC1Ev+0x38>)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	601a      	str	r2, [r3, #0]
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	605a      	str	r2, [r3, #4]
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	3308      	adds	r3, #8
 8007d24:	4618      	mov	r0, r3
 8007d26:	f7fe fc55 	bl	80065d4 <_ZN13geometry_msgs16TransformStampedC1Ev>
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	679a      	str	r2, [r3, #120]	@ 0x78
    {
    }
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	4618      	mov	r0, r3
 8007d34:	3708      	adds	r7, #8
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bd80      	pop	{r7, pc}
 8007d3a:	bf00      	nop
 8007d3c:	08010a80 	.word	0x08010a80

08007d40 <_ZNK2tf9tfMessage9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b084      	sub	sp, #16
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
 8007d48:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->transforms_length >> (8 * 0)) & 0xFF;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6859      	ldr	r1, [r3, #4]
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	683a      	ldr	r2, [r7, #0]
 8007d56:	4413      	add	r3, r2
 8007d58:	b2ca      	uxtb	r2, r1
 8007d5a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->transforms_length >> (8 * 1)) & 0xFF;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	685b      	ldr	r3, [r3, #4]
 8007d60:	0a19      	lsrs	r1, r3, #8
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	3301      	adds	r3, #1
 8007d66:	683a      	ldr	r2, [r7, #0]
 8007d68:	4413      	add	r3, r2
 8007d6a:	b2ca      	uxtb	r2, r1
 8007d6c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->transforms_length >> (8 * 2)) & 0xFF;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	685b      	ldr	r3, [r3, #4]
 8007d72:	0c19      	lsrs	r1, r3, #16
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	3302      	adds	r3, #2
 8007d78:	683a      	ldr	r2, [r7, #0]
 8007d7a:	4413      	add	r3, r2
 8007d7c:	b2ca      	uxtb	r2, r1
 8007d7e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->transforms_length >> (8 * 3)) & 0xFF;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	685b      	ldr	r3, [r3, #4]
 8007d84:	0e19      	lsrs	r1, r3, #24
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	3303      	adds	r3, #3
 8007d8a:	683a      	ldr	r2, [r7, #0]
 8007d8c:	4413      	add	r3, r2
 8007d8e:	b2ca      	uxtb	r2, r1
 8007d90:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->transforms_length);
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	3304      	adds	r3, #4
 8007d96:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < transforms_length; i++){
 8007d98:	2300      	movs	r3, #0
 8007d9a:	60bb      	str	r3, [r7, #8]
 8007d9c:	e01d      	b.n	8007dda <_ZNK2tf9tfMessage9serializeEPh+0x9a>
      offset += this->transforms[i].serialize(outbuffer + offset);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6f99      	ldr	r1, [r3, #120]	@ 0x78
 8007da2:	68ba      	ldr	r2, [r7, #8]
 8007da4:	4613      	mov	r3, r2
 8007da6:	00db      	lsls	r3, r3, #3
 8007da8:	1a9b      	subs	r3, r3, r2
 8007daa:	011b      	lsls	r3, r3, #4
 8007dac:	18c8      	adds	r0, r1, r3
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6f99      	ldr	r1, [r3, #120]	@ 0x78
 8007db2:	68ba      	ldr	r2, [r7, #8]
 8007db4:	4613      	mov	r3, r2
 8007db6:	00db      	lsls	r3, r3, #3
 8007db8:	1a9b      	subs	r3, r3, r2
 8007dba:	011b      	lsls	r3, r3, #4
 8007dbc:	440b      	add	r3, r1
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	68fa      	ldr	r2, [r7, #12]
 8007dc4:	6839      	ldr	r1, [r7, #0]
 8007dc6:	440a      	add	r2, r1
 8007dc8:	4611      	mov	r1, r2
 8007dca:	4798      	blx	r3
 8007dcc:	4602      	mov	r2, r0
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	4413      	add	r3, r2
 8007dd2:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < transforms_length; i++){
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	3301      	adds	r3, #1
 8007dd8:	60bb      	str	r3, [r7, #8]
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	685b      	ldr	r3, [r3, #4]
 8007dde:	68ba      	ldr	r2, [r7, #8]
 8007de0:	429a      	cmp	r2, r3
 8007de2:	d3dc      	bcc.n	8007d9e <_ZNK2tf9tfMessage9serializeEPh+0x5e>
      }
      return offset;
 8007de4:	68fb      	ldr	r3, [r7, #12]
    }
 8007de6:	4618      	mov	r0, r3
 8007de8:	3710      	adds	r7, #16
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}

08007dee <_ZN2tf9tfMessage11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8007dee:	b580      	push	{r7, lr}
 8007df0:	b086      	sub	sp, #24
 8007df2:	af00      	add	r7, sp, #0
 8007df4:	6078      	str	r0, [r7, #4]
 8007df6:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8007df8:	2300      	movs	r3, #0
 8007dfa:	617b      	str	r3, [r7, #20]
      uint32_t transforms_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8007dfc:	697b      	ldr	r3, [r7, #20]
 8007dfe:	683a      	ldr	r2, [r7, #0]
 8007e00:	4413      	add	r3, r2
 8007e02:	781b      	ldrb	r3, [r3, #0]
 8007e04:	60fb      	str	r3, [r7, #12]
      transforms_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8007e06:	697b      	ldr	r3, [r7, #20]
 8007e08:	3301      	adds	r3, #1
 8007e0a:	683a      	ldr	r2, [r7, #0]
 8007e0c:	4413      	add	r3, r2
 8007e0e:	781b      	ldrb	r3, [r3, #0]
 8007e10:	021b      	lsls	r3, r3, #8
 8007e12:	68fa      	ldr	r2, [r7, #12]
 8007e14:	4313      	orrs	r3, r2
 8007e16:	60fb      	str	r3, [r7, #12]
      transforms_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8007e18:	697b      	ldr	r3, [r7, #20]
 8007e1a:	3302      	adds	r3, #2
 8007e1c:	683a      	ldr	r2, [r7, #0]
 8007e1e:	4413      	add	r3, r2
 8007e20:	781b      	ldrb	r3, [r3, #0]
 8007e22:	041b      	lsls	r3, r3, #16
 8007e24:	68fa      	ldr	r2, [r7, #12]
 8007e26:	4313      	orrs	r3, r2
 8007e28:	60fb      	str	r3, [r7, #12]
      transforms_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8007e2a:	697b      	ldr	r3, [r7, #20]
 8007e2c:	3303      	adds	r3, #3
 8007e2e:	683a      	ldr	r2, [r7, #0]
 8007e30:	4413      	add	r3, r2
 8007e32:	781b      	ldrb	r3, [r3, #0]
 8007e34:	061b      	lsls	r3, r3, #24
 8007e36:	68fa      	ldr	r2, [r7, #12]
 8007e38:	4313      	orrs	r3, r2
 8007e3a:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->transforms_length);
 8007e3c:	697b      	ldr	r3, [r7, #20]
 8007e3e:	3304      	adds	r3, #4
 8007e40:	617b      	str	r3, [r7, #20]
      if(transforms_lengthT > transforms_length)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	685b      	ldr	r3, [r3, #4]
 8007e46:	68fa      	ldr	r2, [r7, #12]
 8007e48:	429a      	cmp	r2, r3
 8007e4a:	d90c      	bls.n	8007e66 <_ZN2tf9tfMessage11deserializeEPh+0x78>
        this->transforms = (geometry_msgs::TransformStamped*)realloc(this->transforms, transforms_lengthT * sizeof(geometry_msgs::TransformStamped));
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 8007e50:	68fa      	ldr	r2, [r7, #12]
 8007e52:	4613      	mov	r3, r2
 8007e54:	00db      	lsls	r3, r3, #3
 8007e56:	1a9b      	subs	r3, r3, r2
 8007e58:	011b      	lsls	r3, r3, #4
 8007e5a:	4619      	mov	r1, r3
 8007e5c:	f008 fa0c 	bl	8010278 <realloc>
 8007e60:	4602      	mov	r2, r0
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	679a      	str	r2, [r3, #120]	@ 0x78
      transforms_length = transforms_lengthT;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	68fa      	ldr	r2, [r7, #12]
 8007e6a:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < transforms_length; i++){
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	613b      	str	r3, [r7, #16]
 8007e70:	e01d      	b.n	8007eae <_ZN2tf9tfMessage11deserializeEPh+0xc0>
      offset += this->st_transforms.deserialize(inbuffer + offset);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f103 0008 	add.w	r0, r3, #8
 8007e78:	697b      	ldr	r3, [r7, #20]
 8007e7a:	683a      	ldr	r2, [r7, #0]
 8007e7c:	4413      	add	r3, r2
 8007e7e:	4619      	mov	r1, r3
 8007e80:	f7fe fc0c 	bl	800669c <_ZN13geometry_msgs16TransformStamped11deserializeEPh>
 8007e84:	4602      	mov	r2, r0
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	4413      	add	r3, r2
 8007e8a:	617b      	str	r3, [r7, #20]
        memcpy( &(this->transforms[i]), &(this->st_transforms), sizeof(geometry_msgs::TransformStamped));
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6f99      	ldr	r1, [r3, #120]	@ 0x78
 8007e90:	693a      	ldr	r2, [r7, #16]
 8007e92:	4613      	mov	r3, r2
 8007e94:	00db      	lsls	r3, r3, #3
 8007e96:	1a9b      	subs	r3, r3, r2
 8007e98:	011b      	lsls	r3, r3, #4
 8007e9a:	18c8      	adds	r0, r1, r3
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	3308      	adds	r3, #8
 8007ea0:	2270      	movs	r2, #112	@ 0x70
 8007ea2:	4619      	mov	r1, r3
 8007ea4:	f008 faa6 	bl	80103f4 <memcpy>
      for( uint32_t i = 0; i < transforms_length; i++){
 8007ea8:	693b      	ldr	r3, [r7, #16]
 8007eaa:	3301      	adds	r3, #1
 8007eac:	613b      	str	r3, [r7, #16]
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	685b      	ldr	r3, [r3, #4]
 8007eb2:	693a      	ldr	r2, [r7, #16]
 8007eb4:	429a      	cmp	r2, r3
 8007eb6:	d3dc      	bcc.n	8007e72 <_ZN2tf9tfMessage11deserializeEPh+0x84>
      }
     return offset;
 8007eb8:	697b      	ldr	r3, [r7, #20]
    }
 8007eba:	4618      	mov	r0, r3
 8007ebc:	3718      	adds	r7, #24
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd80      	pop	{r7, pc}
	...

08007ec4 <_ZN2tf9tfMessage7getTypeEv>:

    virtual const char * getType() override { return "tf/tfMessage"; };
 8007ec4:	b480      	push	{r7}
 8007ec6:	b083      	sub	sp, #12
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
 8007ecc:	4b02      	ldr	r3, [pc, #8]	@ (8007ed8 <_ZN2tf9tfMessage7getTypeEv+0x14>)
 8007ece:	4618      	mov	r0, r3
 8007ed0:	370c      	adds	r7, #12
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bc80      	pop	{r7}
 8007ed6:	4770      	bx	lr
 8007ed8:	080108c0 	.word	0x080108c0

08007edc <_ZN2tf9tfMessage6getMD5Ev>:
    virtual const char * getMD5() override { return "94810edda583a504dfda3829e70d7eec"; };
 8007edc:	b480      	push	{r7}
 8007ede:	b083      	sub	sp, #12
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
 8007ee4:	4b02      	ldr	r3, [pc, #8]	@ (8007ef0 <_ZN2tf9tfMessage6getMD5Ev+0x14>)
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	370c      	adds	r7, #12
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bc80      	pop	{r7}
 8007eee:	4770      	bx	lr
 8007ef0:	080108d0 	.word	0x080108d0

08007ef4 <_ZN2tf20TransformBroadcasterC1Ev>:
{

class TransformBroadcaster
{
public:
  TransformBroadcaster() : publisher_("/tf", &internal_msg) {}
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b082      	sub	sp, #8
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	4618      	mov	r0, r3
 8007f00:	f7ff ff00 	bl	8007d04 <_ZN2tf9tfMessageC1Ev>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f103 0080 	add.w	r0, r3, #128	@ 0x80
 8007f0a:	687a      	ldr	r2, [r7, #4]
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	4904      	ldr	r1, [pc, #16]	@ (8007f20 <_ZN2tf20TransformBroadcasterC1Ev+0x2c>)
 8007f10:	f7fa fc4e 	bl	80027b0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	4618      	mov	r0, r3
 8007f18:	3708      	adds	r7, #8
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}
 8007f1e:	bf00      	nop
 8007f20:	080108f4 	.word	0x080108f4

08007f24 <_ZN2tf20TransformBroadcaster4initERN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EEE>:

  void init(ros::NodeHandle &nh)
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b082      	sub	sp, #8
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
 8007f2c:	6039      	str	r1, [r7, #0]
  {
    nh.advertise(publisher_);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	3380      	adds	r3, #128	@ 0x80
 8007f32:	4619      	mov	r1, r3
 8007f34:	6838      	ldr	r0, [r7, #0]
 8007f36:	f001 f83c 	bl	8008fb2 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE9advertiseERNS_9PublisherE>
  }
 8007f3a:	bf00      	nop
 8007f3c:	3708      	adds	r7, #8
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bd80      	pop	{r7, pc}

08007f42 <_ZN2tf20TransformBroadcaster13sendTransformERN13geometry_msgs16TransformStampedE>:

  void sendTransform(geometry_msgs::TransformStamped &transform)
 8007f42:	b580      	push	{r7, lr}
 8007f44:	b082      	sub	sp, #8
 8007f46:	af00      	add	r7, sp, #0
 8007f48:	6078      	str	r0, [r7, #4]
 8007f4a:	6039      	str	r1, [r7, #0]
  {
    internal_msg.transforms_length = 1;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2201      	movs	r2, #1
 8007f50:	605a      	str	r2, [r3, #4]
    internal_msg.transforms = &transform;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	683a      	ldr	r2, [r7, #0]
 8007f56:	679a      	str	r2, [r3, #120]	@ 0x78
    publisher_.publish(&internal_msg);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	3380      	adds	r3, #128	@ 0x80
 8007f5c:	687a      	ldr	r2, [r7, #4]
 8007f5e:	4611      	mov	r1, r2
 8007f60:	4618      	mov	r0, r3
 8007f62:	f7fa fc3b 	bl	80027dc <_ZN3ros9Publisher7publishEPKNS_3MsgE>
  }
 8007f66:	bf00      	nop
 8007f68:	3708      	adds	r7, #8
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}
	...

08007f70 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8007f70:	b480      	push	{r7}
 8007f72:	b083      	sub	sp, #12
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
 8007f78:	4a04      	ldr	r2, [pc, #16]	@ (8007f8c <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	601a      	str	r2, [r3, #0]
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	4618      	mov	r0, r3
 8007f82:	370c      	adds	r7, #12
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bc80      	pop	{r7}
 8007f88:	4770      	bx	lr
 8007f8a:	bf00      	nop
 8007f8c:	08010c00 	.word	0x08010c00

08007f90 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b082      	sub	sp, #8
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f7ff ffe8 	bl	8007f70 <_ZN3ros15NodeHandleBase_C1Ev>
 8007fa0:	4a41      	ldr	r2, [pc, #260]	@ (80080a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EEC1Ev+0x118>)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	601a      	str	r2, [r3, #0]
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	3304      	adds	r3, #4
 8007faa:	4618      	mov	r0, r3
 8007fac:	f7fa fd80 	bl	8002ab0 <_ZN13STM32HardwareC1Ev>
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	609a      	str	r2, [r3, #8]
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	60da      	str	r2, [r3, #12]
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	611a      	str	r2, [r3, #16]
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	615a      	str	r2, [r3, #20]
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	3318      	adds	r3, #24
 8007fcc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8007fd0:	2100      	movs	r1, #0
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f008 f986 	bl	80102e4 <memset>
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8007fde:	3318      	adds	r3, #24
 8007fe0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8007fe4:	2100      	movs	r1, #0
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f008 f97c 	bl	80102e4 <memset>
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8007ff2:	3318      	adds	r3, #24
 8007ff4:	2228      	movs	r2, #40	@ 0x28
 8007ff6:	2100      	movs	r1, #0
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	f008 f973 	bl	80102e4 <memset>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8008004:	3340      	adds	r3, #64	@ 0x40
 8008006:	2228      	movs	r2, #40	@ 0x28
 8008008:	2100      	movs	r1, #0
 800800a:	4618      	mov	r0, r3
 800800c:	f008 f96a 	bl	80102e4 <memset>
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8008016:	461a      	mov	r2, r3
 8008018:	2300      	movs	r3, #0
 800801a:	6693      	str	r3, [r2, #104]	@ 0x68
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8008022:	461a      	mov	r2, r3
 8008024:	2300      	movs	r3, #0
 8008026:	66d3      	str	r3, [r2, #108]	@ 0x6c
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800802e:	461a      	mov	r2, r3
 8008030:	2300      	movs	r3, #0
 8008032:	6713      	str	r3, [r2, #112]	@ 0x70
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800803a:	461a      	mov	r2, r3
 800803c:	2300      	movs	r3, #0
 800803e:	6753      	str	r3, [r2, #116]	@ 0x74
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8008046:	461a      	mov	r2, r3
 8008048:	2300      	movs	r3, #0
 800804a:	6793      	str	r3, [r2, #120]	@ 0x78
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8008052:	2200      	movs	r2, #0
 8008054:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800805e:	461a      	mov	r2, r3
 8008060:	2300      	movs	r3, #0
 8008062:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800806c:	461a      	mov	r2, r3
 800806e:	2300      	movs	r3, #0
 8008070:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800807a:	461a      	mov	r2, r3
 800807c:	2300      	movs	r3, #0
 800807e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8008088:	2200      	movs	r2, #0
 800808a:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f503 4381 	add.w	r3, r3, #16512	@ 0x4080
 8008094:	3310      	adds	r3, #16
 8008096:	4618      	mov	r0, r3
 8008098:	f7fa f8c2 	bl	8002220 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	4618      	mov	r0, r3
 80080a0:	3708      	adds	r7, #8
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}
 80080a6:	bf00      	nop
 80080a8:	08010a6c 	.word	0x08010a6c

080080ac <_Z10constraintfff>:

#define MAX(x, y) (((x) > (y)) ? (x) : (y))
#define MIN(x, y) (((x) < (y)) ? (x) : (y))

float constraint(float var, float min, float max)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b084      	sub	sp, #16
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	60f8      	str	r0, [r7, #12]
 80080b4:	60b9      	str	r1, [r7, #8]
 80080b6:	607a      	str	r2, [r7, #4]
	if (var < min)	return min;
 80080b8:	68b9      	ldr	r1, [r7, #8]
 80080ba:	68f8      	ldr	r0, [r7, #12]
 80080bc:	f7f9 f836 	bl	800112c <__aeabi_fcmplt>
 80080c0:	4603      	mov	r3, r0
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d001      	beq.n	80080ca <_Z10constraintfff+0x1e>
 80080c6:	68bb      	ldr	r3, [r7, #8]
 80080c8:	e009      	b.n	80080de <_Z10constraintfff+0x32>
	if (var > max) 	return max;
 80080ca:	6879      	ldr	r1, [r7, #4]
 80080cc:	68f8      	ldr	r0, [r7, #12]
 80080ce:	f7f9 f84b 	bl	8001168 <__aeabi_fcmpgt>
 80080d2:	4603      	mov	r3, r0
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d001      	beq.n	80080dc <_Z10constraintfff+0x30>
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	e000      	b.n	80080de <_Z10constraintfff+0x32>
	else 			return var;
 80080dc:	68fb      	ldr	r3, [r7, #12]
}
 80080de:	4618      	mov	r0, r3
 80080e0:	3710      	adds	r7, #16
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}
	...

080080e8 <HAL_UART_TxCpltCallback>:
extern MadgwickFilter_t my_madgwick;

uint16_t d_tick = 0;

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b082      	sub	sp, #8
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
	comm_rosserial.set_tx_cplt();
 80080f0:	4803      	ldr	r0, [pc, #12]	@ (8008100 <HAL_UART_TxCpltCallback+0x18>)
 80080f2:	f7fa fcbb 	bl	8002a6c <_ZN10SerialComm11set_tx_cpltEv>
}
 80080f6:	bf00      	nop
 80080f8:	3708      	adds	r7, #8
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bd80      	pop	{r7, pc}
 80080fe:	bf00      	nop
 8008100:	2000025c 	.word	0x2000025c

08008104 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b082      	sub	sp, #8
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
	comm_rosserial.reset_rbuf();
 800810c:	4803      	ldr	r0, [pc, #12]	@ (800811c <HAL_UART_RxCpltCallback+0x18>)
 800810e:	f7fa fcbb 	bl	8002a88 <_ZN10SerialComm10reset_rbufEv>
}
 8008112:	bf00      	nop
 8008114:	3708      	adds	r7, #8
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}
 800811a:	bf00      	nop
 800811c:	2000025c 	.word	0x2000025c

08008120 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008120:	b480      	push	{r7}
 8008122:	b083      	sub	sp, #12
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
	switch (htim->Channel)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	7f1b      	ldrb	r3, [r3, #28]
 800812c:	3b01      	subs	r3, #1
 800812e:	2b07      	cmp	r3, #7
 8008130:	d82d      	bhi.n	800818e <HAL_TIM_IC_CaptureCallback+0x6e>
 8008132:	a201      	add	r2, pc, #4	@ (adr r2, 8008138 <HAL_TIM_IC_CaptureCallback+0x18>)
 8008134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008138:	08008167 	.word	0x08008167
 800813c:	08008183 	.word	0x08008183
 8008140:	0800818f 	.word	0x0800818f
 8008144:	08008159 	.word	0x08008159
 8008148:	0800818f 	.word	0x0800818f
 800814c:	0800818f 	.word	0x0800818f
 8008150:	0800818f 	.word	0x0800818f
 8008154:	08008175 	.word	0x08008175
	{
	case HAL_TIM_ACTIVE_CHANNEL_3:
		encoder[front_left]->tick++;
 8008158:	4b10      	ldr	r3, [pc, #64]	@ (800819c <HAL_TIM_IC_CaptureCallback+0x7c>)
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	881a      	ldrh	r2, [r3, #0]
 800815e:	3201      	adds	r2, #1
 8008160:	b292      	uxth	r2, r2
 8008162:	801a      	strh	r2, [r3, #0]
		break;
 8008164:	e014      	b.n	8008190 <HAL_TIM_IC_CaptureCallback+0x70>
	case HAL_TIM_ACTIVE_CHANNEL_1:
		encoder[front_right]->tick++;
 8008166:	4b0d      	ldr	r3, [pc, #52]	@ (800819c <HAL_TIM_IC_CaptureCallback+0x7c>)
 8008168:	685b      	ldr	r3, [r3, #4]
 800816a:	881a      	ldrh	r2, [r3, #0]
 800816c:	3201      	adds	r2, #1
 800816e:	b292      	uxth	r2, r2
 8008170:	801a      	strh	r2, [r3, #0]
		break;
 8008172:	e00d      	b.n	8008190 <HAL_TIM_IC_CaptureCallback+0x70>
	case HAL_TIM_ACTIVE_CHANNEL_4:
		encoder[back_left]->tick++;
 8008174:	4b09      	ldr	r3, [pc, #36]	@ (800819c <HAL_TIM_IC_CaptureCallback+0x7c>)
 8008176:	689b      	ldr	r3, [r3, #8]
 8008178:	881a      	ldrh	r2, [r3, #0]
 800817a:	3201      	adds	r2, #1
 800817c:	b292      	uxth	r2, r2
 800817e:	801a      	strh	r2, [r3, #0]
		break;
 8008180:	e006      	b.n	8008190 <HAL_TIM_IC_CaptureCallback+0x70>
	case HAL_TIM_ACTIVE_CHANNEL_2:
		encoder[back_right]->tick++;
 8008182:	4b06      	ldr	r3, [pc, #24]	@ (800819c <HAL_TIM_IC_CaptureCallback+0x7c>)
 8008184:	68db      	ldr	r3, [r3, #12]
 8008186:	881a      	ldrh	r2, [r3, #0]
 8008188:	3201      	adds	r2, #1
 800818a:	b292      	uxth	r2, r2
 800818c:	801a      	strh	r2, [r3, #0]
	default:
		break;
 800818e:	bf00      	nop
	}
}
 8008190:	bf00      	nop
 8008192:	370c      	adds	r7, #12
 8008194:	46bd      	mov	sp, r7
 8008196:	bc80      	pop	{r7}
 8008198:	4770      	bx	lr
 800819a:	bf00      	nop
 800819c:	20008aac 	.word	0x20008aac

080081a0 <commandVelocityCallback>:

/* CALLBACK FUNCTIONS START */
void commandVelocityCallback(const geometry_msgs::Twist& cmd_vel_msg)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b082      	sub	sp, #8
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
	goal_vel[linear_x] = cmd_vel_msg.linear.x;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80081ae:	4610      	mov	r0, r2
 80081b0:	4619      	mov	r1, r3
 80081b2:	f7f8 fcbf 	bl	8000b34 <__aeabi_d2f>
 80081b6:	4603      	mov	r3, r0
 80081b8:	4a0c      	ldr	r2, [pc, #48]	@ (80081ec <commandVelocityCallback+0x4c>)
 80081ba:	6013      	str	r3, [r2, #0]
	goal_vel[linear_y] = cmd_vel_msg.linear.y;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80081c2:	4610      	mov	r0, r2
 80081c4:	4619      	mov	r1, r3
 80081c6:	f7f8 fcb5 	bl	8000b34 <__aeabi_d2f>
 80081ca:	4603      	mov	r3, r0
 80081cc:	4a07      	ldr	r2, [pc, #28]	@ (80081ec <commandVelocityCallback+0x4c>)
 80081ce:	6053      	str	r3, [r2, #4]
	goal_vel[angular_z] = cmd_vel_msg.angular.z;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80081d6:	4610      	mov	r0, r2
 80081d8:	4619      	mov	r1, r3
 80081da:	f7f8 fcab 	bl	8000b34 <__aeabi_d2f>
 80081de:	4603      	mov	r3, r0
 80081e0:	4a02      	ldr	r2, [pc, #8]	@ (80081ec <commandVelocityCallback+0x4c>)
 80081e2:	6093      	str	r3, [r2, #8]
}
 80081e4:	bf00      	nop
 80081e6:	3708      	adds	r7, #8
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd80      	pop	{r7, pc}
 80081ec:	20008a10 	.word	0x20008a10

080081f0 <ros_setup>:
/* CALLBACK FUNCTIONS END */

void ros_setup()
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	af00      	add	r7, sp, #0
	nh.initNode();
 80081f4:	4810      	ldr	r0, [pc, #64]	@ (8008238 <ros_setup+0x48>)
 80081f6:	f000 ff3f 	bl	8009078 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8initNodeEv>

	nh.subscribe(sub_cmd_vel);
 80081fa:	4910      	ldr	r1, [pc, #64]	@ (800823c <ros_setup+0x4c>)
 80081fc:	480e      	ldr	r0, [pc, #56]	@ (8008238 <ros_setup+0x48>)
 80081fe:	f000 ff60 	bl	80090c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE9subscribeERNS_11Subscriber_E>
	//nh.advertise(pub_imu);
    nh.advertise(pub_odom);
 8008202:	490f      	ldr	r1, [pc, #60]	@ (8008240 <ros_setup+0x50>)
 8008204:	480c      	ldr	r0, [pc, #48]	@ (8008238 <ros_setup+0x48>)
 8008206:	f000 fed4 	bl	8008fb2 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE9advertiseERNS_9PublisherE>
	nh.advertise(pub_joint_states);
 800820a:	490e      	ldr	r1, [pc, #56]	@ (8008244 <ros_setup+0x54>)
 800820c:	480a      	ldr	r0, [pc, #40]	@ (8008238 <ros_setup+0x48>)
 800820e:	f000 fed0 	bl	8008fb2 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE9advertiseERNS_9PublisherE>

	nh.advertise(pub_FL_rpm);
 8008212:	490d      	ldr	r1, [pc, #52]	@ (8008248 <ros_setup+0x58>)
 8008214:	4808      	ldr	r0, [pc, #32]	@ (8008238 <ros_setup+0x48>)
 8008216:	f000 fecc 	bl	8008fb2 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE9advertiseERNS_9PublisherE>
	nh.advertise(pub_FR_rpm);
 800821a:	490c      	ldr	r1, [pc, #48]	@ (800824c <ros_setup+0x5c>)
 800821c:	4806      	ldr	r0, [pc, #24]	@ (8008238 <ros_setup+0x48>)
 800821e:	f000 fec8 	bl	8008fb2 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE9advertiseERNS_9PublisherE>

	tf_broadcaster.init(nh);
 8008222:	4905      	ldr	r1, [pc, #20]	@ (8008238 <ros_setup+0x48>)
 8008224:	480a      	ldr	r0, [pc, #40]	@ (8008250 <ros_setup+0x60>)
 8008226:	f7ff fe7d 	bl	8007f24 <_ZN2tf20TransformBroadcaster4initERN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EEE>

	initOdom();
 800822a:	f000 f8cd 	bl	80083c8 <initOdom>
	initJointStates();
 800822e:	f000 f941 	bl	80084b4 <initJointStates>
}
 8008232:	bf00      	nop
 8008234:	bd80      	pop	{r7, pc}
 8008236:	bf00      	nop
 8008238:	20004268 	.word	0x20004268
 800823c:	20008320 	.word	0x20008320
 8008240:	20008868 	.word	0x20008868
 8008244:	200088d8 	.word	0x200088d8
 8008248:	200083a0 	.word	0x200083a0
 800824c:	200083b4 	.word	0x200083b4
 8008250:	20008960 	.word	0x20008960

08008254 <setup>:

void setup()
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b082      	sub	sp, #8
 8008258:	af00      	add	r7, sp, #0
	ros_setup();
 800825a:	f7ff ffc9 	bl	80081f0 <ros_setup>

	mecabot_motor_init();
 800825e:	f001 fd21 	bl	8009ca4 <_Z18mecabot_motor_initv>
	mecabot_encoder_init();
 8008262:	f001 fd61 	bl	8009d28 <_Z20mecabot_encoder_initv>
	mecabot_pid_init();
 8008266:	f001 fdcb 	bl	8009e00 <_Z16mecabot_pid_initv>
	//while (mecabot_mpu_init() != STATUS_OK);

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800826a:	2200      	movs	r2, #0
 800826c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8008270:	480f      	ldr	r0, [pc, #60]	@ (80082b0 <setup+0x5c>)
 8008272:	f003 f8b3 	bl	800b3dc <HAL_GPIO_WritePin>

	for (int i=0; i<NUM_OF_MOTOR; i++)
 8008276:	2300      	movs	r3, #0
 8008278:	607b      	str	r3, [r7, #4]
 800827a:	e010      	b.n	800829e <setup+0x4a>
	{
		mecabot_motor_start(mecabot_motor[i]);
 800827c:	4a0d      	ldr	r2, [pc, #52]	@ (80082b4 <setup+0x60>)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008284:	4618      	mov	r0, r3
 8008286:	f001 fded 	bl	8009e64 <_Z19mecabot_motor_startP7Motor_t>
		mecabot_encoder_start(encoder[i]);
 800828a:	4a0b      	ldr	r2, [pc, #44]	@ (80082b8 <setup+0x64>)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008292:	4618      	mov	r0, r3
 8008294:	f001 fdf2 	bl	8009e7c <_Z21mecabot_encoder_startP9Encoder_t>
	for (int i=0; i<NUM_OF_MOTOR; i++)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	3301      	adds	r3, #1
 800829c:	607b      	str	r3, [r7, #4]
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2b03      	cmp	r3, #3
 80082a2:	ddeb      	ble.n	800827c <setup+0x28>
	}
}
 80082a4:	bf00      	nop
 80082a6:	bf00      	nop
 80082a8:	3708      	adds	r7, #8
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd80      	pop	{r7, pc}
 80082ae:	bf00      	nop
 80082b0:	40011000 	.word	0x40011000
 80082b4:	20008a9c 	.word	0x20008a9c
 80082b8:	20008aac 	.word	0x20008aac

080082bc <loop>:

void loop()
{
 80082bc:	b590      	push	{r4, r7, lr}
 80082be:	b083      	sub	sp, #12
 80082c0:	af00      	add	r7, sp, #0
	t = millis();
 80082c2:	f001 fce7 	bl	8009c94 <_Z6millisv>
 80082c6:	4603      	mov	r3, r0
 80082c8:	4a38      	ldr	r2, [pc, #224]	@ (80083ac <loop+0xf0>)
 80082ca:	6013      	str	r3, [r2, #0]

	/* Wheel velocity feedback */
    if ((t - t_previous[wheel_velocity_feedback_event]) >= dt[wheel_velocity_feedback_event])
 80082cc:	4b37      	ldr	r3, [pc, #220]	@ (80083ac <loop+0xf0>)
 80082ce:	681a      	ldr	r2, [r3, #0]
 80082d0:	4b37      	ldr	r3, [pc, #220]	@ (80083b0 <loop+0xf4>)
 80082d2:	685b      	ldr	r3, [r3, #4]
 80082d4:	1ad2      	subs	r2, r2, r3
 80082d6:	4b37      	ldr	r3, [pc, #220]	@ (80083b4 <loop+0xf8>)
 80082d8:	685b      	ldr	r3, [r3, #4]
 80082da:	429a      	cmp	r2, r3
 80082dc:	d305      	bcc.n	80082ea <loop+0x2e>
	{
    	calculateRpm();
 80082de:	f000 fa6d 	bl	80087bc <calculateRpm>
    	//publishRpm();
		t_previous[wheel_velocity_feedback_event] = t;
 80082e2:	4b32      	ldr	r3, [pc, #200]	@ (80083ac <loop+0xf0>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	4a32      	ldr	r2, [pc, #200]	@ (80083b0 <loop+0xf4>)
 80082e8:	6053      	str	r3, [r2, #4]
	}
	/* Motor control */
	if ((t - t_previous[motor_control_event]) >= dt[motor_control_event])
 80082ea:	4b30      	ldr	r3, [pc, #192]	@ (80083ac <loop+0xf0>)
 80082ec:	681a      	ldr	r2, [r3, #0]
 80082ee:	4b30      	ldr	r3, [pc, #192]	@ (80083b0 <loop+0xf4>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	1ad2      	subs	r2, r2, r3
 80082f4:	4b2f      	ldr	r3, [pc, #188]	@ (80083b4 <loop+0xf8>)
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	429a      	cmp	r2, r3
 80082fa:	d307      	bcc.n	800830c <loop+0x50>
	{
		calculateWheelVelocity();
 80082fc:	f000 fc98 	bl	8008c30 <calculateWheelVelocity>
		controlMotors();
 8008300:	f000 fd98 	bl	8008e34 <controlMotors>
		t_previous[motor_control_event] = t;
 8008304:	4b29      	ldr	r3, [pc, #164]	@ (80083ac <loop+0xf0>)
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	4a29      	ldr	r2, [pc, #164]	@ (80083b0 <loop+0xf4>)
 800830a:	6013      	str	r3, [r2, #0]
	}
	/* Imu publish */
    if ((t - t_previous[imu_publish_event]) >= dt[imu_publish_event])
 800830c:	4b27      	ldr	r3, [pc, #156]	@ (80083ac <loop+0xf0>)
 800830e:	681a      	ldr	r2, [r3, #0]
 8008310:	4b27      	ldr	r3, [pc, #156]	@ (80083b0 <loop+0xf4>)
 8008312:	689b      	ldr	r3, [r3, #8]
 8008314:	1ad2      	subs	r2, r2, r3
 8008316:	4b27      	ldr	r3, [pc, #156]	@ (80083b4 <loop+0xf8>)
 8008318:	689b      	ldr	r3, [r3, #8]
 800831a:	429a      	cmp	r2, r3
 800831c:	d303      	bcc.n	8008326 <loop+0x6a>
	{
		//updateImu();
		//publishImu();
		t_previous[imu_publish_event] = t;
 800831e:	4b23      	ldr	r3, [pc, #140]	@ (80083ac <loop+0xf0>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	4a23      	ldr	r2, [pc, #140]	@ (80083b0 <loop+0xf4>)
 8008324:	6093      	str	r3, [r2, #8]
	}
	/* Robot states (Odometry, TF, joint states) publish */
    if ((t - t_previous[odom_publish_event]) >= dt[odom_publish_event])
 8008326:	4b21      	ldr	r3, [pc, #132]	@ (80083ac <loop+0xf0>)
 8008328:	681a      	ldr	r2, [r3, #0]
 800832a:	4b21      	ldr	r3, [pc, #132]	@ (80083b0 <loop+0xf4>)
 800832c:	68db      	ldr	r3, [r3, #12]
 800832e:	1ad2      	subs	r2, r2, r3
 8008330:	4b20      	ldr	r3, [pc, #128]	@ (80083b4 <loop+0xf8>)
 8008332:	68db      	ldr	r3, [r3, #12]
 8008334:	429a      	cmp	r2, r3
 8008336:	d332      	bcc.n	800839e <loop+0xe2>
	{
		updateOdom();
 8008338:	f000 f94a 	bl	80085d0 <updateOdom>
		odom_msg.header.stamp = nh.now();
 800833c:	4c1e      	ldr	r4, [pc, #120]	@ (80083b8 <loop+0xfc>)
 800833e:	463b      	mov	r3, r7
 8008340:	491e      	ldr	r1, [pc, #120]	@ (80083bc <loop+0x100>)
 8008342:	4618      	mov	r0, r3
 8008344:	f000 feea 	bl	800911c <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE3nowEv>
 8008348:	f104 030c 	add.w	r3, r4, #12
 800834c:	463a      	mov	r2, r7
 800834e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008352:	e883 0003 	stmia.w	r3, {r0, r1}

		updateOdomTF();
 8008356:	f000 f9d5 	bl	8008704 <updateOdomTF>
		odom_tf_msg.header.stamp = nh.now();
 800835a:	4c19      	ldr	r4, [pc, #100]	@ (80083c0 <loop+0x104>)
 800835c:	463b      	mov	r3, r7
 800835e:	4917      	ldr	r1, [pc, #92]	@ (80083bc <loop+0x100>)
 8008360:	4618      	mov	r0, r3
 8008362:	f000 fedb 	bl	800911c <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE3nowEv>
 8008366:	f104 030c 	add.w	r3, r4, #12
 800836a:	463a      	mov	r2, r7
 800836c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008370:	e883 0003 	stmia.w	r3, {r0, r1}

		updateJointStates();
 8008374:	f000 f9f0 	bl	8008758 <updateJointStates>
		joint_states_msg.header.stamp = nh.now();
 8008378:	4c12      	ldr	r4, [pc, #72]	@ (80083c4 <loop+0x108>)
 800837a:	463b      	mov	r3, r7
 800837c:	490f      	ldr	r1, [pc, #60]	@ (80083bc <loop+0x100>)
 800837e:	4618      	mov	r0, r3
 8008380:	f000 fecc 	bl	800911c <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE3nowEv>
 8008384:	f104 030c 	add.w	r3, r4, #12
 8008388:	463a      	mov	r2, r7
 800838a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800838e:	e883 0003 	stmia.w	r3, {r0, r1}

		publishRobotState();
 8008392:	f000 fd29 	bl	8008de8 <publishRobotState>
		t_previous[odom_publish_event] = t;
 8008396:	4b05      	ldr	r3, [pc, #20]	@ (80083ac <loop+0xf0>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	4a05      	ldr	r2, [pc, #20]	@ (80083b0 <loop+0xf4>)
 800839c:	60d3      	str	r3, [r2, #12]
	}

	nh.spinOnce();
 800839e:	4807      	ldr	r0, [pc, #28]	@ (80083bc <loop+0x100>)
 80083a0:	f000 fef6 	bl	8009190 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv>
}
 80083a4:	bf00      	nop
 80083a6:	370c      	adds	r7, #12
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd90      	pop	{r4, r7, pc}
 80083ac:	20008a94 	.word	0x20008a94
 80083b0:	20008a84 	.word	0x20008a84
 80083b4:	20000008 	.word	0x20000008
 80083b8:	20008560 	.word	0x20008560
 80083bc:	20004268 	.word	0x20004268
 80083c0:	200088f0 	.word	0x200088f0
 80083c4:	20008880 	.word	0x20008880

080083c8 <initOdom>:

/* MSG INITIALIZATION FUNCTIONS START */
void initOdom(void)
{
 80083c8:	b480      	push	{r7}
 80083ca:	b083      	sub	sp, #12
 80083cc:	af00      	add	r7, sp, #0
	for (int i = 0; i < 3; i++)
 80083ce:	2300      	movs	r3, #0
 80083d0:	607b      	str	r3, [r7, #4]
 80083d2:	e00e      	b.n	80083f2 <initOdom+0x2a>
    {
        odom_pose[i] = 0.0;
 80083d4:	4a31      	ldr	r2, [pc, #196]	@ (800849c <initOdom+0xd4>)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	f04f 0100 	mov.w	r1, #0
 80083dc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        odom_vel[i]  = 0.0;
 80083e0:	4a2f      	ldr	r2, [pc, #188]	@ (80084a0 <initOdom+0xd8>)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f04f 0100 	mov.w	r1, #0
 80083e8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 3; i++)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	3301      	adds	r3, #1
 80083f0:	607b      	str	r3, [r7, #4]
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2b02      	cmp	r3, #2
 80083f6:	dded      	ble.n	80083d4 <initOdom+0xc>
    }

	odom_msg.header.frame_id = odom_frame_id;
 80083f8:	4b2a      	ldr	r3, [pc, #168]	@ (80084a4 <initOdom+0xdc>)
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	4a2a      	ldr	r2, [pc, #168]	@ (80084a8 <initOdom+0xe0>)
 80083fe:	6153      	str	r3, [r2, #20]
	odom_msg.child_frame_id = base_frame_id;
 8008400:	4b2a      	ldr	r3, [pc, #168]	@ (80084ac <initOdom+0xe4>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	4a28      	ldr	r2, [pc, #160]	@ (80084a8 <initOdom+0xe0>)
 8008406:	6193      	str	r3, [r2, #24]

    odom_msg.pose.pose.position.x = 0.0;
 8008408:	4927      	ldr	r1, [pc, #156]	@ (80084a8 <initOdom+0xe0>)
 800840a:	f04f 0200 	mov.w	r2, #0
 800840e:	f04f 0300 	mov.w	r3, #0
 8008412:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    odom_msg.pose.pose.position.y = 0.0;
 8008416:	4924      	ldr	r1, [pc, #144]	@ (80084a8 <initOdom+0xe0>)
 8008418:	f04f 0200 	mov.w	r2, #0
 800841c:	f04f 0300 	mov.w	r3, #0
 8008420:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
    odom_msg.pose.pose.position.z = 0.0;
 8008424:	4920      	ldr	r1, [pc, #128]	@ (80084a8 <initOdom+0xe0>)
 8008426:	f04f 0200 	mov.w	r2, #0
 800842a:	f04f 0300 	mov.w	r3, #0
 800842e:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48

    odom_msg.pose.pose.orientation.x = 0.0;
 8008432:	491d      	ldr	r1, [pc, #116]	@ (80084a8 <initOdom+0xe0>)
 8008434:	f04f 0200 	mov.w	r2, #0
 8008438:	f04f 0300 	mov.w	r3, #0
 800843c:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
    odom_msg.pose.pose.orientation.y = 0.0;
 8008440:	4919      	ldr	r1, [pc, #100]	@ (80084a8 <initOdom+0xe0>)
 8008442:	f04f 0200 	mov.w	r2, #0
 8008446:	f04f 0300 	mov.w	r3, #0
 800844a:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
    odom_msg.pose.pose.orientation.z = 0.0;
 800844e:	4916      	ldr	r1, [pc, #88]	@ (80084a8 <initOdom+0xe0>)
 8008450:	f04f 0200 	mov.w	r2, #0
 8008454:	f04f 0300 	mov.w	r3, #0
 8008458:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
    odom_msg.pose.pose.orientation.w = 1.0;
 800845c:	4912      	ldr	r1, [pc, #72]	@ (80084a8 <initOdom+0xe0>)
 800845e:	f04f 0200 	mov.w	r2, #0
 8008462:	4b13      	ldr	r3, [pc, #76]	@ (80084b0 <initOdom+0xe8>)
 8008464:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70

    odom_msg.twist.twist.linear.x  = 0.0;
 8008468:	490f      	ldr	r1, [pc, #60]	@ (80084a8 <initOdom+0xe0>)
 800846a:	f04f 0200 	mov.w	r2, #0
 800846e:	f04f 0300 	mov.w	r3, #0
 8008472:	e9c1 236c 	strd	r2, r3, [r1, #432]	@ 0x1b0
	odom_msg.twist.twist.linear.y  = 0.0;
 8008476:	490c      	ldr	r1, [pc, #48]	@ (80084a8 <initOdom+0xe0>)
 8008478:	f04f 0200 	mov.w	r2, #0
 800847c:	f04f 0300 	mov.w	r3, #0
 8008480:	e9c1 236e 	strd	r2, r3, [r1, #440]	@ 0x1b8
    odom_msg.twist.twist.angular.z = 0.0;
 8008484:	4908      	ldr	r1, [pc, #32]	@ (80084a8 <initOdom+0xe0>)
 8008486:	f04f 0200 	mov.w	r2, #0
 800848a:	f04f 0300 	mov.w	r3, #0
 800848e:	e9c1 2378 	strd	r2, r3, [r1, #480]	@ 0x1e0
}
 8008492:	bf00      	nop
 8008494:	370c      	adds	r7, #12
 8008496:	46bd      	mov	sp, r7
 8008498:	bc80      	pop	{r7}
 800849a:	4770      	bx	lr
 800849c:	200089f8 	.word	0x200089f8
 80084a0:	20008a04 	.word	0x20008a04
 80084a4:	20000004 	.word	0x20000004
 80084a8:	20008560 	.word	0x20008560
 80084ac:	20000000 	.word	0x20000000
 80084b0:	3ff00000 	.word	0x3ff00000

080084b4 <initJointStates>:
	odom_tf_msg.transform.rotation.y = 0.0;
	odom_tf_msg.transform.rotation.z = 0.0;
	odom_tf_msg.transform.rotation.w = 1.0;
}
void initJointStates(void)
{
 80084b4:	b480      	push	{r7}
 80084b6:	af00      	add	r7, sp, #0
	static char *joint_states_name[NUM_OF_MOTOR] {(char*)"front_left_wheel_joint", (char*)"front_right_wheel_joint",
												(char*)"back_left_wheel_joint" , (char*)"back_right_wheel_joint"};

	joint_states_msg.header.frame_id = base_frame_id;
 80084b8:	4b0b      	ldr	r3, [pc, #44]	@ (80084e8 <initJointStates+0x34>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4a0b      	ldr	r2, [pc, #44]	@ (80084ec <initJointStates+0x38>)
 80084be:	6153      	str	r3, [r2, #20]
	joint_states_msg.name = joint_states_name;
 80084c0:	4b0a      	ldr	r3, [pc, #40]	@ (80084ec <initJointStates+0x38>)
 80084c2:	4a0b      	ldr	r2, [pc, #44]	@ (80084f0 <initJointStates+0x3c>)
 80084c4:	621a      	str	r2, [r3, #32]

	joint_states_msg.name_length 	 = NUM_OF_MOTOR;
 80084c6:	4b09      	ldr	r3, [pc, #36]	@ (80084ec <initJointStates+0x38>)
 80084c8:	2204      	movs	r2, #4
 80084ca:	619a      	str	r2, [r3, #24]
	joint_states_msg.position_length = NUM_OF_MOTOR;
 80084cc:	4b07      	ldr	r3, [pc, #28]	@ (80084ec <initJointStates+0x38>)
 80084ce:	2204      	movs	r2, #4
 80084d0:	625a      	str	r2, [r3, #36]	@ 0x24
	joint_states_msg.velocity_length = NUM_OF_MOTOR;
 80084d2:	4b06      	ldr	r3, [pc, #24]	@ (80084ec <initJointStates+0x38>)
 80084d4:	2204      	movs	r2, #4
 80084d6:	635a      	str	r2, [r3, #52]	@ 0x34
	joint_states_msg.effort_length	 = NUM_OF_MOTOR;
 80084d8:	4b04      	ldr	r3, [pc, #16]	@ (80084ec <initJointStates+0x38>)
 80084da:	2204      	movs	r2, #4
 80084dc:	645a      	str	r2, [r3, #68]	@ 0x44
}
 80084de:	bf00      	nop
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bc80      	pop	{r7}
 80084e4:	4770      	bx	lr
 80084e6:	bf00      	nop
 80084e8:	20000000 	.word	0x20000000
 80084ec:	20008880 	.word	0x20008880
 80084f0:	20000018 	.word	0x20000018

080084f4 <updateYaw>:
    imu_msg.orientation_covariance[6] = 0;
    imu_msg.orientation_covariance[7] = 0;
    imu_msg.orientation_covariance[8] = 0.0025;
}
void updateYaw(float gz, float dt)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b082      	sub	sp, #8
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
 80084fc:	6039      	str	r1, [r7, #0]
	yaw += gz * dt;
 80084fe:	6839      	ldr	r1, [r7, #0]
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	f7f8 fc75 	bl	8000df0 <__aeabi_fmul>
 8008506:	4603      	mov	r3, r0
 8008508:	461a      	mov	r2, r3
 800850a:	4b15      	ldr	r3, [pc, #84]	@ (8008560 <updateYaw+0x6c>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	4619      	mov	r1, r3
 8008510:	4610      	mov	r0, r2
 8008512:	f7f8 fb65 	bl	8000be0 <__addsf3>
 8008516:	4603      	mov	r3, r0
 8008518:	461a      	mov	r2, r3
 800851a:	4b11      	ldr	r3, [pc, #68]	@ (8008560 <updateYaw+0x6c>)
 800851c:	601a      	str	r2, [r3, #0]
	if (yaw >= (2*PI))
 800851e:	4b10      	ldr	r3, [pc, #64]	@ (8008560 <updateYaw+0x6c>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	4910      	ldr	r1, [pc, #64]	@ (8008564 <updateYaw+0x70>)
 8008524:	4618      	mov	r0, r3
 8008526:	f7f8 fe15 	bl	8001154 <__aeabi_fcmpge>
 800852a:	4603      	mov	r3, r0
 800852c:	2b00      	cmp	r3, #0
 800852e:	d004      	beq.n	800853a <updateYaw+0x46>
		yaw = 0;
 8008530:	4b0b      	ldr	r3, [pc, #44]	@ (8008560 <updateYaw+0x6c>)
 8008532:	f04f 0200 	mov.w	r2, #0
 8008536:	601a      	str	r2, [r3, #0]
	else if (yaw < 0)
		yaw = 2 * PI;
}
 8008538:	e00d      	b.n	8008556 <updateYaw+0x62>
	else if (yaw < 0)
 800853a:	4b09      	ldr	r3, [pc, #36]	@ (8008560 <updateYaw+0x6c>)
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f04f 0100 	mov.w	r1, #0
 8008542:	4618      	mov	r0, r3
 8008544:	f7f8 fdf2 	bl	800112c <__aeabi_fcmplt>
 8008548:	4603      	mov	r3, r0
 800854a:	2b00      	cmp	r3, #0
 800854c:	d100      	bne.n	8008550 <updateYaw+0x5c>
}
 800854e:	e002      	b.n	8008556 <updateYaw+0x62>
		yaw = 2 * PI;
 8008550:	4b03      	ldr	r3, [pc, #12]	@ (8008560 <updateYaw+0x6c>)
 8008552:	4a04      	ldr	r2, [pc, #16]	@ (8008564 <updateYaw+0x70>)
 8008554:	601a      	str	r2, [r3, #0]
}
 8008556:	bf00      	nop
 8008558:	3708      	adds	r7, #8
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}
 800855e:	bf00      	nop
 8008560:	20008adc 	.word	0x20008adc
 8008564:	40c90fdb 	.word	0x40c90fdb

08008568 <_ZN3ros3MsgaSEOS0_>:
 8008568:	b480      	push	{r7}
 800856a:	b083      	sub	sp, #12
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
 8008570:	6039      	str	r1, [r7, #0]
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	4618      	mov	r0, r3
 8008576:	370c      	adds	r7, #12
 8008578:	46bd      	mov	sp, r7
 800857a:	bc80      	pop	{r7}
 800857c:	4770      	bx	lr

0800857e <_ZN13geometry_msgs10QuaternionaSEOS0_>:
  class Quaternion : public ros::Msg
 800857e:	b580      	push	{r7, lr}
 8008580:	b082      	sub	sp, #8
 8008582:	af00      	add	r7, sp, #0
 8008584:	6078      	str	r0, [r7, #4]
 8008586:	6039      	str	r1, [r7, #0]
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	683a      	ldr	r2, [r7, #0]
 800858c:	4611      	mov	r1, r2
 800858e:	4618      	mov	r0, r3
 8008590:	f7ff ffea 	bl	8008568 <_ZN3ros3MsgaSEOS0_>
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800859a:	6879      	ldr	r1, [r7, #4]
 800859c:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80085a6:	6879      	ldr	r1, [r7, #4]
 80085a8:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80085b2:	6879      	ldr	r1, [r7, #4]
 80085b4:	e9c1 2306 	strd	r2, r3, [r1, #24]
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80085be:	6879      	ldr	r1, [r7, #4]
 80085c0:	e9c1 2308 	strd	r2, r3, [r1, #32]
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	4618      	mov	r0, r3
 80085c8:	3708      	adds	r7, #8
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}
	...

080085d0 <updateOdom>:
void updateOdom(void)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b08a      	sub	sp, #40	@ 0x28
 80085d4:	af00      	add	r7, sp, #0
	calculateOdometry();
 80085d6:	f000 f9ef 	bl	80089b8 <calculateOdometry>

	odom_msg.header.frame_id = odom_frame_id;
 80085da:	4b2a      	ldr	r3, [pc, #168]	@ (8008684 <updateOdom+0xb4>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	4a2a      	ldr	r2, [pc, #168]	@ (8008688 <updateOdom+0xb8>)
 80085e0:	6153      	str	r3, [r2, #20]
	odom_msg.child_frame_id = base_frame_id;
 80085e2:	4b2a      	ldr	r3, [pc, #168]	@ (800868c <updateOdom+0xbc>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	4a28      	ldr	r2, [pc, #160]	@ (8008688 <updateOdom+0xb8>)
 80085e8:	6193      	str	r3, [r2, #24]

	odom_msg.pose.pose.position.x = odom_pose[linear_x];
 80085ea:	4b29      	ldr	r3, [pc, #164]	@ (8008690 <updateOdom+0xc0>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	4618      	mov	r0, r3
 80085f0:	f7f7 ff86 	bl	8000500 <__aeabi_f2d>
 80085f4:	4602      	mov	r2, r0
 80085f6:	460b      	mov	r3, r1
 80085f8:	4923      	ldr	r1, [pc, #140]	@ (8008688 <updateOdom+0xb8>)
 80085fa:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    odom_msg.pose.pose.position.y = odom_pose[linear_y];
 80085fe:	4b24      	ldr	r3, [pc, #144]	@ (8008690 <updateOdom+0xc0>)
 8008600:	685b      	ldr	r3, [r3, #4]
 8008602:	4618      	mov	r0, r3
 8008604:	f7f7 ff7c 	bl	8000500 <__aeabi_f2d>
 8008608:	4602      	mov	r2, r0
 800860a:	460b      	mov	r3, r1
 800860c:	491e      	ldr	r1, [pc, #120]	@ (8008688 <updateOdom+0xb8>)
 800860e:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
	odom_msg.pose.pose.position.z = 0.0;
 8008612:	491d      	ldr	r1, [pc, #116]	@ (8008688 <updateOdom+0xb8>)
 8008614:	f04f 0200 	mov.w	r2, #0
 8008618:	f04f 0300 	mov.w	r3, #0
 800861c:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
    odom_msg.pose.pose.orientation = tf::createQuaternionFromYaw(odom_pose[angular_z]);
 8008620:	4b1b      	ldr	r3, [pc, #108]	@ (8008690 <updateOdom+0xc0>)
 8008622:	689b      	ldr	r3, [r3, #8]
 8008624:	4618      	mov	r0, r3
 8008626:	f7f7 ff6b 	bl	8000500 <__aeabi_f2d>
 800862a:	4602      	mov	r2, r0
 800862c:	460b      	mov	r3, r1
 800862e:	4639      	mov	r1, r7
 8008630:	4608      	mov	r0, r1
 8008632:	f7ff fb25 	bl	8007c80 <_ZN2tfL23createQuaternionFromYawEd>
 8008636:	463b      	mov	r3, r7
 8008638:	4619      	mov	r1, r3
 800863a:	4816      	ldr	r0, [pc, #88]	@ (8008694 <updateOdom+0xc4>)
 800863c:	f7ff ff9f 	bl	800857e <_ZN13geometry_msgs10QuaternionaSEOS0_>

    odom_msg.twist.twist.linear.x  = odom_vel[linear_x];
 8008640:	4b15      	ldr	r3, [pc, #84]	@ (8008698 <updateOdom+0xc8>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	4618      	mov	r0, r3
 8008646:	f7f7 ff5b 	bl	8000500 <__aeabi_f2d>
 800864a:	4602      	mov	r2, r0
 800864c:	460b      	mov	r3, r1
 800864e:	490e      	ldr	r1, [pc, #56]	@ (8008688 <updateOdom+0xb8>)
 8008650:	e9c1 236c 	strd	r2, r3, [r1, #432]	@ 0x1b0
	odom_msg.twist.twist.linear.y  = odom_vel[linear_y];
 8008654:	4b10      	ldr	r3, [pc, #64]	@ (8008698 <updateOdom+0xc8>)
 8008656:	685b      	ldr	r3, [r3, #4]
 8008658:	4618      	mov	r0, r3
 800865a:	f7f7 ff51 	bl	8000500 <__aeabi_f2d>
 800865e:	4602      	mov	r2, r0
 8008660:	460b      	mov	r3, r1
 8008662:	4909      	ldr	r1, [pc, #36]	@ (8008688 <updateOdom+0xb8>)
 8008664:	e9c1 236e 	strd	r2, r3, [r1, #440]	@ 0x1b8
    odom_msg.twist.twist.angular.z = odom_vel[angular_z];
 8008668:	4b0b      	ldr	r3, [pc, #44]	@ (8008698 <updateOdom+0xc8>)
 800866a:	689b      	ldr	r3, [r3, #8]
 800866c:	4618      	mov	r0, r3
 800866e:	f7f7 ff47 	bl	8000500 <__aeabi_f2d>
 8008672:	4602      	mov	r2, r0
 8008674:	460b      	mov	r3, r1
 8008676:	4904      	ldr	r1, [pc, #16]	@ (8008688 <updateOdom+0xb8>)
 8008678:	e9c1 2378 	strd	r2, r3, [r1, #480]	@ 0x1e0
}
 800867c:	bf00      	nop
 800867e:	3728      	adds	r7, #40	@ 0x28
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}
 8008684:	20000004 	.word	0x20000004
 8008688:	20008560 	.word	0x20008560
 800868c:	20000000 	.word	0x20000000
 8008690:	200089f8 	.word	0x200089f8
 8008694:	200085b0 	.word	0x200085b0
 8008698:	20008a04 	.word	0x20008a04

0800869c <_ZN3ros3MsgaSERKS0_>:
 800869c:	b480      	push	{r7}
 800869e:	b083      	sub	sp, #12
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
 80086a4:	6039      	str	r1, [r7, #0]
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	4618      	mov	r0, r3
 80086aa:	370c      	adds	r7, #12
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bc80      	pop	{r7}
 80086b0:	4770      	bx	lr

080086b2 <_ZN13geometry_msgs10QuaternionaSERKS0_>:
 80086b2:	b580      	push	{r7, lr}
 80086b4:	b082      	sub	sp, #8
 80086b6:	af00      	add	r7, sp, #0
 80086b8:	6078      	str	r0, [r7, #4]
 80086ba:	6039      	str	r1, [r7, #0]
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	683a      	ldr	r2, [r7, #0]
 80086c0:	4611      	mov	r1, r2
 80086c2:	4618      	mov	r0, r3
 80086c4:	f7ff ffea 	bl	800869c <_ZN3ros3MsgaSERKS0_>
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80086ce:	6879      	ldr	r1, [r7, #4]
 80086d0:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80086da:	6879      	ldr	r1, [r7, #4]
 80086dc:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80086e6:	6879      	ldr	r1, [r7, #4]
 80086e8:	e9c1 2306 	strd	r2, r3, [r1, #24]
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80086f2:	6879      	ldr	r1, [r7, #4]
 80086f4:	e9c1 2308 	strd	r2, r3, [r1, #32]
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	4618      	mov	r0, r3
 80086fc:	3708      	adds	r7, #8
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}
	...

08008704 <updateOdomTF>:
void updateOdomTF(void)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	af00      	add	r7, sp, #0
	odom_tf_msg.header.frame_id = odom_msg.header.frame_id;
 8008708:	4b0f      	ldr	r3, [pc, #60]	@ (8008748 <updateOdomTF+0x44>)
 800870a:	695b      	ldr	r3, [r3, #20]
 800870c:	4a0f      	ldr	r2, [pc, #60]	@ (800874c <updateOdomTF+0x48>)
 800870e:	6153      	str	r3, [r2, #20]
	odom_tf_msg.child_frame_id = odom_msg.child_frame_id;
 8008710:	4b0d      	ldr	r3, [pc, #52]	@ (8008748 <updateOdomTF+0x44>)
 8008712:	699b      	ldr	r3, [r3, #24]
 8008714:	4a0d      	ldr	r2, [pc, #52]	@ (800874c <updateOdomTF+0x48>)
 8008716:	6193      	str	r3, [r2, #24]

	odom_tf_msg.transform.translation.x = odom_msg.pose.pose.position.x;
 8008718:	4b0b      	ldr	r3, [pc, #44]	@ (8008748 <updateOdomTF+0x44>)
 800871a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800871e:	490b      	ldr	r1, [pc, #44]	@ (800874c <updateOdomTF+0x48>)
 8008720:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	odom_tf_msg.transform.translation.y = odom_msg.pose.pose.position.y;
 8008724:	4b08      	ldr	r3, [pc, #32]	@ (8008748 <updateOdomTF+0x44>)
 8008726:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 800872a:	4908      	ldr	r1, [pc, #32]	@ (800874c <updateOdomTF+0x48>)
 800872c:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
	odom_tf_msg.transform.translation.z = odom_msg.pose.pose.position.z;
 8008730:	4b05      	ldr	r3, [pc, #20]	@ (8008748 <updateOdomTF+0x44>)
 8008732:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 8008736:	4905      	ldr	r1, [pc, #20]	@ (800874c <updateOdomTF+0x48>)
 8008738:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
	odom_tf_msg.transform.rotation = odom_msg.pose.pose.orientation;
 800873c:	4904      	ldr	r1, [pc, #16]	@ (8008750 <updateOdomTF+0x4c>)
 800873e:	4805      	ldr	r0, [pc, #20]	@ (8008754 <updateOdomTF+0x50>)
 8008740:	f7ff ffb7 	bl	80086b2 <_ZN13geometry_msgs10QuaternionaSERKS0_>
}
 8008744:	bf00      	nop
 8008746:	bd80      	pop	{r7, pc}
 8008748:	20008560 	.word	0x20008560
 800874c:	200088f0 	.word	0x200088f0
 8008750:	200085b0 	.word	0x200085b0
 8008754:	20008938 	.word	0x20008938

08008758 <updateJointStates>:
void updateJointStates(void)
{
 8008758:	b480      	push	{r7}
 800875a:	b083      	sub	sp, #12
 800875c:	af00      	add	r7, sp, #0
	joint_states_msg.header.frame_id = base_frame_id;
 800875e:	4b11      	ldr	r3, [pc, #68]	@ (80087a4 <updateJointStates+0x4c>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	4a11      	ldr	r2, [pc, #68]	@ (80087a8 <updateJointStates+0x50>)
 8008764:	6153      	str	r3, [r2, #20]
	for (int i = 0; i < NUM_OF_MOTOR; i++)
 8008766:	2300      	movs	r3, #0
 8008768:	607b      	str	r3, [r7, #4]
 800876a:	e012      	b.n	8008792 <updateJointStates+0x3a>
	{
		joint_states_pos[i] = meas_theta[i];
 800876c:	4a0f      	ldr	r2, [pc, #60]	@ (80087ac <updateJointStates+0x54>)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008774:	490e      	ldr	r1, [pc, #56]	@ (80087b0 <updateJointStates+0x58>)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		joint_states_vel[i] = meas_wheel_angular_vel[i];
 800877c:	4a0d      	ldr	r2, [pc, #52]	@ (80087b4 <updateJointStates+0x5c>)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008784:	490c      	ldr	r1, [pc, #48]	@ (80087b8 <updateJointStates+0x60>)
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < NUM_OF_MOTOR; i++)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	3301      	adds	r3, #1
 8008790:	607b      	str	r3, [r7, #4]
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2b03      	cmp	r3, #3
 8008796:	dde9      	ble.n	800876c <updateJointStates+0x14>
	}
}
 8008798:	bf00      	nop
 800879a:	bf00      	nop
 800879c:	370c      	adds	r7, #12
 800879e:	46bd      	mov	sp, r7
 80087a0:	bc80      	pop	{r7}
 80087a2:	4770      	bx	lr
 80087a4:	20000000 	.word	0x20000000
 80087a8:	20008880 	.word	0x20008880
 80087ac:	20008a54 	.word	0x20008a54
 80087b0:	20008a64 	.word	0x20008a64
 80087b4:	20008a34 	.word	0x20008a34
 80087b8:	20008a74 	.word	0x20008a74

080087bc <calculateRpm>:
/* MSG UPDATE FUNCTIONS END */

/* DATA HANDLE FUNCTIONS START */
void calculateRpm(void)
{
 80087bc:	b5b0      	push	{r4, r5, r7, lr}
 80087be:	b082      	sub	sp, #8
 80087c0:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_OF_MOTOR; ++i)
 80087c2:	2300      	movs	r3, #0
 80087c4:	607b      	str	r3, [r7, #4]
 80087c6:	e0cd      	b.n	8008964 <calculateRpm+0x1a8>
	{
		if (encoder[i]->tick < prev_tick[i])
 80087c8:	4a6b      	ldr	r2, [pc, #428]	@ (8008978 <calculateRpm+0x1bc>)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80087d0:	881a      	ldrh	r2, [r3, #0]
 80087d2:	496a      	ldr	r1, [pc, #424]	@ (800897c <calculateRpm+0x1c0>)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80087da:	429a      	cmp	r2, r3
 80087dc:	d215      	bcs.n	800880a <calculateRpm+0x4e>
		{
			d_tick = encoder[i]->tick + (encoder[i]->max_count - prev_tick[i]);
 80087de:	4a66      	ldr	r2, [pc, #408]	@ (8008978 <calculateRpm+0x1bc>)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80087e6:	881a      	ldrh	r2, [r3, #0]
 80087e8:	4963      	ldr	r1, [pc, #396]	@ (8008978 <calculateRpm+0x1bc>)
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80087f0:	685b      	ldr	r3, [r3, #4]
 80087f2:	b299      	uxth	r1, r3
 80087f4:	4861      	ldr	r0, [pc, #388]	@ (800897c <calculateRpm+0x1c0>)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80087fc:	1acb      	subs	r3, r1, r3
 80087fe:	b29b      	uxth	r3, r3
 8008800:	4413      	add	r3, r2
 8008802:	b29a      	uxth	r2, r3
 8008804:	4b5e      	ldr	r3, [pc, #376]	@ (8008980 <calculateRpm+0x1c4>)
 8008806:	801a      	strh	r2, [r3, #0]
 8008808:	e00c      	b.n	8008824 <calculateRpm+0x68>
		}
		else
		{
			d_tick = encoder[i]->tick - prev_tick[i];
 800880a:	4a5b      	ldr	r2, [pc, #364]	@ (8008978 <calculateRpm+0x1bc>)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008812:	881a      	ldrh	r2, [r3, #0]
 8008814:	4959      	ldr	r1, [pc, #356]	@ (800897c <calculateRpm+0x1c0>)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800881c:	1ad3      	subs	r3, r2, r3
 800881e:	b29a      	uxth	r2, r3
 8008820:	4b57      	ldr	r3, [pc, #348]	@ (8008980 <calculateRpm+0x1c4>)
 8008822:	801a      	strh	r2, [r3, #0]
		}
		prev_tick[i] = encoder[i]->tick;
 8008824:	4a54      	ldr	r2, [pc, #336]	@ (8008978 <calculateRpm+0x1bc>)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800882c:	8819      	ldrh	r1, [r3, #0]
 800882e:	4a53      	ldr	r2, [pc, #332]	@ (800897c <calculateRpm+0x1c0>)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		// Get the number of rotation
		meas_wheel_angular_vel[i] = static_cast<float>(d_tick) / ENCODER_RESOLUTION;
 8008836:	4b52      	ldr	r3, [pc, #328]	@ (8008980 <calculateRpm+0x1c4>)
 8008838:	881b      	ldrh	r3, [r3, #0]
 800883a:	4618      	mov	r0, r3
 800883c:	f7f8 fa80 	bl	8000d40 <__aeabi_ui2f>
 8008840:	4603      	mov	r3, r0
 8008842:	4950      	ldr	r1, [pc, #320]	@ (8008984 <calculateRpm+0x1c8>)
 8008844:	4618      	mov	r0, r3
 8008846:	f7f8 fb87 	bl	8000f58 <__aeabi_fdiv>
 800884a:	4603      	mov	r3, r0
 800884c:	4619      	mov	r1, r3
 800884e:	4a4e      	ldr	r2, [pc, #312]	@ (8008988 <calculateRpm+0x1cc>)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		// Get the rotation per second
		meas_wheel_angular_vel[i] *= VEL_FEEDBACK_FREQUENCY;
 8008856:	4a4c      	ldr	r2, [pc, #304]	@ (8008988 <calculateRpm+0x1cc>)
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800885e:	494b      	ldr	r1, [pc, #300]	@ (800898c <calculateRpm+0x1d0>)
 8008860:	4618      	mov	r0, r3
 8008862:	f7f8 fac5 	bl	8000df0 <__aeabi_fmul>
 8008866:	4603      	mov	r3, r0
 8008868:	4619      	mov	r1, r3
 800886a:	4a47      	ldr	r2, [pc, #284]	@ (8008988 <calculateRpm+0x1cc>)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		// Get the radians per second
		meas_wheel_angular_vel[i] *= 2 * PI;
 8008872:	4a45      	ldr	r2, [pc, #276]	@ (8008988 <calculateRpm+0x1cc>)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800887a:	4945      	ldr	r1, [pc, #276]	@ (8008990 <calculateRpm+0x1d4>)
 800887c:	4618      	mov	r0, r3
 800887e:	f7f8 fab7 	bl	8000df0 <__aeabi_fmul>
 8008882:	4603      	mov	r3, r0
 8008884:	4619      	mov	r1, r3
 8008886:	4a40      	ldr	r2, [pc, #256]	@ (8008988 <calculateRpm+0x1cc>)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		// Apply Low Pass filter
		meas_wheel_angular_vel[i] = mecabot_motor[i]->direction * FO_IIR_Compute(encoder_filter[i], meas_wheel_angular_vel[i]);
 800888e:	4a41      	ldr	r2, [pc, #260]	@ (8008994 <calculateRpm+0x1d8>)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008896:	f993 3000 	ldrsb.w	r3, [r3]
 800889a:	4618      	mov	r0, r3
 800889c:	f7f8 fa54 	bl	8000d48 <__aeabi_i2f>
 80088a0:	4604      	mov	r4, r0
 80088a2:	4a3d      	ldr	r2, [pc, #244]	@ (8008998 <calculateRpm+0x1dc>)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80088aa:	4937      	ldr	r1, [pc, #220]	@ (8008988 <calculateRpm+0x1cc>)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80088b2:	4619      	mov	r1, r3
 80088b4:	4610      	mov	r0, r2
 80088b6:	f7f8 fcd4 	bl	8001262 <FO_IIR_Compute>
 80088ba:	4603      	mov	r3, r0
 80088bc:	4619      	mov	r1, r3
 80088be:	4620      	mov	r0, r4
 80088c0:	f7f8 fa96 	bl	8000df0 <__aeabi_fmul>
 80088c4:	4603      	mov	r3, r0
 80088c6:	4619      	mov	r1, r3
 80088c8:	4a2f      	ldr	r2, [pc, #188]	@ (8008988 <calculateRpm+0x1cc>)
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		if ((meas_wheel_angular_vel[i] > -0.00001f) && (meas_wheel_angular_vel[i] < 0.00001f))	meas_wheel_angular_vel[i] = 0;
 80088d0:	4a2d      	ldr	r2, [pc, #180]	@ (8008988 <calculateRpm+0x1cc>)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80088d8:	4930      	ldr	r1, [pc, #192]	@ (800899c <calculateRpm+0x1e0>)
 80088da:	4618      	mov	r0, r3
 80088dc:	f7f8 fc44 	bl	8001168 <__aeabi_fcmpgt>
 80088e0:	4603      	mov	r3, r0
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d010      	beq.n	8008908 <calculateRpm+0x14c>
 80088e6:	4a28      	ldr	r2, [pc, #160]	@ (8008988 <calculateRpm+0x1cc>)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80088ee:	492c      	ldr	r1, [pc, #176]	@ (80089a0 <calculateRpm+0x1e4>)
 80088f0:	4618      	mov	r0, r3
 80088f2:	f7f8 fc1b 	bl	800112c <__aeabi_fcmplt>
 80088f6:	4603      	mov	r3, r0
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d005      	beq.n	8008908 <calculateRpm+0x14c>
 80088fc:	4a22      	ldr	r2, [pc, #136]	@ (8008988 <calculateRpm+0x1cc>)
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	f04f 0100 	mov.w	r1, #0
 8008904:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		rpm_msg[i].data = meas_wheel_angular_vel[i];
 8008908:	4a1f      	ldr	r2, [pc, #124]	@ (8008988 <calculateRpm+0x1cc>)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008910:	4924      	ldr	r1, [pc, #144]	@ (80089a4 <calculateRpm+0x1e8>)
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	00db      	lsls	r3, r3, #3
 8008916:	440b      	add	r3, r1
 8008918:	605a      	str	r2, [r3, #4]

		meas_theta[i] += meas_wheel_angular_vel[i] * (float)dt[wheel_velocity_feedback_event] / 1000.0f;
 800891a:	4a23      	ldr	r2, [pc, #140]	@ (80089a8 <calculateRpm+0x1ec>)
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008922:	4a19      	ldr	r2, [pc, #100]	@ (8008988 <calculateRpm+0x1cc>)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 800892a:	4b20      	ldr	r3, [pc, #128]	@ (80089ac <calculateRpm+0x1f0>)
 800892c:	685b      	ldr	r3, [r3, #4]
 800892e:	4618      	mov	r0, r3
 8008930:	f7f8 fa06 	bl	8000d40 <__aeabi_ui2f>
 8008934:	4603      	mov	r3, r0
 8008936:	4619      	mov	r1, r3
 8008938:	4628      	mov	r0, r5
 800893a:	f7f8 fa59 	bl	8000df0 <__aeabi_fmul>
 800893e:	4603      	mov	r3, r0
 8008940:	491b      	ldr	r1, [pc, #108]	@ (80089b0 <calculateRpm+0x1f4>)
 8008942:	4618      	mov	r0, r3
 8008944:	f7f8 fb08 	bl	8000f58 <__aeabi_fdiv>
 8008948:	4603      	mov	r3, r0
 800894a:	4619      	mov	r1, r3
 800894c:	4620      	mov	r0, r4
 800894e:	f7f8 f947 	bl	8000be0 <__addsf3>
 8008952:	4603      	mov	r3, r0
 8008954:	4619      	mov	r1, r3
 8008956:	4a14      	ldr	r2, [pc, #80]	@ (80089a8 <calculateRpm+0x1ec>)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < NUM_OF_MOTOR; ++i)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	3301      	adds	r3, #1
 8008962:	607b      	str	r3, [r7, #4]
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2b03      	cmp	r3, #3
 8008968:	f77f af2e 	ble.w	80087c8 <calculateRpm+0xc>
	}
}
 800896c:	bf00      	nop
 800896e:	bf00      	nop
 8008970:	3708      	adds	r7, #8
 8008972:	46bd      	mov	sp, r7
 8008974:	bdb0      	pop	{r4, r5, r7, pc}
 8008976:	bf00      	nop
 8008978:	20008aac 	.word	0x20008aac
 800897c:	20008a1c 	.word	0x20008a1c
 8008980:	20008a98 	.word	0x20008a98
 8008984:	41a00000 	.word	0x41a00000
 8008988:	20008a34 	.word	0x20008a34
 800898c:	41200000 	.word	0x41200000
 8008990:	40c90fdb 	.word	0x40c90fdb
 8008994:	20008a9c 	.word	0x20008a9c
 8008998:	20008abc 	.word	0x20008abc
 800899c:	b727c5ac 	.word	0xb727c5ac
 80089a0:	3727c5ac 	.word	0x3727c5ac
 80089a4:	20008380 	.word	0x20008380
 80089a8:	20008a54 	.word	0x20008a54
 80089ac:	20000008 	.word	0x20000008
 80089b0:	447a0000 	.word	0x447a0000
 80089b4:	00000000 	.word	0x00000000

080089b8 <calculateOdometry>:
void calculateOdometry(void)
{
 80089b8:	b5b0      	push	{r4, r5, r7, lr}
 80089ba:	b088      	sub	sp, #32
 80089bc:	af00      	add	r7, sp, #0
	float w[NUM_OF_MOTOR] = { 0.0 };
 80089be:	1d3b      	adds	r3, r7, #4
 80089c0:	2200      	movs	r2, #0
 80089c2:	601a      	str	r2, [r3, #0]
 80089c4:	605a      	str	r2, [r3, #4]
 80089c6:	609a      	str	r2, [r3, #8]
 80089c8:	60da      	str	r2, [r3, #12]
	float new_yaw, diff_yaw;

	for (int i = 0; i < NUM_OF_MOTOR; i++)
 80089ca:	2300      	movs	r3, #0
 80089cc:	61fb      	str	r3, [r7, #28]
 80089ce:	e00c      	b.n	80089ea <calculateOdometry+0x32>
	{
		// Calculate filtered wheel velocity (rad/s) from d_tick
		w[i] = meas_wheel_angular_vel[i];
 80089d0:	4a8f      	ldr	r2, [pc, #572]	@ (8008c10 <calculateOdometry+0x258>)
 80089d2:	69fb      	ldr	r3, [r7, #28]
 80089d4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80089d8:	69fb      	ldr	r3, [r7, #28]
 80089da:	009b      	lsls	r3, r3, #2
 80089dc:	3320      	adds	r3, #32
 80089de:	443b      	add	r3, r7
 80089e0:	f843 2c1c 	str.w	r2, [r3, #-28]
	for (int i = 0; i < NUM_OF_MOTOR; i++)
 80089e4:	69fb      	ldr	r3, [r7, #28]
 80089e6:	3301      	adds	r3, #1
 80089e8:	61fb      	str	r3, [r7, #28]
 80089ea:	69fb      	ldr	r3, [r7, #28]
 80089ec:	2b03      	cmp	r3, #3
 80089ee:	ddef      	ble.n	80089d0 <calculateOdometry+0x18>
	}

	// Robot velocity in the base frame (calculated from Inverse Kinematics)
	float C = 2 / (WHEEL_SEPARATION_X + WHEEL_SEPARATION_Y);
 80089f0:	4b88      	ldr	r3, [pc, #544]	@ (8008c14 <calculateOdometry+0x25c>)
 80089f2:	61bb      	str	r3, [r7, #24]
	odom_vel[linear_x]  = (WHEEL_RADIUS / 4) * ( w[0] + w[1] + w[2] + w[3]);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	68ba      	ldr	r2, [r7, #8]
 80089f8:	4611      	mov	r1, r2
 80089fa:	4618      	mov	r0, r3
 80089fc:	f7f8 f8f0 	bl	8000be0 <__addsf3>
 8008a00:	4603      	mov	r3, r0
 8008a02:	461a      	mov	r2, r3
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	4619      	mov	r1, r3
 8008a08:	4610      	mov	r0, r2
 8008a0a:	f7f8 f8e9 	bl	8000be0 <__addsf3>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	461a      	mov	r2, r3
 8008a12:	693b      	ldr	r3, [r7, #16]
 8008a14:	4619      	mov	r1, r3
 8008a16:	4610      	mov	r0, r2
 8008a18:	f7f8 f8e2 	bl	8000be0 <__addsf3>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	4618      	mov	r0, r3
 8008a20:	f7f7 fd6e 	bl	8000500 <__aeabi_f2d>
 8008a24:	a378      	add	r3, pc, #480	@ (adr r3, 8008c08 <calculateOdometry+0x250>)
 8008a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a2a:	f7f7 fdc1 	bl	80005b0 <__aeabi_dmul>
 8008a2e:	4602      	mov	r2, r0
 8008a30:	460b      	mov	r3, r1
 8008a32:	4610      	mov	r0, r2
 8008a34:	4619      	mov	r1, r3
 8008a36:	f7f8 f87d 	bl	8000b34 <__aeabi_d2f>
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	4a76      	ldr	r2, [pc, #472]	@ (8008c18 <calculateOdometry+0x260>)
 8008a3e:	6013      	str	r3, [r2, #0]
	odom_vel[linear_y]  = (WHEEL_RADIUS / 4) * (-w[0] + w[1] + w[2] - w[3]);
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	687a      	ldr	r2, [r7, #4]
 8008a44:	4611      	mov	r1, r2
 8008a46:	4618      	mov	r0, r3
 8008a48:	f7f8 f8c8 	bl	8000bdc <__aeabi_fsub>
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	461a      	mov	r2, r3
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	4619      	mov	r1, r3
 8008a54:	4610      	mov	r0, r2
 8008a56:	f7f8 f8c3 	bl	8000be0 <__addsf3>
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	461a      	mov	r2, r3
 8008a5e:	693b      	ldr	r3, [r7, #16]
 8008a60:	4619      	mov	r1, r3
 8008a62:	4610      	mov	r0, r2
 8008a64:	f7f8 f8ba 	bl	8000bdc <__aeabi_fsub>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	f7f7 fd48 	bl	8000500 <__aeabi_f2d>
 8008a70:	a365      	add	r3, pc, #404	@ (adr r3, 8008c08 <calculateOdometry+0x250>)
 8008a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a76:	f7f7 fd9b 	bl	80005b0 <__aeabi_dmul>
 8008a7a:	4602      	mov	r2, r0
 8008a7c:	460b      	mov	r3, r1
 8008a7e:	4610      	mov	r0, r2
 8008a80:	4619      	mov	r1, r3
 8008a82:	f7f8 f857 	bl	8000b34 <__aeabi_d2f>
 8008a86:	4603      	mov	r3, r0
 8008a88:	4a63      	ldr	r2, [pc, #396]	@ (8008c18 <calculateOdometry+0x260>)
 8008a8a:	6053      	str	r3, [r2, #4]
	odom_vel[angular_z] = (WHEEL_RADIUS / 4) * C * (-w[0] + w[1] - w[2] + w[3]);
 8008a8c:	69b8      	ldr	r0, [r7, #24]
 8008a8e:	f7f7 fd37 	bl	8000500 <__aeabi_f2d>
 8008a92:	a35d      	add	r3, pc, #372	@ (adr r3, 8008c08 <calculateOdometry+0x250>)
 8008a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a98:	f7f7 fd8a 	bl	80005b0 <__aeabi_dmul>
 8008a9c:	4602      	mov	r2, r0
 8008a9e:	460b      	mov	r3, r1
 8008aa0:	4614      	mov	r4, r2
 8008aa2:	461d      	mov	r5, r3
 8008aa4:	68bb      	ldr	r3, [r7, #8]
 8008aa6:	687a      	ldr	r2, [r7, #4]
 8008aa8:	4611      	mov	r1, r2
 8008aaa:	4618      	mov	r0, r3
 8008aac:	f7f8 f896 	bl	8000bdc <__aeabi_fsub>
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	461a      	mov	r2, r3
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	4619      	mov	r1, r3
 8008ab8:	4610      	mov	r0, r2
 8008aba:	f7f8 f88f 	bl	8000bdc <__aeabi_fsub>
 8008abe:	4603      	mov	r3, r0
 8008ac0:	461a      	mov	r2, r3
 8008ac2:	693b      	ldr	r3, [r7, #16]
 8008ac4:	4619      	mov	r1, r3
 8008ac6:	4610      	mov	r0, r2
 8008ac8:	f7f8 f88a 	bl	8000be0 <__addsf3>
 8008acc:	4603      	mov	r3, r0
 8008ace:	4618      	mov	r0, r3
 8008ad0:	f7f7 fd16 	bl	8000500 <__aeabi_f2d>
 8008ad4:	4602      	mov	r2, r0
 8008ad6:	460b      	mov	r3, r1
 8008ad8:	4620      	mov	r0, r4
 8008ada:	4629      	mov	r1, r5
 8008adc:	f7f7 fd68 	bl	80005b0 <__aeabi_dmul>
 8008ae0:	4602      	mov	r2, r0
 8008ae2:	460b      	mov	r3, r1
 8008ae4:	4610      	mov	r0, r2
 8008ae6:	4619      	mov	r1, r3
 8008ae8:	f7f8 f824 	bl	8000b34 <__aeabi_d2f>
 8008aec:	4603      	mov	r3, r0
 8008aee:	4a4a      	ldr	r2, [pc, #296]	@ (8008c18 <calculateOdometry+0x260>)
 8008af0:	6093      	str	r3, [r2, #8]

	updateYaw(odom_vel[angular_z], ((float)dt[odom_publish_event])/1000.0f);
 8008af2:	4b49      	ldr	r3, [pc, #292]	@ (8008c18 <calculateOdometry+0x260>)
 8008af4:	689c      	ldr	r4, [r3, #8]
 8008af6:	4b49      	ldr	r3, [pc, #292]	@ (8008c1c <calculateOdometry+0x264>)
 8008af8:	68db      	ldr	r3, [r3, #12]
 8008afa:	4618      	mov	r0, r3
 8008afc:	f7f8 f920 	bl	8000d40 <__aeabi_ui2f>
 8008b00:	4603      	mov	r3, r0
 8008b02:	4947      	ldr	r1, [pc, #284]	@ (8008c20 <calculateOdometry+0x268>)
 8008b04:	4618      	mov	r0, r3
 8008b06:	f7f8 fa27 	bl	8000f58 <__aeabi_fdiv>
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	4619      	mov	r1, r3
 8008b0e:	4620      	mov	r0, r4
 8008b10:	f7ff fcf0 	bl	80084f4 <updateYaw>
	new_yaw = yaw;
 8008b14:	4b43      	ldr	r3, [pc, #268]	@ (8008c24 <calculateOdometry+0x26c>)
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	617b      	str	r3, [r7, #20]

	// Robot position in the world frame
	odom_pose[linear_x] += (odom_vel[linear_x] * cos(new_yaw) + odom_vel[linear_y] * sin(new_yaw)) * ((float)dt[odom_publish_event]) / 1000.0f;
 8008b1a:	4b3f      	ldr	r3, [pc, #252]	@ (8008c18 <calculateOdometry+0x260>)
 8008b1c:	681c      	ldr	r4, [r3, #0]
 8008b1e:	6978      	ldr	r0, [r7, #20]
 8008b20:	f7f8 fff0 	bl	8001b04 <_ZSt3cosf>
 8008b24:	4603      	mov	r3, r0
 8008b26:	4619      	mov	r1, r3
 8008b28:	4620      	mov	r0, r4
 8008b2a:	f7f8 f961 	bl	8000df0 <__aeabi_fmul>
 8008b2e:	4603      	mov	r3, r0
 8008b30:	461d      	mov	r5, r3
 8008b32:	4b39      	ldr	r3, [pc, #228]	@ (8008c18 <calculateOdometry+0x260>)
 8008b34:	685c      	ldr	r4, [r3, #4]
 8008b36:	6978      	ldr	r0, [r7, #20]
 8008b38:	f7f8 fff0 	bl	8001b1c <_ZSt3sinf>
 8008b3c:	4603      	mov	r3, r0
 8008b3e:	4619      	mov	r1, r3
 8008b40:	4620      	mov	r0, r4
 8008b42:	f7f8 f955 	bl	8000df0 <__aeabi_fmul>
 8008b46:	4603      	mov	r3, r0
 8008b48:	4619      	mov	r1, r3
 8008b4a:	4628      	mov	r0, r5
 8008b4c:	f7f8 f848 	bl	8000be0 <__addsf3>
 8008b50:	4603      	mov	r3, r0
 8008b52:	461c      	mov	r4, r3
 8008b54:	4b31      	ldr	r3, [pc, #196]	@ (8008c1c <calculateOdometry+0x264>)
 8008b56:	68db      	ldr	r3, [r3, #12]
 8008b58:	4618      	mov	r0, r3
 8008b5a:	f7f8 f8f1 	bl	8000d40 <__aeabi_ui2f>
 8008b5e:	4603      	mov	r3, r0
 8008b60:	4619      	mov	r1, r3
 8008b62:	4620      	mov	r0, r4
 8008b64:	f7f8 f944 	bl	8000df0 <__aeabi_fmul>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	492d      	ldr	r1, [pc, #180]	@ (8008c20 <calculateOdometry+0x268>)
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	f7f8 f9f3 	bl	8000f58 <__aeabi_fdiv>
 8008b72:	4603      	mov	r3, r0
 8008b74:	461a      	mov	r2, r3
 8008b76:	4b2c      	ldr	r3, [pc, #176]	@ (8008c28 <calculateOdometry+0x270>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	4619      	mov	r1, r3
 8008b7c:	4610      	mov	r0, r2
 8008b7e:	f7f8 f82f 	bl	8000be0 <__addsf3>
 8008b82:	4603      	mov	r3, r0
 8008b84:	461a      	mov	r2, r3
 8008b86:	4b28      	ldr	r3, [pc, #160]	@ (8008c28 <calculateOdometry+0x270>)
 8008b88:	601a      	str	r2, [r3, #0]
	odom_pose[linear_y] += (odom_vel[linear_x] * sin(new_yaw) + odom_vel[linear_y] * cos(new_yaw)) * ((float)dt[odom_publish_event]) / 1000.0f;
 8008b8a:	4b23      	ldr	r3, [pc, #140]	@ (8008c18 <calculateOdometry+0x260>)
 8008b8c:	681c      	ldr	r4, [r3, #0]
 8008b8e:	6978      	ldr	r0, [r7, #20]
 8008b90:	f7f8 ffc4 	bl	8001b1c <_ZSt3sinf>
 8008b94:	4603      	mov	r3, r0
 8008b96:	4619      	mov	r1, r3
 8008b98:	4620      	mov	r0, r4
 8008b9a:	f7f8 f929 	bl	8000df0 <__aeabi_fmul>
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	461d      	mov	r5, r3
 8008ba2:	4b1d      	ldr	r3, [pc, #116]	@ (8008c18 <calculateOdometry+0x260>)
 8008ba4:	685c      	ldr	r4, [r3, #4]
 8008ba6:	6978      	ldr	r0, [r7, #20]
 8008ba8:	f7f8 ffac 	bl	8001b04 <_ZSt3cosf>
 8008bac:	4603      	mov	r3, r0
 8008bae:	4619      	mov	r1, r3
 8008bb0:	4620      	mov	r0, r4
 8008bb2:	f7f8 f91d 	bl	8000df0 <__aeabi_fmul>
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	4619      	mov	r1, r3
 8008bba:	4628      	mov	r0, r5
 8008bbc:	f7f8 f810 	bl	8000be0 <__addsf3>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	461c      	mov	r4, r3
 8008bc4:	4b15      	ldr	r3, [pc, #84]	@ (8008c1c <calculateOdometry+0x264>)
 8008bc6:	68db      	ldr	r3, [r3, #12]
 8008bc8:	4618      	mov	r0, r3
 8008bca:	f7f8 f8b9 	bl	8000d40 <__aeabi_ui2f>
 8008bce:	4603      	mov	r3, r0
 8008bd0:	4619      	mov	r1, r3
 8008bd2:	4620      	mov	r0, r4
 8008bd4:	f7f8 f90c 	bl	8000df0 <__aeabi_fmul>
 8008bd8:	4603      	mov	r3, r0
 8008bda:	4911      	ldr	r1, [pc, #68]	@ (8008c20 <calculateOdometry+0x268>)
 8008bdc:	4618      	mov	r0, r3
 8008bde:	f7f8 f9bb 	bl	8000f58 <__aeabi_fdiv>
 8008be2:	4603      	mov	r3, r0
 8008be4:	461a      	mov	r2, r3
 8008be6:	4b10      	ldr	r3, [pc, #64]	@ (8008c28 <calculateOdometry+0x270>)
 8008be8:	685b      	ldr	r3, [r3, #4]
 8008bea:	4619      	mov	r1, r3
 8008bec:	4610      	mov	r0, r2
 8008bee:	f7f7 fff7 	bl	8000be0 <__addsf3>
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	461a      	mov	r2, r3
 8008bf6:	4b0c      	ldr	r3, [pc, #48]	@ (8008c28 <calculateOdometry+0x270>)
 8008bf8:	605a      	str	r2, [r3, #4]
	odom_pose[angular_z] = new_yaw;
 8008bfa:	4a0b      	ldr	r2, [pc, #44]	@ (8008c28 <calculateOdometry+0x270>)
 8008bfc:	697b      	ldr	r3, [r7, #20]
 8008bfe:	6093      	str	r3, [r2, #8]
}
 8008c00:	bf00      	nop
 8008c02:	3720      	adds	r7, #32
 8008c04:	46bd      	mov	sp, r7
 8008c06:	bdb0      	pop	{r4, r5, r7, pc}
 8008c08:	eb851eb8 	.word	0xeb851eb8
 8008c0c:	3f7eb851 	.word	0x3f7eb851
 8008c10:	20008a34 	.word	0x20008a34
 8008c14:	40fcf6e5 	.word	0x40fcf6e5
 8008c18:	20008a04 	.word	0x20008a04
 8008c1c:	20000008 	.word	0x20000008
 8008c20:	447a0000 	.word	0x447a0000
 8008c24:	20008adc 	.word	0x20008adc
 8008c28:	200089f8 	.word	0x200089f8
 8008c2c:	00000000 	.word	0x00000000

08008c30 <calculateWheelVelocity>:
void calculateWheelVelocity(void)
{
 8008c30:	b590      	push	{r4, r7, lr}
 8008c32:	b083      	sub	sp, #12
 8008c34:	af00      	add	r7, sp, #0
	float C = (WHEEL_SEPARATION_X + WHEEL_SEPARATION_Y) / 2;
 8008c36:	4b66      	ldr	r3, [pc, #408]	@ (8008dd0 <calculateWheelVelocity+0x1a0>)
 8008c38:	603b      	str	r3, [r7, #0]
	// Inverse kinematics
	wheel_angular_vel[front_left] = INV_WHEEL_RADIUS *
									(goal_vel[linear_x] - goal_vel[linear_y] - C * goal_vel[angular_z]);
 8008c3a:	4b66      	ldr	r3, [pc, #408]	@ (8008dd4 <calculateWheelVelocity+0x1a4>)
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	4a65      	ldr	r2, [pc, #404]	@ (8008dd4 <calculateWheelVelocity+0x1a4>)
 8008c40:	6852      	ldr	r2, [r2, #4]
 8008c42:	4611      	mov	r1, r2
 8008c44:	4618      	mov	r0, r3
 8008c46:	f7f7 ffc9 	bl	8000bdc <__aeabi_fsub>
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	461c      	mov	r4, r3
 8008c4e:	4b61      	ldr	r3, [pc, #388]	@ (8008dd4 <calculateWheelVelocity+0x1a4>)
 8008c50:	689b      	ldr	r3, [r3, #8]
 8008c52:	6839      	ldr	r1, [r7, #0]
 8008c54:	4618      	mov	r0, r3
 8008c56:	f7f8 f8cb 	bl	8000df0 <__aeabi_fmul>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	4619      	mov	r1, r3
 8008c5e:	4620      	mov	r0, r4
 8008c60:	f7f7 ffbc 	bl	8000bdc <__aeabi_fsub>
 8008c64:	4603      	mov	r3, r0
 8008c66:	4618      	mov	r0, r3
 8008c68:	f7f7 fc4a 	bl	8000500 <__aeabi_f2d>
	wheel_angular_vel[front_left] = INV_WHEEL_RADIUS *
 8008c6c:	a356      	add	r3, pc, #344	@ (adr r3, 8008dc8 <calculateWheelVelocity+0x198>)
 8008c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c72:	f7f7 fc9d 	bl	80005b0 <__aeabi_dmul>
 8008c76:	4602      	mov	r2, r0
 8008c78:	460b      	mov	r3, r1
 8008c7a:	4610      	mov	r0, r2
 8008c7c:	4619      	mov	r1, r3
 8008c7e:	f7f7 ff59 	bl	8000b34 <__aeabi_d2f>
 8008c82:	4603      	mov	r3, r0
 8008c84:	4a54      	ldr	r2, [pc, #336]	@ (8008dd8 <calculateWheelVelocity+0x1a8>)
 8008c86:	6013      	str	r3, [r2, #0]
	wheel_angular_vel[front_right] = INV_WHEEL_RADIUS *
									(goal_vel[linear_x] + goal_vel[linear_y] + C * goal_vel[angular_z]);
 8008c88:	4b52      	ldr	r3, [pc, #328]	@ (8008dd4 <calculateWheelVelocity+0x1a4>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	4a51      	ldr	r2, [pc, #324]	@ (8008dd4 <calculateWheelVelocity+0x1a4>)
 8008c8e:	6852      	ldr	r2, [r2, #4]
 8008c90:	4611      	mov	r1, r2
 8008c92:	4618      	mov	r0, r3
 8008c94:	f7f7 ffa4 	bl	8000be0 <__addsf3>
 8008c98:	4603      	mov	r3, r0
 8008c9a:	461c      	mov	r4, r3
 8008c9c:	4b4d      	ldr	r3, [pc, #308]	@ (8008dd4 <calculateWheelVelocity+0x1a4>)
 8008c9e:	689b      	ldr	r3, [r3, #8]
 8008ca0:	6839      	ldr	r1, [r7, #0]
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	f7f8 f8a4 	bl	8000df0 <__aeabi_fmul>
 8008ca8:	4603      	mov	r3, r0
 8008caa:	4619      	mov	r1, r3
 8008cac:	4620      	mov	r0, r4
 8008cae:	f7f7 ff97 	bl	8000be0 <__addsf3>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	f7f7 fc23 	bl	8000500 <__aeabi_f2d>
	wheel_angular_vel[front_right] = INV_WHEEL_RADIUS *
 8008cba:	a343      	add	r3, pc, #268	@ (adr r3, 8008dc8 <calculateWheelVelocity+0x198>)
 8008cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cc0:	f7f7 fc76 	bl	80005b0 <__aeabi_dmul>
 8008cc4:	4602      	mov	r2, r0
 8008cc6:	460b      	mov	r3, r1
 8008cc8:	4610      	mov	r0, r2
 8008cca:	4619      	mov	r1, r3
 8008ccc:	f7f7 ff32 	bl	8000b34 <__aeabi_d2f>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	4a41      	ldr	r2, [pc, #260]	@ (8008dd8 <calculateWheelVelocity+0x1a8>)
 8008cd4:	6053      	str	r3, [r2, #4]
	wheel_angular_vel[back_left] = INV_WHEEL_RADIUS *
									(goal_vel[linear_x] + goal_vel[linear_y] - C * goal_vel[angular_z]);
 8008cd6:	4b3f      	ldr	r3, [pc, #252]	@ (8008dd4 <calculateWheelVelocity+0x1a4>)
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	4a3e      	ldr	r2, [pc, #248]	@ (8008dd4 <calculateWheelVelocity+0x1a4>)
 8008cdc:	6852      	ldr	r2, [r2, #4]
 8008cde:	4611      	mov	r1, r2
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	f7f7 ff7d 	bl	8000be0 <__addsf3>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	461c      	mov	r4, r3
 8008cea:	4b3a      	ldr	r3, [pc, #232]	@ (8008dd4 <calculateWheelVelocity+0x1a4>)
 8008cec:	689b      	ldr	r3, [r3, #8]
 8008cee:	6839      	ldr	r1, [r7, #0]
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	f7f8 f87d 	bl	8000df0 <__aeabi_fmul>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	4619      	mov	r1, r3
 8008cfa:	4620      	mov	r0, r4
 8008cfc:	f7f7 ff6e 	bl	8000bdc <__aeabi_fsub>
 8008d00:	4603      	mov	r3, r0
 8008d02:	4618      	mov	r0, r3
 8008d04:	f7f7 fbfc 	bl	8000500 <__aeabi_f2d>
	wheel_angular_vel[back_left] = INV_WHEEL_RADIUS *
 8008d08:	a32f      	add	r3, pc, #188	@ (adr r3, 8008dc8 <calculateWheelVelocity+0x198>)
 8008d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d0e:	f7f7 fc4f 	bl	80005b0 <__aeabi_dmul>
 8008d12:	4602      	mov	r2, r0
 8008d14:	460b      	mov	r3, r1
 8008d16:	4610      	mov	r0, r2
 8008d18:	4619      	mov	r1, r3
 8008d1a:	f7f7 ff0b 	bl	8000b34 <__aeabi_d2f>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	4a2d      	ldr	r2, [pc, #180]	@ (8008dd8 <calculateWheelVelocity+0x1a8>)
 8008d22:	6093      	str	r3, [r2, #8]
	wheel_angular_vel[back_right] = INV_WHEEL_RADIUS *
									(goal_vel[linear_x] - goal_vel[linear_y] + C * goal_vel[angular_z]);
 8008d24:	4b2b      	ldr	r3, [pc, #172]	@ (8008dd4 <calculateWheelVelocity+0x1a4>)
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	4a2a      	ldr	r2, [pc, #168]	@ (8008dd4 <calculateWheelVelocity+0x1a4>)
 8008d2a:	6852      	ldr	r2, [r2, #4]
 8008d2c:	4611      	mov	r1, r2
 8008d2e:	4618      	mov	r0, r3
 8008d30:	f7f7 ff54 	bl	8000bdc <__aeabi_fsub>
 8008d34:	4603      	mov	r3, r0
 8008d36:	461c      	mov	r4, r3
 8008d38:	4b26      	ldr	r3, [pc, #152]	@ (8008dd4 <calculateWheelVelocity+0x1a4>)
 8008d3a:	689b      	ldr	r3, [r3, #8]
 8008d3c:	6839      	ldr	r1, [r7, #0]
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f7f8 f856 	bl	8000df0 <__aeabi_fmul>
 8008d44:	4603      	mov	r3, r0
 8008d46:	4619      	mov	r1, r3
 8008d48:	4620      	mov	r0, r4
 8008d4a:	f7f7 ff49 	bl	8000be0 <__addsf3>
 8008d4e:	4603      	mov	r3, r0
 8008d50:	4618      	mov	r0, r3
 8008d52:	f7f7 fbd5 	bl	8000500 <__aeabi_f2d>
	wheel_angular_vel[back_right] = INV_WHEEL_RADIUS *
 8008d56:	a31c      	add	r3, pc, #112	@ (adr r3, 8008dc8 <calculateWheelVelocity+0x198>)
 8008d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d5c:	f7f7 fc28 	bl	80005b0 <__aeabi_dmul>
 8008d60:	4602      	mov	r2, r0
 8008d62:	460b      	mov	r3, r1
 8008d64:	4610      	mov	r0, r2
 8008d66:	4619      	mov	r1, r3
 8008d68:	f7f7 fee4 	bl	8000b34 <__aeabi_d2f>
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	4a1a      	ldr	r2, [pc, #104]	@ (8008dd8 <calculateWheelVelocity+0x1a8>)
 8008d70:	60d3      	str	r3, [r2, #12]

	for (int i = 0; i < NUM_OF_MOTOR; i++)
 8008d72:	2300      	movs	r3, #0
 8008d74:	607b      	str	r3, [r7, #4]
 8008d76:	e01f      	b.n	8008db8 <calculateWheelVelocity+0x188>
	{
		wheel_angular_vel[i] = constraint(wheel_angular_vel[i], WHEEL_MIN_ANGULAR_VELOCITY, WHEEL_MAX_ANGULAR_VELOCITY);
 8008d78:	4a17      	ldr	r2, [pc, #92]	@ (8008dd8 <calculateWheelVelocity+0x1a8>)
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d80:	4a16      	ldr	r2, [pc, #88]	@ (8008ddc <calculateWheelVelocity+0x1ac>)
 8008d82:	4917      	ldr	r1, [pc, #92]	@ (8008de0 <calculateWheelVelocity+0x1b0>)
 8008d84:	4618      	mov	r0, r3
 8008d86:	f7ff f991 	bl	80080ac <_Z10constraintfff>
 8008d8a:	4602      	mov	r2, r0
 8008d8c:	4912      	ldr	r1, [pc, #72]	@ (8008dd8 <calculateWheelVelocity+0x1a8>)
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		controller[i]->set_point = wheel_angular_vel[i];
 8008d94:	4a10      	ldr	r2, [pc, #64]	@ (8008dd8 <calculateWheelVelocity+0x1a8>)
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008d9c:	4911      	ldr	r1, [pc, #68]	@ (8008de4 <calculateWheelVelocity+0x1b4>)
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 8008da4:	4610      	mov	r0, r2
 8008da6:	f7f7 fbab 	bl	8000500 <__aeabi_f2d>
 8008daa:	4602      	mov	r2, r0
 8008dac:	460b      	mov	r3, r1
 8008dae:	e9c4 2300 	strd	r2, r3, [r4]
	for (int i = 0; i < NUM_OF_MOTOR; i++)
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	3301      	adds	r3, #1
 8008db6:	607b      	str	r3, [r7, #4]
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2b03      	cmp	r3, #3
 8008dbc:	dddc      	ble.n	8008d78 <calculateWheelVelocity+0x148>
	}
}
 8008dbe:	bf00      	nop
 8008dc0:	bf00      	nop
 8008dc2:	370c      	adds	r7, #12
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd90      	pop	{r4, r7, pc}
 8008dc8:	aaaaaaab 	.word	0xaaaaaaab
 8008dcc:	4040aaaa 	.word	0x4040aaaa
 8008dd0:	3e018937 	.word	0x3e018937
 8008dd4:	20008a10 	.word	0x20008a10
 8008dd8:	20008a24 	.word	0x20008a24
 8008ddc:	41c90fdb 	.word	0x41c90fdb
 8008de0:	c1c90fdb 	.word	0xc1c90fdb
 8008de4:	20008acc 	.word	0x20008acc

08008de8 <publishRobotState>:
	imu_msg.header.frame_id = "/imu";
	imu_msg.header.stamp = nh.now();
	pub_imu.publish(&imu_msg);
}
void publishRobotState(void)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b082      	sub	sp, #8
 8008dec:	af00      	add	r7, sp, #0
	ros::Time now = nh.now();
 8008dee:	463b      	mov	r3, r7
 8008df0:	4909      	ldr	r1, [pc, #36]	@ (8008e18 <publishRobotState+0x30>)
 8008df2:	4618      	mov	r0, r3
 8008df4:	f000 f992 	bl	800911c <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE3nowEv>

	pub_odom.publish(&odom_msg);
 8008df8:	4908      	ldr	r1, [pc, #32]	@ (8008e1c <publishRobotState+0x34>)
 8008dfa:	4809      	ldr	r0, [pc, #36]	@ (8008e20 <publishRobotState+0x38>)
 8008dfc:	f7f9 fcee 	bl	80027dc <_ZN3ros9Publisher7publishEPKNS_3MsgE>
	tf_broadcaster.sendTransform(odom_tf_msg);
 8008e00:	4908      	ldr	r1, [pc, #32]	@ (8008e24 <publishRobotState+0x3c>)
 8008e02:	4809      	ldr	r0, [pc, #36]	@ (8008e28 <publishRobotState+0x40>)
 8008e04:	f7ff f89d 	bl	8007f42 <_ZN2tf20TransformBroadcaster13sendTransformERN13geometry_msgs16TransformStampedE>
	pub_joint_states.publish(&joint_states_msg);
 8008e08:	4908      	ldr	r1, [pc, #32]	@ (8008e2c <publishRobotState+0x44>)
 8008e0a:	4809      	ldr	r0, [pc, #36]	@ (8008e30 <publishRobotState+0x48>)
 8008e0c:	f7f9 fce6 	bl	80027dc <_ZN3ros9Publisher7publishEPKNS_3MsgE>
}
 8008e10:	bf00      	nop
 8008e12:	3708      	adds	r7, #8
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bd80      	pop	{r7, pc}
 8008e18:	20004268 	.word	0x20004268
 8008e1c:	20008560 	.word	0x20008560
 8008e20:	20008868 	.word	0x20008868
 8008e24:	200088f0 	.word	0x200088f0
 8008e28:	20008960 	.word	0x20008960
 8008e2c:	20008880 	.word	0x20008880
 8008e30:	200088d8 	.word	0x200088d8

08008e34 <controlMotors>:
/* PUBLISH FUNCTIONS START */

/* CONTROL FUNCTIONS START */
void controlMotors(void)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b084      	sub	sp, #16
 8008e38:	af00      	add	r7, sp, #0
	int8_t direction;
	for (int i = 0; i < NUM_OF_MOTOR; i++)
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	60bb      	str	r3, [r7, #8]
 8008e3e:	e05f      	b.n	8008f00 <controlMotors+0xcc>
	{
	    if ((meas_rpm[i] > -0.00001f) && (meas_rpm[i] < 0.00001f))
 8008e40:	4a33      	ldr	r2, [pc, #204]	@ (8008f10 <controlMotors+0xdc>)
 8008e42:	68bb      	ldr	r3, [r7, #8]
 8008e44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e48:	4932      	ldr	r1, [pc, #200]	@ (8008f14 <controlMotors+0xe0>)
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	f7f8 f98c 	bl	8001168 <__aeabi_fcmpgt>
 8008e50:	4603      	mov	r3, r0
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d00d      	beq.n	8008e72 <controlMotors+0x3e>
 8008e56:	4a2e      	ldr	r2, [pc, #184]	@ (8008f10 <controlMotors+0xdc>)
 8008e58:	68bb      	ldr	r3, [r7, #8]
 8008e5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e5e:	492e      	ldr	r1, [pc, #184]	@ (8008f18 <controlMotors+0xe4>)
 8008e60:	4618      	mov	r0, r3
 8008e62:	f7f8 f963 	bl	800112c <__aeabi_fcmplt>
 8008e66:	4603      	mov	r3, r0
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d002      	beq.n	8008e72 <controlMotors+0x3e>
		{
			direction = DIRECTION_STOP;
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	73fb      	strb	r3, [r7, #15]
 8008e70:	e01c      	b.n	8008eac <controlMotors+0x78>
		}
		else if (meas_rpm[i] > 0)
 8008e72:	4a27      	ldr	r2, [pc, #156]	@ (8008f10 <controlMotors+0xdc>)
 8008e74:	68bb      	ldr	r3, [r7, #8]
 8008e76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e7a:	f04f 0100 	mov.w	r1, #0
 8008e7e:	4618      	mov	r0, r3
 8008e80:	f7f8 f972 	bl	8001168 <__aeabi_fcmpgt>
 8008e84:	4603      	mov	r3, r0
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d002      	beq.n	8008e90 <controlMotors+0x5c>
		{
			direction = DIRECTION_FORWARD;
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	73fb      	strb	r3, [r7, #15]
 8008e8e:	e00d      	b.n	8008eac <controlMotors+0x78>
		}
		else if (meas_rpm[i] < 0)
 8008e90:	4a1f      	ldr	r2, [pc, #124]	@ (8008f10 <controlMotors+0xdc>)
 8008e92:	68bb      	ldr	r3, [r7, #8]
 8008e94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e98:	f04f 0100 	mov.w	r1, #0
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	f7f8 f945 	bl	800112c <__aeabi_fcmplt>
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d001      	beq.n	8008eac <controlMotors+0x78>
		{
			direction = DIRECTION_BACKWARD;
 8008ea8:	23ff      	movs	r3, #255	@ 0xff
 8008eaa:	73fb      	strb	r3, [r7, #15]
		}
	    Motor_SetDirection(mecabot_motor[i], direction);
 8008eac:	4a1b      	ldr	r2, [pc, #108]	@ (8008f1c <controlMotors+0xe8>)
 8008eae:	68bb      	ldr	r3, [r7, #8]
 8008eb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008eb4:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8008eb8:	4611      	mov	r1, r2
 8008eba:	4618      	mov	r0, r3
 8008ebc:	f7f8 fb38 	bl	8001530 <Motor_SetDirection>

	    //int16_t duty = PID_Compute(controller[i], meas_rpm[i], dt[motor_control_event]);
	    int16_t duty = wheel_angular_vel[i]/WHEEL_MAX_ANGULAR_VELOCITY * 255;
 8008ec0:	4a17      	ldr	r2, [pc, #92]	@ (8008f20 <controlMotors+0xec>)
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ec8:	4916      	ldr	r1, [pc, #88]	@ (8008f24 <controlMotors+0xf0>)
 8008eca:	4618      	mov	r0, r3
 8008ecc:	f7f8 f844 	bl	8000f58 <__aeabi_fdiv>
 8008ed0:	4603      	mov	r3, r0
 8008ed2:	4915      	ldr	r1, [pc, #84]	@ (8008f28 <controlMotors+0xf4>)
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	f7f7 ff8b 	bl	8000df0 <__aeabi_fmul>
 8008eda:	4603      	mov	r3, r0
 8008edc:	4618      	mov	r0, r3
 8008ede:	f7f8 f94d 	bl	800117c <__aeabi_f2iz>
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	80fb      	strh	r3, [r7, #6]
	    Motor_Set_PWM_Duty(mecabot_motor[i], duty);
 8008ee6:	4a0d      	ldr	r2, [pc, #52]	@ (8008f1c <controlMotors+0xe8>)
 8008ee8:	68bb      	ldr	r3, [r7, #8]
 8008eea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008eee:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008ef2:	4611      	mov	r1, r2
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	f7f8 fa41 	bl	800137c <Motor_Set_PWM_Duty>
	for (int i = 0; i < NUM_OF_MOTOR; i++)
 8008efa:	68bb      	ldr	r3, [r7, #8]
 8008efc:	3301      	adds	r3, #1
 8008efe:	60bb      	str	r3, [r7, #8]
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	2b03      	cmp	r3, #3
 8008f04:	dd9c      	ble.n	8008e40 <controlMotors+0xc>
	}
}
 8008f06:	bf00      	nop
 8008f08:	bf00      	nop
 8008f0a:	3710      	adds	r7, #16
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bd80      	pop	{r7, pc}
 8008f10:	20008a44 	.word	0x20008a44
 8008f14:	b727c5ac 	.word	0xb727c5ac
 8008f18:	3727c5ac 	.word	0x3727c5ac
 8008f1c:	20008a9c 	.word	0x20008a9c
 8008f20:	20008a24 	.word	0x20008a24
 8008f24:	41c90fdb 	.word	0x41c90fdb
 8008f28:	437f0000 	.word	0x437f0000

08008f2c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8008f2c:	b480      	push	{r7}
 8008f2e:	b085      	sub	sp, #20
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
 8008f34:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8008f36:	2300      	movs	r3, #0
 8008f38:	60fb      	str	r3, [r7, #12]
 8008f3a:	e00c      	b.n	8008f56 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x2a>
      arr[i] = (var >> (8 * i));
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	00db      	lsls	r3, r3, #3
 8008f40:	683a      	ldr	r2, [r7, #0]
 8008f42:	fa22 f103 	lsr.w	r1, r2, r3
 8008f46:	687a      	ldr	r2, [r7, #4]
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	4413      	add	r3, r2
 8008f4c:	b2ca      	uxtb	r2, r1
 8008f4e:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	3301      	adds	r3, #1
 8008f54:	60fb      	str	r3, [r7, #12]
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	2b03      	cmp	r3, #3
 8008f5a:	d9ef      	bls.n	8008f3c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x10>
  }
 8008f5c:	bf00      	nop
 8008f5e:	bf00      	nop
 8008f60:	3714      	adds	r7, #20
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bc80      	pop	{r7}
 8008f66:	4770      	bx	lr

08008f68 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8008f68:	b480      	push	{r7}
 8008f6a:	b085      	sub	sp, #20
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
 8008f70:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2200      	movs	r2, #0
 8008f76:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8008f78:	2300      	movs	r3, #0
 8008f7a:	60fb      	str	r3, [r7, #12]
 8008f7c:	e010      	b.n	8008fa0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x38>
      var |= (arr[i] << (8 * i));
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	6839      	ldr	r1, [r7, #0]
 8008f84:	68fa      	ldr	r2, [r7, #12]
 8008f86:	440a      	add	r2, r1
 8008f88:	7812      	ldrb	r2, [r2, #0]
 8008f8a:	4611      	mov	r1, r2
 8008f8c:	68fa      	ldr	r2, [r7, #12]
 8008f8e:	00d2      	lsls	r2, r2, #3
 8008f90:	fa01 f202 	lsl.w	r2, r1, r2
 8008f94:	431a      	orrs	r2, r3
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	3301      	adds	r3, #1
 8008f9e:	60fb      	str	r3, [r7, #12]
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	2b03      	cmp	r3, #3
 8008fa4:	d9eb      	bls.n	8008f7e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x16>
  }
 8008fa6:	bf00      	nop
 8008fa8:	bf00      	nop
 8008faa:	3714      	adds	r7, #20
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bc80      	pop	{r7}
 8008fb0:	4770      	bx	lr

08008fb2 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 8008fb2:	b480      	push	{r7}
 8008fb4:	b085      	sub	sp, #20
 8008fb6:	af00      	add	r7, sp, #0
 8008fb8:	6078      	str	r0, [r7, #4]
 8008fba:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	60fb      	str	r3, [r7, #12]
 8008fc0:	e01d      	b.n	8008ffe <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE9advertiseERNS_9PublisherE+0x4c>
    {
      if (publishers[i] == 0) // empty slot
 8008fc2:	687a      	ldr	r2, [r7, #4]
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008fca:	3306      	adds	r3, #6
 8008fcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d111      	bne.n	8008ff8 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE9advertiseERNS_9PublisherE+0x46>
      {
        publishers[i] = &p;
 8008fd4:	687a      	ldr	r2, [r7, #4]
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008fdc:	3306      	adds	r3, #6
 8008fde:	6839      	ldr	r1, [r7, #0]
 8008fe0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	f103 026e 	add.w	r2, r3, #110	@ 0x6e
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8008fee:	687a      	ldr	r2, [r7, #4]
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	60da      	str	r2, [r3, #12]
        return true;
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	e006      	b.n	8009006 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	3301      	adds	r3, #1
 8008ffc:	60fb      	str	r3, [r7, #12]
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	2b09      	cmp	r3, #9
 8009002:	ddde      	ble.n	8008fc2 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE9advertiseERNS_9PublisherE+0x10>
      }
    }
    return false;
 8009004:	2300      	movs	r3, #0
  }
 8009006:	4618      	mov	r0, r3
 8009008:	3714      	adds	r7, #20
 800900a:	46bd      	mov	sp, r7
 800900c:	bc80      	pop	{r7}
 800900e:	4770      	bx	lr

08009010 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8009010:	b480      	push	{r7}
 8009012:	b083      	sub	sp, #12
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
 8009018:	4a04      	ldr	r2, [pc, #16]	@ (800902c <_ZN3ros11Subscriber_C1Ev+0x1c>)
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	601a      	str	r2, [r3, #0]
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	4618      	mov	r0, r3
 8009022:	370c      	adds	r7, #12
 8009024:	46bd      	mov	sp, r7
 8009026:	bc80      	pop	{r7}
 8009028:	4770      	bx	lr
 800902a:	bf00      	nop
 800902c:	08010be8 	.word	0x08010be8

08009030 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8009030:	b580      	push	{r7, lr}
 8009032:	b084      	sub	sp, #16
 8009034:	af00      	add	r7, sp, #0
 8009036:	60f8      	str	r0, [r7, #12]
 8009038:	60b9      	str	r1, [r7, #8]
 800903a:	607a      	str	r2, [r7, #4]
 800903c:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	4618      	mov	r0, r3
 8009042:	f7ff ffe5 	bl	8009010 <_ZN3ros11Subscriber_C1Ev>
 8009046:	4a0b      	ldr	r2, [pc, #44]	@ (8009074 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei+0x44>)
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	601a      	str	r2, [r3, #0]
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	3310      	adds	r3, #16
 8009050:	4618      	mov	r0, r3
 8009052:	f7fd f9bf 	bl	80063d4 <_ZN13geometry_msgs5TwistC1Ev>
    cb_(cb),
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	687a      	ldr	r2, [r7, #4]
 800905a:	659a      	str	r2, [r3, #88]	@ 0x58
    endpoint_(endpoint)
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	683a      	ldr	r2, [r7, #0]
 8009060:	65da      	str	r2, [r3, #92]	@ 0x5c
  {
    topic_ = topic_name;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	68ba      	ldr	r2, [r7, #8]
 8009066:	609a      	str	r2, [r3, #8]
  };
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	4618      	mov	r0, r3
 800906c:	3710      	adds	r7, #16
 800906e:	46bd      	mov	sp, r7
 8009070:	bd80      	pop	{r7, pc}
 8009072:	bf00      	nop
 8009074:	08010a54 	.word	0x08010a54

08009078 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8initNodeEv>:
  void initNode()
 8009078:	b580      	push	{r7, lr}
 800907a:	b082      	sub	sp, #8
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
    hardware_.init();
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	3304      	adds	r3, #4
 8009084:	4618      	mov	r0, r3
 8009086:	f7f9 fd23 	bl	8002ad0 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8009090:	461a      	mov	r2, r3
 8009092:	2300      	movs	r3, #0
 8009094:	6693      	str	r3, [r2, #104]	@ 0x68
    bytes_ = 0;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800909c:	461a      	mov	r2, r3
 800909e:	2300      	movs	r3, #0
 80090a0:	66d3      	str	r3, [r2, #108]	@ 0x6c
    index_ = 0;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80090a8:	461a      	mov	r2, r3
 80090aa:	2300      	movs	r3, #0
 80090ac:	6753      	str	r3, [r2, #116]	@ 0x74
    topic_ = 0;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80090b4:	461a      	mov	r2, r3
 80090b6:	2300      	movs	r3, #0
 80090b8:	6713      	str	r3, [r2, #112]	@ 0x70
  };
 80090ba:	bf00      	nop
 80090bc:	3708      	adds	r7, #8
 80090be:	46bd      	mov	sp, r7
 80090c0:	bd80      	pop	{r7, pc}

080090c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE9subscribeERNS_11Subscriber_E>:

  /* Register a new subscriber */
  bool subscribe(Subscriber_& s)
 80090c2:	b480      	push	{r7}
 80090c4:	b085      	sub	sp, #20
 80090c6:	af00      	add	r7, sp, #0
 80090c8:	6078      	str	r0, [r7, #4]
 80090ca:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80090cc:	2300      	movs	r3, #0
 80090ce:	60fb      	str	r3, [r7, #12]
 80090d0:	e01a      	b.n	8009108 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE9subscribeERNS_11Subscriber_E+0x46>
    {
      if (subscribers[i] == 0) // empty slot
 80090d2:	687a      	ldr	r2, [r7, #4]
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80090da:	3310      	adds	r3, #16
 80090dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d10e      	bne.n	8009102 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE9subscribeERNS_11Subscriber_E+0x40>
      {
        subscribers[i] = &s;
 80090e4:	687a      	ldr	r2, [r7, #4]
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80090ec:	3310      	adds	r3, #16
 80090ee:	6839      	ldr	r1, [r7, #0]
 80090f0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        s.id_ = i + 100;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	605a      	str	r2, [r3, #4]
        return true;
 80090fe:	2301      	movs	r3, #1
 8009100:	e006      	b.n	8009110 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE9subscribeERNS_11Subscriber_E+0x4e>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	3301      	adds	r3, #1
 8009106:	60fb      	str	r3, [r7, #12]
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	2b09      	cmp	r3, #9
 800910c:	dde1      	ble.n	80090d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE9subscribeERNS_11Subscriber_E+0x10>
      }
    }
    return false;
 800910e:	2300      	movs	r3, #0
  }
 8009110:	4618      	mov	r0, r3
 8009112:	3714      	adds	r7, #20
 8009114:	46bd      	mov	sp, r7
 8009116:	bc80      	pop	{r7}
 8009118:	4770      	bx	lr
	...

0800911c <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE3nowEv>:
  Time now()
 800911c:	b580      	push	{r7, lr}
 800911e:	b084      	sub	sp, #16
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
 8009124:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	3304      	adds	r3, #4
 800912a:	4618      	mov	r0, r3
 800912c:	f7f9 fcfc 	bl	8002b28 <_ZN13STM32Hardware4timeEv>
 8009130:	60f8      	str	r0, [r7, #12]
    Time current_time;
 8009132:	6878      	ldr	r0, [r7, #4]
 8009134:	f7f8 fcfe 	bl	8001b34 <_ZN3ros4TimeC1Ev>
    current_time.sec = ms / 1000 + sec_offset;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	4a13      	ldr	r2, [pc, #76]	@ (8009188 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE3nowEv+0x6c>)
 800913c:	fba2 2303 	umull	r2, r3, r2, r3
 8009140:	099a      	lsrs	r2, r3, #6
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	68db      	ldr	r3, [r3, #12]
 8009146:	441a      	add	r2, r3
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	601a      	str	r2, [r3, #0]
    current_time.nsec = (ms % 1000) * 1000000UL + nsec_offset;
 800914c:	68fa      	ldr	r2, [r7, #12]
 800914e:	4b0e      	ldr	r3, [pc, #56]	@ (8009188 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE3nowEv+0x6c>)
 8009150:	fba3 1302 	umull	r1, r3, r3, r2
 8009154:	099b      	lsrs	r3, r3, #6
 8009156:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800915a:	fb01 f303 	mul.w	r3, r1, r3
 800915e:	1ad3      	subs	r3, r2, r3
 8009160:	4a0a      	ldr	r2, [pc, #40]	@ (800918c <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE3nowEv+0x70>)
 8009162:	fb03 f202 	mul.w	r2, r3, r2
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	691b      	ldr	r3, [r3, #16]
 800916a:	441a      	add	r2, r3
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	605a      	str	r2, [r3, #4]
    normalizeSecNSec(current_time.sec, current_time.nsec);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	3304      	adds	r3, #4
 8009174:	4619      	mov	r1, r3
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	f001 f956 	bl	800a428 <_ZN3ros16normalizeSecNSecERmS0_>
    return current_time;
 800917c:	bf00      	nop
  }
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	3710      	adds	r7, #16
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}
 8009186:	bf00      	nop
 8009188:	10624dd3 	.word	0x10624dd3
 800918c:	000f4240 	.word	0x000f4240

08009190 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv>:
  virtual int spinOnce() override
 8009190:	b580      	push	{r7, lr}
 8009192:	b084      	sub	sp, #16
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	3304      	adds	r3, #4
 800919c:	4618      	mov	r0, r3
 800919e:	f7f9 fcc3 	bl	8002b28 <_ZN13STM32Hardware4timeEv>
 80091a2:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80091aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80091ae:	68fa      	ldr	r2, [r7, #12]
 80091b0:	1ad3      	subs	r3, r2, r3
 80091b2:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 80091b6:	4293      	cmp	r3, r2
 80091b8:	d905      	bls.n	80091c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x36>
      configured_ = false;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80091c0:	2200      	movs	r2, #0
 80091c2:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
    if (mode_ != MODE_FIRST_FF)
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80091cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d00d      	beq.n	80091ee <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
      if (c_time > last_msg_timeout_time)
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80091d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80091dc:	68fa      	ldr	r2, [r7, #12]
 80091de:	429a      	cmp	r2, r3
 80091e0:	d905      	bls.n	80091ee <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
        mode_ = MODE_FIRST_FF;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80091e8:	461a      	mov	r2, r3
 80091ea:	2300      	movs	r3, #0
 80091ec:	6693      	str	r3, [r2, #104]	@ 0x68
      if (spin_timeout_ > 0)
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	695b      	ldr	r3, [r3, #20]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d013      	beq.n	800921e <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x8e>
        if ((hardware_.time() - c_time) > spin_timeout_)
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	3304      	adds	r3, #4
 80091fa:	4618      	mov	r0, r3
 80091fc:	f7f9 fc94 	bl	8002b28 <_ZN13STM32Hardware4timeEv>
 8009200:	4602      	mov	r2, r0
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	1ad2      	subs	r2, r2, r3
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	695b      	ldr	r3, [r3, #20]
 800920a:	429a      	cmp	r2, r3
 800920c:	bf8c      	ite	hi
 800920e:	2301      	movhi	r3, #1
 8009210:	2300      	movls	r3, #0
 8009212:	b2db      	uxtb	r3, r3
 8009214:	2b00      	cmp	r3, #0
 8009216:	d002      	beq.n	800921e <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x8e>
          return SPIN_TIMEOUT;
 8009218:	f06f 0301 	mvn.w	r3, #1
 800921c:	e1e8      	b.n	80095f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x460>
      int data = hardware_.read();
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	3304      	adds	r3, #4
 8009222:	4618      	mov	r0, r3
 8009224:	f7f9 fc61 	bl	8002aea <_ZN13STM32Hardware4readEv>
 8009228:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 800922a:	68bb      	ldr	r3, [r7, #8]
 800922c:	2b00      	cmp	r3, #0
 800922e:	f2c0 81c1 	blt.w	80095b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x424>
      checksum_ += data;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8009238:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800923a:	68bb      	ldr	r3, [r7, #8]
 800923c:	4413      	add	r3, r2
 800923e:	687a      	ldr	r2, [r7, #4]
 8009240:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 8009244:	6793      	str	r3, [r2, #120]	@ 0x78
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800924c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800924e:	2b07      	cmp	r3, #7
 8009250:	d124      	bne.n	800929c <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x10c>
        message_in[index_++] = data;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8009258:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800925a:	1c5a      	adds	r2, r3, #1
 800925c:	6879      	ldr	r1, [r7, #4]
 800925e:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
 8009262:	674a      	str	r2, [r1, #116]	@ 0x74
 8009264:	68ba      	ldr	r2, [r7, #8]
 8009266:	b2d1      	uxtb	r1, r2
 8009268:	687a      	ldr	r2, [r7, #4]
 800926a:	4413      	add	r3, r2
 800926c:	460a      	mov	r2, r1
 800926e:	761a      	strb	r2, [r3, #24]
        bytes_--;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8009276:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009278:	3b01      	subs	r3, #1
 800927a:	687a      	ldr	r2, [r7, #4]
 800927c:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 8009280:	66d3      	str	r3, [r2, #108]	@ 0x6c
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8009288:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800928a:	2b00      	cmp	r3, #0
 800928c:	d1af      	bne.n	80091ee <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
          mode_ = MODE_MSG_CHECKSUM;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8009294:	461a      	mov	r2, r3
 8009296:	2308      	movs	r3, #8
 8009298:	6693      	str	r3, [r2, #104]	@ 0x68
 800929a:	e7a8      	b.n	80091ee <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
      else if (mode_ == MODE_FIRST_FF)
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80092a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d12e      	bne.n	8009306 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x176>
        if (data == 0xff)
 80092a8:	68bb      	ldr	r3, [r7, #8]
 80092aa:	2bff      	cmp	r3, #255	@ 0xff
 80092ac:	d110      	bne.n	80092d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x140>
          mode_++;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80092b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80092b6:	3301      	adds	r3, #1
 80092b8:	687a      	ldr	r2, [r7, #4]
 80092ba:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 80092be:	6693      	str	r3, [r2, #104]	@ 0x68
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	3314      	adds	r3, #20
 80092c4:	687a      	ldr	r2, [r7, #4]
 80092c6:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 80092ca:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 80092ce:	e78e      	b.n	80091ee <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	3304      	adds	r3, #4
 80092d4:	4618      	mov	r0, r3
 80092d6:	f7f9 fc27 	bl	8002b28 <_ZN13STM32Hardware4timeEv>
 80092da:	4602      	mov	r2, r0
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	1ad3      	subs	r3, r2, r3
 80092e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80092e4:	4293      	cmp	r3, r2
 80092e6:	bf8c      	ite	hi
 80092e8:	2301      	movhi	r3, #1
 80092ea:	2300      	movls	r3, #0
 80092ec:	b2db      	uxtb	r3, r3
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	f43f af7d 	beq.w	80091ee <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
          configured_ = false;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80092fa:	2200      	movs	r2, #0
 80092fc:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
          return SPIN_TIMEOUT;
 8009300:	f06f 0301 	mvn.w	r3, #1
 8009304:	e174      	b.n	80095f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x460>
      else if (mode_ == MODE_PROTOCOL_VER)
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800930c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800930e:	2b01      	cmp	r3, #1
 8009310:	d11e      	bne.n	8009350 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x1c0>
        if (data == PROTOCOL_VER)
 8009312:	68bb      	ldr	r3, [r7, #8]
 8009314:	2bfe      	cmp	r3, #254	@ 0xfe
 8009316:	d109      	bne.n	800932c <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x19c>
          mode_++;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800931e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009320:	3301      	adds	r3, #1
 8009322:	687a      	ldr	r2, [r7, #4]
 8009324:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 8009328:	6693      	str	r3, [r2, #104]	@ 0x68
 800932a:	e760      	b.n	80091ee <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
          mode_ = MODE_FIRST_FF;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8009332:	461a      	mov	r2, r3
 8009334:	2300      	movs	r3, #0
 8009336:	6693      	str	r3, [r2, #104]	@ 0x68
          if (configured_ == false)
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800933e:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8009342:	2b00      	cmp	r3, #0
 8009344:	f47f af53 	bne.w	80091ee <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8009348:	6878      	ldr	r0, [r7, #4]
 800934a:	f000 f955 	bl	80095f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE15requestSyncTimeEv>
 800934e:	e74e      	b.n	80091ee <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8009356:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009358:	2b02      	cmp	r3, #2
 800935a:	d11b      	bne.n	8009394 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x204>
        bytes_ = data;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8009362:	461a      	mov	r2, r3
 8009364:	68bb      	ldr	r3, [r7, #8]
 8009366:	66d3      	str	r3, [r2, #108]	@ 0x6c
        index_ = 0;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800936e:	461a      	mov	r2, r3
 8009370:	2300      	movs	r3, #0
 8009372:	6753      	str	r3, [r2, #116]	@ 0x74
        mode_++;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800937a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800937c:	3301      	adds	r3, #1
 800937e:	687a      	ldr	r2, [r7, #4]
 8009380:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 8009384:	6693      	str	r3, [r2, #104]	@ 0x68
        checksum_ = data;               /* first byte for calculating size checksum */
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800938c:	461a      	mov	r2, r3
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	6793      	str	r3, [r2, #120]	@ 0x78
 8009392:	e72c      	b.n	80091ee <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800939a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800939c:	2b03      	cmp	r3, #3
 800939e:	d114      	bne.n	80093ca <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x23a>
        bytes_ += data << 8;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80093a6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80093a8:	68bb      	ldr	r3, [r7, #8]
 80093aa:	021b      	lsls	r3, r3, #8
 80093ac:	4413      	add	r3, r2
 80093ae:	687a      	ldr	r2, [r7, #4]
 80093b0:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 80093b4:	66d3      	str	r3, [r2, #108]	@ 0x6c
        mode_++;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80093bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80093be:	3301      	adds	r3, #1
 80093c0:	687a      	ldr	r2, [r7, #4]
 80093c2:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 80093c6:	6693      	str	r3, [r2, #104]	@ 0x68
 80093c8:	e711      	b.n	80091ee <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80093d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80093d2:	2b04      	cmp	r3, #4
 80093d4:	d11b      	bne.n	800940e <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x27e>
        if ((checksum_ % 256) == 255)
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80093dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80093de:	425a      	negs	r2, r3
 80093e0:	b2db      	uxtb	r3, r3
 80093e2:	b2d2      	uxtb	r2, r2
 80093e4:	bf58      	it	pl
 80093e6:	4253      	negpl	r3, r2
 80093e8:	2bff      	cmp	r3, #255	@ 0xff
 80093ea:	d109      	bne.n	8009400 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x270>
          mode_++;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80093f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80093f4:	3301      	adds	r3, #1
 80093f6:	687a      	ldr	r2, [r7, #4]
 80093f8:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 80093fc:	6693      	str	r3, [r2, #104]	@ 0x68
 80093fe:	e6f6      	b.n	80091ee <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8009406:	461a      	mov	r2, r3
 8009408:	2300      	movs	r3, #0
 800940a:	6693      	str	r3, [r2, #104]	@ 0x68
 800940c:	e6ef      	b.n	80091ee <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8009414:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009416:	2b05      	cmp	r3, #5
 8009418:	d115      	bne.n	8009446 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x2b6>
        topic_ = data;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8009420:	461a      	mov	r2, r3
 8009422:	68bb      	ldr	r3, [r7, #8]
 8009424:	6713      	str	r3, [r2, #112]	@ 0x70
        mode_++;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800942c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800942e:	3301      	adds	r3, #1
 8009430:	687a      	ldr	r2, [r7, #4]
 8009432:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 8009436:	6693      	str	r3, [r2, #104]	@ 0x68
        checksum_ = data;               /* first byte included in checksum */
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800943e:	461a      	mov	r2, r3
 8009440:	68bb      	ldr	r3, [r7, #8]
 8009442:	6793      	str	r3, [r2, #120]	@ 0x78
 8009444:	e6d3      	b.n	80091ee <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800944c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800944e:	2b06      	cmp	r3, #6
 8009450:	d11e      	bne.n	8009490 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x300>
        topic_ += data << 8;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8009458:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800945a:	68bb      	ldr	r3, [r7, #8]
 800945c:	021b      	lsls	r3, r3, #8
 800945e:	4413      	add	r3, r2
 8009460:	687a      	ldr	r2, [r7, #4]
 8009462:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 8009466:	6713      	str	r3, [r2, #112]	@ 0x70
        mode_ = MODE_MESSAGE;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800946e:	461a      	mov	r2, r3
 8009470:	2307      	movs	r3, #7
 8009472:	6693      	str	r3, [r2, #104]	@ 0x68
        if (bytes_ == 0)
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800947a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800947c:	2b00      	cmp	r3, #0
 800947e:	f47f aeb6 	bne.w	80091ee <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
          mode_ = MODE_MSG_CHECKSUM;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8009488:	461a      	mov	r2, r3
 800948a:	2308      	movs	r3, #8
 800948c:	6693      	str	r3, [r2, #104]	@ 0x68
 800948e:	e6ae      	b.n	80091ee <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8009496:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009498:	2b08      	cmp	r3, #8
 800949a:	f47f aea8 	bne.w	80091ee <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
        mode_ = MODE_FIRST_FF;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80094a4:	461a      	mov	r2, r3
 80094a6:	2300      	movs	r3, #0
 80094a8:	6693      	str	r3, [r2, #104]	@ 0x68
        if ((checksum_ % 256) == 255)
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80094b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80094b2:	425a      	negs	r2, r3
 80094b4:	b2db      	uxtb	r3, r3
 80094b6:	b2d2      	uxtb	r2, r2
 80094b8:	bf58      	it	pl
 80094ba:	4253      	negpl	r3, r2
 80094bc:	2bff      	cmp	r3, #255	@ 0xff
 80094be:	f47f ae96 	bne.w	80091ee <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80094c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d116      	bne.n	80094fc <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x36c>
            requestSyncTime();
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f000 f892 	bl	80095f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE15requestSyncTimeEv>
            negotiateTopics();
 80094d4:	6878      	ldr	r0, [r7, #4]
 80094d6:	f000 f8ac 	bl	8009632 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE15negotiateTopicsEv>
            last_sync_time = c_time;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80094e0:	461a      	mov	r2, r3
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
            last_sync_receive_time = c_time;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80094ee:	461a      	mov	r2, r3
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
            return SPIN_ERR;
 80094f6:	f04f 33ff 	mov.w	r3, #4294967295
 80094fa:	e079      	b.n	80095f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x460>
          else if (topic_ == TopicInfo::ID_TIME)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8009502:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009504:	2b0a      	cmp	r3, #10
 8009506:	d106      	bne.n	8009516 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x386>
            syncTime(message_in);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	3318      	adds	r3, #24
 800950c:	4619      	mov	r1, r3
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f000 f97a 	bl	8009808 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8syncTimeEPh>
 8009514:	e66b      	b.n	80091ee <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800951c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800951e:	2b06      	cmp	r3, #6
 8009520:	d110      	bne.n	8009544 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x3b4>
            req_param_resp.deserialize(message_in);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	f503 4381 	add.w	r3, r3, #16512	@ 0x4080
 8009528:	3310      	adds	r3, #16
 800952a:	687a      	ldr	r2, [r7, #4]
 800952c:	3218      	adds	r2, #24
 800952e:	4611      	mov	r1, r2
 8009530:	4618      	mov	r0, r3
 8009532:	f7f8 ffb4 	bl	800249e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800953c:	2201      	movs	r2, #1
 800953e:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
 8009542:	e654      	b.n	80091ee <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800954a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800954c:	2b0b      	cmp	r3, #11
 800954e:	d106      	bne.n	800955e <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x3ce>
            configured_ = false;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8009556:	2200      	movs	r2, #0
 8009558:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
 800955c:	e647      	b.n	80091ee <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
            if (subscribers[topic_ - 100])
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8009564:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009566:	3b64      	subs	r3, #100	@ 0x64
 8009568:	687a      	ldr	r2, [r7, #4]
 800956a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800956e:	3310      	adds	r3, #16
 8009570:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009574:	2b00      	cmp	r3, #0
 8009576:	f43f ae3a 	beq.w	80091ee <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
              subscribers[topic_ - 100]->callback(message_in);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8009580:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009582:	3b64      	subs	r3, #100	@ 0x64
 8009584:	687a      	ldr	r2, [r7, #4]
 8009586:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800958a:	3310      	adds	r3, #16
 800958c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8009596:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009598:	3b64      	subs	r3, #100	@ 0x64
 800959a:	687a      	ldr	r2, [r7, #4]
 800959c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80095a0:	3310      	adds	r3, #16
 80095a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	687a      	ldr	r2, [r7, #4]
 80095ac:	3218      	adds	r2, #24
 80095ae:	4611      	mov	r1, r2
 80095b0:	4798      	blx	r3
    while (true)
 80095b2:	e61c      	b.n	80091ee <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x5e>
        break;
 80095b4:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80095bc:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d014      	beq.n	80095ee <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x45e>
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80095ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80095ce:	68fa      	ldr	r2, [r7, #12]
 80095d0:	1ad3      	subs	r3, r2, r3
 80095d2:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 80095d6:	4293      	cmp	r3, r2
 80095d8:	d909      	bls.n	80095ee <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8spinOnceEv+0x45e>
      requestSyncTime();
 80095da:	6878      	ldr	r0, [r7, #4]
 80095dc:	f000 f80c 	bl	80095f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE15requestSyncTimeEv>
      last_sync_time = c_time;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80095e6:	461a      	mov	r2, r3
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
    return SPIN_OK;
 80095ee:	2300      	movs	r3, #0
  }
 80095f0:	4618      	mov	r0, r3
 80095f2:	3710      	adds	r7, #16
 80095f4:	46bd      	mov	sp, r7
 80095f6:	bd80      	pop	{r7, pc}

080095f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE15requestSyncTimeEv>:
  void requestSyncTime()
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b086      	sub	sp, #24
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8009600:	f107 030c 	add.w	r3, r7, #12
 8009604:	4618      	mov	r0, r3
 8009606:	f7f8 fab5 	bl	8001b74 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	f107 020c 	add.w	r2, r7, #12
 8009614:	210a      	movs	r1, #10
 8009616:	6878      	ldr	r0, [r7, #4]
 8009618:	4798      	blx	r3
    rt_time = hardware_.time();
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	3304      	adds	r3, #4
 800961e:	4618      	mov	r0, r3
 8009620:	f7f9 fa82 	bl	8002b28 <_ZN13STM32Hardware4timeEv>
 8009624:	4602      	mov	r2, r0
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	609a      	str	r2, [r3, #8]
  }
 800962a:	bf00      	nop
 800962c:	3718      	adds	r7, #24
 800962e:	46bd      	mov	sp, r7
 8009630:	bd80      	pop	{r7, pc}

08009632 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 8009632:	b590      	push	{r4, r7, lr}
 8009634:	b08b      	sub	sp, #44	@ 0x2c
 8009636:	af00      	add	r7, sp, #0
 8009638:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 800963a:	f107 030c 	add.w	r3, r7, #12
 800963e:	4618      	mov	r0, r3
 8009640:	f7f8 fb82 	bl	8001d48 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8009644:	2300      	movs	r3, #0
 8009646:	627b      	str	r3, [r7, #36]	@ 0x24
 8009648:	e062      	b.n	8009710 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE15negotiateTopicsEv+0xde>
    {
      if (publishers[i] != 0) // non-empty slot
 800964a:	687a      	ldr	r2, [r7, #4]
 800964c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800964e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009652:	3306      	adds	r3, #6
 8009654:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d056      	beq.n	800970a <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE15negotiateTopicsEv+0xd8>
      {
        ti.topic_id = publishers[i]->id_;
 800965c:	687a      	ldr	r2, [r7, #4]
 800965e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009660:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009664:	3306      	adds	r3, #6
 8009666:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800966a:	689b      	ldr	r3, [r3, #8]
 800966c:	b29b      	uxth	r3, r3
 800966e:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8009670:	687a      	ldr	r2, [r7, #4]
 8009672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009674:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009678:	3306      	adds	r3, #6
 800967a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8009682:	687a      	ldr	r2, [r7, #4]
 8009684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009686:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800968a:	3306      	adds	r3, #6
 800968c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009690:	6859      	ldr	r1, [r3, #4]
 8009692:	687a      	ldr	r2, [r7, #4]
 8009694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009696:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800969a:	3306      	adds	r3, #6
 800969c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80096a0:	685b      	ldr	r3, [r3, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	3308      	adds	r3, #8
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	4608      	mov	r0, r1
 80096aa:	4798      	blx	r3
 80096ac:	4603      	mov	r3, r0
 80096ae:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 80096b0:	687a      	ldr	r2, [r7, #4]
 80096b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80096b8:	3306      	adds	r3, #6
 80096ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80096be:	6859      	ldr	r1, [r3, #4]
 80096c0:	687a      	ldr	r2, [r7, #4]
 80096c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80096c8:	3306      	adds	r3, #6
 80096ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80096ce:	685b      	ldr	r3, [r3, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	330c      	adds	r3, #12
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	4608      	mov	r0, r1
 80096d8:	4798      	blx	r3
 80096da:	4603      	mov	r3, r0
 80096dc:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 80096de:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80096e2:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	681c      	ldr	r4, [r3, #0]
 80096ea:	687a      	ldr	r2, [r7, #4]
 80096ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80096f2:	3306      	adds	r3, #6
 80096f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80096f8:	4618      	mov	r0, r3
 80096fa:	f7f9 f883 	bl	8002804 <_ZN3ros9Publisher15getEndpointTypeEv>
 80096fe:	4601      	mov	r1, r0
 8009700:	f107 030c 	add.w	r3, r7, #12
 8009704:	461a      	mov	r2, r3
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 800970a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800970c:	3301      	adds	r3, #1
 800970e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009712:	2b09      	cmp	r3, #9
 8009714:	dd99      	ble.n	800964a <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE15negotiateTopicsEv+0x18>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8009716:	2300      	movs	r3, #0
 8009718:	627b      	str	r3, [r7, #36]	@ 0x24
 800971a:	e067      	b.n	80097ec <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE15negotiateTopicsEv+0x1ba>
    {
      if (subscribers[i] != 0) // non-empty slot
 800971c:	687a      	ldr	r2, [r7, #4]
 800971e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009720:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009724:	3310      	adds	r3, #16
 8009726:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d05b      	beq.n	80097e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE15negotiateTopicsEv+0x1b4>
      {
        ti.topic_id = subscribers[i]->id_;
 800972e:	687a      	ldr	r2, [r7, #4]
 8009730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009732:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009736:	3310      	adds	r3, #16
 8009738:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800973c:	685b      	ldr	r3, [r3, #4]
 800973e:	b29b      	uxth	r3, r3
 8009740:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8009742:	687a      	ldr	r2, [r7, #4]
 8009744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009746:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800974a:	3310      	adds	r3, #16
 800974c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009750:	689b      	ldr	r3, [r3, #8]
 8009752:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8009754:	687a      	ldr	r2, [r7, #4]
 8009756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009758:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800975c:	3310      	adds	r3, #16
 800975e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009762:	687a      	ldr	r2, [r7, #4]
 8009764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009766:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800976a:	3310      	adds	r3, #16
 800976c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	3308      	adds	r3, #8
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	4608      	mov	r0, r1
 8009778:	4798      	blx	r3
 800977a:	4603      	mov	r3, r0
 800977c:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 800977e:	687a      	ldr	r2, [r7, #4]
 8009780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009782:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009786:	3310      	adds	r3, #16
 8009788:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800978c:	687a      	ldr	r2, [r7, #4]
 800978e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009790:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009794:	3310      	adds	r3, #16
 8009796:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	330c      	adds	r3, #12
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	4608      	mov	r0, r1
 80097a2:	4798      	blx	r3
 80097a4:	4603      	mov	r3, r0
 80097a6:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 80097a8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80097ac:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	681c      	ldr	r4, [r3, #0]
 80097b4:	687a      	ldr	r2, [r7, #4]
 80097b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80097bc:	3310      	adds	r3, #16
 80097be:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80097c2:	687a      	ldr	r2, [r7, #4]
 80097c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80097ca:	3310      	adds	r3, #16
 80097cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	3304      	adds	r3, #4
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	4608      	mov	r0, r1
 80097d8:	4798      	blx	r3
 80097da:	4601      	mov	r1, r0
 80097dc:	f107 030c 	add.w	r3, r7, #12
 80097e0:	461a      	mov	r2, r3
 80097e2:	6878      	ldr	r0, [r7, #4]
 80097e4:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80097e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097e8:	3301      	adds	r3, #1
 80097ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80097ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097ee:	2b09      	cmp	r3, #9
 80097f0:	dd94      	ble.n	800971c <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE15negotiateTopicsEv+0xea>
      }
    }
    configured_ = true;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80097f8:	2201      	movs	r2, #1
 80097fa:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
  }
 80097fe:	bf00      	nop
 8009800:	372c      	adds	r7, #44	@ 0x2c
 8009802:	46bd      	mov	sp, r7
 8009804:	bd90      	pop	{r4, r7, pc}
	...

08009808 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8009808:	b580      	push	{r7, lr}
 800980a:	b086      	sub	sp, #24
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
 8009810:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8009812:	f107 0308 	add.w	r3, r7, #8
 8009816:	4618      	mov	r0, r3
 8009818:	f7f8 f9ac 	bl	8001b74 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	3304      	adds	r3, #4
 8009820:	4618      	mov	r0, r3
 8009822:	f7f9 f981 	bl	8002b28 <_ZN13STM32Hardware4timeEv>
 8009826:	4602      	mov	r2, r0
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	689b      	ldr	r3, [r3, #8]
 800982c:	1ad3      	subs	r3, r2, r3
 800982e:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8009830:	f107 0308 	add.w	r3, r7, #8
 8009834:	6839      	ldr	r1, [r7, #0]
 8009836:	4618      	mov	r0, r3
 8009838:	f7f8 fa0b 	bl	8001c52 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 800983c:	68fa      	ldr	r2, [r7, #12]
 800983e:	697b      	ldr	r3, [r7, #20]
 8009840:	4915      	ldr	r1, [pc, #84]	@ (8009898 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8syncTimeEPh+0x90>)
 8009842:	fba1 1303 	umull	r1, r3, r1, r3
 8009846:	099b      	lsrs	r3, r3, #6
 8009848:	4413      	add	r3, r2
 800984a:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 800984c:	6939      	ldr	r1, [r7, #16]
 800984e:	697a      	ldr	r2, [r7, #20]
 8009850:	4b11      	ldr	r3, [pc, #68]	@ (8009898 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8syncTimeEPh+0x90>)
 8009852:	fba3 0302 	umull	r0, r3, r3, r2
 8009856:	099b      	lsrs	r3, r3, #6
 8009858:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800985c:	fb00 f303 	mul.w	r3, r0, r3
 8009860:	1ad3      	subs	r3, r2, r3
 8009862:	4a0e      	ldr	r2, [pc, #56]	@ (800989c <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8syncTimeEPh+0x94>)
 8009864:	fb02 f303 	mul.w	r3, r2, r3
 8009868:	440b      	add	r3, r1
 800986a:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 800986c:	f107 0308 	add.w	r3, r7, #8
 8009870:	3304      	adds	r3, #4
 8009872:	4619      	mov	r1, r3
 8009874:	6878      	ldr	r0, [r7, #4]
 8009876:	f000 f8b7 	bl	80099e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	3304      	adds	r3, #4
 800987e:	4618      	mov	r0, r3
 8009880:	f7f9 f952 	bl	8002b28 <_ZN13STM32Hardware4timeEv>
 8009884:	4602      	mov	r2, r0
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800988c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
 8009890:	bf00      	nop
 8009892:	3718      	adds	r7, #24
 8009894:	46bd      	mov	sp, r7
 8009896:	bd80      	pop	{r7, pc}
 8009898:	10624dd3 	.word	0x10624dd3
 800989c:	000f4240 	.word	0x000f4240

080098a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b088      	sub	sp, #32
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	60f8      	str	r0, [r7, #12]
 80098a8:	60b9      	str	r1, [r7, #8]
 80098aa:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 80098ac:	68bb      	ldr	r3, [r7, #8]
 80098ae:	2b63      	cmp	r3, #99	@ 0x63
 80098b0:	dd0b      	ble.n	80098ca <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE7publishEiPKNS_3MsgE+0x2a>
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80098b8:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80098bc:	f083 0301 	eor.w	r3, r3, #1
 80098c0:	b2db      	uxtb	r3, r3
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d001      	beq.n	80098ca <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE7publishEiPKNS_3MsgE+0x2a>
      return 0;
 80098c6:	2300      	movs	r3, #0
 80098c8:	e087      	b.n	80099da <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE7publishEiPKNS_3MsgE+0x13a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	681a      	ldr	r2, [r3, #0]
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80098d6:	3318      	adds	r3, #24
 80098d8:	3307      	adds	r3, #7
 80098da:	4619      	mov	r1, r3
 80098dc:	6878      	ldr	r0, [r7, #4]
 80098de:	4790      	blx	r2
 80098e0:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80098e8:	22ff      	movs	r2, #255	@ 0xff
 80098ea:	761a      	strb	r2, [r3, #24]
    message_out[1] = PROTOCOL_VER;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80098f2:	22fe      	movs	r2, #254	@ 0xfe
 80098f4:	765a      	strb	r2, [r3, #25]
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 80098f6:	697b      	ldr	r3, [r7, #20]
 80098f8:	b2da      	uxtb	r2, r3
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8009900:	769a      	strb	r2, [r3, #26]
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8009902:	697b      	ldr	r3, [r7, #20]
 8009904:	b29b      	uxth	r3, r3
 8009906:	0a1b      	lsrs	r3, r3, #8
 8009908:	b29b      	uxth	r3, r3
 800990a:	b2da      	uxtb	r2, r3
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8009912:	76da      	strb	r2, [r3, #27]
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800991a:	7e9a      	ldrb	r2, [r3, #26]
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8009922:	7edb      	ldrb	r3, [r3, #27]
 8009924:	4413      	add	r3, r2
 8009926:	b2db      	uxtb	r3, r3
 8009928:	43db      	mvns	r3, r3
 800992a:	b2da      	uxtb	r2, r3
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8009932:	771a      	strb	r2, [r3, #28]
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8009934:	68bb      	ldr	r3, [r7, #8]
 8009936:	b2da      	uxtb	r2, r3
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800993e:	775a      	strb	r2, [r3, #29]
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8009940:	68bb      	ldr	r3, [r7, #8]
 8009942:	b21b      	sxth	r3, r3
 8009944:	121b      	asrs	r3, r3, #8
 8009946:	b21b      	sxth	r3, r3
 8009948:	b2da      	uxtb	r2, r3
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8009950:	779a      	strb	r2, [r3, #30]

    /* calculate checksum */
    int chk = 0;
 8009952:	2300      	movs	r3, #0
 8009954:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8009956:	2305      	movs	r3, #5
 8009958:	61bb      	str	r3, [r7, #24]
 800995a:	e00d      	b.n	8009978 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE7publishEiPKNS_3MsgE+0xd8>
      chk += message_out[i];
 800995c:	68fa      	ldr	r2, [r7, #12]
 800995e:	69bb      	ldr	r3, [r7, #24]
 8009960:	4413      	add	r3, r2
 8009962:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8009966:	3318      	adds	r3, #24
 8009968:	781b      	ldrb	r3, [r3, #0]
 800996a:	461a      	mov	r2, r3
 800996c:	69fb      	ldr	r3, [r7, #28]
 800996e:	4413      	add	r3, r2
 8009970:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8009972:	69bb      	ldr	r3, [r7, #24]
 8009974:	3301      	adds	r3, #1
 8009976:	61bb      	str	r3, [r7, #24]
 8009978:	697b      	ldr	r3, [r7, #20]
 800997a:	3306      	adds	r3, #6
 800997c:	69ba      	ldr	r2, [r7, #24]
 800997e:	429a      	cmp	r2, r3
 8009980:	ddec      	ble.n	800995c <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE7publishEiPKNS_3MsgE+0xbc>
    l += 7;
 8009982:	697b      	ldr	r3, [r7, #20]
 8009984:	3307      	adds	r3, #7
 8009986:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8009988:	69fb      	ldr	r3, [r7, #28]
 800998a:	425a      	negs	r2, r3
 800998c:	b2db      	uxtb	r3, r3
 800998e:	b2d2      	uxtb	r2, r2
 8009990:	bf58      	it	pl
 8009992:	4253      	negpl	r3, r2
 8009994:	b2da      	uxtb	r2, r3
 8009996:	697b      	ldr	r3, [r7, #20]
 8009998:	1c59      	adds	r1, r3, #1
 800999a:	6179      	str	r1, [r7, #20]
 800999c:	43d2      	mvns	r2, r2
 800999e:	b2d1      	uxtb	r1, r2
 80099a0:	68fa      	ldr	r2, [r7, #12]
 80099a2:	4413      	add	r3, r2
 80099a4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80099a8:	3318      	adds	r3, #24
 80099aa:	460a      	mov	r2, r1
 80099ac:	701a      	strb	r2, [r3, #0]

    if (l <= OUTPUT_SIZE)
 80099ae:	697b      	ldr	r3, [r7, #20]
 80099b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80099b4:	dc0b      	bgt.n	80099ce <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE7publishEiPKNS_3MsgE+0x12e>
    {
      hardware_.write(message_out, l);
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	1d18      	adds	r0, r3, #4
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80099c0:	3318      	adds	r3, #24
 80099c2:	697a      	ldr	r2, [r7, #20]
 80099c4:	4619      	mov	r1, r3
 80099c6:	f7f9 f89e 	bl	8002b06 <_ZN13STM32Hardware5writeEPhi>
      return l;
 80099ca:	697b      	ldr	r3, [r7, #20]
 80099cc:	e005      	b.n	80099da <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE7publishEiPKNS_3MsgE+0x13a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 80099ce:	4905      	ldr	r1, [pc, #20]	@ (80099e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE7publishEiPKNS_3MsgE+0x144>)
 80099d0:	68f8      	ldr	r0, [r7, #12]
 80099d2:	f000 f847 	bl	8009a64 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8logerrorEPKc>
      return -1;
 80099d6:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 80099da:	4618      	mov	r0, r3
 80099dc:	3720      	adds	r7, #32
 80099de:	46bd      	mov	sp, r7
 80099e0:	bd80      	pop	{r7, pc}
 80099e2:	bf00      	nop
 80099e4:	08010980 	.word	0x08010980

080099e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b084      	sub	sp, #16
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
 80099f0:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	3304      	adds	r3, #4
 80099f6:	4618      	mov	r0, r3
 80099f8:	f7f9 f896 	bl	8002b28 <_ZN13STM32Hardware4timeEv>
 80099fc:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	681a      	ldr	r2, [r3, #0]
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	4914      	ldr	r1, [pc, #80]	@ (8009a58 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE6setNowERKNS_4TimeE+0x70>)
 8009a06:	fba1 1303 	umull	r1, r3, r1, r3
 8009a0a:	099b      	lsrs	r3, r3, #6
 8009a0c:	1ad3      	subs	r3, r2, r3
 8009a0e:	1e5a      	subs	r2, r3, #1
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	60da      	str	r2, [r3, #12]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8009a14:	683b      	ldr	r3, [r7, #0]
 8009a16:	6859      	ldr	r1, [r3, #4]
 8009a18:	68fa      	ldr	r2, [r7, #12]
 8009a1a:	4b0f      	ldr	r3, [pc, #60]	@ (8009a58 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE6setNowERKNS_4TimeE+0x70>)
 8009a1c:	fba3 0302 	umull	r0, r3, r3, r2
 8009a20:	099b      	lsrs	r3, r3, #6
 8009a22:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8009a26:	fb00 f303 	mul.w	r3, r0, r3
 8009a2a:	1ad3      	subs	r3, r2, r3
 8009a2c:	4a0b      	ldr	r2, [pc, #44]	@ (8009a5c <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE6setNowERKNS_4TimeE+0x74>)
 8009a2e:	fb02 f303 	mul.w	r3, r2, r3
 8009a32:	1aca      	subs	r2, r1, r3
 8009a34:	4b0a      	ldr	r3, [pc, #40]	@ (8009a60 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE6setNowERKNS_4TimeE+0x78>)
 8009a36:	4413      	add	r3, r2
 8009a38:	687a      	ldr	r2, [r7, #4]
 8009a3a:	6113      	str	r3, [r2, #16]
    normalizeSecNSec(sec_offset, nsec_offset);
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	f103 020c 	add.w	r2, r3, #12
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	3310      	adds	r3, #16
 8009a46:	4619      	mov	r1, r3
 8009a48:	4610      	mov	r0, r2
 8009a4a:	f000 fced 	bl	800a428 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8009a4e:	bf00      	nop
 8009a50:	3710      	adds	r7, #16
 8009a52:	46bd      	mov	sp, r7
 8009a54:	bd80      	pop	{r7, pc}
 8009a56:	bf00      	nop
 8009a58:	10624dd3 	.word	0x10624dd3
 8009a5c:	000f4240 	.word	0x000f4240
 8009a60:	3b9aca00 	.word	0x3b9aca00

08009a64 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b082      	sub	sp, #8
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
 8009a6c:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8009a6e:	683a      	ldr	r2, [r7, #0]
 8009a70:	2103      	movs	r1, #3
 8009a72:	6878      	ldr	r0, [r7, #4]
 8009a74:	f000 f804 	bl	8009a80 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE3logEcPKc>
  }
 8009a78:	bf00      	nop
 8009a7a:	3708      	adds	r7, #8
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	bd80      	pop	{r7, pc}

08009a80 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE3logEcPKc>:
  void log(char byte, const char * msg)
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b088      	sub	sp, #32
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	60f8      	str	r0, [r7, #12]
 8009a88:	460b      	mov	r3, r1
 8009a8a:	607a      	str	r2, [r7, #4]
 8009a8c:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8009a8e:	f107 0314 	add.w	r3, r7, #20
 8009a92:	4618      	mov	r0, r3
 8009a94:	f7f8 fb18 	bl	80020c8 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8009a98:	7afb      	ldrb	r3, [r7, #11]
 8009a9a:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	f107 0214 	add.w	r2, r7, #20
 8009aaa:	2107      	movs	r1, #7
 8009aac:	68f8      	ldr	r0, [r7, #12]
 8009aae:	4798      	blx	r3
  }
 8009ab0:	bf00      	nop
 8009ab2:	3720      	adds	r7, #32
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	bd80      	pop	{r7, pc}

08009ab8 <_Z41__static_initialization_and_destruction_0ii>:
 8009ab8:	b5b0      	push	{r4, r5, r7, lr}
 8009aba:	b082      	sub	sp, #8
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
 8009ac0:	6039      	str	r1, [r7, #0]
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	2b01      	cmp	r3, #1
 8009ac6:	d155      	bne.n	8009b74 <_Z41__static_initialization_and_destruction_0ii+0xbc>
 8009ac8:	683b      	ldr	r3, [r7, #0]
 8009aca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009ace:	4293      	cmp	r3, r2
 8009ad0:	d150      	bne.n	8009b74 <_Z41__static_initialization_and_destruction_0ii+0xbc>
};

SerialComm comm_rosserial(huart_rosserial);
 8009ad2:	492a      	ldr	r1, [pc, #168]	@ (8009b7c <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8009ad4:	482a      	ldr	r0, [pc, #168]	@ (8009b80 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8009ad6:	f7f8 fea0 	bl	800281a <_ZN10SerialCommC1ER20__UART_HandleTypeDef>
/* GLOBAL VARIABLES START */

/*
 * ROS NodeHandle
 */
ros::NodeHandle nh;
 8009ada:	482a      	ldr	r0, [pc, #168]	@ (8009b84 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8009adc:	f7fe fa58 	bl	8007f90 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EEC1Ev>
const char* imu_frame_id = "imu_frame";

/*
 * Subscribers
 */
ros::Subscriber<geometry_msgs::Twist> sub_cmd_vel("/cmd_vel", &commandVelocityCallback);
 8009ae0:	2301      	movs	r3, #1
 8009ae2:	4a29      	ldr	r2, [pc, #164]	@ (8009b88 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8009ae4:	4929      	ldr	r1, [pc, #164]	@ (8009b8c <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8009ae6:	482a      	ldr	r0, [pc, #168]	@ (8009b90 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 8009ae8:	f7ff faa2 	bl	8009030 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>

/*
 * Publishers
 */
std_msgs::Float32 rpm_msg[NUM_OF_MOTOR];
 8009aec:	4b29      	ldr	r3, [pc, #164]	@ (8009b94 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 8009aee:	2403      	movs	r4, #3
 8009af0:	461d      	mov	r5, r3
 8009af2:	e004      	b.n	8009afe <_Z41__static_initialization_and_destruction_0ii+0x46>
 8009af4:	4628      	mov	r0, r5
 8009af6:	f7f9 f823 	bl	8002b40 <_ZN8std_msgs7Float32C1Ev>
 8009afa:	3c01      	subs	r4, #1
 8009afc:	3508      	adds	r5, #8
 8009afe:	2c00      	cmp	r4, #0
 8009b00:	daf8      	bge.n	8009af4 <_Z41__static_initialization_and_destruction_0ii+0x3c>
ros::Publisher pub_FL_rpm("/FL_rpm", &rpm_msg[front_left]);
 8009b02:	2300      	movs	r3, #0
 8009b04:	4a23      	ldr	r2, [pc, #140]	@ (8009b94 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 8009b06:	4924      	ldr	r1, [pc, #144]	@ (8009b98 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 8009b08:	4824      	ldr	r0, [pc, #144]	@ (8009b9c <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 8009b0a:	f7f8 fe51 	bl	80027b0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher pub_FR_rpm("/FR_rpm", &rpm_msg[front_right]);
 8009b0e:	2300      	movs	r3, #0
 8009b10:	4a23      	ldr	r2, [pc, #140]	@ (8009ba0 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 8009b12:	4924      	ldr	r1, [pc, #144]	@ (8009ba4 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 8009b14:	4824      	ldr	r0, [pc, #144]	@ (8009ba8 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
 8009b16:	f7f8 fe4b 	bl	80027b0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher pub_BL_rpm("/BL_rpm", &rpm_msg[back_left]);
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	4a23      	ldr	r2, [pc, #140]	@ (8009bac <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 8009b1e:	4924      	ldr	r1, [pc, #144]	@ (8009bb0 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
 8009b20:	4824      	ldr	r0, [pc, #144]	@ (8009bb4 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
 8009b22:	f7f8 fe45 	bl	80027b0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher pub_BR_rpm("/BR_rpm", &rpm_msg[back_right]);
 8009b26:	2300      	movs	r3, #0
 8009b28:	4a23      	ldr	r2, [pc, #140]	@ (8009bb8 <_Z41__static_initialization_and_destruction_0ii+0x100>)
 8009b2a:	4924      	ldr	r1, [pc, #144]	@ (8009bbc <_Z41__static_initialization_and_destruction_0ii+0x104>)
 8009b2c:	4824      	ldr	r0, [pc, #144]	@ (8009bc0 <_Z41__static_initialization_and_destruction_0ii+0x108>)
 8009b2e:	f7f8 fe3f 	bl	80027b0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>

sensor_msgs::Imu imu_msg;
 8009b32:	4824      	ldr	r0, [pc, #144]	@ (8009bc4 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
 8009b34:	f7fa fdf6 	bl	8004724 <_ZN11sensor_msgs3ImuC1Ev>
ros::Publisher pub_imu("/imu", &imu_msg);
 8009b38:	2300      	movs	r3, #0
 8009b3a:	4a22      	ldr	r2, [pc, #136]	@ (8009bc4 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
 8009b3c:	4922      	ldr	r1, [pc, #136]	@ (8009bc8 <_Z41__static_initialization_and_destruction_0ii+0x110>)
 8009b3e:	4823      	ldr	r0, [pc, #140]	@ (8009bcc <_Z41__static_initialization_and_destruction_0ii+0x114>)
 8009b40:	f7f8 fe36 	bl	80027b0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>

nav_msgs::Odometry odom_msg;
 8009b44:	4822      	ldr	r0, [pc, #136]	@ (8009bd0 <_Z41__static_initialization_and_destruction_0ii+0x118>)
 8009b46:	f7fd ffa7 	bl	8007a98 <_ZN8nav_msgs8OdometryC1Ev>
ros::Publisher pub_odom("/odom", &odom_msg);
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	4a20      	ldr	r2, [pc, #128]	@ (8009bd0 <_Z41__static_initialization_and_destruction_0ii+0x118>)
 8009b4e:	4921      	ldr	r1, [pc, #132]	@ (8009bd4 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
 8009b50:	4821      	ldr	r0, [pc, #132]	@ (8009bd8 <_Z41__static_initialization_and_destruction_0ii+0x120>)
 8009b52:	f7f8 fe2d 	bl	80027b0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>

sensor_msgs::JointState joint_states_msg;
 8009b56:	4821      	ldr	r0, [pc, #132]	@ (8009bdc <_Z41__static_initialization_and_destruction_0ii+0x124>)
 8009b58:	f7fb fbfe 	bl	8005358 <_ZN11sensor_msgs10JointStateC1Ev>
ros::Publisher pub_joint_states("/joint_states", &joint_states_msg);
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	4a1f      	ldr	r2, [pc, #124]	@ (8009bdc <_Z41__static_initialization_and_destruction_0ii+0x124>)
 8009b60:	491f      	ldr	r1, [pc, #124]	@ (8009be0 <_Z41__static_initialization_and_destruction_0ii+0x128>)
 8009b62:	4820      	ldr	r0, [pc, #128]	@ (8009be4 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
 8009b64:	f7f8 fe24 	bl	80027b0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>

/*
* TF broadcaster
*/
geometry_msgs::TransformStamped odom_tf_msg; // tf information between "odom" and "base_link"
 8009b68:	481f      	ldr	r0, [pc, #124]	@ (8009be8 <_Z41__static_initialization_and_destruction_0ii+0x130>)
 8009b6a:	f7fc fd33 	bl	80065d4 <_ZN13geometry_msgs16TransformStampedC1Ev>
tf::TransformBroadcaster tf_broadcaster;
 8009b6e:	481f      	ldr	r0, [pc, #124]	@ (8009bec <_Z41__static_initialization_and_destruction_0ii+0x134>)
 8009b70:	f7fe f9c0 	bl	8007ef4 <_ZN2tf20TransformBroadcasterC1Ev>
 8009b74:	bf00      	nop
 8009b76:	3708      	adds	r7, #8
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	bdb0      	pop	{r4, r5, r7, pc}
 8009b7c:	2000018c 	.word	0x2000018c
 8009b80:	2000025c 	.word	0x2000025c
 8009b84:	20004268 	.word	0x20004268
 8009b88:	080081a1 	.word	0x080081a1
 8009b8c:	080109bc 	.word	0x080109bc
 8009b90:	20008320 	.word	0x20008320
 8009b94:	20008380 	.word	0x20008380
 8009b98:	080109c8 	.word	0x080109c8
 8009b9c:	200083a0 	.word	0x200083a0
 8009ba0:	20008388 	.word	0x20008388
 8009ba4:	080109d0 	.word	0x080109d0
 8009ba8:	200083b4 	.word	0x200083b4
 8009bac:	20008390 	.word	0x20008390
 8009bb0:	080109d8 	.word	0x080109d8
 8009bb4:	200083c8 	.word	0x200083c8
 8009bb8:	20008398 	.word	0x20008398
 8009bbc:	080109e0 	.word	0x080109e0
 8009bc0:	200083dc 	.word	0x200083dc
 8009bc4:	200083f0 	.word	0x200083f0
 8009bc8:	08010978 	.word	0x08010978
 8009bcc:	20008548 	.word	0x20008548
 8009bd0:	20008560 	.word	0x20008560
 8009bd4:	080109e8 	.word	0x080109e8
 8009bd8:	20008868 	.word	0x20008868
 8009bdc:	20008880 	.word	0x20008880
 8009be0:	080109f0 	.word	0x080109f0
 8009be4:	200088d8 	.word	0x200088d8
 8009be8:	200088f0 	.word	0x200088f0
 8009bec:	20008960 	.word	0x20008960

08009bf0 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:

  virtual void callback(unsigned char* data) override
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b082      	sub	sp, #8
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
 8009bf8:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	3310      	adds	r3, #16
 8009bfe:	6839      	ldr	r1, [r7, #0]
 8009c00:	4618      	mov	r0, r3
 8009c02:	f7fc fc29 	bl	8006458 <_ZN13geometry_msgs5Twist11deserializeEPh>
    this->cb_(msg);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c0a:	687a      	ldr	r2, [r7, #4]
 8009c0c:	3210      	adds	r2, #16
 8009c0e:	4610      	mov	r0, r2
 8009c10:	4798      	blx	r3
  }
 8009c12:	bf00      	nop
 8009c14:	3708      	adds	r7, #8
 8009c16:	46bd      	mov	sp, r7
 8009c18:	bd80      	pop	{r7, pc}

08009c1a <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5() override
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType() override
 8009c1a:	b480      	push	{r7}
 8009c1c:	b083      	sub	sp, #12
 8009c1e:	af00      	add	r7, sp, #0
 8009c20:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
  }
 8009c26:	4618      	mov	r0, r3
 8009c28:	370c      	adds	r7, #12
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	bc80      	pop	{r7}
 8009c2e:	4770      	bx	lr

08009c30 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b082      	sub	sp, #8
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	3310      	adds	r3, #16
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	f7fc fc31 	bl	80064a4 <_ZN13geometry_msgs5Twist7getTypeEv>
 8009c42:	4603      	mov	r3, r0
  }
 8009c44:	4618      	mov	r0, r3
 8009c46:	3708      	adds	r7, #8
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	bd80      	pop	{r7, pc}

08009c4c <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b082      	sub	sp, #8
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	3310      	adds	r3, #16
 8009c58:	4618      	mov	r0, r3
 8009c5a:	f7fc fc2f 	bl	80064bc <_ZN13geometry_msgs5Twist6getMD5Ev>
 8009c5e:	4603      	mov	r3, r0
  }
 8009c60:	4618      	mov	r0, r3
 8009c62:	3708      	adds	r7, #8
 8009c64:	46bd      	mov	sp, r7
 8009c66:	bd80      	pop	{r7, pc}

08009c68 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi8192ELi8192EE9connectedEv>:
  virtual bool connected() override
 8009c68:	b480      	push	{r7}
 8009c6a:	b083      	sub	sp, #12
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
    return configured_;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8009c76:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
  };
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	370c      	adds	r7, #12
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	bc80      	pop	{r7}
 8009c82:	4770      	bx	lr

08009c84 <_GLOBAL__sub_I_comm_rosserial>:
 8009c84:	b580      	push	{r7, lr}
 8009c86:	af00      	add	r7, sp, #0
 8009c88:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8009c8c:	2001      	movs	r0, #1
 8009c8e:	f7ff ff13 	bl	8009ab8 <_Z41__static_initialization_and_destruction_0ii>
 8009c92:	bd80      	pop	{r7, pc}

08009c94 <_Z6millisv>:
Quaternion_t quat_buffer = { .q0 = 1, .q1 = 0,
							.q2 = 0, .q3 = 0 };		// Buffer to hold orientation (Quaternion).
MadgwickFilter_t my_madgwick;

uint32_t millis(void)
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	af00      	add	r7, sp, #0
    return HAL_GetTick();
 8009c98:	f000 fc70 	bl	800a57c <HAL_GetTick>
 8009c9c:	4603      	mov	r3, r0
}
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	bd80      	pop	{r7, pc}
	...

08009ca4 <_Z18mecabot_motor_initv>:

status_t mecabot_motor_init(void)
{
 8009ca4:	b590      	push	{r4, r7, lr}
 8009ca6:	b085      	sub	sp, #20
 8009ca8:	af00      	add	r7, sp, #0
    /* Hard-coded value for the Control Board */

	// Front Left motor setting
    Motor_Handle_t handle = {
 8009caa:	4b1c      	ldr	r3, [pc, #112]	@ (8009d1c <_Z18mecabot_motor_initv+0x78>)
 8009cac:	463c      	mov	r4, r7
 8009cae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009cb0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        .pwm_channel = TIM_CHANNEL_3,
        .direction_port = GPIOC,
        .direction_pin = GPIO_PIN_2,
        .pwm_frequency = MOTOR_PWM_FREQUENCY
    };
    mecabot_motor[front_left] = Motor_Init(handle);
 8009cb4:	463b      	mov	r3, r7
 8009cb6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009cb8:	f7f7 fb0c 	bl	80012d4 <Motor_Init>
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	4a18      	ldr	r2, [pc, #96]	@ (8009d20 <_Z18mecabot_motor_initv+0x7c>)
 8009cc0:	6013      	str	r3, [r2, #0]
    // Front Right motor setting
    handle.pwm_channel = TIM_CHANNEL_1;
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	603b      	str	r3, [r7, #0]
    handle.direction_port = GPIOC;
 8009cc6:	4b17      	ldr	r3, [pc, #92]	@ (8009d24 <_Z18mecabot_motor_initv+0x80>)
 8009cc8:	607b      	str	r3, [r7, #4]
    handle.direction_pin = GPIO_PIN_3;
 8009cca:	2308      	movs	r3, #8
 8009ccc:	813b      	strh	r3, [r7, #8]
    mecabot_motor[front_right] = Motor_Init(handle);
 8009cce:	463b      	mov	r3, r7
 8009cd0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009cd2:	f7f7 faff 	bl	80012d4 <Motor_Init>
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	4a11      	ldr	r2, [pc, #68]	@ (8009d20 <_Z18mecabot_motor_initv+0x7c>)
 8009cda:	6053      	str	r3, [r2, #4]
    // Back Left motor setting
    handle.pwm_channel = TIM_CHANNEL_4;
 8009cdc:	230c      	movs	r3, #12
 8009cde:	603b      	str	r3, [r7, #0]
    handle.direction_port = GPIOC;
 8009ce0:	4b10      	ldr	r3, [pc, #64]	@ (8009d24 <_Z18mecabot_motor_initv+0x80>)
 8009ce2:	607b      	str	r3, [r7, #4]
    handle.direction_pin = GPIO_PIN_0;
 8009ce4:	2301      	movs	r3, #1
 8009ce6:	813b      	strh	r3, [r7, #8]
    mecabot_motor[back_left] = Motor_Init(handle);
 8009ce8:	463b      	mov	r3, r7
 8009cea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009cec:	f7f7 faf2 	bl	80012d4 <Motor_Init>
 8009cf0:	4603      	mov	r3, r0
 8009cf2:	4a0b      	ldr	r2, [pc, #44]	@ (8009d20 <_Z18mecabot_motor_initv+0x7c>)
 8009cf4:	6093      	str	r3, [r2, #8]
    // Back Right motor setting
    handle.pwm_channel = TIM_CHANNEL_2;
 8009cf6:	2304      	movs	r3, #4
 8009cf8:	603b      	str	r3, [r7, #0]
    handle.direction_port = GPIOC;
 8009cfa:	4b0a      	ldr	r3, [pc, #40]	@ (8009d24 <_Z18mecabot_motor_initv+0x80>)
 8009cfc:	607b      	str	r3, [r7, #4]
    handle.direction_pin = GPIO_PIN_1;
 8009cfe:	2302      	movs	r3, #2
 8009d00:	813b      	strh	r3, [r7, #8]
    mecabot_motor[back_right] = Motor_Init(handle);
 8009d02:	463b      	mov	r3, r7
 8009d04:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009d06:	f7f7 fae5 	bl	80012d4 <Motor_Init>
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	4a04      	ldr	r2, [pc, #16]	@ (8009d20 <_Z18mecabot_motor_initv+0x7c>)
 8009d0e:	60d3      	str	r3, [r2, #12]

    // TODO: Check if all motors were initialized correctly
    return STATUS_OK;
 8009d10:	2300      	movs	r3, #0
}
 8009d12:	4618      	mov	r0, r3
 8009d14:	3714      	adds	r7, #20
 8009d16:	46bd      	mov	sp, r7
 8009d18:	bd90      	pop	{r4, r7, pc}
 8009d1a:	bf00      	nop
 8009d1c:	08010a00 	.word	0x08010a00
 8009d20:	20008a9c 	.word	0x20008a9c
 8009d24:	40011000 	.word	0x40011000

08009d28 <_Z20mecabot_encoder_initv>:

status_t mecabot_encoder_init(void)
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b088      	sub	sp, #32
 8009d2c:	af00      	add	r7, sp, #0
	/* Hard-coded value for the Control Board */

	// Front Left encoder setting
    Encoder_Handle_t handle_encoder = {
 8009d2e:	4a2f      	ldr	r2, [pc, #188]	@ (8009dec <_Z20mecabot_encoder_initv+0xc4>)
 8009d30:	f107 0314 	add.w	r3, r7, #20
 8009d34:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009d38:	e883 0003 	stmia.w	r3, {r0, r1}
        .max_count = 0xFFFFFFFF,
        .tick_read_channel = TIM_CHANNEL_3
    };
    encoder[front_left] = Encoder_Init(handle_encoder);
 8009d3c:	f107 0314 	add.w	r3, r7, #20
 8009d40:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009d44:	f7f7 fc1f 	bl	8001586 <Encoder_Init>
 8009d48:	4603      	mov	r3, r0
 8009d4a:	4a29      	ldr	r2, [pc, #164]	@ (8009df0 <_Z20mecabot_encoder_initv+0xc8>)
 8009d4c:	6013      	str	r3, [r2, #0]
    // Front Right encoder setting
    handle_encoder.tick_read_channel = TIM_CHANNEL_1;
 8009d4e:	2300      	movs	r3, #0
 8009d50:	833b      	strh	r3, [r7, #24]
    encoder[front_right] = Encoder_Init(handle_encoder);
 8009d52:	f107 0314 	add.w	r3, r7, #20
 8009d56:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009d5a:	f7f7 fc14 	bl	8001586 <Encoder_Init>
 8009d5e:	4603      	mov	r3, r0
 8009d60:	4a23      	ldr	r2, [pc, #140]	@ (8009df0 <_Z20mecabot_encoder_initv+0xc8>)
 8009d62:	6053      	str	r3, [r2, #4]
    // Back Left encoder setting
    handle_encoder.tick_read_channel = TIM_CHANNEL_4;
 8009d64:	230c      	movs	r3, #12
 8009d66:	833b      	strh	r3, [r7, #24]
    encoder[back_left] = Encoder_Init(handle_encoder);
 8009d68:	f107 0314 	add.w	r3, r7, #20
 8009d6c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009d70:	f7f7 fc09 	bl	8001586 <Encoder_Init>
 8009d74:	4603      	mov	r3, r0
 8009d76:	4a1e      	ldr	r2, [pc, #120]	@ (8009df0 <_Z20mecabot_encoder_initv+0xc8>)
 8009d78:	6093      	str	r3, [r2, #8]
    // Back Right encoder setting
    handle_encoder.tick_read_channel = TIM_CHANNEL_2;
 8009d7a:	2304      	movs	r3, #4
 8009d7c:	833b      	strh	r3, [r7, #24]
    encoder[back_right] = Encoder_Init(handle_encoder);
 8009d7e:	f107 0314 	add.w	r3, r7, #20
 8009d82:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009d86:	f7f7 fbfe 	bl	8001586 <Encoder_Init>
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	4a18      	ldr	r2, [pc, #96]	@ (8009df0 <_Z20mecabot_encoder_initv+0xc8>)
 8009d8e:	60d3      	str	r3, [r2, #12]

    // Initialize the encoder Low-pass Filter
    float b_coeff[] = { 0.2452,	0.2452 };
 8009d90:	4a18      	ldr	r2, [pc, #96]	@ (8009df4 <_Z20mecabot_encoder_initv+0xcc>)
 8009d92:	f107 030c 	add.w	r3, r7, #12
 8009d96:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009d9a:	e883 0003 	stmia.w	r3, {r0, r1}
    float a_coeff[] = {    1.0, -0.5095 };
 8009d9e:	4a16      	ldr	r2, [pc, #88]	@ (8009df8 <_Z20mecabot_encoder_initv+0xd0>)
 8009da0:	1d3b      	adds	r3, r7, #4
 8009da2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009da6:	e883 0003 	stmia.w	r3, {r0, r1}
	for (int i = 0; i < NUM_OF_MOTOR; i++)
 8009daa:	2300      	movs	r3, #0
 8009dac:	61fb      	str	r3, [r7, #28]
 8009dae:	e015      	b.n	8009ddc <_Z20mecabot_encoder_initv+0xb4>
	{
		encoder_filter[i] = new FO_IIR_Filter_t;
 8009db0:	2018      	movs	r0, #24
 8009db2:	f004 fb51 	bl	800e458 <_Znwj>
 8009db6:	4603      	mov	r3, r0
 8009db8:	4619      	mov	r1, r3
 8009dba:	4a10      	ldr	r2, [pc, #64]	@ (8009dfc <_Z20mecabot_encoder_initv+0xd4>)
 8009dbc:	69fb      	ldr	r3, [r7, #28]
 8009dbe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		FO_IIR_Init(encoder_filter[i], b_coeff, a_coeff);
 8009dc2:	4a0e      	ldr	r2, [pc, #56]	@ (8009dfc <_Z20mecabot_encoder_initv+0xd4>)
 8009dc4:	69fb      	ldr	r3, [r7, #28]
 8009dc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009dca:	1d3a      	adds	r2, r7, #4
 8009dcc:	f107 010c 	add.w	r1, r7, #12
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	f7f7 fa19 	bl	8001208 <FO_IIR_Init>
	for (int i = 0; i < NUM_OF_MOTOR; i++)
 8009dd6:	69fb      	ldr	r3, [r7, #28]
 8009dd8:	3301      	adds	r3, #1
 8009dda:	61fb      	str	r3, [r7, #28]
 8009ddc:	69fb      	ldr	r3, [r7, #28]
 8009dde:	2b03      	cmp	r3, #3
 8009de0:	dde6      	ble.n	8009db0 <_Z20mecabot_encoder_initv+0x88>
	}
    // TODO: Check if all encoders were initialized correctly
    return STATUS_OK;
 8009de2:	2300      	movs	r3, #0
}
 8009de4:	4618      	mov	r0, r3
 8009de6:	3720      	adds	r7, #32
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bd80      	pop	{r7, pc}
 8009dec:	08010a10 	.word	0x08010a10
 8009df0:	20008aac 	.word	0x20008aac
 8009df4:	08010a18 	.word	0x08010a18
 8009df8:	08010a20 	.word	0x08010a20
 8009dfc:	20008abc 	.word	0x20008abc

08009e00 <_Z16mecabot_pid_initv>:

status_t mecabot_pid_init(void)
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b084      	sub	sp, #16
 8009e04:	af02      	add	r7, sp, #8
	for (int i = 0; i < NUM_OF_MOTOR; i++)
 8009e06:	2300      	movs	r3, #0
 8009e08:	607b      	str	r3, [r7, #4]
 8009e0a:	e014      	b.n	8009e36 <_Z16mecabot_pid_initv+0x36>
	{
		controller[i] = PID_Init(kp, ki, kd);
 8009e0c:	a30e      	add	r3, pc, #56	@ (adr r3, 8009e48 <_Z16mecabot_pid_initv+0x48>)
 8009e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e12:	e9cd 2300 	strd	r2, r3, [sp]
 8009e16:	a30e      	add	r3, pc, #56	@ (adr r3, 8009e50 <_Z16mecabot_pid_initv+0x50>)
 8009e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e1c:	a10e      	add	r1, pc, #56	@ (adr r1, 8009e58 <_Z16mecabot_pid_initv+0x58>)
 8009e1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e22:	f000 f837 	bl	8009e94 <PID_Init>
 8009e26:	4602      	mov	r2, r0
 8009e28:	490d      	ldr	r1, [pc, #52]	@ (8009e60 <_Z16mecabot_pid_initv+0x60>)
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < NUM_OF_MOTOR; i++)
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	3301      	adds	r3, #1
 8009e34:	607b      	str	r3, [r7, #4]
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	2b03      	cmp	r3, #3
 8009e3a:	dde7      	ble.n	8009e0c <_Z16mecabot_pid_initv+0xc>
	}
}
 8009e3c:	bf00      	nop
 8009e3e:	4618      	mov	r0, r3
 8009e40:	3708      	adds	r7, #8
 8009e42:	46bd      	mov	sp, r7
 8009e44:	bd80      	pop	{r7, pc}
 8009e46:	bf00      	nop
 8009e48:	020c49ba 	.word	0x020c49ba
 8009e4c:	3f76872b 	.word	0x3f76872b
 8009e50:	9999999a 	.word	0x9999999a
 8009e54:	40059999 	.word	0x40059999
 8009e58:	147ae148 	.word	0x147ae148
 8009e5c:	3fed47ae 	.word	0x3fed47ae
 8009e60:	20008acc 	.word	0x20008acc

08009e64 <_Z19mecabot_motor_startP7Motor_t>:

    return MadgwickFilter_Init(&my_madgwick, filter_handle);
}

status_t mecabot_motor_start(Motor motor)
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b082      	sub	sp, #8
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
    return Motor_Start(motor);
 8009e6c:	6878      	ldr	r0, [r7, #4]
 8009e6e:	f7f7 fb3f 	bl	80014f0 <Motor_Start>
 8009e72:	4603      	mov	r3, r0
}
 8009e74:	4618      	mov	r0, r3
 8009e76:	3708      	adds	r7, #8
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	bd80      	pop	{r7, pc}

08009e7c <_Z21mecabot_encoder_startP9Encoder_t>:
{
    return Motor_Stop(motor);
}

status_t mecabot_encoder_start(Encoder encoder)
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b082      	sub	sp, #8
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
	return Encoder_Start(encoder);
 8009e84:	6878      	ldr	r0, [r7, #4]
 8009e86:	f7f7 fb99 	bl	80015bc <Encoder_Start>
 8009e8a:	4603      	mov	r3, r0
}
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	3708      	adds	r7, #8
 8009e90:	46bd      	mov	sp, r7
 8009e92:	bd80      	pop	{r7, pc}

08009e94 <PID_Init>:
#include "pid.h"

PID_t* PID_Init(double p, double i, double d)
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b086      	sub	sp, #24
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8009e9e:	e9c7 2300 	strd	r2, r3, [r7]
    PID_t *object = calloc(1, sizeof(PID_t));
 8009ea2:	2148      	movs	r1, #72	@ 0x48
 8009ea4:	2001      	movs	r0, #1
 8009ea6:	f006 f915 	bl	80100d4 <calloc>
 8009eaa:	4603      	mov	r3, r0
 8009eac:	617b      	str	r3, [r7, #20]

    object->set_point = 0;
 8009eae:	6979      	ldr	r1, [r7, #20]
 8009eb0:	f04f 0200 	mov.w	r2, #0
 8009eb4:	f04f 0300 	mov.w	r3, #0
 8009eb8:	e9c1 2300 	strd	r2, r3, [r1]
    
    object->kp = p;
 8009ebc:	6979      	ldr	r1, [r7, #20]
 8009ebe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009ec2:	e9c1 2302 	strd	r2, r3, [r1, #8]
    object->ki = i;
 8009ec6:	6979      	ldr	r1, [r7, #20]
 8009ec8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ecc:	e9c1 2304 	strd	r2, r3, [r1, #16]
    object->kd = d;
 8009ed0:	6979      	ldr	r1, [r7, #20]
 8009ed2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009ed6:	e9c1 2306 	strd	r2, r3, [r1, #24]

    object->P = 0;
 8009eda:	6979      	ldr	r1, [r7, #20]
 8009edc:	f04f 0200 	mov.w	r2, #0
 8009ee0:	f04f 0300 	mov.w	r3, #0
 8009ee4:	e9c1 2308 	strd	r2, r3, [r1, #32]
    object->I = 0;
 8009ee8:	6979      	ldr	r1, [r7, #20]
 8009eea:	f04f 0200 	mov.w	r2, #0
 8009eee:	f04f 0300 	mov.w	r3, #0
 8009ef2:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    object->D = 0;
 8009ef6:	6979      	ldr	r1, [r7, #20]
 8009ef8:	f04f 0200 	mov.w	r2, #0
 8009efc:	f04f 0300 	mov.w	r3, #0
 8009f00:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30

    object->integral_sum = 0;
 8009f04:	6979      	ldr	r1, [r7, #20]
 8009f06:	f04f 0200 	mov.w	r2, #0
 8009f0a:	f04f 0300 	mov.w	r3, #0
 8009f0e:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    object->last_input = 0;
 8009f12:	6979      	ldr	r1, [r7, #20]
 8009f14:	f04f 0200 	mov.w	r2, #0
 8009f18:	f04f 0300 	mov.w	r3, #0
 8009f1c:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    return object;
 8009f20:	697b      	ldr	r3, [r7, #20]
}
 8009f22:	4618      	mov	r0, r3
 8009f24:	3718      	adds	r7, #24
 8009f26:	46bd      	mov	sp, r7
 8009f28:	bd80      	pop	{r7, pc}
	...

08009f2c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009f2c:	b480      	push	{r7}
 8009f2e:	b085      	sub	sp, #20
 8009f30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8009f32:	4b15      	ldr	r3, [pc, #84]	@ (8009f88 <HAL_MspInit+0x5c>)
 8009f34:	699b      	ldr	r3, [r3, #24]
 8009f36:	4a14      	ldr	r2, [pc, #80]	@ (8009f88 <HAL_MspInit+0x5c>)
 8009f38:	f043 0301 	orr.w	r3, r3, #1
 8009f3c:	6193      	str	r3, [r2, #24]
 8009f3e:	4b12      	ldr	r3, [pc, #72]	@ (8009f88 <HAL_MspInit+0x5c>)
 8009f40:	699b      	ldr	r3, [r3, #24]
 8009f42:	f003 0301 	and.w	r3, r3, #1
 8009f46:	60bb      	str	r3, [r7, #8]
 8009f48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8009f4a:	4b0f      	ldr	r3, [pc, #60]	@ (8009f88 <HAL_MspInit+0x5c>)
 8009f4c:	69db      	ldr	r3, [r3, #28]
 8009f4e:	4a0e      	ldr	r2, [pc, #56]	@ (8009f88 <HAL_MspInit+0x5c>)
 8009f50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009f54:	61d3      	str	r3, [r2, #28]
 8009f56:	4b0c      	ldr	r3, [pc, #48]	@ (8009f88 <HAL_MspInit+0x5c>)
 8009f58:	69db      	ldr	r3, [r3, #28]
 8009f5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009f5e:	607b      	str	r3, [r7, #4]
 8009f60:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8009f62:	4b0a      	ldr	r3, [pc, #40]	@ (8009f8c <HAL_MspInit+0x60>)
 8009f64:	685b      	ldr	r3, [r3, #4]
 8009f66:	60fb      	str	r3, [r7, #12]
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8009f6e:	60fb      	str	r3, [r7, #12]
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8009f76:	60fb      	str	r3, [r7, #12]
 8009f78:	4a04      	ldr	r2, [pc, #16]	@ (8009f8c <HAL_MspInit+0x60>)
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009f7e:	bf00      	nop
 8009f80:	3714      	adds	r7, #20
 8009f82:	46bd      	mov	sp, r7
 8009f84:	bc80      	pop	{r7}
 8009f86:	4770      	bx	lr
 8009f88:	40021000 	.word	0x40021000
 8009f8c:	40010000 	.word	0x40010000

08009f90 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b08a      	sub	sp, #40	@ 0x28
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009f98:	f107 0314 	add.w	r3, r7, #20
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	601a      	str	r2, [r3, #0]
 8009fa0:	605a      	str	r2, [r3, #4]
 8009fa2:	609a      	str	r2, [r3, #8]
 8009fa4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	4a1d      	ldr	r2, [pc, #116]	@ (800a020 <HAL_I2C_MspInit+0x90>)
 8009fac:	4293      	cmp	r3, r2
 8009fae:	d132      	bne.n	800a016 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009fb0:	4b1c      	ldr	r3, [pc, #112]	@ (800a024 <HAL_I2C_MspInit+0x94>)
 8009fb2:	699b      	ldr	r3, [r3, #24]
 8009fb4:	4a1b      	ldr	r2, [pc, #108]	@ (800a024 <HAL_I2C_MspInit+0x94>)
 8009fb6:	f043 0308 	orr.w	r3, r3, #8
 8009fba:	6193      	str	r3, [r2, #24]
 8009fbc:	4b19      	ldr	r3, [pc, #100]	@ (800a024 <HAL_I2C_MspInit+0x94>)
 8009fbe:	699b      	ldr	r3, [r3, #24]
 8009fc0:	f003 0308 	and.w	r3, r3, #8
 8009fc4:	613b      	str	r3, [r7, #16]
 8009fc6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8009fc8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8009fcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009fce:	2312      	movs	r3, #18
 8009fd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009fd2:	2303      	movs	r3, #3
 8009fd4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009fd6:	f107 0314 	add.w	r3, r7, #20
 8009fda:	4619      	mov	r1, r3
 8009fdc:	4812      	ldr	r0, [pc, #72]	@ (800a028 <HAL_I2C_MspInit+0x98>)
 8009fde:	f001 f869 	bl	800b0b4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8009fe2:	4b12      	ldr	r3, [pc, #72]	@ (800a02c <HAL_I2C_MspInit+0x9c>)
 8009fe4:	685b      	ldr	r3, [r3, #4]
 8009fe6:	627b      	str	r3, [r7, #36]	@ 0x24
 8009fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fea:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8009fee:	627b      	str	r3, [r7, #36]	@ 0x24
 8009ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ff2:	f043 0302 	orr.w	r3, r3, #2
 8009ff6:	627b      	str	r3, [r7, #36]	@ 0x24
 8009ff8:	4a0c      	ldr	r2, [pc, #48]	@ (800a02c <HAL_I2C_MspInit+0x9c>)
 8009ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ffc:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8009ffe:	4b09      	ldr	r3, [pc, #36]	@ (800a024 <HAL_I2C_MspInit+0x94>)
 800a000:	69db      	ldr	r3, [r3, #28]
 800a002:	4a08      	ldr	r2, [pc, #32]	@ (800a024 <HAL_I2C_MspInit+0x94>)
 800a004:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a008:	61d3      	str	r3, [r2, #28]
 800a00a:	4b06      	ldr	r3, [pc, #24]	@ (800a024 <HAL_I2C_MspInit+0x94>)
 800a00c:	69db      	ldr	r3, [r3, #28]
 800a00e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a012:	60fb      	str	r3, [r7, #12]
 800a014:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800a016:	bf00      	nop
 800a018:	3728      	adds	r7, #40	@ 0x28
 800a01a:	46bd      	mov	sp, r7
 800a01c:	bd80      	pop	{r7, pc}
 800a01e:	bf00      	nop
 800a020:	40005400 	.word	0x40005400
 800a024:	40021000 	.word	0x40021000
 800a028:	40010c00 	.word	0x40010c00
 800a02c:	40010000 	.word	0x40010000

0800a030 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b08a      	sub	sp, #40	@ 0x28
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a038:	f107 0318 	add.w	r3, r7, #24
 800a03c:	2200      	movs	r2, #0
 800a03e:	601a      	str	r2, [r3, #0]
 800a040:	605a      	str	r2, [r3, #4]
 800a042:	609a      	str	r2, [r3, #8]
 800a044:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	4a23      	ldr	r2, [pc, #140]	@ (800a0d8 <HAL_TIM_Base_MspInit+0xa8>)
 800a04c:	4293      	cmp	r3, r2
 800a04e:	d10c      	bne.n	800a06a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800a050:	4b22      	ldr	r3, [pc, #136]	@ (800a0dc <HAL_TIM_Base_MspInit+0xac>)
 800a052:	699b      	ldr	r3, [r3, #24]
 800a054:	4a21      	ldr	r2, [pc, #132]	@ (800a0dc <HAL_TIM_Base_MspInit+0xac>)
 800a056:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800a05a:	6193      	str	r3, [r2, #24]
 800a05c:	4b1f      	ldr	r3, [pc, #124]	@ (800a0dc <HAL_TIM_Base_MspInit+0xac>)
 800a05e:	699b      	ldr	r3, [r3, #24]
 800a060:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a064:	617b      	str	r3, [r7, #20]
 800a066:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800a068:	e031      	b.n	800a0ce <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM8)
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	4a1c      	ldr	r2, [pc, #112]	@ (800a0e0 <HAL_TIM_Base_MspInit+0xb0>)
 800a070:	4293      	cmp	r3, r2
 800a072:	d12c      	bne.n	800a0ce <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800a074:	4b19      	ldr	r3, [pc, #100]	@ (800a0dc <HAL_TIM_Base_MspInit+0xac>)
 800a076:	699b      	ldr	r3, [r3, #24]
 800a078:	4a18      	ldr	r2, [pc, #96]	@ (800a0dc <HAL_TIM_Base_MspInit+0xac>)
 800a07a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800a07e:	6193      	str	r3, [r2, #24]
 800a080:	4b16      	ldr	r3, [pc, #88]	@ (800a0dc <HAL_TIM_Base_MspInit+0xac>)
 800a082:	699b      	ldr	r3, [r3, #24]
 800a084:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a088:	613b      	str	r3, [r7, #16]
 800a08a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a08c:	4b13      	ldr	r3, [pc, #76]	@ (800a0dc <HAL_TIM_Base_MspInit+0xac>)
 800a08e:	699b      	ldr	r3, [r3, #24]
 800a090:	4a12      	ldr	r2, [pc, #72]	@ (800a0dc <HAL_TIM_Base_MspInit+0xac>)
 800a092:	f043 0310 	orr.w	r3, r3, #16
 800a096:	6193      	str	r3, [r2, #24]
 800a098:	4b10      	ldr	r3, [pc, #64]	@ (800a0dc <HAL_TIM_Base_MspInit+0xac>)
 800a09a:	699b      	ldr	r3, [r3, #24]
 800a09c:	f003 0310 	and.w	r3, r3, #16
 800a0a0:	60fb      	str	r3, [r7, #12]
 800a0a2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800a0a4:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 800a0a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a0b2:	f107 0318 	add.w	r3, r7, #24
 800a0b6:	4619      	mov	r1, r3
 800a0b8:	480a      	ldr	r0, [pc, #40]	@ (800a0e4 <HAL_TIM_Base_MspInit+0xb4>)
 800a0ba:	f000 fffb 	bl	800b0b4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 800a0be:	2200      	movs	r2, #0
 800a0c0:	2100      	movs	r1, #0
 800a0c2:	202e      	movs	r0, #46	@ 0x2e
 800a0c4:	f000 fb3b 	bl	800a73e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 800a0c8:	202e      	movs	r0, #46	@ 0x2e
 800a0ca:	f000 fb54 	bl	800a776 <HAL_NVIC_EnableIRQ>
}
 800a0ce:	bf00      	nop
 800a0d0:	3728      	adds	r7, #40	@ 0x28
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	bd80      	pop	{r7, pc}
 800a0d6:	bf00      	nop
 800a0d8:	40012c00 	.word	0x40012c00
 800a0dc:	40021000 	.word	0x40021000
 800a0e0:	40013400 	.word	0x40013400
 800a0e4:	40011000 	.word	0x40011000

0800a0e8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b088      	sub	sp, #32
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a0f0:	f107 0310 	add.w	r3, r7, #16
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	601a      	str	r2, [r3, #0]
 800a0f8:	605a      	str	r2, [r3, #4]
 800a0fa:	609a      	str	r2, [r3, #8]
 800a0fc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	4a10      	ldr	r2, [pc, #64]	@ (800a144 <HAL_TIM_MspPostInit+0x5c>)
 800a104:	4293      	cmp	r3, r2
 800a106:	d118      	bne.n	800a13a <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a108:	4b0f      	ldr	r3, [pc, #60]	@ (800a148 <HAL_TIM_MspPostInit+0x60>)
 800a10a:	699b      	ldr	r3, [r3, #24]
 800a10c:	4a0e      	ldr	r2, [pc, #56]	@ (800a148 <HAL_TIM_MspPostInit+0x60>)
 800a10e:	f043 0304 	orr.w	r3, r3, #4
 800a112:	6193      	str	r3, [r2, #24]
 800a114:	4b0c      	ldr	r3, [pc, #48]	@ (800a148 <HAL_TIM_MspPostInit+0x60>)
 800a116:	699b      	ldr	r3, [r3, #24]
 800a118:	f003 0304 	and.w	r3, r3, #4
 800a11c:	60fb      	str	r3, [r7, #12]
 800a11e:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800a120:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 800a124:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a126:	2302      	movs	r3, #2
 800a128:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a12a:	2302      	movs	r3, #2
 800a12c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a12e:	f107 0310 	add.w	r3, r7, #16
 800a132:	4619      	mov	r1, r3
 800a134:	4805      	ldr	r0, [pc, #20]	@ (800a14c <HAL_TIM_MspPostInit+0x64>)
 800a136:	f000 ffbd 	bl	800b0b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800a13a:	bf00      	nop
 800a13c:	3720      	adds	r7, #32
 800a13e:	46bd      	mov	sp, r7
 800a140:	bd80      	pop	{r7, pc}
 800a142:	bf00      	nop
 800a144:	40012c00 	.word	0x40012c00
 800a148:	40021000 	.word	0x40021000
 800a14c:	40010800 	.word	0x40010800

0800a150 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800a150:	b580      	push	{r7, lr}
 800a152:	b08a      	sub	sp, #40	@ 0x28
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a158:	f107 0314 	add.w	r3, r7, #20
 800a15c:	2200      	movs	r2, #0
 800a15e:	601a      	str	r2, [r3, #0]
 800a160:	605a      	str	r2, [r3, #4]
 800a162:	609a      	str	r2, [r3, #8]
 800a164:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	4a4e      	ldr	r2, [pc, #312]	@ (800a2a4 <HAL_UART_MspInit+0x154>)
 800a16c:	4293      	cmp	r3, r2
 800a16e:	f040 8094 	bne.w	800a29a <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800a172:	4b4d      	ldr	r3, [pc, #308]	@ (800a2a8 <HAL_UART_MspInit+0x158>)
 800a174:	699b      	ldr	r3, [r3, #24]
 800a176:	4a4c      	ldr	r2, [pc, #304]	@ (800a2a8 <HAL_UART_MspInit+0x158>)
 800a178:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a17c:	6193      	str	r3, [r2, #24]
 800a17e:	4b4a      	ldr	r3, [pc, #296]	@ (800a2a8 <HAL_UART_MspInit+0x158>)
 800a180:	699b      	ldr	r3, [r3, #24]
 800a182:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a186:	613b      	str	r3, [r7, #16]
 800a188:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a18a:	4b47      	ldr	r3, [pc, #284]	@ (800a2a8 <HAL_UART_MspInit+0x158>)
 800a18c:	699b      	ldr	r3, [r3, #24]
 800a18e:	4a46      	ldr	r2, [pc, #280]	@ (800a2a8 <HAL_UART_MspInit+0x158>)
 800a190:	f043 0308 	orr.w	r3, r3, #8
 800a194:	6193      	str	r3, [r2, #24]
 800a196:	4b44      	ldr	r3, [pc, #272]	@ (800a2a8 <HAL_UART_MspInit+0x158>)
 800a198:	699b      	ldr	r3, [r3, #24]
 800a19a:	f003 0308 	and.w	r3, r3, #8
 800a19e:	60fb      	str	r3, [r7, #12]
 800a1a0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800a1a2:	2340      	movs	r3, #64	@ 0x40
 800a1a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a1a6:	2302      	movs	r3, #2
 800a1a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800a1aa:	2303      	movs	r3, #3
 800a1ac:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a1ae:	f107 0314 	add.w	r3, r7, #20
 800a1b2:	4619      	mov	r1, r3
 800a1b4:	483d      	ldr	r0, [pc, #244]	@ (800a2ac <HAL_UART_MspInit+0x15c>)
 800a1b6:	f000 ff7d 	bl	800b0b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800a1ba:	2380      	movs	r3, #128	@ 0x80
 800a1bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a1be:	2300      	movs	r3, #0
 800a1c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a1c6:	f107 0314 	add.w	r3, r7, #20
 800a1ca:	4619      	mov	r1, r3
 800a1cc:	4837      	ldr	r0, [pc, #220]	@ (800a2ac <HAL_UART_MspInit+0x15c>)
 800a1ce:	f000 ff71 	bl	800b0b4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 800a1d2:	4b37      	ldr	r3, [pc, #220]	@ (800a2b0 <HAL_UART_MspInit+0x160>)
 800a1d4:	685b      	ldr	r3, [r3, #4]
 800a1d6:	627b      	str	r3, [r7, #36]	@ 0x24
 800a1d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1da:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800a1de:	627b      	str	r3, [r7, #36]	@ 0x24
 800a1e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1e2:	f043 0304 	orr.w	r3, r3, #4
 800a1e6:	627b      	str	r3, [r7, #36]	@ 0x24
 800a1e8:	4a31      	ldr	r2, [pc, #196]	@ (800a2b0 <HAL_UART_MspInit+0x160>)
 800a1ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1ec:	6053      	str	r3, [r2, #4]

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800a1ee:	4b31      	ldr	r3, [pc, #196]	@ (800a2b4 <HAL_UART_MspInit+0x164>)
 800a1f0:	4a31      	ldr	r2, [pc, #196]	@ (800a2b8 <HAL_UART_MspInit+0x168>)
 800a1f2:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a1f4:	4b2f      	ldr	r3, [pc, #188]	@ (800a2b4 <HAL_UART_MspInit+0x164>)
 800a1f6:	2210      	movs	r2, #16
 800a1f8:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a1fa:	4b2e      	ldr	r3, [pc, #184]	@ (800a2b4 <HAL_UART_MspInit+0x164>)
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800a200:	4b2c      	ldr	r3, [pc, #176]	@ (800a2b4 <HAL_UART_MspInit+0x164>)
 800a202:	2280      	movs	r2, #128	@ 0x80
 800a204:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a206:	4b2b      	ldr	r3, [pc, #172]	@ (800a2b4 <HAL_UART_MspInit+0x164>)
 800a208:	2200      	movs	r2, #0
 800a20a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a20c:	4b29      	ldr	r3, [pc, #164]	@ (800a2b4 <HAL_UART_MspInit+0x164>)
 800a20e:	2200      	movs	r2, #0
 800a210:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800a212:	4b28      	ldr	r3, [pc, #160]	@ (800a2b4 <HAL_UART_MspInit+0x164>)
 800a214:	2200      	movs	r2, #0
 800a216:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800a218:	4b26      	ldr	r3, [pc, #152]	@ (800a2b4 <HAL_UART_MspInit+0x164>)
 800a21a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800a21e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800a220:	4824      	ldr	r0, [pc, #144]	@ (800a2b4 <HAL_UART_MspInit+0x164>)
 800a222:	f000 fac3 	bl	800a7ac <HAL_DMA_Init>
 800a226:	4603      	mov	r3, r0
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d001      	beq.n	800a230 <HAL_UART_MspInit+0xe0>
    {
      Error_Handler();
 800a22c:	f7f7 fc64 	bl	8001af8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	4a20      	ldr	r2, [pc, #128]	@ (800a2b4 <HAL_UART_MspInit+0x164>)
 800a234:	639a      	str	r2, [r3, #56]	@ 0x38
 800a236:	4a1f      	ldr	r2, [pc, #124]	@ (800a2b4 <HAL_UART_MspInit+0x164>)
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800a23c:	4b1f      	ldr	r3, [pc, #124]	@ (800a2bc <HAL_UART_MspInit+0x16c>)
 800a23e:	4a20      	ldr	r2, [pc, #128]	@ (800a2c0 <HAL_UART_MspInit+0x170>)
 800a240:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a242:	4b1e      	ldr	r3, [pc, #120]	@ (800a2bc <HAL_UART_MspInit+0x16c>)
 800a244:	2200      	movs	r2, #0
 800a246:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a248:	4b1c      	ldr	r3, [pc, #112]	@ (800a2bc <HAL_UART_MspInit+0x16c>)
 800a24a:	2200      	movs	r2, #0
 800a24c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800a24e:	4b1b      	ldr	r3, [pc, #108]	@ (800a2bc <HAL_UART_MspInit+0x16c>)
 800a250:	2280      	movs	r2, #128	@ 0x80
 800a252:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a254:	4b19      	ldr	r3, [pc, #100]	@ (800a2bc <HAL_UART_MspInit+0x16c>)
 800a256:	2200      	movs	r2, #0
 800a258:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a25a:	4b18      	ldr	r3, [pc, #96]	@ (800a2bc <HAL_UART_MspInit+0x16c>)
 800a25c:	2200      	movs	r2, #0
 800a25e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800a260:	4b16      	ldr	r3, [pc, #88]	@ (800a2bc <HAL_UART_MspInit+0x16c>)
 800a262:	2200      	movs	r2, #0
 800a264:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800a266:	4b15      	ldr	r3, [pc, #84]	@ (800a2bc <HAL_UART_MspInit+0x16c>)
 800a268:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800a26c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800a26e:	4813      	ldr	r0, [pc, #76]	@ (800a2bc <HAL_UART_MspInit+0x16c>)
 800a270:	f000 fa9c 	bl	800a7ac <HAL_DMA_Init>
 800a274:	4603      	mov	r3, r0
 800a276:	2b00      	cmp	r3, #0
 800a278:	d001      	beq.n	800a27e <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 800a27a:	f7f7 fc3d 	bl	8001af8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	4a0e      	ldr	r2, [pc, #56]	@ (800a2bc <HAL_UART_MspInit+0x16c>)
 800a282:	63da      	str	r2, [r3, #60]	@ 0x3c
 800a284:	4a0d      	ldr	r2, [pc, #52]	@ (800a2bc <HAL_UART_MspInit+0x16c>)
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800a28a:	2200      	movs	r2, #0
 800a28c:	2100      	movs	r1, #0
 800a28e:	2025      	movs	r0, #37	@ 0x25
 800a290:	f000 fa55 	bl	800a73e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800a294:	2025      	movs	r0, #37	@ 0x25
 800a296:	f000 fa6e 	bl	800a776 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800a29a:	bf00      	nop
 800a29c:	3728      	adds	r7, #40	@ 0x28
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	bd80      	pop	{r7, pc}
 800a2a2:	bf00      	nop
 800a2a4:	40013800 	.word	0x40013800
 800a2a8:	40021000 	.word	0x40021000
 800a2ac:	40010c00 	.word	0x40010c00
 800a2b0:	40010000 	.word	0x40010000
 800a2b4:	200001d4 	.word	0x200001d4
 800a2b8:	40020044 	.word	0x40020044
 800a2bc:	20000218 	.word	0x20000218
 800a2c0:	40020058 	.word	0x40020058

0800a2c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a2c4:	b480      	push	{r7}
 800a2c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800a2c8:	bf00      	nop
 800a2ca:	e7fd      	b.n	800a2c8 <NMI_Handler+0x4>

0800a2cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a2cc:	b480      	push	{r7}
 800a2ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800a2d0:	bf00      	nop
 800a2d2:	e7fd      	b.n	800a2d0 <HardFault_Handler+0x4>

0800a2d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a2d4:	b480      	push	{r7}
 800a2d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800a2d8:	bf00      	nop
 800a2da:	e7fd      	b.n	800a2d8 <MemManage_Handler+0x4>

0800a2dc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a2dc:	b480      	push	{r7}
 800a2de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800a2e0:	bf00      	nop
 800a2e2:	e7fd      	b.n	800a2e0 <BusFault_Handler+0x4>

0800a2e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a2e4:	b480      	push	{r7}
 800a2e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800a2e8:	bf00      	nop
 800a2ea:	e7fd      	b.n	800a2e8 <UsageFault_Handler+0x4>

0800a2ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800a2ec:	b480      	push	{r7}
 800a2ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800a2f0:	bf00      	nop
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	bc80      	pop	{r7}
 800a2f6:	4770      	bx	lr

0800a2f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800a2f8:	b480      	push	{r7}
 800a2fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800a2fc:	bf00      	nop
 800a2fe:	46bd      	mov	sp, r7
 800a300:	bc80      	pop	{r7}
 800a302:	4770      	bx	lr

0800a304 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800a304:	b480      	push	{r7}
 800a306:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800a308:	bf00      	nop
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bc80      	pop	{r7}
 800a30e:	4770      	bx	lr

0800a310 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800a310:	b580      	push	{r7, lr}
 800a312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800a314:	f000 f920 	bl	800a558 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800a318:	bf00      	nop
 800a31a:	bd80      	pop	{r7, pc}

0800a31c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800a320:	4802      	ldr	r0, [pc, #8]	@ (800a32c <DMA1_Channel4_IRQHandler+0x10>)
 800a322:	f000 fc5d 	bl	800abe0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800a326:	bf00      	nop
 800a328:	bd80      	pop	{r7, pc}
 800a32a:	bf00      	nop
 800a32c:	200001d4 	.word	0x200001d4

0800a330 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800a330:	b580      	push	{r7, lr}
 800a332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800a334:	4802      	ldr	r0, [pc, #8]	@ (800a340 <DMA1_Channel5_IRQHandler+0x10>)
 800a336:	f000 fc53 	bl	800abe0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800a33a:	bf00      	nop
 800a33c:	bd80      	pop	{r7, pc}
 800a33e:	bf00      	nop
 800a340:	20000218 	.word	0x20000218

0800a344 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800a344:	b580      	push	{r7, lr}
 800a346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart_rosserial);
 800a348:	4802      	ldr	r0, [pc, #8]	@ (800a354 <USART1_IRQHandler+0x10>)
 800a34a:	f003 f989 	bl	800d660 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800a34e:	bf00      	nop
 800a350:	bd80      	pop	{r7, pc}
 800a352:	bf00      	nop
 800a354:	2000018c 	.word	0x2000018c

0800a358 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim_encoder);
 800a35c:	4802      	ldr	r0, [pc, #8]	@ (800a368 <TIM8_CC_IRQHandler+0x10>)
 800a35e:	f002 f87d 	bl	800c45c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 800a362:	bf00      	nop
 800a364:	bd80      	pop	{r7, pc}
 800a366:	bf00      	nop
 800a368:	20000144 	.word	0x20000144

0800a36c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800a36c:	b480      	push	{r7}
 800a36e:	af00      	add	r7, sp, #0
  return 1;
 800a370:	2301      	movs	r3, #1
}
 800a372:	4618      	mov	r0, r3
 800a374:	46bd      	mov	sp, r7
 800a376:	bc80      	pop	{r7}
 800a378:	4770      	bx	lr

0800a37a <_kill>:

int _kill(int pid, int sig)
{
 800a37a:	b580      	push	{r7, lr}
 800a37c:	b082      	sub	sp, #8
 800a37e:	af00      	add	r7, sp, #0
 800a380:	6078      	str	r0, [r7, #4]
 800a382:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800a384:	f006 f80a 	bl	801039c <__errno>
 800a388:	4603      	mov	r3, r0
 800a38a:	2216      	movs	r2, #22
 800a38c:	601a      	str	r2, [r3, #0]
  return -1;
 800a38e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a392:	4618      	mov	r0, r3
 800a394:	3708      	adds	r7, #8
 800a396:	46bd      	mov	sp, r7
 800a398:	bd80      	pop	{r7, pc}

0800a39a <_exit>:

void _exit (int status)
{
 800a39a:	b580      	push	{r7, lr}
 800a39c:	b082      	sub	sp, #8
 800a39e:	af00      	add	r7, sp, #0
 800a3a0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800a3a2:	f04f 31ff 	mov.w	r1, #4294967295
 800a3a6:	6878      	ldr	r0, [r7, #4]
 800a3a8:	f7ff ffe7 	bl	800a37a <_kill>
  while (1) {}    /* Make sure we hang here */
 800a3ac:	bf00      	nop
 800a3ae:	e7fd      	b.n	800a3ac <_exit+0x12>

0800a3b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b086      	sub	sp, #24
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800a3b8:	4a14      	ldr	r2, [pc, #80]	@ (800a40c <_sbrk+0x5c>)
 800a3ba:	4b15      	ldr	r3, [pc, #84]	@ (800a410 <_sbrk+0x60>)
 800a3bc:	1ad3      	subs	r3, r2, r3
 800a3be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800a3c0:	697b      	ldr	r3, [r7, #20]
 800a3c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800a3c4:	4b13      	ldr	r3, [pc, #76]	@ (800a414 <_sbrk+0x64>)
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d102      	bne.n	800a3d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800a3cc:	4b11      	ldr	r3, [pc, #68]	@ (800a414 <_sbrk+0x64>)
 800a3ce:	4a12      	ldr	r2, [pc, #72]	@ (800a418 <_sbrk+0x68>)
 800a3d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800a3d2:	4b10      	ldr	r3, [pc, #64]	@ (800a414 <_sbrk+0x64>)
 800a3d4:	681a      	ldr	r2, [r3, #0]
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	4413      	add	r3, r2
 800a3da:	693a      	ldr	r2, [r7, #16]
 800a3dc:	429a      	cmp	r2, r3
 800a3de:	d207      	bcs.n	800a3f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800a3e0:	f005 ffdc 	bl	801039c <__errno>
 800a3e4:	4603      	mov	r3, r0
 800a3e6:	220c      	movs	r2, #12
 800a3e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800a3ea:	f04f 33ff 	mov.w	r3, #4294967295
 800a3ee:	e009      	b.n	800a404 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800a3f0:	4b08      	ldr	r3, [pc, #32]	@ (800a414 <_sbrk+0x64>)
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800a3f6:	4b07      	ldr	r3, [pc, #28]	@ (800a414 <_sbrk+0x64>)
 800a3f8:	681a      	ldr	r2, [r3, #0]
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	4413      	add	r3, r2
 800a3fe:	4a05      	ldr	r2, [pc, #20]	@ (800a414 <_sbrk+0x64>)
 800a400:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800a402:	68fb      	ldr	r3, [r7, #12]
}
 800a404:	4618      	mov	r0, r3
 800a406:	3718      	adds	r7, #24
 800a408:	46bd      	mov	sp, r7
 800a40a:	bd80      	pop	{r7, pc}
 800a40c:	2000c000 	.word	0x2000c000
 800a410:	00000400 	.word	0x00000400
 800a414:	20008ae0 	.word	0x20008ae0
 800a418:	20008c38 	.word	0x20008c38

0800a41c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800a41c:	b480      	push	{r7}
 800a41e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800a420:	bf00      	nop
 800a422:	46bd      	mov	sp, r7
 800a424:	bc80      	pop	{r7}
 800a426:	4770      	bx	lr

0800a428 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 800a428:	b480      	push	{r7}
 800a42a:	b085      	sub	sp, #20
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
 800a430:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800a432:	683b      	ldr	r3, [r7, #0]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	0a5a      	lsrs	r2, r3, #9
 800a438:	490f      	ldr	r1, [pc, #60]	@ (800a478 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800a43a:	fba1 1202 	umull	r1, r2, r1, r2
 800a43e:	09d2      	lsrs	r2, r2, #7
 800a440:	490e      	ldr	r1, [pc, #56]	@ (800a47c <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800a442:	fb01 f202 	mul.w	r2, r1, r2
 800a446:	1a9b      	subs	r3, r3, r2
 800a448:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 800a44a:	683b      	ldr	r3, [r7, #0]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	0a5b      	lsrs	r3, r3, #9
 800a450:	4a09      	ldr	r2, [pc, #36]	@ (800a478 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800a452:	fba2 2303 	umull	r2, r3, r2, r3
 800a456:	09db      	lsrs	r3, r3, #7
 800a458:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681a      	ldr	r2, [r3, #0]
 800a45e:	68bb      	ldr	r3, [r7, #8]
 800a460:	441a      	add	r2, r3
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	68fa      	ldr	r2, [r7, #12]
 800a46a:	601a      	str	r2, [r3, #0]
}
 800a46c:	bf00      	nop
 800a46e:	3714      	adds	r7, #20
 800a470:	46bd      	mov	sp, r7
 800a472:	bc80      	pop	{r7}
 800a474:	4770      	bx	lr
 800a476:	bf00      	nop
 800a478:	00044b83 	.word	0x00044b83
 800a47c:	3b9aca00 	.word	0x3b9aca00

0800a480 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800a480:	f7ff ffcc 	bl	800a41c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800a484:	480b      	ldr	r0, [pc, #44]	@ (800a4b4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800a486:	490c      	ldr	r1, [pc, #48]	@ (800a4b8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800a488:	4a0c      	ldr	r2, [pc, #48]	@ (800a4bc <LoopFillZerobss+0x16>)
  movs r3, #0
 800a48a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800a48c:	e002      	b.n	800a494 <LoopCopyDataInit>

0800a48e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800a48e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800a490:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800a492:	3304      	adds	r3, #4

0800a494 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800a494:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800a496:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800a498:	d3f9      	bcc.n	800a48e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800a49a:	4a09      	ldr	r2, [pc, #36]	@ (800a4c0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800a49c:	4c09      	ldr	r4, [pc, #36]	@ (800a4c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800a49e:	2300      	movs	r3, #0
  b LoopFillZerobss
 800a4a0:	e001      	b.n	800a4a6 <LoopFillZerobss>

0800a4a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800a4a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800a4a4:	3204      	adds	r2, #4

0800a4a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800a4a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800a4a8:	d3fb      	bcc.n	800a4a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800a4aa:	f005 ff7d 	bl	80103a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800a4ae:	f7f7 f89f 	bl	80015f0 <main>
  bx lr
 800a4b2:	4770      	bx	lr
  ldr r0, =_sdata
 800a4b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800a4b8:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 800a4bc:	0801126c 	.word	0x0801126c
  ldr r2, =_sbss
 800a4c0:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 800a4c4:	20008c34 	.word	0x20008c34

0800a4c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800a4c8:	e7fe      	b.n	800a4c8 <ADC1_2_IRQHandler>
	...

0800a4cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800a4d0:	4b08      	ldr	r3, [pc, #32]	@ (800a4f4 <HAL_Init+0x28>)
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	4a07      	ldr	r2, [pc, #28]	@ (800a4f4 <HAL_Init+0x28>)
 800a4d6:	f043 0310 	orr.w	r3, r3, #16
 800a4da:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a4dc:	2003      	movs	r0, #3
 800a4de:	f000 f923 	bl	800a728 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800a4e2:	200f      	movs	r0, #15
 800a4e4:	f000 f808 	bl	800a4f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800a4e8:	f7ff fd20 	bl	8009f2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800a4ec:	2300      	movs	r3, #0
}
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	bd80      	pop	{r7, pc}
 800a4f2:	bf00      	nop
 800a4f4:	40022000 	.word	0x40022000

0800a4f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b082      	sub	sp, #8
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800a500:	4b12      	ldr	r3, [pc, #72]	@ (800a54c <HAL_InitTick+0x54>)
 800a502:	681a      	ldr	r2, [r3, #0]
 800a504:	4b12      	ldr	r3, [pc, #72]	@ (800a550 <HAL_InitTick+0x58>)
 800a506:	781b      	ldrb	r3, [r3, #0]
 800a508:	4619      	mov	r1, r3
 800a50a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800a50e:	fbb3 f3f1 	udiv	r3, r3, r1
 800a512:	fbb2 f3f3 	udiv	r3, r2, r3
 800a516:	4618      	mov	r0, r3
 800a518:	f000 f93b 	bl	800a792 <HAL_SYSTICK_Config>
 800a51c:	4603      	mov	r3, r0
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d001      	beq.n	800a526 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800a522:	2301      	movs	r3, #1
 800a524:	e00e      	b.n	800a544 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	2b0f      	cmp	r3, #15
 800a52a:	d80a      	bhi.n	800a542 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800a52c:	2200      	movs	r2, #0
 800a52e:	6879      	ldr	r1, [r7, #4]
 800a530:	f04f 30ff 	mov.w	r0, #4294967295
 800a534:	f000 f903 	bl	800a73e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800a538:	4a06      	ldr	r2, [pc, #24]	@ (800a554 <HAL_InitTick+0x5c>)
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800a53e:	2300      	movs	r3, #0
 800a540:	e000      	b.n	800a544 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800a542:	2301      	movs	r3, #1
}
 800a544:	4618      	mov	r0, r3
 800a546:	3708      	adds	r7, #8
 800a548:	46bd      	mov	sp, r7
 800a54a:	bd80      	pop	{r7, pc}
 800a54c:	20000028 	.word	0x20000028
 800a550:	20000030 	.word	0x20000030
 800a554:	2000002c 	.word	0x2000002c

0800a558 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800a558:	b480      	push	{r7}
 800a55a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800a55c:	4b05      	ldr	r3, [pc, #20]	@ (800a574 <HAL_IncTick+0x1c>)
 800a55e:	781b      	ldrb	r3, [r3, #0]
 800a560:	461a      	mov	r2, r3
 800a562:	4b05      	ldr	r3, [pc, #20]	@ (800a578 <HAL_IncTick+0x20>)
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	4413      	add	r3, r2
 800a568:	4a03      	ldr	r2, [pc, #12]	@ (800a578 <HAL_IncTick+0x20>)
 800a56a:	6013      	str	r3, [r2, #0]
}
 800a56c:	bf00      	nop
 800a56e:	46bd      	mov	sp, r7
 800a570:	bc80      	pop	{r7}
 800a572:	4770      	bx	lr
 800a574:	20000030 	.word	0x20000030
 800a578:	20008ae4 	.word	0x20008ae4

0800a57c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800a57c:	b480      	push	{r7}
 800a57e:	af00      	add	r7, sp, #0
  return uwTick;
 800a580:	4b02      	ldr	r3, [pc, #8]	@ (800a58c <HAL_GetTick+0x10>)
 800a582:	681b      	ldr	r3, [r3, #0]
}
 800a584:	4618      	mov	r0, r3
 800a586:	46bd      	mov	sp, r7
 800a588:	bc80      	pop	{r7}
 800a58a:	4770      	bx	lr
 800a58c:	20008ae4 	.word	0x20008ae4

0800a590 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a590:	b480      	push	{r7}
 800a592:	b085      	sub	sp, #20
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	f003 0307 	and.w	r3, r3, #7
 800a59e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a5a0:	4b0c      	ldr	r3, [pc, #48]	@ (800a5d4 <__NVIC_SetPriorityGrouping+0x44>)
 800a5a2:	68db      	ldr	r3, [r3, #12]
 800a5a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a5a6:	68ba      	ldr	r2, [r7, #8]
 800a5a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800a5ac:	4013      	ands	r3, r2
 800a5ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a5b4:	68bb      	ldr	r3, [r7, #8]
 800a5b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a5b8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800a5bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a5c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a5c2:	4a04      	ldr	r2, [pc, #16]	@ (800a5d4 <__NVIC_SetPriorityGrouping+0x44>)
 800a5c4:	68bb      	ldr	r3, [r7, #8]
 800a5c6:	60d3      	str	r3, [r2, #12]
}
 800a5c8:	bf00      	nop
 800a5ca:	3714      	adds	r7, #20
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	bc80      	pop	{r7}
 800a5d0:	4770      	bx	lr
 800a5d2:	bf00      	nop
 800a5d4:	e000ed00 	.word	0xe000ed00

0800a5d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a5d8:	b480      	push	{r7}
 800a5da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a5dc:	4b04      	ldr	r3, [pc, #16]	@ (800a5f0 <__NVIC_GetPriorityGrouping+0x18>)
 800a5de:	68db      	ldr	r3, [r3, #12]
 800a5e0:	0a1b      	lsrs	r3, r3, #8
 800a5e2:	f003 0307 	and.w	r3, r3, #7
}
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	bc80      	pop	{r7}
 800a5ec:	4770      	bx	lr
 800a5ee:	bf00      	nop
 800a5f0:	e000ed00 	.word	0xe000ed00

0800a5f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a5f4:	b480      	push	{r7}
 800a5f6:	b083      	sub	sp, #12
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	4603      	mov	r3, r0
 800a5fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a5fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a602:	2b00      	cmp	r3, #0
 800a604:	db0b      	blt.n	800a61e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a606:	79fb      	ldrb	r3, [r7, #7]
 800a608:	f003 021f 	and.w	r2, r3, #31
 800a60c:	4906      	ldr	r1, [pc, #24]	@ (800a628 <__NVIC_EnableIRQ+0x34>)
 800a60e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a612:	095b      	lsrs	r3, r3, #5
 800a614:	2001      	movs	r0, #1
 800a616:	fa00 f202 	lsl.w	r2, r0, r2
 800a61a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800a61e:	bf00      	nop
 800a620:	370c      	adds	r7, #12
 800a622:	46bd      	mov	sp, r7
 800a624:	bc80      	pop	{r7}
 800a626:	4770      	bx	lr
 800a628:	e000e100 	.word	0xe000e100

0800a62c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a62c:	b480      	push	{r7}
 800a62e:	b083      	sub	sp, #12
 800a630:	af00      	add	r7, sp, #0
 800a632:	4603      	mov	r3, r0
 800a634:	6039      	str	r1, [r7, #0]
 800a636:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a638:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	db0a      	blt.n	800a656 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	b2da      	uxtb	r2, r3
 800a644:	490c      	ldr	r1, [pc, #48]	@ (800a678 <__NVIC_SetPriority+0x4c>)
 800a646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a64a:	0112      	lsls	r2, r2, #4
 800a64c:	b2d2      	uxtb	r2, r2
 800a64e:	440b      	add	r3, r1
 800a650:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a654:	e00a      	b.n	800a66c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a656:	683b      	ldr	r3, [r7, #0]
 800a658:	b2da      	uxtb	r2, r3
 800a65a:	4908      	ldr	r1, [pc, #32]	@ (800a67c <__NVIC_SetPriority+0x50>)
 800a65c:	79fb      	ldrb	r3, [r7, #7]
 800a65e:	f003 030f 	and.w	r3, r3, #15
 800a662:	3b04      	subs	r3, #4
 800a664:	0112      	lsls	r2, r2, #4
 800a666:	b2d2      	uxtb	r2, r2
 800a668:	440b      	add	r3, r1
 800a66a:	761a      	strb	r2, [r3, #24]
}
 800a66c:	bf00      	nop
 800a66e:	370c      	adds	r7, #12
 800a670:	46bd      	mov	sp, r7
 800a672:	bc80      	pop	{r7}
 800a674:	4770      	bx	lr
 800a676:	bf00      	nop
 800a678:	e000e100 	.word	0xe000e100
 800a67c:	e000ed00 	.word	0xe000ed00

0800a680 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a680:	b480      	push	{r7}
 800a682:	b089      	sub	sp, #36	@ 0x24
 800a684:	af00      	add	r7, sp, #0
 800a686:	60f8      	str	r0, [r7, #12]
 800a688:	60b9      	str	r1, [r7, #8]
 800a68a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	f003 0307 	and.w	r3, r3, #7
 800a692:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a694:	69fb      	ldr	r3, [r7, #28]
 800a696:	f1c3 0307 	rsb	r3, r3, #7
 800a69a:	2b04      	cmp	r3, #4
 800a69c:	bf28      	it	cs
 800a69e:	2304      	movcs	r3, #4
 800a6a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a6a2:	69fb      	ldr	r3, [r7, #28]
 800a6a4:	3304      	adds	r3, #4
 800a6a6:	2b06      	cmp	r3, #6
 800a6a8:	d902      	bls.n	800a6b0 <NVIC_EncodePriority+0x30>
 800a6aa:	69fb      	ldr	r3, [r7, #28]
 800a6ac:	3b03      	subs	r3, #3
 800a6ae:	e000      	b.n	800a6b2 <NVIC_EncodePriority+0x32>
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a6b4:	f04f 32ff 	mov.w	r2, #4294967295
 800a6b8:	69bb      	ldr	r3, [r7, #24]
 800a6ba:	fa02 f303 	lsl.w	r3, r2, r3
 800a6be:	43da      	mvns	r2, r3
 800a6c0:	68bb      	ldr	r3, [r7, #8]
 800a6c2:	401a      	ands	r2, r3
 800a6c4:	697b      	ldr	r3, [r7, #20]
 800a6c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a6c8:	f04f 31ff 	mov.w	r1, #4294967295
 800a6cc:	697b      	ldr	r3, [r7, #20]
 800a6ce:	fa01 f303 	lsl.w	r3, r1, r3
 800a6d2:	43d9      	mvns	r1, r3
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a6d8:	4313      	orrs	r3, r2
         );
}
 800a6da:	4618      	mov	r0, r3
 800a6dc:	3724      	adds	r7, #36	@ 0x24
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	bc80      	pop	{r7}
 800a6e2:	4770      	bx	lr

0800a6e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b082      	sub	sp, #8
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	3b01      	subs	r3, #1
 800a6f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a6f4:	d301      	bcc.n	800a6fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a6f6:	2301      	movs	r3, #1
 800a6f8:	e00f      	b.n	800a71a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a6fa:	4a0a      	ldr	r2, [pc, #40]	@ (800a724 <SysTick_Config+0x40>)
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	3b01      	subs	r3, #1
 800a700:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a702:	210f      	movs	r1, #15
 800a704:	f04f 30ff 	mov.w	r0, #4294967295
 800a708:	f7ff ff90 	bl	800a62c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a70c:	4b05      	ldr	r3, [pc, #20]	@ (800a724 <SysTick_Config+0x40>)
 800a70e:	2200      	movs	r2, #0
 800a710:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a712:	4b04      	ldr	r3, [pc, #16]	@ (800a724 <SysTick_Config+0x40>)
 800a714:	2207      	movs	r2, #7
 800a716:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a718:	2300      	movs	r3, #0
}
 800a71a:	4618      	mov	r0, r3
 800a71c:	3708      	adds	r7, #8
 800a71e:	46bd      	mov	sp, r7
 800a720:	bd80      	pop	{r7, pc}
 800a722:	bf00      	nop
 800a724:	e000e010 	.word	0xe000e010

0800a728 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a728:	b580      	push	{r7, lr}
 800a72a:	b082      	sub	sp, #8
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a730:	6878      	ldr	r0, [r7, #4]
 800a732:	f7ff ff2d 	bl	800a590 <__NVIC_SetPriorityGrouping>
}
 800a736:	bf00      	nop
 800a738:	3708      	adds	r7, #8
 800a73a:	46bd      	mov	sp, r7
 800a73c:	bd80      	pop	{r7, pc}

0800a73e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a73e:	b580      	push	{r7, lr}
 800a740:	b086      	sub	sp, #24
 800a742:	af00      	add	r7, sp, #0
 800a744:	4603      	mov	r3, r0
 800a746:	60b9      	str	r1, [r7, #8]
 800a748:	607a      	str	r2, [r7, #4]
 800a74a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800a74c:	2300      	movs	r3, #0
 800a74e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a750:	f7ff ff42 	bl	800a5d8 <__NVIC_GetPriorityGrouping>
 800a754:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a756:	687a      	ldr	r2, [r7, #4]
 800a758:	68b9      	ldr	r1, [r7, #8]
 800a75a:	6978      	ldr	r0, [r7, #20]
 800a75c:	f7ff ff90 	bl	800a680 <NVIC_EncodePriority>
 800a760:	4602      	mov	r2, r0
 800a762:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a766:	4611      	mov	r1, r2
 800a768:	4618      	mov	r0, r3
 800a76a:	f7ff ff5f 	bl	800a62c <__NVIC_SetPriority>
}
 800a76e:	bf00      	nop
 800a770:	3718      	adds	r7, #24
 800a772:	46bd      	mov	sp, r7
 800a774:	bd80      	pop	{r7, pc}

0800a776 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a776:	b580      	push	{r7, lr}
 800a778:	b082      	sub	sp, #8
 800a77a:	af00      	add	r7, sp, #0
 800a77c:	4603      	mov	r3, r0
 800a77e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a780:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a784:	4618      	mov	r0, r3
 800a786:	f7ff ff35 	bl	800a5f4 <__NVIC_EnableIRQ>
}
 800a78a:	bf00      	nop
 800a78c:	3708      	adds	r7, #8
 800a78e:	46bd      	mov	sp, r7
 800a790:	bd80      	pop	{r7, pc}

0800a792 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a792:	b580      	push	{r7, lr}
 800a794:	b082      	sub	sp, #8
 800a796:	af00      	add	r7, sp, #0
 800a798:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a79a:	6878      	ldr	r0, [r7, #4]
 800a79c:	f7ff ffa2 	bl	800a6e4 <SysTick_Config>
 800a7a0:	4603      	mov	r3, r0
}
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	3708      	adds	r7, #8
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	bd80      	pop	{r7, pc}
	...

0800a7ac <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a7ac:	b480      	push	{r7}
 800a7ae:	b085      	sub	sp, #20
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d101      	bne.n	800a7c2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800a7be:	2301      	movs	r3, #1
 800a7c0:	e059      	b.n	800a876 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	461a      	mov	r2, r3
 800a7c8:	4b2d      	ldr	r3, [pc, #180]	@ (800a880 <HAL_DMA_Init+0xd4>)
 800a7ca:	429a      	cmp	r2, r3
 800a7cc:	d80f      	bhi.n	800a7ee <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	461a      	mov	r2, r3
 800a7d4:	4b2b      	ldr	r3, [pc, #172]	@ (800a884 <HAL_DMA_Init+0xd8>)
 800a7d6:	4413      	add	r3, r2
 800a7d8:	4a2b      	ldr	r2, [pc, #172]	@ (800a888 <HAL_DMA_Init+0xdc>)
 800a7da:	fba2 2303 	umull	r2, r3, r2, r3
 800a7de:	091b      	lsrs	r3, r3, #4
 800a7e0:	009a      	lsls	r2, r3, #2
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	4a28      	ldr	r2, [pc, #160]	@ (800a88c <HAL_DMA_Init+0xe0>)
 800a7ea:	63da      	str	r2, [r3, #60]	@ 0x3c
 800a7ec:	e00e      	b.n	800a80c <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	461a      	mov	r2, r3
 800a7f4:	4b26      	ldr	r3, [pc, #152]	@ (800a890 <HAL_DMA_Init+0xe4>)
 800a7f6:	4413      	add	r3, r2
 800a7f8:	4a23      	ldr	r2, [pc, #140]	@ (800a888 <HAL_DMA_Init+0xdc>)
 800a7fa:	fba2 2303 	umull	r2, r3, r2, r3
 800a7fe:	091b      	lsrs	r3, r3, #4
 800a800:	009a      	lsls	r2, r3, #2
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	4a22      	ldr	r2, [pc, #136]	@ (800a894 <HAL_DMA_Init+0xe8>)
 800a80a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	2202      	movs	r2, #2
 800a810:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800a822:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800a826:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800a830:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	68db      	ldr	r3, [r3, #12]
 800a836:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a83c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	695b      	ldr	r3, [r3, #20]
 800a842:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a848:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	69db      	ldr	r3, [r3, #28]
 800a84e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800a850:	68fa      	ldr	r2, [r7, #12]
 800a852:	4313      	orrs	r3, r2
 800a854:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	68fa      	ldr	r2, [r7, #12]
 800a85c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	2200      	movs	r2, #0
 800a862:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	2201      	movs	r2, #1
 800a868:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	2200      	movs	r2, #0
 800a870:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800a874:	2300      	movs	r3, #0
}
 800a876:	4618      	mov	r0, r3
 800a878:	3714      	adds	r7, #20
 800a87a:	46bd      	mov	sp, r7
 800a87c:	bc80      	pop	{r7}
 800a87e:	4770      	bx	lr
 800a880:	40020407 	.word	0x40020407
 800a884:	bffdfff8 	.word	0xbffdfff8
 800a888:	cccccccd 	.word	0xcccccccd
 800a88c:	40020000 	.word	0x40020000
 800a890:	bffdfbf8 	.word	0xbffdfbf8
 800a894:	40020400 	.word	0x40020400

0800a898 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a898:	b580      	push	{r7, lr}
 800a89a:	b086      	sub	sp, #24
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	60f8      	str	r0, [r7, #12]
 800a8a0:	60b9      	str	r1, [r7, #8]
 800a8a2:	607a      	str	r2, [r7, #4]
 800a8a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a8b0:	2b01      	cmp	r3, #1
 800a8b2:	d101      	bne.n	800a8b8 <HAL_DMA_Start_IT+0x20>
 800a8b4:	2302      	movs	r3, #2
 800a8b6:	e04b      	b.n	800a950 <HAL_DMA_Start_IT+0xb8>
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	2201      	movs	r2, #1
 800a8bc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800a8c6:	b2db      	uxtb	r3, r3
 800a8c8:	2b01      	cmp	r3, #1
 800a8ca:	d13a      	bne.n	800a942 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	2202      	movs	r2, #2
 800a8d0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	681a      	ldr	r2, [r3, #0]
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	f022 0201 	bic.w	r2, r2, #1
 800a8e8:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a8ea:	683b      	ldr	r3, [r7, #0]
 800a8ec:	687a      	ldr	r2, [r7, #4]
 800a8ee:	68b9      	ldr	r1, [r7, #8]
 800a8f0:	68f8      	ldr	r0, [r7, #12]
 800a8f2:	f000 fbb1 	bl	800b058 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d008      	beq.n	800a910 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	681a      	ldr	r2, [r3, #0]
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	f042 020e 	orr.w	r2, r2, #14
 800a90c:	601a      	str	r2, [r3, #0]
 800a90e:	e00f      	b.n	800a930 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	681a      	ldr	r2, [r3, #0]
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	f022 0204 	bic.w	r2, r2, #4
 800a91e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	681a      	ldr	r2, [r3, #0]
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	f042 020a 	orr.w	r2, r2, #10
 800a92e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	681a      	ldr	r2, [r3, #0]
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	f042 0201 	orr.w	r2, r2, #1
 800a93e:	601a      	str	r2, [r3, #0]
 800a940:	e005      	b.n	800a94e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	2200      	movs	r2, #0
 800a946:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800a94a:	2302      	movs	r3, #2
 800a94c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800a94e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a950:	4618      	mov	r0, r3
 800a952:	3718      	adds	r7, #24
 800a954:	46bd      	mov	sp, r7
 800a956:	bd80      	pop	{r7, pc}

0800a958 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800a958:	b480      	push	{r7}
 800a95a:	b085      	sub	sp, #20
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a960:	2300      	movs	r3, #0
 800a962:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800a96a:	b2db      	uxtb	r3, r3
 800a96c:	2b02      	cmp	r3, #2
 800a96e:	d008      	beq.n	800a982 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	2204      	movs	r2, #4
 800a974:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	2200      	movs	r2, #0
 800a97a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800a97e:	2301      	movs	r3, #1
 800a980:	e020      	b.n	800a9c4 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	681a      	ldr	r2, [r3, #0]
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	f022 020e 	bic.w	r2, r2, #14
 800a990:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	681a      	ldr	r2, [r3, #0]
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	f022 0201 	bic.w	r2, r2, #1
 800a9a0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a9aa:	2101      	movs	r1, #1
 800a9ac:	fa01 f202 	lsl.w	r2, r1, r2
 800a9b0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	2201      	movs	r2, #1
 800a9b6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	2200      	movs	r2, #0
 800a9be:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800a9c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	3714      	adds	r7, #20
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	bc80      	pop	{r7}
 800a9cc:	4770      	bx	lr
	...

0800a9d0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b084      	sub	sp, #16
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a9d8:	2300      	movs	r3, #0
 800a9da:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800a9e2:	b2db      	uxtb	r3, r3
 800a9e4:	2b02      	cmp	r3, #2
 800a9e6:	d005      	beq.n	800a9f4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	2204      	movs	r2, #4
 800a9ec:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800a9ee:	2301      	movs	r3, #1
 800a9f0:	73fb      	strb	r3, [r7, #15]
 800a9f2:	e0d6      	b.n	800aba2 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	681a      	ldr	r2, [r3, #0]
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	f022 020e 	bic.w	r2, r2, #14
 800aa02:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	681a      	ldr	r2, [r3, #0]
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	f022 0201 	bic.w	r2, r2, #1
 800aa12:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	461a      	mov	r2, r3
 800aa1a:	4b64      	ldr	r3, [pc, #400]	@ (800abac <HAL_DMA_Abort_IT+0x1dc>)
 800aa1c:	429a      	cmp	r2, r3
 800aa1e:	d958      	bls.n	800aad2 <HAL_DMA_Abort_IT+0x102>
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	4a62      	ldr	r2, [pc, #392]	@ (800abb0 <HAL_DMA_Abort_IT+0x1e0>)
 800aa26:	4293      	cmp	r3, r2
 800aa28:	d04f      	beq.n	800aaca <HAL_DMA_Abort_IT+0xfa>
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	4a61      	ldr	r2, [pc, #388]	@ (800abb4 <HAL_DMA_Abort_IT+0x1e4>)
 800aa30:	4293      	cmp	r3, r2
 800aa32:	d048      	beq.n	800aac6 <HAL_DMA_Abort_IT+0xf6>
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	4a5f      	ldr	r2, [pc, #380]	@ (800abb8 <HAL_DMA_Abort_IT+0x1e8>)
 800aa3a:	4293      	cmp	r3, r2
 800aa3c:	d040      	beq.n	800aac0 <HAL_DMA_Abort_IT+0xf0>
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	4a5e      	ldr	r2, [pc, #376]	@ (800abbc <HAL_DMA_Abort_IT+0x1ec>)
 800aa44:	4293      	cmp	r3, r2
 800aa46:	d038      	beq.n	800aaba <HAL_DMA_Abort_IT+0xea>
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	4a5c      	ldr	r2, [pc, #368]	@ (800abc0 <HAL_DMA_Abort_IT+0x1f0>)
 800aa4e:	4293      	cmp	r3, r2
 800aa50:	d030      	beq.n	800aab4 <HAL_DMA_Abort_IT+0xe4>
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	4a5b      	ldr	r2, [pc, #364]	@ (800abc4 <HAL_DMA_Abort_IT+0x1f4>)
 800aa58:	4293      	cmp	r3, r2
 800aa5a:	d028      	beq.n	800aaae <HAL_DMA_Abort_IT+0xde>
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	4a52      	ldr	r2, [pc, #328]	@ (800abac <HAL_DMA_Abort_IT+0x1dc>)
 800aa62:	4293      	cmp	r3, r2
 800aa64:	d020      	beq.n	800aaa8 <HAL_DMA_Abort_IT+0xd8>
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	4a57      	ldr	r2, [pc, #348]	@ (800abc8 <HAL_DMA_Abort_IT+0x1f8>)
 800aa6c:	4293      	cmp	r3, r2
 800aa6e:	d019      	beq.n	800aaa4 <HAL_DMA_Abort_IT+0xd4>
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	4a55      	ldr	r2, [pc, #340]	@ (800abcc <HAL_DMA_Abort_IT+0x1fc>)
 800aa76:	4293      	cmp	r3, r2
 800aa78:	d012      	beq.n	800aaa0 <HAL_DMA_Abort_IT+0xd0>
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	4a54      	ldr	r2, [pc, #336]	@ (800abd0 <HAL_DMA_Abort_IT+0x200>)
 800aa80:	4293      	cmp	r3, r2
 800aa82:	d00a      	beq.n	800aa9a <HAL_DMA_Abort_IT+0xca>
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	4a52      	ldr	r2, [pc, #328]	@ (800abd4 <HAL_DMA_Abort_IT+0x204>)
 800aa8a:	4293      	cmp	r3, r2
 800aa8c:	d102      	bne.n	800aa94 <HAL_DMA_Abort_IT+0xc4>
 800aa8e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800aa92:	e01b      	b.n	800aacc <HAL_DMA_Abort_IT+0xfc>
 800aa94:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800aa98:	e018      	b.n	800aacc <HAL_DMA_Abort_IT+0xfc>
 800aa9a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800aa9e:	e015      	b.n	800aacc <HAL_DMA_Abort_IT+0xfc>
 800aaa0:	2310      	movs	r3, #16
 800aaa2:	e013      	b.n	800aacc <HAL_DMA_Abort_IT+0xfc>
 800aaa4:	2301      	movs	r3, #1
 800aaa6:	e011      	b.n	800aacc <HAL_DMA_Abort_IT+0xfc>
 800aaa8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800aaac:	e00e      	b.n	800aacc <HAL_DMA_Abort_IT+0xfc>
 800aaae:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800aab2:	e00b      	b.n	800aacc <HAL_DMA_Abort_IT+0xfc>
 800aab4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800aab8:	e008      	b.n	800aacc <HAL_DMA_Abort_IT+0xfc>
 800aaba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800aabe:	e005      	b.n	800aacc <HAL_DMA_Abort_IT+0xfc>
 800aac0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800aac4:	e002      	b.n	800aacc <HAL_DMA_Abort_IT+0xfc>
 800aac6:	2310      	movs	r3, #16
 800aac8:	e000      	b.n	800aacc <HAL_DMA_Abort_IT+0xfc>
 800aaca:	2301      	movs	r3, #1
 800aacc:	4a42      	ldr	r2, [pc, #264]	@ (800abd8 <HAL_DMA_Abort_IT+0x208>)
 800aace:	6053      	str	r3, [r2, #4]
 800aad0:	e057      	b.n	800ab82 <HAL_DMA_Abort_IT+0x1b2>
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	4a36      	ldr	r2, [pc, #216]	@ (800abb0 <HAL_DMA_Abort_IT+0x1e0>)
 800aad8:	4293      	cmp	r3, r2
 800aada:	d04f      	beq.n	800ab7c <HAL_DMA_Abort_IT+0x1ac>
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	4a34      	ldr	r2, [pc, #208]	@ (800abb4 <HAL_DMA_Abort_IT+0x1e4>)
 800aae2:	4293      	cmp	r3, r2
 800aae4:	d048      	beq.n	800ab78 <HAL_DMA_Abort_IT+0x1a8>
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	4a33      	ldr	r2, [pc, #204]	@ (800abb8 <HAL_DMA_Abort_IT+0x1e8>)
 800aaec:	4293      	cmp	r3, r2
 800aaee:	d040      	beq.n	800ab72 <HAL_DMA_Abort_IT+0x1a2>
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	4a31      	ldr	r2, [pc, #196]	@ (800abbc <HAL_DMA_Abort_IT+0x1ec>)
 800aaf6:	4293      	cmp	r3, r2
 800aaf8:	d038      	beq.n	800ab6c <HAL_DMA_Abort_IT+0x19c>
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	4a30      	ldr	r2, [pc, #192]	@ (800abc0 <HAL_DMA_Abort_IT+0x1f0>)
 800ab00:	4293      	cmp	r3, r2
 800ab02:	d030      	beq.n	800ab66 <HAL_DMA_Abort_IT+0x196>
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	4a2e      	ldr	r2, [pc, #184]	@ (800abc4 <HAL_DMA_Abort_IT+0x1f4>)
 800ab0a:	4293      	cmp	r3, r2
 800ab0c:	d028      	beq.n	800ab60 <HAL_DMA_Abort_IT+0x190>
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	4a26      	ldr	r2, [pc, #152]	@ (800abac <HAL_DMA_Abort_IT+0x1dc>)
 800ab14:	4293      	cmp	r3, r2
 800ab16:	d020      	beq.n	800ab5a <HAL_DMA_Abort_IT+0x18a>
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	4a2a      	ldr	r2, [pc, #168]	@ (800abc8 <HAL_DMA_Abort_IT+0x1f8>)
 800ab1e:	4293      	cmp	r3, r2
 800ab20:	d019      	beq.n	800ab56 <HAL_DMA_Abort_IT+0x186>
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	4a29      	ldr	r2, [pc, #164]	@ (800abcc <HAL_DMA_Abort_IT+0x1fc>)
 800ab28:	4293      	cmp	r3, r2
 800ab2a:	d012      	beq.n	800ab52 <HAL_DMA_Abort_IT+0x182>
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	4a27      	ldr	r2, [pc, #156]	@ (800abd0 <HAL_DMA_Abort_IT+0x200>)
 800ab32:	4293      	cmp	r3, r2
 800ab34:	d00a      	beq.n	800ab4c <HAL_DMA_Abort_IT+0x17c>
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	4a26      	ldr	r2, [pc, #152]	@ (800abd4 <HAL_DMA_Abort_IT+0x204>)
 800ab3c:	4293      	cmp	r3, r2
 800ab3e:	d102      	bne.n	800ab46 <HAL_DMA_Abort_IT+0x176>
 800ab40:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ab44:	e01b      	b.n	800ab7e <HAL_DMA_Abort_IT+0x1ae>
 800ab46:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800ab4a:	e018      	b.n	800ab7e <HAL_DMA_Abort_IT+0x1ae>
 800ab4c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ab50:	e015      	b.n	800ab7e <HAL_DMA_Abort_IT+0x1ae>
 800ab52:	2310      	movs	r3, #16
 800ab54:	e013      	b.n	800ab7e <HAL_DMA_Abort_IT+0x1ae>
 800ab56:	2301      	movs	r3, #1
 800ab58:	e011      	b.n	800ab7e <HAL_DMA_Abort_IT+0x1ae>
 800ab5a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ab5e:	e00e      	b.n	800ab7e <HAL_DMA_Abort_IT+0x1ae>
 800ab60:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800ab64:	e00b      	b.n	800ab7e <HAL_DMA_Abort_IT+0x1ae>
 800ab66:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800ab6a:	e008      	b.n	800ab7e <HAL_DMA_Abort_IT+0x1ae>
 800ab6c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ab70:	e005      	b.n	800ab7e <HAL_DMA_Abort_IT+0x1ae>
 800ab72:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ab76:	e002      	b.n	800ab7e <HAL_DMA_Abort_IT+0x1ae>
 800ab78:	2310      	movs	r3, #16
 800ab7a:	e000      	b.n	800ab7e <HAL_DMA_Abort_IT+0x1ae>
 800ab7c:	2301      	movs	r3, #1
 800ab7e:	4a17      	ldr	r2, [pc, #92]	@ (800abdc <HAL_DMA_Abort_IT+0x20c>)
 800ab80:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	2201      	movs	r2, #1
 800ab86:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	2200      	movs	r2, #0
 800ab8e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d003      	beq.n	800aba2 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab9e:	6878      	ldr	r0, [r7, #4]
 800aba0:	4798      	blx	r3
    } 
  }
  return status;
 800aba2:	7bfb      	ldrb	r3, [r7, #15]
}
 800aba4:	4618      	mov	r0, r3
 800aba6:	3710      	adds	r7, #16
 800aba8:	46bd      	mov	sp, r7
 800abaa:	bd80      	pop	{r7, pc}
 800abac:	40020080 	.word	0x40020080
 800abb0:	40020008 	.word	0x40020008
 800abb4:	4002001c 	.word	0x4002001c
 800abb8:	40020030 	.word	0x40020030
 800abbc:	40020044 	.word	0x40020044
 800abc0:	40020058 	.word	0x40020058
 800abc4:	4002006c 	.word	0x4002006c
 800abc8:	40020408 	.word	0x40020408
 800abcc:	4002041c 	.word	0x4002041c
 800abd0:	40020430 	.word	0x40020430
 800abd4:	40020444 	.word	0x40020444
 800abd8:	40020400 	.word	0x40020400
 800abdc:	40020000 	.word	0x40020000

0800abe0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b084      	sub	sp, #16
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abfc:	2204      	movs	r2, #4
 800abfe:	409a      	lsls	r2, r3
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	4013      	ands	r3, r2
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	f000 80f1 	beq.w	800adec <HAL_DMA_IRQHandler+0x20c>
 800ac0a:	68bb      	ldr	r3, [r7, #8]
 800ac0c:	f003 0304 	and.w	r3, r3, #4
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	f000 80eb 	beq.w	800adec <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	f003 0320 	and.w	r3, r3, #32
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d107      	bne.n	800ac34 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	681a      	ldr	r2, [r3, #0]
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	f022 0204 	bic.w	r2, r2, #4
 800ac32:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	461a      	mov	r2, r3
 800ac3a:	4b5f      	ldr	r3, [pc, #380]	@ (800adb8 <HAL_DMA_IRQHandler+0x1d8>)
 800ac3c:	429a      	cmp	r2, r3
 800ac3e:	d958      	bls.n	800acf2 <HAL_DMA_IRQHandler+0x112>
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	4a5d      	ldr	r2, [pc, #372]	@ (800adbc <HAL_DMA_IRQHandler+0x1dc>)
 800ac46:	4293      	cmp	r3, r2
 800ac48:	d04f      	beq.n	800acea <HAL_DMA_IRQHandler+0x10a>
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	4a5c      	ldr	r2, [pc, #368]	@ (800adc0 <HAL_DMA_IRQHandler+0x1e0>)
 800ac50:	4293      	cmp	r3, r2
 800ac52:	d048      	beq.n	800ace6 <HAL_DMA_IRQHandler+0x106>
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	4a5a      	ldr	r2, [pc, #360]	@ (800adc4 <HAL_DMA_IRQHandler+0x1e4>)
 800ac5a:	4293      	cmp	r3, r2
 800ac5c:	d040      	beq.n	800ace0 <HAL_DMA_IRQHandler+0x100>
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	4a59      	ldr	r2, [pc, #356]	@ (800adc8 <HAL_DMA_IRQHandler+0x1e8>)
 800ac64:	4293      	cmp	r3, r2
 800ac66:	d038      	beq.n	800acda <HAL_DMA_IRQHandler+0xfa>
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	4a57      	ldr	r2, [pc, #348]	@ (800adcc <HAL_DMA_IRQHandler+0x1ec>)
 800ac6e:	4293      	cmp	r3, r2
 800ac70:	d030      	beq.n	800acd4 <HAL_DMA_IRQHandler+0xf4>
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	4a56      	ldr	r2, [pc, #344]	@ (800add0 <HAL_DMA_IRQHandler+0x1f0>)
 800ac78:	4293      	cmp	r3, r2
 800ac7a:	d028      	beq.n	800acce <HAL_DMA_IRQHandler+0xee>
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	4a4d      	ldr	r2, [pc, #308]	@ (800adb8 <HAL_DMA_IRQHandler+0x1d8>)
 800ac82:	4293      	cmp	r3, r2
 800ac84:	d020      	beq.n	800acc8 <HAL_DMA_IRQHandler+0xe8>
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	4a52      	ldr	r2, [pc, #328]	@ (800add4 <HAL_DMA_IRQHandler+0x1f4>)
 800ac8c:	4293      	cmp	r3, r2
 800ac8e:	d019      	beq.n	800acc4 <HAL_DMA_IRQHandler+0xe4>
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	4a50      	ldr	r2, [pc, #320]	@ (800add8 <HAL_DMA_IRQHandler+0x1f8>)
 800ac96:	4293      	cmp	r3, r2
 800ac98:	d012      	beq.n	800acc0 <HAL_DMA_IRQHandler+0xe0>
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	4a4f      	ldr	r2, [pc, #316]	@ (800addc <HAL_DMA_IRQHandler+0x1fc>)
 800aca0:	4293      	cmp	r3, r2
 800aca2:	d00a      	beq.n	800acba <HAL_DMA_IRQHandler+0xda>
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	4a4d      	ldr	r2, [pc, #308]	@ (800ade0 <HAL_DMA_IRQHandler+0x200>)
 800acaa:	4293      	cmp	r3, r2
 800acac:	d102      	bne.n	800acb4 <HAL_DMA_IRQHandler+0xd4>
 800acae:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800acb2:	e01b      	b.n	800acec <HAL_DMA_IRQHandler+0x10c>
 800acb4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800acb8:	e018      	b.n	800acec <HAL_DMA_IRQHandler+0x10c>
 800acba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800acbe:	e015      	b.n	800acec <HAL_DMA_IRQHandler+0x10c>
 800acc0:	2340      	movs	r3, #64	@ 0x40
 800acc2:	e013      	b.n	800acec <HAL_DMA_IRQHandler+0x10c>
 800acc4:	2304      	movs	r3, #4
 800acc6:	e011      	b.n	800acec <HAL_DMA_IRQHandler+0x10c>
 800acc8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800accc:	e00e      	b.n	800acec <HAL_DMA_IRQHandler+0x10c>
 800acce:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800acd2:	e00b      	b.n	800acec <HAL_DMA_IRQHandler+0x10c>
 800acd4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800acd8:	e008      	b.n	800acec <HAL_DMA_IRQHandler+0x10c>
 800acda:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800acde:	e005      	b.n	800acec <HAL_DMA_IRQHandler+0x10c>
 800ace0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ace4:	e002      	b.n	800acec <HAL_DMA_IRQHandler+0x10c>
 800ace6:	2340      	movs	r3, #64	@ 0x40
 800ace8:	e000      	b.n	800acec <HAL_DMA_IRQHandler+0x10c>
 800acea:	2304      	movs	r3, #4
 800acec:	4a3d      	ldr	r2, [pc, #244]	@ (800ade4 <HAL_DMA_IRQHandler+0x204>)
 800acee:	6053      	str	r3, [r2, #4]
 800acf0:	e057      	b.n	800ada2 <HAL_DMA_IRQHandler+0x1c2>
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	4a31      	ldr	r2, [pc, #196]	@ (800adbc <HAL_DMA_IRQHandler+0x1dc>)
 800acf8:	4293      	cmp	r3, r2
 800acfa:	d04f      	beq.n	800ad9c <HAL_DMA_IRQHandler+0x1bc>
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	4a2f      	ldr	r2, [pc, #188]	@ (800adc0 <HAL_DMA_IRQHandler+0x1e0>)
 800ad02:	4293      	cmp	r3, r2
 800ad04:	d048      	beq.n	800ad98 <HAL_DMA_IRQHandler+0x1b8>
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	4a2e      	ldr	r2, [pc, #184]	@ (800adc4 <HAL_DMA_IRQHandler+0x1e4>)
 800ad0c:	4293      	cmp	r3, r2
 800ad0e:	d040      	beq.n	800ad92 <HAL_DMA_IRQHandler+0x1b2>
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	4a2c      	ldr	r2, [pc, #176]	@ (800adc8 <HAL_DMA_IRQHandler+0x1e8>)
 800ad16:	4293      	cmp	r3, r2
 800ad18:	d038      	beq.n	800ad8c <HAL_DMA_IRQHandler+0x1ac>
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	4a2b      	ldr	r2, [pc, #172]	@ (800adcc <HAL_DMA_IRQHandler+0x1ec>)
 800ad20:	4293      	cmp	r3, r2
 800ad22:	d030      	beq.n	800ad86 <HAL_DMA_IRQHandler+0x1a6>
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	4a29      	ldr	r2, [pc, #164]	@ (800add0 <HAL_DMA_IRQHandler+0x1f0>)
 800ad2a:	4293      	cmp	r3, r2
 800ad2c:	d028      	beq.n	800ad80 <HAL_DMA_IRQHandler+0x1a0>
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	4a21      	ldr	r2, [pc, #132]	@ (800adb8 <HAL_DMA_IRQHandler+0x1d8>)
 800ad34:	4293      	cmp	r3, r2
 800ad36:	d020      	beq.n	800ad7a <HAL_DMA_IRQHandler+0x19a>
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	4a25      	ldr	r2, [pc, #148]	@ (800add4 <HAL_DMA_IRQHandler+0x1f4>)
 800ad3e:	4293      	cmp	r3, r2
 800ad40:	d019      	beq.n	800ad76 <HAL_DMA_IRQHandler+0x196>
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	4a24      	ldr	r2, [pc, #144]	@ (800add8 <HAL_DMA_IRQHandler+0x1f8>)
 800ad48:	4293      	cmp	r3, r2
 800ad4a:	d012      	beq.n	800ad72 <HAL_DMA_IRQHandler+0x192>
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	4a22      	ldr	r2, [pc, #136]	@ (800addc <HAL_DMA_IRQHandler+0x1fc>)
 800ad52:	4293      	cmp	r3, r2
 800ad54:	d00a      	beq.n	800ad6c <HAL_DMA_IRQHandler+0x18c>
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	4a21      	ldr	r2, [pc, #132]	@ (800ade0 <HAL_DMA_IRQHandler+0x200>)
 800ad5c:	4293      	cmp	r3, r2
 800ad5e:	d102      	bne.n	800ad66 <HAL_DMA_IRQHandler+0x186>
 800ad60:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800ad64:	e01b      	b.n	800ad9e <HAL_DMA_IRQHandler+0x1be>
 800ad66:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800ad6a:	e018      	b.n	800ad9e <HAL_DMA_IRQHandler+0x1be>
 800ad6c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ad70:	e015      	b.n	800ad9e <HAL_DMA_IRQHandler+0x1be>
 800ad72:	2340      	movs	r3, #64	@ 0x40
 800ad74:	e013      	b.n	800ad9e <HAL_DMA_IRQHandler+0x1be>
 800ad76:	2304      	movs	r3, #4
 800ad78:	e011      	b.n	800ad9e <HAL_DMA_IRQHandler+0x1be>
 800ad7a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800ad7e:	e00e      	b.n	800ad9e <HAL_DMA_IRQHandler+0x1be>
 800ad80:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800ad84:	e00b      	b.n	800ad9e <HAL_DMA_IRQHandler+0x1be>
 800ad86:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800ad8a:	e008      	b.n	800ad9e <HAL_DMA_IRQHandler+0x1be>
 800ad8c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800ad90:	e005      	b.n	800ad9e <HAL_DMA_IRQHandler+0x1be>
 800ad92:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ad96:	e002      	b.n	800ad9e <HAL_DMA_IRQHandler+0x1be>
 800ad98:	2340      	movs	r3, #64	@ 0x40
 800ad9a:	e000      	b.n	800ad9e <HAL_DMA_IRQHandler+0x1be>
 800ad9c:	2304      	movs	r3, #4
 800ad9e:	4a12      	ldr	r2, [pc, #72]	@ (800ade8 <HAL_DMA_IRQHandler+0x208>)
 800ada0:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	f000 8136 	beq.w	800b018 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800adb0:	6878      	ldr	r0, [r7, #4]
 800adb2:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800adb4:	e130      	b.n	800b018 <HAL_DMA_IRQHandler+0x438>
 800adb6:	bf00      	nop
 800adb8:	40020080 	.word	0x40020080
 800adbc:	40020008 	.word	0x40020008
 800adc0:	4002001c 	.word	0x4002001c
 800adc4:	40020030 	.word	0x40020030
 800adc8:	40020044 	.word	0x40020044
 800adcc:	40020058 	.word	0x40020058
 800add0:	4002006c 	.word	0x4002006c
 800add4:	40020408 	.word	0x40020408
 800add8:	4002041c 	.word	0x4002041c
 800addc:	40020430 	.word	0x40020430
 800ade0:	40020444 	.word	0x40020444
 800ade4:	40020400 	.word	0x40020400
 800ade8:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800adf0:	2202      	movs	r2, #2
 800adf2:	409a      	lsls	r2, r3
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	4013      	ands	r3, r2
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	f000 80dd 	beq.w	800afb8 <HAL_DMA_IRQHandler+0x3d8>
 800adfe:	68bb      	ldr	r3, [r7, #8]
 800ae00:	f003 0302 	and.w	r3, r3, #2
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	f000 80d7 	beq.w	800afb8 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	f003 0320 	and.w	r3, r3, #32
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d10b      	bne.n	800ae30 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	681a      	ldr	r2, [r3, #0]
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	f022 020a 	bic.w	r2, r2, #10
 800ae26:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	2201      	movs	r2, #1
 800ae2c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	461a      	mov	r2, r3
 800ae36:	4b7b      	ldr	r3, [pc, #492]	@ (800b024 <HAL_DMA_IRQHandler+0x444>)
 800ae38:	429a      	cmp	r2, r3
 800ae3a:	d958      	bls.n	800aeee <HAL_DMA_IRQHandler+0x30e>
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	4a79      	ldr	r2, [pc, #484]	@ (800b028 <HAL_DMA_IRQHandler+0x448>)
 800ae42:	4293      	cmp	r3, r2
 800ae44:	d04f      	beq.n	800aee6 <HAL_DMA_IRQHandler+0x306>
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	4a78      	ldr	r2, [pc, #480]	@ (800b02c <HAL_DMA_IRQHandler+0x44c>)
 800ae4c:	4293      	cmp	r3, r2
 800ae4e:	d048      	beq.n	800aee2 <HAL_DMA_IRQHandler+0x302>
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	4a76      	ldr	r2, [pc, #472]	@ (800b030 <HAL_DMA_IRQHandler+0x450>)
 800ae56:	4293      	cmp	r3, r2
 800ae58:	d040      	beq.n	800aedc <HAL_DMA_IRQHandler+0x2fc>
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	4a75      	ldr	r2, [pc, #468]	@ (800b034 <HAL_DMA_IRQHandler+0x454>)
 800ae60:	4293      	cmp	r3, r2
 800ae62:	d038      	beq.n	800aed6 <HAL_DMA_IRQHandler+0x2f6>
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	4a73      	ldr	r2, [pc, #460]	@ (800b038 <HAL_DMA_IRQHandler+0x458>)
 800ae6a:	4293      	cmp	r3, r2
 800ae6c:	d030      	beq.n	800aed0 <HAL_DMA_IRQHandler+0x2f0>
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	4a72      	ldr	r2, [pc, #456]	@ (800b03c <HAL_DMA_IRQHandler+0x45c>)
 800ae74:	4293      	cmp	r3, r2
 800ae76:	d028      	beq.n	800aeca <HAL_DMA_IRQHandler+0x2ea>
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	4a69      	ldr	r2, [pc, #420]	@ (800b024 <HAL_DMA_IRQHandler+0x444>)
 800ae7e:	4293      	cmp	r3, r2
 800ae80:	d020      	beq.n	800aec4 <HAL_DMA_IRQHandler+0x2e4>
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	4a6e      	ldr	r2, [pc, #440]	@ (800b040 <HAL_DMA_IRQHandler+0x460>)
 800ae88:	4293      	cmp	r3, r2
 800ae8a:	d019      	beq.n	800aec0 <HAL_DMA_IRQHandler+0x2e0>
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	4a6c      	ldr	r2, [pc, #432]	@ (800b044 <HAL_DMA_IRQHandler+0x464>)
 800ae92:	4293      	cmp	r3, r2
 800ae94:	d012      	beq.n	800aebc <HAL_DMA_IRQHandler+0x2dc>
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	4a6b      	ldr	r2, [pc, #428]	@ (800b048 <HAL_DMA_IRQHandler+0x468>)
 800ae9c:	4293      	cmp	r3, r2
 800ae9e:	d00a      	beq.n	800aeb6 <HAL_DMA_IRQHandler+0x2d6>
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	4a69      	ldr	r2, [pc, #420]	@ (800b04c <HAL_DMA_IRQHandler+0x46c>)
 800aea6:	4293      	cmp	r3, r2
 800aea8:	d102      	bne.n	800aeb0 <HAL_DMA_IRQHandler+0x2d0>
 800aeaa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800aeae:	e01b      	b.n	800aee8 <HAL_DMA_IRQHandler+0x308>
 800aeb0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800aeb4:	e018      	b.n	800aee8 <HAL_DMA_IRQHandler+0x308>
 800aeb6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800aeba:	e015      	b.n	800aee8 <HAL_DMA_IRQHandler+0x308>
 800aebc:	2320      	movs	r3, #32
 800aebe:	e013      	b.n	800aee8 <HAL_DMA_IRQHandler+0x308>
 800aec0:	2302      	movs	r3, #2
 800aec2:	e011      	b.n	800aee8 <HAL_DMA_IRQHandler+0x308>
 800aec4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800aec8:	e00e      	b.n	800aee8 <HAL_DMA_IRQHandler+0x308>
 800aeca:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800aece:	e00b      	b.n	800aee8 <HAL_DMA_IRQHandler+0x308>
 800aed0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800aed4:	e008      	b.n	800aee8 <HAL_DMA_IRQHandler+0x308>
 800aed6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800aeda:	e005      	b.n	800aee8 <HAL_DMA_IRQHandler+0x308>
 800aedc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800aee0:	e002      	b.n	800aee8 <HAL_DMA_IRQHandler+0x308>
 800aee2:	2320      	movs	r3, #32
 800aee4:	e000      	b.n	800aee8 <HAL_DMA_IRQHandler+0x308>
 800aee6:	2302      	movs	r3, #2
 800aee8:	4a59      	ldr	r2, [pc, #356]	@ (800b050 <HAL_DMA_IRQHandler+0x470>)
 800aeea:	6053      	str	r3, [r2, #4]
 800aeec:	e057      	b.n	800af9e <HAL_DMA_IRQHandler+0x3be>
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	4a4d      	ldr	r2, [pc, #308]	@ (800b028 <HAL_DMA_IRQHandler+0x448>)
 800aef4:	4293      	cmp	r3, r2
 800aef6:	d04f      	beq.n	800af98 <HAL_DMA_IRQHandler+0x3b8>
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	4a4b      	ldr	r2, [pc, #300]	@ (800b02c <HAL_DMA_IRQHandler+0x44c>)
 800aefe:	4293      	cmp	r3, r2
 800af00:	d048      	beq.n	800af94 <HAL_DMA_IRQHandler+0x3b4>
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	4a4a      	ldr	r2, [pc, #296]	@ (800b030 <HAL_DMA_IRQHandler+0x450>)
 800af08:	4293      	cmp	r3, r2
 800af0a:	d040      	beq.n	800af8e <HAL_DMA_IRQHandler+0x3ae>
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	4a48      	ldr	r2, [pc, #288]	@ (800b034 <HAL_DMA_IRQHandler+0x454>)
 800af12:	4293      	cmp	r3, r2
 800af14:	d038      	beq.n	800af88 <HAL_DMA_IRQHandler+0x3a8>
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	4a47      	ldr	r2, [pc, #284]	@ (800b038 <HAL_DMA_IRQHandler+0x458>)
 800af1c:	4293      	cmp	r3, r2
 800af1e:	d030      	beq.n	800af82 <HAL_DMA_IRQHandler+0x3a2>
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	4a45      	ldr	r2, [pc, #276]	@ (800b03c <HAL_DMA_IRQHandler+0x45c>)
 800af26:	4293      	cmp	r3, r2
 800af28:	d028      	beq.n	800af7c <HAL_DMA_IRQHandler+0x39c>
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	4a3d      	ldr	r2, [pc, #244]	@ (800b024 <HAL_DMA_IRQHandler+0x444>)
 800af30:	4293      	cmp	r3, r2
 800af32:	d020      	beq.n	800af76 <HAL_DMA_IRQHandler+0x396>
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	4a41      	ldr	r2, [pc, #260]	@ (800b040 <HAL_DMA_IRQHandler+0x460>)
 800af3a:	4293      	cmp	r3, r2
 800af3c:	d019      	beq.n	800af72 <HAL_DMA_IRQHandler+0x392>
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	4a40      	ldr	r2, [pc, #256]	@ (800b044 <HAL_DMA_IRQHandler+0x464>)
 800af44:	4293      	cmp	r3, r2
 800af46:	d012      	beq.n	800af6e <HAL_DMA_IRQHandler+0x38e>
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	4a3e      	ldr	r2, [pc, #248]	@ (800b048 <HAL_DMA_IRQHandler+0x468>)
 800af4e:	4293      	cmp	r3, r2
 800af50:	d00a      	beq.n	800af68 <HAL_DMA_IRQHandler+0x388>
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	4a3d      	ldr	r2, [pc, #244]	@ (800b04c <HAL_DMA_IRQHandler+0x46c>)
 800af58:	4293      	cmp	r3, r2
 800af5a:	d102      	bne.n	800af62 <HAL_DMA_IRQHandler+0x382>
 800af5c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800af60:	e01b      	b.n	800af9a <HAL_DMA_IRQHandler+0x3ba>
 800af62:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800af66:	e018      	b.n	800af9a <HAL_DMA_IRQHandler+0x3ba>
 800af68:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800af6c:	e015      	b.n	800af9a <HAL_DMA_IRQHandler+0x3ba>
 800af6e:	2320      	movs	r3, #32
 800af70:	e013      	b.n	800af9a <HAL_DMA_IRQHandler+0x3ba>
 800af72:	2302      	movs	r3, #2
 800af74:	e011      	b.n	800af9a <HAL_DMA_IRQHandler+0x3ba>
 800af76:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800af7a:	e00e      	b.n	800af9a <HAL_DMA_IRQHandler+0x3ba>
 800af7c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800af80:	e00b      	b.n	800af9a <HAL_DMA_IRQHandler+0x3ba>
 800af82:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800af86:	e008      	b.n	800af9a <HAL_DMA_IRQHandler+0x3ba>
 800af88:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800af8c:	e005      	b.n	800af9a <HAL_DMA_IRQHandler+0x3ba>
 800af8e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800af92:	e002      	b.n	800af9a <HAL_DMA_IRQHandler+0x3ba>
 800af94:	2320      	movs	r3, #32
 800af96:	e000      	b.n	800af9a <HAL_DMA_IRQHandler+0x3ba>
 800af98:	2302      	movs	r3, #2
 800af9a:	4a2e      	ldr	r2, [pc, #184]	@ (800b054 <HAL_DMA_IRQHandler+0x474>)
 800af9c:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	2200      	movs	r2, #0
 800afa2:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d034      	beq.n	800b018 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afb2:	6878      	ldr	r0, [r7, #4]
 800afb4:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800afb6:	e02f      	b.n	800b018 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800afbc:	2208      	movs	r2, #8
 800afbe:	409a      	lsls	r2, r3
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	4013      	ands	r3, r2
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d028      	beq.n	800b01a <HAL_DMA_IRQHandler+0x43a>
 800afc8:	68bb      	ldr	r3, [r7, #8]
 800afca:	f003 0308 	and.w	r3, r3, #8
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d023      	beq.n	800b01a <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	681a      	ldr	r2, [r3, #0]
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	f022 020e 	bic.w	r2, r2, #14
 800afe0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800afea:	2101      	movs	r1, #1
 800afec:	fa01 f202 	lsl.w	r2, r1, r2
 800aff0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	2201      	movs	r2, #1
 800aff6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	2201      	movs	r2, #1
 800affc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	2200      	movs	r2, #0
 800b004:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d004      	beq.n	800b01a <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b014:	6878      	ldr	r0, [r7, #4]
 800b016:	4798      	blx	r3
    }
  }
  return;
 800b018:	bf00      	nop
 800b01a:	bf00      	nop
}
 800b01c:	3710      	adds	r7, #16
 800b01e:	46bd      	mov	sp, r7
 800b020:	bd80      	pop	{r7, pc}
 800b022:	bf00      	nop
 800b024:	40020080 	.word	0x40020080
 800b028:	40020008 	.word	0x40020008
 800b02c:	4002001c 	.word	0x4002001c
 800b030:	40020030 	.word	0x40020030
 800b034:	40020044 	.word	0x40020044
 800b038:	40020058 	.word	0x40020058
 800b03c:	4002006c 	.word	0x4002006c
 800b040:	40020408 	.word	0x40020408
 800b044:	4002041c 	.word	0x4002041c
 800b048:	40020430 	.word	0x40020430
 800b04c:	40020444 	.word	0x40020444
 800b050:	40020400 	.word	0x40020400
 800b054:	40020000 	.word	0x40020000

0800b058 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b058:	b480      	push	{r7}
 800b05a:	b085      	sub	sp, #20
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	60f8      	str	r0, [r7, #12]
 800b060:	60b9      	str	r1, [r7, #8]
 800b062:	607a      	str	r2, [r7, #4]
 800b064:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b06e:	2101      	movs	r1, #1
 800b070:	fa01 f202 	lsl.w	r2, r1, r2
 800b074:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	683a      	ldr	r2, [r7, #0]
 800b07c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	685b      	ldr	r3, [r3, #4]
 800b082:	2b10      	cmp	r3, #16
 800b084:	d108      	bne.n	800b098 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	687a      	ldr	r2, [r7, #4]
 800b08c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	68ba      	ldr	r2, [r7, #8]
 800b094:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800b096:	e007      	b.n	800b0a8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	68ba      	ldr	r2, [r7, #8]
 800b09e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	687a      	ldr	r2, [r7, #4]
 800b0a6:	60da      	str	r2, [r3, #12]
}
 800b0a8:	bf00      	nop
 800b0aa:	3714      	adds	r7, #20
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	bc80      	pop	{r7}
 800b0b0:	4770      	bx	lr
	...

0800b0b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b0b4:	b480      	push	{r7}
 800b0b6:	b08b      	sub	sp, #44	@ 0x2c
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
 800b0bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800b0be:	2300      	movs	r3, #0
 800b0c0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800b0c6:	e179      	b.n	800b3bc <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800b0c8:	2201      	movs	r2, #1
 800b0ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0cc:	fa02 f303 	lsl.w	r3, r2, r3
 800b0d0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800b0d2:	683b      	ldr	r3, [r7, #0]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	69fa      	ldr	r2, [r7, #28]
 800b0d8:	4013      	ands	r3, r2
 800b0da:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800b0dc:	69ba      	ldr	r2, [r7, #24]
 800b0de:	69fb      	ldr	r3, [r7, #28]
 800b0e0:	429a      	cmp	r2, r3
 800b0e2:	f040 8168 	bne.w	800b3b6 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800b0e6:	683b      	ldr	r3, [r7, #0]
 800b0e8:	685b      	ldr	r3, [r3, #4]
 800b0ea:	4a96      	ldr	r2, [pc, #600]	@ (800b344 <HAL_GPIO_Init+0x290>)
 800b0ec:	4293      	cmp	r3, r2
 800b0ee:	d05e      	beq.n	800b1ae <HAL_GPIO_Init+0xfa>
 800b0f0:	4a94      	ldr	r2, [pc, #592]	@ (800b344 <HAL_GPIO_Init+0x290>)
 800b0f2:	4293      	cmp	r3, r2
 800b0f4:	d875      	bhi.n	800b1e2 <HAL_GPIO_Init+0x12e>
 800b0f6:	4a94      	ldr	r2, [pc, #592]	@ (800b348 <HAL_GPIO_Init+0x294>)
 800b0f8:	4293      	cmp	r3, r2
 800b0fa:	d058      	beq.n	800b1ae <HAL_GPIO_Init+0xfa>
 800b0fc:	4a92      	ldr	r2, [pc, #584]	@ (800b348 <HAL_GPIO_Init+0x294>)
 800b0fe:	4293      	cmp	r3, r2
 800b100:	d86f      	bhi.n	800b1e2 <HAL_GPIO_Init+0x12e>
 800b102:	4a92      	ldr	r2, [pc, #584]	@ (800b34c <HAL_GPIO_Init+0x298>)
 800b104:	4293      	cmp	r3, r2
 800b106:	d052      	beq.n	800b1ae <HAL_GPIO_Init+0xfa>
 800b108:	4a90      	ldr	r2, [pc, #576]	@ (800b34c <HAL_GPIO_Init+0x298>)
 800b10a:	4293      	cmp	r3, r2
 800b10c:	d869      	bhi.n	800b1e2 <HAL_GPIO_Init+0x12e>
 800b10e:	4a90      	ldr	r2, [pc, #576]	@ (800b350 <HAL_GPIO_Init+0x29c>)
 800b110:	4293      	cmp	r3, r2
 800b112:	d04c      	beq.n	800b1ae <HAL_GPIO_Init+0xfa>
 800b114:	4a8e      	ldr	r2, [pc, #568]	@ (800b350 <HAL_GPIO_Init+0x29c>)
 800b116:	4293      	cmp	r3, r2
 800b118:	d863      	bhi.n	800b1e2 <HAL_GPIO_Init+0x12e>
 800b11a:	4a8e      	ldr	r2, [pc, #568]	@ (800b354 <HAL_GPIO_Init+0x2a0>)
 800b11c:	4293      	cmp	r3, r2
 800b11e:	d046      	beq.n	800b1ae <HAL_GPIO_Init+0xfa>
 800b120:	4a8c      	ldr	r2, [pc, #560]	@ (800b354 <HAL_GPIO_Init+0x2a0>)
 800b122:	4293      	cmp	r3, r2
 800b124:	d85d      	bhi.n	800b1e2 <HAL_GPIO_Init+0x12e>
 800b126:	2b12      	cmp	r3, #18
 800b128:	d82a      	bhi.n	800b180 <HAL_GPIO_Init+0xcc>
 800b12a:	2b12      	cmp	r3, #18
 800b12c:	d859      	bhi.n	800b1e2 <HAL_GPIO_Init+0x12e>
 800b12e:	a201      	add	r2, pc, #4	@ (adr r2, 800b134 <HAL_GPIO_Init+0x80>)
 800b130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b134:	0800b1af 	.word	0x0800b1af
 800b138:	0800b189 	.word	0x0800b189
 800b13c:	0800b19b 	.word	0x0800b19b
 800b140:	0800b1dd 	.word	0x0800b1dd
 800b144:	0800b1e3 	.word	0x0800b1e3
 800b148:	0800b1e3 	.word	0x0800b1e3
 800b14c:	0800b1e3 	.word	0x0800b1e3
 800b150:	0800b1e3 	.word	0x0800b1e3
 800b154:	0800b1e3 	.word	0x0800b1e3
 800b158:	0800b1e3 	.word	0x0800b1e3
 800b15c:	0800b1e3 	.word	0x0800b1e3
 800b160:	0800b1e3 	.word	0x0800b1e3
 800b164:	0800b1e3 	.word	0x0800b1e3
 800b168:	0800b1e3 	.word	0x0800b1e3
 800b16c:	0800b1e3 	.word	0x0800b1e3
 800b170:	0800b1e3 	.word	0x0800b1e3
 800b174:	0800b1e3 	.word	0x0800b1e3
 800b178:	0800b191 	.word	0x0800b191
 800b17c:	0800b1a5 	.word	0x0800b1a5
 800b180:	4a75      	ldr	r2, [pc, #468]	@ (800b358 <HAL_GPIO_Init+0x2a4>)
 800b182:	4293      	cmp	r3, r2
 800b184:	d013      	beq.n	800b1ae <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800b186:	e02c      	b.n	800b1e2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800b188:	683b      	ldr	r3, [r7, #0]
 800b18a:	68db      	ldr	r3, [r3, #12]
 800b18c:	623b      	str	r3, [r7, #32]
          break;
 800b18e:	e029      	b.n	800b1e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800b190:	683b      	ldr	r3, [r7, #0]
 800b192:	68db      	ldr	r3, [r3, #12]
 800b194:	3304      	adds	r3, #4
 800b196:	623b      	str	r3, [r7, #32]
          break;
 800b198:	e024      	b.n	800b1e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800b19a:	683b      	ldr	r3, [r7, #0]
 800b19c:	68db      	ldr	r3, [r3, #12]
 800b19e:	3308      	adds	r3, #8
 800b1a0:	623b      	str	r3, [r7, #32]
          break;
 800b1a2:	e01f      	b.n	800b1e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800b1a4:	683b      	ldr	r3, [r7, #0]
 800b1a6:	68db      	ldr	r3, [r3, #12]
 800b1a8:	330c      	adds	r3, #12
 800b1aa:	623b      	str	r3, [r7, #32]
          break;
 800b1ac:	e01a      	b.n	800b1e4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800b1ae:	683b      	ldr	r3, [r7, #0]
 800b1b0:	689b      	ldr	r3, [r3, #8]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d102      	bne.n	800b1bc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800b1b6:	2304      	movs	r3, #4
 800b1b8:	623b      	str	r3, [r7, #32]
          break;
 800b1ba:	e013      	b.n	800b1e4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800b1bc:	683b      	ldr	r3, [r7, #0]
 800b1be:	689b      	ldr	r3, [r3, #8]
 800b1c0:	2b01      	cmp	r3, #1
 800b1c2:	d105      	bne.n	800b1d0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800b1c4:	2308      	movs	r3, #8
 800b1c6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	69fa      	ldr	r2, [r7, #28]
 800b1cc:	611a      	str	r2, [r3, #16]
          break;
 800b1ce:	e009      	b.n	800b1e4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800b1d0:	2308      	movs	r3, #8
 800b1d2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	69fa      	ldr	r2, [r7, #28]
 800b1d8:	615a      	str	r2, [r3, #20]
          break;
 800b1da:	e003      	b.n	800b1e4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800b1dc:	2300      	movs	r3, #0
 800b1de:	623b      	str	r3, [r7, #32]
          break;
 800b1e0:	e000      	b.n	800b1e4 <HAL_GPIO_Init+0x130>
          break;
 800b1e2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800b1e4:	69bb      	ldr	r3, [r7, #24]
 800b1e6:	2bff      	cmp	r3, #255	@ 0xff
 800b1e8:	d801      	bhi.n	800b1ee <HAL_GPIO_Init+0x13a>
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	e001      	b.n	800b1f2 <HAL_GPIO_Init+0x13e>
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	3304      	adds	r3, #4
 800b1f2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800b1f4:	69bb      	ldr	r3, [r7, #24]
 800b1f6:	2bff      	cmp	r3, #255	@ 0xff
 800b1f8:	d802      	bhi.n	800b200 <HAL_GPIO_Init+0x14c>
 800b1fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1fc:	009b      	lsls	r3, r3, #2
 800b1fe:	e002      	b.n	800b206 <HAL_GPIO_Init+0x152>
 800b200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b202:	3b08      	subs	r3, #8
 800b204:	009b      	lsls	r3, r3, #2
 800b206:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800b208:	697b      	ldr	r3, [r7, #20]
 800b20a:	681a      	ldr	r2, [r3, #0]
 800b20c:	210f      	movs	r1, #15
 800b20e:	693b      	ldr	r3, [r7, #16]
 800b210:	fa01 f303 	lsl.w	r3, r1, r3
 800b214:	43db      	mvns	r3, r3
 800b216:	401a      	ands	r2, r3
 800b218:	6a39      	ldr	r1, [r7, #32]
 800b21a:	693b      	ldr	r3, [r7, #16]
 800b21c:	fa01 f303 	lsl.w	r3, r1, r3
 800b220:	431a      	orrs	r2, r3
 800b222:	697b      	ldr	r3, [r7, #20]
 800b224:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800b226:	683b      	ldr	r3, [r7, #0]
 800b228:	685b      	ldr	r3, [r3, #4]
 800b22a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b22e:	2b00      	cmp	r3, #0
 800b230:	f000 80c1 	beq.w	800b3b6 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800b234:	4b49      	ldr	r3, [pc, #292]	@ (800b35c <HAL_GPIO_Init+0x2a8>)
 800b236:	699b      	ldr	r3, [r3, #24]
 800b238:	4a48      	ldr	r2, [pc, #288]	@ (800b35c <HAL_GPIO_Init+0x2a8>)
 800b23a:	f043 0301 	orr.w	r3, r3, #1
 800b23e:	6193      	str	r3, [r2, #24]
 800b240:	4b46      	ldr	r3, [pc, #280]	@ (800b35c <HAL_GPIO_Init+0x2a8>)
 800b242:	699b      	ldr	r3, [r3, #24]
 800b244:	f003 0301 	and.w	r3, r3, #1
 800b248:	60bb      	str	r3, [r7, #8]
 800b24a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800b24c:	4a44      	ldr	r2, [pc, #272]	@ (800b360 <HAL_GPIO_Init+0x2ac>)
 800b24e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b250:	089b      	lsrs	r3, r3, #2
 800b252:	3302      	adds	r3, #2
 800b254:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b258:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800b25a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b25c:	f003 0303 	and.w	r3, r3, #3
 800b260:	009b      	lsls	r3, r3, #2
 800b262:	220f      	movs	r2, #15
 800b264:	fa02 f303 	lsl.w	r3, r2, r3
 800b268:	43db      	mvns	r3, r3
 800b26a:	68fa      	ldr	r2, [r7, #12]
 800b26c:	4013      	ands	r3, r2
 800b26e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	4a3c      	ldr	r2, [pc, #240]	@ (800b364 <HAL_GPIO_Init+0x2b0>)
 800b274:	4293      	cmp	r3, r2
 800b276:	d01f      	beq.n	800b2b8 <HAL_GPIO_Init+0x204>
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	4a3b      	ldr	r2, [pc, #236]	@ (800b368 <HAL_GPIO_Init+0x2b4>)
 800b27c:	4293      	cmp	r3, r2
 800b27e:	d019      	beq.n	800b2b4 <HAL_GPIO_Init+0x200>
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	4a3a      	ldr	r2, [pc, #232]	@ (800b36c <HAL_GPIO_Init+0x2b8>)
 800b284:	4293      	cmp	r3, r2
 800b286:	d013      	beq.n	800b2b0 <HAL_GPIO_Init+0x1fc>
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	4a39      	ldr	r2, [pc, #228]	@ (800b370 <HAL_GPIO_Init+0x2bc>)
 800b28c:	4293      	cmp	r3, r2
 800b28e:	d00d      	beq.n	800b2ac <HAL_GPIO_Init+0x1f8>
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	4a38      	ldr	r2, [pc, #224]	@ (800b374 <HAL_GPIO_Init+0x2c0>)
 800b294:	4293      	cmp	r3, r2
 800b296:	d007      	beq.n	800b2a8 <HAL_GPIO_Init+0x1f4>
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	4a37      	ldr	r2, [pc, #220]	@ (800b378 <HAL_GPIO_Init+0x2c4>)
 800b29c:	4293      	cmp	r3, r2
 800b29e:	d101      	bne.n	800b2a4 <HAL_GPIO_Init+0x1f0>
 800b2a0:	2305      	movs	r3, #5
 800b2a2:	e00a      	b.n	800b2ba <HAL_GPIO_Init+0x206>
 800b2a4:	2306      	movs	r3, #6
 800b2a6:	e008      	b.n	800b2ba <HAL_GPIO_Init+0x206>
 800b2a8:	2304      	movs	r3, #4
 800b2aa:	e006      	b.n	800b2ba <HAL_GPIO_Init+0x206>
 800b2ac:	2303      	movs	r3, #3
 800b2ae:	e004      	b.n	800b2ba <HAL_GPIO_Init+0x206>
 800b2b0:	2302      	movs	r3, #2
 800b2b2:	e002      	b.n	800b2ba <HAL_GPIO_Init+0x206>
 800b2b4:	2301      	movs	r3, #1
 800b2b6:	e000      	b.n	800b2ba <HAL_GPIO_Init+0x206>
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b2bc:	f002 0203 	and.w	r2, r2, #3
 800b2c0:	0092      	lsls	r2, r2, #2
 800b2c2:	4093      	lsls	r3, r2
 800b2c4:	68fa      	ldr	r2, [r7, #12]
 800b2c6:	4313      	orrs	r3, r2
 800b2c8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800b2ca:	4925      	ldr	r1, [pc, #148]	@ (800b360 <HAL_GPIO_Init+0x2ac>)
 800b2cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2ce:	089b      	lsrs	r3, r3, #2
 800b2d0:	3302      	adds	r3, #2
 800b2d2:	68fa      	ldr	r2, [r7, #12]
 800b2d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800b2d8:	683b      	ldr	r3, [r7, #0]
 800b2da:	685b      	ldr	r3, [r3, #4]
 800b2dc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d006      	beq.n	800b2f2 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800b2e4:	4b25      	ldr	r3, [pc, #148]	@ (800b37c <HAL_GPIO_Init+0x2c8>)
 800b2e6:	689a      	ldr	r2, [r3, #8]
 800b2e8:	4924      	ldr	r1, [pc, #144]	@ (800b37c <HAL_GPIO_Init+0x2c8>)
 800b2ea:	69bb      	ldr	r3, [r7, #24]
 800b2ec:	4313      	orrs	r3, r2
 800b2ee:	608b      	str	r3, [r1, #8]
 800b2f0:	e006      	b.n	800b300 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800b2f2:	4b22      	ldr	r3, [pc, #136]	@ (800b37c <HAL_GPIO_Init+0x2c8>)
 800b2f4:	689a      	ldr	r2, [r3, #8]
 800b2f6:	69bb      	ldr	r3, [r7, #24]
 800b2f8:	43db      	mvns	r3, r3
 800b2fa:	4920      	ldr	r1, [pc, #128]	@ (800b37c <HAL_GPIO_Init+0x2c8>)
 800b2fc:	4013      	ands	r3, r2
 800b2fe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800b300:	683b      	ldr	r3, [r7, #0]
 800b302:	685b      	ldr	r3, [r3, #4]
 800b304:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d006      	beq.n	800b31a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800b30c:	4b1b      	ldr	r3, [pc, #108]	@ (800b37c <HAL_GPIO_Init+0x2c8>)
 800b30e:	68da      	ldr	r2, [r3, #12]
 800b310:	491a      	ldr	r1, [pc, #104]	@ (800b37c <HAL_GPIO_Init+0x2c8>)
 800b312:	69bb      	ldr	r3, [r7, #24]
 800b314:	4313      	orrs	r3, r2
 800b316:	60cb      	str	r3, [r1, #12]
 800b318:	e006      	b.n	800b328 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800b31a:	4b18      	ldr	r3, [pc, #96]	@ (800b37c <HAL_GPIO_Init+0x2c8>)
 800b31c:	68da      	ldr	r2, [r3, #12]
 800b31e:	69bb      	ldr	r3, [r7, #24]
 800b320:	43db      	mvns	r3, r3
 800b322:	4916      	ldr	r1, [pc, #88]	@ (800b37c <HAL_GPIO_Init+0x2c8>)
 800b324:	4013      	ands	r3, r2
 800b326:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800b328:	683b      	ldr	r3, [r7, #0]
 800b32a:	685b      	ldr	r3, [r3, #4]
 800b32c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b330:	2b00      	cmp	r3, #0
 800b332:	d025      	beq.n	800b380 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800b334:	4b11      	ldr	r3, [pc, #68]	@ (800b37c <HAL_GPIO_Init+0x2c8>)
 800b336:	685a      	ldr	r2, [r3, #4]
 800b338:	4910      	ldr	r1, [pc, #64]	@ (800b37c <HAL_GPIO_Init+0x2c8>)
 800b33a:	69bb      	ldr	r3, [r7, #24]
 800b33c:	4313      	orrs	r3, r2
 800b33e:	604b      	str	r3, [r1, #4]
 800b340:	e025      	b.n	800b38e <HAL_GPIO_Init+0x2da>
 800b342:	bf00      	nop
 800b344:	10320000 	.word	0x10320000
 800b348:	10310000 	.word	0x10310000
 800b34c:	10220000 	.word	0x10220000
 800b350:	10210000 	.word	0x10210000
 800b354:	10120000 	.word	0x10120000
 800b358:	10110000 	.word	0x10110000
 800b35c:	40021000 	.word	0x40021000
 800b360:	40010000 	.word	0x40010000
 800b364:	40010800 	.word	0x40010800
 800b368:	40010c00 	.word	0x40010c00
 800b36c:	40011000 	.word	0x40011000
 800b370:	40011400 	.word	0x40011400
 800b374:	40011800 	.word	0x40011800
 800b378:	40011c00 	.word	0x40011c00
 800b37c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800b380:	4b15      	ldr	r3, [pc, #84]	@ (800b3d8 <HAL_GPIO_Init+0x324>)
 800b382:	685a      	ldr	r2, [r3, #4]
 800b384:	69bb      	ldr	r3, [r7, #24]
 800b386:	43db      	mvns	r3, r3
 800b388:	4913      	ldr	r1, [pc, #76]	@ (800b3d8 <HAL_GPIO_Init+0x324>)
 800b38a:	4013      	ands	r3, r2
 800b38c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800b38e:	683b      	ldr	r3, [r7, #0]
 800b390:	685b      	ldr	r3, [r3, #4]
 800b392:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b396:	2b00      	cmp	r3, #0
 800b398:	d006      	beq.n	800b3a8 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800b39a:	4b0f      	ldr	r3, [pc, #60]	@ (800b3d8 <HAL_GPIO_Init+0x324>)
 800b39c:	681a      	ldr	r2, [r3, #0]
 800b39e:	490e      	ldr	r1, [pc, #56]	@ (800b3d8 <HAL_GPIO_Init+0x324>)
 800b3a0:	69bb      	ldr	r3, [r7, #24]
 800b3a2:	4313      	orrs	r3, r2
 800b3a4:	600b      	str	r3, [r1, #0]
 800b3a6:	e006      	b.n	800b3b6 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800b3a8:	4b0b      	ldr	r3, [pc, #44]	@ (800b3d8 <HAL_GPIO_Init+0x324>)
 800b3aa:	681a      	ldr	r2, [r3, #0]
 800b3ac:	69bb      	ldr	r3, [r7, #24]
 800b3ae:	43db      	mvns	r3, r3
 800b3b0:	4909      	ldr	r1, [pc, #36]	@ (800b3d8 <HAL_GPIO_Init+0x324>)
 800b3b2:	4013      	ands	r3, r2
 800b3b4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800b3b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3b8:	3301      	adds	r3, #1
 800b3ba:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800b3bc:	683b      	ldr	r3, [r7, #0]
 800b3be:	681a      	ldr	r2, [r3, #0]
 800b3c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3c2:	fa22 f303 	lsr.w	r3, r2, r3
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	f47f ae7e 	bne.w	800b0c8 <HAL_GPIO_Init+0x14>
  }
}
 800b3cc:	bf00      	nop
 800b3ce:	bf00      	nop
 800b3d0:	372c      	adds	r7, #44	@ 0x2c
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	bc80      	pop	{r7}
 800b3d6:	4770      	bx	lr
 800b3d8:	40010400 	.word	0x40010400

0800b3dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b3dc:	b480      	push	{r7}
 800b3de:	b083      	sub	sp, #12
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	6078      	str	r0, [r7, #4]
 800b3e4:	460b      	mov	r3, r1
 800b3e6:	807b      	strh	r3, [r7, #2]
 800b3e8:	4613      	mov	r3, r2
 800b3ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800b3ec:	787b      	ldrb	r3, [r7, #1]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d003      	beq.n	800b3fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b3f2:	887a      	ldrh	r2, [r7, #2]
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800b3f8:	e003      	b.n	800b402 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800b3fa:	887b      	ldrh	r3, [r7, #2]
 800b3fc:	041a      	lsls	r2, r3, #16
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	611a      	str	r2, [r3, #16]
}
 800b402:	bf00      	nop
 800b404:	370c      	adds	r7, #12
 800b406:	46bd      	mov	sp, r7
 800b408:	bc80      	pop	{r7}
 800b40a:	4770      	bx	lr

0800b40c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b40c:	b580      	push	{r7, lr}
 800b40e:	b084      	sub	sp, #16
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d101      	bne.n	800b41e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b41a:	2301      	movs	r3, #1
 800b41c:	e12b      	b.n	800b676 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b424:	b2db      	uxtb	r3, r3
 800b426:	2b00      	cmp	r3, #0
 800b428:	d106      	bne.n	800b438 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	2200      	movs	r2, #0
 800b42e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800b432:	6878      	ldr	r0, [r7, #4]
 800b434:	f7fe fdac 	bl	8009f90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	2224      	movs	r2, #36	@ 0x24
 800b43c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	681a      	ldr	r2, [r3, #0]
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	f022 0201 	bic.w	r2, r2, #1
 800b44e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	681a      	ldr	r2, [r3, #0]
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b45e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	681a      	ldr	r2, [r3, #0]
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800b46e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800b470:	f000 fcda 	bl	800be28 <HAL_RCC_GetPCLK1Freq>
 800b474:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	685b      	ldr	r3, [r3, #4]
 800b47a:	4a81      	ldr	r2, [pc, #516]	@ (800b680 <HAL_I2C_Init+0x274>)
 800b47c:	4293      	cmp	r3, r2
 800b47e:	d807      	bhi.n	800b490 <HAL_I2C_Init+0x84>
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	4a80      	ldr	r2, [pc, #512]	@ (800b684 <HAL_I2C_Init+0x278>)
 800b484:	4293      	cmp	r3, r2
 800b486:	bf94      	ite	ls
 800b488:	2301      	movls	r3, #1
 800b48a:	2300      	movhi	r3, #0
 800b48c:	b2db      	uxtb	r3, r3
 800b48e:	e006      	b.n	800b49e <HAL_I2C_Init+0x92>
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	4a7d      	ldr	r2, [pc, #500]	@ (800b688 <HAL_I2C_Init+0x27c>)
 800b494:	4293      	cmp	r3, r2
 800b496:	bf94      	ite	ls
 800b498:	2301      	movls	r3, #1
 800b49a:	2300      	movhi	r3, #0
 800b49c:	b2db      	uxtb	r3, r3
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d001      	beq.n	800b4a6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800b4a2:	2301      	movs	r3, #1
 800b4a4:	e0e7      	b.n	800b676 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	4a78      	ldr	r2, [pc, #480]	@ (800b68c <HAL_I2C_Init+0x280>)
 800b4aa:	fba2 2303 	umull	r2, r3, r2, r3
 800b4ae:	0c9b      	lsrs	r3, r3, #18
 800b4b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	685b      	ldr	r3, [r3, #4]
 800b4b8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	68ba      	ldr	r2, [r7, #8]
 800b4c2:	430a      	orrs	r2, r1
 800b4c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	6a1b      	ldr	r3, [r3, #32]
 800b4cc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	685b      	ldr	r3, [r3, #4]
 800b4d4:	4a6a      	ldr	r2, [pc, #424]	@ (800b680 <HAL_I2C_Init+0x274>)
 800b4d6:	4293      	cmp	r3, r2
 800b4d8:	d802      	bhi.n	800b4e0 <HAL_I2C_Init+0xd4>
 800b4da:	68bb      	ldr	r3, [r7, #8]
 800b4dc:	3301      	adds	r3, #1
 800b4de:	e009      	b.n	800b4f4 <HAL_I2C_Init+0xe8>
 800b4e0:	68bb      	ldr	r3, [r7, #8]
 800b4e2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800b4e6:	fb02 f303 	mul.w	r3, r2, r3
 800b4ea:	4a69      	ldr	r2, [pc, #420]	@ (800b690 <HAL_I2C_Init+0x284>)
 800b4ec:	fba2 2303 	umull	r2, r3, r2, r3
 800b4f0:	099b      	lsrs	r3, r3, #6
 800b4f2:	3301      	adds	r3, #1
 800b4f4:	687a      	ldr	r2, [r7, #4]
 800b4f6:	6812      	ldr	r2, [r2, #0]
 800b4f8:	430b      	orrs	r3, r1
 800b4fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	69db      	ldr	r3, [r3, #28]
 800b502:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800b506:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	685b      	ldr	r3, [r3, #4]
 800b50e:	495c      	ldr	r1, [pc, #368]	@ (800b680 <HAL_I2C_Init+0x274>)
 800b510:	428b      	cmp	r3, r1
 800b512:	d819      	bhi.n	800b548 <HAL_I2C_Init+0x13c>
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	1e59      	subs	r1, r3, #1
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	685b      	ldr	r3, [r3, #4]
 800b51c:	005b      	lsls	r3, r3, #1
 800b51e:	fbb1 f3f3 	udiv	r3, r1, r3
 800b522:	1c59      	adds	r1, r3, #1
 800b524:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800b528:	400b      	ands	r3, r1
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d00a      	beq.n	800b544 <HAL_I2C_Init+0x138>
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	1e59      	subs	r1, r3, #1
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	685b      	ldr	r3, [r3, #4]
 800b536:	005b      	lsls	r3, r3, #1
 800b538:	fbb1 f3f3 	udiv	r3, r1, r3
 800b53c:	3301      	adds	r3, #1
 800b53e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b542:	e051      	b.n	800b5e8 <HAL_I2C_Init+0x1dc>
 800b544:	2304      	movs	r3, #4
 800b546:	e04f      	b.n	800b5e8 <HAL_I2C_Init+0x1dc>
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	689b      	ldr	r3, [r3, #8]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d111      	bne.n	800b574 <HAL_I2C_Init+0x168>
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	1e58      	subs	r0, r3, #1
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	6859      	ldr	r1, [r3, #4]
 800b558:	460b      	mov	r3, r1
 800b55a:	005b      	lsls	r3, r3, #1
 800b55c:	440b      	add	r3, r1
 800b55e:	fbb0 f3f3 	udiv	r3, r0, r3
 800b562:	3301      	adds	r3, #1
 800b564:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b568:	2b00      	cmp	r3, #0
 800b56a:	bf0c      	ite	eq
 800b56c:	2301      	moveq	r3, #1
 800b56e:	2300      	movne	r3, #0
 800b570:	b2db      	uxtb	r3, r3
 800b572:	e012      	b.n	800b59a <HAL_I2C_Init+0x18e>
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	1e58      	subs	r0, r3, #1
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	6859      	ldr	r1, [r3, #4]
 800b57c:	460b      	mov	r3, r1
 800b57e:	009b      	lsls	r3, r3, #2
 800b580:	440b      	add	r3, r1
 800b582:	0099      	lsls	r1, r3, #2
 800b584:	440b      	add	r3, r1
 800b586:	fbb0 f3f3 	udiv	r3, r0, r3
 800b58a:	3301      	adds	r3, #1
 800b58c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b590:	2b00      	cmp	r3, #0
 800b592:	bf0c      	ite	eq
 800b594:	2301      	moveq	r3, #1
 800b596:	2300      	movne	r3, #0
 800b598:	b2db      	uxtb	r3, r3
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d001      	beq.n	800b5a2 <HAL_I2C_Init+0x196>
 800b59e:	2301      	movs	r3, #1
 800b5a0:	e022      	b.n	800b5e8 <HAL_I2C_Init+0x1dc>
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	689b      	ldr	r3, [r3, #8]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d10e      	bne.n	800b5c8 <HAL_I2C_Init+0x1bc>
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	1e58      	subs	r0, r3, #1
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	6859      	ldr	r1, [r3, #4]
 800b5b2:	460b      	mov	r3, r1
 800b5b4:	005b      	lsls	r3, r3, #1
 800b5b6:	440b      	add	r3, r1
 800b5b8:	fbb0 f3f3 	udiv	r3, r0, r3
 800b5bc:	3301      	adds	r3, #1
 800b5be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b5c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b5c6:	e00f      	b.n	800b5e8 <HAL_I2C_Init+0x1dc>
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	1e58      	subs	r0, r3, #1
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	6859      	ldr	r1, [r3, #4]
 800b5d0:	460b      	mov	r3, r1
 800b5d2:	009b      	lsls	r3, r3, #2
 800b5d4:	440b      	add	r3, r1
 800b5d6:	0099      	lsls	r1, r3, #2
 800b5d8:	440b      	add	r3, r1
 800b5da:	fbb0 f3f3 	udiv	r3, r0, r3
 800b5de:	3301      	adds	r3, #1
 800b5e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b5e4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b5e8:	6879      	ldr	r1, [r7, #4]
 800b5ea:	6809      	ldr	r1, [r1, #0]
 800b5ec:	4313      	orrs	r3, r2
 800b5ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	69da      	ldr	r2, [r3, #28]
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	6a1b      	ldr	r3, [r3, #32]
 800b602:	431a      	orrs	r2, r3
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	430a      	orrs	r2, r1
 800b60a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	689b      	ldr	r3, [r3, #8]
 800b612:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800b616:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800b61a:	687a      	ldr	r2, [r7, #4]
 800b61c:	6911      	ldr	r1, [r2, #16]
 800b61e:	687a      	ldr	r2, [r7, #4]
 800b620:	68d2      	ldr	r2, [r2, #12]
 800b622:	4311      	orrs	r1, r2
 800b624:	687a      	ldr	r2, [r7, #4]
 800b626:	6812      	ldr	r2, [r2, #0]
 800b628:	430b      	orrs	r3, r1
 800b62a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	68db      	ldr	r3, [r3, #12]
 800b632:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	695a      	ldr	r2, [r3, #20]
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	699b      	ldr	r3, [r3, #24]
 800b63e:	431a      	orrs	r2, r3
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	430a      	orrs	r2, r1
 800b646:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	681a      	ldr	r2, [r3, #0]
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	f042 0201 	orr.w	r2, r2, #1
 800b656:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	2200      	movs	r2, #0
 800b65c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	2220      	movs	r2, #32
 800b662:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	2200      	movs	r2, #0
 800b66a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	2200      	movs	r2, #0
 800b670:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800b674:	2300      	movs	r3, #0
}
 800b676:	4618      	mov	r0, r3
 800b678:	3710      	adds	r7, #16
 800b67a:	46bd      	mov	sp, r7
 800b67c:	bd80      	pop	{r7, pc}
 800b67e:	bf00      	nop
 800b680:	000186a0 	.word	0x000186a0
 800b684:	001e847f 	.word	0x001e847f
 800b688:	003d08ff 	.word	0x003d08ff
 800b68c:	431bde83 	.word	0x431bde83
 800b690:	10624dd3 	.word	0x10624dd3

0800b694 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b694:	b580      	push	{r7, lr}
 800b696:	b086      	sub	sp, #24
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d101      	bne.n	800b6a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b6a2:	2301      	movs	r3, #1
 800b6a4:	e272      	b.n	800bb8c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	f003 0301 	and.w	r3, r3, #1
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	f000 8087 	beq.w	800b7c2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800b6b4:	4b92      	ldr	r3, [pc, #584]	@ (800b900 <HAL_RCC_OscConfig+0x26c>)
 800b6b6:	685b      	ldr	r3, [r3, #4]
 800b6b8:	f003 030c 	and.w	r3, r3, #12
 800b6bc:	2b04      	cmp	r3, #4
 800b6be:	d00c      	beq.n	800b6da <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800b6c0:	4b8f      	ldr	r3, [pc, #572]	@ (800b900 <HAL_RCC_OscConfig+0x26c>)
 800b6c2:	685b      	ldr	r3, [r3, #4]
 800b6c4:	f003 030c 	and.w	r3, r3, #12
 800b6c8:	2b08      	cmp	r3, #8
 800b6ca:	d112      	bne.n	800b6f2 <HAL_RCC_OscConfig+0x5e>
 800b6cc:	4b8c      	ldr	r3, [pc, #560]	@ (800b900 <HAL_RCC_OscConfig+0x26c>)
 800b6ce:	685b      	ldr	r3, [r3, #4]
 800b6d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b6d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b6d8:	d10b      	bne.n	800b6f2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b6da:	4b89      	ldr	r3, [pc, #548]	@ (800b900 <HAL_RCC_OscConfig+0x26c>)
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d06c      	beq.n	800b7c0 <HAL_RCC_OscConfig+0x12c>
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	685b      	ldr	r3, [r3, #4]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d168      	bne.n	800b7c0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800b6ee:	2301      	movs	r3, #1
 800b6f0:	e24c      	b.n	800bb8c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	685b      	ldr	r3, [r3, #4]
 800b6f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b6fa:	d106      	bne.n	800b70a <HAL_RCC_OscConfig+0x76>
 800b6fc:	4b80      	ldr	r3, [pc, #512]	@ (800b900 <HAL_RCC_OscConfig+0x26c>)
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	4a7f      	ldr	r2, [pc, #508]	@ (800b900 <HAL_RCC_OscConfig+0x26c>)
 800b702:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b706:	6013      	str	r3, [r2, #0]
 800b708:	e02e      	b.n	800b768 <HAL_RCC_OscConfig+0xd4>
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	685b      	ldr	r3, [r3, #4]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d10c      	bne.n	800b72c <HAL_RCC_OscConfig+0x98>
 800b712:	4b7b      	ldr	r3, [pc, #492]	@ (800b900 <HAL_RCC_OscConfig+0x26c>)
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	4a7a      	ldr	r2, [pc, #488]	@ (800b900 <HAL_RCC_OscConfig+0x26c>)
 800b718:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b71c:	6013      	str	r3, [r2, #0]
 800b71e:	4b78      	ldr	r3, [pc, #480]	@ (800b900 <HAL_RCC_OscConfig+0x26c>)
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	4a77      	ldr	r2, [pc, #476]	@ (800b900 <HAL_RCC_OscConfig+0x26c>)
 800b724:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b728:	6013      	str	r3, [r2, #0]
 800b72a:	e01d      	b.n	800b768 <HAL_RCC_OscConfig+0xd4>
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	685b      	ldr	r3, [r3, #4]
 800b730:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b734:	d10c      	bne.n	800b750 <HAL_RCC_OscConfig+0xbc>
 800b736:	4b72      	ldr	r3, [pc, #456]	@ (800b900 <HAL_RCC_OscConfig+0x26c>)
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	4a71      	ldr	r2, [pc, #452]	@ (800b900 <HAL_RCC_OscConfig+0x26c>)
 800b73c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b740:	6013      	str	r3, [r2, #0]
 800b742:	4b6f      	ldr	r3, [pc, #444]	@ (800b900 <HAL_RCC_OscConfig+0x26c>)
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	4a6e      	ldr	r2, [pc, #440]	@ (800b900 <HAL_RCC_OscConfig+0x26c>)
 800b748:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b74c:	6013      	str	r3, [r2, #0]
 800b74e:	e00b      	b.n	800b768 <HAL_RCC_OscConfig+0xd4>
 800b750:	4b6b      	ldr	r3, [pc, #428]	@ (800b900 <HAL_RCC_OscConfig+0x26c>)
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	4a6a      	ldr	r2, [pc, #424]	@ (800b900 <HAL_RCC_OscConfig+0x26c>)
 800b756:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b75a:	6013      	str	r3, [r2, #0]
 800b75c:	4b68      	ldr	r3, [pc, #416]	@ (800b900 <HAL_RCC_OscConfig+0x26c>)
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	4a67      	ldr	r2, [pc, #412]	@ (800b900 <HAL_RCC_OscConfig+0x26c>)
 800b762:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b766:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	685b      	ldr	r3, [r3, #4]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d013      	beq.n	800b798 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b770:	f7fe ff04 	bl	800a57c <HAL_GetTick>
 800b774:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b776:	e008      	b.n	800b78a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b778:	f7fe ff00 	bl	800a57c <HAL_GetTick>
 800b77c:	4602      	mov	r2, r0
 800b77e:	693b      	ldr	r3, [r7, #16]
 800b780:	1ad3      	subs	r3, r2, r3
 800b782:	2b64      	cmp	r3, #100	@ 0x64
 800b784:	d901      	bls.n	800b78a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800b786:	2303      	movs	r3, #3
 800b788:	e200      	b.n	800bb8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b78a:	4b5d      	ldr	r3, [pc, #372]	@ (800b900 <HAL_RCC_OscConfig+0x26c>)
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b792:	2b00      	cmp	r3, #0
 800b794:	d0f0      	beq.n	800b778 <HAL_RCC_OscConfig+0xe4>
 800b796:	e014      	b.n	800b7c2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b798:	f7fe fef0 	bl	800a57c <HAL_GetTick>
 800b79c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b79e:	e008      	b.n	800b7b2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b7a0:	f7fe feec 	bl	800a57c <HAL_GetTick>
 800b7a4:	4602      	mov	r2, r0
 800b7a6:	693b      	ldr	r3, [r7, #16]
 800b7a8:	1ad3      	subs	r3, r2, r3
 800b7aa:	2b64      	cmp	r3, #100	@ 0x64
 800b7ac:	d901      	bls.n	800b7b2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800b7ae:	2303      	movs	r3, #3
 800b7b0:	e1ec      	b.n	800bb8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b7b2:	4b53      	ldr	r3, [pc, #332]	@ (800b900 <HAL_RCC_OscConfig+0x26c>)
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d1f0      	bne.n	800b7a0 <HAL_RCC_OscConfig+0x10c>
 800b7be:	e000      	b.n	800b7c2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b7c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	f003 0302 	and.w	r3, r3, #2
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d063      	beq.n	800b896 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800b7ce:	4b4c      	ldr	r3, [pc, #304]	@ (800b900 <HAL_RCC_OscConfig+0x26c>)
 800b7d0:	685b      	ldr	r3, [r3, #4]
 800b7d2:	f003 030c 	and.w	r3, r3, #12
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d00b      	beq.n	800b7f2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800b7da:	4b49      	ldr	r3, [pc, #292]	@ (800b900 <HAL_RCC_OscConfig+0x26c>)
 800b7dc:	685b      	ldr	r3, [r3, #4]
 800b7de:	f003 030c 	and.w	r3, r3, #12
 800b7e2:	2b08      	cmp	r3, #8
 800b7e4:	d11c      	bne.n	800b820 <HAL_RCC_OscConfig+0x18c>
 800b7e6:	4b46      	ldr	r3, [pc, #280]	@ (800b900 <HAL_RCC_OscConfig+0x26c>)
 800b7e8:	685b      	ldr	r3, [r3, #4]
 800b7ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d116      	bne.n	800b820 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b7f2:	4b43      	ldr	r3, [pc, #268]	@ (800b900 <HAL_RCC_OscConfig+0x26c>)
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	f003 0302 	and.w	r3, r3, #2
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d005      	beq.n	800b80a <HAL_RCC_OscConfig+0x176>
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	691b      	ldr	r3, [r3, #16]
 800b802:	2b01      	cmp	r3, #1
 800b804:	d001      	beq.n	800b80a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800b806:	2301      	movs	r3, #1
 800b808:	e1c0      	b.n	800bb8c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b80a:	4b3d      	ldr	r3, [pc, #244]	@ (800b900 <HAL_RCC_OscConfig+0x26c>)
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	695b      	ldr	r3, [r3, #20]
 800b816:	00db      	lsls	r3, r3, #3
 800b818:	4939      	ldr	r1, [pc, #228]	@ (800b900 <HAL_RCC_OscConfig+0x26c>)
 800b81a:	4313      	orrs	r3, r2
 800b81c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b81e:	e03a      	b.n	800b896 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	691b      	ldr	r3, [r3, #16]
 800b824:	2b00      	cmp	r3, #0
 800b826:	d020      	beq.n	800b86a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b828:	4b36      	ldr	r3, [pc, #216]	@ (800b904 <HAL_RCC_OscConfig+0x270>)
 800b82a:	2201      	movs	r2, #1
 800b82c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b82e:	f7fe fea5 	bl	800a57c <HAL_GetTick>
 800b832:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b834:	e008      	b.n	800b848 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b836:	f7fe fea1 	bl	800a57c <HAL_GetTick>
 800b83a:	4602      	mov	r2, r0
 800b83c:	693b      	ldr	r3, [r7, #16]
 800b83e:	1ad3      	subs	r3, r2, r3
 800b840:	2b02      	cmp	r3, #2
 800b842:	d901      	bls.n	800b848 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800b844:	2303      	movs	r3, #3
 800b846:	e1a1      	b.n	800bb8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b848:	4b2d      	ldr	r3, [pc, #180]	@ (800b900 <HAL_RCC_OscConfig+0x26c>)
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	f003 0302 	and.w	r3, r3, #2
 800b850:	2b00      	cmp	r3, #0
 800b852:	d0f0      	beq.n	800b836 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b854:	4b2a      	ldr	r3, [pc, #168]	@ (800b900 <HAL_RCC_OscConfig+0x26c>)
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	695b      	ldr	r3, [r3, #20]
 800b860:	00db      	lsls	r3, r3, #3
 800b862:	4927      	ldr	r1, [pc, #156]	@ (800b900 <HAL_RCC_OscConfig+0x26c>)
 800b864:	4313      	orrs	r3, r2
 800b866:	600b      	str	r3, [r1, #0]
 800b868:	e015      	b.n	800b896 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b86a:	4b26      	ldr	r3, [pc, #152]	@ (800b904 <HAL_RCC_OscConfig+0x270>)
 800b86c:	2200      	movs	r2, #0
 800b86e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b870:	f7fe fe84 	bl	800a57c <HAL_GetTick>
 800b874:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b876:	e008      	b.n	800b88a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b878:	f7fe fe80 	bl	800a57c <HAL_GetTick>
 800b87c:	4602      	mov	r2, r0
 800b87e:	693b      	ldr	r3, [r7, #16]
 800b880:	1ad3      	subs	r3, r2, r3
 800b882:	2b02      	cmp	r3, #2
 800b884:	d901      	bls.n	800b88a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800b886:	2303      	movs	r3, #3
 800b888:	e180      	b.n	800bb8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b88a:	4b1d      	ldr	r3, [pc, #116]	@ (800b900 <HAL_RCC_OscConfig+0x26c>)
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	f003 0302 	and.w	r3, r3, #2
 800b892:	2b00      	cmp	r3, #0
 800b894:	d1f0      	bne.n	800b878 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	f003 0308 	and.w	r3, r3, #8
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d03a      	beq.n	800b918 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	699b      	ldr	r3, [r3, #24]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d019      	beq.n	800b8de <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b8aa:	4b17      	ldr	r3, [pc, #92]	@ (800b908 <HAL_RCC_OscConfig+0x274>)
 800b8ac:	2201      	movs	r2, #1
 800b8ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b8b0:	f7fe fe64 	bl	800a57c <HAL_GetTick>
 800b8b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b8b6:	e008      	b.n	800b8ca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b8b8:	f7fe fe60 	bl	800a57c <HAL_GetTick>
 800b8bc:	4602      	mov	r2, r0
 800b8be:	693b      	ldr	r3, [r7, #16]
 800b8c0:	1ad3      	subs	r3, r2, r3
 800b8c2:	2b02      	cmp	r3, #2
 800b8c4:	d901      	bls.n	800b8ca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800b8c6:	2303      	movs	r3, #3
 800b8c8:	e160      	b.n	800bb8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b8ca:	4b0d      	ldr	r3, [pc, #52]	@ (800b900 <HAL_RCC_OscConfig+0x26c>)
 800b8cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b8ce:	f003 0302 	and.w	r3, r3, #2
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d0f0      	beq.n	800b8b8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800b8d6:	2001      	movs	r0, #1
 800b8d8:	f000 face 	bl	800be78 <RCC_Delay>
 800b8dc:	e01c      	b.n	800b918 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b8de:	4b0a      	ldr	r3, [pc, #40]	@ (800b908 <HAL_RCC_OscConfig+0x274>)
 800b8e0:	2200      	movs	r2, #0
 800b8e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b8e4:	f7fe fe4a 	bl	800a57c <HAL_GetTick>
 800b8e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b8ea:	e00f      	b.n	800b90c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b8ec:	f7fe fe46 	bl	800a57c <HAL_GetTick>
 800b8f0:	4602      	mov	r2, r0
 800b8f2:	693b      	ldr	r3, [r7, #16]
 800b8f4:	1ad3      	subs	r3, r2, r3
 800b8f6:	2b02      	cmp	r3, #2
 800b8f8:	d908      	bls.n	800b90c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800b8fa:	2303      	movs	r3, #3
 800b8fc:	e146      	b.n	800bb8c <HAL_RCC_OscConfig+0x4f8>
 800b8fe:	bf00      	nop
 800b900:	40021000 	.word	0x40021000
 800b904:	42420000 	.word	0x42420000
 800b908:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b90c:	4b92      	ldr	r3, [pc, #584]	@ (800bb58 <HAL_RCC_OscConfig+0x4c4>)
 800b90e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b910:	f003 0302 	and.w	r3, r3, #2
 800b914:	2b00      	cmp	r3, #0
 800b916:	d1e9      	bne.n	800b8ec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	f003 0304 	and.w	r3, r3, #4
 800b920:	2b00      	cmp	r3, #0
 800b922:	f000 80a6 	beq.w	800ba72 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b926:	2300      	movs	r3, #0
 800b928:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b92a:	4b8b      	ldr	r3, [pc, #556]	@ (800bb58 <HAL_RCC_OscConfig+0x4c4>)
 800b92c:	69db      	ldr	r3, [r3, #28]
 800b92e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b932:	2b00      	cmp	r3, #0
 800b934:	d10d      	bne.n	800b952 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b936:	4b88      	ldr	r3, [pc, #544]	@ (800bb58 <HAL_RCC_OscConfig+0x4c4>)
 800b938:	69db      	ldr	r3, [r3, #28]
 800b93a:	4a87      	ldr	r2, [pc, #540]	@ (800bb58 <HAL_RCC_OscConfig+0x4c4>)
 800b93c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b940:	61d3      	str	r3, [r2, #28]
 800b942:	4b85      	ldr	r3, [pc, #532]	@ (800bb58 <HAL_RCC_OscConfig+0x4c4>)
 800b944:	69db      	ldr	r3, [r3, #28]
 800b946:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b94a:	60bb      	str	r3, [r7, #8]
 800b94c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b94e:	2301      	movs	r3, #1
 800b950:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b952:	4b82      	ldr	r3, [pc, #520]	@ (800bb5c <HAL_RCC_OscConfig+0x4c8>)
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d118      	bne.n	800b990 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b95e:	4b7f      	ldr	r3, [pc, #508]	@ (800bb5c <HAL_RCC_OscConfig+0x4c8>)
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	4a7e      	ldr	r2, [pc, #504]	@ (800bb5c <HAL_RCC_OscConfig+0x4c8>)
 800b964:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b968:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b96a:	f7fe fe07 	bl	800a57c <HAL_GetTick>
 800b96e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b970:	e008      	b.n	800b984 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b972:	f7fe fe03 	bl	800a57c <HAL_GetTick>
 800b976:	4602      	mov	r2, r0
 800b978:	693b      	ldr	r3, [r7, #16]
 800b97a:	1ad3      	subs	r3, r2, r3
 800b97c:	2b64      	cmp	r3, #100	@ 0x64
 800b97e:	d901      	bls.n	800b984 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800b980:	2303      	movs	r3, #3
 800b982:	e103      	b.n	800bb8c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b984:	4b75      	ldr	r3, [pc, #468]	@ (800bb5c <HAL_RCC_OscConfig+0x4c8>)
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d0f0      	beq.n	800b972 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	68db      	ldr	r3, [r3, #12]
 800b994:	2b01      	cmp	r3, #1
 800b996:	d106      	bne.n	800b9a6 <HAL_RCC_OscConfig+0x312>
 800b998:	4b6f      	ldr	r3, [pc, #444]	@ (800bb58 <HAL_RCC_OscConfig+0x4c4>)
 800b99a:	6a1b      	ldr	r3, [r3, #32]
 800b99c:	4a6e      	ldr	r2, [pc, #440]	@ (800bb58 <HAL_RCC_OscConfig+0x4c4>)
 800b99e:	f043 0301 	orr.w	r3, r3, #1
 800b9a2:	6213      	str	r3, [r2, #32]
 800b9a4:	e02d      	b.n	800ba02 <HAL_RCC_OscConfig+0x36e>
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	68db      	ldr	r3, [r3, #12]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d10c      	bne.n	800b9c8 <HAL_RCC_OscConfig+0x334>
 800b9ae:	4b6a      	ldr	r3, [pc, #424]	@ (800bb58 <HAL_RCC_OscConfig+0x4c4>)
 800b9b0:	6a1b      	ldr	r3, [r3, #32]
 800b9b2:	4a69      	ldr	r2, [pc, #420]	@ (800bb58 <HAL_RCC_OscConfig+0x4c4>)
 800b9b4:	f023 0301 	bic.w	r3, r3, #1
 800b9b8:	6213      	str	r3, [r2, #32]
 800b9ba:	4b67      	ldr	r3, [pc, #412]	@ (800bb58 <HAL_RCC_OscConfig+0x4c4>)
 800b9bc:	6a1b      	ldr	r3, [r3, #32]
 800b9be:	4a66      	ldr	r2, [pc, #408]	@ (800bb58 <HAL_RCC_OscConfig+0x4c4>)
 800b9c0:	f023 0304 	bic.w	r3, r3, #4
 800b9c4:	6213      	str	r3, [r2, #32]
 800b9c6:	e01c      	b.n	800ba02 <HAL_RCC_OscConfig+0x36e>
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	68db      	ldr	r3, [r3, #12]
 800b9cc:	2b05      	cmp	r3, #5
 800b9ce:	d10c      	bne.n	800b9ea <HAL_RCC_OscConfig+0x356>
 800b9d0:	4b61      	ldr	r3, [pc, #388]	@ (800bb58 <HAL_RCC_OscConfig+0x4c4>)
 800b9d2:	6a1b      	ldr	r3, [r3, #32]
 800b9d4:	4a60      	ldr	r2, [pc, #384]	@ (800bb58 <HAL_RCC_OscConfig+0x4c4>)
 800b9d6:	f043 0304 	orr.w	r3, r3, #4
 800b9da:	6213      	str	r3, [r2, #32]
 800b9dc:	4b5e      	ldr	r3, [pc, #376]	@ (800bb58 <HAL_RCC_OscConfig+0x4c4>)
 800b9de:	6a1b      	ldr	r3, [r3, #32]
 800b9e0:	4a5d      	ldr	r2, [pc, #372]	@ (800bb58 <HAL_RCC_OscConfig+0x4c4>)
 800b9e2:	f043 0301 	orr.w	r3, r3, #1
 800b9e6:	6213      	str	r3, [r2, #32]
 800b9e8:	e00b      	b.n	800ba02 <HAL_RCC_OscConfig+0x36e>
 800b9ea:	4b5b      	ldr	r3, [pc, #364]	@ (800bb58 <HAL_RCC_OscConfig+0x4c4>)
 800b9ec:	6a1b      	ldr	r3, [r3, #32]
 800b9ee:	4a5a      	ldr	r2, [pc, #360]	@ (800bb58 <HAL_RCC_OscConfig+0x4c4>)
 800b9f0:	f023 0301 	bic.w	r3, r3, #1
 800b9f4:	6213      	str	r3, [r2, #32]
 800b9f6:	4b58      	ldr	r3, [pc, #352]	@ (800bb58 <HAL_RCC_OscConfig+0x4c4>)
 800b9f8:	6a1b      	ldr	r3, [r3, #32]
 800b9fa:	4a57      	ldr	r2, [pc, #348]	@ (800bb58 <HAL_RCC_OscConfig+0x4c4>)
 800b9fc:	f023 0304 	bic.w	r3, r3, #4
 800ba00:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	68db      	ldr	r3, [r3, #12]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d015      	beq.n	800ba36 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ba0a:	f7fe fdb7 	bl	800a57c <HAL_GetTick>
 800ba0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ba10:	e00a      	b.n	800ba28 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ba12:	f7fe fdb3 	bl	800a57c <HAL_GetTick>
 800ba16:	4602      	mov	r2, r0
 800ba18:	693b      	ldr	r3, [r7, #16]
 800ba1a:	1ad3      	subs	r3, r2, r3
 800ba1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ba20:	4293      	cmp	r3, r2
 800ba22:	d901      	bls.n	800ba28 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800ba24:	2303      	movs	r3, #3
 800ba26:	e0b1      	b.n	800bb8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ba28:	4b4b      	ldr	r3, [pc, #300]	@ (800bb58 <HAL_RCC_OscConfig+0x4c4>)
 800ba2a:	6a1b      	ldr	r3, [r3, #32]
 800ba2c:	f003 0302 	and.w	r3, r3, #2
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d0ee      	beq.n	800ba12 <HAL_RCC_OscConfig+0x37e>
 800ba34:	e014      	b.n	800ba60 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ba36:	f7fe fda1 	bl	800a57c <HAL_GetTick>
 800ba3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ba3c:	e00a      	b.n	800ba54 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ba3e:	f7fe fd9d 	bl	800a57c <HAL_GetTick>
 800ba42:	4602      	mov	r2, r0
 800ba44:	693b      	ldr	r3, [r7, #16]
 800ba46:	1ad3      	subs	r3, r2, r3
 800ba48:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ba4c:	4293      	cmp	r3, r2
 800ba4e:	d901      	bls.n	800ba54 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800ba50:	2303      	movs	r3, #3
 800ba52:	e09b      	b.n	800bb8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ba54:	4b40      	ldr	r3, [pc, #256]	@ (800bb58 <HAL_RCC_OscConfig+0x4c4>)
 800ba56:	6a1b      	ldr	r3, [r3, #32]
 800ba58:	f003 0302 	and.w	r3, r3, #2
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d1ee      	bne.n	800ba3e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800ba60:	7dfb      	ldrb	r3, [r7, #23]
 800ba62:	2b01      	cmp	r3, #1
 800ba64:	d105      	bne.n	800ba72 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ba66:	4b3c      	ldr	r3, [pc, #240]	@ (800bb58 <HAL_RCC_OscConfig+0x4c4>)
 800ba68:	69db      	ldr	r3, [r3, #28]
 800ba6a:	4a3b      	ldr	r2, [pc, #236]	@ (800bb58 <HAL_RCC_OscConfig+0x4c4>)
 800ba6c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ba70:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	69db      	ldr	r3, [r3, #28]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	f000 8087 	beq.w	800bb8a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ba7c:	4b36      	ldr	r3, [pc, #216]	@ (800bb58 <HAL_RCC_OscConfig+0x4c4>)
 800ba7e:	685b      	ldr	r3, [r3, #4]
 800ba80:	f003 030c 	and.w	r3, r3, #12
 800ba84:	2b08      	cmp	r3, #8
 800ba86:	d061      	beq.n	800bb4c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	69db      	ldr	r3, [r3, #28]
 800ba8c:	2b02      	cmp	r3, #2
 800ba8e:	d146      	bne.n	800bb1e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ba90:	4b33      	ldr	r3, [pc, #204]	@ (800bb60 <HAL_RCC_OscConfig+0x4cc>)
 800ba92:	2200      	movs	r2, #0
 800ba94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ba96:	f7fe fd71 	bl	800a57c <HAL_GetTick>
 800ba9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ba9c:	e008      	b.n	800bab0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ba9e:	f7fe fd6d 	bl	800a57c <HAL_GetTick>
 800baa2:	4602      	mov	r2, r0
 800baa4:	693b      	ldr	r3, [r7, #16]
 800baa6:	1ad3      	subs	r3, r2, r3
 800baa8:	2b02      	cmp	r3, #2
 800baaa:	d901      	bls.n	800bab0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800baac:	2303      	movs	r3, #3
 800baae:	e06d      	b.n	800bb8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800bab0:	4b29      	ldr	r3, [pc, #164]	@ (800bb58 <HAL_RCC_OscConfig+0x4c4>)
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d1f0      	bne.n	800ba9e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	6a1b      	ldr	r3, [r3, #32]
 800bac0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bac4:	d108      	bne.n	800bad8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800bac6:	4b24      	ldr	r3, [pc, #144]	@ (800bb58 <HAL_RCC_OscConfig+0x4c4>)
 800bac8:	685b      	ldr	r3, [r3, #4]
 800baca:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	689b      	ldr	r3, [r3, #8]
 800bad2:	4921      	ldr	r1, [pc, #132]	@ (800bb58 <HAL_RCC_OscConfig+0x4c4>)
 800bad4:	4313      	orrs	r3, r2
 800bad6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800bad8:	4b1f      	ldr	r3, [pc, #124]	@ (800bb58 <HAL_RCC_OscConfig+0x4c4>)
 800bada:	685b      	ldr	r3, [r3, #4]
 800badc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	6a19      	ldr	r1, [r3, #32]
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bae8:	430b      	orrs	r3, r1
 800baea:	491b      	ldr	r1, [pc, #108]	@ (800bb58 <HAL_RCC_OscConfig+0x4c4>)
 800baec:	4313      	orrs	r3, r2
 800baee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800baf0:	4b1b      	ldr	r3, [pc, #108]	@ (800bb60 <HAL_RCC_OscConfig+0x4cc>)
 800baf2:	2201      	movs	r2, #1
 800baf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800baf6:	f7fe fd41 	bl	800a57c <HAL_GetTick>
 800bafa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800bafc:	e008      	b.n	800bb10 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bafe:	f7fe fd3d 	bl	800a57c <HAL_GetTick>
 800bb02:	4602      	mov	r2, r0
 800bb04:	693b      	ldr	r3, [r7, #16]
 800bb06:	1ad3      	subs	r3, r2, r3
 800bb08:	2b02      	cmp	r3, #2
 800bb0a:	d901      	bls.n	800bb10 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800bb0c:	2303      	movs	r3, #3
 800bb0e:	e03d      	b.n	800bb8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800bb10:	4b11      	ldr	r3, [pc, #68]	@ (800bb58 <HAL_RCC_OscConfig+0x4c4>)
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d0f0      	beq.n	800bafe <HAL_RCC_OscConfig+0x46a>
 800bb1c:	e035      	b.n	800bb8a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bb1e:	4b10      	ldr	r3, [pc, #64]	@ (800bb60 <HAL_RCC_OscConfig+0x4cc>)
 800bb20:	2200      	movs	r2, #0
 800bb22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bb24:	f7fe fd2a 	bl	800a57c <HAL_GetTick>
 800bb28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800bb2a:	e008      	b.n	800bb3e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bb2c:	f7fe fd26 	bl	800a57c <HAL_GetTick>
 800bb30:	4602      	mov	r2, r0
 800bb32:	693b      	ldr	r3, [r7, #16]
 800bb34:	1ad3      	subs	r3, r2, r3
 800bb36:	2b02      	cmp	r3, #2
 800bb38:	d901      	bls.n	800bb3e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800bb3a:	2303      	movs	r3, #3
 800bb3c:	e026      	b.n	800bb8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800bb3e:	4b06      	ldr	r3, [pc, #24]	@ (800bb58 <HAL_RCC_OscConfig+0x4c4>)
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d1f0      	bne.n	800bb2c <HAL_RCC_OscConfig+0x498>
 800bb4a:	e01e      	b.n	800bb8a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	69db      	ldr	r3, [r3, #28]
 800bb50:	2b01      	cmp	r3, #1
 800bb52:	d107      	bne.n	800bb64 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800bb54:	2301      	movs	r3, #1
 800bb56:	e019      	b.n	800bb8c <HAL_RCC_OscConfig+0x4f8>
 800bb58:	40021000 	.word	0x40021000
 800bb5c:	40007000 	.word	0x40007000
 800bb60:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800bb64:	4b0b      	ldr	r3, [pc, #44]	@ (800bb94 <HAL_RCC_OscConfig+0x500>)
 800bb66:	685b      	ldr	r3, [r3, #4]
 800bb68:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	6a1b      	ldr	r3, [r3, #32]
 800bb74:	429a      	cmp	r2, r3
 800bb76:	d106      	bne.n	800bb86 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bb82:	429a      	cmp	r2, r3
 800bb84:	d001      	beq.n	800bb8a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800bb86:	2301      	movs	r3, #1
 800bb88:	e000      	b.n	800bb8c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800bb8a:	2300      	movs	r3, #0
}
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	3718      	adds	r7, #24
 800bb90:	46bd      	mov	sp, r7
 800bb92:	bd80      	pop	{r7, pc}
 800bb94:	40021000 	.word	0x40021000

0800bb98 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b084      	sub	sp, #16
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
 800bba0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d101      	bne.n	800bbac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800bba8:	2301      	movs	r3, #1
 800bbaa:	e0d0      	b.n	800bd4e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800bbac:	4b6a      	ldr	r3, [pc, #424]	@ (800bd58 <HAL_RCC_ClockConfig+0x1c0>)
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	f003 0307 	and.w	r3, r3, #7
 800bbb4:	683a      	ldr	r2, [r7, #0]
 800bbb6:	429a      	cmp	r2, r3
 800bbb8:	d910      	bls.n	800bbdc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bbba:	4b67      	ldr	r3, [pc, #412]	@ (800bd58 <HAL_RCC_ClockConfig+0x1c0>)
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	f023 0207 	bic.w	r2, r3, #7
 800bbc2:	4965      	ldr	r1, [pc, #404]	@ (800bd58 <HAL_RCC_ClockConfig+0x1c0>)
 800bbc4:	683b      	ldr	r3, [r7, #0]
 800bbc6:	4313      	orrs	r3, r2
 800bbc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bbca:	4b63      	ldr	r3, [pc, #396]	@ (800bd58 <HAL_RCC_ClockConfig+0x1c0>)
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	f003 0307 	and.w	r3, r3, #7
 800bbd2:	683a      	ldr	r2, [r7, #0]
 800bbd4:	429a      	cmp	r2, r3
 800bbd6:	d001      	beq.n	800bbdc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800bbd8:	2301      	movs	r3, #1
 800bbda:	e0b8      	b.n	800bd4e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	f003 0302 	and.w	r3, r3, #2
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d020      	beq.n	800bc2a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	f003 0304 	and.w	r3, r3, #4
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d005      	beq.n	800bc00 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800bbf4:	4b59      	ldr	r3, [pc, #356]	@ (800bd5c <HAL_RCC_ClockConfig+0x1c4>)
 800bbf6:	685b      	ldr	r3, [r3, #4]
 800bbf8:	4a58      	ldr	r2, [pc, #352]	@ (800bd5c <HAL_RCC_ClockConfig+0x1c4>)
 800bbfa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800bbfe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	f003 0308 	and.w	r3, r3, #8
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d005      	beq.n	800bc18 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800bc0c:	4b53      	ldr	r3, [pc, #332]	@ (800bd5c <HAL_RCC_ClockConfig+0x1c4>)
 800bc0e:	685b      	ldr	r3, [r3, #4]
 800bc10:	4a52      	ldr	r2, [pc, #328]	@ (800bd5c <HAL_RCC_ClockConfig+0x1c4>)
 800bc12:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800bc16:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bc18:	4b50      	ldr	r3, [pc, #320]	@ (800bd5c <HAL_RCC_ClockConfig+0x1c4>)
 800bc1a:	685b      	ldr	r3, [r3, #4]
 800bc1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	689b      	ldr	r3, [r3, #8]
 800bc24:	494d      	ldr	r1, [pc, #308]	@ (800bd5c <HAL_RCC_ClockConfig+0x1c4>)
 800bc26:	4313      	orrs	r3, r2
 800bc28:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	f003 0301 	and.w	r3, r3, #1
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d040      	beq.n	800bcb8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	685b      	ldr	r3, [r3, #4]
 800bc3a:	2b01      	cmp	r3, #1
 800bc3c:	d107      	bne.n	800bc4e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bc3e:	4b47      	ldr	r3, [pc, #284]	@ (800bd5c <HAL_RCC_ClockConfig+0x1c4>)
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d115      	bne.n	800bc76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bc4a:	2301      	movs	r3, #1
 800bc4c:	e07f      	b.n	800bd4e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	685b      	ldr	r3, [r3, #4]
 800bc52:	2b02      	cmp	r3, #2
 800bc54:	d107      	bne.n	800bc66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bc56:	4b41      	ldr	r3, [pc, #260]	@ (800bd5c <HAL_RCC_ClockConfig+0x1c4>)
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d109      	bne.n	800bc76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bc62:	2301      	movs	r3, #1
 800bc64:	e073      	b.n	800bd4e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bc66:	4b3d      	ldr	r3, [pc, #244]	@ (800bd5c <HAL_RCC_ClockConfig+0x1c4>)
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	f003 0302 	and.w	r3, r3, #2
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d101      	bne.n	800bc76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bc72:	2301      	movs	r3, #1
 800bc74:	e06b      	b.n	800bd4e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800bc76:	4b39      	ldr	r3, [pc, #228]	@ (800bd5c <HAL_RCC_ClockConfig+0x1c4>)
 800bc78:	685b      	ldr	r3, [r3, #4]
 800bc7a:	f023 0203 	bic.w	r2, r3, #3
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	685b      	ldr	r3, [r3, #4]
 800bc82:	4936      	ldr	r1, [pc, #216]	@ (800bd5c <HAL_RCC_ClockConfig+0x1c4>)
 800bc84:	4313      	orrs	r3, r2
 800bc86:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800bc88:	f7fe fc78 	bl	800a57c <HAL_GetTick>
 800bc8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bc8e:	e00a      	b.n	800bca6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bc90:	f7fe fc74 	bl	800a57c <HAL_GetTick>
 800bc94:	4602      	mov	r2, r0
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	1ad3      	subs	r3, r2, r3
 800bc9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bc9e:	4293      	cmp	r3, r2
 800bca0:	d901      	bls.n	800bca6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800bca2:	2303      	movs	r3, #3
 800bca4:	e053      	b.n	800bd4e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bca6:	4b2d      	ldr	r3, [pc, #180]	@ (800bd5c <HAL_RCC_ClockConfig+0x1c4>)
 800bca8:	685b      	ldr	r3, [r3, #4]
 800bcaa:	f003 020c 	and.w	r2, r3, #12
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	685b      	ldr	r3, [r3, #4]
 800bcb2:	009b      	lsls	r3, r3, #2
 800bcb4:	429a      	cmp	r2, r3
 800bcb6:	d1eb      	bne.n	800bc90 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800bcb8:	4b27      	ldr	r3, [pc, #156]	@ (800bd58 <HAL_RCC_ClockConfig+0x1c0>)
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	f003 0307 	and.w	r3, r3, #7
 800bcc0:	683a      	ldr	r2, [r7, #0]
 800bcc2:	429a      	cmp	r2, r3
 800bcc4:	d210      	bcs.n	800bce8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bcc6:	4b24      	ldr	r3, [pc, #144]	@ (800bd58 <HAL_RCC_ClockConfig+0x1c0>)
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	f023 0207 	bic.w	r2, r3, #7
 800bcce:	4922      	ldr	r1, [pc, #136]	@ (800bd58 <HAL_RCC_ClockConfig+0x1c0>)
 800bcd0:	683b      	ldr	r3, [r7, #0]
 800bcd2:	4313      	orrs	r3, r2
 800bcd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bcd6:	4b20      	ldr	r3, [pc, #128]	@ (800bd58 <HAL_RCC_ClockConfig+0x1c0>)
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	f003 0307 	and.w	r3, r3, #7
 800bcde:	683a      	ldr	r2, [r7, #0]
 800bce0:	429a      	cmp	r2, r3
 800bce2:	d001      	beq.n	800bce8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800bce4:	2301      	movs	r3, #1
 800bce6:	e032      	b.n	800bd4e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	f003 0304 	and.w	r3, r3, #4
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d008      	beq.n	800bd06 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800bcf4:	4b19      	ldr	r3, [pc, #100]	@ (800bd5c <HAL_RCC_ClockConfig+0x1c4>)
 800bcf6:	685b      	ldr	r3, [r3, #4]
 800bcf8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	68db      	ldr	r3, [r3, #12]
 800bd00:	4916      	ldr	r1, [pc, #88]	@ (800bd5c <HAL_RCC_ClockConfig+0x1c4>)
 800bd02:	4313      	orrs	r3, r2
 800bd04:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	f003 0308 	and.w	r3, r3, #8
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d009      	beq.n	800bd26 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800bd12:	4b12      	ldr	r3, [pc, #72]	@ (800bd5c <HAL_RCC_ClockConfig+0x1c4>)
 800bd14:	685b      	ldr	r3, [r3, #4]
 800bd16:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	691b      	ldr	r3, [r3, #16]
 800bd1e:	00db      	lsls	r3, r3, #3
 800bd20:	490e      	ldr	r1, [pc, #56]	@ (800bd5c <HAL_RCC_ClockConfig+0x1c4>)
 800bd22:	4313      	orrs	r3, r2
 800bd24:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800bd26:	f000 f821 	bl	800bd6c <HAL_RCC_GetSysClockFreq>
 800bd2a:	4602      	mov	r2, r0
 800bd2c:	4b0b      	ldr	r3, [pc, #44]	@ (800bd5c <HAL_RCC_ClockConfig+0x1c4>)
 800bd2e:	685b      	ldr	r3, [r3, #4]
 800bd30:	091b      	lsrs	r3, r3, #4
 800bd32:	f003 030f 	and.w	r3, r3, #15
 800bd36:	490a      	ldr	r1, [pc, #40]	@ (800bd60 <HAL_RCC_ClockConfig+0x1c8>)
 800bd38:	5ccb      	ldrb	r3, [r1, r3]
 800bd3a:	fa22 f303 	lsr.w	r3, r2, r3
 800bd3e:	4a09      	ldr	r2, [pc, #36]	@ (800bd64 <HAL_RCC_ClockConfig+0x1cc>)
 800bd40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800bd42:	4b09      	ldr	r3, [pc, #36]	@ (800bd68 <HAL_RCC_ClockConfig+0x1d0>)
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	4618      	mov	r0, r3
 800bd48:	f7fe fbd6 	bl	800a4f8 <HAL_InitTick>

  return HAL_OK;
 800bd4c:	2300      	movs	r3, #0
}
 800bd4e:	4618      	mov	r0, r3
 800bd50:	3710      	adds	r7, #16
 800bd52:	46bd      	mov	sp, r7
 800bd54:	bd80      	pop	{r7, pc}
 800bd56:	bf00      	nop
 800bd58:	40022000 	.word	0x40022000
 800bd5c:	40021000 	.word	0x40021000
 800bd60:	08010c84 	.word	0x08010c84
 800bd64:	20000028 	.word	0x20000028
 800bd68:	2000002c 	.word	0x2000002c

0800bd6c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800bd6c:	b480      	push	{r7}
 800bd6e:	b087      	sub	sp, #28
 800bd70:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800bd72:	2300      	movs	r3, #0
 800bd74:	60fb      	str	r3, [r7, #12]
 800bd76:	2300      	movs	r3, #0
 800bd78:	60bb      	str	r3, [r7, #8]
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	617b      	str	r3, [r7, #20]
 800bd7e:	2300      	movs	r3, #0
 800bd80:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800bd82:	2300      	movs	r3, #0
 800bd84:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800bd86:	4b1e      	ldr	r3, [pc, #120]	@ (800be00 <HAL_RCC_GetSysClockFreq+0x94>)
 800bd88:	685b      	ldr	r3, [r3, #4]
 800bd8a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	f003 030c 	and.w	r3, r3, #12
 800bd92:	2b04      	cmp	r3, #4
 800bd94:	d002      	beq.n	800bd9c <HAL_RCC_GetSysClockFreq+0x30>
 800bd96:	2b08      	cmp	r3, #8
 800bd98:	d003      	beq.n	800bda2 <HAL_RCC_GetSysClockFreq+0x36>
 800bd9a:	e027      	b.n	800bdec <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800bd9c:	4b19      	ldr	r3, [pc, #100]	@ (800be04 <HAL_RCC_GetSysClockFreq+0x98>)
 800bd9e:	613b      	str	r3, [r7, #16]
      break;
 800bda0:	e027      	b.n	800bdf2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	0c9b      	lsrs	r3, r3, #18
 800bda6:	f003 030f 	and.w	r3, r3, #15
 800bdaa:	4a17      	ldr	r2, [pc, #92]	@ (800be08 <HAL_RCC_GetSysClockFreq+0x9c>)
 800bdac:	5cd3      	ldrb	r3, [r2, r3]
 800bdae:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d010      	beq.n	800bddc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800bdba:	4b11      	ldr	r3, [pc, #68]	@ (800be00 <HAL_RCC_GetSysClockFreq+0x94>)
 800bdbc:	685b      	ldr	r3, [r3, #4]
 800bdbe:	0c5b      	lsrs	r3, r3, #17
 800bdc0:	f003 0301 	and.w	r3, r3, #1
 800bdc4:	4a11      	ldr	r2, [pc, #68]	@ (800be0c <HAL_RCC_GetSysClockFreq+0xa0>)
 800bdc6:	5cd3      	ldrb	r3, [r2, r3]
 800bdc8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	4a0d      	ldr	r2, [pc, #52]	@ (800be04 <HAL_RCC_GetSysClockFreq+0x98>)
 800bdce:	fb03 f202 	mul.w	r2, r3, r2
 800bdd2:	68bb      	ldr	r3, [r7, #8]
 800bdd4:	fbb2 f3f3 	udiv	r3, r2, r3
 800bdd8:	617b      	str	r3, [r7, #20]
 800bdda:	e004      	b.n	800bde6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	4a0c      	ldr	r2, [pc, #48]	@ (800be10 <HAL_RCC_GetSysClockFreq+0xa4>)
 800bde0:	fb02 f303 	mul.w	r3, r2, r3
 800bde4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800bde6:	697b      	ldr	r3, [r7, #20]
 800bde8:	613b      	str	r3, [r7, #16]
      break;
 800bdea:	e002      	b.n	800bdf2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800bdec:	4b05      	ldr	r3, [pc, #20]	@ (800be04 <HAL_RCC_GetSysClockFreq+0x98>)
 800bdee:	613b      	str	r3, [r7, #16]
      break;
 800bdf0:	bf00      	nop
    }
  }
  return sysclockfreq;
 800bdf2:	693b      	ldr	r3, [r7, #16]
}
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	371c      	adds	r7, #28
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	bc80      	pop	{r7}
 800bdfc:	4770      	bx	lr
 800bdfe:	bf00      	nop
 800be00:	40021000 	.word	0x40021000
 800be04:	007a1200 	.word	0x007a1200
 800be08:	08010c9c 	.word	0x08010c9c
 800be0c:	08010cac 	.word	0x08010cac
 800be10:	003d0900 	.word	0x003d0900

0800be14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800be14:	b480      	push	{r7}
 800be16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800be18:	4b02      	ldr	r3, [pc, #8]	@ (800be24 <HAL_RCC_GetHCLKFreq+0x10>)
 800be1a:	681b      	ldr	r3, [r3, #0]
}
 800be1c:	4618      	mov	r0, r3
 800be1e:	46bd      	mov	sp, r7
 800be20:	bc80      	pop	{r7}
 800be22:	4770      	bx	lr
 800be24:	20000028 	.word	0x20000028

0800be28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800be2c:	f7ff fff2 	bl	800be14 <HAL_RCC_GetHCLKFreq>
 800be30:	4602      	mov	r2, r0
 800be32:	4b05      	ldr	r3, [pc, #20]	@ (800be48 <HAL_RCC_GetPCLK1Freq+0x20>)
 800be34:	685b      	ldr	r3, [r3, #4]
 800be36:	0a1b      	lsrs	r3, r3, #8
 800be38:	f003 0307 	and.w	r3, r3, #7
 800be3c:	4903      	ldr	r1, [pc, #12]	@ (800be4c <HAL_RCC_GetPCLK1Freq+0x24>)
 800be3e:	5ccb      	ldrb	r3, [r1, r3]
 800be40:	fa22 f303 	lsr.w	r3, r2, r3
}
 800be44:	4618      	mov	r0, r3
 800be46:	bd80      	pop	{r7, pc}
 800be48:	40021000 	.word	0x40021000
 800be4c:	08010c94 	.word	0x08010c94

0800be50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800be50:	b580      	push	{r7, lr}
 800be52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800be54:	f7ff ffde 	bl	800be14 <HAL_RCC_GetHCLKFreq>
 800be58:	4602      	mov	r2, r0
 800be5a:	4b05      	ldr	r3, [pc, #20]	@ (800be70 <HAL_RCC_GetPCLK2Freq+0x20>)
 800be5c:	685b      	ldr	r3, [r3, #4]
 800be5e:	0adb      	lsrs	r3, r3, #11
 800be60:	f003 0307 	and.w	r3, r3, #7
 800be64:	4903      	ldr	r1, [pc, #12]	@ (800be74 <HAL_RCC_GetPCLK2Freq+0x24>)
 800be66:	5ccb      	ldrb	r3, [r1, r3]
 800be68:	fa22 f303 	lsr.w	r3, r2, r3
}
 800be6c:	4618      	mov	r0, r3
 800be6e:	bd80      	pop	{r7, pc}
 800be70:	40021000 	.word	0x40021000
 800be74:	08010c94 	.word	0x08010c94

0800be78 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800be78:	b480      	push	{r7}
 800be7a:	b085      	sub	sp, #20
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800be80:	4b0a      	ldr	r3, [pc, #40]	@ (800beac <RCC_Delay+0x34>)
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	4a0a      	ldr	r2, [pc, #40]	@ (800beb0 <RCC_Delay+0x38>)
 800be86:	fba2 2303 	umull	r2, r3, r2, r3
 800be8a:	0a5b      	lsrs	r3, r3, #9
 800be8c:	687a      	ldr	r2, [r7, #4]
 800be8e:	fb02 f303 	mul.w	r3, r2, r3
 800be92:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800be94:	bf00      	nop
  }
  while (Delay --);
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	1e5a      	subs	r2, r3, #1
 800be9a:	60fa      	str	r2, [r7, #12]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d1f9      	bne.n	800be94 <RCC_Delay+0x1c>
}
 800bea0:	bf00      	nop
 800bea2:	bf00      	nop
 800bea4:	3714      	adds	r7, #20
 800bea6:	46bd      	mov	sp, r7
 800bea8:	bc80      	pop	{r7}
 800beaa:	4770      	bx	lr
 800beac:	20000028 	.word	0x20000028
 800beb0:	10624dd3 	.word	0x10624dd3

0800beb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800beb4:	b580      	push	{r7, lr}
 800beb6:	b082      	sub	sp, #8
 800beb8:	af00      	add	r7, sp, #0
 800beba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d101      	bne.n	800bec6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bec2:	2301      	movs	r3, #1
 800bec4:	e041      	b.n	800bf4a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800becc:	b2db      	uxtb	r3, r3
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d106      	bne.n	800bee0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	2200      	movs	r2, #0
 800bed6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800beda:	6878      	ldr	r0, [r7, #4]
 800bedc:	f7fe f8a8 	bl	800a030 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	2202      	movs	r2, #2
 800bee4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	681a      	ldr	r2, [r3, #0]
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	3304      	adds	r3, #4
 800bef0:	4619      	mov	r1, r3
 800bef2:	4610      	mov	r0, r2
 800bef4:	f000 fe04 	bl	800cb00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	2201      	movs	r2, #1
 800befc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	2201      	movs	r2, #1
 800bf04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	2201      	movs	r2, #1
 800bf0c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	2201      	movs	r2, #1
 800bf14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	2201      	movs	r2, #1
 800bf1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	2201      	movs	r2, #1
 800bf24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	2201      	movs	r2, #1
 800bf2c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	2201      	movs	r2, #1
 800bf34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	2201      	movs	r2, #1
 800bf3c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	2201      	movs	r2, #1
 800bf44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800bf48:	2300      	movs	r3, #0
}
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	3708      	adds	r7, #8
 800bf4e:	46bd      	mov	sp, r7
 800bf50:	bd80      	pop	{r7, pc}

0800bf52 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800bf52:	b580      	push	{r7, lr}
 800bf54:	b082      	sub	sp, #8
 800bf56:	af00      	add	r7, sp, #0
 800bf58:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d101      	bne.n	800bf64 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800bf60:	2301      	movs	r3, #1
 800bf62:	e041      	b.n	800bfe8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bf6a:	b2db      	uxtb	r3, r3
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d106      	bne.n	800bf7e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	2200      	movs	r2, #0
 800bf74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800bf78:	6878      	ldr	r0, [r7, #4]
 800bf7a:	f000 f839 	bl	800bff0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	2202      	movs	r2, #2
 800bf82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	681a      	ldr	r2, [r3, #0]
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	3304      	adds	r3, #4
 800bf8e:	4619      	mov	r1, r3
 800bf90:	4610      	mov	r0, r2
 800bf92:	f000 fdb5 	bl	800cb00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	2201      	movs	r2, #1
 800bf9a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	2201      	movs	r2, #1
 800bfa2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	2201      	movs	r2, #1
 800bfaa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	2201      	movs	r2, #1
 800bfb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	2201      	movs	r2, #1
 800bfba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	2201      	movs	r2, #1
 800bfc2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	2201      	movs	r2, #1
 800bfca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	2201      	movs	r2, #1
 800bfd2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	2201      	movs	r2, #1
 800bfda:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	2201      	movs	r2, #1
 800bfe2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800bfe6:	2300      	movs	r3, #0
}
 800bfe8:	4618      	mov	r0, r3
 800bfea:	3708      	adds	r7, #8
 800bfec:	46bd      	mov	sp, r7
 800bfee:	bd80      	pop	{r7, pc}

0800bff0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800bff0:	b480      	push	{r7}
 800bff2:	b083      	sub	sp, #12
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800bff8:	bf00      	nop
 800bffa:	370c      	adds	r7, #12
 800bffc:	46bd      	mov	sp, r7
 800bffe:	bc80      	pop	{r7}
 800c000:	4770      	bx	lr
	...

0800c004 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c004:	b580      	push	{r7, lr}
 800c006:	b084      	sub	sp, #16
 800c008:	af00      	add	r7, sp, #0
 800c00a:	6078      	str	r0, [r7, #4]
 800c00c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c00e:	683b      	ldr	r3, [r7, #0]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d109      	bne.n	800c028 <HAL_TIM_PWM_Start+0x24>
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800c01a:	b2db      	uxtb	r3, r3
 800c01c:	2b01      	cmp	r3, #1
 800c01e:	bf14      	ite	ne
 800c020:	2301      	movne	r3, #1
 800c022:	2300      	moveq	r3, #0
 800c024:	b2db      	uxtb	r3, r3
 800c026:	e022      	b.n	800c06e <HAL_TIM_PWM_Start+0x6a>
 800c028:	683b      	ldr	r3, [r7, #0]
 800c02a:	2b04      	cmp	r3, #4
 800c02c:	d109      	bne.n	800c042 <HAL_TIM_PWM_Start+0x3e>
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800c034:	b2db      	uxtb	r3, r3
 800c036:	2b01      	cmp	r3, #1
 800c038:	bf14      	ite	ne
 800c03a:	2301      	movne	r3, #1
 800c03c:	2300      	moveq	r3, #0
 800c03e:	b2db      	uxtb	r3, r3
 800c040:	e015      	b.n	800c06e <HAL_TIM_PWM_Start+0x6a>
 800c042:	683b      	ldr	r3, [r7, #0]
 800c044:	2b08      	cmp	r3, #8
 800c046:	d109      	bne.n	800c05c <HAL_TIM_PWM_Start+0x58>
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c04e:	b2db      	uxtb	r3, r3
 800c050:	2b01      	cmp	r3, #1
 800c052:	bf14      	ite	ne
 800c054:	2301      	movne	r3, #1
 800c056:	2300      	moveq	r3, #0
 800c058:	b2db      	uxtb	r3, r3
 800c05a:	e008      	b.n	800c06e <HAL_TIM_PWM_Start+0x6a>
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c062:	b2db      	uxtb	r3, r3
 800c064:	2b01      	cmp	r3, #1
 800c066:	bf14      	ite	ne
 800c068:	2301      	movne	r3, #1
 800c06a:	2300      	moveq	r3, #0
 800c06c:	b2db      	uxtb	r3, r3
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d001      	beq.n	800c076 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800c072:	2301      	movs	r3, #1
 800c074:	e072      	b.n	800c15c <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c076:	683b      	ldr	r3, [r7, #0]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d104      	bne.n	800c086 <HAL_TIM_PWM_Start+0x82>
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	2202      	movs	r2, #2
 800c080:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c084:	e013      	b.n	800c0ae <HAL_TIM_PWM_Start+0xaa>
 800c086:	683b      	ldr	r3, [r7, #0]
 800c088:	2b04      	cmp	r3, #4
 800c08a:	d104      	bne.n	800c096 <HAL_TIM_PWM_Start+0x92>
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	2202      	movs	r2, #2
 800c090:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c094:	e00b      	b.n	800c0ae <HAL_TIM_PWM_Start+0xaa>
 800c096:	683b      	ldr	r3, [r7, #0]
 800c098:	2b08      	cmp	r3, #8
 800c09a:	d104      	bne.n	800c0a6 <HAL_TIM_PWM_Start+0xa2>
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	2202      	movs	r2, #2
 800c0a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c0a4:	e003      	b.n	800c0ae <HAL_TIM_PWM_Start+0xaa>
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	2202      	movs	r2, #2
 800c0aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	2201      	movs	r2, #1
 800c0b4:	6839      	ldr	r1, [r7, #0]
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	f001 f8f7 	bl	800d2aa <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	4a28      	ldr	r2, [pc, #160]	@ (800c164 <HAL_TIM_PWM_Start+0x160>)
 800c0c2:	4293      	cmp	r3, r2
 800c0c4:	d004      	beq.n	800c0d0 <HAL_TIM_PWM_Start+0xcc>
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	4a27      	ldr	r2, [pc, #156]	@ (800c168 <HAL_TIM_PWM_Start+0x164>)
 800c0cc:	4293      	cmp	r3, r2
 800c0ce:	d101      	bne.n	800c0d4 <HAL_TIM_PWM_Start+0xd0>
 800c0d0:	2301      	movs	r3, #1
 800c0d2:	e000      	b.n	800c0d6 <HAL_TIM_PWM_Start+0xd2>
 800c0d4:	2300      	movs	r3, #0
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d007      	beq.n	800c0ea <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800c0e8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	4a1d      	ldr	r2, [pc, #116]	@ (800c164 <HAL_TIM_PWM_Start+0x160>)
 800c0f0:	4293      	cmp	r3, r2
 800c0f2:	d018      	beq.n	800c126 <HAL_TIM_PWM_Start+0x122>
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	4a1b      	ldr	r2, [pc, #108]	@ (800c168 <HAL_TIM_PWM_Start+0x164>)
 800c0fa:	4293      	cmp	r3, r2
 800c0fc:	d013      	beq.n	800c126 <HAL_TIM_PWM_Start+0x122>
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c106:	d00e      	beq.n	800c126 <HAL_TIM_PWM_Start+0x122>
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	4a17      	ldr	r2, [pc, #92]	@ (800c16c <HAL_TIM_PWM_Start+0x168>)
 800c10e:	4293      	cmp	r3, r2
 800c110:	d009      	beq.n	800c126 <HAL_TIM_PWM_Start+0x122>
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	4a16      	ldr	r2, [pc, #88]	@ (800c170 <HAL_TIM_PWM_Start+0x16c>)
 800c118:	4293      	cmp	r3, r2
 800c11a:	d004      	beq.n	800c126 <HAL_TIM_PWM_Start+0x122>
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	4a14      	ldr	r2, [pc, #80]	@ (800c174 <HAL_TIM_PWM_Start+0x170>)
 800c122:	4293      	cmp	r3, r2
 800c124:	d111      	bne.n	800c14a <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	689b      	ldr	r3, [r3, #8]
 800c12c:	f003 0307 	and.w	r3, r3, #7
 800c130:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	2b06      	cmp	r3, #6
 800c136:	d010      	beq.n	800c15a <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	681a      	ldr	r2, [r3, #0]
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	f042 0201 	orr.w	r2, r2, #1
 800c146:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c148:	e007      	b.n	800c15a <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	681a      	ldr	r2, [r3, #0]
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	f042 0201 	orr.w	r2, r2, #1
 800c158:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c15a:	2300      	movs	r3, #0
}
 800c15c:	4618      	mov	r0, r3
 800c15e:	3710      	adds	r7, #16
 800c160:	46bd      	mov	sp, r7
 800c162:	bd80      	pop	{r7, pc}
 800c164:	40012c00 	.word	0x40012c00
 800c168:	40013400 	.word	0x40013400
 800c16c:	40000400 	.word	0x40000400
 800c170:	40000800 	.word	0x40000800
 800c174:	40000c00 	.word	0x40000c00

0800c178 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800c178:	b580      	push	{r7, lr}
 800c17a:	b082      	sub	sp, #8
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	2b00      	cmp	r3, #0
 800c184:	d101      	bne.n	800c18a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800c186:	2301      	movs	r3, #1
 800c188:	e041      	b.n	800c20e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c190:	b2db      	uxtb	r3, r3
 800c192:	2b00      	cmp	r3, #0
 800c194:	d106      	bne.n	800c1a4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	2200      	movs	r2, #0
 800c19a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800c19e:	6878      	ldr	r0, [r7, #4]
 800c1a0:	f000 f839 	bl	800c216 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	2202      	movs	r2, #2
 800c1a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	681a      	ldr	r2, [r3, #0]
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	3304      	adds	r3, #4
 800c1b4:	4619      	mov	r1, r3
 800c1b6:	4610      	mov	r0, r2
 800c1b8:	f000 fca2 	bl	800cb00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	2201      	movs	r2, #1
 800c1c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	2201      	movs	r2, #1
 800c1c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	2201      	movs	r2, #1
 800c1d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	2201      	movs	r2, #1
 800c1d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	2201      	movs	r2, #1
 800c1e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	2201      	movs	r2, #1
 800c1e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	2201      	movs	r2, #1
 800c1f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	2201      	movs	r2, #1
 800c1f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	2201      	movs	r2, #1
 800c200:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	2201      	movs	r2, #1
 800c208:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c20c:	2300      	movs	r3, #0
}
 800c20e:	4618      	mov	r0, r3
 800c210:	3708      	adds	r7, #8
 800c212:	46bd      	mov	sp, r7
 800c214:	bd80      	pop	{r7, pc}

0800c216 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800c216:	b480      	push	{r7}
 800c218:	b083      	sub	sp, #12
 800c21a:	af00      	add	r7, sp, #0
 800c21c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800c21e:	bf00      	nop
 800c220:	370c      	adds	r7, #12
 800c222:	46bd      	mov	sp, r7
 800c224:	bc80      	pop	{r7}
 800c226:	4770      	bx	lr

0800c228 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c228:	b580      	push	{r7, lr}
 800c22a:	b084      	sub	sp, #16
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	6078      	str	r0, [r7, #4]
 800c230:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c232:	2300      	movs	r3, #0
 800c234:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800c236:	683b      	ldr	r3, [r7, #0]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d104      	bne.n	800c246 <HAL_TIM_IC_Start_IT+0x1e>
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800c242:	b2db      	uxtb	r3, r3
 800c244:	e013      	b.n	800c26e <HAL_TIM_IC_Start_IT+0x46>
 800c246:	683b      	ldr	r3, [r7, #0]
 800c248:	2b04      	cmp	r3, #4
 800c24a:	d104      	bne.n	800c256 <HAL_TIM_IC_Start_IT+0x2e>
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800c252:	b2db      	uxtb	r3, r3
 800c254:	e00b      	b.n	800c26e <HAL_TIM_IC_Start_IT+0x46>
 800c256:	683b      	ldr	r3, [r7, #0]
 800c258:	2b08      	cmp	r3, #8
 800c25a:	d104      	bne.n	800c266 <HAL_TIM_IC_Start_IT+0x3e>
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c262:	b2db      	uxtb	r3, r3
 800c264:	e003      	b.n	800c26e <HAL_TIM_IC_Start_IT+0x46>
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c26c:	b2db      	uxtb	r3, r3
 800c26e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800c270:	683b      	ldr	r3, [r7, #0]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d104      	bne.n	800c280 <HAL_TIM_IC_Start_IT+0x58>
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c27c:	b2db      	uxtb	r3, r3
 800c27e:	e013      	b.n	800c2a8 <HAL_TIM_IC_Start_IT+0x80>
 800c280:	683b      	ldr	r3, [r7, #0]
 800c282:	2b04      	cmp	r3, #4
 800c284:	d104      	bne.n	800c290 <HAL_TIM_IC_Start_IT+0x68>
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800c28c:	b2db      	uxtb	r3, r3
 800c28e:	e00b      	b.n	800c2a8 <HAL_TIM_IC_Start_IT+0x80>
 800c290:	683b      	ldr	r3, [r7, #0]
 800c292:	2b08      	cmp	r3, #8
 800c294:	d104      	bne.n	800c2a0 <HAL_TIM_IC_Start_IT+0x78>
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c29c:	b2db      	uxtb	r3, r3
 800c29e:	e003      	b.n	800c2a8 <HAL_TIM_IC_Start_IT+0x80>
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c2a6:	b2db      	uxtb	r3, r3
 800c2a8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800c2aa:	7bbb      	ldrb	r3, [r7, #14]
 800c2ac:	2b01      	cmp	r3, #1
 800c2ae:	d102      	bne.n	800c2b6 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800c2b0:	7b7b      	ldrb	r3, [r7, #13]
 800c2b2:	2b01      	cmp	r3, #1
 800c2b4:	d001      	beq.n	800c2ba <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800c2b6:	2301      	movs	r3, #1
 800c2b8:	e0c2      	b.n	800c440 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c2ba:	683b      	ldr	r3, [r7, #0]
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d104      	bne.n	800c2ca <HAL_TIM_IC_Start_IT+0xa2>
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	2202      	movs	r2, #2
 800c2c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c2c8:	e013      	b.n	800c2f2 <HAL_TIM_IC_Start_IT+0xca>
 800c2ca:	683b      	ldr	r3, [r7, #0]
 800c2cc:	2b04      	cmp	r3, #4
 800c2ce:	d104      	bne.n	800c2da <HAL_TIM_IC_Start_IT+0xb2>
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	2202      	movs	r2, #2
 800c2d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c2d8:	e00b      	b.n	800c2f2 <HAL_TIM_IC_Start_IT+0xca>
 800c2da:	683b      	ldr	r3, [r7, #0]
 800c2dc:	2b08      	cmp	r3, #8
 800c2de:	d104      	bne.n	800c2ea <HAL_TIM_IC_Start_IT+0xc2>
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	2202      	movs	r2, #2
 800c2e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c2e8:	e003      	b.n	800c2f2 <HAL_TIM_IC_Start_IT+0xca>
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	2202      	movs	r2, #2
 800c2ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c2f2:	683b      	ldr	r3, [r7, #0]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d104      	bne.n	800c302 <HAL_TIM_IC_Start_IT+0xda>
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	2202      	movs	r2, #2
 800c2fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c300:	e013      	b.n	800c32a <HAL_TIM_IC_Start_IT+0x102>
 800c302:	683b      	ldr	r3, [r7, #0]
 800c304:	2b04      	cmp	r3, #4
 800c306:	d104      	bne.n	800c312 <HAL_TIM_IC_Start_IT+0xea>
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	2202      	movs	r2, #2
 800c30c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c310:	e00b      	b.n	800c32a <HAL_TIM_IC_Start_IT+0x102>
 800c312:	683b      	ldr	r3, [r7, #0]
 800c314:	2b08      	cmp	r3, #8
 800c316:	d104      	bne.n	800c322 <HAL_TIM_IC_Start_IT+0xfa>
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	2202      	movs	r2, #2
 800c31c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c320:	e003      	b.n	800c32a <HAL_TIM_IC_Start_IT+0x102>
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	2202      	movs	r2, #2
 800c326:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 800c32a:	683b      	ldr	r3, [r7, #0]
 800c32c:	2b0c      	cmp	r3, #12
 800c32e:	d841      	bhi.n	800c3b4 <HAL_TIM_IC_Start_IT+0x18c>
 800c330:	a201      	add	r2, pc, #4	@ (adr r2, 800c338 <HAL_TIM_IC_Start_IT+0x110>)
 800c332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c336:	bf00      	nop
 800c338:	0800c36d 	.word	0x0800c36d
 800c33c:	0800c3b5 	.word	0x0800c3b5
 800c340:	0800c3b5 	.word	0x0800c3b5
 800c344:	0800c3b5 	.word	0x0800c3b5
 800c348:	0800c37f 	.word	0x0800c37f
 800c34c:	0800c3b5 	.word	0x0800c3b5
 800c350:	0800c3b5 	.word	0x0800c3b5
 800c354:	0800c3b5 	.word	0x0800c3b5
 800c358:	0800c391 	.word	0x0800c391
 800c35c:	0800c3b5 	.word	0x0800c3b5
 800c360:	0800c3b5 	.word	0x0800c3b5
 800c364:	0800c3b5 	.word	0x0800c3b5
 800c368:	0800c3a3 	.word	0x0800c3a3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	68da      	ldr	r2, [r3, #12]
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	f042 0202 	orr.w	r2, r2, #2
 800c37a:	60da      	str	r2, [r3, #12]
      break;
 800c37c:	e01d      	b.n	800c3ba <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	68da      	ldr	r2, [r3, #12]
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	f042 0204 	orr.w	r2, r2, #4
 800c38c:	60da      	str	r2, [r3, #12]
      break;
 800c38e:	e014      	b.n	800c3ba <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	68da      	ldr	r2, [r3, #12]
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	f042 0208 	orr.w	r2, r2, #8
 800c39e:	60da      	str	r2, [r3, #12]
      break;
 800c3a0:	e00b      	b.n	800c3ba <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	68da      	ldr	r2, [r3, #12]
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	f042 0210 	orr.w	r2, r2, #16
 800c3b0:	60da      	str	r2, [r3, #12]
      break;
 800c3b2:	e002      	b.n	800c3ba <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800c3b4:	2301      	movs	r3, #1
 800c3b6:	73fb      	strb	r3, [r7, #15]
      break;
 800c3b8:	bf00      	nop
  }

  if (status == HAL_OK)
 800c3ba:	7bfb      	ldrb	r3, [r7, #15]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d13e      	bne.n	800c43e <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	2201      	movs	r2, #1
 800c3c6:	6839      	ldr	r1, [r7, #0]
 800c3c8:	4618      	mov	r0, r3
 800c3ca:	f000 ff6e 	bl	800d2aa <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	4a1d      	ldr	r2, [pc, #116]	@ (800c448 <HAL_TIM_IC_Start_IT+0x220>)
 800c3d4:	4293      	cmp	r3, r2
 800c3d6:	d018      	beq.n	800c40a <HAL_TIM_IC_Start_IT+0x1e2>
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	4a1b      	ldr	r2, [pc, #108]	@ (800c44c <HAL_TIM_IC_Start_IT+0x224>)
 800c3de:	4293      	cmp	r3, r2
 800c3e0:	d013      	beq.n	800c40a <HAL_TIM_IC_Start_IT+0x1e2>
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c3ea:	d00e      	beq.n	800c40a <HAL_TIM_IC_Start_IT+0x1e2>
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	4a17      	ldr	r2, [pc, #92]	@ (800c450 <HAL_TIM_IC_Start_IT+0x228>)
 800c3f2:	4293      	cmp	r3, r2
 800c3f4:	d009      	beq.n	800c40a <HAL_TIM_IC_Start_IT+0x1e2>
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	4a16      	ldr	r2, [pc, #88]	@ (800c454 <HAL_TIM_IC_Start_IT+0x22c>)
 800c3fc:	4293      	cmp	r3, r2
 800c3fe:	d004      	beq.n	800c40a <HAL_TIM_IC_Start_IT+0x1e2>
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	4a14      	ldr	r2, [pc, #80]	@ (800c458 <HAL_TIM_IC_Start_IT+0x230>)
 800c406:	4293      	cmp	r3, r2
 800c408:	d111      	bne.n	800c42e <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	689b      	ldr	r3, [r3, #8]
 800c410:	f003 0307 	and.w	r3, r3, #7
 800c414:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c416:	68bb      	ldr	r3, [r7, #8]
 800c418:	2b06      	cmp	r3, #6
 800c41a:	d010      	beq.n	800c43e <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	681a      	ldr	r2, [r3, #0]
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	f042 0201 	orr.w	r2, r2, #1
 800c42a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c42c:	e007      	b.n	800c43e <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	681a      	ldr	r2, [r3, #0]
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	f042 0201 	orr.w	r2, r2, #1
 800c43c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800c43e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c440:	4618      	mov	r0, r3
 800c442:	3710      	adds	r7, #16
 800c444:	46bd      	mov	sp, r7
 800c446:	bd80      	pop	{r7, pc}
 800c448:	40012c00 	.word	0x40012c00
 800c44c:	40013400 	.word	0x40013400
 800c450:	40000400 	.word	0x40000400
 800c454:	40000800 	.word	0x40000800
 800c458:	40000c00 	.word	0x40000c00

0800c45c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c45c:	b580      	push	{r7, lr}
 800c45e:	b082      	sub	sp, #8
 800c460:	af00      	add	r7, sp, #0
 800c462:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	691b      	ldr	r3, [r3, #16]
 800c46a:	f003 0302 	and.w	r3, r3, #2
 800c46e:	2b02      	cmp	r3, #2
 800c470:	d122      	bne.n	800c4b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	68db      	ldr	r3, [r3, #12]
 800c478:	f003 0302 	and.w	r3, r3, #2
 800c47c:	2b02      	cmp	r3, #2
 800c47e:	d11b      	bne.n	800c4b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	f06f 0202 	mvn.w	r2, #2
 800c488:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	2201      	movs	r2, #1
 800c48e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	699b      	ldr	r3, [r3, #24]
 800c496:	f003 0303 	and.w	r3, r3, #3
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d003      	beq.n	800c4a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c49e:	6878      	ldr	r0, [r7, #4]
 800c4a0:	f7fb fe3e 	bl	8008120 <HAL_TIM_IC_CaptureCallback>
 800c4a4:	e005      	b.n	800c4b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c4a6:	6878      	ldr	r0, [r7, #4]
 800c4a8:	f000 fb0e 	bl	800cac8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c4ac:	6878      	ldr	r0, [r7, #4]
 800c4ae:	f000 fb14 	bl	800cada <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	2200      	movs	r2, #0
 800c4b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	691b      	ldr	r3, [r3, #16]
 800c4be:	f003 0304 	and.w	r3, r3, #4
 800c4c2:	2b04      	cmp	r3, #4
 800c4c4:	d122      	bne.n	800c50c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	68db      	ldr	r3, [r3, #12]
 800c4cc:	f003 0304 	and.w	r3, r3, #4
 800c4d0:	2b04      	cmp	r3, #4
 800c4d2:	d11b      	bne.n	800c50c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	f06f 0204 	mvn.w	r2, #4
 800c4dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	2202      	movs	r2, #2
 800c4e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	699b      	ldr	r3, [r3, #24]
 800c4ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d003      	beq.n	800c4fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c4f2:	6878      	ldr	r0, [r7, #4]
 800c4f4:	f7fb fe14 	bl	8008120 <HAL_TIM_IC_CaptureCallback>
 800c4f8:	e005      	b.n	800c506 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c4fa:	6878      	ldr	r0, [r7, #4]
 800c4fc:	f000 fae4 	bl	800cac8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c500:	6878      	ldr	r0, [r7, #4]
 800c502:	f000 faea 	bl	800cada <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	2200      	movs	r2, #0
 800c50a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	691b      	ldr	r3, [r3, #16]
 800c512:	f003 0308 	and.w	r3, r3, #8
 800c516:	2b08      	cmp	r3, #8
 800c518:	d122      	bne.n	800c560 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	68db      	ldr	r3, [r3, #12]
 800c520:	f003 0308 	and.w	r3, r3, #8
 800c524:	2b08      	cmp	r3, #8
 800c526:	d11b      	bne.n	800c560 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	f06f 0208 	mvn.w	r2, #8
 800c530:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	2204      	movs	r2, #4
 800c536:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	69db      	ldr	r3, [r3, #28]
 800c53e:	f003 0303 	and.w	r3, r3, #3
 800c542:	2b00      	cmp	r3, #0
 800c544:	d003      	beq.n	800c54e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c546:	6878      	ldr	r0, [r7, #4]
 800c548:	f7fb fdea 	bl	8008120 <HAL_TIM_IC_CaptureCallback>
 800c54c:	e005      	b.n	800c55a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c54e:	6878      	ldr	r0, [r7, #4]
 800c550:	f000 faba 	bl	800cac8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c554:	6878      	ldr	r0, [r7, #4]
 800c556:	f000 fac0 	bl	800cada <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	2200      	movs	r2, #0
 800c55e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	691b      	ldr	r3, [r3, #16]
 800c566:	f003 0310 	and.w	r3, r3, #16
 800c56a:	2b10      	cmp	r3, #16
 800c56c:	d122      	bne.n	800c5b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	68db      	ldr	r3, [r3, #12]
 800c574:	f003 0310 	and.w	r3, r3, #16
 800c578:	2b10      	cmp	r3, #16
 800c57a:	d11b      	bne.n	800c5b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	f06f 0210 	mvn.w	r2, #16
 800c584:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	2208      	movs	r2, #8
 800c58a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	69db      	ldr	r3, [r3, #28]
 800c592:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c596:	2b00      	cmp	r3, #0
 800c598:	d003      	beq.n	800c5a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c59a:	6878      	ldr	r0, [r7, #4]
 800c59c:	f7fb fdc0 	bl	8008120 <HAL_TIM_IC_CaptureCallback>
 800c5a0:	e005      	b.n	800c5ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c5a2:	6878      	ldr	r0, [r7, #4]
 800c5a4:	f000 fa90 	bl	800cac8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c5a8:	6878      	ldr	r0, [r7, #4]
 800c5aa:	f000 fa96 	bl	800cada <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	2200      	movs	r2, #0
 800c5b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	691b      	ldr	r3, [r3, #16]
 800c5ba:	f003 0301 	and.w	r3, r3, #1
 800c5be:	2b01      	cmp	r3, #1
 800c5c0:	d10e      	bne.n	800c5e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	68db      	ldr	r3, [r3, #12]
 800c5c8:	f003 0301 	and.w	r3, r3, #1
 800c5cc:	2b01      	cmp	r3, #1
 800c5ce:	d107      	bne.n	800c5e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	f06f 0201 	mvn.w	r2, #1
 800c5d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c5da:	6878      	ldr	r0, [r7, #4]
 800c5dc:	f000 fa6b 	bl	800cab6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	691b      	ldr	r3, [r3, #16]
 800c5e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c5ea:	2b80      	cmp	r3, #128	@ 0x80
 800c5ec:	d10e      	bne.n	800c60c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	68db      	ldr	r3, [r3, #12]
 800c5f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c5f8:	2b80      	cmp	r3, #128	@ 0x80
 800c5fa:	d107      	bne.n	800c60c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800c604:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c606:	6878      	ldr	r0, [r7, #4]
 800c608:	f000 ff3a 	bl	800d480 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	691b      	ldr	r3, [r3, #16]
 800c612:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c616:	2b40      	cmp	r3, #64	@ 0x40
 800c618:	d10e      	bne.n	800c638 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	68db      	ldr	r3, [r3, #12]
 800c620:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c624:	2b40      	cmp	r3, #64	@ 0x40
 800c626:	d107      	bne.n	800c638 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800c630:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c632:	6878      	ldr	r0, [r7, #4]
 800c634:	f000 fa5a 	bl	800caec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	691b      	ldr	r3, [r3, #16]
 800c63e:	f003 0320 	and.w	r3, r3, #32
 800c642:	2b20      	cmp	r3, #32
 800c644:	d10e      	bne.n	800c664 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	68db      	ldr	r3, [r3, #12]
 800c64c:	f003 0320 	and.w	r3, r3, #32
 800c650:	2b20      	cmp	r3, #32
 800c652:	d107      	bne.n	800c664 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	f06f 0220 	mvn.w	r2, #32
 800c65c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c65e:	6878      	ldr	r0, [r7, #4]
 800c660:	f000 ff05 	bl	800d46e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c664:	bf00      	nop
 800c666:	3708      	adds	r7, #8
 800c668:	46bd      	mov	sp, r7
 800c66a:	bd80      	pop	{r7, pc}

0800c66c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800c66c:	b580      	push	{r7, lr}
 800c66e:	b086      	sub	sp, #24
 800c670:	af00      	add	r7, sp, #0
 800c672:	60f8      	str	r0, [r7, #12]
 800c674:	60b9      	str	r1, [r7, #8]
 800c676:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c678:	2300      	movs	r3, #0
 800c67a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c682:	2b01      	cmp	r3, #1
 800c684:	d101      	bne.n	800c68a <HAL_TIM_IC_ConfigChannel+0x1e>
 800c686:	2302      	movs	r3, #2
 800c688:	e088      	b.n	800c79c <HAL_TIM_IC_ConfigChannel+0x130>
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	2201      	movs	r2, #1
 800c68e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	2b00      	cmp	r3, #0
 800c696:	d11b      	bne.n	800c6d0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800c69c:	68bb      	ldr	r3, [r7, #8]
 800c69e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800c6a0:	68bb      	ldr	r3, [r7, #8]
 800c6a2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800c6a4:	68bb      	ldr	r3, [r7, #8]
 800c6a6:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800c6a8:	f000 fc50 	bl	800cf4c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	699a      	ldr	r2, [r3, #24]
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	f022 020c 	bic.w	r2, r2, #12
 800c6ba:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	6999      	ldr	r1, [r3, #24]
 800c6c2:	68bb      	ldr	r3, [r7, #8]
 800c6c4:	689a      	ldr	r2, [r3, #8]
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	430a      	orrs	r2, r1
 800c6cc:	619a      	str	r2, [r3, #24]
 800c6ce:	e060      	b.n	800c792 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	2b04      	cmp	r3, #4
 800c6d4:	d11c      	bne.n	800c710 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800c6da:	68bb      	ldr	r3, [r7, #8]
 800c6dc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800c6de:	68bb      	ldr	r3, [r7, #8]
 800c6e0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800c6e2:	68bb      	ldr	r3, [r7, #8]
 800c6e4:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800c6e6:	f000 fcc5 	bl	800d074 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	699a      	ldr	r2, [r3, #24]
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800c6f8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	6999      	ldr	r1, [r3, #24]
 800c700:	68bb      	ldr	r3, [r7, #8]
 800c702:	689b      	ldr	r3, [r3, #8]
 800c704:	021a      	lsls	r2, r3, #8
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	430a      	orrs	r2, r1
 800c70c:	619a      	str	r2, [r3, #24]
 800c70e:	e040      	b.n	800c792 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	2b08      	cmp	r3, #8
 800c714:	d11b      	bne.n	800c74e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800c71a:	68bb      	ldr	r3, [r7, #8]
 800c71c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800c71e:	68bb      	ldr	r3, [r7, #8]
 800c720:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800c722:	68bb      	ldr	r3, [r7, #8]
 800c724:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800c726:	f000 fd10 	bl	800d14a <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	69da      	ldr	r2, [r3, #28]
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	f022 020c 	bic.w	r2, r2, #12
 800c738:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	69d9      	ldr	r1, [r3, #28]
 800c740:	68bb      	ldr	r3, [r7, #8]
 800c742:	689a      	ldr	r2, [r3, #8]
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	430a      	orrs	r2, r1
 800c74a:	61da      	str	r2, [r3, #28]
 800c74c:	e021      	b.n	800c792 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	2b0c      	cmp	r3, #12
 800c752:	d11c      	bne.n	800c78e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800c758:	68bb      	ldr	r3, [r7, #8]
 800c75a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800c75c:	68bb      	ldr	r3, [r7, #8]
 800c75e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800c760:	68bb      	ldr	r3, [r7, #8]
 800c762:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800c764:	f000 fd2c 	bl	800d1c0 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	69da      	ldr	r2, [r3, #28]
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800c776:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	69d9      	ldr	r1, [r3, #28]
 800c77e:	68bb      	ldr	r3, [r7, #8]
 800c780:	689b      	ldr	r3, [r3, #8]
 800c782:	021a      	lsls	r2, r3, #8
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	430a      	orrs	r2, r1
 800c78a:	61da      	str	r2, [r3, #28]
 800c78c:	e001      	b.n	800c792 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800c78e:	2301      	movs	r3, #1
 800c790:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	2200      	movs	r2, #0
 800c796:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c79a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c79c:	4618      	mov	r0, r3
 800c79e:	3718      	adds	r7, #24
 800c7a0:	46bd      	mov	sp, r7
 800c7a2:	bd80      	pop	{r7, pc}

0800c7a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c7a4:	b580      	push	{r7, lr}
 800c7a6:	b086      	sub	sp, #24
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	60f8      	str	r0, [r7, #12]
 800c7ac:	60b9      	str	r1, [r7, #8]
 800c7ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c7b0:	2300      	movs	r3, #0
 800c7b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c7ba:	2b01      	cmp	r3, #1
 800c7bc:	d101      	bne.n	800c7c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c7be:	2302      	movs	r3, #2
 800c7c0:	e0ae      	b.n	800c920 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	2201      	movs	r2, #1
 800c7c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	2b0c      	cmp	r3, #12
 800c7ce:	f200 809f 	bhi.w	800c910 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800c7d2:	a201      	add	r2, pc, #4	@ (adr r2, 800c7d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c7d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7d8:	0800c80d 	.word	0x0800c80d
 800c7dc:	0800c911 	.word	0x0800c911
 800c7e0:	0800c911 	.word	0x0800c911
 800c7e4:	0800c911 	.word	0x0800c911
 800c7e8:	0800c84d 	.word	0x0800c84d
 800c7ec:	0800c911 	.word	0x0800c911
 800c7f0:	0800c911 	.word	0x0800c911
 800c7f4:	0800c911 	.word	0x0800c911
 800c7f8:	0800c88f 	.word	0x0800c88f
 800c7fc:	0800c911 	.word	0x0800c911
 800c800:	0800c911 	.word	0x0800c911
 800c804:	0800c911 	.word	0x0800c911
 800c808:	0800c8cf 	.word	0x0800c8cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	68b9      	ldr	r1, [r7, #8]
 800c812:	4618      	mov	r0, r3
 800c814:	f000 f9ee 	bl	800cbf4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	699a      	ldr	r2, [r3, #24]
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	f042 0208 	orr.w	r2, r2, #8
 800c826:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	699a      	ldr	r2, [r3, #24]
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	f022 0204 	bic.w	r2, r2, #4
 800c836:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	6999      	ldr	r1, [r3, #24]
 800c83e:	68bb      	ldr	r3, [r7, #8]
 800c840:	691a      	ldr	r2, [r3, #16]
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	430a      	orrs	r2, r1
 800c848:	619a      	str	r2, [r3, #24]
      break;
 800c84a:	e064      	b.n	800c916 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	68b9      	ldr	r1, [r7, #8]
 800c852:	4618      	mov	r0, r3
 800c854:	f000 fa3e 	bl	800ccd4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	699a      	ldr	r2, [r3, #24]
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c866:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	699a      	ldr	r2, [r3, #24]
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c876:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	6999      	ldr	r1, [r3, #24]
 800c87e:	68bb      	ldr	r3, [r7, #8]
 800c880:	691b      	ldr	r3, [r3, #16]
 800c882:	021a      	lsls	r2, r3, #8
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	430a      	orrs	r2, r1
 800c88a:	619a      	str	r2, [r3, #24]
      break;
 800c88c:	e043      	b.n	800c916 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	68b9      	ldr	r1, [r7, #8]
 800c894:	4618      	mov	r0, r3
 800c896:	f000 fa91 	bl	800cdbc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	69da      	ldr	r2, [r3, #28]
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	f042 0208 	orr.w	r2, r2, #8
 800c8a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	69da      	ldr	r2, [r3, #28]
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	f022 0204 	bic.w	r2, r2, #4
 800c8b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	69d9      	ldr	r1, [r3, #28]
 800c8c0:	68bb      	ldr	r3, [r7, #8]
 800c8c2:	691a      	ldr	r2, [r3, #16]
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	430a      	orrs	r2, r1
 800c8ca:	61da      	str	r2, [r3, #28]
      break;
 800c8cc:	e023      	b.n	800c916 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	68b9      	ldr	r1, [r7, #8]
 800c8d4:	4618      	mov	r0, r3
 800c8d6:	f000 fae5 	bl	800cea4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	69da      	ldr	r2, [r3, #28]
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c8e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	69da      	ldr	r2, [r3, #28]
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c8f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	69d9      	ldr	r1, [r3, #28]
 800c900:	68bb      	ldr	r3, [r7, #8]
 800c902:	691b      	ldr	r3, [r3, #16]
 800c904:	021a      	lsls	r2, r3, #8
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	430a      	orrs	r2, r1
 800c90c:	61da      	str	r2, [r3, #28]
      break;
 800c90e:	e002      	b.n	800c916 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800c910:	2301      	movs	r3, #1
 800c912:	75fb      	strb	r3, [r7, #23]
      break;
 800c914:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	2200      	movs	r2, #0
 800c91a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c91e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c920:	4618      	mov	r0, r3
 800c922:	3718      	adds	r7, #24
 800c924:	46bd      	mov	sp, r7
 800c926:	bd80      	pop	{r7, pc}

0800c928 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c928:	b580      	push	{r7, lr}
 800c92a:	b084      	sub	sp, #16
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	6078      	str	r0, [r7, #4]
 800c930:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c932:	2300      	movs	r3, #0
 800c934:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c93c:	2b01      	cmp	r3, #1
 800c93e:	d101      	bne.n	800c944 <HAL_TIM_ConfigClockSource+0x1c>
 800c940:	2302      	movs	r3, #2
 800c942:	e0b4      	b.n	800caae <HAL_TIM_ConfigClockSource+0x186>
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	2201      	movs	r2, #1
 800c948:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	2202      	movs	r2, #2
 800c950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	689b      	ldr	r3, [r3, #8]
 800c95a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c95c:	68bb      	ldr	r3, [r7, #8]
 800c95e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800c962:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c964:	68bb      	ldr	r3, [r7, #8]
 800c966:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c96a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	68ba      	ldr	r2, [r7, #8]
 800c972:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c974:	683b      	ldr	r3, [r7, #0]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c97c:	d03e      	beq.n	800c9fc <HAL_TIM_ConfigClockSource+0xd4>
 800c97e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c982:	f200 8087 	bhi.w	800ca94 <HAL_TIM_ConfigClockSource+0x16c>
 800c986:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c98a:	f000 8086 	beq.w	800ca9a <HAL_TIM_ConfigClockSource+0x172>
 800c98e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c992:	d87f      	bhi.n	800ca94 <HAL_TIM_ConfigClockSource+0x16c>
 800c994:	2b70      	cmp	r3, #112	@ 0x70
 800c996:	d01a      	beq.n	800c9ce <HAL_TIM_ConfigClockSource+0xa6>
 800c998:	2b70      	cmp	r3, #112	@ 0x70
 800c99a:	d87b      	bhi.n	800ca94 <HAL_TIM_ConfigClockSource+0x16c>
 800c99c:	2b60      	cmp	r3, #96	@ 0x60
 800c99e:	d050      	beq.n	800ca42 <HAL_TIM_ConfigClockSource+0x11a>
 800c9a0:	2b60      	cmp	r3, #96	@ 0x60
 800c9a2:	d877      	bhi.n	800ca94 <HAL_TIM_ConfigClockSource+0x16c>
 800c9a4:	2b50      	cmp	r3, #80	@ 0x50
 800c9a6:	d03c      	beq.n	800ca22 <HAL_TIM_ConfigClockSource+0xfa>
 800c9a8:	2b50      	cmp	r3, #80	@ 0x50
 800c9aa:	d873      	bhi.n	800ca94 <HAL_TIM_ConfigClockSource+0x16c>
 800c9ac:	2b40      	cmp	r3, #64	@ 0x40
 800c9ae:	d058      	beq.n	800ca62 <HAL_TIM_ConfigClockSource+0x13a>
 800c9b0:	2b40      	cmp	r3, #64	@ 0x40
 800c9b2:	d86f      	bhi.n	800ca94 <HAL_TIM_ConfigClockSource+0x16c>
 800c9b4:	2b30      	cmp	r3, #48	@ 0x30
 800c9b6:	d064      	beq.n	800ca82 <HAL_TIM_ConfigClockSource+0x15a>
 800c9b8:	2b30      	cmp	r3, #48	@ 0x30
 800c9ba:	d86b      	bhi.n	800ca94 <HAL_TIM_ConfigClockSource+0x16c>
 800c9bc:	2b20      	cmp	r3, #32
 800c9be:	d060      	beq.n	800ca82 <HAL_TIM_ConfigClockSource+0x15a>
 800c9c0:	2b20      	cmp	r3, #32
 800c9c2:	d867      	bhi.n	800ca94 <HAL_TIM_ConfigClockSource+0x16c>
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d05c      	beq.n	800ca82 <HAL_TIM_ConfigClockSource+0x15a>
 800c9c8:	2b10      	cmp	r3, #16
 800c9ca:	d05a      	beq.n	800ca82 <HAL_TIM_ConfigClockSource+0x15a>
 800c9cc:	e062      	b.n	800ca94 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c9d2:	683b      	ldr	r3, [r7, #0]
 800c9d4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c9d6:	683b      	ldr	r3, [r7, #0]
 800c9d8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c9da:	683b      	ldr	r3, [r7, #0]
 800c9dc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c9de:	f000 fc45 	bl	800d26c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	689b      	ldr	r3, [r3, #8]
 800c9e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c9ea:	68bb      	ldr	r3, [r7, #8]
 800c9ec:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800c9f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	68ba      	ldr	r2, [r7, #8]
 800c9f8:	609a      	str	r2, [r3, #8]
      break;
 800c9fa:	e04f      	b.n	800ca9c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ca00:	683b      	ldr	r3, [r7, #0]
 800ca02:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ca04:	683b      	ldr	r3, [r7, #0]
 800ca06:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ca08:	683b      	ldr	r3, [r7, #0]
 800ca0a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ca0c:	f000 fc2e 	bl	800d26c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	689a      	ldr	r2, [r3, #8]
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ca1e:	609a      	str	r2, [r3, #8]
      break;
 800ca20:	e03c      	b.n	800ca9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ca26:	683b      	ldr	r3, [r7, #0]
 800ca28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ca2a:	683b      	ldr	r3, [r7, #0]
 800ca2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ca2e:	461a      	mov	r2, r3
 800ca30:	f000 faf2 	bl	800d018 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	2150      	movs	r1, #80	@ 0x50
 800ca3a:	4618      	mov	r0, r3
 800ca3c:	f000 fbfc 	bl	800d238 <TIM_ITRx_SetConfig>
      break;
 800ca40:	e02c      	b.n	800ca9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ca46:	683b      	ldr	r3, [r7, #0]
 800ca48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ca4a:	683b      	ldr	r3, [r7, #0]
 800ca4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ca4e:	461a      	mov	r2, r3
 800ca50:	f000 fb4c 	bl	800d0ec <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	2160      	movs	r1, #96	@ 0x60
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	f000 fbec 	bl	800d238 <TIM_ITRx_SetConfig>
      break;
 800ca60:	e01c      	b.n	800ca9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ca66:	683b      	ldr	r3, [r7, #0]
 800ca68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ca6a:	683b      	ldr	r3, [r7, #0]
 800ca6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ca6e:	461a      	mov	r2, r3
 800ca70:	f000 fad2 	bl	800d018 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	2140      	movs	r1, #64	@ 0x40
 800ca7a:	4618      	mov	r0, r3
 800ca7c:	f000 fbdc 	bl	800d238 <TIM_ITRx_SetConfig>
      break;
 800ca80:	e00c      	b.n	800ca9c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	681a      	ldr	r2, [r3, #0]
 800ca86:	683b      	ldr	r3, [r7, #0]
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	4619      	mov	r1, r3
 800ca8c:	4610      	mov	r0, r2
 800ca8e:	f000 fbd3 	bl	800d238 <TIM_ITRx_SetConfig>
      break;
 800ca92:	e003      	b.n	800ca9c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800ca94:	2301      	movs	r3, #1
 800ca96:	73fb      	strb	r3, [r7, #15]
      break;
 800ca98:	e000      	b.n	800ca9c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800ca9a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	2201      	movs	r2, #1
 800caa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	2200      	movs	r2, #0
 800caa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800caac:	7bfb      	ldrb	r3, [r7, #15]
}
 800caae:	4618      	mov	r0, r3
 800cab0:	3710      	adds	r7, #16
 800cab2:	46bd      	mov	sp, r7
 800cab4:	bd80      	pop	{r7, pc}

0800cab6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cab6:	b480      	push	{r7}
 800cab8:	b083      	sub	sp, #12
 800caba:	af00      	add	r7, sp, #0
 800cabc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800cabe:	bf00      	nop
 800cac0:	370c      	adds	r7, #12
 800cac2:	46bd      	mov	sp, r7
 800cac4:	bc80      	pop	{r7}
 800cac6:	4770      	bx	lr

0800cac8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cac8:	b480      	push	{r7}
 800caca:	b083      	sub	sp, #12
 800cacc:	af00      	add	r7, sp, #0
 800cace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800cad0:	bf00      	nop
 800cad2:	370c      	adds	r7, #12
 800cad4:	46bd      	mov	sp, r7
 800cad6:	bc80      	pop	{r7}
 800cad8:	4770      	bx	lr

0800cada <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cada:	b480      	push	{r7}
 800cadc:	b083      	sub	sp, #12
 800cade:	af00      	add	r7, sp, #0
 800cae0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cae2:	bf00      	nop
 800cae4:	370c      	adds	r7, #12
 800cae6:	46bd      	mov	sp, r7
 800cae8:	bc80      	pop	{r7}
 800caea:	4770      	bx	lr

0800caec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800caec:	b480      	push	{r7}
 800caee:	b083      	sub	sp, #12
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800caf4:	bf00      	nop
 800caf6:	370c      	adds	r7, #12
 800caf8:	46bd      	mov	sp, r7
 800cafa:	bc80      	pop	{r7}
 800cafc:	4770      	bx	lr
	...

0800cb00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800cb00:	b480      	push	{r7}
 800cb02:	b085      	sub	sp, #20
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	6078      	str	r0, [r7, #4]
 800cb08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	4a33      	ldr	r2, [pc, #204]	@ (800cbe0 <TIM_Base_SetConfig+0xe0>)
 800cb14:	4293      	cmp	r3, r2
 800cb16:	d013      	beq.n	800cb40 <TIM_Base_SetConfig+0x40>
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	4a32      	ldr	r2, [pc, #200]	@ (800cbe4 <TIM_Base_SetConfig+0xe4>)
 800cb1c:	4293      	cmp	r3, r2
 800cb1e:	d00f      	beq.n	800cb40 <TIM_Base_SetConfig+0x40>
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cb26:	d00b      	beq.n	800cb40 <TIM_Base_SetConfig+0x40>
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	4a2f      	ldr	r2, [pc, #188]	@ (800cbe8 <TIM_Base_SetConfig+0xe8>)
 800cb2c:	4293      	cmp	r3, r2
 800cb2e:	d007      	beq.n	800cb40 <TIM_Base_SetConfig+0x40>
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	4a2e      	ldr	r2, [pc, #184]	@ (800cbec <TIM_Base_SetConfig+0xec>)
 800cb34:	4293      	cmp	r3, r2
 800cb36:	d003      	beq.n	800cb40 <TIM_Base_SetConfig+0x40>
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	4a2d      	ldr	r2, [pc, #180]	@ (800cbf0 <TIM_Base_SetConfig+0xf0>)
 800cb3c:	4293      	cmp	r3, r2
 800cb3e:	d108      	bne.n	800cb52 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cb46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cb48:	683b      	ldr	r3, [r7, #0]
 800cb4a:	685b      	ldr	r3, [r3, #4]
 800cb4c:	68fa      	ldr	r2, [r7, #12]
 800cb4e:	4313      	orrs	r3, r2
 800cb50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	4a22      	ldr	r2, [pc, #136]	@ (800cbe0 <TIM_Base_SetConfig+0xe0>)
 800cb56:	4293      	cmp	r3, r2
 800cb58:	d013      	beq.n	800cb82 <TIM_Base_SetConfig+0x82>
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	4a21      	ldr	r2, [pc, #132]	@ (800cbe4 <TIM_Base_SetConfig+0xe4>)
 800cb5e:	4293      	cmp	r3, r2
 800cb60:	d00f      	beq.n	800cb82 <TIM_Base_SetConfig+0x82>
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cb68:	d00b      	beq.n	800cb82 <TIM_Base_SetConfig+0x82>
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	4a1e      	ldr	r2, [pc, #120]	@ (800cbe8 <TIM_Base_SetConfig+0xe8>)
 800cb6e:	4293      	cmp	r3, r2
 800cb70:	d007      	beq.n	800cb82 <TIM_Base_SetConfig+0x82>
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	4a1d      	ldr	r2, [pc, #116]	@ (800cbec <TIM_Base_SetConfig+0xec>)
 800cb76:	4293      	cmp	r3, r2
 800cb78:	d003      	beq.n	800cb82 <TIM_Base_SetConfig+0x82>
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	4a1c      	ldr	r2, [pc, #112]	@ (800cbf0 <TIM_Base_SetConfig+0xf0>)
 800cb7e:	4293      	cmp	r3, r2
 800cb80:	d108      	bne.n	800cb94 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800cb88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cb8a:	683b      	ldr	r3, [r7, #0]
 800cb8c:	68db      	ldr	r3, [r3, #12]
 800cb8e:	68fa      	ldr	r2, [r7, #12]
 800cb90:	4313      	orrs	r3, r2
 800cb92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800cb9a:	683b      	ldr	r3, [r7, #0]
 800cb9c:	695b      	ldr	r3, [r3, #20]
 800cb9e:	4313      	orrs	r3, r2
 800cba0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	68fa      	ldr	r2, [r7, #12]
 800cba6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cba8:	683b      	ldr	r3, [r7, #0]
 800cbaa:	689a      	ldr	r2, [r3, #8]
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cbb0:	683b      	ldr	r3, [r7, #0]
 800cbb2:	681a      	ldr	r2, [r3, #0]
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	4a09      	ldr	r2, [pc, #36]	@ (800cbe0 <TIM_Base_SetConfig+0xe0>)
 800cbbc:	4293      	cmp	r3, r2
 800cbbe:	d003      	beq.n	800cbc8 <TIM_Base_SetConfig+0xc8>
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	4a08      	ldr	r2, [pc, #32]	@ (800cbe4 <TIM_Base_SetConfig+0xe4>)
 800cbc4:	4293      	cmp	r3, r2
 800cbc6:	d103      	bne.n	800cbd0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cbc8:	683b      	ldr	r3, [r7, #0]
 800cbca:	691a      	ldr	r2, [r3, #16]
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	2201      	movs	r2, #1
 800cbd4:	615a      	str	r2, [r3, #20]
}
 800cbd6:	bf00      	nop
 800cbd8:	3714      	adds	r7, #20
 800cbda:	46bd      	mov	sp, r7
 800cbdc:	bc80      	pop	{r7}
 800cbde:	4770      	bx	lr
 800cbe0:	40012c00 	.word	0x40012c00
 800cbe4:	40013400 	.word	0x40013400
 800cbe8:	40000400 	.word	0x40000400
 800cbec:	40000800 	.word	0x40000800
 800cbf0:	40000c00 	.word	0x40000c00

0800cbf4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cbf4:	b480      	push	{r7}
 800cbf6:	b087      	sub	sp, #28
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	6078      	str	r0, [r7, #4]
 800cbfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	6a1b      	ldr	r3, [r3, #32]
 800cc02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	6a1b      	ldr	r3, [r3, #32]
 800cc08:	f023 0201 	bic.w	r2, r3, #1
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	685b      	ldr	r3, [r3, #4]
 800cc14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	699b      	ldr	r3, [r3, #24]
 800cc1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cc22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	f023 0303 	bic.w	r3, r3, #3
 800cc2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cc2c:	683b      	ldr	r3, [r7, #0]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	68fa      	ldr	r2, [r7, #12]
 800cc32:	4313      	orrs	r3, r2
 800cc34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800cc36:	697b      	ldr	r3, [r7, #20]
 800cc38:	f023 0302 	bic.w	r3, r3, #2
 800cc3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800cc3e:	683b      	ldr	r3, [r7, #0]
 800cc40:	689b      	ldr	r3, [r3, #8]
 800cc42:	697a      	ldr	r2, [r7, #20]
 800cc44:	4313      	orrs	r3, r2
 800cc46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	4a20      	ldr	r2, [pc, #128]	@ (800cccc <TIM_OC1_SetConfig+0xd8>)
 800cc4c:	4293      	cmp	r3, r2
 800cc4e:	d003      	beq.n	800cc58 <TIM_OC1_SetConfig+0x64>
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	4a1f      	ldr	r2, [pc, #124]	@ (800ccd0 <TIM_OC1_SetConfig+0xdc>)
 800cc54:	4293      	cmp	r3, r2
 800cc56:	d10c      	bne.n	800cc72 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800cc58:	697b      	ldr	r3, [r7, #20]
 800cc5a:	f023 0308 	bic.w	r3, r3, #8
 800cc5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800cc60:	683b      	ldr	r3, [r7, #0]
 800cc62:	68db      	ldr	r3, [r3, #12]
 800cc64:	697a      	ldr	r2, [r7, #20]
 800cc66:	4313      	orrs	r3, r2
 800cc68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800cc6a:	697b      	ldr	r3, [r7, #20]
 800cc6c:	f023 0304 	bic.w	r3, r3, #4
 800cc70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	4a15      	ldr	r2, [pc, #84]	@ (800cccc <TIM_OC1_SetConfig+0xd8>)
 800cc76:	4293      	cmp	r3, r2
 800cc78:	d003      	beq.n	800cc82 <TIM_OC1_SetConfig+0x8e>
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	4a14      	ldr	r2, [pc, #80]	@ (800ccd0 <TIM_OC1_SetConfig+0xdc>)
 800cc7e:	4293      	cmp	r3, r2
 800cc80:	d111      	bne.n	800cca6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800cc82:	693b      	ldr	r3, [r7, #16]
 800cc84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cc88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800cc8a:	693b      	ldr	r3, [r7, #16]
 800cc8c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800cc90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800cc92:	683b      	ldr	r3, [r7, #0]
 800cc94:	695b      	ldr	r3, [r3, #20]
 800cc96:	693a      	ldr	r2, [r7, #16]
 800cc98:	4313      	orrs	r3, r2
 800cc9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800cc9c:	683b      	ldr	r3, [r7, #0]
 800cc9e:	699b      	ldr	r3, [r3, #24]
 800cca0:	693a      	ldr	r2, [r7, #16]
 800cca2:	4313      	orrs	r3, r2
 800cca4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	693a      	ldr	r2, [r7, #16]
 800ccaa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	68fa      	ldr	r2, [r7, #12]
 800ccb0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ccb2:	683b      	ldr	r3, [r7, #0]
 800ccb4:	685a      	ldr	r2, [r3, #4]
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	697a      	ldr	r2, [r7, #20]
 800ccbe:	621a      	str	r2, [r3, #32]
}
 800ccc0:	bf00      	nop
 800ccc2:	371c      	adds	r7, #28
 800ccc4:	46bd      	mov	sp, r7
 800ccc6:	bc80      	pop	{r7}
 800ccc8:	4770      	bx	lr
 800ccca:	bf00      	nop
 800cccc:	40012c00 	.word	0x40012c00
 800ccd0:	40013400 	.word	0x40013400

0800ccd4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ccd4:	b480      	push	{r7}
 800ccd6:	b087      	sub	sp, #28
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	6078      	str	r0, [r7, #4]
 800ccdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	6a1b      	ldr	r3, [r3, #32]
 800cce2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	6a1b      	ldr	r3, [r3, #32]
 800cce8:	f023 0210 	bic.w	r2, r3, #16
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	685b      	ldr	r3, [r3, #4]
 800ccf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	699b      	ldr	r3, [r3, #24]
 800ccfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cd02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800cd0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cd0c:	683b      	ldr	r3, [r7, #0]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	021b      	lsls	r3, r3, #8
 800cd12:	68fa      	ldr	r2, [r7, #12]
 800cd14:	4313      	orrs	r3, r2
 800cd16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800cd18:	697b      	ldr	r3, [r7, #20]
 800cd1a:	f023 0320 	bic.w	r3, r3, #32
 800cd1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800cd20:	683b      	ldr	r3, [r7, #0]
 800cd22:	689b      	ldr	r3, [r3, #8]
 800cd24:	011b      	lsls	r3, r3, #4
 800cd26:	697a      	ldr	r2, [r7, #20]
 800cd28:	4313      	orrs	r3, r2
 800cd2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	4a21      	ldr	r2, [pc, #132]	@ (800cdb4 <TIM_OC2_SetConfig+0xe0>)
 800cd30:	4293      	cmp	r3, r2
 800cd32:	d003      	beq.n	800cd3c <TIM_OC2_SetConfig+0x68>
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	4a20      	ldr	r2, [pc, #128]	@ (800cdb8 <TIM_OC2_SetConfig+0xe4>)
 800cd38:	4293      	cmp	r3, r2
 800cd3a:	d10d      	bne.n	800cd58 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800cd3c:	697b      	ldr	r3, [r7, #20]
 800cd3e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cd42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800cd44:	683b      	ldr	r3, [r7, #0]
 800cd46:	68db      	ldr	r3, [r3, #12]
 800cd48:	011b      	lsls	r3, r3, #4
 800cd4a:	697a      	ldr	r2, [r7, #20]
 800cd4c:	4313      	orrs	r3, r2
 800cd4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800cd50:	697b      	ldr	r3, [r7, #20]
 800cd52:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cd56:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	4a16      	ldr	r2, [pc, #88]	@ (800cdb4 <TIM_OC2_SetConfig+0xe0>)
 800cd5c:	4293      	cmp	r3, r2
 800cd5e:	d003      	beq.n	800cd68 <TIM_OC2_SetConfig+0x94>
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	4a15      	ldr	r2, [pc, #84]	@ (800cdb8 <TIM_OC2_SetConfig+0xe4>)
 800cd64:	4293      	cmp	r3, r2
 800cd66:	d113      	bne.n	800cd90 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800cd68:	693b      	ldr	r3, [r7, #16]
 800cd6a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800cd6e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800cd70:	693b      	ldr	r3, [r7, #16]
 800cd72:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800cd76:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800cd78:	683b      	ldr	r3, [r7, #0]
 800cd7a:	695b      	ldr	r3, [r3, #20]
 800cd7c:	009b      	lsls	r3, r3, #2
 800cd7e:	693a      	ldr	r2, [r7, #16]
 800cd80:	4313      	orrs	r3, r2
 800cd82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800cd84:	683b      	ldr	r3, [r7, #0]
 800cd86:	699b      	ldr	r3, [r3, #24]
 800cd88:	009b      	lsls	r3, r3, #2
 800cd8a:	693a      	ldr	r2, [r7, #16]
 800cd8c:	4313      	orrs	r3, r2
 800cd8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	693a      	ldr	r2, [r7, #16]
 800cd94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	68fa      	ldr	r2, [r7, #12]
 800cd9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800cd9c:	683b      	ldr	r3, [r7, #0]
 800cd9e:	685a      	ldr	r2, [r3, #4]
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	697a      	ldr	r2, [r7, #20]
 800cda8:	621a      	str	r2, [r3, #32]
}
 800cdaa:	bf00      	nop
 800cdac:	371c      	adds	r7, #28
 800cdae:	46bd      	mov	sp, r7
 800cdb0:	bc80      	pop	{r7}
 800cdb2:	4770      	bx	lr
 800cdb4:	40012c00 	.word	0x40012c00
 800cdb8:	40013400 	.word	0x40013400

0800cdbc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cdbc:	b480      	push	{r7}
 800cdbe:	b087      	sub	sp, #28
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	6078      	str	r0, [r7, #4]
 800cdc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	6a1b      	ldr	r3, [r3, #32]
 800cdca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	6a1b      	ldr	r3, [r3, #32]
 800cdd0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	685b      	ldr	r3, [r3, #4]
 800cddc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	69db      	ldr	r3, [r3, #28]
 800cde2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cdea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	f023 0303 	bic.w	r3, r3, #3
 800cdf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cdf4:	683b      	ldr	r3, [r7, #0]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	68fa      	ldr	r2, [r7, #12]
 800cdfa:	4313      	orrs	r3, r2
 800cdfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800cdfe:	697b      	ldr	r3, [r7, #20]
 800ce00:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ce04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ce06:	683b      	ldr	r3, [r7, #0]
 800ce08:	689b      	ldr	r3, [r3, #8]
 800ce0a:	021b      	lsls	r3, r3, #8
 800ce0c:	697a      	ldr	r2, [r7, #20]
 800ce0e:	4313      	orrs	r3, r2
 800ce10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	4a21      	ldr	r2, [pc, #132]	@ (800ce9c <TIM_OC3_SetConfig+0xe0>)
 800ce16:	4293      	cmp	r3, r2
 800ce18:	d003      	beq.n	800ce22 <TIM_OC3_SetConfig+0x66>
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	4a20      	ldr	r2, [pc, #128]	@ (800cea0 <TIM_OC3_SetConfig+0xe4>)
 800ce1e:	4293      	cmp	r3, r2
 800ce20:	d10d      	bne.n	800ce3e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ce22:	697b      	ldr	r3, [r7, #20]
 800ce24:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ce28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ce2a:	683b      	ldr	r3, [r7, #0]
 800ce2c:	68db      	ldr	r3, [r3, #12]
 800ce2e:	021b      	lsls	r3, r3, #8
 800ce30:	697a      	ldr	r2, [r7, #20]
 800ce32:	4313      	orrs	r3, r2
 800ce34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ce36:	697b      	ldr	r3, [r7, #20]
 800ce38:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ce3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	4a16      	ldr	r2, [pc, #88]	@ (800ce9c <TIM_OC3_SetConfig+0xe0>)
 800ce42:	4293      	cmp	r3, r2
 800ce44:	d003      	beq.n	800ce4e <TIM_OC3_SetConfig+0x92>
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	4a15      	ldr	r2, [pc, #84]	@ (800cea0 <TIM_OC3_SetConfig+0xe4>)
 800ce4a:	4293      	cmp	r3, r2
 800ce4c:	d113      	bne.n	800ce76 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ce4e:	693b      	ldr	r3, [r7, #16]
 800ce50:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ce54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ce56:	693b      	ldr	r3, [r7, #16]
 800ce58:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ce5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ce5e:	683b      	ldr	r3, [r7, #0]
 800ce60:	695b      	ldr	r3, [r3, #20]
 800ce62:	011b      	lsls	r3, r3, #4
 800ce64:	693a      	ldr	r2, [r7, #16]
 800ce66:	4313      	orrs	r3, r2
 800ce68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ce6a:	683b      	ldr	r3, [r7, #0]
 800ce6c:	699b      	ldr	r3, [r3, #24]
 800ce6e:	011b      	lsls	r3, r3, #4
 800ce70:	693a      	ldr	r2, [r7, #16]
 800ce72:	4313      	orrs	r3, r2
 800ce74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	693a      	ldr	r2, [r7, #16]
 800ce7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	68fa      	ldr	r2, [r7, #12]
 800ce80:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ce82:	683b      	ldr	r3, [r7, #0]
 800ce84:	685a      	ldr	r2, [r3, #4]
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	697a      	ldr	r2, [r7, #20]
 800ce8e:	621a      	str	r2, [r3, #32]
}
 800ce90:	bf00      	nop
 800ce92:	371c      	adds	r7, #28
 800ce94:	46bd      	mov	sp, r7
 800ce96:	bc80      	pop	{r7}
 800ce98:	4770      	bx	lr
 800ce9a:	bf00      	nop
 800ce9c:	40012c00 	.word	0x40012c00
 800cea0:	40013400 	.word	0x40013400

0800cea4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cea4:	b480      	push	{r7}
 800cea6:	b087      	sub	sp, #28
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	6078      	str	r0, [r7, #4]
 800ceac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	6a1b      	ldr	r3, [r3, #32]
 800ceb2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	6a1b      	ldr	r3, [r3, #32]
 800ceb8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	685b      	ldr	r3, [r3, #4]
 800cec4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	69db      	ldr	r3, [r3, #28]
 800ceca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ced2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ceda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cedc:	683b      	ldr	r3, [r7, #0]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	021b      	lsls	r3, r3, #8
 800cee2:	68fa      	ldr	r2, [r7, #12]
 800cee4:	4313      	orrs	r3, r2
 800cee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800cee8:	693b      	ldr	r3, [r7, #16]
 800ceea:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ceee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800cef0:	683b      	ldr	r3, [r7, #0]
 800cef2:	689b      	ldr	r3, [r3, #8]
 800cef4:	031b      	lsls	r3, r3, #12
 800cef6:	693a      	ldr	r2, [r7, #16]
 800cef8:	4313      	orrs	r3, r2
 800cefa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	4a11      	ldr	r2, [pc, #68]	@ (800cf44 <TIM_OC4_SetConfig+0xa0>)
 800cf00:	4293      	cmp	r3, r2
 800cf02:	d003      	beq.n	800cf0c <TIM_OC4_SetConfig+0x68>
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	4a10      	ldr	r2, [pc, #64]	@ (800cf48 <TIM_OC4_SetConfig+0xa4>)
 800cf08:	4293      	cmp	r3, r2
 800cf0a:	d109      	bne.n	800cf20 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800cf0c:	697b      	ldr	r3, [r7, #20]
 800cf0e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800cf12:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800cf14:	683b      	ldr	r3, [r7, #0]
 800cf16:	695b      	ldr	r3, [r3, #20]
 800cf18:	019b      	lsls	r3, r3, #6
 800cf1a:	697a      	ldr	r2, [r7, #20]
 800cf1c:	4313      	orrs	r3, r2
 800cf1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	697a      	ldr	r2, [r7, #20]
 800cf24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	68fa      	ldr	r2, [r7, #12]
 800cf2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800cf2c:	683b      	ldr	r3, [r7, #0]
 800cf2e:	685a      	ldr	r2, [r3, #4]
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	693a      	ldr	r2, [r7, #16]
 800cf38:	621a      	str	r2, [r3, #32]
}
 800cf3a:	bf00      	nop
 800cf3c:	371c      	adds	r7, #28
 800cf3e:	46bd      	mov	sp, r7
 800cf40:	bc80      	pop	{r7}
 800cf42:	4770      	bx	lr
 800cf44:	40012c00 	.word	0x40012c00
 800cf48:	40013400 	.word	0x40013400

0800cf4c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800cf4c:	b480      	push	{r7}
 800cf4e:	b087      	sub	sp, #28
 800cf50:	af00      	add	r7, sp, #0
 800cf52:	60f8      	str	r0, [r7, #12]
 800cf54:	60b9      	str	r1, [r7, #8]
 800cf56:	607a      	str	r2, [r7, #4]
 800cf58:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	6a1b      	ldr	r3, [r3, #32]
 800cf5e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	6a1b      	ldr	r3, [r3, #32]
 800cf64:	f023 0201 	bic.w	r2, r3, #1
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	699b      	ldr	r3, [r3, #24]
 800cf70:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	4a23      	ldr	r2, [pc, #140]	@ (800d004 <TIM_TI1_SetConfig+0xb8>)
 800cf76:	4293      	cmp	r3, r2
 800cf78:	d013      	beq.n	800cfa2 <TIM_TI1_SetConfig+0x56>
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	4a22      	ldr	r2, [pc, #136]	@ (800d008 <TIM_TI1_SetConfig+0xbc>)
 800cf7e:	4293      	cmp	r3, r2
 800cf80:	d00f      	beq.n	800cfa2 <TIM_TI1_SetConfig+0x56>
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cf88:	d00b      	beq.n	800cfa2 <TIM_TI1_SetConfig+0x56>
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	4a1f      	ldr	r2, [pc, #124]	@ (800d00c <TIM_TI1_SetConfig+0xc0>)
 800cf8e:	4293      	cmp	r3, r2
 800cf90:	d007      	beq.n	800cfa2 <TIM_TI1_SetConfig+0x56>
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	4a1e      	ldr	r2, [pc, #120]	@ (800d010 <TIM_TI1_SetConfig+0xc4>)
 800cf96:	4293      	cmp	r3, r2
 800cf98:	d003      	beq.n	800cfa2 <TIM_TI1_SetConfig+0x56>
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	4a1d      	ldr	r2, [pc, #116]	@ (800d014 <TIM_TI1_SetConfig+0xc8>)
 800cf9e:	4293      	cmp	r3, r2
 800cfa0:	d101      	bne.n	800cfa6 <TIM_TI1_SetConfig+0x5a>
 800cfa2:	2301      	movs	r3, #1
 800cfa4:	e000      	b.n	800cfa8 <TIM_TI1_SetConfig+0x5c>
 800cfa6:	2300      	movs	r3, #0
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d008      	beq.n	800cfbe <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800cfac:	697b      	ldr	r3, [r7, #20]
 800cfae:	f023 0303 	bic.w	r3, r3, #3
 800cfb2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800cfb4:	697a      	ldr	r2, [r7, #20]
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	4313      	orrs	r3, r2
 800cfba:	617b      	str	r3, [r7, #20]
 800cfbc:	e003      	b.n	800cfc6 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800cfbe:	697b      	ldr	r3, [r7, #20]
 800cfc0:	f043 0301 	orr.w	r3, r3, #1
 800cfc4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cfc6:	697b      	ldr	r3, [r7, #20]
 800cfc8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800cfcc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800cfce:	683b      	ldr	r3, [r7, #0]
 800cfd0:	011b      	lsls	r3, r3, #4
 800cfd2:	b2db      	uxtb	r3, r3
 800cfd4:	697a      	ldr	r2, [r7, #20]
 800cfd6:	4313      	orrs	r3, r2
 800cfd8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cfda:	693b      	ldr	r3, [r7, #16]
 800cfdc:	f023 030a 	bic.w	r3, r3, #10
 800cfe0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800cfe2:	68bb      	ldr	r3, [r7, #8]
 800cfe4:	f003 030a 	and.w	r3, r3, #10
 800cfe8:	693a      	ldr	r2, [r7, #16]
 800cfea:	4313      	orrs	r3, r2
 800cfec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	697a      	ldr	r2, [r7, #20]
 800cff2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	693a      	ldr	r2, [r7, #16]
 800cff8:	621a      	str	r2, [r3, #32]
}
 800cffa:	bf00      	nop
 800cffc:	371c      	adds	r7, #28
 800cffe:	46bd      	mov	sp, r7
 800d000:	bc80      	pop	{r7}
 800d002:	4770      	bx	lr
 800d004:	40012c00 	.word	0x40012c00
 800d008:	40013400 	.word	0x40013400
 800d00c:	40000400 	.word	0x40000400
 800d010:	40000800 	.word	0x40000800
 800d014:	40000c00 	.word	0x40000c00

0800d018 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d018:	b480      	push	{r7}
 800d01a:	b087      	sub	sp, #28
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	60f8      	str	r0, [r7, #12]
 800d020:	60b9      	str	r1, [r7, #8]
 800d022:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	6a1b      	ldr	r3, [r3, #32]
 800d028:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	6a1b      	ldr	r3, [r3, #32]
 800d02e:	f023 0201 	bic.w	r2, r3, #1
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	699b      	ldr	r3, [r3, #24]
 800d03a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d03c:	693b      	ldr	r3, [r7, #16]
 800d03e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800d042:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	011b      	lsls	r3, r3, #4
 800d048:	693a      	ldr	r2, [r7, #16]
 800d04a:	4313      	orrs	r3, r2
 800d04c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d04e:	697b      	ldr	r3, [r7, #20]
 800d050:	f023 030a 	bic.w	r3, r3, #10
 800d054:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d056:	697a      	ldr	r2, [r7, #20]
 800d058:	68bb      	ldr	r3, [r7, #8]
 800d05a:	4313      	orrs	r3, r2
 800d05c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	693a      	ldr	r2, [r7, #16]
 800d062:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	697a      	ldr	r2, [r7, #20]
 800d068:	621a      	str	r2, [r3, #32]
}
 800d06a:	bf00      	nop
 800d06c:	371c      	adds	r7, #28
 800d06e:	46bd      	mov	sp, r7
 800d070:	bc80      	pop	{r7}
 800d072:	4770      	bx	lr

0800d074 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800d074:	b480      	push	{r7}
 800d076:	b087      	sub	sp, #28
 800d078:	af00      	add	r7, sp, #0
 800d07a:	60f8      	str	r0, [r7, #12]
 800d07c:	60b9      	str	r1, [r7, #8]
 800d07e:	607a      	str	r2, [r7, #4]
 800d080:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	6a1b      	ldr	r3, [r3, #32]
 800d086:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	6a1b      	ldr	r3, [r3, #32]
 800d08c:	f023 0210 	bic.w	r2, r3, #16
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	699b      	ldr	r3, [r3, #24]
 800d098:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800d09a:	693b      	ldr	r3, [r7, #16]
 800d09c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d0a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	021b      	lsls	r3, r3, #8
 800d0a6:	693a      	ldr	r2, [r7, #16]
 800d0a8:	4313      	orrs	r3, r2
 800d0aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d0ac:	693b      	ldr	r3, [r7, #16]
 800d0ae:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800d0b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800d0b4:	683b      	ldr	r3, [r7, #0]
 800d0b6:	031b      	lsls	r3, r3, #12
 800d0b8:	b29b      	uxth	r3, r3
 800d0ba:	693a      	ldr	r2, [r7, #16]
 800d0bc:	4313      	orrs	r3, r2
 800d0be:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d0c0:	697b      	ldr	r3, [r7, #20]
 800d0c2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800d0c6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800d0c8:	68bb      	ldr	r3, [r7, #8]
 800d0ca:	011b      	lsls	r3, r3, #4
 800d0cc:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800d0d0:	697a      	ldr	r2, [r7, #20]
 800d0d2:	4313      	orrs	r3, r2
 800d0d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	693a      	ldr	r2, [r7, #16]
 800d0da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	697a      	ldr	r2, [r7, #20]
 800d0e0:	621a      	str	r2, [r3, #32]
}
 800d0e2:	bf00      	nop
 800d0e4:	371c      	adds	r7, #28
 800d0e6:	46bd      	mov	sp, r7
 800d0e8:	bc80      	pop	{r7}
 800d0ea:	4770      	bx	lr

0800d0ec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d0ec:	b480      	push	{r7}
 800d0ee:	b087      	sub	sp, #28
 800d0f0:	af00      	add	r7, sp, #0
 800d0f2:	60f8      	str	r0, [r7, #12]
 800d0f4:	60b9      	str	r1, [r7, #8]
 800d0f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	6a1b      	ldr	r3, [r3, #32]
 800d0fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	6a1b      	ldr	r3, [r3, #32]
 800d102:	f023 0210 	bic.w	r2, r3, #16
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	699b      	ldr	r3, [r3, #24]
 800d10e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d110:	693b      	ldr	r3, [r7, #16]
 800d112:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800d116:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	031b      	lsls	r3, r3, #12
 800d11c:	693a      	ldr	r2, [r7, #16]
 800d11e:	4313      	orrs	r3, r2
 800d120:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d122:	697b      	ldr	r3, [r7, #20]
 800d124:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800d128:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d12a:	68bb      	ldr	r3, [r7, #8]
 800d12c:	011b      	lsls	r3, r3, #4
 800d12e:	697a      	ldr	r2, [r7, #20]
 800d130:	4313      	orrs	r3, r2
 800d132:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	693a      	ldr	r2, [r7, #16]
 800d138:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	697a      	ldr	r2, [r7, #20]
 800d13e:	621a      	str	r2, [r3, #32]
}
 800d140:	bf00      	nop
 800d142:	371c      	adds	r7, #28
 800d144:	46bd      	mov	sp, r7
 800d146:	bc80      	pop	{r7}
 800d148:	4770      	bx	lr

0800d14a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800d14a:	b480      	push	{r7}
 800d14c:	b087      	sub	sp, #28
 800d14e:	af00      	add	r7, sp, #0
 800d150:	60f8      	str	r0, [r7, #12]
 800d152:	60b9      	str	r1, [r7, #8]
 800d154:	607a      	str	r2, [r7, #4]
 800d156:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	6a1b      	ldr	r3, [r3, #32]
 800d15c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	6a1b      	ldr	r3, [r3, #32]
 800d162:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	69db      	ldr	r3, [r3, #28]
 800d16e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800d170:	693b      	ldr	r3, [r7, #16]
 800d172:	f023 0303 	bic.w	r3, r3, #3
 800d176:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800d178:	693a      	ldr	r2, [r7, #16]
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	4313      	orrs	r3, r2
 800d17e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800d180:	693b      	ldr	r3, [r7, #16]
 800d182:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800d186:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800d188:	683b      	ldr	r3, [r7, #0]
 800d18a:	011b      	lsls	r3, r3, #4
 800d18c:	b2db      	uxtb	r3, r3
 800d18e:	693a      	ldr	r2, [r7, #16]
 800d190:	4313      	orrs	r3, r2
 800d192:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 800d194:	697b      	ldr	r3, [r7, #20]
 800d196:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800d19a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 800d19c:	68bb      	ldr	r3, [r7, #8]
 800d19e:	021b      	lsls	r3, r3, #8
 800d1a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d1a4:	697a      	ldr	r2, [r7, #20]
 800d1a6:	4313      	orrs	r3, r2
 800d1a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	693a      	ldr	r2, [r7, #16]
 800d1ae:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	697a      	ldr	r2, [r7, #20]
 800d1b4:	621a      	str	r2, [r3, #32]
}
 800d1b6:	bf00      	nop
 800d1b8:	371c      	adds	r7, #28
 800d1ba:	46bd      	mov	sp, r7
 800d1bc:	bc80      	pop	{r7}
 800d1be:	4770      	bx	lr

0800d1c0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800d1c0:	b480      	push	{r7}
 800d1c2:	b087      	sub	sp, #28
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	60f8      	str	r0, [r7, #12]
 800d1c8:	60b9      	str	r1, [r7, #8]
 800d1ca:	607a      	str	r2, [r7, #4]
 800d1cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	6a1b      	ldr	r3, [r3, #32]
 800d1d2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	6a1b      	ldr	r3, [r3, #32]
 800d1d8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	69db      	ldr	r3, [r3, #28]
 800d1e4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800d1e6:	693b      	ldr	r3, [r7, #16]
 800d1e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d1ec:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	021b      	lsls	r3, r3, #8
 800d1f2:	693a      	ldr	r2, [r7, #16]
 800d1f4:	4313      	orrs	r3, r2
 800d1f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800d1f8:	693b      	ldr	r3, [r7, #16]
 800d1fa:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800d1fe:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800d200:	683b      	ldr	r3, [r7, #0]
 800d202:	031b      	lsls	r3, r3, #12
 800d204:	b29b      	uxth	r3, r3
 800d206:	693a      	ldr	r2, [r7, #16]
 800d208:	4313      	orrs	r3, r2
 800d20a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 800d20c:	697b      	ldr	r3, [r7, #20]
 800d20e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800d212:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 800d214:	68bb      	ldr	r3, [r7, #8]
 800d216:	031b      	lsls	r3, r3, #12
 800d218:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d21c:	697a      	ldr	r2, [r7, #20]
 800d21e:	4313      	orrs	r3, r2
 800d220:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	693a      	ldr	r2, [r7, #16]
 800d226:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	697a      	ldr	r2, [r7, #20]
 800d22c:	621a      	str	r2, [r3, #32]
}
 800d22e:	bf00      	nop
 800d230:	371c      	adds	r7, #28
 800d232:	46bd      	mov	sp, r7
 800d234:	bc80      	pop	{r7}
 800d236:	4770      	bx	lr

0800d238 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d238:	b480      	push	{r7}
 800d23a:	b085      	sub	sp, #20
 800d23c:	af00      	add	r7, sp, #0
 800d23e:	6078      	str	r0, [r7, #4]
 800d240:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	689b      	ldr	r3, [r3, #8]
 800d246:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d24e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d250:	683a      	ldr	r2, [r7, #0]
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	4313      	orrs	r3, r2
 800d256:	f043 0307 	orr.w	r3, r3, #7
 800d25a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	68fa      	ldr	r2, [r7, #12]
 800d260:	609a      	str	r2, [r3, #8]
}
 800d262:	bf00      	nop
 800d264:	3714      	adds	r7, #20
 800d266:	46bd      	mov	sp, r7
 800d268:	bc80      	pop	{r7}
 800d26a:	4770      	bx	lr

0800d26c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d26c:	b480      	push	{r7}
 800d26e:	b087      	sub	sp, #28
 800d270:	af00      	add	r7, sp, #0
 800d272:	60f8      	str	r0, [r7, #12]
 800d274:	60b9      	str	r1, [r7, #8]
 800d276:	607a      	str	r2, [r7, #4]
 800d278:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	689b      	ldr	r3, [r3, #8]
 800d27e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d280:	697b      	ldr	r3, [r7, #20]
 800d282:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d286:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d288:	683b      	ldr	r3, [r7, #0]
 800d28a:	021a      	lsls	r2, r3, #8
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	431a      	orrs	r2, r3
 800d290:	68bb      	ldr	r3, [r7, #8]
 800d292:	4313      	orrs	r3, r2
 800d294:	697a      	ldr	r2, [r7, #20]
 800d296:	4313      	orrs	r3, r2
 800d298:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	697a      	ldr	r2, [r7, #20]
 800d29e:	609a      	str	r2, [r3, #8]
}
 800d2a0:	bf00      	nop
 800d2a2:	371c      	adds	r7, #28
 800d2a4:	46bd      	mov	sp, r7
 800d2a6:	bc80      	pop	{r7}
 800d2a8:	4770      	bx	lr

0800d2aa <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d2aa:	b480      	push	{r7}
 800d2ac:	b087      	sub	sp, #28
 800d2ae:	af00      	add	r7, sp, #0
 800d2b0:	60f8      	str	r0, [r7, #12]
 800d2b2:	60b9      	str	r1, [r7, #8]
 800d2b4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d2b6:	68bb      	ldr	r3, [r7, #8]
 800d2b8:	f003 031f 	and.w	r3, r3, #31
 800d2bc:	2201      	movs	r2, #1
 800d2be:	fa02 f303 	lsl.w	r3, r2, r3
 800d2c2:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	6a1a      	ldr	r2, [r3, #32]
 800d2c8:	697b      	ldr	r3, [r7, #20]
 800d2ca:	43db      	mvns	r3, r3
 800d2cc:	401a      	ands	r2, r3
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	6a1a      	ldr	r2, [r3, #32]
 800d2d6:	68bb      	ldr	r3, [r7, #8]
 800d2d8:	f003 031f 	and.w	r3, r3, #31
 800d2dc:	6879      	ldr	r1, [r7, #4]
 800d2de:	fa01 f303 	lsl.w	r3, r1, r3
 800d2e2:	431a      	orrs	r2, r3
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	621a      	str	r2, [r3, #32]
}
 800d2e8:	bf00      	nop
 800d2ea:	371c      	adds	r7, #28
 800d2ec:	46bd      	mov	sp, r7
 800d2ee:	bc80      	pop	{r7}
 800d2f0:	4770      	bx	lr
	...

0800d2f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d2f4:	b480      	push	{r7}
 800d2f6:	b085      	sub	sp, #20
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	6078      	str	r0, [r7, #4]
 800d2fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d304:	2b01      	cmp	r3, #1
 800d306:	d101      	bne.n	800d30c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d308:	2302      	movs	r3, #2
 800d30a:	e050      	b.n	800d3ae <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	2201      	movs	r2, #1
 800d310:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	2202      	movs	r2, #2
 800d318:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	685b      	ldr	r3, [r3, #4]
 800d322:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	689b      	ldr	r3, [r3, #8]
 800d32a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d332:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d334:	683b      	ldr	r3, [r7, #0]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	68fa      	ldr	r2, [r7, #12]
 800d33a:	4313      	orrs	r3, r2
 800d33c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	68fa      	ldr	r2, [r7, #12]
 800d344:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	4a1b      	ldr	r2, [pc, #108]	@ (800d3b8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800d34c:	4293      	cmp	r3, r2
 800d34e:	d018      	beq.n	800d382 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	4a19      	ldr	r2, [pc, #100]	@ (800d3bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800d356:	4293      	cmp	r3, r2
 800d358:	d013      	beq.n	800d382 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d362:	d00e      	beq.n	800d382 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	4a15      	ldr	r2, [pc, #84]	@ (800d3c0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800d36a:	4293      	cmp	r3, r2
 800d36c:	d009      	beq.n	800d382 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	4a14      	ldr	r2, [pc, #80]	@ (800d3c4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800d374:	4293      	cmp	r3, r2
 800d376:	d004      	beq.n	800d382 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	4a12      	ldr	r2, [pc, #72]	@ (800d3c8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800d37e:	4293      	cmp	r3, r2
 800d380:	d10c      	bne.n	800d39c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d382:	68bb      	ldr	r3, [r7, #8]
 800d384:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d388:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d38a:	683b      	ldr	r3, [r7, #0]
 800d38c:	685b      	ldr	r3, [r3, #4]
 800d38e:	68ba      	ldr	r2, [r7, #8]
 800d390:	4313      	orrs	r3, r2
 800d392:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	68ba      	ldr	r2, [r7, #8]
 800d39a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	2201      	movs	r2, #1
 800d3a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	2200      	movs	r2, #0
 800d3a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d3ac:	2300      	movs	r3, #0
}
 800d3ae:	4618      	mov	r0, r3
 800d3b0:	3714      	adds	r7, #20
 800d3b2:	46bd      	mov	sp, r7
 800d3b4:	bc80      	pop	{r7}
 800d3b6:	4770      	bx	lr
 800d3b8:	40012c00 	.word	0x40012c00
 800d3bc:	40013400 	.word	0x40013400
 800d3c0:	40000400 	.word	0x40000400
 800d3c4:	40000800 	.word	0x40000800
 800d3c8:	40000c00 	.word	0x40000c00

0800d3cc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d3cc:	b480      	push	{r7}
 800d3ce:	b085      	sub	sp, #20
 800d3d0:	af00      	add	r7, sp, #0
 800d3d2:	6078      	str	r0, [r7, #4]
 800d3d4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d3d6:	2300      	movs	r3, #0
 800d3d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d3e0:	2b01      	cmp	r3, #1
 800d3e2:	d101      	bne.n	800d3e8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d3e4:	2302      	movs	r3, #2
 800d3e6:	e03d      	b.n	800d464 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	2201      	movs	r2, #1
 800d3ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800d3f6:	683b      	ldr	r3, [r7, #0]
 800d3f8:	68db      	ldr	r3, [r3, #12]
 800d3fa:	4313      	orrs	r3, r2
 800d3fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800d404:	683b      	ldr	r3, [r7, #0]
 800d406:	689b      	ldr	r3, [r3, #8]
 800d408:	4313      	orrs	r3, r2
 800d40a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800d412:	683b      	ldr	r3, [r7, #0]
 800d414:	685b      	ldr	r3, [r3, #4]
 800d416:	4313      	orrs	r3, r2
 800d418:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800d420:	683b      	ldr	r3, [r7, #0]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	4313      	orrs	r3, r2
 800d426:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800d42e:	683b      	ldr	r3, [r7, #0]
 800d430:	691b      	ldr	r3, [r3, #16]
 800d432:	4313      	orrs	r3, r2
 800d434:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800d43c:	683b      	ldr	r3, [r7, #0]
 800d43e:	695b      	ldr	r3, [r3, #20]
 800d440:	4313      	orrs	r3, r2
 800d442:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800d44a:	683b      	ldr	r3, [r7, #0]
 800d44c:	69db      	ldr	r3, [r3, #28]
 800d44e:	4313      	orrs	r3, r2
 800d450:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	68fa      	ldr	r2, [r7, #12]
 800d458:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	2200      	movs	r2, #0
 800d45e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d462:	2300      	movs	r3, #0
}
 800d464:	4618      	mov	r0, r3
 800d466:	3714      	adds	r7, #20
 800d468:	46bd      	mov	sp, r7
 800d46a:	bc80      	pop	{r7}
 800d46c:	4770      	bx	lr

0800d46e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d46e:	b480      	push	{r7}
 800d470:	b083      	sub	sp, #12
 800d472:	af00      	add	r7, sp, #0
 800d474:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d476:	bf00      	nop
 800d478:	370c      	adds	r7, #12
 800d47a:	46bd      	mov	sp, r7
 800d47c:	bc80      	pop	{r7}
 800d47e:	4770      	bx	lr

0800d480 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d480:	b480      	push	{r7}
 800d482:	b083      	sub	sp, #12
 800d484:	af00      	add	r7, sp, #0
 800d486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d488:	bf00      	nop
 800d48a:	370c      	adds	r7, #12
 800d48c:	46bd      	mov	sp, r7
 800d48e:	bc80      	pop	{r7}
 800d490:	4770      	bx	lr

0800d492 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d492:	b580      	push	{r7, lr}
 800d494:	b082      	sub	sp, #8
 800d496:	af00      	add	r7, sp, #0
 800d498:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d101      	bne.n	800d4a4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d4a0:	2301      	movs	r3, #1
 800d4a2:	e042      	b.n	800d52a <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d4aa:	b2db      	uxtb	r3, r3
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d106      	bne.n	800d4be <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	2200      	movs	r2, #0
 800d4b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d4b8:	6878      	ldr	r0, [r7, #4]
 800d4ba:	f7fc fe49 	bl	800a150 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	2224      	movs	r2, #36	@ 0x24
 800d4c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	68da      	ldr	r2, [r3, #12]
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800d4d4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800d4d6:	6878      	ldr	r0, [r7, #4]
 800d4d8:	f000 ff30 	bl	800e33c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	691a      	ldr	r2, [r3, #16]
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800d4ea:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	695a      	ldr	r2, [r3, #20]
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800d4fa:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	68da      	ldr	r2, [r3, #12]
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800d50a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	2200      	movs	r2, #0
 800d510:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	2220      	movs	r2, #32
 800d516:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	2220      	movs	r2, #32
 800d51e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	2200      	movs	r2, #0
 800d526:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800d528:	2300      	movs	r3, #0
}
 800d52a:	4618      	mov	r0, r3
 800d52c:	3708      	adds	r7, #8
 800d52e:	46bd      	mov	sp, r7
 800d530:	bd80      	pop	{r7, pc}
	...

0800d534 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800d534:	b580      	push	{r7, lr}
 800d536:	b08c      	sub	sp, #48	@ 0x30
 800d538:	af00      	add	r7, sp, #0
 800d53a:	60f8      	str	r0, [r7, #12]
 800d53c:	60b9      	str	r1, [r7, #8]
 800d53e:	4613      	mov	r3, r2
 800d540:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d548:	b2db      	uxtb	r3, r3
 800d54a:	2b20      	cmp	r3, #32
 800d54c:	d156      	bne.n	800d5fc <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800d54e:	68bb      	ldr	r3, [r7, #8]
 800d550:	2b00      	cmp	r3, #0
 800d552:	d002      	beq.n	800d55a <HAL_UART_Transmit_DMA+0x26>
 800d554:	88fb      	ldrh	r3, [r7, #6]
 800d556:	2b00      	cmp	r3, #0
 800d558:	d101      	bne.n	800d55e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800d55a:	2301      	movs	r3, #1
 800d55c:	e04f      	b.n	800d5fe <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800d55e:	68ba      	ldr	r2, [r7, #8]
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	88fa      	ldrh	r2, [r7, #6]
 800d568:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	88fa      	ldrh	r2, [r7, #6]
 800d56e:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	2200      	movs	r2, #0
 800d574:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	2221      	movs	r2, #33	@ 0x21
 800d57a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d582:	4a21      	ldr	r2, [pc, #132]	@ (800d608 <HAL_UART_Transmit_DMA+0xd4>)
 800d584:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d58a:	4a20      	ldr	r2, [pc, #128]	@ (800d60c <HAL_UART_Transmit_DMA+0xd8>)
 800d58c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d592:	4a1f      	ldr	r2, [pc, #124]	@ (800d610 <HAL_UART_Transmit_DMA+0xdc>)
 800d594:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d59a:	2200      	movs	r2, #0
 800d59c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 800d59e:	f107 0308 	add.w	r3, r7, #8
 800d5a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800d5a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5aa:	6819      	ldr	r1, [r3, #0]
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	3304      	adds	r3, #4
 800d5b2:	461a      	mov	r2, r3
 800d5b4:	88fb      	ldrh	r3, [r7, #6]
 800d5b6:	f7fd f96f 	bl	800a898 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800d5c2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	3314      	adds	r3, #20
 800d5ca:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5cc:	69bb      	ldr	r3, [r7, #24]
 800d5ce:	e853 3f00 	ldrex	r3, [r3]
 800d5d2:	617b      	str	r3, [r7, #20]
   return(result);
 800d5d4:	697b      	ldr	r3, [r7, #20]
 800d5d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d5da:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	3314      	adds	r3, #20
 800d5e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d5e4:	627a      	str	r2, [r7, #36]	@ 0x24
 800d5e6:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5e8:	6a39      	ldr	r1, [r7, #32]
 800d5ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d5ec:	e841 2300 	strex	r3, r2, [r1]
 800d5f0:	61fb      	str	r3, [r7, #28]
   return(result);
 800d5f2:	69fb      	ldr	r3, [r7, #28]
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d1e5      	bne.n	800d5c4 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 800d5f8:	2300      	movs	r3, #0
 800d5fa:	e000      	b.n	800d5fe <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 800d5fc:	2302      	movs	r3, #2
  }
}
 800d5fe:	4618      	mov	r0, r3
 800d600:	3730      	adds	r7, #48	@ 0x30
 800d602:	46bd      	mov	sp, r7
 800d604:	bd80      	pop	{r7, pc}
 800d606:	bf00      	nop
 800d608:	0800dbd1 	.word	0x0800dbd1
 800d60c:	0800dc6b 	.word	0x0800dc6b
 800d610:	0800ddef 	.word	0x0800ddef

0800d614 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d614:	b580      	push	{r7, lr}
 800d616:	b084      	sub	sp, #16
 800d618:	af00      	add	r7, sp, #0
 800d61a:	60f8      	str	r0, [r7, #12]
 800d61c:	60b9      	str	r1, [r7, #8]
 800d61e:	4613      	mov	r3, r2
 800d620:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d628:	b2db      	uxtb	r3, r3
 800d62a:	2b20      	cmp	r3, #32
 800d62c:	d112      	bne.n	800d654 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800d62e:	68bb      	ldr	r3, [r7, #8]
 800d630:	2b00      	cmp	r3, #0
 800d632:	d002      	beq.n	800d63a <HAL_UART_Receive_DMA+0x26>
 800d634:	88fb      	ldrh	r3, [r7, #6]
 800d636:	2b00      	cmp	r3, #0
 800d638:	d101      	bne.n	800d63e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800d63a:	2301      	movs	r3, #1
 800d63c:	e00b      	b.n	800d656 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	2200      	movs	r2, #0
 800d642:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800d644:	88fb      	ldrh	r3, [r7, #6]
 800d646:	461a      	mov	r2, r3
 800d648:	68b9      	ldr	r1, [r7, #8]
 800d64a:	68f8      	ldr	r0, [r7, #12]
 800d64c:	f000 fc1a 	bl	800de84 <UART_Start_Receive_DMA>
 800d650:	4603      	mov	r3, r0
 800d652:	e000      	b.n	800d656 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800d654:	2302      	movs	r3, #2
  }
}
 800d656:	4618      	mov	r0, r3
 800d658:	3710      	adds	r7, #16
 800d65a:	46bd      	mov	sp, r7
 800d65c:	bd80      	pop	{r7, pc}
	...

0800d660 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d660:	b580      	push	{r7, lr}
 800d662:	b0ba      	sub	sp, #232	@ 0xe8
 800d664:	af00      	add	r7, sp, #0
 800d666:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	68db      	ldr	r3, [r3, #12]
 800d678:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	695b      	ldr	r3, [r3, #20]
 800d682:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800d686:	2300      	movs	r3, #0
 800d688:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800d68c:	2300      	movs	r3, #0
 800d68e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800d692:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d696:	f003 030f 	and.w	r3, r3, #15
 800d69a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800d69e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d10f      	bne.n	800d6c6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800d6a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d6aa:	f003 0320 	and.w	r3, r3, #32
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d009      	beq.n	800d6c6 <HAL_UART_IRQHandler+0x66>
 800d6b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d6b6:	f003 0320 	and.w	r3, r3, #32
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d003      	beq.n	800d6c6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800d6be:	6878      	ldr	r0, [r7, #4]
 800d6c0:	f000 fd7e 	bl	800e1c0 <UART_Receive_IT>
      return;
 800d6c4:	e25b      	b.n	800db7e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800d6c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	f000 80de 	beq.w	800d88c <HAL_UART_IRQHandler+0x22c>
 800d6d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d6d4:	f003 0301 	and.w	r3, r3, #1
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d106      	bne.n	800d6ea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800d6dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d6e0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	f000 80d1 	beq.w	800d88c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800d6ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d6ee:	f003 0301 	and.w	r3, r3, #1
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d00b      	beq.n	800d70e <HAL_UART_IRQHandler+0xae>
 800d6f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d6fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d005      	beq.n	800d70e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d706:	f043 0201 	orr.w	r2, r3, #1
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d70e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d712:	f003 0304 	and.w	r3, r3, #4
 800d716:	2b00      	cmp	r3, #0
 800d718:	d00b      	beq.n	800d732 <HAL_UART_IRQHandler+0xd2>
 800d71a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d71e:	f003 0301 	and.w	r3, r3, #1
 800d722:	2b00      	cmp	r3, #0
 800d724:	d005      	beq.n	800d732 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d72a:	f043 0202 	orr.w	r2, r3, #2
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d732:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d736:	f003 0302 	and.w	r3, r3, #2
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d00b      	beq.n	800d756 <HAL_UART_IRQHandler+0xf6>
 800d73e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d742:	f003 0301 	and.w	r3, r3, #1
 800d746:	2b00      	cmp	r3, #0
 800d748:	d005      	beq.n	800d756 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d74e:	f043 0204 	orr.w	r2, r3, #4
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800d756:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d75a:	f003 0308 	and.w	r3, r3, #8
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d011      	beq.n	800d786 <HAL_UART_IRQHandler+0x126>
 800d762:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d766:	f003 0320 	and.w	r3, r3, #32
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d105      	bne.n	800d77a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800d76e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d772:	f003 0301 	and.w	r3, r3, #1
 800d776:	2b00      	cmp	r3, #0
 800d778:	d005      	beq.n	800d786 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d77e:	f043 0208 	orr.w	r2, r3, #8
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	f000 81f2 	beq.w	800db74 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800d790:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d794:	f003 0320 	and.w	r3, r3, #32
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d008      	beq.n	800d7ae <HAL_UART_IRQHandler+0x14e>
 800d79c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d7a0:	f003 0320 	and.w	r3, r3, #32
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d002      	beq.n	800d7ae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800d7a8:	6878      	ldr	r0, [r7, #4]
 800d7aa:	f000 fd09 	bl	800e1c0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	695b      	ldr	r3, [r3, #20]
 800d7b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	bf14      	ite	ne
 800d7bc:	2301      	movne	r3, #1
 800d7be:	2300      	moveq	r3, #0
 800d7c0:	b2db      	uxtb	r3, r3
 800d7c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d7ca:	f003 0308 	and.w	r3, r3, #8
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d103      	bne.n	800d7da <HAL_UART_IRQHandler+0x17a>
 800d7d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d04f      	beq.n	800d87a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d7da:	6878      	ldr	r0, [r7, #4]
 800d7dc:	f000 fc13 	bl	800e006 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	695b      	ldr	r3, [r3, #20]
 800d7e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d041      	beq.n	800d872 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	3314      	adds	r3, #20
 800d7f4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d7fc:	e853 3f00 	ldrex	r3, [r3]
 800d800:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800d804:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d808:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d80c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	3314      	adds	r3, #20
 800d816:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800d81a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800d81e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d822:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800d826:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800d82a:	e841 2300 	strex	r3, r2, [r1]
 800d82e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800d832:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d836:	2b00      	cmp	r3, #0
 800d838:	d1d9      	bne.n	800d7ee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d013      	beq.n	800d86a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d846:	4a7e      	ldr	r2, [pc, #504]	@ (800da40 <HAL_UART_IRQHandler+0x3e0>)
 800d848:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d84e:	4618      	mov	r0, r3
 800d850:	f7fd f8be 	bl	800a9d0 <HAL_DMA_Abort_IT>
 800d854:	4603      	mov	r3, r0
 800d856:	2b00      	cmp	r3, #0
 800d858:	d016      	beq.n	800d888 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d85e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d860:	687a      	ldr	r2, [r7, #4]
 800d862:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800d864:	4610      	mov	r0, r2
 800d866:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d868:	e00e      	b.n	800d888 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d86a:	6878      	ldr	r0, [r7, #4]
 800d86c:	f000 f99c 	bl	800dba8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d870:	e00a      	b.n	800d888 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d872:	6878      	ldr	r0, [r7, #4]
 800d874:	f000 f998 	bl	800dba8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d878:	e006      	b.n	800d888 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d87a:	6878      	ldr	r0, [r7, #4]
 800d87c:	f000 f994 	bl	800dba8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	2200      	movs	r2, #0
 800d884:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800d886:	e175      	b.n	800db74 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d888:	bf00      	nop
    return;
 800d88a:	e173      	b.n	800db74 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d890:	2b01      	cmp	r3, #1
 800d892:	f040 814f 	bne.w	800db34 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800d896:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d89a:	f003 0310 	and.w	r3, r3, #16
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	f000 8148 	beq.w	800db34 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800d8a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d8a8:	f003 0310 	and.w	r3, r3, #16
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	f000 8141 	beq.w	800db34 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800d8b2:	2300      	movs	r3, #0
 800d8b4:	60bb      	str	r3, [r7, #8]
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	60bb      	str	r3, [r7, #8]
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	685b      	ldr	r3, [r3, #4]
 800d8c4:	60bb      	str	r3, [r7, #8]
 800d8c6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	695b      	ldr	r3, [r3, #20]
 800d8ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	f000 80b6 	beq.w	800da44 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	685b      	ldr	r3, [r3, #4]
 800d8e0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d8e4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	f000 8145 	beq.w	800db78 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800d8f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d8f6:	429a      	cmp	r2, r3
 800d8f8:	f080 813e 	bcs.w	800db78 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d902:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d908:	699b      	ldr	r3, [r3, #24]
 800d90a:	2b20      	cmp	r3, #32
 800d90c:	f000 8088 	beq.w	800da20 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	330c      	adds	r3, #12
 800d916:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d91a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d91e:	e853 3f00 	ldrex	r3, [r3]
 800d922:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800d926:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d92a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d92e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	330c      	adds	r3, #12
 800d938:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800d93c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800d940:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d944:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800d948:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800d94c:	e841 2300 	strex	r3, r2, [r1]
 800d950:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800d954:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d1d9      	bne.n	800d910 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	3314      	adds	r3, #20
 800d962:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d964:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d966:	e853 3f00 	ldrex	r3, [r3]
 800d96a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800d96c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d96e:	f023 0301 	bic.w	r3, r3, #1
 800d972:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	3314      	adds	r3, #20
 800d97c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800d980:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800d984:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d986:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800d988:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800d98c:	e841 2300 	strex	r3, r2, [r1]
 800d990:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800d992:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d994:	2b00      	cmp	r3, #0
 800d996:	d1e1      	bne.n	800d95c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	3314      	adds	r3, #20
 800d99e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9a0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d9a2:	e853 3f00 	ldrex	r3, [r3]
 800d9a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800d9a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d9aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d9ae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	3314      	adds	r3, #20
 800d9b8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800d9bc:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800d9be:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9c0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d9c2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d9c4:	e841 2300 	strex	r3, r2, [r1]
 800d9c8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800d9ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d1e3      	bne.n	800d998 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	2220      	movs	r2, #32
 800d9d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	2200      	movs	r2, #0
 800d9dc:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	330c      	adds	r3, #12
 800d9e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d9e8:	e853 3f00 	ldrex	r3, [r3]
 800d9ec:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d9ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d9f0:	f023 0310 	bic.w	r3, r3, #16
 800d9f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	330c      	adds	r3, #12
 800d9fe:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800da02:	65ba      	str	r2, [r7, #88]	@ 0x58
 800da04:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da06:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800da08:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800da0a:	e841 2300 	strex	r3, r2, [r1]
 800da0e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800da10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800da12:	2b00      	cmp	r3, #0
 800da14:	d1e3      	bne.n	800d9de <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800da1a:	4618      	mov	r0, r3
 800da1c:	f7fc ff9c 	bl	800a958 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	2202      	movs	r2, #2
 800da24:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800da2e:	b29b      	uxth	r3, r3
 800da30:	1ad3      	subs	r3, r2, r3
 800da32:	b29b      	uxth	r3, r3
 800da34:	4619      	mov	r1, r3
 800da36:	6878      	ldr	r0, [r7, #4]
 800da38:	f000 f8bf 	bl	800dbba <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800da3c:	e09c      	b.n	800db78 <HAL_UART_IRQHandler+0x518>
 800da3e:	bf00      	nop
 800da40:	0800e0cb 	.word	0x0800e0cb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800da4c:	b29b      	uxth	r3, r3
 800da4e:	1ad3      	subs	r3, r2, r3
 800da50:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800da58:	b29b      	uxth	r3, r3
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	f000 808e 	beq.w	800db7c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800da60:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800da64:	2b00      	cmp	r3, #0
 800da66:	f000 8089 	beq.w	800db7c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	330c      	adds	r3, #12
 800da70:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da74:	e853 3f00 	ldrex	r3, [r3]
 800da78:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800da7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800da7c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800da80:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	330c      	adds	r3, #12
 800da8a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800da8e:	647a      	str	r2, [r7, #68]	@ 0x44
 800da90:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da92:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800da94:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800da96:	e841 2300 	strex	r3, r2, [r1]
 800da9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800da9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d1e3      	bne.n	800da6a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	3314      	adds	r3, #20
 800daa8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800daaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800daac:	e853 3f00 	ldrex	r3, [r3]
 800dab0:	623b      	str	r3, [r7, #32]
   return(result);
 800dab2:	6a3b      	ldr	r3, [r7, #32]
 800dab4:	f023 0301 	bic.w	r3, r3, #1
 800dab8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	3314      	adds	r3, #20
 800dac2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800dac6:	633a      	str	r2, [r7, #48]	@ 0x30
 800dac8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800daca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800dacc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dace:	e841 2300 	strex	r3, r2, [r1]
 800dad2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800dad4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d1e3      	bne.n	800daa2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	2220      	movs	r2, #32
 800dade:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	2200      	movs	r2, #0
 800dae6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	330c      	adds	r3, #12
 800daee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800daf0:	693b      	ldr	r3, [r7, #16]
 800daf2:	e853 3f00 	ldrex	r3, [r3]
 800daf6:	60fb      	str	r3, [r7, #12]
   return(result);
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	f023 0310 	bic.w	r3, r3, #16
 800dafe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	330c      	adds	r3, #12
 800db08:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800db0c:	61fa      	str	r2, [r7, #28]
 800db0e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db10:	69b9      	ldr	r1, [r7, #24]
 800db12:	69fa      	ldr	r2, [r7, #28]
 800db14:	e841 2300 	strex	r3, r2, [r1]
 800db18:	617b      	str	r3, [r7, #20]
   return(result);
 800db1a:	697b      	ldr	r3, [r7, #20]
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d1e3      	bne.n	800dae8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	2202      	movs	r2, #2
 800db24:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800db26:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800db2a:	4619      	mov	r1, r3
 800db2c:	6878      	ldr	r0, [r7, #4]
 800db2e:	f000 f844 	bl	800dbba <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800db32:	e023      	b.n	800db7c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800db34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800db38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d009      	beq.n	800db54 <HAL_UART_IRQHandler+0x4f4>
 800db40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800db44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d003      	beq.n	800db54 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800db4c:	6878      	ldr	r0, [r7, #4]
 800db4e:	f000 fad0 	bl	800e0f2 <UART_Transmit_IT>
    return;
 800db52:	e014      	b.n	800db7e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800db54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800db58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d00e      	beq.n	800db7e <HAL_UART_IRQHandler+0x51e>
 800db60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800db64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d008      	beq.n	800db7e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800db6c:	6878      	ldr	r0, [r7, #4]
 800db6e:	f000 fb0f 	bl	800e190 <UART_EndTransmit_IT>
    return;
 800db72:	e004      	b.n	800db7e <HAL_UART_IRQHandler+0x51e>
    return;
 800db74:	bf00      	nop
 800db76:	e002      	b.n	800db7e <HAL_UART_IRQHandler+0x51e>
      return;
 800db78:	bf00      	nop
 800db7a:	e000      	b.n	800db7e <HAL_UART_IRQHandler+0x51e>
      return;
 800db7c:	bf00      	nop
  }
}
 800db7e:	37e8      	adds	r7, #232	@ 0xe8
 800db80:	46bd      	mov	sp, r7
 800db82:	bd80      	pop	{r7, pc}

0800db84 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800db84:	b480      	push	{r7}
 800db86:	b083      	sub	sp, #12
 800db88:	af00      	add	r7, sp, #0
 800db8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800db8c:	bf00      	nop
 800db8e:	370c      	adds	r7, #12
 800db90:	46bd      	mov	sp, r7
 800db92:	bc80      	pop	{r7}
 800db94:	4770      	bx	lr

0800db96 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800db96:	b480      	push	{r7}
 800db98:	b083      	sub	sp, #12
 800db9a:	af00      	add	r7, sp, #0
 800db9c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800db9e:	bf00      	nop
 800dba0:	370c      	adds	r7, #12
 800dba2:	46bd      	mov	sp, r7
 800dba4:	bc80      	pop	{r7}
 800dba6:	4770      	bx	lr

0800dba8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800dba8:	b480      	push	{r7}
 800dbaa:	b083      	sub	sp, #12
 800dbac:	af00      	add	r7, sp, #0
 800dbae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800dbb0:	bf00      	nop
 800dbb2:	370c      	adds	r7, #12
 800dbb4:	46bd      	mov	sp, r7
 800dbb6:	bc80      	pop	{r7}
 800dbb8:	4770      	bx	lr

0800dbba <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800dbba:	b480      	push	{r7}
 800dbbc:	b083      	sub	sp, #12
 800dbbe:	af00      	add	r7, sp, #0
 800dbc0:	6078      	str	r0, [r7, #4]
 800dbc2:	460b      	mov	r3, r1
 800dbc4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800dbc6:	bf00      	nop
 800dbc8:	370c      	adds	r7, #12
 800dbca:	46bd      	mov	sp, r7
 800dbcc:	bc80      	pop	{r7}
 800dbce:	4770      	bx	lr

0800dbd0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800dbd0:	b580      	push	{r7, lr}
 800dbd2:	b090      	sub	sp, #64	@ 0x40
 800dbd4:	af00      	add	r7, sp, #0
 800dbd6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dbdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	f003 0320 	and.w	r3, r3, #32
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d137      	bne.n	800dc5c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800dbec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dbee:	2200      	movs	r2, #0
 800dbf0:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800dbf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	3314      	adds	r3, #20
 800dbf8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbfc:	e853 3f00 	ldrex	r3, [r3]
 800dc00:	623b      	str	r3, [r7, #32]
   return(result);
 800dc02:	6a3b      	ldr	r3, [r7, #32]
 800dc04:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800dc08:	63bb      	str	r3, [r7, #56]	@ 0x38
 800dc0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	3314      	adds	r3, #20
 800dc10:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dc12:	633a      	str	r2, [r7, #48]	@ 0x30
 800dc14:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc16:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800dc18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dc1a:	e841 2300 	strex	r3, r2, [r1]
 800dc1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800dc20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d1e5      	bne.n	800dbf2 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800dc26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	330c      	adds	r3, #12
 800dc2c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc2e:	693b      	ldr	r3, [r7, #16]
 800dc30:	e853 3f00 	ldrex	r3, [r3]
 800dc34:	60fb      	str	r3, [r7, #12]
   return(result);
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dc3c:	637b      	str	r3, [r7, #52]	@ 0x34
 800dc3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	330c      	adds	r3, #12
 800dc44:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dc46:	61fa      	str	r2, [r7, #28]
 800dc48:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc4a:	69b9      	ldr	r1, [r7, #24]
 800dc4c:	69fa      	ldr	r2, [r7, #28]
 800dc4e:	e841 2300 	strex	r3, r2, [r1]
 800dc52:	617b      	str	r3, [r7, #20]
   return(result);
 800dc54:	697b      	ldr	r3, [r7, #20]
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d1e5      	bne.n	800dc26 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800dc5a:	e002      	b.n	800dc62 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800dc5c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800dc5e:	f7fa fa43 	bl	80080e8 <HAL_UART_TxCpltCallback>
}
 800dc62:	bf00      	nop
 800dc64:	3740      	adds	r7, #64	@ 0x40
 800dc66:	46bd      	mov	sp, r7
 800dc68:	bd80      	pop	{r7, pc}

0800dc6a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800dc6a:	b580      	push	{r7, lr}
 800dc6c:	b084      	sub	sp, #16
 800dc6e:	af00      	add	r7, sp, #0
 800dc70:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc76:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800dc78:	68f8      	ldr	r0, [r7, #12]
 800dc7a:	f7ff ff83 	bl	800db84 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dc7e:	bf00      	nop
 800dc80:	3710      	adds	r7, #16
 800dc82:	46bd      	mov	sp, r7
 800dc84:	bd80      	pop	{r7, pc}

0800dc86 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800dc86:	b580      	push	{r7, lr}
 800dc88:	b09c      	sub	sp, #112	@ 0x70
 800dc8a:	af00      	add	r7, sp, #0
 800dc8c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc92:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	f003 0320 	and.w	r3, r3, #32
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d172      	bne.n	800dd88 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800dca2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dca4:	2200      	movs	r2, #0
 800dca6:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dca8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	330c      	adds	r3, #12
 800dcae:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcb0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dcb2:	e853 3f00 	ldrex	r3, [r3]
 800dcb6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800dcb8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dcba:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800dcbe:	66bb      	str	r3, [r7, #104]	@ 0x68
 800dcc0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	330c      	adds	r3, #12
 800dcc6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800dcc8:	65ba      	str	r2, [r7, #88]	@ 0x58
 800dcca:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dccc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800dcce:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800dcd0:	e841 2300 	strex	r3, r2, [r1]
 800dcd4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800dcd6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d1e5      	bne.n	800dca8 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dcdc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	3314      	adds	r3, #20
 800dce2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dce4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dce6:	e853 3f00 	ldrex	r3, [r3]
 800dcea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800dcec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dcee:	f023 0301 	bic.w	r3, r3, #1
 800dcf2:	667b      	str	r3, [r7, #100]	@ 0x64
 800dcf4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	3314      	adds	r3, #20
 800dcfa:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800dcfc:	647a      	str	r2, [r7, #68]	@ 0x44
 800dcfe:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd00:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800dd02:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800dd04:	e841 2300 	strex	r3, r2, [r1]
 800dd08:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800dd0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d1e5      	bne.n	800dcdc <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dd10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	3314      	adds	r3, #20
 800dd16:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd1a:	e853 3f00 	ldrex	r3, [r3]
 800dd1e:	623b      	str	r3, [r7, #32]
   return(result);
 800dd20:	6a3b      	ldr	r3, [r7, #32]
 800dd22:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dd26:	663b      	str	r3, [r7, #96]	@ 0x60
 800dd28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	3314      	adds	r3, #20
 800dd2e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800dd30:	633a      	str	r2, [r7, #48]	@ 0x30
 800dd32:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd34:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800dd36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dd38:	e841 2300 	strex	r3, r2, [r1]
 800dd3c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800dd3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d1e5      	bne.n	800dd10 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800dd44:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dd46:	2220      	movs	r2, #32
 800dd48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dd4c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dd4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dd50:	2b01      	cmp	r3, #1
 800dd52:	d119      	bne.n	800dd88 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dd54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	330c      	adds	r3, #12
 800dd5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd5c:	693b      	ldr	r3, [r7, #16]
 800dd5e:	e853 3f00 	ldrex	r3, [r3]
 800dd62:	60fb      	str	r3, [r7, #12]
   return(result);
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	f023 0310 	bic.w	r3, r3, #16
 800dd6a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800dd6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	330c      	adds	r3, #12
 800dd72:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800dd74:	61fa      	str	r2, [r7, #28]
 800dd76:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd78:	69b9      	ldr	r1, [r7, #24]
 800dd7a:	69fa      	ldr	r2, [r7, #28]
 800dd7c:	e841 2300 	strex	r3, r2, [r1]
 800dd80:	617b      	str	r3, [r7, #20]
   return(result);
 800dd82:	697b      	ldr	r3, [r7, #20]
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d1e5      	bne.n	800dd54 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800dd88:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dd8a:	2200      	movs	r2, #0
 800dd8c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dd8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dd90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dd92:	2b01      	cmp	r3, #1
 800dd94:	d106      	bne.n	800dda4 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800dd96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dd98:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800dd9a:	4619      	mov	r1, r3
 800dd9c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800dd9e:	f7ff ff0c 	bl	800dbba <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800dda2:	e002      	b.n	800ddaa <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800dda4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800dda6:	f7fa f9ad 	bl	8008104 <HAL_UART_RxCpltCallback>
}
 800ddaa:	bf00      	nop
 800ddac:	3770      	adds	r7, #112	@ 0x70
 800ddae:	46bd      	mov	sp, r7
 800ddb0:	bd80      	pop	{r7, pc}

0800ddb2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ddb2:	b580      	push	{r7, lr}
 800ddb4:	b084      	sub	sp, #16
 800ddb6:	af00      	add	r7, sp, #0
 800ddb8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ddbe:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	2201      	movs	r2, #1
 800ddc4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ddca:	2b01      	cmp	r3, #1
 800ddcc:	d108      	bne.n	800dde0 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800ddd2:	085b      	lsrs	r3, r3, #1
 800ddd4:	b29b      	uxth	r3, r3
 800ddd6:	4619      	mov	r1, r3
 800ddd8:	68f8      	ldr	r0, [r7, #12]
 800ddda:	f7ff feee 	bl	800dbba <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ddde:	e002      	b.n	800dde6 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800dde0:	68f8      	ldr	r0, [r7, #12]
 800dde2:	f7ff fed8 	bl	800db96 <HAL_UART_RxHalfCpltCallback>
}
 800dde6:	bf00      	nop
 800dde8:	3710      	adds	r7, #16
 800ddea:	46bd      	mov	sp, r7
 800ddec:	bd80      	pop	{r7, pc}

0800ddee <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ddee:	b580      	push	{r7, lr}
 800ddf0:	b084      	sub	sp, #16
 800ddf2:	af00      	add	r7, sp, #0
 800ddf4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800ddf6:	2300      	movs	r3, #0
 800ddf8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ddfe:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800de00:	68bb      	ldr	r3, [r7, #8]
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	695b      	ldr	r3, [r3, #20]
 800de06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	bf14      	ite	ne
 800de0e:	2301      	movne	r3, #1
 800de10:	2300      	moveq	r3, #0
 800de12:	b2db      	uxtb	r3, r3
 800de14:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800de16:	68bb      	ldr	r3, [r7, #8]
 800de18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800de1c:	b2db      	uxtb	r3, r3
 800de1e:	2b21      	cmp	r3, #33	@ 0x21
 800de20:	d108      	bne.n	800de34 <UART_DMAError+0x46>
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	2b00      	cmp	r3, #0
 800de26:	d005      	beq.n	800de34 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800de28:	68bb      	ldr	r3, [r7, #8]
 800de2a:	2200      	movs	r2, #0
 800de2c:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800de2e:	68b8      	ldr	r0, [r7, #8]
 800de30:	f000 f8c2 	bl	800dfb8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800de34:	68bb      	ldr	r3, [r7, #8]
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	695b      	ldr	r3, [r3, #20]
 800de3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800de3e:	2b00      	cmp	r3, #0
 800de40:	bf14      	ite	ne
 800de42:	2301      	movne	r3, #1
 800de44:	2300      	moveq	r3, #0
 800de46:	b2db      	uxtb	r3, r3
 800de48:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800de4a:	68bb      	ldr	r3, [r7, #8]
 800de4c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800de50:	b2db      	uxtb	r3, r3
 800de52:	2b22      	cmp	r3, #34	@ 0x22
 800de54:	d108      	bne.n	800de68 <UART_DMAError+0x7a>
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d005      	beq.n	800de68 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800de5c:	68bb      	ldr	r3, [r7, #8]
 800de5e:	2200      	movs	r2, #0
 800de60:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800de62:	68b8      	ldr	r0, [r7, #8]
 800de64:	f000 f8cf 	bl	800e006 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800de68:	68bb      	ldr	r3, [r7, #8]
 800de6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800de6c:	f043 0210 	orr.w	r2, r3, #16
 800de70:	68bb      	ldr	r3, [r7, #8]
 800de72:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800de74:	68b8      	ldr	r0, [r7, #8]
 800de76:	f7ff fe97 	bl	800dba8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800de7a:	bf00      	nop
 800de7c:	3710      	adds	r7, #16
 800de7e:	46bd      	mov	sp, r7
 800de80:	bd80      	pop	{r7, pc}
	...

0800de84 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800de84:	b580      	push	{r7, lr}
 800de86:	b098      	sub	sp, #96	@ 0x60
 800de88:	af00      	add	r7, sp, #0
 800de8a:	60f8      	str	r0, [r7, #12]
 800de8c:	60b9      	str	r1, [r7, #8]
 800de8e:	4613      	mov	r3, r2
 800de90:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800de92:	68ba      	ldr	r2, [r7, #8]
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	88fa      	ldrh	r2, [r7, #6]
 800de9c:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	2200      	movs	r2, #0
 800dea2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	2222      	movs	r2, #34	@ 0x22
 800dea8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800deb0:	4a3e      	ldr	r2, [pc, #248]	@ (800dfac <UART_Start_Receive_DMA+0x128>)
 800deb2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800deb8:	4a3d      	ldr	r2, [pc, #244]	@ (800dfb0 <UART_Start_Receive_DMA+0x12c>)
 800deba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dec0:	4a3c      	ldr	r2, [pc, #240]	@ (800dfb4 <UART_Start_Receive_DMA+0x130>)
 800dec2:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dec8:	2200      	movs	r2, #0
 800deca:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800decc:	f107 0308 	add.w	r3, r7, #8
 800ded0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	3304      	adds	r3, #4
 800dedc:	4619      	mov	r1, r3
 800dede:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dee0:	681a      	ldr	r2, [r3, #0]
 800dee2:	88fb      	ldrh	r3, [r7, #6]
 800dee4:	f7fc fcd8 	bl	800a898 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800dee8:	2300      	movs	r3, #0
 800deea:	613b      	str	r3, [r7, #16]
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	613b      	str	r3, [r7, #16]
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	685b      	ldr	r3, [r3, #4]
 800defa:	613b      	str	r3, [r7, #16]
 800defc:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	691b      	ldr	r3, [r3, #16]
 800df02:	2b00      	cmp	r3, #0
 800df04:	d019      	beq.n	800df3a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	330c      	adds	r3, #12
 800df0c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800df10:	e853 3f00 	ldrex	r3, [r3]
 800df14:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800df16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800df18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800df1c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	330c      	adds	r3, #12
 800df24:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800df26:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800df28:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df2a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800df2c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800df2e:	e841 2300 	strex	r3, r2, [r1]
 800df32:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800df34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800df36:	2b00      	cmp	r3, #0
 800df38:	d1e5      	bne.n	800df06 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	3314      	adds	r3, #20
 800df40:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df44:	e853 3f00 	ldrex	r3, [r3]
 800df48:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800df4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df4c:	f043 0301 	orr.w	r3, r3, #1
 800df50:	657b      	str	r3, [r7, #84]	@ 0x54
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	3314      	adds	r3, #20
 800df58:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800df5a:	63ba      	str	r2, [r7, #56]	@ 0x38
 800df5c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df5e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800df60:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800df62:	e841 2300 	strex	r3, r2, [r1]
 800df66:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800df68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d1e5      	bne.n	800df3a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	3314      	adds	r3, #20
 800df74:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df76:	69bb      	ldr	r3, [r7, #24]
 800df78:	e853 3f00 	ldrex	r3, [r3]
 800df7c:	617b      	str	r3, [r7, #20]
   return(result);
 800df7e:	697b      	ldr	r3, [r7, #20]
 800df80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800df84:	653b      	str	r3, [r7, #80]	@ 0x50
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	3314      	adds	r3, #20
 800df8c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800df8e:	627a      	str	r2, [r7, #36]	@ 0x24
 800df90:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df92:	6a39      	ldr	r1, [r7, #32]
 800df94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800df96:	e841 2300 	strex	r3, r2, [r1]
 800df9a:	61fb      	str	r3, [r7, #28]
   return(result);
 800df9c:	69fb      	ldr	r3, [r7, #28]
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d1e5      	bne.n	800df6e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800dfa2:	2300      	movs	r3, #0
}
 800dfa4:	4618      	mov	r0, r3
 800dfa6:	3760      	adds	r7, #96	@ 0x60
 800dfa8:	46bd      	mov	sp, r7
 800dfaa:	bd80      	pop	{r7, pc}
 800dfac:	0800dc87 	.word	0x0800dc87
 800dfb0:	0800ddb3 	.word	0x0800ddb3
 800dfb4:	0800ddef 	.word	0x0800ddef

0800dfb8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800dfb8:	b480      	push	{r7}
 800dfba:	b089      	sub	sp, #36	@ 0x24
 800dfbc:	af00      	add	r7, sp, #0
 800dfbe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	330c      	adds	r3, #12
 800dfc6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	e853 3f00 	ldrex	r3, [r3]
 800dfce:	60bb      	str	r3, [r7, #8]
   return(result);
 800dfd0:	68bb      	ldr	r3, [r7, #8]
 800dfd2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800dfd6:	61fb      	str	r3, [r7, #28]
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	330c      	adds	r3, #12
 800dfde:	69fa      	ldr	r2, [r7, #28]
 800dfe0:	61ba      	str	r2, [r7, #24]
 800dfe2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfe4:	6979      	ldr	r1, [r7, #20]
 800dfe6:	69ba      	ldr	r2, [r7, #24]
 800dfe8:	e841 2300 	strex	r3, r2, [r1]
 800dfec:	613b      	str	r3, [r7, #16]
   return(result);
 800dfee:	693b      	ldr	r3, [r7, #16]
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d1e5      	bne.n	800dfc0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	2220      	movs	r2, #32
 800dff8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800dffc:	bf00      	nop
 800dffe:	3724      	adds	r7, #36	@ 0x24
 800e000:	46bd      	mov	sp, r7
 800e002:	bc80      	pop	{r7}
 800e004:	4770      	bx	lr

0800e006 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e006:	b480      	push	{r7}
 800e008:	b095      	sub	sp, #84	@ 0x54
 800e00a:	af00      	add	r7, sp, #0
 800e00c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	330c      	adds	r3, #12
 800e014:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e016:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e018:	e853 3f00 	ldrex	r3, [r3]
 800e01c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800e01e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e020:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e024:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	330c      	adds	r3, #12
 800e02c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e02e:	643a      	str	r2, [r7, #64]	@ 0x40
 800e030:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e032:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e034:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e036:	e841 2300 	strex	r3, r2, [r1]
 800e03a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e03c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d1e5      	bne.n	800e00e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	3314      	adds	r3, #20
 800e048:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e04a:	6a3b      	ldr	r3, [r7, #32]
 800e04c:	e853 3f00 	ldrex	r3, [r3]
 800e050:	61fb      	str	r3, [r7, #28]
   return(result);
 800e052:	69fb      	ldr	r3, [r7, #28]
 800e054:	f023 0301 	bic.w	r3, r3, #1
 800e058:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	3314      	adds	r3, #20
 800e060:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e062:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e064:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e066:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e068:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e06a:	e841 2300 	strex	r3, r2, [r1]
 800e06e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e072:	2b00      	cmp	r3, #0
 800e074:	d1e5      	bne.n	800e042 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e07a:	2b01      	cmp	r3, #1
 800e07c:	d119      	bne.n	800e0b2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	330c      	adds	r3, #12
 800e084:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	e853 3f00 	ldrex	r3, [r3]
 800e08c:	60bb      	str	r3, [r7, #8]
   return(result);
 800e08e:	68bb      	ldr	r3, [r7, #8]
 800e090:	f023 0310 	bic.w	r3, r3, #16
 800e094:	647b      	str	r3, [r7, #68]	@ 0x44
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	330c      	adds	r3, #12
 800e09c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e09e:	61ba      	str	r2, [r7, #24]
 800e0a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0a2:	6979      	ldr	r1, [r7, #20]
 800e0a4:	69ba      	ldr	r2, [r7, #24]
 800e0a6:	e841 2300 	strex	r3, r2, [r1]
 800e0aa:	613b      	str	r3, [r7, #16]
   return(result);
 800e0ac:	693b      	ldr	r3, [r7, #16]
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d1e5      	bne.n	800e07e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	2220      	movs	r2, #32
 800e0b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	2200      	movs	r2, #0
 800e0be:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800e0c0:	bf00      	nop
 800e0c2:	3754      	adds	r7, #84	@ 0x54
 800e0c4:	46bd      	mov	sp, r7
 800e0c6:	bc80      	pop	{r7}
 800e0c8:	4770      	bx	lr

0800e0ca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e0ca:	b580      	push	{r7, lr}
 800e0cc:	b084      	sub	sp, #16
 800e0ce:	af00      	add	r7, sp, #0
 800e0d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e0d6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	2200      	movs	r2, #0
 800e0dc:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	2200      	movs	r2, #0
 800e0e2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e0e4:	68f8      	ldr	r0, [r7, #12]
 800e0e6:	f7ff fd5f 	bl	800dba8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e0ea:	bf00      	nop
 800e0ec:	3710      	adds	r7, #16
 800e0ee:	46bd      	mov	sp, r7
 800e0f0:	bd80      	pop	{r7, pc}

0800e0f2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800e0f2:	b480      	push	{r7}
 800e0f4:	b085      	sub	sp, #20
 800e0f6:	af00      	add	r7, sp, #0
 800e0f8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e100:	b2db      	uxtb	r3, r3
 800e102:	2b21      	cmp	r3, #33	@ 0x21
 800e104:	d13e      	bne.n	800e184 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	689b      	ldr	r3, [r3, #8]
 800e10a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e10e:	d114      	bne.n	800e13a <UART_Transmit_IT+0x48>
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	691b      	ldr	r3, [r3, #16]
 800e114:	2b00      	cmp	r3, #0
 800e116:	d110      	bne.n	800e13a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	6a1b      	ldr	r3, [r3, #32]
 800e11c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	881b      	ldrh	r3, [r3, #0]
 800e122:	461a      	mov	r2, r3
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e12c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	6a1b      	ldr	r3, [r3, #32]
 800e132:	1c9a      	adds	r2, r3, #2
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	621a      	str	r2, [r3, #32]
 800e138:	e008      	b.n	800e14c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	6a1b      	ldr	r3, [r3, #32]
 800e13e:	1c59      	adds	r1, r3, #1
 800e140:	687a      	ldr	r2, [r7, #4]
 800e142:	6211      	str	r1, [r2, #32]
 800e144:	781a      	ldrb	r2, [r3, #0]
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800e150:	b29b      	uxth	r3, r3
 800e152:	3b01      	subs	r3, #1
 800e154:	b29b      	uxth	r3, r3
 800e156:	687a      	ldr	r2, [r7, #4]
 800e158:	4619      	mov	r1, r3
 800e15a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d10f      	bne.n	800e180 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	68da      	ldr	r2, [r3, #12]
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800e16e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	68da      	ldr	r2, [r3, #12]
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e17e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800e180:	2300      	movs	r3, #0
 800e182:	e000      	b.n	800e186 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800e184:	2302      	movs	r3, #2
  }
}
 800e186:	4618      	mov	r0, r3
 800e188:	3714      	adds	r7, #20
 800e18a:	46bd      	mov	sp, r7
 800e18c:	bc80      	pop	{r7}
 800e18e:	4770      	bx	lr

0800e190 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e190:	b580      	push	{r7, lr}
 800e192:	b082      	sub	sp, #8
 800e194:	af00      	add	r7, sp, #0
 800e196:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	68da      	ldr	r2, [r3, #12]
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800e1a6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	2220      	movs	r2, #32
 800e1ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e1b0:	6878      	ldr	r0, [r7, #4]
 800e1b2:	f7f9 ff99 	bl	80080e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800e1b6:	2300      	movs	r3, #0
}
 800e1b8:	4618      	mov	r0, r3
 800e1ba:	3708      	adds	r7, #8
 800e1bc:	46bd      	mov	sp, r7
 800e1be:	bd80      	pop	{r7, pc}

0800e1c0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800e1c0:	b580      	push	{r7, lr}
 800e1c2:	b08c      	sub	sp, #48	@ 0x30
 800e1c4:	af00      	add	r7, sp, #0
 800e1c6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e1ce:	b2db      	uxtb	r3, r3
 800e1d0:	2b22      	cmp	r3, #34	@ 0x22
 800e1d2:	f040 80ae 	bne.w	800e332 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	689b      	ldr	r3, [r3, #8]
 800e1da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e1de:	d117      	bne.n	800e210 <UART_Receive_IT+0x50>
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	691b      	ldr	r3, [r3, #16]
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d113      	bne.n	800e210 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800e1e8:	2300      	movs	r3, #0
 800e1ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e1f0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	685b      	ldr	r3, [r3, #4]
 800e1f8:	b29b      	uxth	r3, r3
 800e1fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e1fe:	b29a      	uxth	r2, r3
 800e200:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e202:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e208:	1c9a      	adds	r2, r3, #2
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	629a      	str	r2, [r3, #40]	@ 0x28
 800e20e:	e026      	b.n	800e25e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e214:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800e216:	2300      	movs	r3, #0
 800e218:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	689b      	ldr	r3, [r3, #8]
 800e21e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e222:	d007      	beq.n	800e234 <UART_Receive_IT+0x74>
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	689b      	ldr	r3, [r3, #8]
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d10a      	bne.n	800e242 <UART_Receive_IT+0x82>
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	691b      	ldr	r3, [r3, #16]
 800e230:	2b00      	cmp	r3, #0
 800e232:	d106      	bne.n	800e242 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	685b      	ldr	r3, [r3, #4]
 800e23a:	b2da      	uxtb	r2, r3
 800e23c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e23e:	701a      	strb	r2, [r3, #0]
 800e240:	e008      	b.n	800e254 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	685b      	ldr	r3, [r3, #4]
 800e248:	b2db      	uxtb	r3, r3
 800e24a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e24e:	b2da      	uxtb	r2, r3
 800e250:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e252:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e258:	1c5a      	adds	r2, r3, #1
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800e262:	b29b      	uxth	r3, r3
 800e264:	3b01      	subs	r3, #1
 800e266:	b29b      	uxth	r3, r3
 800e268:	687a      	ldr	r2, [r7, #4]
 800e26a:	4619      	mov	r1, r3
 800e26c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d15d      	bne.n	800e32e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	68da      	ldr	r2, [r3, #12]
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	f022 0220 	bic.w	r2, r2, #32
 800e280:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	68da      	ldr	r2, [r3, #12]
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800e290:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	695a      	ldr	r2, [r3, #20]
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	f022 0201 	bic.w	r2, r2, #1
 800e2a0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	2220      	movs	r2, #32
 800e2a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	2200      	movs	r2, #0
 800e2ae:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e2b4:	2b01      	cmp	r3, #1
 800e2b6:	d135      	bne.n	800e324 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	2200      	movs	r2, #0
 800e2bc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	330c      	adds	r3, #12
 800e2c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2c6:	697b      	ldr	r3, [r7, #20]
 800e2c8:	e853 3f00 	ldrex	r3, [r3]
 800e2cc:	613b      	str	r3, [r7, #16]
   return(result);
 800e2ce:	693b      	ldr	r3, [r7, #16]
 800e2d0:	f023 0310 	bic.w	r3, r3, #16
 800e2d4:	627b      	str	r3, [r7, #36]	@ 0x24
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	330c      	adds	r3, #12
 800e2dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e2de:	623a      	str	r2, [r7, #32]
 800e2e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2e2:	69f9      	ldr	r1, [r7, #28]
 800e2e4:	6a3a      	ldr	r2, [r7, #32]
 800e2e6:	e841 2300 	strex	r3, r2, [r1]
 800e2ea:	61bb      	str	r3, [r7, #24]
   return(result);
 800e2ec:	69bb      	ldr	r3, [r7, #24]
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d1e5      	bne.n	800e2be <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	f003 0310 	and.w	r3, r3, #16
 800e2fc:	2b10      	cmp	r3, #16
 800e2fe:	d10a      	bne.n	800e316 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800e300:	2300      	movs	r3, #0
 800e302:	60fb      	str	r3, [r7, #12]
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	60fb      	str	r3, [r7, #12]
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	685b      	ldr	r3, [r3, #4]
 800e312:	60fb      	str	r3, [r7, #12]
 800e314:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800e31a:	4619      	mov	r1, r3
 800e31c:	6878      	ldr	r0, [r7, #4]
 800e31e:	f7ff fc4c 	bl	800dbba <HAL_UARTEx_RxEventCallback>
 800e322:	e002      	b.n	800e32a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800e324:	6878      	ldr	r0, [r7, #4]
 800e326:	f7f9 feed 	bl	8008104 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800e32a:	2300      	movs	r3, #0
 800e32c:	e002      	b.n	800e334 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800e32e:	2300      	movs	r3, #0
 800e330:	e000      	b.n	800e334 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800e332:	2302      	movs	r3, #2
  }
}
 800e334:	4618      	mov	r0, r3
 800e336:	3730      	adds	r7, #48	@ 0x30
 800e338:	46bd      	mov	sp, r7
 800e33a:	bd80      	pop	{r7, pc}

0800e33c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e33c:	b580      	push	{r7, lr}
 800e33e:	b084      	sub	sp, #16
 800e340:	af00      	add	r7, sp, #0
 800e342:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	691b      	ldr	r3, [r3, #16]
 800e34a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	68da      	ldr	r2, [r3, #12]
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	430a      	orrs	r2, r1
 800e358:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	689a      	ldr	r2, [r3, #8]
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	691b      	ldr	r3, [r3, #16]
 800e362:	431a      	orrs	r2, r3
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	695b      	ldr	r3, [r3, #20]
 800e368:	4313      	orrs	r3, r2
 800e36a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	68db      	ldr	r3, [r3, #12]
 800e372:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800e376:	f023 030c 	bic.w	r3, r3, #12
 800e37a:	687a      	ldr	r2, [r7, #4]
 800e37c:	6812      	ldr	r2, [r2, #0]
 800e37e:	68b9      	ldr	r1, [r7, #8]
 800e380:	430b      	orrs	r3, r1
 800e382:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	695b      	ldr	r3, [r3, #20]
 800e38a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	699a      	ldr	r2, [r3, #24]
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	430a      	orrs	r2, r1
 800e398:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	4a2c      	ldr	r2, [pc, #176]	@ (800e450 <UART_SetConfig+0x114>)
 800e3a0:	4293      	cmp	r3, r2
 800e3a2:	d103      	bne.n	800e3ac <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800e3a4:	f7fd fd54 	bl	800be50 <HAL_RCC_GetPCLK2Freq>
 800e3a8:	60f8      	str	r0, [r7, #12]
 800e3aa:	e002      	b.n	800e3b2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800e3ac:	f7fd fd3c 	bl	800be28 <HAL_RCC_GetPCLK1Freq>
 800e3b0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800e3b2:	68fa      	ldr	r2, [r7, #12]
 800e3b4:	4613      	mov	r3, r2
 800e3b6:	009b      	lsls	r3, r3, #2
 800e3b8:	4413      	add	r3, r2
 800e3ba:	009a      	lsls	r2, r3, #2
 800e3bc:	441a      	add	r2, r3
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	685b      	ldr	r3, [r3, #4]
 800e3c2:	009b      	lsls	r3, r3, #2
 800e3c4:	fbb2 f3f3 	udiv	r3, r2, r3
 800e3c8:	4a22      	ldr	r2, [pc, #136]	@ (800e454 <UART_SetConfig+0x118>)
 800e3ca:	fba2 2303 	umull	r2, r3, r2, r3
 800e3ce:	095b      	lsrs	r3, r3, #5
 800e3d0:	0119      	lsls	r1, r3, #4
 800e3d2:	68fa      	ldr	r2, [r7, #12]
 800e3d4:	4613      	mov	r3, r2
 800e3d6:	009b      	lsls	r3, r3, #2
 800e3d8:	4413      	add	r3, r2
 800e3da:	009a      	lsls	r2, r3, #2
 800e3dc:	441a      	add	r2, r3
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	685b      	ldr	r3, [r3, #4]
 800e3e2:	009b      	lsls	r3, r3, #2
 800e3e4:	fbb2 f2f3 	udiv	r2, r2, r3
 800e3e8:	4b1a      	ldr	r3, [pc, #104]	@ (800e454 <UART_SetConfig+0x118>)
 800e3ea:	fba3 0302 	umull	r0, r3, r3, r2
 800e3ee:	095b      	lsrs	r3, r3, #5
 800e3f0:	2064      	movs	r0, #100	@ 0x64
 800e3f2:	fb00 f303 	mul.w	r3, r0, r3
 800e3f6:	1ad3      	subs	r3, r2, r3
 800e3f8:	011b      	lsls	r3, r3, #4
 800e3fa:	3332      	adds	r3, #50	@ 0x32
 800e3fc:	4a15      	ldr	r2, [pc, #84]	@ (800e454 <UART_SetConfig+0x118>)
 800e3fe:	fba2 2303 	umull	r2, r3, r2, r3
 800e402:	095b      	lsrs	r3, r3, #5
 800e404:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e408:	4419      	add	r1, r3
 800e40a:	68fa      	ldr	r2, [r7, #12]
 800e40c:	4613      	mov	r3, r2
 800e40e:	009b      	lsls	r3, r3, #2
 800e410:	4413      	add	r3, r2
 800e412:	009a      	lsls	r2, r3, #2
 800e414:	441a      	add	r2, r3
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	685b      	ldr	r3, [r3, #4]
 800e41a:	009b      	lsls	r3, r3, #2
 800e41c:	fbb2 f2f3 	udiv	r2, r2, r3
 800e420:	4b0c      	ldr	r3, [pc, #48]	@ (800e454 <UART_SetConfig+0x118>)
 800e422:	fba3 0302 	umull	r0, r3, r3, r2
 800e426:	095b      	lsrs	r3, r3, #5
 800e428:	2064      	movs	r0, #100	@ 0x64
 800e42a:	fb00 f303 	mul.w	r3, r0, r3
 800e42e:	1ad3      	subs	r3, r2, r3
 800e430:	011b      	lsls	r3, r3, #4
 800e432:	3332      	adds	r3, #50	@ 0x32
 800e434:	4a07      	ldr	r2, [pc, #28]	@ (800e454 <UART_SetConfig+0x118>)
 800e436:	fba2 2303 	umull	r2, r3, r2, r3
 800e43a:	095b      	lsrs	r3, r3, #5
 800e43c:	f003 020f 	and.w	r2, r3, #15
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	440a      	add	r2, r1
 800e446:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800e448:	bf00      	nop
 800e44a:	3710      	adds	r7, #16
 800e44c:	46bd      	mov	sp, r7
 800e44e:	bd80      	pop	{r7, pc}
 800e450:	40013800 	.word	0x40013800
 800e454:	51eb851f 	.word	0x51eb851f

0800e458 <_Znwj>:
 800e458:	2801      	cmp	r0, #1
 800e45a:	bf38      	it	cc
 800e45c:	2001      	movcc	r0, #1
 800e45e:	b510      	push	{r4, lr}
 800e460:	4604      	mov	r4, r0
 800e462:	4620      	mov	r0, r4
 800e464:	f001 fe52 	bl	801010c <malloc>
 800e468:	b100      	cbz	r0, 800e46c <_Znwj+0x14>
 800e46a:	bd10      	pop	{r4, pc}
 800e46c:	f000 f806 	bl	800e47c <_ZSt15get_new_handlerv>
 800e470:	b908      	cbnz	r0, 800e476 <_Znwj+0x1e>
 800e472:	f001 fe27 	bl	80100c4 <abort>
 800e476:	4780      	blx	r0
 800e478:	e7f3      	b.n	800e462 <_Znwj+0xa>
	...

0800e47c <_ZSt15get_new_handlerv>:
 800e47c:	4b02      	ldr	r3, [pc, #8]	@ (800e488 <_ZSt15get_new_handlerv+0xc>)
 800e47e:	6818      	ldr	r0, [r3, #0]
 800e480:	f3bf 8f5b 	dmb	ish
 800e484:	4770      	bx	lr
 800e486:	bf00      	nop
 800e488:	20008ae8 	.word	0x20008ae8

0800e48c <cos>:
 800e48c:	b530      	push	{r4, r5, lr}
 800e48e:	4d20      	ldr	r5, [pc, #128]	@ (800e510 <cos+0x84>)
 800e490:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 800e494:	42ac      	cmp	r4, r5
 800e496:	4602      	mov	r2, r0
 800e498:	460b      	mov	r3, r1
 800e49a:	b087      	sub	sp, #28
 800e49c:	d806      	bhi.n	800e4ac <cos+0x20>
 800e49e:	2200      	movs	r2, #0
 800e4a0:	2300      	movs	r3, #0
 800e4a2:	b007      	add	sp, #28
 800e4a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e4a8:	f000 b8ee 	b.w	800e688 <__kernel_cos>
 800e4ac:	4d19      	ldr	r5, [pc, #100]	@ (800e514 <cos+0x88>)
 800e4ae:	42ac      	cmp	r4, r5
 800e4b0:	d903      	bls.n	800e4ba <cos+0x2e>
 800e4b2:	f7f1 fec5 	bl	8000240 <__aeabi_dsub>
 800e4b6:	b007      	add	sp, #28
 800e4b8:	bd30      	pop	{r4, r5, pc}
 800e4ba:	aa02      	add	r2, sp, #8
 800e4bc:	f000 fa5c 	bl	800e978 <__ieee754_rem_pio2>
 800e4c0:	f000 0003 	and.w	r0, r0, #3
 800e4c4:	2801      	cmp	r0, #1
 800e4c6:	d009      	beq.n	800e4dc <cos+0x50>
 800e4c8:	2802      	cmp	r0, #2
 800e4ca:	d011      	beq.n	800e4f0 <cos+0x64>
 800e4cc:	b9b8      	cbnz	r0, 800e4fe <cos+0x72>
 800e4ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e4d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e4d6:	f000 f8d7 	bl	800e688 <__kernel_cos>
 800e4da:	e7ec      	b.n	800e4b6 <cos+0x2a>
 800e4dc:	9000      	str	r0, [sp, #0]
 800e4de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e4e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e4e6:	f000 f98f 	bl	800e808 <__kernel_sin>
 800e4ea:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 800e4ee:	e7e2      	b.n	800e4b6 <cos+0x2a>
 800e4f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e4f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e4f8:	f000 f8c6 	bl	800e688 <__kernel_cos>
 800e4fc:	e7f5      	b.n	800e4ea <cos+0x5e>
 800e4fe:	2301      	movs	r3, #1
 800e500:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e504:	9300      	str	r3, [sp, #0]
 800e506:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e50a:	f000 f97d 	bl	800e808 <__kernel_sin>
 800e50e:	e7d2      	b.n	800e4b6 <cos+0x2a>
 800e510:	3fe921fb 	.word	0x3fe921fb
 800e514:	7fefffff 	.word	0x7fefffff

0800e518 <sin>:
 800e518:	b530      	push	{r4, r5, lr}
 800e51a:	4d20      	ldr	r5, [pc, #128]	@ (800e59c <sin+0x84>)
 800e51c:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 800e520:	42ac      	cmp	r4, r5
 800e522:	4602      	mov	r2, r0
 800e524:	460b      	mov	r3, r1
 800e526:	b087      	sub	sp, #28
 800e528:	d806      	bhi.n	800e538 <sin+0x20>
 800e52a:	2300      	movs	r3, #0
 800e52c:	2200      	movs	r2, #0
 800e52e:	9300      	str	r3, [sp, #0]
 800e530:	2300      	movs	r3, #0
 800e532:	f000 f969 	bl	800e808 <__kernel_sin>
 800e536:	e004      	b.n	800e542 <sin+0x2a>
 800e538:	4d19      	ldr	r5, [pc, #100]	@ (800e5a0 <sin+0x88>)
 800e53a:	42ac      	cmp	r4, r5
 800e53c:	d903      	bls.n	800e546 <sin+0x2e>
 800e53e:	f7f1 fe7f 	bl	8000240 <__aeabi_dsub>
 800e542:	b007      	add	sp, #28
 800e544:	bd30      	pop	{r4, r5, pc}
 800e546:	aa02      	add	r2, sp, #8
 800e548:	f000 fa16 	bl	800e978 <__ieee754_rem_pio2>
 800e54c:	f000 0003 	and.w	r0, r0, #3
 800e550:	2801      	cmp	r0, #1
 800e552:	d009      	beq.n	800e568 <sin+0x50>
 800e554:	2802      	cmp	r0, #2
 800e556:	d00e      	beq.n	800e576 <sin+0x5e>
 800e558:	b9c0      	cbnz	r0, 800e58c <sin+0x74>
 800e55a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e55e:	2301      	movs	r3, #1
 800e560:	9300      	str	r3, [sp, #0]
 800e562:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e566:	e7e4      	b.n	800e532 <sin+0x1a>
 800e568:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e56c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e570:	f000 f88a 	bl	800e688 <__kernel_cos>
 800e574:	e7e5      	b.n	800e542 <sin+0x2a>
 800e576:	2301      	movs	r3, #1
 800e578:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e57c:	9300      	str	r3, [sp, #0]
 800e57e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e582:	f000 f941 	bl	800e808 <__kernel_sin>
 800e586:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 800e58a:	e7da      	b.n	800e542 <sin+0x2a>
 800e58c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e590:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e594:	f000 f878 	bl	800e688 <__kernel_cos>
 800e598:	e7f5      	b.n	800e586 <sin+0x6e>
 800e59a:	bf00      	nop
 800e59c:	3fe921fb 	.word	0x3fe921fb
 800e5a0:	7fefffff 	.word	0x7fefffff

0800e5a4 <cosf>:
 800e5a4:	b507      	push	{r0, r1, r2, lr}
 800e5a6:	4a1a      	ldr	r2, [pc, #104]	@ (800e610 <cosf+0x6c>)
 800e5a8:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800e5ac:	4293      	cmp	r3, r2
 800e5ae:	4601      	mov	r1, r0
 800e5b0:	d805      	bhi.n	800e5be <cosf+0x1a>
 800e5b2:	2100      	movs	r1, #0
 800e5b4:	b003      	add	sp, #12
 800e5b6:	f85d eb04 	ldr.w	lr, [sp], #4
 800e5ba:	f000 bbd7 	b.w	800ed6c <__kernel_cosf>
 800e5be:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800e5c2:	d304      	bcc.n	800e5ce <cosf+0x2a>
 800e5c4:	f7f2 fb0a 	bl	8000bdc <__aeabi_fsub>
 800e5c8:	b003      	add	sp, #12
 800e5ca:	f85d fb04 	ldr.w	pc, [sp], #4
 800e5ce:	4669      	mov	r1, sp
 800e5d0:	f000 fcc2 	bl	800ef58 <__ieee754_rem_pio2f>
 800e5d4:	f000 0203 	and.w	r2, r0, #3
 800e5d8:	2a01      	cmp	r2, #1
 800e5da:	d007      	beq.n	800e5ec <cosf+0x48>
 800e5dc:	2a02      	cmp	r2, #2
 800e5de:	d00c      	beq.n	800e5fa <cosf+0x56>
 800e5e0:	b982      	cbnz	r2, 800e604 <cosf+0x60>
 800e5e2:	9901      	ldr	r1, [sp, #4]
 800e5e4:	9800      	ldr	r0, [sp, #0]
 800e5e6:	f000 fbc1 	bl	800ed6c <__kernel_cosf>
 800e5ea:	e7ed      	b.n	800e5c8 <cosf+0x24>
 800e5ec:	9901      	ldr	r1, [sp, #4]
 800e5ee:	9800      	ldr	r0, [sp, #0]
 800e5f0:	f000 fc3c 	bl	800ee6c <__kernel_sinf>
 800e5f4:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800e5f8:	e7e6      	b.n	800e5c8 <cosf+0x24>
 800e5fa:	9901      	ldr	r1, [sp, #4]
 800e5fc:	9800      	ldr	r0, [sp, #0]
 800e5fe:	f000 fbb5 	bl	800ed6c <__kernel_cosf>
 800e602:	e7f7      	b.n	800e5f4 <cosf+0x50>
 800e604:	2201      	movs	r2, #1
 800e606:	9901      	ldr	r1, [sp, #4]
 800e608:	9800      	ldr	r0, [sp, #0]
 800e60a:	f000 fc2f 	bl	800ee6c <__kernel_sinf>
 800e60e:	e7db      	b.n	800e5c8 <cosf+0x24>
 800e610:	3f490fd8 	.word	0x3f490fd8

0800e614 <sinf>:
 800e614:	b507      	push	{r0, r1, r2, lr}
 800e616:	4a1b      	ldr	r2, [pc, #108]	@ (800e684 <sinf+0x70>)
 800e618:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800e61c:	4293      	cmp	r3, r2
 800e61e:	4601      	mov	r1, r0
 800e620:	d806      	bhi.n	800e630 <sinf+0x1c>
 800e622:	2200      	movs	r2, #0
 800e624:	2100      	movs	r1, #0
 800e626:	b003      	add	sp, #12
 800e628:	f85d eb04 	ldr.w	lr, [sp], #4
 800e62c:	f000 bc1e 	b.w	800ee6c <__kernel_sinf>
 800e630:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800e634:	d304      	bcc.n	800e640 <sinf+0x2c>
 800e636:	f7f2 fad1 	bl	8000bdc <__aeabi_fsub>
 800e63a:	b003      	add	sp, #12
 800e63c:	f85d fb04 	ldr.w	pc, [sp], #4
 800e640:	4669      	mov	r1, sp
 800e642:	f000 fc89 	bl	800ef58 <__ieee754_rem_pio2f>
 800e646:	f000 0003 	and.w	r0, r0, #3
 800e64a:	2801      	cmp	r0, #1
 800e64c:	d008      	beq.n	800e660 <sinf+0x4c>
 800e64e:	2802      	cmp	r0, #2
 800e650:	d00b      	beq.n	800e66a <sinf+0x56>
 800e652:	b990      	cbnz	r0, 800e67a <sinf+0x66>
 800e654:	2201      	movs	r2, #1
 800e656:	9901      	ldr	r1, [sp, #4]
 800e658:	9800      	ldr	r0, [sp, #0]
 800e65a:	f000 fc07 	bl	800ee6c <__kernel_sinf>
 800e65e:	e7ec      	b.n	800e63a <sinf+0x26>
 800e660:	9901      	ldr	r1, [sp, #4]
 800e662:	9800      	ldr	r0, [sp, #0]
 800e664:	f000 fb82 	bl	800ed6c <__kernel_cosf>
 800e668:	e7e7      	b.n	800e63a <sinf+0x26>
 800e66a:	2201      	movs	r2, #1
 800e66c:	9901      	ldr	r1, [sp, #4]
 800e66e:	9800      	ldr	r0, [sp, #0]
 800e670:	f000 fbfc 	bl	800ee6c <__kernel_sinf>
 800e674:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800e678:	e7df      	b.n	800e63a <sinf+0x26>
 800e67a:	9901      	ldr	r1, [sp, #4]
 800e67c:	9800      	ldr	r0, [sp, #0]
 800e67e:	f000 fb75 	bl	800ed6c <__kernel_cosf>
 800e682:	e7f7      	b.n	800e674 <sinf+0x60>
 800e684:	3f490fd8 	.word	0x3f490fd8

0800e688 <__kernel_cos>:
 800e688:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e68c:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 800e690:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 800e694:	4680      	mov	r8, r0
 800e696:	4689      	mov	r9, r1
 800e698:	e9cd 2300 	strd	r2, r3, [sp]
 800e69c:	d204      	bcs.n	800e6a8 <__kernel_cos+0x20>
 800e69e:	f7f2 fa21 	bl	8000ae4 <__aeabi_d2iz>
 800e6a2:	2800      	cmp	r0, #0
 800e6a4:	f000 8086 	beq.w	800e7b4 <__kernel_cos+0x12c>
 800e6a8:	4642      	mov	r2, r8
 800e6aa:	464b      	mov	r3, r9
 800e6ac:	4640      	mov	r0, r8
 800e6ae:	4649      	mov	r1, r9
 800e6b0:	f7f1 ff7e 	bl	80005b0 <__aeabi_dmul>
 800e6b4:	2200      	movs	r2, #0
 800e6b6:	4b4e      	ldr	r3, [pc, #312]	@ (800e7f0 <__kernel_cos+0x168>)
 800e6b8:	4604      	mov	r4, r0
 800e6ba:	460d      	mov	r5, r1
 800e6bc:	f7f1 ff78 	bl	80005b0 <__aeabi_dmul>
 800e6c0:	a33f      	add	r3, pc, #252	@ (adr r3, 800e7c0 <__kernel_cos+0x138>)
 800e6c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6c6:	4682      	mov	sl, r0
 800e6c8:	468b      	mov	fp, r1
 800e6ca:	4620      	mov	r0, r4
 800e6cc:	4629      	mov	r1, r5
 800e6ce:	f7f1 ff6f 	bl	80005b0 <__aeabi_dmul>
 800e6d2:	a33d      	add	r3, pc, #244	@ (adr r3, 800e7c8 <__kernel_cos+0x140>)
 800e6d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6d8:	f7f1 fdb4 	bl	8000244 <__adddf3>
 800e6dc:	4622      	mov	r2, r4
 800e6de:	462b      	mov	r3, r5
 800e6e0:	f7f1 ff66 	bl	80005b0 <__aeabi_dmul>
 800e6e4:	a33a      	add	r3, pc, #232	@ (adr r3, 800e7d0 <__kernel_cos+0x148>)
 800e6e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6ea:	f7f1 fda9 	bl	8000240 <__aeabi_dsub>
 800e6ee:	4622      	mov	r2, r4
 800e6f0:	462b      	mov	r3, r5
 800e6f2:	f7f1 ff5d 	bl	80005b0 <__aeabi_dmul>
 800e6f6:	a338      	add	r3, pc, #224	@ (adr r3, 800e7d8 <__kernel_cos+0x150>)
 800e6f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6fc:	f7f1 fda2 	bl	8000244 <__adddf3>
 800e700:	4622      	mov	r2, r4
 800e702:	462b      	mov	r3, r5
 800e704:	f7f1 ff54 	bl	80005b0 <__aeabi_dmul>
 800e708:	a335      	add	r3, pc, #212	@ (adr r3, 800e7e0 <__kernel_cos+0x158>)
 800e70a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e70e:	f7f1 fd97 	bl	8000240 <__aeabi_dsub>
 800e712:	4622      	mov	r2, r4
 800e714:	462b      	mov	r3, r5
 800e716:	f7f1 ff4b 	bl	80005b0 <__aeabi_dmul>
 800e71a:	a333      	add	r3, pc, #204	@ (adr r3, 800e7e8 <__kernel_cos+0x160>)
 800e71c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e720:	f7f1 fd90 	bl	8000244 <__adddf3>
 800e724:	4622      	mov	r2, r4
 800e726:	462b      	mov	r3, r5
 800e728:	f7f1 ff42 	bl	80005b0 <__aeabi_dmul>
 800e72c:	4622      	mov	r2, r4
 800e72e:	462b      	mov	r3, r5
 800e730:	f7f1 ff3e 	bl	80005b0 <__aeabi_dmul>
 800e734:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e738:	4604      	mov	r4, r0
 800e73a:	460d      	mov	r5, r1
 800e73c:	4640      	mov	r0, r8
 800e73e:	4649      	mov	r1, r9
 800e740:	f7f1 ff36 	bl	80005b0 <__aeabi_dmul>
 800e744:	460b      	mov	r3, r1
 800e746:	4602      	mov	r2, r0
 800e748:	4629      	mov	r1, r5
 800e74a:	4620      	mov	r0, r4
 800e74c:	f7f1 fd78 	bl	8000240 <__aeabi_dsub>
 800e750:	4b28      	ldr	r3, [pc, #160]	@ (800e7f4 <__kernel_cos+0x16c>)
 800e752:	4680      	mov	r8, r0
 800e754:	429e      	cmp	r6, r3
 800e756:	4689      	mov	r9, r1
 800e758:	d80e      	bhi.n	800e778 <__kernel_cos+0xf0>
 800e75a:	4602      	mov	r2, r0
 800e75c:	460b      	mov	r3, r1
 800e75e:	4650      	mov	r0, sl
 800e760:	4659      	mov	r1, fp
 800e762:	f7f1 fd6d 	bl	8000240 <__aeabi_dsub>
 800e766:	4602      	mov	r2, r0
 800e768:	2000      	movs	r0, #0
 800e76a:	460b      	mov	r3, r1
 800e76c:	4922      	ldr	r1, [pc, #136]	@ (800e7f8 <__kernel_cos+0x170>)
 800e76e:	f7f1 fd67 	bl	8000240 <__aeabi_dsub>
 800e772:	b003      	add	sp, #12
 800e774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e778:	2400      	movs	r4, #0
 800e77a:	4b20      	ldr	r3, [pc, #128]	@ (800e7fc <__kernel_cos+0x174>)
 800e77c:	4622      	mov	r2, r4
 800e77e:	429e      	cmp	r6, r3
 800e780:	bf8c      	ite	hi
 800e782:	4d1f      	ldrhi	r5, [pc, #124]	@ (800e800 <__kernel_cos+0x178>)
 800e784:	f5a6 1500 	subls.w	r5, r6, #2097152	@ 0x200000
 800e788:	462b      	mov	r3, r5
 800e78a:	2000      	movs	r0, #0
 800e78c:	491a      	ldr	r1, [pc, #104]	@ (800e7f8 <__kernel_cos+0x170>)
 800e78e:	f7f1 fd57 	bl	8000240 <__aeabi_dsub>
 800e792:	4622      	mov	r2, r4
 800e794:	4606      	mov	r6, r0
 800e796:	460f      	mov	r7, r1
 800e798:	462b      	mov	r3, r5
 800e79a:	4650      	mov	r0, sl
 800e79c:	4659      	mov	r1, fp
 800e79e:	f7f1 fd4f 	bl	8000240 <__aeabi_dsub>
 800e7a2:	4642      	mov	r2, r8
 800e7a4:	464b      	mov	r3, r9
 800e7a6:	f7f1 fd4b 	bl	8000240 <__aeabi_dsub>
 800e7aa:	4602      	mov	r2, r0
 800e7ac:	460b      	mov	r3, r1
 800e7ae:	4630      	mov	r0, r6
 800e7b0:	4639      	mov	r1, r7
 800e7b2:	e7dc      	b.n	800e76e <__kernel_cos+0xe6>
 800e7b4:	2000      	movs	r0, #0
 800e7b6:	4910      	ldr	r1, [pc, #64]	@ (800e7f8 <__kernel_cos+0x170>)
 800e7b8:	e7db      	b.n	800e772 <__kernel_cos+0xea>
 800e7ba:	bf00      	nop
 800e7bc:	f3af 8000 	nop.w
 800e7c0:	be8838d4 	.word	0xbe8838d4
 800e7c4:	bda8fae9 	.word	0xbda8fae9
 800e7c8:	bdb4b1c4 	.word	0xbdb4b1c4
 800e7cc:	3e21ee9e 	.word	0x3e21ee9e
 800e7d0:	809c52ad 	.word	0x809c52ad
 800e7d4:	3e927e4f 	.word	0x3e927e4f
 800e7d8:	19cb1590 	.word	0x19cb1590
 800e7dc:	3efa01a0 	.word	0x3efa01a0
 800e7e0:	16c15177 	.word	0x16c15177
 800e7e4:	3f56c16c 	.word	0x3f56c16c
 800e7e8:	5555554c 	.word	0x5555554c
 800e7ec:	3fa55555 	.word	0x3fa55555
 800e7f0:	3fe00000 	.word	0x3fe00000
 800e7f4:	3fd33332 	.word	0x3fd33332
 800e7f8:	3ff00000 	.word	0x3ff00000
 800e7fc:	3fe90000 	.word	0x3fe90000
 800e800:	3fd20000 	.word	0x3fd20000
 800e804:	00000000 	.word	0x00000000

0800e808 <__kernel_sin>:
 800e808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e80c:	461f      	mov	r7, r3
 800e80e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800e812:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800e816:	4604      	mov	r4, r0
 800e818:	460d      	mov	r5, r1
 800e81a:	4616      	mov	r6, r2
 800e81c:	b085      	sub	sp, #20
 800e81e:	d203      	bcs.n	800e828 <__kernel_sin+0x20>
 800e820:	f7f2 f960 	bl	8000ae4 <__aeabi_d2iz>
 800e824:	2800      	cmp	r0, #0
 800e826:	d051      	beq.n	800e8cc <__kernel_sin+0xc4>
 800e828:	4622      	mov	r2, r4
 800e82a:	462b      	mov	r3, r5
 800e82c:	4620      	mov	r0, r4
 800e82e:	4629      	mov	r1, r5
 800e830:	f7f1 febe 	bl	80005b0 <__aeabi_dmul>
 800e834:	4682      	mov	sl, r0
 800e836:	468b      	mov	fp, r1
 800e838:	4602      	mov	r2, r0
 800e83a:	460b      	mov	r3, r1
 800e83c:	4620      	mov	r0, r4
 800e83e:	4629      	mov	r1, r5
 800e840:	f7f1 feb6 	bl	80005b0 <__aeabi_dmul>
 800e844:	a33e      	add	r3, pc, #248	@ (adr r3, 800e940 <__kernel_sin+0x138>)
 800e846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e84a:	4680      	mov	r8, r0
 800e84c:	4689      	mov	r9, r1
 800e84e:	4650      	mov	r0, sl
 800e850:	4659      	mov	r1, fp
 800e852:	f7f1 fead 	bl	80005b0 <__aeabi_dmul>
 800e856:	a33c      	add	r3, pc, #240	@ (adr r3, 800e948 <__kernel_sin+0x140>)
 800e858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e85c:	f7f1 fcf0 	bl	8000240 <__aeabi_dsub>
 800e860:	4652      	mov	r2, sl
 800e862:	465b      	mov	r3, fp
 800e864:	f7f1 fea4 	bl	80005b0 <__aeabi_dmul>
 800e868:	a339      	add	r3, pc, #228	@ (adr r3, 800e950 <__kernel_sin+0x148>)
 800e86a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e86e:	f7f1 fce9 	bl	8000244 <__adddf3>
 800e872:	4652      	mov	r2, sl
 800e874:	465b      	mov	r3, fp
 800e876:	f7f1 fe9b 	bl	80005b0 <__aeabi_dmul>
 800e87a:	a337      	add	r3, pc, #220	@ (adr r3, 800e958 <__kernel_sin+0x150>)
 800e87c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e880:	f7f1 fcde 	bl	8000240 <__aeabi_dsub>
 800e884:	4652      	mov	r2, sl
 800e886:	465b      	mov	r3, fp
 800e888:	f7f1 fe92 	bl	80005b0 <__aeabi_dmul>
 800e88c:	a334      	add	r3, pc, #208	@ (adr r3, 800e960 <__kernel_sin+0x158>)
 800e88e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e892:	f7f1 fcd7 	bl	8000244 <__adddf3>
 800e896:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e898:	e9cd 0100 	strd	r0, r1, [sp]
 800e89c:	b9db      	cbnz	r3, 800e8d6 <__kernel_sin+0xce>
 800e89e:	4602      	mov	r2, r0
 800e8a0:	460b      	mov	r3, r1
 800e8a2:	4650      	mov	r0, sl
 800e8a4:	4659      	mov	r1, fp
 800e8a6:	f7f1 fe83 	bl	80005b0 <__aeabi_dmul>
 800e8aa:	a32f      	add	r3, pc, #188	@ (adr r3, 800e968 <__kernel_sin+0x160>)
 800e8ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8b0:	f7f1 fcc6 	bl	8000240 <__aeabi_dsub>
 800e8b4:	4642      	mov	r2, r8
 800e8b6:	464b      	mov	r3, r9
 800e8b8:	f7f1 fe7a 	bl	80005b0 <__aeabi_dmul>
 800e8bc:	4602      	mov	r2, r0
 800e8be:	460b      	mov	r3, r1
 800e8c0:	4620      	mov	r0, r4
 800e8c2:	4629      	mov	r1, r5
 800e8c4:	f7f1 fcbe 	bl	8000244 <__adddf3>
 800e8c8:	4604      	mov	r4, r0
 800e8ca:	460d      	mov	r5, r1
 800e8cc:	4620      	mov	r0, r4
 800e8ce:	4629      	mov	r1, r5
 800e8d0:	b005      	add	sp, #20
 800e8d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8d6:	2200      	movs	r2, #0
 800e8d8:	4630      	mov	r0, r6
 800e8da:	4639      	mov	r1, r7
 800e8dc:	4b24      	ldr	r3, [pc, #144]	@ (800e970 <__kernel_sin+0x168>)
 800e8de:	f7f1 fe67 	bl	80005b0 <__aeabi_dmul>
 800e8e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e8e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e8ea:	4640      	mov	r0, r8
 800e8ec:	4649      	mov	r1, r9
 800e8ee:	f7f1 fe5f 	bl	80005b0 <__aeabi_dmul>
 800e8f2:	4602      	mov	r2, r0
 800e8f4:	460b      	mov	r3, r1
 800e8f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e8fa:	f7f1 fca1 	bl	8000240 <__aeabi_dsub>
 800e8fe:	4652      	mov	r2, sl
 800e900:	465b      	mov	r3, fp
 800e902:	f7f1 fe55 	bl	80005b0 <__aeabi_dmul>
 800e906:	4632      	mov	r2, r6
 800e908:	463b      	mov	r3, r7
 800e90a:	f7f1 fc99 	bl	8000240 <__aeabi_dsub>
 800e90e:	a316      	add	r3, pc, #88	@ (adr r3, 800e968 <__kernel_sin+0x160>)
 800e910:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e914:	4606      	mov	r6, r0
 800e916:	460f      	mov	r7, r1
 800e918:	4640      	mov	r0, r8
 800e91a:	4649      	mov	r1, r9
 800e91c:	f7f1 fe48 	bl	80005b0 <__aeabi_dmul>
 800e920:	4602      	mov	r2, r0
 800e922:	460b      	mov	r3, r1
 800e924:	4630      	mov	r0, r6
 800e926:	4639      	mov	r1, r7
 800e928:	f7f1 fc8c 	bl	8000244 <__adddf3>
 800e92c:	4602      	mov	r2, r0
 800e92e:	460b      	mov	r3, r1
 800e930:	4620      	mov	r0, r4
 800e932:	4629      	mov	r1, r5
 800e934:	f7f1 fc84 	bl	8000240 <__aeabi_dsub>
 800e938:	e7c6      	b.n	800e8c8 <__kernel_sin+0xc0>
 800e93a:	bf00      	nop
 800e93c:	f3af 8000 	nop.w
 800e940:	5acfd57c 	.word	0x5acfd57c
 800e944:	3de5d93a 	.word	0x3de5d93a
 800e948:	8a2b9ceb 	.word	0x8a2b9ceb
 800e94c:	3e5ae5e6 	.word	0x3e5ae5e6
 800e950:	57b1fe7d 	.word	0x57b1fe7d
 800e954:	3ec71de3 	.word	0x3ec71de3
 800e958:	19c161d5 	.word	0x19c161d5
 800e95c:	3f2a01a0 	.word	0x3f2a01a0
 800e960:	1110f8a6 	.word	0x1110f8a6
 800e964:	3f811111 	.word	0x3f811111
 800e968:	55555549 	.word	0x55555549
 800e96c:	3fc55555 	.word	0x3fc55555
 800e970:	3fe00000 	.word	0x3fe00000
 800e974:	00000000 	.word	0x00000000

0800e978 <__ieee754_rem_pio2>:
 800e978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e97c:	4bc4      	ldr	r3, [pc, #784]	@ (800ec90 <__ieee754_rem_pio2+0x318>)
 800e97e:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 800e982:	b08d      	sub	sp, #52	@ 0x34
 800e984:	4598      	cmp	r8, r3
 800e986:	4606      	mov	r6, r0
 800e988:	460f      	mov	r7, r1
 800e98a:	4614      	mov	r4, r2
 800e98c:	9104      	str	r1, [sp, #16]
 800e98e:	d807      	bhi.n	800e9a0 <__ieee754_rem_pio2+0x28>
 800e990:	e9c2 6700 	strd	r6, r7, [r2]
 800e994:	2300      	movs	r3, #0
 800e996:	2200      	movs	r2, #0
 800e998:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800e99c:	2500      	movs	r5, #0
 800e99e:	e026      	b.n	800e9ee <__ieee754_rem_pio2+0x76>
 800e9a0:	4bbc      	ldr	r3, [pc, #752]	@ (800ec94 <__ieee754_rem_pio2+0x31c>)
 800e9a2:	4598      	cmp	r8, r3
 800e9a4:	d876      	bhi.n	800ea94 <__ieee754_rem_pio2+0x11c>
 800e9a6:	9b04      	ldr	r3, [sp, #16]
 800e9a8:	4dbb      	ldr	r5, [pc, #748]	@ (800ec98 <__ieee754_rem_pio2+0x320>)
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	a3aa      	add	r3, pc, #680	@ (adr r3, 800ec58 <__ieee754_rem_pio2+0x2e0>)
 800e9ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9b2:	dd38      	ble.n	800ea26 <__ieee754_rem_pio2+0xae>
 800e9b4:	f7f1 fc44 	bl	8000240 <__aeabi_dsub>
 800e9b8:	45a8      	cmp	r8, r5
 800e9ba:	4606      	mov	r6, r0
 800e9bc:	460f      	mov	r7, r1
 800e9be:	d01a      	beq.n	800e9f6 <__ieee754_rem_pio2+0x7e>
 800e9c0:	a3a7      	add	r3, pc, #668	@ (adr r3, 800ec60 <__ieee754_rem_pio2+0x2e8>)
 800e9c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9c6:	f7f1 fc3b 	bl	8000240 <__aeabi_dsub>
 800e9ca:	4602      	mov	r2, r0
 800e9cc:	460b      	mov	r3, r1
 800e9ce:	4680      	mov	r8, r0
 800e9d0:	4689      	mov	r9, r1
 800e9d2:	4630      	mov	r0, r6
 800e9d4:	4639      	mov	r1, r7
 800e9d6:	f7f1 fc33 	bl	8000240 <__aeabi_dsub>
 800e9da:	a3a1      	add	r3, pc, #644	@ (adr r3, 800ec60 <__ieee754_rem_pio2+0x2e8>)
 800e9dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9e0:	f7f1 fc2e 	bl	8000240 <__aeabi_dsub>
 800e9e4:	2501      	movs	r5, #1
 800e9e6:	e9c4 8900 	strd	r8, r9, [r4]
 800e9ea:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800e9ee:	4628      	mov	r0, r5
 800e9f0:	b00d      	add	sp, #52	@ 0x34
 800e9f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9f6:	a39c      	add	r3, pc, #624	@ (adr r3, 800ec68 <__ieee754_rem_pio2+0x2f0>)
 800e9f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9fc:	f7f1 fc20 	bl	8000240 <__aeabi_dsub>
 800ea00:	a39b      	add	r3, pc, #620	@ (adr r3, 800ec70 <__ieee754_rem_pio2+0x2f8>)
 800ea02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea06:	4606      	mov	r6, r0
 800ea08:	460f      	mov	r7, r1
 800ea0a:	f7f1 fc19 	bl	8000240 <__aeabi_dsub>
 800ea0e:	4602      	mov	r2, r0
 800ea10:	460b      	mov	r3, r1
 800ea12:	4680      	mov	r8, r0
 800ea14:	4689      	mov	r9, r1
 800ea16:	4630      	mov	r0, r6
 800ea18:	4639      	mov	r1, r7
 800ea1a:	f7f1 fc11 	bl	8000240 <__aeabi_dsub>
 800ea1e:	a394      	add	r3, pc, #592	@ (adr r3, 800ec70 <__ieee754_rem_pio2+0x2f8>)
 800ea20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea24:	e7dc      	b.n	800e9e0 <__ieee754_rem_pio2+0x68>
 800ea26:	f7f1 fc0d 	bl	8000244 <__adddf3>
 800ea2a:	45a8      	cmp	r8, r5
 800ea2c:	4606      	mov	r6, r0
 800ea2e:	460f      	mov	r7, r1
 800ea30:	d018      	beq.n	800ea64 <__ieee754_rem_pio2+0xec>
 800ea32:	a38b      	add	r3, pc, #556	@ (adr r3, 800ec60 <__ieee754_rem_pio2+0x2e8>)
 800ea34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea38:	f7f1 fc04 	bl	8000244 <__adddf3>
 800ea3c:	4602      	mov	r2, r0
 800ea3e:	460b      	mov	r3, r1
 800ea40:	4680      	mov	r8, r0
 800ea42:	4689      	mov	r9, r1
 800ea44:	4630      	mov	r0, r6
 800ea46:	4639      	mov	r1, r7
 800ea48:	f7f1 fbfa 	bl	8000240 <__aeabi_dsub>
 800ea4c:	a384      	add	r3, pc, #528	@ (adr r3, 800ec60 <__ieee754_rem_pio2+0x2e8>)
 800ea4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea52:	f7f1 fbf7 	bl	8000244 <__adddf3>
 800ea56:	f04f 35ff 	mov.w	r5, #4294967295
 800ea5a:	e9c4 8900 	strd	r8, r9, [r4]
 800ea5e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ea62:	e7c4      	b.n	800e9ee <__ieee754_rem_pio2+0x76>
 800ea64:	a380      	add	r3, pc, #512	@ (adr r3, 800ec68 <__ieee754_rem_pio2+0x2f0>)
 800ea66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea6a:	f7f1 fbeb 	bl	8000244 <__adddf3>
 800ea6e:	a380      	add	r3, pc, #512	@ (adr r3, 800ec70 <__ieee754_rem_pio2+0x2f8>)
 800ea70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea74:	4606      	mov	r6, r0
 800ea76:	460f      	mov	r7, r1
 800ea78:	f7f1 fbe4 	bl	8000244 <__adddf3>
 800ea7c:	4602      	mov	r2, r0
 800ea7e:	460b      	mov	r3, r1
 800ea80:	4680      	mov	r8, r0
 800ea82:	4689      	mov	r9, r1
 800ea84:	4630      	mov	r0, r6
 800ea86:	4639      	mov	r1, r7
 800ea88:	f7f1 fbda 	bl	8000240 <__aeabi_dsub>
 800ea8c:	a378      	add	r3, pc, #480	@ (adr r3, 800ec70 <__ieee754_rem_pio2+0x2f8>)
 800ea8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea92:	e7de      	b.n	800ea52 <__ieee754_rem_pio2+0xda>
 800ea94:	4b81      	ldr	r3, [pc, #516]	@ (800ec9c <__ieee754_rem_pio2+0x324>)
 800ea96:	4598      	cmp	r8, r3
 800ea98:	f200 80cf 	bhi.w	800ec3a <__ieee754_rem_pio2+0x2c2>
 800ea9c:	f000 f962 	bl	800ed64 <fabs>
 800eaa0:	a375      	add	r3, pc, #468	@ (adr r3, 800ec78 <__ieee754_rem_pio2+0x300>)
 800eaa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaa6:	4606      	mov	r6, r0
 800eaa8:	460f      	mov	r7, r1
 800eaaa:	f7f1 fd81 	bl	80005b0 <__aeabi_dmul>
 800eaae:	2200      	movs	r2, #0
 800eab0:	4b7b      	ldr	r3, [pc, #492]	@ (800eca0 <__ieee754_rem_pio2+0x328>)
 800eab2:	f7f1 fbc7 	bl	8000244 <__adddf3>
 800eab6:	f7f2 f815 	bl	8000ae4 <__aeabi_d2iz>
 800eaba:	4605      	mov	r5, r0
 800eabc:	f7f1 fd0e 	bl	80004dc <__aeabi_i2d>
 800eac0:	4602      	mov	r2, r0
 800eac2:	460b      	mov	r3, r1
 800eac4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800eac8:	a363      	add	r3, pc, #396	@ (adr r3, 800ec58 <__ieee754_rem_pio2+0x2e0>)
 800eaca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eace:	f7f1 fd6f 	bl	80005b0 <__aeabi_dmul>
 800ead2:	4602      	mov	r2, r0
 800ead4:	460b      	mov	r3, r1
 800ead6:	4630      	mov	r0, r6
 800ead8:	4639      	mov	r1, r7
 800eada:	f7f1 fbb1 	bl	8000240 <__aeabi_dsub>
 800eade:	a360      	add	r3, pc, #384	@ (adr r3, 800ec60 <__ieee754_rem_pio2+0x2e8>)
 800eae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eae4:	4682      	mov	sl, r0
 800eae6:	468b      	mov	fp, r1
 800eae8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eaec:	f7f1 fd60 	bl	80005b0 <__aeabi_dmul>
 800eaf0:	2d1f      	cmp	r5, #31
 800eaf2:	4606      	mov	r6, r0
 800eaf4:	460f      	mov	r7, r1
 800eaf6:	dc0c      	bgt.n	800eb12 <__ieee754_rem_pio2+0x19a>
 800eaf8:	4b6a      	ldr	r3, [pc, #424]	@ (800eca4 <__ieee754_rem_pio2+0x32c>)
 800eafa:	1e6a      	subs	r2, r5, #1
 800eafc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb00:	4543      	cmp	r3, r8
 800eb02:	d006      	beq.n	800eb12 <__ieee754_rem_pio2+0x19a>
 800eb04:	4632      	mov	r2, r6
 800eb06:	463b      	mov	r3, r7
 800eb08:	4650      	mov	r0, sl
 800eb0a:	4659      	mov	r1, fp
 800eb0c:	f7f1 fb98 	bl	8000240 <__aeabi_dsub>
 800eb10:	e00e      	b.n	800eb30 <__ieee754_rem_pio2+0x1b8>
 800eb12:	463b      	mov	r3, r7
 800eb14:	4632      	mov	r2, r6
 800eb16:	4650      	mov	r0, sl
 800eb18:	4659      	mov	r1, fp
 800eb1a:	f7f1 fb91 	bl	8000240 <__aeabi_dsub>
 800eb1e:	ea4f 5328 	mov.w	r3, r8, asr #20
 800eb22:	9305      	str	r3, [sp, #20]
 800eb24:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800eb28:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800eb2c:	2b10      	cmp	r3, #16
 800eb2e:	dc02      	bgt.n	800eb36 <__ieee754_rem_pio2+0x1be>
 800eb30:	e9c4 0100 	strd	r0, r1, [r4]
 800eb34:	e039      	b.n	800ebaa <__ieee754_rem_pio2+0x232>
 800eb36:	a34c      	add	r3, pc, #304	@ (adr r3, 800ec68 <__ieee754_rem_pio2+0x2f0>)
 800eb38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eb40:	f7f1 fd36 	bl	80005b0 <__aeabi_dmul>
 800eb44:	4606      	mov	r6, r0
 800eb46:	460f      	mov	r7, r1
 800eb48:	4602      	mov	r2, r0
 800eb4a:	460b      	mov	r3, r1
 800eb4c:	4650      	mov	r0, sl
 800eb4e:	4659      	mov	r1, fp
 800eb50:	f7f1 fb76 	bl	8000240 <__aeabi_dsub>
 800eb54:	4602      	mov	r2, r0
 800eb56:	460b      	mov	r3, r1
 800eb58:	4680      	mov	r8, r0
 800eb5a:	4689      	mov	r9, r1
 800eb5c:	4650      	mov	r0, sl
 800eb5e:	4659      	mov	r1, fp
 800eb60:	f7f1 fb6e 	bl	8000240 <__aeabi_dsub>
 800eb64:	4632      	mov	r2, r6
 800eb66:	463b      	mov	r3, r7
 800eb68:	f7f1 fb6a 	bl	8000240 <__aeabi_dsub>
 800eb6c:	a340      	add	r3, pc, #256	@ (adr r3, 800ec70 <__ieee754_rem_pio2+0x2f8>)
 800eb6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb72:	4606      	mov	r6, r0
 800eb74:	460f      	mov	r7, r1
 800eb76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eb7a:	f7f1 fd19 	bl	80005b0 <__aeabi_dmul>
 800eb7e:	4632      	mov	r2, r6
 800eb80:	463b      	mov	r3, r7
 800eb82:	f7f1 fb5d 	bl	8000240 <__aeabi_dsub>
 800eb86:	4602      	mov	r2, r0
 800eb88:	460b      	mov	r3, r1
 800eb8a:	4606      	mov	r6, r0
 800eb8c:	460f      	mov	r7, r1
 800eb8e:	4640      	mov	r0, r8
 800eb90:	4649      	mov	r1, r9
 800eb92:	f7f1 fb55 	bl	8000240 <__aeabi_dsub>
 800eb96:	9a05      	ldr	r2, [sp, #20]
 800eb98:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800eb9c:	1ad3      	subs	r3, r2, r3
 800eb9e:	2b31      	cmp	r3, #49	@ 0x31
 800eba0:	dc20      	bgt.n	800ebe4 <__ieee754_rem_pio2+0x26c>
 800eba2:	46c2      	mov	sl, r8
 800eba4:	46cb      	mov	fp, r9
 800eba6:	e9c4 0100 	strd	r0, r1, [r4]
 800ebaa:	e9d4 8900 	ldrd	r8, r9, [r4]
 800ebae:	4650      	mov	r0, sl
 800ebb0:	4642      	mov	r2, r8
 800ebb2:	464b      	mov	r3, r9
 800ebb4:	4659      	mov	r1, fp
 800ebb6:	f7f1 fb43 	bl	8000240 <__aeabi_dsub>
 800ebba:	463b      	mov	r3, r7
 800ebbc:	4632      	mov	r2, r6
 800ebbe:	f7f1 fb3f 	bl	8000240 <__aeabi_dsub>
 800ebc2:	9b04      	ldr	r3, [sp, #16]
 800ebc4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	f6bf af10 	bge.w	800e9ee <__ieee754_rem_pio2+0x76>
 800ebce:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800ebd2:	6063      	str	r3, [r4, #4]
 800ebd4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ebd8:	f8c4 8000 	str.w	r8, [r4]
 800ebdc:	60a0      	str	r0, [r4, #8]
 800ebde:	60e3      	str	r3, [r4, #12]
 800ebe0:	426d      	negs	r5, r5
 800ebe2:	e704      	b.n	800e9ee <__ieee754_rem_pio2+0x76>
 800ebe4:	a326      	add	r3, pc, #152	@ (adr r3, 800ec80 <__ieee754_rem_pio2+0x308>)
 800ebe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ebee:	f7f1 fcdf 	bl	80005b0 <__aeabi_dmul>
 800ebf2:	4606      	mov	r6, r0
 800ebf4:	460f      	mov	r7, r1
 800ebf6:	4602      	mov	r2, r0
 800ebf8:	460b      	mov	r3, r1
 800ebfa:	4640      	mov	r0, r8
 800ebfc:	4649      	mov	r1, r9
 800ebfe:	f7f1 fb1f 	bl	8000240 <__aeabi_dsub>
 800ec02:	4602      	mov	r2, r0
 800ec04:	460b      	mov	r3, r1
 800ec06:	4682      	mov	sl, r0
 800ec08:	468b      	mov	fp, r1
 800ec0a:	4640      	mov	r0, r8
 800ec0c:	4649      	mov	r1, r9
 800ec0e:	f7f1 fb17 	bl	8000240 <__aeabi_dsub>
 800ec12:	4632      	mov	r2, r6
 800ec14:	463b      	mov	r3, r7
 800ec16:	f7f1 fb13 	bl	8000240 <__aeabi_dsub>
 800ec1a:	a31b      	add	r3, pc, #108	@ (adr r3, 800ec88 <__ieee754_rem_pio2+0x310>)
 800ec1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec20:	4606      	mov	r6, r0
 800ec22:	460f      	mov	r7, r1
 800ec24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ec28:	f7f1 fcc2 	bl	80005b0 <__aeabi_dmul>
 800ec2c:	4632      	mov	r2, r6
 800ec2e:	463b      	mov	r3, r7
 800ec30:	f7f1 fb06 	bl	8000240 <__aeabi_dsub>
 800ec34:	4606      	mov	r6, r0
 800ec36:	460f      	mov	r7, r1
 800ec38:	e764      	b.n	800eb04 <__ieee754_rem_pio2+0x18c>
 800ec3a:	4b1b      	ldr	r3, [pc, #108]	@ (800eca8 <__ieee754_rem_pio2+0x330>)
 800ec3c:	4598      	cmp	r8, r3
 800ec3e:	d935      	bls.n	800ecac <__ieee754_rem_pio2+0x334>
 800ec40:	4602      	mov	r2, r0
 800ec42:	460b      	mov	r3, r1
 800ec44:	f7f1 fafc 	bl	8000240 <__aeabi_dsub>
 800ec48:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ec4c:	e9c4 0100 	strd	r0, r1, [r4]
 800ec50:	e6a4      	b.n	800e99c <__ieee754_rem_pio2+0x24>
 800ec52:	bf00      	nop
 800ec54:	f3af 8000 	nop.w
 800ec58:	54400000 	.word	0x54400000
 800ec5c:	3ff921fb 	.word	0x3ff921fb
 800ec60:	1a626331 	.word	0x1a626331
 800ec64:	3dd0b461 	.word	0x3dd0b461
 800ec68:	1a600000 	.word	0x1a600000
 800ec6c:	3dd0b461 	.word	0x3dd0b461
 800ec70:	2e037073 	.word	0x2e037073
 800ec74:	3ba3198a 	.word	0x3ba3198a
 800ec78:	6dc9c883 	.word	0x6dc9c883
 800ec7c:	3fe45f30 	.word	0x3fe45f30
 800ec80:	2e000000 	.word	0x2e000000
 800ec84:	3ba3198a 	.word	0x3ba3198a
 800ec88:	252049c1 	.word	0x252049c1
 800ec8c:	397b839a 	.word	0x397b839a
 800ec90:	3fe921fb 	.word	0x3fe921fb
 800ec94:	4002d97b 	.word	0x4002d97b
 800ec98:	3ff921fb 	.word	0x3ff921fb
 800ec9c:	413921fb 	.word	0x413921fb
 800eca0:	3fe00000 	.word	0x3fe00000
 800eca4:	08010cb0 	.word	0x08010cb0
 800eca8:	7fefffff 	.word	0x7fefffff
 800ecac:	ea4f 5528 	mov.w	r5, r8, asr #20
 800ecb0:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800ecb4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800ecb8:	460f      	mov	r7, r1
 800ecba:	f7f1 ff13 	bl	8000ae4 <__aeabi_d2iz>
 800ecbe:	f7f1 fc0d 	bl	80004dc <__aeabi_i2d>
 800ecc2:	4602      	mov	r2, r0
 800ecc4:	460b      	mov	r3, r1
 800ecc6:	4630      	mov	r0, r6
 800ecc8:	4639      	mov	r1, r7
 800ecca:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ecce:	f7f1 fab7 	bl	8000240 <__aeabi_dsub>
 800ecd2:	2200      	movs	r2, #0
 800ecd4:	4b21      	ldr	r3, [pc, #132]	@ (800ed5c <__ieee754_rem_pio2+0x3e4>)
 800ecd6:	f7f1 fc6b 	bl	80005b0 <__aeabi_dmul>
 800ecda:	460f      	mov	r7, r1
 800ecdc:	4606      	mov	r6, r0
 800ecde:	f7f1 ff01 	bl	8000ae4 <__aeabi_d2iz>
 800ece2:	f7f1 fbfb 	bl	80004dc <__aeabi_i2d>
 800ece6:	4602      	mov	r2, r0
 800ece8:	460b      	mov	r3, r1
 800ecea:	4630      	mov	r0, r6
 800ecec:	4639      	mov	r1, r7
 800ecee:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ecf2:	f7f1 faa5 	bl	8000240 <__aeabi_dsub>
 800ecf6:	2200      	movs	r2, #0
 800ecf8:	4b18      	ldr	r3, [pc, #96]	@ (800ed5c <__ieee754_rem_pio2+0x3e4>)
 800ecfa:	f7f1 fc59 	bl	80005b0 <__aeabi_dmul>
 800ecfe:	f04f 0803 	mov.w	r8, #3
 800ed02:	2600      	movs	r6, #0
 800ed04:	2700      	movs	r7, #0
 800ed06:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800ed0a:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800ed0e:	4632      	mov	r2, r6
 800ed10:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800ed14:	463b      	mov	r3, r7
 800ed16:	46c2      	mov	sl, r8
 800ed18:	f108 38ff 	add.w	r8, r8, #4294967295
 800ed1c:	f7f1 feb0 	bl	8000a80 <__aeabi_dcmpeq>
 800ed20:	2800      	cmp	r0, #0
 800ed22:	d1f4      	bne.n	800ed0e <__ieee754_rem_pio2+0x396>
 800ed24:	4b0e      	ldr	r3, [pc, #56]	@ (800ed60 <__ieee754_rem_pio2+0x3e8>)
 800ed26:	462a      	mov	r2, r5
 800ed28:	9301      	str	r3, [sp, #4]
 800ed2a:	2302      	movs	r3, #2
 800ed2c:	4621      	mov	r1, r4
 800ed2e:	9300      	str	r3, [sp, #0]
 800ed30:	a806      	add	r0, sp, #24
 800ed32:	4653      	mov	r3, sl
 800ed34:	f000 fa7a 	bl	800f22c <__kernel_rem_pio2>
 800ed38:	9b04      	ldr	r3, [sp, #16]
 800ed3a:	4605      	mov	r5, r0
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	f6bf ae56 	bge.w	800e9ee <__ieee754_rem_pio2+0x76>
 800ed42:	e9d4 2100 	ldrd	r2, r1, [r4]
 800ed46:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ed4a:	e9c4 2300 	strd	r2, r3, [r4]
 800ed4e:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800ed52:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ed56:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800ed5a:	e741      	b.n	800ebe0 <__ieee754_rem_pio2+0x268>
 800ed5c:	41700000 	.word	0x41700000
 800ed60:	08010d30 	.word	0x08010d30

0800ed64 <fabs>:
 800ed64:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800ed68:	4619      	mov	r1, r3
 800ed6a:	4770      	bx	lr

0800ed6c <__kernel_cosf>:
 800ed6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed70:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 800ed74:	f1b5 5f48 	cmp.w	r5, #838860800	@ 0x32000000
 800ed78:	4606      	mov	r6, r0
 800ed7a:	4688      	mov	r8, r1
 800ed7c:	d203      	bcs.n	800ed86 <__kernel_cosf+0x1a>
 800ed7e:	f7f2 f9fd 	bl	800117c <__aeabi_f2iz>
 800ed82:	2800      	cmp	r0, #0
 800ed84:	d05c      	beq.n	800ee40 <__kernel_cosf+0xd4>
 800ed86:	4631      	mov	r1, r6
 800ed88:	4630      	mov	r0, r6
 800ed8a:	f7f2 f831 	bl	8000df0 <__aeabi_fmul>
 800ed8e:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800ed92:	4604      	mov	r4, r0
 800ed94:	f7f2 f82c 	bl	8000df0 <__aeabi_fmul>
 800ed98:	492b      	ldr	r1, [pc, #172]	@ (800ee48 <__kernel_cosf+0xdc>)
 800ed9a:	4607      	mov	r7, r0
 800ed9c:	4620      	mov	r0, r4
 800ed9e:	f7f2 f827 	bl	8000df0 <__aeabi_fmul>
 800eda2:	492a      	ldr	r1, [pc, #168]	@ (800ee4c <__kernel_cosf+0xe0>)
 800eda4:	f7f1 ff1c 	bl	8000be0 <__addsf3>
 800eda8:	4621      	mov	r1, r4
 800edaa:	f7f2 f821 	bl	8000df0 <__aeabi_fmul>
 800edae:	4928      	ldr	r1, [pc, #160]	@ (800ee50 <__kernel_cosf+0xe4>)
 800edb0:	f7f1 ff14 	bl	8000bdc <__aeabi_fsub>
 800edb4:	4621      	mov	r1, r4
 800edb6:	f7f2 f81b 	bl	8000df0 <__aeabi_fmul>
 800edba:	4926      	ldr	r1, [pc, #152]	@ (800ee54 <__kernel_cosf+0xe8>)
 800edbc:	f7f1 ff10 	bl	8000be0 <__addsf3>
 800edc0:	4621      	mov	r1, r4
 800edc2:	f7f2 f815 	bl	8000df0 <__aeabi_fmul>
 800edc6:	4924      	ldr	r1, [pc, #144]	@ (800ee58 <__kernel_cosf+0xec>)
 800edc8:	f7f1 ff08 	bl	8000bdc <__aeabi_fsub>
 800edcc:	4621      	mov	r1, r4
 800edce:	f7f2 f80f 	bl	8000df0 <__aeabi_fmul>
 800edd2:	4922      	ldr	r1, [pc, #136]	@ (800ee5c <__kernel_cosf+0xf0>)
 800edd4:	f7f1 ff04 	bl	8000be0 <__addsf3>
 800edd8:	4621      	mov	r1, r4
 800edda:	f7f2 f809 	bl	8000df0 <__aeabi_fmul>
 800edde:	4621      	mov	r1, r4
 800ede0:	f7f2 f806 	bl	8000df0 <__aeabi_fmul>
 800ede4:	4641      	mov	r1, r8
 800ede6:	4604      	mov	r4, r0
 800ede8:	4630      	mov	r0, r6
 800edea:	f7f2 f801 	bl	8000df0 <__aeabi_fmul>
 800edee:	4601      	mov	r1, r0
 800edf0:	4620      	mov	r0, r4
 800edf2:	f7f1 fef3 	bl	8000bdc <__aeabi_fsub>
 800edf6:	4b1a      	ldr	r3, [pc, #104]	@ (800ee60 <__kernel_cosf+0xf4>)
 800edf8:	4604      	mov	r4, r0
 800edfa:	429d      	cmp	r5, r3
 800edfc:	d80a      	bhi.n	800ee14 <__kernel_cosf+0xa8>
 800edfe:	4601      	mov	r1, r0
 800ee00:	4638      	mov	r0, r7
 800ee02:	f7f1 feeb 	bl	8000bdc <__aeabi_fsub>
 800ee06:	4601      	mov	r1, r0
 800ee08:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800ee0c:	f7f1 fee6 	bl	8000bdc <__aeabi_fsub>
 800ee10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee14:	4b13      	ldr	r3, [pc, #76]	@ (800ee64 <__kernel_cosf+0xf8>)
 800ee16:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800ee1a:	429d      	cmp	r5, r3
 800ee1c:	bf8c      	ite	hi
 800ee1e:	4d12      	ldrhi	r5, [pc, #72]	@ (800ee68 <__kernel_cosf+0xfc>)
 800ee20:	f105 457f 	addls.w	r5, r5, #4278190080	@ 0xff000000
 800ee24:	4629      	mov	r1, r5
 800ee26:	f7f1 fed9 	bl	8000bdc <__aeabi_fsub>
 800ee2a:	4629      	mov	r1, r5
 800ee2c:	4606      	mov	r6, r0
 800ee2e:	4638      	mov	r0, r7
 800ee30:	f7f1 fed4 	bl	8000bdc <__aeabi_fsub>
 800ee34:	4621      	mov	r1, r4
 800ee36:	f7f1 fed1 	bl	8000bdc <__aeabi_fsub>
 800ee3a:	4601      	mov	r1, r0
 800ee3c:	4630      	mov	r0, r6
 800ee3e:	e7e5      	b.n	800ee0c <__kernel_cosf+0xa0>
 800ee40:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800ee44:	e7e4      	b.n	800ee10 <__kernel_cosf+0xa4>
 800ee46:	bf00      	nop
 800ee48:	ad47d74e 	.word	0xad47d74e
 800ee4c:	310f74f6 	.word	0x310f74f6
 800ee50:	3493f27c 	.word	0x3493f27c
 800ee54:	37d00d01 	.word	0x37d00d01
 800ee58:	3ab60b61 	.word	0x3ab60b61
 800ee5c:	3d2aaaab 	.word	0x3d2aaaab
 800ee60:	3e999999 	.word	0x3e999999
 800ee64:	3f480000 	.word	0x3f480000
 800ee68:	3e900000 	.word	0x3e900000

0800ee6c <__kernel_sinf>:
 800ee6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ee70:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800ee74:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800ee78:	4604      	mov	r4, r0
 800ee7a:	460f      	mov	r7, r1
 800ee7c:	4691      	mov	r9, r2
 800ee7e:	d203      	bcs.n	800ee88 <__kernel_sinf+0x1c>
 800ee80:	f7f2 f97c 	bl	800117c <__aeabi_f2iz>
 800ee84:	2800      	cmp	r0, #0
 800ee86:	d035      	beq.n	800eef4 <__kernel_sinf+0x88>
 800ee88:	4621      	mov	r1, r4
 800ee8a:	4620      	mov	r0, r4
 800ee8c:	f7f1 ffb0 	bl	8000df0 <__aeabi_fmul>
 800ee90:	4605      	mov	r5, r0
 800ee92:	4601      	mov	r1, r0
 800ee94:	4620      	mov	r0, r4
 800ee96:	f7f1 ffab 	bl	8000df0 <__aeabi_fmul>
 800ee9a:	4929      	ldr	r1, [pc, #164]	@ (800ef40 <__kernel_sinf+0xd4>)
 800ee9c:	4606      	mov	r6, r0
 800ee9e:	4628      	mov	r0, r5
 800eea0:	f7f1 ffa6 	bl	8000df0 <__aeabi_fmul>
 800eea4:	4927      	ldr	r1, [pc, #156]	@ (800ef44 <__kernel_sinf+0xd8>)
 800eea6:	f7f1 fe99 	bl	8000bdc <__aeabi_fsub>
 800eeaa:	4629      	mov	r1, r5
 800eeac:	f7f1 ffa0 	bl	8000df0 <__aeabi_fmul>
 800eeb0:	4925      	ldr	r1, [pc, #148]	@ (800ef48 <__kernel_sinf+0xdc>)
 800eeb2:	f7f1 fe95 	bl	8000be0 <__addsf3>
 800eeb6:	4629      	mov	r1, r5
 800eeb8:	f7f1 ff9a 	bl	8000df0 <__aeabi_fmul>
 800eebc:	4923      	ldr	r1, [pc, #140]	@ (800ef4c <__kernel_sinf+0xe0>)
 800eebe:	f7f1 fe8d 	bl	8000bdc <__aeabi_fsub>
 800eec2:	4629      	mov	r1, r5
 800eec4:	f7f1 ff94 	bl	8000df0 <__aeabi_fmul>
 800eec8:	4921      	ldr	r1, [pc, #132]	@ (800ef50 <__kernel_sinf+0xe4>)
 800eeca:	f7f1 fe89 	bl	8000be0 <__addsf3>
 800eece:	4680      	mov	r8, r0
 800eed0:	f1b9 0f00 	cmp.w	r9, #0
 800eed4:	d111      	bne.n	800eefa <__kernel_sinf+0x8e>
 800eed6:	4601      	mov	r1, r0
 800eed8:	4628      	mov	r0, r5
 800eeda:	f7f1 ff89 	bl	8000df0 <__aeabi_fmul>
 800eede:	491d      	ldr	r1, [pc, #116]	@ (800ef54 <__kernel_sinf+0xe8>)
 800eee0:	f7f1 fe7c 	bl	8000bdc <__aeabi_fsub>
 800eee4:	4631      	mov	r1, r6
 800eee6:	f7f1 ff83 	bl	8000df0 <__aeabi_fmul>
 800eeea:	4601      	mov	r1, r0
 800eeec:	4620      	mov	r0, r4
 800eeee:	f7f1 fe77 	bl	8000be0 <__addsf3>
 800eef2:	4604      	mov	r4, r0
 800eef4:	4620      	mov	r0, r4
 800eef6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eefa:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800eefe:	4638      	mov	r0, r7
 800ef00:	f7f1 ff76 	bl	8000df0 <__aeabi_fmul>
 800ef04:	4641      	mov	r1, r8
 800ef06:	4681      	mov	r9, r0
 800ef08:	4630      	mov	r0, r6
 800ef0a:	f7f1 ff71 	bl	8000df0 <__aeabi_fmul>
 800ef0e:	4601      	mov	r1, r0
 800ef10:	4648      	mov	r0, r9
 800ef12:	f7f1 fe63 	bl	8000bdc <__aeabi_fsub>
 800ef16:	4629      	mov	r1, r5
 800ef18:	f7f1 ff6a 	bl	8000df0 <__aeabi_fmul>
 800ef1c:	4639      	mov	r1, r7
 800ef1e:	f7f1 fe5d 	bl	8000bdc <__aeabi_fsub>
 800ef22:	490c      	ldr	r1, [pc, #48]	@ (800ef54 <__kernel_sinf+0xe8>)
 800ef24:	4605      	mov	r5, r0
 800ef26:	4630      	mov	r0, r6
 800ef28:	f7f1 ff62 	bl	8000df0 <__aeabi_fmul>
 800ef2c:	4601      	mov	r1, r0
 800ef2e:	4628      	mov	r0, r5
 800ef30:	f7f1 fe56 	bl	8000be0 <__addsf3>
 800ef34:	4601      	mov	r1, r0
 800ef36:	4620      	mov	r0, r4
 800ef38:	f7f1 fe50 	bl	8000bdc <__aeabi_fsub>
 800ef3c:	e7d9      	b.n	800eef2 <__kernel_sinf+0x86>
 800ef3e:	bf00      	nop
 800ef40:	2f2ec9d3 	.word	0x2f2ec9d3
 800ef44:	32d72f34 	.word	0x32d72f34
 800ef48:	3638ef1b 	.word	0x3638ef1b
 800ef4c:	39500d01 	.word	0x39500d01
 800ef50:	3c088889 	.word	0x3c088889
 800ef54:	3e2aaaab 	.word	0x3e2aaaab

0800ef58 <__ieee754_rem_pio2f>:
 800ef58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef5c:	4aa4      	ldr	r2, [pc, #656]	@ (800f1f0 <__ieee754_rem_pio2f+0x298>)
 800ef5e:	f020 4800 	bic.w	r8, r0, #2147483648	@ 0x80000000
 800ef62:	4590      	cmp	r8, r2
 800ef64:	460c      	mov	r4, r1
 800ef66:	4682      	mov	sl, r0
 800ef68:	b087      	sub	sp, #28
 800ef6a:	d804      	bhi.n	800ef76 <__ieee754_rem_pio2f+0x1e>
 800ef6c:	2300      	movs	r3, #0
 800ef6e:	6008      	str	r0, [r1, #0]
 800ef70:	604b      	str	r3, [r1, #4]
 800ef72:	2500      	movs	r5, #0
 800ef74:	e01d      	b.n	800efb2 <__ieee754_rem_pio2f+0x5a>
 800ef76:	4a9f      	ldr	r2, [pc, #636]	@ (800f1f4 <__ieee754_rem_pio2f+0x29c>)
 800ef78:	4590      	cmp	r8, r2
 800ef7a:	d84f      	bhi.n	800f01c <__ieee754_rem_pio2f+0xc4>
 800ef7c:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 800ef80:	2800      	cmp	r0, #0
 800ef82:	499d      	ldr	r1, [pc, #628]	@ (800f1f8 <__ieee754_rem_pio2f+0x2a0>)
 800ef84:	4f9d      	ldr	r7, [pc, #628]	@ (800f1fc <__ieee754_rem_pio2f+0x2a4>)
 800ef86:	f025 050f 	bic.w	r5, r5, #15
 800ef8a:	dd24      	ble.n	800efd6 <__ieee754_rem_pio2f+0x7e>
 800ef8c:	f7f1 fe26 	bl	8000bdc <__aeabi_fsub>
 800ef90:	42bd      	cmp	r5, r7
 800ef92:	4606      	mov	r6, r0
 800ef94:	d011      	beq.n	800efba <__ieee754_rem_pio2f+0x62>
 800ef96:	499a      	ldr	r1, [pc, #616]	@ (800f200 <__ieee754_rem_pio2f+0x2a8>)
 800ef98:	f7f1 fe20 	bl	8000bdc <__aeabi_fsub>
 800ef9c:	4601      	mov	r1, r0
 800ef9e:	4605      	mov	r5, r0
 800efa0:	4630      	mov	r0, r6
 800efa2:	f7f1 fe1b 	bl	8000bdc <__aeabi_fsub>
 800efa6:	4996      	ldr	r1, [pc, #600]	@ (800f200 <__ieee754_rem_pio2f+0x2a8>)
 800efa8:	f7f1 fe18 	bl	8000bdc <__aeabi_fsub>
 800efac:	6025      	str	r5, [r4, #0]
 800efae:	2501      	movs	r5, #1
 800efb0:	6060      	str	r0, [r4, #4]
 800efb2:	4628      	mov	r0, r5
 800efb4:	b007      	add	sp, #28
 800efb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efba:	4992      	ldr	r1, [pc, #584]	@ (800f204 <__ieee754_rem_pio2f+0x2ac>)
 800efbc:	f7f1 fe0e 	bl	8000bdc <__aeabi_fsub>
 800efc0:	4991      	ldr	r1, [pc, #580]	@ (800f208 <__ieee754_rem_pio2f+0x2b0>)
 800efc2:	4606      	mov	r6, r0
 800efc4:	f7f1 fe0a 	bl	8000bdc <__aeabi_fsub>
 800efc8:	4601      	mov	r1, r0
 800efca:	4605      	mov	r5, r0
 800efcc:	4630      	mov	r0, r6
 800efce:	f7f1 fe05 	bl	8000bdc <__aeabi_fsub>
 800efd2:	498d      	ldr	r1, [pc, #564]	@ (800f208 <__ieee754_rem_pio2f+0x2b0>)
 800efd4:	e7e8      	b.n	800efa8 <__ieee754_rem_pio2f+0x50>
 800efd6:	f7f1 fe03 	bl	8000be0 <__addsf3>
 800efda:	42bd      	cmp	r5, r7
 800efdc:	4606      	mov	r6, r0
 800efde:	d00f      	beq.n	800f000 <__ieee754_rem_pio2f+0xa8>
 800efe0:	4987      	ldr	r1, [pc, #540]	@ (800f200 <__ieee754_rem_pio2f+0x2a8>)
 800efe2:	f7f1 fdfd 	bl	8000be0 <__addsf3>
 800efe6:	4601      	mov	r1, r0
 800efe8:	4605      	mov	r5, r0
 800efea:	4630      	mov	r0, r6
 800efec:	f7f1 fdf6 	bl	8000bdc <__aeabi_fsub>
 800eff0:	4983      	ldr	r1, [pc, #524]	@ (800f200 <__ieee754_rem_pio2f+0x2a8>)
 800eff2:	f7f1 fdf5 	bl	8000be0 <__addsf3>
 800eff6:	6025      	str	r5, [r4, #0]
 800eff8:	6060      	str	r0, [r4, #4]
 800effa:	f04f 35ff 	mov.w	r5, #4294967295
 800effe:	e7d8      	b.n	800efb2 <__ieee754_rem_pio2f+0x5a>
 800f000:	4980      	ldr	r1, [pc, #512]	@ (800f204 <__ieee754_rem_pio2f+0x2ac>)
 800f002:	f7f1 fded 	bl	8000be0 <__addsf3>
 800f006:	4980      	ldr	r1, [pc, #512]	@ (800f208 <__ieee754_rem_pio2f+0x2b0>)
 800f008:	4606      	mov	r6, r0
 800f00a:	f7f1 fde9 	bl	8000be0 <__addsf3>
 800f00e:	4601      	mov	r1, r0
 800f010:	4605      	mov	r5, r0
 800f012:	4630      	mov	r0, r6
 800f014:	f7f1 fde2 	bl	8000bdc <__aeabi_fsub>
 800f018:	497b      	ldr	r1, [pc, #492]	@ (800f208 <__ieee754_rem_pio2f+0x2b0>)
 800f01a:	e7ea      	b.n	800eff2 <__ieee754_rem_pio2f+0x9a>
 800f01c:	4a7b      	ldr	r2, [pc, #492]	@ (800f20c <__ieee754_rem_pio2f+0x2b4>)
 800f01e:	4590      	cmp	r8, r2
 800f020:	f200 8095 	bhi.w	800f14e <__ieee754_rem_pio2f+0x1f6>
 800f024:	f000 f8fe 	bl	800f224 <fabsf>
 800f028:	4979      	ldr	r1, [pc, #484]	@ (800f210 <__ieee754_rem_pio2f+0x2b8>)
 800f02a:	4606      	mov	r6, r0
 800f02c:	f7f1 fee0 	bl	8000df0 <__aeabi_fmul>
 800f030:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800f034:	f7f1 fdd4 	bl	8000be0 <__addsf3>
 800f038:	f7f2 f8a0 	bl	800117c <__aeabi_f2iz>
 800f03c:	4605      	mov	r5, r0
 800f03e:	f7f1 fe83 	bl	8000d48 <__aeabi_i2f>
 800f042:	496d      	ldr	r1, [pc, #436]	@ (800f1f8 <__ieee754_rem_pio2f+0x2a0>)
 800f044:	4681      	mov	r9, r0
 800f046:	f7f1 fed3 	bl	8000df0 <__aeabi_fmul>
 800f04a:	4601      	mov	r1, r0
 800f04c:	4630      	mov	r0, r6
 800f04e:	f7f1 fdc5 	bl	8000bdc <__aeabi_fsub>
 800f052:	496b      	ldr	r1, [pc, #428]	@ (800f200 <__ieee754_rem_pio2f+0x2a8>)
 800f054:	4607      	mov	r7, r0
 800f056:	4648      	mov	r0, r9
 800f058:	f7f1 feca 	bl	8000df0 <__aeabi_fmul>
 800f05c:	2d1f      	cmp	r5, #31
 800f05e:	4606      	mov	r6, r0
 800f060:	dc0e      	bgt.n	800f080 <__ieee754_rem_pio2f+0x128>
 800f062:	4a6c      	ldr	r2, [pc, #432]	@ (800f214 <__ieee754_rem_pio2f+0x2bc>)
 800f064:	1e69      	subs	r1, r5, #1
 800f066:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800f06a:	f02a 4300 	bic.w	r3, sl, #2147483648	@ 0x80000000
 800f06e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800f072:	4293      	cmp	r3, r2
 800f074:	d004      	beq.n	800f080 <__ieee754_rem_pio2f+0x128>
 800f076:	4631      	mov	r1, r6
 800f078:	4638      	mov	r0, r7
 800f07a:	f7f1 fdaf 	bl	8000bdc <__aeabi_fsub>
 800f07e:	e00b      	b.n	800f098 <__ieee754_rem_pio2f+0x140>
 800f080:	4631      	mov	r1, r6
 800f082:	4638      	mov	r0, r7
 800f084:	f7f1 fdaa 	bl	8000bdc <__aeabi_fsub>
 800f088:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800f08c:	ebc3 53d8 	rsb	r3, r3, r8, lsr #23
 800f090:	2b08      	cmp	r3, #8
 800f092:	ea4f 5be8 	mov.w	fp, r8, asr #23
 800f096:	dc01      	bgt.n	800f09c <__ieee754_rem_pio2f+0x144>
 800f098:	6020      	str	r0, [r4, #0]
 800f09a:	e026      	b.n	800f0ea <__ieee754_rem_pio2f+0x192>
 800f09c:	4959      	ldr	r1, [pc, #356]	@ (800f204 <__ieee754_rem_pio2f+0x2ac>)
 800f09e:	4648      	mov	r0, r9
 800f0a0:	f7f1 fea6 	bl	8000df0 <__aeabi_fmul>
 800f0a4:	4606      	mov	r6, r0
 800f0a6:	4601      	mov	r1, r0
 800f0a8:	4638      	mov	r0, r7
 800f0aa:	f7f1 fd97 	bl	8000bdc <__aeabi_fsub>
 800f0ae:	4601      	mov	r1, r0
 800f0b0:	4680      	mov	r8, r0
 800f0b2:	4638      	mov	r0, r7
 800f0b4:	f7f1 fd92 	bl	8000bdc <__aeabi_fsub>
 800f0b8:	4631      	mov	r1, r6
 800f0ba:	f7f1 fd8f 	bl	8000bdc <__aeabi_fsub>
 800f0be:	4606      	mov	r6, r0
 800f0c0:	4951      	ldr	r1, [pc, #324]	@ (800f208 <__ieee754_rem_pio2f+0x2b0>)
 800f0c2:	4648      	mov	r0, r9
 800f0c4:	f7f1 fe94 	bl	8000df0 <__aeabi_fmul>
 800f0c8:	4631      	mov	r1, r6
 800f0ca:	f7f1 fd87 	bl	8000bdc <__aeabi_fsub>
 800f0ce:	4601      	mov	r1, r0
 800f0d0:	4606      	mov	r6, r0
 800f0d2:	4640      	mov	r0, r8
 800f0d4:	f7f1 fd82 	bl	8000bdc <__aeabi_fsub>
 800f0d8:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800f0dc:	ebab 0b03 	sub.w	fp, fp, r3
 800f0e0:	f1bb 0f19 	cmp.w	fp, #25
 800f0e4:	dc18      	bgt.n	800f118 <__ieee754_rem_pio2f+0x1c0>
 800f0e6:	4647      	mov	r7, r8
 800f0e8:	6020      	str	r0, [r4, #0]
 800f0ea:	f8d4 8000 	ldr.w	r8, [r4]
 800f0ee:	4638      	mov	r0, r7
 800f0f0:	4641      	mov	r1, r8
 800f0f2:	f7f1 fd73 	bl	8000bdc <__aeabi_fsub>
 800f0f6:	4631      	mov	r1, r6
 800f0f8:	f7f1 fd70 	bl	8000bdc <__aeabi_fsub>
 800f0fc:	f1ba 0f00 	cmp.w	sl, #0
 800f100:	6060      	str	r0, [r4, #4]
 800f102:	f6bf af56 	bge.w	800efb2 <__ieee754_rem_pio2f+0x5a>
 800f106:	f108 4800 	add.w	r8, r8, #2147483648	@ 0x80000000
 800f10a:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800f10e:	f8c4 8000 	str.w	r8, [r4]
 800f112:	6060      	str	r0, [r4, #4]
 800f114:	426d      	negs	r5, r5
 800f116:	e74c      	b.n	800efb2 <__ieee754_rem_pio2f+0x5a>
 800f118:	493f      	ldr	r1, [pc, #252]	@ (800f218 <__ieee754_rem_pio2f+0x2c0>)
 800f11a:	4648      	mov	r0, r9
 800f11c:	f7f1 fe68 	bl	8000df0 <__aeabi_fmul>
 800f120:	4606      	mov	r6, r0
 800f122:	4601      	mov	r1, r0
 800f124:	4640      	mov	r0, r8
 800f126:	f7f1 fd59 	bl	8000bdc <__aeabi_fsub>
 800f12a:	4601      	mov	r1, r0
 800f12c:	4607      	mov	r7, r0
 800f12e:	4640      	mov	r0, r8
 800f130:	f7f1 fd54 	bl	8000bdc <__aeabi_fsub>
 800f134:	4631      	mov	r1, r6
 800f136:	f7f1 fd51 	bl	8000bdc <__aeabi_fsub>
 800f13a:	4606      	mov	r6, r0
 800f13c:	4937      	ldr	r1, [pc, #220]	@ (800f21c <__ieee754_rem_pio2f+0x2c4>)
 800f13e:	4648      	mov	r0, r9
 800f140:	f7f1 fe56 	bl	8000df0 <__aeabi_fmul>
 800f144:	4631      	mov	r1, r6
 800f146:	f7f1 fd49 	bl	8000bdc <__aeabi_fsub>
 800f14a:	4606      	mov	r6, r0
 800f14c:	e793      	b.n	800f076 <__ieee754_rem_pio2f+0x11e>
 800f14e:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800f152:	d305      	bcc.n	800f160 <__ieee754_rem_pio2f+0x208>
 800f154:	4601      	mov	r1, r0
 800f156:	f7f1 fd41 	bl	8000bdc <__aeabi_fsub>
 800f15a:	6060      	str	r0, [r4, #4]
 800f15c:	6020      	str	r0, [r4, #0]
 800f15e:	e708      	b.n	800ef72 <__ieee754_rem_pio2f+0x1a>
 800f160:	ea4f 56e8 	mov.w	r6, r8, asr #23
 800f164:	3e86      	subs	r6, #134	@ 0x86
 800f166:	eba8 58c6 	sub.w	r8, r8, r6, lsl #23
 800f16a:	4640      	mov	r0, r8
 800f16c:	f7f2 f806 	bl	800117c <__aeabi_f2iz>
 800f170:	f7f1 fdea 	bl	8000d48 <__aeabi_i2f>
 800f174:	4601      	mov	r1, r0
 800f176:	9003      	str	r0, [sp, #12]
 800f178:	4640      	mov	r0, r8
 800f17a:	f7f1 fd2f 	bl	8000bdc <__aeabi_fsub>
 800f17e:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 800f182:	f7f1 fe35 	bl	8000df0 <__aeabi_fmul>
 800f186:	4607      	mov	r7, r0
 800f188:	f7f1 fff8 	bl	800117c <__aeabi_f2iz>
 800f18c:	f7f1 fddc 	bl	8000d48 <__aeabi_i2f>
 800f190:	4601      	mov	r1, r0
 800f192:	9004      	str	r0, [sp, #16]
 800f194:	4605      	mov	r5, r0
 800f196:	4638      	mov	r0, r7
 800f198:	f7f1 fd20 	bl	8000bdc <__aeabi_fsub>
 800f19c:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 800f1a0:	f7f1 fe26 	bl	8000df0 <__aeabi_fmul>
 800f1a4:	2100      	movs	r1, #0
 800f1a6:	9005      	str	r0, [sp, #20]
 800f1a8:	f7f1 ffb6 	bl	8001118 <__aeabi_fcmpeq>
 800f1ac:	b1f0      	cbz	r0, 800f1ec <__ieee754_rem_pio2f+0x294>
 800f1ae:	2100      	movs	r1, #0
 800f1b0:	4628      	mov	r0, r5
 800f1b2:	f7f1 ffb1 	bl	8001118 <__aeabi_fcmpeq>
 800f1b6:	2800      	cmp	r0, #0
 800f1b8:	bf14      	ite	ne
 800f1ba:	2301      	movne	r3, #1
 800f1bc:	2302      	moveq	r3, #2
 800f1be:	4a18      	ldr	r2, [pc, #96]	@ (800f220 <__ieee754_rem_pio2f+0x2c8>)
 800f1c0:	4621      	mov	r1, r4
 800f1c2:	9201      	str	r2, [sp, #4]
 800f1c4:	2202      	movs	r2, #2
 800f1c6:	a803      	add	r0, sp, #12
 800f1c8:	9200      	str	r2, [sp, #0]
 800f1ca:	4632      	mov	r2, r6
 800f1cc:	f000 fb52 	bl	800f874 <__kernel_rem_pio2f>
 800f1d0:	f1ba 0f00 	cmp.w	sl, #0
 800f1d4:	4605      	mov	r5, r0
 800f1d6:	f6bf aeec 	bge.w	800efb2 <__ieee754_rem_pio2f+0x5a>
 800f1da:	6823      	ldr	r3, [r4, #0]
 800f1dc:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800f1e0:	6023      	str	r3, [r4, #0]
 800f1e2:	6863      	ldr	r3, [r4, #4]
 800f1e4:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800f1e8:	6063      	str	r3, [r4, #4]
 800f1ea:	e793      	b.n	800f114 <__ieee754_rem_pio2f+0x1bc>
 800f1ec:	2303      	movs	r3, #3
 800f1ee:	e7e6      	b.n	800f1be <__ieee754_rem_pio2f+0x266>
 800f1f0:	3f490fd8 	.word	0x3f490fd8
 800f1f4:	4016cbe3 	.word	0x4016cbe3
 800f1f8:	3fc90f80 	.word	0x3fc90f80
 800f1fc:	3fc90fd0 	.word	0x3fc90fd0
 800f200:	37354443 	.word	0x37354443
 800f204:	37354400 	.word	0x37354400
 800f208:	2e85a308 	.word	0x2e85a308
 800f20c:	43490f80 	.word	0x43490f80
 800f210:	3f22f984 	.word	0x3f22f984
 800f214:	08010e38 	.word	0x08010e38
 800f218:	2e85a300 	.word	0x2e85a300
 800f21c:	248d3132 	.word	0x248d3132
 800f220:	08010eb8 	.word	0x08010eb8

0800f224 <fabsf>:
 800f224:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800f228:	4770      	bx	lr
	...

0800f22c <__kernel_rem_pio2>:
 800f22c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f230:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800f234:	9308      	str	r3, [sp, #32]
 800f236:	9104      	str	r1, [sp, #16]
 800f238:	4bb6      	ldr	r3, [pc, #728]	@ (800f514 <__kernel_rem_pio2+0x2e8>)
 800f23a:	99a2      	ldr	r1, [sp, #648]	@ 0x288
 800f23c:	f112 0f14 	cmn.w	r2, #20
 800f240:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f244:	bfa8      	it	ge
 800f246:	1ed4      	subge	r4, r2, #3
 800f248:	9302      	str	r3, [sp, #8]
 800f24a:	9b08      	ldr	r3, [sp, #32]
 800f24c:	bfb8      	it	lt
 800f24e:	2400      	movlt	r4, #0
 800f250:	f103 33ff 	add.w	r3, r3, #4294967295
 800f254:	9306      	str	r3, [sp, #24]
 800f256:	bfa4      	itt	ge
 800f258:	2318      	movge	r3, #24
 800f25a:	fb94 f4f3 	sdivge	r4, r4, r3
 800f25e:	f06f 0317 	mvn.w	r3, #23
 800f262:	fb04 3303 	mla	r3, r4, r3, r3
 800f266:	eb03 0a02 	add.w	sl, r3, r2
 800f26a:	9a06      	ldr	r2, [sp, #24]
 800f26c:	9b02      	ldr	r3, [sp, #8]
 800f26e:	1aa7      	subs	r7, r4, r2
 800f270:	eb03 0802 	add.w	r8, r3, r2
 800f274:	9ba3      	ldr	r3, [sp, #652]	@ 0x28c
 800f276:	2500      	movs	r5, #0
 800f278:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800f27c:	2200      	movs	r2, #0
 800f27e:	2300      	movs	r3, #0
 800f280:	9009      	str	r0, [sp, #36]	@ 0x24
 800f282:	ae20      	add	r6, sp, #128	@ 0x80
 800f284:	4545      	cmp	r5, r8
 800f286:	dd14      	ble.n	800f2b2 <__kernel_rem_pio2+0x86>
 800f288:	f04f 0800 	mov.w	r8, #0
 800f28c:	9a08      	ldr	r2, [sp, #32]
 800f28e:	ab20      	add	r3, sp, #128	@ 0x80
 800f290:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 800f294:	f50d 7be0 	add.w	fp, sp, #448	@ 0x1c0
 800f298:	9b02      	ldr	r3, [sp, #8]
 800f29a:	4598      	cmp	r8, r3
 800f29c:	dc35      	bgt.n	800f30a <__kernel_rem_pio2+0xde>
 800f29e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f2a0:	2200      	movs	r2, #0
 800f2a2:	f1a3 0908 	sub.w	r9, r3, #8
 800f2a6:	2300      	movs	r3, #0
 800f2a8:	462f      	mov	r7, r5
 800f2aa:	2600      	movs	r6, #0
 800f2ac:	e9cd 2300 	strd	r2, r3, [sp]
 800f2b0:	e01f      	b.n	800f2f2 <__kernel_rem_pio2+0xc6>
 800f2b2:	42ef      	cmn	r7, r5
 800f2b4:	d40b      	bmi.n	800f2ce <__kernel_rem_pio2+0xa2>
 800f2b6:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800f2ba:	e9cd 2300 	strd	r2, r3, [sp]
 800f2be:	f7f1 f90d 	bl	80004dc <__aeabi_i2d>
 800f2c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f2c6:	e8e6 0102 	strd	r0, r1, [r6], #8
 800f2ca:	3501      	adds	r5, #1
 800f2cc:	e7da      	b.n	800f284 <__kernel_rem_pio2+0x58>
 800f2ce:	4610      	mov	r0, r2
 800f2d0:	4619      	mov	r1, r3
 800f2d2:	e7f8      	b.n	800f2c6 <__kernel_rem_pio2+0x9a>
 800f2d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f2d8:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800f2dc:	f7f1 f968 	bl	80005b0 <__aeabi_dmul>
 800f2e0:	4602      	mov	r2, r0
 800f2e2:	460b      	mov	r3, r1
 800f2e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f2e8:	f7f0 ffac 	bl	8000244 <__adddf3>
 800f2ec:	e9cd 0100 	strd	r0, r1, [sp]
 800f2f0:	3601      	adds	r6, #1
 800f2f2:	9b06      	ldr	r3, [sp, #24]
 800f2f4:	3f08      	subs	r7, #8
 800f2f6:	429e      	cmp	r6, r3
 800f2f8:	ddec      	ble.n	800f2d4 <__kernel_rem_pio2+0xa8>
 800f2fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f2fe:	f108 0801 	add.w	r8, r8, #1
 800f302:	e8eb 2302 	strd	r2, r3, [fp], #8
 800f306:	3508      	adds	r5, #8
 800f308:	e7c6      	b.n	800f298 <__kernel_rem_pio2+0x6c>
 800f30a:	9b02      	ldr	r3, [sp, #8]
 800f30c:	aa0c      	add	r2, sp, #48	@ 0x30
 800f30e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f312:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f314:	9ba3      	ldr	r3, [sp, #652]	@ 0x28c
 800f316:	f8dd b008 	ldr.w	fp, [sp, #8]
 800f31a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800f31e:	930a      	str	r3, [sp, #40]	@ 0x28
 800f320:	ab98      	add	r3, sp, #608	@ 0x260
 800f322:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f326:	e953 4528 	ldrd	r4, r5, [r3, #-160]	@ 0xa0
 800f32a:	ab70      	add	r3, sp, #448	@ 0x1c0
 800f32c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f330:	ae0c      	add	r6, sp, #48	@ 0x30
 800f332:	4698      	mov	r8, r3
 800f334:	46b1      	mov	r9, r6
 800f336:	465f      	mov	r7, fp
 800f338:	9307      	str	r3, [sp, #28]
 800f33a:	2f00      	cmp	r7, #0
 800f33c:	f1a8 0808 	sub.w	r8, r8, #8
 800f340:	dc71      	bgt.n	800f426 <__kernel_rem_pio2+0x1fa>
 800f342:	4652      	mov	r2, sl
 800f344:	4620      	mov	r0, r4
 800f346:	4629      	mov	r1, r5
 800f348:	f000 fd36 	bl	800fdb8 <scalbn>
 800f34c:	2200      	movs	r2, #0
 800f34e:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800f352:	4604      	mov	r4, r0
 800f354:	460d      	mov	r5, r1
 800f356:	f7f1 f92b 	bl	80005b0 <__aeabi_dmul>
 800f35a:	f000 fdf1 	bl	800ff40 <floor>
 800f35e:	2200      	movs	r2, #0
 800f360:	4b6d      	ldr	r3, [pc, #436]	@ (800f518 <__kernel_rem_pio2+0x2ec>)
 800f362:	f7f1 f925 	bl	80005b0 <__aeabi_dmul>
 800f366:	4602      	mov	r2, r0
 800f368:	460b      	mov	r3, r1
 800f36a:	4620      	mov	r0, r4
 800f36c:	4629      	mov	r1, r5
 800f36e:	f7f0 ff67 	bl	8000240 <__aeabi_dsub>
 800f372:	460d      	mov	r5, r1
 800f374:	4604      	mov	r4, r0
 800f376:	f7f1 fbb5 	bl	8000ae4 <__aeabi_d2iz>
 800f37a:	9005      	str	r0, [sp, #20]
 800f37c:	f7f1 f8ae 	bl	80004dc <__aeabi_i2d>
 800f380:	4602      	mov	r2, r0
 800f382:	460b      	mov	r3, r1
 800f384:	4620      	mov	r0, r4
 800f386:	4629      	mov	r1, r5
 800f388:	f7f0 ff5a 	bl	8000240 <__aeabi_dsub>
 800f38c:	f1ba 0f00 	cmp.w	sl, #0
 800f390:	4680      	mov	r8, r0
 800f392:	4689      	mov	r9, r1
 800f394:	dd6d      	ble.n	800f472 <__kernel_rem_pio2+0x246>
 800f396:	f10b 31ff 	add.w	r1, fp, #4294967295
 800f39a:	ab0c      	add	r3, sp, #48	@ 0x30
 800f39c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f3a0:	9c05      	ldr	r4, [sp, #20]
 800f3a2:	f1ca 0018 	rsb	r0, sl, #24
 800f3a6:	fa43 f200 	asr.w	r2, r3, r0
 800f3aa:	4414      	add	r4, r2
 800f3ac:	4082      	lsls	r2, r0
 800f3ae:	1a9b      	subs	r3, r3, r2
 800f3b0:	aa0c      	add	r2, sp, #48	@ 0x30
 800f3b2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800f3b6:	f1ca 0217 	rsb	r2, sl, #23
 800f3ba:	9405      	str	r4, [sp, #20]
 800f3bc:	4113      	asrs	r3, r2
 800f3be:	9300      	str	r3, [sp, #0]
 800f3c0:	9b00      	ldr	r3, [sp, #0]
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	dd64      	ble.n	800f490 <__kernel_rem_pio2+0x264>
 800f3c6:	2200      	movs	r2, #0
 800f3c8:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800f3cc:	4614      	mov	r4, r2
 800f3ce:	9b05      	ldr	r3, [sp, #20]
 800f3d0:	3301      	adds	r3, #1
 800f3d2:	9305      	str	r3, [sp, #20]
 800f3d4:	4593      	cmp	fp, r2
 800f3d6:	f300 80ab 	bgt.w	800f530 <__kernel_rem_pio2+0x304>
 800f3da:	f1ba 0f00 	cmp.w	sl, #0
 800f3de:	dd07      	ble.n	800f3f0 <__kernel_rem_pio2+0x1c4>
 800f3e0:	f1ba 0f01 	cmp.w	sl, #1
 800f3e4:	f000 80b2 	beq.w	800f54c <__kernel_rem_pio2+0x320>
 800f3e8:	f1ba 0f02 	cmp.w	sl, #2
 800f3ec:	f000 80b9 	beq.w	800f562 <__kernel_rem_pio2+0x336>
 800f3f0:	9b00      	ldr	r3, [sp, #0]
 800f3f2:	2b02      	cmp	r3, #2
 800f3f4:	d14c      	bne.n	800f490 <__kernel_rem_pio2+0x264>
 800f3f6:	4642      	mov	r2, r8
 800f3f8:	464b      	mov	r3, r9
 800f3fa:	2000      	movs	r0, #0
 800f3fc:	4947      	ldr	r1, [pc, #284]	@ (800f51c <__kernel_rem_pio2+0x2f0>)
 800f3fe:	f7f0 ff1f 	bl	8000240 <__aeabi_dsub>
 800f402:	4680      	mov	r8, r0
 800f404:	4689      	mov	r9, r1
 800f406:	2c00      	cmp	r4, #0
 800f408:	d042      	beq.n	800f490 <__kernel_rem_pio2+0x264>
 800f40a:	4652      	mov	r2, sl
 800f40c:	2000      	movs	r0, #0
 800f40e:	4943      	ldr	r1, [pc, #268]	@ (800f51c <__kernel_rem_pio2+0x2f0>)
 800f410:	f000 fcd2 	bl	800fdb8 <scalbn>
 800f414:	4602      	mov	r2, r0
 800f416:	460b      	mov	r3, r1
 800f418:	4640      	mov	r0, r8
 800f41a:	4649      	mov	r1, r9
 800f41c:	f7f0 ff10 	bl	8000240 <__aeabi_dsub>
 800f420:	4680      	mov	r8, r0
 800f422:	4689      	mov	r9, r1
 800f424:	e034      	b.n	800f490 <__kernel_rem_pio2+0x264>
 800f426:	2200      	movs	r2, #0
 800f428:	4b3d      	ldr	r3, [pc, #244]	@ (800f520 <__kernel_rem_pio2+0x2f4>)
 800f42a:	4620      	mov	r0, r4
 800f42c:	4629      	mov	r1, r5
 800f42e:	f7f1 f8bf 	bl	80005b0 <__aeabi_dmul>
 800f432:	f7f1 fb57 	bl	8000ae4 <__aeabi_d2iz>
 800f436:	f7f1 f851 	bl	80004dc <__aeabi_i2d>
 800f43a:	4602      	mov	r2, r0
 800f43c:	460b      	mov	r3, r1
 800f43e:	e9cd 2300 	strd	r2, r3, [sp]
 800f442:	2200      	movs	r2, #0
 800f444:	4b37      	ldr	r3, [pc, #220]	@ (800f524 <__kernel_rem_pio2+0x2f8>)
 800f446:	f7f1 f8b3 	bl	80005b0 <__aeabi_dmul>
 800f44a:	4602      	mov	r2, r0
 800f44c:	460b      	mov	r3, r1
 800f44e:	4620      	mov	r0, r4
 800f450:	4629      	mov	r1, r5
 800f452:	f7f0 fef5 	bl	8000240 <__aeabi_dsub>
 800f456:	f7f1 fb45 	bl	8000ae4 <__aeabi_d2iz>
 800f45a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800f45e:	f849 0b04 	str.w	r0, [r9], #4
 800f462:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f466:	f7f0 feed 	bl	8000244 <__adddf3>
 800f46a:	3f01      	subs	r7, #1
 800f46c:	4604      	mov	r4, r0
 800f46e:	460d      	mov	r5, r1
 800f470:	e763      	b.n	800f33a <__kernel_rem_pio2+0x10e>
 800f472:	d106      	bne.n	800f482 <__kernel_rem_pio2+0x256>
 800f474:	f10b 33ff 	add.w	r3, fp, #4294967295
 800f478:	aa0c      	add	r2, sp, #48	@ 0x30
 800f47a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f47e:	15db      	asrs	r3, r3, #23
 800f480:	e79d      	b.n	800f3be <__kernel_rem_pio2+0x192>
 800f482:	2200      	movs	r2, #0
 800f484:	4b28      	ldr	r3, [pc, #160]	@ (800f528 <__kernel_rem_pio2+0x2fc>)
 800f486:	f7f1 fb19 	bl	8000abc <__aeabi_dcmpge>
 800f48a:	2800      	cmp	r0, #0
 800f48c:	d13f      	bne.n	800f50e <__kernel_rem_pio2+0x2e2>
 800f48e:	9000      	str	r0, [sp, #0]
 800f490:	2200      	movs	r2, #0
 800f492:	2300      	movs	r3, #0
 800f494:	4640      	mov	r0, r8
 800f496:	4649      	mov	r1, r9
 800f498:	f7f1 faf2 	bl	8000a80 <__aeabi_dcmpeq>
 800f49c:	2800      	cmp	r0, #0
 800f49e:	f000 80af 	beq.w	800f600 <__kernel_rem_pio2+0x3d4>
 800f4a2:	2200      	movs	r2, #0
 800f4a4:	f10b 33ff 	add.w	r3, fp, #4294967295
 800f4a8:	9902      	ldr	r1, [sp, #8]
 800f4aa:	428b      	cmp	r3, r1
 800f4ac:	da61      	bge.n	800f572 <__kernel_rem_pio2+0x346>
 800f4ae:	2a00      	cmp	r2, #0
 800f4b0:	d076      	beq.n	800f5a0 <__kernel_rem_pio2+0x374>
 800f4b2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f4b6:	ab0c      	add	r3, sp, #48	@ 0x30
 800f4b8:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800f4bc:	f1aa 0a18 	sub.w	sl, sl, #24
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d0f6      	beq.n	800f4b2 <__kernel_rem_pio2+0x286>
 800f4c4:	4652      	mov	r2, sl
 800f4c6:	2000      	movs	r0, #0
 800f4c8:	4914      	ldr	r1, [pc, #80]	@ (800f51c <__kernel_rem_pio2+0x2f0>)
 800f4ca:	f000 fc75 	bl	800fdb8 <scalbn>
 800f4ce:	465d      	mov	r5, fp
 800f4d0:	4606      	mov	r6, r0
 800f4d2:	460f      	mov	r7, r1
 800f4d4:	f04f 0900 	mov.w	r9, #0
 800f4d8:	ab70      	add	r3, sp, #448	@ 0x1c0
 800f4da:	f8df a044 	ldr.w	sl, [pc, #68]	@ 800f520 <__kernel_rem_pio2+0x2f4>
 800f4de:	ea4f 04cb 	mov.w	r4, fp, lsl #3
 800f4e2:	eb03 08cb 	add.w	r8, r3, fp, lsl #3
 800f4e6:	2d00      	cmp	r5, #0
 800f4e8:	f280 80c0 	bge.w	800f66c <__kernel_rem_pio2+0x440>
 800f4ec:	465d      	mov	r5, fp
 800f4ee:	2d00      	cmp	r5, #0
 800f4f0:	f2c0 80f0 	blt.w	800f6d4 <__kernel_rem_pio2+0x4a8>
 800f4f4:	4b0d      	ldr	r3, [pc, #52]	@ (800f52c <__kernel_rem_pio2+0x300>)
 800f4f6:	f04f 0900 	mov.w	r9, #0
 800f4fa:	9306      	str	r3, [sp, #24]
 800f4fc:	ab70      	add	r3, sp, #448	@ 0x1c0
 800f4fe:	f04f 0a00 	mov.w	sl, #0
 800f502:	2700      	movs	r7, #0
 800f504:	eb03 08c5 	add.w	r8, r3, r5, lsl #3
 800f508:	ebab 0605 	sub.w	r6, fp, r5
 800f50c:	e0d6      	b.n	800f6bc <__kernel_rem_pio2+0x490>
 800f50e:	2302      	movs	r3, #2
 800f510:	9300      	str	r3, [sp, #0]
 800f512:	e758      	b.n	800f3c6 <__kernel_rem_pio2+0x19a>
 800f514:	08011210 	.word	0x08011210
 800f518:	40200000 	.word	0x40200000
 800f51c:	3ff00000 	.word	0x3ff00000
 800f520:	3e700000 	.word	0x3e700000
 800f524:	41700000 	.word	0x41700000
 800f528:	3fe00000 	.word	0x3fe00000
 800f52c:	080111d0 	.word	0x080111d0
 800f530:	f856 3b04 	ldr.w	r3, [r6], #4
 800f534:	b944      	cbnz	r4, 800f548 <__kernel_rem_pio2+0x31c>
 800f536:	b123      	cbz	r3, 800f542 <__kernel_rem_pio2+0x316>
 800f538:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800f53c:	f846 3c04 	str.w	r3, [r6, #-4]
 800f540:	2301      	movs	r3, #1
 800f542:	461c      	mov	r4, r3
 800f544:	3201      	adds	r2, #1
 800f546:	e745      	b.n	800f3d4 <__kernel_rem_pio2+0x1a8>
 800f548:	1acb      	subs	r3, r1, r3
 800f54a:	e7f7      	b.n	800f53c <__kernel_rem_pio2+0x310>
 800f54c:	f10b 32ff 	add.w	r2, fp, #4294967295
 800f550:	ab0c      	add	r3, sp, #48	@ 0x30
 800f552:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f556:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800f55a:	a90c      	add	r1, sp, #48	@ 0x30
 800f55c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800f560:	e746      	b.n	800f3f0 <__kernel_rem_pio2+0x1c4>
 800f562:	f10b 32ff 	add.w	r2, fp, #4294967295
 800f566:	ab0c      	add	r3, sp, #48	@ 0x30
 800f568:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f56c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800f570:	e7f3      	b.n	800f55a <__kernel_rem_pio2+0x32e>
 800f572:	a90c      	add	r1, sp, #48	@ 0x30
 800f574:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800f578:	3b01      	subs	r3, #1
 800f57a:	430a      	orrs	r2, r1
 800f57c:	e794      	b.n	800f4a8 <__kernel_rem_pio2+0x27c>
 800f57e:	3401      	adds	r4, #1
 800f580:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800f584:	2a00      	cmp	r2, #0
 800f586:	d0fa      	beq.n	800f57e <__kernel_rem_pio2+0x352>
 800f588:	9b08      	ldr	r3, [sp, #32]
 800f58a:	aa20      	add	r2, sp, #128	@ 0x80
 800f58c:	445b      	add	r3, fp
 800f58e:	f10b 0801 	add.w	r8, fp, #1
 800f592:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800f596:	445c      	add	r4, fp
 800f598:	4544      	cmp	r4, r8
 800f59a:	da04      	bge.n	800f5a6 <__kernel_rem_pio2+0x37a>
 800f59c:	46a3      	mov	fp, r4
 800f59e:	e6bf      	b.n	800f320 <__kernel_rem_pio2+0xf4>
 800f5a0:	2401      	movs	r4, #1
 800f5a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f5a4:	e7ec      	b.n	800f580 <__kernel_rem_pio2+0x354>
 800f5a6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f5a8:	46ab      	mov	fp, r5
 800f5aa:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800f5ae:	f7f0 ff95 	bl	80004dc <__aeabi_i2d>
 800f5b2:	f04f 0900 	mov.w	r9, #0
 800f5b6:	2600      	movs	r6, #0
 800f5b8:	2700      	movs	r7, #0
 800f5ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f5bc:	e9c5 0100 	strd	r0, r1, [r5]
 800f5c0:	3b08      	subs	r3, #8
 800f5c2:	9300      	str	r3, [sp, #0]
 800f5c4:	9b06      	ldr	r3, [sp, #24]
 800f5c6:	4599      	cmp	r9, r3
 800f5c8:	dd07      	ble.n	800f5da <__kernel_rem_pio2+0x3ae>
 800f5ca:	9b07      	ldr	r3, [sp, #28]
 800f5cc:	f108 0801 	add.w	r8, r8, #1
 800f5d0:	e9e3 6702 	strd	r6, r7, [r3, #8]!
 800f5d4:	3508      	adds	r5, #8
 800f5d6:	9307      	str	r3, [sp, #28]
 800f5d8:	e7de      	b.n	800f598 <__kernel_rem_pio2+0x36c>
 800f5da:	9900      	ldr	r1, [sp, #0]
 800f5dc:	f109 0901 	add.w	r9, r9, #1
 800f5e0:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 800f5e4:	9100      	str	r1, [sp, #0]
 800f5e6:	e87b 0102 	ldrd	r0, r1, [fp], #-8
 800f5ea:	f7f0 ffe1 	bl	80005b0 <__aeabi_dmul>
 800f5ee:	4602      	mov	r2, r0
 800f5f0:	460b      	mov	r3, r1
 800f5f2:	4630      	mov	r0, r6
 800f5f4:	4639      	mov	r1, r7
 800f5f6:	f7f0 fe25 	bl	8000244 <__adddf3>
 800f5fa:	4606      	mov	r6, r0
 800f5fc:	460f      	mov	r7, r1
 800f5fe:	e7e1      	b.n	800f5c4 <__kernel_rem_pio2+0x398>
 800f600:	f1ca 0200 	rsb	r2, sl, #0
 800f604:	4640      	mov	r0, r8
 800f606:	4649      	mov	r1, r9
 800f608:	f000 fbd6 	bl	800fdb8 <scalbn>
 800f60c:	2200      	movs	r2, #0
 800f60e:	4b97      	ldr	r3, [pc, #604]	@ (800f86c <__kernel_rem_pio2+0x640>)
 800f610:	4604      	mov	r4, r0
 800f612:	460d      	mov	r5, r1
 800f614:	f7f1 fa52 	bl	8000abc <__aeabi_dcmpge>
 800f618:	b300      	cbz	r0, 800f65c <__kernel_rem_pio2+0x430>
 800f61a:	2200      	movs	r2, #0
 800f61c:	4b94      	ldr	r3, [pc, #592]	@ (800f870 <__kernel_rem_pio2+0x644>)
 800f61e:	4620      	mov	r0, r4
 800f620:	4629      	mov	r1, r5
 800f622:	f7f0 ffc5 	bl	80005b0 <__aeabi_dmul>
 800f626:	f7f1 fa5d 	bl	8000ae4 <__aeabi_d2iz>
 800f62a:	4606      	mov	r6, r0
 800f62c:	f7f0 ff56 	bl	80004dc <__aeabi_i2d>
 800f630:	2200      	movs	r2, #0
 800f632:	4b8e      	ldr	r3, [pc, #568]	@ (800f86c <__kernel_rem_pio2+0x640>)
 800f634:	f7f0 ffbc 	bl	80005b0 <__aeabi_dmul>
 800f638:	460b      	mov	r3, r1
 800f63a:	4602      	mov	r2, r0
 800f63c:	4629      	mov	r1, r5
 800f63e:	4620      	mov	r0, r4
 800f640:	f7f0 fdfe 	bl	8000240 <__aeabi_dsub>
 800f644:	f7f1 fa4e 	bl	8000ae4 <__aeabi_d2iz>
 800f648:	ab0c      	add	r3, sp, #48	@ 0x30
 800f64a:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 800f64e:	f10b 0b01 	add.w	fp, fp, #1
 800f652:	f10a 0a18 	add.w	sl, sl, #24
 800f656:	f843 602b 	str.w	r6, [r3, fp, lsl #2]
 800f65a:	e733      	b.n	800f4c4 <__kernel_rem_pio2+0x298>
 800f65c:	4620      	mov	r0, r4
 800f65e:	4629      	mov	r1, r5
 800f660:	f7f1 fa40 	bl	8000ae4 <__aeabi_d2iz>
 800f664:	ab0c      	add	r3, sp, #48	@ 0x30
 800f666:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 800f66a:	e72b      	b.n	800f4c4 <__kernel_rem_pio2+0x298>
 800f66c:	ab0c      	add	r3, sp, #48	@ 0x30
 800f66e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f672:	f7f0 ff33 	bl	80004dc <__aeabi_i2d>
 800f676:	4632      	mov	r2, r6
 800f678:	463b      	mov	r3, r7
 800f67a:	f7f0 ff99 	bl	80005b0 <__aeabi_dmul>
 800f67e:	464a      	mov	r2, r9
 800f680:	e868 0102 	strd	r0, r1, [r8], #-8
 800f684:	4653      	mov	r3, sl
 800f686:	4630      	mov	r0, r6
 800f688:	4639      	mov	r1, r7
 800f68a:	f7f0 ff91 	bl	80005b0 <__aeabi_dmul>
 800f68e:	3d01      	subs	r5, #1
 800f690:	4606      	mov	r6, r0
 800f692:	460f      	mov	r7, r1
 800f694:	e727      	b.n	800f4e6 <__kernel_rem_pio2+0x2ba>
 800f696:	f8dd c018 	ldr.w	ip, [sp, #24]
 800f69a:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800f69e:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 800f6a2:	f8cd c018 	str.w	ip, [sp, #24]
 800f6a6:	f7f0 ff83 	bl	80005b0 <__aeabi_dmul>
 800f6aa:	4602      	mov	r2, r0
 800f6ac:	460b      	mov	r3, r1
 800f6ae:	4648      	mov	r0, r9
 800f6b0:	4651      	mov	r1, sl
 800f6b2:	f7f0 fdc7 	bl	8000244 <__adddf3>
 800f6b6:	4681      	mov	r9, r0
 800f6b8:	468a      	mov	sl, r1
 800f6ba:	3701      	adds	r7, #1
 800f6bc:	9b02      	ldr	r3, [sp, #8]
 800f6be:	429f      	cmp	r7, r3
 800f6c0:	dc01      	bgt.n	800f6c6 <__kernel_rem_pio2+0x49a>
 800f6c2:	42be      	cmp	r6, r7
 800f6c4:	dae7      	bge.n	800f696 <__kernel_rem_pio2+0x46a>
 800f6c6:	ab48      	add	r3, sp, #288	@ 0x120
 800f6c8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800f6cc:	e9c6 9a00 	strd	r9, sl, [r6]
 800f6d0:	3d01      	subs	r5, #1
 800f6d2:	e70c      	b.n	800f4ee <__kernel_rem_pio2+0x2c2>
 800f6d4:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 800f6d6:	2b02      	cmp	r3, #2
 800f6d8:	dc09      	bgt.n	800f6ee <__kernel_rem_pio2+0x4c2>
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	dc2c      	bgt.n	800f738 <__kernel_rem_pio2+0x50c>
 800f6de:	d04e      	beq.n	800f77e <__kernel_rem_pio2+0x552>
 800f6e0:	9b05      	ldr	r3, [sp, #20]
 800f6e2:	f003 0007 	and.w	r0, r3, #7
 800f6e6:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800f6ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6ee:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 800f6f0:	2b03      	cmp	r3, #3
 800f6f2:	d1f5      	bne.n	800f6e0 <__kernel_rem_pio2+0x4b4>
 800f6f4:	ab48      	add	r3, sp, #288	@ 0x120
 800f6f6:	441c      	add	r4, r3
 800f6f8:	4625      	mov	r5, r4
 800f6fa:	46da      	mov	sl, fp
 800f6fc:	f1ba 0f00 	cmp.w	sl, #0
 800f700:	dc63      	bgt.n	800f7ca <__kernel_rem_pio2+0x59e>
 800f702:	4625      	mov	r5, r4
 800f704:	46da      	mov	sl, fp
 800f706:	f1ba 0f01 	cmp.w	sl, #1
 800f70a:	dc7b      	bgt.n	800f804 <__kernel_rem_pio2+0x5d8>
 800f70c:	2000      	movs	r0, #0
 800f70e:	2100      	movs	r1, #0
 800f710:	f1bb 0f01 	cmp.w	fp, #1
 800f714:	f300 8093 	bgt.w	800f83e <__kernel_rem_pio2+0x612>
 800f718:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800f71c:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800f720:	9b00      	ldr	r3, [sp, #0]
 800f722:	2b00      	cmp	r3, #0
 800f724:	f040 8092 	bne.w	800f84c <__kernel_rem_pio2+0x620>
 800f728:	9b04      	ldr	r3, [sp, #16]
 800f72a:	e9c3 7800 	strd	r7, r8, [r3]
 800f72e:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800f732:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800f736:	e7d3      	b.n	800f6e0 <__kernel_rem_pio2+0x4b4>
 800f738:	465d      	mov	r5, fp
 800f73a:	2000      	movs	r0, #0
 800f73c:	2100      	movs	r1, #0
 800f73e:	ab48      	add	r3, sp, #288	@ 0x120
 800f740:	441c      	add	r4, r3
 800f742:	2d00      	cmp	r5, #0
 800f744:	da32      	bge.n	800f7ac <__kernel_rem_pio2+0x580>
 800f746:	9b00      	ldr	r3, [sp, #0]
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d035      	beq.n	800f7b8 <__kernel_rem_pio2+0x58c>
 800f74c:	4602      	mov	r2, r0
 800f74e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f752:	9c04      	ldr	r4, [sp, #16]
 800f754:	2501      	movs	r5, #1
 800f756:	e9c4 2300 	strd	r2, r3, [r4]
 800f75a:	4602      	mov	r2, r0
 800f75c:	460b      	mov	r3, r1
 800f75e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800f762:	f7f0 fd6d 	bl	8000240 <__aeabi_dsub>
 800f766:	ac48      	add	r4, sp, #288	@ 0x120
 800f768:	45ab      	cmp	fp, r5
 800f76a:	da28      	bge.n	800f7be <__kernel_rem_pio2+0x592>
 800f76c:	9b00      	ldr	r3, [sp, #0]
 800f76e:	b113      	cbz	r3, 800f776 <__kernel_rem_pio2+0x54a>
 800f770:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f774:	4619      	mov	r1, r3
 800f776:	9b04      	ldr	r3, [sp, #16]
 800f778:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800f77c:	e7b0      	b.n	800f6e0 <__kernel_rem_pio2+0x4b4>
 800f77e:	2000      	movs	r0, #0
 800f780:	2100      	movs	r1, #0
 800f782:	ab48      	add	r3, sp, #288	@ 0x120
 800f784:	441c      	add	r4, r3
 800f786:	f1bb 0f00 	cmp.w	fp, #0
 800f78a:	da08      	bge.n	800f79e <__kernel_rem_pio2+0x572>
 800f78c:	9b00      	ldr	r3, [sp, #0]
 800f78e:	b113      	cbz	r3, 800f796 <__kernel_rem_pio2+0x56a>
 800f790:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f794:	4619      	mov	r1, r3
 800f796:	9b04      	ldr	r3, [sp, #16]
 800f798:	e9c3 0100 	strd	r0, r1, [r3]
 800f79c:	e7a0      	b.n	800f6e0 <__kernel_rem_pio2+0x4b4>
 800f79e:	e874 2302 	ldrd	r2, r3, [r4], #-8
 800f7a2:	f7f0 fd4f 	bl	8000244 <__adddf3>
 800f7a6:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f7aa:	e7ec      	b.n	800f786 <__kernel_rem_pio2+0x55a>
 800f7ac:	e874 2302 	ldrd	r2, r3, [r4], #-8
 800f7b0:	f7f0 fd48 	bl	8000244 <__adddf3>
 800f7b4:	3d01      	subs	r5, #1
 800f7b6:	e7c4      	b.n	800f742 <__kernel_rem_pio2+0x516>
 800f7b8:	4602      	mov	r2, r0
 800f7ba:	460b      	mov	r3, r1
 800f7bc:	e7c9      	b.n	800f752 <__kernel_rem_pio2+0x526>
 800f7be:	e9f4 2302 	ldrd	r2, r3, [r4, #8]!
 800f7c2:	f7f0 fd3f 	bl	8000244 <__adddf3>
 800f7c6:	3501      	adds	r5, #1
 800f7c8:	e7ce      	b.n	800f768 <__kernel_rem_pio2+0x53c>
 800f7ca:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f7ce:	e955 8902 	ldrd	r8, r9, [r5, #-8]
 800f7d2:	4640      	mov	r0, r8
 800f7d4:	4649      	mov	r1, r9
 800f7d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f7da:	f7f0 fd33 	bl	8000244 <__adddf3>
 800f7de:	4602      	mov	r2, r0
 800f7e0:	460b      	mov	r3, r1
 800f7e2:	4606      	mov	r6, r0
 800f7e4:	460f      	mov	r7, r1
 800f7e6:	4640      	mov	r0, r8
 800f7e8:	4649      	mov	r1, r9
 800f7ea:	f7f0 fd29 	bl	8000240 <__aeabi_dsub>
 800f7ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f7f2:	f7f0 fd27 	bl	8000244 <__adddf3>
 800f7f6:	e865 0102 	strd	r0, r1, [r5], #-8
 800f7fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f7fe:	e9c5 6700 	strd	r6, r7, [r5]
 800f802:	e77b      	b.n	800f6fc <__kernel_rem_pio2+0x4d0>
 800f804:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f808:	e955 8902 	ldrd	r8, r9, [r5, #-8]
 800f80c:	4640      	mov	r0, r8
 800f80e:	4649      	mov	r1, r9
 800f810:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f814:	f7f0 fd16 	bl	8000244 <__adddf3>
 800f818:	4602      	mov	r2, r0
 800f81a:	460b      	mov	r3, r1
 800f81c:	4606      	mov	r6, r0
 800f81e:	460f      	mov	r7, r1
 800f820:	4640      	mov	r0, r8
 800f822:	4649      	mov	r1, r9
 800f824:	f7f0 fd0c 	bl	8000240 <__aeabi_dsub>
 800f828:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f82c:	f7f0 fd0a 	bl	8000244 <__adddf3>
 800f830:	e865 0102 	strd	r0, r1, [r5], #-8
 800f834:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f838:	e9c5 6700 	strd	r6, r7, [r5]
 800f83c:	e763      	b.n	800f706 <__kernel_rem_pio2+0x4da>
 800f83e:	e874 2302 	ldrd	r2, r3, [r4], #-8
 800f842:	f7f0 fcff 	bl	8000244 <__adddf3>
 800f846:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f84a:	e761      	b.n	800f710 <__kernel_rem_pio2+0x4e4>
 800f84c:	9b04      	ldr	r3, [sp, #16]
 800f84e:	9a04      	ldr	r2, [sp, #16]
 800f850:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800f854:	601f      	str	r7, [r3, #0]
 800f856:	605c      	str	r4, [r3, #4]
 800f858:	609d      	str	r5, [r3, #8]
 800f85a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800f85e:	60d3      	str	r3, [r2, #12]
 800f860:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f864:	6110      	str	r0, [r2, #16]
 800f866:	6153      	str	r3, [r2, #20]
 800f868:	e73a      	b.n	800f6e0 <__kernel_rem_pio2+0x4b4>
 800f86a:	bf00      	nop
 800f86c:	41700000 	.word	0x41700000
 800f870:	3e700000 	.word	0x3e700000

0800f874 <__kernel_rem_pio2f>:
 800f874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f878:	b0db      	sub	sp, #364	@ 0x16c
 800f87a:	9202      	str	r2, [sp, #8]
 800f87c:	9304      	str	r3, [sp, #16]
 800f87e:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 800f880:	4bad      	ldr	r3, [pc, #692]	@ (800fb38 <__kernel_rem_pio2f+0x2c4>)
 800f882:	9005      	str	r0, [sp, #20]
 800f884:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f888:	9100      	str	r1, [sp, #0]
 800f88a:	9301      	str	r3, [sp, #4]
 800f88c:	9b04      	ldr	r3, [sp, #16]
 800f88e:	3b01      	subs	r3, #1
 800f890:	9303      	str	r3, [sp, #12]
 800f892:	9b02      	ldr	r3, [sp, #8]
 800f894:	1d1a      	adds	r2, r3, #4
 800f896:	f2c0 8099 	blt.w	800f9cc <__kernel_rem_pio2f+0x158>
 800f89a:	1edc      	subs	r4, r3, #3
 800f89c:	bf48      	it	mi
 800f89e:	1d1c      	addmi	r4, r3, #4
 800f8a0:	10e4      	asrs	r4, r4, #3
 800f8a2:	2500      	movs	r5, #0
 800f8a4:	f04f 0b00 	mov.w	fp, #0
 800f8a8:	1c67      	adds	r7, r4, #1
 800f8aa:	00fb      	lsls	r3, r7, #3
 800f8ac:	9306      	str	r3, [sp, #24]
 800f8ae:	9b02      	ldr	r3, [sp, #8]
 800f8b0:	9a03      	ldr	r2, [sp, #12]
 800f8b2:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 800f8b6:	9b01      	ldr	r3, [sp, #4]
 800f8b8:	eba4 0802 	sub.w	r8, r4, r2
 800f8bc:	eb03 0902 	add.w	r9, r3, r2
 800f8c0:	9b65      	ldr	r3, [sp, #404]	@ 0x194
 800f8c2:	ae1e      	add	r6, sp, #120	@ 0x78
 800f8c4:	eb03 0a88 	add.w	sl, r3, r8, lsl #2
 800f8c8:	454d      	cmp	r5, r9
 800f8ca:	f340 8081 	ble.w	800f9d0 <__kernel_rem_pio2f+0x15c>
 800f8ce:	9a04      	ldr	r2, [sp, #16]
 800f8d0:	ab1e      	add	r3, sp, #120	@ 0x78
 800f8d2:	eb03 0582 	add.w	r5, r3, r2, lsl #2
 800f8d6:	f04f 0900 	mov.w	r9, #0
 800f8da:	2300      	movs	r3, #0
 800f8dc:	f50d 7b8c 	add.w	fp, sp, #280	@ 0x118
 800f8e0:	9a01      	ldr	r2, [sp, #4]
 800f8e2:	4591      	cmp	r9, r2
 800f8e4:	f340 809c 	ble.w	800fa20 <__kernel_rem_pio2f+0x1ac>
 800f8e8:	4613      	mov	r3, r2
 800f8ea:	aa0a      	add	r2, sp, #40	@ 0x28
 800f8ec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f8f0:	9308      	str	r3, [sp, #32]
 800f8f2:	9b65      	ldr	r3, [sp, #404]	@ 0x194
 800f8f4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800f8f8:	9c01      	ldr	r4, [sp, #4]
 800f8fa:	9307      	str	r3, [sp, #28]
 800f8fc:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 800f900:	4646      	mov	r6, r8
 800f902:	4625      	mov	r5, r4
 800f904:	f04f 4987 	mov.w	r9, #1132462080	@ 0x43800000
 800f908:	ab5a      	add	r3, sp, #360	@ 0x168
 800f90a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800f90e:	f853 bc50 	ldr.w	fp, [r3, #-80]
 800f912:	f50d 7a8c 	add.w	sl, sp, #280	@ 0x118
 800f916:	2d00      	cmp	r5, #0
 800f918:	f300 8087 	bgt.w	800fa2a <__kernel_rem_pio2f+0x1b6>
 800f91c:	4639      	mov	r1, r7
 800f91e:	4658      	mov	r0, fp
 800f920:	f000 fac0 	bl	800fea4 <scalbnf>
 800f924:	f04f 5178 	mov.w	r1, #1040187392	@ 0x3e000000
 800f928:	4605      	mov	r5, r0
 800f92a:	f7f1 fa61 	bl	8000df0 <__aeabi_fmul>
 800f92e:	f000 fb87 	bl	8010040 <floorf>
 800f932:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 800f936:	f7f1 fa5b 	bl	8000df0 <__aeabi_fmul>
 800f93a:	4601      	mov	r1, r0
 800f93c:	4628      	mov	r0, r5
 800f93e:	f7f1 f94d 	bl	8000bdc <__aeabi_fsub>
 800f942:	4605      	mov	r5, r0
 800f944:	f7f1 fc1a 	bl	800117c <__aeabi_f2iz>
 800f948:	4606      	mov	r6, r0
 800f94a:	f7f1 f9fd 	bl	8000d48 <__aeabi_i2f>
 800f94e:	4601      	mov	r1, r0
 800f950:	4628      	mov	r0, r5
 800f952:	f7f1 f943 	bl	8000bdc <__aeabi_fsub>
 800f956:	2f00      	cmp	r7, #0
 800f958:	4681      	mov	r9, r0
 800f95a:	f340 8083 	ble.w	800fa64 <__kernel_rem_pio2f+0x1f0>
 800f95e:	1e62      	subs	r2, r4, #1
 800f960:	ab0a      	add	r3, sp, #40	@ 0x28
 800f962:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800f966:	f1c7 0108 	rsb	r1, r7, #8
 800f96a:	fa45 f301 	asr.w	r3, r5, r1
 800f96e:	441e      	add	r6, r3
 800f970:	408b      	lsls	r3, r1
 800f972:	1aed      	subs	r5, r5, r3
 800f974:	ab0a      	add	r3, sp, #40	@ 0x28
 800f976:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800f97a:	f1c7 0307 	rsb	r3, r7, #7
 800f97e:	411d      	asrs	r5, r3
 800f980:	2d00      	cmp	r5, #0
 800f982:	dd7c      	ble.n	800fa7e <__kernel_rem_pio2f+0x20a>
 800f984:	2200      	movs	r2, #0
 800f986:	4692      	mov	sl, r2
 800f988:	3601      	adds	r6, #1
 800f98a:	4294      	cmp	r4, r2
 800f98c:	f300 80ac 	bgt.w	800fae8 <__kernel_rem_pio2f+0x274>
 800f990:	2f00      	cmp	r7, #0
 800f992:	dd05      	ble.n	800f9a0 <__kernel_rem_pio2f+0x12c>
 800f994:	2f01      	cmp	r7, #1
 800f996:	f000 80b8 	beq.w	800fb0a <__kernel_rem_pio2f+0x296>
 800f99a:	2f02      	cmp	r7, #2
 800f99c:	f000 80bf 	beq.w	800fb1e <__kernel_rem_pio2f+0x2aa>
 800f9a0:	2d02      	cmp	r5, #2
 800f9a2:	d16c      	bne.n	800fa7e <__kernel_rem_pio2f+0x20a>
 800f9a4:	4649      	mov	r1, r9
 800f9a6:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800f9aa:	f7f1 f917 	bl	8000bdc <__aeabi_fsub>
 800f9ae:	4681      	mov	r9, r0
 800f9b0:	f1ba 0f00 	cmp.w	sl, #0
 800f9b4:	d063      	beq.n	800fa7e <__kernel_rem_pio2f+0x20a>
 800f9b6:	4639      	mov	r1, r7
 800f9b8:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800f9bc:	f000 fa72 	bl	800fea4 <scalbnf>
 800f9c0:	4601      	mov	r1, r0
 800f9c2:	4648      	mov	r0, r9
 800f9c4:	f7f1 f90a 	bl	8000bdc <__aeabi_fsub>
 800f9c8:	4681      	mov	r9, r0
 800f9ca:	e058      	b.n	800fa7e <__kernel_rem_pio2f+0x20a>
 800f9cc:	2400      	movs	r4, #0
 800f9ce:	e768      	b.n	800f8a2 <__kernel_rem_pio2f+0x2e>
 800f9d0:	eb18 0f05 	cmn.w	r8, r5
 800f9d4:	d407      	bmi.n	800f9e6 <__kernel_rem_pio2f+0x172>
 800f9d6:	f85a 0025 	ldr.w	r0, [sl, r5, lsl #2]
 800f9da:	f7f1 f9b5 	bl	8000d48 <__aeabi_i2f>
 800f9de:	f846 0b04 	str.w	r0, [r6], #4
 800f9e2:	3501      	adds	r5, #1
 800f9e4:	e770      	b.n	800f8c8 <__kernel_rem_pio2f+0x54>
 800f9e6:	4658      	mov	r0, fp
 800f9e8:	e7f9      	b.n	800f9de <__kernel_rem_pio2f+0x16a>
 800f9ea:	9307      	str	r3, [sp, #28]
 800f9ec:	9b05      	ldr	r3, [sp, #20]
 800f9ee:	f8da 1000 	ldr.w	r1, [sl]
 800f9f2:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800f9f6:	f7f1 f9fb 	bl	8000df0 <__aeabi_fmul>
 800f9fa:	4601      	mov	r1, r0
 800f9fc:	4630      	mov	r0, r6
 800f9fe:	f7f1 f8ef 	bl	8000be0 <__addsf3>
 800fa02:	4606      	mov	r6, r0
 800fa04:	9b07      	ldr	r3, [sp, #28]
 800fa06:	f108 0801 	add.w	r8, r8, #1
 800fa0a:	9a03      	ldr	r2, [sp, #12]
 800fa0c:	f1aa 0a04 	sub.w	sl, sl, #4
 800fa10:	4590      	cmp	r8, r2
 800fa12:	ddea      	ble.n	800f9ea <__kernel_rem_pio2f+0x176>
 800fa14:	f84b 6b04 	str.w	r6, [fp], #4
 800fa18:	f109 0901 	add.w	r9, r9, #1
 800fa1c:	3504      	adds	r5, #4
 800fa1e:	e75f      	b.n	800f8e0 <__kernel_rem_pio2f+0x6c>
 800fa20:	46aa      	mov	sl, r5
 800fa22:	461e      	mov	r6, r3
 800fa24:	f04f 0800 	mov.w	r8, #0
 800fa28:	e7ef      	b.n	800fa0a <__kernel_rem_pio2f+0x196>
 800fa2a:	f04f 516e 	mov.w	r1, #998244352	@ 0x3b800000
 800fa2e:	4658      	mov	r0, fp
 800fa30:	f7f1 f9de 	bl	8000df0 <__aeabi_fmul>
 800fa34:	f7f1 fba2 	bl	800117c <__aeabi_f2iz>
 800fa38:	f7f1 f986 	bl	8000d48 <__aeabi_i2f>
 800fa3c:	4649      	mov	r1, r9
 800fa3e:	9009      	str	r0, [sp, #36]	@ 0x24
 800fa40:	f7f1 f9d6 	bl	8000df0 <__aeabi_fmul>
 800fa44:	4601      	mov	r1, r0
 800fa46:	4658      	mov	r0, fp
 800fa48:	f7f1 f8c8 	bl	8000bdc <__aeabi_fsub>
 800fa4c:	f7f1 fb96 	bl	800117c <__aeabi_f2iz>
 800fa50:	3d01      	subs	r5, #1
 800fa52:	f846 0b04 	str.w	r0, [r6], #4
 800fa56:	f85a 1025 	ldr.w	r1, [sl, r5, lsl #2]
 800fa5a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fa5c:	f7f1 f8c0 	bl	8000be0 <__addsf3>
 800fa60:	4683      	mov	fp, r0
 800fa62:	e758      	b.n	800f916 <__kernel_rem_pio2f+0xa2>
 800fa64:	d105      	bne.n	800fa72 <__kernel_rem_pio2f+0x1fe>
 800fa66:	1e63      	subs	r3, r4, #1
 800fa68:	aa0a      	add	r2, sp, #40	@ 0x28
 800fa6a:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 800fa6e:	11ed      	asrs	r5, r5, #7
 800fa70:	e786      	b.n	800f980 <__kernel_rem_pio2f+0x10c>
 800fa72:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800fa76:	f7f1 fb6d 	bl	8001154 <__aeabi_fcmpge>
 800fa7a:	4605      	mov	r5, r0
 800fa7c:	bb90      	cbnz	r0, 800fae4 <__kernel_rem_pio2f+0x270>
 800fa7e:	2100      	movs	r1, #0
 800fa80:	4648      	mov	r0, r9
 800fa82:	f7f1 fb49 	bl	8001118 <__aeabi_fcmpeq>
 800fa86:	2800      	cmp	r0, #0
 800fa88:	f000 8090 	beq.w	800fbac <__kernel_rem_pio2f+0x338>
 800fa8c:	2200      	movs	r2, #0
 800fa8e:	1e63      	subs	r3, r4, #1
 800fa90:	9901      	ldr	r1, [sp, #4]
 800fa92:	428b      	cmp	r3, r1
 800fa94:	da4a      	bge.n	800fb2c <__kernel_rem_pio2f+0x2b8>
 800fa96:	2a00      	cmp	r2, #0
 800fa98:	d076      	beq.n	800fb88 <__kernel_rem_pio2f+0x314>
 800fa9a:	3c01      	subs	r4, #1
 800fa9c:	ab0a      	add	r3, sp, #40	@ 0x28
 800fa9e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800faa2:	3f08      	subs	r7, #8
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	d0f8      	beq.n	800fa9a <__kernel_rem_pio2f+0x226>
 800faa8:	4639      	mov	r1, r7
 800faaa:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800faae:	f000 f9f9 	bl	800fea4 <scalbnf>
 800fab2:	46a2      	mov	sl, r4
 800fab4:	4607      	mov	r7, r0
 800fab6:	f04f 596e 	mov.w	r9, #998244352	@ 0x3b800000
 800faba:	f50d 788c 	add.w	r8, sp, #280	@ 0x118
 800fabe:	f1ba 0f00 	cmp.w	sl, #0
 800fac2:	f280 80a1 	bge.w	800fc08 <__kernel_rem_pio2f+0x394>
 800fac6:	4627      	mov	r7, r4
 800fac8:	2200      	movs	r2, #0
 800faca:	2f00      	cmp	r7, #0
 800facc:	f2c0 80cb 	blt.w	800fc66 <__kernel_rem_pio2f+0x3f2>
 800fad0:	a946      	add	r1, sp, #280	@ 0x118
 800fad2:	4690      	mov	r8, r2
 800fad4:	f04f 0a00 	mov.w	sl, #0
 800fad8:	4b18      	ldr	r3, [pc, #96]	@ (800fb3c <__kernel_rem_pio2f+0x2c8>)
 800fada:	eb01 0b87 	add.w	fp, r1, r7, lsl #2
 800fade:	eba4 0907 	sub.w	r9, r4, r7
 800fae2:	e0b4      	b.n	800fc4e <__kernel_rem_pio2f+0x3da>
 800fae4:	2502      	movs	r5, #2
 800fae6:	e74d      	b.n	800f984 <__kernel_rem_pio2f+0x110>
 800fae8:	f858 3b04 	ldr.w	r3, [r8], #4
 800faec:	f1ba 0f00 	cmp.w	sl, #0
 800faf0:	d108      	bne.n	800fb04 <__kernel_rem_pio2f+0x290>
 800faf2:	b123      	cbz	r3, 800fafe <__kernel_rem_pio2f+0x28a>
 800faf4:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 800faf8:	f848 3c04 	str.w	r3, [r8, #-4]
 800fafc:	2301      	movs	r3, #1
 800fafe:	469a      	mov	sl, r3
 800fb00:	3201      	adds	r2, #1
 800fb02:	e742      	b.n	800f98a <__kernel_rem_pio2f+0x116>
 800fb04:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 800fb08:	e7f6      	b.n	800faf8 <__kernel_rem_pio2f+0x284>
 800fb0a:	1e62      	subs	r2, r4, #1
 800fb0c:	ab0a      	add	r3, sp, #40	@ 0x28
 800fb0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fb16:	a90a      	add	r1, sp, #40	@ 0x28
 800fb18:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800fb1c:	e740      	b.n	800f9a0 <__kernel_rem_pio2f+0x12c>
 800fb1e:	1e62      	subs	r2, r4, #1
 800fb20:	ab0a      	add	r3, sp, #40	@ 0x28
 800fb22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb26:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800fb2a:	e7f4      	b.n	800fb16 <__kernel_rem_pio2f+0x2a2>
 800fb2c:	a90a      	add	r1, sp, #40	@ 0x28
 800fb2e:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800fb32:	3b01      	subs	r3, #1
 800fb34:	430a      	orrs	r2, r1
 800fb36:	e7ab      	b.n	800fa90 <__kernel_rem_pio2f+0x21c>
 800fb38:	0801124c 	.word	0x0801124c
 800fb3c:	08011220 	.word	0x08011220
 800fb40:	3301      	adds	r3, #1
 800fb42:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800fb46:	2900      	cmp	r1, #0
 800fb48:	d0fa      	beq.n	800fb40 <__kernel_rem_pio2f+0x2cc>
 800fb4a:	9a04      	ldr	r2, [sp, #16]
 800fb4c:	a91e      	add	r1, sp, #120	@ 0x78
 800fb4e:	18a2      	adds	r2, r4, r2
 800fb50:	1c66      	adds	r6, r4, #1
 800fb52:	eb01 0582 	add.w	r5, r1, r2, lsl #2
 800fb56:	441c      	add	r4, r3
 800fb58:	f50d 798c 	add.w	r9, sp, #280	@ 0x118
 800fb5c:	42b4      	cmp	r4, r6
 800fb5e:	f6ff aecd 	blt.w	800f8fc <__kernel_rem_pio2f+0x88>
 800fb62:	9b07      	ldr	r3, [sp, #28]
 800fb64:	46ab      	mov	fp, r5
 800fb66:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800fb6a:	f7f1 f8ed 	bl	8000d48 <__aeabi_i2f>
 800fb6e:	f04f 0a00 	mov.w	sl, #0
 800fb72:	f04f 0800 	mov.w	r8, #0
 800fb76:	6028      	str	r0, [r5, #0]
 800fb78:	9b03      	ldr	r3, [sp, #12]
 800fb7a:	459a      	cmp	sl, r3
 800fb7c:	dd07      	ble.n	800fb8e <__kernel_rem_pio2f+0x31a>
 800fb7e:	f849 8026 	str.w	r8, [r9, r6, lsl #2]
 800fb82:	3504      	adds	r5, #4
 800fb84:	3601      	adds	r6, #1
 800fb86:	e7e9      	b.n	800fb5c <__kernel_rem_pio2f+0x2e8>
 800fb88:	2301      	movs	r3, #1
 800fb8a:	9a08      	ldr	r2, [sp, #32]
 800fb8c:	e7d9      	b.n	800fb42 <__kernel_rem_pio2f+0x2ce>
 800fb8e:	9b05      	ldr	r3, [sp, #20]
 800fb90:	f85b 0904 	ldr.w	r0, [fp], #-4
 800fb94:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 800fb98:	f7f1 f92a 	bl	8000df0 <__aeabi_fmul>
 800fb9c:	4601      	mov	r1, r0
 800fb9e:	4640      	mov	r0, r8
 800fba0:	f7f1 f81e 	bl	8000be0 <__addsf3>
 800fba4:	f10a 0a01 	add.w	sl, sl, #1
 800fba8:	4680      	mov	r8, r0
 800fbaa:	e7e5      	b.n	800fb78 <__kernel_rem_pio2f+0x304>
 800fbac:	9b06      	ldr	r3, [sp, #24]
 800fbae:	9a02      	ldr	r2, [sp, #8]
 800fbb0:	4648      	mov	r0, r9
 800fbb2:	1a99      	subs	r1, r3, r2
 800fbb4:	f000 f976 	bl	800fea4 <scalbnf>
 800fbb8:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 800fbbc:	4680      	mov	r8, r0
 800fbbe:	f7f1 fac9 	bl	8001154 <__aeabi_fcmpge>
 800fbc2:	b1f8      	cbz	r0, 800fc04 <__kernel_rem_pio2f+0x390>
 800fbc4:	f04f 516e 	mov.w	r1, #998244352	@ 0x3b800000
 800fbc8:	4640      	mov	r0, r8
 800fbca:	f7f1 f911 	bl	8000df0 <__aeabi_fmul>
 800fbce:	f7f1 fad5 	bl	800117c <__aeabi_f2iz>
 800fbd2:	f7f1 f8b9 	bl	8000d48 <__aeabi_i2f>
 800fbd6:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 800fbda:	4681      	mov	r9, r0
 800fbdc:	f7f1 f908 	bl	8000df0 <__aeabi_fmul>
 800fbe0:	4601      	mov	r1, r0
 800fbe2:	4640      	mov	r0, r8
 800fbe4:	f7f0 fffa 	bl	8000bdc <__aeabi_fsub>
 800fbe8:	f7f1 fac8 	bl	800117c <__aeabi_f2iz>
 800fbec:	ab0a      	add	r3, sp, #40	@ 0x28
 800fbee:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800fbf2:	4648      	mov	r0, r9
 800fbf4:	3401      	adds	r4, #1
 800fbf6:	3708      	adds	r7, #8
 800fbf8:	f7f1 fac0 	bl	800117c <__aeabi_f2iz>
 800fbfc:	ab0a      	add	r3, sp, #40	@ 0x28
 800fbfe:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800fc02:	e751      	b.n	800faa8 <__kernel_rem_pio2f+0x234>
 800fc04:	4640      	mov	r0, r8
 800fc06:	e7f7      	b.n	800fbf8 <__kernel_rem_pio2f+0x384>
 800fc08:	ab0a      	add	r3, sp, #40	@ 0x28
 800fc0a:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800fc0e:	f7f1 f89b 	bl	8000d48 <__aeabi_i2f>
 800fc12:	4639      	mov	r1, r7
 800fc14:	f7f1 f8ec 	bl	8000df0 <__aeabi_fmul>
 800fc18:	4649      	mov	r1, r9
 800fc1a:	f848 002a 	str.w	r0, [r8, sl, lsl #2]
 800fc1e:	4638      	mov	r0, r7
 800fc20:	f7f1 f8e6 	bl	8000df0 <__aeabi_fmul>
 800fc24:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fc28:	4607      	mov	r7, r0
 800fc2a:	e748      	b.n	800fabe <__kernel_rem_pio2f+0x24a>
 800fc2c:	f853 0b04 	ldr.w	r0, [r3], #4
 800fc30:	f85b 1b04 	ldr.w	r1, [fp], #4
 800fc34:	9203      	str	r2, [sp, #12]
 800fc36:	9302      	str	r3, [sp, #8]
 800fc38:	f7f1 f8da 	bl	8000df0 <__aeabi_fmul>
 800fc3c:	4601      	mov	r1, r0
 800fc3e:	4640      	mov	r0, r8
 800fc40:	f7f0 ffce 	bl	8000be0 <__addsf3>
 800fc44:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800fc48:	4680      	mov	r8, r0
 800fc4a:	f10a 0a01 	add.w	sl, sl, #1
 800fc4e:	9901      	ldr	r1, [sp, #4]
 800fc50:	458a      	cmp	sl, r1
 800fc52:	dc01      	bgt.n	800fc58 <__kernel_rem_pio2f+0x3e4>
 800fc54:	45d1      	cmp	r9, sl
 800fc56:	dae9      	bge.n	800fc2c <__kernel_rem_pio2f+0x3b8>
 800fc58:	ab5a      	add	r3, sp, #360	@ 0x168
 800fc5a:	eb03 0989 	add.w	r9, r3, r9, lsl #2
 800fc5e:	f849 8ca0 	str.w	r8, [r9, #-160]
 800fc62:	3f01      	subs	r7, #1
 800fc64:	e731      	b.n	800faca <__kernel_rem_pio2f+0x256>
 800fc66:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 800fc68:	2b02      	cmp	r3, #2
 800fc6a:	dc07      	bgt.n	800fc7c <__kernel_rem_pio2f+0x408>
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	dc4e      	bgt.n	800fd0e <__kernel_rem_pio2f+0x49a>
 800fc70:	d02e      	beq.n	800fcd0 <__kernel_rem_pio2f+0x45c>
 800fc72:	f006 0007 	and.w	r0, r6, #7
 800fc76:	b05b      	add	sp, #364	@ 0x16c
 800fc78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc7c:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 800fc7e:	2b03      	cmp	r3, #3
 800fc80:	d1f7      	bne.n	800fc72 <__kernel_rem_pio2f+0x3fe>
 800fc82:	f10d 0bc8 	add.w	fp, sp, #200	@ 0xc8
 800fc86:	eb0b 0784 	add.w	r7, fp, r4, lsl #2
 800fc8a:	46b8      	mov	r8, r7
 800fc8c:	46a2      	mov	sl, r4
 800fc8e:	f1ba 0f00 	cmp.w	sl, #0
 800fc92:	dc49      	bgt.n	800fd28 <__kernel_rem_pio2f+0x4b4>
 800fc94:	46a1      	mov	r9, r4
 800fc96:	f1b9 0f01 	cmp.w	r9, #1
 800fc9a:	dc60      	bgt.n	800fd5e <__kernel_rem_pio2f+0x4ea>
 800fc9c:	2000      	movs	r0, #0
 800fc9e:	2c01      	cmp	r4, #1
 800fca0:	dc76      	bgt.n	800fd90 <__kernel_rem_pio2f+0x51c>
 800fca2:	9a32      	ldr	r2, [sp, #200]	@ 0xc8
 800fca4:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
 800fca6:	2d00      	cmp	r5, #0
 800fca8:	d178      	bne.n	800fd9c <__kernel_rem_pio2f+0x528>
 800fcaa:	9900      	ldr	r1, [sp, #0]
 800fcac:	600a      	str	r2, [r1, #0]
 800fcae:	460a      	mov	r2, r1
 800fcb0:	604b      	str	r3, [r1, #4]
 800fcb2:	6090      	str	r0, [r2, #8]
 800fcb4:	e7dd      	b.n	800fc72 <__kernel_rem_pio2f+0x3fe>
 800fcb6:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 800fcba:	f7f0 ff91 	bl	8000be0 <__addsf3>
 800fcbe:	3c01      	subs	r4, #1
 800fcc0:	2c00      	cmp	r4, #0
 800fcc2:	daf8      	bge.n	800fcb6 <__kernel_rem_pio2f+0x442>
 800fcc4:	b10d      	cbz	r5, 800fcca <__kernel_rem_pio2f+0x456>
 800fcc6:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800fcca:	9b00      	ldr	r3, [sp, #0]
 800fccc:	6018      	str	r0, [r3, #0]
 800fcce:	e7d0      	b.n	800fc72 <__kernel_rem_pio2f+0x3fe>
 800fcd0:	2000      	movs	r0, #0
 800fcd2:	af32      	add	r7, sp, #200	@ 0xc8
 800fcd4:	e7f4      	b.n	800fcc0 <__kernel_rem_pio2f+0x44c>
 800fcd6:	f857 1028 	ldr.w	r1, [r7, r8, lsl #2]
 800fcda:	f7f0 ff81 	bl	8000be0 <__addsf3>
 800fcde:	f108 38ff 	add.w	r8, r8, #4294967295
 800fce2:	f1b8 0f00 	cmp.w	r8, #0
 800fce6:	daf6      	bge.n	800fcd6 <__kernel_rem_pio2f+0x462>
 800fce8:	b1ad      	cbz	r5, 800fd16 <__kernel_rem_pio2f+0x4a2>
 800fcea:	f100 4300 	add.w	r3, r0, #2147483648	@ 0x80000000
 800fcee:	9a00      	ldr	r2, [sp, #0]
 800fcf0:	4601      	mov	r1, r0
 800fcf2:	6013      	str	r3, [r2, #0]
 800fcf4:	9832      	ldr	r0, [sp, #200]	@ 0xc8
 800fcf6:	f7f0 ff71 	bl	8000bdc <__aeabi_fsub>
 800fcfa:	f04f 0801 	mov.w	r8, #1
 800fcfe:	4544      	cmp	r4, r8
 800fd00:	da0b      	bge.n	800fd1a <__kernel_rem_pio2f+0x4a6>
 800fd02:	b10d      	cbz	r5, 800fd08 <__kernel_rem_pio2f+0x494>
 800fd04:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800fd08:	9b00      	ldr	r3, [sp, #0]
 800fd0a:	6058      	str	r0, [r3, #4]
 800fd0c:	e7b1      	b.n	800fc72 <__kernel_rem_pio2f+0x3fe>
 800fd0e:	46a0      	mov	r8, r4
 800fd10:	2000      	movs	r0, #0
 800fd12:	af32      	add	r7, sp, #200	@ 0xc8
 800fd14:	e7e5      	b.n	800fce2 <__kernel_rem_pio2f+0x46e>
 800fd16:	4603      	mov	r3, r0
 800fd18:	e7e9      	b.n	800fcee <__kernel_rem_pio2f+0x47a>
 800fd1a:	f857 1f04 	ldr.w	r1, [r7, #4]!
 800fd1e:	f7f0 ff5f 	bl	8000be0 <__addsf3>
 800fd22:	f108 0801 	add.w	r8, r8, #1
 800fd26:	e7ea      	b.n	800fcfe <__kernel_rem_pio2f+0x48a>
 800fd28:	f8d8 3000 	ldr.w	r3, [r8]
 800fd2c:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800fd30:	4619      	mov	r1, r3
 800fd32:	4610      	mov	r0, r2
 800fd34:	9302      	str	r3, [sp, #8]
 800fd36:	9201      	str	r2, [sp, #4]
 800fd38:	f7f0 ff52 	bl	8000be0 <__addsf3>
 800fd3c:	9a01      	ldr	r2, [sp, #4]
 800fd3e:	4601      	mov	r1, r0
 800fd40:	4681      	mov	r9, r0
 800fd42:	4610      	mov	r0, r2
 800fd44:	f7f0 ff4a 	bl	8000bdc <__aeabi_fsub>
 800fd48:	9b02      	ldr	r3, [sp, #8]
 800fd4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fd4e:	4619      	mov	r1, r3
 800fd50:	f7f0 ff46 	bl	8000be0 <__addsf3>
 800fd54:	f848 0904 	str.w	r0, [r8], #-4
 800fd58:	f8c8 9000 	str.w	r9, [r8]
 800fd5c:	e797      	b.n	800fc8e <__kernel_rem_pio2f+0x41a>
 800fd5e:	f857 3c04 	ldr.w	r3, [r7, #-4]
 800fd62:	f8d7 a000 	ldr.w	sl, [r7]
 800fd66:	4618      	mov	r0, r3
 800fd68:	4651      	mov	r1, sl
 800fd6a:	9301      	str	r3, [sp, #4]
 800fd6c:	f7f0 ff38 	bl	8000be0 <__addsf3>
 800fd70:	9b01      	ldr	r3, [sp, #4]
 800fd72:	4601      	mov	r1, r0
 800fd74:	4680      	mov	r8, r0
 800fd76:	4618      	mov	r0, r3
 800fd78:	f7f0 ff30 	bl	8000bdc <__aeabi_fsub>
 800fd7c:	4651      	mov	r1, sl
 800fd7e:	f7f0 ff2f 	bl	8000be0 <__addsf3>
 800fd82:	f847 0904 	str.w	r0, [r7], #-4
 800fd86:	f109 39ff 	add.w	r9, r9, #4294967295
 800fd8a:	f8c7 8000 	str.w	r8, [r7]
 800fd8e:	e782      	b.n	800fc96 <__kernel_rem_pio2f+0x422>
 800fd90:	f85b 1024 	ldr.w	r1, [fp, r4, lsl #2]
 800fd94:	f7f0 ff24 	bl	8000be0 <__addsf3>
 800fd98:	3c01      	subs	r4, #1
 800fd9a:	e780      	b.n	800fc9e <__kernel_rem_pio2f+0x42a>
 800fd9c:	9900      	ldr	r1, [sp, #0]
 800fd9e:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
 800fda2:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800fda6:	600a      	str	r2, [r1, #0]
 800fda8:	604b      	str	r3, [r1, #4]
 800fdaa:	460a      	mov	r2, r1
 800fdac:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800fdb0:	e77f      	b.n	800fcb2 <__kernel_rem_pio2f+0x43e>
 800fdb2:	bf00      	nop
 800fdb4:	0000      	movs	r0, r0
	...

0800fdb8 <scalbn>:
 800fdb8:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800fdbc:	4616      	mov	r6, r2
 800fdbe:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800fdc2:	4683      	mov	fp, r0
 800fdc4:	468c      	mov	ip, r1
 800fdc6:	460b      	mov	r3, r1
 800fdc8:	b982      	cbnz	r2, 800fdec <scalbn+0x34>
 800fdca:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800fdce:	4303      	orrs	r3, r0
 800fdd0:	d039      	beq.n	800fe46 <scalbn+0x8e>
 800fdd2:	4b2f      	ldr	r3, [pc, #188]	@ (800fe90 <scalbn+0xd8>)
 800fdd4:	2200      	movs	r2, #0
 800fdd6:	f7f0 fbeb 	bl	80005b0 <__aeabi_dmul>
 800fdda:	4b2e      	ldr	r3, [pc, #184]	@ (800fe94 <scalbn+0xdc>)
 800fddc:	4683      	mov	fp, r0
 800fdde:	429e      	cmp	r6, r3
 800fde0:	468c      	mov	ip, r1
 800fde2:	da0d      	bge.n	800fe00 <scalbn+0x48>
 800fde4:	a326      	add	r3, pc, #152	@ (adr r3, 800fe80 <scalbn+0xc8>)
 800fde6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdea:	e01b      	b.n	800fe24 <scalbn+0x6c>
 800fdec:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 800fdf0:	42ba      	cmp	r2, r7
 800fdf2:	d109      	bne.n	800fe08 <scalbn+0x50>
 800fdf4:	4602      	mov	r2, r0
 800fdf6:	f7f0 fa25 	bl	8000244 <__adddf3>
 800fdfa:	4683      	mov	fp, r0
 800fdfc:	468c      	mov	ip, r1
 800fdfe:	e022      	b.n	800fe46 <scalbn+0x8e>
 800fe00:	460b      	mov	r3, r1
 800fe02:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800fe06:	3a36      	subs	r2, #54	@ 0x36
 800fe08:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800fe0c:	428e      	cmp	r6, r1
 800fe0e:	dd0c      	ble.n	800fe2a <scalbn+0x72>
 800fe10:	a31d      	add	r3, pc, #116	@ (adr r3, 800fe88 <scalbn+0xd0>)
 800fe12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe16:	461c      	mov	r4, r3
 800fe18:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 800fe1c:	f361 74df 	bfi	r4, r1, #31, #1
 800fe20:	4621      	mov	r1, r4
 800fe22:	481d      	ldr	r0, [pc, #116]	@ (800fe98 <scalbn+0xe0>)
 800fe24:	f7f0 fbc4 	bl	80005b0 <__aeabi_dmul>
 800fe28:	e7e7      	b.n	800fdfa <scalbn+0x42>
 800fe2a:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800fe2e:	4432      	add	r2, r6
 800fe30:	428a      	cmp	r2, r1
 800fe32:	dced      	bgt.n	800fe10 <scalbn+0x58>
 800fe34:	2a00      	cmp	r2, #0
 800fe36:	dd0a      	ble.n	800fe4e <scalbn+0x96>
 800fe38:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800fe3c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800fe40:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800fe44:	46ac      	mov	ip, r5
 800fe46:	4658      	mov	r0, fp
 800fe48:	4661      	mov	r1, ip
 800fe4a:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 800fe4e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800fe52:	da09      	bge.n	800fe68 <scalbn+0xb0>
 800fe54:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 800fe58:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 800fe5c:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 800fe60:	480e      	ldr	r0, [pc, #56]	@ (800fe9c <scalbn+0xe4>)
 800fe62:	f041 011f 	orr.w	r1, r1, #31
 800fe66:	e7bd      	b.n	800fde4 <scalbn+0x2c>
 800fe68:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800fe6c:	3236      	adds	r2, #54	@ 0x36
 800fe6e:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800fe72:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800fe76:	4658      	mov	r0, fp
 800fe78:	4629      	mov	r1, r5
 800fe7a:	2200      	movs	r2, #0
 800fe7c:	4b08      	ldr	r3, [pc, #32]	@ (800fea0 <scalbn+0xe8>)
 800fe7e:	e7d1      	b.n	800fe24 <scalbn+0x6c>
 800fe80:	c2f8f359 	.word	0xc2f8f359
 800fe84:	01a56e1f 	.word	0x01a56e1f
 800fe88:	8800759c 	.word	0x8800759c
 800fe8c:	7e37e43c 	.word	0x7e37e43c
 800fe90:	43500000 	.word	0x43500000
 800fe94:	ffff3cb0 	.word	0xffff3cb0
 800fe98:	8800759c 	.word	0x8800759c
 800fe9c:	c2f8f359 	.word	0xc2f8f359
 800fea0:	3c900000 	.word	0x3c900000

0800fea4 <scalbnf>:
 800fea4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 800fea8:	b538      	push	{r3, r4, r5, lr}
 800feaa:	4603      	mov	r3, r0
 800feac:	460d      	mov	r5, r1
 800feae:	4604      	mov	r4, r0
 800feb0:	d02e      	beq.n	800ff10 <scalbnf+0x6c>
 800feb2:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800feb6:	d304      	bcc.n	800fec2 <scalbnf+0x1e>
 800feb8:	4601      	mov	r1, r0
 800feba:	f7f0 fe91 	bl	8000be0 <__addsf3>
 800febe:	4603      	mov	r3, r0
 800fec0:	e026      	b.n	800ff10 <scalbnf+0x6c>
 800fec2:	f010 4fff 	tst.w	r0, #2139095040	@ 0x7f800000
 800fec6:	d118      	bne.n	800fefa <scalbnf+0x56>
 800fec8:	f04f 4198 	mov.w	r1, #1275068416	@ 0x4c000000
 800fecc:	f7f0 ff90 	bl	8000df0 <__aeabi_fmul>
 800fed0:	4a17      	ldr	r2, [pc, #92]	@ (800ff30 <scalbnf+0x8c>)
 800fed2:	4603      	mov	r3, r0
 800fed4:	4295      	cmp	r5, r2
 800fed6:	db0c      	blt.n	800fef2 <scalbnf+0x4e>
 800fed8:	4604      	mov	r4, r0
 800feda:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800fede:	3a19      	subs	r2, #25
 800fee0:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800fee4:	428d      	cmp	r5, r1
 800fee6:	dd0a      	ble.n	800fefe <scalbnf+0x5a>
 800fee8:	4912      	ldr	r1, [pc, #72]	@ (800ff34 <scalbnf+0x90>)
 800feea:	4618      	mov	r0, r3
 800feec:	f361 001e 	bfi	r0, r1, #0, #31
 800fef0:	e000      	b.n	800fef4 <scalbnf+0x50>
 800fef2:	4911      	ldr	r1, [pc, #68]	@ (800ff38 <scalbnf+0x94>)
 800fef4:	f7f0 ff7c 	bl	8000df0 <__aeabi_fmul>
 800fef8:	e7e1      	b.n	800febe <scalbnf+0x1a>
 800fefa:	0dd2      	lsrs	r2, r2, #23
 800fefc:	e7f0      	b.n	800fee0 <scalbnf+0x3c>
 800fefe:	1951      	adds	r1, r2, r5
 800ff00:	29fe      	cmp	r1, #254	@ 0xfe
 800ff02:	dcf1      	bgt.n	800fee8 <scalbnf+0x44>
 800ff04:	2900      	cmp	r1, #0
 800ff06:	dd05      	ble.n	800ff14 <scalbnf+0x70>
 800ff08:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 800ff0c:	ea44 53c1 	orr.w	r3, r4, r1, lsl #23
 800ff10:	4618      	mov	r0, r3
 800ff12:	bd38      	pop	{r3, r4, r5, pc}
 800ff14:	f111 0f16 	cmn.w	r1, #22
 800ff18:	da01      	bge.n	800ff1e <scalbnf+0x7a>
 800ff1a:	4907      	ldr	r1, [pc, #28]	@ (800ff38 <scalbnf+0x94>)
 800ff1c:	e7e5      	b.n	800feea <scalbnf+0x46>
 800ff1e:	f101 0019 	add.w	r0, r1, #25
 800ff22:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 800ff26:	f04f 514c 	mov.w	r1, #855638016	@ 0x33000000
 800ff2a:	ea44 50c0 	orr.w	r0, r4, r0, lsl #23
 800ff2e:	e7e1      	b.n	800fef4 <scalbnf+0x50>
 800ff30:	ffff3cb0 	.word	0xffff3cb0
 800ff34:	7149f2ca 	.word	0x7149f2ca
 800ff38:	0da24260 	.word	0x0da24260
 800ff3c:	00000000 	.word	0x00000000

0800ff40 <floor>:
 800ff40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff44:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800ff48:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 800ff4c:	2e13      	cmp	r6, #19
 800ff4e:	4602      	mov	r2, r0
 800ff50:	460b      	mov	r3, r1
 800ff52:	460c      	mov	r4, r1
 800ff54:	4605      	mov	r5, r0
 800ff56:	4680      	mov	r8, r0
 800ff58:	dc35      	bgt.n	800ffc6 <floor+0x86>
 800ff5a:	2e00      	cmp	r6, #0
 800ff5c:	da17      	bge.n	800ff8e <floor+0x4e>
 800ff5e:	a334      	add	r3, pc, #208	@ (adr r3, 8010030 <floor+0xf0>)
 800ff60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff64:	f7f0 f96e 	bl	8000244 <__adddf3>
 800ff68:	2200      	movs	r2, #0
 800ff6a:	2300      	movs	r3, #0
 800ff6c:	f7f0 fdb0 	bl	8000ad0 <__aeabi_dcmpgt>
 800ff70:	b150      	cbz	r0, 800ff88 <floor+0x48>
 800ff72:	2c00      	cmp	r4, #0
 800ff74:	da57      	bge.n	8010026 <floor+0xe6>
 800ff76:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800ff7a:	432c      	orrs	r4, r5
 800ff7c:	2500      	movs	r5, #0
 800ff7e:	42ac      	cmp	r4, r5
 800ff80:	4c2d      	ldr	r4, [pc, #180]	@ (8010038 <floor+0xf8>)
 800ff82:	bf08      	it	eq
 800ff84:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800ff88:	4623      	mov	r3, r4
 800ff8a:	462a      	mov	r2, r5
 800ff8c:	e024      	b.n	800ffd8 <floor+0x98>
 800ff8e:	4f2b      	ldr	r7, [pc, #172]	@ (801003c <floor+0xfc>)
 800ff90:	4137      	asrs	r7, r6
 800ff92:	ea01 0c07 	and.w	ip, r1, r7
 800ff96:	ea5c 0c00 	orrs.w	ip, ip, r0
 800ff9a:	d01d      	beq.n	800ffd8 <floor+0x98>
 800ff9c:	a324      	add	r3, pc, #144	@ (adr r3, 8010030 <floor+0xf0>)
 800ff9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffa2:	f7f0 f94f 	bl	8000244 <__adddf3>
 800ffa6:	2200      	movs	r2, #0
 800ffa8:	2300      	movs	r3, #0
 800ffaa:	f7f0 fd91 	bl	8000ad0 <__aeabi_dcmpgt>
 800ffae:	2800      	cmp	r0, #0
 800ffb0:	d0ea      	beq.n	800ff88 <floor+0x48>
 800ffb2:	2c00      	cmp	r4, #0
 800ffb4:	bfbe      	ittt	lt
 800ffb6:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800ffba:	4133      	asrlt	r3, r6
 800ffbc:	18e4      	addlt	r4, r4, r3
 800ffbe:	2500      	movs	r5, #0
 800ffc0:	ea24 0407 	bic.w	r4, r4, r7
 800ffc4:	e7e0      	b.n	800ff88 <floor+0x48>
 800ffc6:	2e33      	cmp	r6, #51	@ 0x33
 800ffc8:	dd0a      	ble.n	800ffe0 <floor+0xa0>
 800ffca:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800ffce:	d103      	bne.n	800ffd8 <floor+0x98>
 800ffd0:	f7f0 f938 	bl	8000244 <__adddf3>
 800ffd4:	4602      	mov	r2, r0
 800ffd6:	460b      	mov	r3, r1
 800ffd8:	4610      	mov	r0, r2
 800ffda:	4619      	mov	r1, r3
 800ffdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ffe0:	f04f 3cff 	mov.w	ip, #4294967295
 800ffe4:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 800ffe8:	fa2c f707 	lsr.w	r7, ip, r7
 800ffec:	4207      	tst	r7, r0
 800ffee:	d0f3      	beq.n	800ffd8 <floor+0x98>
 800fff0:	a30f      	add	r3, pc, #60	@ (adr r3, 8010030 <floor+0xf0>)
 800fff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fff6:	f7f0 f925 	bl	8000244 <__adddf3>
 800fffa:	2200      	movs	r2, #0
 800fffc:	2300      	movs	r3, #0
 800fffe:	f7f0 fd67 	bl	8000ad0 <__aeabi_dcmpgt>
 8010002:	2800      	cmp	r0, #0
 8010004:	d0c0      	beq.n	800ff88 <floor+0x48>
 8010006:	2c00      	cmp	r4, #0
 8010008:	da0a      	bge.n	8010020 <floor+0xe0>
 801000a:	2e14      	cmp	r6, #20
 801000c:	d101      	bne.n	8010012 <floor+0xd2>
 801000e:	3401      	adds	r4, #1
 8010010:	e006      	b.n	8010020 <floor+0xe0>
 8010012:	2301      	movs	r3, #1
 8010014:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8010018:	40b3      	lsls	r3, r6
 801001a:	441d      	add	r5, r3
 801001c:	4545      	cmp	r5, r8
 801001e:	d3f6      	bcc.n	801000e <floor+0xce>
 8010020:	ea25 0507 	bic.w	r5, r5, r7
 8010024:	e7b0      	b.n	800ff88 <floor+0x48>
 8010026:	2500      	movs	r5, #0
 8010028:	462c      	mov	r4, r5
 801002a:	e7ad      	b.n	800ff88 <floor+0x48>
 801002c:	f3af 8000 	nop.w
 8010030:	8800759c 	.word	0x8800759c
 8010034:	7e37e43c 	.word	0x7e37e43c
 8010038:	bff00000 	.word	0xbff00000
 801003c:	000fffff 	.word	0x000fffff

08010040 <floorf>:
 8010040:	b570      	push	{r4, r5, r6, lr}
 8010042:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 8010046:	3d7f      	subs	r5, #127	@ 0x7f
 8010048:	2d16      	cmp	r5, #22
 801004a:	4601      	mov	r1, r0
 801004c:	4604      	mov	r4, r0
 801004e:	f020 4600 	bic.w	r6, r0, #2147483648	@ 0x80000000
 8010052:	dc26      	bgt.n	80100a2 <floorf+0x62>
 8010054:	2d00      	cmp	r5, #0
 8010056:	da0f      	bge.n	8010078 <floorf+0x38>
 8010058:	4917      	ldr	r1, [pc, #92]	@ (80100b8 <floorf+0x78>)
 801005a:	f7f0 fdc1 	bl	8000be0 <__addsf3>
 801005e:	2100      	movs	r1, #0
 8010060:	f7f1 f882 	bl	8001168 <__aeabi_fcmpgt>
 8010064:	b130      	cbz	r0, 8010074 <floorf+0x34>
 8010066:	2c00      	cmp	r4, #0
 8010068:	da23      	bge.n	80100b2 <floorf+0x72>
 801006a:	2e00      	cmp	r6, #0
 801006c:	4c13      	ldr	r4, [pc, #76]	@ (80100bc <floorf+0x7c>)
 801006e:	bf08      	it	eq
 8010070:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8010074:	4621      	mov	r1, r4
 8010076:	e01a      	b.n	80100ae <floorf+0x6e>
 8010078:	4e11      	ldr	r6, [pc, #68]	@ (80100c0 <floorf+0x80>)
 801007a:	412e      	asrs	r6, r5
 801007c:	4230      	tst	r0, r6
 801007e:	d016      	beq.n	80100ae <floorf+0x6e>
 8010080:	490d      	ldr	r1, [pc, #52]	@ (80100b8 <floorf+0x78>)
 8010082:	f7f0 fdad 	bl	8000be0 <__addsf3>
 8010086:	2100      	movs	r1, #0
 8010088:	f7f1 f86e 	bl	8001168 <__aeabi_fcmpgt>
 801008c:	2800      	cmp	r0, #0
 801008e:	d0f1      	beq.n	8010074 <floorf+0x34>
 8010090:	2c00      	cmp	r4, #0
 8010092:	bfbe      	ittt	lt
 8010094:	f44f 0300 	movlt.w	r3, #8388608	@ 0x800000
 8010098:	412b      	asrlt	r3, r5
 801009a:	18e4      	addlt	r4, r4, r3
 801009c:	ea24 0406 	bic.w	r4, r4, r6
 80100a0:	e7e8      	b.n	8010074 <floorf+0x34>
 80100a2:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 80100a6:	d302      	bcc.n	80100ae <floorf+0x6e>
 80100a8:	f7f0 fd9a 	bl	8000be0 <__addsf3>
 80100ac:	4601      	mov	r1, r0
 80100ae:	4608      	mov	r0, r1
 80100b0:	bd70      	pop	{r4, r5, r6, pc}
 80100b2:	2400      	movs	r4, #0
 80100b4:	e7de      	b.n	8010074 <floorf+0x34>
 80100b6:	bf00      	nop
 80100b8:	7149f2ca 	.word	0x7149f2ca
 80100bc:	bf800000 	.word	0xbf800000
 80100c0:	007fffff 	.word	0x007fffff

080100c4 <abort>:
 80100c4:	2006      	movs	r0, #6
 80100c6:	b508      	push	{r3, lr}
 80100c8:	f000 f93c 	bl	8010344 <raise>
 80100cc:	2001      	movs	r0, #1
 80100ce:	f7fa f964 	bl	800a39a <_exit>
	...

080100d4 <calloc>:
 80100d4:	4b02      	ldr	r3, [pc, #8]	@ (80100e0 <calloc+0xc>)
 80100d6:	460a      	mov	r2, r1
 80100d8:	4601      	mov	r1, r0
 80100da:	6818      	ldr	r0, [r3, #0]
 80100dc:	f000 b802 	b.w	80100e4 <_calloc_r>
 80100e0:	20000034 	.word	0x20000034

080100e4 <_calloc_r>:
 80100e4:	b570      	push	{r4, r5, r6, lr}
 80100e6:	fba1 5402 	umull	r5, r4, r1, r2
 80100ea:	b93c      	cbnz	r4, 80100fc <_calloc_r+0x18>
 80100ec:	4629      	mov	r1, r5
 80100ee:	f000 f837 	bl	8010160 <_malloc_r>
 80100f2:	4606      	mov	r6, r0
 80100f4:	b928      	cbnz	r0, 8010102 <_calloc_r+0x1e>
 80100f6:	2600      	movs	r6, #0
 80100f8:	4630      	mov	r0, r6
 80100fa:	bd70      	pop	{r4, r5, r6, pc}
 80100fc:	220c      	movs	r2, #12
 80100fe:	6002      	str	r2, [r0, #0]
 8010100:	e7f9      	b.n	80100f6 <_calloc_r+0x12>
 8010102:	462a      	mov	r2, r5
 8010104:	4621      	mov	r1, r4
 8010106:	f000 f8ed 	bl	80102e4 <memset>
 801010a:	e7f5      	b.n	80100f8 <_calloc_r+0x14>

0801010c <malloc>:
 801010c:	4b02      	ldr	r3, [pc, #8]	@ (8010118 <malloc+0xc>)
 801010e:	4601      	mov	r1, r0
 8010110:	6818      	ldr	r0, [r3, #0]
 8010112:	f000 b825 	b.w	8010160 <_malloc_r>
 8010116:	bf00      	nop
 8010118:	20000034 	.word	0x20000034

0801011c <sbrk_aligned>:
 801011c:	b570      	push	{r4, r5, r6, lr}
 801011e:	4e0f      	ldr	r6, [pc, #60]	@ (801015c <sbrk_aligned+0x40>)
 8010120:	460c      	mov	r4, r1
 8010122:	6831      	ldr	r1, [r6, #0]
 8010124:	4605      	mov	r5, r0
 8010126:	b911      	cbnz	r1, 801012e <sbrk_aligned+0x12>
 8010128:	f000 f928 	bl	801037c <_sbrk_r>
 801012c:	6030      	str	r0, [r6, #0]
 801012e:	4621      	mov	r1, r4
 8010130:	4628      	mov	r0, r5
 8010132:	f000 f923 	bl	801037c <_sbrk_r>
 8010136:	1c43      	adds	r3, r0, #1
 8010138:	d103      	bne.n	8010142 <sbrk_aligned+0x26>
 801013a:	f04f 34ff 	mov.w	r4, #4294967295
 801013e:	4620      	mov	r0, r4
 8010140:	bd70      	pop	{r4, r5, r6, pc}
 8010142:	1cc4      	adds	r4, r0, #3
 8010144:	f024 0403 	bic.w	r4, r4, #3
 8010148:	42a0      	cmp	r0, r4
 801014a:	d0f8      	beq.n	801013e <sbrk_aligned+0x22>
 801014c:	1a21      	subs	r1, r4, r0
 801014e:	4628      	mov	r0, r5
 8010150:	f000 f914 	bl	801037c <_sbrk_r>
 8010154:	3001      	adds	r0, #1
 8010156:	d1f2      	bne.n	801013e <sbrk_aligned+0x22>
 8010158:	e7ef      	b.n	801013a <sbrk_aligned+0x1e>
 801015a:	bf00      	nop
 801015c:	20008aec 	.word	0x20008aec

08010160 <_malloc_r>:
 8010160:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010164:	1ccd      	adds	r5, r1, #3
 8010166:	f025 0503 	bic.w	r5, r5, #3
 801016a:	3508      	adds	r5, #8
 801016c:	2d0c      	cmp	r5, #12
 801016e:	bf38      	it	cc
 8010170:	250c      	movcc	r5, #12
 8010172:	2d00      	cmp	r5, #0
 8010174:	4606      	mov	r6, r0
 8010176:	db01      	blt.n	801017c <_malloc_r+0x1c>
 8010178:	42a9      	cmp	r1, r5
 801017a:	d904      	bls.n	8010186 <_malloc_r+0x26>
 801017c:	230c      	movs	r3, #12
 801017e:	6033      	str	r3, [r6, #0]
 8010180:	2000      	movs	r0, #0
 8010182:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010186:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801025c <_malloc_r+0xfc>
 801018a:	f000 f869 	bl	8010260 <__malloc_lock>
 801018e:	f8d8 3000 	ldr.w	r3, [r8]
 8010192:	461c      	mov	r4, r3
 8010194:	bb44      	cbnz	r4, 80101e8 <_malloc_r+0x88>
 8010196:	4629      	mov	r1, r5
 8010198:	4630      	mov	r0, r6
 801019a:	f7ff ffbf 	bl	801011c <sbrk_aligned>
 801019e:	1c43      	adds	r3, r0, #1
 80101a0:	4604      	mov	r4, r0
 80101a2:	d158      	bne.n	8010256 <_malloc_r+0xf6>
 80101a4:	f8d8 4000 	ldr.w	r4, [r8]
 80101a8:	4627      	mov	r7, r4
 80101aa:	2f00      	cmp	r7, #0
 80101ac:	d143      	bne.n	8010236 <_malloc_r+0xd6>
 80101ae:	2c00      	cmp	r4, #0
 80101b0:	d04b      	beq.n	801024a <_malloc_r+0xea>
 80101b2:	6823      	ldr	r3, [r4, #0]
 80101b4:	4639      	mov	r1, r7
 80101b6:	4630      	mov	r0, r6
 80101b8:	eb04 0903 	add.w	r9, r4, r3
 80101bc:	f000 f8de 	bl	801037c <_sbrk_r>
 80101c0:	4581      	cmp	r9, r0
 80101c2:	d142      	bne.n	801024a <_malloc_r+0xea>
 80101c4:	6821      	ldr	r1, [r4, #0]
 80101c6:	4630      	mov	r0, r6
 80101c8:	1a6d      	subs	r5, r5, r1
 80101ca:	4629      	mov	r1, r5
 80101cc:	f7ff ffa6 	bl	801011c <sbrk_aligned>
 80101d0:	3001      	adds	r0, #1
 80101d2:	d03a      	beq.n	801024a <_malloc_r+0xea>
 80101d4:	6823      	ldr	r3, [r4, #0]
 80101d6:	442b      	add	r3, r5
 80101d8:	6023      	str	r3, [r4, #0]
 80101da:	f8d8 3000 	ldr.w	r3, [r8]
 80101de:	685a      	ldr	r2, [r3, #4]
 80101e0:	bb62      	cbnz	r2, 801023c <_malloc_r+0xdc>
 80101e2:	f8c8 7000 	str.w	r7, [r8]
 80101e6:	e00f      	b.n	8010208 <_malloc_r+0xa8>
 80101e8:	6822      	ldr	r2, [r4, #0]
 80101ea:	1b52      	subs	r2, r2, r5
 80101ec:	d420      	bmi.n	8010230 <_malloc_r+0xd0>
 80101ee:	2a0b      	cmp	r2, #11
 80101f0:	d917      	bls.n	8010222 <_malloc_r+0xc2>
 80101f2:	1961      	adds	r1, r4, r5
 80101f4:	42a3      	cmp	r3, r4
 80101f6:	6025      	str	r5, [r4, #0]
 80101f8:	bf18      	it	ne
 80101fa:	6059      	strne	r1, [r3, #4]
 80101fc:	6863      	ldr	r3, [r4, #4]
 80101fe:	bf08      	it	eq
 8010200:	f8c8 1000 	streq.w	r1, [r8]
 8010204:	5162      	str	r2, [r4, r5]
 8010206:	604b      	str	r3, [r1, #4]
 8010208:	4630      	mov	r0, r6
 801020a:	f000 f82f 	bl	801026c <__malloc_unlock>
 801020e:	f104 000b 	add.w	r0, r4, #11
 8010212:	1d23      	adds	r3, r4, #4
 8010214:	f020 0007 	bic.w	r0, r0, #7
 8010218:	1ac2      	subs	r2, r0, r3
 801021a:	bf1c      	itt	ne
 801021c:	1a1b      	subne	r3, r3, r0
 801021e:	50a3      	strne	r3, [r4, r2]
 8010220:	e7af      	b.n	8010182 <_malloc_r+0x22>
 8010222:	6862      	ldr	r2, [r4, #4]
 8010224:	42a3      	cmp	r3, r4
 8010226:	bf0c      	ite	eq
 8010228:	f8c8 2000 	streq.w	r2, [r8]
 801022c:	605a      	strne	r2, [r3, #4]
 801022e:	e7eb      	b.n	8010208 <_malloc_r+0xa8>
 8010230:	4623      	mov	r3, r4
 8010232:	6864      	ldr	r4, [r4, #4]
 8010234:	e7ae      	b.n	8010194 <_malloc_r+0x34>
 8010236:	463c      	mov	r4, r7
 8010238:	687f      	ldr	r7, [r7, #4]
 801023a:	e7b6      	b.n	80101aa <_malloc_r+0x4a>
 801023c:	461a      	mov	r2, r3
 801023e:	685b      	ldr	r3, [r3, #4]
 8010240:	42a3      	cmp	r3, r4
 8010242:	d1fb      	bne.n	801023c <_malloc_r+0xdc>
 8010244:	2300      	movs	r3, #0
 8010246:	6053      	str	r3, [r2, #4]
 8010248:	e7de      	b.n	8010208 <_malloc_r+0xa8>
 801024a:	230c      	movs	r3, #12
 801024c:	4630      	mov	r0, r6
 801024e:	6033      	str	r3, [r6, #0]
 8010250:	f000 f80c 	bl	801026c <__malloc_unlock>
 8010254:	e794      	b.n	8010180 <_malloc_r+0x20>
 8010256:	6005      	str	r5, [r0, #0]
 8010258:	e7d6      	b.n	8010208 <_malloc_r+0xa8>
 801025a:	bf00      	nop
 801025c:	20008af0 	.word	0x20008af0

08010260 <__malloc_lock>:
 8010260:	4801      	ldr	r0, [pc, #4]	@ (8010268 <__malloc_lock+0x8>)
 8010262:	f000 b8c5 	b.w	80103f0 <__retarget_lock_acquire_recursive>
 8010266:	bf00      	nop
 8010268:	20008c30 	.word	0x20008c30

0801026c <__malloc_unlock>:
 801026c:	4801      	ldr	r0, [pc, #4]	@ (8010274 <__malloc_unlock+0x8>)
 801026e:	f000 b8c0 	b.w	80103f2 <__retarget_lock_release_recursive>
 8010272:	bf00      	nop
 8010274:	20008c30 	.word	0x20008c30

08010278 <realloc>:
 8010278:	4b02      	ldr	r3, [pc, #8]	@ (8010284 <realloc+0xc>)
 801027a:	460a      	mov	r2, r1
 801027c:	4601      	mov	r1, r0
 801027e:	6818      	ldr	r0, [r3, #0]
 8010280:	f000 b802 	b.w	8010288 <_realloc_r>
 8010284:	20000034 	.word	0x20000034

08010288 <_realloc_r>:
 8010288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801028c:	4680      	mov	r8, r0
 801028e:	4615      	mov	r5, r2
 8010290:	460c      	mov	r4, r1
 8010292:	b921      	cbnz	r1, 801029e <_realloc_r+0x16>
 8010294:	4611      	mov	r1, r2
 8010296:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801029a:	f7ff bf61 	b.w	8010160 <_malloc_r>
 801029e:	b92a      	cbnz	r2, 80102ac <_realloc_r+0x24>
 80102a0:	f000 f8b6 	bl	8010410 <_free_r>
 80102a4:	2400      	movs	r4, #0
 80102a6:	4620      	mov	r0, r4
 80102a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80102ac:	f000 f8f8 	bl	80104a0 <_malloc_usable_size_r>
 80102b0:	4285      	cmp	r5, r0
 80102b2:	4606      	mov	r6, r0
 80102b4:	d802      	bhi.n	80102bc <_realloc_r+0x34>
 80102b6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80102ba:	d8f4      	bhi.n	80102a6 <_realloc_r+0x1e>
 80102bc:	4629      	mov	r1, r5
 80102be:	4640      	mov	r0, r8
 80102c0:	f7ff ff4e 	bl	8010160 <_malloc_r>
 80102c4:	4607      	mov	r7, r0
 80102c6:	2800      	cmp	r0, #0
 80102c8:	d0ec      	beq.n	80102a4 <_realloc_r+0x1c>
 80102ca:	42b5      	cmp	r5, r6
 80102cc:	462a      	mov	r2, r5
 80102ce:	4621      	mov	r1, r4
 80102d0:	bf28      	it	cs
 80102d2:	4632      	movcs	r2, r6
 80102d4:	f000 f88e 	bl	80103f4 <memcpy>
 80102d8:	4621      	mov	r1, r4
 80102da:	4640      	mov	r0, r8
 80102dc:	f000 f898 	bl	8010410 <_free_r>
 80102e0:	463c      	mov	r4, r7
 80102e2:	e7e0      	b.n	80102a6 <_realloc_r+0x1e>

080102e4 <memset>:
 80102e4:	4603      	mov	r3, r0
 80102e6:	4402      	add	r2, r0
 80102e8:	4293      	cmp	r3, r2
 80102ea:	d100      	bne.n	80102ee <memset+0xa>
 80102ec:	4770      	bx	lr
 80102ee:	f803 1b01 	strb.w	r1, [r3], #1
 80102f2:	e7f9      	b.n	80102e8 <memset+0x4>

080102f4 <_raise_r>:
 80102f4:	291f      	cmp	r1, #31
 80102f6:	b538      	push	{r3, r4, r5, lr}
 80102f8:	4605      	mov	r5, r0
 80102fa:	460c      	mov	r4, r1
 80102fc:	d904      	bls.n	8010308 <_raise_r+0x14>
 80102fe:	2316      	movs	r3, #22
 8010300:	6003      	str	r3, [r0, #0]
 8010302:	f04f 30ff 	mov.w	r0, #4294967295
 8010306:	bd38      	pop	{r3, r4, r5, pc}
 8010308:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801030a:	b112      	cbz	r2, 8010312 <_raise_r+0x1e>
 801030c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010310:	b94b      	cbnz	r3, 8010326 <_raise_r+0x32>
 8010312:	4628      	mov	r0, r5
 8010314:	f000 f830 	bl	8010378 <_getpid_r>
 8010318:	4622      	mov	r2, r4
 801031a:	4601      	mov	r1, r0
 801031c:	4628      	mov	r0, r5
 801031e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010322:	f000 b817 	b.w	8010354 <_kill_r>
 8010326:	2b01      	cmp	r3, #1
 8010328:	d00a      	beq.n	8010340 <_raise_r+0x4c>
 801032a:	1c59      	adds	r1, r3, #1
 801032c:	d103      	bne.n	8010336 <_raise_r+0x42>
 801032e:	2316      	movs	r3, #22
 8010330:	6003      	str	r3, [r0, #0]
 8010332:	2001      	movs	r0, #1
 8010334:	e7e7      	b.n	8010306 <_raise_r+0x12>
 8010336:	2100      	movs	r1, #0
 8010338:	4620      	mov	r0, r4
 801033a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801033e:	4798      	blx	r3
 8010340:	2000      	movs	r0, #0
 8010342:	e7e0      	b.n	8010306 <_raise_r+0x12>

08010344 <raise>:
 8010344:	4b02      	ldr	r3, [pc, #8]	@ (8010350 <raise+0xc>)
 8010346:	4601      	mov	r1, r0
 8010348:	6818      	ldr	r0, [r3, #0]
 801034a:	f7ff bfd3 	b.w	80102f4 <_raise_r>
 801034e:	bf00      	nop
 8010350:	20000034 	.word	0x20000034

08010354 <_kill_r>:
 8010354:	b538      	push	{r3, r4, r5, lr}
 8010356:	2300      	movs	r3, #0
 8010358:	4d06      	ldr	r5, [pc, #24]	@ (8010374 <_kill_r+0x20>)
 801035a:	4604      	mov	r4, r0
 801035c:	4608      	mov	r0, r1
 801035e:	4611      	mov	r1, r2
 8010360:	602b      	str	r3, [r5, #0]
 8010362:	f7fa f80a 	bl	800a37a <_kill>
 8010366:	1c43      	adds	r3, r0, #1
 8010368:	d102      	bne.n	8010370 <_kill_r+0x1c>
 801036a:	682b      	ldr	r3, [r5, #0]
 801036c:	b103      	cbz	r3, 8010370 <_kill_r+0x1c>
 801036e:	6023      	str	r3, [r4, #0]
 8010370:	bd38      	pop	{r3, r4, r5, pc}
 8010372:	bf00      	nop
 8010374:	20008c2c 	.word	0x20008c2c

08010378 <_getpid_r>:
 8010378:	f7f9 bff8 	b.w	800a36c <_getpid>

0801037c <_sbrk_r>:
 801037c:	b538      	push	{r3, r4, r5, lr}
 801037e:	2300      	movs	r3, #0
 8010380:	4d05      	ldr	r5, [pc, #20]	@ (8010398 <_sbrk_r+0x1c>)
 8010382:	4604      	mov	r4, r0
 8010384:	4608      	mov	r0, r1
 8010386:	602b      	str	r3, [r5, #0]
 8010388:	f7fa f812 	bl	800a3b0 <_sbrk>
 801038c:	1c43      	adds	r3, r0, #1
 801038e:	d102      	bne.n	8010396 <_sbrk_r+0x1a>
 8010390:	682b      	ldr	r3, [r5, #0]
 8010392:	b103      	cbz	r3, 8010396 <_sbrk_r+0x1a>
 8010394:	6023      	str	r3, [r4, #0]
 8010396:	bd38      	pop	{r3, r4, r5, pc}
 8010398:	20008c2c 	.word	0x20008c2c

0801039c <__errno>:
 801039c:	4b01      	ldr	r3, [pc, #4]	@ (80103a4 <__errno+0x8>)
 801039e:	6818      	ldr	r0, [r3, #0]
 80103a0:	4770      	bx	lr
 80103a2:	bf00      	nop
 80103a4:	20000034 	.word	0x20000034

080103a8 <__libc_init_array>:
 80103a8:	b570      	push	{r4, r5, r6, lr}
 80103aa:	2600      	movs	r6, #0
 80103ac:	4d0c      	ldr	r5, [pc, #48]	@ (80103e0 <__libc_init_array+0x38>)
 80103ae:	4c0d      	ldr	r4, [pc, #52]	@ (80103e4 <__libc_init_array+0x3c>)
 80103b0:	1b64      	subs	r4, r4, r5
 80103b2:	10a4      	asrs	r4, r4, #2
 80103b4:	42a6      	cmp	r6, r4
 80103b6:	d109      	bne.n	80103cc <__libc_init_array+0x24>
 80103b8:	f000 f87a 	bl	80104b0 <_init>
 80103bc:	2600      	movs	r6, #0
 80103be:	4d0a      	ldr	r5, [pc, #40]	@ (80103e8 <__libc_init_array+0x40>)
 80103c0:	4c0a      	ldr	r4, [pc, #40]	@ (80103ec <__libc_init_array+0x44>)
 80103c2:	1b64      	subs	r4, r4, r5
 80103c4:	10a4      	asrs	r4, r4, #2
 80103c6:	42a6      	cmp	r6, r4
 80103c8:	d105      	bne.n	80103d6 <__libc_init_array+0x2e>
 80103ca:	bd70      	pop	{r4, r5, r6, pc}
 80103cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80103d0:	4798      	blx	r3
 80103d2:	3601      	adds	r6, #1
 80103d4:	e7ee      	b.n	80103b4 <__libc_init_array+0xc>
 80103d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80103da:	4798      	blx	r3
 80103dc:	3601      	adds	r6, #1
 80103de:	e7f2      	b.n	80103c6 <__libc_init_array+0x1e>
 80103e0:	08011260 	.word	0x08011260
 80103e4:	08011260 	.word	0x08011260
 80103e8:	08011260 	.word	0x08011260
 80103ec:	08011268 	.word	0x08011268

080103f0 <__retarget_lock_acquire_recursive>:
 80103f0:	4770      	bx	lr

080103f2 <__retarget_lock_release_recursive>:
 80103f2:	4770      	bx	lr

080103f4 <memcpy>:
 80103f4:	440a      	add	r2, r1
 80103f6:	4291      	cmp	r1, r2
 80103f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80103fc:	d100      	bne.n	8010400 <memcpy+0xc>
 80103fe:	4770      	bx	lr
 8010400:	b510      	push	{r4, lr}
 8010402:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010406:	4291      	cmp	r1, r2
 8010408:	f803 4f01 	strb.w	r4, [r3, #1]!
 801040c:	d1f9      	bne.n	8010402 <memcpy+0xe>
 801040e:	bd10      	pop	{r4, pc}

08010410 <_free_r>:
 8010410:	b538      	push	{r3, r4, r5, lr}
 8010412:	4605      	mov	r5, r0
 8010414:	2900      	cmp	r1, #0
 8010416:	d040      	beq.n	801049a <_free_r+0x8a>
 8010418:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801041c:	1f0c      	subs	r4, r1, #4
 801041e:	2b00      	cmp	r3, #0
 8010420:	bfb8      	it	lt
 8010422:	18e4      	addlt	r4, r4, r3
 8010424:	f7ff ff1c 	bl	8010260 <__malloc_lock>
 8010428:	4a1c      	ldr	r2, [pc, #112]	@ (801049c <_free_r+0x8c>)
 801042a:	6813      	ldr	r3, [r2, #0]
 801042c:	b933      	cbnz	r3, 801043c <_free_r+0x2c>
 801042e:	6063      	str	r3, [r4, #4]
 8010430:	6014      	str	r4, [r2, #0]
 8010432:	4628      	mov	r0, r5
 8010434:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010438:	f7ff bf18 	b.w	801026c <__malloc_unlock>
 801043c:	42a3      	cmp	r3, r4
 801043e:	d908      	bls.n	8010452 <_free_r+0x42>
 8010440:	6820      	ldr	r0, [r4, #0]
 8010442:	1821      	adds	r1, r4, r0
 8010444:	428b      	cmp	r3, r1
 8010446:	bf01      	itttt	eq
 8010448:	6819      	ldreq	r1, [r3, #0]
 801044a:	685b      	ldreq	r3, [r3, #4]
 801044c:	1809      	addeq	r1, r1, r0
 801044e:	6021      	streq	r1, [r4, #0]
 8010450:	e7ed      	b.n	801042e <_free_r+0x1e>
 8010452:	461a      	mov	r2, r3
 8010454:	685b      	ldr	r3, [r3, #4]
 8010456:	b10b      	cbz	r3, 801045c <_free_r+0x4c>
 8010458:	42a3      	cmp	r3, r4
 801045a:	d9fa      	bls.n	8010452 <_free_r+0x42>
 801045c:	6811      	ldr	r1, [r2, #0]
 801045e:	1850      	adds	r0, r2, r1
 8010460:	42a0      	cmp	r0, r4
 8010462:	d10b      	bne.n	801047c <_free_r+0x6c>
 8010464:	6820      	ldr	r0, [r4, #0]
 8010466:	4401      	add	r1, r0
 8010468:	1850      	adds	r0, r2, r1
 801046a:	4283      	cmp	r3, r0
 801046c:	6011      	str	r1, [r2, #0]
 801046e:	d1e0      	bne.n	8010432 <_free_r+0x22>
 8010470:	6818      	ldr	r0, [r3, #0]
 8010472:	685b      	ldr	r3, [r3, #4]
 8010474:	4408      	add	r0, r1
 8010476:	6010      	str	r0, [r2, #0]
 8010478:	6053      	str	r3, [r2, #4]
 801047a:	e7da      	b.n	8010432 <_free_r+0x22>
 801047c:	d902      	bls.n	8010484 <_free_r+0x74>
 801047e:	230c      	movs	r3, #12
 8010480:	602b      	str	r3, [r5, #0]
 8010482:	e7d6      	b.n	8010432 <_free_r+0x22>
 8010484:	6820      	ldr	r0, [r4, #0]
 8010486:	1821      	adds	r1, r4, r0
 8010488:	428b      	cmp	r3, r1
 801048a:	bf01      	itttt	eq
 801048c:	6819      	ldreq	r1, [r3, #0]
 801048e:	685b      	ldreq	r3, [r3, #4]
 8010490:	1809      	addeq	r1, r1, r0
 8010492:	6021      	streq	r1, [r4, #0]
 8010494:	6063      	str	r3, [r4, #4]
 8010496:	6054      	str	r4, [r2, #4]
 8010498:	e7cb      	b.n	8010432 <_free_r+0x22>
 801049a:	bd38      	pop	{r3, r4, r5, pc}
 801049c:	20008af0 	.word	0x20008af0

080104a0 <_malloc_usable_size_r>:
 80104a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80104a4:	1f18      	subs	r0, r3, #4
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	bfbc      	itt	lt
 80104aa:	580b      	ldrlt	r3, [r1, r0]
 80104ac:	18c0      	addlt	r0, r0, r3
 80104ae:	4770      	bx	lr

080104b0 <_init>:
 80104b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104b2:	bf00      	nop
 80104b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80104b6:	bc08      	pop	{r3}
 80104b8:	469e      	mov	lr, r3
 80104ba:	4770      	bx	lr

080104bc <_fini>:
 80104bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104be:	bf00      	nop
 80104c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80104c2:	bc08      	pop	{r3}
 80104c4:	469e      	mov	lr, r3
 80104c6:	4770      	bx	lr
