
control_board_system_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008520  080001e8  080001e8  000011e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000036c  08008708  08008708  00009708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a74  08008a74  0000a064  2**0
                  CONTENTS
  4 .ARM          00000008  08008a74  08008a74  00009a74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a7c  08008a7c  0000a064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08008a7c  08008a7c  00009a7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008a84  08008a84  00009a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08008a88  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000044d8  20000068  08008aec  0000a068  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20004540  08008aec  0000a540  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a064  2**0
                  CONTENTS, READONLY
 12 .debug_info   000177d4  00000000  00000000  0000a08d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030bb  00000000  00000000  00021861  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001050  00000000  00000000  00024920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cb1  00000000  00000000  00025970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bce7  00000000  00000000  00026621  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001489d  00000000  00000000  00042308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009fd8d  00000000  00000000  00056ba5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f6932  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004aac  00000000  00000000  000f6978  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  000fb424  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	@ (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	@ (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000068 	.word	0x20000068
 8000204:	00000000 	.word	0x00000000
 8000208:	080086f0 	.word	0x080086f0

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	@ (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	@ (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	@ (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	2000006c 	.word	0x2000006c
 8000224:	080086f0 	.word	0x080086f0

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_dmul>:
 8000238:	b570      	push	{r4, r5, r6, lr}
 800023a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800023e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000242:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000246:	bf1d      	ittte	ne
 8000248:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800024c:	ea94 0f0c 	teqne	r4, ip
 8000250:	ea95 0f0c 	teqne	r5, ip
 8000254:	f000 f8de 	bleq	8000414 <__aeabi_dmul+0x1dc>
 8000258:	442c      	add	r4, r5
 800025a:	ea81 0603 	eor.w	r6, r1, r3
 800025e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000262:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000266:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800026a:	bf18      	it	ne
 800026c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000270:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000274:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000278:	d038      	beq.n	80002ec <__aeabi_dmul+0xb4>
 800027a:	fba0 ce02 	umull	ip, lr, r0, r2
 800027e:	f04f 0500 	mov.w	r5, #0
 8000282:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000286:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800028a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800028e:	f04f 0600 	mov.w	r6, #0
 8000292:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000296:	f09c 0f00 	teq	ip, #0
 800029a:	bf18      	it	ne
 800029c:	f04e 0e01 	orrne.w	lr, lr, #1
 80002a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80002a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002ac:	d204      	bcs.n	80002b8 <__aeabi_dmul+0x80>
 80002ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002b2:	416d      	adcs	r5, r5
 80002b4:	eb46 0606 	adc.w	r6, r6, r6
 80002b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80002d0:	bf88      	it	hi
 80002d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80002d6:	d81e      	bhi.n	8000316 <__aeabi_dmul+0xde>
 80002d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80002dc:	bf08      	it	eq
 80002de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002e2:	f150 0000 	adcs.w	r0, r0, #0
 80002e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80002f0:	ea46 0101 	orr.w	r1, r6, r1
 80002f4:	ea40 0002 	orr.w	r0, r0, r2
 80002f8:	ea81 0103 	eor.w	r1, r1, r3
 80002fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000300:	bfc2      	ittt	gt
 8000302:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000306:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800030a:	bd70      	popgt	{r4, r5, r6, pc}
 800030c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000310:	f04f 0e00 	mov.w	lr, #0
 8000314:	3c01      	subs	r4, #1
 8000316:	f300 80ab 	bgt.w	8000470 <__aeabi_dmul+0x238>
 800031a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800031e:	bfde      	ittt	le
 8000320:	2000      	movle	r0, #0
 8000322:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000326:	bd70      	pople	{r4, r5, r6, pc}
 8000328:	f1c4 0400 	rsb	r4, r4, #0
 800032c:	3c20      	subs	r4, #32
 800032e:	da35      	bge.n	800039c <__aeabi_dmul+0x164>
 8000330:	340c      	adds	r4, #12
 8000332:	dc1b      	bgt.n	800036c <__aeabi_dmul+0x134>
 8000334:	f104 0414 	add.w	r4, r4, #20
 8000338:	f1c4 0520 	rsb	r5, r4, #32
 800033c:	fa00 f305 	lsl.w	r3, r0, r5
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f205 	lsl.w	r2, r1, r5
 8000348:	ea40 0002 	orr.w	r0, r0, r2
 800034c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000350:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000354:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000358:	fa21 f604 	lsr.w	r6, r1, r4
 800035c:	eb42 0106 	adc.w	r1, r2, r6
 8000360:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000364:	bf08      	it	eq
 8000366:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800036a:	bd70      	pop	{r4, r5, r6, pc}
 800036c:	f1c4 040c 	rsb	r4, r4, #12
 8000370:	f1c4 0520 	rsb	r5, r4, #32
 8000374:	fa00 f304 	lsl.w	r3, r0, r4
 8000378:	fa20 f005 	lsr.w	r0, r0, r5
 800037c:	fa01 f204 	lsl.w	r2, r1, r4
 8000380:	ea40 0002 	orr.w	r0, r0, r2
 8000384:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000388:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000394:	bf08      	it	eq
 8000396:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800039a:	bd70      	pop	{r4, r5, r6, pc}
 800039c:	f1c4 0520 	rsb	r5, r4, #32
 80003a0:	fa00 f205 	lsl.w	r2, r0, r5
 80003a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80003a8:	fa20 f304 	lsr.w	r3, r0, r4
 80003ac:	fa01 f205 	lsl.w	r2, r1, r5
 80003b0:	ea43 0302 	orr.w	r3, r3, r2
 80003b4:	fa21 f004 	lsr.w	r0, r1, r4
 80003b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003bc:	fa21 f204 	lsr.w	r2, r1, r4
 80003c0:	ea20 0002 	bic.w	r0, r0, r2
 80003c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f094 0f00 	teq	r4, #0
 80003d8:	d10f      	bne.n	80003fa <__aeabi_dmul+0x1c2>
 80003da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80003de:	0040      	lsls	r0, r0, #1
 80003e0:	eb41 0101 	adc.w	r1, r1, r1
 80003e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80003e8:	bf08      	it	eq
 80003ea:	3c01      	subeq	r4, #1
 80003ec:	d0f7      	beq.n	80003de <__aeabi_dmul+0x1a6>
 80003ee:	ea41 0106 	orr.w	r1, r1, r6
 80003f2:	f095 0f00 	teq	r5, #0
 80003f6:	bf18      	it	ne
 80003f8:	4770      	bxne	lr
 80003fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003fe:	0052      	lsls	r2, r2, #1
 8000400:	eb43 0303 	adc.w	r3, r3, r3
 8000404:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000408:	bf08      	it	eq
 800040a:	3d01      	subeq	r5, #1
 800040c:	d0f7      	beq.n	80003fe <__aeabi_dmul+0x1c6>
 800040e:	ea43 0306 	orr.w	r3, r3, r6
 8000412:	4770      	bx	lr
 8000414:	ea94 0f0c 	teq	r4, ip
 8000418:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800041c:	bf18      	it	ne
 800041e:	ea95 0f0c 	teqne	r5, ip
 8000422:	d00c      	beq.n	800043e <__aeabi_dmul+0x206>
 8000424:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000428:	bf18      	it	ne
 800042a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800042e:	d1d1      	bne.n	80003d4 <__aeabi_dmul+0x19c>
 8000430:	ea81 0103 	eor.w	r1, r1, r3
 8000434:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000438:	f04f 0000 	mov.w	r0, #0
 800043c:	bd70      	pop	{r4, r5, r6, pc}
 800043e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000442:	bf06      	itte	eq
 8000444:	4610      	moveq	r0, r2
 8000446:	4619      	moveq	r1, r3
 8000448:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800044c:	d019      	beq.n	8000482 <__aeabi_dmul+0x24a>
 800044e:	ea94 0f0c 	teq	r4, ip
 8000452:	d102      	bne.n	800045a <__aeabi_dmul+0x222>
 8000454:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000458:	d113      	bne.n	8000482 <__aeabi_dmul+0x24a>
 800045a:	ea95 0f0c 	teq	r5, ip
 800045e:	d105      	bne.n	800046c <__aeabi_dmul+0x234>
 8000460:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000464:	bf1c      	itt	ne
 8000466:	4610      	movne	r0, r2
 8000468:	4619      	movne	r1, r3
 800046a:	d10a      	bne.n	8000482 <__aeabi_dmul+0x24a>
 800046c:	ea81 0103 	eor.w	r1, r1, r3
 8000470:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000474:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd70      	pop	{r4, r5, r6, pc}
 8000482:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000486:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800048a:	bd70      	pop	{r4, r5, r6, pc}

0800048c <__aeabi_drsub>:
 800048c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000490:	e002      	b.n	8000498 <__adddf3>
 8000492:	bf00      	nop

08000494 <__aeabi_dsub>:
 8000494:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000498 <__adddf3>:
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800049e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004a2:	ea94 0f05 	teq	r4, r5
 80004a6:	bf08      	it	eq
 80004a8:	ea90 0f02 	teqeq	r0, r2
 80004ac:	bf1f      	itttt	ne
 80004ae:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004b2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004b6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004ba:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004be:	f000 80e2 	beq.w	8000686 <__adddf3+0x1ee>
 80004c2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004c6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004ca:	bfb8      	it	lt
 80004cc:	426d      	neglt	r5, r5
 80004ce:	dd0c      	ble.n	80004ea <__adddf3+0x52>
 80004d0:	442c      	add	r4, r5
 80004d2:	ea80 0202 	eor.w	r2, r0, r2
 80004d6:	ea81 0303 	eor.w	r3, r1, r3
 80004da:	ea82 0000 	eor.w	r0, r2, r0
 80004de:	ea83 0101 	eor.w	r1, r3, r1
 80004e2:	ea80 0202 	eor.w	r2, r0, r2
 80004e6:	ea81 0303 	eor.w	r3, r1, r3
 80004ea:	2d36      	cmp	r5, #54	@ 0x36
 80004ec:	bf88      	it	hi
 80004ee:	bd30      	pophi	{r4, r5, pc}
 80004f0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004f4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004f8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004fc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000500:	d002      	beq.n	8000508 <__adddf3+0x70>
 8000502:	4240      	negs	r0, r0
 8000504:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000508:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800050c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000510:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000514:	d002      	beq.n	800051c <__adddf3+0x84>
 8000516:	4252      	negs	r2, r2
 8000518:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800051c:	ea94 0f05 	teq	r4, r5
 8000520:	f000 80a7 	beq.w	8000672 <__adddf3+0x1da>
 8000524:	f1a4 0401 	sub.w	r4, r4, #1
 8000528:	f1d5 0e20 	rsbs	lr, r5, #32
 800052c:	db0d      	blt.n	800054a <__adddf3+0xb2>
 800052e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000532:	fa22 f205 	lsr.w	r2, r2, r5
 8000536:	1880      	adds	r0, r0, r2
 8000538:	f141 0100 	adc.w	r1, r1, #0
 800053c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000540:	1880      	adds	r0, r0, r2
 8000542:	fa43 f305 	asr.w	r3, r3, r5
 8000546:	4159      	adcs	r1, r3
 8000548:	e00e      	b.n	8000568 <__adddf3+0xd0>
 800054a:	f1a5 0520 	sub.w	r5, r5, #32
 800054e:	f10e 0e20 	add.w	lr, lr, #32
 8000552:	2a01      	cmp	r2, #1
 8000554:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000558:	bf28      	it	cs
 800055a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800055e:	fa43 f305 	asr.w	r3, r3, r5
 8000562:	18c0      	adds	r0, r0, r3
 8000564:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000568:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800056c:	d507      	bpl.n	800057e <__adddf3+0xe6>
 800056e:	f04f 0e00 	mov.w	lr, #0
 8000572:	f1dc 0c00 	rsbs	ip, ip, #0
 8000576:	eb7e 0000 	sbcs.w	r0, lr, r0
 800057a:	eb6e 0101 	sbc.w	r1, lr, r1
 800057e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000582:	d31b      	bcc.n	80005bc <__adddf3+0x124>
 8000584:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000588:	d30c      	bcc.n	80005a4 <__adddf3+0x10c>
 800058a:	0849      	lsrs	r1, r1, #1
 800058c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000590:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000594:	f104 0401 	add.w	r4, r4, #1
 8000598:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800059c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005a0:	f080 809a 	bcs.w	80006d8 <__adddf3+0x240>
 80005a4:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005a8:	bf08      	it	eq
 80005aa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005ae:	f150 0000 	adcs.w	r0, r0, #0
 80005b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005b6:	ea41 0105 	orr.w	r1, r1, r5
 80005ba:	bd30      	pop	{r4, r5, pc}
 80005bc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005c0:	4140      	adcs	r0, r0
 80005c2:	eb41 0101 	adc.w	r1, r1, r1
 80005c6:	3c01      	subs	r4, #1
 80005c8:	bf28      	it	cs
 80005ca:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80005ce:	d2e9      	bcs.n	80005a4 <__adddf3+0x10c>
 80005d0:	f091 0f00 	teq	r1, #0
 80005d4:	bf04      	itt	eq
 80005d6:	4601      	moveq	r1, r0
 80005d8:	2000      	moveq	r0, #0
 80005da:	fab1 f381 	clz	r3, r1
 80005de:	bf08      	it	eq
 80005e0:	3320      	addeq	r3, #32
 80005e2:	f1a3 030b 	sub.w	r3, r3, #11
 80005e6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ea:	da0c      	bge.n	8000606 <__adddf3+0x16e>
 80005ec:	320c      	adds	r2, #12
 80005ee:	dd08      	ble.n	8000602 <__adddf3+0x16a>
 80005f0:	f102 0c14 	add.w	ip, r2, #20
 80005f4:	f1c2 020c 	rsb	r2, r2, #12
 80005f8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005fc:	fa21 f102 	lsr.w	r1, r1, r2
 8000600:	e00c      	b.n	800061c <__adddf3+0x184>
 8000602:	f102 0214 	add.w	r2, r2, #20
 8000606:	bfd8      	it	le
 8000608:	f1c2 0c20 	rsble	ip, r2, #32
 800060c:	fa01 f102 	lsl.w	r1, r1, r2
 8000610:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000614:	bfdc      	itt	le
 8000616:	ea41 010c 	orrle.w	r1, r1, ip
 800061a:	4090      	lslle	r0, r2
 800061c:	1ae4      	subs	r4, r4, r3
 800061e:	bfa2      	ittt	ge
 8000620:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000624:	4329      	orrge	r1, r5
 8000626:	bd30      	popge	{r4, r5, pc}
 8000628:	ea6f 0404 	mvn.w	r4, r4
 800062c:	3c1f      	subs	r4, #31
 800062e:	da1c      	bge.n	800066a <__adddf3+0x1d2>
 8000630:	340c      	adds	r4, #12
 8000632:	dc0e      	bgt.n	8000652 <__adddf3+0x1ba>
 8000634:	f104 0414 	add.w	r4, r4, #20
 8000638:	f1c4 0220 	rsb	r2, r4, #32
 800063c:	fa20 f004 	lsr.w	r0, r0, r4
 8000640:	fa01 f302 	lsl.w	r3, r1, r2
 8000644:	ea40 0003 	orr.w	r0, r0, r3
 8000648:	fa21 f304 	lsr.w	r3, r1, r4
 800064c:	ea45 0103 	orr.w	r1, r5, r3
 8000650:	bd30      	pop	{r4, r5, pc}
 8000652:	f1c4 040c 	rsb	r4, r4, #12
 8000656:	f1c4 0220 	rsb	r2, r4, #32
 800065a:	fa20 f002 	lsr.w	r0, r0, r2
 800065e:	fa01 f304 	lsl.w	r3, r1, r4
 8000662:	ea40 0003 	orr.w	r0, r0, r3
 8000666:	4629      	mov	r1, r5
 8000668:	bd30      	pop	{r4, r5, pc}
 800066a:	fa21 f004 	lsr.w	r0, r1, r4
 800066e:	4629      	mov	r1, r5
 8000670:	bd30      	pop	{r4, r5, pc}
 8000672:	f094 0f00 	teq	r4, #0
 8000676:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800067a:	bf06      	itte	eq
 800067c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000680:	3401      	addeq	r4, #1
 8000682:	3d01      	subne	r5, #1
 8000684:	e74e      	b.n	8000524 <__adddf3+0x8c>
 8000686:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800068a:	bf18      	it	ne
 800068c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000690:	d029      	beq.n	80006e6 <__adddf3+0x24e>
 8000692:	ea94 0f05 	teq	r4, r5
 8000696:	bf08      	it	eq
 8000698:	ea90 0f02 	teqeq	r0, r2
 800069c:	d005      	beq.n	80006aa <__adddf3+0x212>
 800069e:	ea54 0c00 	orrs.w	ip, r4, r0
 80006a2:	bf04      	itt	eq
 80006a4:	4619      	moveq	r1, r3
 80006a6:	4610      	moveq	r0, r2
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	ea91 0f03 	teq	r1, r3
 80006ae:	bf1e      	ittt	ne
 80006b0:	2100      	movne	r1, #0
 80006b2:	2000      	movne	r0, #0
 80006b4:	bd30      	popne	{r4, r5, pc}
 80006b6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006ba:	d105      	bne.n	80006c8 <__adddf3+0x230>
 80006bc:	0040      	lsls	r0, r0, #1
 80006be:	4149      	adcs	r1, r1
 80006c0:	bf28      	it	cs
 80006c2:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006c6:	bd30      	pop	{r4, r5, pc}
 80006c8:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80006cc:	bf3c      	itt	cc
 80006ce:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80006d2:	bd30      	popcc	{r4, r5, pc}
 80006d4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006d8:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80006dc:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80006e0:	f04f 0000 	mov.w	r0, #0
 80006e4:	bd30      	pop	{r4, r5, pc}
 80006e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ea:	bf1a      	itte	ne
 80006ec:	4619      	movne	r1, r3
 80006ee:	4610      	movne	r0, r2
 80006f0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006f4:	bf1c      	itt	ne
 80006f6:	460b      	movne	r3, r1
 80006f8:	4602      	movne	r2, r0
 80006fa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006fe:	bf06      	itte	eq
 8000700:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000704:	ea91 0f03 	teqeq	r1, r3
 8000708:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800070c:	bd30      	pop	{r4, r5, pc}
 800070e:	bf00      	nop

08000710 <__aeabi_ui2d>:
 8000710:	f090 0f00 	teq	r0, #0
 8000714:	bf04      	itt	eq
 8000716:	2100      	moveq	r1, #0
 8000718:	4770      	bxeq	lr
 800071a:	b530      	push	{r4, r5, lr}
 800071c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000720:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000724:	f04f 0500 	mov.w	r5, #0
 8000728:	f04f 0100 	mov.w	r1, #0
 800072c:	e750      	b.n	80005d0 <__adddf3+0x138>
 800072e:	bf00      	nop

08000730 <__aeabi_i2d>:
 8000730:	f090 0f00 	teq	r0, #0
 8000734:	bf04      	itt	eq
 8000736:	2100      	moveq	r1, #0
 8000738:	4770      	bxeq	lr
 800073a:	b530      	push	{r4, r5, lr}
 800073c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000740:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000744:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000748:	bf48      	it	mi
 800074a:	4240      	negmi	r0, r0
 800074c:	f04f 0100 	mov.w	r1, #0
 8000750:	e73e      	b.n	80005d0 <__adddf3+0x138>
 8000752:	bf00      	nop

08000754 <__aeabi_f2d>:
 8000754:	0042      	lsls	r2, r0, #1
 8000756:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800075a:	ea4f 0131 	mov.w	r1, r1, rrx
 800075e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000762:	bf1f      	itttt	ne
 8000764:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000768:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800076c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000770:	4770      	bxne	lr
 8000772:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000776:	bf08      	it	eq
 8000778:	4770      	bxeq	lr
 800077a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800077e:	bf04      	itt	eq
 8000780:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000784:	4770      	bxeq	lr
 8000786:	b530      	push	{r4, r5, lr}
 8000788:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800078c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000790:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000794:	e71c      	b.n	80005d0 <__adddf3+0x138>
 8000796:	bf00      	nop

08000798 <__aeabi_ul2d>:
 8000798:	ea50 0201 	orrs.w	r2, r0, r1
 800079c:	bf08      	it	eq
 800079e:	4770      	bxeq	lr
 80007a0:	b530      	push	{r4, r5, lr}
 80007a2:	f04f 0500 	mov.w	r5, #0
 80007a6:	e00a      	b.n	80007be <__aeabi_l2d+0x16>

080007a8 <__aeabi_l2d>:
 80007a8:	ea50 0201 	orrs.w	r2, r0, r1
 80007ac:	bf08      	it	eq
 80007ae:	4770      	bxeq	lr
 80007b0:	b530      	push	{r4, r5, lr}
 80007b2:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007b6:	d502      	bpl.n	80007be <__aeabi_l2d+0x16>
 80007b8:	4240      	negs	r0, r0
 80007ba:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007be:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007c2:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007c6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007ca:	f43f aed8 	beq.w	800057e <__adddf3+0xe6>
 80007ce:	f04f 0203 	mov.w	r2, #3
 80007d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007d6:	bf18      	it	ne
 80007d8:	3203      	addne	r2, #3
 80007da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007de:	bf18      	it	ne
 80007e0:	3203      	addne	r2, #3
 80007e2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007e6:	f1c2 0320 	rsb	r3, r2, #32
 80007ea:	fa00 fc03 	lsl.w	ip, r0, r3
 80007ee:	fa20 f002 	lsr.w	r0, r0, r2
 80007f2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007f6:	ea40 000e 	orr.w	r0, r0, lr
 80007fa:	fa21 f102 	lsr.w	r1, r1, r2
 80007fe:	4414      	add	r4, r2
 8000800:	e6bd      	b.n	800057e <__adddf3+0xe6>
 8000802:	bf00      	nop

08000804 <__aeabi_d2uiz>:
 8000804:	004a      	lsls	r2, r1, #1
 8000806:	d211      	bcs.n	800082c <__aeabi_d2uiz+0x28>
 8000808:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800080c:	d211      	bcs.n	8000832 <__aeabi_d2uiz+0x2e>
 800080e:	d50d      	bpl.n	800082c <__aeabi_d2uiz+0x28>
 8000810:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000814:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000818:	d40e      	bmi.n	8000838 <__aeabi_d2uiz+0x34>
 800081a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800081e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000822:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000826:	fa23 f002 	lsr.w	r0, r3, r2
 800082a:	4770      	bx	lr
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	4770      	bx	lr
 8000832:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000836:	d102      	bne.n	800083e <__aeabi_d2uiz+0x3a>
 8000838:	f04f 30ff 	mov.w	r0, #4294967295
 800083c:	4770      	bx	lr
 800083e:	f04f 0000 	mov.w	r0, #0
 8000842:	4770      	bx	lr

08000844 <__aeabi_d2f>:
 8000844:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000848:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 800084c:	bf24      	itt	cs
 800084e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000852:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000856:	d90d      	bls.n	8000874 <__aeabi_d2f+0x30>
 8000858:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800085c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000860:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000864:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000868:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800086c:	bf08      	it	eq
 800086e:	f020 0001 	biceq.w	r0, r0, #1
 8000872:	4770      	bx	lr
 8000874:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000878:	d121      	bne.n	80008be <__aeabi_d2f+0x7a>
 800087a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 800087e:	bfbc      	itt	lt
 8000880:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000884:	4770      	bxlt	lr
 8000886:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800088e:	f1c2 0218 	rsb	r2, r2, #24
 8000892:	f1c2 0c20 	rsb	ip, r2, #32
 8000896:	fa10 f30c 	lsls.w	r3, r0, ip
 800089a:	fa20 f002 	lsr.w	r0, r0, r2
 800089e:	bf18      	it	ne
 80008a0:	f040 0001 	orrne.w	r0, r0, #1
 80008a4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008a8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008ac:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008b0:	ea40 000c 	orr.w	r0, r0, ip
 80008b4:	fa23 f302 	lsr.w	r3, r3, r2
 80008b8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008bc:	e7cc      	b.n	8000858 <__aeabi_d2f+0x14>
 80008be:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008c2:	d107      	bne.n	80008d4 <__aeabi_d2f+0x90>
 80008c4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80008c8:	bf1e      	ittt	ne
 80008ca:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80008ce:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80008d2:	4770      	bxne	lr
 80008d4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80008d8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80008dc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop

080008e4 <__aeabi_frsub>:
 80008e4:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80008e8:	e002      	b.n	80008f0 <__addsf3>
 80008ea:	bf00      	nop

080008ec <__aeabi_fsub>:
 80008ec:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080008f0 <__addsf3>:
 80008f0:	0042      	lsls	r2, r0, #1
 80008f2:	bf1f      	itttt	ne
 80008f4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80008f8:	ea92 0f03 	teqne	r2, r3
 80008fc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000900:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000904:	d06a      	beq.n	80009dc <__addsf3+0xec>
 8000906:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800090a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800090e:	bfc1      	itttt	gt
 8000910:	18d2      	addgt	r2, r2, r3
 8000912:	4041      	eorgt	r1, r0
 8000914:	4048      	eorgt	r0, r1
 8000916:	4041      	eorgt	r1, r0
 8000918:	bfb8      	it	lt
 800091a:	425b      	neglt	r3, r3
 800091c:	2b19      	cmp	r3, #25
 800091e:	bf88      	it	hi
 8000920:	4770      	bxhi	lr
 8000922:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000926:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800092a:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 800092e:	bf18      	it	ne
 8000930:	4240      	negne	r0, r0
 8000932:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000936:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800093a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 800093e:	bf18      	it	ne
 8000940:	4249      	negne	r1, r1
 8000942:	ea92 0f03 	teq	r2, r3
 8000946:	d03f      	beq.n	80009c8 <__addsf3+0xd8>
 8000948:	f1a2 0201 	sub.w	r2, r2, #1
 800094c:	fa41 fc03 	asr.w	ip, r1, r3
 8000950:	eb10 000c 	adds.w	r0, r0, ip
 8000954:	f1c3 0320 	rsb	r3, r3, #32
 8000958:	fa01 f103 	lsl.w	r1, r1, r3
 800095c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000960:	d502      	bpl.n	8000968 <__addsf3+0x78>
 8000962:	4249      	negs	r1, r1
 8000964:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000968:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 800096c:	d313      	bcc.n	8000996 <__addsf3+0xa6>
 800096e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000972:	d306      	bcc.n	8000982 <__addsf3+0x92>
 8000974:	0840      	lsrs	r0, r0, #1
 8000976:	ea4f 0131 	mov.w	r1, r1, rrx
 800097a:	f102 0201 	add.w	r2, r2, #1
 800097e:	2afe      	cmp	r2, #254	@ 0xfe
 8000980:	d251      	bcs.n	8000a26 <__addsf3+0x136>
 8000982:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000986:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800098a:	bf08      	it	eq
 800098c:	f020 0001 	biceq.w	r0, r0, #1
 8000990:	ea40 0003 	orr.w	r0, r0, r3
 8000994:	4770      	bx	lr
 8000996:	0049      	lsls	r1, r1, #1
 8000998:	eb40 0000 	adc.w	r0, r0, r0
 800099c:	3a01      	subs	r2, #1
 800099e:	bf28      	it	cs
 80009a0:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 80009a4:	d2ed      	bcs.n	8000982 <__addsf3+0x92>
 80009a6:	fab0 fc80 	clz	ip, r0
 80009aa:	f1ac 0c08 	sub.w	ip, ip, #8
 80009ae:	ebb2 020c 	subs.w	r2, r2, ip
 80009b2:	fa00 f00c 	lsl.w	r0, r0, ip
 80009b6:	bfaa      	itet	ge
 80009b8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80009bc:	4252      	neglt	r2, r2
 80009be:	4318      	orrge	r0, r3
 80009c0:	bfbc      	itt	lt
 80009c2:	40d0      	lsrlt	r0, r2
 80009c4:	4318      	orrlt	r0, r3
 80009c6:	4770      	bx	lr
 80009c8:	f092 0f00 	teq	r2, #0
 80009cc:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80009d0:	bf06      	itte	eq
 80009d2:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80009d6:	3201      	addeq	r2, #1
 80009d8:	3b01      	subne	r3, #1
 80009da:	e7b5      	b.n	8000948 <__addsf3+0x58>
 80009dc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80009e0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80009e4:	bf18      	it	ne
 80009e6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009ea:	d021      	beq.n	8000a30 <__addsf3+0x140>
 80009ec:	ea92 0f03 	teq	r2, r3
 80009f0:	d004      	beq.n	80009fc <__addsf3+0x10c>
 80009f2:	f092 0f00 	teq	r2, #0
 80009f6:	bf08      	it	eq
 80009f8:	4608      	moveq	r0, r1
 80009fa:	4770      	bx	lr
 80009fc:	ea90 0f01 	teq	r0, r1
 8000a00:	bf1c      	itt	ne
 8000a02:	2000      	movne	r0, #0
 8000a04:	4770      	bxne	lr
 8000a06:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000a0a:	d104      	bne.n	8000a16 <__addsf3+0x126>
 8000a0c:	0040      	lsls	r0, r0, #1
 8000a0e:	bf28      	it	cs
 8000a10:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000a14:	4770      	bx	lr
 8000a16:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000a1a:	bf3c      	itt	cc
 8000a1c:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000a20:	4770      	bxcc	lr
 8000a22:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000a26:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000a2a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a2e:	4770      	bx	lr
 8000a30:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000a34:	bf16      	itet	ne
 8000a36:	4608      	movne	r0, r1
 8000a38:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000a3c:	4601      	movne	r1, r0
 8000a3e:	0242      	lsls	r2, r0, #9
 8000a40:	bf06      	itte	eq
 8000a42:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000a46:	ea90 0f01 	teqeq	r0, r1
 8000a4a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000a4e:	4770      	bx	lr

08000a50 <__aeabi_ui2f>:
 8000a50:	f04f 0300 	mov.w	r3, #0
 8000a54:	e004      	b.n	8000a60 <__aeabi_i2f+0x8>
 8000a56:	bf00      	nop

08000a58 <__aeabi_i2f>:
 8000a58:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000a5c:	bf48      	it	mi
 8000a5e:	4240      	negmi	r0, r0
 8000a60:	ea5f 0c00 	movs.w	ip, r0
 8000a64:	bf08      	it	eq
 8000a66:	4770      	bxeq	lr
 8000a68:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000a6c:	4601      	mov	r1, r0
 8000a6e:	f04f 0000 	mov.w	r0, #0
 8000a72:	e01c      	b.n	8000aae <__aeabi_l2f+0x2a>

08000a74 <__aeabi_ul2f>:
 8000a74:	ea50 0201 	orrs.w	r2, r0, r1
 8000a78:	bf08      	it	eq
 8000a7a:	4770      	bxeq	lr
 8000a7c:	f04f 0300 	mov.w	r3, #0
 8000a80:	e00a      	b.n	8000a98 <__aeabi_l2f+0x14>
 8000a82:	bf00      	nop

08000a84 <__aeabi_l2f>:
 8000a84:	ea50 0201 	orrs.w	r2, r0, r1
 8000a88:	bf08      	it	eq
 8000a8a:	4770      	bxeq	lr
 8000a8c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000a90:	d502      	bpl.n	8000a98 <__aeabi_l2f+0x14>
 8000a92:	4240      	negs	r0, r0
 8000a94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000a98:	ea5f 0c01 	movs.w	ip, r1
 8000a9c:	bf02      	ittt	eq
 8000a9e:	4684      	moveq	ip, r0
 8000aa0:	4601      	moveq	r1, r0
 8000aa2:	2000      	moveq	r0, #0
 8000aa4:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000aa8:	bf08      	it	eq
 8000aaa:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000aae:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000ab2:	fabc f28c 	clz	r2, ip
 8000ab6:	3a08      	subs	r2, #8
 8000ab8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000abc:	db10      	blt.n	8000ae0 <__aeabi_l2f+0x5c>
 8000abe:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ac2:	4463      	add	r3, ip
 8000ac4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ac8:	f1c2 0220 	rsb	r2, r2, #32
 8000acc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000ad0:	fa20 f202 	lsr.w	r2, r0, r2
 8000ad4:	eb43 0002 	adc.w	r0, r3, r2
 8000ad8:	bf08      	it	eq
 8000ada:	f020 0001 	biceq.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	f102 0220 	add.w	r2, r2, #32
 8000ae4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ae8:	f1c2 0220 	rsb	r2, r2, #32
 8000aec:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000af0:	fa21 f202 	lsr.w	r2, r1, r2
 8000af4:	eb43 0002 	adc.w	r0, r3, r2
 8000af8:	bf08      	it	eq
 8000afa:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000afe:	4770      	bx	lr

08000b00 <__aeabi_fmul>:
 8000b00:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000b04:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b08:	bf1e      	ittt	ne
 8000b0a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b0e:	ea92 0f0c 	teqne	r2, ip
 8000b12:	ea93 0f0c 	teqne	r3, ip
 8000b16:	d06f      	beq.n	8000bf8 <__aeabi_fmul+0xf8>
 8000b18:	441a      	add	r2, r3
 8000b1a:	ea80 0c01 	eor.w	ip, r0, r1
 8000b1e:	0240      	lsls	r0, r0, #9
 8000b20:	bf18      	it	ne
 8000b22:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000b26:	d01e      	beq.n	8000b66 <__aeabi_fmul+0x66>
 8000b28:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000b2c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000b30:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000b34:	fba0 3101 	umull	r3, r1, r0, r1
 8000b38:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000b3c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000b40:	bf3e      	ittt	cc
 8000b42:	0049      	lslcc	r1, r1, #1
 8000b44:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000b48:	005b      	lslcc	r3, r3, #1
 8000b4a:	ea40 0001 	orr.w	r0, r0, r1
 8000b4e:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000b52:	2afd      	cmp	r2, #253	@ 0xfd
 8000b54:	d81d      	bhi.n	8000b92 <__aeabi_fmul+0x92>
 8000b56:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000b5a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b5e:	bf08      	it	eq
 8000b60:	f020 0001 	biceq.w	r0, r0, #1
 8000b64:	4770      	bx	lr
 8000b66:	f090 0f00 	teq	r0, #0
 8000b6a:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000b6e:	bf08      	it	eq
 8000b70:	0249      	lsleq	r1, r1, #9
 8000b72:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000b76:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000b7a:	3a7f      	subs	r2, #127	@ 0x7f
 8000b7c:	bfc2      	ittt	gt
 8000b7e:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000b82:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000b86:	4770      	bxgt	lr
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b8c:	f04f 0300 	mov.w	r3, #0
 8000b90:	3a01      	subs	r2, #1
 8000b92:	dc5d      	bgt.n	8000c50 <__aeabi_fmul+0x150>
 8000b94:	f112 0f19 	cmn.w	r2, #25
 8000b98:	bfdc      	itt	le
 8000b9a:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bxle	lr
 8000ba0:	f1c2 0200 	rsb	r2, r2, #0
 8000ba4:	0041      	lsls	r1, r0, #1
 8000ba6:	fa21 f102 	lsr.w	r1, r1, r2
 8000baa:	f1c2 0220 	rsb	r2, r2, #32
 8000bae:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bb2:	ea5f 0031 	movs.w	r0, r1, rrx
 8000bb6:	f140 0000 	adc.w	r0, r0, #0
 8000bba:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000bbe:	bf08      	it	eq
 8000bc0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bc4:	4770      	bx	lr
 8000bc6:	f092 0f00 	teq	r2, #0
 8000bca:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000bce:	bf02      	ittt	eq
 8000bd0:	0040      	lsleq	r0, r0, #1
 8000bd2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000bd6:	3a01      	subeq	r2, #1
 8000bd8:	d0f9      	beq.n	8000bce <__aeabi_fmul+0xce>
 8000bda:	ea40 000c 	orr.w	r0, r0, ip
 8000bde:	f093 0f00 	teq	r3, #0
 8000be2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000be6:	bf02      	ittt	eq
 8000be8:	0049      	lsleq	r1, r1, #1
 8000bea:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000bee:	3b01      	subeq	r3, #1
 8000bf0:	d0f9      	beq.n	8000be6 <__aeabi_fmul+0xe6>
 8000bf2:	ea41 010c 	orr.w	r1, r1, ip
 8000bf6:	e78f      	b.n	8000b18 <__aeabi_fmul+0x18>
 8000bf8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000bfc:	ea92 0f0c 	teq	r2, ip
 8000c00:	bf18      	it	ne
 8000c02:	ea93 0f0c 	teqne	r3, ip
 8000c06:	d00a      	beq.n	8000c1e <__aeabi_fmul+0x11e>
 8000c08:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000c0c:	bf18      	it	ne
 8000c0e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000c12:	d1d8      	bne.n	8000bc6 <__aeabi_fmul+0xc6>
 8000c14:	ea80 0001 	eor.w	r0, r0, r1
 8000c18:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000c1c:	4770      	bx	lr
 8000c1e:	f090 0f00 	teq	r0, #0
 8000c22:	bf17      	itett	ne
 8000c24:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000c28:	4608      	moveq	r0, r1
 8000c2a:	f091 0f00 	teqne	r1, #0
 8000c2e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000c32:	d014      	beq.n	8000c5e <__aeabi_fmul+0x15e>
 8000c34:	ea92 0f0c 	teq	r2, ip
 8000c38:	d101      	bne.n	8000c3e <__aeabi_fmul+0x13e>
 8000c3a:	0242      	lsls	r2, r0, #9
 8000c3c:	d10f      	bne.n	8000c5e <__aeabi_fmul+0x15e>
 8000c3e:	ea93 0f0c 	teq	r3, ip
 8000c42:	d103      	bne.n	8000c4c <__aeabi_fmul+0x14c>
 8000c44:	024b      	lsls	r3, r1, #9
 8000c46:	bf18      	it	ne
 8000c48:	4608      	movne	r0, r1
 8000c4a:	d108      	bne.n	8000c5e <__aeabi_fmul+0x15e>
 8000c4c:	ea80 0001 	eor.w	r0, r0, r1
 8000c50:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000c54:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c58:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c5c:	4770      	bx	lr
 8000c5e:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c62:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_fdiv>:
 8000c68:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000c6c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c70:	bf1e      	ittt	ne
 8000c72:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c76:	ea92 0f0c 	teqne	r2, ip
 8000c7a:	ea93 0f0c 	teqne	r3, ip
 8000c7e:	d069      	beq.n	8000d54 <__aeabi_fdiv+0xec>
 8000c80:	eba2 0203 	sub.w	r2, r2, r3
 8000c84:	ea80 0c01 	eor.w	ip, r0, r1
 8000c88:	0249      	lsls	r1, r1, #9
 8000c8a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000c8e:	d037      	beq.n	8000d00 <__aeabi_fdiv+0x98>
 8000c90:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000c94:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000c98:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000c9c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ca0:	428b      	cmp	r3, r1
 8000ca2:	bf38      	it	cc
 8000ca4:	005b      	lslcc	r3, r3, #1
 8000ca6:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000caa:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	bf24      	itt	cs
 8000cb2:	1a5b      	subcs	r3, r3, r1
 8000cb4:	ea40 000c 	orrcs.w	r0, r0, ip
 8000cb8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000cbc:	bf24      	itt	cs
 8000cbe:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000cc2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000cc6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000cca:	bf24      	itt	cs
 8000ccc:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000cd0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000cd4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000cd8:	bf24      	itt	cs
 8000cda:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000cde:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ce2:	011b      	lsls	r3, r3, #4
 8000ce4:	bf18      	it	ne
 8000ce6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000cea:	d1e0      	bne.n	8000cae <__aeabi_fdiv+0x46>
 8000cec:	2afd      	cmp	r2, #253	@ 0xfd
 8000cee:	f63f af50 	bhi.w	8000b92 <__aeabi_fmul+0x92>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cf8:	bf08      	it	eq
 8000cfa:	f020 0001 	biceq.w	r0, r0, #1
 8000cfe:	4770      	bx	lr
 8000d00:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d04:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d08:	327f      	adds	r2, #127	@ 0x7f
 8000d0a:	bfc2      	ittt	gt
 8000d0c:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d10:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d14:	4770      	bxgt	lr
 8000d16:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d1a:	f04f 0300 	mov.w	r3, #0
 8000d1e:	3a01      	subs	r2, #1
 8000d20:	e737      	b.n	8000b92 <__aeabi_fmul+0x92>
 8000d22:	f092 0f00 	teq	r2, #0
 8000d26:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d2a:	bf02      	ittt	eq
 8000d2c:	0040      	lsleq	r0, r0, #1
 8000d2e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d32:	3a01      	subeq	r2, #1
 8000d34:	d0f9      	beq.n	8000d2a <__aeabi_fdiv+0xc2>
 8000d36:	ea40 000c 	orr.w	r0, r0, ip
 8000d3a:	f093 0f00 	teq	r3, #0
 8000d3e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d42:	bf02      	ittt	eq
 8000d44:	0049      	lsleq	r1, r1, #1
 8000d46:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000d4a:	3b01      	subeq	r3, #1
 8000d4c:	d0f9      	beq.n	8000d42 <__aeabi_fdiv+0xda>
 8000d4e:	ea41 010c 	orr.w	r1, r1, ip
 8000d52:	e795      	b.n	8000c80 <__aeabi_fdiv+0x18>
 8000d54:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d58:	ea92 0f0c 	teq	r2, ip
 8000d5c:	d108      	bne.n	8000d70 <__aeabi_fdiv+0x108>
 8000d5e:	0242      	lsls	r2, r0, #9
 8000d60:	f47f af7d 	bne.w	8000c5e <__aeabi_fmul+0x15e>
 8000d64:	ea93 0f0c 	teq	r3, ip
 8000d68:	f47f af70 	bne.w	8000c4c <__aeabi_fmul+0x14c>
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	e776      	b.n	8000c5e <__aeabi_fmul+0x15e>
 8000d70:	ea93 0f0c 	teq	r3, ip
 8000d74:	d104      	bne.n	8000d80 <__aeabi_fdiv+0x118>
 8000d76:	024b      	lsls	r3, r1, #9
 8000d78:	f43f af4c 	beq.w	8000c14 <__aeabi_fmul+0x114>
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	e76e      	b.n	8000c5e <__aeabi_fmul+0x15e>
 8000d80:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000d84:	bf18      	it	ne
 8000d86:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000d8a:	d1ca      	bne.n	8000d22 <__aeabi_fdiv+0xba>
 8000d8c:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000d90:	f47f af5c 	bne.w	8000c4c <__aeabi_fmul+0x14c>
 8000d94:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000d98:	f47f af3c 	bne.w	8000c14 <__aeabi_fmul+0x114>
 8000d9c:	e75f      	b.n	8000c5e <__aeabi_fmul+0x15e>
 8000d9e:	bf00      	nop

08000da0 <__gesf2>:
 8000da0:	f04f 3cff 	mov.w	ip, #4294967295
 8000da4:	e006      	b.n	8000db4 <__cmpsf2+0x4>
 8000da6:	bf00      	nop

08000da8 <__lesf2>:
 8000da8:	f04f 0c01 	mov.w	ip, #1
 8000dac:	e002      	b.n	8000db4 <__cmpsf2+0x4>
 8000dae:	bf00      	nop

08000db0 <__cmpsf2>:
 8000db0:	f04f 0c01 	mov.w	ip, #1
 8000db4:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000db8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000dbc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000dc0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dc4:	bf18      	it	ne
 8000dc6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dca:	d011      	beq.n	8000df0 <__cmpsf2+0x40>
 8000dcc:	b001      	add	sp, #4
 8000dce:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000dd2:	bf18      	it	ne
 8000dd4:	ea90 0f01 	teqne	r0, r1
 8000dd8:	bf58      	it	pl
 8000dda:	ebb2 0003 	subspl.w	r0, r2, r3
 8000dde:	bf88      	it	hi
 8000de0:	17c8      	asrhi	r0, r1, #31
 8000de2:	bf38      	it	cc
 8000de4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000de8:	bf18      	it	ne
 8000dea:	f040 0001 	orrne.w	r0, r0, #1
 8000dee:	4770      	bx	lr
 8000df0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000df4:	d102      	bne.n	8000dfc <__cmpsf2+0x4c>
 8000df6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000dfa:	d105      	bne.n	8000e08 <__cmpsf2+0x58>
 8000dfc:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000e00:	d1e4      	bne.n	8000dcc <__cmpsf2+0x1c>
 8000e02:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000e06:	d0e1      	beq.n	8000dcc <__cmpsf2+0x1c>
 8000e08:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop

08000e10 <__aeabi_cfrcmple>:
 8000e10:	4684      	mov	ip, r0
 8000e12:	4608      	mov	r0, r1
 8000e14:	4661      	mov	r1, ip
 8000e16:	e7ff      	b.n	8000e18 <__aeabi_cfcmpeq>

08000e18 <__aeabi_cfcmpeq>:
 8000e18:	b50f      	push	{r0, r1, r2, r3, lr}
 8000e1a:	f7ff ffc9 	bl	8000db0 <__cmpsf2>
 8000e1e:	2800      	cmp	r0, #0
 8000e20:	bf48      	it	mi
 8000e22:	f110 0f00 	cmnmi.w	r0, #0
 8000e26:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000e28 <__aeabi_fcmpeq>:
 8000e28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e2c:	f7ff fff4 	bl	8000e18 <__aeabi_cfcmpeq>
 8000e30:	bf0c      	ite	eq
 8000e32:	2001      	moveq	r0, #1
 8000e34:	2000      	movne	r0, #0
 8000e36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e3a:	bf00      	nop

08000e3c <__aeabi_fcmplt>:
 8000e3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e40:	f7ff ffea 	bl	8000e18 <__aeabi_cfcmpeq>
 8000e44:	bf34      	ite	cc
 8000e46:	2001      	movcc	r0, #1
 8000e48:	2000      	movcs	r0, #0
 8000e4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e4e:	bf00      	nop

08000e50 <__aeabi_fcmple>:
 8000e50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e54:	f7ff ffe0 	bl	8000e18 <__aeabi_cfcmpeq>
 8000e58:	bf94      	ite	ls
 8000e5a:	2001      	movls	r0, #1
 8000e5c:	2000      	movhi	r0, #0
 8000e5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e62:	bf00      	nop

08000e64 <__aeabi_fcmpge>:
 8000e64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e68:	f7ff ffd2 	bl	8000e10 <__aeabi_cfrcmple>
 8000e6c:	bf94      	ite	ls
 8000e6e:	2001      	movls	r0, #1
 8000e70:	2000      	movhi	r0, #0
 8000e72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e76:	bf00      	nop

08000e78 <__aeabi_fcmpgt>:
 8000e78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e7c:	f7ff ffc8 	bl	8000e10 <__aeabi_cfrcmple>
 8000e80:	bf34      	ite	cc
 8000e82:	2001      	movcc	r0, #1
 8000e84:	2000      	movcs	r0, #0
 8000e86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e8a:	bf00      	nop

08000e8c <__aeabi_f2uiz>:
 8000e8c:	0042      	lsls	r2, r0, #1
 8000e8e:	d20e      	bcs.n	8000eae <__aeabi_f2uiz+0x22>
 8000e90:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000e94:	d30b      	bcc.n	8000eae <__aeabi_f2uiz+0x22>
 8000e96:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000e9a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e9e:	d409      	bmi.n	8000eb4 <__aeabi_f2uiz+0x28>
 8000ea0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ea4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ea8:	fa23 f002 	lsr.w	r0, r3, r2
 8000eac:	4770      	bx	lr
 8000eae:	f04f 0000 	mov.w	r0, #0
 8000eb2:	4770      	bx	lr
 8000eb4:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000eb8:	d101      	bne.n	8000ebe <__aeabi_f2uiz+0x32>
 8000eba:	0242      	lsls	r2, r0, #9
 8000ebc:	d102      	bne.n	8000ec4 <__aeabi_f2uiz+0x38>
 8000ebe:	f04f 30ff 	mov.w	r0, #4294967295
 8000ec2:	4770      	bx	lr
 8000ec4:	f04f 0000 	mov.w	r0, #0
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop

08000ecc <FO_IIR_Init>:
#include "IIR_filter.h"

void FO_IIR_Init(FO_IIR_Filter_t *instance, float *b_coefficient, float *a_coefficient)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b087      	sub	sp, #28
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	60f8      	str	r0, [r7, #12]
 8000ed4:	60b9      	str	r1, [r7, #8]
 8000ed6:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < 2; i++)
 8000ed8:	2300      	movs	r3, #0
 8000eda:	617b      	str	r3, [r7, #20]
 8000edc:	e015      	b.n	8000f0a <FO_IIR_Init+0x3e>
    {
        instance->b[i] = b_coefficient[i];
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	009b      	lsls	r3, r3, #2
 8000ee2:	68ba      	ldr	r2, [r7, #8]
 8000ee4:	4413      	add	r3, r2
 8000ee6:	6819      	ldr	r1, [r3, #0]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	697a      	ldr	r2, [r7, #20]
 8000eec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        instance->a[i] = a_coefficient[i];
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	009b      	lsls	r3, r3, #2
 8000ef4:	687a      	ldr	r2, [r7, #4]
 8000ef6:	4413      	add	r3, r2
 8000ef8:	6819      	ldr	r1, [r3, #0]
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	697a      	ldr	r2, [r7, #20]
 8000efe:	3202      	adds	r2, #2
 8000f00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (int i = 0; i < 2; i++)
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	3301      	adds	r3, #1
 8000f08:	617b      	str	r3, [r7, #20]
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	dde6      	ble.n	8000ede <FO_IIR_Init+0x12>
    }

    instance->prev_y = 0.0f;
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	f04f 0200 	mov.w	r2, #0
 8000f16:	611a      	str	r2, [r3, #16]
    instance->prev_x = 0.0f;
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	f04f 0200 	mov.w	r2, #0
 8000f1e:	615a      	str	r2, [r3, #20]
}
 8000f20:	bf00      	nop
 8000f22:	371c      	adds	r7, #28
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bc80      	pop	{r7}
 8000f28:	4770      	bx	lr

08000f2a <FO_IIR_Compute>:

float FO_IIR_Compute(FO_IIR_Filter_t *instance, float input)
{
 8000f2a:	b5b0      	push	{r4, r5, r7, lr}
 8000f2c:	b084      	sub	sp, #16
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	6078      	str	r0, [r7, #4]
 8000f32:	6039      	str	r1, [r7, #0]
    float output = -instance->a[1] * instance->prev_y + (instance->b[0] * input + instance->b[1] * instance->prev_x);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	f083 4200 	eor.w	r2, r3, #2147483648	@ 0x80000000
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	691b      	ldr	r3, [r3, #16]
 8000f40:	4619      	mov	r1, r3
 8000f42:	4610      	mov	r0, r2
 8000f44:	f7ff fddc 	bl	8000b00 <__aeabi_fmul>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	461c      	mov	r4, r3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	6839      	ldr	r1, [r7, #0]
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff fdd4 	bl	8000b00 <__aeabi_fmul>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	461d      	mov	r5, r3
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	685a      	ldr	r2, [r3, #4]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	695b      	ldr	r3, [r3, #20]
 8000f64:	4619      	mov	r1, r3
 8000f66:	4610      	mov	r0, r2
 8000f68:	f7ff fdca 	bl	8000b00 <__aeabi_fmul>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4628      	mov	r0, r5
 8000f72:	f7ff fcbd 	bl	80008f0 <__addsf3>
 8000f76:	4603      	mov	r3, r0
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4620      	mov	r0, r4
 8000f7c:	f7ff fcb8 	bl	80008f0 <__addsf3>
 8000f80:	4603      	mov	r3, r0
 8000f82:	60fb      	str	r3, [r7, #12]

    instance->prev_y = output;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	68fa      	ldr	r2, [r7, #12]
 8000f88:	611a      	str	r2, [r3, #16]
    instance->prev_x = input;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	683a      	ldr	r2, [r7, #0]
 8000f8e:	615a      	str	r2, [r3, #20]

    return output;
 8000f90:	68fb      	ldr	r3, [r7, #12]
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3710      	adds	r7, #16
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000f9c <Motor_Init>:
#include "dc_motor.h"

uint32_t pwm_freq;

Motor_t* Motor_Init(Motor_Handle_t handle)
{
 8000f9c:	b590      	push	{r4, r7, lr}
 8000f9e:	b087      	sub	sp, #28
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	463c      	mov	r4, r7
 8000fa4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    Motor_t *object = calloc(1, sizeof(Motor_t));
 8000fa8:	2110      	movs	r1, #16
 8000faa:	2001      	movs	r0, #1
 8000fac:	f007 f9fe 	bl	80083ac <calloc>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	617b      	str	r3, [r7, #20]

    object->direction = DIRECTION_FORWARD;
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	701a      	strb	r2, [r3, #0]
    object->pwm_duty = 0;
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	705a      	strb	r2, [r3, #1]

    object->pwm_channel = handle.pwm_channel;
 8000fc0:	683a      	ldr	r2, [r7, #0]
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	605a      	str	r2, [r3, #4]
    object->direction_port = handle.direction_port;
 8000fc6:	687a      	ldr	r2, [r7, #4]
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	609a      	str	r2, [r3, #8]
    object->direction_pin = handle.direction_pin;
 8000fcc:	893a      	ldrh	r2, [r7, #8]
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	819a      	strh	r2, [r3, #12]

    pwm_freq = handle.pwm_frequency;
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	4a07      	ldr	r2, [pc, #28]	@ (8000ff4 <Motor_Init+0x58>)
 8000fd6:	6013      	str	r3, [r2, #0]

    // Duty cycle Setting
    Motor_Set_PWM_Duty(object, 0);
 8000fd8:	2100      	movs	r1, #0
 8000fda:	6978      	ldr	r0, [r7, #20]
 8000fdc:	f000 f832 	bl	8001044 <Motor_Set_PWM_Duty>
    // Frequency Setting
    Motor_Set_PWM_Frequency(pwm_freq);
 8000fe0:	4b04      	ldr	r3, [pc, #16]	@ (8000ff4 <Motor_Init+0x58>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f000 f807 	bl	8000ff8 <Motor_Set_PWM_Frequency>

    return object;
 8000fea:	697b      	ldr	r3, [r7, #20]
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	371c      	adds	r7, #28
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd90      	pop	{r4, r7, pc}
 8000ff4:	20000084 	.word	0x20000084

08000ff8 <Motor_Set_PWM_Frequency>:

status_t Motor_Set_PWM_Frequency(uint32_t freq)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b085      	sub	sp, #20
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
    // The PWM frequency depends on: The clock frequency, the ARR value, the PSC value. 
    //              PWM frequency = Clock frequency / [ (ARR + 1) * (PSC + 1) ]
    pwm_freq = freq;
 8001000:	4a0d      	ldr	r2, [pc, #52]	@ (8001038 <Motor_Set_PWM_Frequency+0x40>)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6013      	str	r3, [r2, #0]

    uint32_t tim_arr_val = __HAL_TIM_GET_AUTORELOAD(&htim_motor);
 8001006:	4b0d      	ldr	r3, [pc, #52]	@ (800103c <Motor_Set_PWM_Frequency+0x44>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800100c:	60fb      	str	r3, [r7, #12]
    uint32_t tim_psc_val = (uint32_t)(DEFAULT_CLOCK_FREQ / (pwm_freq * (tim_arr_val + 1)) - 1);
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	3301      	adds	r3, #1
 8001012:	4a09      	ldr	r2, [pc, #36]	@ (8001038 <Motor_Set_PWM_Frequency+0x40>)
 8001014:	6812      	ldr	r2, [r2, #0]
 8001016:	fb02 f303 	mul.w	r3, r2, r3
 800101a:	4a09      	ldr	r2, [pc, #36]	@ (8001040 <Motor_Set_PWM_Frequency+0x48>)
 800101c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001020:	3b01      	subs	r3, #1
 8001022:	60bb      	str	r3, [r7, #8]

    __HAL_TIM_SET_PRESCALER(&htim_motor, tim_psc_val);
 8001024:	4b05      	ldr	r3, [pc, #20]	@ (800103c <Motor_Set_PWM_Frequency+0x44>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	68ba      	ldr	r2, [r7, #8]
 800102a:	629a      	str	r2, [r3, #40]	@ 0x28
    
    return STATUS_OK;
 800102c:	2300      	movs	r3, #0
}
 800102e:	4618      	mov	r0, r3
 8001030:	3714      	adds	r7, #20
 8001032:	46bd      	mov	sp, r7
 8001034:	bc80      	pop	{r7}
 8001036:	4770      	bx	lr
 8001038:	20000084 	.word	0x20000084
 800103c:	20000088 	.word	0x20000088
 8001040:	01e84800 	.word	0x01e84800

08001044 <Motor_Set_PWM_Duty>:

status_t Motor_Set_PWM_Duty(Motor_t *motor, uint8_t duty)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b086      	sub	sp, #24
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	460b      	mov	r3, r1
 800104e:	70fb      	strb	r3, [r7, #3]
    motor->pwm_duty = (motor->direction == DIRECTION_FORWARD) ? duty :
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	f993 3000 	ldrsb.w	r3, [r3]
 8001056:	2b01      	cmp	r3, #1
 8001058:	d00b      	beq.n	8001072 <Motor_Set_PWM_Duty+0x2e>
                      (motor->direction == DIRECTION_BACKWARD) ? (255-duty) : 0;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	f993 3000 	ldrsb.w	r3, [r3]
    motor->pwm_duty = (motor->direction == DIRECTION_FORWARD) ? duty :
 8001060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001064:	d103      	bne.n	800106e <Motor_Set_PWM_Duty+0x2a>
 8001066:	78fb      	ldrb	r3, [r7, #3]
 8001068:	43db      	mvns	r3, r3
 800106a:	b2db      	uxtb	r3, r3
 800106c:	e002      	b.n	8001074 <Motor_Set_PWM_Duty+0x30>
 800106e:	2300      	movs	r3, #0
 8001070:	e000      	b.n	8001074 <Motor_Set_PWM_Duty+0x30>
 8001072:	78fb      	ldrb	r3, [r7, #3]
 8001074:	687a      	ldr	r2, [r7, #4]
 8001076:	7053      	strb	r3, [r2, #1]

    float duty_percentage = duty / 255.0f;
 8001078:	78fb      	ldrb	r3, [r7, #3]
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff fcec 	bl	8000a58 <__aeabi_i2f>
 8001080:	4603      	mov	r3, r0
 8001082:	491e      	ldr	r1, [pc, #120]	@ (80010fc <Motor_Set_PWM_Duty+0xb8>)
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff fdef 	bl	8000c68 <__aeabi_fdiv>
 800108a:	4603      	mov	r3, r0
 800108c:	617b      	str	r3, [r7, #20]

    uint32_t tim_arr_val = __HAL_TIM_GET_AUTORELOAD(&htim_motor);
 800108e:	4b1c      	ldr	r3, [pc, #112]	@ (8001100 <Motor_Set_PWM_Duty+0xbc>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001094:	613b      	str	r3, [r7, #16]
    uint32_t tim_ccr_val = (uint32_t)(duty_percentage * tim_arr_val);
 8001096:	6938      	ldr	r0, [r7, #16]
 8001098:	f7ff fcda 	bl	8000a50 <__aeabi_ui2f>
 800109c:	4603      	mov	r3, r0
 800109e:	6979      	ldr	r1, [r7, #20]
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff fd2d 	bl	8000b00 <__aeabi_fmul>
 80010a6:	4603      	mov	r3, r0
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff feef 	bl	8000e8c <__aeabi_f2uiz>
 80010ae:	4603      	mov	r3, r0
 80010b0:	60fb      	str	r3, [r7, #12]

    __HAL_TIM_SET_COMPARE(&htim_motor, motor->pwm_channel, tim_ccr_val);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d104      	bne.n	80010c4 <Motor_Set_PWM_Duty+0x80>
 80010ba:	4b11      	ldr	r3, [pc, #68]	@ (8001100 <Motor_Set_PWM_Duty+0xbc>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	68fa      	ldr	r2, [r7, #12]
 80010c0:	635a      	str	r2, [r3, #52]	@ 0x34
 80010c2:	e015      	b.n	80010f0 <Motor_Set_PWM_Duty+0xac>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	2b04      	cmp	r3, #4
 80010ca:	d104      	bne.n	80010d6 <Motor_Set_PWM_Duty+0x92>
 80010cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001100 <Motor_Set_PWM_Duty+0xbc>)
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	6393      	str	r3, [r2, #56]	@ 0x38
 80010d4:	e00c      	b.n	80010f0 <Motor_Set_PWM_Duty+0xac>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	2b08      	cmp	r3, #8
 80010dc:	d104      	bne.n	80010e8 <Motor_Set_PWM_Duty+0xa4>
 80010de:	4b08      	ldr	r3, [pc, #32]	@ (8001100 <Motor_Set_PWM_Duty+0xbc>)
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80010e6:	e003      	b.n	80010f0 <Motor_Set_PWM_Duty+0xac>
 80010e8:	4b05      	ldr	r3, [pc, #20]	@ (8001100 <Motor_Set_PWM_Duty+0xbc>)
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	6413      	str	r3, [r2, #64]	@ 0x40

    return STATUS_OK;
 80010f0:	2300      	movs	r3, #0
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3718      	adds	r7, #24
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	437f0000 	.word	0x437f0000
 8001100:	20000088 	.word	0x20000088

08001104 <Motor_Start>:

status_t Motor_Start(Motor_t *motor)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
    Motor_SetDirection(motor, motor->direction);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	f993 3000 	ldrsb.w	r3, [r3]
 8001112:	4619      	mov	r1, r3
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f000 f815 	bl	8001144 <Motor_SetDirection>
    HAL_StatusTypeDef ret = HAL_TIM_PWM_Start(&htim_motor, motor->pwm_channel);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	4619      	mov	r1, r3
 8001120:	4807      	ldr	r0, [pc, #28]	@ (8001140 <Motor_Start+0x3c>)
 8001122:	f005 f9d7 	bl	80064d4 <HAL_TIM_PWM_Start>
 8001126:	4603      	mov	r3, r0
 8001128:	73fb      	strb	r3, [r7, #15]

    if (ret != HAL_OK) return STATUS_FAIL;
 800112a:	7bfb      	ldrb	r3, [r7, #15]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d002      	beq.n	8001136 <Motor_Start+0x32>
 8001130:	f04f 33ff 	mov.w	r3, #4294967295
 8001134:	e000      	b.n	8001138 <Motor_Start+0x34>

    return STATUS_OK;
 8001136:	2300      	movs	r3, #0
}
 8001138:	4618      	mov	r0, r3
 800113a:	3710      	adds	r7, #16
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	20000088 	.word	0x20000088

08001144 <Motor_SetDirection>:

    return STATUS_OK;
}

status_t Motor_SetDirection(Motor_t *motor, int8_t direction)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	460b      	mov	r3, r1
 800114e:	70fb      	strb	r3, [r7, #3]
    motor->direction = direction;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	78fa      	ldrb	r2, [r7, #3]
 8001154:	701a      	strb	r2, [r3, #0]
    if (direction == DIRECTION_FORWARD)
 8001156:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800115a:	2b01      	cmp	r3, #1
 800115c:	d107      	bne.n	800116e <Motor_SetDirection+0x2a>
        HAL_GPIO_WritePin(motor->direction_port, motor->direction_pin, GPIO_PIN_RESET);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6898      	ldr	r0, [r3, #8]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	899b      	ldrh	r3, [r3, #12]
 8001166:	2200      	movs	r2, #0
 8001168:	4619      	mov	r1, r3
 800116a:	f004 fce3 	bl	8005b34 <HAL_GPIO_WritePin>
    if (direction == DIRECTION_BACKWARD)
 800116e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001172:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001176:	d107      	bne.n	8001188 <Motor_SetDirection+0x44>
        HAL_GPIO_WritePin(motor->direction_port, motor->direction_pin, GPIO_PIN_SET);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6898      	ldr	r0, [r3, #8]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	899b      	ldrh	r3, [r3, #12]
 8001180:	2201      	movs	r2, #1
 8001182:	4619      	mov	r1, r3
 8001184:	f004 fcd6 	bl	8005b34 <HAL_GPIO_WritePin>

    return STATUS_OK;
 8001188:	2300      	movs	r3, #0
}
 800118a:	4618      	mov	r0, r3
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}

08001192 <Encoder_Init>:
#include "encoder.h"

Encoder_t* Encoder_Init(Encoder_Handle_t handle)
{
 8001192:	b580      	push	{r7, lr}
 8001194:	b084      	sub	sp, #16
 8001196:	af00      	add	r7, sp, #0
 8001198:	463b      	mov	r3, r7
 800119a:	e883 0003 	stmia.w	r3, {r0, r1}
    Encoder_t* object = calloc(1, sizeof(Encoder_t));
 800119e:	210c      	movs	r1, #12
 80011a0:	2001      	movs	r0, #1
 80011a2:	f007 f903 	bl	80083ac <calloc>
 80011a6:	4603      	mov	r3, r0
 80011a8:	60fb      	str	r3, [r7, #12]

    object->tick = 0;
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	2200      	movs	r2, #0
 80011ae:	801a      	strh	r2, [r3, #0]
    object->max_count = handle.max_count;
 80011b0:	683a      	ldr	r2, [r7, #0]
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	605a      	str	r2, [r3, #4]
    object->tick_read_channel = handle.tick_read_channel;
 80011b6:	88bb      	ldrh	r3, [r7, #4]
 80011b8:	461a      	mov	r2, r3
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	609a      	str	r2, [r3, #8]

    return object;
 80011be:	68fb      	ldr	r3, [r7, #12]
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3710      	adds	r7, #16
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}

080011c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011cc:	f003 fd2a 	bl	8004c24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011d0:	f000 f80f 	bl	80011f2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011d4:	f000 f9f0 	bl	80015b8 <MX_GPIO_Init>
  MX_DMA_Init();
 80011d8:	f000 f9c8 	bl	800156c <MX_DMA_Init>
  MX_TIM1_Init();
 80011dc:	f000 f844 	bl	8001268 <MX_TIM1_Init>
  MX_TIM8_Init();
 80011e0:	f000 f906 	bl	80013f0 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 80011e4:	f000 f998 	bl	8001518 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  setup();
 80011e8:	f002 f97a 	bl	80034e0 <setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  loop();
 80011ec:	f002 f998 	bl	8003520 <loop>
 80011f0:	e7fc      	b.n	80011ec <main+0x24>

080011f2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011f2:	b580      	push	{r7, lr}
 80011f4:	b090      	sub	sp, #64	@ 0x40
 80011f6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011f8:	f107 0318 	add.w	r3, r7, #24
 80011fc:	2228      	movs	r2, #40	@ 0x28
 80011fe:	2100      	movs	r1, #0
 8001200:	4618      	mov	r0, r3
 8001202:	f007 f9d3 	bl	80085ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001206:	1d3b      	adds	r3, r7, #4
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	609a      	str	r2, [r3, #8]
 8001210:	60da      	str	r2, [r3, #12]
 8001212:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001214:	2302      	movs	r3, #2
 8001216:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001218:	2301      	movs	r3, #1
 800121a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800121c:	2310      	movs	r3, #16
 800121e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001220:	2300      	movs	r3, #0
 8001222:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001224:	f107 0318 	add.w	r3, r7, #24
 8001228:	4618      	mov	r0, r3
 800122a:	f004 fc9b 	bl	8005b64 <HAL_RCC_OscConfig>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001234:	f000 fa18 	bl	8001668 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001238:	230f      	movs	r3, #15
 800123a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800123c:	2300      	movs	r3, #0
 800123e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001240:	2300      	movs	r3, #0
 8001242:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001244:	2300      	movs	r3, #0
 8001246:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001248:	2300      	movs	r3, #0
 800124a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800124c:	1d3b      	adds	r3, r7, #4
 800124e:	2100      	movs	r1, #0
 8001250:	4618      	mov	r0, r3
 8001252:	f004 ff09 	bl	8006068 <HAL_RCC_ClockConfig>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800125c:	f000 fa04 	bl	8001668 <Error_Handler>
  }
}
 8001260:	bf00      	nop
 8001262:	3740      	adds	r7, #64	@ 0x40
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}

08001268 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b096      	sub	sp, #88	@ 0x58
 800126c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800126e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	605a      	str	r2, [r3, #4]
 8001278:	609a      	str	r2, [r3, #8]
 800127a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800127c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001286:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800128a:	2200      	movs	r2, #0
 800128c:	601a      	str	r2, [r3, #0]
 800128e:	605a      	str	r2, [r3, #4]
 8001290:	609a      	str	r2, [r3, #8]
 8001292:	60da      	str	r2, [r3, #12]
 8001294:	611a      	str	r2, [r3, #16]
 8001296:	615a      	str	r2, [r3, #20]
 8001298:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800129a:	1d3b      	adds	r3, r7, #4
 800129c:	2220      	movs	r2, #32
 800129e:	2100      	movs	r1, #0
 80012a0:	4618      	mov	r0, r3
 80012a2:	f007 f983 	bl	80085ac <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim_motor.Instance = TIM1;
 80012a6:	4b50      	ldr	r3, [pc, #320]	@ (80013e8 <MX_TIM1_Init+0x180>)
 80012a8:	4a50      	ldr	r2, [pc, #320]	@ (80013ec <MX_TIM1_Init+0x184>)
 80012aa:	601a      	str	r2, [r3, #0]
  htim_motor.Init.Prescaler = 8-1;
 80012ac:	4b4e      	ldr	r3, [pc, #312]	@ (80013e8 <MX_TIM1_Init+0x180>)
 80012ae:	2207      	movs	r2, #7
 80012b0:	605a      	str	r2, [r3, #4]
  htim_motor.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012b2:	4b4d      	ldr	r3, [pc, #308]	@ (80013e8 <MX_TIM1_Init+0x180>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	609a      	str	r2, [r3, #8]
  htim_motor.Init.Period = 100-1;
 80012b8:	4b4b      	ldr	r3, [pc, #300]	@ (80013e8 <MX_TIM1_Init+0x180>)
 80012ba:	2263      	movs	r2, #99	@ 0x63
 80012bc:	60da      	str	r2, [r3, #12]
  htim_motor.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012be:	4b4a      	ldr	r3, [pc, #296]	@ (80013e8 <MX_TIM1_Init+0x180>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	611a      	str	r2, [r3, #16]
  htim_motor.Init.RepetitionCounter = 0;
 80012c4:	4b48      	ldr	r3, [pc, #288]	@ (80013e8 <MX_TIM1_Init+0x180>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	615a      	str	r2, [r3, #20]
  htim_motor.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ca:	4b47      	ldr	r3, [pc, #284]	@ (80013e8 <MX_TIM1_Init+0x180>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim_motor) != HAL_OK)
 80012d0:	4845      	ldr	r0, [pc, #276]	@ (80013e8 <MX_TIM1_Init+0x180>)
 80012d2:	f005 f857 	bl	8006384 <HAL_TIM_Base_Init>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80012dc:	f000 f9c4 	bl	8001668 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012e4:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim_motor, &sClockSourceConfig) != HAL_OK)
 80012e6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80012ea:	4619      	mov	r1, r3
 80012ec:	483e      	ldr	r0, [pc, #248]	@ (80013e8 <MX_TIM1_Init+0x180>)
 80012ee:	f005 fafb 	bl	80068e8 <HAL_TIM_ConfigClockSource>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80012f8:	f000 f9b6 	bl	8001668 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim_motor) != HAL_OK)
 80012fc:	483a      	ldr	r0, [pc, #232]	@ (80013e8 <MX_TIM1_Init+0x180>)
 80012fe:	f005 f890 	bl	8006422 <HAL_TIM_OC_Init>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001308:	f000 f9ae 	bl	8001668 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800130c:	2300      	movs	r3, #0
 800130e:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001310:	2300      	movs	r3, #0
 8001312:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim_motor, &sMasterConfig) != HAL_OK)
 8001314:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001318:	4619      	mov	r1, r3
 800131a:	4833      	ldr	r0, [pc, #204]	@ (80013e8 <MX_TIM1_Init+0x180>)
 800131c:	f005 ffa6 	bl	800726c <HAL_TIMEx_MasterConfigSynchronization>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8001326:	f000 f99f 	bl	8001668 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800132a:	2300      	movs	r3, #0
 800132c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800132e:	2300      	movs	r3, #0
 8001330:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001332:	2300      	movs	r3, #0
 8001334:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001336:	2300      	movs	r3, #0
 8001338:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800133a:	2300      	movs	r3, #0
 800133c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800133e:	2300      	movs	r3, #0
 8001340:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001342:	2300      	movs	r3, #0
 8001344:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim_motor, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001346:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800134a:	2200      	movs	r2, #0
 800134c:	4619      	mov	r1, r3
 800134e:	4826      	ldr	r0, [pc, #152]	@ (80013e8 <MX_TIM1_Init+0x180>)
 8001350:	f005 f9d2 	bl	80066f8 <HAL_TIM_OC_ConfigChannel>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800135a:	f000 f985 	bl	8001668 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim_motor, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800135e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001362:	2204      	movs	r2, #4
 8001364:	4619      	mov	r1, r3
 8001366:	4820      	ldr	r0, [pc, #128]	@ (80013e8 <MX_TIM1_Init+0x180>)
 8001368:	f005 f9c6 	bl	80066f8 <HAL_TIM_OC_ConfigChannel>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8001372:	f000 f979 	bl	8001668 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim_motor, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001376:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800137a:	2208      	movs	r2, #8
 800137c:	4619      	mov	r1, r3
 800137e:	481a      	ldr	r0, [pc, #104]	@ (80013e8 <MX_TIM1_Init+0x180>)
 8001380:	f005 f9ba 	bl	80066f8 <HAL_TIM_OC_ConfigChannel>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 800138a:	f000 f96d 	bl	8001668 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim_motor, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800138e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001392:	220c      	movs	r2, #12
 8001394:	4619      	mov	r1, r3
 8001396:	4814      	ldr	r0, [pc, #80]	@ (80013e8 <MX_TIM1_Init+0x180>)
 8001398:	f005 f9ae 	bl	80066f8 <HAL_TIM_OC_ConfigChannel>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_TIM1_Init+0x13e>
  {
    Error_Handler();
 80013a2:	f000 f961 	bl	8001668 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013a6:	2300      	movs	r3, #0
 80013a8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80013aa:	2300      	movs	r3, #0
 80013ac:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013ae:	2300      	movs	r3, #0
 80013b0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80013b2:	2300      	movs	r3, #0
 80013b4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80013b6:	2300      	movs	r3, #0
 80013b8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80013ba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013be:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013c0:	2300      	movs	r3, #0
 80013c2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim_motor, &sBreakDeadTimeConfig) != HAL_OK)
 80013c4:	1d3b      	adds	r3, r7, #4
 80013c6:	4619      	mov	r1, r3
 80013c8:	4807      	ldr	r0, [pc, #28]	@ (80013e8 <MX_TIM1_Init+0x180>)
 80013ca:	f005 ffbb 	bl	8007344 <HAL_TIMEx_ConfigBreakDeadTime>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <MX_TIM1_Init+0x170>
  {
    Error_Handler();
 80013d4:	f000 f948 	bl	8001668 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim_motor);
 80013d8:	4803      	ldr	r0, [pc, #12]	@ (80013e8 <MX_TIM1_Init+0x180>)
 80013da:	f003 fa5d 	bl	8004898 <HAL_TIM_MspPostInit>

}
 80013de:	bf00      	nop
 80013e0:	3758      	adds	r7, #88	@ 0x58
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	20000088 	.word	0x20000088
 80013ec:	40012c00 	.word	0x40012c00

080013f0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b08a      	sub	sp, #40	@ 0x28
 80013f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013f6:	f107 0318 	add.w	r3, r7, #24
 80013fa:	2200      	movs	r2, #0
 80013fc:	601a      	str	r2, [r3, #0]
 80013fe:	605a      	str	r2, [r3, #4]
 8001400:	609a      	str	r2, [r3, #8]
 8001402:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001404:	f107 0310 	add.w	r3, r7, #16
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800140e:	463b      	mov	r3, r7
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	605a      	str	r2, [r3, #4]
 8001416:	609a      	str	r2, [r3, #8]
 8001418:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim_encoder.Instance = TIM8;
 800141a:	4b3d      	ldr	r3, [pc, #244]	@ (8001510 <MX_TIM8_Init+0x120>)
 800141c:	4a3d      	ldr	r2, [pc, #244]	@ (8001514 <MX_TIM8_Init+0x124>)
 800141e:	601a      	str	r2, [r3, #0]
  htim_encoder.Init.Prescaler = 0;
 8001420:	4b3b      	ldr	r3, [pc, #236]	@ (8001510 <MX_TIM8_Init+0x120>)
 8001422:	2200      	movs	r2, #0
 8001424:	605a      	str	r2, [r3, #4]
  htim_encoder.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001426:	4b3a      	ldr	r3, [pc, #232]	@ (8001510 <MX_TIM8_Init+0x120>)
 8001428:	2200      	movs	r2, #0
 800142a:	609a      	str	r2, [r3, #8]
  htim_encoder.Init.Period = 65535;
 800142c:	4b38      	ldr	r3, [pc, #224]	@ (8001510 <MX_TIM8_Init+0x120>)
 800142e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001432:	60da      	str	r2, [r3, #12]
  htim_encoder.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001434:	4b36      	ldr	r3, [pc, #216]	@ (8001510 <MX_TIM8_Init+0x120>)
 8001436:	2200      	movs	r2, #0
 8001438:	611a      	str	r2, [r3, #16]
  htim_encoder.Init.RepetitionCounter = 0;
 800143a:	4b35      	ldr	r3, [pc, #212]	@ (8001510 <MX_TIM8_Init+0x120>)
 800143c:	2200      	movs	r2, #0
 800143e:	615a      	str	r2, [r3, #20]
  htim_encoder.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001440:	4b33      	ldr	r3, [pc, #204]	@ (8001510 <MX_TIM8_Init+0x120>)
 8001442:	2200      	movs	r2, #0
 8001444:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim_encoder) != HAL_OK)
 8001446:	4832      	ldr	r0, [pc, #200]	@ (8001510 <MX_TIM8_Init+0x120>)
 8001448:	f004 ff9c 	bl	8006384 <HAL_TIM_Base_Init>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_TIM8_Init+0x66>
  {
    Error_Handler();
 8001452:	f000 f909 	bl	8001668 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001456:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800145a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim_encoder, &sClockSourceConfig) != HAL_OK)
 800145c:	f107 0318 	add.w	r3, r7, #24
 8001460:	4619      	mov	r1, r3
 8001462:	482b      	ldr	r0, [pc, #172]	@ (8001510 <MX_TIM8_Init+0x120>)
 8001464:	f005 fa40 	bl	80068e8 <HAL_TIM_ConfigClockSource>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 800146e:	f000 f8fb 	bl	8001668 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim_encoder) != HAL_OK)
 8001472:	4827      	ldr	r0, [pc, #156]	@ (8001510 <MX_TIM8_Init+0x120>)
 8001474:	f005 f8e8 	bl	8006648 <HAL_TIM_IC_Init>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_TIM8_Init+0x92>
  {
    Error_Handler();
 800147e:	f000 f8f3 	bl	8001668 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001482:	2300      	movs	r3, #0
 8001484:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001486:	2300      	movs	r3, #0
 8001488:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim_encoder, &sMasterConfig) != HAL_OK)
 800148a:	f107 0310 	add.w	r3, r7, #16
 800148e:	4619      	mov	r1, r3
 8001490:	481f      	ldr	r0, [pc, #124]	@ (8001510 <MX_TIM8_Init+0x120>)
 8001492:	f005 feeb 	bl	800726c <HAL_TIMEx_MasterConfigSynchronization>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <MX_TIM8_Init+0xb0>
  {
    Error_Handler();
 800149c:	f000 f8e4 	bl	8001668 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80014a0:	2300      	movs	r3, #0
 80014a2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80014a4:	2301      	movs	r3, #1
 80014a6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80014a8:	2300      	movs	r3, #0
 80014aa:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 80014ac:	230f      	movs	r3, #15
 80014ae:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim_encoder, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80014b0:	463b      	mov	r3, r7
 80014b2:	2200      	movs	r2, #0
 80014b4:	4619      	mov	r1, r3
 80014b6:	4816      	ldr	r0, [pc, #88]	@ (8001510 <MX_TIM8_Init+0x120>)
 80014b8:	f005 f97a 	bl	80067b0 <HAL_TIM_IC_ConfigChannel>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 80014c2:	f000 f8d1 	bl	8001668 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim_encoder, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80014c6:	463b      	mov	r3, r7
 80014c8:	2204      	movs	r2, #4
 80014ca:	4619      	mov	r1, r3
 80014cc:	4810      	ldr	r0, [pc, #64]	@ (8001510 <MX_TIM8_Init+0x120>)
 80014ce:	f005 f96f 	bl	80067b0 <HAL_TIM_IC_ConfigChannel>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <MX_TIM8_Init+0xec>
  {
    Error_Handler();
 80014d8:	f000 f8c6 	bl	8001668 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim_encoder, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80014dc:	463b      	mov	r3, r7
 80014de:	2208      	movs	r2, #8
 80014e0:	4619      	mov	r1, r3
 80014e2:	480b      	ldr	r0, [pc, #44]	@ (8001510 <MX_TIM8_Init+0x120>)
 80014e4:	f005 f964 	bl	80067b0 <HAL_TIM_IC_ConfigChannel>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <MX_TIM8_Init+0x102>
  {
    Error_Handler();
 80014ee:	f000 f8bb 	bl	8001668 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim_encoder, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 80014f2:	463b      	mov	r3, r7
 80014f4:	220c      	movs	r2, #12
 80014f6:	4619      	mov	r1, r3
 80014f8:	4805      	ldr	r0, [pc, #20]	@ (8001510 <MX_TIM8_Init+0x120>)
 80014fa:	f005 f959 	bl	80067b0 <HAL_TIM_IC_ConfigChannel>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 8001504:	f000 f8b0 	bl	8001668 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001508:	bf00      	nop
 800150a:	3728      	adds	r7, #40	@ 0x28
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	200000d0 	.word	0x200000d0
 8001514:	40013400 	.word	0x40013400

08001518 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart_rosserial.Instance = USART1;
 800151c:	4b11      	ldr	r3, [pc, #68]	@ (8001564 <MX_USART1_UART_Init+0x4c>)
 800151e:	4a12      	ldr	r2, [pc, #72]	@ (8001568 <MX_USART1_UART_Init+0x50>)
 8001520:	601a      	str	r2, [r3, #0]
  huart_rosserial.Init.BaudRate = 57600;
 8001522:	4b10      	ldr	r3, [pc, #64]	@ (8001564 <MX_USART1_UART_Init+0x4c>)
 8001524:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 8001528:	605a      	str	r2, [r3, #4]
  huart_rosserial.Init.WordLength = UART_WORDLENGTH_8B;
 800152a:	4b0e      	ldr	r3, [pc, #56]	@ (8001564 <MX_USART1_UART_Init+0x4c>)
 800152c:	2200      	movs	r2, #0
 800152e:	609a      	str	r2, [r3, #8]
  huart_rosserial.Init.StopBits = UART_STOPBITS_1;
 8001530:	4b0c      	ldr	r3, [pc, #48]	@ (8001564 <MX_USART1_UART_Init+0x4c>)
 8001532:	2200      	movs	r2, #0
 8001534:	60da      	str	r2, [r3, #12]
  huart_rosserial.Init.Parity = UART_PARITY_NONE;
 8001536:	4b0b      	ldr	r3, [pc, #44]	@ (8001564 <MX_USART1_UART_Init+0x4c>)
 8001538:	2200      	movs	r2, #0
 800153a:	611a      	str	r2, [r3, #16]
  huart_rosserial.Init.Mode = UART_MODE_TX_RX;
 800153c:	4b09      	ldr	r3, [pc, #36]	@ (8001564 <MX_USART1_UART_Init+0x4c>)
 800153e:	220c      	movs	r2, #12
 8001540:	615a      	str	r2, [r3, #20]
  huart_rosserial.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001542:	4b08      	ldr	r3, [pc, #32]	@ (8001564 <MX_USART1_UART_Init+0x4c>)
 8001544:	2200      	movs	r2, #0
 8001546:	619a      	str	r2, [r3, #24]
  huart_rosserial.Init.OverSampling = UART_OVERSAMPLING_16;
 8001548:	4b06      	ldr	r3, [pc, #24]	@ (8001564 <MX_USART1_UART_Init+0x4c>)
 800154a:	2200      	movs	r2, #0
 800154c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart_rosserial) != HAL_OK)
 800154e:	4805      	ldr	r0, [pc, #20]	@ (8001564 <MX_USART1_UART_Init+0x4c>)
 8001550:	f005 ff49 	bl	80073e6 <HAL_UART_Init>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800155a:	f000 f885 	bl	8001668 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	20000118 	.word	0x20000118
 8001568:	40013800 	.word	0x40013800

0800156c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001572:	4b10      	ldr	r3, [pc, #64]	@ (80015b4 <MX_DMA_Init+0x48>)
 8001574:	695b      	ldr	r3, [r3, #20]
 8001576:	4a0f      	ldr	r2, [pc, #60]	@ (80015b4 <MX_DMA_Init+0x48>)
 8001578:	f043 0301 	orr.w	r3, r3, #1
 800157c:	6153      	str	r3, [r2, #20]
 800157e:	4b0d      	ldr	r3, [pc, #52]	@ (80015b4 <MX_DMA_Init+0x48>)
 8001580:	695b      	ldr	r3, [r3, #20]
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	607b      	str	r3, [r7, #4]
 8001588:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800158a:	2200      	movs	r2, #0
 800158c:	2100      	movs	r1, #0
 800158e:	200e      	movs	r0, #14
 8001590:	f003 fc81 	bl	8004e96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001594:	200e      	movs	r0, #14
 8001596:	f003 fc9a 	bl	8004ece <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800159a:	2200      	movs	r2, #0
 800159c:	2100      	movs	r1, #0
 800159e:	200f      	movs	r0, #15
 80015a0:	f003 fc79 	bl	8004e96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80015a4:	200f      	movs	r0, #15
 80015a6:	f003 fc92 	bl	8004ece <HAL_NVIC_EnableIRQ>

}
 80015aa:	bf00      	nop
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	40021000 	.word	0x40021000

080015b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b088      	sub	sp, #32
 80015bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015be:	f107 0310 	add.w	r3, r7, #16
 80015c2:	2200      	movs	r2, #0
 80015c4:	601a      	str	r2, [r3, #0]
 80015c6:	605a      	str	r2, [r3, #4]
 80015c8:	609a      	str	r2, [r3, #8]
 80015ca:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015cc:	4b24      	ldr	r3, [pc, #144]	@ (8001660 <MX_GPIO_Init+0xa8>)
 80015ce:	699b      	ldr	r3, [r3, #24]
 80015d0:	4a23      	ldr	r2, [pc, #140]	@ (8001660 <MX_GPIO_Init+0xa8>)
 80015d2:	f043 0310 	orr.w	r3, r3, #16
 80015d6:	6193      	str	r3, [r2, #24]
 80015d8:	4b21      	ldr	r3, [pc, #132]	@ (8001660 <MX_GPIO_Init+0xa8>)
 80015da:	699b      	ldr	r3, [r3, #24]
 80015dc:	f003 0310 	and.w	r3, r3, #16
 80015e0:	60fb      	str	r3, [r7, #12]
 80015e2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015e4:	4b1e      	ldr	r3, [pc, #120]	@ (8001660 <MX_GPIO_Init+0xa8>)
 80015e6:	699b      	ldr	r3, [r3, #24]
 80015e8:	4a1d      	ldr	r2, [pc, #116]	@ (8001660 <MX_GPIO_Init+0xa8>)
 80015ea:	f043 0320 	orr.w	r3, r3, #32
 80015ee:	6193      	str	r3, [r2, #24]
 80015f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001660 <MX_GPIO_Init+0xa8>)
 80015f2:	699b      	ldr	r3, [r3, #24]
 80015f4:	f003 0320 	and.w	r3, r3, #32
 80015f8:	60bb      	str	r3, [r7, #8]
 80015fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015fc:	4b18      	ldr	r3, [pc, #96]	@ (8001660 <MX_GPIO_Init+0xa8>)
 80015fe:	699b      	ldr	r3, [r3, #24]
 8001600:	4a17      	ldr	r2, [pc, #92]	@ (8001660 <MX_GPIO_Init+0xa8>)
 8001602:	f043 0304 	orr.w	r3, r3, #4
 8001606:	6193      	str	r3, [r2, #24]
 8001608:	4b15      	ldr	r3, [pc, #84]	@ (8001660 <MX_GPIO_Init+0xa8>)
 800160a:	699b      	ldr	r3, [r3, #24]
 800160c:	f003 0304 	and.w	r3, r3, #4
 8001610:	607b      	str	r3, [r7, #4]
 8001612:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001614:	4b12      	ldr	r3, [pc, #72]	@ (8001660 <MX_GPIO_Init+0xa8>)
 8001616:	699b      	ldr	r3, [r3, #24]
 8001618:	4a11      	ldr	r2, [pc, #68]	@ (8001660 <MX_GPIO_Init+0xa8>)
 800161a:	f043 0308 	orr.w	r3, r3, #8
 800161e:	6193      	str	r3, [r2, #24]
 8001620:	4b0f      	ldr	r3, [pc, #60]	@ (8001660 <MX_GPIO_Init+0xa8>)
 8001622:	699b      	ldr	r3, [r3, #24]
 8001624:	f003 0308 	and.w	r3, r3, #8
 8001628:	603b      	str	r3, [r7, #0]
 800162a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Pin|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 800162c:	2200      	movs	r2, #0
 800162e:	f242 010f 	movw	r1, #8207	@ 0x200f
 8001632:	480c      	ldr	r0, [pc, #48]	@ (8001664 <MX_GPIO_Init+0xac>)
 8001634:	f004 fa7e 	bl	8005b34 <HAL_GPIO_WritePin>
                          |GPIO_PIN_3, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_Pin PC0 PC1 PC2
                           PC3 */
  GPIO_InitStruct.Pin = LED_Pin|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 8001638:	f242 030f 	movw	r3, #8207	@ 0x200f
 800163c:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800163e:	2301      	movs	r3, #1
 8001640:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001642:	2300      	movs	r3, #0
 8001644:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001646:	2302      	movs	r3, #2
 8001648:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800164a:	f107 0310 	add.w	r3, r7, #16
 800164e:	4619      	mov	r1, r3
 8001650:	4804      	ldr	r0, [pc, #16]	@ (8001664 <MX_GPIO_Init+0xac>)
 8001652:	f004 f8db 	bl	800580c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001656:	bf00      	nop
 8001658:	3720      	adds	r7, #32
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40021000 	.word	0x40021000
 8001664:	40011000 	.word	0x40011000

08001668 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800166c:	b672      	cpsid	i
}
 800166e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001670:	bf00      	nop
 8001672:	e7fd      	b.n	8001670 <Error_Handler+0x8>

08001674 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2200      	movs	r2, #0
 8001680:	601a      	str	r2, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2200      	movs	r2, #0
 8001686:	605a      	str	r2, [r3, #4]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	4618      	mov	r0, r3
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	bc80      	pop	{r7}
 8001692:	4770      	bx	lr

08001694 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	4a04      	ldr	r2, [pc, #16]	@ (80016b0 <_ZN3ros3MsgC1Ev+0x1c>)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	601a      	str	r2, [r3, #0]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4618      	mov	r0, r3
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bc80      	pop	{r7}
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	08008a38 	.word	0x08008a38

080016b4 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
      data()
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	4618      	mov	r0, r3
 80016c0:	f7ff ffe8 	bl	8001694 <_ZN3ros3MsgC1Ev>
 80016c4:	4a06      	ldr	r2, [pc, #24]	@ (80016e0 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	601a      	str	r2, [r3, #0]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	3304      	adds	r3, #4
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7ff ffd0 	bl	8001674 <_ZN3ros4TimeC1Ev>
    {
    }
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	4618      	mov	r0, r3
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	08008a20 	.word	0x08008a20

080016e4 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80016e4:	b480      	push	{r7}
 80016e6:	b085      	sub	sp, #20
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80016ee:	2300      	movs	r3, #0
 80016f0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6859      	ldr	r1, [r3, #4]
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	683a      	ldr	r2, [r7, #0]
 80016fa:	4413      	add	r3, r2
 80016fc:	b2ca      	uxtb	r2, r1
 80016fe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	0a19      	lsrs	r1, r3, #8
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	3301      	adds	r3, #1
 800170a:	683a      	ldr	r2, [r7, #0]
 800170c:	4413      	add	r3, r2
 800170e:	b2ca      	uxtb	r2, r1
 8001710:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	0c19      	lsrs	r1, r3, #16
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	3302      	adds	r3, #2
 800171c:	683a      	ldr	r2, [r7, #0]
 800171e:	4413      	add	r3, r2
 8001720:	b2ca      	uxtb	r2, r1
 8001722:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	0e19      	lsrs	r1, r3, #24
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	3303      	adds	r3, #3
 800172e:	683a      	ldr	r2, [r7, #0]
 8001730:	4413      	add	r3, r2
 8001732:	b2ca      	uxtb	r2, r1
 8001734:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	3304      	adds	r3, #4
 800173a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6899      	ldr	r1, [r3, #8]
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	683a      	ldr	r2, [r7, #0]
 8001744:	4413      	add	r3, r2
 8001746:	b2ca      	uxtb	r2, r1
 8001748:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	0a19      	lsrs	r1, r3, #8
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	3301      	adds	r3, #1
 8001754:	683a      	ldr	r2, [r7, #0]
 8001756:	4413      	add	r3, r2
 8001758:	b2ca      	uxtb	r2, r1
 800175a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	0c19      	lsrs	r1, r3, #16
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	3302      	adds	r3, #2
 8001766:	683a      	ldr	r2, [r7, #0]
 8001768:	4413      	add	r3, r2
 800176a:	b2ca      	uxtb	r2, r1
 800176c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	0e19      	lsrs	r1, r3, #24
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	3303      	adds	r3, #3
 8001778:	683a      	ldr	r2, [r7, #0]
 800177a:	4413      	add	r3, r2
 800177c:	b2ca      	uxtb	r2, r1
 800177e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	3304      	adds	r3, #4
 8001784:	60fb      	str	r3, [r7, #12]
      return offset;
 8001786:	68fb      	ldr	r3, [r7, #12]
    }
 8001788:	4618      	mov	r0, r3
 800178a:	3714      	adds	r7, #20
 800178c:	46bd      	mov	sp, r7
 800178e:	bc80      	pop	{r7}
 8001790:	4770      	bx	lr

08001792 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001792:	b480      	push	{r7}
 8001794:	b085      	sub	sp, #20
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
 800179a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800179c:	2300      	movs	r3, #0
 800179e:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	683a      	ldr	r2, [r7, #0]
 80017a4:	4413      	add	r3, r2
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	461a      	mov	r2, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	685a      	ldr	r2, [r3, #4]
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	3301      	adds	r3, #1
 80017b6:	6839      	ldr	r1, [r7, #0]
 80017b8:	440b      	add	r3, r1
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	021b      	lsls	r3, r3, #8
 80017be:	431a      	orrs	r2, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	685a      	ldr	r2, [r3, #4]
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	3302      	adds	r3, #2
 80017cc:	6839      	ldr	r1, [r7, #0]
 80017ce:	440b      	add	r3, r1
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	041b      	lsls	r3, r3, #16
 80017d4:	431a      	orrs	r2, r3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685a      	ldr	r2, [r3, #4]
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	3303      	adds	r3, #3
 80017e2:	6839      	ldr	r1, [r7, #0]
 80017e4:	440b      	add	r3, r1
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	061b      	lsls	r3, r3, #24
 80017ea:	431a      	orrs	r2, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	3304      	adds	r3, #4
 80017f4:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	683a      	ldr	r2, [r7, #0]
 80017fa:	4413      	add	r3, r2
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	461a      	mov	r2, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	689a      	ldr	r2, [r3, #8]
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	3301      	adds	r3, #1
 800180c:	6839      	ldr	r1, [r7, #0]
 800180e:	440b      	add	r3, r1
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	021b      	lsls	r3, r3, #8
 8001814:	431a      	orrs	r2, r3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	689a      	ldr	r2, [r3, #8]
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	3302      	adds	r3, #2
 8001822:	6839      	ldr	r1, [r7, #0]
 8001824:	440b      	add	r3, r1
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	041b      	lsls	r3, r3, #16
 800182a:	431a      	orrs	r2, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	689a      	ldr	r2, [r3, #8]
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	3303      	adds	r3, #3
 8001838:	6839      	ldr	r1, [r7, #0]
 800183a:	440b      	add	r3, r1
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	061b      	lsls	r3, r3, #24
 8001840:	431a      	orrs	r2, r3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	3304      	adds	r3, #4
 800184a:	60fb      	str	r3, [r7, #12]
     return offset;
 800184c:	68fb      	ldr	r3, [r7, #12]
    }
 800184e:	4618      	mov	r0, r3
 8001850:	3714      	adds	r7, #20
 8001852:	46bd      	mov	sp, r7
 8001854:	bc80      	pop	{r7}
 8001856:	4770      	bx	lr

08001858 <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	4b02      	ldr	r3, [pc, #8]	@ (800186c <_ZN8std_msgs4Time7getTypeEv+0x14>)
 8001862:	4618      	mov	r0, r3
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	bc80      	pop	{r7}
 800186a:	4770      	bx	lr
 800186c:	08008708 	.word	0x08008708

08001870 <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	4b02      	ldr	r3, [pc, #8]	@ (8001884 <_ZN8std_msgs4Time6getMD5Ev+0x14>)
 800187a:	4618      	mov	r0, r3
 800187c:	370c      	adds	r7, #12
 800187e:	46bd      	mov	sp, r7
 8001880:	bc80      	pop	{r7}
 8001882:	4770      	bx	lr
 8001884:	08008718 	.word	0x08008718

08001888 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	4618      	mov	r0, r3
 8001894:	f7ff fefe 	bl	8001694 <_ZN3ros3MsgC1Ev>
 8001898:	4a0b      	ldr	r2, [pc, #44]	@ (80018c8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	601a      	str	r2, [r3, #0]
      topic_id(0),
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2200      	movs	r2, #0
 80018a2:	809a      	strh	r2, [r3, #4]
      topic_name(""),
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	4a09      	ldr	r2, [pc, #36]	@ (80018cc <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80018a8:	609a      	str	r2, [r3, #8]
      message_type(""),
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4a07      	ldr	r2, [pc, #28]	@ (80018cc <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80018ae:	60da      	str	r2, [r3, #12]
      md5sum(""),
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	4a06      	ldr	r2, [pc, #24]	@ (80018cc <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80018b4:	611a      	str	r2, [r3, #16]
      buffer_size(0)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2200      	movs	r2, #0
 80018ba:	615a      	str	r2, [r3, #20]
    {
    }
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	4618      	mov	r0, r3
 80018c0:	3708      	adds	r7, #8
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	08008a08 	.word	0x08008a08
 80018cc:	0800873c 	.word	0x0800873c

080018d0 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b088      	sub	sp, #32
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80018da:	2300      	movs	r3, #0
 80018dc:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	8899      	ldrh	r1, [r3, #4]
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	683a      	ldr	r2, [r7, #0]
 80018e6:	4413      	add	r3, r2
 80018e8:	b2ca      	uxtb	r2, r1
 80018ea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	889b      	ldrh	r3, [r3, #4]
 80018f0:	0a1b      	lsrs	r3, r3, #8
 80018f2:	b299      	uxth	r1, r3
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	3301      	adds	r3, #1
 80018f8:	683a      	ldr	r2, [r7, #0]
 80018fa:	4413      	add	r3, r2
 80018fc:	b2ca      	uxtb	r2, r1
 80018fe:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	3302      	adds	r3, #2
 8001904:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	4618      	mov	r0, r3
 800190c:	f7fe fc8c 	bl	8000228 <strlen>
 8001910:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	683a      	ldr	r2, [r7, #0]
 8001916:	4413      	add	r3, r2
 8001918:	69b9      	ldr	r1, [r7, #24]
 800191a:	4618      	mov	r0, r3
 800191c:	f001 fff2 	bl	8003904 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	3304      	adds	r3, #4
 8001924:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	683a      	ldr	r2, [r7, #0]
 800192a:	18d0      	adds	r0, r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	4619      	mov	r1, r3
 8001934:	f006 fe7e 	bl	8008634 <memcpy>
      offset += length_topic_name;
 8001938:	69fa      	ldr	r2, [r7, #28]
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	4413      	add	r3, r2
 800193e:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	4618      	mov	r0, r3
 8001946:	f7fe fc6f 	bl	8000228 <strlen>
 800194a:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	683a      	ldr	r2, [r7, #0]
 8001950:	4413      	add	r3, r2
 8001952:	6979      	ldr	r1, [r7, #20]
 8001954:	4618      	mov	r0, r3
 8001956:	f001 ffd5 	bl	8003904 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	3304      	adds	r3, #4
 800195e:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	683a      	ldr	r2, [r7, #0]
 8001964:	18d0      	adds	r0, r2, r3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	68db      	ldr	r3, [r3, #12]
 800196a:	697a      	ldr	r2, [r7, #20]
 800196c:	4619      	mov	r1, r3
 800196e:	f006 fe61 	bl	8008634 <memcpy>
      offset += length_message_type;
 8001972:	69fa      	ldr	r2, [r7, #28]
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	4413      	add	r3, r2
 8001978:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	691b      	ldr	r3, [r3, #16]
 800197e:	4618      	mov	r0, r3
 8001980:	f7fe fc52 	bl	8000228 <strlen>
 8001984:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	683a      	ldr	r2, [r7, #0]
 800198a:	4413      	add	r3, r2
 800198c:	6939      	ldr	r1, [r7, #16]
 800198e:	4618      	mov	r0, r3
 8001990:	f001 ffb8 	bl	8003904 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	3304      	adds	r3, #4
 8001998:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	683a      	ldr	r2, [r7, #0]
 800199e:	18d0      	adds	r0, r2, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	691b      	ldr	r3, [r3, #16]
 80019a4:	693a      	ldr	r2, [r7, #16]
 80019a6:	4619      	mov	r1, r3
 80019a8:	f006 fe44 	bl	8008634 <memcpy>
      offset += length_md5sum;
 80019ac:	69fa      	ldr	r2, [r7, #28]
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	4413      	add	r3, r2
 80019b2:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	695b      	ldr	r3, [r3, #20]
 80019b8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 80019ba:	68f9      	ldr	r1, [r7, #12]
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	683a      	ldr	r2, [r7, #0]
 80019c0:	4413      	add	r3, r2
 80019c2:	b2ca      	uxtb	r2, r1
 80019c4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	0a19      	lsrs	r1, r3, #8
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	3301      	adds	r3, #1
 80019ce:	683a      	ldr	r2, [r7, #0]
 80019d0:	4413      	add	r3, r2
 80019d2:	b2ca      	uxtb	r2, r1
 80019d4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	0c19      	lsrs	r1, r3, #16
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	3302      	adds	r3, #2
 80019de:	683a      	ldr	r2, [r7, #0]
 80019e0:	4413      	add	r3, r2
 80019e2:	b2ca      	uxtb	r2, r1
 80019e4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	0e19      	lsrs	r1, r3, #24
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	3303      	adds	r3, #3
 80019ee:	683a      	ldr	r2, [r7, #0]
 80019f0:	4413      	add	r3, r2
 80019f2:	b2ca      	uxtb	r2, r1
 80019f4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	3304      	adds	r3, #4
 80019fa:	61fb      	str	r3, [r7, #28]
      return offset;
 80019fc:	69fb      	ldr	r3, [r7, #28]
    }
 80019fe:	4618      	mov	r0, r3
 8001a00:	3720      	adds	r7, #32
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b08a      	sub	sp, #40	@ 0x28
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
 8001a0e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001a10:	2300      	movs	r3, #0
 8001a12:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8001a14:	69bb      	ldr	r3, [r7, #24]
 8001a16:	683a      	ldr	r2, [r7, #0]
 8001a18:	4413      	add	r3, r2
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	889b      	ldrh	r3, [r3, #4]
 8001a26:	b21a      	sxth	r2, r3
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	6839      	ldr	r1, [r7, #0]
 8001a2e:	440b      	add	r3, r1
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	021b      	lsls	r3, r3, #8
 8001a34:	b21b      	sxth	r3, r3
 8001a36:	4313      	orrs	r3, r2
 8001a38:	b21b      	sxth	r3, r3
 8001a3a:	b29a      	uxth	r2, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	3302      	adds	r3, #2
 8001a44:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	683a      	ldr	r2, [r7, #0]
 8001a4a:	441a      	add	r2, r3
 8001a4c:	f107 0314 	add.w	r3, r7, #20
 8001a50:	4611      	mov	r1, r2
 8001a52:	4618      	mov	r0, r3
 8001a54:	f001 ff74 	bl	8003940 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001a58:	69bb      	ldr	r3, [r7, #24]
 8001a5a:	3304      	adds	r3, #4
 8001a5c:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a62:	e00b      	b.n	8001a7c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x76>
          inbuffer[k-1]=inbuffer[k];
 8001a64:	683a      	ldr	r2, [r7, #0]
 8001a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a68:	441a      	add	r2, r3
 8001a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a6c:	3b01      	subs	r3, #1
 8001a6e:	6839      	ldr	r1, [r7, #0]
 8001a70:	440b      	add	r3, r1
 8001a72:	7812      	ldrb	r2, [r2, #0]
 8001a74:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a78:	3301      	adds	r3, #1
 8001a7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	4413      	add	r3, r2
 8001a82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d3ed      	bcc.n	8001a64 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5e>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	3b01      	subs	r3, #1
 8001a90:	683a      	ldr	r2, [r7, #0]
 8001a92:	4413      	add	r3, r2
 8001a94:	2200      	movs	r2, #0
 8001a96:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8001a98:	69bb      	ldr	r3, [r7, #24]
 8001a9a:	3b01      	subs	r3, #1
 8001a9c:	683a      	ldr	r2, [r7, #0]
 8001a9e:	441a      	add	r2, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	4413      	add	r3, r2
 8001aaa:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	683a      	ldr	r2, [r7, #0]
 8001ab0:	441a      	add	r2, r3
 8001ab2:	f107 0310 	add.w	r3, r7, #16
 8001ab6:	4611      	mov	r1, r2
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f001 ff41 	bl	8003940 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001abe:	69bb      	ldr	r3, [r7, #24]
 8001ac0:	3304      	adds	r3, #4
 8001ac2:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001ac4:	69bb      	ldr	r3, [r7, #24]
 8001ac6:	623b      	str	r3, [r7, #32]
 8001ac8:	e00b      	b.n	8001ae2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xdc>
          inbuffer[k-1]=inbuffer[k];
 8001aca:	683a      	ldr	r2, [r7, #0]
 8001acc:	6a3b      	ldr	r3, [r7, #32]
 8001ace:	441a      	add	r2, r3
 8001ad0:	6a3b      	ldr	r3, [r7, #32]
 8001ad2:	3b01      	subs	r3, #1
 8001ad4:	6839      	ldr	r1, [r7, #0]
 8001ad6:	440b      	add	r3, r1
 8001ad8:	7812      	ldrb	r2, [r2, #0]
 8001ada:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001adc:	6a3b      	ldr	r3, [r7, #32]
 8001ade:	3301      	adds	r3, #1
 8001ae0:	623b      	str	r3, [r7, #32]
 8001ae2:	69ba      	ldr	r2, [r7, #24]
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	4413      	add	r3, r2
 8001ae8:	6a3a      	ldr	r2, [r7, #32]
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d3ed      	bcc.n	8001aca <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc4>
      }
      inbuffer[offset+length_message_type-1]=0;
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	4413      	add	r3, r2
 8001af4:	3b01      	subs	r3, #1
 8001af6:	683a      	ldr	r2, [r7, #0]
 8001af8:	4413      	add	r3, r2
 8001afa:	2200      	movs	r2, #0
 8001afc:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8001afe:	69bb      	ldr	r3, [r7, #24]
 8001b00:	3b01      	subs	r3, #1
 8001b02:	683a      	ldr	r2, [r7, #0]
 8001b04:	441a      	add	r2, r3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8001b0a:	69ba      	ldr	r2, [r7, #24]
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	4413      	add	r3, r2
 8001b10:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8001b12:	69bb      	ldr	r3, [r7, #24]
 8001b14:	683a      	ldr	r2, [r7, #0]
 8001b16:	441a      	add	r2, r3
 8001b18:	f107 030c 	add.w	r3, r7, #12
 8001b1c:	4611      	mov	r1, r2
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f001 ff0e 	bl	8003940 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001b24:	69bb      	ldr	r3, [r7, #24]
 8001b26:	3304      	adds	r3, #4
 8001b28:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	61fb      	str	r3, [r7, #28]
 8001b2e:	e00b      	b.n	8001b48 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x142>
          inbuffer[k-1]=inbuffer[k];
 8001b30:	683a      	ldr	r2, [r7, #0]
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	441a      	add	r2, r3
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	3b01      	subs	r3, #1
 8001b3a:	6839      	ldr	r1, [r7, #0]
 8001b3c:	440b      	add	r3, r1
 8001b3e:	7812      	ldrb	r2, [r2, #0]
 8001b40:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	3301      	adds	r3, #1
 8001b46:	61fb      	str	r3, [r7, #28]
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	4413      	add	r3, r2
 8001b4e:	69fa      	ldr	r2, [r7, #28]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d3ed      	bcc.n	8001b30 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x12a>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	4413      	add	r3, r2
 8001b5a:	3b01      	subs	r3, #1
 8001b5c:	683a      	ldr	r2, [r7, #0]
 8001b5e:	4413      	add	r3, r2
 8001b60:	2200      	movs	r2, #0
 8001b62:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	3b01      	subs	r3, #1
 8001b68:	683a      	ldr	r2, [r7, #0]
 8001b6a:	441a      	add	r2, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	4413      	add	r3, r2
 8001b76:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	6839      	ldr	r1, [r7, #0]
 8001b82:	440a      	add	r2, r1
 8001b84:	7812      	ldrb	r2, [r2, #0]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001b8a:	68ba      	ldr	r2, [r7, #8]
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	3301      	adds	r3, #1
 8001b90:	6839      	ldr	r1, [r7, #0]
 8001b92:	440b      	add	r3, r1
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	021b      	lsls	r3, r3, #8
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001b9c:	68ba      	ldr	r2, [r7, #8]
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	3302      	adds	r3, #2
 8001ba2:	6839      	ldr	r1, [r7, #0]
 8001ba4:	440b      	add	r3, r1
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	041b      	lsls	r3, r3, #16
 8001baa:	4313      	orrs	r3, r2
 8001bac:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001bae:	68ba      	ldr	r2, [r7, #8]
 8001bb0:	69bb      	ldr	r3, [r7, #24]
 8001bb2:	3303      	adds	r3, #3
 8001bb4:	6839      	ldr	r1, [r7, #0]
 8001bb6:	440b      	add	r3, r1
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	061b      	lsls	r3, r3, #24
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8001bc0:	68ba      	ldr	r2, [r7, #8]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	3304      	adds	r3, #4
 8001bca:	61bb      	str	r3, [r7, #24]
     return offset;
 8001bcc:	69bb      	ldr	r3, [r7, #24]
    }
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3728      	adds	r7, #40	@ 0x28
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
	...

08001bd8 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	4b02      	ldr	r3, [pc, #8]	@ (8001bec <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x14>)
 8001be2:	4618      	mov	r0, r3
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bc80      	pop	{r7}
 8001bea:	4770      	bx	lr
 8001bec:	08008740 	.word	0x08008740

08001bf0 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	4b02      	ldr	r3, [pc, #8]	@ (8001c04 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x14>)
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bc80      	pop	{r7}
 8001c02:	4770      	bx	lr
 8001c04:	0800875c 	.word	0x0800875c

08001c08 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7ff fd3e 	bl	8001694 <_ZN3ros3MsgC1Ev>
 8001c18:	4a06      	ldr	r2, [pc, #24]	@ (8001c34 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	601a      	str	r2, [r3, #0]
      level(0),
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2200      	movs	r2, #0
 8001c22:	711a      	strb	r2, [r3, #4]
      msg("")
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	4a04      	ldr	r2, [pc, #16]	@ (8001c38 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8001c28:	609a      	str	r2, [r3, #8]
    {
    }
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3708      	adds	r7, #8
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	080089f0 	.word	0x080089f0
 8001c38:	0800873c 	.word	0x0800873c

08001c3c <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001c46:	2300      	movs	r3, #0
 8001c48:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	683a      	ldr	r2, [r7, #0]
 8001c4e:	4413      	add	r3, r2
 8001c50:	687a      	ldr	r2, [r7, #4]
 8001c52:	7912      	ldrb	r2, [r2, #4]
 8001c54:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	3301      	adds	r3, #1
 8001c5a:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7fe fae1 	bl	8000228 <strlen>
 8001c66:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	683a      	ldr	r2, [r7, #0]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	68b9      	ldr	r1, [r7, #8]
 8001c70:	4618      	mov	r0, r3
 8001c72:	f001 fe47 	bl	8003904 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	3304      	adds	r3, #4
 8001c7a:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	683a      	ldr	r2, [r7, #0]
 8001c80:	18d0      	adds	r0, r2, r3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	68ba      	ldr	r2, [r7, #8]
 8001c88:	4619      	mov	r1, r3
 8001c8a:	f006 fcd3 	bl	8008634 <memcpy>
      offset += length_msg;
 8001c8e:	68fa      	ldr	r2, [r7, #12]
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	4413      	add	r3, r2
 8001c94:	60fb      	str	r3, [r7, #12]
      return offset;
 8001c96:	68fb      	ldr	r3, [r7, #12]
    }
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3710      	adds	r7, #16
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b086      	sub	sp, #24
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001caa:	2300      	movs	r3, #0
 8001cac:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	683a      	ldr	r2, [r7, #0]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	781a      	ldrb	r2, [r3, #0]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	683a      	ldr	r2, [r7, #0]
 8001cc4:	441a      	add	r2, r3
 8001cc6:	f107 030c 	add.w	r3, r7, #12
 8001cca:	4611      	mov	r1, r2
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f001 fe37 	bl	8003940 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	3304      	adds	r3, #4
 8001cd6:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	617b      	str	r3, [r7, #20]
 8001cdc:	e00b      	b.n	8001cf6 <_ZN14rosserial_msgs3Log11deserializeEPh+0x56>
          inbuffer[k-1]=inbuffer[k];
 8001cde:	683a      	ldr	r2, [r7, #0]
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	441a      	add	r2, r3
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	3b01      	subs	r3, #1
 8001ce8:	6839      	ldr	r1, [r7, #0]
 8001cea:	440b      	add	r3, r1
 8001cec:	7812      	ldrb	r2, [r2, #0]
 8001cee:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	617b      	str	r3, [r7, #20]
 8001cf6:	693a      	ldr	r2, [r7, #16]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	4413      	add	r3, r2
 8001cfc:	697a      	ldr	r2, [r7, #20]
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d3ed      	bcc.n	8001cde <_ZN14rosserial_msgs3Log11deserializeEPh+0x3e>
      }
      inbuffer[offset+length_msg-1]=0;
 8001d02:	693a      	ldr	r2, [r7, #16]
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	4413      	add	r3, r2
 8001d08:	3b01      	subs	r3, #1
 8001d0a:	683a      	ldr	r2, [r7, #0]
 8001d0c:	4413      	add	r3, r2
 8001d0e:	2200      	movs	r2, #0
 8001d10:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	3b01      	subs	r3, #1
 8001d16:	683a      	ldr	r2, [r7, #0]
 8001d18:	441a      	add	r2, r3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8001d1e:	693a      	ldr	r2, [r7, #16]
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	4413      	add	r3, r2
 8001d24:	613b      	str	r3, [r7, #16]
     return offset;
 8001d26:	693b      	ldr	r3, [r7, #16]
    }
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3718      	adds	r7, #24
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	4b02      	ldr	r3, [pc, #8]	@ (8001d44 <_ZN14rosserial_msgs3Log7getTypeEv+0x14>)
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bc80      	pop	{r7}
 8001d42:	4770      	bx	lr
 8001d44:	08008780 	.word	0x08008780

08001d48 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	4b02      	ldr	r3, [pc, #8]	@ (8001d5c <_ZN14rosserial_msgs3Log6getMD5Ev+0x14>)
 8001d52:	4618      	mov	r0, r3
 8001d54:	370c      	adds	r7, #12
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bc80      	pop	{r7}
 8001d5a:	4770      	bx	lr
 8001d5c:	08008794 	.word	0x08008794

08001d60 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7ff fc92 	bl	8001694 <_ZN3ros3MsgC1Ev>
 8001d70:	4a11      	ldr	r2, [pc, #68]	@ (8001db8 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	601a      	str	r2, [r3, #0]
      ints_length(0), st_ints(), ints(nullptr),
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	605a      	str	r2, [r3, #4]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	609a      	str	r2, [r3, #8]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	60da      	str	r2, [r3, #12]
      floats_length(0), st_floats(), floats(nullptr),
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	611a      	str	r2, [r3, #16]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	f04f 0200 	mov.w	r2, #0
 8001d94:	615a      	str	r2, [r3, #20]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	619a      	str	r2, [r3, #24]
      strings_length(0), st_strings(), strings(nullptr)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	61da      	str	r2, [r3, #28]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	621a      	str	r2, [r3, #32]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2200      	movs	r2, #0
 8001dac:	625a      	str	r2, [r3, #36]	@ 0x24
    {
    }
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4618      	mov	r0, r3
 8001db2:	3708      	adds	r7, #8
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	080089d8 	.word	0x080089d8

08001dbc <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b08a      	sub	sp, #40	@ 0x28
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	627b      	str	r3, [r7, #36]	@ 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6859      	ldr	r1, [r3, #4]
 8001dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dd0:	683a      	ldr	r2, [r7, #0]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	b2ca      	uxtb	r2, r1
 8001dd6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	0a19      	lsrs	r1, r3, #8
 8001dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001de0:	3301      	adds	r3, #1
 8001de2:	683a      	ldr	r2, [r7, #0]
 8001de4:	4413      	add	r3, r2
 8001de6:	b2ca      	uxtb	r2, r1
 8001de8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	0c19      	lsrs	r1, r3, #16
 8001df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001df2:	3302      	adds	r3, #2
 8001df4:	683a      	ldr	r2, [r7, #0]
 8001df6:	4413      	add	r3, r2
 8001df8:	b2ca      	uxtb	r2, r1
 8001dfa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	0e19      	lsrs	r1, r3, #24
 8001e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e04:	3303      	adds	r3, #3
 8001e06:	683a      	ldr	r2, [r7, #0]
 8001e08:	4413      	add	r3, r2
 8001e0a:	b2ca      	uxtb	r2, r1
 8001e0c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8001e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e10:	3304      	adds	r3, #4
 8001e12:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001e14:	2300      	movs	r3, #0
 8001e16:	623b      	str	r3, [r7, #32]
 8001e18:	e02a      	b.n	8001e70 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xb4>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	68da      	ldr	r2, [r3, #12]
 8001e1e:	6a3b      	ldr	r3, [r7, #32]
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	4413      	add	r3, r2
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8001e28:	6939      	ldr	r1, [r7, #16]
 8001e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e2c:	683a      	ldr	r2, [r7, #0]
 8001e2e:	4413      	add	r3, r2
 8001e30:	b2ca      	uxtb	r2, r1
 8001e32:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	0a19      	lsrs	r1, r3, #8
 8001e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	683a      	ldr	r2, [r7, #0]
 8001e3e:	4413      	add	r3, r2
 8001e40:	b2ca      	uxtb	r2, r1
 8001e42:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	0c19      	lsrs	r1, r3, #16
 8001e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e4a:	3302      	adds	r3, #2
 8001e4c:	683a      	ldr	r2, [r7, #0]
 8001e4e:	4413      	add	r3, r2
 8001e50:	b2ca      	uxtb	r2, r1
 8001e52:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	0e19      	lsrs	r1, r3, #24
 8001e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e5a:	3303      	adds	r3, #3
 8001e5c:	683a      	ldr	r2, [r7, #0]
 8001e5e:	4413      	add	r3, r2
 8001e60:	b2ca      	uxtb	r2, r1
 8001e62:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8001e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e66:	3304      	adds	r3, #4
 8001e68:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001e6a:	6a3b      	ldr	r3, [r7, #32]
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	623b      	str	r3, [r7, #32]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	6a3a      	ldr	r2, [r7, #32]
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d3cf      	bcc.n	8001e1a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6919      	ldr	r1, [r3, #16]
 8001e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e80:	683a      	ldr	r2, [r7, #0]
 8001e82:	4413      	add	r3, r2
 8001e84:	b2ca      	uxtb	r2, r1
 8001e86:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	691b      	ldr	r3, [r3, #16]
 8001e8c:	0a19      	lsrs	r1, r3, #8
 8001e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e90:	3301      	adds	r3, #1
 8001e92:	683a      	ldr	r2, [r7, #0]
 8001e94:	4413      	add	r3, r2
 8001e96:	b2ca      	uxtb	r2, r1
 8001e98:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	691b      	ldr	r3, [r3, #16]
 8001e9e:	0c19      	lsrs	r1, r3, #16
 8001ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ea2:	3302      	adds	r3, #2
 8001ea4:	683a      	ldr	r2, [r7, #0]
 8001ea6:	4413      	add	r3, r2
 8001ea8:	b2ca      	uxtb	r2, r1
 8001eaa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	691b      	ldr	r3, [r3, #16]
 8001eb0:	0e19      	lsrs	r1, r3, #24
 8001eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eb4:	3303      	adds	r3, #3
 8001eb6:	683a      	ldr	r2, [r7, #0]
 8001eb8:	4413      	add	r3, r2
 8001eba:	b2ca      	uxtb	r2, r1
 8001ebc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8001ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ec0:	3304      	adds	r3, #4
 8001ec2:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	61fb      	str	r3, [r7, #28]
 8001ec8:	e02a      	b.n	8001f20 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x164>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	699a      	ldr	r2, [r3, #24]
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	4413      	add	r3, r2
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8001ed8:	68f9      	ldr	r1, [r7, #12]
 8001eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001edc:	683a      	ldr	r2, [r7, #0]
 8001ede:	4413      	add	r3, r2
 8001ee0:	b2ca      	uxtb	r2, r1
 8001ee2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	0a19      	lsrs	r1, r3, #8
 8001ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eea:	3301      	adds	r3, #1
 8001eec:	683a      	ldr	r2, [r7, #0]
 8001eee:	4413      	add	r3, r2
 8001ef0:	b2ca      	uxtb	r2, r1
 8001ef2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	0c19      	lsrs	r1, r3, #16
 8001ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001efa:	3302      	adds	r3, #2
 8001efc:	683a      	ldr	r2, [r7, #0]
 8001efe:	4413      	add	r3, r2
 8001f00:	b2ca      	uxtb	r2, r1
 8001f02:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	0e19      	lsrs	r1, r3, #24
 8001f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f0a:	3303      	adds	r3, #3
 8001f0c:	683a      	ldr	r2, [r7, #0]
 8001f0e:	4413      	add	r3, r2
 8001f10:	b2ca      	uxtb	r2, r1
 8001f12:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8001f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f16:	3304      	adds	r3, #4
 8001f18:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	61fb      	str	r3, [r7, #28]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	691b      	ldr	r3, [r3, #16]
 8001f24:	69fa      	ldr	r2, [r7, #28]
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d3cf      	bcc.n	8001eca <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10e>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	69d9      	ldr	r1, [r3, #28]
 8001f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f30:	683a      	ldr	r2, [r7, #0]
 8001f32:	4413      	add	r3, r2
 8001f34:	b2ca      	uxtb	r2, r1
 8001f36:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	69db      	ldr	r3, [r3, #28]
 8001f3c:	0a19      	lsrs	r1, r3, #8
 8001f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f40:	3301      	adds	r3, #1
 8001f42:	683a      	ldr	r2, [r7, #0]
 8001f44:	4413      	add	r3, r2
 8001f46:	b2ca      	uxtb	r2, r1
 8001f48:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	69db      	ldr	r3, [r3, #28]
 8001f4e:	0c19      	lsrs	r1, r3, #16
 8001f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f52:	3302      	adds	r3, #2
 8001f54:	683a      	ldr	r2, [r7, #0]
 8001f56:	4413      	add	r3, r2
 8001f58:	b2ca      	uxtb	r2, r1
 8001f5a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	69db      	ldr	r3, [r3, #28]
 8001f60:	0e19      	lsrs	r1, r3, #24
 8001f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f64:	3303      	adds	r3, #3
 8001f66:	683a      	ldr	r2, [r7, #0]
 8001f68:	4413      	add	r3, r2
 8001f6a:	b2ca      	uxtb	r2, r1
 8001f6c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8001f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f70:	3304      	adds	r3, #4
 8001f72:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001f74:	2300      	movs	r3, #0
 8001f76:	61bb      	str	r3, [r7, #24]
 8001f78:	e027      	b.n	8001fca <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x20e>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	4413      	add	r3, r2
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7fe f94e 	bl	8000228 <strlen>
 8001f8c:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8001f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f90:	683a      	ldr	r2, [r7, #0]
 8001f92:	4413      	add	r3, r2
 8001f94:	6979      	ldr	r1, [r7, #20]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f001 fcb4 	bl	8003904 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f9e:	3304      	adds	r3, #4
 8001fa0:	627b      	str	r3, [r7, #36]	@ 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8001fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fa4:	683a      	ldr	r2, [r7, #0]
 8001fa6:	18d0      	adds	r0, r2, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	4413      	add	r3, r2
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	697a      	ldr	r2, [r7, #20]
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	f006 fb3c 	bl	8008634 <memcpy>
      offset += length_stringsi;
 8001fbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	4413      	add	r3, r2
 8001fc2:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	61bb      	str	r3, [r7, #24]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	69db      	ldr	r3, [r3, #28]
 8001fce:	69ba      	ldr	r2, [r7, #24]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d3d2      	bcc.n	8001f7a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1be>
      }
      return offset;
 8001fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3728      	adds	r7, #40	@ 0x28
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b08e      	sub	sp, #56	@ 0x38
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
 8001fe6:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	637b      	str	r3, [r7, #52]	@ 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001fec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001fee:	683a      	ldr	r2, [r7, #0]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001ff6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	683a      	ldr	r2, [r7, #0]
 8001ffc:	4413      	add	r3, r2
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	021b      	lsls	r3, r3, #8
 8002002:	6a3a      	ldr	r2, [r7, #32]
 8002004:	4313      	orrs	r3, r2
 8002006:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002008:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800200a:	3302      	adds	r3, #2
 800200c:	683a      	ldr	r2, [r7, #0]
 800200e:	4413      	add	r3, r2
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	041b      	lsls	r3, r3, #16
 8002014:	6a3a      	ldr	r2, [r7, #32]
 8002016:	4313      	orrs	r3, r2
 8002018:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800201a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800201c:	3303      	adds	r3, #3
 800201e:	683a      	ldr	r2, [r7, #0]
 8002020:	4413      	add	r3, r2
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	061b      	lsls	r3, r3, #24
 8002026:	6a3a      	ldr	r2, [r7, #32]
 8002028:	4313      	orrs	r3, r2
 800202a:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 800202c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800202e:	3304      	adds	r3, #4
 8002030:	637b      	str	r3, [r7, #52]	@ 0x34
      if(ints_lengthT > ints_length)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	6a3a      	ldr	r2, [r7, #32]
 8002038:	429a      	cmp	r2, r3
 800203a:	d90a      	bls.n	8002052 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	68da      	ldr	r2, [r3, #12]
 8002040:	6a3b      	ldr	r3, [r7, #32]
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	4619      	mov	r1, r3
 8002046:	4610      	mov	r0, r2
 8002048:	f006 fa7a 	bl	8008540 <realloc>
 800204c:	4602      	mov	r2, r0
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6a3a      	ldr	r2, [r7, #32]
 8002056:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8002058:	2300      	movs	r3, #0
 800205a:	633b      	str	r3, [r7, #48]	@ 0x30
 800205c:	e035      	b.n	80020ca <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xec>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 800205e:	2300      	movs	r3, #0
 8002060:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002066:	6839      	ldr	r1, [r7, #0]
 8002068:	440a      	add	r2, r1
 800206a:	7812      	ldrb	r2, [r2, #0]
 800206c:	4313      	orrs	r3, r2
 800206e:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002070:	697a      	ldr	r2, [r7, #20]
 8002072:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002074:	3301      	adds	r3, #1
 8002076:	6839      	ldr	r1, [r7, #0]
 8002078:	440b      	add	r3, r1
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	021b      	lsls	r3, r3, #8
 800207e:	4313      	orrs	r3, r2
 8002080:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002082:	697a      	ldr	r2, [r7, #20]
 8002084:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002086:	3302      	adds	r3, #2
 8002088:	6839      	ldr	r1, [r7, #0]
 800208a:	440b      	add	r3, r1
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	041b      	lsls	r3, r3, #16
 8002090:	4313      	orrs	r3, r2
 8002092:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002094:	697a      	ldr	r2, [r7, #20]
 8002096:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002098:	3303      	adds	r3, #3
 800209a:	6839      	ldr	r1, [r7, #0]
 800209c:	440b      	add	r3, r1
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	061b      	lsls	r3, r3, #24
 80020a2:	4313      	orrs	r3, r2
 80020a4:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 80020a6:	697a      	ldr	r2, [r7, #20]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 80020ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020ae:	3304      	adds	r3, #4
 80020b0:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	68da      	ldr	r2, [r3, #12]
 80020b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	4413      	add	r3, r2
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	3208      	adds	r2, #8
 80020c0:	6812      	ldr	r2, [r2, #0]
 80020c2:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 80020c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020c6:	3301      	adds	r3, #1
 80020c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d3c4      	bcc.n	800205e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x80>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80020d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020d6:	683a      	ldr	r2, [r7, #0]
 80020d8:	4413      	add	r3, r2
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80020de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020e0:	3301      	adds	r3, #1
 80020e2:	683a      	ldr	r2, [r7, #0]
 80020e4:	4413      	add	r3, r2
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	021b      	lsls	r3, r3, #8
 80020ea:	69fa      	ldr	r2, [r7, #28]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80020f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020f2:	3302      	adds	r3, #2
 80020f4:	683a      	ldr	r2, [r7, #0]
 80020f6:	4413      	add	r3, r2
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	041b      	lsls	r3, r3, #16
 80020fc:	69fa      	ldr	r2, [r7, #28]
 80020fe:	4313      	orrs	r3, r2
 8002100:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002102:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002104:	3303      	adds	r3, #3
 8002106:	683a      	ldr	r2, [r7, #0]
 8002108:	4413      	add	r3, r2
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	061b      	lsls	r3, r3, #24
 800210e:	69fa      	ldr	r2, [r7, #28]
 8002110:	4313      	orrs	r3, r2
 8002112:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8002114:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002116:	3304      	adds	r3, #4
 8002118:	637b      	str	r3, [r7, #52]	@ 0x34
      if(floats_lengthT > floats_length)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	691b      	ldr	r3, [r3, #16]
 800211e:	69fa      	ldr	r2, [r7, #28]
 8002120:	429a      	cmp	r2, r3
 8002122:	d90a      	bls.n	800213a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	699a      	ldr	r2, [r3, #24]
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	4619      	mov	r1, r3
 800212e:	4610      	mov	r0, r2
 8002130:	f006 fa06 	bl	8008540 <realloc>
 8002134:	4602      	mov	r2, r0
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	69fa      	ldr	r2, [r7, #28]
 800213e:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8002140:	2300      	movs	r3, #0
 8002142:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002144:	e035      	b.n	80021b2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1d4>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8002146:	2300      	movs	r3, #0
 8002148:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800214e:	6839      	ldr	r1, [r7, #0]
 8002150:	440a      	add	r2, r1
 8002152:	7812      	ldrb	r2, [r2, #0]
 8002154:	4313      	orrs	r3, r2
 8002156:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002158:	693a      	ldr	r2, [r7, #16]
 800215a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800215c:	3301      	adds	r3, #1
 800215e:	6839      	ldr	r1, [r7, #0]
 8002160:	440b      	add	r3, r1
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	021b      	lsls	r3, r3, #8
 8002166:	4313      	orrs	r3, r2
 8002168:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800216a:	693a      	ldr	r2, [r7, #16]
 800216c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800216e:	3302      	adds	r3, #2
 8002170:	6839      	ldr	r1, [r7, #0]
 8002172:	440b      	add	r3, r1
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	041b      	lsls	r3, r3, #16
 8002178:	4313      	orrs	r3, r2
 800217a:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800217c:	693a      	ldr	r2, [r7, #16]
 800217e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002180:	3303      	adds	r3, #3
 8002182:	6839      	ldr	r1, [r7, #0]
 8002184:	440b      	add	r3, r1
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	061b      	lsls	r3, r3, #24
 800218a:	4313      	orrs	r3, r2
 800218c:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 800218e:	693a      	ldr	r2, [r7, #16]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8002194:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002196:	3304      	adds	r3, #4
 8002198:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	699a      	ldr	r2, [r3, #24]
 800219e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	4413      	add	r3, r2
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	3214      	adds	r2, #20
 80021a8:	6812      	ldr	r2, [r2, #0]
 80021aa:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 80021ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021ae:	3301      	adds	r3, #1
 80021b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	691b      	ldr	r3, [r3, #16]
 80021b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d3c4      	bcc.n	8002146 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x168>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80021bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021be:	683a      	ldr	r2, [r7, #0]
 80021c0:	4413      	add	r3, r2
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80021c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021c8:	3301      	adds	r3, #1
 80021ca:	683a      	ldr	r2, [r7, #0]
 80021cc:	4413      	add	r3, r2
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	021b      	lsls	r3, r3, #8
 80021d2:	69ba      	ldr	r2, [r7, #24]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80021d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021da:	3302      	adds	r3, #2
 80021dc:	683a      	ldr	r2, [r7, #0]
 80021de:	4413      	add	r3, r2
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	041b      	lsls	r3, r3, #16
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80021ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021ec:	3303      	adds	r3, #3
 80021ee:	683a      	ldr	r2, [r7, #0]
 80021f0:	4413      	add	r3, r2
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	061b      	lsls	r3, r3, #24
 80021f6:	69ba      	ldr	r2, [r7, #24]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 80021fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021fe:	3304      	adds	r3, #4
 8002200:	637b      	str	r3, [r7, #52]	@ 0x34
      if(strings_lengthT > strings_length)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	69db      	ldr	r3, [r3, #28]
 8002206:	69ba      	ldr	r2, [r7, #24]
 8002208:	429a      	cmp	r2, r3
 800220a:	d90a      	bls.n	8002222 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002210:	69bb      	ldr	r3, [r7, #24]
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	4619      	mov	r1, r3
 8002216:	4610      	mov	r0, r2
 8002218:	f006 f992 	bl	8008540 <realloc>
 800221c:	4602      	mov	r2, r0
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	625a      	str	r2, [r3, #36]	@ 0x24
      strings_length = strings_lengthT;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8002228:	2300      	movs	r3, #0
 800222a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800222c:	e03e      	b.n	80022ac <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2ce>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 800222e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002230:	683a      	ldr	r2, [r7, #0]
 8002232:	441a      	add	r2, r3
 8002234:	f107 030c 	add.w	r3, r7, #12
 8002238:	4611      	mov	r1, r2
 800223a:	4618      	mov	r0, r3
 800223c:	f001 fb80 	bl	8003940 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002240:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002242:	3304      	adds	r3, #4
 8002244:	637b      	str	r3, [r7, #52]	@ 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002246:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002248:	627b      	str	r3, [r7, #36]	@ 0x24
 800224a:	e00b      	b.n	8002264 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x286>
          inbuffer[k-1]=inbuffer[k];
 800224c:	683a      	ldr	r2, [r7, #0]
 800224e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002250:	441a      	add	r2, r3
 8002252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002254:	3b01      	subs	r3, #1
 8002256:	6839      	ldr	r1, [r7, #0]
 8002258:	440b      	add	r3, r1
 800225a:	7812      	ldrb	r2, [r2, #0]
 800225c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800225e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002260:	3301      	adds	r3, #1
 8002262:	627b      	str	r3, [r7, #36]	@ 0x24
 8002264:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	4413      	add	r3, r2
 800226a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800226c:	429a      	cmp	r2, r3
 800226e:	d3ed      	bcc.n	800224c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26e>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8002270:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	4413      	add	r3, r2
 8002276:	3b01      	subs	r3, #1
 8002278:	683a      	ldr	r2, [r7, #0]
 800227a:	4413      	add	r3, r2
 800227c:	2200      	movs	r2, #0
 800227e:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8002280:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002282:	3b01      	subs	r3, #1
 8002284:	683a      	ldr	r2, [r7, #0]
 8002286:	441a      	add	r2, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 800228c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	4413      	add	r3, r2
 8002292:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	4413      	add	r3, r2
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	3220      	adds	r2, #32
 80022a2:	6812      	ldr	r2, [r2, #0]
 80022a4:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 80022a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022a8:	3301      	adds	r3, #1
 80022aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	69db      	ldr	r3, [r3, #28]
 80022b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d3bb      	bcc.n	800222e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x250>
      }
     return offset;
 80022b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 80022b8:	4618      	mov	r0, r3
 80022ba:	3738      	adds	r7, #56	@ 0x38
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}

080022c0 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	4b02      	ldr	r3, [pc, #8]	@ (80022d4 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x14>)
 80022ca:	4618      	mov	r0, r3
 80022cc:	370c      	adds	r7, #12
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bc80      	pop	{r7}
 80022d2:	4770      	bx	lr
 80022d4:	08008914 	.word	0x08008914

080022d8 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	4b02      	ldr	r3, [pc, #8]	@ (80022ec <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x14>)
 80022e2:	4618      	mov	r0, r3
 80022e4:	370c      	adds	r7, #12
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bc80      	pop	{r7}
 80022ea:	4770      	bx	lr
 80022ec:	080087b8 	.word	0x080087b8

080022f0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 80022f0:	b480      	push	{r7}
 80022f2:	b085      	sub	sp, #20
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	607a      	str	r2, [r7, #4]
 80022fc:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	68ba      	ldr	r2, [r7, #8]
 8002302:	601a      	str	r2, [r3, #0]
    msg_(msg),
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	605a      	str	r2, [r3, #4]
    endpoint_(endpoint) {};
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	683a      	ldr	r2, [r7, #0]
 800230e:	611a      	str	r2, [r3, #16]
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	4618      	mov	r0, r3
 8002314:	3714      	adds	r7, #20
 8002316:	46bd      	mov	sp, r7
 8002318:	bc80      	pop	{r7}
 800231a:	4770      	bx	lr

0800231c <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	68d8      	ldr	r0, [r3, #12]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	68db      	ldr	r3, [r3, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	6891      	ldr	r1, [r2, #8]
 8002336:	683a      	ldr	r2, [r7, #0]
 8002338:	4798      	blx	r3
 800233a:	4603      	mov	r3, r0
  };
 800233c:	4618      	mov	r0, r3
 800233e:	3708      	adds	r7, #8
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}

08002344 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	691b      	ldr	r3, [r3, #16]
  }
 8002350:	4618      	mov	r0, r3
 8002352:	370c      	adds	r7, #12
 8002354:	46bd      	mov	sp, r7
 8002356:	bc80      	pop	{r7}
 8002358:	4770      	bx	lr

0800235a <_ZN10SerialCommC1ER20__UART_HandleTypeDef>:
    uint16_t tx_tail = 0;
    uint16_t rx_tail = 0;
    static constexpr uint16_t buf_mask = buffer_size - 1;

public:
    SerialComm(UART_HandleTypeDef &huart) : huart(huart)
 800235a:	b480      	push	{r7}
 800235c:	b083      	sub	sp, #12
 800235e:	af00      	add	r7, sp, #0
 8002360:	6078      	str	r0, [r7, #4]
 8002362:	6039      	str	r1, [r7, #0]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	683a      	ldr	r2, [r7, #0]
 8002368:	601a      	str	r2, [r3, #0]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002370:	2201      	movs	r2, #1
 8002372:	711a      	strb	r2, [r3, #4]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800237a:	2200      	movs	r2, #0
 800237c:	80da      	strh	r2, [r3, #6]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002384:	2200      	movs	r2, #0
 8002386:	811a      	strh	r2, [r3, #8]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800238e:	2200      	movs	r2, #0
 8002390:	815a      	strh	r2, [r3, #10]
    {
        // Other initialization code
    }
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4618      	mov	r0, r3
 8002396:	370c      	adds	r7, #12
 8002398:	46bd      	mov	sp, r7
 800239a:	bc80      	pop	{r7}
 800239c:	4770      	bx	lr

0800239e <_ZN10SerialComm4initEv>:

    void init(void)
 800239e:	b580      	push	{r7, lr}
 80023a0:	b082      	sub	sp, #8
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
    {
        reset_rbuf();
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f000 f90e 	bl	80025c8 <_ZN10SerialComm10reset_rbufEv>
    }
 80023ac:	bf00      	nop
 80023ae:	3708      	adds	r7, #8
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <_ZN10SerialComm4readEv>:

    /** @brief Read a character from the Rx buffer using the FIFO method.
     * 
     * @return The read character.
    */
    int read(void)
 80023b4:	b480      	push	{r7}
 80023b6:	b085      	sub	sp, #20
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
    {
       uint16_t rx_head = (buffer_size - huart.hdmarx->Instance->CNDTR) & buf_mask;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	b29b      	uxth	r3, r3
 80023c8:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023d2:	81fb      	strh	r3, [r7, #14]

        // Check for overlapping (which is bad, data will be overwritten)
        if (rx_tail == rx_head)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80023da:	895b      	ldrh	r3, [r3, #10]
 80023dc:	89fa      	ldrh	r2, [r7, #14]
 80023de:	429a      	cmp	r2, r3
 80023e0:	d102      	bne.n	80023e8 <_ZN10SerialComm4readEv+0x34>
        {
            return -1;
 80023e2:	f04f 33ff 	mov.w	r3, #4294967295
 80023e6:	e01d      	b.n	8002424 <_ZN10SerialComm4readEv+0x70>
        }

        // Read a value and increment the read pointer (TAIL).
        int c = (int) rx_buf[rx_tail++];
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80023ee:	895b      	ldrh	r3, [r3, #10]
 80023f0:	1c5a      	adds	r2, r3, #1
 80023f2:	b291      	uxth	r1, r2
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 80023fa:	8151      	strh	r1, [r2, #10]
 80023fc:	461a      	mov	r2, r3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4413      	add	r3, r2
 8002402:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002406:	3304      	adds	r3, #4
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	60bb      	str	r3, [r7, #8]
        rx_tail &= buf_mask;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002412:	895b      	ldrh	r3, [r3, #10]
 8002414:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002418:	b29a      	uxth	r2, r3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002420:	815a      	strh	r2, [r3, #10]

        return c;
 8002422:	68bb      	ldr	r3, [r7, #8]
    }
 8002424:	4618      	mov	r0, r3
 8002426:	3714      	adds	r7, #20
 8002428:	46bd      	mov	sp, r7
 800242a:	bc80      	pop	{r7}
 800242c:	4770      	bx	lr

0800242e <_ZN10SerialComm5writeEPKhi>:
     * @param data The pointer to the data string.
     * @param length The length of the data string.
     * 
     * @return Void. 
    */
    void write(const uint8_t* const data, const int length)
 800242e:	b580      	push	{r7, lr}
 8002430:	b086      	sub	sp, #24
 8002432:	af00      	add	r7, sp, #0
 8002434:	60f8      	str	r0, [r7, #12]
 8002436:	60b9      	str	r1, [r7, #8]
 8002438:	607a      	str	r2, [r7, #4]
    {
        // Faulty data guard.
        if (length > buffer_size || length < 1)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002440:	dc46      	bgt.n	80024d0 <_ZN10SerialComm5writeEPKhi+0xa2>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2b00      	cmp	r3, #0
 8002446:	dd43      	ble.n	80024d0 <_ZN10SerialComm5writeEPKhi+0xa2>
        {
            return;
        }

        // Wait for the completion of the previous Tx transfer.
        while (!is_tx_cplt);
 8002448:	bf00      	nop
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002450:	791b      	ldrb	r3, [r3, #4]
 8002452:	f083 0301 	eor.w	r3, r3, #1
 8002456:	b2db      	uxtb	r3, r3
 8002458:	2b00      	cmp	r3, #0
 800245a:	d1f6      	bne.n	800244a <_ZN10SerialComm5writeEPKhi+0x1c>

        // Check if the data is bigger than the remaining storage
        int w_len = (length <= (buffer_size - tx_head)) ? length : (buffer_size - tx_head);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002462:	88db      	ldrh	r3, [r3, #6]
 8002464:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	4293      	cmp	r3, r2
 800246c:	bfa8      	it	ge
 800246e:	4613      	movge	r3, r2
 8002470:	617b      	str	r3, [r7, #20]

        // Write the data and increment the write pointer (TX_HEAD)
        memcpy(&tx_buf[tx_head], data, w_len);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002478:	88db      	ldrh	r3, [r3, #6]
 800247a:	461a      	mov	r2, r3
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	4413      	add	r3, r2
 8002480:	3304      	adds	r3, #4
 8002482:	697a      	ldr	r2, [r7, #20]
 8002484:	68b9      	ldr	r1, [r7, #8]
 8002486:	4618      	mov	r0, r3
 8002488:	f006 f8d4 	bl	8008634 <memcpy>
        tx_head = (tx_head + length) & buf_mask;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002492:	88da      	ldrh	r2, [r3, #6]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	b29b      	uxth	r3, r3
 8002498:	4413      	add	r3, r2
 800249a:	b29b      	uxth	r3, r3
 800249c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024a0:	b29a      	uxth	r2, r3
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80024a8:	80da      	strh	r2, [r3, #6]

        // Reset the TX_HEAD pointer and write the remaining data
        // (If data is bigger than the previous remaining data)
        if (length != w_len)
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d00a      	beq.n	80024c8 <_ZN10SerialComm5writeEPKhi+0x9a>
        {
            memcpy(tx_buf, &data[w_len], length - w_len);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	1d18      	adds	r0, r3, #4
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	68ba      	ldr	r2, [r7, #8]
 80024ba:	18d1      	adds	r1, r2, r3
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	461a      	mov	r2, r3
 80024c4:	f006 f8b6 	bl	8008634 <memcpy>
        }

        // TODO: Start transfering
        flush();
 80024c8:	68f8      	ldr	r0, [r7, #12]
 80024ca:	f000 f805 	bl	80024d8 <_ZN10SerialComm5flushEv>
 80024ce:	e000      	b.n	80024d2 <_ZN10SerialComm5writeEPKhi+0xa4>
            return;
 80024d0:	bf00      	nop
    }
 80024d2:	3718      	adds	r7, #24
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <_ZN10SerialComm5flushEv>:

    /** @brief Transmit the just written data in the Tx buffer
     * 
     * @return void.
    */
    void flush()
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
    {
        if (is_tx_cplt)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80024e6:	791b      	ldrb	r3, [r3, #4]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d05b      	beq.n	80025a4 <_ZN10SerialComm5flushEv+0xcc>
        {
            // if HEAD == TAIL => The buffer is empty => Nothing to send.
            if (tx_head != tx_tail)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80024f2:	88da      	ldrh	r2, [r3, #6]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80024fa:	891b      	ldrh	r3, [r3, #8]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d04c      	beq.n	800259a <_ZN10SerialComm5flushEv+0xc2>
            {
                uint16_t len = 0;
 8002500:	2300      	movs	r3, #0
 8002502:	81fb      	strh	r3, [r7, #14]

                if (tx_tail < tx_head)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800250a:	891a      	ldrh	r2, [r3, #8]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002512:	88db      	ldrh	r3, [r3, #6]
 8002514:	429a      	cmp	r2, r3
 8002516:	d218      	bcs.n	800254a <_ZN10SerialComm5flushEv+0x72>
                {
                    len = tx_head - tx_tail;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800251e:	88da      	ldrh	r2, [r3, #6]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002526:	891b      	ldrh	r3, [r3, #8]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	81fb      	strh	r3, [r7, #14]
                    HAL_UART_Transmit_DMA(&huart, &tx_buf[tx_tail], len);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6818      	ldr	r0, [r3, #0]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002536:	891b      	ldrh	r3, [r3, #8]
 8002538:	461a      	mov	r2, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4413      	add	r3, r2
 800253e:	3304      	adds	r3, #4
 8002540:	89fa      	ldrh	r2, [r7, #14]
 8002542:	4619      	mov	r1, r3
 8002544:	f004 ffa0 	bl	8007488 <HAL_UART_Transmit_DMA>
 8002548:	e01f      	b.n	800258a <_ZN10SerialComm5flushEv+0xb2>
                }
                else
                {
                    len = buffer_size - tx_tail;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002550:	891b      	ldrh	r3, [r3, #8]
 8002552:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8002556:	81fb      	strh	r3, [r7, #14]
                    HAL_UART_Transmit_DMA(&huart, &tx_buf[tx_tail], len);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6818      	ldr	r0, [r3, #0]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002562:	891b      	ldrh	r3, [r3, #8]
 8002564:	461a      	mov	r2, r3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4413      	add	r3, r2
 800256a:	3304      	adds	r3, #4
 800256c:	89fa      	ldrh	r2, [r7, #14]
 800256e:	4619      	mov	r1, r3
 8002570:	f004 ff8a 	bl	8007488 <HAL_UART_Transmit_DMA>
                    HAL_UART_Transmit_DMA(&huart, tx_buf, tx_head);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6818      	ldr	r0, [r3, #0]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	1d19      	adds	r1, r3, #4
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002582:	88db      	ldrh	r3, [r3, #6]
 8002584:	461a      	mov	r2, r3
 8002586:	f004 ff7f 	bl	8007488 <HAL_UART_Transmit_DMA>
                }
                
                tx_tail = tx_head;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002590:	88da      	ldrh	r2, [r3, #6]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002598:	811a      	strh	r2, [r3, #8]
            }
            
            is_tx_cplt = false;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80025a0:	2200      	movs	r2, #0
 80025a2:	711a      	strb	r2, [r3, #4]
        }
    }
 80025a4:	bf00      	nop
 80025a6:	3710      	adds	r7, #16
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}

080025ac <_ZN10SerialComm11set_tx_cpltEv>:

    void set_tx_cplt(void)
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
    {
        is_tx_cplt = true;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80025ba:	2201      	movs	r2, #1
 80025bc:	711a      	strb	r2, [r3, #4]
    }
 80025be:	bf00      	nop
 80025c0:	370c      	adds	r7, #12
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bc80      	pop	{r7}
 80025c6:	4770      	bx	lr

080025c8 <_ZN10SerialComm10reset_rbufEv>:

    void reset_rbuf(void)
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
    {
        HAL_UART_Receive_DMA(&huart, (uint8_t *)rx_buf, buffer_size);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6818      	ldr	r0, [r3, #0]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025da:	3304      	adds	r3, #4
 80025dc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80025e0:	4619      	mov	r1, r3
 80025e2:	f004 ffc1 	bl	8007568 <HAL_UART_Receive_DMA>
    }
 80025e6:	bf00      	nop
 80025e8:	3708      	adds	r7, #8
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
	...

080025f0 <_ZN13STM32HardwareC1Ev>:
class STM32Hardware {
  protected:
    SerialComm &comm;

  public:
    STM32Hardware() : comm(comm_rosserial)
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	4a04      	ldr	r2, [pc, #16]	@ (800260c <_ZN13STM32HardwareC1Ev+0x1c>)
 80025fc:	601a      	str	r2, [r3, #0]
    {
        // TODO:
    }
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4618      	mov	r0, r3
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	bc80      	pop	{r7}
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	200001e8 	.word	0x200001e8

08002610 <_ZN13STM32Hardware4initEv>:
    STM32Hardware(SerialComm &comm) : comm(comm)
    {
        // TODO: 
    }
  
    void init()
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
    {
        comm.init();
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4618      	mov	r0, r3
 800261e:	f7ff febe 	bl	800239e <_ZN10SerialComm4initEv>
    }
 8002622:	bf00      	nop
 8002624:	3708      	adds	r7, #8
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}

0800262a <_ZN13STM32Hardware4readEv>:

    int read()  
 800262a:	b580      	push	{r7, lr}
 800262c:	b082      	sub	sp, #8
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
    {
        return comm.read();
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4618      	mov	r0, r3
 8002638:	f7ff febc 	bl	80023b4 <_ZN10SerialComm4readEv>
 800263c:	4603      	mov	r3, r0
    }
 800263e:	4618      	mov	r0, r3
 8002640:	3708      	adds	r7, #8
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}

08002646 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length)
 8002646:	b580      	push	{r7, lr}
 8002648:	b084      	sub	sp, #16
 800264a:	af00      	add	r7, sp, #0
 800264c:	60f8      	str	r0, [r7, #12]
 800264e:	60b9      	str	r1, [r7, #8]
 8002650:	607a      	str	r2, [r7, #4]
    {
        comm.write(data, length);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	68b9      	ldr	r1, [r7, #8]
 800265a:	4618      	mov	r0, r3
 800265c:	f7ff fee7 	bl	800242e <_ZN10SerialComm5writeEPKhi>
    }
 8002660:	bf00      	nop
 8002662:	3710      	adds	r7, #16
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <_ZN13STM32Hardware4timeEv>:

    unsigned long time()
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
    { 
        return HAL_GetTick(); 
 8002670:	f002 fb30 	bl	8004cd4 <HAL_GetTick>
 8002674:	4603      	mov	r3, r0
    }
 8002676:	4618      	mov	r0, r3
 8002678:	3708      	adds	r7, #8
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
	...

08002680 <_ZN8std_msgs6UInt16C1Ev>:
  {
    public:
      typedef uint16_t _data_type;
      _data_type data;

    UInt16():
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
      data(0)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	4618      	mov	r0, r3
 800268c:	f7ff f802 	bl	8001694 <_ZN3ros3MsgC1Ev>
 8002690:	4a05      	ldr	r2, [pc, #20]	@ (80026a8 <_ZN8std_msgs6UInt16C1Ev+0x28>)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	601a      	str	r2, [r3, #0]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2200      	movs	r2, #0
 800269a:	809a      	strh	r2, [r3, #4]
    {
    }
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	4618      	mov	r0, r3
 80026a0:	3708      	adds	r7, #8
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	08008994 	.word	0x08008994

080026ac <_ZNK8std_msgs6UInt169serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80026ac:	b480      	push	{r7}
 80026ae:	b085      	sub	sp, #20
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80026b6:	2300      	movs	r3, #0
 80026b8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data >> (8 * 0)) & 0xFF;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	8899      	ldrh	r1, [r3, #4]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	683a      	ldr	r2, [r7, #0]
 80026c2:	4413      	add	r3, r2
 80026c4:	b2ca      	uxtb	r2, r1
 80026c6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data >> (8 * 1)) & 0xFF;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	889b      	ldrh	r3, [r3, #4]
 80026cc:	0a1b      	lsrs	r3, r3, #8
 80026ce:	b299      	uxth	r1, r3
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	3301      	adds	r3, #1
 80026d4:	683a      	ldr	r2, [r7, #0]
 80026d6:	4413      	add	r3, r2
 80026d8:	b2ca      	uxtb	r2, r1
 80026da:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	3302      	adds	r3, #2
 80026e0:	60fb      	str	r3, [r7, #12]
      return offset;
 80026e2:	68fb      	ldr	r3, [r7, #12]
    }
 80026e4:	4618      	mov	r0, r3
 80026e6:	3714      	adds	r7, #20
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bc80      	pop	{r7}
 80026ec:	4770      	bx	lr

080026ee <_ZN8std_msgs6UInt1611deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80026ee:	b480      	push	{r7}
 80026f0:	b085      	sub	sp, #20
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
 80026f6:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80026f8:	2300      	movs	r3, #0
 80026fa:	60fb      	str	r3, [r7, #12]
      this->data =  ((uint16_t) (*(inbuffer + offset)));
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	683a      	ldr	r2, [r7, #0]
 8002700:	4413      	add	r3, r2
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	461a      	mov	r2, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	809a      	strh	r2, [r3, #4]
      this->data |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	889b      	ldrh	r3, [r3, #4]
 800270e:	b21a      	sxth	r2, r3
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	3301      	adds	r3, #1
 8002714:	6839      	ldr	r1, [r7, #0]
 8002716:	440b      	add	r3, r1
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	021b      	lsls	r3, r3, #8
 800271c:	b21b      	sxth	r3, r3
 800271e:	4313      	orrs	r3, r2
 8002720:	b21b      	sxth	r3, r3
 8002722:	b29a      	uxth	r2, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->data);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	3302      	adds	r3, #2
 800272c:	60fb      	str	r3, [r7, #12]
     return offset;
 800272e:	68fb      	ldr	r3, [r7, #12]
    }
 8002730:	4618      	mov	r0, r3
 8002732:	3714      	adds	r7, #20
 8002734:	46bd      	mov	sp, r7
 8002736:	bc80      	pop	{r7}
 8002738:	4770      	bx	lr
	...

0800273c <_ZN8std_msgs6UInt167getTypeEv>:

    virtual const char * getType() override { return "std_msgs/UInt16"; };
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	4b02      	ldr	r3, [pc, #8]	@ (8002750 <_ZN8std_msgs6UInt167getTypeEv+0x14>)
 8002746:	4618      	mov	r0, r3
 8002748:	370c      	adds	r7, #12
 800274a:	46bd      	mov	sp, r7
 800274c:	bc80      	pop	{r7}
 800274e:	4770      	bx	lr
 8002750:	080087dc 	.word	0x080087dc

08002754 <_ZN8std_msgs6UInt166getMD5Ev>:
    virtual const char * getMD5() override { return "1df79edf208b629fe6b81923a544552d"; };
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	4b02      	ldr	r3, [pc, #8]	@ (8002768 <_ZN8std_msgs6UInt166getMD5Ev+0x14>)
 800275e:	4618      	mov	r0, r3
 8002760:	370c      	adds	r7, #12
 8002762:	46bd      	mov	sp, r7
 8002764:	bc80      	pop	{r7}
 8002766:	4770      	bx	lr
 8002768:	080087ec 	.word	0x080087ec

0800276c <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	4618      	mov	r0, r3
 8002778:	f7fe ff8c 	bl	8001694 <_ZN3ros3MsgC1Ev>
 800277c:	4a0e      	ldr	r2, [pc, #56]	@ (80027b8 <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	601a      	str	r2, [r3, #0]
      x(0),
 8002782:	6879      	ldr	r1, [r7, #4]
 8002784:	f04f 0200 	mov.w	r2, #0
 8002788:	f04f 0300 	mov.w	r3, #0
 800278c:	e9c1 2302 	strd	r2, r3, [r1, #8]
      y(0),
 8002790:	6879      	ldr	r1, [r7, #4]
 8002792:	f04f 0200 	mov.w	r2, #0
 8002796:	f04f 0300 	mov.w	r3, #0
 800279a:	e9c1 2304 	strd	r2, r3, [r1, #16]
      z(0)
 800279e:	6879      	ldr	r1, [r7, #4]
 80027a0:	f04f 0200 	mov.w	r2, #0
 80027a4:	f04f 0300 	mov.w	r3, #0
 80027a8:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	4618      	mov	r0, r3
 80027b0:	3708      	adds	r7, #8
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	0800897c 	.word	0x0800897c

080027bc <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80027bc:	b480      	push	{r7}
 80027be:	b08b      	sub	sp, #44	@ 0x2c
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80027c6:	2300      	movs	r3, #0
 80027c8:	627b      	str	r3, [r7, #36]	@ 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80027d0:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 80027d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027d8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80027da:	6838      	ldr	r0, [r7, #0]
 80027dc:	4401      	add	r1, r0
 80027de:	b2d3      	uxtb	r3, r2
 80027e0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 80027e2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80027e6:	f04f 0200 	mov.w	r2, #0
 80027ea:	f04f 0300 	mov.w	r3, #0
 80027ee:	0a02      	lsrs	r2, r0, #8
 80027f0:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80027f4:	0a0b      	lsrs	r3, r1, #8
 80027f6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80027f8:	3101      	adds	r1, #1
 80027fa:	6838      	ldr	r0, [r7, #0]
 80027fc:	4401      	add	r1, r0
 80027fe:	b2d3      	uxtb	r3, r2
 8002800:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 8002802:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002806:	f04f 0200 	mov.w	r2, #0
 800280a:	f04f 0300 	mov.w	r3, #0
 800280e:	0c02      	lsrs	r2, r0, #16
 8002810:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002814:	0c0b      	lsrs	r3, r1, #16
 8002816:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002818:	3102      	adds	r1, #2
 800281a:	6838      	ldr	r0, [r7, #0]
 800281c:	4401      	add	r1, r0
 800281e:	b2d3      	uxtb	r3, r2
 8002820:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 8002822:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002826:	f04f 0200 	mov.w	r2, #0
 800282a:	f04f 0300 	mov.w	r3, #0
 800282e:	0e02      	lsrs	r2, r0, #24
 8002830:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002834:	0e0b      	lsrs	r3, r1, #24
 8002836:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002838:	3103      	adds	r1, #3
 800283a:	6838      	ldr	r0, [r7, #0]
 800283c:	4401      	add	r1, r0
 800283e:	b2d3      	uxtb	r3, r2
 8002840:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 8002842:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002846:	f04f 0200 	mov.w	r2, #0
 800284a:	f04f 0300 	mov.w	r3, #0
 800284e:	000a      	movs	r2, r1
 8002850:	2300      	movs	r3, #0
 8002852:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002854:	3104      	adds	r1, #4
 8002856:	6838      	ldr	r0, [r7, #0]
 8002858:	4401      	add	r1, r0
 800285a:	b2d3      	uxtb	r3, r2
 800285c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 800285e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002862:	f04f 0200 	mov.w	r2, #0
 8002866:	f04f 0300 	mov.w	r3, #0
 800286a:	0a0a      	lsrs	r2, r1, #8
 800286c:	2300      	movs	r3, #0
 800286e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002870:	3105      	adds	r1, #5
 8002872:	6838      	ldr	r0, [r7, #0]
 8002874:	4401      	add	r1, r0
 8002876:	b2d3      	uxtb	r3, r2
 8002878:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 800287a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800287e:	f04f 0200 	mov.w	r2, #0
 8002882:	f04f 0300 	mov.w	r3, #0
 8002886:	0c0a      	lsrs	r2, r1, #16
 8002888:	2300      	movs	r3, #0
 800288a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800288c:	3106      	adds	r1, #6
 800288e:	6838      	ldr	r0, [r7, #0]
 8002890:	4401      	add	r1, r0
 8002892:	b2d3      	uxtb	r3, r2
 8002894:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8002896:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800289a:	f04f 0200 	mov.w	r2, #0
 800289e:	f04f 0300 	mov.w	r3, #0
 80028a2:	0e0a      	lsrs	r2, r1, #24
 80028a4:	2300      	movs	r3, #0
 80028a6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80028a8:	3107      	adds	r1, #7
 80028aa:	6838      	ldr	r0, [r7, #0]
 80028ac:	4401      	add	r1, r0
 80028ae:	b2d3      	uxtb	r3, r2
 80028b0:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 80028b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b4:	3308      	adds	r3, #8
 80028b6:	627b      	str	r3, [r7, #36]	@ 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80028be:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 80028c2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80028c6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80028c8:	6838      	ldr	r0, [r7, #0]
 80028ca:	4401      	add	r1, r0
 80028cc:	b2d3      	uxtb	r3, r2
 80028ce:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 80028d0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80028d4:	f04f 0200 	mov.w	r2, #0
 80028d8:	f04f 0300 	mov.w	r3, #0
 80028dc:	0a02      	lsrs	r2, r0, #8
 80028de:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80028e2:	0a0b      	lsrs	r3, r1, #8
 80028e4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80028e6:	3101      	adds	r1, #1
 80028e8:	6838      	ldr	r0, [r7, #0]
 80028ea:	4401      	add	r1, r0
 80028ec:	b2d3      	uxtb	r3, r2
 80028ee:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 80028f0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80028f4:	f04f 0200 	mov.w	r2, #0
 80028f8:	f04f 0300 	mov.w	r3, #0
 80028fc:	0c02      	lsrs	r2, r0, #16
 80028fe:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002902:	0c0b      	lsrs	r3, r1, #16
 8002904:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002906:	3102      	adds	r1, #2
 8002908:	6838      	ldr	r0, [r7, #0]
 800290a:	4401      	add	r1, r0
 800290c:	b2d3      	uxtb	r3, r2
 800290e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8002910:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002914:	f04f 0200 	mov.w	r2, #0
 8002918:	f04f 0300 	mov.w	r3, #0
 800291c:	0e02      	lsrs	r2, r0, #24
 800291e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002922:	0e0b      	lsrs	r3, r1, #24
 8002924:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002926:	3103      	adds	r1, #3
 8002928:	6838      	ldr	r0, [r7, #0]
 800292a:	4401      	add	r1, r0
 800292c:	b2d3      	uxtb	r3, r2
 800292e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8002930:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002934:	f04f 0200 	mov.w	r2, #0
 8002938:	f04f 0300 	mov.w	r3, #0
 800293c:	000a      	movs	r2, r1
 800293e:	2300      	movs	r3, #0
 8002940:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002942:	3104      	adds	r1, #4
 8002944:	6838      	ldr	r0, [r7, #0]
 8002946:	4401      	add	r1, r0
 8002948:	b2d3      	uxtb	r3, r2
 800294a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 800294c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002950:	f04f 0200 	mov.w	r2, #0
 8002954:	f04f 0300 	mov.w	r3, #0
 8002958:	0a0a      	lsrs	r2, r1, #8
 800295a:	2300      	movs	r3, #0
 800295c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800295e:	3105      	adds	r1, #5
 8002960:	6838      	ldr	r0, [r7, #0]
 8002962:	4401      	add	r1, r0
 8002964:	b2d3      	uxtb	r3, r2
 8002966:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8002968:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800296c:	f04f 0200 	mov.w	r2, #0
 8002970:	f04f 0300 	mov.w	r3, #0
 8002974:	0c0a      	lsrs	r2, r1, #16
 8002976:	2300      	movs	r3, #0
 8002978:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800297a:	3106      	adds	r1, #6
 800297c:	6838      	ldr	r0, [r7, #0]
 800297e:	4401      	add	r1, r0
 8002980:	b2d3      	uxtb	r3, r2
 8002982:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8002984:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002988:	f04f 0200 	mov.w	r2, #0
 800298c:	f04f 0300 	mov.w	r3, #0
 8002990:	0e0a      	lsrs	r2, r1, #24
 8002992:	2300      	movs	r3, #0
 8002994:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002996:	3107      	adds	r1, #7
 8002998:	6838      	ldr	r0, [r7, #0]
 800299a:	4401      	add	r1, r0
 800299c:	b2d3      	uxtb	r3, r2
 800299e:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 80029a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a2:	3308      	adds	r3, #8
 80029a4:	627b      	str	r3, [r7, #36]	@ 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80029ac:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 80029b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80029b4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80029b6:	6838      	ldr	r0, [r7, #0]
 80029b8:	4401      	add	r1, r0
 80029ba:	b2d3      	uxtb	r3, r2
 80029bc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 80029be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80029c2:	f04f 0200 	mov.w	r2, #0
 80029c6:	f04f 0300 	mov.w	r3, #0
 80029ca:	0a02      	lsrs	r2, r0, #8
 80029cc:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80029d0:	0a0b      	lsrs	r3, r1, #8
 80029d2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80029d4:	3101      	adds	r1, #1
 80029d6:	6838      	ldr	r0, [r7, #0]
 80029d8:	4401      	add	r1, r0
 80029da:	b2d3      	uxtb	r3, r2
 80029dc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 80029de:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80029e2:	f04f 0200 	mov.w	r2, #0
 80029e6:	f04f 0300 	mov.w	r3, #0
 80029ea:	0c02      	lsrs	r2, r0, #16
 80029ec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80029f0:	0c0b      	lsrs	r3, r1, #16
 80029f2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80029f4:	3102      	adds	r1, #2
 80029f6:	6838      	ldr	r0, [r7, #0]
 80029f8:	4401      	add	r1, r0
 80029fa:	b2d3      	uxtb	r3, r2
 80029fc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 80029fe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002a02:	f04f 0200 	mov.w	r2, #0
 8002a06:	f04f 0300 	mov.w	r3, #0
 8002a0a:	0e02      	lsrs	r2, r0, #24
 8002a0c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002a10:	0e0b      	lsrs	r3, r1, #24
 8002a12:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002a14:	3103      	adds	r1, #3
 8002a16:	6838      	ldr	r0, [r7, #0]
 8002a18:	4401      	add	r1, r0
 8002a1a:	b2d3      	uxtb	r3, r2
 8002a1c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8002a1e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002a22:	f04f 0200 	mov.w	r2, #0
 8002a26:	f04f 0300 	mov.w	r3, #0
 8002a2a:	000a      	movs	r2, r1
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002a30:	3104      	adds	r1, #4
 8002a32:	6838      	ldr	r0, [r7, #0]
 8002a34:	4401      	add	r1, r0
 8002a36:	b2d3      	uxtb	r3, r2
 8002a38:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8002a3a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002a3e:	f04f 0200 	mov.w	r2, #0
 8002a42:	f04f 0300 	mov.w	r3, #0
 8002a46:	0a0a      	lsrs	r2, r1, #8
 8002a48:	2300      	movs	r3, #0
 8002a4a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002a4c:	3105      	adds	r1, #5
 8002a4e:	6838      	ldr	r0, [r7, #0]
 8002a50:	4401      	add	r1, r0
 8002a52:	b2d3      	uxtb	r3, r2
 8002a54:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8002a56:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002a5a:	f04f 0200 	mov.w	r2, #0
 8002a5e:	f04f 0300 	mov.w	r3, #0
 8002a62:	0c0a      	lsrs	r2, r1, #16
 8002a64:	2300      	movs	r3, #0
 8002a66:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002a68:	3106      	adds	r1, #6
 8002a6a:	6838      	ldr	r0, [r7, #0]
 8002a6c:	4401      	add	r1, r0
 8002a6e:	b2d3      	uxtb	r3, r2
 8002a70:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 8002a72:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002a76:	f04f 0200 	mov.w	r2, #0
 8002a7a:	f04f 0300 	mov.w	r3, #0
 8002a7e:	0e0a      	lsrs	r2, r1, #24
 8002a80:	2300      	movs	r3, #0
 8002a82:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002a84:	3107      	adds	r1, #7
 8002a86:	6838      	ldr	r0, [r7, #0]
 8002a88:	4401      	add	r1, r0
 8002a8a:	b2d3      	uxtb	r3, r2
 8002a8c:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 8002a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a90:	3308      	adds	r3, #8
 8002a92:	627b      	str	r3, [r7, #36]	@ 0x24
      return offset;
 8002a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8002a96:	4618      	mov	r0, r3
 8002a98:	372c      	adds	r7, #44	@ 0x2c
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bc80      	pop	{r7}
 8002a9e:	4770      	bx	lr

08002aa0 <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002aa0:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002aa4:	b0eb      	sub	sp, #428	@ 0x1ac
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	f8c7 0184 	str.w	r0, [r7, #388]	@ 0x184
 8002aac:	f8c7 1180 	str.w	r1, [r7, #384]	@ 0x180
    {
      int offset = 0;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 8002ab6:	f04f 0200 	mov.w	r2, #0
 8002aba:	f04f 0300 	mov.w	r3, #0
 8002abe:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002ac2:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8002ac6:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 8002aca:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002ace:	4413      	add	r3, r2
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	461c      	mov	r4, r3
 8002ad8:	4615      	mov	r5, r2
 8002ada:	ea40 0804 	orr.w	r8, r0, r4
 8002ade:	ea41 0905 	orr.w	r9, r1, r5
 8002ae2:	e9c7 8966 	strd	r8, r9, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002ae6:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8002aea:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8002aee:	1c5a      	adds	r2, r3, #1
 8002af0:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002af4:	4413      	add	r3, r2
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	2200      	movs	r2, #0
 8002afc:	469a      	mov	sl, r3
 8002afe:	4693      	mov	fp, r2
 8002b00:	f04f 0200 	mov.w	r2, #0
 8002b04:	f04f 0300 	mov.w	r3, #0
 8002b08:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8002b0c:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8002b10:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8002b14:	ea40 0402 	orr.w	r4, r0, r2
 8002b18:	f8c7 4178 	str.w	r4, [r7, #376]	@ 0x178
 8002b1c:	430b      	orrs	r3, r1
 8002b1e:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8002b22:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	@ 0x178
 8002b26:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002b2a:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8002b2e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8002b32:	1c9a      	adds	r2, r3, #2
 8002b34:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002b38:	4413      	add	r3, r2
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 8002b44:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
 8002b48:	f04f 0200 	mov.w	r2, #0
 8002b4c:	f04f 0300 	mov.w	r3, #0
 8002b50:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	@ 0x170
 8002b54:	464c      	mov	r4, r9
 8002b56:	0423      	lsls	r3, r4, #16
 8002b58:	46c4      	mov	ip, r8
 8002b5a:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
 8002b5e:	4644      	mov	r4, r8
 8002b60:	0422      	lsls	r2, r4, #16
 8002b62:	ea40 0402 	orr.w	r4, r0, r2
 8002b66:	f8c7 4168 	str.w	r4, [r7, #360]	@ 0x168
 8002b6a:	430b      	orrs	r3, r1
 8002b6c:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 8002b70:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	@ 0x168
 8002b74:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002b78:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8002b7c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8002b80:	1cda      	adds	r2, r3, #3
 8002b82:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002b86:	4413      	add	r3, r2
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 8002b92:	f8c7 2164 	str.w	r2, [r7, #356]	@ 0x164
 8002b96:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	@ 0x160
 8002b9a:	4623      	mov	r3, r4
 8002b9c:	0a1b      	lsrs	r3, r3, #8
 8002b9e:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8002ba2:	4623      	mov	r3, r4
 8002ba4:	061b      	lsls	r3, r3, #24
 8002ba6:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8002baa:	e9d7 3456 	ldrd	r3, r4, [r7, #344]	@ 0x158
 8002bae:	461a      	mov	r2, r3
 8002bb0:	4302      	orrs	r2, r0
 8002bb2:	f8c7 2150 	str.w	r2, [r7, #336]	@ 0x150
 8002bb6:	4623      	mov	r3, r4
 8002bb8:	430b      	orrs	r3, r1
 8002bba:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002bbe:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	@ 0x150
 8002bc2:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002bc6:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8002bca:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8002bce:	1d1a      	adds	r2, r3, #4
 8002bd0:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002bd4:	4413      	add	r3, r2
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 8002be0:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8002be4:	f04f 0200 	mov.w	r2, #0
 8002be8:	f04f 0300 	mov.w	r3, #0
 8002bec:	f8d7 4148 	ldr.w	r4, [r7, #328]	@ 0x148
 8002bf0:	0023      	movs	r3, r4
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	ea40 0402 	orr.w	r4, r0, r2
 8002bf8:	f8c7 4140 	str.w	r4, [r7, #320]	@ 0x140
 8002bfc:	430b      	orrs	r3, r1
 8002bfe:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8002c02:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	@ 0x140
 8002c06:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002c0a:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8002c0e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8002c12:	1d5a      	adds	r2, r3, #5
 8002c14:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002c18:	4413      	add	r3, r2
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8002c24:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 8002c28:	f04f 0200 	mov.w	r2, #0
 8002c2c:	f04f 0300 	mov.w	r3, #0
 8002c30:	f8d7 4138 	ldr.w	r4, [r7, #312]	@ 0x138
 8002c34:	0223      	lsls	r3, r4, #8
 8002c36:	2200      	movs	r2, #0
 8002c38:	ea40 0402 	orr.w	r4, r0, r2
 8002c3c:	f8c7 4130 	str.w	r4, [r7, #304]	@ 0x130
 8002c40:	430b      	orrs	r3, r1
 8002c42:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8002c46:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	@ 0x130
 8002c4a:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002c4e:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8002c52:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8002c56:	1d9a      	adds	r2, r3, #6
 8002c58:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002c5c:	4413      	add	r3, r2
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	2200      	movs	r2, #0
 8002c64:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8002c68:	f8c7 212c 	str.w	r2, [r7, #300]	@ 0x12c
 8002c6c:	f04f 0200 	mov.w	r2, #0
 8002c70:	f04f 0300 	mov.w	r3, #0
 8002c74:	f8d7 4128 	ldr.w	r4, [r7, #296]	@ 0x128
 8002c78:	0423      	lsls	r3, r4, #16
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	ea40 0402 	orr.w	r4, r0, r2
 8002c80:	f8c7 4120 	str.w	r4, [r7, #288]	@ 0x120
 8002c84:	430b      	orrs	r3, r1
 8002c86:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002c8a:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	@ 0x120
 8002c8e:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002c92:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8002c96:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8002c9a:	1dda      	adds	r2, r3, #7
 8002c9c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002ca0:	4413      	add	r3, r2
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8002cac:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8002cb0:	f04f 0200 	mov.w	r2, #0
 8002cb4:	f04f 0300 	mov.w	r3, #0
 8002cb8:	f8d7 4118 	ldr.w	r4, [r7, #280]	@ 0x118
 8002cbc:	0623      	lsls	r3, r4, #24
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	ea40 0402 	orr.w	r4, r0, r2
 8002cc4:	f8c7 4110 	str.w	r4, [r7, #272]	@ 0x110
 8002cc8:	430b      	orrs	r3, r1
 8002cca:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8002cce:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	@ 0x110
 8002cd2:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      this->x = u_x.real;
 8002cd6:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8002cda:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8002cde:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 8002ce2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8002ce6:	3308      	adds	r3, #8
 8002ce8:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8002cec:	f04f 0200 	mov.w	r2, #0
 8002cf0:	f04f 0300 	mov.w	r3, #0
 8002cf4:	e9c7 2364 	strd	r2, r3, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002cf8:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8002cfc:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 8002d00:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002d04:	4413      	add	r3, r2
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002d10:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 8002d14:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	@ 0x108
 8002d18:	461a      	mov	r2, r3
 8002d1a:	4302      	orrs	r2, r0
 8002d1c:	f8c7 2100 	str.w	r2, [r7, #256]	@ 0x100
 8002d20:	4623      	mov	r3, r4
 8002d22:	430b      	orrs	r3, r1
 8002d24:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002d28:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	@ 0x100
 8002d2c:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002d30:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8002d34:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8002d38:	1c5a      	adds	r2, r3, #1
 8002d3a:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002d3e:	4413      	add	r3, r2
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	2200      	movs	r2, #0
 8002d46:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002d4a:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 8002d4e:	f04f 0200 	mov.w	r2, #0
 8002d52:	f04f 0300 	mov.w	r3, #0
 8002d56:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	@ 0xf8
 8002d5a:	464c      	mov	r4, r9
 8002d5c:	0223      	lsls	r3, r4, #8
 8002d5e:	46c4      	mov	ip, r8
 8002d60:	ea43 631c 	orr.w	r3, r3, ip, lsr #24
 8002d64:	4644      	mov	r4, r8
 8002d66:	0222      	lsls	r2, r4, #8
 8002d68:	ea40 0402 	orr.w	r4, r0, r2
 8002d6c:	f8c7 40f0 	str.w	r4, [r7, #240]	@ 0xf0
 8002d70:	430b      	orrs	r3, r1
 8002d72:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002d76:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	@ 0xf0
 8002d7a:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002d7e:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8002d82:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8002d86:	1c9a      	adds	r2, r3, #2
 8002d88:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002d8c:	4413      	add	r3, r2
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	2200      	movs	r2, #0
 8002d94:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002d98:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002d9c:	f04f 0200 	mov.w	r2, #0
 8002da0:	f04f 0300 	mov.w	r3, #0
 8002da4:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8002da8:	464c      	mov	r4, r9
 8002daa:	0423      	lsls	r3, r4, #16
 8002dac:	46c4      	mov	ip, r8
 8002dae:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
 8002db2:	4644      	mov	r4, r8
 8002db4:	0422      	lsls	r2, r4, #16
 8002db6:	ea40 0402 	orr.w	r4, r0, r2
 8002dba:	f8c7 40e0 	str.w	r4, [r7, #224]	@ 0xe0
 8002dbe:	430b      	orrs	r3, r1
 8002dc0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002dc4:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	@ 0xe0
 8002dc8:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002dcc:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8002dd0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8002dd4:	1cda      	adds	r2, r3, #3
 8002dd6:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002dda:	4413      	add	r3, r2
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	2200      	movs	r2, #0
 8002de2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002de6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002dea:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8002dee:	4623      	mov	r3, r4
 8002df0:	0a1b      	lsrs	r3, r3, #8
 8002df2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002df6:	4623      	mov	r3, r4
 8002df8:	061b      	lsls	r3, r3, #24
 8002dfa:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002dfe:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	@ 0xd0
 8002e02:	461a      	mov	r2, r3
 8002e04:	4302      	orrs	r2, r0
 8002e06:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8002e0a:	4623      	mov	r3, r4
 8002e0c:	430b      	orrs	r3, r1
 8002e0e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002e12:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	@ 0xc8
 8002e16:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002e1a:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8002e1e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8002e22:	1d1a      	adds	r2, r3, #4
 8002e24:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002e28:	4413      	add	r3, r2
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002e34:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002e38:	f04f 0200 	mov.w	r2, #0
 8002e3c:	f04f 0300 	mov.w	r3, #0
 8002e40:	f8d7 40c0 	ldr.w	r4, [r7, #192]	@ 0xc0
 8002e44:	0023      	movs	r3, r4
 8002e46:	2200      	movs	r2, #0
 8002e48:	ea40 0402 	orr.w	r4, r0, r2
 8002e4c:	f8c7 40b8 	str.w	r4, [r7, #184]	@ 0xb8
 8002e50:	430b      	orrs	r3, r1
 8002e52:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002e56:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	@ 0xb8
 8002e5a:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002e5e:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8002e62:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8002e66:	1d5a      	adds	r2, r3, #5
 8002e68:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002e6c:	4413      	add	r3, r2
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	2200      	movs	r2, #0
 8002e74:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002e78:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8002e7c:	f04f 0200 	mov.w	r2, #0
 8002e80:	f04f 0300 	mov.w	r3, #0
 8002e84:	f8d7 40b0 	ldr.w	r4, [r7, #176]	@ 0xb0
 8002e88:	0223      	lsls	r3, r4, #8
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	ea40 0402 	orr.w	r4, r0, r2
 8002e90:	f8c7 40a8 	str.w	r4, [r7, #168]	@ 0xa8
 8002e94:	430b      	orrs	r3, r1
 8002e96:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002e9a:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	@ 0xa8
 8002e9e:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002ea2:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8002ea6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8002eaa:	1d9a      	adds	r2, r3, #6
 8002eac:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002eb0:	4413      	add	r3, r2
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002ebc:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002ec0:	f04f 0200 	mov.w	r2, #0
 8002ec4:	f04f 0300 	mov.w	r3, #0
 8002ec8:	f8d7 40a0 	ldr.w	r4, [r7, #160]	@ 0xa0
 8002ecc:	0423      	lsls	r3, r4, #16
 8002ece:	2200      	movs	r2, #0
 8002ed0:	ea40 0402 	orr.w	r4, r0, r2
 8002ed4:	f8c7 4098 	str.w	r4, [r7, #152]	@ 0x98
 8002ed8:	430b      	orrs	r3, r1
 8002eda:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002ede:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	@ 0x98
 8002ee2:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002ee6:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8002eea:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8002eee:	1dda      	adds	r2, r3, #7
 8002ef0:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002ef4:	4413      	add	r3, r2
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	2200      	movs	r2, #0
 8002efc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002f00:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002f04:	f04f 0200 	mov.w	r2, #0
 8002f08:	f04f 0300 	mov.w	r3, #0
 8002f0c:	f8d7 4090 	ldr.w	r4, [r7, #144]	@ 0x90
 8002f10:	0623      	lsls	r3, r4, #24
 8002f12:	2200      	movs	r2, #0
 8002f14:	ea40 0402 	orr.w	r4, r0, r2
 8002f18:	f8c7 4088 	str.w	r4, [r7, #136]	@ 0x88
 8002f1c:	430b      	orrs	r3, r1
 8002f1e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002f22:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	@ 0x88
 8002f26:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      this->y = u_y.real;
 8002f2a:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8002f2e:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8002f32:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8002f36:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8002f3a:	3308      	adds	r3, #8
 8002f3c:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8002f40:	f04f 0200 	mov.w	r2, #0
 8002f44:	f04f 0300 	mov.w	r3, #0
 8002f48:	e9c7 2362 	strd	r2, r3, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002f4c:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8002f50:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 8002f54:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002f58:	4413      	add	r3, r2
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002f64:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002f68:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	@ 0x80
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	4302      	orrs	r2, r0
 8002f70:	67ba      	str	r2, [r7, #120]	@ 0x78
 8002f72:	4623      	mov	r3, r4
 8002f74:	430b      	orrs	r3, r1
 8002f76:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002f78:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	@ 0x78
 8002f7c:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002f80:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8002f84:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8002f88:	1c5a      	adds	r2, r3, #1
 8002f8a:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002f8e:	4413      	add	r3, r2
 8002f90:	781b      	ldrb	r3, [r3, #0]
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	2200      	movs	r2, #0
 8002f96:	673b      	str	r3, [r7, #112]	@ 0x70
 8002f98:	677a      	str	r2, [r7, #116]	@ 0x74
 8002f9a:	f04f 0200 	mov.w	r2, #0
 8002f9e:	f04f 0300 	mov.w	r3, #0
 8002fa2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002fa6:	464c      	mov	r4, r9
 8002fa8:	0223      	lsls	r3, r4, #8
 8002faa:	46c4      	mov	ip, r8
 8002fac:	ea43 631c 	orr.w	r3, r3, ip, lsr #24
 8002fb0:	4644      	mov	r4, r8
 8002fb2:	0222      	lsls	r2, r4, #8
 8002fb4:	ea40 0402 	orr.w	r4, r0, r2
 8002fb8:	66bc      	str	r4, [r7, #104]	@ 0x68
 8002fba:	430b      	orrs	r3, r1
 8002fbc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002fbe:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	@ 0x68
 8002fc2:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002fc6:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8002fca:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8002fce:	1c9a      	adds	r2, r3, #2
 8002fd0:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002fd4:	4413      	add	r3, r2
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	2200      	movs	r2, #0
 8002fdc:	663b      	str	r3, [r7, #96]	@ 0x60
 8002fde:	667a      	str	r2, [r7, #100]	@ 0x64
 8002fe0:	f04f 0200 	mov.w	r2, #0
 8002fe4:	f04f 0300 	mov.w	r3, #0
 8002fe8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002fec:	464c      	mov	r4, r9
 8002fee:	0423      	lsls	r3, r4, #16
 8002ff0:	46c4      	mov	ip, r8
 8002ff2:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
 8002ff6:	4644      	mov	r4, r8
 8002ff8:	0422      	lsls	r2, r4, #16
 8002ffa:	ea40 0402 	orr.w	r4, r0, r2
 8002ffe:	65bc      	str	r4, [r7, #88]	@ 0x58
 8003000:	430b      	orrs	r3, r1
 8003002:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003004:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	@ 0x58
 8003008:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800300c:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8003010:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8003014:	1cda      	adds	r2, r3, #3
 8003016:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800301a:	4413      	add	r3, r2
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	b2db      	uxtb	r3, r3
 8003020:	2200      	movs	r2, #0
 8003022:	653b      	str	r3, [r7, #80]	@ 0x50
 8003024:	657a      	str	r2, [r7, #84]	@ 0x54
 8003026:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 800302a:	4623      	mov	r3, r4
 800302c:	0a1b      	lsrs	r3, r3, #8
 800302e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003030:	4623      	mov	r3, r4
 8003032:	061b      	lsls	r3, r3, #24
 8003034:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003036:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 800303a:	461a      	mov	r2, r3
 800303c:	4302      	orrs	r2, r0
 800303e:	643a      	str	r2, [r7, #64]	@ 0x40
 8003040:	4623      	mov	r3, r4
 8003042:	430b      	orrs	r3, r1
 8003044:	647b      	str	r3, [r7, #68]	@ 0x44
 8003046:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 800304a:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800304e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8003052:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8003056:	1d1a      	adds	r2, r3, #4
 8003058:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800305c:	4413      	add	r3, r2
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	b2db      	uxtb	r3, r3
 8003062:	2200      	movs	r2, #0
 8003064:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003066:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003068:	f04f 0200 	mov.w	r2, #0
 800306c:	f04f 0300 	mov.w	r3, #0
 8003070:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 8003072:	0023      	movs	r3, r4
 8003074:	2200      	movs	r2, #0
 8003076:	ea40 0402 	orr.w	r4, r0, r2
 800307a:	633c      	str	r4, [r7, #48]	@ 0x30
 800307c:	430b      	orrs	r3, r1
 800307e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003080:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8003084:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003088:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 800308c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8003090:	1d5a      	adds	r2, r3, #5
 8003092:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003096:	4413      	add	r3, r2
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	b2db      	uxtb	r3, r3
 800309c:	2200      	movs	r2, #0
 800309e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80030a0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80030a2:	f04f 0200 	mov.w	r2, #0
 80030a6:	f04f 0300 	mov.w	r3, #0
 80030aa:	6abc      	ldr	r4, [r7, #40]	@ 0x28
 80030ac:	0223      	lsls	r3, r4, #8
 80030ae:	2200      	movs	r2, #0
 80030b0:	ea40 0402 	orr.w	r4, r0, r2
 80030b4:	623c      	str	r4, [r7, #32]
 80030b6:	430b      	orrs	r3, r1
 80030b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80030ba:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80030be:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80030c2:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 80030c6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80030ca:	3306      	adds	r3, #6
 80030cc:	f8d7 2180 	ldr.w	r2, [r7, #384]	@ 0x180
 80030d0:	4413      	add	r3, r2
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	2200      	movs	r2, #0
 80030d8:	61bb      	str	r3, [r7, #24]
 80030da:	61fa      	str	r2, [r7, #28]
 80030dc:	f04f 0200 	mov.w	r2, #0
 80030e0:	f04f 0300 	mov.w	r3, #0
 80030e4:	69bc      	ldr	r4, [r7, #24]
 80030e6:	0423      	lsls	r3, r4, #16
 80030e8:	2200      	movs	r2, #0
 80030ea:	ea40 0402 	orr.w	r4, r0, r2
 80030ee:	613c      	str	r4, [r7, #16]
 80030f0:	430b      	orrs	r3, r1
 80030f2:	617b      	str	r3, [r7, #20]
 80030f4:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80030f8:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80030fc:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8003100:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8003104:	3307      	adds	r3, #7
 8003106:	f8d7 2180 	ldr.w	r2, [r7, #384]	@ 0x180
 800310a:	4413      	add	r3, r2
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	b2db      	uxtb	r3, r3
 8003110:	2200      	movs	r2, #0
 8003112:	60bb      	str	r3, [r7, #8]
 8003114:	60fa      	str	r2, [r7, #12]
 8003116:	f04f 0200 	mov.w	r2, #0
 800311a:	f04f 0300 	mov.w	r3, #0
 800311e:	68bc      	ldr	r4, [r7, #8]
 8003120:	0623      	lsls	r3, r4, #24
 8003122:	2200      	movs	r2, #0
 8003124:	ea40 0402 	orr.w	r4, r0, r2
 8003128:	603c      	str	r4, [r7, #0]
 800312a:	430b      	orrs	r3, r1
 800312c:	607b      	str	r3, [r7, #4]
 800312e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003132:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      this->z = u_z.real;
 8003136:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 800313a:	f8d7 1184 	ldr.w	r1, [r7, #388]	@ 0x184
 800313e:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 8003142:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8003146:	3308      	adds	r3, #8
 8003148:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
     return offset;
 800314c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
    }
 8003150:	4618      	mov	r0, r3
 8003152:	f507 77d6 	add.w	r7, r7, #428	@ 0x1ac
 8003156:	46bd      	mov	sp, r7
 8003158:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800315c:	4770      	bx	lr
	...

08003160 <_ZN13geometry_msgs7Vector37getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Vector3"; };
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	4b02      	ldr	r3, [pc, #8]	@ (8003174 <_ZN13geometry_msgs7Vector37getTypeEv+0x14>)
 800316a:	4618      	mov	r0, r3
 800316c:	370c      	adds	r7, #12
 800316e:	46bd      	mov	sp, r7
 8003170:	bc80      	pop	{r7}
 8003172:	4770      	bx	lr
 8003174:	08008810 	.word	0x08008810

08003178 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    virtual const char * getMD5() override { return "4a842b65f413084dc2b10fb484ea7f17"; };
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	4b02      	ldr	r3, [pc, #8]	@ (800318c <_ZN13geometry_msgs7Vector36getMD5Ev+0x14>)
 8003182:	4618      	mov	r0, r3
 8003184:	370c      	adds	r7, #12
 8003186:	46bd      	mov	sp, r7
 8003188:	bc80      	pop	{r7}
 800318a:	4770      	bx	lr
 800318c:	08008828 	.word	0x08008828

08003190 <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	4618      	mov	r0, r3
 800319c:	f7fe fa7a 	bl	8001694 <_ZN3ros3MsgC1Ev>
 80031a0:	4a08      	ldr	r2, [pc, #32]	@ (80031c4 <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	601a      	str	r2, [r3, #0]
      linear(),
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	3308      	adds	r3, #8
 80031aa:	4618      	mov	r0, r3
 80031ac:	f7ff fade 	bl	800276c <_ZN13geometry_msgs7Vector3C1Ev>
      angular()
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	3328      	adds	r3, #40	@ 0x28
 80031b4:	4618      	mov	r0, r3
 80031b6:	f7ff fad9 	bl	800276c <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4618      	mov	r0, r3
 80031be:	3708      	adds	r7, #8
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	08008964 	.word	0x08008964

080031c8 <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80031d2:	2300      	movs	r3, #0
 80031d4:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f103 0008 	add.w	r0, r3, #8
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	683a      	ldr	r2, [r7, #0]
 80031e0:	4413      	add	r3, r2
 80031e2:	4619      	mov	r1, r3
 80031e4:	f7ff faea 	bl	80027bc <_ZNK13geometry_msgs7Vector39serializeEPh>
 80031e8:	4602      	mov	r2, r0
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	4413      	add	r3, r2
 80031ee:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	683a      	ldr	r2, [r7, #0]
 80031fa:	4413      	add	r3, r2
 80031fc:	4619      	mov	r1, r3
 80031fe:	f7ff fadd 	bl	80027bc <_ZNK13geometry_msgs7Vector39serializeEPh>
 8003202:	4602      	mov	r2, r0
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	4413      	add	r3, r2
 8003208:	60fb      	str	r3, [r7, #12]
      return offset;
 800320a:	68fb      	ldr	r3, [r7, #12]
    }
 800320c:	4618      	mov	r0, r3
 800320e:	3710      	adds	r7, #16
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}

08003214 <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8003214:	b580      	push	{r7, lr}
 8003216:	b084      	sub	sp, #16
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800321e:	2300      	movs	r3, #0
 8003220:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f103 0008 	add.w	r0, r3, #8
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	683a      	ldr	r2, [r7, #0]
 800322c:	4413      	add	r3, r2
 800322e:	4619      	mov	r1, r3
 8003230:	f7ff fc36 	bl	8002aa0 <_ZN13geometry_msgs7Vector311deserializeEPh>
 8003234:	4602      	mov	r2, r0
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	4413      	add	r3, r2
 800323a:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	683a      	ldr	r2, [r7, #0]
 8003246:	4413      	add	r3, r2
 8003248:	4619      	mov	r1, r3
 800324a:	f7ff fc29 	bl	8002aa0 <_ZN13geometry_msgs7Vector311deserializeEPh>
 800324e:	4602      	mov	r2, r0
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	4413      	add	r3, r2
 8003254:	60fb      	str	r3, [r7, #12]
     return offset;
 8003256:	68fb      	ldr	r3, [r7, #12]
    }
 8003258:	4618      	mov	r0, r3
 800325a:	3710      	adds	r7, #16
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}

08003260 <_ZN13geometry_msgs5Twist7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Twist"; };
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	4b02      	ldr	r3, [pc, #8]	@ (8003274 <_ZN13geometry_msgs5Twist7getTypeEv+0x14>)
 800326a:	4618      	mov	r0, r3
 800326c:	370c      	adds	r7, #12
 800326e:	46bd      	mov	sp, r7
 8003270:	bc80      	pop	{r7}
 8003272:	4770      	bx	lr
 8003274:	0800884c 	.word	0x0800884c

08003278 <_ZN13geometry_msgs5Twist6getMD5Ev>:
    virtual const char * getMD5() override { return "9f195f881246fdfa2798d1d3eebca84a"; };
 8003278:	b480      	push	{r7}
 800327a:	b083      	sub	sp, #12
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	4b02      	ldr	r3, [pc, #8]	@ (800328c <_ZN13geometry_msgs5Twist6getMD5Ev+0x14>)
 8003282:	4618      	mov	r0, r3
 8003284:	370c      	adds	r7, #12
 8003286:	46bd      	mov	sp, r7
 8003288:	bc80      	pop	{r7}
 800328a:	4770      	bx	lr
 800328c:	08008860 	.word	0x08008860

08003290 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	4a04      	ldr	r2, [pc, #16]	@ (80032ac <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	601a      	str	r2, [r3, #0]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4618      	mov	r0, r3
 80032a2:	370c      	adds	r7, #12
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bc80      	pop	{r7}
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	080089c4 	.word	0x080089c4

080032b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b082      	sub	sp, #8
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	4618      	mov	r0, r3
 80032bc:	f7ff ffe8 	bl	8003290 <_ZN3ros15NodeHandleBase_C1Ev>
 80032c0:	4a41      	ldr	r2, [pc, #260]	@ (80033c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EEC1Ev+0x118>)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	601a      	str	r2, [r3, #0]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	3304      	adds	r3, #4
 80032ca:	4618      	mov	r0, r3
 80032cc:	f7ff f990 	bl	80025f0 <_ZN13STM32HardwareC1Ev>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2200      	movs	r2, #0
 80032d4:	609a      	str	r2, [r3, #8]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	60da      	str	r2, [r3, #12]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	611a      	str	r2, [r3, #16]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	615a      	str	r2, [r3, #20]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	3318      	adds	r3, #24
 80032ec:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80032f0:	2100      	movs	r1, #0
 80032f2:	4618      	mov	r0, r3
 80032f4:	f005 f95a 	bl	80085ac <memset>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80032fe:	3318      	adds	r3, #24
 8003300:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003304:	2100      	movs	r1, #0
 8003306:	4618      	mov	r0, r3
 8003308:	f005 f950 	bl	80085ac <memset>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003312:	3318      	adds	r3, #24
 8003314:	2228      	movs	r2, #40	@ 0x28
 8003316:	2100      	movs	r1, #0
 8003318:	4618      	mov	r0, r3
 800331a:	f005 f947 	bl	80085ac <memset>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003324:	3340      	adds	r3, #64	@ 0x40
 8003326:	2228      	movs	r2, #40	@ 0x28
 8003328:	2100      	movs	r1, #0
 800332a:	4618      	mov	r0, r3
 800332c:	f005 f93e 	bl	80085ac <memset>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003336:	461a      	mov	r2, r3
 8003338:	2300      	movs	r3, #0
 800333a:	6693      	str	r3, [r2, #104]	@ 0x68
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003342:	461a      	mov	r2, r3
 8003344:	2300      	movs	r3, #0
 8003346:	66d3      	str	r3, [r2, #108]	@ 0x6c
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800334e:	461a      	mov	r2, r3
 8003350:	2300      	movs	r3, #0
 8003352:	6713      	str	r3, [r2, #112]	@ 0x70
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800335a:	461a      	mov	r2, r3
 800335c:	2300      	movs	r3, #0
 800335e:	6753      	str	r3, [r2, #116]	@ 0x74
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003366:	461a      	mov	r2, r3
 8003368:	2300      	movs	r3, #0
 800336a:	6793      	str	r3, [r2, #120]	@ 0x78
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003372:	2200      	movs	r2, #0
 8003374:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800337e:	461a      	mov	r2, r3
 8003380:	2300      	movs	r3, #0
 8003382:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800338c:	461a      	mov	r2, r3
 800338e:	2300      	movs	r3, #0
 8003390:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800339a:	461a      	mov	r2, r3
 800339c:	2300      	movs	r3, #0
 800339e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f503 5302 	add.w	r3, r3, #8320	@ 0x2080
 80033b4:	3310      	adds	r3, #16
 80033b6:	4618      	mov	r0, r3
 80033b8:	f7fe fcd2 	bl	8001d60 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	4618      	mov	r0, r3
 80033c0:	3708      	adds	r7, #8
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	08008950 	.word	0x08008950

080033cc <_Z10constraintfff>:

#define MAX(x, y) (((x) > (y)) ? (x) : (y))
#define MIN(x, y) (((x) < (y)) ? (x) : (y))

float constraint(float var, float min, float max)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	60f8      	str	r0, [r7, #12]
 80033d4:	60b9      	str	r1, [r7, #8]
 80033d6:	607a      	str	r2, [r7, #4]
	if (var < min)	return min;
 80033d8:	68b9      	ldr	r1, [r7, #8]
 80033da:	68f8      	ldr	r0, [r7, #12]
 80033dc:	f7fd fd2e 	bl	8000e3c <__aeabi_fcmplt>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d001      	beq.n	80033ea <_Z10constraintfff+0x1e>
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	e009      	b.n	80033fe <_Z10constraintfff+0x32>
	if (var > max) 	return max;
 80033ea:	6879      	ldr	r1, [r7, #4]
 80033ec:	68f8      	ldr	r0, [r7, #12]
 80033ee:	f7fd fd43 	bl	8000e78 <__aeabi_fcmpgt>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d001      	beq.n	80033fc <_Z10constraintfff+0x30>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	e000      	b.n	80033fe <_Z10constraintfff+0x32>
	else 			return var;
 80033fc:	68fb      	ldr	r3, [r7, #12]
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3710      	adds	r7, #16
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
	...

08003408 <HAL_UART_TxCpltCallback>:

uint16_t prev_tick[NUM_OF_MOTOR] = { 0 };
float rpm[NUM_OF_MOTOR] = { 0.0f };

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
	comm_rosserial.set_tx_cplt();
 8003410:	4803      	ldr	r0, [pc, #12]	@ (8003420 <HAL_UART_TxCpltCallback+0x18>)
 8003412:	f7ff f8cb 	bl	80025ac <_ZN10SerialComm11set_tx_cpltEv>
}
 8003416:	bf00      	nop
 8003418:	3708      	adds	r7, #8
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	200001e8 	.word	0x200001e8

08003424 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
	comm_rosserial.reset_rbuf();
 800342c:	4803      	ldr	r0, [pc, #12]	@ (800343c <HAL_UART_RxCpltCallback+0x18>)
 800342e:	f7ff f8cb 	bl	80025c8 <_ZN10SerialComm10reset_rbufEv>
}
 8003432:	bf00      	nop
 8003434:	3708      	adds	r7, #8
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	200001e8 	.word	0x200001e8

08003440 <commandVelocityCallback>:
	}
}

/* CALLBACK FUNCTIONS START */
void commandVelocityCallback(const geometry_msgs::Twist& cmd_vel_msg)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b082      	sub	sp, #8
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
	goal_vel[linear_x] = cmd_vel_msg.linear.x;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800344e:	4610      	mov	r0, r2
 8003450:	4619      	mov	r1, r3
 8003452:	f7fd f9f7 	bl	8000844 <__aeabi_d2f>
 8003456:	4603      	mov	r3, r0
 8003458:	4a0c      	ldr	r2, [pc, #48]	@ (800348c <commandVelocityCallback+0x4c>)
 800345a:	6013      	str	r3, [r2, #0]
	goal_vel[linear_y] = cmd_vel_msg.linear.y;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003462:	4610      	mov	r0, r2
 8003464:	4619      	mov	r1, r3
 8003466:	f7fd f9ed 	bl	8000844 <__aeabi_d2f>
 800346a:	4603      	mov	r3, r0
 800346c:	4a07      	ldr	r2, [pc, #28]	@ (800348c <commandVelocityCallback+0x4c>)
 800346e:	6053      	str	r3, [r2, #4]
	goal_vel[angular_z] = cmd_vel_msg.angular.z;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8003476:	4610      	mov	r0, r2
 8003478:	4619      	mov	r1, r3
 800347a:	f7fd f9e3 	bl	8000844 <__aeabi_d2f>
 800347e:	4603      	mov	r3, r0
 8003480:	4a02      	ldr	r2, [pc, #8]	@ (800348c <commandVelocityCallback+0x4c>)
 8003482:	6093      	str	r3, [r2, #8]
}
 8003484:	bf00      	nop
 8003486:	3708      	adds	r7, #8
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}
 800348c:	20004380 	.word	0x20004380

08003490 <ros_setup>:
/* CALLBACK FUNCTIONS END */

void ros_setup()
{
 8003490:	b580      	push	{r7, lr}
 8003492:	af00      	add	r7, sp, #0
	nh.initNode();
 8003494:	480c      	ldr	r0, [pc, #48]	@ (80034c8 <ros_setup+0x38>)
 8003496:	f000 faad 	bl	80039f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8initNodeEv>

	nh.subscribe(sub_cmd_vel);
 800349a:	490c      	ldr	r1, [pc, #48]	@ (80034cc <ros_setup+0x3c>)
 800349c:	480a      	ldr	r0, [pc, #40]	@ (80034c8 <ros_setup+0x38>)
 800349e:	f000 face 	bl	8003a3e <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE9subscribeERNS_11Subscriber_E>
	nh.advertise(pub_FL_rpm);
 80034a2:	490b      	ldr	r1, [pc, #44]	@ (80034d0 <ros_setup+0x40>)
 80034a4:	4808      	ldr	r0, [pc, #32]	@ (80034c8 <ros_setup+0x38>)
 80034a6:	f000 faf4 	bl	8003a92 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE9advertiseERNS_9PublisherE>
	nh.advertise(pub_FR_rpm);
 80034aa:	490a      	ldr	r1, [pc, #40]	@ (80034d4 <ros_setup+0x44>)
 80034ac:	4806      	ldr	r0, [pc, #24]	@ (80034c8 <ros_setup+0x38>)
 80034ae:	f000 faf0 	bl	8003a92 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE9advertiseERNS_9PublisherE>
	nh.advertise(pub_BL_rpm);
 80034b2:	4909      	ldr	r1, [pc, #36]	@ (80034d8 <ros_setup+0x48>)
 80034b4:	4804      	ldr	r0, [pc, #16]	@ (80034c8 <ros_setup+0x38>)
 80034b6:	f000 faec 	bl	8003a92 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE9advertiseERNS_9PublisherE>
	nh.advertise(pub_BR_rpm);
 80034ba:	4908      	ldr	r1, [pc, #32]	@ (80034dc <ros_setup+0x4c>)
 80034bc:	4802      	ldr	r0, [pc, #8]	@ (80034c8 <ros_setup+0x38>)
 80034be:	f000 fae8 	bl	8003a92 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE9advertiseERNS_9PublisherE>
}
 80034c2:	bf00      	nop
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	200021f4 	.word	0x200021f4
 80034cc:	200042b0 	.word	0x200042b0
 80034d0:	20004330 	.word	0x20004330
 80034d4:	20004344 	.word	0x20004344
 80034d8:	20004358 	.word	0x20004358
 80034dc:	2000436c 	.word	0x2000436c

080034e0 <setup>:

void setup()
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b082      	sub	sp, #8
 80034e4:	af00      	add	r7, sp, #0
	ros_setup();
 80034e6:	f7ff ffd3 	bl	8003490 <ros_setup>

	mecabot_motor_init();
 80034ea:	f001 f84d 	bl	8004588 <_Z18mecabot_motor_initv>
	mecabot_encoder_init();
 80034ee:	f001 f88d 	bl	800460c <_Z20mecabot_encoder_initv>

	for (int i=0; i<NUM_OF_MOTOR; i++)
 80034f2:	2300      	movs	r3, #0
 80034f4:	607b      	str	r3, [r7, #4]
 80034f6:	e009      	b.n	800350c <setup+0x2c>
	{
		mecabot_motor_start(mecabot_motor[i]);
 80034f8:	4a08      	ldr	r2, [pc, #32]	@ (800351c <setup+0x3c>)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003500:	4618      	mov	r0, r3
 8003502:	f001 f8f1 	bl	80046e8 <_Z19mecabot_motor_startP7Motor_t>
	for (int i=0; i<NUM_OF_MOTOR; i++)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	3301      	adds	r3, #1
 800350a:	607b      	str	r3, [r7, #4]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2b03      	cmp	r3, #3
 8003510:	ddf2      	ble.n	80034f8 <setup+0x18>
	}
}
 8003512:	bf00      	nop
 8003514:	bf00      	nop
 8003516:	3708      	adds	r7, #8
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}
 800351c:	200043c0 	.word	0x200043c0

08003520 <loop>:

void loop()
{
 8003520:	b580      	push	{r7, lr}
 8003522:	af00      	add	r7, sp, #0
	t = static_cast<double>(millis());
 8003524:	f001 f828 	bl	8004578 <_Z6millisv>
 8003528:	4603      	mov	r3, r0
 800352a:	4618      	mov	r0, r3
 800352c:	f7fd f8f0 	bl	8000710 <__aeabi_ui2d>
 8003530:	4602      	mov	r2, r0
 8003532:	460b      	mov	r3, r1
 8003534:	4610      	mov	r0, r2
 8003536:	4619      	mov	r1, r3
 8003538:	f7fd f964 	bl	8000804 <__aeabi_d2uiz>
 800353c:	4603      	mov	r3, r0
 800353e:	4a14      	ldr	r2, [pc, #80]	@ (8003590 <loop+0x70>)
 8003540:	6013      	str	r3, [r2, #0]

	/* Motor control */
	if ((t - t_previous[motor_control_event]) >= dt[motor_control_event])
 8003542:	4b13      	ldr	r3, [pc, #76]	@ (8003590 <loop+0x70>)
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	4b13      	ldr	r3, [pc, #76]	@ (8003594 <loop+0x74>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	1ad2      	subs	r2, r2, r3
 800354c:	4b12      	ldr	r3, [pc, #72]	@ (8003598 <loop+0x78>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	429a      	cmp	r2, r3
 8003552:	d307      	bcc.n	8003564 <loop+0x44>
	{
		calculateWheelVelocity();
 8003554:	f000 f824 	bl	80035a0 <calculateWheelVelocity>
		controlMotors();
 8003558:	f000 f980 	bl	800385c <controlMotors>
		t_previous[motor_control_event] = t;
 800355c:	4b0c      	ldr	r3, [pc, #48]	@ (8003590 <loop+0x70>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a0c      	ldr	r2, [pc, #48]	@ (8003594 <loop+0x74>)
 8003562:	6013      	str	r3, [r2, #0]
	}
	/* Wheel velocity feedback */
    if ((t - t_previous[wheel_velocity_feedback_event]) >= dt[wheel_velocity_feedback_event])
 8003564:	4b0a      	ldr	r3, [pc, #40]	@ (8003590 <loop+0x70>)
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	4b0a      	ldr	r3, [pc, #40]	@ (8003594 <loop+0x74>)
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	1ad2      	subs	r2, r2, r3
 800356e:	4b0a      	ldr	r3, [pc, #40]	@ (8003598 <loop+0x78>)
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	429a      	cmp	r2, r3
 8003574:	d307      	bcc.n	8003586 <loop+0x66>
	{
    	calculateRpm();
 8003576:	f000 f8c5 	bl	8003704 <calculateRpm>
    	publishRpm();
 800357a:	f000 f9a3 	bl	80038c4 <publishRpm>
		t_previous[wheel_velocity_feedback_event] = t;
 800357e:	4b04      	ldr	r3, [pc, #16]	@ (8003590 <loop+0x70>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a04      	ldr	r2, [pc, #16]	@ (8003594 <loop+0x74>)
 8003584:	6053      	str	r3, [r2, #4]
	}

	nh.spinOnce();
 8003586:	4805      	ldr	r0, [pc, #20]	@ (800359c <loop+0x7c>)
 8003588:	f000 fab0 	bl	8003aec <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv>
}
 800358c:	bf00      	nop
 800358e:	bd80      	pop	{r7, pc}
 8003590:	200043a4 	.word	0x200043a4
 8003594:	2000439c 	.word	0x2000439c
 8003598:	20000000 	.word	0x20000000
 800359c:	200021f4 	.word	0x200021f4

080035a0 <calculateWheelVelocity>:

/* DATA HANDLE FUNCTIONS START */
void calculateWheelVelocity(void)
{
 80035a0:	b590      	push	{r4, r7, lr}
 80035a2:	b083      	sub	sp, #12
 80035a4:	af00      	add	r7, sp, #0
	float C = (WHEEL_SEPARATION_X + WHEEL_SEPARATION_Y) / 2;
 80035a6:	4b54      	ldr	r3, [pc, #336]	@ (80036f8 <calculateWheelVelocity+0x158>)
 80035a8:	607b      	str	r3, [r7, #4]
	// Inverse kinematics
	wheel_angular_vel[front_left] = INV_WHEEL_RADIUS *
									(goal_vel[linear_x] - goal_vel[linear_y] - C * goal_vel[angular_z]);
 80035aa:	4b54      	ldr	r3, [pc, #336]	@ (80036fc <calculateWheelVelocity+0x15c>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a53      	ldr	r2, [pc, #332]	@ (80036fc <calculateWheelVelocity+0x15c>)
 80035b0:	6852      	ldr	r2, [r2, #4]
 80035b2:	4611      	mov	r1, r2
 80035b4:	4618      	mov	r0, r3
 80035b6:	f7fd f999 	bl	80008ec <__aeabi_fsub>
 80035ba:	4603      	mov	r3, r0
 80035bc:	461c      	mov	r4, r3
 80035be:	4b4f      	ldr	r3, [pc, #316]	@ (80036fc <calculateWheelVelocity+0x15c>)
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	6879      	ldr	r1, [r7, #4]
 80035c4:	4618      	mov	r0, r3
 80035c6:	f7fd fa9b 	bl	8000b00 <__aeabi_fmul>
 80035ca:	4603      	mov	r3, r0
 80035cc:	4619      	mov	r1, r3
 80035ce:	4620      	mov	r0, r4
 80035d0:	f7fd f98c 	bl	80008ec <__aeabi_fsub>
 80035d4:	4603      	mov	r3, r0
 80035d6:	4618      	mov	r0, r3
 80035d8:	f7fd f8bc 	bl	8000754 <__aeabi_f2d>
	wheel_angular_vel[front_left] = INV_WHEEL_RADIUS *
 80035dc:	a344      	add	r3, pc, #272	@ (adr r3, 80036f0 <calculateWheelVelocity+0x150>)
 80035de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e2:	f7fc fe29 	bl	8000238 <__aeabi_dmul>
 80035e6:	4602      	mov	r2, r0
 80035e8:	460b      	mov	r3, r1
 80035ea:	4610      	mov	r0, r2
 80035ec:	4619      	mov	r1, r3
 80035ee:	f7fd f929 	bl	8000844 <__aeabi_d2f>
 80035f2:	4603      	mov	r3, r0
 80035f4:	4a42      	ldr	r2, [pc, #264]	@ (8003700 <calculateWheelVelocity+0x160>)
 80035f6:	6013      	str	r3, [r2, #0]
	wheel_angular_vel[front_right] = INV_WHEEL_RADIUS *
									(goal_vel[linear_x] + goal_vel[linear_y] + C * goal_vel[angular_z]);
 80035f8:	4b40      	ldr	r3, [pc, #256]	@ (80036fc <calculateWheelVelocity+0x15c>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a3f      	ldr	r2, [pc, #252]	@ (80036fc <calculateWheelVelocity+0x15c>)
 80035fe:	6852      	ldr	r2, [r2, #4]
 8003600:	4611      	mov	r1, r2
 8003602:	4618      	mov	r0, r3
 8003604:	f7fd f974 	bl	80008f0 <__addsf3>
 8003608:	4603      	mov	r3, r0
 800360a:	461c      	mov	r4, r3
 800360c:	4b3b      	ldr	r3, [pc, #236]	@ (80036fc <calculateWheelVelocity+0x15c>)
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	6879      	ldr	r1, [r7, #4]
 8003612:	4618      	mov	r0, r3
 8003614:	f7fd fa74 	bl	8000b00 <__aeabi_fmul>
 8003618:	4603      	mov	r3, r0
 800361a:	4619      	mov	r1, r3
 800361c:	4620      	mov	r0, r4
 800361e:	f7fd f967 	bl	80008f0 <__addsf3>
 8003622:	4603      	mov	r3, r0
 8003624:	4618      	mov	r0, r3
 8003626:	f7fd f895 	bl	8000754 <__aeabi_f2d>
	wheel_angular_vel[front_right] = INV_WHEEL_RADIUS *
 800362a:	a331      	add	r3, pc, #196	@ (adr r3, 80036f0 <calculateWheelVelocity+0x150>)
 800362c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003630:	f7fc fe02 	bl	8000238 <__aeabi_dmul>
 8003634:	4602      	mov	r2, r0
 8003636:	460b      	mov	r3, r1
 8003638:	4610      	mov	r0, r2
 800363a:	4619      	mov	r1, r3
 800363c:	f7fd f902 	bl	8000844 <__aeabi_d2f>
 8003640:	4603      	mov	r3, r0
 8003642:	4a2f      	ldr	r2, [pc, #188]	@ (8003700 <calculateWheelVelocity+0x160>)
 8003644:	6053      	str	r3, [r2, #4]
	wheel_angular_vel[back_left] = INV_WHEEL_RADIUS *
									(goal_vel[linear_x] + goal_vel[linear_y] - C * goal_vel[angular_z]);
 8003646:	4b2d      	ldr	r3, [pc, #180]	@ (80036fc <calculateWheelVelocity+0x15c>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a2c      	ldr	r2, [pc, #176]	@ (80036fc <calculateWheelVelocity+0x15c>)
 800364c:	6852      	ldr	r2, [r2, #4]
 800364e:	4611      	mov	r1, r2
 8003650:	4618      	mov	r0, r3
 8003652:	f7fd f94d 	bl	80008f0 <__addsf3>
 8003656:	4603      	mov	r3, r0
 8003658:	461c      	mov	r4, r3
 800365a:	4b28      	ldr	r3, [pc, #160]	@ (80036fc <calculateWheelVelocity+0x15c>)
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	6879      	ldr	r1, [r7, #4]
 8003660:	4618      	mov	r0, r3
 8003662:	f7fd fa4d 	bl	8000b00 <__aeabi_fmul>
 8003666:	4603      	mov	r3, r0
 8003668:	4619      	mov	r1, r3
 800366a:	4620      	mov	r0, r4
 800366c:	f7fd f93e 	bl	80008ec <__aeabi_fsub>
 8003670:	4603      	mov	r3, r0
 8003672:	4618      	mov	r0, r3
 8003674:	f7fd f86e 	bl	8000754 <__aeabi_f2d>
	wheel_angular_vel[back_left] = INV_WHEEL_RADIUS *
 8003678:	a31d      	add	r3, pc, #116	@ (adr r3, 80036f0 <calculateWheelVelocity+0x150>)
 800367a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800367e:	f7fc fddb 	bl	8000238 <__aeabi_dmul>
 8003682:	4602      	mov	r2, r0
 8003684:	460b      	mov	r3, r1
 8003686:	4610      	mov	r0, r2
 8003688:	4619      	mov	r1, r3
 800368a:	f7fd f8db 	bl	8000844 <__aeabi_d2f>
 800368e:	4603      	mov	r3, r0
 8003690:	4a1b      	ldr	r2, [pc, #108]	@ (8003700 <calculateWheelVelocity+0x160>)
 8003692:	6093      	str	r3, [r2, #8]
	wheel_angular_vel[back_right] = INV_WHEEL_RADIUS *
									(goal_vel[linear_x] - goal_vel[linear_y] + C * goal_vel[angular_z]);
 8003694:	4b19      	ldr	r3, [pc, #100]	@ (80036fc <calculateWheelVelocity+0x15c>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a18      	ldr	r2, [pc, #96]	@ (80036fc <calculateWheelVelocity+0x15c>)
 800369a:	6852      	ldr	r2, [r2, #4]
 800369c:	4611      	mov	r1, r2
 800369e:	4618      	mov	r0, r3
 80036a0:	f7fd f924 	bl	80008ec <__aeabi_fsub>
 80036a4:	4603      	mov	r3, r0
 80036a6:	461c      	mov	r4, r3
 80036a8:	4b14      	ldr	r3, [pc, #80]	@ (80036fc <calculateWheelVelocity+0x15c>)
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	6879      	ldr	r1, [r7, #4]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f7fd fa26 	bl	8000b00 <__aeabi_fmul>
 80036b4:	4603      	mov	r3, r0
 80036b6:	4619      	mov	r1, r3
 80036b8:	4620      	mov	r0, r4
 80036ba:	f7fd f919 	bl	80008f0 <__addsf3>
 80036be:	4603      	mov	r3, r0
 80036c0:	4618      	mov	r0, r3
 80036c2:	f7fd f847 	bl	8000754 <__aeabi_f2d>
	wheel_angular_vel[back_right] = INV_WHEEL_RADIUS *
 80036c6:	a30a      	add	r3, pc, #40	@ (adr r3, 80036f0 <calculateWheelVelocity+0x150>)
 80036c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036cc:	f7fc fdb4 	bl	8000238 <__aeabi_dmul>
 80036d0:	4602      	mov	r2, r0
 80036d2:	460b      	mov	r3, r1
 80036d4:	4610      	mov	r0, r2
 80036d6:	4619      	mov	r1, r3
 80036d8:	f7fd f8b4 	bl	8000844 <__aeabi_d2f>
 80036dc:	4603      	mov	r3, r0
 80036de:	4a08      	ldr	r2, [pc, #32]	@ (8003700 <calculateWheelVelocity+0x160>)
 80036e0:	60d3      	str	r3, [r2, #12]
}
 80036e2:	bf00      	nop
 80036e4:	370c      	adds	r7, #12
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd90      	pop	{r4, r7, pc}
 80036ea:	bf00      	nop
 80036ec:	f3af 8000 	nop.w
 80036f0:	aaaaaaab 	.word	0xaaaaaaab
 80036f4:	4040aaaa 	.word	0x4040aaaa
 80036f8:	3e018937 	.word	0x3e018937
 80036fc:	20004380 	.word	0x20004380
 8003700:	2000438c 	.word	0x2000438c

08003704 <calculateRpm>:
void calculateRpm(void)
{
 8003704:	b590      	push	{r4, r7, lr}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
	uint16_t d_tick = 0;
 800370a:	2300      	movs	r3, #0
 800370c:	80fb      	strh	r3, [r7, #6]
	for (int i = 0; i < NUM_OF_MOTOR; ++i)
 800370e:	2300      	movs	r3, #0
 8003710:	603b      	str	r3, [r7, #0]
 8003712:	e087      	b.n	8003824 <calculateRpm+0x120>
	{
		if (encoder[i]->tick < prev_tick[i])
 8003714:	4a48      	ldr	r2, [pc, #288]	@ (8003838 <calculateRpm+0x134>)
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800371c:	881a      	ldrh	r2, [r3, #0]
 800371e:	4947      	ldr	r1, [pc, #284]	@ (800383c <calculateRpm+0x138>)
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003726:	429a      	cmp	r2, r3
 8003728:	d213      	bcs.n	8003752 <calculateRpm+0x4e>
		{
			d_tick = encoder[i]->tick + (encoder[i]->max_count - prev_tick[i]);
 800372a:	4a43      	ldr	r2, [pc, #268]	@ (8003838 <calculateRpm+0x134>)
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003732:	881a      	ldrh	r2, [r3, #0]
 8003734:	4940      	ldr	r1, [pc, #256]	@ (8003838 <calculateRpm+0x134>)
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	b299      	uxth	r1, r3
 8003740:	483e      	ldr	r0, [pc, #248]	@ (800383c <calculateRpm+0x138>)
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8003748:	1acb      	subs	r3, r1, r3
 800374a:	b29b      	uxth	r3, r3
 800374c:	4413      	add	r3, r2
 800374e:	80fb      	strh	r3, [r7, #6]
 8003750:	e00a      	b.n	8003768 <calculateRpm+0x64>
		}
		else
		{
			d_tick = encoder[i]->tick - prev_tick[i];
 8003752:	4a39      	ldr	r2, [pc, #228]	@ (8003838 <calculateRpm+0x134>)
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800375a:	881a      	ldrh	r2, [r3, #0]
 800375c:	4937      	ldr	r1, [pc, #220]	@ (800383c <calculateRpm+0x138>)
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	80fb      	strh	r3, [r7, #6]
		}
		prev_tick[i] = encoder[i]->tick;
 8003768:	4a33      	ldr	r2, [pc, #204]	@ (8003838 <calculateRpm+0x134>)
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003770:	8819      	ldrh	r1, [r3, #0]
 8003772:	4a32      	ldr	r2, [pc, #200]	@ (800383c <calculateRpm+0x138>)
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		// Get the number of rotation
		rpm[i] = (float)d_tick / ENCODER_RESOLUTION;
 800377a:	88fb      	ldrh	r3, [r7, #6]
 800377c:	4618      	mov	r0, r3
 800377e:	f7fd f967 	bl	8000a50 <__aeabi_ui2f>
 8003782:	4603      	mov	r3, r0
 8003784:	492e      	ldr	r1, [pc, #184]	@ (8003840 <calculateRpm+0x13c>)
 8003786:	4618      	mov	r0, r3
 8003788:	f7fd fa6e 	bl	8000c68 <__aeabi_fdiv>
 800378c:	4603      	mov	r3, r0
 800378e:	4619      	mov	r1, r3
 8003790:	4a2c      	ldr	r2, [pc, #176]	@ (8003844 <calculateRpm+0x140>)
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		// Get the rotation per second
		rpm[i] /= (dt[wheel_velocity_feedback_event] / 1000.0f);
 8003798:	4a2a      	ldr	r2, [pc, #168]	@ (8003844 <calculateRpm+0x140>)
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80037a0:	4b29      	ldr	r3, [pc, #164]	@ (8003848 <calculateRpm+0x144>)
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	4618      	mov	r0, r3
 80037a6:	f7fd f953 	bl	8000a50 <__aeabi_ui2f>
 80037aa:	4603      	mov	r3, r0
 80037ac:	4927      	ldr	r1, [pc, #156]	@ (800384c <calculateRpm+0x148>)
 80037ae:	4618      	mov	r0, r3
 80037b0:	f7fd fa5a 	bl	8000c68 <__aeabi_fdiv>
 80037b4:	4603      	mov	r3, r0
 80037b6:	4619      	mov	r1, r3
 80037b8:	4620      	mov	r0, r4
 80037ba:	f7fd fa55 	bl	8000c68 <__aeabi_fdiv>
 80037be:	4603      	mov	r3, r0
 80037c0:	4619      	mov	r1, r3
 80037c2:	4a20      	ldr	r2, [pc, #128]	@ (8003844 <calculateRpm+0x140>)
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		// Get the rotation per minute
		rpm[i] *= 60;
 80037ca:	4a1e      	ldr	r2, [pc, #120]	@ (8003844 <calculateRpm+0x140>)
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037d2:	491f      	ldr	r1, [pc, #124]	@ (8003850 <calculateRpm+0x14c>)
 80037d4:	4618      	mov	r0, r3
 80037d6:	f7fd f993 	bl	8000b00 <__aeabi_fmul>
 80037da:	4603      	mov	r3, r0
 80037dc:	4619      	mov	r1, r3
 80037de:	4a19      	ldr	r2, [pc, #100]	@ (8003844 <calculateRpm+0x140>)
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		// Apply Low Pass filter
		rpm[i] = FO_IIR_Compute(filter, rpm[i]);
 80037e6:	4a17      	ldr	r2, [pc, #92]	@ (8003844 <calculateRpm+0x140>)
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037ee:	4619      	mov	r1, r3
 80037f0:	4818      	ldr	r0, [pc, #96]	@ (8003854 <calculateRpm+0x150>)
 80037f2:	f7fd fb9a 	bl	8000f2a <FO_IIR_Compute>
 80037f6:	4602      	mov	r2, r0
 80037f8:	4912      	ldr	r1, [pc, #72]	@ (8003844 <calculateRpm+0x140>)
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		rpm_msg[i].data = static_cast<uint16_t>(rpm[i]);
 8003800:	4a10      	ldr	r2, [pc, #64]	@ (8003844 <calculateRpm+0x140>)
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003808:	4618      	mov	r0, r3
 800380a:	f7fd fb3f 	bl	8000e8c <__aeabi_f2uiz>
 800380e:	4603      	mov	r3, r0
 8003810:	b299      	uxth	r1, r3
 8003812:	4a11      	ldr	r2, [pc, #68]	@ (8003858 <calculateRpm+0x154>)
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	00db      	lsls	r3, r3, #3
 8003818:	4413      	add	r3, r2
 800381a:	460a      	mov	r2, r1
 800381c:	809a      	strh	r2, [r3, #4]
	for (int i = 0; i < NUM_OF_MOTOR; ++i)
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	3301      	adds	r3, #1
 8003822:	603b      	str	r3, [r7, #0]
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	2b03      	cmp	r3, #3
 8003828:	f77f af74 	ble.w	8003714 <calculateRpm+0x10>
	}
}
 800382c:	bf00      	nop
 800382e:	bf00      	nop
 8003830:	370c      	adds	r7, #12
 8003832:	46bd      	mov	sp, r7
 8003834:	bd90      	pop	{r4, r7, pc}
 8003836:	bf00      	nop
 8003838:	200043d0 	.word	0x200043d0
 800383c:	200043a8 	.word	0x200043a8
 8003840:	41a00000 	.word	0x41a00000
 8003844:	200043b0 	.word	0x200043b0
 8003848:	20000000 	.word	0x20000000
 800384c:	447a0000 	.word	0x447a0000
 8003850:	42700000 	.word	0x42700000
 8003854:	200043e0 	.word	0x200043e0
 8003858:	20004310 	.word	0x20004310

0800385c <controlMotors>:
/* DATA HANDLE FUNCTIONS END */

/* CONTROL FUNCTIONS START */
void controlMotors(void)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b082      	sub	sp, #8
 8003860:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_OF_MOTOR; i++)
 8003862:	2300      	movs	r3, #0
 8003864:	607b      	str	r3, [r7, #4]
 8003866:	e01c      	b.n	80038a2 <controlMotors+0x46>
	{
		wheel_angular_vel[i] = constraint(wheel_angular_vel[i], WHEEL_MIN_ANGULAR_VELOCITY, WHEEL_MAX_ANGULAR_VELOCITY);
 8003868:	4a12      	ldr	r2, [pc, #72]	@ (80038b4 <controlMotors+0x58>)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003870:	4a11      	ldr	r2, [pc, #68]	@ (80038b8 <controlMotors+0x5c>)
 8003872:	4912      	ldr	r1, [pc, #72]	@ (80038bc <controlMotors+0x60>)
 8003874:	4618      	mov	r0, r3
 8003876:	f7ff fda9 	bl	80033cc <_Z10constraintfff>
 800387a:	4602      	mov	r2, r0
 800387c:	490d      	ldr	r1, [pc, #52]	@ (80038b4 <controlMotors+0x58>)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		mecabot_motor_set_angular_velocity(mecabot_motor[i], wheel_angular_vel[i]);
 8003884:	4a0e      	ldr	r2, [pc, #56]	@ (80038c0 <controlMotors+0x64>)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800388c:	4909      	ldr	r1, [pc, #36]	@ (80038b4 <controlMotors+0x58>)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003894:	4619      	mov	r1, r3
 8003896:	4610      	mov	r0, r2
 8003898:	f000 ff32 	bl	8004700 <_Z34mecabot_motor_set_angular_velocityP7Motor_tf>
	for (int i = 0; i < NUM_OF_MOTOR; i++)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	3301      	adds	r3, #1
 80038a0:	607b      	str	r3, [r7, #4]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2b03      	cmp	r3, #3
 80038a6:	dddf      	ble.n	8003868 <controlMotors+0xc>
	}
}
 80038a8:	bf00      	nop
 80038aa:	bf00      	nop
 80038ac:	3708      	adds	r7, #8
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	2000438c 	.word	0x2000438c
 80038b8:	40c90fdb 	.word	0x40c90fdb
 80038bc:	c0c90fdb 	.word	0xc0c90fdb
 80038c0:	200043c0 	.word	0x200043c0

080038c4 <publishRpm>:
/* CONTROL FUNCTIONS END */

/* PUBLISH FUNCTIONS START */
void publishRpm(void)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	af00      	add	r7, sp, #0
	pub_FL_rpm.publish(&rpm_msg[front_left]);
 80038c8:	4908      	ldr	r1, [pc, #32]	@ (80038ec <publishRpm+0x28>)
 80038ca:	4809      	ldr	r0, [pc, #36]	@ (80038f0 <publishRpm+0x2c>)
 80038cc:	f7fe fd26 	bl	800231c <_ZN3ros9Publisher7publishEPKNS_3MsgE>
	pub_FR_rpm.publish(&rpm_msg[front_right]);
 80038d0:	4908      	ldr	r1, [pc, #32]	@ (80038f4 <publishRpm+0x30>)
 80038d2:	4809      	ldr	r0, [pc, #36]	@ (80038f8 <publishRpm+0x34>)
 80038d4:	f7fe fd22 	bl	800231c <_ZN3ros9Publisher7publishEPKNS_3MsgE>
	pub_FL_rpm.publish(&rpm_msg[back_left]);
 80038d8:	4908      	ldr	r1, [pc, #32]	@ (80038fc <publishRpm+0x38>)
 80038da:	4805      	ldr	r0, [pc, #20]	@ (80038f0 <publishRpm+0x2c>)
 80038dc:	f7fe fd1e 	bl	800231c <_ZN3ros9Publisher7publishEPKNS_3MsgE>
	pub_FL_rpm.publish(&rpm_msg[back_right]);
 80038e0:	4907      	ldr	r1, [pc, #28]	@ (8003900 <publishRpm+0x3c>)
 80038e2:	4803      	ldr	r0, [pc, #12]	@ (80038f0 <publishRpm+0x2c>)
 80038e4:	f7fe fd1a 	bl	800231c <_ZN3ros9Publisher7publishEPKNS_3MsgE>
}
 80038e8:	bf00      	nop
 80038ea:	bd80      	pop	{r7, pc}
 80038ec:	20004310 	.word	0x20004310
 80038f0:	20004330 	.word	0x20004330
 80038f4:	20004318 	.word	0x20004318
 80038f8:	20004344 	.word	0x20004344
 80038fc:	20004320 	.word	0x20004320
 8003900:	20004328 	.word	0x20004328

08003904 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8003904:	b480      	push	{r7}
 8003906:	b085      	sub	sp, #20
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 800390e:	2300      	movs	r3, #0
 8003910:	60fb      	str	r3, [r7, #12]
 8003912:	e00c      	b.n	800392e <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x2a>
      arr[i] = (var >> (8 * i));
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	00db      	lsls	r3, r3, #3
 8003918:	683a      	ldr	r2, [r7, #0]
 800391a:	fa22 f103 	lsr.w	r1, r2, r3
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	4413      	add	r3, r2
 8003924:	b2ca      	uxtb	r2, r1
 8003926:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	3301      	adds	r3, #1
 800392c:	60fb      	str	r3, [r7, #12]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2b03      	cmp	r3, #3
 8003932:	d9ef      	bls.n	8003914 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x10>
  }
 8003934:	bf00      	nop
 8003936:	bf00      	nop
 8003938:	3714      	adds	r7, #20
 800393a:	46bd      	mov	sp, r7
 800393c:	bc80      	pop	{r7}
 800393e:	4770      	bx	lr

08003940 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8003940:	b480      	push	{r7}
 8003942:	b085      	sub	sp, #20
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003950:	2300      	movs	r3, #0
 8003952:	60fb      	str	r3, [r7, #12]
 8003954:	e010      	b.n	8003978 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x38>
      var |= (arr[i] << (8 * i));
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	6839      	ldr	r1, [r7, #0]
 800395c:	68fa      	ldr	r2, [r7, #12]
 800395e:	440a      	add	r2, r1
 8003960:	7812      	ldrb	r2, [r2, #0]
 8003962:	4611      	mov	r1, r2
 8003964:	68fa      	ldr	r2, [r7, #12]
 8003966:	00d2      	lsls	r2, r2, #3
 8003968:	fa01 f202 	lsl.w	r2, r1, r2
 800396c:	431a      	orrs	r2, r3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	3301      	adds	r3, #1
 8003976:	60fb      	str	r3, [r7, #12]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2b03      	cmp	r3, #3
 800397c:	d9eb      	bls.n	8003956 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x16>
  }
 800397e:	bf00      	nop
 8003980:	bf00      	nop
 8003982:	3714      	adds	r7, #20
 8003984:	46bd      	mov	sp, r7
 8003986:	bc80      	pop	{r7}
 8003988:	4770      	bx	lr
	...

0800398c <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 800398c:	b480      	push	{r7}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	4a04      	ldr	r2, [pc, #16]	@ (80039a8 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	601a      	str	r2, [r3, #0]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4618      	mov	r0, r3
 800399e:	370c      	adds	r7, #12
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bc80      	pop	{r7}
 80039a4:	4770      	bx	lr
 80039a6:	bf00      	nop
 80039a8:	080089ac 	.word	0x080089ac

080039ac <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	60b9      	str	r1, [r7, #8]
 80039b6:	607a      	str	r2, [r7, #4]
 80039b8:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	4618      	mov	r0, r3
 80039be:	f7ff ffe5 	bl	800398c <_ZN3ros11Subscriber_C1Ev>
 80039c2:	4a0b      	ldr	r2, [pc, #44]	@ (80039f0 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei+0x44>)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	601a      	str	r2, [r3, #0]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	3310      	adds	r3, #16
 80039cc:	4618      	mov	r0, r3
 80039ce:	f7ff fbdf 	bl	8003190 <_ZN13geometry_msgs5TwistC1Ev>
    cb_(cb),
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	659a      	str	r2, [r3, #88]	@ 0x58
    endpoint_(endpoint)
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	683a      	ldr	r2, [r7, #0]
 80039dc:	65da      	str	r2, [r3, #92]	@ 0x5c
  {
    topic_ = topic_name;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	68ba      	ldr	r2, [r7, #8]
 80039e2:	609a      	str	r2, [r3, #8]
  };
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	4618      	mov	r0, r3
 80039e8:	3710      	adds	r7, #16
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	08008938 	.word	0x08008938

080039f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8initNodeEv>:
  {
    return &hardware_;
  }

  /* Start serial, initialize buffers */
  void initNode()
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	3304      	adds	r3, #4
 8003a00:	4618      	mov	r0, r3
 8003a02:	f7fe fe05 	bl	8002610 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	2300      	movs	r3, #0
 8003a10:	6693      	str	r3, [r2, #104]	@ 0x68
    bytes_ = 0;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003a18:	461a      	mov	r2, r3
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	66d3      	str	r3, [r2, #108]	@ 0x6c
    index_ = 0;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003a24:	461a      	mov	r2, r3
 8003a26:	2300      	movs	r3, #0
 8003a28:	6753      	str	r3, [r2, #116]	@ 0x74
    topic_ = 0;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003a30:	461a      	mov	r2, r3
 8003a32:	2300      	movs	r3, #0
 8003a34:	6713      	str	r3, [r2, #112]	@ 0x70
  };
 8003a36:	bf00      	nop
 8003a38:	3708      	adds	r7, #8
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}

08003a3e <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE9subscribeERNS_11Subscriber_E>:
    }
    return false;
  }

  /* Register a new subscriber */
  bool subscribe(Subscriber_& s)
 8003a3e:	b480      	push	{r7}
 8003a40:	b085      	sub	sp, #20
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	6078      	str	r0, [r7, #4]
 8003a46:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003a48:	2300      	movs	r3, #0
 8003a4a:	60fb      	str	r3, [r7, #12]
 8003a4c:	e018      	b.n	8003a80 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE9subscribeERNS_11Subscriber_E+0x42>
    {
      if (subscribers[i] == 0) // empty slot
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	68fa      	ldr	r2, [r7, #12]
 8003a52:	f502 6201 	add.w	r2, r2, #2064	@ 0x810
 8003a56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d10d      	bne.n	8003a7a <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE9subscribeERNS_11Subscriber_E+0x3c>
      {
        subscribers[i] = &s;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	68fa      	ldr	r2, [r7, #12]
 8003a62:	f502 6201 	add.w	r2, r2, #2064	@ 0x810
 8003a66:	6839      	ldr	r1, [r7, #0]
 8003a68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	605a      	str	r2, [r3, #4]
        return true;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e006      	b.n	8003a88 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE9subscribeERNS_11Subscriber_E+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	60fb      	str	r3, [r7, #12]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2b09      	cmp	r3, #9
 8003a84:	dde3      	ble.n	8003a4e <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE9subscribeERNS_11Subscriber_E+0x10>
      }
    }
    return false;
 8003a86:	2300      	movs	r3, #0
  }
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3714      	adds	r7, #20
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bc80      	pop	{r7}
 8003a90:	4770      	bx	lr

08003a92 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE9advertiseERNS_9PublisherE>:
  bool advertise(Publisher & p)
 8003a92:	b480      	push	{r7}
 8003a94:	b085      	sub	sp, #20
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	6078      	str	r0, [r7, #4]
 8003a9a:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	60fb      	str	r3, [r7, #12]
 8003aa0:	e01b      	b.n	8003ada <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE9advertiseERNS_9PublisherE+0x48>
      if (publishers[i] == 0) // empty slot
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	68fa      	ldr	r2, [r7, #12]
 8003aa6:	f602 0206 	addw	r2, r2, #2054	@ 0x806
 8003aaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d110      	bne.n	8003ad4 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE9advertiseERNS_9PublisherE+0x42>
        publishers[i] = &p;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	68fa      	ldr	r2, [r7, #12]
 8003ab6:	f602 0206 	addw	r2, r2, #2054	@ 0x806
 8003aba:	6839      	ldr	r1, [r7, #0]
 8003abc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f103 026e 	add.w	r2, r3, #110	@ 0x6e
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	60da      	str	r2, [r3, #12]
        return true;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e006      	b.n	8003ae2 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE9advertiseERNS_9PublisherE+0x50>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	3301      	adds	r3, #1
 8003ad8:	60fb      	str	r3, [r7, #12]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2b09      	cmp	r3, #9
 8003ade:	dde0      	ble.n	8003aa2 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE9advertiseERNS_9PublisherE+0x10>
    return false;
 8003ae0:	2300      	movs	r3, #0
  }
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3714      	adds	r7, #20
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bc80      	pop	{r7}
 8003aea:	4770      	bx	lr

08003aec <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv>:
  virtual int spinOnce() override
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	3304      	adds	r3, #4
 8003af8:	4618      	mov	r0, r3
 8003afa:	f7fe fdb5 	bl	8002668 <_ZN13STM32Hardware4timeEv>
 8003afe:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003b06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b0a:	68fa      	ldr	r2, [r7, #12]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d905      	bls.n	8003b22 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x36>
      configured_ = false;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
    if (mode_ != MODE_FIRST_FF)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003b28:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d00d      	beq.n	8003b4a <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x5e>
      if (c_time > last_msg_timeout_time)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b38:	68fa      	ldr	r2, [r7, #12]
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d905      	bls.n	8003b4a <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x5e>
        mode_ = MODE_FIRST_FF;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003b44:	461a      	mov	r2, r3
 8003b46:	2300      	movs	r3, #0
 8003b48:	6693      	str	r3, [r2, #104]	@ 0x68
      if (spin_timeout_ > 0)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	695b      	ldr	r3, [r3, #20]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d013      	beq.n	8003b7a <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x8e>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	3304      	adds	r3, #4
 8003b56:	4618      	mov	r0, r3
 8003b58:	f7fe fd86 	bl	8002668 <_ZN13STM32Hardware4timeEv>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	1ad2      	subs	r2, r2, r3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	695b      	ldr	r3, [r3, #20]
 8003b66:	429a      	cmp	r2, r3
 8003b68:	bf8c      	ite	hi
 8003b6a:	2301      	movhi	r3, #1
 8003b6c:	2300      	movls	r3, #0
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d002      	beq.n	8003b7a <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x8e>
          return SPIN_TIMEOUT;
 8003b74:	f06f 0301 	mvn.w	r3, #1
 8003b78:	e1e8      	b.n	8003f4c <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x460>
      int data = hardware_.read();
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	3304      	adds	r3, #4
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f7fe fd53 	bl	800262a <_ZN13STM32Hardware4readEv>
 8003b84:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	f2c0 81c1 	blt.w	8003f10 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x424>
      checksum_ += data;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003b94:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	4413      	add	r3, r2
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8003ba0:	6793      	str	r3, [r2, #120]	@ 0x78
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003ba8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003baa:	2b07      	cmp	r3, #7
 8003bac:	d124      	bne.n	8003bf8 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x10c>
        message_in[index_++] = data;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003bb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bb6:	1c5a      	adds	r2, r3, #1
 8003bb8:	6879      	ldr	r1, [r7, #4]
 8003bba:	f501 5100 	add.w	r1, r1, #8192	@ 0x2000
 8003bbe:	674a      	str	r2, [r1, #116]	@ 0x74
 8003bc0:	68ba      	ldr	r2, [r7, #8]
 8003bc2:	b2d1      	uxtb	r1, r2
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	4413      	add	r3, r2
 8003bc8:	460a      	mov	r2, r1
 8003bca:	761a      	strb	r2, [r3, #24]
        bytes_--;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003bd2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003bd4:	3b01      	subs	r3, #1
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8003bdc:	66d3      	str	r3, [r2, #108]	@ 0x6c
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003be4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d1af      	bne.n	8003b4a <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x5e>
          mode_ = MODE_MSG_CHECKSUM;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	2308      	movs	r3, #8
 8003bf4:	6693      	str	r3, [r2, #104]	@ 0x68
 8003bf6:	e7a8      	b.n	8003b4a <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x5e>
      else if (mode_ == MODE_FIRST_FF)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003bfe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d12e      	bne.n	8003c62 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x176>
        if (data == 0xff)
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	2bff      	cmp	r3, #255	@ 0xff
 8003c08:	d110      	bne.n	8003c2c <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x140>
          mode_++;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003c10:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c12:	3301      	adds	r3, #1
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8003c1a:	6693      	str	r3, [r2, #104]	@ 0x68
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	3314      	adds	r3, #20
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8003c26:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8003c2a:	e78e      	b.n	8003b4a <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x5e>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	3304      	adds	r3, #4
 8003c30:	4618      	mov	r0, r3
 8003c32:	f7fe fd19 	bl	8002668 <_ZN13STM32Hardware4timeEv>
 8003c36:	4602      	mov	r2, r0
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c40:	4293      	cmp	r3, r2
 8003c42:	bf8c      	ite	hi
 8003c44:	2301      	movhi	r3, #1
 8003c46:	2300      	movls	r3, #0
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	f43f af7d 	beq.w	8003b4a <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x5e>
          configured_ = false;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003c56:	2200      	movs	r2, #0
 8003c58:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
          return SPIN_TIMEOUT;
 8003c5c:	f06f 0301 	mvn.w	r3, #1
 8003c60:	e174      	b.n	8003f4c <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x460>
      else if (mode_ == MODE_PROTOCOL_VER)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003c68:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d11e      	bne.n	8003cac <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x1c0>
        if (data == PROTOCOL_VER)
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	2bfe      	cmp	r3, #254	@ 0xfe
 8003c72:	d109      	bne.n	8003c88 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x19c>
          mode_++;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003c7a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c7c:	3301      	adds	r3, #1
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8003c84:	6693      	str	r3, [r2, #104]	@ 0x68
 8003c86:	e760      	b.n	8003b4a <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x5e>
          mode_ = MODE_FIRST_FF;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003c8e:	461a      	mov	r2, r3
 8003c90:	2300      	movs	r3, #0
 8003c92:	6693      	str	r3, [r2, #104]	@ 0x68
          if (configured_ == false)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003c9a:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	f47f af53 	bne.w	8003b4a <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x5e>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f000 f955 	bl	8003f54 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE15requestSyncTimeEv>
 8003caa:	e74e      	b.n	8003b4a <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x5e>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003cb2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003cb4:	2b02      	cmp	r3, #2
 8003cb6:	d11b      	bne.n	8003cf0 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x204>
        bytes_ = data;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	66d3      	str	r3, [r2, #108]	@ 0x6c
        index_ = 0;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003cca:	461a      	mov	r2, r3
 8003ccc:	2300      	movs	r3, #0
 8003cce:	6753      	str	r3, [r2, #116]	@ 0x74
        mode_++;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003cd6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003cd8:	3301      	adds	r3, #1
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8003ce0:	6693      	str	r3, [r2, #104]	@ 0x68
        checksum_ = data;               /* first byte for calculating size checksum */
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003ce8:	461a      	mov	r2, r3
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	6793      	str	r3, [r2, #120]	@ 0x78
 8003cee:	e72c      	b.n	8003b4a <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x5e>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003cf6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003cf8:	2b03      	cmp	r3, #3
 8003cfa:	d114      	bne.n	8003d26 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x23a>
        bytes_ += data << 8;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003d02:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	021b      	lsls	r3, r3, #8
 8003d08:	4413      	add	r3, r2
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8003d10:	66d3      	str	r3, [r2, #108]	@ 0x6c
        mode_++;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003d18:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d1a:	3301      	adds	r3, #1
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8003d22:	6693      	str	r3, [r2, #104]	@ 0x68
 8003d24:	e711      	b.n	8003b4a <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x5e>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003d2c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d2e:	2b04      	cmp	r3, #4
 8003d30:	d11b      	bne.n	8003d6a <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x27e>
        if ((checksum_ % 256) == 255)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003d38:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d3a:	425a      	negs	r2, r3
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	b2d2      	uxtb	r2, r2
 8003d40:	bf58      	it	pl
 8003d42:	4253      	negpl	r3, r2
 8003d44:	2bff      	cmp	r3, #255	@ 0xff
 8003d46:	d109      	bne.n	8003d5c <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x270>
          mode_++;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003d4e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d50:	3301      	adds	r3, #1
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8003d58:	6693      	str	r3, [r2, #104]	@ 0x68
 8003d5a:	e6f6      	b.n	8003b4a <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x5e>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003d62:	461a      	mov	r2, r3
 8003d64:	2300      	movs	r3, #0
 8003d66:	6693      	str	r3, [r2, #104]	@ 0x68
 8003d68:	e6ef      	b.n	8003b4a <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x5e>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003d70:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d72:	2b05      	cmp	r3, #5
 8003d74:	d115      	bne.n	8003da2 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x2b6>
        topic_ = data;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	6713      	str	r3, [r2, #112]	@ 0x70
        mode_++;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003d88:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d8a:	3301      	adds	r3, #1
 8003d8c:	687a      	ldr	r2, [r7, #4]
 8003d8e:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8003d92:	6693      	str	r3, [r2, #104]	@ 0x68
        checksum_ = data;               /* first byte included in checksum */
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	6793      	str	r3, [r2, #120]	@ 0x78
 8003da0:	e6d3      	b.n	8003b4a <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x5e>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003da8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003daa:	2b06      	cmp	r3, #6
 8003dac:	d11e      	bne.n	8003dec <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x300>
        topic_ += data << 8;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003db4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	021b      	lsls	r3, r3, #8
 8003dba:	4413      	add	r3, r2
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8003dc2:	6713      	str	r3, [r2, #112]	@ 0x70
        mode_ = MODE_MESSAGE;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003dca:	461a      	mov	r2, r3
 8003dcc:	2307      	movs	r3, #7
 8003dce:	6693      	str	r3, [r2, #104]	@ 0x68
        if (bytes_ == 0)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003dd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	f47f aeb6 	bne.w	8003b4a <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x5e>
          mode_ = MODE_MSG_CHECKSUM;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003de4:	461a      	mov	r2, r3
 8003de6:	2308      	movs	r3, #8
 8003de8:	6693      	str	r3, [r2, #104]	@ 0x68
 8003dea:	e6ae      	b.n	8003b4a <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x5e>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003df2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003df4:	2b08      	cmp	r3, #8
 8003df6:	f47f aea8 	bne.w	8003b4a <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x5e>
        mode_ = MODE_FIRST_FF;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003e00:	461a      	mov	r2, r3
 8003e02:	2300      	movs	r3, #0
 8003e04:	6693      	str	r3, [r2, #104]	@ 0x68
        if ((checksum_ % 256) == 255)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003e0c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e0e:	425a      	negs	r2, r3
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	b2d2      	uxtb	r2, r2
 8003e14:	bf58      	it	pl
 8003e16:	4253      	negpl	r3, r2
 8003e18:	2bff      	cmp	r3, #255	@ 0xff
 8003e1a:	f47f ae96 	bne.w	8003b4a <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x5e>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003e24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d116      	bne.n	8003e58 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x36c>
            requestSyncTime();
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f000 f892 	bl	8003f54 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE15requestSyncTimeEv>
            negotiateTopics();
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f000 f8ac 	bl	8003f8e <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
            last_sync_receive_time = c_time;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
            return SPIN_ERR;
 8003e52:	f04f 33ff 	mov.w	r3, #4294967295
 8003e56:	e079      	b.n	8003f4c <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x460>
          else if (topic_ == TopicInfo::ID_TIME)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003e5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e60:	2b0a      	cmp	r3, #10
 8003e62:	d106      	bne.n	8003e72 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x386>
            syncTime(message_in);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	3318      	adds	r3, #24
 8003e68:	4619      	mov	r1, r3
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f000 f968 	bl	8004140 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8syncTimeEPh>
 8003e70:	e66b      	b.n	8003b4a <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x5e>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003e78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e7a:	2b06      	cmp	r3, #6
 8003e7c:	d110      	bne.n	8003ea0 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x3b4>
            req_param_resp.deserialize(message_in);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f503 5302 	add.w	r3, r3, #8320	@ 0x2080
 8003e84:	3310      	adds	r3, #16
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	3218      	adds	r2, #24
 8003e8a:	4611      	mov	r1, r2
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f7fe f8a6 	bl	8001fde <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003e98:	2201      	movs	r2, #1
 8003e9a:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
 8003e9e:	e654      	b.n	8003b4a <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x5e>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003ea6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ea8:	2b0b      	cmp	r3, #11
 8003eaa:	d106      	bne.n	8003eba <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x3ce>
            configured_ = false;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
 8003eb8:	e647      	b.n	8003b4a <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x5e>
            if (subscribers[topic_ - 100])
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003ec0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ec2:	f1a3 0264 	sub.w	r2, r3, #100	@ 0x64
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f502 6201 	add.w	r2, r2, #2064	@ 0x810
 8003ecc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	f43f ae3a 	beq.w	8003b4a <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x5e>
              subscribers[topic_ - 100]->callback(message_in);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003edc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ede:	f1a3 0264 	sub.w	r2, r3, #100	@ 0x64
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f502 6201 	add.w	r2, r2, #2064	@ 0x810
 8003ee8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003ef2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ef4:	f1a3 0264 	sub.w	r2, r3, #100	@ 0x64
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	f502 6201 	add.w	r2, r2, #2064	@ 0x810
 8003efe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	3218      	adds	r2, #24
 8003f0a:	4611      	mov	r1, r2
 8003f0c:	4798      	blx	r3
    while (true)
 8003f0e:	e61c      	b.n	8003b4a <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x5e>
        break;
 8003f10:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003f18:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d014      	beq.n	8003f4a <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x45e>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003f26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f2a:	68fa      	ldr	r2, [r7, #12]
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d909      	bls.n	8003f4a <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8spinOnceEv+0x45e>
      requestSyncTime();
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f000 f80c 	bl	8003f54 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003f42:	461a      	mov	r2, r3
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
    return SPIN_OK;
 8003f4a:	2300      	movs	r3, #0
  }
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3710      	adds	r7, #16
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE15requestSyncTimeEv>:
  void requestSyncTime()
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b086      	sub	sp, #24
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8003f5c:	f107 030c 	add.w	r3, r7, #12
 8003f60:	4618      	mov	r0, r3
 8003f62:	f7fd fba7 	bl	80016b4 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f107 020c 	add.w	r2, r7, #12
 8003f70:	210a      	movs	r1, #10
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	4798      	blx	r3
    rt_time = hardware_.time();
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	3304      	adds	r3, #4
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f7fe fb74 	bl	8002668 <_ZN13STM32Hardware4timeEv>
 8003f80:	4602      	mov	r2, r0
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	609a      	str	r2, [r3, #8]
  }
 8003f86:	bf00      	nop
 8003f88:	3718      	adds	r7, #24
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}

08003f8e <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 8003f8e:	b590      	push	{r4, r7, lr}
 8003f90:	b08b      	sub	sp, #44	@ 0x2c
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8003f96:	f107 030c 	add.w	r3, r7, #12
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f7fd fc74 	bl	8001888 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fa4:	e05a      	b.n	800405c <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE15negotiateTopicsEv+0xce>
    {
      if (publishers[i] != 0) // non-empty slot
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003faa:	f602 0206 	addw	r2, r2, #2054	@ 0x806
 8003fae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d04f      	beq.n	8004056 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE15negotiateTopicsEv+0xc8>
      {
        ti.topic_id = publishers[i]->id_;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fba:	f602 0206 	addw	r2, r2, #2054	@ 0x806
 8003fbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fcc:	f602 0206 	addw	r2, r2, #2054	@ 0x806
 8003fd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fdc:	f602 0206 	addw	r2, r2, #2054	@ 0x806
 8003fe0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fe4:	6859      	ldr	r1, [r3, #4]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fea:	f602 0206 	addw	r2, r2, #2054	@ 0x806
 8003fee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	3308      	adds	r3, #8
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4608      	mov	r0, r1
 8003ffc:	4798      	blx	r3
 8003ffe:	4603      	mov	r3, r0
 8004000:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004006:	f602 0206 	addw	r2, r2, #2054	@ 0x806
 800400a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800400e:	6859      	ldr	r1, [r3, #4]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004014:	f602 0206 	addw	r2, r2, #2054	@ 0x806
 8004018:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	330c      	adds	r3, #12
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4608      	mov	r0, r1
 8004026:	4798      	blx	r3
 8004028:	4603      	mov	r3, r0
 800402a:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 800402c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004030:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681c      	ldr	r4, [r3, #0]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800403c:	f602 0206 	addw	r2, r2, #2054	@ 0x806
 8004040:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004044:	4618      	mov	r0, r3
 8004046:	f7fe f97d 	bl	8002344 <_ZN3ros9Publisher15getEndpointTypeEv>
 800404a:	4601      	mov	r1, r0
 800404c:	f107 030c 	add.w	r3, r7, #12
 8004050:	461a      	mov	r2, r3
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8004056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004058:	3301      	adds	r3, #1
 800405a:	627b      	str	r3, [r7, #36]	@ 0x24
 800405c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800405e:	2b09      	cmp	r3, #9
 8004060:	dda1      	ble.n	8003fa6 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE15negotiateTopicsEv+0x18>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004062:	2300      	movs	r3, #0
 8004064:	627b      	str	r3, [r7, #36]	@ 0x24
 8004066:	e05e      	b.n	8004126 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE15negotiateTopicsEv+0x198>
    {
      if (subscribers[i] != 0) // non-empty slot
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800406c:	f502 6201 	add.w	r2, r2, #2064	@ 0x810
 8004070:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d053      	beq.n	8004120 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE15negotiateTopicsEv+0x192>
      {
        ti.topic_id = subscribers[i]->id_;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800407c:	f502 6201 	add.w	r2, r2, #2064	@ 0x810
 8004080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	b29b      	uxth	r3, r3
 8004088:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800408e:	f502 6201 	add.w	r2, r2, #2064	@ 0x810
 8004092:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800409e:	f502 6201 	add.w	r2, r2, #2064	@ 0x810
 80040a2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040aa:	f502 6201 	add.w	r2, r2, #2064	@ 0x810
 80040ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	3308      	adds	r3, #8
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4608      	mov	r0, r1
 80040ba:	4798      	blx	r3
 80040bc:	4603      	mov	r3, r0
 80040be:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040c4:	f502 6201 	add.w	r2, r2, #2064	@ 0x810
 80040c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040d0:	f502 6201 	add.w	r2, r2, #2064	@ 0x810
 80040d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	330c      	adds	r3, #12
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4608      	mov	r0, r1
 80040e0:	4798      	blx	r3
 80040e2:	4603      	mov	r3, r0
 80040e4:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 80040e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80040ea:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681c      	ldr	r4, [r3, #0]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040f6:	f502 6201 	add.w	r2, r2, #2064	@ 0x810
 80040fa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004102:	f502 6201 	add.w	r2, r2, #2064	@ 0x810
 8004106:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	3304      	adds	r3, #4
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4608      	mov	r0, r1
 8004112:	4798      	blx	r3
 8004114:	4601      	mov	r1, r0
 8004116:	f107 030c 	add.w	r3, r7, #12
 800411a:	461a      	mov	r2, r3
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004122:	3301      	adds	r3, #1
 8004124:	627b      	str	r3, [r7, #36]	@ 0x24
 8004126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004128:	2b09      	cmp	r3, #9
 800412a:	dd9d      	ble.n	8004068 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE15negotiateTopicsEv+0xda>
      }
    }
    configured_ = true;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8004132:	2201      	movs	r2, #1
 8004134:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
  }
 8004138:	bf00      	nop
 800413a:	372c      	adds	r7, #44	@ 0x2c
 800413c:	46bd      	mov	sp, r7
 800413e:	bd90      	pop	{r4, r7, pc}

08004140 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8004140:	b580      	push	{r7, lr}
 8004142:	b086      	sub	sp, #24
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 800414a:	f107 0308 	add.w	r3, r7, #8
 800414e:	4618      	mov	r0, r3
 8004150:	f7fd fab0 	bl	80016b4 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	3304      	adds	r3, #4
 8004158:	4618      	mov	r0, r3
 800415a:	f7fe fa85 	bl	8002668 <_ZN13STM32Hardware4timeEv>
 800415e:	4602      	mov	r2, r0
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8004168:	f107 0308 	add.w	r3, r7, #8
 800416c:	6839      	ldr	r1, [r7, #0]
 800416e:	4618      	mov	r0, r3
 8004170:	f7fd fb0f 	bl	8001792 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8004174:	68fa      	ldr	r2, [r7, #12]
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	4915      	ldr	r1, [pc, #84]	@ (80041d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8syncTimeEPh+0x90>)
 800417a:	fba1 1303 	umull	r1, r3, r1, r3
 800417e:	099b      	lsrs	r3, r3, #6
 8004180:	4413      	add	r3, r2
 8004182:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8004184:	6939      	ldr	r1, [r7, #16]
 8004186:	697a      	ldr	r2, [r7, #20]
 8004188:	4b11      	ldr	r3, [pc, #68]	@ (80041d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8syncTimeEPh+0x90>)
 800418a:	fba3 0302 	umull	r0, r3, r3, r2
 800418e:	099b      	lsrs	r3, r3, #6
 8004190:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004194:	fb00 f303 	mul.w	r3, r0, r3
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	4a0e      	ldr	r2, [pc, #56]	@ (80041d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8syncTimeEPh+0x94>)
 800419c:	fb02 f303 	mul.w	r3, r2, r3
 80041a0:	440b      	add	r3, r1
 80041a2:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 80041a4:	f107 0308 	add.w	r3, r7, #8
 80041a8:	3304      	adds	r3, #4
 80041aa:	4619      	mov	r1, r3
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f000 f8b7 	bl	8004320 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	3304      	adds	r3, #4
 80041b6:	4618      	mov	r0, r3
 80041b8:	f7fe fa56 	bl	8002668 <_ZN13STM32Hardware4timeEv>
 80041bc:	4602      	mov	r2, r0
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80041c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
 80041c8:	bf00      	nop
 80041ca:	3718      	adds	r7, #24
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}
 80041d0:	10624dd3 	.word	0x10624dd3
 80041d4:	000f4240 	.word	0x000f4240

080041d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 80041d8:	b580      	push	{r7, lr}
 80041da:	b088      	sub	sp, #32
 80041dc:	af00      	add	r7, sp, #0
 80041de:	60f8      	str	r0, [r7, #12]
 80041e0:	60b9      	str	r1, [r7, #8]
 80041e2:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	2b63      	cmp	r3, #99	@ 0x63
 80041e8:	dd0b      	ble.n	8004202 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE7publishEiPKNS_3MsgE+0x2a>
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80041f0:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80041f4:	f083 0301 	eor.w	r3, r3, #1
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d001      	beq.n	8004202 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE7publishEiPKNS_3MsgE+0x2a>
      return 0;
 80041fe:	2300      	movs	r3, #0
 8004200:	e087      	b.n	8004312 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE7publishEiPKNS_3MsgE+0x13a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800420e:	3318      	adds	r3, #24
 8004210:	3307      	adds	r3, #7
 8004212:	4619      	mov	r1, r3
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	4790      	blx	r2
 8004218:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004220:	22ff      	movs	r2, #255	@ 0xff
 8004222:	761a      	strb	r2, [r3, #24]
    message_out[1] = PROTOCOL_VER;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800422a:	22fe      	movs	r2, #254	@ 0xfe
 800422c:	765a      	strb	r2, [r3, #25]
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	b2da      	uxtb	r2, r3
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004238:	769a      	strb	r2, [r3, #26]
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	b29b      	uxth	r3, r3
 800423e:	0a1b      	lsrs	r3, r3, #8
 8004240:	b29b      	uxth	r3, r3
 8004242:	b2da      	uxtb	r2, r3
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800424a:	76da      	strb	r2, [r3, #27]
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004252:	7e9a      	ldrb	r2, [r3, #26]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800425a:	7edb      	ldrb	r3, [r3, #27]
 800425c:	4413      	add	r3, r2
 800425e:	b2db      	uxtb	r3, r3
 8004260:	43db      	mvns	r3, r3
 8004262:	b2da      	uxtb	r2, r3
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800426a:	771a      	strb	r2, [r3, #28]
    message_out[5] = (uint8_t)((int16_t)id & 255);
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	b2da      	uxtb	r2, r3
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004276:	775a      	strb	r2, [r3, #29]
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	b21b      	sxth	r3, r3
 800427c:	121b      	asrs	r3, r3, #8
 800427e:	b21b      	sxth	r3, r3
 8004280:	b2da      	uxtb	r2, r3
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004288:	779a      	strb	r2, [r3, #30]

    /* calculate checksum */
    int chk = 0;
 800428a:	2300      	movs	r3, #0
 800428c:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 800428e:	2305      	movs	r3, #5
 8004290:	61bb      	str	r3, [r7, #24]
 8004292:	e00d      	b.n	80042b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE7publishEiPKNS_3MsgE+0xd8>
      chk += message_out[i];
 8004294:	68fa      	ldr	r2, [r7, #12]
 8004296:	69bb      	ldr	r3, [r7, #24]
 8004298:	4413      	add	r3, r2
 800429a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800429e:	3318      	adds	r3, #24
 80042a0:	781b      	ldrb	r3, [r3, #0]
 80042a2:	461a      	mov	r2, r3
 80042a4:	69fb      	ldr	r3, [r7, #28]
 80042a6:	4413      	add	r3, r2
 80042a8:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80042aa:	69bb      	ldr	r3, [r7, #24]
 80042ac:	3301      	adds	r3, #1
 80042ae:	61bb      	str	r3, [r7, #24]
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	3306      	adds	r3, #6
 80042b4:	69ba      	ldr	r2, [r7, #24]
 80042b6:	429a      	cmp	r2, r3
 80042b8:	ddec      	ble.n	8004294 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE7publishEiPKNS_3MsgE+0xbc>
    l += 7;
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	3307      	adds	r3, #7
 80042be:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	425a      	negs	r2, r3
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	b2d2      	uxtb	r2, r2
 80042c8:	bf58      	it	pl
 80042ca:	4253      	negpl	r3, r2
 80042cc:	b2da      	uxtb	r2, r3
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	1c59      	adds	r1, r3, #1
 80042d2:	6179      	str	r1, [r7, #20]
 80042d4:	43d2      	mvns	r2, r2
 80042d6:	b2d1      	uxtb	r1, r2
 80042d8:	68fa      	ldr	r2, [r7, #12]
 80042da:	4413      	add	r3, r2
 80042dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80042e0:	3318      	adds	r3, #24
 80042e2:	460a      	mov	r2, r1
 80042e4:	701a      	strb	r2, [r3, #0]

    if (l <= OUTPUT_SIZE)
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042ec:	dc0b      	bgt.n	8004306 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE7publishEiPKNS_3MsgE+0x12e>
    {
      hardware_.write(message_out, l);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	1d18      	adds	r0, r3, #4
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80042f8:	3318      	adds	r3, #24
 80042fa:	697a      	ldr	r2, [r7, #20]
 80042fc:	4619      	mov	r1, r3
 80042fe:	f7fe f9a2 	bl	8002646 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	e005      	b.n	8004312 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE7publishEiPKNS_3MsgE+0x13a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8004306:	4905      	ldr	r1, [pc, #20]	@ (800431c <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE7publishEiPKNS_3MsgE+0x144>)
 8004308:	68f8      	ldr	r0, [r7, #12]
 800430a:	f000 f847 	bl	800439c <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8logerrorEPKc>
      return -1;
 800430e:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8004312:	4618      	mov	r0, r3
 8004314:	3720      	adds	r7, #32
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	08008884 	.word	0x08008884

08004320 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 8004320:	b580      	push	{r7, lr}
 8004322:	b084      	sub	sp, #16
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	3304      	adds	r3, #4
 800432e:	4618      	mov	r0, r3
 8004330:	f7fe f99a 	bl	8002668 <_ZN13STM32Hardware4timeEv>
 8004334:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	4914      	ldr	r1, [pc, #80]	@ (8004390 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE6setNowERKNS_4TimeE+0x70>)
 800433e:	fba1 1303 	umull	r1, r3, r1, r3
 8004342:	099b      	lsrs	r3, r3, #6
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	1e5a      	subs	r2, r3, #1
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	60da      	str	r2, [r3, #12]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	6859      	ldr	r1, [r3, #4]
 8004350:	68fa      	ldr	r2, [r7, #12]
 8004352:	4b0f      	ldr	r3, [pc, #60]	@ (8004390 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE6setNowERKNS_4TimeE+0x70>)
 8004354:	fba3 0302 	umull	r0, r3, r3, r2
 8004358:	099b      	lsrs	r3, r3, #6
 800435a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800435e:	fb00 f303 	mul.w	r3, r0, r3
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	4a0b      	ldr	r2, [pc, #44]	@ (8004394 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE6setNowERKNS_4TimeE+0x74>)
 8004366:	fb02 f303 	mul.w	r3, r2, r3
 800436a:	1aca      	subs	r2, r1, r3
 800436c:	4b0a      	ldr	r3, [pc, #40]	@ (8004398 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE6setNowERKNS_4TimeE+0x78>)
 800436e:	4413      	add	r3, r2
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	6113      	str	r3, [r2, #16]
    normalizeSecNSec(sec_offset, nsec_offset);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f103 020c 	add.w	r2, r3, #12
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	3310      	adds	r3, #16
 800437e:	4619      	mov	r1, r3
 8004380:	4610      	mov	r0, r2
 8004382:	f000 fbfd 	bl	8004b80 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8004386:	bf00      	nop
 8004388:	3710      	adds	r7, #16
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop
 8004390:	10624dd3 	.word	0x10624dd3
 8004394:	000f4240 	.word	0x000f4240
 8004398:	3b9aca00 	.word	0x3b9aca00

0800439c <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 800439c:	b580      	push	{r7, lr}
 800439e:	b082      	sub	sp, #8
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 80043a6:	683a      	ldr	r2, [r7, #0]
 80043a8:	2103      	movs	r1, #3
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f000 f804 	bl	80043b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE3logEcPKc>
  }
 80043b0:	bf00      	nop
 80043b2:	3708      	adds	r7, #8
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}

080043b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE3logEcPKc>:
  void log(char byte, const char * msg)
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b088      	sub	sp, #32
 80043bc:	af00      	add	r7, sp, #0
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	460b      	mov	r3, r1
 80043c2:	607a      	str	r2, [r7, #4]
 80043c4:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 80043c6:	f107 0314 	add.w	r3, r7, #20
 80043ca:	4618      	mov	r0, r3
 80043cc:	f7fd fc1c 	bl	8001c08 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 80043d0:	7afb      	ldrb	r3, [r7, #11]
 80043d2:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f107 0214 	add.w	r2, r7, #20
 80043e2:	2107      	movs	r1, #7
 80043e4:	68f8      	ldr	r0, [r7, #12]
 80043e6:	4798      	blx	r3
  }
 80043e8:	bf00      	nop
 80043ea:	3720      	adds	r7, #32
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <_Z41__static_initialization_and_destruction_0ii>:
 80043f0:	b5b0      	push	{r4, r5, r7, lr}
 80043f2:	b082      	sub	sp, #8
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d134      	bne.n	800446a <_Z41__static_initialization_and_destruction_0ii+0x7a>
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004406:	4293      	cmp	r3, r2
 8004408:	d12f      	bne.n	800446a <_Z41__static_initialization_and_destruction_0ii+0x7a>
};

SerialComm comm_rosserial(huart_rosserial);
 800440a:	491a      	ldr	r1, [pc, #104]	@ (8004474 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800440c:	481a      	ldr	r0, [pc, #104]	@ (8004478 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800440e:	f7fd ffa4 	bl	800235a <_ZN10SerialCommC1ER20__UART_HandleTypeDef>
/* GLOBAL VARIABLES START */

/*
 * ROS NodeHandle
 */
ros::NodeHandle nh;
 8004412:	481a      	ldr	r0, [pc, #104]	@ (800447c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8004414:	f7fe ff4c 	bl	80032b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EEC1Ev>
 */

/*
 * Subscribers
 */
ros::Subscriber<geometry_msgs::Twist> sub_cmd_vel("/cmd_vel", &commandVelocityCallback);
 8004418:	2301      	movs	r3, #1
 800441a:	4a19      	ldr	r2, [pc, #100]	@ (8004480 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 800441c:	4919      	ldr	r1, [pc, #100]	@ (8004484 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 800441e:	481a      	ldr	r0, [pc, #104]	@ (8004488 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8004420:	f7ff fac4 	bl	80039ac <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>

/*
 * Publishers
 */
std_msgs::UInt16 rpm_msg[NUM_OF_MOTOR];
 8004424:	4b19      	ldr	r3, [pc, #100]	@ (800448c <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8004426:	2403      	movs	r4, #3
 8004428:	461d      	mov	r5, r3
 800442a:	e004      	b.n	8004436 <_Z41__static_initialization_and_destruction_0ii+0x46>
 800442c:	4628      	mov	r0, r5
 800442e:	f7fe f927 	bl	8002680 <_ZN8std_msgs6UInt16C1Ev>
 8004432:	3c01      	subs	r4, #1
 8004434:	3508      	adds	r5, #8
 8004436:	2c00      	cmp	r4, #0
 8004438:	daf8      	bge.n	800442c <_Z41__static_initialization_and_destruction_0ii+0x3c>
ros::Publisher pub_FL_rpm("/FL_rpm", &rpm_msg[front_left]);
 800443a:	2300      	movs	r3, #0
 800443c:	4a13      	ldr	r2, [pc, #76]	@ (800448c <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 800443e:	4914      	ldr	r1, [pc, #80]	@ (8004490 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8004440:	4814      	ldr	r0, [pc, #80]	@ (8004494 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8004442:	f7fd ff55 	bl	80022f0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher pub_FR_rpm("/FR_rpm", &rpm_msg[front_right]);
 8004446:	2300      	movs	r3, #0
 8004448:	4a13      	ldr	r2, [pc, #76]	@ (8004498 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 800444a:	4914      	ldr	r1, [pc, #80]	@ (800449c <_Z41__static_initialization_and_destruction_0ii+0xac>)
 800444c:	4814      	ldr	r0, [pc, #80]	@ (80044a0 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 800444e:	f7fd ff4f 	bl	80022f0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher pub_BL_rpm("/BL_rpm", &rpm_msg[back_left]);
 8004452:	2300      	movs	r3, #0
 8004454:	4a13      	ldr	r2, [pc, #76]	@ (80044a4 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8004456:	4914      	ldr	r1, [pc, #80]	@ (80044a8 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8004458:	4814      	ldr	r0, [pc, #80]	@ (80044ac <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 800445a:	f7fd ff49 	bl	80022f0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher pub_BR_rpm("/BR_rpm", &rpm_msg[back_right]);
 800445e:	2300      	movs	r3, #0
 8004460:	4a13      	ldr	r2, [pc, #76]	@ (80044b0 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8004462:	4914      	ldr	r1, [pc, #80]	@ (80044b4 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8004464:	4814      	ldr	r0, [pc, #80]	@ (80044b8 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8004466:	f7fd ff43 	bl	80022f0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
 800446a:	bf00      	nop
 800446c:	3708      	adds	r7, #8
 800446e:	46bd      	mov	sp, r7
 8004470:	bdb0      	pop	{r4, r5, r7, pc}
 8004472:	bf00      	nop
 8004474:	20000118 	.word	0x20000118
 8004478:	200001e8 	.word	0x200001e8
 800447c:	200021f4 	.word	0x200021f4
 8004480:	08003441 	.word	0x08003441
 8004484:	080088c0 	.word	0x080088c0
 8004488:	200042b0 	.word	0x200042b0
 800448c:	20004310 	.word	0x20004310
 8004490:	080088cc 	.word	0x080088cc
 8004494:	20004330 	.word	0x20004330
 8004498:	20004318 	.word	0x20004318
 800449c:	080088d4 	.word	0x080088d4
 80044a0:	20004344 	.word	0x20004344
 80044a4:	20004320 	.word	0x20004320
 80044a8:	080088dc 	.word	0x080088dc
 80044ac:	20004358 	.word	0x20004358
 80044b0:	20004328 	.word	0x20004328
 80044b4:	080088e4 	.word	0x080088e4
 80044b8:	2000436c 	.word	0x2000436c

080044bc <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:

  virtual void callback(unsigned char* data) override
 80044bc:	b580      	push	{r7, lr}
 80044be:	b082      	sub	sp, #8
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	3310      	adds	r3, #16
 80044ca:	6839      	ldr	r1, [r7, #0]
 80044cc:	4618      	mov	r0, r3
 80044ce:	f7fe fea1 	bl	8003214 <_ZN13geometry_msgs5Twist11deserializeEPh>
    this->cb_(msg);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044d6:	687a      	ldr	r2, [r7, #4]
 80044d8:	3210      	adds	r2, #16
 80044da:	4610      	mov	r0, r2
 80044dc:	4798      	blx	r3
  }
 80044de:	bf00      	nop
 80044e0:	3708      	adds	r7, #8
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}

080044e6 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5() override
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType() override
 80044e6:	b480      	push	{r7}
 80044e8:	b083      	sub	sp, #12
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
  }
 80044f2:	4618      	mov	r0, r3
 80044f4:	370c      	adds	r7, #12
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bc80      	pop	{r7}
 80044fa:	4770      	bx	lr

080044fc <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b082      	sub	sp, #8
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	3310      	adds	r3, #16
 8004508:	4618      	mov	r0, r3
 800450a:	f7fe fea9 	bl	8003260 <_ZN13geometry_msgs5Twist7getTypeEv>
 800450e:	4603      	mov	r3, r0
  }
 8004510:	4618      	mov	r0, r3
 8004512:	3708      	adds	r7, #8
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}

08004518 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	3310      	adds	r3, #16
 8004524:	4618      	mov	r0, r3
 8004526:	f7fe fea7 	bl	8003278 <_ZN13geometry_msgs5Twist6getMD5Ev>
 800452a:	4603      	mov	r3, r0
  }
 800452c:	4618      	mov	r0, r3
 800452e:	3708      	adds	r7, #8
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}

08004534 <_ZN3ros11NodeHandle_I13STM32HardwareLi10ELi10ELi4096ELi4096EE9connectedEv>:
  virtual bool connected() override
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
    return configured_;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8004542:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
  };
 8004546:	4618      	mov	r0, r3
 8004548:	370c      	adds	r7, #12
 800454a:	46bd      	mov	sp, r7
 800454c:	bc80      	pop	{r7}
 800454e:	4770      	bx	lr

08004550 <_GLOBAL__sub_I_comm_rosserial>:
 8004550:	b580      	push	{r7, lr}
 8004552:	af00      	add	r7, sp, #0
 8004554:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8004558:	2001      	movs	r0, #1
 800455a:	f7ff ff49 	bl	80043f0 <_Z41__static_initialization_and_destruction_0ii>
 800455e:	bd80      	pop	{r7, pc}

08004560 <_ZSt4fabsf>:
  using ::fabs;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  fabs(float __x)
  { return __builtin_fabsf(__x); }
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800456e:	4618      	mov	r0, r3
 8004570:	370c      	adds	r7, #12
 8004572:	46bd      	mov	sp, r7
 8004574:	bc80      	pop	{r7}
 8004576:	4770      	bx	lr

08004578 <_Z6millisv>:
Motor mecabot_motor[4] = { NULL, NULL, NULL, NULL };
Encoder encoder[4] = { NULL, NULL, NULL, NULL };
FO_IIR_Filter_t *filter[4] = { NULL, NULL, NULL, NULL };

uint32_t millis(void)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	af00      	add	r7, sp, #0
    return HAL_GetTick();
 800457c:	f000 fbaa 	bl	8004cd4 <HAL_GetTick>
 8004580:	4603      	mov	r3, r0
}
 8004582:	4618      	mov	r0, r3
 8004584:	bd80      	pop	{r7, pc}
	...

08004588 <_Z18mecabot_motor_initv>:

status_t mecabot_motor_init(void)
{
 8004588:	b590      	push	{r4, r7, lr}
 800458a:	b085      	sub	sp, #20
 800458c:	af00      	add	r7, sp, #0
    /* Hard-coded value for the Control Board */

	// Front Left motor setting
    Motor_Handle_t handle = {
 800458e:	4b1c      	ldr	r3, [pc, #112]	@ (8004600 <_Z18mecabot_motor_initv+0x78>)
 8004590:	463c      	mov	r4, r7
 8004592:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004594:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        .pwm_channel = TIM_CHANNEL_3,
        .direction_port = GPIOC,
        .direction_pin = GPIO_PIN_2,
        .pwm_frequency = MOTOR_PWM_FREQUENCY
    };
    mecabot_motor[front_left] = Motor_Init(handle);
 8004598:	463b      	mov	r3, r7
 800459a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800459c:	f7fc fcfe 	bl	8000f9c <Motor_Init>
 80045a0:	4603      	mov	r3, r0
 80045a2:	4a18      	ldr	r2, [pc, #96]	@ (8004604 <_Z18mecabot_motor_initv+0x7c>)
 80045a4:	6013      	str	r3, [r2, #0]
    // Front Right motor setting
    handle.pwm_channel = TIM_CHANNEL_1;
 80045a6:	2300      	movs	r3, #0
 80045a8:	603b      	str	r3, [r7, #0]
    handle.direction_port = GPIOC;
 80045aa:	4b17      	ldr	r3, [pc, #92]	@ (8004608 <_Z18mecabot_motor_initv+0x80>)
 80045ac:	607b      	str	r3, [r7, #4]
    handle.direction_pin = GPIO_PIN_3;
 80045ae:	2308      	movs	r3, #8
 80045b0:	813b      	strh	r3, [r7, #8]
    mecabot_motor[front_right] = Motor_Init(handle);
 80045b2:	463b      	mov	r3, r7
 80045b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80045b6:	f7fc fcf1 	bl	8000f9c <Motor_Init>
 80045ba:	4603      	mov	r3, r0
 80045bc:	4a11      	ldr	r2, [pc, #68]	@ (8004604 <_Z18mecabot_motor_initv+0x7c>)
 80045be:	6053      	str	r3, [r2, #4]
    // Back Left motor setting
    handle.pwm_channel = TIM_CHANNEL_4;
 80045c0:	230c      	movs	r3, #12
 80045c2:	603b      	str	r3, [r7, #0]
    handle.direction_port = GPIOC;
 80045c4:	4b10      	ldr	r3, [pc, #64]	@ (8004608 <_Z18mecabot_motor_initv+0x80>)
 80045c6:	607b      	str	r3, [r7, #4]
    handle.direction_pin = GPIO_PIN_0;
 80045c8:	2301      	movs	r3, #1
 80045ca:	813b      	strh	r3, [r7, #8]
    mecabot_motor[back_left] = Motor_Init(handle);
 80045cc:	463b      	mov	r3, r7
 80045ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80045d0:	f7fc fce4 	bl	8000f9c <Motor_Init>
 80045d4:	4603      	mov	r3, r0
 80045d6:	4a0b      	ldr	r2, [pc, #44]	@ (8004604 <_Z18mecabot_motor_initv+0x7c>)
 80045d8:	6093      	str	r3, [r2, #8]
    // Back Right motor setting
    handle.pwm_channel = TIM_CHANNEL_2;
 80045da:	2304      	movs	r3, #4
 80045dc:	603b      	str	r3, [r7, #0]
    handle.direction_port = GPIOC;
 80045de:	4b0a      	ldr	r3, [pc, #40]	@ (8004608 <_Z18mecabot_motor_initv+0x80>)
 80045e0:	607b      	str	r3, [r7, #4]
    handle.direction_pin = GPIO_PIN_1;
 80045e2:	2302      	movs	r3, #2
 80045e4:	813b      	strh	r3, [r7, #8]
    mecabot_motor[back_right] = Motor_Init(handle);
 80045e6:	463b      	mov	r3, r7
 80045e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80045ea:	f7fc fcd7 	bl	8000f9c <Motor_Init>
 80045ee:	4603      	mov	r3, r0
 80045f0:	4a04      	ldr	r2, [pc, #16]	@ (8004604 <_Z18mecabot_motor_initv+0x7c>)
 80045f2:	60d3      	str	r3, [r2, #12]

    // TODO: Check if all motors were initialized correctly
    return STATUS_OK;
 80045f4:	2300      	movs	r3, #0
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3714      	adds	r7, #20
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd90      	pop	{r4, r7, pc}
 80045fe:	bf00      	nop
 8004600:	080088ec 	.word	0x080088ec
 8004604:	200043c0 	.word	0x200043c0
 8004608:	40011000 	.word	0x40011000

0800460c <_Z20mecabot_encoder_initv>:

status_t mecabot_encoder_init(void)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b088      	sub	sp, #32
 8004610:	af00      	add	r7, sp, #0
	/* Hard-coded value for the Control Board */

	// Front Left encoder setting
    Encoder_Handle_t handle_encoder = {
 8004612:	4a30      	ldr	r2, [pc, #192]	@ (80046d4 <_Z20mecabot_encoder_initv+0xc8>)
 8004614:	f107 0314 	add.w	r3, r7, #20
 8004618:	e892 0003 	ldmia.w	r2, {r0, r1}
 800461c:	e883 0003 	stmia.w	r3, {r0, r1}
        .max_count = 0xFFFFFFFF,
        .tick_read_channel = TIM_CHANNEL_3
    };
    encoder[front_left] = Encoder_Init(handle_encoder);
 8004620:	f107 0314 	add.w	r3, r7, #20
 8004624:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004628:	f7fc fdb3 	bl	8001192 <Encoder_Init>
 800462c:	4603      	mov	r3, r0
 800462e:	4a2a      	ldr	r2, [pc, #168]	@ (80046d8 <_Z20mecabot_encoder_initv+0xcc>)
 8004630:	6013      	str	r3, [r2, #0]
    // Front Right encoder setting
    handle_encoder.tick_read_channel = TIM_CHANNEL_1;
 8004632:	2300      	movs	r3, #0
 8004634:	833b      	strh	r3, [r7, #24]
    encoder[front_right] = Encoder_Init(handle_encoder);
 8004636:	f107 0314 	add.w	r3, r7, #20
 800463a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800463e:	f7fc fda8 	bl	8001192 <Encoder_Init>
 8004642:	4603      	mov	r3, r0
 8004644:	4a24      	ldr	r2, [pc, #144]	@ (80046d8 <_Z20mecabot_encoder_initv+0xcc>)
 8004646:	6053      	str	r3, [r2, #4]
    // Back Left encoder setting
    handle_encoder.tick_read_channel = TIM_CHANNEL_4;
 8004648:	230c      	movs	r3, #12
 800464a:	833b      	strh	r3, [r7, #24]
    encoder[back_left] = Encoder_Init(handle_encoder);
 800464c:	f107 0314 	add.w	r3, r7, #20
 8004650:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004654:	f7fc fd9d 	bl	8001192 <Encoder_Init>
 8004658:	4603      	mov	r3, r0
 800465a:	4a1f      	ldr	r2, [pc, #124]	@ (80046d8 <_Z20mecabot_encoder_initv+0xcc>)
 800465c:	6093      	str	r3, [r2, #8]
    // Back Right encoder setting
    handle_encoder.tick_read_channel = TIM_CHANNEL_2;
 800465e:	2304      	movs	r3, #4
 8004660:	833b      	strh	r3, [r7, #24]
    encoder[back_right] = Encoder_Init(handle_encoder);
 8004662:	f107 0314 	add.w	r3, r7, #20
 8004666:	e893 0003 	ldmia.w	r3, {r0, r1}
 800466a:	f7fc fd92 	bl	8001192 <Encoder_Init>
 800466e:	4603      	mov	r3, r0
 8004670:	4a19      	ldr	r2, [pc, #100]	@ (80046d8 <_Z20mecabot_encoder_initv+0xcc>)
 8004672:	60d3      	str	r3, [r2, #12]

    // Initialize the rpm filter
    float b_coeff[] = { 0.7548f, 0.7548f };
 8004674:	4a19      	ldr	r2, [pc, #100]	@ (80046dc <_Z20mecabot_encoder_initv+0xd0>)
 8004676:	f107 030c 	add.w	r3, r7, #12
 800467a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800467e:	e883 0003 	stmia.w	r3, {r0, r1}
    float a_coeff[] = {    1.0f, 0.5095f };
 8004682:	4a17      	ldr	r2, [pc, #92]	@ (80046e0 <_Z20mecabot_encoder_initv+0xd4>)
 8004684:	1d3b      	adds	r3, r7, #4
 8004686:	e892 0003 	ldmia.w	r2, {r0, r1}
 800468a:	e883 0003 	stmia.w	r3, {r0, r1}
    for (int i = 0; i < NUM_OF_MOTOR; i++)
 800468e:	2300      	movs	r3, #0
 8004690:	61fb      	str	r3, [r7, #28]
 8004692:	e016      	b.n	80046c2 <_Z20mecabot_encoder_initv+0xb6>
    {
    	filter[i] = reinterpret_cast<FO_IIR_Filter_t*>(calloc(1, sizeof(FO_IIR_Filter_t)));
 8004694:	2118      	movs	r1, #24
 8004696:	2001      	movs	r0, #1
 8004698:	f003 fe88 	bl	80083ac <calloc>
 800469c:	4603      	mov	r3, r0
 800469e:	4619      	mov	r1, r3
 80046a0:	4a10      	ldr	r2, [pc, #64]	@ (80046e4 <_Z20mecabot_encoder_initv+0xd8>)
 80046a2:	69fb      	ldr	r3, [r7, #28]
 80046a4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    	FO_IIR_Init(filter[i], b_coeff, a_coeff);
 80046a8:	4a0e      	ldr	r2, [pc, #56]	@ (80046e4 <_Z20mecabot_encoder_initv+0xd8>)
 80046aa:	69fb      	ldr	r3, [r7, #28]
 80046ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046b0:	1d3a      	adds	r2, r7, #4
 80046b2:	f107 010c 	add.w	r1, r7, #12
 80046b6:	4618      	mov	r0, r3
 80046b8:	f7fc fc08 	bl	8000ecc <FO_IIR_Init>
    for (int i = 0; i < NUM_OF_MOTOR; i++)
 80046bc:	69fb      	ldr	r3, [r7, #28]
 80046be:	3301      	adds	r3, #1
 80046c0:	61fb      	str	r3, [r7, #28]
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	2b03      	cmp	r3, #3
 80046c6:	dde5      	ble.n	8004694 <_Z20mecabot_encoder_initv+0x88>
    }

    // TODO: Check if all encoders were initialized correctly
    return STATUS_OK;
 80046c8:	2300      	movs	r3, #0
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3720      	adds	r7, #32
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	080088fc 	.word	0x080088fc
 80046d8:	200043d0 	.word	0x200043d0
 80046dc:	08008904 	.word	0x08008904
 80046e0:	0800890c 	.word	0x0800890c
 80046e4:	200043e0 	.word	0x200043e0

080046e8 <_Z19mecabot_motor_startP7Motor_t>:

status_t mecabot_motor_start(Motor motor)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b082      	sub	sp, #8
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
    return Motor_Start(motor);
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f7fc fd07 	bl	8001104 <Motor_Start>
 80046f6:	4603      	mov	r3, r0
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3708      	adds	r7, #8
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}

08004700 <_Z34mecabot_motor_set_angular_velocityP7Motor_tf>:
{
    return Motor_Stop(motor);
}

status_t mecabot_motor_set_angular_velocity(Motor motor, float velocity)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b084      	sub	sp, #16
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]
    int8_t direction = (velocity > 0) ? DIRECTION_FORWARD : DIRECTION_BACKWARD;
 800470a:	f04f 0100 	mov.w	r1, #0
 800470e:	6838      	ldr	r0, [r7, #0]
 8004710:	f7fc fbb2 	bl	8000e78 <__aeabi_fcmpgt>
 8004714:	4603      	mov	r3, r0
 8004716:	2b00      	cmp	r3, #0
 8004718:	d001      	beq.n	800471e <_Z34mecabot_motor_set_angular_velocityP7Motor_tf+0x1e>
 800471a:	2301      	movs	r3, #1
 800471c:	e001      	b.n	8004722 <_Z34mecabot_motor_set_angular_velocityP7Motor_tf+0x22>
 800471e:	f04f 33ff 	mov.w	r3, #4294967295
 8004722:	73fb      	strb	r3, [r7, #15]
    if (direction != motor->direction)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f993 3000 	ldrsb.w	r3, [r3]
 800472a:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800472e:	429a      	cmp	r2, r3
 8004730:	d005      	beq.n	800473e <_Z34mecabot_motor_set_angular_velocityP7Motor_tf+0x3e>
    {
        Motor_SetDirection(motor, direction);
 8004732:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004736:	4619      	mov	r1, r3
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f7fc fd03 	bl	8001144 <Motor_SetDirection>
    }

    uint8_t duty = (uint8_t)(255 * fabs(velocity) / WHEEL_MAX_ANGULAR_VELOCITY);
 800473e:	6838      	ldr	r0, [r7, #0]
 8004740:	f7ff ff0e 	bl	8004560 <_ZSt4fabsf>
 8004744:	4603      	mov	r3, r0
 8004746:	490f      	ldr	r1, [pc, #60]	@ (8004784 <_Z34mecabot_motor_set_angular_velocityP7Motor_tf+0x84>)
 8004748:	4618      	mov	r0, r3
 800474a:	f7fc f9d9 	bl	8000b00 <__aeabi_fmul>
 800474e:	4603      	mov	r3, r0
 8004750:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004754:	4618      	mov	r0, r3
 8004756:	f7fc fa87 	bl	8000c68 <__aeabi_fdiv>
 800475a:	4603      	mov	r3, r0
 800475c:	490a      	ldr	r1, [pc, #40]	@ (8004788 <_Z34mecabot_motor_set_angular_velocityP7Motor_tf+0x88>)
 800475e:	4618      	mov	r0, r3
 8004760:	f7fc f9ce 	bl	8000b00 <__aeabi_fmul>
 8004764:	4603      	mov	r3, r0
 8004766:	4618      	mov	r0, r3
 8004768:	f7fc fb90 	bl	8000e8c <__aeabi_f2uiz>
 800476c:	4603      	mov	r3, r0
 800476e:	73bb      	strb	r3, [r7, #14]
    Motor_Set_PWM_Duty(motor, duty);
 8004770:	7bbb      	ldrb	r3, [r7, #14]
 8004772:	4619      	mov	r1, r3
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	f7fc fc65 	bl	8001044 <Motor_Set_PWM_Duty>

    return STATUS_OK;
 800477a:	2300      	movs	r3, #0
}
 800477c:	4618      	mov	r0, r3
 800477e:	3710      	adds	r7, #16
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}
 8004784:	437f0000 	.word	0x437f0000
 8004788:	40490fdb 	.word	0x40490fdb

0800478c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800478c:	b480      	push	{r7}
 800478e:	b085      	sub	sp, #20
 8004790:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004792:	4b15      	ldr	r3, [pc, #84]	@ (80047e8 <HAL_MspInit+0x5c>)
 8004794:	699b      	ldr	r3, [r3, #24]
 8004796:	4a14      	ldr	r2, [pc, #80]	@ (80047e8 <HAL_MspInit+0x5c>)
 8004798:	f043 0301 	orr.w	r3, r3, #1
 800479c:	6193      	str	r3, [r2, #24]
 800479e:	4b12      	ldr	r3, [pc, #72]	@ (80047e8 <HAL_MspInit+0x5c>)
 80047a0:	699b      	ldr	r3, [r3, #24]
 80047a2:	f003 0301 	and.w	r3, r3, #1
 80047a6:	60bb      	str	r3, [r7, #8]
 80047a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80047aa:	4b0f      	ldr	r3, [pc, #60]	@ (80047e8 <HAL_MspInit+0x5c>)
 80047ac:	69db      	ldr	r3, [r3, #28]
 80047ae:	4a0e      	ldr	r2, [pc, #56]	@ (80047e8 <HAL_MspInit+0x5c>)
 80047b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047b4:	61d3      	str	r3, [r2, #28]
 80047b6:	4b0c      	ldr	r3, [pc, #48]	@ (80047e8 <HAL_MspInit+0x5c>)
 80047b8:	69db      	ldr	r3, [r3, #28]
 80047ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047be:	607b      	str	r3, [r7, #4]
 80047c0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80047c2:	4b0a      	ldr	r3, [pc, #40]	@ (80047ec <HAL_MspInit+0x60>)
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	60fb      	str	r3, [r7, #12]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80047ce:	60fb      	str	r3, [r7, #12]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80047d6:	60fb      	str	r3, [r7, #12]
 80047d8:	4a04      	ldr	r2, [pc, #16]	@ (80047ec <HAL_MspInit+0x60>)
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80047de:	bf00      	nop
 80047e0:	3714      	adds	r7, #20
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bc80      	pop	{r7}
 80047e6:	4770      	bx	lr
 80047e8:	40021000 	.word	0x40021000
 80047ec:	40010000 	.word	0x40010000

080047f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b08a      	sub	sp, #40	@ 0x28
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047f8:	f107 0318 	add.w	r3, r7, #24
 80047fc:	2200      	movs	r2, #0
 80047fe:	601a      	str	r2, [r3, #0]
 8004800:	605a      	str	r2, [r3, #4]
 8004802:	609a      	str	r2, [r3, #8]
 8004804:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a1f      	ldr	r2, [pc, #124]	@ (8004888 <HAL_TIM_Base_MspInit+0x98>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d10c      	bne.n	800482a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004810:	4b1e      	ldr	r3, [pc, #120]	@ (800488c <HAL_TIM_Base_MspInit+0x9c>)
 8004812:	699b      	ldr	r3, [r3, #24]
 8004814:	4a1d      	ldr	r2, [pc, #116]	@ (800488c <HAL_TIM_Base_MspInit+0x9c>)
 8004816:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800481a:	6193      	str	r3, [r2, #24]
 800481c:	4b1b      	ldr	r3, [pc, #108]	@ (800488c <HAL_TIM_Base_MspInit+0x9c>)
 800481e:	699b      	ldr	r3, [r3, #24]
 8004820:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004824:	617b      	str	r3, [r7, #20]
 8004826:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8004828:	e029      	b.n	800487e <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM8)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a18      	ldr	r2, [pc, #96]	@ (8004890 <HAL_TIM_Base_MspInit+0xa0>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d124      	bne.n	800487e <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004834:	4b15      	ldr	r3, [pc, #84]	@ (800488c <HAL_TIM_Base_MspInit+0x9c>)
 8004836:	699b      	ldr	r3, [r3, #24]
 8004838:	4a14      	ldr	r2, [pc, #80]	@ (800488c <HAL_TIM_Base_MspInit+0x9c>)
 800483a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800483e:	6193      	str	r3, [r2, #24]
 8004840:	4b12      	ldr	r3, [pc, #72]	@ (800488c <HAL_TIM_Base_MspInit+0x9c>)
 8004842:	699b      	ldr	r3, [r3, #24]
 8004844:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004848:	613b      	str	r3, [r7, #16]
 800484a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800484c:	4b0f      	ldr	r3, [pc, #60]	@ (800488c <HAL_TIM_Base_MspInit+0x9c>)
 800484e:	699b      	ldr	r3, [r3, #24]
 8004850:	4a0e      	ldr	r2, [pc, #56]	@ (800488c <HAL_TIM_Base_MspInit+0x9c>)
 8004852:	f043 0310 	orr.w	r3, r3, #16
 8004856:	6193      	str	r3, [r2, #24]
 8004858:	4b0c      	ldr	r3, [pc, #48]	@ (800488c <HAL_TIM_Base_MspInit+0x9c>)
 800485a:	699b      	ldr	r3, [r3, #24]
 800485c:	f003 0310 	and.w	r3, r3, #16
 8004860:	60fb      	str	r3, [r7, #12]
 8004862:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8004864:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8004868:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800486a:	2300      	movs	r3, #0
 800486c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800486e:	2300      	movs	r3, #0
 8004870:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004872:	f107 0318 	add.w	r3, r7, #24
 8004876:	4619      	mov	r1, r3
 8004878:	4806      	ldr	r0, [pc, #24]	@ (8004894 <HAL_TIM_Base_MspInit+0xa4>)
 800487a:	f000 ffc7 	bl	800580c <HAL_GPIO_Init>
}
 800487e:	bf00      	nop
 8004880:	3728      	adds	r7, #40	@ 0x28
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	40012c00 	.word	0x40012c00
 800488c:	40021000 	.word	0x40021000
 8004890:	40013400 	.word	0x40013400
 8004894:	40011000 	.word	0x40011000

08004898 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b088      	sub	sp, #32
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048a0:	f107 0310 	add.w	r3, r7, #16
 80048a4:	2200      	movs	r2, #0
 80048a6:	601a      	str	r2, [r3, #0]
 80048a8:	605a      	str	r2, [r3, #4]
 80048aa:	609a      	str	r2, [r3, #8]
 80048ac:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a10      	ldr	r2, [pc, #64]	@ (80048f4 <HAL_TIM_MspPostInit+0x5c>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d118      	bne.n	80048ea <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048b8:	4b0f      	ldr	r3, [pc, #60]	@ (80048f8 <HAL_TIM_MspPostInit+0x60>)
 80048ba:	699b      	ldr	r3, [r3, #24]
 80048bc:	4a0e      	ldr	r2, [pc, #56]	@ (80048f8 <HAL_TIM_MspPostInit+0x60>)
 80048be:	f043 0304 	orr.w	r3, r3, #4
 80048c2:	6193      	str	r3, [r2, #24]
 80048c4:	4b0c      	ldr	r3, [pc, #48]	@ (80048f8 <HAL_TIM_MspPostInit+0x60>)
 80048c6:	699b      	ldr	r3, [r3, #24]
 80048c8:	f003 0304 	and.w	r3, r3, #4
 80048cc:	60fb      	str	r3, [r7, #12]
 80048ce:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80048d0:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80048d4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048d6:	2302      	movs	r3, #2
 80048d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048da:	2302      	movs	r3, #2
 80048dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048de:	f107 0310 	add.w	r3, r7, #16
 80048e2:	4619      	mov	r1, r3
 80048e4:	4805      	ldr	r0, [pc, #20]	@ (80048fc <HAL_TIM_MspPostInit+0x64>)
 80048e6:	f000 ff91 	bl	800580c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80048ea:	bf00      	nop
 80048ec:	3720      	adds	r7, #32
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop
 80048f4:	40012c00 	.word	0x40012c00
 80048f8:	40021000 	.word	0x40021000
 80048fc:	40010800 	.word	0x40010800

08004900 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b08a      	sub	sp, #40	@ 0x28
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004908:	f107 0314 	add.w	r3, r7, #20
 800490c:	2200      	movs	r2, #0
 800490e:	601a      	str	r2, [r3, #0]
 8004910:	605a      	str	r2, [r3, #4]
 8004912:	609a      	str	r2, [r3, #8]
 8004914:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a4e      	ldr	r2, [pc, #312]	@ (8004a54 <HAL_UART_MspInit+0x154>)
 800491c:	4293      	cmp	r3, r2
 800491e:	f040 8094 	bne.w	8004a4a <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004922:	4b4d      	ldr	r3, [pc, #308]	@ (8004a58 <HAL_UART_MspInit+0x158>)
 8004924:	699b      	ldr	r3, [r3, #24]
 8004926:	4a4c      	ldr	r2, [pc, #304]	@ (8004a58 <HAL_UART_MspInit+0x158>)
 8004928:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800492c:	6193      	str	r3, [r2, #24]
 800492e:	4b4a      	ldr	r3, [pc, #296]	@ (8004a58 <HAL_UART_MspInit+0x158>)
 8004930:	699b      	ldr	r3, [r3, #24]
 8004932:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004936:	613b      	str	r3, [r7, #16]
 8004938:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800493a:	4b47      	ldr	r3, [pc, #284]	@ (8004a58 <HAL_UART_MspInit+0x158>)
 800493c:	699b      	ldr	r3, [r3, #24]
 800493e:	4a46      	ldr	r2, [pc, #280]	@ (8004a58 <HAL_UART_MspInit+0x158>)
 8004940:	f043 0308 	orr.w	r3, r3, #8
 8004944:	6193      	str	r3, [r2, #24]
 8004946:	4b44      	ldr	r3, [pc, #272]	@ (8004a58 <HAL_UART_MspInit+0x158>)
 8004948:	699b      	ldr	r3, [r3, #24]
 800494a:	f003 0308 	and.w	r3, r3, #8
 800494e:	60fb      	str	r3, [r7, #12]
 8004950:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004952:	2340      	movs	r3, #64	@ 0x40
 8004954:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004956:	2302      	movs	r3, #2
 8004958:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800495a:	2303      	movs	r3, #3
 800495c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800495e:	f107 0314 	add.w	r3, r7, #20
 8004962:	4619      	mov	r1, r3
 8004964:	483d      	ldr	r0, [pc, #244]	@ (8004a5c <HAL_UART_MspInit+0x15c>)
 8004966:	f000 ff51 	bl	800580c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800496a:	2380      	movs	r3, #128	@ 0x80
 800496c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800496e:	2300      	movs	r3, #0
 8004970:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004972:	2300      	movs	r3, #0
 8004974:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004976:	f107 0314 	add.w	r3, r7, #20
 800497a:	4619      	mov	r1, r3
 800497c:	4837      	ldr	r0, [pc, #220]	@ (8004a5c <HAL_UART_MspInit+0x15c>)
 800497e:	f000 ff45 	bl	800580c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8004982:	4b37      	ldr	r3, [pc, #220]	@ (8004a60 <HAL_UART_MspInit+0x160>)
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	627b      	str	r3, [r7, #36]	@ 0x24
 8004988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800498a:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800498e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004992:	f043 0304 	orr.w	r3, r3, #4
 8004996:	627b      	str	r3, [r7, #36]	@ 0x24
 8004998:	4a31      	ldr	r2, [pc, #196]	@ (8004a60 <HAL_UART_MspInit+0x160>)
 800499a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800499c:	6053      	str	r3, [r2, #4]

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800499e:	4b31      	ldr	r3, [pc, #196]	@ (8004a64 <HAL_UART_MspInit+0x164>)
 80049a0:	4a31      	ldr	r2, [pc, #196]	@ (8004a68 <HAL_UART_MspInit+0x168>)
 80049a2:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80049a4:	4b2f      	ldr	r3, [pc, #188]	@ (8004a64 <HAL_UART_MspInit+0x164>)
 80049a6:	2210      	movs	r2, #16
 80049a8:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80049aa:	4b2e      	ldr	r3, [pc, #184]	@ (8004a64 <HAL_UART_MspInit+0x164>)
 80049ac:	2200      	movs	r2, #0
 80049ae:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80049b0:	4b2c      	ldr	r3, [pc, #176]	@ (8004a64 <HAL_UART_MspInit+0x164>)
 80049b2:	2280      	movs	r2, #128	@ 0x80
 80049b4:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80049b6:	4b2b      	ldr	r3, [pc, #172]	@ (8004a64 <HAL_UART_MspInit+0x164>)
 80049b8:	2200      	movs	r2, #0
 80049ba:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80049bc:	4b29      	ldr	r3, [pc, #164]	@ (8004a64 <HAL_UART_MspInit+0x164>)
 80049be:	2200      	movs	r2, #0
 80049c0:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80049c2:	4b28      	ldr	r3, [pc, #160]	@ (8004a64 <HAL_UART_MspInit+0x164>)
 80049c4:	2200      	movs	r2, #0
 80049c6:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80049c8:	4b26      	ldr	r3, [pc, #152]	@ (8004a64 <HAL_UART_MspInit+0x164>)
 80049ca:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80049ce:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80049d0:	4824      	ldr	r0, [pc, #144]	@ (8004a64 <HAL_UART_MspInit+0x164>)
 80049d2:	f000 fa97 	bl	8004f04 <HAL_DMA_Init>
 80049d6:	4603      	mov	r3, r0
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d001      	beq.n	80049e0 <HAL_UART_MspInit+0xe0>
    {
      Error_Handler();
 80049dc:	f7fc fe44 	bl	8001668 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	4a20      	ldr	r2, [pc, #128]	@ (8004a64 <HAL_UART_MspInit+0x164>)
 80049e4:	639a      	str	r2, [r3, #56]	@ 0x38
 80049e6:	4a1f      	ldr	r2, [pc, #124]	@ (8004a64 <HAL_UART_MspInit+0x164>)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80049ec:	4b1f      	ldr	r3, [pc, #124]	@ (8004a6c <HAL_UART_MspInit+0x16c>)
 80049ee:	4a20      	ldr	r2, [pc, #128]	@ (8004a70 <HAL_UART_MspInit+0x170>)
 80049f0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80049f2:	4b1e      	ldr	r3, [pc, #120]	@ (8004a6c <HAL_UART_MspInit+0x16c>)
 80049f4:	2200      	movs	r2, #0
 80049f6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80049f8:	4b1c      	ldr	r3, [pc, #112]	@ (8004a6c <HAL_UART_MspInit+0x16c>)
 80049fa:	2200      	movs	r2, #0
 80049fc:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80049fe:	4b1b      	ldr	r3, [pc, #108]	@ (8004a6c <HAL_UART_MspInit+0x16c>)
 8004a00:	2280      	movs	r2, #128	@ 0x80
 8004a02:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004a04:	4b19      	ldr	r3, [pc, #100]	@ (8004a6c <HAL_UART_MspInit+0x16c>)
 8004a06:	2200      	movs	r2, #0
 8004a08:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004a0a:	4b18      	ldr	r3, [pc, #96]	@ (8004a6c <HAL_UART_MspInit+0x16c>)
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8004a10:	4b16      	ldr	r3, [pc, #88]	@ (8004a6c <HAL_UART_MspInit+0x16c>)
 8004a12:	2200      	movs	r2, #0
 8004a14:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8004a16:	4b15      	ldr	r3, [pc, #84]	@ (8004a6c <HAL_UART_MspInit+0x16c>)
 8004a18:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004a1c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004a1e:	4813      	ldr	r0, [pc, #76]	@ (8004a6c <HAL_UART_MspInit+0x16c>)
 8004a20:	f000 fa70 	bl	8004f04 <HAL_DMA_Init>
 8004a24:	4603      	mov	r3, r0
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d001      	beq.n	8004a2e <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8004a2a:	f7fc fe1d 	bl	8001668 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4a0e      	ldr	r2, [pc, #56]	@ (8004a6c <HAL_UART_MspInit+0x16c>)
 8004a32:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004a34:	4a0d      	ldr	r2, [pc, #52]	@ (8004a6c <HAL_UART_MspInit+0x16c>)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	2100      	movs	r1, #0
 8004a3e:	2025      	movs	r0, #37	@ 0x25
 8004a40:	f000 fa29 	bl	8004e96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004a44:	2025      	movs	r0, #37	@ 0x25
 8004a46:	f000 fa42 	bl	8004ece <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004a4a:	bf00      	nop
 8004a4c:	3728      	adds	r7, #40	@ 0x28
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	bf00      	nop
 8004a54:	40013800 	.word	0x40013800
 8004a58:	40021000 	.word	0x40021000
 8004a5c:	40010c00 	.word	0x40010c00
 8004a60:	40010000 	.word	0x40010000
 8004a64:	20000160 	.word	0x20000160
 8004a68:	40020044 	.word	0x40020044
 8004a6c:	200001a4 	.word	0x200001a4
 8004a70:	40020058 	.word	0x40020058

08004a74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004a74:	b480      	push	{r7}
 8004a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004a78:	bf00      	nop
 8004a7a:	e7fd      	b.n	8004a78 <NMI_Handler+0x4>

08004a7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004a80:	bf00      	nop
 8004a82:	e7fd      	b.n	8004a80 <HardFault_Handler+0x4>

08004a84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004a84:	b480      	push	{r7}
 8004a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004a88:	bf00      	nop
 8004a8a:	e7fd      	b.n	8004a88 <MemManage_Handler+0x4>

08004a8c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004a90:	bf00      	nop
 8004a92:	e7fd      	b.n	8004a90 <BusFault_Handler+0x4>

08004a94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004a94:	b480      	push	{r7}
 8004a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004a98:	bf00      	nop
 8004a9a:	e7fd      	b.n	8004a98 <UsageFault_Handler+0x4>

08004a9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004aa0:	bf00      	nop
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bc80      	pop	{r7}
 8004aa6:	4770      	bx	lr

08004aa8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004aac:	bf00      	nop
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bc80      	pop	{r7}
 8004ab2:	4770      	bx	lr

08004ab4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004ab8:	bf00      	nop
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bc80      	pop	{r7}
 8004abe:	4770      	bx	lr

08004ac0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004ac4:	f000 f8f4 	bl	8004cb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004ac8:	bf00      	nop
 8004aca:	bd80      	pop	{r7, pc}

08004acc <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004ad0:	4802      	ldr	r0, [pc, #8]	@ (8004adc <DMA1_Channel4_IRQHandler+0x10>)
 8004ad2:	f000 fc31 	bl	8005338 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8004ad6:	bf00      	nop
 8004ad8:	bd80      	pop	{r7, pc}
 8004ada:	bf00      	nop
 8004adc:	20000160 	.word	0x20000160

08004ae0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8004ae4:	4802      	ldr	r0, [pc, #8]	@ (8004af0 <DMA1_Channel5_IRQHandler+0x10>)
 8004ae6:	f000 fc27 	bl	8005338 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8004aea:	bf00      	nop
 8004aec:	bd80      	pop	{r7, pc}
 8004aee:	bf00      	nop
 8004af0:	200001a4 	.word	0x200001a4

08004af4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart_rosserial);
 8004af8:	4802      	ldr	r0, [pc, #8]	@ (8004b04 <USART1_IRQHandler+0x10>)
 8004afa:	f002 fd5b 	bl	80075b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004afe:	bf00      	nop
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	bf00      	nop
 8004b04:	20000118 	.word	0x20000118

08004b08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b086      	sub	sp, #24
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004b10:	4a14      	ldr	r2, [pc, #80]	@ (8004b64 <_sbrk+0x5c>)
 8004b12:	4b15      	ldr	r3, [pc, #84]	@ (8004b68 <_sbrk+0x60>)
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004b1c:	4b13      	ldr	r3, [pc, #76]	@ (8004b6c <_sbrk+0x64>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d102      	bne.n	8004b2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004b24:	4b11      	ldr	r3, [pc, #68]	@ (8004b6c <_sbrk+0x64>)
 8004b26:	4a12      	ldr	r2, [pc, #72]	@ (8004b70 <_sbrk+0x68>)
 8004b28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004b2a:	4b10      	ldr	r3, [pc, #64]	@ (8004b6c <_sbrk+0x64>)
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4413      	add	r3, r2
 8004b32:	693a      	ldr	r2, [r7, #16]
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d207      	bcs.n	8004b48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004b38:	f003 fd50 	bl	80085dc <__errno>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	220c      	movs	r2, #12
 8004b40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004b42:	f04f 33ff 	mov.w	r3, #4294967295
 8004b46:	e009      	b.n	8004b5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004b48:	4b08      	ldr	r3, [pc, #32]	@ (8004b6c <_sbrk+0x64>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004b4e:	4b07      	ldr	r3, [pc, #28]	@ (8004b6c <_sbrk+0x64>)
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4413      	add	r3, r2
 8004b56:	4a05      	ldr	r2, [pc, #20]	@ (8004b6c <_sbrk+0x64>)
 8004b58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3718      	adds	r7, #24
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	2000c000 	.word	0x2000c000
 8004b68:	00000400 	.word	0x00000400
 8004b6c:	200043f0 	.word	0x200043f0
 8004b70:	20004540 	.word	0x20004540

08004b74 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004b74:	b480      	push	{r7}
 8004b76:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004b78:	bf00      	nop
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bc80      	pop	{r7}
 8004b7e:	4770      	bx	lr

08004b80 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b085      	sub	sp, #20
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	0a5a      	lsrs	r2, r3, #9
 8004b90:	490f      	ldr	r1, [pc, #60]	@ (8004bd0 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8004b92:	fba1 1202 	umull	r1, r2, r1, r2
 8004b96:	09d2      	lsrs	r2, r2, #7
 8004b98:	490e      	ldr	r1, [pc, #56]	@ (8004bd4 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8004b9a:	fb01 f202 	mul.w	r2, r1, r2
 8004b9e:	1a9b      	subs	r3, r3, r2
 8004ba0:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	0a5b      	lsrs	r3, r3, #9
 8004ba8:	4a09      	ldr	r2, [pc, #36]	@ (8004bd0 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8004baa:	fba2 2303 	umull	r2, r3, r2, r3
 8004bae:	09db      	lsrs	r3, r3, #7
 8004bb0:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	441a      	add	r2, r3
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	68fa      	ldr	r2, [r7, #12]
 8004bc2:	601a      	str	r2, [r3, #0]
}
 8004bc4:	bf00      	nop
 8004bc6:	3714      	adds	r7, #20
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bc80      	pop	{r7}
 8004bcc:	4770      	bx	lr
 8004bce:	bf00      	nop
 8004bd0:	00044b83 	.word	0x00044b83
 8004bd4:	3b9aca00 	.word	0x3b9aca00

08004bd8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004bd8:	f7ff ffcc 	bl	8004b74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004bdc:	480b      	ldr	r0, [pc, #44]	@ (8004c0c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8004bde:	490c      	ldr	r1, [pc, #48]	@ (8004c10 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8004be0:	4a0c      	ldr	r2, [pc, #48]	@ (8004c14 <LoopFillZerobss+0x16>)
  movs r3, #0
 8004be2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004be4:	e002      	b.n	8004bec <LoopCopyDataInit>

08004be6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004be6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004be8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004bea:	3304      	adds	r3, #4

08004bec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004bec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004bee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004bf0:	d3f9      	bcc.n	8004be6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004bf2:	4a09      	ldr	r2, [pc, #36]	@ (8004c18 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8004bf4:	4c09      	ldr	r4, [pc, #36]	@ (8004c1c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004bf6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004bf8:	e001      	b.n	8004bfe <LoopFillZerobss>

08004bfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004bfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004bfc:	3204      	adds	r2, #4

08004bfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004bfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004c00:	d3fb      	bcc.n	8004bfa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004c02:	f003 fcf1 	bl	80085e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004c06:	f7fc fadf 	bl	80011c8 <main>
  bx lr
 8004c0a:	4770      	bx	lr
  ldr r0, =_sdata
 8004c0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004c10:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8004c14:	08008a88 	.word	0x08008a88
  ldr r2, =_sbss
 8004c18:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8004c1c:	20004540 	.word	0x20004540

08004c20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004c20:	e7fe      	b.n	8004c20 <ADC1_2_IRQHandler>
	...

08004c24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004c28:	4b08      	ldr	r3, [pc, #32]	@ (8004c4c <HAL_Init+0x28>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a07      	ldr	r2, [pc, #28]	@ (8004c4c <HAL_Init+0x28>)
 8004c2e:	f043 0310 	orr.w	r3, r3, #16
 8004c32:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004c34:	2003      	movs	r0, #3
 8004c36:	f000 f923 	bl	8004e80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004c3a:	200f      	movs	r0, #15
 8004c3c:	f000 f808 	bl	8004c50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004c40:	f7ff fda4 	bl	800478c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004c44:	2300      	movs	r3, #0
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	bf00      	nop
 8004c4c:	40022000 	.word	0x40022000

08004c50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b082      	sub	sp, #8
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004c58:	4b12      	ldr	r3, [pc, #72]	@ (8004ca4 <HAL_InitTick+0x54>)
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	4b12      	ldr	r3, [pc, #72]	@ (8004ca8 <HAL_InitTick+0x58>)
 8004c5e:	781b      	ldrb	r3, [r3, #0]
 8004c60:	4619      	mov	r1, r3
 8004c62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004c66:	fbb3 f3f1 	udiv	r3, r3, r1
 8004c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f000 f93b 	bl	8004eea <HAL_SYSTICK_Config>
 8004c74:	4603      	mov	r3, r0
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d001      	beq.n	8004c7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e00e      	b.n	8004c9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2b0f      	cmp	r3, #15
 8004c82:	d80a      	bhi.n	8004c9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004c84:	2200      	movs	r2, #0
 8004c86:	6879      	ldr	r1, [r7, #4]
 8004c88:	f04f 30ff 	mov.w	r0, #4294967295
 8004c8c:	f000 f903 	bl	8004e96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004c90:	4a06      	ldr	r2, [pc, #24]	@ (8004cac <HAL_InitTick+0x5c>)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004c96:	2300      	movs	r3, #0
 8004c98:	e000      	b.n	8004c9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3708      	adds	r7, #8
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	20000008 	.word	0x20000008
 8004ca8:	20000010 	.word	0x20000010
 8004cac:	2000000c 	.word	0x2000000c

08004cb0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004cb4:	4b05      	ldr	r3, [pc, #20]	@ (8004ccc <HAL_IncTick+0x1c>)
 8004cb6:	781b      	ldrb	r3, [r3, #0]
 8004cb8:	461a      	mov	r2, r3
 8004cba:	4b05      	ldr	r3, [pc, #20]	@ (8004cd0 <HAL_IncTick+0x20>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4413      	add	r3, r2
 8004cc0:	4a03      	ldr	r2, [pc, #12]	@ (8004cd0 <HAL_IncTick+0x20>)
 8004cc2:	6013      	str	r3, [r2, #0]
}
 8004cc4:	bf00      	nop
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bc80      	pop	{r7}
 8004cca:	4770      	bx	lr
 8004ccc:	20000010 	.word	0x20000010
 8004cd0:	200043f4 	.word	0x200043f4

08004cd4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	af00      	add	r7, sp, #0
  return uwTick;
 8004cd8:	4b02      	ldr	r3, [pc, #8]	@ (8004ce4 <HAL_GetTick+0x10>)
 8004cda:	681b      	ldr	r3, [r3, #0]
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bc80      	pop	{r7}
 8004ce2:	4770      	bx	lr
 8004ce4:	200043f4 	.word	0x200043f4

08004ce8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b085      	sub	sp, #20
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	f003 0307 	and.w	r3, r3, #7
 8004cf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004cf8:	4b0c      	ldr	r3, [pc, #48]	@ (8004d2c <__NVIC_SetPriorityGrouping+0x44>)
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004cfe:	68ba      	ldr	r2, [r7, #8]
 8004d00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004d04:	4013      	ands	r3, r2
 8004d06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004d10:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004d14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004d1a:	4a04      	ldr	r2, [pc, #16]	@ (8004d2c <__NVIC_SetPriorityGrouping+0x44>)
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	60d3      	str	r3, [r2, #12]
}
 8004d20:	bf00      	nop
 8004d22:	3714      	adds	r7, #20
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bc80      	pop	{r7}
 8004d28:	4770      	bx	lr
 8004d2a:	bf00      	nop
 8004d2c:	e000ed00 	.word	0xe000ed00

08004d30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004d30:	b480      	push	{r7}
 8004d32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004d34:	4b04      	ldr	r3, [pc, #16]	@ (8004d48 <__NVIC_GetPriorityGrouping+0x18>)
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	0a1b      	lsrs	r3, r3, #8
 8004d3a:	f003 0307 	and.w	r3, r3, #7
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bc80      	pop	{r7}
 8004d44:	4770      	bx	lr
 8004d46:	bf00      	nop
 8004d48:	e000ed00 	.word	0xe000ed00

08004d4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b083      	sub	sp, #12
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	4603      	mov	r3, r0
 8004d54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	db0b      	blt.n	8004d76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d5e:	79fb      	ldrb	r3, [r7, #7]
 8004d60:	f003 021f 	and.w	r2, r3, #31
 8004d64:	4906      	ldr	r1, [pc, #24]	@ (8004d80 <__NVIC_EnableIRQ+0x34>)
 8004d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d6a:	095b      	lsrs	r3, r3, #5
 8004d6c:	2001      	movs	r0, #1
 8004d6e:	fa00 f202 	lsl.w	r2, r0, r2
 8004d72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004d76:	bf00      	nop
 8004d78:	370c      	adds	r7, #12
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bc80      	pop	{r7}
 8004d7e:	4770      	bx	lr
 8004d80:	e000e100 	.word	0xe000e100

08004d84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b083      	sub	sp, #12
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	6039      	str	r1, [r7, #0]
 8004d8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	db0a      	blt.n	8004dae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	b2da      	uxtb	r2, r3
 8004d9c:	490c      	ldr	r1, [pc, #48]	@ (8004dd0 <__NVIC_SetPriority+0x4c>)
 8004d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004da2:	0112      	lsls	r2, r2, #4
 8004da4:	b2d2      	uxtb	r2, r2
 8004da6:	440b      	add	r3, r1
 8004da8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004dac:	e00a      	b.n	8004dc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	b2da      	uxtb	r2, r3
 8004db2:	4908      	ldr	r1, [pc, #32]	@ (8004dd4 <__NVIC_SetPriority+0x50>)
 8004db4:	79fb      	ldrb	r3, [r7, #7]
 8004db6:	f003 030f 	and.w	r3, r3, #15
 8004dba:	3b04      	subs	r3, #4
 8004dbc:	0112      	lsls	r2, r2, #4
 8004dbe:	b2d2      	uxtb	r2, r2
 8004dc0:	440b      	add	r3, r1
 8004dc2:	761a      	strb	r2, [r3, #24]
}
 8004dc4:	bf00      	nop
 8004dc6:	370c      	adds	r7, #12
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bc80      	pop	{r7}
 8004dcc:	4770      	bx	lr
 8004dce:	bf00      	nop
 8004dd0:	e000e100 	.word	0xe000e100
 8004dd4:	e000ed00 	.word	0xe000ed00

08004dd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b089      	sub	sp, #36	@ 0x24
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	60b9      	str	r1, [r7, #8]
 8004de2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f003 0307 	and.w	r3, r3, #7
 8004dea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004dec:	69fb      	ldr	r3, [r7, #28]
 8004dee:	f1c3 0307 	rsb	r3, r3, #7
 8004df2:	2b04      	cmp	r3, #4
 8004df4:	bf28      	it	cs
 8004df6:	2304      	movcs	r3, #4
 8004df8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004dfa:	69fb      	ldr	r3, [r7, #28]
 8004dfc:	3304      	adds	r3, #4
 8004dfe:	2b06      	cmp	r3, #6
 8004e00:	d902      	bls.n	8004e08 <NVIC_EncodePriority+0x30>
 8004e02:	69fb      	ldr	r3, [r7, #28]
 8004e04:	3b03      	subs	r3, #3
 8004e06:	e000      	b.n	8004e0a <NVIC_EncodePriority+0x32>
 8004e08:	2300      	movs	r3, #0
 8004e0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e0c:	f04f 32ff 	mov.w	r2, #4294967295
 8004e10:	69bb      	ldr	r3, [r7, #24]
 8004e12:	fa02 f303 	lsl.w	r3, r2, r3
 8004e16:	43da      	mvns	r2, r3
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	401a      	ands	r2, r3
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004e20:	f04f 31ff 	mov.w	r1, #4294967295
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	fa01 f303 	lsl.w	r3, r1, r3
 8004e2a:	43d9      	mvns	r1, r3
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e30:	4313      	orrs	r3, r2
         );
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3724      	adds	r7, #36	@ 0x24
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bc80      	pop	{r7}
 8004e3a:	4770      	bx	lr

08004e3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b082      	sub	sp, #8
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	3b01      	subs	r3, #1
 8004e48:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004e4c:	d301      	bcc.n	8004e52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e00f      	b.n	8004e72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004e52:	4a0a      	ldr	r2, [pc, #40]	@ (8004e7c <SysTick_Config+0x40>)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	3b01      	subs	r3, #1
 8004e58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004e5a:	210f      	movs	r1, #15
 8004e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e60:	f7ff ff90 	bl	8004d84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004e64:	4b05      	ldr	r3, [pc, #20]	@ (8004e7c <SysTick_Config+0x40>)
 8004e66:	2200      	movs	r2, #0
 8004e68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004e6a:	4b04      	ldr	r3, [pc, #16]	@ (8004e7c <SysTick_Config+0x40>)
 8004e6c:	2207      	movs	r2, #7
 8004e6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004e70:	2300      	movs	r3, #0
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3708      	adds	r7, #8
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	bf00      	nop
 8004e7c:	e000e010 	.word	0xe000e010

08004e80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b082      	sub	sp, #8
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	f7ff ff2d 	bl	8004ce8 <__NVIC_SetPriorityGrouping>
}
 8004e8e:	bf00      	nop
 8004e90:	3708      	adds	r7, #8
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}

08004e96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004e96:	b580      	push	{r7, lr}
 8004e98:	b086      	sub	sp, #24
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	60b9      	str	r1, [r7, #8]
 8004ea0:	607a      	str	r2, [r7, #4]
 8004ea2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004ea8:	f7ff ff42 	bl	8004d30 <__NVIC_GetPriorityGrouping>
 8004eac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	68b9      	ldr	r1, [r7, #8]
 8004eb2:	6978      	ldr	r0, [r7, #20]
 8004eb4:	f7ff ff90 	bl	8004dd8 <NVIC_EncodePriority>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ebe:	4611      	mov	r1, r2
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f7ff ff5f 	bl	8004d84 <__NVIC_SetPriority>
}
 8004ec6:	bf00      	nop
 8004ec8:	3718      	adds	r7, #24
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}

08004ece <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ece:	b580      	push	{r7, lr}
 8004ed0:	b082      	sub	sp, #8
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004ed8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004edc:	4618      	mov	r0, r3
 8004ede:	f7ff ff35 	bl	8004d4c <__NVIC_EnableIRQ>
}
 8004ee2:	bf00      	nop
 8004ee4:	3708      	adds	r7, #8
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}

08004eea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004eea:	b580      	push	{r7, lr}
 8004eec:	b082      	sub	sp, #8
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f7ff ffa2 	bl	8004e3c <SysTick_Config>
 8004ef8:	4603      	mov	r3, r0
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3708      	adds	r7, #8
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
	...

08004f04 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b085      	sub	sp, #20
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d101      	bne.n	8004f1a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e059      	b.n	8004fce <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	461a      	mov	r2, r3
 8004f20:	4b2d      	ldr	r3, [pc, #180]	@ (8004fd8 <HAL_DMA_Init+0xd4>)
 8004f22:	429a      	cmp	r2, r3
 8004f24:	d80f      	bhi.n	8004f46 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	461a      	mov	r2, r3
 8004f2c:	4b2b      	ldr	r3, [pc, #172]	@ (8004fdc <HAL_DMA_Init+0xd8>)
 8004f2e:	4413      	add	r3, r2
 8004f30:	4a2b      	ldr	r2, [pc, #172]	@ (8004fe0 <HAL_DMA_Init+0xdc>)
 8004f32:	fba2 2303 	umull	r2, r3, r2, r3
 8004f36:	091b      	lsrs	r3, r3, #4
 8004f38:	009a      	lsls	r2, r3, #2
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	4a28      	ldr	r2, [pc, #160]	@ (8004fe4 <HAL_DMA_Init+0xe0>)
 8004f42:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004f44:	e00e      	b.n	8004f64 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	4b26      	ldr	r3, [pc, #152]	@ (8004fe8 <HAL_DMA_Init+0xe4>)
 8004f4e:	4413      	add	r3, r2
 8004f50:	4a23      	ldr	r2, [pc, #140]	@ (8004fe0 <HAL_DMA_Init+0xdc>)
 8004f52:	fba2 2303 	umull	r2, r3, r2, r3
 8004f56:	091b      	lsrs	r3, r3, #4
 8004f58:	009a      	lsls	r2, r3, #2
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	4a22      	ldr	r2, [pc, #136]	@ (8004fec <HAL_DMA_Init+0xe8>)
 8004f62:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2202      	movs	r2, #2
 8004f68:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004f7a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8004f7e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004f88:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	68db      	ldr	r3, [r3, #12]
 8004f8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f94:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	695b      	ldr	r3, [r3, #20]
 8004f9a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004fa0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	69db      	ldr	r3, [r3, #28]
 8004fa6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004fa8:	68fa      	ldr	r2, [r7, #12]
 8004faa:	4313      	orrs	r3, r2
 8004fac:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	68fa      	ldr	r2, [r7, #12]
 8004fb4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004fcc:	2300      	movs	r3, #0
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3714      	adds	r7, #20
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bc80      	pop	{r7}
 8004fd6:	4770      	bx	lr
 8004fd8:	40020407 	.word	0x40020407
 8004fdc:	bffdfff8 	.word	0xbffdfff8
 8004fe0:	cccccccd 	.word	0xcccccccd
 8004fe4:	40020000 	.word	0x40020000
 8004fe8:	bffdfbf8 	.word	0xbffdfbf8
 8004fec:	40020400 	.word	0x40020400

08004ff0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b086      	sub	sp, #24
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	60f8      	str	r0, [r7, #12]
 8004ff8:	60b9      	str	r1, [r7, #8]
 8004ffa:	607a      	str	r2, [r7, #4]
 8004ffc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ffe:	2300      	movs	r3, #0
 8005000:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005008:	2b01      	cmp	r3, #1
 800500a:	d101      	bne.n	8005010 <HAL_DMA_Start_IT+0x20>
 800500c:	2302      	movs	r3, #2
 800500e:	e04b      	b.n	80050a8 <HAL_DMA_Start_IT+0xb8>
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2201      	movs	r2, #1
 8005014:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800501e:	b2db      	uxtb	r3, r3
 8005020:	2b01      	cmp	r3, #1
 8005022:	d13a      	bne.n	800509a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2202      	movs	r2, #2
 8005028:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2200      	movs	r2, #0
 8005030:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f022 0201 	bic.w	r2, r2, #1
 8005040:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	68b9      	ldr	r1, [r7, #8]
 8005048:	68f8      	ldr	r0, [r7, #12]
 800504a:	f000 fbb1 	bl	80057b0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005052:	2b00      	cmp	r3, #0
 8005054:	d008      	beq.n	8005068 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f042 020e 	orr.w	r2, r2, #14
 8005064:	601a      	str	r2, [r3, #0]
 8005066:	e00f      	b.n	8005088 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f022 0204 	bic.w	r2, r2, #4
 8005076:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f042 020a 	orr.w	r2, r2, #10
 8005086:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f042 0201 	orr.w	r2, r2, #1
 8005096:	601a      	str	r2, [r3, #0]
 8005098:	e005      	b.n	80050a6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2200      	movs	r2, #0
 800509e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80050a2:	2302      	movs	r3, #2
 80050a4:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80050a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3718      	adds	r7, #24
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}

080050b0 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b085      	sub	sp, #20
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050b8:	2300      	movs	r3, #0
 80050ba:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	2b02      	cmp	r3, #2
 80050c6:	d008      	beq.n	80050da <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2204      	movs	r2, #4
 80050cc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2200      	movs	r2, #0
 80050d2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	e020      	b.n	800511c <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f022 020e 	bic.w	r2, r2, #14
 80050e8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f022 0201 	bic.w	r2, r2, #1
 80050f8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005102:	2101      	movs	r1, #1
 8005104:	fa01 f202 	lsl.w	r2, r1, r2
 8005108:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2201      	movs	r2, #1
 800510e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800511a:	7bfb      	ldrb	r3, [r7, #15]
}
 800511c:	4618      	mov	r0, r3
 800511e:	3714      	adds	r7, #20
 8005120:	46bd      	mov	sp, r7
 8005122:	bc80      	pop	{r7}
 8005124:	4770      	bx	lr
	...

08005128 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8005128:	b580      	push	{r7, lr}
 800512a:	b084      	sub	sp, #16
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005130:	2300      	movs	r3, #0
 8005132:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800513a:	b2db      	uxtb	r3, r3
 800513c:	2b02      	cmp	r3, #2
 800513e:	d005      	beq.n	800514c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2204      	movs	r2, #4
 8005144:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	73fb      	strb	r3, [r7, #15]
 800514a:	e0d6      	b.n	80052fa <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f022 020e 	bic.w	r2, r2, #14
 800515a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f022 0201 	bic.w	r2, r2, #1
 800516a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	461a      	mov	r2, r3
 8005172:	4b64      	ldr	r3, [pc, #400]	@ (8005304 <HAL_DMA_Abort_IT+0x1dc>)
 8005174:	429a      	cmp	r2, r3
 8005176:	d958      	bls.n	800522a <HAL_DMA_Abort_IT+0x102>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a62      	ldr	r2, [pc, #392]	@ (8005308 <HAL_DMA_Abort_IT+0x1e0>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d04f      	beq.n	8005222 <HAL_DMA_Abort_IT+0xfa>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a61      	ldr	r2, [pc, #388]	@ (800530c <HAL_DMA_Abort_IT+0x1e4>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d048      	beq.n	800521e <HAL_DMA_Abort_IT+0xf6>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a5f      	ldr	r2, [pc, #380]	@ (8005310 <HAL_DMA_Abort_IT+0x1e8>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d040      	beq.n	8005218 <HAL_DMA_Abort_IT+0xf0>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a5e      	ldr	r2, [pc, #376]	@ (8005314 <HAL_DMA_Abort_IT+0x1ec>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d038      	beq.n	8005212 <HAL_DMA_Abort_IT+0xea>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a5c      	ldr	r2, [pc, #368]	@ (8005318 <HAL_DMA_Abort_IT+0x1f0>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d030      	beq.n	800520c <HAL_DMA_Abort_IT+0xe4>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a5b      	ldr	r2, [pc, #364]	@ (800531c <HAL_DMA_Abort_IT+0x1f4>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d028      	beq.n	8005206 <HAL_DMA_Abort_IT+0xde>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a52      	ldr	r2, [pc, #328]	@ (8005304 <HAL_DMA_Abort_IT+0x1dc>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d020      	beq.n	8005200 <HAL_DMA_Abort_IT+0xd8>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a57      	ldr	r2, [pc, #348]	@ (8005320 <HAL_DMA_Abort_IT+0x1f8>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d019      	beq.n	80051fc <HAL_DMA_Abort_IT+0xd4>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a55      	ldr	r2, [pc, #340]	@ (8005324 <HAL_DMA_Abort_IT+0x1fc>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d012      	beq.n	80051f8 <HAL_DMA_Abort_IT+0xd0>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a54      	ldr	r2, [pc, #336]	@ (8005328 <HAL_DMA_Abort_IT+0x200>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d00a      	beq.n	80051f2 <HAL_DMA_Abort_IT+0xca>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a52      	ldr	r2, [pc, #328]	@ (800532c <HAL_DMA_Abort_IT+0x204>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d102      	bne.n	80051ec <HAL_DMA_Abort_IT+0xc4>
 80051e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80051ea:	e01b      	b.n	8005224 <HAL_DMA_Abort_IT+0xfc>
 80051ec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80051f0:	e018      	b.n	8005224 <HAL_DMA_Abort_IT+0xfc>
 80051f2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80051f6:	e015      	b.n	8005224 <HAL_DMA_Abort_IT+0xfc>
 80051f8:	2310      	movs	r3, #16
 80051fa:	e013      	b.n	8005224 <HAL_DMA_Abort_IT+0xfc>
 80051fc:	2301      	movs	r3, #1
 80051fe:	e011      	b.n	8005224 <HAL_DMA_Abort_IT+0xfc>
 8005200:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005204:	e00e      	b.n	8005224 <HAL_DMA_Abort_IT+0xfc>
 8005206:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800520a:	e00b      	b.n	8005224 <HAL_DMA_Abort_IT+0xfc>
 800520c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005210:	e008      	b.n	8005224 <HAL_DMA_Abort_IT+0xfc>
 8005212:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005216:	e005      	b.n	8005224 <HAL_DMA_Abort_IT+0xfc>
 8005218:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800521c:	e002      	b.n	8005224 <HAL_DMA_Abort_IT+0xfc>
 800521e:	2310      	movs	r3, #16
 8005220:	e000      	b.n	8005224 <HAL_DMA_Abort_IT+0xfc>
 8005222:	2301      	movs	r3, #1
 8005224:	4a42      	ldr	r2, [pc, #264]	@ (8005330 <HAL_DMA_Abort_IT+0x208>)
 8005226:	6053      	str	r3, [r2, #4]
 8005228:	e057      	b.n	80052da <HAL_DMA_Abort_IT+0x1b2>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a36      	ldr	r2, [pc, #216]	@ (8005308 <HAL_DMA_Abort_IT+0x1e0>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d04f      	beq.n	80052d4 <HAL_DMA_Abort_IT+0x1ac>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a34      	ldr	r2, [pc, #208]	@ (800530c <HAL_DMA_Abort_IT+0x1e4>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d048      	beq.n	80052d0 <HAL_DMA_Abort_IT+0x1a8>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a33      	ldr	r2, [pc, #204]	@ (8005310 <HAL_DMA_Abort_IT+0x1e8>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d040      	beq.n	80052ca <HAL_DMA_Abort_IT+0x1a2>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a31      	ldr	r2, [pc, #196]	@ (8005314 <HAL_DMA_Abort_IT+0x1ec>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d038      	beq.n	80052c4 <HAL_DMA_Abort_IT+0x19c>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a30      	ldr	r2, [pc, #192]	@ (8005318 <HAL_DMA_Abort_IT+0x1f0>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d030      	beq.n	80052be <HAL_DMA_Abort_IT+0x196>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a2e      	ldr	r2, [pc, #184]	@ (800531c <HAL_DMA_Abort_IT+0x1f4>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d028      	beq.n	80052b8 <HAL_DMA_Abort_IT+0x190>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a26      	ldr	r2, [pc, #152]	@ (8005304 <HAL_DMA_Abort_IT+0x1dc>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d020      	beq.n	80052b2 <HAL_DMA_Abort_IT+0x18a>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a2a      	ldr	r2, [pc, #168]	@ (8005320 <HAL_DMA_Abort_IT+0x1f8>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d019      	beq.n	80052ae <HAL_DMA_Abort_IT+0x186>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a29      	ldr	r2, [pc, #164]	@ (8005324 <HAL_DMA_Abort_IT+0x1fc>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d012      	beq.n	80052aa <HAL_DMA_Abort_IT+0x182>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a27      	ldr	r2, [pc, #156]	@ (8005328 <HAL_DMA_Abort_IT+0x200>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d00a      	beq.n	80052a4 <HAL_DMA_Abort_IT+0x17c>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a26      	ldr	r2, [pc, #152]	@ (800532c <HAL_DMA_Abort_IT+0x204>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d102      	bne.n	800529e <HAL_DMA_Abort_IT+0x176>
 8005298:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800529c:	e01b      	b.n	80052d6 <HAL_DMA_Abort_IT+0x1ae>
 800529e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80052a2:	e018      	b.n	80052d6 <HAL_DMA_Abort_IT+0x1ae>
 80052a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80052a8:	e015      	b.n	80052d6 <HAL_DMA_Abort_IT+0x1ae>
 80052aa:	2310      	movs	r3, #16
 80052ac:	e013      	b.n	80052d6 <HAL_DMA_Abort_IT+0x1ae>
 80052ae:	2301      	movs	r3, #1
 80052b0:	e011      	b.n	80052d6 <HAL_DMA_Abort_IT+0x1ae>
 80052b2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80052b6:	e00e      	b.n	80052d6 <HAL_DMA_Abort_IT+0x1ae>
 80052b8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80052bc:	e00b      	b.n	80052d6 <HAL_DMA_Abort_IT+0x1ae>
 80052be:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80052c2:	e008      	b.n	80052d6 <HAL_DMA_Abort_IT+0x1ae>
 80052c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80052c8:	e005      	b.n	80052d6 <HAL_DMA_Abort_IT+0x1ae>
 80052ca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80052ce:	e002      	b.n	80052d6 <HAL_DMA_Abort_IT+0x1ae>
 80052d0:	2310      	movs	r3, #16
 80052d2:	e000      	b.n	80052d6 <HAL_DMA_Abort_IT+0x1ae>
 80052d4:	2301      	movs	r3, #1
 80052d6:	4a17      	ldr	r2, [pc, #92]	@ (8005334 <HAL_DMA_Abort_IT+0x20c>)
 80052d8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2201      	movs	r2, #1
 80052de:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d003      	beq.n	80052fa <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	4798      	blx	r3
    } 
  }
  return status;
 80052fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3710      	adds	r7, #16
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}
 8005304:	40020080 	.word	0x40020080
 8005308:	40020008 	.word	0x40020008
 800530c:	4002001c 	.word	0x4002001c
 8005310:	40020030 	.word	0x40020030
 8005314:	40020044 	.word	0x40020044
 8005318:	40020058 	.word	0x40020058
 800531c:	4002006c 	.word	0x4002006c
 8005320:	40020408 	.word	0x40020408
 8005324:	4002041c 	.word	0x4002041c
 8005328:	40020430 	.word	0x40020430
 800532c:	40020444 	.word	0x40020444
 8005330:	40020400 	.word	0x40020400
 8005334:	40020000 	.word	0x40020000

08005338 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b084      	sub	sp, #16
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005354:	2204      	movs	r2, #4
 8005356:	409a      	lsls	r2, r3
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	4013      	ands	r3, r2
 800535c:	2b00      	cmp	r3, #0
 800535e:	f000 80f1 	beq.w	8005544 <HAL_DMA_IRQHandler+0x20c>
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	f003 0304 	and.w	r3, r3, #4
 8005368:	2b00      	cmp	r3, #0
 800536a:	f000 80eb 	beq.w	8005544 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f003 0320 	and.w	r3, r3, #32
 8005378:	2b00      	cmp	r3, #0
 800537a:	d107      	bne.n	800538c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f022 0204 	bic.w	r2, r2, #4
 800538a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	461a      	mov	r2, r3
 8005392:	4b5f      	ldr	r3, [pc, #380]	@ (8005510 <HAL_DMA_IRQHandler+0x1d8>)
 8005394:	429a      	cmp	r2, r3
 8005396:	d958      	bls.n	800544a <HAL_DMA_IRQHandler+0x112>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a5d      	ldr	r2, [pc, #372]	@ (8005514 <HAL_DMA_IRQHandler+0x1dc>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d04f      	beq.n	8005442 <HAL_DMA_IRQHandler+0x10a>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a5c      	ldr	r2, [pc, #368]	@ (8005518 <HAL_DMA_IRQHandler+0x1e0>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d048      	beq.n	800543e <HAL_DMA_IRQHandler+0x106>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a5a      	ldr	r2, [pc, #360]	@ (800551c <HAL_DMA_IRQHandler+0x1e4>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d040      	beq.n	8005438 <HAL_DMA_IRQHandler+0x100>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a59      	ldr	r2, [pc, #356]	@ (8005520 <HAL_DMA_IRQHandler+0x1e8>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d038      	beq.n	8005432 <HAL_DMA_IRQHandler+0xfa>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a57      	ldr	r2, [pc, #348]	@ (8005524 <HAL_DMA_IRQHandler+0x1ec>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d030      	beq.n	800542c <HAL_DMA_IRQHandler+0xf4>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a56      	ldr	r2, [pc, #344]	@ (8005528 <HAL_DMA_IRQHandler+0x1f0>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d028      	beq.n	8005426 <HAL_DMA_IRQHandler+0xee>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a4d      	ldr	r2, [pc, #308]	@ (8005510 <HAL_DMA_IRQHandler+0x1d8>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d020      	beq.n	8005420 <HAL_DMA_IRQHandler+0xe8>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a52      	ldr	r2, [pc, #328]	@ (800552c <HAL_DMA_IRQHandler+0x1f4>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d019      	beq.n	800541c <HAL_DMA_IRQHandler+0xe4>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a50      	ldr	r2, [pc, #320]	@ (8005530 <HAL_DMA_IRQHandler+0x1f8>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d012      	beq.n	8005418 <HAL_DMA_IRQHandler+0xe0>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a4f      	ldr	r2, [pc, #316]	@ (8005534 <HAL_DMA_IRQHandler+0x1fc>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d00a      	beq.n	8005412 <HAL_DMA_IRQHandler+0xda>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a4d      	ldr	r2, [pc, #308]	@ (8005538 <HAL_DMA_IRQHandler+0x200>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d102      	bne.n	800540c <HAL_DMA_IRQHandler+0xd4>
 8005406:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800540a:	e01b      	b.n	8005444 <HAL_DMA_IRQHandler+0x10c>
 800540c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8005410:	e018      	b.n	8005444 <HAL_DMA_IRQHandler+0x10c>
 8005412:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005416:	e015      	b.n	8005444 <HAL_DMA_IRQHandler+0x10c>
 8005418:	2340      	movs	r3, #64	@ 0x40
 800541a:	e013      	b.n	8005444 <HAL_DMA_IRQHandler+0x10c>
 800541c:	2304      	movs	r3, #4
 800541e:	e011      	b.n	8005444 <HAL_DMA_IRQHandler+0x10c>
 8005420:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8005424:	e00e      	b.n	8005444 <HAL_DMA_IRQHandler+0x10c>
 8005426:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800542a:	e00b      	b.n	8005444 <HAL_DMA_IRQHandler+0x10c>
 800542c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8005430:	e008      	b.n	8005444 <HAL_DMA_IRQHandler+0x10c>
 8005432:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005436:	e005      	b.n	8005444 <HAL_DMA_IRQHandler+0x10c>
 8005438:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800543c:	e002      	b.n	8005444 <HAL_DMA_IRQHandler+0x10c>
 800543e:	2340      	movs	r3, #64	@ 0x40
 8005440:	e000      	b.n	8005444 <HAL_DMA_IRQHandler+0x10c>
 8005442:	2304      	movs	r3, #4
 8005444:	4a3d      	ldr	r2, [pc, #244]	@ (800553c <HAL_DMA_IRQHandler+0x204>)
 8005446:	6053      	str	r3, [r2, #4]
 8005448:	e057      	b.n	80054fa <HAL_DMA_IRQHandler+0x1c2>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a31      	ldr	r2, [pc, #196]	@ (8005514 <HAL_DMA_IRQHandler+0x1dc>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d04f      	beq.n	80054f4 <HAL_DMA_IRQHandler+0x1bc>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a2f      	ldr	r2, [pc, #188]	@ (8005518 <HAL_DMA_IRQHandler+0x1e0>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d048      	beq.n	80054f0 <HAL_DMA_IRQHandler+0x1b8>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a2e      	ldr	r2, [pc, #184]	@ (800551c <HAL_DMA_IRQHandler+0x1e4>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d040      	beq.n	80054ea <HAL_DMA_IRQHandler+0x1b2>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a2c      	ldr	r2, [pc, #176]	@ (8005520 <HAL_DMA_IRQHandler+0x1e8>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d038      	beq.n	80054e4 <HAL_DMA_IRQHandler+0x1ac>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a2b      	ldr	r2, [pc, #172]	@ (8005524 <HAL_DMA_IRQHandler+0x1ec>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d030      	beq.n	80054de <HAL_DMA_IRQHandler+0x1a6>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a29      	ldr	r2, [pc, #164]	@ (8005528 <HAL_DMA_IRQHandler+0x1f0>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d028      	beq.n	80054d8 <HAL_DMA_IRQHandler+0x1a0>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a21      	ldr	r2, [pc, #132]	@ (8005510 <HAL_DMA_IRQHandler+0x1d8>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d020      	beq.n	80054d2 <HAL_DMA_IRQHandler+0x19a>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a25      	ldr	r2, [pc, #148]	@ (800552c <HAL_DMA_IRQHandler+0x1f4>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d019      	beq.n	80054ce <HAL_DMA_IRQHandler+0x196>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a24      	ldr	r2, [pc, #144]	@ (8005530 <HAL_DMA_IRQHandler+0x1f8>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d012      	beq.n	80054ca <HAL_DMA_IRQHandler+0x192>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a22      	ldr	r2, [pc, #136]	@ (8005534 <HAL_DMA_IRQHandler+0x1fc>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d00a      	beq.n	80054c4 <HAL_DMA_IRQHandler+0x18c>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a21      	ldr	r2, [pc, #132]	@ (8005538 <HAL_DMA_IRQHandler+0x200>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d102      	bne.n	80054be <HAL_DMA_IRQHandler+0x186>
 80054b8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80054bc:	e01b      	b.n	80054f6 <HAL_DMA_IRQHandler+0x1be>
 80054be:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80054c2:	e018      	b.n	80054f6 <HAL_DMA_IRQHandler+0x1be>
 80054c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80054c8:	e015      	b.n	80054f6 <HAL_DMA_IRQHandler+0x1be>
 80054ca:	2340      	movs	r3, #64	@ 0x40
 80054cc:	e013      	b.n	80054f6 <HAL_DMA_IRQHandler+0x1be>
 80054ce:	2304      	movs	r3, #4
 80054d0:	e011      	b.n	80054f6 <HAL_DMA_IRQHandler+0x1be>
 80054d2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80054d6:	e00e      	b.n	80054f6 <HAL_DMA_IRQHandler+0x1be>
 80054d8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80054dc:	e00b      	b.n	80054f6 <HAL_DMA_IRQHandler+0x1be>
 80054de:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80054e2:	e008      	b.n	80054f6 <HAL_DMA_IRQHandler+0x1be>
 80054e4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80054e8:	e005      	b.n	80054f6 <HAL_DMA_IRQHandler+0x1be>
 80054ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80054ee:	e002      	b.n	80054f6 <HAL_DMA_IRQHandler+0x1be>
 80054f0:	2340      	movs	r3, #64	@ 0x40
 80054f2:	e000      	b.n	80054f6 <HAL_DMA_IRQHandler+0x1be>
 80054f4:	2304      	movs	r3, #4
 80054f6:	4a12      	ldr	r2, [pc, #72]	@ (8005540 <HAL_DMA_IRQHandler+0x208>)
 80054f8:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054fe:	2b00      	cmp	r3, #0
 8005500:	f000 8136 	beq.w	8005770 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800550c:	e130      	b.n	8005770 <HAL_DMA_IRQHandler+0x438>
 800550e:	bf00      	nop
 8005510:	40020080 	.word	0x40020080
 8005514:	40020008 	.word	0x40020008
 8005518:	4002001c 	.word	0x4002001c
 800551c:	40020030 	.word	0x40020030
 8005520:	40020044 	.word	0x40020044
 8005524:	40020058 	.word	0x40020058
 8005528:	4002006c 	.word	0x4002006c
 800552c:	40020408 	.word	0x40020408
 8005530:	4002041c 	.word	0x4002041c
 8005534:	40020430 	.word	0x40020430
 8005538:	40020444 	.word	0x40020444
 800553c:	40020400 	.word	0x40020400
 8005540:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005548:	2202      	movs	r2, #2
 800554a:	409a      	lsls	r2, r3
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	4013      	ands	r3, r2
 8005550:	2b00      	cmp	r3, #0
 8005552:	f000 80dd 	beq.w	8005710 <HAL_DMA_IRQHandler+0x3d8>
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	f003 0302 	and.w	r3, r3, #2
 800555c:	2b00      	cmp	r3, #0
 800555e:	f000 80d7 	beq.w	8005710 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 0320 	and.w	r3, r3, #32
 800556c:	2b00      	cmp	r3, #0
 800556e:	d10b      	bne.n	8005588 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f022 020a 	bic.w	r2, r2, #10
 800557e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2201      	movs	r2, #1
 8005584:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	461a      	mov	r2, r3
 800558e:	4b7b      	ldr	r3, [pc, #492]	@ (800577c <HAL_DMA_IRQHandler+0x444>)
 8005590:	429a      	cmp	r2, r3
 8005592:	d958      	bls.n	8005646 <HAL_DMA_IRQHandler+0x30e>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a79      	ldr	r2, [pc, #484]	@ (8005780 <HAL_DMA_IRQHandler+0x448>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d04f      	beq.n	800563e <HAL_DMA_IRQHandler+0x306>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a78      	ldr	r2, [pc, #480]	@ (8005784 <HAL_DMA_IRQHandler+0x44c>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d048      	beq.n	800563a <HAL_DMA_IRQHandler+0x302>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a76      	ldr	r2, [pc, #472]	@ (8005788 <HAL_DMA_IRQHandler+0x450>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d040      	beq.n	8005634 <HAL_DMA_IRQHandler+0x2fc>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a75      	ldr	r2, [pc, #468]	@ (800578c <HAL_DMA_IRQHandler+0x454>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d038      	beq.n	800562e <HAL_DMA_IRQHandler+0x2f6>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a73      	ldr	r2, [pc, #460]	@ (8005790 <HAL_DMA_IRQHandler+0x458>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d030      	beq.n	8005628 <HAL_DMA_IRQHandler+0x2f0>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a72      	ldr	r2, [pc, #456]	@ (8005794 <HAL_DMA_IRQHandler+0x45c>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d028      	beq.n	8005622 <HAL_DMA_IRQHandler+0x2ea>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a69      	ldr	r2, [pc, #420]	@ (800577c <HAL_DMA_IRQHandler+0x444>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d020      	beq.n	800561c <HAL_DMA_IRQHandler+0x2e4>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a6e      	ldr	r2, [pc, #440]	@ (8005798 <HAL_DMA_IRQHandler+0x460>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d019      	beq.n	8005618 <HAL_DMA_IRQHandler+0x2e0>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a6c      	ldr	r2, [pc, #432]	@ (800579c <HAL_DMA_IRQHandler+0x464>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d012      	beq.n	8005614 <HAL_DMA_IRQHandler+0x2dc>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a6b      	ldr	r2, [pc, #428]	@ (80057a0 <HAL_DMA_IRQHandler+0x468>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d00a      	beq.n	800560e <HAL_DMA_IRQHandler+0x2d6>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a69      	ldr	r2, [pc, #420]	@ (80057a4 <HAL_DMA_IRQHandler+0x46c>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d102      	bne.n	8005608 <HAL_DMA_IRQHandler+0x2d0>
 8005602:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005606:	e01b      	b.n	8005640 <HAL_DMA_IRQHandler+0x308>
 8005608:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800560c:	e018      	b.n	8005640 <HAL_DMA_IRQHandler+0x308>
 800560e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005612:	e015      	b.n	8005640 <HAL_DMA_IRQHandler+0x308>
 8005614:	2320      	movs	r3, #32
 8005616:	e013      	b.n	8005640 <HAL_DMA_IRQHandler+0x308>
 8005618:	2302      	movs	r3, #2
 800561a:	e011      	b.n	8005640 <HAL_DMA_IRQHandler+0x308>
 800561c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005620:	e00e      	b.n	8005640 <HAL_DMA_IRQHandler+0x308>
 8005622:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8005626:	e00b      	b.n	8005640 <HAL_DMA_IRQHandler+0x308>
 8005628:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800562c:	e008      	b.n	8005640 <HAL_DMA_IRQHandler+0x308>
 800562e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005632:	e005      	b.n	8005640 <HAL_DMA_IRQHandler+0x308>
 8005634:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005638:	e002      	b.n	8005640 <HAL_DMA_IRQHandler+0x308>
 800563a:	2320      	movs	r3, #32
 800563c:	e000      	b.n	8005640 <HAL_DMA_IRQHandler+0x308>
 800563e:	2302      	movs	r3, #2
 8005640:	4a59      	ldr	r2, [pc, #356]	@ (80057a8 <HAL_DMA_IRQHandler+0x470>)
 8005642:	6053      	str	r3, [r2, #4]
 8005644:	e057      	b.n	80056f6 <HAL_DMA_IRQHandler+0x3be>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a4d      	ldr	r2, [pc, #308]	@ (8005780 <HAL_DMA_IRQHandler+0x448>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d04f      	beq.n	80056f0 <HAL_DMA_IRQHandler+0x3b8>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a4b      	ldr	r2, [pc, #300]	@ (8005784 <HAL_DMA_IRQHandler+0x44c>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d048      	beq.n	80056ec <HAL_DMA_IRQHandler+0x3b4>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a4a      	ldr	r2, [pc, #296]	@ (8005788 <HAL_DMA_IRQHandler+0x450>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d040      	beq.n	80056e6 <HAL_DMA_IRQHandler+0x3ae>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a48      	ldr	r2, [pc, #288]	@ (800578c <HAL_DMA_IRQHandler+0x454>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d038      	beq.n	80056e0 <HAL_DMA_IRQHandler+0x3a8>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a47      	ldr	r2, [pc, #284]	@ (8005790 <HAL_DMA_IRQHandler+0x458>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d030      	beq.n	80056da <HAL_DMA_IRQHandler+0x3a2>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a45      	ldr	r2, [pc, #276]	@ (8005794 <HAL_DMA_IRQHandler+0x45c>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d028      	beq.n	80056d4 <HAL_DMA_IRQHandler+0x39c>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a3d      	ldr	r2, [pc, #244]	@ (800577c <HAL_DMA_IRQHandler+0x444>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d020      	beq.n	80056ce <HAL_DMA_IRQHandler+0x396>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a41      	ldr	r2, [pc, #260]	@ (8005798 <HAL_DMA_IRQHandler+0x460>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d019      	beq.n	80056ca <HAL_DMA_IRQHandler+0x392>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a40      	ldr	r2, [pc, #256]	@ (800579c <HAL_DMA_IRQHandler+0x464>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d012      	beq.n	80056c6 <HAL_DMA_IRQHandler+0x38e>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a3e      	ldr	r2, [pc, #248]	@ (80057a0 <HAL_DMA_IRQHandler+0x468>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d00a      	beq.n	80056c0 <HAL_DMA_IRQHandler+0x388>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a3d      	ldr	r2, [pc, #244]	@ (80057a4 <HAL_DMA_IRQHandler+0x46c>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d102      	bne.n	80056ba <HAL_DMA_IRQHandler+0x382>
 80056b4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80056b8:	e01b      	b.n	80056f2 <HAL_DMA_IRQHandler+0x3ba>
 80056ba:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80056be:	e018      	b.n	80056f2 <HAL_DMA_IRQHandler+0x3ba>
 80056c0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80056c4:	e015      	b.n	80056f2 <HAL_DMA_IRQHandler+0x3ba>
 80056c6:	2320      	movs	r3, #32
 80056c8:	e013      	b.n	80056f2 <HAL_DMA_IRQHandler+0x3ba>
 80056ca:	2302      	movs	r3, #2
 80056cc:	e011      	b.n	80056f2 <HAL_DMA_IRQHandler+0x3ba>
 80056ce:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80056d2:	e00e      	b.n	80056f2 <HAL_DMA_IRQHandler+0x3ba>
 80056d4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80056d8:	e00b      	b.n	80056f2 <HAL_DMA_IRQHandler+0x3ba>
 80056da:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80056de:	e008      	b.n	80056f2 <HAL_DMA_IRQHandler+0x3ba>
 80056e0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80056e4:	e005      	b.n	80056f2 <HAL_DMA_IRQHandler+0x3ba>
 80056e6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80056ea:	e002      	b.n	80056f2 <HAL_DMA_IRQHandler+0x3ba>
 80056ec:	2320      	movs	r3, #32
 80056ee:	e000      	b.n	80056f2 <HAL_DMA_IRQHandler+0x3ba>
 80056f0:	2302      	movs	r3, #2
 80056f2:	4a2e      	ldr	r2, [pc, #184]	@ (80057ac <HAL_DMA_IRQHandler+0x474>)
 80056f4:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2200      	movs	r2, #0
 80056fa:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005702:	2b00      	cmp	r3, #0
 8005704:	d034      	beq.n	8005770 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800570e:	e02f      	b.n	8005770 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005714:	2208      	movs	r2, #8
 8005716:	409a      	lsls	r2, r3
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	4013      	ands	r3, r2
 800571c:	2b00      	cmp	r3, #0
 800571e:	d028      	beq.n	8005772 <HAL_DMA_IRQHandler+0x43a>
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	f003 0308 	and.w	r3, r3, #8
 8005726:	2b00      	cmp	r3, #0
 8005728:	d023      	beq.n	8005772 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f022 020e 	bic.w	r2, r2, #14
 8005738:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005742:	2101      	movs	r1, #1
 8005744:	fa01 f202 	lsl.w	r2, r1, r2
 8005748:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2201      	movs	r2, #1
 800574e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2201      	movs	r2, #1
 8005754:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005764:	2b00      	cmp	r3, #0
 8005766:	d004      	beq.n	8005772 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	4798      	blx	r3
    }
  }
  return;
 8005770:	bf00      	nop
 8005772:	bf00      	nop
}
 8005774:	3710      	adds	r7, #16
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}
 800577a:	bf00      	nop
 800577c:	40020080 	.word	0x40020080
 8005780:	40020008 	.word	0x40020008
 8005784:	4002001c 	.word	0x4002001c
 8005788:	40020030 	.word	0x40020030
 800578c:	40020044 	.word	0x40020044
 8005790:	40020058 	.word	0x40020058
 8005794:	4002006c 	.word	0x4002006c
 8005798:	40020408 	.word	0x40020408
 800579c:	4002041c 	.word	0x4002041c
 80057a0:	40020430 	.word	0x40020430
 80057a4:	40020444 	.word	0x40020444
 80057a8:	40020400 	.word	0x40020400
 80057ac:	40020000 	.word	0x40020000

080057b0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b085      	sub	sp, #20
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	60f8      	str	r0, [r7, #12]
 80057b8:	60b9      	str	r1, [r7, #8]
 80057ba:	607a      	str	r2, [r7, #4]
 80057bc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057c6:	2101      	movs	r1, #1
 80057c8:	fa01 f202 	lsl.w	r2, r1, r2
 80057cc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	683a      	ldr	r2, [r7, #0]
 80057d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	2b10      	cmp	r3, #16
 80057dc:	d108      	bne.n	80057f0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	68ba      	ldr	r2, [r7, #8]
 80057ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80057ee:	e007      	b.n	8005800 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	68ba      	ldr	r2, [r7, #8]
 80057f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	687a      	ldr	r2, [r7, #4]
 80057fe:	60da      	str	r2, [r3, #12]
}
 8005800:	bf00      	nop
 8005802:	3714      	adds	r7, #20
 8005804:	46bd      	mov	sp, r7
 8005806:	bc80      	pop	{r7}
 8005808:	4770      	bx	lr
	...

0800580c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800580c:	b480      	push	{r7}
 800580e:	b08b      	sub	sp, #44	@ 0x2c
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005816:	2300      	movs	r3, #0
 8005818:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800581a:	2300      	movs	r3, #0
 800581c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800581e:	e179      	b.n	8005b14 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005820:	2201      	movs	r2, #1
 8005822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005824:	fa02 f303 	lsl.w	r3, r2, r3
 8005828:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	69fa      	ldr	r2, [r7, #28]
 8005830:	4013      	ands	r3, r2
 8005832:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005834:	69ba      	ldr	r2, [r7, #24]
 8005836:	69fb      	ldr	r3, [r7, #28]
 8005838:	429a      	cmp	r2, r3
 800583a:	f040 8168 	bne.w	8005b0e <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	4a96      	ldr	r2, [pc, #600]	@ (8005a9c <HAL_GPIO_Init+0x290>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d05e      	beq.n	8005906 <HAL_GPIO_Init+0xfa>
 8005848:	4a94      	ldr	r2, [pc, #592]	@ (8005a9c <HAL_GPIO_Init+0x290>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d875      	bhi.n	800593a <HAL_GPIO_Init+0x12e>
 800584e:	4a94      	ldr	r2, [pc, #592]	@ (8005aa0 <HAL_GPIO_Init+0x294>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d058      	beq.n	8005906 <HAL_GPIO_Init+0xfa>
 8005854:	4a92      	ldr	r2, [pc, #584]	@ (8005aa0 <HAL_GPIO_Init+0x294>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d86f      	bhi.n	800593a <HAL_GPIO_Init+0x12e>
 800585a:	4a92      	ldr	r2, [pc, #584]	@ (8005aa4 <HAL_GPIO_Init+0x298>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d052      	beq.n	8005906 <HAL_GPIO_Init+0xfa>
 8005860:	4a90      	ldr	r2, [pc, #576]	@ (8005aa4 <HAL_GPIO_Init+0x298>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d869      	bhi.n	800593a <HAL_GPIO_Init+0x12e>
 8005866:	4a90      	ldr	r2, [pc, #576]	@ (8005aa8 <HAL_GPIO_Init+0x29c>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d04c      	beq.n	8005906 <HAL_GPIO_Init+0xfa>
 800586c:	4a8e      	ldr	r2, [pc, #568]	@ (8005aa8 <HAL_GPIO_Init+0x29c>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d863      	bhi.n	800593a <HAL_GPIO_Init+0x12e>
 8005872:	4a8e      	ldr	r2, [pc, #568]	@ (8005aac <HAL_GPIO_Init+0x2a0>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d046      	beq.n	8005906 <HAL_GPIO_Init+0xfa>
 8005878:	4a8c      	ldr	r2, [pc, #560]	@ (8005aac <HAL_GPIO_Init+0x2a0>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d85d      	bhi.n	800593a <HAL_GPIO_Init+0x12e>
 800587e:	2b12      	cmp	r3, #18
 8005880:	d82a      	bhi.n	80058d8 <HAL_GPIO_Init+0xcc>
 8005882:	2b12      	cmp	r3, #18
 8005884:	d859      	bhi.n	800593a <HAL_GPIO_Init+0x12e>
 8005886:	a201      	add	r2, pc, #4	@ (adr r2, 800588c <HAL_GPIO_Init+0x80>)
 8005888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800588c:	08005907 	.word	0x08005907
 8005890:	080058e1 	.word	0x080058e1
 8005894:	080058f3 	.word	0x080058f3
 8005898:	08005935 	.word	0x08005935
 800589c:	0800593b 	.word	0x0800593b
 80058a0:	0800593b 	.word	0x0800593b
 80058a4:	0800593b 	.word	0x0800593b
 80058a8:	0800593b 	.word	0x0800593b
 80058ac:	0800593b 	.word	0x0800593b
 80058b0:	0800593b 	.word	0x0800593b
 80058b4:	0800593b 	.word	0x0800593b
 80058b8:	0800593b 	.word	0x0800593b
 80058bc:	0800593b 	.word	0x0800593b
 80058c0:	0800593b 	.word	0x0800593b
 80058c4:	0800593b 	.word	0x0800593b
 80058c8:	0800593b 	.word	0x0800593b
 80058cc:	0800593b 	.word	0x0800593b
 80058d0:	080058e9 	.word	0x080058e9
 80058d4:	080058fd 	.word	0x080058fd
 80058d8:	4a75      	ldr	r2, [pc, #468]	@ (8005ab0 <HAL_GPIO_Init+0x2a4>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d013      	beq.n	8005906 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80058de:	e02c      	b.n	800593a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	68db      	ldr	r3, [r3, #12]
 80058e4:	623b      	str	r3, [r7, #32]
          break;
 80058e6:	e029      	b.n	800593c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	68db      	ldr	r3, [r3, #12]
 80058ec:	3304      	adds	r3, #4
 80058ee:	623b      	str	r3, [r7, #32]
          break;
 80058f0:	e024      	b.n	800593c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	68db      	ldr	r3, [r3, #12]
 80058f6:	3308      	adds	r3, #8
 80058f8:	623b      	str	r3, [r7, #32]
          break;
 80058fa:	e01f      	b.n	800593c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	68db      	ldr	r3, [r3, #12]
 8005900:	330c      	adds	r3, #12
 8005902:	623b      	str	r3, [r7, #32]
          break;
 8005904:	e01a      	b.n	800593c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d102      	bne.n	8005914 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800590e:	2304      	movs	r3, #4
 8005910:	623b      	str	r3, [r7, #32]
          break;
 8005912:	e013      	b.n	800593c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	2b01      	cmp	r3, #1
 800591a:	d105      	bne.n	8005928 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800591c:	2308      	movs	r3, #8
 800591e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	69fa      	ldr	r2, [r7, #28]
 8005924:	611a      	str	r2, [r3, #16]
          break;
 8005926:	e009      	b.n	800593c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005928:	2308      	movs	r3, #8
 800592a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	69fa      	ldr	r2, [r7, #28]
 8005930:	615a      	str	r2, [r3, #20]
          break;
 8005932:	e003      	b.n	800593c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005934:	2300      	movs	r3, #0
 8005936:	623b      	str	r3, [r7, #32]
          break;
 8005938:	e000      	b.n	800593c <HAL_GPIO_Init+0x130>
          break;
 800593a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800593c:	69bb      	ldr	r3, [r7, #24]
 800593e:	2bff      	cmp	r3, #255	@ 0xff
 8005940:	d801      	bhi.n	8005946 <HAL_GPIO_Init+0x13a>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	e001      	b.n	800594a <HAL_GPIO_Init+0x13e>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	3304      	adds	r3, #4
 800594a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800594c:	69bb      	ldr	r3, [r7, #24]
 800594e:	2bff      	cmp	r3, #255	@ 0xff
 8005950:	d802      	bhi.n	8005958 <HAL_GPIO_Init+0x14c>
 8005952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005954:	009b      	lsls	r3, r3, #2
 8005956:	e002      	b.n	800595e <HAL_GPIO_Init+0x152>
 8005958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800595a:	3b08      	subs	r3, #8
 800595c:	009b      	lsls	r3, r3, #2
 800595e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	210f      	movs	r1, #15
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	fa01 f303 	lsl.w	r3, r1, r3
 800596c:	43db      	mvns	r3, r3
 800596e:	401a      	ands	r2, r3
 8005970:	6a39      	ldr	r1, [r7, #32]
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	fa01 f303 	lsl.w	r3, r1, r3
 8005978:	431a      	orrs	r2, r3
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005986:	2b00      	cmp	r3, #0
 8005988:	f000 80c1 	beq.w	8005b0e <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800598c:	4b49      	ldr	r3, [pc, #292]	@ (8005ab4 <HAL_GPIO_Init+0x2a8>)
 800598e:	699b      	ldr	r3, [r3, #24]
 8005990:	4a48      	ldr	r2, [pc, #288]	@ (8005ab4 <HAL_GPIO_Init+0x2a8>)
 8005992:	f043 0301 	orr.w	r3, r3, #1
 8005996:	6193      	str	r3, [r2, #24]
 8005998:	4b46      	ldr	r3, [pc, #280]	@ (8005ab4 <HAL_GPIO_Init+0x2a8>)
 800599a:	699b      	ldr	r3, [r3, #24]
 800599c:	f003 0301 	and.w	r3, r3, #1
 80059a0:	60bb      	str	r3, [r7, #8]
 80059a2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80059a4:	4a44      	ldr	r2, [pc, #272]	@ (8005ab8 <HAL_GPIO_Init+0x2ac>)
 80059a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059a8:	089b      	lsrs	r3, r3, #2
 80059aa:	3302      	adds	r3, #2
 80059ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059b0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80059b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059b4:	f003 0303 	and.w	r3, r3, #3
 80059b8:	009b      	lsls	r3, r3, #2
 80059ba:	220f      	movs	r2, #15
 80059bc:	fa02 f303 	lsl.w	r3, r2, r3
 80059c0:	43db      	mvns	r3, r3
 80059c2:	68fa      	ldr	r2, [r7, #12]
 80059c4:	4013      	ands	r3, r2
 80059c6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	4a3c      	ldr	r2, [pc, #240]	@ (8005abc <HAL_GPIO_Init+0x2b0>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d01f      	beq.n	8005a10 <HAL_GPIO_Init+0x204>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	4a3b      	ldr	r2, [pc, #236]	@ (8005ac0 <HAL_GPIO_Init+0x2b4>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d019      	beq.n	8005a0c <HAL_GPIO_Init+0x200>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	4a3a      	ldr	r2, [pc, #232]	@ (8005ac4 <HAL_GPIO_Init+0x2b8>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d013      	beq.n	8005a08 <HAL_GPIO_Init+0x1fc>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	4a39      	ldr	r2, [pc, #228]	@ (8005ac8 <HAL_GPIO_Init+0x2bc>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d00d      	beq.n	8005a04 <HAL_GPIO_Init+0x1f8>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	4a38      	ldr	r2, [pc, #224]	@ (8005acc <HAL_GPIO_Init+0x2c0>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d007      	beq.n	8005a00 <HAL_GPIO_Init+0x1f4>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	4a37      	ldr	r2, [pc, #220]	@ (8005ad0 <HAL_GPIO_Init+0x2c4>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d101      	bne.n	80059fc <HAL_GPIO_Init+0x1f0>
 80059f8:	2305      	movs	r3, #5
 80059fa:	e00a      	b.n	8005a12 <HAL_GPIO_Init+0x206>
 80059fc:	2306      	movs	r3, #6
 80059fe:	e008      	b.n	8005a12 <HAL_GPIO_Init+0x206>
 8005a00:	2304      	movs	r3, #4
 8005a02:	e006      	b.n	8005a12 <HAL_GPIO_Init+0x206>
 8005a04:	2303      	movs	r3, #3
 8005a06:	e004      	b.n	8005a12 <HAL_GPIO_Init+0x206>
 8005a08:	2302      	movs	r3, #2
 8005a0a:	e002      	b.n	8005a12 <HAL_GPIO_Init+0x206>
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e000      	b.n	8005a12 <HAL_GPIO_Init+0x206>
 8005a10:	2300      	movs	r3, #0
 8005a12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a14:	f002 0203 	and.w	r2, r2, #3
 8005a18:	0092      	lsls	r2, r2, #2
 8005a1a:	4093      	lsls	r3, r2
 8005a1c:	68fa      	ldr	r2, [r7, #12]
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8005a22:	4925      	ldr	r1, [pc, #148]	@ (8005ab8 <HAL_GPIO_Init+0x2ac>)
 8005a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a26:	089b      	lsrs	r3, r3, #2
 8005a28:	3302      	adds	r3, #2
 8005a2a:	68fa      	ldr	r2, [r7, #12]
 8005a2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d006      	beq.n	8005a4a <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005a3c:	4b25      	ldr	r3, [pc, #148]	@ (8005ad4 <HAL_GPIO_Init+0x2c8>)
 8005a3e:	689a      	ldr	r2, [r3, #8]
 8005a40:	4924      	ldr	r1, [pc, #144]	@ (8005ad4 <HAL_GPIO_Init+0x2c8>)
 8005a42:	69bb      	ldr	r3, [r7, #24]
 8005a44:	4313      	orrs	r3, r2
 8005a46:	608b      	str	r3, [r1, #8]
 8005a48:	e006      	b.n	8005a58 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005a4a:	4b22      	ldr	r3, [pc, #136]	@ (8005ad4 <HAL_GPIO_Init+0x2c8>)
 8005a4c:	689a      	ldr	r2, [r3, #8]
 8005a4e:	69bb      	ldr	r3, [r7, #24]
 8005a50:	43db      	mvns	r3, r3
 8005a52:	4920      	ldr	r1, [pc, #128]	@ (8005ad4 <HAL_GPIO_Init+0x2c8>)
 8005a54:	4013      	ands	r3, r2
 8005a56:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d006      	beq.n	8005a72 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005a64:	4b1b      	ldr	r3, [pc, #108]	@ (8005ad4 <HAL_GPIO_Init+0x2c8>)
 8005a66:	68da      	ldr	r2, [r3, #12]
 8005a68:	491a      	ldr	r1, [pc, #104]	@ (8005ad4 <HAL_GPIO_Init+0x2c8>)
 8005a6a:	69bb      	ldr	r3, [r7, #24]
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	60cb      	str	r3, [r1, #12]
 8005a70:	e006      	b.n	8005a80 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005a72:	4b18      	ldr	r3, [pc, #96]	@ (8005ad4 <HAL_GPIO_Init+0x2c8>)
 8005a74:	68da      	ldr	r2, [r3, #12]
 8005a76:	69bb      	ldr	r3, [r7, #24]
 8005a78:	43db      	mvns	r3, r3
 8005a7a:	4916      	ldr	r1, [pc, #88]	@ (8005ad4 <HAL_GPIO_Init+0x2c8>)
 8005a7c:	4013      	ands	r3, r2
 8005a7e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d025      	beq.n	8005ad8 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005a8c:	4b11      	ldr	r3, [pc, #68]	@ (8005ad4 <HAL_GPIO_Init+0x2c8>)
 8005a8e:	685a      	ldr	r2, [r3, #4]
 8005a90:	4910      	ldr	r1, [pc, #64]	@ (8005ad4 <HAL_GPIO_Init+0x2c8>)
 8005a92:	69bb      	ldr	r3, [r7, #24]
 8005a94:	4313      	orrs	r3, r2
 8005a96:	604b      	str	r3, [r1, #4]
 8005a98:	e025      	b.n	8005ae6 <HAL_GPIO_Init+0x2da>
 8005a9a:	bf00      	nop
 8005a9c:	10320000 	.word	0x10320000
 8005aa0:	10310000 	.word	0x10310000
 8005aa4:	10220000 	.word	0x10220000
 8005aa8:	10210000 	.word	0x10210000
 8005aac:	10120000 	.word	0x10120000
 8005ab0:	10110000 	.word	0x10110000
 8005ab4:	40021000 	.word	0x40021000
 8005ab8:	40010000 	.word	0x40010000
 8005abc:	40010800 	.word	0x40010800
 8005ac0:	40010c00 	.word	0x40010c00
 8005ac4:	40011000 	.word	0x40011000
 8005ac8:	40011400 	.word	0x40011400
 8005acc:	40011800 	.word	0x40011800
 8005ad0:	40011c00 	.word	0x40011c00
 8005ad4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005ad8:	4b15      	ldr	r3, [pc, #84]	@ (8005b30 <HAL_GPIO_Init+0x324>)
 8005ada:	685a      	ldr	r2, [r3, #4]
 8005adc:	69bb      	ldr	r3, [r7, #24]
 8005ade:	43db      	mvns	r3, r3
 8005ae0:	4913      	ldr	r1, [pc, #76]	@ (8005b30 <HAL_GPIO_Init+0x324>)
 8005ae2:	4013      	ands	r3, r2
 8005ae4:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d006      	beq.n	8005b00 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005af2:	4b0f      	ldr	r3, [pc, #60]	@ (8005b30 <HAL_GPIO_Init+0x324>)
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	490e      	ldr	r1, [pc, #56]	@ (8005b30 <HAL_GPIO_Init+0x324>)
 8005af8:	69bb      	ldr	r3, [r7, #24]
 8005afa:	4313      	orrs	r3, r2
 8005afc:	600b      	str	r3, [r1, #0]
 8005afe:	e006      	b.n	8005b0e <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005b00:	4b0b      	ldr	r3, [pc, #44]	@ (8005b30 <HAL_GPIO_Init+0x324>)
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	69bb      	ldr	r3, [r7, #24]
 8005b06:	43db      	mvns	r3, r3
 8005b08:	4909      	ldr	r1, [pc, #36]	@ (8005b30 <HAL_GPIO_Init+0x324>)
 8005b0a:	4013      	ands	r3, r2
 8005b0c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8005b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b10:	3301      	adds	r3, #1
 8005b12:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	681a      	ldr	r2, [r3, #0]
 8005b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b1a:	fa22 f303 	lsr.w	r3, r2, r3
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	f47f ae7e 	bne.w	8005820 <HAL_GPIO_Init+0x14>
  }
}
 8005b24:	bf00      	nop
 8005b26:	bf00      	nop
 8005b28:	372c      	adds	r7, #44	@ 0x2c
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bc80      	pop	{r7}
 8005b2e:	4770      	bx	lr
 8005b30:	40010400 	.word	0x40010400

08005b34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b083      	sub	sp, #12
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	460b      	mov	r3, r1
 8005b3e:	807b      	strh	r3, [r7, #2]
 8005b40:	4613      	mov	r3, r2
 8005b42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005b44:	787b      	ldrb	r3, [r7, #1]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d003      	beq.n	8005b52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005b4a:	887a      	ldrh	r2, [r7, #2]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005b50:	e003      	b.n	8005b5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005b52:	887b      	ldrh	r3, [r7, #2]
 8005b54:	041a      	lsls	r2, r3, #16
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	611a      	str	r2, [r3, #16]
}
 8005b5a:	bf00      	nop
 8005b5c:	370c      	adds	r7, #12
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bc80      	pop	{r7}
 8005b62:	4770      	bx	lr

08005b64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b086      	sub	sp, #24
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d101      	bne.n	8005b76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
 8005b74:	e272      	b.n	800605c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f003 0301 	and.w	r3, r3, #1
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	f000 8087 	beq.w	8005c92 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005b84:	4b92      	ldr	r3, [pc, #584]	@ (8005dd0 <HAL_RCC_OscConfig+0x26c>)
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	f003 030c 	and.w	r3, r3, #12
 8005b8c:	2b04      	cmp	r3, #4
 8005b8e:	d00c      	beq.n	8005baa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005b90:	4b8f      	ldr	r3, [pc, #572]	@ (8005dd0 <HAL_RCC_OscConfig+0x26c>)
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	f003 030c 	and.w	r3, r3, #12
 8005b98:	2b08      	cmp	r3, #8
 8005b9a:	d112      	bne.n	8005bc2 <HAL_RCC_OscConfig+0x5e>
 8005b9c:	4b8c      	ldr	r3, [pc, #560]	@ (8005dd0 <HAL_RCC_OscConfig+0x26c>)
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005ba4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ba8:	d10b      	bne.n	8005bc2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005baa:	4b89      	ldr	r3, [pc, #548]	@ (8005dd0 <HAL_RCC_OscConfig+0x26c>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d06c      	beq.n	8005c90 <HAL_RCC_OscConfig+0x12c>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d168      	bne.n	8005c90 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	e24c      	b.n	800605c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005bca:	d106      	bne.n	8005bda <HAL_RCC_OscConfig+0x76>
 8005bcc:	4b80      	ldr	r3, [pc, #512]	@ (8005dd0 <HAL_RCC_OscConfig+0x26c>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a7f      	ldr	r2, [pc, #508]	@ (8005dd0 <HAL_RCC_OscConfig+0x26c>)
 8005bd2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005bd6:	6013      	str	r3, [r2, #0]
 8005bd8:	e02e      	b.n	8005c38 <HAL_RCC_OscConfig+0xd4>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d10c      	bne.n	8005bfc <HAL_RCC_OscConfig+0x98>
 8005be2:	4b7b      	ldr	r3, [pc, #492]	@ (8005dd0 <HAL_RCC_OscConfig+0x26c>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a7a      	ldr	r2, [pc, #488]	@ (8005dd0 <HAL_RCC_OscConfig+0x26c>)
 8005be8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005bec:	6013      	str	r3, [r2, #0]
 8005bee:	4b78      	ldr	r3, [pc, #480]	@ (8005dd0 <HAL_RCC_OscConfig+0x26c>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a77      	ldr	r2, [pc, #476]	@ (8005dd0 <HAL_RCC_OscConfig+0x26c>)
 8005bf4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005bf8:	6013      	str	r3, [r2, #0]
 8005bfa:	e01d      	b.n	8005c38 <HAL_RCC_OscConfig+0xd4>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005c04:	d10c      	bne.n	8005c20 <HAL_RCC_OscConfig+0xbc>
 8005c06:	4b72      	ldr	r3, [pc, #456]	@ (8005dd0 <HAL_RCC_OscConfig+0x26c>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a71      	ldr	r2, [pc, #452]	@ (8005dd0 <HAL_RCC_OscConfig+0x26c>)
 8005c0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005c10:	6013      	str	r3, [r2, #0]
 8005c12:	4b6f      	ldr	r3, [pc, #444]	@ (8005dd0 <HAL_RCC_OscConfig+0x26c>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a6e      	ldr	r2, [pc, #440]	@ (8005dd0 <HAL_RCC_OscConfig+0x26c>)
 8005c18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c1c:	6013      	str	r3, [r2, #0]
 8005c1e:	e00b      	b.n	8005c38 <HAL_RCC_OscConfig+0xd4>
 8005c20:	4b6b      	ldr	r3, [pc, #428]	@ (8005dd0 <HAL_RCC_OscConfig+0x26c>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a6a      	ldr	r2, [pc, #424]	@ (8005dd0 <HAL_RCC_OscConfig+0x26c>)
 8005c26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c2a:	6013      	str	r3, [r2, #0]
 8005c2c:	4b68      	ldr	r3, [pc, #416]	@ (8005dd0 <HAL_RCC_OscConfig+0x26c>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a67      	ldr	r2, [pc, #412]	@ (8005dd0 <HAL_RCC_OscConfig+0x26c>)
 8005c32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005c36:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d013      	beq.n	8005c68 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c40:	f7ff f848 	bl	8004cd4 <HAL_GetTick>
 8005c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c46:	e008      	b.n	8005c5a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c48:	f7ff f844 	bl	8004cd4 <HAL_GetTick>
 8005c4c:	4602      	mov	r2, r0
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	1ad3      	subs	r3, r2, r3
 8005c52:	2b64      	cmp	r3, #100	@ 0x64
 8005c54:	d901      	bls.n	8005c5a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005c56:	2303      	movs	r3, #3
 8005c58:	e200      	b.n	800605c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c5a:	4b5d      	ldr	r3, [pc, #372]	@ (8005dd0 <HAL_RCC_OscConfig+0x26c>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d0f0      	beq.n	8005c48 <HAL_RCC_OscConfig+0xe4>
 8005c66:	e014      	b.n	8005c92 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c68:	f7ff f834 	bl	8004cd4 <HAL_GetTick>
 8005c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c6e:	e008      	b.n	8005c82 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c70:	f7ff f830 	bl	8004cd4 <HAL_GetTick>
 8005c74:	4602      	mov	r2, r0
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	1ad3      	subs	r3, r2, r3
 8005c7a:	2b64      	cmp	r3, #100	@ 0x64
 8005c7c:	d901      	bls.n	8005c82 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005c7e:	2303      	movs	r3, #3
 8005c80:	e1ec      	b.n	800605c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c82:	4b53      	ldr	r3, [pc, #332]	@ (8005dd0 <HAL_RCC_OscConfig+0x26c>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d1f0      	bne.n	8005c70 <HAL_RCC_OscConfig+0x10c>
 8005c8e:	e000      	b.n	8005c92 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f003 0302 	and.w	r3, r3, #2
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d063      	beq.n	8005d66 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005c9e:	4b4c      	ldr	r3, [pc, #304]	@ (8005dd0 <HAL_RCC_OscConfig+0x26c>)
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	f003 030c 	and.w	r3, r3, #12
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d00b      	beq.n	8005cc2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005caa:	4b49      	ldr	r3, [pc, #292]	@ (8005dd0 <HAL_RCC_OscConfig+0x26c>)
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	f003 030c 	and.w	r3, r3, #12
 8005cb2:	2b08      	cmp	r3, #8
 8005cb4:	d11c      	bne.n	8005cf0 <HAL_RCC_OscConfig+0x18c>
 8005cb6:	4b46      	ldr	r3, [pc, #280]	@ (8005dd0 <HAL_RCC_OscConfig+0x26c>)
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d116      	bne.n	8005cf0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005cc2:	4b43      	ldr	r3, [pc, #268]	@ (8005dd0 <HAL_RCC_OscConfig+0x26c>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f003 0302 	and.w	r3, r3, #2
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d005      	beq.n	8005cda <HAL_RCC_OscConfig+0x176>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	691b      	ldr	r3, [r3, #16]
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	d001      	beq.n	8005cda <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	e1c0      	b.n	800605c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cda:	4b3d      	ldr	r3, [pc, #244]	@ (8005dd0 <HAL_RCC_OscConfig+0x26c>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	695b      	ldr	r3, [r3, #20]
 8005ce6:	00db      	lsls	r3, r3, #3
 8005ce8:	4939      	ldr	r1, [pc, #228]	@ (8005dd0 <HAL_RCC_OscConfig+0x26c>)
 8005cea:	4313      	orrs	r3, r2
 8005cec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005cee:	e03a      	b.n	8005d66 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	691b      	ldr	r3, [r3, #16]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d020      	beq.n	8005d3a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005cf8:	4b36      	ldr	r3, [pc, #216]	@ (8005dd4 <HAL_RCC_OscConfig+0x270>)
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cfe:	f7fe ffe9 	bl	8004cd4 <HAL_GetTick>
 8005d02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d04:	e008      	b.n	8005d18 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d06:	f7fe ffe5 	bl	8004cd4 <HAL_GetTick>
 8005d0a:	4602      	mov	r2, r0
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	1ad3      	subs	r3, r2, r3
 8005d10:	2b02      	cmp	r3, #2
 8005d12:	d901      	bls.n	8005d18 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005d14:	2303      	movs	r3, #3
 8005d16:	e1a1      	b.n	800605c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d18:	4b2d      	ldr	r3, [pc, #180]	@ (8005dd0 <HAL_RCC_OscConfig+0x26c>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f003 0302 	and.w	r3, r3, #2
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d0f0      	beq.n	8005d06 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d24:	4b2a      	ldr	r3, [pc, #168]	@ (8005dd0 <HAL_RCC_OscConfig+0x26c>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	695b      	ldr	r3, [r3, #20]
 8005d30:	00db      	lsls	r3, r3, #3
 8005d32:	4927      	ldr	r1, [pc, #156]	@ (8005dd0 <HAL_RCC_OscConfig+0x26c>)
 8005d34:	4313      	orrs	r3, r2
 8005d36:	600b      	str	r3, [r1, #0]
 8005d38:	e015      	b.n	8005d66 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d3a:	4b26      	ldr	r3, [pc, #152]	@ (8005dd4 <HAL_RCC_OscConfig+0x270>)
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d40:	f7fe ffc8 	bl	8004cd4 <HAL_GetTick>
 8005d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d46:	e008      	b.n	8005d5a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d48:	f7fe ffc4 	bl	8004cd4 <HAL_GetTick>
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	1ad3      	subs	r3, r2, r3
 8005d52:	2b02      	cmp	r3, #2
 8005d54:	d901      	bls.n	8005d5a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005d56:	2303      	movs	r3, #3
 8005d58:	e180      	b.n	800605c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d5a:	4b1d      	ldr	r3, [pc, #116]	@ (8005dd0 <HAL_RCC_OscConfig+0x26c>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f003 0302 	and.w	r3, r3, #2
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d1f0      	bne.n	8005d48 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f003 0308 	and.w	r3, r3, #8
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d03a      	beq.n	8005de8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	699b      	ldr	r3, [r3, #24]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d019      	beq.n	8005dae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d7a:	4b17      	ldr	r3, [pc, #92]	@ (8005dd8 <HAL_RCC_OscConfig+0x274>)
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d80:	f7fe ffa8 	bl	8004cd4 <HAL_GetTick>
 8005d84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d86:	e008      	b.n	8005d9a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d88:	f7fe ffa4 	bl	8004cd4 <HAL_GetTick>
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	1ad3      	subs	r3, r2, r3
 8005d92:	2b02      	cmp	r3, #2
 8005d94:	d901      	bls.n	8005d9a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005d96:	2303      	movs	r3, #3
 8005d98:	e160      	b.n	800605c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8005dd0 <HAL_RCC_OscConfig+0x26c>)
 8005d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d9e:	f003 0302 	and.w	r3, r3, #2
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d0f0      	beq.n	8005d88 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005da6:	2001      	movs	r0, #1
 8005da8:	f000 face 	bl	8006348 <RCC_Delay>
 8005dac:	e01c      	b.n	8005de8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005dae:	4b0a      	ldr	r3, [pc, #40]	@ (8005dd8 <HAL_RCC_OscConfig+0x274>)
 8005db0:	2200      	movs	r2, #0
 8005db2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005db4:	f7fe ff8e 	bl	8004cd4 <HAL_GetTick>
 8005db8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005dba:	e00f      	b.n	8005ddc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005dbc:	f7fe ff8a 	bl	8004cd4 <HAL_GetTick>
 8005dc0:	4602      	mov	r2, r0
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	1ad3      	subs	r3, r2, r3
 8005dc6:	2b02      	cmp	r3, #2
 8005dc8:	d908      	bls.n	8005ddc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005dca:	2303      	movs	r3, #3
 8005dcc:	e146      	b.n	800605c <HAL_RCC_OscConfig+0x4f8>
 8005dce:	bf00      	nop
 8005dd0:	40021000 	.word	0x40021000
 8005dd4:	42420000 	.word	0x42420000
 8005dd8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ddc:	4b92      	ldr	r3, [pc, #584]	@ (8006028 <HAL_RCC_OscConfig+0x4c4>)
 8005dde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005de0:	f003 0302 	and.w	r3, r3, #2
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d1e9      	bne.n	8005dbc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f003 0304 	and.w	r3, r3, #4
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	f000 80a6 	beq.w	8005f42 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005df6:	2300      	movs	r3, #0
 8005df8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005dfa:	4b8b      	ldr	r3, [pc, #556]	@ (8006028 <HAL_RCC_OscConfig+0x4c4>)
 8005dfc:	69db      	ldr	r3, [r3, #28]
 8005dfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d10d      	bne.n	8005e22 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e06:	4b88      	ldr	r3, [pc, #544]	@ (8006028 <HAL_RCC_OscConfig+0x4c4>)
 8005e08:	69db      	ldr	r3, [r3, #28]
 8005e0a:	4a87      	ldr	r2, [pc, #540]	@ (8006028 <HAL_RCC_OscConfig+0x4c4>)
 8005e0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e10:	61d3      	str	r3, [r2, #28]
 8005e12:	4b85      	ldr	r3, [pc, #532]	@ (8006028 <HAL_RCC_OscConfig+0x4c4>)
 8005e14:	69db      	ldr	r3, [r3, #28]
 8005e16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e1a:	60bb      	str	r3, [r7, #8]
 8005e1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e22:	4b82      	ldr	r3, [pc, #520]	@ (800602c <HAL_RCC_OscConfig+0x4c8>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d118      	bne.n	8005e60 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005e2e:	4b7f      	ldr	r3, [pc, #508]	@ (800602c <HAL_RCC_OscConfig+0x4c8>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a7e      	ldr	r2, [pc, #504]	@ (800602c <HAL_RCC_OscConfig+0x4c8>)
 8005e34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e3a:	f7fe ff4b 	bl	8004cd4 <HAL_GetTick>
 8005e3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e40:	e008      	b.n	8005e54 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e42:	f7fe ff47 	bl	8004cd4 <HAL_GetTick>
 8005e46:	4602      	mov	r2, r0
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	1ad3      	subs	r3, r2, r3
 8005e4c:	2b64      	cmp	r3, #100	@ 0x64
 8005e4e:	d901      	bls.n	8005e54 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005e50:	2303      	movs	r3, #3
 8005e52:	e103      	b.n	800605c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e54:	4b75      	ldr	r3, [pc, #468]	@ (800602c <HAL_RCC_OscConfig+0x4c8>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d0f0      	beq.n	8005e42 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d106      	bne.n	8005e76 <HAL_RCC_OscConfig+0x312>
 8005e68:	4b6f      	ldr	r3, [pc, #444]	@ (8006028 <HAL_RCC_OscConfig+0x4c4>)
 8005e6a:	6a1b      	ldr	r3, [r3, #32]
 8005e6c:	4a6e      	ldr	r2, [pc, #440]	@ (8006028 <HAL_RCC_OscConfig+0x4c4>)
 8005e6e:	f043 0301 	orr.w	r3, r3, #1
 8005e72:	6213      	str	r3, [r2, #32]
 8005e74:	e02d      	b.n	8005ed2 <HAL_RCC_OscConfig+0x36e>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	68db      	ldr	r3, [r3, #12]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d10c      	bne.n	8005e98 <HAL_RCC_OscConfig+0x334>
 8005e7e:	4b6a      	ldr	r3, [pc, #424]	@ (8006028 <HAL_RCC_OscConfig+0x4c4>)
 8005e80:	6a1b      	ldr	r3, [r3, #32]
 8005e82:	4a69      	ldr	r2, [pc, #420]	@ (8006028 <HAL_RCC_OscConfig+0x4c4>)
 8005e84:	f023 0301 	bic.w	r3, r3, #1
 8005e88:	6213      	str	r3, [r2, #32]
 8005e8a:	4b67      	ldr	r3, [pc, #412]	@ (8006028 <HAL_RCC_OscConfig+0x4c4>)
 8005e8c:	6a1b      	ldr	r3, [r3, #32]
 8005e8e:	4a66      	ldr	r2, [pc, #408]	@ (8006028 <HAL_RCC_OscConfig+0x4c4>)
 8005e90:	f023 0304 	bic.w	r3, r3, #4
 8005e94:	6213      	str	r3, [r2, #32]
 8005e96:	e01c      	b.n	8005ed2 <HAL_RCC_OscConfig+0x36e>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	68db      	ldr	r3, [r3, #12]
 8005e9c:	2b05      	cmp	r3, #5
 8005e9e:	d10c      	bne.n	8005eba <HAL_RCC_OscConfig+0x356>
 8005ea0:	4b61      	ldr	r3, [pc, #388]	@ (8006028 <HAL_RCC_OscConfig+0x4c4>)
 8005ea2:	6a1b      	ldr	r3, [r3, #32]
 8005ea4:	4a60      	ldr	r2, [pc, #384]	@ (8006028 <HAL_RCC_OscConfig+0x4c4>)
 8005ea6:	f043 0304 	orr.w	r3, r3, #4
 8005eaa:	6213      	str	r3, [r2, #32]
 8005eac:	4b5e      	ldr	r3, [pc, #376]	@ (8006028 <HAL_RCC_OscConfig+0x4c4>)
 8005eae:	6a1b      	ldr	r3, [r3, #32]
 8005eb0:	4a5d      	ldr	r2, [pc, #372]	@ (8006028 <HAL_RCC_OscConfig+0x4c4>)
 8005eb2:	f043 0301 	orr.w	r3, r3, #1
 8005eb6:	6213      	str	r3, [r2, #32]
 8005eb8:	e00b      	b.n	8005ed2 <HAL_RCC_OscConfig+0x36e>
 8005eba:	4b5b      	ldr	r3, [pc, #364]	@ (8006028 <HAL_RCC_OscConfig+0x4c4>)
 8005ebc:	6a1b      	ldr	r3, [r3, #32]
 8005ebe:	4a5a      	ldr	r2, [pc, #360]	@ (8006028 <HAL_RCC_OscConfig+0x4c4>)
 8005ec0:	f023 0301 	bic.w	r3, r3, #1
 8005ec4:	6213      	str	r3, [r2, #32]
 8005ec6:	4b58      	ldr	r3, [pc, #352]	@ (8006028 <HAL_RCC_OscConfig+0x4c4>)
 8005ec8:	6a1b      	ldr	r3, [r3, #32]
 8005eca:	4a57      	ldr	r2, [pc, #348]	@ (8006028 <HAL_RCC_OscConfig+0x4c4>)
 8005ecc:	f023 0304 	bic.w	r3, r3, #4
 8005ed0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	68db      	ldr	r3, [r3, #12]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d015      	beq.n	8005f06 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005eda:	f7fe fefb 	bl	8004cd4 <HAL_GetTick>
 8005ede:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ee0:	e00a      	b.n	8005ef8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ee2:	f7fe fef7 	bl	8004cd4 <HAL_GetTick>
 8005ee6:	4602      	mov	r2, r0
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	1ad3      	subs	r3, r2, r3
 8005eec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d901      	bls.n	8005ef8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005ef4:	2303      	movs	r3, #3
 8005ef6:	e0b1      	b.n	800605c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ef8:	4b4b      	ldr	r3, [pc, #300]	@ (8006028 <HAL_RCC_OscConfig+0x4c4>)
 8005efa:	6a1b      	ldr	r3, [r3, #32]
 8005efc:	f003 0302 	and.w	r3, r3, #2
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d0ee      	beq.n	8005ee2 <HAL_RCC_OscConfig+0x37e>
 8005f04:	e014      	b.n	8005f30 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f06:	f7fe fee5 	bl	8004cd4 <HAL_GetTick>
 8005f0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f0c:	e00a      	b.n	8005f24 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f0e:	f7fe fee1 	bl	8004cd4 <HAL_GetTick>
 8005f12:	4602      	mov	r2, r0
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	1ad3      	subs	r3, r2, r3
 8005f18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d901      	bls.n	8005f24 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005f20:	2303      	movs	r3, #3
 8005f22:	e09b      	b.n	800605c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f24:	4b40      	ldr	r3, [pc, #256]	@ (8006028 <HAL_RCC_OscConfig+0x4c4>)
 8005f26:	6a1b      	ldr	r3, [r3, #32]
 8005f28:	f003 0302 	and.w	r3, r3, #2
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d1ee      	bne.n	8005f0e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005f30:	7dfb      	ldrb	r3, [r7, #23]
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d105      	bne.n	8005f42 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f36:	4b3c      	ldr	r3, [pc, #240]	@ (8006028 <HAL_RCC_OscConfig+0x4c4>)
 8005f38:	69db      	ldr	r3, [r3, #28]
 8005f3a:	4a3b      	ldr	r2, [pc, #236]	@ (8006028 <HAL_RCC_OscConfig+0x4c4>)
 8005f3c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005f40:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	69db      	ldr	r3, [r3, #28]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	f000 8087 	beq.w	800605a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005f4c:	4b36      	ldr	r3, [pc, #216]	@ (8006028 <HAL_RCC_OscConfig+0x4c4>)
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	f003 030c 	and.w	r3, r3, #12
 8005f54:	2b08      	cmp	r3, #8
 8005f56:	d061      	beq.n	800601c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	69db      	ldr	r3, [r3, #28]
 8005f5c:	2b02      	cmp	r3, #2
 8005f5e:	d146      	bne.n	8005fee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f60:	4b33      	ldr	r3, [pc, #204]	@ (8006030 <HAL_RCC_OscConfig+0x4cc>)
 8005f62:	2200      	movs	r2, #0
 8005f64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f66:	f7fe feb5 	bl	8004cd4 <HAL_GetTick>
 8005f6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005f6c:	e008      	b.n	8005f80 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f6e:	f7fe feb1 	bl	8004cd4 <HAL_GetTick>
 8005f72:	4602      	mov	r2, r0
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	1ad3      	subs	r3, r2, r3
 8005f78:	2b02      	cmp	r3, #2
 8005f7a:	d901      	bls.n	8005f80 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005f7c:	2303      	movs	r3, #3
 8005f7e:	e06d      	b.n	800605c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005f80:	4b29      	ldr	r3, [pc, #164]	@ (8006028 <HAL_RCC_OscConfig+0x4c4>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d1f0      	bne.n	8005f6e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6a1b      	ldr	r3, [r3, #32]
 8005f90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f94:	d108      	bne.n	8005fa8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005f96:	4b24      	ldr	r3, [pc, #144]	@ (8006028 <HAL_RCC_OscConfig+0x4c4>)
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	689b      	ldr	r3, [r3, #8]
 8005fa2:	4921      	ldr	r1, [pc, #132]	@ (8006028 <HAL_RCC_OscConfig+0x4c4>)
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005fa8:	4b1f      	ldr	r3, [pc, #124]	@ (8006028 <HAL_RCC_OscConfig+0x4c4>)
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6a19      	ldr	r1, [r3, #32]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fb8:	430b      	orrs	r3, r1
 8005fba:	491b      	ldr	r1, [pc, #108]	@ (8006028 <HAL_RCC_OscConfig+0x4c4>)
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005fc0:	4b1b      	ldr	r3, [pc, #108]	@ (8006030 <HAL_RCC_OscConfig+0x4cc>)
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fc6:	f7fe fe85 	bl	8004cd4 <HAL_GetTick>
 8005fca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005fcc:	e008      	b.n	8005fe0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fce:	f7fe fe81 	bl	8004cd4 <HAL_GetTick>
 8005fd2:	4602      	mov	r2, r0
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	1ad3      	subs	r3, r2, r3
 8005fd8:	2b02      	cmp	r3, #2
 8005fda:	d901      	bls.n	8005fe0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005fdc:	2303      	movs	r3, #3
 8005fde:	e03d      	b.n	800605c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005fe0:	4b11      	ldr	r3, [pc, #68]	@ (8006028 <HAL_RCC_OscConfig+0x4c4>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d0f0      	beq.n	8005fce <HAL_RCC_OscConfig+0x46a>
 8005fec:	e035      	b.n	800605a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fee:	4b10      	ldr	r3, [pc, #64]	@ (8006030 <HAL_RCC_OscConfig+0x4cc>)
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ff4:	f7fe fe6e 	bl	8004cd4 <HAL_GetTick>
 8005ff8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005ffa:	e008      	b.n	800600e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ffc:	f7fe fe6a 	bl	8004cd4 <HAL_GetTick>
 8006000:	4602      	mov	r2, r0
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	1ad3      	subs	r3, r2, r3
 8006006:	2b02      	cmp	r3, #2
 8006008:	d901      	bls.n	800600e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800600a:	2303      	movs	r3, #3
 800600c:	e026      	b.n	800605c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800600e:	4b06      	ldr	r3, [pc, #24]	@ (8006028 <HAL_RCC_OscConfig+0x4c4>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006016:	2b00      	cmp	r3, #0
 8006018:	d1f0      	bne.n	8005ffc <HAL_RCC_OscConfig+0x498>
 800601a:	e01e      	b.n	800605a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	69db      	ldr	r3, [r3, #28]
 8006020:	2b01      	cmp	r3, #1
 8006022:	d107      	bne.n	8006034 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006024:	2301      	movs	r3, #1
 8006026:	e019      	b.n	800605c <HAL_RCC_OscConfig+0x4f8>
 8006028:	40021000 	.word	0x40021000
 800602c:	40007000 	.word	0x40007000
 8006030:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006034:	4b0b      	ldr	r3, [pc, #44]	@ (8006064 <HAL_RCC_OscConfig+0x500>)
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6a1b      	ldr	r3, [r3, #32]
 8006044:	429a      	cmp	r2, r3
 8006046:	d106      	bne.n	8006056 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006052:	429a      	cmp	r2, r3
 8006054:	d001      	beq.n	800605a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006056:	2301      	movs	r3, #1
 8006058:	e000      	b.n	800605c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800605a:	2300      	movs	r3, #0
}
 800605c:	4618      	mov	r0, r3
 800605e:	3718      	adds	r7, #24
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}
 8006064:	40021000 	.word	0x40021000

08006068 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b084      	sub	sp, #16
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
 8006070:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d101      	bne.n	800607c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006078:	2301      	movs	r3, #1
 800607a:	e0d0      	b.n	800621e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800607c:	4b6a      	ldr	r3, [pc, #424]	@ (8006228 <HAL_RCC_ClockConfig+0x1c0>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f003 0307 	and.w	r3, r3, #7
 8006084:	683a      	ldr	r2, [r7, #0]
 8006086:	429a      	cmp	r2, r3
 8006088:	d910      	bls.n	80060ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800608a:	4b67      	ldr	r3, [pc, #412]	@ (8006228 <HAL_RCC_ClockConfig+0x1c0>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f023 0207 	bic.w	r2, r3, #7
 8006092:	4965      	ldr	r1, [pc, #404]	@ (8006228 <HAL_RCC_ClockConfig+0x1c0>)
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	4313      	orrs	r3, r2
 8006098:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800609a:	4b63      	ldr	r3, [pc, #396]	@ (8006228 <HAL_RCC_ClockConfig+0x1c0>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f003 0307 	and.w	r3, r3, #7
 80060a2:	683a      	ldr	r2, [r7, #0]
 80060a4:	429a      	cmp	r2, r3
 80060a6:	d001      	beq.n	80060ac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80060a8:	2301      	movs	r3, #1
 80060aa:	e0b8      	b.n	800621e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f003 0302 	and.w	r3, r3, #2
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d020      	beq.n	80060fa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f003 0304 	and.w	r3, r3, #4
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d005      	beq.n	80060d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80060c4:	4b59      	ldr	r3, [pc, #356]	@ (800622c <HAL_RCC_ClockConfig+0x1c4>)
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	4a58      	ldr	r2, [pc, #352]	@ (800622c <HAL_RCC_ClockConfig+0x1c4>)
 80060ca:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80060ce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f003 0308 	and.w	r3, r3, #8
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d005      	beq.n	80060e8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80060dc:	4b53      	ldr	r3, [pc, #332]	@ (800622c <HAL_RCC_ClockConfig+0x1c4>)
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	4a52      	ldr	r2, [pc, #328]	@ (800622c <HAL_RCC_ClockConfig+0x1c4>)
 80060e2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80060e6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060e8:	4b50      	ldr	r3, [pc, #320]	@ (800622c <HAL_RCC_ClockConfig+0x1c4>)
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	689b      	ldr	r3, [r3, #8]
 80060f4:	494d      	ldr	r1, [pc, #308]	@ (800622c <HAL_RCC_ClockConfig+0x1c4>)
 80060f6:	4313      	orrs	r3, r2
 80060f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f003 0301 	and.w	r3, r3, #1
 8006102:	2b00      	cmp	r3, #0
 8006104:	d040      	beq.n	8006188 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	2b01      	cmp	r3, #1
 800610c:	d107      	bne.n	800611e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800610e:	4b47      	ldr	r3, [pc, #284]	@ (800622c <HAL_RCC_ClockConfig+0x1c4>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006116:	2b00      	cmp	r3, #0
 8006118:	d115      	bne.n	8006146 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800611a:	2301      	movs	r3, #1
 800611c:	e07f      	b.n	800621e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	2b02      	cmp	r3, #2
 8006124:	d107      	bne.n	8006136 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006126:	4b41      	ldr	r3, [pc, #260]	@ (800622c <HAL_RCC_ClockConfig+0x1c4>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800612e:	2b00      	cmp	r3, #0
 8006130:	d109      	bne.n	8006146 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006132:	2301      	movs	r3, #1
 8006134:	e073      	b.n	800621e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006136:	4b3d      	ldr	r3, [pc, #244]	@ (800622c <HAL_RCC_ClockConfig+0x1c4>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f003 0302 	and.w	r3, r3, #2
 800613e:	2b00      	cmp	r3, #0
 8006140:	d101      	bne.n	8006146 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006142:	2301      	movs	r3, #1
 8006144:	e06b      	b.n	800621e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006146:	4b39      	ldr	r3, [pc, #228]	@ (800622c <HAL_RCC_ClockConfig+0x1c4>)
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	f023 0203 	bic.w	r2, r3, #3
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	4936      	ldr	r1, [pc, #216]	@ (800622c <HAL_RCC_ClockConfig+0x1c4>)
 8006154:	4313      	orrs	r3, r2
 8006156:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006158:	f7fe fdbc 	bl	8004cd4 <HAL_GetTick>
 800615c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800615e:	e00a      	b.n	8006176 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006160:	f7fe fdb8 	bl	8004cd4 <HAL_GetTick>
 8006164:	4602      	mov	r2, r0
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	1ad3      	subs	r3, r2, r3
 800616a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800616e:	4293      	cmp	r3, r2
 8006170:	d901      	bls.n	8006176 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006172:	2303      	movs	r3, #3
 8006174:	e053      	b.n	800621e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006176:	4b2d      	ldr	r3, [pc, #180]	@ (800622c <HAL_RCC_ClockConfig+0x1c4>)
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	f003 020c 	and.w	r2, r3, #12
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	009b      	lsls	r3, r3, #2
 8006184:	429a      	cmp	r2, r3
 8006186:	d1eb      	bne.n	8006160 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006188:	4b27      	ldr	r3, [pc, #156]	@ (8006228 <HAL_RCC_ClockConfig+0x1c0>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f003 0307 	and.w	r3, r3, #7
 8006190:	683a      	ldr	r2, [r7, #0]
 8006192:	429a      	cmp	r2, r3
 8006194:	d210      	bcs.n	80061b8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006196:	4b24      	ldr	r3, [pc, #144]	@ (8006228 <HAL_RCC_ClockConfig+0x1c0>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f023 0207 	bic.w	r2, r3, #7
 800619e:	4922      	ldr	r1, [pc, #136]	@ (8006228 <HAL_RCC_ClockConfig+0x1c0>)
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	4313      	orrs	r3, r2
 80061a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80061a6:	4b20      	ldr	r3, [pc, #128]	@ (8006228 <HAL_RCC_ClockConfig+0x1c0>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f003 0307 	and.w	r3, r3, #7
 80061ae:	683a      	ldr	r2, [r7, #0]
 80061b0:	429a      	cmp	r2, r3
 80061b2:	d001      	beq.n	80061b8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80061b4:	2301      	movs	r3, #1
 80061b6:	e032      	b.n	800621e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f003 0304 	and.w	r3, r3, #4
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d008      	beq.n	80061d6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80061c4:	4b19      	ldr	r3, [pc, #100]	@ (800622c <HAL_RCC_ClockConfig+0x1c4>)
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	68db      	ldr	r3, [r3, #12]
 80061d0:	4916      	ldr	r1, [pc, #88]	@ (800622c <HAL_RCC_ClockConfig+0x1c4>)
 80061d2:	4313      	orrs	r3, r2
 80061d4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f003 0308 	and.w	r3, r3, #8
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d009      	beq.n	80061f6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80061e2:	4b12      	ldr	r3, [pc, #72]	@ (800622c <HAL_RCC_ClockConfig+0x1c4>)
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	691b      	ldr	r3, [r3, #16]
 80061ee:	00db      	lsls	r3, r3, #3
 80061f0:	490e      	ldr	r1, [pc, #56]	@ (800622c <HAL_RCC_ClockConfig+0x1c4>)
 80061f2:	4313      	orrs	r3, r2
 80061f4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80061f6:	f000 f821 	bl	800623c <HAL_RCC_GetSysClockFreq>
 80061fa:	4602      	mov	r2, r0
 80061fc:	4b0b      	ldr	r3, [pc, #44]	@ (800622c <HAL_RCC_ClockConfig+0x1c4>)
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	091b      	lsrs	r3, r3, #4
 8006202:	f003 030f 	and.w	r3, r3, #15
 8006206:	490a      	ldr	r1, [pc, #40]	@ (8006230 <HAL_RCC_ClockConfig+0x1c8>)
 8006208:	5ccb      	ldrb	r3, [r1, r3]
 800620a:	fa22 f303 	lsr.w	r3, r2, r3
 800620e:	4a09      	ldr	r2, [pc, #36]	@ (8006234 <HAL_RCC_ClockConfig+0x1cc>)
 8006210:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006212:	4b09      	ldr	r3, [pc, #36]	@ (8006238 <HAL_RCC_ClockConfig+0x1d0>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4618      	mov	r0, r3
 8006218:	f7fe fd1a 	bl	8004c50 <HAL_InitTick>

  return HAL_OK;
 800621c:	2300      	movs	r3, #0
}
 800621e:	4618      	mov	r0, r3
 8006220:	3710      	adds	r7, #16
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}
 8006226:	bf00      	nop
 8006228:	40022000 	.word	0x40022000
 800622c:	40021000 	.word	0x40021000
 8006230:	08008a48 	.word	0x08008a48
 8006234:	20000008 	.word	0x20000008
 8006238:	2000000c 	.word	0x2000000c

0800623c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800623c:	b480      	push	{r7}
 800623e:	b087      	sub	sp, #28
 8006240:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006242:	2300      	movs	r3, #0
 8006244:	60fb      	str	r3, [r7, #12]
 8006246:	2300      	movs	r3, #0
 8006248:	60bb      	str	r3, [r7, #8]
 800624a:	2300      	movs	r3, #0
 800624c:	617b      	str	r3, [r7, #20]
 800624e:	2300      	movs	r3, #0
 8006250:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8006252:	2300      	movs	r3, #0
 8006254:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006256:	4b1e      	ldr	r3, [pc, #120]	@ (80062d0 <HAL_RCC_GetSysClockFreq+0x94>)
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f003 030c 	and.w	r3, r3, #12
 8006262:	2b04      	cmp	r3, #4
 8006264:	d002      	beq.n	800626c <HAL_RCC_GetSysClockFreq+0x30>
 8006266:	2b08      	cmp	r3, #8
 8006268:	d003      	beq.n	8006272 <HAL_RCC_GetSysClockFreq+0x36>
 800626a:	e027      	b.n	80062bc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800626c:	4b19      	ldr	r3, [pc, #100]	@ (80062d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800626e:	613b      	str	r3, [r7, #16]
      break;
 8006270:	e027      	b.n	80062c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	0c9b      	lsrs	r3, r3, #18
 8006276:	f003 030f 	and.w	r3, r3, #15
 800627a:	4a17      	ldr	r2, [pc, #92]	@ (80062d8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800627c:	5cd3      	ldrb	r3, [r2, r3]
 800627e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006286:	2b00      	cmp	r3, #0
 8006288:	d010      	beq.n	80062ac <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800628a:	4b11      	ldr	r3, [pc, #68]	@ (80062d0 <HAL_RCC_GetSysClockFreq+0x94>)
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	0c5b      	lsrs	r3, r3, #17
 8006290:	f003 0301 	and.w	r3, r3, #1
 8006294:	4a11      	ldr	r2, [pc, #68]	@ (80062dc <HAL_RCC_GetSysClockFreq+0xa0>)
 8006296:	5cd3      	ldrb	r3, [r2, r3]
 8006298:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	4a0d      	ldr	r2, [pc, #52]	@ (80062d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800629e:	fb03 f202 	mul.w	r2, r3, r2
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80062a8:	617b      	str	r3, [r7, #20]
 80062aa:	e004      	b.n	80062b6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	4a0c      	ldr	r2, [pc, #48]	@ (80062e0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80062b0:	fb02 f303 	mul.w	r3, r2, r3
 80062b4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	613b      	str	r3, [r7, #16]
      break;
 80062ba:	e002      	b.n	80062c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80062bc:	4b05      	ldr	r3, [pc, #20]	@ (80062d4 <HAL_RCC_GetSysClockFreq+0x98>)
 80062be:	613b      	str	r3, [r7, #16]
      break;
 80062c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80062c2:	693b      	ldr	r3, [r7, #16]
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	371c      	adds	r7, #28
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bc80      	pop	{r7}
 80062cc:	4770      	bx	lr
 80062ce:	bf00      	nop
 80062d0:	40021000 	.word	0x40021000
 80062d4:	007a1200 	.word	0x007a1200
 80062d8:	08008a60 	.word	0x08008a60
 80062dc:	08008a70 	.word	0x08008a70
 80062e0:	003d0900 	.word	0x003d0900

080062e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80062e4:	b480      	push	{r7}
 80062e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80062e8:	4b02      	ldr	r3, [pc, #8]	@ (80062f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80062ea:	681b      	ldr	r3, [r3, #0]
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bc80      	pop	{r7}
 80062f2:	4770      	bx	lr
 80062f4:	20000008 	.word	0x20000008

080062f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80062fc:	f7ff fff2 	bl	80062e4 <HAL_RCC_GetHCLKFreq>
 8006300:	4602      	mov	r2, r0
 8006302:	4b05      	ldr	r3, [pc, #20]	@ (8006318 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	0a1b      	lsrs	r3, r3, #8
 8006308:	f003 0307 	and.w	r3, r3, #7
 800630c:	4903      	ldr	r1, [pc, #12]	@ (800631c <HAL_RCC_GetPCLK1Freq+0x24>)
 800630e:	5ccb      	ldrb	r3, [r1, r3]
 8006310:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006314:	4618      	mov	r0, r3
 8006316:	bd80      	pop	{r7, pc}
 8006318:	40021000 	.word	0x40021000
 800631c:	08008a58 	.word	0x08008a58

08006320 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006324:	f7ff ffde 	bl	80062e4 <HAL_RCC_GetHCLKFreq>
 8006328:	4602      	mov	r2, r0
 800632a:	4b05      	ldr	r3, [pc, #20]	@ (8006340 <HAL_RCC_GetPCLK2Freq+0x20>)
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	0adb      	lsrs	r3, r3, #11
 8006330:	f003 0307 	and.w	r3, r3, #7
 8006334:	4903      	ldr	r1, [pc, #12]	@ (8006344 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006336:	5ccb      	ldrb	r3, [r1, r3]
 8006338:	fa22 f303 	lsr.w	r3, r2, r3
}
 800633c:	4618      	mov	r0, r3
 800633e:	bd80      	pop	{r7, pc}
 8006340:	40021000 	.word	0x40021000
 8006344:	08008a58 	.word	0x08008a58

08006348 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006348:	b480      	push	{r7}
 800634a:	b085      	sub	sp, #20
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006350:	4b0a      	ldr	r3, [pc, #40]	@ (800637c <RCC_Delay+0x34>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a0a      	ldr	r2, [pc, #40]	@ (8006380 <RCC_Delay+0x38>)
 8006356:	fba2 2303 	umull	r2, r3, r2, r3
 800635a:	0a5b      	lsrs	r3, r3, #9
 800635c:	687a      	ldr	r2, [r7, #4]
 800635e:	fb02 f303 	mul.w	r3, r2, r3
 8006362:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006364:	bf00      	nop
  }
  while (Delay --);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	1e5a      	subs	r2, r3, #1
 800636a:	60fa      	str	r2, [r7, #12]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d1f9      	bne.n	8006364 <RCC_Delay+0x1c>
}
 8006370:	bf00      	nop
 8006372:	bf00      	nop
 8006374:	3714      	adds	r7, #20
 8006376:	46bd      	mov	sp, r7
 8006378:	bc80      	pop	{r7}
 800637a:	4770      	bx	lr
 800637c:	20000008 	.word	0x20000008
 8006380:	10624dd3 	.word	0x10624dd3

08006384 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b082      	sub	sp, #8
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d101      	bne.n	8006396 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006392:	2301      	movs	r3, #1
 8006394:	e041      	b.n	800641a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800639c:	b2db      	uxtb	r3, r3
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d106      	bne.n	80063b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2200      	movs	r2, #0
 80063a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f7fe fa20 	bl	80047f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2202      	movs	r2, #2
 80063b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	3304      	adds	r3, #4
 80063c0:	4619      	mov	r1, r3
 80063c2:	4610      	mov	r0, r2
 80063c4:	f000 fb58 	bl	8006a78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2201      	movs	r2, #1
 80063cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2201      	movs	r2, #1
 80063d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2201      	movs	r2, #1
 80063dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2201      	movs	r2, #1
 80063e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2201      	movs	r2, #1
 80063ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2201      	movs	r2, #1
 80063f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2201      	movs	r2, #1
 80063fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2201      	movs	r2, #1
 8006404:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2201      	movs	r2, #1
 800640c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2201      	movs	r2, #1
 8006414:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006418:	2300      	movs	r3, #0
}
 800641a:	4618      	mov	r0, r3
 800641c:	3708      	adds	r7, #8
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}

08006422 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006422:	b580      	push	{r7, lr}
 8006424:	b082      	sub	sp, #8
 8006426:	af00      	add	r7, sp, #0
 8006428:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d101      	bne.n	8006434 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006430:	2301      	movs	r3, #1
 8006432:	e041      	b.n	80064b8 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800643a:	b2db      	uxtb	r3, r3
 800643c:	2b00      	cmp	r3, #0
 800643e:	d106      	bne.n	800644e <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2200      	movs	r2, #0
 8006444:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f000 f839 	bl	80064c0 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2202      	movs	r2, #2
 8006452:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681a      	ldr	r2, [r3, #0]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	3304      	adds	r3, #4
 800645e:	4619      	mov	r1, r3
 8006460:	4610      	mov	r0, r2
 8006462:	f000 fb09 	bl	8006a78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2201      	movs	r2, #1
 800646a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2201      	movs	r2, #1
 8006472:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2201      	movs	r2, #1
 800647a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2201      	movs	r2, #1
 8006482:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2201      	movs	r2, #1
 800648a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2201      	movs	r2, #1
 8006492:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2201      	movs	r2, #1
 800649a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2201      	movs	r2, #1
 80064a2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2201      	movs	r2, #1
 80064aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2201      	movs	r2, #1
 80064b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80064b6:	2300      	movs	r3, #0
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3708      	adds	r7, #8
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}

080064c0 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b083      	sub	sp, #12
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80064c8:	bf00      	nop
 80064ca:	370c      	adds	r7, #12
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bc80      	pop	{r7}
 80064d0:	4770      	bx	lr
	...

080064d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b084      	sub	sp, #16
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
 80064dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d109      	bne.n	80064f8 <HAL_TIM_PWM_Start+0x24>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80064ea:	b2db      	uxtb	r3, r3
 80064ec:	2b01      	cmp	r3, #1
 80064ee:	bf14      	ite	ne
 80064f0:	2301      	movne	r3, #1
 80064f2:	2300      	moveq	r3, #0
 80064f4:	b2db      	uxtb	r3, r3
 80064f6:	e022      	b.n	800653e <HAL_TIM_PWM_Start+0x6a>
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	2b04      	cmp	r3, #4
 80064fc:	d109      	bne.n	8006512 <HAL_TIM_PWM_Start+0x3e>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006504:	b2db      	uxtb	r3, r3
 8006506:	2b01      	cmp	r3, #1
 8006508:	bf14      	ite	ne
 800650a:	2301      	movne	r3, #1
 800650c:	2300      	moveq	r3, #0
 800650e:	b2db      	uxtb	r3, r3
 8006510:	e015      	b.n	800653e <HAL_TIM_PWM_Start+0x6a>
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	2b08      	cmp	r3, #8
 8006516:	d109      	bne.n	800652c <HAL_TIM_PWM_Start+0x58>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800651e:	b2db      	uxtb	r3, r3
 8006520:	2b01      	cmp	r3, #1
 8006522:	bf14      	ite	ne
 8006524:	2301      	movne	r3, #1
 8006526:	2300      	moveq	r3, #0
 8006528:	b2db      	uxtb	r3, r3
 800652a:	e008      	b.n	800653e <HAL_TIM_PWM_Start+0x6a>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006532:	b2db      	uxtb	r3, r3
 8006534:	2b01      	cmp	r3, #1
 8006536:	bf14      	ite	ne
 8006538:	2301      	movne	r3, #1
 800653a:	2300      	moveq	r3, #0
 800653c:	b2db      	uxtb	r3, r3
 800653e:	2b00      	cmp	r3, #0
 8006540:	d001      	beq.n	8006546 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006542:	2301      	movs	r3, #1
 8006544:	e072      	b.n	800662c <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d104      	bne.n	8006556 <HAL_TIM_PWM_Start+0x82>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2202      	movs	r2, #2
 8006550:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006554:	e013      	b.n	800657e <HAL_TIM_PWM_Start+0xaa>
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	2b04      	cmp	r3, #4
 800655a:	d104      	bne.n	8006566 <HAL_TIM_PWM_Start+0x92>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2202      	movs	r2, #2
 8006560:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006564:	e00b      	b.n	800657e <HAL_TIM_PWM_Start+0xaa>
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	2b08      	cmp	r3, #8
 800656a:	d104      	bne.n	8006576 <HAL_TIM_PWM_Start+0xa2>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2202      	movs	r2, #2
 8006570:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006574:	e003      	b.n	800657e <HAL_TIM_PWM_Start+0xaa>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2202      	movs	r2, #2
 800657a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	2201      	movs	r2, #1
 8006584:	6839      	ldr	r1, [r7, #0]
 8006586:	4618      	mov	r0, r3
 8006588:	f000 fe4b 	bl	8007222 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a28      	ldr	r2, [pc, #160]	@ (8006634 <HAL_TIM_PWM_Start+0x160>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d004      	beq.n	80065a0 <HAL_TIM_PWM_Start+0xcc>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a27      	ldr	r2, [pc, #156]	@ (8006638 <HAL_TIM_PWM_Start+0x164>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d101      	bne.n	80065a4 <HAL_TIM_PWM_Start+0xd0>
 80065a0:	2301      	movs	r3, #1
 80065a2:	e000      	b.n	80065a6 <HAL_TIM_PWM_Start+0xd2>
 80065a4:	2300      	movs	r3, #0
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d007      	beq.n	80065ba <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80065b8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a1d      	ldr	r2, [pc, #116]	@ (8006634 <HAL_TIM_PWM_Start+0x160>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d018      	beq.n	80065f6 <HAL_TIM_PWM_Start+0x122>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a1b      	ldr	r2, [pc, #108]	@ (8006638 <HAL_TIM_PWM_Start+0x164>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d013      	beq.n	80065f6 <HAL_TIM_PWM_Start+0x122>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065d6:	d00e      	beq.n	80065f6 <HAL_TIM_PWM_Start+0x122>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a17      	ldr	r2, [pc, #92]	@ (800663c <HAL_TIM_PWM_Start+0x168>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d009      	beq.n	80065f6 <HAL_TIM_PWM_Start+0x122>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a16      	ldr	r2, [pc, #88]	@ (8006640 <HAL_TIM_PWM_Start+0x16c>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d004      	beq.n	80065f6 <HAL_TIM_PWM_Start+0x122>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a14      	ldr	r2, [pc, #80]	@ (8006644 <HAL_TIM_PWM_Start+0x170>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d111      	bne.n	800661a <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	689b      	ldr	r3, [r3, #8]
 80065fc:	f003 0307 	and.w	r3, r3, #7
 8006600:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2b06      	cmp	r3, #6
 8006606:	d010      	beq.n	800662a <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	681a      	ldr	r2, [r3, #0]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f042 0201 	orr.w	r2, r2, #1
 8006616:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006618:	e007      	b.n	800662a <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	681a      	ldr	r2, [r3, #0]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f042 0201 	orr.w	r2, r2, #1
 8006628:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800662a:	2300      	movs	r3, #0
}
 800662c:	4618      	mov	r0, r3
 800662e:	3710      	adds	r7, #16
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}
 8006634:	40012c00 	.word	0x40012c00
 8006638:	40013400 	.word	0x40013400
 800663c:	40000400 	.word	0x40000400
 8006640:	40000800 	.word	0x40000800
 8006644:	40000c00 	.word	0x40000c00

08006648 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b082      	sub	sp, #8
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d101      	bne.n	800665a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006656:	2301      	movs	r3, #1
 8006658:	e041      	b.n	80066de <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006660:	b2db      	uxtb	r3, r3
 8006662:	2b00      	cmp	r3, #0
 8006664:	d106      	bne.n	8006674 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2200      	movs	r2, #0
 800666a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f000 f839 	bl	80066e6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2202      	movs	r2, #2
 8006678:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	3304      	adds	r3, #4
 8006684:	4619      	mov	r1, r3
 8006686:	4610      	mov	r0, r2
 8006688:	f000 f9f6 	bl	8006a78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2201      	movs	r2, #1
 8006690:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2201      	movs	r2, #1
 8006698:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2201      	movs	r2, #1
 80066a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2201      	movs	r2, #1
 80066a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2201      	movs	r2, #1
 80066b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2201      	movs	r2, #1
 80066b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2201      	movs	r2, #1
 80066c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2201      	movs	r2, #1
 80066c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2201      	movs	r2, #1
 80066d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2201      	movs	r2, #1
 80066d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80066dc:	2300      	movs	r3, #0
}
 80066de:	4618      	mov	r0, r3
 80066e0:	3708      	adds	r7, #8
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}

080066e6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80066e6:	b480      	push	{r7}
 80066e8:	b083      	sub	sp, #12
 80066ea:	af00      	add	r7, sp, #0
 80066ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80066ee:	bf00      	nop
 80066f0:	370c      	adds	r7, #12
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bc80      	pop	{r7}
 80066f6:	4770      	bx	lr

080066f8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b086      	sub	sp, #24
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	60f8      	str	r0, [r7, #12]
 8006700:	60b9      	str	r1, [r7, #8]
 8006702:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006704:	2300      	movs	r3, #0
 8006706:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800670e:	2b01      	cmp	r3, #1
 8006710:	d101      	bne.n	8006716 <HAL_TIM_OC_ConfigChannel+0x1e>
 8006712:	2302      	movs	r3, #2
 8006714:	e048      	b.n	80067a8 <HAL_TIM_OC_ConfigChannel+0xb0>
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2201      	movs	r2, #1
 800671a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2b0c      	cmp	r3, #12
 8006722:	d839      	bhi.n	8006798 <HAL_TIM_OC_ConfigChannel+0xa0>
 8006724:	a201      	add	r2, pc, #4	@ (adr r2, 800672c <HAL_TIM_OC_ConfigChannel+0x34>)
 8006726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800672a:	bf00      	nop
 800672c:	08006761 	.word	0x08006761
 8006730:	08006799 	.word	0x08006799
 8006734:	08006799 	.word	0x08006799
 8006738:	08006799 	.word	0x08006799
 800673c:	0800676f 	.word	0x0800676f
 8006740:	08006799 	.word	0x08006799
 8006744:	08006799 	.word	0x08006799
 8006748:	08006799 	.word	0x08006799
 800674c:	0800677d 	.word	0x0800677d
 8006750:	08006799 	.word	0x08006799
 8006754:	08006799 	.word	0x08006799
 8006758:	08006799 	.word	0x08006799
 800675c:	0800678b 	.word	0x0800678b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	68b9      	ldr	r1, [r7, #8]
 8006766:	4618      	mov	r0, r3
 8006768:	f000 fa00 	bl	8006b6c <TIM_OC1_SetConfig>
      break;
 800676c:	e017      	b.n	800679e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	68b9      	ldr	r1, [r7, #8]
 8006774:	4618      	mov	r0, r3
 8006776:	f000 fa69 	bl	8006c4c <TIM_OC2_SetConfig>
      break;
 800677a:	e010      	b.n	800679e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	68b9      	ldr	r1, [r7, #8]
 8006782:	4618      	mov	r0, r3
 8006784:	f000 fad6 	bl	8006d34 <TIM_OC3_SetConfig>
      break;
 8006788:	e009      	b.n	800679e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	68b9      	ldr	r1, [r7, #8]
 8006790:	4618      	mov	r0, r3
 8006792:	f000 fb43 	bl	8006e1c <TIM_OC4_SetConfig>
      break;
 8006796:	e002      	b.n	800679e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8006798:	2301      	movs	r3, #1
 800679a:	75fb      	strb	r3, [r7, #23]
      break;
 800679c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2200      	movs	r2, #0
 80067a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80067a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3718      	adds	r7, #24
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}

080067b0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b086      	sub	sp, #24
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	60f8      	str	r0, [r7, #12]
 80067b8:	60b9      	str	r1, [r7, #8]
 80067ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80067bc:	2300      	movs	r3, #0
 80067be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80067c6:	2b01      	cmp	r3, #1
 80067c8:	d101      	bne.n	80067ce <HAL_TIM_IC_ConfigChannel+0x1e>
 80067ca:	2302      	movs	r3, #2
 80067cc:	e088      	b.n	80068e0 <HAL_TIM_IC_ConfigChannel+0x130>
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2201      	movs	r2, #1
 80067d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d11b      	bne.n	8006814 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80067ec:	f000 fb6a 	bl	8006ec4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	699a      	ldr	r2, [r3, #24]
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f022 020c 	bic.w	r2, r2, #12
 80067fe:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	6999      	ldr	r1, [r3, #24]
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	689a      	ldr	r2, [r3, #8]
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	430a      	orrs	r2, r1
 8006810:	619a      	str	r2, [r3, #24]
 8006812:	e060      	b.n	80068d6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2b04      	cmp	r3, #4
 8006818:	d11c      	bne.n	8006854 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800682a:	f000 fbdf 	bl	8006fec <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	699a      	ldr	r2, [r3, #24]
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800683c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	6999      	ldr	r1, [r3, #24]
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	021a      	lsls	r2, r3, #8
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	430a      	orrs	r2, r1
 8006850:	619a      	str	r2, [r3, #24]
 8006852:	e040      	b.n	80068d6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2b08      	cmp	r3, #8
 8006858:	d11b      	bne.n	8006892 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800686a:	f000 fc2a 	bl	80070c2 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	69da      	ldr	r2, [r3, #28]
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f022 020c 	bic.w	r2, r2, #12
 800687c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	69d9      	ldr	r1, [r3, #28]
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	689a      	ldr	r2, [r3, #8]
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	430a      	orrs	r2, r1
 800688e:	61da      	str	r2, [r3, #28]
 8006890:	e021      	b.n	80068d6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2b0c      	cmp	r3, #12
 8006896:	d11c      	bne.n	80068d2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80068a8:	f000 fc46 	bl	8007138 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	69da      	ldr	r2, [r3, #28]
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80068ba:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	69d9      	ldr	r1, [r3, #28]
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	689b      	ldr	r3, [r3, #8]
 80068c6:	021a      	lsls	r2, r3, #8
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	430a      	orrs	r2, r1
 80068ce:	61da      	str	r2, [r3, #28]
 80068d0:	e001      	b.n	80068d6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80068d2:	2301      	movs	r3, #1
 80068d4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	2200      	movs	r2, #0
 80068da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80068de:	7dfb      	ldrb	r3, [r7, #23]
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	3718      	adds	r7, #24
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}

080068e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b084      	sub	sp, #16
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
 80068f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80068f2:	2300      	movs	r3, #0
 80068f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d101      	bne.n	8006904 <HAL_TIM_ConfigClockSource+0x1c>
 8006900:	2302      	movs	r3, #2
 8006902:	e0b4      	b.n	8006a6e <HAL_TIM_ConfigClockSource+0x186>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2201      	movs	r2, #1
 8006908:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2202      	movs	r2, #2
 8006910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	689b      	ldr	r3, [r3, #8]
 800691a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006922:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800692a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	68ba      	ldr	r2, [r7, #8]
 8006932:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800693c:	d03e      	beq.n	80069bc <HAL_TIM_ConfigClockSource+0xd4>
 800693e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006942:	f200 8087 	bhi.w	8006a54 <HAL_TIM_ConfigClockSource+0x16c>
 8006946:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800694a:	f000 8086 	beq.w	8006a5a <HAL_TIM_ConfigClockSource+0x172>
 800694e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006952:	d87f      	bhi.n	8006a54 <HAL_TIM_ConfigClockSource+0x16c>
 8006954:	2b70      	cmp	r3, #112	@ 0x70
 8006956:	d01a      	beq.n	800698e <HAL_TIM_ConfigClockSource+0xa6>
 8006958:	2b70      	cmp	r3, #112	@ 0x70
 800695a:	d87b      	bhi.n	8006a54 <HAL_TIM_ConfigClockSource+0x16c>
 800695c:	2b60      	cmp	r3, #96	@ 0x60
 800695e:	d050      	beq.n	8006a02 <HAL_TIM_ConfigClockSource+0x11a>
 8006960:	2b60      	cmp	r3, #96	@ 0x60
 8006962:	d877      	bhi.n	8006a54 <HAL_TIM_ConfigClockSource+0x16c>
 8006964:	2b50      	cmp	r3, #80	@ 0x50
 8006966:	d03c      	beq.n	80069e2 <HAL_TIM_ConfigClockSource+0xfa>
 8006968:	2b50      	cmp	r3, #80	@ 0x50
 800696a:	d873      	bhi.n	8006a54 <HAL_TIM_ConfigClockSource+0x16c>
 800696c:	2b40      	cmp	r3, #64	@ 0x40
 800696e:	d058      	beq.n	8006a22 <HAL_TIM_ConfigClockSource+0x13a>
 8006970:	2b40      	cmp	r3, #64	@ 0x40
 8006972:	d86f      	bhi.n	8006a54 <HAL_TIM_ConfigClockSource+0x16c>
 8006974:	2b30      	cmp	r3, #48	@ 0x30
 8006976:	d064      	beq.n	8006a42 <HAL_TIM_ConfigClockSource+0x15a>
 8006978:	2b30      	cmp	r3, #48	@ 0x30
 800697a:	d86b      	bhi.n	8006a54 <HAL_TIM_ConfigClockSource+0x16c>
 800697c:	2b20      	cmp	r3, #32
 800697e:	d060      	beq.n	8006a42 <HAL_TIM_ConfigClockSource+0x15a>
 8006980:	2b20      	cmp	r3, #32
 8006982:	d867      	bhi.n	8006a54 <HAL_TIM_ConfigClockSource+0x16c>
 8006984:	2b00      	cmp	r3, #0
 8006986:	d05c      	beq.n	8006a42 <HAL_TIM_ConfigClockSource+0x15a>
 8006988:	2b10      	cmp	r3, #16
 800698a:	d05a      	beq.n	8006a42 <HAL_TIM_ConfigClockSource+0x15a>
 800698c:	e062      	b.n	8006a54 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800699e:	f000 fc21 	bl	80071e4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	689b      	ldr	r3, [r3, #8]
 80069a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80069b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	68ba      	ldr	r2, [r7, #8]
 80069b8:	609a      	str	r2, [r3, #8]
      break;
 80069ba:	e04f      	b.n	8006a5c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80069cc:	f000 fc0a 	bl	80071e4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	689a      	ldr	r2, [r3, #8]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80069de:	609a      	str	r2, [r3, #8]
      break;
 80069e0:	e03c      	b.n	8006a5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80069ee:	461a      	mov	r2, r3
 80069f0:	f000 face 	bl	8006f90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	2150      	movs	r1, #80	@ 0x50
 80069fa:	4618      	mov	r0, r3
 80069fc:	f000 fbd8 	bl	80071b0 <TIM_ITRx_SetConfig>
      break;
 8006a00:	e02c      	b.n	8006a5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a0e:	461a      	mov	r2, r3
 8006a10:	f000 fb28 	bl	8007064 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	2160      	movs	r1, #96	@ 0x60
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f000 fbc8 	bl	80071b0 <TIM_ITRx_SetConfig>
      break;
 8006a20:	e01c      	b.n	8006a5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a2e:	461a      	mov	r2, r3
 8006a30:	f000 faae 	bl	8006f90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	2140      	movs	r1, #64	@ 0x40
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	f000 fbb8 	bl	80071b0 <TIM_ITRx_SetConfig>
      break;
 8006a40:	e00c      	b.n	8006a5c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681a      	ldr	r2, [r3, #0]
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4619      	mov	r1, r3
 8006a4c:	4610      	mov	r0, r2
 8006a4e:	f000 fbaf 	bl	80071b0 <TIM_ITRx_SetConfig>
      break;
 8006a52:	e003      	b.n	8006a5c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006a54:	2301      	movs	r3, #1
 8006a56:	73fb      	strb	r3, [r7, #15]
      break;
 8006a58:	e000      	b.n	8006a5c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006a5a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2201      	movs	r2, #1
 8006a60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2200      	movs	r2, #0
 8006a68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3710      	adds	r7, #16
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}
	...

08006a78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b085      	sub	sp, #20
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
 8006a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	4a33      	ldr	r2, [pc, #204]	@ (8006b58 <TIM_Base_SetConfig+0xe0>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d013      	beq.n	8006ab8 <TIM_Base_SetConfig+0x40>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	4a32      	ldr	r2, [pc, #200]	@ (8006b5c <TIM_Base_SetConfig+0xe4>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d00f      	beq.n	8006ab8 <TIM_Base_SetConfig+0x40>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a9e:	d00b      	beq.n	8006ab8 <TIM_Base_SetConfig+0x40>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	4a2f      	ldr	r2, [pc, #188]	@ (8006b60 <TIM_Base_SetConfig+0xe8>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d007      	beq.n	8006ab8 <TIM_Base_SetConfig+0x40>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	4a2e      	ldr	r2, [pc, #184]	@ (8006b64 <TIM_Base_SetConfig+0xec>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d003      	beq.n	8006ab8 <TIM_Base_SetConfig+0x40>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	4a2d      	ldr	r2, [pc, #180]	@ (8006b68 <TIM_Base_SetConfig+0xf0>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d108      	bne.n	8006aca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006abe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	68fa      	ldr	r2, [r7, #12]
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	4a22      	ldr	r2, [pc, #136]	@ (8006b58 <TIM_Base_SetConfig+0xe0>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d013      	beq.n	8006afa <TIM_Base_SetConfig+0x82>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	4a21      	ldr	r2, [pc, #132]	@ (8006b5c <TIM_Base_SetConfig+0xe4>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d00f      	beq.n	8006afa <TIM_Base_SetConfig+0x82>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ae0:	d00b      	beq.n	8006afa <TIM_Base_SetConfig+0x82>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	4a1e      	ldr	r2, [pc, #120]	@ (8006b60 <TIM_Base_SetConfig+0xe8>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d007      	beq.n	8006afa <TIM_Base_SetConfig+0x82>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	4a1d      	ldr	r2, [pc, #116]	@ (8006b64 <TIM_Base_SetConfig+0xec>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d003      	beq.n	8006afa <TIM_Base_SetConfig+0x82>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	4a1c      	ldr	r2, [pc, #112]	@ (8006b68 <TIM_Base_SetConfig+0xf0>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d108      	bne.n	8006b0c <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	68db      	ldr	r3, [r3, #12]
 8006b06:	68fa      	ldr	r2, [r7, #12]
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	695b      	ldr	r3, [r3, #20]
 8006b16:	4313      	orrs	r3, r2
 8006b18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	68fa      	ldr	r2, [r7, #12]
 8006b1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	689a      	ldr	r2, [r3, #8]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	681a      	ldr	r2, [r3, #0]
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	4a09      	ldr	r2, [pc, #36]	@ (8006b58 <TIM_Base_SetConfig+0xe0>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d003      	beq.n	8006b40 <TIM_Base_SetConfig+0xc8>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	4a08      	ldr	r2, [pc, #32]	@ (8006b5c <TIM_Base_SetConfig+0xe4>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d103      	bne.n	8006b48 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	691a      	ldr	r2, [r3, #16]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	615a      	str	r2, [r3, #20]
}
 8006b4e:	bf00      	nop
 8006b50:	3714      	adds	r7, #20
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bc80      	pop	{r7}
 8006b56:	4770      	bx	lr
 8006b58:	40012c00 	.word	0x40012c00
 8006b5c:	40013400 	.word	0x40013400
 8006b60:	40000400 	.word	0x40000400
 8006b64:	40000800 	.word	0x40000800
 8006b68:	40000c00 	.word	0x40000c00

08006b6c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b087      	sub	sp, #28
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
 8006b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6a1b      	ldr	r3, [r3, #32]
 8006b7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6a1b      	ldr	r3, [r3, #32]
 8006b80:	f023 0201 	bic.w	r2, r3, #1
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	699b      	ldr	r3, [r3, #24]
 8006b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	f023 0303 	bic.w	r3, r3, #3
 8006ba2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	68fa      	ldr	r2, [r7, #12]
 8006baa:	4313      	orrs	r3, r2
 8006bac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	f023 0302 	bic.w	r3, r3, #2
 8006bb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	689b      	ldr	r3, [r3, #8]
 8006bba:	697a      	ldr	r2, [r7, #20]
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	4a20      	ldr	r2, [pc, #128]	@ (8006c44 <TIM_OC1_SetConfig+0xd8>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d003      	beq.n	8006bd0 <TIM_OC1_SetConfig+0x64>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	4a1f      	ldr	r2, [pc, #124]	@ (8006c48 <TIM_OC1_SetConfig+0xdc>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d10c      	bne.n	8006bea <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	f023 0308 	bic.w	r3, r3, #8
 8006bd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	68db      	ldr	r3, [r3, #12]
 8006bdc:	697a      	ldr	r2, [r7, #20]
 8006bde:	4313      	orrs	r3, r2
 8006be0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	f023 0304 	bic.w	r3, r3, #4
 8006be8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	4a15      	ldr	r2, [pc, #84]	@ (8006c44 <TIM_OC1_SetConfig+0xd8>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d003      	beq.n	8006bfa <TIM_OC1_SetConfig+0x8e>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	4a14      	ldr	r2, [pc, #80]	@ (8006c48 <TIM_OC1_SetConfig+0xdc>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d111      	bne.n	8006c1e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006c00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006c08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	695b      	ldr	r3, [r3, #20]
 8006c0e:	693a      	ldr	r2, [r7, #16]
 8006c10:	4313      	orrs	r3, r2
 8006c12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	699b      	ldr	r3, [r3, #24]
 8006c18:	693a      	ldr	r2, [r7, #16]
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	693a      	ldr	r2, [r7, #16]
 8006c22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	68fa      	ldr	r2, [r7, #12]
 8006c28:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	685a      	ldr	r2, [r3, #4]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	697a      	ldr	r2, [r7, #20]
 8006c36:	621a      	str	r2, [r3, #32]
}
 8006c38:	bf00      	nop
 8006c3a:	371c      	adds	r7, #28
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bc80      	pop	{r7}
 8006c40:	4770      	bx	lr
 8006c42:	bf00      	nop
 8006c44:	40012c00 	.word	0x40012c00
 8006c48:	40013400 	.word	0x40013400

08006c4c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b087      	sub	sp, #28
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
 8006c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6a1b      	ldr	r3, [r3, #32]
 8006c5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6a1b      	ldr	r3, [r3, #32]
 8006c60:	f023 0210 	bic.w	r2, r3, #16
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	699b      	ldr	r3, [r3, #24]
 8006c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	021b      	lsls	r3, r3, #8
 8006c8a:	68fa      	ldr	r2, [r7, #12]
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006c90:	697b      	ldr	r3, [r7, #20]
 8006c92:	f023 0320 	bic.w	r3, r3, #32
 8006c96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	689b      	ldr	r3, [r3, #8]
 8006c9c:	011b      	lsls	r3, r3, #4
 8006c9e:	697a      	ldr	r2, [r7, #20]
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	4a21      	ldr	r2, [pc, #132]	@ (8006d2c <TIM_OC2_SetConfig+0xe0>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d003      	beq.n	8006cb4 <TIM_OC2_SetConfig+0x68>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	4a20      	ldr	r2, [pc, #128]	@ (8006d30 <TIM_OC2_SetConfig+0xe4>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d10d      	bne.n	8006cd0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006cba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	68db      	ldr	r3, [r3, #12]
 8006cc0:	011b      	lsls	r3, r3, #4
 8006cc2:	697a      	ldr	r2, [r7, #20]
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006cce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	4a16      	ldr	r2, [pc, #88]	@ (8006d2c <TIM_OC2_SetConfig+0xe0>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d003      	beq.n	8006ce0 <TIM_OC2_SetConfig+0x94>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	4a15      	ldr	r2, [pc, #84]	@ (8006d30 <TIM_OC2_SetConfig+0xe4>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d113      	bne.n	8006d08 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006ce6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006cee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	695b      	ldr	r3, [r3, #20]
 8006cf4:	009b      	lsls	r3, r3, #2
 8006cf6:	693a      	ldr	r2, [r7, #16]
 8006cf8:	4313      	orrs	r3, r2
 8006cfa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	699b      	ldr	r3, [r3, #24]
 8006d00:	009b      	lsls	r3, r3, #2
 8006d02:	693a      	ldr	r2, [r7, #16]
 8006d04:	4313      	orrs	r3, r2
 8006d06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	693a      	ldr	r2, [r7, #16]
 8006d0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	68fa      	ldr	r2, [r7, #12]
 8006d12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	685a      	ldr	r2, [r3, #4]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	697a      	ldr	r2, [r7, #20]
 8006d20:	621a      	str	r2, [r3, #32]
}
 8006d22:	bf00      	nop
 8006d24:	371c      	adds	r7, #28
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bc80      	pop	{r7}
 8006d2a:	4770      	bx	lr
 8006d2c:	40012c00 	.word	0x40012c00
 8006d30:	40013400 	.word	0x40013400

08006d34 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b087      	sub	sp, #28
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
 8006d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6a1b      	ldr	r3, [r3, #32]
 8006d42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6a1b      	ldr	r3, [r3, #32]
 8006d48:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	69db      	ldr	r3, [r3, #28]
 8006d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	f023 0303 	bic.w	r3, r3, #3
 8006d6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	68fa      	ldr	r2, [r7, #12]
 8006d72:	4313      	orrs	r3, r2
 8006d74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006d7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	689b      	ldr	r3, [r3, #8]
 8006d82:	021b      	lsls	r3, r3, #8
 8006d84:	697a      	ldr	r2, [r7, #20]
 8006d86:	4313      	orrs	r3, r2
 8006d88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	4a21      	ldr	r2, [pc, #132]	@ (8006e14 <TIM_OC3_SetConfig+0xe0>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d003      	beq.n	8006d9a <TIM_OC3_SetConfig+0x66>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	4a20      	ldr	r2, [pc, #128]	@ (8006e18 <TIM_OC3_SetConfig+0xe4>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d10d      	bne.n	8006db6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006da0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	68db      	ldr	r3, [r3, #12]
 8006da6:	021b      	lsls	r3, r3, #8
 8006da8:	697a      	ldr	r2, [r7, #20]
 8006daa:	4313      	orrs	r3, r2
 8006dac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006db4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	4a16      	ldr	r2, [pc, #88]	@ (8006e14 <TIM_OC3_SetConfig+0xe0>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d003      	beq.n	8006dc6 <TIM_OC3_SetConfig+0x92>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	4a15      	ldr	r2, [pc, #84]	@ (8006e18 <TIM_OC3_SetConfig+0xe4>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d113      	bne.n	8006dee <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006dcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006dd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	695b      	ldr	r3, [r3, #20]
 8006dda:	011b      	lsls	r3, r3, #4
 8006ddc:	693a      	ldr	r2, [r7, #16]
 8006dde:	4313      	orrs	r3, r2
 8006de0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	699b      	ldr	r3, [r3, #24]
 8006de6:	011b      	lsls	r3, r3, #4
 8006de8:	693a      	ldr	r2, [r7, #16]
 8006dea:	4313      	orrs	r3, r2
 8006dec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	693a      	ldr	r2, [r7, #16]
 8006df2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	68fa      	ldr	r2, [r7, #12]
 8006df8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	685a      	ldr	r2, [r3, #4]
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	697a      	ldr	r2, [r7, #20]
 8006e06:	621a      	str	r2, [r3, #32]
}
 8006e08:	bf00      	nop
 8006e0a:	371c      	adds	r7, #28
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bc80      	pop	{r7}
 8006e10:	4770      	bx	lr
 8006e12:	bf00      	nop
 8006e14:	40012c00 	.word	0x40012c00
 8006e18:	40013400 	.word	0x40013400

08006e1c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b087      	sub	sp, #28
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
 8006e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6a1b      	ldr	r3, [r3, #32]
 8006e2a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6a1b      	ldr	r3, [r3, #32]
 8006e30:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	685b      	ldr	r3, [r3, #4]
 8006e3c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	69db      	ldr	r3, [r3, #28]
 8006e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	021b      	lsls	r3, r3, #8
 8006e5a:	68fa      	ldr	r2, [r7, #12]
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006e60:	693b      	ldr	r3, [r7, #16]
 8006e62:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006e66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	689b      	ldr	r3, [r3, #8]
 8006e6c:	031b      	lsls	r3, r3, #12
 8006e6e:	693a      	ldr	r2, [r7, #16]
 8006e70:	4313      	orrs	r3, r2
 8006e72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	4a11      	ldr	r2, [pc, #68]	@ (8006ebc <TIM_OC4_SetConfig+0xa0>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d003      	beq.n	8006e84 <TIM_OC4_SetConfig+0x68>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	4a10      	ldr	r2, [pc, #64]	@ (8006ec0 <TIM_OC4_SetConfig+0xa4>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d109      	bne.n	8006e98 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006e8a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	695b      	ldr	r3, [r3, #20]
 8006e90:	019b      	lsls	r3, r3, #6
 8006e92:	697a      	ldr	r2, [r7, #20]
 8006e94:	4313      	orrs	r3, r2
 8006e96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	697a      	ldr	r2, [r7, #20]
 8006e9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	68fa      	ldr	r2, [r7, #12]
 8006ea2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	685a      	ldr	r2, [r3, #4]
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	693a      	ldr	r2, [r7, #16]
 8006eb0:	621a      	str	r2, [r3, #32]
}
 8006eb2:	bf00      	nop
 8006eb4:	371c      	adds	r7, #28
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bc80      	pop	{r7}
 8006eba:	4770      	bx	lr
 8006ebc:	40012c00 	.word	0x40012c00
 8006ec0:	40013400 	.word	0x40013400

08006ec4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b087      	sub	sp, #28
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	60f8      	str	r0, [r7, #12]
 8006ecc:	60b9      	str	r1, [r7, #8]
 8006ece:	607a      	str	r2, [r7, #4]
 8006ed0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	6a1b      	ldr	r3, [r3, #32]
 8006ed6:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	6a1b      	ldr	r3, [r3, #32]
 8006edc:	f023 0201 	bic.w	r2, r3, #1
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	699b      	ldr	r3, [r3, #24]
 8006ee8:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	4a23      	ldr	r2, [pc, #140]	@ (8006f7c <TIM_TI1_SetConfig+0xb8>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d013      	beq.n	8006f1a <TIM_TI1_SetConfig+0x56>
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	4a22      	ldr	r2, [pc, #136]	@ (8006f80 <TIM_TI1_SetConfig+0xbc>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d00f      	beq.n	8006f1a <TIM_TI1_SetConfig+0x56>
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f00:	d00b      	beq.n	8006f1a <TIM_TI1_SetConfig+0x56>
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	4a1f      	ldr	r2, [pc, #124]	@ (8006f84 <TIM_TI1_SetConfig+0xc0>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d007      	beq.n	8006f1a <TIM_TI1_SetConfig+0x56>
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	4a1e      	ldr	r2, [pc, #120]	@ (8006f88 <TIM_TI1_SetConfig+0xc4>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d003      	beq.n	8006f1a <TIM_TI1_SetConfig+0x56>
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	4a1d      	ldr	r2, [pc, #116]	@ (8006f8c <TIM_TI1_SetConfig+0xc8>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d101      	bne.n	8006f1e <TIM_TI1_SetConfig+0x5a>
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	e000      	b.n	8006f20 <TIM_TI1_SetConfig+0x5c>
 8006f1e:	2300      	movs	r3, #0
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d008      	beq.n	8006f36 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	f023 0303 	bic.w	r3, r3, #3
 8006f2a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006f2c:	697a      	ldr	r2, [r7, #20]
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	4313      	orrs	r3, r2
 8006f32:	617b      	str	r3, [r7, #20]
 8006f34:	e003      	b.n	8006f3e <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	f043 0301 	orr.w	r3, r3, #1
 8006f3c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006f44:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	011b      	lsls	r3, r3, #4
 8006f4a:	b2db      	uxtb	r3, r3
 8006f4c:	697a      	ldr	r2, [r7, #20]
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	f023 030a 	bic.w	r3, r3, #10
 8006f58:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	f003 030a 	and.w	r3, r3, #10
 8006f60:	693a      	ldr	r2, [r7, #16]
 8006f62:	4313      	orrs	r3, r2
 8006f64:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	697a      	ldr	r2, [r7, #20]
 8006f6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	693a      	ldr	r2, [r7, #16]
 8006f70:	621a      	str	r2, [r3, #32]
}
 8006f72:	bf00      	nop
 8006f74:	371c      	adds	r7, #28
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bc80      	pop	{r7}
 8006f7a:	4770      	bx	lr
 8006f7c:	40012c00 	.word	0x40012c00
 8006f80:	40013400 	.word	0x40013400
 8006f84:	40000400 	.word	0x40000400
 8006f88:	40000800 	.word	0x40000800
 8006f8c:	40000c00 	.word	0x40000c00

08006f90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b087      	sub	sp, #28
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	60f8      	str	r0, [r7, #12]
 8006f98:	60b9      	str	r1, [r7, #8]
 8006f9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	6a1b      	ldr	r3, [r3, #32]
 8006fa0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	6a1b      	ldr	r3, [r3, #32]
 8006fa6:	f023 0201 	bic.w	r2, r3, #1
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	699b      	ldr	r3, [r3, #24]
 8006fb2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006fba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	011b      	lsls	r3, r3, #4
 8006fc0:	693a      	ldr	r2, [r7, #16]
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	f023 030a 	bic.w	r3, r3, #10
 8006fcc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006fce:	697a      	ldr	r2, [r7, #20]
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	4313      	orrs	r3, r2
 8006fd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	693a      	ldr	r2, [r7, #16]
 8006fda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	697a      	ldr	r2, [r7, #20]
 8006fe0:	621a      	str	r2, [r3, #32]
}
 8006fe2:	bf00      	nop
 8006fe4:	371c      	adds	r7, #28
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bc80      	pop	{r7}
 8006fea:	4770      	bx	lr

08006fec <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b087      	sub	sp, #28
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	60f8      	str	r0, [r7, #12]
 8006ff4:	60b9      	str	r1, [r7, #8]
 8006ff6:	607a      	str	r2, [r7, #4]
 8006ff8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	6a1b      	ldr	r3, [r3, #32]
 8006ffe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	6a1b      	ldr	r3, [r3, #32]
 8007004:	f023 0210 	bic.w	r2, r3, #16
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	699b      	ldr	r3, [r3, #24]
 8007010:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007018:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	021b      	lsls	r3, r3, #8
 800701e:	693a      	ldr	r2, [r7, #16]
 8007020:	4313      	orrs	r3, r2
 8007022:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800702a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	031b      	lsls	r3, r3, #12
 8007030:	b29b      	uxth	r3, r3
 8007032:	693a      	ldr	r2, [r7, #16]
 8007034:	4313      	orrs	r3, r2
 8007036:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800703e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	011b      	lsls	r3, r3, #4
 8007044:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8007048:	697a      	ldr	r2, [r7, #20]
 800704a:	4313      	orrs	r3, r2
 800704c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	693a      	ldr	r2, [r7, #16]
 8007052:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	697a      	ldr	r2, [r7, #20]
 8007058:	621a      	str	r2, [r3, #32]
}
 800705a:	bf00      	nop
 800705c:	371c      	adds	r7, #28
 800705e:	46bd      	mov	sp, r7
 8007060:	bc80      	pop	{r7}
 8007062:	4770      	bx	lr

08007064 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007064:	b480      	push	{r7}
 8007066:	b087      	sub	sp, #28
 8007068:	af00      	add	r7, sp, #0
 800706a:	60f8      	str	r0, [r7, #12]
 800706c:	60b9      	str	r1, [r7, #8]
 800706e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	6a1b      	ldr	r3, [r3, #32]
 8007074:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	6a1b      	ldr	r3, [r3, #32]
 800707a:	f023 0210 	bic.w	r2, r3, #16
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	699b      	ldr	r3, [r3, #24]
 8007086:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800708e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	031b      	lsls	r3, r3, #12
 8007094:	693a      	ldr	r2, [r7, #16]
 8007096:	4313      	orrs	r3, r2
 8007098:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80070a0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	011b      	lsls	r3, r3, #4
 80070a6:	697a      	ldr	r2, [r7, #20]
 80070a8:	4313      	orrs	r3, r2
 80070aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	693a      	ldr	r2, [r7, #16]
 80070b0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	697a      	ldr	r2, [r7, #20]
 80070b6:	621a      	str	r2, [r3, #32]
}
 80070b8:	bf00      	nop
 80070ba:	371c      	adds	r7, #28
 80070bc:	46bd      	mov	sp, r7
 80070be:	bc80      	pop	{r7}
 80070c0:	4770      	bx	lr

080070c2 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80070c2:	b480      	push	{r7}
 80070c4:	b087      	sub	sp, #28
 80070c6:	af00      	add	r7, sp, #0
 80070c8:	60f8      	str	r0, [r7, #12]
 80070ca:	60b9      	str	r1, [r7, #8]
 80070cc:	607a      	str	r2, [r7, #4]
 80070ce:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	6a1b      	ldr	r3, [r3, #32]
 80070d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	6a1b      	ldr	r3, [r3, #32]
 80070da:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	69db      	ldr	r3, [r3, #28]
 80070e6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	f023 0303 	bic.w	r3, r3, #3
 80070ee:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80070f0:	693a      	ldr	r2, [r7, #16]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	4313      	orrs	r3, r2
 80070f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80070fe:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	011b      	lsls	r3, r3, #4
 8007104:	b2db      	uxtb	r3, r3
 8007106:	693a      	ldr	r2, [r7, #16]
 8007108:	4313      	orrs	r3, r2
 800710a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007112:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	021b      	lsls	r3, r3, #8
 8007118:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800711c:	697a      	ldr	r2, [r7, #20]
 800711e:	4313      	orrs	r3, r2
 8007120:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	693a      	ldr	r2, [r7, #16]
 8007126:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	697a      	ldr	r2, [r7, #20]
 800712c:	621a      	str	r2, [r3, #32]
}
 800712e:	bf00      	nop
 8007130:	371c      	adds	r7, #28
 8007132:	46bd      	mov	sp, r7
 8007134:	bc80      	pop	{r7}
 8007136:	4770      	bx	lr

08007138 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007138:	b480      	push	{r7}
 800713a:	b087      	sub	sp, #28
 800713c:	af00      	add	r7, sp, #0
 800713e:	60f8      	str	r0, [r7, #12]
 8007140:	60b9      	str	r1, [r7, #8]
 8007142:	607a      	str	r2, [r7, #4]
 8007144:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	6a1b      	ldr	r3, [r3, #32]
 800714a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	6a1b      	ldr	r3, [r3, #32]
 8007150:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	69db      	ldr	r3, [r3, #28]
 800715c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007164:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	021b      	lsls	r3, r3, #8
 800716a:	693a      	ldr	r2, [r7, #16]
 800716c:	4313      	orrs	r3, r2
 800716e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007176:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	031b      	lsls	r3, r3, #12
 800717c:	b29b      	uxth	r3, r3
 800717e:	693a      	ldr	r2, [r7, #16]
 8007180:	4313      	orrs	r3, r2
 8007182:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800718a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	031b      	lsls	r3, r3, #12
 8007190:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007194:	697a      	ldr	r2, [r7, #20]
 8007196:	4313      	orrs	r3, r2
 8007198:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	693a      	ldr	r2, [r7, #16]
 800719e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	697a      	ldr	r2, [r7, #20]
 80071a4:	621a      	str	r2, [r3, #32]
}
 80071a6:	bf00      	nop
 80071a8:	371c      	adds	r7, #28
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bc80      	pop	{r7}
 80071ae:	4770      	bx	lr

080071b0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80071b0:	b480      	push	{r7}
 80071b2:	b085      	sub	sp, #20
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
 80071b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	689b      	ldr	r3, [r3, #8]
 80071be:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071c6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80071c8:	683a      	ldr	r2, [r7, #0]
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	4313      	orrs	r3, r2
 80071ce:	f043 0307 	orr.w	r3, r3, #7
 80071d2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	68fa      	ldr	r2, [r7, #12]
 80071d8:	609a      	str	r2, [r3, #8]
}
 80071da:	bf00      	nop
 80071dc:	3714      	adds	r7, #20
 80071de:	46bd      	mov	sp, r7
 80071e0:	bc80      	pop	{r7}
 80071e2:	4770      	bx	lr

080071e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80071e4:	b480      	push	{r7}
 80071e6:	b087      	sub	sp, #28
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	60f8      	str	r0, [r7, #12]
 80071ec:	60b9      	str	r1, [r7, #8]
 80071ee:	607a      	str	r2, [r7, #4]
 80071f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	689b      	ldr	r3, [r3, #8]
 80071f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80071fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	021a      	lsls	r2, r3, #8
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	431a      	orrs	r2, r3
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	4313      	orrs	r3, r2
 800720c:	697a      	ldr	r2, [r7, #20]
 800720e:	4313      	orrs	r3, r2
 8007210:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	697a      	ldr	r2, [r7, #20]
 8007216:	609a      	str	r2, [r3, #8]
}
 8007218:	bf00      	nop
 800721a:	371c      	adds	r7, #28
 800721c:	46bd      	mov	sp, r7
 800721e:	bc80      	pop	{r7}
 8007220:	4770      	bx	lr

08007222 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007222:	b480      	push	{r7}
 8007224:	b087      	sub	sp, #28
 8007226:	af00      	add	r7, sp, #0
 8007228:	60f8      	str	r0, [r7, #12]
 800722a:	60b9      	str	r1, [r7, #8]
 800722c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	f003 031f 	and.w	r3, r3, #31
 8007234:	2201      	movs	r2, #1
 8007236:	fa02 f303 	lsl.w	r3, r2, r3
 800723a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	6a1a      	ldr	r2, [r3, #32]
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	43db      	mvns	r3, r3
 8007244:	401a      	ands	r2, r3
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	6a1a      	ldr	r2, [r3, #32]
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	f003 031f 	and.w	r3, r3, #31
 8007254:	6879      	ldr	r1, [r7, #4]
 8007256:	fa01 f303 	lsl.w	r3, r1, r3
 800725a:	431a      	orrs	r2, r3
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	621a      	str	r2, [r3, #32]
}
 8007260:	bf00      	nop
 8007262:	371c      	adds	r7, #28
 8007264:	46bd      	mov	sp, r7
 8007266:	bc80      	pop	{r7}
 8007268:	4770      	bx	lr
	...

0800726c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800726c:	b480      	push	{r7}
 800726e:	b085      	sub	sp, #20
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
 8007274:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800727c:	2b01      	cmp	r3, #1
 800727e:	d101      	bne.n	8007284 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007280:	2302      	movs	r3, #2
 8007282:	e050      	b.n	8007326 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2201      	movs	r2, #1
 8007288:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2202      	movs	r2, #2
 8007290:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	689b      	ldr	r3, [r3, #8]
 80072a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	68fa      	ldr	r2, [r7, #12]
 80072b2:	4313      	orrs	r3, r2
 80072b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	68fa      	ldr	r2, [r7, #12]
 80072bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4a1b      	ldr	r2, [pc, #108]	@ (8007330 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d018      	beq.n	80072fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a19      	ldr	r2, [pc, #100]	@ (8007334 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d013      	beq.n	80072fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072da:	d00e      	beq.n	80072fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a15      	ldr	r2, [pc, #84]	@ (8007338 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d009      	beq.n	80072fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4a14      	ldr	r2, [pc, #80]	@ (800733c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d004      	beq.n	80072fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4a12      	ldr	r2, [pc, #72]	@ (8007340 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d10c      	bne.n	8007314 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007300:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	685b      	ldr	r3, [r3, #4]
 8007306:	68ba      	ldr	r2, [r7, #8]
 8007308:	4313      	orrs	r3, r2
 800730a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	68ba      	ldr	r2, [r7, #8]
 8007312:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2201      	movs	r2, #1
 8007318:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2200      	movs	r2, #0
 8007320:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007324:	2300      	movs	r3, #0
}
 8007326:	4618      	mov	r0, r3
 8007328:	3714      	adds	r7, #20
 800732a:	46bd      	mov	sp, r7
 800732c:	bc80      	pop	{r7}
 800732e:	4770      	bx	lr
 8007330:	40012c00 	.word	0x40012c00
 8007334:	40013400 	.word	0x40013400
 8007338:	40000400 	.word	0x40000400
 800733c:	40000800 	.word	0x40000800
 8007340:	40000c00 	.word	0x40000c00

08007344 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007344:	b480      	push	{r7}
 8007346:	b085      	sub	sp, #20
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
 800734c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800734e:	2300      	movs	r3, #0
 8007350:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007358:	2b01      	cmp	r3, #1
 800735a:	d101      	bne.n	8007360 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800735c:	2302      	movs	r3, #2
 800735e:	e03d      	b.n	80073dc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2201      	movs	r2, #1
 8007364:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	68db      	ldr	r3, [r3, #12]
 8007372:	4313      	orrs	r3, r2
 8007374:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	689b      	ldr	r3, [r3, #8]
 8007380:	4313      	orrs	r3, r2
 8007382:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	4313      	orrs	r3, r2
 8007390:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4313      	orrs	r3, r2
 800739e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	691b      	ldr	r3, [r3, #16]
 80073aa:	4313      	orrs	r3, r2
 80073ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	695b      	ldr	r3, [r3, #20]
 80073b8:	4313      	orrs	r3, r2
 80073ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	69db      	ldr	r3, [r3, #28]
 80073c6:	4313      	orrs	r3, r2
 80073c8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	68fa      	ldr	r2, [r7, #12]
 80073d0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2200      	movs	r2, #0
 80073d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80073da:	2300      	movs	r3, #0
}
 80073dc:	4618      	mov	r0, r3
 80073de:	3714      	adds	r7, #20
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bc80      	pop	{r7}
 80073e4:	4770      	bx	lr

080073e6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80073e6:	b580      	push	{r7, lr}
 80073e8:	b082      	sub	sp, #8
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d101      	bne.n	80073f8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80073f4:	2301      	movs	r3, #1
 80073f6:	e042      	b.n	800747e <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80073fe:	b2db      	uxtb	r3, r3
 8007400:	2b00      	cmp	r3, #0
 8007402:	d106      	bne.n	8007412 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2200      	movs	r2, #0
 8007408:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f7fd fa77 	bl	8004900 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2224      	movs	r2, #36	@ 0x24
 8007416:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	68da      	ldr	r2, [r3, #12]
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007428:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	f000 ff30 	bl	8008290 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	691a      	ldr	r2, [r3, #16]
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800743e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	695a      	ldr	r2, [r3, #20]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800744e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	68da      	ldr	r2, [r3, #12]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800745e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2200      	movs	r2, #0
 8007464:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2220      	movs	r2, #32
 800746a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2220      	movs	r2, #32
 8007472:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2200      	movs	r2, #0
 800747a:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800747c:	2300      	movs	r3, #0
}
 800747e:	4618      	mov	r0, r3
 8007480:	3708      	adds	r7, #8
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}
	...

08007488 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b08c      	sub	sp, #48	@ 0x30
 800748c:	af00      	add	r7, sp, #0
 800748e:	60f8      	str	r0, [r7, #12]
 8007490:	60b9      	str	r1, [r7, #8]
 8007492:	4613      	mov	r3, r2
 8007494:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800749c:	b2db      	uxtb	r3, r3
 800749e:	2b20      	cmp	r3, #32
 80074a0:	d156      	bne.n	8007550 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d002      	beq.n	80074ae <HAL_UART_Transmit_DMA+0x26>
 80074a8:	88fb      	ldrh	r3, [r7, #6]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d101      	bne.n	80074b2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80074ae:	2301      	movs	r3, #1
 80074b0:	e04f      	b.n	8007552 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 80074b2:	68ba      	ldr	r2, [r7, #8]
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	88fa      	ldrh	r2, [r7, #6]
 80074bc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	88fa      	ldrh	r2, [r7, #6]
 80074c2:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	2200      	movs	r2, #0
 80074c8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	2221      	movs	r2, #33	@ 0x21
 80074ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074d6:	4a21      	ldr	r2, [pc, #132]	@ (800755c <HAL_UART_Transmit_DMA+0xd4>)
 80074d8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074de:	4a20      	ldr	r2, [pc, #128]	@ (8007560 <HAL_UART_Transmit_DMA+0xd8>)
 80074e0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074e6:	4a1f      	ldr	r2, [pc, #124]	@ (8007564 <HAL_UART_Transmit_DMA+0xdc>)
 80074e8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074ee:	2200      	movs	r2, #0
 80074f0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 80074f2:	f107 0308 	add.w	r3, r7, #8
 80074f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80074fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074fe:	6819      	ldr	r1, [r3, #0]
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	3304      	adds	r3, #4
 8007506:	461a      	mov	r2, r3
 8007508:	88fb      	ldrh	r3, [r7, #6]
 800750a:	f7fd fd71 	bl	8004ff0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007516:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	3314      	adds	r3, #20
 800751e:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007520:	69bb      	ldr	r3, [r7, #24]
 8007522:	e853 3f00 	ldrex	r3, [r3]
 8007526:	617b      	str	r3, [r7, #20]
   return(result);
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800752e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	3314      	adds	r3, #20
 8007536:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007538:	627a      	str	r2, [r7, #36]	@ 0x24
 800753a:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800753c:	6a39      	ldr	r1, [r7, #32]
 800753e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007540:	e841 2300 	strex	r3, r2, [r1]
 8007544:	61fb      	str	r3, [r7, #28]
   return(result);
 8007546:	69fb      	ldr	r3, [r7, #28]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d1e5      	bne.n	8007518 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 800754c:	2300      	movs	r3, #0
 800754e:	e000      	b.n	8007552 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8007550:	2302      	movs	r3, #2
  }
}
 8007552:	4618      	mov	r0, r3
 8007554:	3730      	adds	r7, #48	@ 0x30
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}
 800755a:	bf00      	nop
 800755c:	08007b25 	.word	0x08007b25
 8007560:	08007bbf 	.word	0x08007bbf
 8007564:	08007d43 	.word	0x08007d43

08007568 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b084      	sub	sp, #16
 800756c:	af00      	add	r7, sp, #0
 800756e:	60f8      	str	r0, [r7, #12]
 8007570:	60b9      	str	r1, [r7, #8]
 8007572:	4613      	mov	r3, r2
 8007574:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800757c:	b2db      	uxtb	r3, r3
 800757e:	2b20      	cmp	r3, #32
 8007580:	d112      	bne.n	80075a8 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d002      	beq.n	800758e <HAL_UART_Receive_DMA+0x26>
 8007588:	88fb      	ldrh	r3, [r7, #6]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d101      	bne.n	8007592 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800758e:	2301      	movs	r3, #1
 8007590:	e00b      	b.n	80075aa <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	2200      	movs	r2, #0
 8007596:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007598:	88fb      	ldrh	r3, [r7, #6]
 800759a:	461a      	mov	r2, r3
 800759c:	68b9      	ldr	r1, [r7, #8]
 800759e:	68f8      	ldr	r0, [r7, #12]
 80075a0:	f000 fc1a 	bl	8007dd8 <UART_Start_Receive_DMA>
 80075a4:	4603      	mov	r3, r0
 80075a6:	e000      	b.n	80075aa <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80075a8:	2302      	movs	r3, #2
  }
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	3710      	adds	r7, #16
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}
	...

080075b4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b0ba      	sub	sp, #232	@ 0xe8
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	68db      	ldr	r3, [r3, #12]
 80075cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	695b      	ldr	r3, [r3, #20]
 80075d6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80075da:	2300      	movs	r3, #0
 80075dc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80075e0:	2300      	movs	r3, #0
 80075e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80075e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075ea:	f003 030f 	and.w	r3, r3, #15
 80075ee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80075f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d10f      	bne.n	800761a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80075fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075fe:	f003 0320 	and.w	r3, r3, #32
 8007602:	2b00      	cmp	r3, #0
 8007604:	d009      	beq.n	800761a <HAL_UART_IRQHandler+0x66>
 8007606:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800760a:	f003 0320 	and.w	r3, r3, #32
 800760e:	2b00      	cmp	r3, #0
 8007610:	d003      	beq.n	800761a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f000 fd7e 	bl	8008114 <UART_Receive_IT>
      return;
 8007618:	e25b      	b.n	8007ad2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800761a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800761e:	2b00      	cmp	r3, #0
 8007620:	f000 80de 	beq.w	80077e0 <HAL_UART_IRQHandler+0x22c>
 8007624:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007628:	f003 0301 	and.w	r3, r3, #1
 800762c:	2b00      	cmp	r3, #0
 800762e:	d106      	bne.n	800763e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007630:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007634:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007638:	2b00      	cmp	r3, #0
 800763a:	f000 80d1 	beq.w	80077e0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800763e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007642:	f003 0301 	and.w	r3, r3, #1
 8007646:	2b00      	cmp	r3, #0
 8007648:	d00b      	beq.n	8007662 <HAL_UART_IRQHandler+0xae>
 800764a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800764e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007652:	2b00      	cmp	r3, #0
 8007654:	d005      	beq.n	8007662 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800765a:	f043 0201 	orr.w	r2, r3, #1
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007662:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007666:	f003 0304 	and.w	r3, r3, #4
 800766a:	2b00      	cmp	r3, #0
 800766c:	d00b      	beq.n	8007686 <HAL_UART_IRQHandler+0xd2>
 800766e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007672:	f003 0301 	and.w	r3, r3, #1
 8007676:	2b00      	cmp	r3, #0
 8007678:	d005      	beq.n	8007686 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800767e:	f043 0202 	orr.w	r2, r3, #2
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007686:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800768a:	f003 0302 	and.w	r3, r3, #2
 800768e:	2b00      	cmp	r3, #0
 8007690:	d00b      	beq.n	80076aa <HAL_UART_IRQHandler+0xf6>
 8007692:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007696:	f003 0301 	and.w	r3, r3, #1
 800769a:	2b00      	cmp	r3, #0
 800769c:	d005      	beq.n	80076aa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076a2:	f043 0204 	orr.w	r2, r3, #4
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80076aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80076ae:	f003 0308 	and.w	r3, r3, #8
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d011      	beq.n	80076da <HAL_UART_IRQHandler+0x126>
 80076b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80076ba:	f003 0320 	and.w	r3, r3, #32
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d105      	bne.n	80076ce <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80076c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80076c6:	f003 0301 	and.w	r3, r3, #1
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d005      	beq.n	80076da <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076d2:	f043 0208 	orr.w	r2, r3, #8
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076de:	2b00      	cmp	r3, #0
 80076e0:	f000 81f2 	beq.w	8007ac8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80076e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80076e8:	f003 0320 	and.w	r3, r3, #32
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d008      	beq.n	8007702 <HAL_UART_IRQHandler+0x14e>
 80076f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80076f4:	f003 0320 	and.w	r3, r3, #32
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d002      	beq.n	8007702 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f000 fd09 	bl	8008114 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	695b      	ldr	r3, [r3, #20]
 8007708:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800770c:	2b00      	cmp	r3, #0
 800770e:	bf14      	ite	ne
 8007710:	2301      	movne	r3, #1
 8007712:	2300      	moveq	r3, #0
 8007714:	b2db      	uxtb	r3, r3
 8007716:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800771e:	f003 0308 	and.w	r3, r3, #8
 8007722:	2b00      	cmp	r3, #0
 8007724:	d103      	bne.n	800772e <HAL_UART_IRQHandler+0x17a>
 8007726:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800772a:	2b00      	cmp	r3, #0
 800772c:	d04f      	beq.n	80077ce <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f000 fc13 	bl	8007f5a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	695b      	ldr	r3, [r3, #20]
 800773a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800773e:	2b00      	cmp	r3, #0
 8007740:	d041      	beq.n	80077c6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	3314      	adds	r3, #20
 8007748:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800774c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007750:	e853 3f00 	ldrex	r3, [r3]
 8007754:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007758:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800775c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007760:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	3314      	adds	r3, #20
 800776a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800776e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007772:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007776:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800777a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800777e:	e841 2300 	strex	r3, r2, [r1]
 8007782:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007786:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800778a:	2b00      	cmp	r3, #0
 800778c:	d1d9      	bne.n	8007742 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007792:	2b00      	cmp	r3, #0
 8007794:	d013      	beq.n	80077be <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800779a:	4a7e      	ldr	r2, [pc, #504]	@ (8007994 <HAL_UART_IRQHandler+0x3e0>)
 800779c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077a2:	4618      	mov	r0, r3
 80077a4:	f7fd fcc0 	bl	8005128 <HAL_DMA_Abort_IT>
 80077a8:	4603      	mov	r3, r0
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d016      	beq.n	80077dc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077b4:	687a      	ldr	r2, [r7, #4]
 80077b6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80077b8:	4610      	mov	r0, r2
 80077ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077bc:	e00e      	b.n	80077dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f000 f99c 	bl	8007afc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077c4:	e00a      	b.n	80077dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f000 f998 	bl	8007afc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077cc:	e006      	b.n	80077dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f000 f994 	bl	8007afc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2200      	movs	r2, #0
 80077d8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80077da:	e175      	b.n	8007ac8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077dc:	bf00      	nop
    return;
 80077de:	e173      	b.n	8007ac8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077e4:	2b01      	cmp	r3, #1
 80077e6:	f040 814f 	bne.w	8007a88 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80077ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077ee:	f003 0310 	and.w	r3, r3, #16
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	f000 8148 	beq.w	8007a88 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80077f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80077fc:	f003 0310 	and.w	r3, r3, #16
 8007800:	2b00      	cmp	r3, #0
 8007802:	f000 8141 	beq.w	8007a88 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007806:	2300      	movs	r3, #0
 8007808:	60bb      	str	r3, [r7, #8]
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	60bb      	str	r3, [r7, #8]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	685b      	ldr	r3, [r3, #4]
 8007818:	60bb      	str	r3, [r7, #8]
 800781a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	695b      	ldr	r3, [r3, #20]
 8007822:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007826:	2b00      	cmp	r3, #0
 8007828:	f000 80b6 	beq.w	8007998 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	685b      	ldr	r3, [r3, #4]
 8007834:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007838:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800783c:	2b00      	cmp	r3, #0
 800783e:	f000 8145 	beq.w	8007acc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007846:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800784a:	429a      	cmp	r2, r3
 800784c:	f080 813e 	bcs.w	8007acc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007856:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800785c:	699b      	ldr	r3, [r3, #24]
 800785e:	2b20      	cmp	r3, #32
 8007860:	f000 8088 	beq.w	8007974 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	330c      	adds	r3, #12
 800786a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800786e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007872:	e853 3f00 	ldrex	r3, [r3]
 8007876:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800787a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800787e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007882:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	330c      	adds	r3, #12
 800788c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007890:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007894:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007898:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800789c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80078a0:	e841 2300 	strex	r3, r2, [r1]
 80078a4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80078a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d1d9      	bne.n	8007864 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	3314      	adds	r3, #20
 80078b6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078b8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80078ba:	e853 3f00 	ldrex	r3, [r3]
 80078be:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80078c0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80078c2:	f023 0301 	bic.w	r3, r3, #1
 80078c6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	3314      	adds	r3, #20
 80078d0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80078d4:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80078d8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078da:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80078dc:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80078e0:	e841 2300 	strex	r3, r2, [r1]
 80078e4:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80078e6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d1e1      	bne.n	80078b0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	3314      	adds	r3, #20
 80078f2:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078f4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80078f6:	e853 3f00 	ldrex	r3, [r3]
 80078fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80078fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80078fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007902:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	3314      	adds	r3, #20
 800790c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007910:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007912:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007914:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007916:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007918:	e841 2300 	strex	r3, r2, [r1]
 800791c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800791e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007920:	2b00      	cmp	r3, #0
 8007922:	d1e3      	bne.n	80078ec <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2220      	movs	r2, #32
 8007928:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2200      	movs	r2, #0
 8007930:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	330c      	adds	r3, #12
 8007938:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800793a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800793c:	e853 3f00 	ldrex	r3, [r3]
 8007940:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007942:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007944:	f023 0310 	bic.w	r3, r3, #16
 8007948:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	330c      	adds	r3, #12
 8007952:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007956:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007958:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800795a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800795c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800795e:	e841 2300 	strex	r3, r2, [r1]
 8007962:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007964:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007966:	2b00      	cmp	r3, #0
 8007968:	d1e3      	bne.n	8007932 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800796e:	4618      	mov	r0, r3
 8007970:	f7fd fb9e 	bl	80050b0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2202      	movs	r2, #2
 8007978:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007982:	b29b      	uxth	r3, r3
 8007984:	1ad3      	subs	r3, r2, r3
 8007986:	b29b      	uxth	r3, r3
 8007988:	4619      	mov	r1, r3
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f000 f8bf 	bl	8007b0e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007990:	e09c      	b.n	8007acc <HAL_UART_IRQHandler+0x518>
 8007992:	bf00      	nop
 8007994:	0800801f 	.word	0x0800801f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80079a0:	b29b      	uxth	r3, r3
 80079a2:	1ad3      	subs	r3, r2, r3
 80079a4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80079ac:	b29b      	uxth	r3, r3
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	f000 808e 	beq.w	8007ad0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80079b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	f000 8089 	beq.w	8007ad0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	330c      	adds	r3, #12
 80079c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079c8:	e853 3f00 	ldrex	r3, [r3]
 80079cc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80079ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80079d4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	330c      	adds	r3, #12
 80079de:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80079e2:	647a      	str	r2, [r7, #68]	@ 0x44
 80079e4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079e6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80079e8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80079ea:	e841 2300 	strex	r3, r2, [r1]
 80079ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80079f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d1e3      	bne.n	80079be <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	3314      	adds	r3, #20
 80079fc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a00:	e853 3f00 	ldrex	r3, [r3]
 8007a04:	623b      	str	r3, [r7, #32]
   return(result);
 8007a06:	6a3b      	ldr	r3, [r7, #32]
 8007a08:	f023 0301 	bic.w	r3, r3, #1
 8007a0c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	3314      	adds	r3, #20
 8007a16:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007a1a:	633a      	str	r2, [r7, #48]	@ 0x30
 8007a1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a1e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007a20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a22:	e841 2300 	strex	r3, r2, [r1]
 8007a26:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007a28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d1e3      	bne.n	80079f6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2220      	movs	r2, #32
 8007a32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	330c      	adds	r3, #12
 8007a42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	e853 3f00 	ldrex	r3, [r3]
 8007a4a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	f023 0310 	bic.w	r3, r3, #16
 8007a52:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	330c      	adds	r3, #12
 8007a5c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007a60:	61fa      	str	r2, [r7, #28]
 8007a62:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a64:	69b9      	ldr	r1, [r7, #24]
 8007a66:	69fa      	ldr	r2, [r7, #28]
 8007a68:	e841 2300 	strex	r3, r2, [r1]
 8007a6c:	617b      	str	r3, [r7, #20]
   return(result);
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d1e3      	bne.n	8007a3c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2202      	movs	r2, #2
 8007a78:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007a7a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007a7e:	4619      	mov	r1, r3
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f000 f844 	bl	8007b0e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007a86:	e023      	b.n	8007ad0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007a88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d009      	beq.n	8007aa8 <HAL_UART_IRQHandler+0x4f4>
 8007a94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d003      	beq.n	8007aa8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f000 fad0 	bl	8008046 <UART_Transmit_IT>
    return;
 8007aa6:	e014      	b.n	8007ad2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007aa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007aac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d00e      	beq.n	8007ad2 <HAL_UART_IRQHandler+0x51e>
 8007ab4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ab8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d008      	beq.n	8007ad2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f000 fb0f 	bl	80080e4 <UART_EndTransmit_IT>
    return;
 8007ac6:	e004      	b.n	8007ad2 <HAL_UART_IRQHandler+0x51e>
    return;
 8007ac8:	bf00      	nop
 8007aca:	e002      	b.n	8007ad2 <HAL_UART_IRQHandler+0x51e>
      return;
 8007acc:	bf00      	nop
 8007ace:	e000      	b.n	8007ad2 <HAL_UART_IRQHandler+0x51e>
      return;
 8007ad0:	bf00      	nop
  }
}
 8007ad2:	37e8      	adds	r7, #232	@ 0xe8
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}

08007ad8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b083      	sub	sp, #12
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007ae0:	bf00      	nop
 8007ae2:	370c      	adds	r7, #12
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bc80      	pop	{r7}
 8007ae8:	4770      	bx	lr

08007aea <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007aea:	b480      	push	{r7}
 8007aec:	b083      	sub	sp, #12
 8007aee:	af00      	add	r7, sp, #0
 8007af0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007af2:	bf00      	nop
 8007af4:	370c      	adds	r7, #12
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bc80      	pop	{r7}
 8007afa:	4770      	bx	lr

08007afc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b083      	sub	sp, #12
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007b04:	bf00      	nop
 8007b06:	370c      	adds	r7, #12
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bc80      	pop	{r7}
 8007b0c:	4770      	bx	lr

08007b0e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007b0e:	b480      	push	{r7}
 8007b10:	b083      	sub	sp, #12
 8007b12:	af00      	add	r7, sp, #0
 8007b14:	6078      	str	r0, [r7, #4]
 8007b16:	460b      	mov	r3, r1
 8007b18:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007b1a:	bf00      	nop
 8007b1c:	370c      	adds	r7, #12
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bc80      	pop	{r7}
 8007b22:	4770      	bx	lr

08007b24 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b090      	sub	sp, #64	@ 0x40
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b30:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f003 0320 	and.w	r3, r3, #32
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d137      	bne.n	8007bb0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8007b40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b42:	2200      	movs	r2, #0
 8007b44:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007b46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	3314      	adds	r3, #20
 8007b4c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b50:	e853 3f00 	ldrex	r3, [r3]
 8007b54:	623b      	str	r3, [r7, #32]
   return(result);
 8007b56:	6a3b      	ldr	r3, [r7, #32]
 8007b58:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007b5c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007b5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	3314      	adds	r3, #20
 8007b64:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007b66:	633a      	str	r2, [r7, #48]	@ 0x30
 8007b68:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b6a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007b6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b6e:	e841 2300 	strex	r3, r2, [r1]
 8007b72:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007b74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d1e5      	bne.n	8007b46 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007b7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	330c      	adds	r3, #12
 8007b80:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b82:	693b      	ldr	r3, [r7, #16]
 8007b84:	e853 3f00 	ldrex	r3, [r3]
 8007b88:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b90:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	330c      	adds	r3, #12
 8007b98:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007b9a:	61fa      	str	r2, [r7, #28]
 8007b9c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b9e:	69b9      	ldr	r1, [r7, #24]
 8007ba0:	69fa      	ldr	r2, [r7, #28]
 8007ba2:	e841 2300 	strex	r3, r2, [r1]
 8007ba6:	617b      	str	r3, [r7, #20]
   return(result);
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d1e5      	bne.n	8007b7a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007bae:	e002      	b.n	8007bb6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007bb0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8007bb2:	f7fb fc29 	bl	8003408 <HAL_UART_TxCpltCallback>
}
 8007bb6:	bf00      	nop
 8007bb8:	3740      	adds	r7, #64	@ 0x40
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}

08007bbe <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007bbe:	b580      	push	{r7, lr}
 8007bc0:	b084      	sub	sp, #16
 8007bc2:	af00      	add	r7, sp, #0
 8007bc4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bca:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007bcc:	68f8      	ldr	r0, [r7, #12]
 8007bce:	f7ff ff83 	bl	8007ad8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007bd2:	bf00      	nop
 8007bd4:	3710      	adds	r7, #16
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}

08007bda <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007bda:	b580      	push	{r7, lr}
 8007bdc:	b09c      	sub	sp, #112	@ 0x70
 8007bde:	af00      	add	r7, sp, #0
 8007be0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007be6:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f003 0320 	and.w	r3, r3, #32
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d172      	bne.n	8007cdc <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007bf6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007bfc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	330c      	adds	r3, #12
 8007c02:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c06:	e853 3f00 	ldrex	r3, [r3]
 8007c0a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007c0c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007c0e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007c12:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007c14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	330c      	adds	r3, #12
 8007c1a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007c1c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007c1e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c20:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007c22:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007c24:	e841 2300 	strex	r3, r2, [r1]
 8007c28:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007c2a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d1e5      	bne.n	8007bfc <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	3314      	adds	r3, #20
 8007c36:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c3a:	e853 3f00 	ldrex	r3, [r3]
 8007c3e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007c40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c42:	f023 0301 	bic.w	r3, r3, #1
 8007c46:	667b      	str	r3, [r7, #100]	@ 0x64
 8007c48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	3314      	adds	r3, #20
 8007c4e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007c50:	647a      	str	r2, [r7, #68]	@ 0x44
 8007c52:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c54:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007c56:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007c58:	e841 2300 	strex	r3, r2, [r1]
 8007c5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007c5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d1e5      	bne.n	8007c30 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c64:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	3314      	adds	r3, #20
 8007c6a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c6e:	e853 3f00 	ldrex	r3, [r3]
 8007c72:	623b      	str	r3, [r7, #32]
   return(result);
 8007c74:	6a3b      	ldr	r3, [r7, #32]
 8007c76:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c7a:	663b      	str	r3, [r7, #96]	@ 0x60
 8007c7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	3314      	adds	r3, #20
 8007c82:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007c84:	633a      	str	r2, [r7, #48]	@ 0x30
 8007c86:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c88:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007c8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c8c:	e841 2300 	strex	r3, r2, [r1]
 8007c90:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007c92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d1e5      	bne.n	8007c64 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007c98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007c9a:	2220      	movs	r2, #32
 8007c9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ca0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007ca2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ca4:	2b01      	cmp	r3, #1
 8007ca6:	d119      	bne.n	8007cdc <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ca8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	330c      	adds	r3, #12
 8007cae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cb0:	693b      	ldr	r3, [r7, #16]
 8007cb2:	e853 3f00 	ldrex	r3, [r3]
 8007cb6:	60fb      	str	r3, [r7, #12]
   return(result);
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	f023 0310 	bic.w	r3, r3, #16
 8007cbe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007cc0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	330c      	adds	r3, #12
 8007cc6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007cc8:	61fa      	str	r2, [r7, #28]
 8007cca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ccc:	69b9      	ldr	r1, [r7, #24]
 8007cce:	69fa      	ldr	r2, [r7, #28]
 8007cd0:	e841 2300 	strex	r3, r2, [r1]
 8007cd4:	617b      	str	r3, [r7, #20]
   return(result);
 8007cd6:	697b      	ldr	r3, [r7, #20]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d1e5      	bne.n	8007ca8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007cdc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007cde:	2200      	movs	r2, #0
 8007ce0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ce2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ce6:	2b01      	cmp	r3, #1
 8007ce8:	d106      	bne.n	8007cf8 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007cea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007cec:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007cee:	4619      	mov	r1, r3
 8007cf0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007cf2:	f7ff ff0c 	bl	8007b0e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007cf6:	e002      	b.n	8007cfe <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8007cf8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007cfa:	f7fb fb93 	bl	8003424 <HAL_UART_RxCpltCallback>
}
 8007cfe:	bf00      	nop
 8007d00:	3770      	adds	r7, #112	@ 0x70
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}

08007d06 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007d06:	b580      	push	{r7, lr}
 8007d08:	b084      	sub	sp, #16
 8007d0a:	af00      	add	r7, sp, #0
 8007d0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d12:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	2201      	movs	r2, #1
 8007d18:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d1e:	2b01      	cmp	r3, #1
 8007d20:	d108      	bne.n	8007d34 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007d26:	085b      	lsrs	r3, r3, #1
 8007d28:	b29b      	uxth	r3, r3
 8007d2a:	4619      	mov	r1, r3
 8007d2c:	68f8      	ldr	r0, [r7, #12]
 8007d2e:	f7ff feee 	bl	8007b0e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007d32:	e002      	b.n	8007d3a <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8007d34:	68f8      	ldr	r0, [r7, #12]
 8007d36:	f7ff fed8 	bl	8007aea <HAL_UART_RxHalfCpltCallback>
}
 8007d3a:	bf00      	nop
 8007d3c:	3710      	adds	r7, #16
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}

08007d42 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007d42:	b580      	push	{r7, lr}
 8007d44:	b084      	sub	sp, #16
 8007d46:	af00      	add	r7, sp, #0
 8007d48:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d52:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	695b      	ldr	r3, [r3, #20]
 8007d5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	bf14      	ite	ne
 8007d62:	2301      	movne	r3, #1
 8007d64:	2300      	moveq	r3, #0
 8007d66:	b2db      	uxtb	r3, r3
 8007d68:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007d70:	b2db      	uxtb	r3, r3
 8007d72:	2b21      	cmp	r3, #33	@ 0x21
 8007d74:	d108      	bne.n	8007d88 <UART_DMAError+0x46>
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d005      	beq.n	8007d88 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8007d82:	68b8      	ldr	r0, [r7, #8]
 8007d84:	f000 f8c2 	bl	8007f0c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	695b      	ldr	r3, [r3, #20]
 8007d8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	bf14      	ite	ne
 8007d96:	2301      	movne	r3, #1
 8007d98:	2300      	moveq	r3, #0
 8007d9a:	b2db      	uxtb	r3, r3
 8007d9c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007d9e:	68bb      	ldr	r3, [r7, #8]
 8007da0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007da4:	b2db      	uxtb	r3, r3
 8007da6:	2b22      	cmp	r3, #34	@ 0x22
 8007da8:	d108      	bne.n	8007dbc <UART_DMAError+0x7a>
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d005      	beq.n	8007dbc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	2200      	movs	r2, #0
 8007db4:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8007db6:	68b8      	ldr	r0, [r7, #8]
 8007db8:	f000 f8cf 	bl	8007f5a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007dc0:	f043 0210 	orr.w	r2, r3, #16
 8007dc4:	68bb      	ldr	r3, [r7, #8]
 8007dc6:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007dc8:	68b8      	ldr	r0, [r7, #8]
 8007dca:	f7ff fe97 	bl	8007afc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007dce:	bf00      	nop
 8007dd0:	3710      	adds	r7, #16
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}
	...

08007dd8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b098      	sub	sp, #96	@ 0x60
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	60f8      	str	r0, [r7, #12]
 8007de0:	60b9      	str	r1, [r7, #8]
 8007de2:	4613      	mov	r3, r2
 8007de4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007de6:	68ba      	ldr	r2, [r7, #8]
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	88fa      	ldrh	r2, [r7, #6]
 8007df0:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	2200      	movs	r2, #0
 8007df6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	2222      	movs	r2, #34	@ 0x22
 8007dfc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e04:	4a3e      	ldr	r2, [pc, #248]	@ (8007f00 <UART_Start_Receive_DMA+0x128>)
 8007e06:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e0c:	4a3d      	ldr	r2, [pc, #244]	@ (8007f04 <UART_Start_Receive_DMA+0x12c>)
 8007e0e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e14:	4a3c      	ldr	r2, [pc, #240]	@ (8007f08 <UART_Start_Receive_DMA+0x130>)
 8007e16:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007e20:	f107 0308 	add.w	r3, r7, #8
 8007e24:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	3304      	adds	r3, #4
 8007e30:	4619      	mov	r1, r3
 8007e32:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007e34:	681a      	ldr	r2, [r3, #0]
 8007e36:	88fb      	ldrh	r3, [r7, #6]
 8007e38:	f7fd f8da 	bl	8004ff0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	613b      	str	r3, [r7, #16]
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	613b      	str	r3, [r7, #16]
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	685b      	ldr	r3, [r3, #4]
 8007e4e:	613b      	str	r3, [r7, #16]
 8007e50:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	691b      	ldr	r3, [r3, #16]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d019      	beq.n	8007e8e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	330c      	adds	r3, #12
 8007e60:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e64:	e853 3f00 	ldrex	r3, [r3]
 8007e68:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007e6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007e70:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	330c      	adds	r3, #12
 8007e78:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007e7a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8007e7c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e7e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8007e80:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007e82:	e841 2300 	strex	r3, r2, [r1]
 8007e86:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007e88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d1e5      	bne.n	8007e5a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	3314      	adds	r3, #20
 8007e94:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e98:	e853 3f00 	ldrex	r3, [r3]
 8007e9c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007e9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ea0:	f043 0301 	orr.w	r3, r3, #1
 8007ea4:	657b      	str	r3, [r7, #84]	@ 0x54
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	3314      	adds	r3, #20
 8007eac:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007eae:	63ba      	str	r2, [r7, #56]	@ 0x38
 8007eb0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eb2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007eb4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007eb6:	e841 2300 	strex	r3, r2, [r1]
 8007eba:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d1e5      	bne.n	8007e8e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	3314      	adds	r3, #20
 8007ec8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eca:	69bb      	ldr	r3, [r7, #24]
 8007ecc:	e853 3f00 	ldrex	r3, [r3]
 8007ed0:	617b      	str	r3, [r7, #20]
   return(result);
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ed8:	653b      	str	r3, [r7, #80]	@ 0x50
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	3314      	adds	r3, #20
 8007ee0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007ee2:	627a      	str	r2, [r7, #36]	@ 0x24
 8007ee4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ee6:	6a39      	ldr	r1, [r7, #32]
 8007ee8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007eea:	e841 2300 	strex	r3, r2, [r1]
 8007eee:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ef0:	69fb      	ldr	r3, [r7, #28]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d1e5      	bne.n	8007ec2 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8007ef6:	2300      	movs	r3, #0
}
 8007ef8:	4618      	mov	r0, r3
 8007efa:	3760      	adds	r7, #96	@ 0x60
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bd80      	pop	{r7, pc}
 8007f00:	08007bdb 	.word	0x08007bdb
 8007f04:	08007d07 	.word	0x08007d07
 8007f08:	08007d43 	.word	0x08007d43

08007f0c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b089      	sub	sp, #36	@ 0x24
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	330c      	adds	r3, #12
 8007f1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	e853 3f00 	ldrex	r3, [r3]
 8007f22:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007f2a:	61fb      	str	r3, [r7, #28]
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	330c      	adds	r3, #12
 8007f32:	69fa      	ldr	r2, [r7, #28]
 8007f34:	61ba      	str	r2, [r7, #24]
 8007f36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f38:	6979      	ldr	r1, [r7, #20]
 8007f3a:	69ba      	ldr	r2, [r7, #24]
 8007f3c:	e841 2300 	strex	r3, r2, [r1]
 8007f40:	613b      	str	r3, [r7, #16]
   return(result);
 8007f42:	693b      	ldr	r3, [r7, #16]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d1e5      	bne.n	8007f14 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2220      	movs	r2, #32
 8007f4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8007f50:	bf00      	nop
 8007f52:	3724      	adds	r7, #36	@ 0x24
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bc80      	pop	{r7}
 8007f58:	4770      	bx	lr

08007f5a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007f5a:	b480      	push	{r7}
 8007f5c:	b095      	sub	sp, #84	@ 0x54
 8007f5e:	af00      	add	r7, sp, #0
 8007f60:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	330c      	adds	r3, #12
 8007f68:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f6c:	e853 3f00 	ldrex	r3, [r3]
 8007f70:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007f72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f74:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007f78:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	330c      	adds	r3, #12
 8007f80:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007f82:	643a      	str	r2, [r7, #64]	@ 0x40
 8007f84:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f86:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007f88:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007f8a:	e841 2300 	strex	r3, r2, [r1]
 8007f8e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007f90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d1e5      	bne.n	8007f62 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	3314      	adds	r3, #20
 8007f9c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f9e:	6a3b      	ldr	r3, [r7, #32]
 8007fa0:	e853 3f00 	ldrex	r3, [r3]
 8007fa4:	61fb      	str	r3, [r7, #28]
   return(result);
 8007fa6:	69fb      	ldr	r3, [r7, #28]
 8007fa8:	f023 0301 	bic.w	r3, r3, #1
 8007fac:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	3314      	adds	r3, #20
 8007fb4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007fb6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007fb8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007fbc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007fbe:	e841 2300 	strex	r3, r2, [r1]
 8007fc2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d1e5      	bne.n	8007f96 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fce:	2b01      	cmp	r3, #1
 8007fd0:	d119      	bne.n	8008006 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	330c      	adds	r3, #12
 8007fd8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	e853 3f00 	ldrex	r3, [r3]
 8007fe0:	60bb      	str	r3, [r7, #8]
   return(result);
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	f023 0310 	bic.w	r3, r3, #16
 8007fe8:	647b      	str	r3, [r7, #68]	@ 0x44
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	330c      	adds	r3, #12
 8007ff0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007ff2:	61ba      	str	r2, [r7, #24]
 8007ff4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ff6:	6979      	ldr	r1, [r7, #20]
 8007ff8:	69ba      	ldr	r2, [r7, #24]
 8007ffa:	e841 2300 	strex	r3, r2, [r1]
 8007ffe:	613b      	str	r3, [r7, #16]
   return(result);
 8008000:	693b      	ldr	r3, [r7, #16]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d1e5      	bne.n	8007fd2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2220      	movs	r2, #32
 800800a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2200      	movs	r2, #0
 8008012:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008014:	bf00      	nop
 8008016:	3754      	adds	r7, #84	@ 0x54
 8008018:	46bd      	mov	sp, r7
 800801a:	bc80      	pop	{r7}
 800801c:	4770      	bx	lr

0800801e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800801e:	b580      	push	{r7, lr}
 8008020:	b084      	sub	sp, #16
 8008022:	af00      	add	r7, sp, #0
 8008024:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800802a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	2200      	movs	r2, #0
 8008030:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	2200      	movs	r2, #0
 8008036:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008038:	68f8      	ldr	r0, [r7, #12]
 800803a:	f7ff fd5f 	bl	8007afc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800803e:	bf00      	nop
 8008040:	3710      	adds	r7, #16
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}

08008046 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008046:	b480      	push	{r7}
 8008048:	b085      	sub	sp, #20
 800804a:	af00      	add	r7, sp, #0
 800804c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008054:	b2db      	uxtb	r3, r3
 8008056:	2b21      	cmp	r3, #33	@ 0x21
 8008058:	d13e      	bne.n	80080d8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	689b      	ldr	r3, [r3, #8]
 800805e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008062:	d114      	bne.n	800808e <UART_Transmit_IT+0x48>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	691b      	ldr	r3, [r3, #16]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d110      	bne.n	800808e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6a1b      	ldr	r3, [r3, #32]
 8008070:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	881b      	ldrh	r3, [r3, #0]
 8008076:	461a      	mov	r2, r3
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008080:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6a1b      	ldr	r3, [r3, #32]
 8008086:	1c9a      	adds	r2, r3, #2
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	621a      	str	r2, [r3, #32]
 800808c:	e008      	b.n	80080a0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6a1b      	ldr	r3, [r3, #32]
 8008092:	1c59      	adds	r1, r3, #1
 8008094:	687a      	ldr	r2, [r7, #4]
 8008096:	6211      	str	r1, [r2, #32]
 8008098:	781a      	ldrb	r2, [r3, #0]
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80080a4:	b29b      	uxth	r3, r3
 80080a6:	3b01      	subs	r3, #1
 80080a8:	b29b      	uxth	r3, r3
 80080aa:	687a      	ldr	r2, [r7, #4]
 80080ac:	4619      	mov	r1, r3
 80080ae:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d10f      	bne.n	80080d4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	68da      	ldr	r2, [r3, #12]
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80080c2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	68da      	ldr	r2, [r3, #12]
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80080d2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80080d4:	2300      	movs	r3, #0
 80080d6:	e000      	b.n	80080da <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80080d8:	2302      	movs	r3, #2
  }
}
 80080da:	4618      	mov	r0, r3
 80080dc:	3714      	adds	r7, #20
 80080de:	46bd      	mov	sp, r7
 80080e0:	bc80      	pop	{r7}
 80080e2:	4770      	bx	lr

080080e4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b082      	sub	sp, #8
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	68da      	ldr	r2, [r3, #12]
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80080fa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2220      	movs	r2, #32
 8008100:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f7fb f97f 	bl	8003408 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800810a:	2300      	movs	r3, #0
}
 800810c:	4618      	mov	r0, r3
 800810e:	3708      	adds	r7, #8
 8008110:	46bd      	mov	sp, r7
 8008112:	bd80      	pop	{r7, pc}

08008114 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b08c      	sub	sp, #48	@ 0x30
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008122:	b2db      	uxtb	r3, r3
 8008124:	2b22      	cmp	r3, #34	@ 0x22
 8008126:	f040 80ae 	bne.w	8008286 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	689b      	ldr	r3, [r3, #8]
 800812e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008132:	d117      	bne.n	8008164 <UART_Receive_IT+0x50>
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	691b      	ldr	r3, [r3, #16]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d113      	bne.n	8008164 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800813c:	2300      	movs	r3, #0
 800813e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008144:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	685b      	ldr	r3, [r3, #4]
 800814c:	b29b      	uxth	r3, r3
 800814e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008152:	b29a      	uxth	r2, r3
 8008154:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008156:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800815c:	1c9a      	adds	r2, r3, #2
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	629a      	str	r2, [r3, #40]	@ 0x28
 8008162:	e026      	b.n	80081b2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008168:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800816a:	2300      	movs	r3, #0
 800816c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	689b      	ldr	r3, [r3, #8]
 8008172:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008176:	d007      	beq.n	8008188 <UART_Receive_IT+0x74>
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	689b      	ldr	r3, [r3, #8]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d10a      	bne.n	8008196 <UART_Receive_IT+0x82>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	691b      	ldr	r3, [r3, #16]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d106      	bne.n	8008196 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	685b      	ldr	r3, [r3, #4]
 800818e:	b2da      	uxtb	r2, r3
 8008190:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008192:	701a      	strb	r2, [r3, #0]
 8008194:	e008      	b.n	80081a8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	685b      	ldr	r3, [r3, #4]
 800819c:	b2db      	uxtb	r3, r3
 800819e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80081a2:	b2da      	uxtb	r2, r3
 80081a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081a6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081ac:	1c5a      	adds	r2, r3, #1
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80081b6:	b29b      	uxth	r3, r3
 80081b8:	3b01      	subs	r3, #1
 80081ba:	b29b      	uxth	r3, r3
 80081bc:	687a      	ldr	r2, [r7, #4]
 80081be:	4619      	mov	r1, r3
 80081c0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d15d      	bne.n	8008282 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	68da      	ldr	r2, [r3, #12]
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f022 0220 	bic.w	r2, r2, #32
 80081d4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	68da      	ldr	r2, [r3, #12]
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80081e4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	695a      	ldr	r2, [r3, #20]
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f022 0201 	bic.w	r2, r2, #1
 80081f4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2220      	movs	r2, #32
 80081fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2200      	movs	r2, #0
 8008202:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008208:	2b01      	cmp	r3, #1
 800820a:	d135      	bne.n	8008278 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2200      	movs	r2, #0
 8008210:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	330c      	adds	r3, #12
 8008218:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	e853 3f00 	ldrex	r3, [r3]
 8008220:	613b      	str	r3, [r7, #16]
   return(result);
 8008222:	693b      	ldr	r3, [r7, #16]
 8008224:	f023 0310 	bic.w	r3, r3, #16
 8008228:	627b      	str	r3, [r7, #36]	@ 0x24
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	330c      	adds	r3, #12
 8008230:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008232:	623a      	str	r2, [r7, #32]
 8008234:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008236:	69f9      	ldr	r1, [r7, #28]
 8008238:	6a3a      	ldr	r2, [r7, #32]
 800823a:	e841 2300 	strex	r3, r2, [r1]
 800823e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008240:	69bb      	ldr	r3, [r7, #24]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d1e5      	bne.n	8008212 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f003 0310 	and.w	r3, r3, #16
 8008250:	2b10      	cmp	r3, #16
 8008252:	d10a      	bne.n	800826a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008254:	2300      	movs	r3, #0
 8008256:	60fb      	str	r3, [r7, #12]
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	60fb      	str	r3, [r7, #12]
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	685b      	ldr	r3, [r3, #4]
 8008266:	60fb      	str	r3, [r7, #12]
 8008268:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800826e:	4619      	mov	r1, r3
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f7ff fc4c 	bl	8007b0e <HAL_UARTEx_RxEventCallback>
 8008276:	e002      	b.n	800827e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f7fb f8d3 	bl	8003424 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800827e:	2300      	movs	r3, #0
 8008280:	e002      	b.n	8008288 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008282:	2300      	movs	r3, #0
 8008284:	e000      	b.n	8008288 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008286:	2302      	movs	r3, #2
  }
}
 8008288:	4618      	mov	r0, r3
 800828a:	3730      	adds	r7, #48	@ 0x30
 800828c:	46bd      	mov	sp, r7
 800828e:	bd80      	pop	{r7, pc}

08008290 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b084      	sub	sp, #16
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	691b      	ldr	r3, [r3, #16]
 800829e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	68da      	ldr	r2, [r3, #12]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	430a      	orrs	r2, r1
 80082ac:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	689a      	ldr	r2, [r3, #8]
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	691b      	ldr	r3, [r3, #16]
 80082b6:	431a      	orrs	r2, r3
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	695b      	ldr	r3, [r3, #20]
 80082bc:	4313      	orrs	r3, r2
 80082be:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	68db      	ldr	r3, [r3, #12]
 80082c6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80082ca:	f023 030c 	bic.w	r3, r3, #12
 80082ce:	687a      	ldr	r2, [r7, #4]
 80082d0:	6812      	ldr	r2, [r2, #0]
 80082d2:	68b9      	ldr	r1, [r7, #8]
 80082d4:	430b      	orrs	r3, r1
 80082d6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	695b      	ldr	r3, [r3, #20]
 80082de:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	699a      	ldr	r2, [r3, #24]
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	430a      	orrs	r2, r1
 80082ec:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	4a2c      	ldr	r2, [pc, #176]	@ (80083a4 <UART_SetConfig+0x114>)
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d103      	bne.n	8008300 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80082f8:	f7fe f812 	bl	8006320 <HAL_RCC_GetPCLK2Freq>
 80082fc:	60f8      	str	r0, [r7, #12]
 80082fe:	e002      	b.n	8008306 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8008300:	f7fd fffa 	bl	80062f8 <HAL_RCC_GetPCLK1Freq>
 8008304:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008306:	68fa      	ldr	r2, [r7, #12]
 8008308:	4613      	mov	r3, r2
 800830a:	009b      	lsls	r3, r3, #2
 800830c:	4413      	add	r3, r2
 800830e:	009a      	lsls	r2, r3, #2
 8008310:	441a      	add	r2, r3
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	685b      	ldr	r3, [r3, #4]
 8008316:	009b      	lsls	r3, r3, #2
 8008318:	fbb2 f3f3 	udiv	r3, r2, r3
 800831c:	4a22      	ldr	r2, [pc, #136]	@ (80083a8 <UART_SetConfig+0x118>)
 800831e:	fba2 2303 	umull	r2, r3, r2, r3
 8008322:	095b      	lsrs	r3, r3, #5
 8008324:	0119      	lsls	r1, r3, #4
 8008326:	68fa      	ldr	r2, [r7, #12]
 8008328:	4613      	mov	r3, r2
 800832a:	009b      	lsls	r3, r3, #2
 800832c:	4413      	add	r3, r2
 800832e:	009a      	lsls	r2, r3, #2
 8008330:	441a      	add	r2, r3
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	685b      	ldr	r3, [r3, #4]
 8008336:	009b      	lsls	r3, r3, #2
 8008338:	fbb2 f2f3 	udiv	r2, r2, r3
 800833c:	4b1a      	ldr	r3, [pc, #104]	@ (80083a8 <UART_SetConfig+0x118>)
 800833e:	fba3 0302 	umull	r0, r3, r3, r2
 8008342:	095b      	lsrs	r3, r3, #5
 8008344:	2064      	movs	r0, #100	@ 0x64
 8008346:	fb00 f303 	mul.w	r3, r0, r3
 800834a:	1ad3      	subs	r3, r2, r3
 800834c:	011b      	lsls	r3, r3, #4
 800834e:	3332      	adds	r3, #50	@ 0x32
 8008350:	4a15      	ldr	r2, [pc, #84]	@ (80083a8 <UART_SetConfig+0x118>)
 8008352:	fba2 2303 	umull	r2, r3, r2, r3
 8008356:	095b      	lsrs	r3, r3, #5
 8008358:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800835c:	4419      	add	r1, r3
 800835e:	68fa      	ldr	r2, [r7, #12]
 8008360:	4613      	mov	r3, r2
 8008362:	009b      	lsls	r3, r3, #2
 8008364:	4413      	add	r3, r2
 8008366:	009a      	lsls	r2, r3, #2
 8008368:	441a      	add	r2, r3
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	685b      	ldr	r3, [r3, #4]
 800836e:	009b      	lsls	r3, r3, #2
 8008370:	fbb2 f2f3 	udiv	r2, r2, r3
 8008374:	4b0c      	ldr	r3, [pc, #48]	@ (80083a8 <UART_SetConfig+0x118>)
 8008376:	fba3 0302 	umull	r0, r3, r3, r2
 800837a:	095b      	lsrs	r3, r3, #5
 800837c:	2064      	movs	r0, #100	@ 0x64
 800837e:	fb00 f303 	mul.w	r3, r0, r3
 8008382:	1ad3      	subs	r3, r2, r3
 8008384:	011b      	lsls	r3, r3, #4
 8008386:	3332      	adds	r3, #50	@ 0x32
 8008388:	4a07      	ldr	r2, [pc, #28]	@ (80083a8 <UART_SetConfig+0x118>)
 800838a:	fba2 2303 	umull	r2, r3, r2, r3
 800838e:	095b      	lsrs	r3, r3, #5
 8008390:	f003 020f 	and.w	r2, r3, #15
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	440a      	add	r2, r1
 800839a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800839c:	bf00      	nop
 800839e:	3710      	adds	r7, #16
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd80      	pop	{r7, pc}
 80083a4:	40013800 	.word	0x40013800
 80083a8:	51eb851f 	.word	0x51eb851f

080083ac <calloc>:
 80083ac:	4b02      	ldr	r3, [pc, #8]	@ (80083b8 <calloc+0xc>)
 80083ae:	460a      	mov	r2, r1
 80083b0:	4601      	mov	r1, r0
 80083b2:	6818      	ldr	r0, [r3, #0]
 80083b4:	f000 b802 	b.w	80083bc <_calloc_r>
 80083b8:	20000014 	.word	0x20000014

080083bc <_calloc_r>:
 80083bc:	b570      	push	{r4, r5, r6, lr}
 80083be:	fba1 5402 	umull	r5, r4, r1, r2
 80083c2:	b93c      	cbnz	r4, 80083d4 <_calloc_r+0x18>
 80083c4:	4629      	mov	r1, r5
 80083c6:	f000 f82f 	bl	8008428 <_malloc_r>
 80083ca:	4606      	mov	r6, r0
 80083cc:	b928      	cbnz	r0, 80083da <_calloc_r+0x1e>
 80083ce:	2600      	movs	r6, #0
 80083d0:	4630      	mov	r0, r6
 80083d2:	bd70      	pop	{r4, r5, r6, pc}
 80083d4:	220c      	movs	r2, #12
 80083d6:	6002      	str	r2, [r0, #0]
 80083d8:	e7f9      	b.n	80083ce <_calloc_r+0x12>
 80083da:	462a      	mov	r2, r5
 80083dc:	4621      	mov	r1, r4
 80083de:	f000 f8e5 	bl	80085ac <memset>
 80083e2:	e7f5      	b.n	80083d0 <_calloc_r+0x14>

080083e4 <sbrk_aligned>:
 80083e4:	b570      	push	{r4, r5, r6, lr}
 80083e6:	4e0f      	ldr	r6, [pc, #60]	@ (8008424 <sbrk_aligned+0x40>)
 80083e8:	460c      	mov	r4, r1
 80083ea:	6831      	ldr	r1, [r6, #0]
 80083ec:	4605      	mov	r5, r0
 80083ee:	b911      	cbnz	r1, 80083f6 <sbrk_aligned+0x12>
 80083f0:	f000 f8e4 	bl	80085bc <_sbrk_r>
 80083f4:	6030      	str	r0, [r6, #0]
 80083f6:	4621      	mov	r1, r4
 80083f8:	4628      	mov	r0, r5
 80083fa:	f000 f8df 	bl	80085bc <_sbrk_r>
 80083fe:	1c43      	adds	r3, r0, #1
 8008400:	d103      	bne.n	800840a <sbrk_aligned+0x26>
 8008402:	f04f 34ff 	mov.w	r4, #4294967295
 8008406:	4620      	mov	r0, r4
 8008408:	bd70      	pop	{r4, r5, r6, pc}
 800840a:	1cc4      	adds	r4, r0, #3
 800840c:	f024 0403 	bic.w	r4, r4, #3
 8008410:	42a0      	cmp	r0, r4
 8008412:	d0f8      	beq.n	8008406 <sbrk_aligned+0x22>
 8008414:	1a21      	subs	r1, r4, r0
 8008416:	4628      	mov	r0, r5
 8008418:	f000 f8d0 	bl	80085bc <_sbrk_r>
 800841c:	3001      	adds	r0, #1
 800841e:	d1f2      	bne.n	8008406 <sbrk_aligned+0x22>
 8008420:	e7ef      	b.n	8008402 <sbrk_aligned+0x1e>
 8008422:	bf00      	nop
 8008424:	200043f8 	.word	0x200043f8

08008428 <_malloc_r>:
 8008428:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800842c:	1ccd      	adds	r5, r1, #3
 800842e:	f025 0503 	bic.w	r5, r5, #3
 8008432:	3508      	adds	r5, #8
 8008434:	2d0c      	cmp	r5, #12
 8008436:	bf38      	it	cc
 8008438:	250c      	movcc	r5, #12
 800843a:	2d00      	cmp	r5, #0
 800843c:	4606      	mov	r6, r0
 800843e:	db01      	blt.n	8008444 <_malloc_r+0x1c>
 8008440:	42a9      	cmp	r1, r5
 8008442:	d904      	bls.n	800844e <_malloc_r+0x26>
 8008444:	230c      	movs	r3, #12
 8008446:	6033      	str	r3, [r6, #0]
 8008448:	2000      	movs	r0, #0
 800844a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800844e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008524 <_malloc_r+0xfc>
 8008452:	f000 f869 	bl	8008528 <__malloc_lock>
 8008456:	f8d8 3000 	ldr.w	r3, [r8]
 800845a:	461c      	mov	r4, r3
 800845c:	bb44      	cbnz	r4, 80084b0 <_malloc_r+0x88>
 800845e:	4629      	mov	r1, r5
 8008460:	4630      	mov	r0, r6
 8008462:	f7ff ffbf 	bl	80083e4 <sbrk_aligned>
 8008466:	1c43      	adds	r3, r0, #1
 8008468:	4604      	mov	r4, r0
 800846a:	d158      	bne.n	800851e <_malloc_r+0xf6>
 800846c:	f8d8 4000 	ldr.w	r4, [r8]
 8008470:	4627      	mov	r7, r4
 8008472:	2f00      	cmp	r7, #0
 8008474:	d143      	bne.n	80084fe <_malloc_r+0xd6>
 8008476:	2c00      	cmp	r4, #0
 8008478:	d04b      	beq.n	8008512 <_malloc_r+0xea>
 800847a:	6823      	ldr	r3, [r4, #0]
 800847c:	4639      	mov	r1, r7
 800847e:	4630      	mov	r0, r6
 8008480:	eb04 0903 	add.w	r9, r4, r3
 8008484:	f000 f89a 	bl	80085bc <_sbrk_r>
 8008488:	4581      	cmp	r9, r0
 800848a:	d142      	bne.n	8008512 <_malloc_r+0xea>
 800848c:	6821      	ldr	r1, [r4, #0]
 800848e:	4630      	mov	r0, r6
 8008490:	1a6d      	subs	r5, r5, r1
 8008492:	4629      	mov	r1, r5
 8008494:	f7ff ffa6 	bl	80083e4 <sbrk_aligned>
 8008498:	3001      	adds	r0, #1
 800849a:	d03a      	beq.n	8008512 <_malloc_r+0xea>
 800849c:	6823      	ldr	r3, [r4, #0]
 800849e:	442b      	add	r3, r5
 80084a0:	6023      	str	r3, [r4, #0]
 80084a2:	f8d8 3000 	ldr.w	r3, [r8]
 80084a6:	685a      	ldr	r2, [r3, #4]
 80084a8:	bb62      	cbnz	r2, 8008504 <_malloc_r+0xdc>
 80084aa:	f8c8 7000 	str.w	r7, [r8]
 80084ae:	e00f      	b.n	80084d0 <_malloc_r+0xa8>
 80084b0:	6822      	ldr	r2, [r4, #0]
 80084b2:	1b52      	subs	r2, r2, r5
 80084b4:	d420      	bmi.n	80084f8 <_malloc_r+0xd0>
 80084b6:	2a0b      	cmp	r2, #11
 80084b8:	d917      	bls.n	80084ea <_malloc_r+0xc2>
 80084ba:	1961      	adds	r1, r4, r5
 80084bc:	42a3      	cmp	r3, r4
 80084be:	6025      	str	r5, [r4, #0]
 80084c0:	bf18      	it	ne
 80084c2:	6059      	strne	r1, [r3, #4]
 80084c4:	6863      	ldr	r3, [r4, #4]
 80084c6:	bf08      	it	eq
 80084c8:	f8c8 1000 	streq.w	r1, [r8]
 80084cc:	5162      	str	r2, [r4, r5]
 80084ce:	604b      	str	r3, [r1, #4]
 80084d0:	4630      	mov	r0, r6
 80084d2:	f000 f82f 	bl	8008534 <__malloc_unlock>
 80084d6:	f104 000b 	add.w	r0, r4, #11
 80084da:	1d23      	adds	r3, r4, #4
 80084dc:	f020 0007 	bic.w	r0, r0, #7
 80084e0:	1ac2      	subs	r2, r0, r3
 80084e2:	bf1c      	itt	ne
 80084e4:	1a1b      	subne	r3, r3, r0
 80084e6:	50a3      	strne	r3, [r4, r2]
 80084e8:	e7af      	b.n	800844a <_malloc_r+0x22>
 80084ea:	6862      	ldr	r2, [r4, #4]
 80084ec:	42a3      	cmp	r3, r4
 80084ee:	bf0c      	ite	eq
 80084f0:	f8c8 2000 	streq.w	r2, [r8]
 80084f4:	605a      	strne	r2, [r3, #4]
 80084f6:	e7eb      	b.n	80084d0 <_malloc_r+0xa8>
 80084f8:	4623      	mov	r3, r4
 80084fa:	6864      	ldr	r4, [r4, #4]
 80084fc:	e7ae      	b.n	800845c <_malloc_r+0x34>
 80084fe:	463c      	mov	r4, r7
 8008500:	687f      	ldr	r7, [r7, #4]
 8008502:	e7b6      	b.n	8008472 <_malloc_r+0x4a>
 8008504:	461a      	mov	r2, r3
 8008506:	685b      	ldr	r3, [r3, #4]
 8008508:	42a3      	cmp	r3, r4
 800850a:	d1fb      	bne.n	8008504 <_malloc_r+0xdc>
 800850c:	2300      	movs	r3, #0
 800850e:	6053      	str	r3, [r2, #4]
 8008510:	e7de      	b.n	80084d0 <_malloc_r+0xa8>
 8008512:	230c      	movs	r3, #12
 8008514:	4630      	mov	r0, r6
 8008516:	6033      	str	r3, [r6, #0]
 8008518:	f000 f80c 	bl	8008534 <__malloc_unlock>
 800851c:	e794      	b.n	8008448 <_malloc_r+0x20>
 800851e:	6005      	str	r5, [r0, #0]
 8008520:	e7d6      	b.n	80084d0 <_malloc_r+0xa8>
 8008522:	bf00      	nop
 8008524:	200043fc 	.word	0x200043fc

08008528 <__malloc_lock>:
 8008528:	4801      	ldr	r0, [pc, #4]	@ (8008530 <__malloc_lock+0x8>)
 800852a:	f000 b881 	b.w	8008630 <__retarget_lock_acquire_recursive>
 800852e:	bf00      	nop
 8008530:	2000453c 	.word	0x2000453c

08008534 <__malloc_unlock>:
 8008534:	4801      	ldr	r0, [pc, #4]	@ (800853c <__malloc_unlock+0x8>)
 8008536:	f000 b87c 	b.w	8008632 <__retarget_lock_release_recursive>
 800853a:	bf00      	nop
 800853c:	2000453c 	.word	0x2000453c

08008540 <realloc>:
 8008540:	4b02      	ldr	r3, [pc, #8]	@ (800854c <realloc+0xc>)
 8008542:	460a      	mov	r2, r1
 8008544:	4601      	mov	r1, r0
 8008546:	6818      	ldr	r0, [r3, #0]
 8008548:	f000 b802 	b.w	8008550 <_realloc_r>
 800854c:	20000014 	.word	0x20000014

08008550 <_realloc_r>:
 8008550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008554:	4680      	mov	r8, r0
 8008556:	4615      	mov	r5, r2
 8008558:	460c      	mov	r4, r1
 800855a:	b921      	cbnz	r1, 8008566 <_realloc_r+0x16>
 800855c:	4611      	mov	r1, r2
 800855e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008562:	f7ff bf61 	b.w	8008428 <_malloc_r>
 8008566:	b92a      	cbnz	r2, 8008574 <_realloc_r+0x24>
 8008568:	f000 f872 	bl	8008650 <_free_r>
 800856c:	2400      	movs	r4, #0
 800856e:	4620      	mov	r0, r4
 8008570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008574:	f000 f8b4 	bl	80086e0 <_malloc_usable_size_r>
 8008578:	4285      	cmp	r5, r0
 800857a:	4606      	mov	r6, r0
 800857c:	d802      	bhi.n	8008584 <_realloc_r+0x34>
 800857e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008582:	d8f4      	bhi.n	800856e <_realloc_r+0x1e>
 8008584:	4629      	mov	r1, r5
 8008586:	4640      	mov	r0, r8
 8008588:	f7ff ff4e 	bl	8008428 <_malloc_r>
 800858c:	4607      	mov	r7, r0
 800858e:	2800      	cmp	r0, #0
 8008590:	d0ec      	beq.n	800856c <_realloc_r+0x1c>
 8008592:	42b5      	cmp	r5, r6
 8008594:	462a      	mov	r2, r5
 8008596:	4621      	mov	r1, r4
 8008598:	bf28      	it	cs
 800859a:	4632      	movcs	r2, r6
 800859c:	f000 f84a 	bl	8008634 <memcpy>
 80085a0:	4621      	mov	r1, r4
 80085a2:	4640      	mov	r0, r8
 80085a4:	f000 f854 	bl	8008650 <_free_r>
 80085a8:	463c      	mov	r4, r7
 80085aa:	e7e0      	b.n	800856e <_realloc_r+0x1e>

080085ac <memset>:
 80085ac:	4603      	mov	r3, r0
 80085ae:	4402      	add	r2, r0
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d100      	bne.n	80085b6 <memset+0xa>
 80085b4:	4770      	bx	lr
 80085b6:	f803 1b01 	strb.w	r1, [r3], #1
 80085ba:	e7f9      	b.n	80085b0 <memset+0x4>

080085bc <_sbrk_r>:
 80085bc:	b538      	push	{r3, r4, r5, lr}
 80085be:	2300      	movs	r3, #0
 80085c0:	4d05      	ldr	r5, [pc, #20]	@ (80085d8 <_sbrk_r+0x1c>)
 80085c2:	4604      	mov	r4, r0
 80085c4:	4608      	mov	r0, r1
 80085c6:	602b      	str	r3, [r5, #0]
 80085c8:	f7fc fa9e 	bl	8004b08 <_sbrk>
 80085cc:	1c43      	adds	r3, r0, #1
 80085ce:	d102      	bne.n	80085d6 <_sbrk_r+0x1a>
 80085d0:	682b      	ldr	r3, [r5, #0]
 80085d2:	b103      	cbz	r3, 80085d6 <_sbrk_r+0x1a>
 80085d4:	6023      	str	r3, [r4, #0]
 80085d6:	bd38      	pop	{r3, r4, r5, pc}
 80085d8:	20004538 	.word	0x20004538

080085dc <__errno>:
 80085dc:	4b01      	ldr	r3, [pc, #4]	@ (80085e4 <__errno+0x8>)
 80085de:	6818      	ldr	r0, [r3, #0]
 80085e0:	4770      	bx	lr
 80085e2:	bf00      	nop
 80085e4:	20000014 	.word	0x20000014

080085e8 <__libc_init_array>:
 80085e8:	b570      	push	{r4, r5, r6, lr}
 80085ea:	2600      	movs	r6, #0
 80085ec:	4d0c      	ldr	r5, [pc, #48]	@ (8008620 <__libc_init_array+0x38>)
 80085ee:	4c0d      	ldr	r4, [pc, #52]	@ (8008624 <__libc_init_array+0x3c>)
 80085f0:	1b64      	subs	r4, r4, r5
 80085f2:	10a4      	asrs	r4, r4, #2
 80085f4:	42a6      	cmp	r6, r4
 80085f6:	d109      	bne.n	800860c <__libc_init_array+0x24>
 80085f8:	f000 f87a 	bl	80086f0 <_init>
 80085fc:	2600      	movs	r6, #0
 80085fe:	4d0a      	ldr	r5, [pc, #40]	@ (8008628 <__libc_init_array+0x40>)
 8008600:	4c0a      	ldr	r4, [pc, #40]	@ (800862c <__libc_init_array+0x44>)
 8008602:	1b64      	subs	r4, r4, r5
 8008604:	10a4      	asrs	r4, r4, #2
 8008606:	42a6      	cmp	r6, r4
 8008608:	d105      	bne.n	8008616 <__libc_init_array+0x2e>
 800860a:	bd70      	pop	{r4, r5, r6, pc}
 800860c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008610:	4798      	blx	r3
 8008612:	3601      	adds	r6, #1
 8008614:	e7ee      	b.n	80085f4 <__libc_init_array+0xc>
 8008616:	f855 3b04 	ldr.w	r3, [r5], #4
 800861a:	4798      	blx	r3
 800861c:	3601      	adds	r6, #1
 800861e:	e7f2      	b.n	8008606 <__libc_init_array+0x1e>
 8008620:	08008a7c 	.word	0x08008a7c
 8008624:	08008a7c 	.word	0x08008a7c
 8008628:	08008a7c 	.word	0x08008a7c
 800862c:	08008a84 	.word	0x08008a84

08008630 <__retarget_lock_acquire_recursive>:
 8008630:	4770      	bx	lr

08008632 <__retarget_lock_release_recursive>:
 8008632:	4770      	bx	lr

08008634 <memcpy>:
 8008634:	440a      	add	r2, r1
 8008636:	4291      	cmp	r1, r2
 8008638:	f100 33ff 	add.w	r3, r0, #4294967295
 800863c:	d100      	bne.n	8008640 <memcpy+0xc>
 800863e:	4770      	bx	lr
 8008640:	b510      	push	{r4, lr}
 8008642:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008646:	4291      	cmp	r1, r2
 8008648:	f803 4f01 	strb.w	r4, [r3, #1]!
 800864c:	d1f9      	bne.n	8008642 <memcpy+0xe>
 800864e:	bd10      	pop	{r4, pc}

08008650 <_free_r>:
 8008650:	b538      	push	{r3, r4, r5, lr}
 8008652:	4605      	mov	r5, r0
 8008654:	2900      	cmp	r1, #0
 8008656:	d040      	beq.n	80086da <_free_r+0x8a>
 8008658:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800865c:	1f0c      	subs	r4, r1, #4
 800865e:	2b00      	cmp	r3, #0
 8008660:	bfb8      	it	lt
 8008662:	18e4      	addlt	r4, r4, r3
 8008664:	f7ff ff60 	bl	8008528 <__malloc_lock>
 8008668:	4a1c      	ldr	r2, [pc, #112]	@ (80086dc <_free_r+0x8c>)
 800866a:	6813      	ldr	r3, [r2, #0]
 800866c:	b933      	cbnz	r3, 800867c <_free_r+0x2c>
 800866e:	6063      	str	r3, [r4, #4]
 8008670:	6014      	str	r4, [r2, #0]
 8008672:	4628      	mov	r0, r5
 8008674:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008678:	f7ff bf5c 	b.w	8008534 <__malloc_unlock>
 800867c:	42a3      	cmp	r3, r4
 800867e:	d908      	bls.n	8008692 <_free_r+0x42>
 8008680:	6820      	ldr	r0, [r4, #0]
 8008682:	1821      	adds	r1, r4, r0
 8008684:	428b      	cmp	r3, r1
 8008686:	bf01      	itttt	eq
 8008688:	6819      	ldreq	r1, [r3, #0]
 800868a:	685b      	ldreq	r3, [r3, #4]
 800868c:	1809      	addeq	r1, r1, r0
 800868e:	6021      	streq	r1, [r4, #0]
 8008690:	e7ed      	b.n	800866e <_free_r+0x1e>
 8008692:	461a      	mov	r2, r3
 8008694:	685b      	ldr	r3, [r3, #4]
 8008696:	b10b      	cbz	r3, 800869c <_free_r+0x4c>
 8008698:	42a3      	cmp	r3, r4
 800869a:	d9fa      	bls.n	8008692 <_free_r+0x42>
 800869c:	6811      	ldr	r1, [r2, #0]
 800869e:	1850      	adds	r0, r2, r1
 80086a0:	42a0      	cmp	r0, r4
 80086a2:	d10b      	bne.n	80086bc <_free_r+0x6c>
 80086a4:	6820      	ldr	r0, [r4, #0]
 80086a6:	4401      	add	r1, r0
 80086a8:	1850      	adds	r0, r2, r1
 80086aa:	4283      	cmp	r3, r0
 80086ac:	6011      	str	r1, [r2, #0]
 80086ae:	d1e0      	bne.n	8008672 <_free_r+0x22>
 80086b0:	6818      	ldr	r0, [r3, #0]
 80086b2:	685b      	ldr	r3, [r3, #4]
 80086b4:	4408      	add	r0, r1
 80086b6:	6010      	str	r0, [r2, #0]
 80086b8:	6053      	str	r3, [r2, #4]
 80086ba:	e7da      	b.n	8008672 <_free_r+0x22>
 80086bc:	d902      	bls.n	80086c4 <_free_r+0x74>
 80086be:	230c      	movs	r3, #12
 80086c0:	602b      	str	r3, [r5, #0]
 80086c2:	e7d6      	b.n	8008672 <_free_r+0x22>
 80086c4:	6820      	ldr	r0, [r4, #0]
 80086c6:	1821      	adds	r1, r4, r0
 80086c8:	428b      	cmp	r3, r1
 80086ca:	bf01      	itttt	eq
 80086cc:	6819      	ldreq	r1, [r3, #0]
 80086ce:	685b      	ldreq	r3, [r3, #4]
 80086d0:	1809      	addeq	r1, r1, r0
 80086d2:	6021      	streq	r1, [r4, #0]
 80086d4:	6063      	str	r3, [r4, #4]
 80086d6:	6054      	str	r4, [r2, #4]
 80086d8:	e7cb      	b.n	8008672 <_free_r+0x22>
 80086da:	bd38      	pop	{r3, r4, r5, pc}
 80086dc:	200043fc 	.word	0x200043fc

080086e0 <_malloc_usable_size_r>:
 80086e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086e4:	1f18      	subs	r0, r3, #4
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	bfbc      	itt	lt
 80086ea:	580b      	ldrlt	r3, [r1, r0]
 80086ec:	18c0      	addlt	r0, r0, r3
 80086ee:	4770      	bx	lr

080086f0 <_init>:
 80086f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086f2:	bf00      	nop
 80086f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086f6:	bc08      	pop	{r3}
 80086f8:	469e      	mov	lr, r3
 80086fa:	4770      	bx	lr

080086fc <_fini>:
 80086fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086fe:	bf00      	nop
 8008700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008702:	bc08      	pop	{r3}
 8008704:	469e      	mov	lr, r3
 8008706:	4770      	bx	lr
