
encoder_read_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cd60  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000758  0800ce70  0800ce70  0000de70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d5c8  0800d5c8  0000f068  2**0
                  CONTENTS
  4 .ARM          00000008  0800d5c8  0800d5c8  0000e5c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d5d0  0800d5d0  0000f068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800d5d0  0800d5d0  0000e5d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d5d8  0800d5d8  0000e5d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800d5dc  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b08  20000068  0800d644  0000f068  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001b70  0800d644  0000fb70  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000f068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c6dc  00000000  00000000  0000f091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000314b  00000000  00000000  0002b76d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014c8  00000000  00000000  0002e8b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001061  00000000  00000000  0002fd80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a4ab  00000000  00000000  00030de1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a2be  00000000  00000000  0004b28c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009778a  00000000  00000000  0006554a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fccd4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000608c  00000000  00000000  000fcd18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  00102da4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000068 	.word	0x20000068
 800012c:	00000000 	.word	0x00000000
 8000130:	0800ce58 	.word	0x0800ce58

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000006c 	.word	0x2000006c
 800014c:	0800ce58 	.word	0x0800ce58

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__aeabi_d2uiz>:
 80008fc:	004a      	lsls	r2, r1, #1
 80008fe:	d211      	bcs.n	8000924 <__aeabi_d2uiz+0x28>
 8000900:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000904:	d211      	bcs.n	800092a <__aeabi_d2uiz+0x2e>
 8000906:	d50d      	bpl.n	8000924 <__aeabi_d2uiz+0x28>
 8000908:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800090c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000910:	d40e      	bmi.n	8000930 <__aeabi_d2uiz+0x34>
 8000912:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000916:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800091a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800091e:	fa23 f002 	lsr.w	r0, r3, r2
 8000922:	4770      	bx	lr
 8000924:	f04f 0000 	mov.w	r0, #0
 8000928:	4770      	bx	lr
 800092a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800092e:	d102      	bne.n	8000936 <__aeabi_d2uiz+0x3a>
 8000930:	f04f 30ff 	mov.w	r0, #4294967295
 8000934:	4770      	bx	lr
 8000936:	f04f 0000 	mov.w	r0, #0
 800093a:	4770      	bx	lr

0800093c <__aeabi_d2f>:
 800093c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000940:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000944:	bf24      	itt	cs
 8000946:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800094a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800094e:	d90d      	bls.n	800096c <__aeabi_d2f+0x30>
 8000950:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000954:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000958:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800095c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000960:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000964:	bf08      	it	eq
 8000966:	f020 0001 	biceq.w	r0, r0, #1
 800096a:	4770      	bx	lr
 800096c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000970:	d121      	bne.n	80009b6 <__aeabi_d2f+0x7a>
 8000972:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000976:	bfbc      	itt	lt
 8000978:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800097c:	4770      	bxlt	lr
 800097e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000982:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000986:	f1c2 0218 	rsb	r2, r2, #24
 800098a:	f1c2 0c20 	rsb	ip, r2, #32
 800098e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000992:	fa20 f002 	lsr.w	r0, r0, r2
 8000996:	bf18      	it	ne
 8000998:	f040 0001 	orrne.w	r0, r0, #1
 800099c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009a0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009a4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009a8:	ea40 000c 	orr.w	r0, r0, ip
 80009ac:	fa23 f302 	lsr.w	r3, r3, r2
 80009b0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009b4:	e7cc      	b.n	8000950 <__aeabi_d2f+0x14>
 80009b6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ba:	d107      	bne.n	80009cc <__aeabi_d2f+0x90>
 80009bc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009c0:	bf1e      	ittt	ne
 80009c2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80009c6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80009ca:	4770      	bxne	lr
 80009cc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80009d0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80009d4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <__aeabi_frsub>:
 80009dc:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80009e0:	e002      	b.n	80009e8 <__addsf3>
 80009e2:	bf00      	nop

080009e4 <__aeabi_fsub>:
 80009e4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080009e8 <__addsf3>:
 80009e8:	0042      	lsls	r2, r0, #1
 80009ea:	bf1f      	itttt	ne
 80009ec:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009f0:	ea92 0f03 	teqne	r2, r3
 80009f4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009f8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009fc:	d06a      	beq.n	8000ad4 <__addsf3+0xec>
 80009fe:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a02:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a06:	bfc1      	itttt	gt
 8000a08:	18d2      	addgt	r2, r2, r3
 8000a0a:	4041      	eorgt	r1, r0
 8000a0c:	4048      	eorgt	r0, r1
 8000a0e:	4041      	eorgt	r1, r0
 8000a10:	bfb8      	it	lt
 8000a12:	425b      	neglt	r3, r3
 8000a14:	2b19      	cmp	r3, #25
 8000a16:	bf88      	it	hi
 8000a18:	4770      	bxhi	lr
 8000a1a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000a1e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a22:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a2e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000a32:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000a36:	bf18      	it	ne
 8000a38:	4249      	negne	r1, r1
 8000a3a:	ea92 0f03 	teq	r2, r3
 8000a3e:	d03f      	beq.n	8000ac0 <__addsf3+0xd8>
 8000a40:	f1a2 0201 	sub.w	r2, r2, #1
 8000a44:	fa41 fc03 	asr.w	ip, r1, r3
 8000a48:	eb10 000c 	adds.w	r0, r0, ip
 8000a4c:	f1c3 0320 	rsb	r3, r3, #32
 8000a50:	fa01 f103 	lsl.w	r1, r1, r3
 8000a54:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000a58:	d502      	bpl.n	8000a60 <__addsf3+0x78>
 8000a5a:	4249      	negs	r1, r1
 8000a5c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a60:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000a64:	d313      	bcc.n	8000a8e <__addsf3+0xa6>
 8000a66:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000a6a:	d306      	bcc.n	8000a7a <__addsf3+0x92>
 8000a6c:	0840      	lsrs	r0, r0, #1
 8000a6e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a72:	f102 0201 	add.w	r2, r2, #1
 8000a76:	2afe      	cmp	r2, #254	@ 0xfe
 8000a78:	d251      	bcs.n	8000b1e <__addsf3+0x136>
 8000a7a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000a7e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a82:	bf08      	it	eq
 8000a84:	f020 0001 	biceq.w	r0, r0, #1
 8000a88:	ea40 0003 	orr.w	r0, r0, r3
 8000a8c:	4770      	bx	lr
 8000a8e:	0049      	lsls	r1, r1, #1
 8000a90:	eb40 0000 	adc.w	r0, r0, r0
 8000a94:	3a01      	subs	r2, #1
 8000a96:	bf28      	it	cs
 8000a98:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000a9c:	d2ed      	bcs.n	8000a7a <__addsf3+0x92>
 8000a9e:	fab0 fc80 	clz	ip, r0
 8000aa2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000aa6:	ebb2 020c 	subs.w	r2, r2, ip
 8000aaa:	fa00 f00c 	lsl.w	r0, r0, ip
 8000aae:	bfaa      	itet	ge
 8000ab0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ab4:	4252      	neglt	r2, r2
 8000ab6:	4318      	orrge	r0, r3
 8000ab8:	bfbc      	itt	lt
 8000aba:	40d0      	lsrlt	r0, r2
 8000abc:	4318      	orrlt	r0, r3
 8000abe:	4770      	bx	lr
 8000ac0:	f092 0f00 	teq	r2, #0
 8000ac4:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000ac8:	bf06      	itte	eq
 8000aca:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000ace:	3201      	addeq	r2, #1
 8000ad0:	3b01      	subne	r3, #1
 8000ad2:	e7b5      	b.n	8000a40 <__addsf3+0x58>
 8000ad4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ad8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000adc:	bf18      	it	ne
 8000ade:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae2:	d021      	beq.n	8000b28 <__addsf3+0x140>
 8000ae4:	ea92 0f03 	teq	r2, r3
 8000ae8:	d004      	beq.n	8000af4 <__addsf3+0x10c>
 8000aea:	f092 0f00 	teq	r2, #0
 8000aee:	bf08      	it	eq
 8000af0:	4608      	moveq	r0, r1
 8000af2:	4770      	bx	lr
 8000af4:	ea90 0f01 	teq	r0, r1
 8000af8:	bf1c      	itt	ne
 8000afa:	2000      	movne	r0, #0
 8000afc:	4770      	bxne	lr
 8000afe:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000b02:	d104      	bne.n	8000b0e <__addsf3+0x126>
 8000b04:	0040      	lsls	r0, r0, #1
 8000b06:	bf28      	it	cs
 8000b08:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000b0c:	4770      	bx	lr
 8000b0e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000b12:	bf3c      	itt	cc
 8000b14:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000b18:	4770      	bxcc	lr
 8000b1a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b1e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000b22:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b26:	4770      	bx	lr
 8000b28:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b2c:	bf16      	itet	ne
 8000b2e:	4608      	movne	r0, r1
 8000b30:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b34:	4601      	movne	r1, r0
 8000b36:	0242      	lsls	r2, r0, #9
 8000b38:	bf06      	itte	eq
 8000b3a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b3e:	ea90 0f01 	teqeq	r0, r1
 8000b42:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_ui2f>:
 8000b48:	f04f 0300 	mov.w	r3, #0
 8000b4c:	e004      	b.n	8000b58 <__aeabi_i2f+0x8>
 8000b4e:	bf00      	nop

08000b50 <__aeabi_i2f>:
 8000b50:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000b54:	bf48      	it	mi
 8000b56:	4240      	negmi	r0, r0
 8000b58:	ea5f 0c00 	movs.w	ip, r0
 8000b5c:	bf08      	it	eq
 8000b5e:	4770      	bxeq	lr
 8000b60:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000b64:	4601      	mov	r1, r0
 8000b66:	f04f 0000 	mov.w	r0, #0
 8000b6a:	e01c      	b.n	8000ba6 <__aeabi_l2f+0x2a>

08000b6c <__aeabi_ul2f>:
 8000b6c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b70:	bf08      	it	eq
 8000b72:	4770      	bxeq	lr
 8000b74:	f04f 0300 	mov.w	r3, #0
 8000b78:	e00a      	b.n	8000b90 <__aeabi_l2f+0x14>
 8000b7a:	bf00      	nop

08000b7c <__aeabi_l2f>:
 8000b7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b80:	bf08      	it	eq
 8000b82:	4770      	bxeq	lr
 8000b84:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000b88:	d502      	bpl.n	8000b90 <__aeabi_l2f+0x14>
 8000b8a:	4240      	negs	r0, r0
 8000b8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b90:	ea5f 0c01 	movs.w	ip, r1
 8000b94:	bf02      	ittt	eq
 8000b96:	4684      	moveq	ip, r0
 8000b98:	4601      	moveq	r1, r0
 8000b9a:	2000      	moveq	r0, #0
 8000b9c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000ba6:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000baa:	fabc f28c 	clz	r2, ip
 8000bae:	3a08      	subs	r2, #8
 8000bb0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000bb4:	db10      	blt.n	8000bd8 <__aeabi_l2f+0x5c>
 8000bb6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bba:	4463      	add	r3, ip
 8000bbc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bc0:	f1c2 0220 	rsb	r2, r2, #32
 8000bc4:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000bc8:	fa20 f202 	lsr.w	r2, r0, r2
 8000bcc:	eb43 0002 	adc.w	r0, r3, r2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f102 0220 	add.w	r2, r2, #32
 8000bdc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000be0:	f1c2 0220 	rsb	r2, r2, #32
 8000be4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000be8:	fa21 f202 	lsr.w	r2, r1, r2
 8000bec:	eb43 0002 	adc.w	r0, r3, r2
 8000bf0:	bf08      	it	eq
 8000bf2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_fmul>:
 8000bf8:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000bfc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c00:	bf1e      	ittt	ne
 8000c02:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c06:	ea92 0f0c 	teqne	r2, ip
 8000c0a:	ea93 0f0c 	teqne	r3, ip
 8000c0e:	d06f      	beq.n	8000cf0 <__aeabi_fmul+0xf8>
 8000c10:	441a      	add	r2, r3
 8000c12:	ea80 0c01 	eor.w	ip, r0, r1
 8000c16:	0240      	lsls	r0, r0, #9
 8000c18:	bf18      	it	ne
 8000c1a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c1e:	d01e      	beq.n	8000c5e <__aeabi_fmul+0x66>
 8000c20:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000c24:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c28:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c2c:	fba0 3101 	umull	r3, r1, r0, r1
 8000c30:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000c34:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000c38:	bf3e      	ittt	cc
 8000c3a:	0049      	lslcc	r1, r1, #1
 8000c3c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c40:	005b      	lslcc	r3, r3, #1
 8000c42:	ea40 0001 	orr.w	r0, r0, r1
 8000c46:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000c4a:	2afd      	cmp	r2, #253	@ 0xfd
 8000c4c:	d81d      	bhi.n	8000c8a <__aeabi_fmul+0x92>
 8000c4e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000c52:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c56:	bf08      	it	eq
 8000c58:	f020 0001 	biceq.w	r0, r0, #1
 8000c5c:	4770      	bx	lr
 8000c5e:	f090 0f00 	teq	r0, #0
 8000c62:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000c66:	bf08      	it	eq
 8000c68:	0249      	lsleq	r1, r1, #9
 8000c6a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c6e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c72:	3a7f      	subs	r2, #127	@ 0x7f
 8000c74:	bfc2      	ittt	gt
 8000c76:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000c7a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c7e:	4770      	bxgt	lr
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	3a01      	subs	r2, #1
 8000c8a:	dc5d      	bgt.n	8000d48 <__aeabi_fmul+0x150>
 8000c8c:	f112 0f19 	cmn.w	r2, #25
 8000c90:	bfdc      	itt	le
 8000c92:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000c96:	4770      	bxle	lr
 8000c98:	f1c2 0200 	rsb	r2, r2, #0
 8000c9c:	0041      	lsls	r1, r0, #1
 8000c9e:	fa21 f102 	lsr.w	r1, r1, r2
 8000ca2:	f1c2 0220 	rsb	r2, r2, #32
 8000ca6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000caa:	ea5f 0031 	movs.w	r0, r1, rrx
 8000cae:	f140 0000 	adc.w	r0, r0, #0
 8000cb2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000cb6:	bf08      	it	eq
 8000cb8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cbc:	4770      	bx	lr
 8000cbe:	f092 0f00 	teq	r2, #0
 8000cc2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000cc6:	bf02      	ittt	eq
 8000cc8:	0040      	lsleq	r0, r0, #1
 8000cca:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000cce:	3a01      	subeq	r2, #1
 8000cd0:	d0f9      	beq.n	8000cc6 <__aeabi_fmul+0xce>
 8000cd2:	ea40 000c 	orr.w	r0, r0, ip
 8000cd6:	f093 0f00 	teq	r3, #0
 8000cda:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000cde:	bf02      	ittt	eq
 8000ce0:	0049      	lsleq	r1, r1, #1
 8000ce2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000ce6:	3b01      	subeq	r3, #1
 8000ce8:	d0f9      	beq.n	8000cde <__aeabi_fmul+0xe6>
 8000cea:	ea41 010c 	orr.w	r1, r1, ip
 8000cee:	e78f      	b.n	8000c10 <__aeabi_fmul+0x18>
 8000cf0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000cf4:	ea92 0f0c 	teq	r2, ip
 8000cf8:	bf18      	it	ne
 8000cfa:	ea93 0f0c 	teqne	r3, ip
 8000cfe:	d00a      	beq.n	8000d16 <__aeabi_fmul+0x11e>
 8000d00:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000d04:	bf18      	it	ne
 8000d06:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000d0a:	d1d8      	bne.n	8000cbe <__aeabi_fmul+0xc6>
 8000d0c:	ea80 0001 	eor.w	r0, r0, r1
 8000d10:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000d14:	4770      	bx	lr
 8000d16:	f090 0f00 	teq	r0, #0
 8000d1a:	bf17      	itett	ne
 8000d1c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000d20:	4608      	moveq	r0, r1
 8000d22:	f091 0f00 	teqne	r1, #0
 8000d26:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000d2a:	d014      	beq.n	8000d56 <__aeabi_fmul+0x15e>
 8000d2c:	ea92 0f0c 	teq	r2, ip
 8000d30:	d101      	bne.n	8000d36 <__aeabi_fmul+0x13e>
 8000d32:	0242      	lsls	r2, r0, #9
 8000d34:	d10f      	bne.n	8000d56 <__aeabi_fmul+0x15e>
 8000d36:	ea93 0f0c 	teq	r3, ip
 8000d3a:	d103      	bne.n	8000d44 <__aeabi_fmul+0x14c>
 8000d3c:	024b      	lsls	r3, r1, #9
 8000d3e:	bf18      	it	ne
 8000d40:	4608      	movne	r0, r1
 8000d42:	d108      	bne.n	8000d56 <__aeabi_fmul+0x15e>
 8000d44:	ea80 0001 	eor.w	r0, r0, r1
 8000d48:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000d4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d54:	4770      	bx	lr
 8000d56:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d5a:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000d5e:	4770      	bx	lr

08000d60 <__aeabi_fdiv>:
 8000d60:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d64:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d68:	bf1e      	ittt	ne
 8000d6a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d6e:	ea92 0f0c 	teqne	r2, ip
 8000d72:	ea93 0f0c 	teqne	r3, ip
 8000d76:	d069      	beq.n	8000e4c <__aeabi_fdiv+0xec>
 8000d78:	eba2 0203 	sub.w	r2, r2, r3
 8000d7c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d80:	0249      	lsls	r1, r1, #9
 8000d82:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d86:	d037      	beq.n	8000df8 <__aeabi_fdiv+0x98>
 8000d88:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000d8c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d90:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d94:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	bf38      	it	cc
 8000d9c:	005b      	lslcc	r3, r3, #1
 8000d9e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000da2:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000da6:	428b      	cmp	r3, r1
 8000da8:	bf24      	itt	cs
 8000daa:	1a5b      	subcs	r3, r3, r1
 8000dac:	ea40 000c 	orrcs.w	r0, r0, ip
 8000db0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000db4:	bf24      	itt	cs
 8000db6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000dba:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000dbe:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000dc2:	bf24      	itt	cs
 8000dc4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000dc8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000dcc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000dd0:	bf24      	itt	cs
 8000dd2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000dd6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000dda:	011b      	lsls	r3, r3, #4
 8000ddc:	bf18      	it	ne
 8000dde:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000de2:	d1e0      	bne.n	8000da6 <__aeabi_fdiv+0x46>
 8000de4:	2afd      	cmp	r2, #253	@ 0xfd
 8000de6:	f63f af50 	bhi.w	8000c8a <__aeabi_fmul+0x92>
 8000dea:	428b      	cmp	r3, r1
 8000dec:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000df0:	bf08      	it	eq
 8000df2:	f020 0001 	biceq.w	r0, r0, #1
 8000df6:	4770      	bx	lr
 8000df8:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000dfc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e00:	327f      	adds	r2, #127	@ 0x7f
 8000e02:	bfc2      	ittt	gt
 8000e04:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e08:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0c:	4770      	bxgt	lr
 8000e0e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e12:	f04f 0300 	mov.w	r3, #0
 8000e16:	3a01      	subs	r2, #1
 8000e18:	e737      	b.n	8000c8a <__aeabi_fmul+0x92>
 8000e1a:	f092 0f00 	teq	r2, #0
 8000e1e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e22:	bf02      	ittt	eq
 8000e24:	0040      	lsleq	r0, r0, #1
 8000e26:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e2a:	3a01      	subeq	r2, #1
 8000e2c:	d0f9      	beq.n	8000e22 <__aeabi_fdiv+0xc2>
 8000e2e:	ea40 000c 	orr.w	r0, r0, ip
 8000e32:	f093 0f00 	teq	r3, #0
 8000e36:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e3a:	bf02      	ittt	eq
 8000e3c:	0049      	lsleq	r1, r1, #1
 8000e3e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e42:	3b01      	subeq	r3, #1
 8000e44:	d0f9      	beq.n	8000e3a <__aeabi_fdiv+0xda>
 8000e46:	ea41 010c 	orr.w	r1, r1, ip
 8000e4a:	e795      	b.n	8000d78 <__aeabi_fdiv+0x18>
 8000e4c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e50:	ea92 0f0c 	teq	r2, ip
 8000e54:	d108      	bne.n	8000e68 <__aeabi_fdiv+0x108>
 8000e56:	0242      	lsls	r2, r0, #9
 8000e58:	f47f af7d 	bne.w	8000d56 <__aeabi_fmul+0x15e>
 8000e5c:	ea93 0f0c 	teq	r3, ip
 8000e60:	f47f af70 	bne.w	8000d44 <__aeabi_fmul+0x14c>
 8000e64:	4608      	mov	r0, r1
 8000e66:	e776      	b.n	8000d56 <__aeabi_fmul+0x15e>
 8000e68:	ea93 0f0c 	teq	r3, ip
 8000e6c:	d104      	bne.n	8000e78 <__aeabi_fdiv+0x118>
 8000e6e:	024b      	lsls	r3, r1, #9
 8000e70:	f43f af4c 	beq.w	8000d0c <__aeabi_fmul+0x114>
 8000e74:	4608      	mov	r0, r1
 8000e76:	e76e      	b.n	8000d56 <__aeabi_fmul+0x15e>
 8000e78:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e7c:	bf18      	it	ne
 8000e7e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e82:	d1ca      	bne.n	8000e1a <__aeabi_fdiv+0xba>
 8000e84:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000e88:	f47f af5c 	bne.w	8000d44 <__aeabi_fmul+0x14c>
 8000e8c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000e90:	f47f af3c 	bne.w	8000d0c <__aeabi_fmul+0x114>
 8000e94:	e75f      	b.n	8000d56 <__aeabi_fmul+0x15e>
 8000e96:	bf00      	nop

08000e98 <__gesf2>:
 8000e98:	f04f 3cff 	mov.w	ip, #4294967295
 8000e9c:	e006      	b.n	8000eac <__cmpsf2+0x4>
 8000e9e:	bf00      	nop

08000ea0 <__lesf2>:
 8000ea0:	f04f 0c01 	mov.w	ip, #1
 8000ea4:	e002      	b.n	8000eac <__cmpsf2+0x4>
 8000ea6:	bf00      	nop

08000ea8 <__cmpsf2>:
 8000ea8:	f04f 0c01 	mov.w	ip, #1
 8000eac:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000eb0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000eb4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000eb8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ebc:	bf18      	it	ne
 8000ebe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ec2:	d011      	beq.n	8000ee8 <__cmpsf2+0x40>
 8000ec4:	b001      	add	sp, #4
 8000ec6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000eca:	bf18      	it	ne
 8000ecc:	ea90 0f01 	teqne	r0, r1
 8000ed0:	bf58      	it	pl
 8000ed2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ed6:	bf88      	it	hi
 8000ed8:	17c8      	asrhi	r0, r1, #31
 8000eda:	bf38      	it	cc
 8000edc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ee0:	bf18      	it	ne
 8000ee2:	f040 0001 	orrne.w	r0, r0, #1
 8000ee6:	4770      	bx	lr
 8000ee8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000eec:	d102      	bne.n	8000ef4 <__cmpsf2+0x4c>
 8000eee:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ef2:	d105      	bne.n	8000f00 <__cmpsf2+0x58>
 8000ef4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ef8:	d1e4      	bne.n	8000ec4 <__cmpsf2+0x1c>
 8000efa:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000efe:	d0e1      	beq.n	8000ec4 <__cmpsf2+0x1c>
 8000f00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop

08000f08 <__aeabi_cfrcmple>:
 8000f08:	4684      	mov	ip, r0
 8000f0a:	4608      	mov	r0, r1
 8000f0c:	4661      	mov	r1, ip
 8000f0e:	e7ff      	b.n	8000f10 <__aeabi_cfcmpeq>

08000f10 <__aeabi_cfcmpeq>:
 8000f10:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f12:	f7ff ffc9 	bl	8000ea8 <__cmpsf2>
 8000f16:	2800      	cmp	r0, #0
 8000f18:	bf48      	it	mi
 8000f1a:	f110 0f00 	cmnmi.w	r0, #0
 8000f1e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f20 <__aeabi_fcmpeq>:
 8000f20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f24:	f7ff fff4 	bl	8000f10 <__aeabi_cfcmpeq>
 8000f28:	bf0c      	ite	eq
 8000f2a:	2001      	moveq	r0, #1
 8000f2c:	2000      	movne	r0, #0
 8000f2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f32:	bf00      	nop

08000f34 <__aeabi_fcmplt>:
 8000f34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f38:	f7ff ffea 	bl	8000f10 <__aeabi_cfcmpeq>
 8000f3c:	bf34      	ite	cc
 8000f3e:	2001      	movcc	r0, #1
 8000f40:	2000      	movcs	r0, #0
 8000f42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f46:	bf00      	nop

08000f48 <__aeabi_fcmple>:
 8000f48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f4c:	f7ff ffe0 	bl	8000f10 <__aeabi_cfcmpeq>
 8000f50:	bf94      	ite	ls
 8000f52:	2001      	movls	r0, #1
 8000f54:	2000      	movhi	r0, #0
 8000f56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f5a:	bf00      	nop

08000f5c <__aeabi_fcmpge>:
 8000f5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f60:	f7ff ffd2 	bl	8000f08 <__aeabi_cfrcmple>
 8000f64:	bf94      	ite	ls
 8000f66:	2001      	movls	r0, #1
 8000f68:	2000      	movhi	r0, #0
 8000f6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f6e:	bf00      	nop

08000f70 <__aeabi_fcmpgt>:
 8000f70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f74:	f7ff ffc8 	bl	8000f08 <__aeabi_cfrcmple>
 8000f78:	bf34      	ite	cc
 8000f7a:	2001      	movcc	r0, #1
 8000f7c:	2000      	movcs	r0, #0
 8000f7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f82:	bf00      	nop

08000f84 <__aeabi_f2uiz>:
 8000f84:	0042      	lsls	r2, r0, #1
 8000f86:	d20e      	bcs.n	8000fa6 <__aeabi_f2uiz+0x22>
 8000f88:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000f8c:	d30b      	bcc.n	8000fa6 <__aeabi_f2uiz+0x22>
 8000f8e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000f92:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f96:	d409      	bmi.n	8000fac <__aeabi_f2uiz+0x28>
 8000f98:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f9c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000fa0:	fa23 f002 	lsr.w	r0, r3, r2
 8000fa4:	4770      	bx	lr
 8000fa6:	f04f 0000 	mov.w	r0, #0
 8000faa:	4770      	bx	lr
 8000fac:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000fb0:	d101      	bne.n	8000fb6 <__aeabi_f2uiz+0x32>
 8000fb2:	0242      	lsls	r2, r0, #9
 8000fb4:	d102      	bne.n	8000fbc <__aeabi_f2uiz+0x38>
 8000fb6:	f04f 30ff 	mov.w	r0, #4294967295
 8000fba:	4770      	bx	lr
 8000fbc:	f04f 0000 	mov.w	r0, #0
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop

08000fc4 <Motor_Init>:
#include "dc_motor.h"

uint32_t pwm_freq;

Motor_t* Motor_Init(Motor_Handle_t handle)
{
 8000fc4:	b590      	push	{r4, r7, lr}
 8000fc6:	b087      	sub	sp, #28
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	463c      	mov	r4, r7
 8000fcc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    Motor_t *object = calloc(1, sizeof(Motor_t));
 8000fd0:	2110      	movs	r1, #16
 8000fd2:	2001      	movs	r0, #1
 8000fd4:	f00b fd9e 	bl	800cb14 <calloc>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	617b      	str	r3, [r7, #20]

    object->direction = DIRECTION_FORWARD;
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	2201      	movs	r2, #1
 8000fe0:	701a      	strb	r2, [r3, #0]
    object->pwm_duty = 0;
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	705a      	strb	r2, [r3, #1]

    object->pwm_channel = handle.pwm_channel;
 8000fe8:	683a      	ldr	r2, [r7, #0]
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	605a      	str	r2, [r3, #4]
    object->direction_port = handle.direction_port;
 8000fee:	687a      	ldr	r2, [r7, #4]
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	609a      	str	r2, [r3, #8]
    object->direction_pin_A = handle.direction_pin_A;
 8000ff4:	893a      	ldrh	r2, [r7, #8]
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	819a      	strh	r2, [r3, #12]
    object->direction_pin_B = handle.direction_pin_B;
 8000ffa:	897a      	ldrh	r2, [r7, #10]
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	81da      	strh	r2, [r3, #14]

    pwm_freq = handle.pwm_frequency;
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	4a08      	ldr	r2, [pc, #32]	@ (8001024 <Motor_Init+0x60>)
 8001004:	6013      	str	r3, [r2, #0]

    // Duty cycle Setting
    Motor_Set_PWM_Duty(object, 0);
 8001006:	2100      	movs	r1, #0
 8001008:	6978      	ldr	r0, [r7, #20]
 800100a:	f000 f833 	bl	8001074 <Motor_Set_PWM_Duty>
    // Frequency Setting
    Motor_Set_PWM_Frequency(pwm_freq);
 800100e:	4b05      	ldr	r3, [pc, #20]	@ (8001024 <Motor_Init+0x60>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4618      	mov	r0, r3
 8001014:	f000 f808 	bl	8001028 <Motor_Set_PWM_Frequency>

    return object;
 8001018:	697b      	ldr	r3, [r7, #20]
}
 800101a:	4618      	mov	r0, r3
 800101c:	371c      	adds	r7, #28
 800101e:	46bd      	mov	sp, r7
 8001020:	bd90      	pop	{r4, r7, pc}
 8001022:	bf00      	nop
 8001024:	20000084 	.word	0x20000084

08001028 <Motor_Set_PWM_Frequency>:

status_t Motor_Set_PWM_Frequency(uint32_t freq)
{
 8001028:	b480      	push	{r7}
 800102a:	b085      	sub	sp, #20
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
    // The PWM frequency depends on: The clock frequency, the ARR value, the PSC value. 
    //              PWM frequency = Clock frequency / [ (ARR + 1) * (PSC + 1) ]
    pwm_freq = freq;
 8001030:	4a0d      	ldr	r2, [pc, #52]	@ (8001068 <Motor_Set_PWM_Frequency+0x40>)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6013      	str	r3, [r2, #0]

    uint32_t tim_arr_val = __HAL_TIM_GET_AUTORELOAD(&htim_motor);
 8001036:	4b0d      	ldr	r3, [pc, #52]	@ (800106c <Motor_Set_PWM_Frequency+0x44>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800103c:	60fb      	str	r3, [r7, #12]
    uint32_t tim_psc_val = (uint32_t)(DEFAULT_CLOCK_FREQ / (pwm_freq * (tim_arr_val + 1)) - 1);
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	3301      	adds	r3, #1
 8001042:	4a09      	ldr	r2, [pc, #36]	@ (8001068 <Motor_Set_PWM_Frequency+0x40>)
 8001044:	6812      	ldr	r2, [r2, #0]
 8001046:	fb02 f303 	mul.w	r3, r2, r3
 800104a:	4a09      	ldr	r2, [pc, #36]	@ (8001070 <Motor_Set_PWM_Frequency+0x48>)
 800104c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001050:	3b01      	subs	r3, #1
 8001052:	60bb      	str	r3, [r7, #8]

    __HAL_TIM_SET_PRESCALER(&htim_motor, tim_psc_val);
 8001054:	4b05      	ldr	r3, [pc, #20]	@ (800106c <Motor_Set_PWM_Frequency+0x44>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	68ba      	ldr	r2, [r7, #8]
 800105a:	629a      	str	r2, [r3, #40]	@ 0x28
    
    return STATUS_OK;
 800105c:	2300      	movs	r3, #0
}
 800105e:	4618      	mov	r0, r3
 8001060:	3714      	adds	r7, #20
 8001062:	46bd      	mov	sp, r7
 8001064:	bc80      	pop	{r7}
 8001066:	4770      	bx	lr
 8001068:	20000084 	.word	0x20000084
 800106c:	200000dc 	.word	0x200000dc
 8001070:	007a1200 	.word	0x007a1200

08001074 <Motor_Set_PWM_Duty>:

status_t Motor_Set_PWM_Duty(Motor_t *motor, uint8_t duty)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b086      	sub	sp, #24
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	460b      	mov	r3, r1
 800107e:	70fb      	strb	r3, [r7, #3]
    motor->pwm_duty = (motor->direction == DIRECTION_FORWARD) ? duty :
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	f993 3000 	ldrsb.w	r3, [r3]
 8001086:	2b01      	cmp	r3, #1
 8001088:	d00b      	beq.n	80010a2 <Motor_Set_PWM_Duty+0x2e>
                      (motor->direction == DIRECTION_BACKWARD) ? (255-duty) : 0;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	f993 3000 	ldrsb.w	r3, [r3]
    motor->pwm_duty = (motor->direction == DIRECTION_FORWARD) ? duty :
 8001090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001094:	d103      	bne.n	800109e <Motor_Set_PWM_Duty+0x2a>
 8001096:	78fb      	ldrb	r3, [r7, #3]
 8001098:	43db      	mvns	r3, r3
 800109a:	b2db      	uxtb	r3, r3
 800109c:	e002      	b.n	80010a4 <Motor_Set_PWM_Duty+0x30>
 800109e:	2300      	movs	r3, #0
 80010a0:	e000      	b.n	80010a4 <Motor_Set_PWM_Duty+0x30>
 80010a2:	78fb      	ldrb	r3, [r7, #3]
 80010a4:	687a      	ldr	r2, [r7, #4]
 80010a6:	7053      	strb	r3, [r2, #1]

    float duty_percentage = duty / 255.0f;
 80010a8:	78fb      	ldrb	r3, [r7, #3]
 80010aa:	4618      	mov	r0, r3
 80010ac:	f7ff fd50 	bl	8000b50 <__aeabi_i2f>
 80010b0:	4603      	mov	r3, r0
 80010b2:	491e      	ldr	r1, [pc, #120]	@ (800112c <Motor_Set_PWM_Duty+0xb8>)
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff fe53 	bl	8000d60 <__aeabi_fdiv>
 80010ba:	4603      	mov	r3, r0
 80010bc:	617b      	str	r3, [r7, #20]

    uint32_t tim_arr_val = __HAL_TIM_GET_AUTORELOAD(&htim_motor);
 80010be:	4b1c      	ldr	r3, [pc, #112]	@ (8001130 <Motor_Set_PWM_Duty+0xbc>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010c4:	613b      	str	r3, [r7, #16]
    uint32_t tim_ccr_val = (uint32_t)(duty_percentage * tim_arr_val);
 80010c6:	6938      	ldr	r0, [r7, #16]
 80010c8:	f7ff fd3e 	bl	8000b48 <__aeabi_ui2f>
 80010cc:	4603      	mov	r3, r0
 80010ce:	6979      	ldr	r1, [r7, #20]
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff fd91 	bl	8000bf8 <__aeabi_fmul>
 80010d6:	4603      	mov	r3, r0
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff ff53 	bl	8000f84 <__aeabi_f2uiz>
 80010de:	4603      	mov	r3, r0
 80010e0:	60fb      	str	r3, [r7, #12]

    __HAL_TIM_SET_COMPARE(&htim_motor, motor->pwm_channel, tim_ccr_val);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d104      	bne.n	80010f4 <Motor_Set_PWM_Duty+0x80>
 80010ea:	4b11      	ldr	r3, [pc, #68]	@ (8001130 <Motor_Set_PWM_Duty+0xbc>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	68fa      	ldr	r2, [r7, #12]
 80010f0:	635a      	str	r2, [r3, #52]	@ 0x34
 80010f2:	e015      	b.n	8001120 <Motor_Set_PWM_Duty+0xac>
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	2b04      	cmp	r3, #4
 80010fa:	d104      	bne.n	8001106 <Motor_Set_PWM_Duty+0x92>
 80010fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001130 <Motor_Set_PWM_Duty+0xbc>)
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	6393      	str	r3, [r2, #56]	@ 0x38
 8001104:	e00c      	b.n	8001120 <Motor_Set_PWM_Duty+0xac>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	2b08      	cmp	r3, #8
 800110c:	d104      	bne.n	8001118 <Motor_Set_PWM_Duty+0xa4>
 800110e:	4b08      	ldr	r3, [pc, #32]	@ (8001130 <Motor_Set_PWM_Duty+0xbc>)
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001116:	e003      	b.n	8001120 <Motor_Set_PWM_Duty+0xac>
 8001118:	4b05      	ldr	r3, [pc, #20]	@ (8001130 <Motor_Set_PWM_Duty+0xbc>)
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	6413      	str	r3, [r2, #64]	@ 0x40

    return STATUS_OK;
 8001120:	2300      	movs	r3, #0
}
 8001122:	4618      	mov	r0, r3
 8001124:	3718      	adds	r7, #24
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	437f0000 	.word	0x437f0000
 8001130:	200000dc 	.word	0x200000dc

08001134 <Motor_SetDirection>:

    return STATUS_OK;
}

status_t Motor_SetDirection(Motor_t *motor, int8_t direction)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	460b      	mov	r3, r1
 800113e:	70fb      	strb	r3, [r7, #3]
    if (direction == DIRECTION_FORWARD)
 8001140:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001144:	2b01      	cmp	r3, #1
 8001146:	d107      	bne.n	8001158 <Motor_SetDirection+0x24>
    {
        HAL_GPIO_WritePin(motor->direction_port, motor->direction_pin_A, GPIO_PIN_RESET);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6898      	ldr	r0, [r3, #8]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	899b      	ldrh	r3, [r3, #12]
 8001150:	2200      	movs	r2, #0
 8001152:	4619      	mov	r1, r3
 8001154:	f008 fe0e 	bl	8009d74 <HAL_GPIO_WritePin>
        // HAL_GPIO_WritePin(motor->direction_port, motor->direction_pin_B, GPIO_PIN_RESET);
    }
    if (direction == DIRECTION_BACKWARD)
 8001158:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800115c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001160:	d107      	bne.n	8001172 <Motor_SetDirection+0x3e>
    {
        HAL_GPIO_WritePin(motor->direction_port, motor->direction_pin_A, GPIO_PIN_SET);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6898      	ldr	r0, [r3, #8]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	899b      	ldrh	r3, [r3, #12]
 800116a:	2201      	movs	r2, #1
 800116c:	4619      	mov	r1, r3
 800116e:	f008 fe01 	bl	8009d74 <HAL_GPIO_WritePin>
        // HAL_GPIO_WritePin(motor->direction_port, motor->direction_pin_B, GPIO_PIN_SET);
    }

    return STATUS_OK;
 8001172:	2300      	movs	r3, #0
}
 8001174:	4618      	mov	r0, r3
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}

0800117c <Encoder_Init>:
#include "encoder.h"

Encoder_t* Encoder_Init(Encoder_Handle_t handle)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	463b      	mov	r3, r7
 8001184:	e883 0003 	stmia.w	r3, {r0, r1}
    Encoder_t* object = calloc(1, sizeof(Encoder_t));
 8001188:	210c      	movs	r1, #12
 800118a:	2001      	movs	r0, #1
 800118c:	f00b fcc2 	bl	800cb14 <calloc>
 8001190:	4603      	mov	r3, r0
 8001192:	60fb      	str	r3, [r7, #12]

    object->tick = 0;
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	2200      	movs	r2, #0
 8001198:	801a      	strh	r2, [r3, #0]
    object->max_count = handle.max_count;
 800119a:	683a      	ldr	r2, [r7, #0]
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	605a      	str	r2, [r3, #4]
    object->tick_read_channel = handle.tick_read_channel;
 80011a0:	88bb      	ldrh	r3, [r7, #4]
 80011a2:	461a      	mov	r2, r3
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	609a      	str	r2, [r3, #8]

    return object;
 80011a8:	68fb      	ldr	r3, [r7, #12]
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3710      	adds	r7, #16
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011b2:	b580      	push	{r7, lr}
 80011b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011b6:	f008 f847 	bl	8009248 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011ba:	f000 f811 	bl	80011e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011be:	f000 fa1f 	bl	8001600 <MX_GPIO_Init>
  MX_DMA_Init();
 80011c2:	f000 f9f7 	bl	80015b4 <MX_DMA_Init>
  MX_I2C1_Init();
 80011c6:	f000 f847 	bl	8001258 <MX_I2C1_Init>
  MX_TIM1_Init();
 80011ca:	f000 f873 	bl	80012b4 <MX_TIM1_Init>
  MX_TIM3_Init();
 80011ce:	f000 f935 	bl	800143c <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80011d2:	f000 f9c5 	bl	8001560 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  setup();
 80011d6:	f006 fd67 	bl	8007ca8 <setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  loop();
 80011da:	f006 fd9d 	bl	8007d18 <loop>
 80011de:	e7fc      	b.n	80011da <main+0x28>

080011e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b090      	sub	sp, #64	@ 0x40
 80011e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011e6:	f107 0318 	add.w	r3, r7, #24
 80011ea:	2228      	movs	r2, #40	@ 0x28
 80011ec:	2100      	movs	r1, #0
 80011ee:	4618      	mov	r0, r3
 80011f0:	f00b fd90 	bl	800cd14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011f4:	1d3b      	adds	r3, r7, #4
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]
 80011fa:	605a      	str	r2, [r3, #4]
 80011fc:	609a      	str	r2, [r3, #8]
 80011fe:	60da      	str	r2, [r3, #12]
 8001200:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001202:	2302      	movs	r3, #2
 8001204:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001206:	2301      	movs	r3, #1
 8001208:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800120a:	2310      	movs	r3, #16
 800120c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800120e:	2300      	movs	r3, #0
 8001210:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001212:	f107 0318 	add.w	r3, r7, #24
 8001216:	4618      	mov	r0, r3
 8001218:	f008 ff22 	bl	800a060 <HAL_RCC_OscConfig>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001222:	f000 fa5b 	bl	80016dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001226:	230f      	movs	r3, #15
 8001228:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800122a:	2300      	movs	r3, #0
 800122c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800122e:	2300      	movs	r3, #0
 8001230:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001232:	2300      	movs	r3, #0
 8001234:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001236:	2300      	movs	r3, #0
 8001238:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800123a:	1d3b      	adds	r3, r7, #4
 800123c:	2100      	movs	r1, #0
 800123e:	4618      	mov	r0, r3
 8001240:	f009 f990 	bl	800a564 <HAL_RCC_ClockConfig>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800124a:	f000 fa47 	bl	80016dc <Error_Handler>
  }
}
 800124e:	bf00      	nop
 8001250:	3740      	adds	r7, #64	@ 0x40
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
	...

08001258 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800125c:	4b12      	ldr	r3, [pc, #72]	@ (80012a8 <MX_I2C1_Init+0x50>)
 800125e:	4a13      	ldr	r2, [pc, #76]	@ (80012ac <MX_I2C1_Init+0x54>)
 8001260:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001262:	4b11      	ldr	r3, [pc, #68]	@ (80012a8 <MX_I2C1_Init+0x50>)
 8001264:	4a12      	ldr	r2, [pc, #72]	@ (80012b0 <MX_I2C1_Init+0x58>)
 8001266:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001268:	4b0f      	ldr	r3, [pc, #60]	@ (80012a8 <MX_I2C1_Init+0x50>)
 800126a:	2200      	movs	r2, #0
 800126c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800126e:	4b0e      	ldr	r3, [pc, #56]	@ (80012a8 <MX_I2C1_Init+0x50>)
 8001270:	2200      	movs	r2, #0
 8001272:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001274:	4b0c      	ldr	r3, [pc, #48]	@ (80012a8 <MX_I2C1_Init+0x50>)
 8001276:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800127a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800127c:	4b0a      	ldr	r3, [pc, #40]	@ (80012a8 <MX_I2C1_Init+0x50>)
 800127e:	2200      	movs	r2, #0
 8001280:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001282:	4b09      	ldr	r3, [pc, #36]	@ (80012a8 <MX_I2C1_Init+0x50>)
 8001284:	2200      	movs	r2, #0
 8001286:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001288:	4b07      	ldr	r3, [pc, #28]	@ (80012a8 <MX_I2C1_Init+0x50>)
 800128a:	2200      	movs	r2, #0
 800128c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800128e:	4b06      	ldr	r3, [pc, #24]	@ (80012a8 <MX_I2C1_Init+0x50>)
 8001290:	2200      	movs	r2, #0
 8001292:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001294:	4804      	ldr	r0, [pc, #16]	@ (80012a8 <MX_I2C1_Init+0x50>)
 8001296:	f008 fd9f 	bl	8009dd8 <HAL_I2C_Init>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012a0:	f000 fa1c 	bl	80016dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012a4:	bf00      	nop
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	20000088 	.word	0x20000088
 80012ac:	40005400 	.word	0x40005400
 80012b0:	00061a80 	.word	0x00061a80

080012b4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b096      	sub	sp, #88	@ 0x58
 80012b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ba:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80012be:	2200      	movs	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]
 80012c2:	605a      	str	r2, [r3, #4]
 80012c4:	609a      	str	r2, [r3, #8]
 80012c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012c8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	605a      	str	r2, [r3, #4]
 80012dc:	609a      	str	r2, [r3, #8]
 80012de:	60da      	str	r2, [r3, #12]
 80012e0:	611a      	str	r2, [r3, #16]
 80012e2:	615a      	str	r2, [r3, #20]
 80012e4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012e6:	1d3b      	adds	r3, r7, #4
 80012e8:	2220      	movs	r2, #32
 80012ea:	2100      	movs	r1, #0
 80012ec:	4618      	mov	r0, r3
 80012ee:	f00b fd11 	bl	800cd14 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim_motor.Instance = TIM1;
 80012f2:	4b50      	ldr	r3, [pc, #320]	@ (8001434 <MX_TIM1_Init+0x180>)
 80012f4:	4a50      	ldr	r2, [pc, #320]	@ (8001438 <MX_TIM1_Init+0x184>)
 80012f6:	601a      	str	r2, [r3, #0]
  htim_motor.Init.Prescaler = 8 - 1;
 80012f8:	4b4e      	ldr	r3, [pc, #312]	@ (8001434 <MX_TIM1_Init+0x180>)
 80012fa:	2207      	movs	r2, #7
 80012fc:	605a      	str	r2, [r3, #4]
  htim_motor.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012fe:	4b4d      	ldr	r3, [pc, #308]	@ (8001434 <MX_TIM1_Init+0x180>)
 8001300:	2200      	movs	r2, #0
 8001302:	609a      	str	r2, [r3, #8]
  htim_motor.Init.Period = 1000;
 8001304:	4b4b      	ldr	r3, [pc, #300]	@ (8001434 <MX_TIM1_Init+0x180>)
 8001306:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800130a:	60da      	str	r2, [r3, #12]
  htim_motor.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800130c:	4b49      	ldr	r3, [pc, #292]	@ (8001434 <MX_TIM1_Init+0x180>)
 800130e:	2200      	movs	r2, #0
 8001310:	611a      	str	r2, [r3, #16]
  htim_motor.Init.RepetitionCounter = 0;
 8001312:	4b48      	ldr	r3, [pc, #288]	@ (8001434 <MX_TIM1_Init+0x180>)
 8001314:	2200      	movs	r2, #0
 8001316:	615a      	str	r2, [r3, #20]
  htim_motor.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001318:	4b46      	ldr	r3, [pc, #280]	@ (8001434 <MX_TIM1_Init+0x180>)
 800131a:	2200      	movs	r2, #0
 800131c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim_motor) != HAL_OK)
 800131e:	4845      	ldr	r0, [pc, #276]	@ (8001434 <MX_TIM1_Init+0x180>)
 8001320:	f009 faae 	bl	800a880 <HAL_TIM_Base_Init>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800132a:	f000 f9d7 	bl	80016dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800132e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001332:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim_motor, &sClockSourceConfig) != HAL_OK)
 8001334:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001338:	4619      	mov	r1, r3
 800133a:	483e      	ldr	r0, [pc, #248]	@ (8001434 <MX_TIM1_Init+0x180>)
 800133c:	f009 fea8 	bl	800b090 <HAL_TIM_ConfigClockSource>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001346:	f000 f9c9 	bl	80016dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim_motor) != HAL_OK)
 800134a:	483a      	ldr	r0, [pc, #232]	@ (8001434 <MX_TIM1_Init+0x180>)
 800134c:	f009 fae7 	bl	800a91e <HAL_TIM_PWM_Init>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001356:	f000 f9c1 	bl	80016dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800135a:	2300      	movs	r3, #0
 800135c:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800135e:	2300      	movs	r3, #0
 8001360:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim_motor, &sMasterConfig) != HAL_OK)
 8001362:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001366:	4619      	mov	r1, r3
 8001368:	4832      	ldr	r0, [pc, #200]	@ (8001434 <MX_TIM1_Init+0x180>)
 800136a:	f00a fb2f 	bl	800b9cc <HAL_TIMEx_MasterConfigSynchronization>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001374:	f000 f9b2 	bl	80016dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001378:	2360      	movs	r3, #96	@ 0x60
 800137a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800137c:	2300      	movs	r3, #0
 800137e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001380:	2300      	movs	r3, #0
 8001382:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001384:	2300      	movs	r3, #0
 8001386:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001388:	2300      	movs	r3, #0
 800138a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800138c:	2300      	movs	r3, #0
 800138e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001390:	2300      	movs	r3, #0
 8001392:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim_motor, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001394:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001398:	2200      	movs	r2, #0
 800139a:	4619      	mov	r1, r3
 800139c:	4825      	ldr	r0, [pc, #148]	@ (8001434 <MX_TIM1_Init+0x180>)
 800139e:	f009 fdb5 	bl	800af0c <HAL_TIM_PWM_ConfigChannel>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80013a8:	f000 f998 	bl	80016dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim_motor, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013b0:	2204      	movs	r2, #4
 80013b2:	4619      	mov	r1, r3
 80013b4:	481f      	ldr	r0, [pc, #124]	@ (8001434 <MX_TIM1_Init+0x180>)
 80013b6:	f009 fda9 	bl	800af0c <HAL_TIM_PWM_ConfigChannel>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80013c0:	f000 f98c 	bl	80016dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim_motor, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80013c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013c8:	2208      	movs	r2, #8
 80013ca:	4619      	mov	r1, r3
 80013cc:	4819      	ldr	r0, [pc, #100]	@ (8001434 <MX_TIM1_Init+0x180>)
 80013ce:	f009 fd9d 	bl	800af0c <HAL_TIM_PWM_ConfigChannel>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80013d8:	f000 f980 	bl	80016dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim_motor, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80013dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013e0:	220c      	movs	r2, #12
 80013e2:	4619      	mov	r1, r3
 80013e4:	4813      	ldr	r0, [pc, #76]	@ (8001434 <MX_TIM1_Init+0x180>)
 80013e6:	f009 fd91 	bl	800af0c <HAL_TIM_PWM_ConfigChannel>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80013f0:	f000 f974 	bl	80016dc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013f4:	2300      	movs	r3, #0
 80013f6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80013f8:	2300      	movs	r3, #0
 80013fa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013fc:	2300      	movs	r3, #0
 80013fe:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001400:	2300      	movs	r3, #0
 8001402:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001404:	2300      	movs	r3, #0
 8001406:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001408:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800140c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800140e:	2300      	movs	r3, #0
 8001410:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim_motor, &sBreakDeadTimeConfig) != HAL_OK)
 8001412:	1d3b      	adds	r3, r7, #4
 8001414:	4619      	mov	r1, r3
 8001416:	4807      	ldr	r0, [pc, #28]	@ (8001434 <MX_TIM1_Init+0x180>)
 8001418:	f00a fb36 	bl	800ba88 <HAL_TIMEx_ConfigBreakDeadTime>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8001422:	f000 f95b 	bl	80016dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim_motor);
 8001426:	4803      	ldr	r0, [pc, #12]	@ (8001434 <MX_TIM1_Init+0x180>)
 8001428:	f007 fd40 	bl	8008eac <HAL_TIM_MspPostInit>

}
 800142c:	bf00      	nop
 800142e:	3758      	adds	r7, #88	@ 0x58
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	200000dc 	.word	0x200000dc
 8001438:	40012c00 	.word	0x40012c00

0800143c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b08a      	sub	sp, #40	@ 0x28
 8001440:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001442:	f107 0318 	add.w	r3, r7, #24
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	605a      	str	r2, [r3, #4]
 800144c:	609a      	str	r2, [r3, #8]
 800144e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001450:	f107 0310 	add.w	r3, r7, #16
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800145a:	463b      	mov	r3, r7
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	605a      	str	r2, [r3, #4]
 8001462:	609a      	str	r2, [r3, #8]
 8001464:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim_encoder.Instance = TIM3;
 8001466:	4b3c      	ldr	r3, [pc, #240]	@ (8001558 <MX_TIM3_Init+0x11c>)
 8001468:	4a3c      	ldr	r2, [pc, #240]	@ (800155c <MX_TIM3_Init+0x120>)
 800146a:	601a      	str	r2, [r3, #0]
  htim_encoder.Init.Prescaler = 0;
 800146c:	4b3a      	ldr	r3, [pc, #232]	@ (8001558 <MX_TIM3_Init+0x11c>)
 800146e:	2200      	movs	r2, #0
 8001470:	605a      	str	r2, [r3, #4]
  htim_encoder.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001472:	4b39      	ldr	r3, [pc, #228]	@ (8001558 <MX_TIM3_Init+0x11c>)
 8001474:	2200      	movs	r2, #0
 8001476:	609a      	str	r2, [r3, #8]
  htim_encoder.Init.Period = 65535;
 8001478:	4b37      	ldr	r3, [pc, #220]	@ (8001558 <MX_TIM3_Init+0x11c>)
 800147a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800147e:	60da      	str	r2, [r3, #12]
  htim_encoder.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001480:	4b35      	ldr	r3, [pc, #212]	@ (8001558 <MX_TIM3_Init+0x11c>)
 8001482:	2200      	movs	r2, #0
 8001484:	611a      	str	r2, [r3, #16]
  htim_encoder.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001486:	4b34      	ldr	r3, [pc, #208]	@ (8001558 <MX_TIM3_Init+0x11c>)
 8001488:	2200      	movs	r2, #0
 800148a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim_encoder) != HAL_OK)
 800148c:	4832      	ldr	r0, [pc, #200]	@ (8001558 <MX_TIM3_Init+0x11c>)
 800148e:	f009 f9f7 	bl	800a880 <HAL_TIM_Base_Init>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8001498:	f000 f920 	bl	80016dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800149c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014a0:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim_encoder, &sClockSourceConfig) != HAL_OK)
 80014a2:	f107 0318 	add.w	r3, r7, #24
 80014a6:	4619      	mov	r1, r3
 80014a8:	482b      	ldr	r0, [pc, #172]	@ (8001558 <MX_TIM3_Init+0x11c>)
 80014aa:	f009 fdf1 	bl	800b090 <HAL_TIM_ConfigClockSource>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80014b4:	f000 f912 	bl	80016dc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim_encoder) != HAL_OK)
 80014b8:	4827      	ldr	r0, [pc, #156]	@ (8001558 <MX_TIM3_Init+0x11c>)
 80014ba:	f009 fb2b 	bl	800ab14 <HAL_TIM_IC_Init>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80014c4:	f000 f90a 	bl	80016dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014c8:	2300      	movs	r3, #0
 80014ca:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014cc:	2300      	movs	r3, #0
 80014ce:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim_encoder, &sMasterConfig) != HAL_OK)
 80014d0:	f107 0310 	add.w	r3, r7, #16
 80014d4:	4619      	mov	r1, r3
 80014d6:	4820      	ldr	r0, [pc, #128]	@ (8001558 <MX_TIM3_Init+0x11c>)
 80014d8:	f00a fa78 	bl	800b9cc <HAL_TIMEx_MasterConfigSynchronization>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 80014e2:	f000 f8fb 	bl	80016dc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80014e6:	2300      	movs	r3, #0
 80014e8:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80014ea:	2301      	movs	r3, #1
 80014ec:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80014ee:	2300      	movs	r3, #0
 80014f0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80014f2:	2300      	movs	r3, #0
 80014f4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim_encoder, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80014f6:	463b      	mov	r3, r7
 80014f8:	2200      	movs	r2, #0
 80014fa:	4619      	mov	r1, r3
 80014fc:	4816      	ldr	r0, [pc, #88]	@ (8001558 <MX_TIM3_Init+0x11c>)
 80014fe:	f009 fc69 	bl	800add4 <HAL_TIM_IC_ConfigChannel>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8001508:	f000 f8e8 	bl	80016dc <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim_encoder, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800150c:	463b      	mov	r3, r7
 800150e:	2204      	movs	r2, #4
 8001510:	4619      	mov	r1, r3
 8001512:	4811      	ldr	r0, [pc, #68]	@ (8001558 <MX_TIM3_Init+0x11c>)
 8001514:	f009 fc5e 	bl	800add4 <HAL_TIM_IC_ConfigChannel>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 800151e:	f000 f8dd 	bl	80016dc <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim_encoder, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001522:	463b      	mov	r3, r7
 8001524:	2208      	movs	r2, #8
 8001526:	4619      	mov	r1, r3
 8001528:	480b      	ldr	r0, [pc, #44]	@ (8001558 <MX_TIM3_Init+0x11c>)
 800152a:	f009 fc53 	bl	800add4 <HAL_TIM_IC_ConfigChannel>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_TIM3_Init+0xfc>
  {
    Error_Handler();
 8001534:	f000 f8d2 	bl	80016dc <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim_encoder, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001538:	463b      	mov	r3, r7
 800153a:	220c      	movs	r2, #12
 800153c:	4619      	mov	r1, r3
 800153e:	4806      	ldr	r0, [pc, #24]	@ (8001558 <MX_TIM3_Init+0x11c>)
 8001540:	f009 fc48 	bl	800add4 <HAL_TIM_IC_ConfigChannel>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_TIM3_Init+0x112>
  {
    Error_Handler();
 800154a:	f000 f8c7 	bl	80016dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800154e:	bf00      	nop
 8001550:	3728      	adds	r7, #40	@ 0x28
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	20000124 	.word	0x20000124
 800155c:	40000400 	.word	0x40000400

08001560 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart_rosserial.Instance = USART1;
 8001564:	4b11      	ldr	r3, [pc, #68]	@ (80015ac <MX_USART1_UART_Init+0x4c>)
 8001566:	4a12      	ldr	r2, [pc, #72]	@ (80015b0 <MX_USART1_UART_Init+0x50>)
 8001568:	601a      	str	r2, [r3, #0]
  huart_rosserial.Init.BaudRate = 57600;
 800156a:	4b10      	ldr	r3, [pc, #64]	@ (80015ac <MX_USART1_UART_Init+0x4c>)
 800156c:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 8001570:	605a      	str	r2, [r3, #4]
  huart_rosserial.Init.WordLength = UART_WORDLENGTH_8B;
 8001572:	4b0e      	ldr	r3, [pc, #56]	@ (80015ac <MX_USART1_UART_Init+0x4c>)
 8001574:	2200      	movs	r2, #0
 8001576:	609a      	str	r2, [r3, #8]
  huart_rosserial.Init.StopBits = UART_STOPBITS_1;
 8001578:	4b0c      	ldr	r3, [pc, #48]	@ (80015ac <MX_USART1_UART_Init+0x4c>)
 800157a:	2200      	movs	r2, #0
 800157c:	60da      	str	r2, [r3, #12]
  huart_rosserial.Init.Parity = UART_PARITY_NONE;
 800157e:	4b0b      	ldr	r3, [pc, #44]	@ (80015ac <MX_USART1_UART_Init+0x4c>)
 8001580:	2200      	movs	r2, #0
 8001582:	611a      	str	r2, [r3, #16]
  huart_rosserial.Init.Mode = UART_MODE_TX_RX;
 8001584:	4b09      	ldr	r3, [pc, #36]	@ (80015ac <MX_USART1_UART_Init+0x4c>)
 8001586:	220c      	movs	r2, #12
 8001588:	615a      	str	r2, [r3, #20]
  huart_rosserial.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800158a:	4b08      	ldr	r3, [pc, #32]	@ (80015ac <MX_USART1_UART_Init+0x4c>)
 800158c:	2200      	movs	r2, #0
 800158e:	619a      	str	r2, [r3, #24]
  huart_rosserial.Init.OverSampling = UART_OVERSAMPLING_16;
 8001590:	4b06      	ldr	r3, [pc, #24]	@ (80015ac <MX_USART1_UART_Init+0x4c>)
 8001592:	2200      	movs	r2, #0
 8001594:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart_rosserial) != HAL_OK)
 8001596:	4805      	ldr	r0, [pc, #20]	@ (80015ac <MX_USART1_UART_Init+0x4c>)
 8001598:	f00a fad9 	bl	800bb4e <HAL_UART_Init>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80015a2:	f000 f89b 	bl	80016dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015a6:	bf00      	nop
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	2000016c 	.word	0x2000016c
 80015b0:	40013800 	.word	0x40013800

080015b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015ba:	4b10      	ldr	r3, [pc, #64]	@ (80015fc <MX_DMA_Init+0x48>)
 80015bc:	695b      	ldr	r3, [r3, #20]
 80015be:	4a0f      	ldr	r2, [pc, #60]	@ (80015fc <MX_DMA_Init+0x48>)
 80015c0:	f043 0301 	orr.w	r3, r3, #1
 80015c4:	6153      	str	r3, [r2, #20]
 80015c6:	4b0d      	ldr	r3, [pc, #52]	@ (80015fc <MX_DMA_Init+0x48>)
 80015c8:	695b      	ldr	r3, [r3, #20]
 80015ca:	f003 0301 	and.w	r3, r3, #1
 80015ce:	607b      	str	r3, [r7, #4]
 80015d0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80015d2:	2200      	movs	r2, #0
 80015d4:	2100      	movs	r1, #0
 80015d6:	200e      	movs	r0, #14
 80015d8:	f007 ff6f 	bl	80094ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80015dc:	200e      	movs	r0, #14
 80015de:	f007 ff88 	bl	80094f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80015e2:	2200      	movs	r2, #0
 80015e4:	2100      	movs	r1, #0
 80015e6:	200f      	movs	r0, #15
 80015e8:	f007 ff67 	bl	80094ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80015ec:	200f      	movs	r0, #15
 80015ee:	f007 ff80 	bl	80094f2 <HAL_NVIC_EnableIRQ>

}
 80015f2:	bf00      	nop
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	40021000 	.word	0x40021000

08001600 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b088      	sub	sp, #32
 8001604:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001606:	f107 0310 	add.w	r3, r7, #16
 800160a:	2200      	movs	r2, #0
 800160c:	601a      	str	r2, [r3, #0]
 800160e:	605a      	str	r2, [r3, #4]
 8001610:	609a      	str	r2, [r3, #8]
 8001612:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001614:	4b2e      	ldr	r3, [pc, #184]	@ (80016d0 <MX_GPIO_Init+0xd0>)
 8001616:	699b      	ldr	r3, [r3, #24]
 8001618:	4a2d      	ldr	r2, [pc, #180]	@ (80016d0 <MX_GPIO_Init+0xd0>)
 800161a:	f043 0310 	orr.w	r3, r3, #16
 800161e:	6193      	str	r3, [r2, #24]
 8001620:	4b2b      	ldr	r3, [pc, #172]	@ (80016d0 <MX_GPIO_Init+0xd0>)
 8001622:	699b      	ldr	r3, [r3, #24]
 8001624:	f003 0310 	and.w	r3, r3, #16
 8001628:	60fb      	str	r3, [r7, #12]
 800162a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800162c:	4b28      	ldr	r3, [pc, #160]	@ (80016d0 <MX_GPIO_Init+0xd0>)
 800162e:	699b      	ldr	r3, [r3, #24]
 8001630:	4a27      	ldr	r2, [pc, #156]	@ (80016d0 <MX_GPIO_Init+0xd0>)
 8001632:	f043 0320 	orr.w	r3, r3, #32
 8001636:	6193      	str	r3, [r2, #24]
 8001638:	4b25      	ldr	r3, [pc, #148]	@ (80016d0 <MX_GPIO_Init+0xd0>)
 800163a:	699b      	ldr	r3, [r3, #24]
 800163c:	f003 0320 	and.w	r3, r3, #32
 8001640:	60bb      	str	r3, [r7, #8]
 8001642:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001644:	4b22      	ldr	r3, [pc, #136]	@ (80016d0 <MX_GPIO_Init+0xd0>)
 8001646:	699b      	ldr	r3, [r3, #24]
 8001648:	4a21      	ldr	r2, [pc, #132]	@ (80016d0 <MX_GPIO_Init+0xd0>)
 800164a:	f043 0304 	orr.w	r3, r3, #4
 800164e:	6193      	str	r3, [r2, #24]
 8001650:	4b1f      	ldr	r3, [pc, #124]	@ (80016d0 <MX_GPIO_Init+0xd0>)
 8001652:	699b      	ldr	r3, [r3, #24]
 8001654:	f003 0304 	and.w	r3, r3, #4
 8001658:	607b      	str	r3, [r7, #4]
 800165a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800165c:	4b1c      	ldr	r3, [pc, #112]	@ (80016d0 <MX_GPIO_Init+0xd0>)
 800165e:	699b      	ldr	r3, [r3, #24]
 8001660:	4a1b      	ldr	r2, [pc, #108]	@ (80016d0 <MX_GPIO_Init+0xd0>)
 8001662:	f043 0308 	orr.w	r3, r3, #8
 8001666:	6193      	str	r3, [r2, #24]
 8001668:	4b19      	ldr	r3, [pc, #100]	@ (80016d0 <MX_GPIO_Init+0xd0>)
 800166a:	699b      	ldr	r3, [r3, #24]
 800166c:	f003 0308 	and.w	r3, r3, #8
 8001670:	603b      	str	r3, [r7, #0]
 8001672:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001674:	2201      	movs	r2, #1
 8001676:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800167a:	4816      	ldr	r0, [pc, #88]	@ (80016d4 <MX_GPIO_Init+0xd4>)
 800167c:	f008 fb7a 	bl	8009d74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR_FL_DIR_Pin|MOTOR_FR_DIR_Pin|MOTOR_BL_DIR_Pin|MOTOR_BR_DIR_Pin, GPIO_PIN_RESET);
 8001680:	2200      	movs	r2, #0
 8001682:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8001686:	4814      	ldr	r0, [pc, #80]	@ (80016d8 <MX_GPIO_Init+0xd8>)
 8001688:	f008 fb74 	bl	8009d74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800168c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001690:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001692:	2301      	movs	r3, #1
 8001694:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001696:	2300      	movs	r3, #0
 8001698:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169a:	2302      	movs	r3, #2
 800169c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800169e:	f107 0310 	add.w	r3, r7, #16
 80016a2:	4619      	mov	r1, r3
 80016a4:	480b      	ldr	r0, [pc, #44]	@ (80016d4 <MX_GPIO_Init+0xd4>)
 80016a6:	f008 f9e1 	bl	8009a6c <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_FL_DIR_Pin MOTOR_FR_DIR_Pin MOTOR_BL_DIR_Pin MOTOR_BR_DIR_Pin */
  GPIO_InitStruct.Pin = MOTOR_FL_DIR_Pin|MOTOR_FR_DIR_Pin|MOTOR_BL_DIR_Pin|MOTOR_BR_DIR_Pin;
 80016aa:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80016ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016b0:	2301      	movs	r3, #1
 80016b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b4:	2300      	movs	r3, #0
 80016b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b8:	2302      	movs	r3, #2
 80016ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016bc:	f107 0310 	add.w	r3, r7, #16
 80016c0:	4619      	mov	r1, r3
 80016c2:	4805      	ldr	r0, [pc, #20]	@ (80016d8 <MX_GPIO_Init+0xd8>)
 80016c4:	f008 f9d2 	bl	8009a6c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016c8:	bf00      	nop
 80016ca:	3720      	adds	r7, #32
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	40021000 	.word	0x40021000
 80016d4:	40011000 	.word	0x40011000
 80016d8:	40010c00 	.word	0x40010c00

080016dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016e0:	b672      	cpsid	i
}
 80016e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016e4:	bf00      	nop
 80016e6:	e7fd      	b.n	80016e4 <Error_Handler+0x8>

080016e8 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2200      	movs	r2, #0
 80016f4:	601a      	str	r2, [r3, #0]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2200      	movs	r2, #0
 80016fa:	605a      	str	r2, [r3, #4]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	4618      	mov	r0, r3
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	bc80      	pop	{r7}
 8001706:	4770      	bx	lr

08001708 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	4a04      	ldr	r2, [pc, #16]	@ (8001724 <_ZN3ros3MsgC1Ev+0x1c>)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	601a      	str	r2, [r3, #0]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4618      	mov	r0, r3
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	bc80      	pop	{r7}
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	0800d58c 	.word	0x0800d58c

08001728 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
      data()
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	4618      	mov	r0, r3
 8001734:	f7ff ffe8 	bl	8001708 <_ZN3ros3MsgC1Ev>
 8001738:	4a06      	ldr	r2, [pc, #24]	@ (8001754 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	601a      	str	r2, [r3, #0]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	3304      	adds	r3, #4
 8001742:	4618      	mov	r0, r3
 8001744:	f7ff ffd0 	bl	80016e8 <_ZN3ros4TimeC1Ev>
    {
    }
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	4618      	mov	r0, r3
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	0800d574 	.word	0x0800d574

08001758 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001762:	2300      	movs	r3, #0
 8001764:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6859      	ldr	r1, [r3, #4]
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	683a      	ldr	r2, [r7, #0]
 800176e:	4413      	add	r3, r2
 8001770:	b2ca      	uxtb	r2, r1
 8001772:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	0a19      	lsrs	r1, r3, #8
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	3301      	adds	r3, #1
 800177e:	683a      	ldr	r2, [r7, #0]
 8001780:	4413      	add	r3, r2
 8001782:	b2ca      	uxtb	r2, r1
 8001784:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	0c19      	lsrs	r1, r3, #16
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	3302      	adds	r3, #2
 8001790:	683a      	ldr	r2, [r7, #0]
 8001792:	4413      	add	r3, r2
 8001794:	b2ca      	uxtb	r2, r1
 8001796:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	0e19      	lsrs	r1, r3, #24
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	3303      	adds	r3, #3
 80017a2:	683a      	ldr	r2, [r7, #0]
 80017a4:	4413      	add	r3, r2
 80017a6:	b2ca      	uxtb	r2, r1
 80017a8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	3304      	adds	r3, #4
 80017ae:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6899      	ldr	r1, [r3, #8]
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	683a      	ldr	r2, [r7, #0]
 80017b8:	4413      	add	r3, r2
 80017ba:	b2ca      	uxtb	r2, r1
 80017bc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	0a19      	lsrs	r1, r3, #8
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	3301      	adds	r3, #1
 80017c8:	683a      	ldr	r2, [r7, #0]
 80017ca:	4413      	add	r3, r2
 80017cc:	b2ca      	uxtb	r2, r1
 80017ce:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	0c19      	lsrs	r1, r3, #16
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	3302      	adds	r3, #2
 80017da:	683a      	ldr	r2, [r7, #0]
 80017dc:	4413      	add	r3, r2
 80017de:	b2ca      	uxtb	r2, r1
 80017e0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	0e19      	lsrs	r1, r3, #24
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	3303      	adds	r3, #3
 80017ec:	683a      	ldr	r2, [r7, #0]
 80017ee:	4413      	add	r3, r2
 80017f0:	b2ca      	uxtb	r2, r1
 80017f2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	3304      	adds	r3, #4
 80017f8:	60fb      	str	r3, [r7, #12]
      return offset;
 80017fa:	68fb      	ldr	r3, [r7, #12]
    }
 80017fc:	4618      	mov	r0, r3
 80017fe:	3714      	adds	r7, #20
 8001800:	46bd      	mov	sp, r7
 8001802:	bc80      	pop	{r7}
 8001804:	4770      	bx	lr

08001806 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001806:	b480      	push	{r7}
 8001808:	b085      	sub	sp, #20
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
 800180e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001810:	2300      	movs	r3, #0
 8001812:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	683a      	ldr	r2, [r7, #0]
 8001818:	4413      	add	r3, r2
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	461a      	mov	r2, r3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685a      	ldr	r2, [r3, #4]
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	3301      	adds	r3, #1
 800182a:	6839      	ldr	r1, [r7, #0]
 800182c:	440b      	add	r3, r1
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	021b      	lsls	r3, r3, #8
 8001832:	431a      	orrs	r2, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	685a      	ldr	r2, [r3, #4]
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	3302      	adds	r3, #2
 8001840:	6839      	ldr	r1, [r7, #0]
 8001842:	440b      	add	r3, r1
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	041b      	lsls	r3, r3, #16
 8001848:	431a      	orrs	r2, r3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	685a      	ldr	r2, [r3, #4]
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	3303      	adds	r3, #3
 8001856:	6839      	ldr	r1, [r7, #0]
 8001858:	440b      	add	r3, r1
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	061b      	lsls	r3, r3, #24
 800185e:	431a      	orrs	r2, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	3304      	adds	r3, #4
 8001868:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	683a      	ldr	r2, [r7, #0]
 800186e:	4413      	add	r3, r2
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	461a      	mov	r2, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	689a      	ldr	r2, [r3, #8]
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	3301      	adds	r3, #1
 8001880:	6839      	ldr	r1, [r7, #0]
 8001882:	440b      	add	r3, r1
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	021b      	lsls	r3, r3, #8
 8001888:	431a      	orrs	r2, r3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	689a      	ldr	r2, [r3, #8]
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	3302      	adds	r3, #2
 8001896:	6839      	ldr	r1, [r7, #0]
 8001898:	440b      	add	r3, r1
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	041b      	lsls	r3, r3, #16
 800189e:	431a      	orrs	r2, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	689a      	ldr	r2, [r3, #8]
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	3303      	adds	r3, #3
 80018ac:	6839      	ldr	r1, [r7, #0]
 80018ae:	440b      	add	r3, r1
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	061b      	lsls	r3, r3, #24
 80018b4:	431a      	orrs	r2, r3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	3304      	adds	r3, #4
 80018be:	60fb      	str	r3, [r7, #12]
     return offset;
 80018c0:	68fb      	ldr	r3, [r7, #12]
    }
 80018c2:	4618      	mov	r0, r3
 80018c4:	3714      	adds	r7, #20
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bc80      	pop	{r7}
 80018ca:	4770      	bx	lr

080018cc <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	4b02      	ldr	r3, [pc, #8]	@ (80018e0 <_ZN8std_msgs4Time7getTypeEv+0x14>)
 80018d6:	4618      	mov	r0, r3
 80018d8:	370c      	adds	r7, #12
 80018da:	46bd      	mov	sp, r7
 80018dc:	bc80      	pop	{r7}
 80018de:	4770      	bx	lr
 80018e0:	0800ce70 	.word	0x0800ce70

080018e4 <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	4b02      	ldr	r3, [pc, #8]	@ (80018f8 <_ZN8std_msgs4Time6getMD5Ev+0x14>)
 80018ee:	4618      	mov	r0, r3
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bc80      	pop	{r7}
 80018f6:	4770      	bx	lr
 80018f8:	0800ce80 	.word	0x0800ce80

080018fc <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	4618      	mov	r0, r3
 8001908:	f7ff fefe 	bl	8001708 <_ZN3ros3MsgC1Ev>
 800190c:	4a0b      	ldr	r2, [pc, #44]	@ (800193c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	601a      	str	r2, [r3, #0]
      topic_id(0),
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2200      	movs	r2, #0
 8001916:	809a      	strh	r2, [r3, #4]
      topic_name(""),
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	4a09      	ldr	r2, [pc, #36]	@ (8001940 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800191c:	609a      	str	r2, [r3, #8]
      message_type(""),
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a07      	ldr	r2, [pc, #28]	@ (8001940 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001922:	60da      	str	r2, [r3, #12]
      md5sum(""),
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	4a06      	ldr	r2, [pc, #24]	@ (8001940 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001928:	611a      	str	r2, [r3, #16]
      buffer_size(0)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2200      	movs	r2, #0
 800192e:	615a      	str	r2, [r3, #20]
    {
    }
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	4618      	mov	r0, r3
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	0800d55c 	.word	0x0800d55c
 8001940:	0800cea4 	.word	0x0800cea4

08001944 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001944:	b580      	push	{r7, lr}
 8001946:	b088      	sub	sp, #32
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800194e:	2300      	movs	r3, #0
 8001950:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	8899      	ldrh	r1, [r3, #4]
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	683a      	ldr	r2, [r7, #0]
 800195a:	4413      	add	r3, r2
 800195c:	b2ca      	uxtb	r2, r1
 800195e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	889b      	ldrh	r3, [r3, #4]
 8001964:	0a1b      	lsrs	r3, r3, #8
 8001966:	b299      	uxth	r1, r3
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	3301      	adds	r3, #1
 800196c:	683a      	ldr	r2, [r7, #0]
 800196e:	4413      	add	r3, r2
 8001970:	b2ca      	uxtb	r2, r1
 8001972:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	3302      	adds	r3, #2
 8001978:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	4618      	mov	r0, r3
 8001980:	f7fe fbe6 	bl	8000150 <strlen>
 8001984:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	683a      	ldr	r2, [r7, #0]
 800198a:	4413      	add	r3, r2
 800198c:	69b9      	ldr	r1, [r7, #24]
 800198e:	4618      	mov	r0, r3
 8001990:	f006 fb12 	bl	8007fb8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	3304      	adds	r3, #4
 8001998:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	683a      	ldr	r2, [r7, #0]
 800199e:	18d0      	adds	r0, r2, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	4619      	mov	r1, r3
 80019a8:	f00b f9f8 	bl	800cd9c <memcpy>
      offset += length_topic_name;
 80019ac:	69fa      	ldr	r2, [r7, #28]
 80019ae:	69bb      	ldr	r3, [r7, #24]
 80019b0:	4413      	add	r3, r2
 80019b2:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7fe fbc9 	bl	8000150 <strlen>
 80019be:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	683a      	ldr	r2, [r7, #0]
 80019c4:	4413      	add	r3, r2
 80019c6:	6979      	ldr	r1, [r7, #20]
 80019c8:	4618      	mov	r0, r3
 80019ca:	f006 faf5 	bl	8007fb8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	3304      	adds	r3, #4
 80019d2:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	683a      	ldr	r2, [r7, #0]
 80019d8:	18d0      	adds	r0, r2, r3
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	68db      	ldr	r3, [r3, #12]
 80019de:	697a      	ldr	r2, [r7, #20]
 80019e0:	4619      	mov	r1, r3
 80019e2:	f00b f9db 	bl	800cd9c <memcpy>
      offset += length_message_type;
 80019e6:	69fa      	ldr	r2, [r7, #28]
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	4413      	add	r3, r2
 80019ec:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	691b      	ldr	r3, [r3, #16]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7fe fbac 	bl	8000150 <strlen>
 80019f8:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	683a      	ldr	r2, [r7, #0]
 80019fe:	4413      	add	r3, r2
 8001a00:	6939      	ldr	r1, [r7, #16]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f006 fad8 	bl	8007fb8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	3304      	adds	r3, #4
 8001a0c:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	683a      	ldr	r2, [r7, #0]
 8001a12:	18d0      	adds	r0, r2, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	691b      	ldr	r3, [r3, #16]
 8001a18:	693a      	ldr	r2, [r7, #16]
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	f00b f9be 	bl	800cd9c <memcpy>
      offset += length_md5sum;
 8001a20:	69fa      	ldr	r2, [r7, #28]
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	4413      	add	r3, r2
 8001a26:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	695b      	ldr	r3, [r3, #20]
 8001a2c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8001a2e:	68f9      	ldr	r1, [r7, #12]
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	683a      	ldr	r2, [r7, #0]
 8001a34:	4413      	add	r3, r2
 8001a36:	b2ca      	uxtb	r2, r1
 8001a38:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	0a19      	lsrs	r1, r3, #8
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	3301      	adds	r3, #1
 8001a42:	683a      	ldr	r2, [r7, #0]
 8001a44:	4413      	add	r3, r2
 8001a46:	b2ca      	uxtb	r2, r1
 8001a48:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	0c19      	lsrs	r1, r3, #16
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	3302      	adds	r3, #2
 8001a52:	683a      	ldr	r2, [r7, #0]
 8001a54:	4413      	add	r3, r2
 8001a56:	b2ca      	uxtb	r2, r1
 8001a58:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	0e19      	lsrs	r1, r3, #24
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	3303      	adds	r3, #3
 8001a62:	683a      	ldr	r2, [r7, #0]
 8001a64:	4413      	add	r3, r2
 8001a66:	b2ca      	uxtb	r2, r1
 8001a68:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	3304      	adds	r3, #4
 8001a6e:	61fb      	str	r3, [r7, #28]
      return offset;
 8001a70:	69fb      	ldr	r3, [r7, #28]
    }
 8001a72:	4618      	mov	r0, r3
 8001a74:	3720      	adds	r7, #32
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}

08001a7a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	b08a      	sub	sp, #40	@ 0x28
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	6078      	str	r0, [r7, #4]
 8001a82:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001a84:	2300      	movs	r3, #0
 8001a86:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8001a88:	69bb      	ldr	r3, [r7, #24]
 8001a8a:	683a      	ldr	r2, [r7, #0]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	461a      	mov	r2, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	889b      	ldrh	r3, [r3, #4]
 8001a9a:	b21a      	sxth	r2, r3
 8001a9c:	69bb      	ldr	r3, [r7, #24]
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	6839      	ldr	r1, [r7, #0]
 8001aa2:	440b      	add	r3, r1
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	021b      	lsls	r3, r3, #8
 8001aa8:	b21b      	sxth	r3, r3
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	b21b      	sxth	r3, r3
 8001aae:	b29a      	uxth	r2, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	3302      	adds	r3, #2
 8001ab8:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	683a      	ldr	r2, [r7, #0]
 8001abe:	441a      	add	r2, r3
 8001ac0:	f107 0314 	add.w	r3, r7, #20
 8001ac4:	4611      	mov	r1, r2
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f006 fa94 	bl	8007ff4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	3304      	adds	r3, #4
 8001ad0:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ad6:	e00b      	b.n	8001af0 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x76>
          inbuffer[k-1]=inbuffer[k];
 8001ad8:	683a      	ldr	r2, [r7, #0]
 8001ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001adc:	441a      	add	r2, r3
 8001ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ae0:	3b01      	subs	r3, #1
 8001ae2:	6839      	ldr	r1, [r7, #0]
 8001ae4:	440b      	add	r3, r1
 8001ae6:	7812      	ldrb	r2, [r2, #0]
 8001ae8:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aec:	3301      	adds	r3, #1
 8001aee:	627b      	str	r3, [r7, #36]	@ 0x24
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	4413      	add	r3, r2
 8001af6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d3ed      	bcc.n	8001ad8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5e>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	4413      	add	r3, r2
 8001b02:	3b01      	subs	r3, #1
 8001b04:	683a      	ldr	r2, [r7, #0]
 8001b06:	4413      	add	r3, r2
 8001b08:	2200      	movs	r2, #0
 8001b0a:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	3b01      	subs	r3, #1
 8001b10:	683a      	ldr	r2, [r7, #0]
 8001b12:	441a      	add	r2, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	4413      	add	r3, r2
 8001b1e:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	683a      	ldr	r2, [r7, #0]
 8001b24:	441a      	add	r2, r3
 8001b26:	f107 0310 	add.w	r3, r7, #16
 8001b2a:	4611      	mov	r1, r2
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f006 fa61 	bl	8007ff4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	3304      	adds	r3, #4
 8001b36:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001b38:	69bb      	ldr	r3, [r7, #24]
 8001b3a:	623b      	str	r3, [r7, #32]
 8001b3c:	e00b      	b.n	8001b56 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xdc>
          inbuffer[k-1]=inbuffer[k];
 8001b3e:	683a      	ldr	r2, [r7, #0]
 8001b40:	6a3b      	ldr	r3, [r7, #32]
 8001b42:	441a      	add	r2, r3
 8001b44:	6a3b      	ldr	r3, [r7, #32]
 8001b46:	3b01      	subs	r3, #1
 8001b48:	6839      	ldr	r1, [r7, #0]
 8001b4a:	440b      	add	r3, r1
 8001b4c:	7812      	ldrb	r2, [r2, #0]
 8001b4e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001b50:	6a3b      	ldr	r3, [r7, #32]
 8001b52:	3301      	adds	r3, #1
 8001b54:	623b      	str	r3, [r7, #32]
 8001b56:	69ba      	ldr	r2, [r7, #24]
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	6a3a      	ldr	r2, [r7, #32]
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d3ed      	bcc.n	8001b3e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc4>
      }
      inbuffer[offset+length_message_type-1]=0;
 8001b62:	69ba      	ldr	r2, [r7, #24]
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	4413      	add	r3, r2
 8001b68:	3b01      	subs	r3, #1
 8001b6a:	683a      	ldr	r2, [r7, #0]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	2200      	movs	r2, #0
 8001b70:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	3b01      	subs	r3, #1
 8001b76:	683a      	ldr	r2, [r7, #0]
 8001b78:	441a      	add	r2, r3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	4413      	add	r3, r2
 8001b84:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	683a      	ldr	r2, [r7, #0]
 8001b8a:	441a      	add	r2, r3
 8001b8c:	f107 030c 	add.w	r3, r7, #12
 8001b90:	4611      	mov	r1, r2
 8001b92:	4618      	mov	r0, r3
 8001b94:	f006 fa2e 	bl	8007ff4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001b98:	69bb      	ldr	r3, [r7, #24]
 8001b9a:	3304      	adds	r3, #4
 8001b9c:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	61fb      	str	r3, [r7, #28]
 8001ba2:	e00b      	b.n	8001bbc <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x142>
          inbuffer[k-1]=inbuffer[k];
 8001ba4:	683a      	ldr	r2, [r7, #0]
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	441a      	add	r2, r3
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	3b01      	subs	r3, #1
 8001bae:	6839      	ldr	r1, [r7, #0]
 8001bb0:	440b      	add	r3, r1
 8001bb2:	7812      	ldrb	r2, [r2, #0]
 8001bb4:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	3301      	adds	r3, #1
 8001bba:	61fb      	str	r3, [r7, #28]
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	69fa      	ldr	r2, [r7, #28]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d3ed      	bcc.n	8001ba4 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x12a>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	4413      	add	r3, r2
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	683a      	ldr	r2, [r7, #0]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8001bd8:	69bb      	ldr	r3, [r7, #24]
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	683a      	ldr	r2, [r7, #0]
 8001bde:	441a      	add	r2, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	4413      	add	r3, r2
 8001bea:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8001bec:	2300      	movs	r3, #0
 8001bee:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	69ba      	ldr	r2, [r7, #24]
 8001bf4:	6839      	ldr	r1, [r7, #0]
 8001bf6:	440a      	add	r2, r1
 8001bf8:	7812      	ldrb	r2, [r2, #0]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001bfe:	68ba      	ldr	r2, [r7, #8]
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	3301      	adds	r3, #1
 8001c04:	6839      	ldr	r1, [r7, #0]
 8001c06:	440b      	add	r3, r1
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	021b      	lsls	r3, r3, #8
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001c10:	68ba      	ldr	r2, [r7, #8]
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	3302      	adds	r3, #2
 8001c16:	6839      	ldr	r1, [r7, #0]
 8001c18:	440b      	add	r3, r1
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	041b      	lsls	r3, r3, #16
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001c22:	68ba      	ldr	r2, [r7, #8]
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	3303      	adds	r3, #3
 8001c28:	6839      	ldr	r1, [r7, #0]
 8001c2a:	440b      	add	r3, r1
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	061b      	lsls	r3, r3, #24
 8001c30:	4313      	orrs	r3, r2
 8001c32:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8001c34:	68ba      	ldr	r2, [r7, #8]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8001c3a:	69bb      	ldr	r3, [r7, #24]
 8001c3c:	3304      	adds	r3, #4
 8001c3e:	61bb      	str	r3, [r7, #24]
     return offset;
 8001c40:	69bb      	ldr	r3, [r7, #24]
    }
 8001c42:	4618      	mov	r0, r3
 8001c44:	3728      	adds	r7, #40	@ 0x28
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
	...

08001c4c <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	4b02      	ldr	r3, [pc, #8]	@ (8001c60 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x14>)
 8001c56:	4618      	mov	r0, r3
 8001c58:	370c      	adds	r7, #12
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bc80      	pop	{r7}
 8001c5e:	4770      	bx	lr
 8001c60:	0800cea8 	.word	0x0800cea8

08001c64 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	4b02      	ldr	r3, [pc, #8]	@ (8001c78 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x14>)
 8001c6e:	4618      	mov	r0, r3
 8001c70:	370c      	adds	r7, #12
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bc80      	pop	{r7}
 8001c76:	4770      	bx	lr
 8001c78:	0800cec4 	.word	0x0800cec4

08001c7c <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7ff fd3e 	bl	8001708 <_ZN3ros3MsgC1Ev>
 8001c8c:	4a06      	ldr	r2, [pc, #24]	@ (8001ca8 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	601a      	str	r2, [r3, #0]
      level(0),
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2200      	movs	r2, #0
 8001c96:	711a      	strb	r2, [r3, #4]
      msg("")
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	4a04      	ldr	r2, [pc, #16]	@ (8001cac <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8001c9c:	609a      	str	r2, [r3, #8]
    {
    }
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3708      	adds	r7, #8
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	0800d544 	.word	0x0800d544
 8001cac:	0800cea4 	.word	0x0800cea4

08001cb0 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	683a      	ldr	r2, [r7, #0]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	7912      	ldrb	r2, [r2, #4]
 8001cc8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	3301      	adds	r3, #1
 8001cce:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7fe fa3b 	bl	8000150 <strlen>
 8001cda:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	683a      	ldr	r2, [r7, #0]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	68b9      	ldr	r1, [r7, #8]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f006 f967 	bl	8007fb8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	3304      	adds	r3, #4
 8001cee:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	683a      	ldr	r2, [r7, #0]
 8001cf4:	18d0      	adds	r0, r2, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	68ba      	ldr	r2, [r7, #8]
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	f00b f84d 	bl	800cd9c <memcpy>
      offset += length_msg;
 8001d02:	68fa      	ldr	r2, [r7, #12]
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	4413      	add	r3, r2
 8001d08:	60fb      	str	r3, [r7, #12]
      return offset;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
    }
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3710      	adds	r7, #16
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b086      	sub	sp, #24
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	683a      	ldr	r2, [r7, #0]
 8001d26:	4413      	add	r3, r2
 8001d28:	781a      	ldrb	r2, [r3, #0]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	3301      	adds	r3, #1
 8001d32:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	683a      	ldr	r2, [r7, #0]
 8001d38:	441a      	add	r2, r3
 8001d3a:	f107 030c 	add.w	r3, r7, #12
 8001d3e:	4611      	mov	r1, r2
 8001d40:	4618      	mov	r0, r3
 8001d42:	f006 f957 	bl	8007ff4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	3304      	adds	r3, #4
 8001d4a:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	617b      	str	r3, [r7, #20]
 8001d50:	e00b      	b.n	8001d6a <_ZN14rosserial_msgs3Log11deserializeEPh+0x56>
          inbuffer[k-1]=inbuffer[k];
 8001d52:	683a      	ldr	r2, [r7, #0]
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	441a      	add	r2, r3
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	3b01      	subs	r3, #1
 8001d5c:	6839      	ldr	r1, [r7, #0]
 8001d5e:	440b      	add	r3, r1
 8001d60:	7812      	ldrb	r2, [r2, #0]
 8001d62:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	3301      	adds	r3, #1
 8001d68:	617b      	str	r3, [r7, #20]
 8001d6a:	693a      	ldr	r2, [r7, #16]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	4413      	add	r3, r2
 8001d70:	697a      	ldr	r2, [r7, #20]
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d3ed      	bcc.n	8001d52 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3e>
      }
      inbuffer[offset+length_msg-1]=0;
 8001d76:	693a      	ldr	r2, [r7, #16]
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	4413      	add	r3, r2
 8001d7c:	3b01      	subs	r3, #1
 8001d7e:	683a      	ldr	r2, [r7, #0]
 8001d80:	4413      	add	r3, r2
 8001d82:	2200      	movs	r2, #0
 8001d84:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	3b01      	subs	r3, #1
 8001d8a:	683a      	ldr	r2, [r7, #0]
 8001d8c:	441a      	add	r2, r3
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8001d92:	693a      	ldr	r2, [r7, #16]
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	4413      	add	r3, r2
 8001d98:	613b      	str	r3, [r7, #16]
     return offset;
 8001d9a:	693b      	ldr	r3, [r7, #16]
    }
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3718      	adds	r7, #24
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	4b02      	ldr	r3, [pc, #8]	@ (8001db8 <_ZN14rosserial_msgs3Log7getTypeEv+0x14>)
 8001dae:	4618      	mov	r0, r3
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bc80      	pop	{r7}
 8001db6:	4770      	bx	lr
 8001db8:	0800cee8 	.word	0x0800cee8

08001dbc <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	4b02      	ldr	r3, [pc, #8]	@ (8001dd0 <_ZN14rosserial_msgs3Log6getMD5Ev+0x14>)
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	370c      	adds	r7, #12
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bc80      	pop	{r7}
 8001dce:	4770      	bx	lr
 8001dd0:	0800cefc 	.word	0x0800cefc

08001dd4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7ff fc92 	bl	8001708 <_ZN3ros3MsgC1Ev>
 8001de4:	4a11      	ldr	r2, [pc, #68]	@ (8001e2c <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	601a      	str	r2, [r3, #0]
      ints_length(0), st_ints(), ints(nullptr),
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2200      	movs	r2, #0
 8001dee:	605a      	str	r2, [r3, #4]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2200      	movs	r2, #0
 8001df4:	609a      	str	r2, [r3, #8]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	60da      	str	r2, [r3, #12]
      floats_length(0), st_floats(), floats(nullptr),
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	611a      	str	r2, [r3, #16]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	f04f 0200 	mov.w	r2, #0
 8001e08:	615a      	str	r2, [r3, #20]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	619a      	str	r2, [r3, #24]
      strings_length(0), st_strings(), strings(nullptr)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	61da      	str	r2, [r3, #28]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	621a      	str	r2, [r3, #32]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	625a      	str	r2, [r3, #36]	@ 0x24
    {
    }
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4618      	mov	r0, r3
 8001e26:	3708      	adds	r7, #8
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	0800d52c 	.word	0x0800d52c

08001e30 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b08a      	sub	sp, #40	@ 0x28
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	627b      	str	r3, [r7, #36]	@ 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6859      	ldr	r1, [r3, #4]
 8001e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e44:	683a      	ldr	r2, [r7, #0]
 8001e46:	4413      	add	r3, r2
 8001e48:	b2ca      	uxtb	r2, r1
 8001e4a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	0a19      	lsrs	r1, r3, #8
 8001e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e54:	3301      	adds	r3, #1
 8001e56:	683a      	ldr	r2, [r7, #0]
 8001e58:	4413      	add	r3, r2
 8001e5a:	b2ca      	uxtb	r2, r1
 8001e5c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	0c19      	lsrs	r1, r3, #16
 8001e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e66:	3302      	adds	r3, #2
 8001e68:	683a      	ldr	r2, [r7, #0]
 8001e6a:	4413      	add	r3, r2
 8001e6c:	b2ca      	uxtb	r2, r1
 8001e6e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	0e19      	lsrs	r1, r3, #24
 8001e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e78:	3303      	adds	r3, #3
 8001e7a:	683a      	ldr	r2, [r7, #0]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	b2ca      	uxtb	r2, r1
 8001e80:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8001e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e84:	3304      	adds	r3, #4
 8001e86:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001e88:	2300      	movs	r3, #0
 8001e8a:	623b      	str	r3, [r7, #32]
 8001e8c:	e02a      	b.n	8001ee4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xb4>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	68da      	ldr	r2, [r3, #12]
 8001e92:	6a3b      	ldr	r3, [r7, #32]
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	4413      	add	r3, r2
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8001e9c:	6939      	ldr	r1, [r7, #16]
 8001e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ea0:	683a      	ldr	r2, [r7, #0]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	b2ca      	uxtb	r2, r1
 8001ea6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	0a19      	lsrs	r1, r3, #8
 8001eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eae:	3301      	adds	r3, #1
 8001eb0:	683a      	ldr	r2, [r7, #0]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	b2ca      	uxtb	r2, r1
 8001eb6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	0c19      	lsrs	r1, r3, #16
 8001ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ebe:	3302      	adds	r3, #2
 8001ec0:	683a      	ldr	r2, [r7, #0]
 8001ec2:	4413      	add	r3, r2
 8001ec4:	b2ca      	uxtb	r2, r1
 8001ec6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	0e19      	lsrs	r1, r3, #24
 8001ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ece:	3303      	adds	r3, #3
 8001ed0:	683a      	ldr	r2, [r7, #0]
 8001ed2:	4413      	add	r3, r2
 8001ed4:	b2ca      	uxtb	r2, r1
 8001ed6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8001ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eda:	3304      	adds	r3, #4
 8001edc:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001ede:	6a3b      	ldr	r3, [r7, #32]
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	623b      	str	r3, [r7, #32]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	6a3a      	ldr	r2, [r7, #32]
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d3cf      	bcc.n	8001e8e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6919      	ldr	r1, [r3, #16]
 8001ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ef4:	683a      	ldr	r2, [r7, #0]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	b2ca      	uxtb	r2, r1
 8001efa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	691b      	ldr	r3, [r3, #16]
 8001f00:	0a19      	lsrs	r1, r3, #8
 8001f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f04:	3301      	adds	r3, #1
 8001f06:	683a      	ldr	r2, [r7, #0]
 8001f08:	4413      	add	r3, r2
 8001f0a:	b2ca      	uxtb	r2, r1
 8001f0c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	691b      	ldr	r3, [r3, #16]
 8001f12:	0c19      	lsrs	r1, r3, #16
 8001f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f16:	3302      	adds	r3, #2
 8001f18:	683a      	ldr	r2, [r7, #0]
 8001f1a:	4413      	add	r3, r2
 8001f1c:	b2ca      	uxtb	r2, r1
 8001f1e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	691b      	ldr	r3, [r3, #16]
 8001f24:	0e19      	lsrs	r1, r3, #24
 8001f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f28:	3303      	adds	r3, #3
 8001f2a:	683a      	ldr	r2, [r7, #0]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	b2ca      	uxtb	r2, r1
 8001f30:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8001f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f34:	3304      	adds	r3, #4
 8001f36:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001f38:	2300      	movs	r3, #0
 8001f3a:	61fb      	str	r3, [r7, #28]
 8001f3c:	e02a      	b.n	8001f94 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x164>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	699a      	ldr	r2, [r3, #24]
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	4413      	add	r3, r2
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8001f4c:	68f9      	ldr	r1, [r7, #12]
 8001f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f50:	683a      	ldr	r2, [r7, #0]
 8001f52:	4413      	add	r3, r2
 8001f54:	b2ca      	uxtb	r2, r1
 8001f56:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	0a19      	lsrs	r1, r3, #8
 8001f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f5e:	3301      	adds	r3, #1
 8001f60:	683a      	ldr	r2, [r7, #0]
 8001f62:	4413      	add	r3, r2
 8001f64:	b2ca      	uxtb	r2, r1
 8001f66:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	0c19      	lsrs	r1, r3, #16
 8001f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f6e:	3302      	adds	r3, #2
 8001f70:	683a      	ldr	r2, [r7, #0]
 8001f72:	4413      	add	r3, r2
 8001f74:	b2ca      	uxtb	r2, r1
 8001f76:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	0e19      	lsrs	r1, r3, #24
 8001f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f7e:	3303      	adds	r3, #3
 8001f80:	683a      	ldr	r2, [r7, #0]
 8001f82:	4413      	add	r3, r2
 8001f84:	b2ca      	uxtb	r2, r1
 8001f86:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8001f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f8a:	3304      	adds	r3, #4
 8001f8c:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	3301      	adds	r3, #1
 8001f92:	61fb      	str	r3, [r7, #28]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	691b      	ldr	r3, [r3, #16]
 8001f98:	69fa      	ldr	r2, [r7, #28]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d3cf      	bcc.n	8001f3e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10e>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	69d9      	ldr	r1, [r3, #28]
 8001fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fa4:	683a      	ldr	r2, [r7, #0]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	b2ca      	uxtb	r2, r1
 8001faa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	69db      	ldr	r3, [r3, #28]
 8001fb0:	0a19      	lsrs	r1, r3, #8
 8001fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	683a      	ldr	r2, [r7, #0]
 8001fb8:	4413      	add	r3, r2
 8001fba:	b2ca      	uxtb	r2, r1
 8001fbc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	69db      	ldr	r3, [r3, #28]
 8001fc2:	0c19      	lsrs	r1, r3, #16
 8001fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fc6:	3302      	adds	r3, #2
 8001fc8:	683a      	ldr	r2, [r7, #0]
 8001fca:	4413      	add	r3, r2
 8001fcc:	b2ca      	uxtb	r2, r1
 8001fce:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	69db      	ldr	r3, [r3, #28]
 8001fd4:	0e19      	lsrs	r1, r3, #24
 8001fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fd8:	3303      	adds	r3, #3
 8001fda:	683a      	ldr	r2, [r7, #0]
 8001fdc:	4413      	add	r3, r2
 8001fde:	b2ca      	uxtb	r2, r1
 8001fe0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8001fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe4:	3304      	adds	r3, #4
 8001fe6:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001fe8:	2300      	movs	r3, #0
 8001fea:	61bb      	str	r3, [r7, #24]
 8001fec:	e027      	b.n	800203e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x20e>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001ff2:	69bb      	ldr	r3, [r7, #24]
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	4413      	add	r3, r2
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7fe f8a8 	bl	8000150 <strlen>
 8002000:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8002002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002004:	683a      	ldr	r2, [r7, #0]
 8002006:	4413      	add	r3, r2
 8002008:	6979      	ldr	r1, [r7, #20]
 800200a:	4618      	mov	r0, r3
 800200c:	f005 ffd4 	bl	8007fb8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002012:	3304      	adds	r3, #4
 8002014:	627b      	str	r3, [r7, #36]	@ 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8002016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002018:	683a      	ldr	r2, [r7, #0]
 800201a:	18d0      	adds	r0, r2, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002020:	69bb      	ldr	r3, [r7, #24]
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	4413      	add	r3, r2
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	697a      	ldr	r2, [r7, #20]
 800202a:	4619      	mov	r1, r3
 800202c:	f00a feb6 	bl	800cd9c <memcpy>
      offset += length_stringsi;
 8002030:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	4413      	add	r3, r2
 8002036:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	3301      	adds	r3, #1
 800203c:	61bb      	str	r3, [r7, #24]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	69db      	ldr	r3, [r3, #28]
 8002042:	69ba      	ldr	r2, [r7, #24]
 8002044:	429a      	cmp	r2, r3
 8002046:	d3d2      	bcc.n	8001fee <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1be>
      }
      return offset;
 8002048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 800204a:	4618      	mov	r0, r3
 800204c:	3728      	adds	r7, #40	@ 0x28
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}

08002052 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002052:	b580      	push	{r7, lr}
 8002054:	b08e      	sub	sp, #56	@ 0x38
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
 800205a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800205c:	2300      	movs	r3, #0
 800205e:	637b      	str	r3, [r7, #52]	@ 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002060:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002062:	683a      	ldr	r2, [r7, #0]
 8002064:	4413      	add	r3, r2
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800206a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800206c:	3301      	adds	r3, #1
 800206e:	683a      	ldr	r2, [r7, #0]
 8002070:	4413      	add	r3, r2
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	021b      	lsls	r3, r3, #8
 8002076:	6a3a      	ldr	r2, [r7, #32]
 8002078:	4313      	orrs	r3, r2
 800207a:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800207c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800207e:	3302      	adds	r3, #2
 8002080:	683a      	ldr	r2, [r7, #0]
 8002082:	4413      	add	r3, r2
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	041b      	lsls	r3, r3, #16
 8002088:	6a3a      	ldr	r2, [r7, #32]
 800208a:	4313      	orrs	r3, r2
 800208c:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800208e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002090:	3303      	adds	r3, #3
 8002092:	683a      	ldr	r2, [r7, #0]
 8002094:	4413      	add	r3, r2
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	061b      	lsls	r3, r3, #24
 800209a:	6a3a      	ldr	r2, [r7, #32]
 800209c:	4313      	orrs	r3, r2
 800209e:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 80020a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020a2:	3304      	adds	r3, #4
 80020a4:	637b      	str	r3, [r7, #52]	@ 0x34
      if(ints_lengthT > ints_length)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	6a3a      	ldr	r2, [r7, #32]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d90a      	bls.n	80020c6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	68da      	ldr	r2, [r3, #12]
 80020b4:	6a3b      	ldr	r3, [r7, #32]
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	4619      	mov	r1, r3
 80020ba:	4610      	mov	r0, r2
 80020bc:	f00a fdf4 	bl	800cca8 <realloc>
 80020c0:	4602      	mov	r2, r0
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6a3a      	ldr	r2, [r7, #32]
 80020ca:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 80020cc:	2300      	movs	r3, #0
 80020ce:	633b      	str	r3, [r7, #48]	@ 0x30
 80020d0:	e035      	b.n	800213e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xec>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 80020d2:	2300      	movs	r3, #0
 80020d4:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80020da:	6839      	ldr	r1, [r7, #0]
 80020dc:	440a      	add	r2, r1
 80020de:	7812      	ldrb	r2, [r2, #0]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80020e4:	697a      	ldr	r2, [r7, #20]
 80020e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020e8:	3301      	adds	r3, #1
 80020ea:	6839      	ldr	r1, [r7, #0]
 80020ec:	440b      	add	r3, r1
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	021b      	lsls	r3, r3, #8
 80020f2:	4313      	orrs	r3, r2
 80020f4:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80020f6:	697a      	ldr	r2, [r7, #20]
 80020f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020fa:	3302      	adds	r3, #2
 80020fc:	6839      	ldr	r1, [r7, #0]
 80020fe:	440b      	add	r3, r1
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	041b      	lsls	r3, r3, #16
 8002104:	4313      	orrs	r3, r2
 8002106:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002108:	697a      	ldr	r2, [r7, #20]
 800210a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800210c:	3303      	adds	r3, #3
 800210e:	6839      	ldr	r1, [r7, #0]
 8002110:	440b      	add	r3, r1
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	061b      	lsls	r3, r3, #24
 8002116:	4313      	orrs	r3, r2
 8002118:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 800211a:	697a      	ldr	r2, [r7, #20]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8002120:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002122:	3304      	adds	r3, #4
 8002124:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	68da      	ldr	r2, [r3, #12]
 800212a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	4413      	add	r3, r2
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	3208      	adds	r2, #8
 8002134:	6812      	ldr	r2, [r2, #0]
 8002136:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8002138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800213a:	3301      	adds	r3, #1
 800213c:	633b      	str	r3, [r7, #48]	@ 0x30
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002144:	429a      	cmp	r2, r3
 8002146:	d3c4      	bcc.n	80020d2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x80>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002148:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800214a:	683a      	ldr	r2, [r7, #0]
 800214c:	4413      	add	r3, r2
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002152:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002154:	3301      	adds	r3, #1
 8002156:	683a      	ldr	r2, [r7, #0]
 8002158:	4413      	add	r3, r2
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	021b      	lsls	r3, r3, #8
 800215e:	69fa      	ldr	r2, [r7, #28]
 8002160:	4313      	orrs	r3, r2
 8002162:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002164:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002166:	3302      	adds	r3, #2
 8002168:	683a      	ldr	r2, [r7, #0]
 800216a:	4413      	add	r3, r2
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	041b      	lsls	r3, r3, #16
 8002170:	69fa      	ldr	r2, [r7, #28]
 8002172:	4313      	orrs	r3, r2
 8002174:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002176:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002178:	3303      	adds	r3, #3
 800217a:	683a      	ldr	r2, [r7, #0]
 800217c:	4413      	add	r3, r2
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	061b      	lsls	r3, r3, #24
 8002182:	69fa      	ldr	r2, [r7, #28]
 8002184:	4313      	orrs	r3, r2
 8002186:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8002188:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800218a:	3304      	adds	r3, #4
 800218c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(floats_lengthT > floats_length)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	691b      	ldr	r3, [r3, #16]
 8002192:	69fa      	ldr	r2, [r7, #28]
 8002194:	429a      	cmp	r2, r3
 8002196:	d90a      	bls.n	80021ae <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	699a      	ldr	r2, [r3, #24]
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	4619      	mov	r1, r3
 80021a2:	4610      	mov	r0, r2
 80021a4:	f00a fd80 	bl	800cca8 <realloc>
 80021a8:	4602      	mov	r2, r0
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	69fa      	ldr	r2, [r7, #28]
 80021b2:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 80021b4:	2300      	movs	r3, #0
 80021b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80021b8:	e035      	b.n	8002226 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1d4>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 80021ba:	2300      	movs	r3, #0
 80021bc:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80021c2:	6839      	ldr	r1, [r7, #0]
 80021c4:	440a      	add	r2, r1
 80021c6:	7812      	ldrb	r2, [r2, #0]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80021cc:	693a      	ldr	r2, [r7, #16]
 80021ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021d0:	3301      	adds	r3, #1
 80021d2:	6839      	ldr	r1, [r7, #0]
 80021d4:	440b      	add	r3, r1
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	021b      	lsls	r3, r3, #8
 80021da:	4313      	orrs	r3, r2
 80021dc:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80021de:	693a      	ldr	r2, [r7, #16]
 80021e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021e2:	3302      	adds	r3, #2
 80021e4:	6839      	ldr	r1, [r7, #0]
 80021e6:	440b      	add	r3, r1
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	041b      	lsls	r3, r3, #16
 80021ec:	4313      	orrs	r3, r2
 80021ee:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80021f0:	693a      	ldr	r2, [r7, #16]
 80021f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021f4:	3303      	adds	r3, #3
 80021f6:	6839      	ldr	r1, [r7, #0]
 80021f8:	440b      	add	r3, r1
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	061b      	lsls	r3, r3, #24
 80021fe:	4313      	orrs	r3, r2
 8002200:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8002202:	693a      	ldr	r2, [r7, #16]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8002208:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800220a:	3304      	adds	r3, #4
 800220c:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	699a      	ldr	r2, [r3, #24]
 8002212:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	4413      	add	r3, r2
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	3214      	adds	r2, #20
 800221c:	6812      	ldr	r2, [r2, #0]
 800221e:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8002220:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002222:	3301      	adds	r3, #1
 8002224:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	691b      	ldr	r3, [r3, #16]
 800222a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800222c:	429a      	cmp	r2, r3
 800222e:	d3c4      	bcc.n	80021ba <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x168>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002230:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002232:	683a      	ldr	r2, [r7, #0]
 8002234:	4413      	add	r3, r2
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800223a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800223c:	3301      	adds	r3, #1
 800223e:	683a      	ldr	r2, [r7, #0]
 8002240:	4413      	add	r3, r2
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	021b      	lsls	r3, r3, #8
 8002246:	69ba      	ldr	r2, [r7, #24]
 8002248:	4313      	orrs	r3, r2
 800224a:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800224c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800224e:	3302      	adds	r3, #2
 8002250:	683a      	ldr	r2, [r7, #0]
 8002252:	4413      	add	r3, r2
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	041b      	lsls	r3, r3, #16
 8002258:	69ba      	ldr	r2, [r7, #24]
 800225a:	4313      	orrs	r3, r2
 800225c:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800225e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002260:	3303      	adds	r3, #3
 8002262:	683a      	ldr	r2, [r7, #0]
 8002264:	4413      	add	r3, r2
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	061b      	lsls	r3, r3, #24
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	4313      	orrs	r3, r2
 800226e:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8002270:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002272:	3304      	adds	r3, #4
 8002274:	637b      	str	r3, [r7, #52]	@ 0x34
      if(strings_lengthT > strings_length)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	69db      	ldr	r3, [r3, #28]
 800227a:	69ba      	ldr	r2, [r7, #24]
 800227c:	429a      	cmp	r2, r3
 800227e:	d90a      	bls.n	8002296 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	4619      	mov	r1, r3
 800228a:	4610      	mov	r0, r2
 800228c:	f00a fd0c 	bl	800cca8 <realloc>
 8002290:	4602      	mov	r2, r0
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	625a      	str	r2, [r3, #36]	@ 0x24
      strings_length = strings_lengthT;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 800229c:	2300      	movs	r3, #0
 800229e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80022a0:	e03e      	b.n	8002320 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2ce>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 80022a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022a4:	683a      	ldr	r2, [r7, #0]
 80022a6:	441a      	add	r2, r3
 80022a8:	f107 030c 	add.w	r3, r7, #12
 80022ac:	4611      	mov	r1, r2
 80022ae:	4618      	mov	r0, r3
 80022b0:	f005 fea0 	bl	8007ff4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80022b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022b6:	3304      	adds	r3, #4
 80022b8:	637b      	str	r3, [r7, #52]	@ 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80022ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80022be:	e00b      	b.n	80022d8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x286>
          inbuffer[k-1]=inbuffer[k];
 80022c0:	683a      	ldr	r2, [r7, #0]
 80022c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022c4:	441a      	add	r2, r3
 80022c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022c8:	3b01      	subs	r3, #1
 80022ca:	6839      	ldr	r1, [r7, #0]
 80022cc:	440b      	add	r3, r1
 80022ce:	7812      	ldrb	r2, [r2, #0]
 80022d0:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80022d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022d4:	3301      	adds	r3, #1
 80022d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80022d8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	4413      	add	r3, r2
 80022de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d3ed      	bcc.n	80022c0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26e>
      }
      inbuffer[offset+length_st_strings-1]=0;
 80022e4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	4413      	add	r3, r2
 80022ea:	3b01      	subs	r3, #1
 80022ec:	683a      	ldr	r2, [r7, #0]
 80022ee:	4413      	add	r3, r2
 80022f0:	2200      	movs	r2, #0
 80022f2:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 80022f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022f6:	3b01      	subs	r3, #1
 80022f8:	683a      	ldr	r2, [r7, #0]
 80022fa:	441a      	add	r2, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8002300:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	4413      	add	r3, r2
 8002306:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800230c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	4413      	add	r3, r2
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	3220      	adds	r2, #32
 8002316:	6812      	ldr	r2, [r2, #0]
 8002318:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 800231a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800231c:	3301      	adds	r3, #1
 800231e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	69db      	ldr	r3, [r3, #28]
 8002324:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002326:	429a      	cmp	r2, r3
 8002328:	d3bb      	bcc.n	80022a2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x250>
      }
     return offset;
 800232a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 800232c:	4618      	mov	r0, r3
 800232e:	3738      	adds	r7, #56	@ 0x38
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}

08002334 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	4b02      	ldr	r3, [pc, #8]	@ (8002348 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x14>)
 800233e:	4618      	mov	r0, r3
 8002340:	370c      	adds	r7, #12
 8002342:	46bd      	mov	sp, r7
 8002344:	bc80      	pop	{r7}
 8002346:	4770      	bx	lr
 8002348:	0800d348 	.word	0x0800d348

0800234c <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	4b02      	ldr	r3, [pc, #8]	@ (8002360 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x14>)
 8002356:	4618      	mov	r0, r3
 8002358:	370c      	adds	r7, #12
 800235a:	46bd      	mov	sp, r7
 800235c:	bc80      	pop	{r7}
 800235e:	4770      	bx	lr
 8002360:	0800cf20 	.word	0x0800cf20

08002364 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8002364:	b480      	push	{r7}
 8002366:	b085      	sub	sp, #20
 8002368:	af00      	add	r7, sp, #0
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	607a      	str	r2, [r7, #4]
 8002370:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	68ba      	ldr	r2, [r7, #8]
 8002376:	601a      	str	r2, [r3, #0]
    msg_(msg),
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	605a      	str	r2, [r3, #4]
    endpoint_(endpoint) {};
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	683a      	ldr	r2, [r7, #0]
 8002382:	611a      	str	r2, [r3, #16]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	4618      	mov	r0, r3
 8002388:	3714      	adds	r7, #20
 800238a:	46bd      	mov	sp, r7
 800238c:	bc80      	pop	{r7}
 800238e:	4770      	bx	lr

08002390 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	68d8      	ldr	r0, [r3, #12]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	6891      	ldr	r1, [r2, #8]
 80023aa:	683a      	ldr	r2, [r7, #0]
 80023ac:	4798      	blx	r3
 80023ae:	4603      	mov	r3, r0
  };
 80023b0:	4618      	mov	r0, r3
 80023b2:	3708      	adds	r7, #8
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	691b      	ldr	r3, [r3, #16]
  }
 80023c4:	4618      	mov	r0, r3
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bc80      	pop	{r7}
 80023cc:	4770      	bx	lr

080023ce <_ZN10SerialCommC1ER20__UART_HandleTypeDef>:
    uint16_t tx_tail = 0;
    uint16_t rx_tail = 0;
    static constexpr uint16_t buf_mask = buffer_size - 1;

public:
    SerialComm(UART_HandleTypeDef &huart) : huart(huart)
 80023ce:	b480      	push	{r7}
 80023d0:	b083      	sub	sp, #12
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6078      	str	r0, [r7, #4]
 80023d6:	6039      	str	r1, [r7, #0]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	683a      	ldr	r2, [r7, #0]
 80023dc:	601a      	str	r2, [r3, #0]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2201      	movs	r2, #1
 80023e2:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	f8a3 2806 	strh.w	r2, [r3, #2054]	@ 0x806
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2200      	movs	r2, #0
 80023f2:	f8a3 2808 	strh.w	r2, [r3, #2056]	@ 0x808
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	f8a3 280a 	strh.w	r2, [r3, #2058]	@ 0x80a
    {
        // Other initialization code
    }
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4618      	mov	r0, r3
 8002402:	370c      	adds	r7, #12
 8002404:	46bd      	mov	sp, r7
 8002406:	bc80      	pop	{r7}
 8002408:	4770      	bx	lr

0800240a <_ZN10SerialComm4initEv>:

    void init(void)
 800240a:	b580      	push	{r7, lr}
 800240c:	b082      	sub	sp, #8
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
    {
        reset_rbuf();
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f000 f8f3 	bl	80025fe <_ZN10SerialComm10reset_rbufEv>
    }
 8002418:	bf00      	nop
 800241a:	3708      	adds	r7, #8
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}

08002420 <_ZN10SerialComm4readEv>:

    /** @brief Read a character from the Rx buffer using the FIFO method.
     * 
     * @return The read character.
    */
    int read(void)
 8002420:	b480      	push	{r7}
 8002422:	b085      	sub	sp, #20
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
    {
       uint16_t rx_head = (buffer_size - huart.hdmarx->Instance->CNDTR) & buf_mask;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	b29b      	uxth	r3, r3
 8002434:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 8002438:	b29b      	uxth	r3, r3
 800243a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800243e:	81fb      	strh	r3, [r7, #14]

        // Check for overlapping (which is bad, data will be overwritten)
        if (rx_tail == rx_head)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f8b3 380a 	ldrh.w	r3, [r3, #2058]	@ 0x80a
 8002446:	89fa      	ldrh	r2, [r7, #14]
 8002448:	429a      	cmp	r2, r3
 800244a:	d102      	bne.n	8002452 <_ZN10SerialComm4readEv+0x32>
        {
            return -1;
 800244c:	f04f 33ff 	mov.w	r3, #4294967295
 8002450:	e017      	b.n	8002482 <_ZN10SerialComm4readEv+0x62>
        }

        // Read a value and increment the read pointer (TAIL).
        int c = (int) rx_buf[rx_tail++];
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f8b3 380a 	ldrh.w	r3, [r3, #2058]	@ 0x80a
 8002458:	1c5a      	adds	r2, r3, #1
 800245a:	b291      	uxth	r1, r2
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	f8a2 180a 	strh.w	r1, [r2, #2058]	@ 0x80a
 8002462:	461a      	mov	r2, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	4413      	add	r3, r2
 8002468:	f893 3404 	ldrb.w	r3, [r3, #1028]	@ 0x404
 800246c:	60bb      	str	r3, [r7, #8]
        rx_tail &= buf_mask;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	f8b3 380a 	ldrh.w	r3, [r3, #2058]	@ 0x80a
 8002474:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002478:	b29a      	uxth	r2, r3
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	f8a3 280a 	strh.w	r2, [r3, #2058]	@ 0x80a

        return c;
 8002480:	68bb      	ldr	r3, [r7, #8]
    }
 8002482:	4618      	mov	r0, r3
 8002484:	3714      	adds	r7, #20
 8002486:	46bd      	mov	sp, r7
 8002488:	bc80      	pop	{r7}
 800248a:	4770      	bx	lr

0800248c <_ZN10SerialComm5writeEPKhi>:
     * @param data The pointer to the data string.
     * @param length The length of the data string.
     * 
     * @return Void. 
    */
    void write(const uint8_t* const data, const int length)
 800248c:	b580      	push	{r7, lr}
 800248e:	b086      	sub	sp, #24
 8002490:	af00      	add	r7, sp, #0
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	60b9      	str	r1, [r7, #8]
 8002496:	607a      	str	r2, [r7, #4]
    {
        // Faulty data guard.
        if (length > buffer_size || length < 1)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800249e:	dc41      	bgt.n	8002524 <_ZN10SerialComm5writeEPKhi+0x98>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	dd3e      	ble.n	8002524 <_ZN10SerialComm5writeEPKhi+0x98>
        {
            return;
        }

        // Wait for the completion of the previous Tx transfer.
        while (!is_tx_cplt);
 80024a6:	bf00      	nop
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f893 3804 	ldrb.w	r3, [r3, #2052]	@ 0x804
 80024ae:	f083 0301 	eor.w	r3, r3, #1
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d1f7      	bne.n	80024a8 <_ZN10SerialComm5writeEPKhi+0x1c>

        // Check if the data is bigger than the remaining storage
        int w_len = (length <= (buffer_size - tx_head)) ? length : (buffer_size - tx_head);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f8b3 3806 	ldrh.w	r3, [r3, #2054]	@ 0x806
 80024be:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	4293      	cmp	r3, r2
 80024c6:	bfa8      	it	ge
 80024c8:	4613      	movge	r3, r2
 80024ca:	617b      	str	r3, [r7, #20]

        // Write the data and increment the write pointer (TX_HEAD)
        memcpy(&tx_buf[tx_head], data, w_len);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f8b3 3806 	ldrh.w	r3, [r3, #2054]	@ 0x806
 80024d2:	461a      	mov	r2, r3
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	4413      	add	r3, r2
 80024d8:	3304      	adds	r3, #4
 80024da:	697a      	ldr	r2, [r7, #20]
 80024dc:	68b9      	ldr	r1, [r7, #8]
 80024de:	4618      	mov	r0, r3
 80024e0:	f00a fc5c 	bl	800cd9c <memcpy>
        tx_head = (tx_head + length) & buf_mask;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f8b3 2806 	ldrh.w	r2, [r3, #2054]	@ 0x806
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	4413      	add	r3, r2
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024f6:	b29a      	uxth	r2, r3
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	f8a3 2806 	strh.w	r2, [r3, #2054]	@ 0x806

        // Reset the TX_HEAD pointer and write the remaining data
        // (If data is bigger than the previous remaining data)
        if (length != w_len)
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	429a      	cmp	r2, r3
 8002504:	d00a      	beq.n	800251c <_ZN10SerialComm5writeEPKhi+0x90>
        {
            memcpy(tx_buf, &data[w_len], length - w_len);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	1d18      	adds	r0, r3, #4
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	68ba      	ldr	r2, [r7, #8]
 800250e:	18d1      	adds	r1, r2, r3
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	461a      	mov	r2, r3
 8002518:	f00a fc40 	bl	800cd9c <memcpy>
        }

        // TODO: Start transfering
        flush();
 800251c:	68f8      	ldr	r0, [r7, #12]
 800251e:	f000 f805 	bl	800252c <_ZN10SerialComm5flushEv>
 8002522:	e000      	b.n	8002526 <_ZN10SerialComm5writeEPKhi+0x9a>
            return;
 8002524:	bf00      	nop
    }
 8002526:	3718      	adds	r7, #24
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}

0800252c <_ZN10SerialComm5flushEv>:

    /** @brief Transmit the just written data in the Tx buffer
     * 
     * @return void.
    */
    void flush()
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
    {
        if (is_tx_cplt)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f893 3804 	ldrb.w	r3, [r3, #2052]	@ 0x804
 800253a:	2b00      	cmp	r3, #0
 800253c:	d04e      	beq.n	80025dc <_ZN10SerialComm5flushEv+0xb0>
        {
            // if HEAD == TAIL => The buffer is empty => Nothing to send.
            if (tx_head != tx_tail)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	f8b3 2806 	ldrh.w	r2, [r3, #2054]	@ 0x806
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f8b3 3808 	ldrh.w	r3, [r3, #2056]	@ 0x808
 800254a:	429a      	cmp	r2, r3
 800254c:	d042      	beq.n	80025d4 <_ZN10SerialComm5flushEv+0xa8>
            {
                uint16_t len = 0;
 800254e:	2300      	movs	r3, #0
 8002550:	81fb      	strh	r3, [r7, #14]

                if (tx_tail < tx_head)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	f8b3 2808 	ldrh.w	r2, [r3, #2056]	@ 0x808
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	f8b3 3806 	ldrh.w	r3, [r3, #2054]	@ 0x806
 800255e:	429a      	cmp	r2, r3
 8002560:	d215      	bcs.n	800258e <_ZN10SerialComm5flushEv+0x62>
                {
                    len = tx_head - tx_tail;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	f8b3 2806 	ldrh.w	r2, [r3, #2054]	@ 0x806
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f8b3 3808 	ldrh.w	r3, [r3, #2056]	@ 0x808
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	81fb      	strh	r3, [r7, #14]
                    HAL_UART_Transmit_DMA(&huart, &tx_buf[tx_tail], len);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6818      	ldr	r0, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f8b3 3808 	ldrh.w	r3, [r3, #2056]	@ 0x808
 800257c:	461a      	mov	r2, r3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4413      	add	r3, r2
 8002582:	3304      	adds	r3, #4
 8002584:	89fa      	ldrh	r2, [r7, #14]
 8002586:	4619      	mov	r1, r3
 8002588:	f009 fb32 	bl	800bbf0 <HAL_UART_Transmit_DMA>
 800258c:	e01c      	b.n	80025c8 <_ZN10SerialComm5flushEv+0x9c>
                }
                else
                {
                    len = buffer_size - tx_tail;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	f8b3 3808 	ldrh.w	r3, [r3, #2056]	@ 0x808
 8002594:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 8002598:	81fb      	strh	r3, [r7, #14]
                    HAL_UART_Transmit_DMA(&huart, &tx_buf[tx_tail], len);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6818      	ldr	r0, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f8b3 3808 	ldrh.w	r3, [r3, #2056]	@ 0x808
 80025a4:	461a      	mov	r2, r3
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4413      	add	r3, r2
 80025aa:	3304      	adds	r3, #4
 80025ac:	89fa      	ldrh	r2, [r7, #14]
 80025ae:	4619      	mov	r1, r3
 80025b0:	f009 fb1e 	bl	800bbf0 <HAL_UART_Transmit_DMA>
                    HAL_UART_Transmit_DMA(&huart, tx_buf, tx_head);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6818      	ldr	r0, [r3, #0]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	1d19      	adds	r1, r3, #4
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	f8b3 3806 	ldrh.w	r3, [r3, #2054]	@ 0x806
 80025c2:	461a      	mov	r2, r3
 80025c4:	f009 fb14 	bl	800bbf0 <HAL_UART_Transmit_DMA>
                }
                
                tx_tail = tx_head;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f8b3 2806 	ldrh.w	r2, [r3, #2054]	@ 0x806
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	f8a3 2808 	strh.w	r2, [r3, #2056]	@ 0x808
            }
            
            is_tx_cplt = false;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2200      	movs	r2, #0
 80025d8:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
        }
    }
 80025dc:	bf00      	nop
 80025de:	3710      	adds	r7, #16
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}

080025e4 <_ZN10SerialComm11set_tx_cpltEv>:

    void set_tx_cplt(void)
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
    {
        is_tx_cplt = true;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
    }
 80025f4:	bf00      	nop
 80025f6:	370c      	adds	r7, #12
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bc80      	pop	{r7}
 80025fc:	4770      	bx	lr

080025fe <_ZN10SerialComm10reset_rbufEv>:

    void reset_rbuf(void)
 80025fe:	b580      	push	{r7, lr}
 8002600:	b082      	sub	sp, #8
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
    {
        HAL_UART_Receive_DMA(&huart, (uint8_t *)rx_buf, buffer_size);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6818      	ldr	r0, [r3, #0]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002610:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002614:	4619      	mov	r1, r3
 8002616:	f009 fb5b 	bl	800bcd0 <HAL_UART_Receive_DMA>
    }
 800261a:	bf00      	nop
 800261c:	3708      	adds	r7, #8
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
	...

08002624 <_ZN13STM32HardwareC1Ev>:
class STM32Hardware {
  protected:
    SerialComm &comm;

  public:
    STM32Hardware() : comm(comm_rosserial)
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	4a04      	ldr	r2, [pc, #16]	@ (8002640 <_ZN13STM32HardwareC1Ev+0x1c>)
 8002630:	601a      	str	r2, [r3, #0]
    {
        // TODO:
    }
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4618      	mov	r0, r3
 8002636:	370c      	adds	r7, #12
 8002638:	46bd      	mov	sp, r7
 800263a:	bc80      	pop	{r7}
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop
 8002640:	2000023c 	.word	0x2000023c

08002644 <_ZN13STM32Hardware4initEv>:
    STM32Hardware(SerialComm &comm) : comm(comm)
    {
        // TODO: 
    }
  
    void init()
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
    {
        comm.init();
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4618      	mov	r0, r3
 8002652:	f7ff feda 	bl	800240a <_ZN10SerialComm4initEv>
    }
 8002656:	bf00      	nop
 8002658:	3708      	adds	r7, #8
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}

0800265e <_ZN13STM32Hardware4readEv>:

    int read()  
 800265e:	b580      	push	{r7, lr}
 8002660:	b082      	sub	sp, #8
 8002662:	af00      	add	r7, sp, #0
 8002664:	6078      	str	r0, [r7, #4]
    {
        return comm.read();
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4618      	mov	r0, r3
 800266c:	f7ff fed8 	bl	8002420 <_ZN10SerialComm4readEv>
 8002670:	4603      	mov	r3, r0
    }
 8002672:	4618      	mov	r0, r3
 8002674:	3708      	adds	r7, #8
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}

0800267a <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length)
 800267a:	b580      	push	{r7, lr}
 800267c:	b084      	sub	sp, #16
 800267e:	af00      	add	r7, sp, #0
 8002680:	60f8      	str	r0, [r7, #12]
 8002682:	60b9      	str	r1, [r7, #8]
 8002684:	607a      	str	r2, [r7, #4]
    {
        comm.write(data, length);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	68b9      	ldr	r1, [r7, #8]
 800268e:	4618      	mov	r0, r3
 8002690:	f7ff fefc 	bl	800248c <_ZN10SerialComm5writeEPKhi>
    }
 8002694:	bf00      	nop
 8002696:	3710      	adds	r7, #16
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}

0800269c <_ZN13STM32Hardware4timeEv>:

    unsigned long time()
 800269c:	b580      	push	{r7, lr}
 800269e:	b082      	sub	sp, #8
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
    { 
        return HAL_GetTick(); 
 80026a4:	f006 fe28 	bl	80092f8 <HAL_GetTick>
 80026a8:	4603      	mov	r3, r0
    }
 80026aa:	4618      	mov	r0, r3
 80026ac:	3708      	adds	r7, #8
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
	...

080026b4 <_ZN8std_msgs6UInt32C1Ev>:
  {
    public:
      typedef uint32_t _data_type;
      _data_type data;

    UInt32():
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
      data(0)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	4618      	mov	r0, r3
 80026c0:	f7ff f822 	bl	8001708 <_ZN3ros3MsgC1Ev>
 80026c4:	4a05      	ldr	r2, [pc, #20]	@ (80026dc <_ZN8std_msgs6UInt32C1Ev+0x28>)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	601a      	str	r2, [r3, #0]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	605a      	str	r2, [r3, #4]
    {
    }
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	4618      	mov	r0, r3
 80026d4:	3708      	adds	r7, #8
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	0800d4e8 	.word	0x0800d4e8

080026e0 <_ZNK8std_msgs6UInt329serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80026e0:	b480      	push	{r7}
 80026e2:	b085      	sub	sp, #20
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80026ea:	2300      	movs	r3, #0
 80026ec:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data >> (8 * 0)) & 0xFF;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6859      	ldr	r1, [r3, #4]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	683a      	ldr	r2, [r7, #0]
 80026f6:	4413      	add	r3, r2
 80026f8:	b2ca      	uxtb	r2, r1
 80026fa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data >> (8 * 1)) & 0xFF;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	0a19      	lsrs	r1, r3, #8
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	3301      	adds	r3, #1
 8002706:	683a      	ldr	r2, [r7, #0]
 8002708:	4413      	add	r3, r2
 800270a:	b2ca      	uxtb	r2, r1
 800270c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data >> (8 * 2)) & 0xFF;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	0c19      	lsrs	r1, r3, #16
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	3302      	adds	r3, #2
 8002718:	683a      	ldr	r2, [r7, #0]
 800271a:	4413      	add	r3, r2
 800271c:	b2ca      	uxtb	r2, r1
 800271e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data >> (8 * 3)) & 0xFF;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	0e19      	lsrs	r1, r3, #24
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	3303      	adds	r3, #3
 800272a:	683a      	ldr	r2, [r7, #0]
 800272c:	4413      	add	r3, r2
 800272e:	b2ca      	uxtb	r2, r1
 8002730:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	3304      	adds	r3, #4
 8002736:	60fb      	str	r3, [r7, #12]
      return offset;
 8002738:	68fb      	ldr	r3, [r7, #12]
    }
 800273a:	4618      	mov	r0, r3
 800273c:	3714      	adds	r7, #20
 800273e:	46bd      	mov	sp, r7
 8002740:	bc80      	pop	{r7}
 8002742:	4770      	bx	lr

08002744 <_ZN8std_msgs6UInt3211deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002744:	b480      	push	{r7}
 8002746:	b085      	sub	sp, #20
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800274e:	2300      	movs	r3, #0
 8002750:	60fb      	str	r3, [r7, #12]
      this->data =  ((uint32_t) (*(inbuffer + offset)));
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	683a      	ldr	r2, [r7, #0]
 8002756:	4413      	add	r3, r2
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	461a      	mov	r2, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	605a      	str	r2, [r3, #4]
      this->data |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	685a      	ldr	r2, [r3, #4]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	3301      	adds	r3, #1
 8002768:	6839      	ldr	r1, [r7, #0]
 800276a:	440b      	add	r3, r1
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	021b      	lsls	r3, r3, #8
 8002770:	431a      	orrs	r2, r3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	605a      	str	r2, [r3, #4]
      this->data |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685a      	ldr	r2, [r3, #4]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	3302      	adds	r3, #2
 800277e:	6839      	ldr	r1, [r7, #0]
 8002780:	440b      	add	r3, r1
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	041b      	lsls	r3, r3, #16
 8002786:	431a      	orrs	r2, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	605a      	str	r2, [r3, #4]
      this->data |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	685a      	ldr	r2, [r3, #4]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	3303      	adds	r3, #3
 8002794:	6839      	ldr	r1, [r7, #0]
 8002796:	440b      	add	r3, r1
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	061b      	lsls	r3, r3, #24
 800279c:	431a      	orrs	r2, r3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	3304      	adds	r3, #4
 80027a6:	60fb      	str	r3, [r7, #12]
     return offset;
 80027a8:	68fb      	ldr	r3, [r7, #12]
    }
 80027aa:	4618      	mov	r0, r3
 80027ac:	3714      	adds	r7, #20
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bc80      	pop	{r7}
 80027b2:	4770      	bx	lr

080027b4 <_ZN8std_msgs6UInt327getTypeEv>:

    virtual const char * getType() override { return "std_msgs/UInt32"; };
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	4b02      	ldr	r3, [pc, #8]	@ (80027c8 <_ZN8std_msgs6UInt327getTypeEv+0x14>)
 80027be:	4618      	mov	r0, r3
 80027c0:	370c      	adds	r7, #12
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bc80      	pop	{r7}
 80027c6:	4770      	bx	lr
 80027c8:	0800cf44 	.word	0x0800cf44

080027cc <_ZN8std_msgs6UInt326getMD5Ev>:
    virtual const char * getMD5() override { return "304a39449588c7f8ce2df6e8001c5fce"; };
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	4b02      	ldr	r3, [pc, #8]	@ (80027e0 <_ZN8std_msgs6UInt326getMD5Ev+0x14>)
 80027d6:	4618      	mov	r0, r3
 80027d8:	370c      	adds	r7, #12
 80027da:	46bd      	mov	sp, r7
 80027dc:	bc80      	pop	{r7}
 80027de:	4770      	bx	lr
 80027e0:	0800cf54 	.word	0x0800cf54

080027e4 <_ZN8std_msgs6HeaderC1Ev>:
      typedef ros::Time _stamp_type;
      _stamp_type stamp;
      typedef const char* _frame_id_type;
      _frame_id_type frame_id;

    Header():
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
      seq(0),
      stamp(),
      frame_id("")
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7fe ff8a 	bl	8001708 <_ZN3ros3MsgC1Ev>
 80027f4:	4a09      	ldr	r2, [pc, #36]	@ (800281c <_ZN8std_msgs6HeaderC1Ev+0x38>)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	601a      	str	r2, [r3, #0]
      seq(0),
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	605a      	str	r2, [r3, #4]
      stamp(),
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	3308      	adds	r3, #8
 8002804:	4618      	mov	r0, r3
 8002806:	f7fe ff6f 	bl	80016e8 <_ZN3ros4TimeC1Ev>
      frame_id("")
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a04      	ldr	r2, [pc, #16]	@ (8002820 <_ZN8std_msgs6HeaderC1Ev+0x3c>)
 800280e:	611a      	str	r2, [r3, #16]
    {
    }
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	4618      	mov	r0, r3
 8002814:	3708      	adds	r7, #8
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	0800d4d0 	.word	0x0800d4d0
 8002820:	0800cea4 	.word	0x0800cea4

08002824 <_ZNK8std_msgs6Header9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800282e:	2300      	movs	r3, #0
 8002830:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->seq >> (8 * 0)) & 0xFF;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6859      	ldr	r1, [r3, #4]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	683a      	ldr	r2, [r7, #0]
 800283a:	4413      	add	r3, r2
 800283c:	b2ca      	uxtb	r2, r1
 800283e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->seq >> (8 * 1)) & 0xFF;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	0a19      	lsrs	r1, r3, #8
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	3301      	adds	r3, #1
 800284a:	683a      	ldr	r2, [r7, #0]
 800284c:	4413      	add	r3, r2
 800284e:	b2ca      	uxtb	r2, r1
 8002850:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->seq >> (8 * 2)) & 0xFF;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	0c19      	lsrs	r1, r3, #16
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	3302      	adds	r3, #2
 800285c:	683a      	ldr	r2, [r7, #0]
 800285e:	4413      	add	r3, r2
 8002860:	b2ca      	uxtb	r2, r1
 8002862:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->seq >> (8 * 3)) & 0xFF;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	0e19      	lsrs	r1, r3, #24
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	3303      	adds	r3, #3
 800286e:	683a      	ldr	r2, [r7, #0]
 8002870:	4413      	add	r3, r2
 8002872:	b2ca      	uxtb	r2, r1
 8002874:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->seq);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	3304      	adds	r3, #4
 800287a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stamp.sec >> (8 * 0)) & 0xFF;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6899      	ldr	r1, [r3, #8]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	683a      	ldr	r2, [r7, #0]
 8002884:	4413      	add	r3, r2
 8002886:	b2ca      	uxtb	r2, r1
 8002888:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stamp.sec >> (8 * 1)) & 0xFF;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	0a19      	lsrs	r1, r3, #8
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	3301      	adds	r3, #1
 8002894:	683a      	ldr	r2, [r7, #0]
 8002896:	4413      	add	r3, r2
 8002898:	b2ca      	uxtb	r2, r1
 800289a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stamp.sec >> (8 * 2)) & 0xFF;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	0c19      	lsrs	r1, r3, #16
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	3302      	adds	r3, #2
 80028a6:	683a      	ldr	r2, [r7, #0]
 80028a8:	4413      	add	r3, r2
 80028aa:	b2ca      	uxtb	r2, r1
 80028ac:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stamp.sec >> (8 * 3)) & 0xFF;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	0e19      	lsrs	r1, r3, #24
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	3303      	adds	r3, #3
 80028b8:	683a      	ldr	r2, [r7, #0]
 80028ba:	4413      	add	r3, r2
 80028bc:	b2ca      	uxtb	r2, r1
 80028be:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stamp.sec);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	3304      	adds	r3, #4
 80028c4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stamp.nsec >> (8 * 0)) & 0xFF;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	68d9      	ldr	r1, [r3, #12]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	683a      	ldr	r2, [r7, #0]
 80028ce:	4413      	add	r3, r2
 80028d0:	b2ca      	uxtb	r2, r1
 80028d2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stamp.nsec >> (8 * 1)) & 0xFF;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	0a19      	lsrs	r1, r3, #8
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	3301      	adds	r3, #1
 80028de:	683a      	ldr	r2, [r7, #0]
 80028e0:	4413      	add	r3, r2
 80028e2:	b2ca      	uxtb	r2, r1
 80028e4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stamp.nsec >> (8 * 2)) & 0xFF;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	0c19      	lsrs	r1, r3, #16
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	3302      	adds	r3, #2
 80028f0:	683a      	ldr	r2, [r7, #0]
 80028f2:	4413      	add	r3, r2
 80028f4:	b2ca      	uxtb	r2, r1
 80028f6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stamp.nsec >> (8 * 3)) & 0xFF;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	0e19      	lsrs	r1, r3, #24
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	3303      	adds	r3, #3
 8002902:	683a      	ldr	r2, [r7, #0]
 8002904:	4413      	add	r3, r2
 8002906:	b2ca      	uxtb	r2, r1
 8002908:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stamp.nsec);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	3304      	adds	r3, #4
 800290e:	60fb      	str	r3, [r7, #12]
      uint32_t length_frame_id = strlen(this->frame_id);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	691b      	ldr	r3, [r3, #16]
 8002914:	4618      	mov	r0, r3
 8002916:	f7fd fc1b 	bl	8000150 <strlen>
 800291a:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_frame_id);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	683a      	ldr	r2, [r7, #0]
 8002920:	4413      	add	r3, r2
 8002922:	68b9      	ldr	r1, [r7, #8]
 8002924:	4618      	mov	r0, r3
 8002926:	f005 fb47 	bl	8007fb8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	3304      	adds	r3, #4
 800292e:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->frame_id, length_frame_id);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	683a      	ldr	r2, [r7, #0]
 8002934:	18d0      	adds	r0, r2, r3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	691b      	ldr	r3, [r3, #16]
 800293a:	68ba      	ldr	r2, [r7, #8]
 800293c:	4619      	mov	r1, r3
 800293e:	f00a fa2d 	bl	800cd9c <memcpy>
      offset += length_frame_id;
 8002942:	68fa      	ldr	r2, [r7, #12]
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	4413      	add	r3, r2
 8002948:	60fb      	str	r3, [r7, #12]
      return offset;
 800294a:	68fb      	ldr	r3, [r7, #12]
    }
 800294c:	4618      	mov	r0, r3
 800294e:	3710      	adds	r7, #16
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}

08002954 <_ZN8std_msgs6Header11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002954:	b580      	push	{r7, lr}
 8002956:	b086      	sub	sp, #24
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800295e:	2300      	movs	r3, #0
 8002960:	613b      	str	r3, [r7, #16]
      this->seq =  ((uint32_t) (*(inbuffer + offset)));
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	683a      	ldr	r2, [r7, #0]
 8002966:	4413      	add	r3, r2
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	461a      	mov	r2, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685a      	ldr	r2, [r3, #4]
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	3301      	adds	r3, #1
 8002978:	6839      	ldr	r1, [r7, #0]
 800297a:	440b      	add	r3, r1
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	021b      	lsls	r3, r3, #8
 8002980:	431a      	orrs	r2, r3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685a      	ldr	r2, [r3, #4]
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	3302      	adds	r3, #2
 800298e:	6839      	ldr	r1, [r7, #0]
 8002990:	440b      	add	r3, r1
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	041b      	lsls	r3, r3, #16
 8002996:	431a      	orrs	r2, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	685a      	ldr	r2, [r3, #4]
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	3303      	adds	r3, #3
 80029a4:	6839      	ldr	r1, [r7, #0]
 80029a6:	440b      	add	r3, r1
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	061b      	lsls	r3, r3, #24
 80029ac:	431a      	orrs	r2, r3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->seq);
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	3304      	adds	r3, #4
 80029b6:	613b      	str	r3, [r7, #16]
      this->stamp.sec =  ((uint32_t) (*(inbuffer + offset)));
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	683a      	ldr	r2, [r7, #0]
 80029bc:	4413      	add	r3, r2
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	461a      	mov	r2, r3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	689a      	ldr	r2, [r3, #8]
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	3301      	adds	r3, #1
 80029ce:	6839      	ldr	r1, [r7, #0]
 80029d0:	440b      	add	r3, r1
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	021b      	lsls	r3, r3, #8
 80029d6:	431a      	orrs	r2, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	689a      	ldr	r2, [r3, #8]
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	3302      	adds	r3, #2
 80029e4:	6839      	ldr	r1, [r7, #0]
 80029e6:	440b      	add	r3, r1
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	041b      	lsls	r3, r3, #16
 80029ec:	431a      	orrs	r2, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	689a      	ldr	r2, [r3, #8]
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	3303      	adds	r3, #3
 80029fa:	6839      	ldr	r1, [r7, #0]
 80029fc:	440b      	add	r3, r1
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	061b      	lsls	r3, r3, #24
 8002a02:	431a      	orrs	r2, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->stamp.sec);
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	3304      	adds	r3, #4
 8002a0c:	613b      	str	r3, [r7, #16]
      this->stamp.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	683a      	ldr	r2, [r7, #0]
 8002a12:	4413      	add	r3, r2
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	461a      	mov	r2, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	68da      	ldr	r2, [r3, #12]
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	3301      	adds	r3, #1
 8002a24:	6839      	ldr	r1, [r7, #0]
 8002a26:	440b      	add	r3, r1
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	021b      	lsls	r3, r3, #8
 8002a2c:	431a      	orrs	r2, r3
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	68da      	ldr	r2, [r3, #12]
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	3302      	adds	r3, #2
 8002a3a:	6839      	ldr	r1, [r7, #0]
 8002a3c:	440b      	add	r3, r1
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	041b      	lsls	r3, r3, #16
 8002a42:	431a      	orrs	r2, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	68da      	ldr	r2, [r3, #12]
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	3303      	adds	r3, #3
 8002a50:	6839      	ldr	r1, [r7, #0]
 8002a52:	440b      	add	r3, r1
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	061b      	lsls	r3, r3, #24
 8002a58:	431a      	orrs	r2, r3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->stamp.nsec);
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	3304      	adds	r3, #4
 8002a62:	613b      	str	r3, [r7, #16]
      uint32_t length_frame_id;
      arrToVar(length_frame_id, (inbuffer + offset));
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	683a      	ldr	r2, [r7, #0]
 8002a68:	441a      	add	r2, r3
 8002a6a:	f107 030c 	add.w	r3, r7, #12
 8002a6e:	4611      	mov	r1, r2
 8002a70:	4618      	mov	r0, r3
 8002a72:	f005 fabf 	bl	8007ff4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	3304      	adds	r3, #4
 8002a7a:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	617b      	str	r3, [r7, #20]
 8002a80:	e00b      	b.n	8002a9a <_ZN8std_msgs6Header11deserializeEPh+0x146>
          inbuffer[k-1]=inbuffer[k];
 8002a82:	683a      	ldr	r2, [r7, #0]
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	441a      	add	r2, r3
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	3b01      	subs	r3, #1
 8002a8c:	6839      	ldr	r1, [r7, #0]
 8002a8e:	440b      	add	r3, r1
 8002a90:	7812      	ldrb	r2, [r2, #0]
 8002a92:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	3301      	adds	r3, #1
 8002a98:	617b      	str	r3, [r7, #20]
 8002a9a:	693a      	ldr	r2, [r7, #16]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	4413      	add	r3, r2
 8002aa0:	697a      	ldr	r2, [r7, #20]
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d3ed      	bcc.n	8002a82 <_ZN8std_msgs6Header11deserializeEPh+0x12e>
      }
      inbuffer[offset+length_frame_id-1]=0;
 8002aa6:	693a      	ldr	r2, [r7, #16]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	4413      	add	r3, r2
 8002aac:	3b01      	subs	r3, #1
 8002aae:	683a      	ldr	r2, [r7, #0]
 8002ab0:	4413      	add	r3, r2
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	701a      	strb	r2, [r3, #0]
      this->frame_id = (char *)(inbuffer + offset-1);
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	3b01      	subs	r3, #1
 8002aba:	683a      	ldr	r2, [r7, #0]
 8002abc:	441a      	add	r2, r3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	611a      	str	r2, [r3, #16]
      offset += length_frame_id;
 8002ac2:	693a      	ldr	r2, [r7, #16]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	4413      	add	r3, r2
 8002ac8:	613b      	str	r3, [r7, #16]
     return offset;
 8002aca:	693b      	ldr	r3, [r7, #16]
    }
 8002acc:	4618      	mov	r0, r3
 8002ace:	3718      	adds	r7, #24
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}

08002ad4 <_ZN8std_msgs6Header7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Header"; };
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	4b02      	ldr	r3, [pc, #8]	@ (8002ae8 <_ZN8std_msgs6Header7getTypeEv+0x14>)
 8002ade:	4618      	mov	r0, r3
 8002ae0:	370c      	adds	r7, #12
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bc80      	pop	{r7}
 8002ae6:	4770      	bx	lr
 8002ae8:	0800cf78 	.word	0x0800cf78

08002aec <_ZN8std_msgs6Header6getMD5Ev>:
    virtual const char * getMD5() override { return "2176decaecbce78abc3b96ef049fabed"; };
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	4b02      	ldr	r3, [pc, #8]	@ (8002b00 <_ZN8std_msgs6Header6getMD5Ev+0x14>)
 8002af6:	4618      	mov	r0, r3
 8002af8:	370c      	adds	r7, #12
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bc80      	pop	{r7}
 8002afe:	4770      	bx	lr
 8002b00:	0800cf88 	.word	0x0800cf88

08002b04 <_ZN13geometry_msgs10QuaternionC1Ev>:
      typedef double _z_type;
      _z_type z;
      typedef double _w_type;
      _w_type w;

    Quaternion():
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0),
      w(0)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f7fe fdfa 	bl	8001708 <_ZN3ros3MsgC1Ev>
 8002b14:	4a11      	ldr	r2, [pc, #68]	@ (8002b5c <_ZN13geometry_msgs10QuaternionC1Ev+0x58>)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	601a      	str	r2, [r3, #0]
      x(0),
 8002b1a:	6879      	ldr	r1, [r7, #4]
 8002b1c:	f04f 0200 	mov.w	r2, #0
 8002b20:	f04f 0300 	mov.w	r3, #0
 8002b24:	e9c1 2302 	strd	r2, r3, [r1, #8]
      y(0),
 8002b28:	6879      	ldr	r1, [r7, #4]
 8002b2a:	f04f 0200 	mov.w	r2, #0
 8002b2e:	f04f 0300 	mov.w	r3, #0
 8002b32:	e9c1 2304 	strd	r2, r3, [r1, #16]
      z(0),
 8002b36:	6879      	ldr	r1, [r7, #4]
 8002b38:	f04f 0200 	mov.w	r2, #0
 8002b3c:	f04f 0300 	mov.w	r3, #0
 8002b40:	e9c1 2306 	strd	r2, r3, [r1, #24]
      w(0)
 8002b44:	6879      	ldr	r1, [r7, #4]
 8002b46:	f04f 0200 	mov.w	r2, #0
 8002b4a:	f04f 0300 	mov.w	r3, #0
 8002b4e:	e9c1 2308 	strd	r2, r3, [r1, #32]
    {
    }
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4618      	mov	r0, r3
 8002b56:	3708      	adds	r7, #8
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	0800d4b8 	.word	0x0800d4b8

08002b60 <_ZNK13geometry_msgs10Quaternion9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002b60:	b480      	push	{r7}
 8002b62:	b08d      	sub	sp, #52	@ 0x34
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002b74:	e9c7 2308 	strd	r2, r3, [r7, #32]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8002b78:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002b7c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002b7e:	6838      	ldr	r0, [r7, #0]
 8002b80:	4401      	add	r1, r0
 8002b82:	b2d3      	uxtb	r3, r2
 8002b84:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 8002b86:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002b8a:	f04f 0200 	mov.w	r2, #0
 8002b8e:	f04f 0300 	mov.w	r3, #0
 8002b92:	0a02      	lsrs	r2, r0, #8
 8002b94:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002b98:	0a0b      	lsrs	r3, r1, #8
 8002b9a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002b9c:	3101      	adds	r1, #1
 8002b9e:	6838      	ldr	r0, [r7, #0]
 8002ba0:	4401      	add	r1, r0
 8002ba2:	b2d3      	uxtb	r3, r2
 8002ba4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 8002ba6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002baa:	f04f 0200 	mov.w	r2, #0
 8002bae:	f04f 0300 	mov.w	r3, #0
 8002bb2:	0c02      	lsrs	r2, r0, #16
 8002bb4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002bb8:	0c0b      	lsrs	r3, r1, #16
 8002bba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002bbc:	3102      	adds	r1, #2
 8002bbe:	6838      	ldr	r0, [r7, #0]
 8002bc0:	4401      	add	r1, r0
 8002bc2:	b2d3      	uxtb	r3, r2
 8002bc4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 8002bc6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002bca:	f04f 0200 	mov.w	r2, #0
 8002bce:	f04f 0300 	mov.w	r3, #0
 8002bd2:	0e02      	lsrs	r2, r0, #24
 8002bd4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002bd8:	0e0b      	lsrs	r3, r1, #24
 8002bda:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002bdc:	3103      	adds	r1, #3
 8002bde:	6838      	ldr	r0, [r7, #0]
 8002be0:	4401      	add	r1, r0
 8002be2:	b2d3      	uxtb	r3, r2
 8002be4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 8002be6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002bea:	f04f 0200 	mov.w	r2, #0
 8002bee:	f04f 0300 	mov.w	r3, #0
 8002bf2:	000a      	movs	r2, r1
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002bf8:	3104      	adds	r1, #4
 8002bfa:	6838      	ldr	r0, [r7, #0]
 8002bfc:	4401      	add	r1, r0
 8002bfe:	b2d3      	uxtb	r3, r2
 8002c00:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 8002c02:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002c06:	f04f 0200 	mov.w	r2, #0
 8002c0a:	f04f 0300 	mov.w	r3, #0
 8002c0e:	0a0a      	lsrs	r2, r1, #8
 8002c10:	2300      	movs	r3, #0
 8002c12:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002c14:	3105      	adds	r1, #5
 8002c16:	6838      	ldr	r0, [r7, #0]
 8002c18:	4401      	add	r1, r0
 8002c1a:	b2d3      	uxtb	r3, r2
 8002c1c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8002c1e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002c22:	f04f 0200 	mov.w	r2, #0
 8002c26:	f04f 0300 	mov.w	r3, #0
 8002c2a:	0c0a      	lsrs	r2, r1, #16
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002c30:	3106      	adds	r1, #6
 8002c32:	6838      	ldr	r0, [r7, #0]
 8002c34:	4401      	add	r1, r0
 8002c36:	b2d3      	uxtb	r3, r2
 8002c38:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8002c3a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002c3e:	f04f 0200 	mov.w	r2, #0
 8002c42:	f04f 0300 	mov.w	r3, #0
 8002c46:	0e0a      	lsrs	r2, r1, #24
 8002c48:	2300      	movs	r3, #0
 8002c4a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002c4c:	3107      	adds	r1, #7
 8002c4e:	6838      	ldr	r0, [r7, #0]
 8002c50:	4401      	add	r1, r0
 8002c52:	b2d3      	uxtb	r3, r2
 8002c54:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 8002c56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c58:	3308      	adds	r3, #8
 8002c5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002c62:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 8002c66:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c6a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002c6c:	6838      	ldr	r0, [r7, #0]
 8002c6e:	4401      	add	r1, r0
 8002c70:	b2d3      	uxtb	r3, r2
 8002c72:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8002c74:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002c78:	f04f 0200 	mov.w	r2, #0
 8002c7c:	f04f 0300 	mov.w	r3, #0
 8002c80:	0a02      	lsrs	r2, r0, #8
 8002c82:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002c86:	0a0b      	lsrs	r3, r1, #8
 8002c88:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002c8a:	3101      	adds	r1, #1
 8002c8c:	6838      	ldr	r0, [r7, #0]
 8002c8e:	4401      	add	r1, r0
 8002c90:	b2d3      	uxtb	r3, r2
 8002c92:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8002c94:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002c98:	f04f 0200 	mov.w	r2, #0
 8002c9c:	f04f 0300 	mov.w	r3, #0
 8002ca0:	0c02      	lsrs	r2, r0, #16
 8002ca2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002ca6:	0c0b      	lsrs	r3, r1, #16
 8002ca8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002caa:	3102      	adds	r1, #2
 8002cac:	6838      	ldr	r0, [r7, #0]
 8002cae:	4401      	add	r1, r0
 8002cb0:	b2d3      	uxtb	r3, r2
 8002cb2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8002cb4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002cb8:	f04f 0200 	mov.w	r2, #0
 8002cbc:	f04f 0300 	mov.w	r3, #0
 8002cc0:	0e02      	lsrs	r2, r0, #24
 8002cc2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002cc6:	0e0b      	lsrs	r3, r1, #24
 8002cc8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002cca:	3103      	adds	r1, #3
 8002ccc:	6838      	ldr	r0, [r7, #0]
 8002cce:	4401      	add	r1, r0
 8002cd0:	b2d3      	uxtb	r3, r2
 8002cd2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8002cd4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002cd8:	f04f 0200 	mov.w	r2, #0
 8002cdc:	f04f 0300 	mov.w	r3, #0
 8002ce0:	000a      	movs	r2, r1
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002ce6:	3104      	adds	r1, #4
 8002ce8:	6838      	ldr	r0, [r7, #0]
 8002cea:	4401      	add	r1, r0
 8002cec:	b2d3      	uxtb	r3, r2
 8002cee:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8002cf0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002cf4:	f04f 0200 	mov.w	r2, #0
 8002cf8:	f04f 0300 	mov.w	r3, #0
 8002cfc:	0a0a      	lsrs	r2, r1, #8
 8002cfe:	2300      	movs	r3, #0
 8002d00:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002d02:	3105      	adds	r1, #5
 8002d04:	6838      	ldr	r0, [r7, #0]
 8002d06:	4401      	add	r1, r0
 8002d08:	b2d3      	uxtb	r3, r2
 8002d0a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8002d0c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002d10:	f04f 0200 	mov.w	r2, #0
 8002d14:	f04f 0300 	mov.w	r3, #0
 8002d18:	0c0a      	lsrs	r2, r1, #16
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002d1e:	3106      	adds	r1, #6
 8002d20:	6838      	ldr	r0, [r7, #0]
 8002d22:	4401      	add	r1, r0
 8002d24:	b2d3      	uxtb	r3, r2
 8002d26:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8002d28:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002d2c:	f04f 0200 	mov.w	r2, #0
 8002d30:	f04f 0300 	mov.w	r3, #0
 8002d34:	0e0a      	lsrs	r2, r1, #24
 8002d36:	2300      	movs	r3, #0
 8002d38:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002d3a:	3107      	adds	r1, #7
 8002d3c:	6838      	ldr	r0, [r7, #0]
 8002d3e:	4401      	add	r1, r0
 8002d40:	b2d3      	uxtb	r3, r2
 8002d42:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 8002d44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d46:	3308      	adds	r3, #8
 8002d48:	62fb      	str	r3, [r7, #44]	@ 0x2c
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002d50:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8002d54:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002d58:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002d5a:	6838      	ldr	r0, [r7, #0]
 8002d5c:	4401      	add	r1, r0
 8002d5e:	b2d3      	uxtb	r3, r2
 8002d60:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8002d62:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002d66:	f04f 0200 	mov.w	r2, #0
 8002d6a:	f04f 0300 	mov.w	r3, #0
 8002d6e:	0a02      	lsrs	r2, r0, #8
 8002d70:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002d74:	0a0b      	lsrs	r3, r1, #8
 8002d76:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002d78:	3101      	adds	r1, #1
 8002d7a:	6838      	ldr	r0, [r7, #0]
 8002d7c:	4401      	add	r1, r0
 8002d7e:	b2d3      	uxtb	r3, r2
 8002d80:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8002d82:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002d86:	f04f 0200 	mov.w	r2, #0
 8002d8a:	f04f 0300 	mov.w	r3, #0
 8002d8e:	0c02      	lsrs	r2, r0, #16
 8002d90:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002d94:	0c0b      	lsrs	r3, r1, #16
 8002d96:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002d98:	3102      	adds	r1, #2
 8002d9a:	6838      	ldr	r0, [r7, #0]
 8002d9c:	4401      	add	r1, r0
 8002d9e:	b2d3      	uxtb	r3, r2
 8002da0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8002da2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002da6:	f04f 0200 	mov.w	r2, #0
 8002daa:	f04f 0300 	mov.w	r3, #0
 8002dae:	0e02      	lsrs	r2, r0, #24
 8002db0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002db4:	0e0b      	lsrs	r3, r1, #24
 8002db6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002db8:	3103      	adds	r1, #3
 8002dba:	6838      	ldr	r0, [r7, #0]
 8002dbc:	4401      	add	r1, r0
 8002dbe:	b2d3      	uxtb	r3, r2
 8002dc0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8002dc2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002dc6:	f04f 0200 	mov.w	r2, #0
 8002dca:	f04f 0300 	mov.w	r3, #0
 8002dce:	000a      	movs	r2, r1
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002dd4:	3104      	adds	r1, #4
 8002dd6:	6838      	ldr	r0, [r7, #0]
 8002dd8:	4401      	add	r1, r0
 8002dda:	b2d3      	uxtb	r3, r2
 8002ddc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8002dde:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002de2:	f04f 0200 	mov.w	r2, #0
 8002de6:	f04f 0300 	mov.w	r3, #0
 8002dea:	0a0a      	lsrs	r2, r1, #8
 8002dec:	2300      	movs	r3, #0
 8002dee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002df0:	3105      	adds	r1, #5
 8002df2:	6838      	ldr	r0, [r7, #0]
 8002df4:	4401      	add	r1, r0
 8002df6:	b2d3      	uxtb	r3, r2
 8002df8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8002dfa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002dfe:	f04f 0200 	mov.w	r2, #0
 8002e02:	f04f 0300 	mov.w	r3, #0
 8002e06:	0c0a      	lsrs	r2, r1, #16
 8002e08:	2300      	movs	r3, #0
 8002e0a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002e0c:	3106      	adds	r1, #6
 8002e0e:	6838      	ldr	r0, [r7, #0]
 8002e10:	4401      	add	r1, r0
 8002e12:	b2d3      	uxtb	r3, r2
 8002e14:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 8002e16:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002e1a:	f04f 0200 	mov.w	r2, #0
 8002e1e:	f04f 0300 	mov.w	r3, #0
 8002e22:	0e0a      	lsrs	r2, r1, #24
 8002e24:	2300      	movs	r3, #0
 8002e26:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002e28:	3107      	adds	r1, #7
 8002e2a:	6838      	ldr	r0, [r7, #0]
 8002e2c:	4401      	add	r1, r0
 8002e2e:	b2d3      	uxtb	r3, r2
 8002e30:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 8002e32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e34:	3308      	adds	r3, #8
 8002e36:	62fb      	str	r3, [r7, #44]	@ 0x2c
      union {
        double real;
        uint64_t base;
      } u_w;
      u_w.real = this->w;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002e3e:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_w.base >> (8 * 0)) & 0xFF;
 8002e42:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e46:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002e48:	6838      	ldr	r0, [r7, #0]
 8002e4a:	4401      	add	r1, r0
 8002e4c:	b2d3      	uxtb	r3, r2
 8002e4e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_w.base >> (8 * 1)) & 0xFF;
 8002e50:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002e54:	f04f 0200 	mov.w	r2, #0
 8002e58:	f04f 0300 	mov.w	r3, #0
 8002e5c:	0a02      	lsrs	r2, r0, #8
 8002e5e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002e62:	0a0b      	lsrs	r3, r1, #8
 8002e64:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002e66:	3101      	adds	r1, #1
 8002e68:	6838      	ldr	r0, [r7, #0]
 8002e6a:	4401      	add	r1, r0
 8002e6c:	b2d3      	uxtb	r3, r2
 8002e6e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_w.base >> (8 * 2)) & 0xFF;
 8002e70:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002e74:	f04f 0200 	mov.w	r2, #0
 8002e78:	f04f 0300 	mov.w	r3, #0
 8002e7c:	0c02      	lsrs	r2, r0, #16
 8002e7e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002e82:	0c0b      	lsrs	r3, r1, #16
 8002e84:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002e86:	3102      	adds	r1, #2
 8002e88:	6838      	ldr	r0, [r7, #0]
 8002e8a:	4401      	add	r1, r0
 8002e8c:	b2d3      	uxtb	r3, r2
 8002e8e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_w.base >> (8 * 3)) & 0xFF;
 8002e90:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002e94:	f04f 0200 	mov.w	r2, #0
 8002e98:	f04f 0300 	mov.w	r3, #0
 8002e9c:	0e02      	lsrs	r2, r0, #24
 8002e9e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002ea2:	0e0b      	lsrs	r3, r1, #24
 8002ea4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002ea6:	3103      	adds	r1, #3
 8002ea8:	6838      	ldr	r0, [r7, #0]
 8002eaa:	4401      	add	r1, r0
 8002eac:	b2d3      	uxtb	r3, r2
 8002eae:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_w.base >> (8 * 4)) & 0xFF;
 8002eb0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002eb4:	f04f 0200 	mov.w	r2, #0
 8002eb8:	f04f 0300 	mov.w	r3, #0
 8002ebc:	000a      	movs	r2, r1
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002ec2:	3104      	adds	r1, #4
 8002ec4:	6838      	ldr	r0, [r7, #0]
 8002ec6:	4401      	add	r1, r0
 8002ec8:	b2d3      	uxtb	r3, r2
 8002eca:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_w.base >> (8 * 5)) & 0xFF;
 8002ecc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002ed0:	f04f 0200 	mov.w	r2, #0
 8002ed4:	f04f 0300 	mov.w	r3, #0
 8002ed8:	0a0a      	lsrs	r2, r1, #8
 8002eda:	2300      	movs	r3, #0
 8002edc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002ede:	3105      	adds	r1, #5
 8002ee0:	6838      	ldr	r0, [r7, #0]
 8002ee2:	4401      	add	r1, r0
 8002ee4:	b2d3      	uxtb	r3, r2
 8002ee6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_w.base >> (8 * 6)) & 0xFF;
 8002ee8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002eec:	f04f 0200 	mov.w	r2, #0
 8002ef0:	f04f 0300 	mov.w	r3, #0
 8002ef4:	0c0a      	lsrs	r2, r1, #16
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002efa:	3106      	adds	r1, #6
 8002efc:	6838      	ldr	r0, [r7, #0]
 8002efe:	4401      	add	r1, r0
 8002f00:	b2d3      	uxtb	r3, r2
 8002f02:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_w.base >> (8 * 7)) & 0xFF;
 8002f04:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002f08:	f04f 0200 	mov.w	r2, #0
 8002f0c:	f04f 0300 	mov.w	r3, #0
 8002f10:	0e0a      	lsrs	r2, r1, #24
 8002f12:	2300      	movs	r3, #0
 8002f14:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002f16:	3107      	adds	r1, #7
 8002f18:	6838      	ldr	r0, [r7, #0]
 8002f1a:	4401      	add	r1, r0
 8002f1c:	b2d3      	uxtb	r3, r2
 8002f1e:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->w);
 8002f20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f22:	3308      	adds	r3, #8
 8002f24:	62fb      	str	r3, [r7, #44]	@ 0x2c
      return offset;
 8002f26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3734      	adds	r7, #52	@ 0x34
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bc80      	pop	{r7}
 8002f30:	4770      	bx	lr

08002f32 <_ZN13geometry_msgs10Quaternion11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002f32:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002f36:	f5ad 7d0f 	sub.w	sp, sp, #572	@ 0x23c
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	f8c7 020c 	str.w	r0, [r7, #524]	@ 0x20c
 8002f40:	f8c7 1208 	str.w	r1, [r7, #520]	@ 0x208
    {
      int offset = 0;
 8002f44:	2300      	movs	r3, #0
 8002f46:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 8002f4a:	f04f 0200 	mov.w	r2, #0
 8002f4e:	f04f 0300 	mov.w	r3, #0
 8002f52:	e9c7 238a 	strd	r2, r3, [r7, #552]	@ 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002f56:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
 8002f5a:	f8d7 2234 	ldr.w	r2, [r7, #564]	@ 0x234
 8002f5e:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8002f62:	4413      	add	r3, r2
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	2200      	movs	r2, #0
 8002f6a:	461c      	mov	r4, r3
 8002f6c:	4615      	mov	r5, r2
 8002f6e:	ea40 0804 	orr.w	r8, r0, r4
 8002f72:	ea41 0905 	orr.w	r9, r1, r5
 8002f76:	e9c7 898a 	strd	r8, r9, [r7, #552]	@ 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002f7a:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
 8002f7e:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8002f82:	1c5a      	adds	r2, r3, #1
 8002f84:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8002f88:	4413      	add	r3, r2
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	2200      	movs	r2, #0
 8002f90:	469a      	mov	sl, r3
 8002f92:	4693      	mov	fp, r2
 8002f94:	f04f 0200 	mov.w	r2, #0
 8002f98:	f04f 0300 	mov.w	r3, #0
 8002f9c:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8002fa0:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8002fa4:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8002fa8:	ea40 0402 	orr.w	r4, r0, r2
 8002fac:	f8c7 4200 	str.w	r4, [r7, #512]	@ 0x200
 8002fb0:	430b      	orrs	r3, r1
 8002fb2:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
 8002fb6:	e9d7 3480 	ldrd	r3, r4, [r7, #512]	@ 0x200
 8002fba:	e9c7 348a 	strd	r3, r4, [r7, #552]	@ 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002fbe:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
 8002fc2:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8002fc6:	1c9a      	adds	r2, r3, #2
 8002fc8:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8002fcc:	4413      	add	r3, r2
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
 8002fd8:	f8c7 21fc 	str.w	r2, [r7, #508]	@ 0x1fc
 8002fdc:	f04f 0200 	mov.w	r2, #0
 8002fe0:	f04f 0300 	mov.w	r3, #0
 8002fe4:	e9d7 897e 	ldrd	r8, r9, [r7, #504]	@ 0x1f8
 8002fe8:	464c      	mov	r4, r9
 8002fea:	0423      	lsls	r3, r4, #16
 8002fec:	46c4      	mov	ip, r8
 8002fee:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
 8002ff2:	4644      	mov	r4, r8
 8002ff4:	0422      	lsls	r2, r4, #16
 8002ff6:	ea40 0402 	orr.w	r4, r0, r2
 8002ffa:	f8c7 41f0 	str.w	r4, [r7, #496]	@ 0x1f0
 8002ffe:	430b      	orrs	r3, r1
 8003000:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
 8003004:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	@ 0x1f0
 8003008:	e9c7 348a 	strd	r3, r4, [r7, #552]	@ 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800300c:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
 8003010:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8003014:	1cda      	adds	r2, r3, #3
 8003016:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 800301a:	4413      	add	r3, r2
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	b2db      	uxtb	r3, r3
 8003020:	2200      	movs	r2, #0
 8003022:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8003026:	f8c7 21ec 	str.w	r2, [r7, #492]	@ 0x1ec
 800302a:	e9d7 457a 	ldrd	r4, r5, [r7, #488]	@ 0x1e8
 800302e:	4623      	mov	r3, r4
 8003030:	0a1b      	lsrs	r3, r3, #8
 8003032:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8003036:	4623      	mov	r3, r4
 8003038:	061b      	lsls	r3, r3, #24
 800303a:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 800303e:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	@ 0x1e0
 8003042:	461a      	mov	r2, r3
 8003044:	4302      	orrs	r2, r0
 8003046:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 800304a:	4623      	mov	r3, r4
 800304c:	430b      	orrs	r3, r1
 800304e:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8003052:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	@ 0x1d8
 8003056:	e9c7 348a 	strd	r3, r4, [r7, #552]	@ 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800305a:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
 800305e:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8003062:	1d1a      	adds	r2, r3, #4
 8003064:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8003068:	4413      	add	r3, r2
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	b2db      	uxtb	r3, r3
 800306e:	2200      	movs	r2, #0
 8003070:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 8003074:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
 8003078:	f04f 0200 	mov.w	r2, #0
 800307c:	f04f 0300 	mov.w	r3, #0
 8003080:	f8d7 41d0 	ldr.w	r4, [r7, #464]	@ 0x1d0
 8003084:	0023      	movs	r3, r4
 8003086:	2200      	movs	r2, #0
 8003088:	ea40 0402 	orr.w	r4, r0, r2
 800308c:	f8c7 41c8 	str.w	r4, [r7, #456]	@ 0x1c8
 8003090:	430b      	orrs	r3, r1
 8003092:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 8003096:	e9d7 3472 	ldrd	r3, r4, [r7, #456]	@ 0x1c8
 800309a:	e9c7 348a 	strd	r3, r4, [r7, #552]	@ 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800309e:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
 80030a2:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 80030a6:	1d5a      	adds	r2, r3, #5
 80030a8:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 80030ac:	4413      	add	r3, r2
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	2200      	movs	r2, #0
 80030b4:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80030b8:	f8c7 21c4 	str.w	r2, [r7, #452]	@ 0x1c4
 80030bc:	f04f 0200 	mov.w	r2, #0
 80030c0:	f04f 0300 	mov.w	r3, #0
 80030c4:	f8d7 41c0 	ldr.w	r4, [r7, #448]	@ 0x1c0
 80030c8:	0223      	lsls	r3, r4, #8
 80030ca:	2200      	movs	r2, #0
 80030cc:	ea40 0402 	orr.w	r4, r0, r2
 80030d0:	f8c7 41b8 	str.w	r4, [r7, #440]	@ 0x1b8
 80030d4:	430b      	orrs	r3, r1
 80030d6:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80030da:	e9d7 346e 	ldrd	r3, r4, [r7, #440]	@ 0x1b8
 80030de:	e9c7 348a 	strd	r3, r4, [r7, #552]	@ 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80030e2:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
 80030e6:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 80030ea:	1d9a      	adds	r2, r3, #6
 80030ec:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 80030f0:	4413      	add	r3, r2
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	2200      	movs	r2, #0
 80030f8:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 80030fc:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
 8003100:	f04f 0200 	mov.w	r2, #0
 8003104:	f04f 0300 	mov.w	r3, #0
 8003108:	f8d7 41b0 	ldr.w	r4, [r7, #432]	@ 0x1b0
 800310c:	0423      	lsls	r3, r4, #16
 800310e:	2200      	movs	r2, #0
 8003110:	ea40 0402 	orr.w	r4, r0, r2
 8003114:	f8c7 41a8 	str.w	r4, [r7, #424]	@ 0x1a8
 8003118:	430b      	orrs	r3, r1
 800311a:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 800311e:	e9d7 346a 	ldrd	r3, r4, [r7, #424]	@ 0x1a8
 8003122:	e9c7 348a 	strd	r3, r4, [r7, #552]	@ 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003126:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
 800312a:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 800312e:	1dda      	adds	r2, r3, #7
 8003130:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8003134:	4413      	add	r3, r2
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	b2db      	uxtb	r3, r3
 800313a:	2200      	movs	r2, #0
 800313c:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8003140:	f8c7 21a4 	str.w	r2, [r7, #420]	@ 0x1a4
 8003144:	f04f 0200 	mov.w	r2, #0
 8003148:	f04f 0300 	mov.w	r3, #0
 800314c:	f8d7 41a0 	ldr.w	r4, [r7, #416]	@ 0x1a0
 8003150:	0623      	lsls	r3, r4, #24
 8003152:	2200      	movs	r2, #0
 8003154:	ea40 0402 	orr.w	r4, r0, r2
 8003158:	f8c7 4198 	str.w	r4, [r7, #408]	@ 0x198
 800315c:	430b      	orrs	r3, r1
 800315e:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8003162:	e9d7 3466 	ldrd	r3, r4, [r7, #408]	@ 0x198
 8003166:	e9c7 348a 	strd	r3, r4, [r7, #552]	@ 0x228
      this->x = u_x.real;
 800316a:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
 800316e:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8003172:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 8003176:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 800317a:	3308      	adds	r3, #8
 800317c:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8003180:	f04f 0200 	mov.w	r2, #0
 8003184:	f04f 0300 	mov.w	r3, #0
 8003188:	e9c7 2388 	strd	r2, r3, [r7, #544]	@ 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800318c:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 8003190:	f8d7 2234 	ldr.w	r2, [r7, #564]	@ 0x234
 8003194:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8003198:	4413      	add	r3, r2
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	b2db      	uxtb	r3, r3
 800319e:	2200      	movs	r2, #0
 80031a0:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 80031a4:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
 80031a8:	e9d7 3464 	ldrd	r3, r4, [r7, #400]	@ 0x190
 80031ac:	461a      	mov	r2, r3
 80031ae:	4302      	orrs	r2, r0
 80031b0:	f8c7 2188 	str.w	r2, [r7, #392]	@ 0x188
 80031b4:	4623      	mov	r3, r4
 80031b6:	430b      	orrs	r3, r1
 80031b8:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 80031bc:	e9d7 3462 	ldrd	r3, r4, [r7, #392]	@ 0x188
 80031c0:	e9c7 3488 	strd	r3, r4, [r7, #544]	@ 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80031c4:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 80031c8:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 80031cc:	1c5a      	adds	r2, r3, #1
 80031ce:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 80031d2:	4413      	add	r3, r2
 80031d4:	781b      	ldrb	r3, [r3, #0]
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	2200      	movs	r2, #0
 80031da:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80031de:	f8c7 2184 	str.w	r2, [r7, #388]	@ 0x184
 80031e2:	f04f 0200 	mov.w	r2, #0
 80031e6:	f04f 0300 	mov.w	r3, #0
 80031ea:	e9d7 8960 	ldrd	r8, r9, [r7, #384]	@ 0x180
 80031ee:	464c      	mov	r4, r9
 80031f0:	0223      	lsls	r3, r4, #8
 80031f2:	46c4      	mov	ip, r8
 80031f4:	ea43 631c 	orr.w	r3, r3, ip, lsr #24
 80031f8:	4644      	mov	r4, r8
 80031fa:	0222      	lsls	r2, r4, #8
 80031fc:	ea40 0402 	orr.w	r4, r0, r2
 8003200:	f8c7 4178 	str.w	r4, [r7, #376]	@ 0x178
 8003204:	430b      	orrs	r3, r1
 8003206:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 800320a:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	@ 0x178
 800320e:	e9c7 3488 	strd	r3, r4, [r7, #544]	@ 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003212:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 8003216:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 800321a:	1c9a      	adds	r2, r3, #2
 800321c:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8003220:	4413      	add	r3, r2
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	b2db      	uxtb	r3, r3
 8003226:	2200      	movs	r2, #0
 8003228:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 800322c:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
 8003230:	f04f 0200 	mov.w	r2, #0
 8003234:	f04f 0300 	mov.w	r3, #0
 8003238:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	@ 0x170
 800323c:	464c      	mov	r4, r9
 800323e:	0423      	lsls	r3, r4, #16
 8003240:	46c4      	mov	ip, r8
 8003242:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
 8003246:	4644      	mov	r4, r8
 8003248:	0422      	lsls	r2, r4, #16
 800324a:	ea40 0402 	orr.w	r4, r0, r2
 800324e:	f8c7 4168 	str.w	r4, [r7, #360]	@ 0x168
 8003252:	430b      	orrs	r3, r1
 8003254:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 8003258:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	@ 0x168
 800325c:	e9c7 3488 	strd	r3, r4, [r7, #544]	@ 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003260:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 8003264:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8003268:	1cda      	adds	r2, r3, #3
 800326a:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 800326e:	4413      	add	r3, r2
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	b2db      	uxtb	r3, r3
 8003274:	2200      	movs	r2, #0
 8003276:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 800327a:	f8c7 2164 	str.w	r2, [r7, #356]	@ 0x164
 800327e:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	@ 0x160
 8003282:	4623      	mov	r3, r4
 8003284:	0a1b      	lsrs	r3, r3, #8
 8003286:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 800328a:	4623      	mov	r3, r4
 800328c:	061b      	lsls	r3, r3, #24
 800328e:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8003292:	e9d7 3456 	ldrd	r3, r4, [r7, #344]	@ 0x158
 8003296:	461a      	mov	r2, r3
 8003298:	4302      	orrs	r2, r0
 800329a:	f8c7 2150 	str.w	r2, [r7, #336]	@ 0x150
 800329e:	4623      	mov	r3, r4
 80032a0:	430b      	orrs	r3, r1
 80032a2:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80032a6:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	@ 0x150
 80032aa:	e9c7 3488 	strd	r3, r4, [r7, #544]	@ 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80032ae:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 80032b2:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 80032b6:	1d1a      	adds	r2, r3, #4
 80032b8:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 80032bc:	4413      	add	r3, r2
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	2200      	movs	r2, #0
 80032c4:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 80032c8:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 80032cc:	f04f 0200 	mov.w	r2, #0
 80032d0:	f04f 0300 	mov.w	r3, #0
 80032d4:	f8d7 4148 	ldr.w	r4, [r7, #328]	@ 0x148
 80032d8:	0023      	movs	r3, r4
 80032da:	2200      	movs	r2, #0
 80032dc:	ea40 0402 	orr.w	r4, r0, r2
 80032e0:	f8c7 4140 	str.w	r4, [r7, #320]	@ 0x140
 80032e4:	430b      	orrs	r3, r1
 80032e6:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 80032ea:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	@ 0x140
 80032ee:	e9c7 3488 	strd	r3, r4, [r7, #544]	@ 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80032f2:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 80032f6:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 80032fa:	1d5a      	adds	r2, r3, #5
 80032fc:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8003300:	4413      	add	r3, r2
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	b2db      	uxtb	r3, r3
 8003306:	2200      	movs	r2, #0
 8003308:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 800330c:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 8003310:	f04f 0200 	mov.w	r2, #0
 8003314:	f04f 0300 	mov.w	r3, #0
 8003318:	f8d7 4138 	ldr.w	r4, [r7, #312]	@ 0x138
 800331c:	0223      	lsls	r3, r4, #8
 800331e:	2200      	movs	r2, #0
 8003320:	ea40 0402 	orr.w	r4, r0, r2
 8003324:	f8c7 4130 	str.w	r4, [r7, #304]	@ 0x130
 8003328:	430b      	orrs	r3, r1
 800332a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 800332e:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	@ 0x130
 8003332:	e9c7 3488 	strd	r3, r4, [r7, #544]	@ 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003336:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 800333a:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 800333e:	1d9a      	adds	r2, r3, #6
 8003340:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8003344:	4413      	add	r3, r2
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	b2db      	uxtb	r3, r3
 800334a:	2200      	movs	r2, #0
 800334c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8003350:	f8c7 212c 	str.w	r2, [r7, #300]	@ 0x12c
 8003354:	f04f 0200 	mov.w	r2, #0
 8003358:	f04f 0300 	mov.w	r3, #0
 800335c:	f8d7 4128 	ldr.w	r4, [r7, #296]	@ 0x128
 8003360:	0423      	lsls	r3, r4, #16
 8003362:	2200      	movs	r2, #0
 8003364:	ea40 0402 	orr.w	r4, r0, r2
 8003368:	f8c7 4120 	str.w	r4, [r7, #288]	@ 0x120
 800336c:	430b      	orrs	r3, r1
 800336e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8003372:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	@ 0x120
 8003376:	e9c7 3488 	strd	r3, r4, [r7, #544]	@ 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800337a:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 800337e:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8003382:	1dda      	adds	r2, r3, #7
 8003384:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8003388:	4413      	add	r3, r2
 800338a:	781b      	ldrb	r3, [r3, #0]
 800338c:	b2db      	uxtb	r3, r3
 800338e:	2200      	movs	r2, #0
 8003390:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8003394:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8003398:	f04f 0200 	mov.w	r2, #0
 800339c:	f04f 0300 	mov.w	r3, #0
 80033a0:	f8d7 4118 	ldr.w	r4, [r7, #280]	@ 0x118
 80033a4:	0623      	lsls	r3, r4, #24
 80033a6:	2200      	movs	r2, #0
 80033a8:	ea40 0402 	orr.w	r4, r0, r2
 80033ac:	f8c7 4110 	str.w	r4, [r7, #272]	@ 0x110
 80033b0:	430b      	orrs	r3, r1
 80033b2:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 80033b6:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	@ 0x110
 80033ba:	e9c7 3488 	strd	r3, r4, [r7, #544]	@ 0x220
      this->y = u_y.real;
 80033be:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 80033c2:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 80033c6:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 80033ca:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 80033ce:	3308      	adds	r3, #8
 80033d0:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 80033d4:	f04f 0200 	mov.w	r2, #0
 80033d8:	f04f 0300 	mov.w	r3, #0
 80033dc:	e9c7 2386 	strd	r2, r3, [r7, #536]	@ 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80033e0:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
 80033e4:	f8d7 2234 	ldr.w	r2, [r7, #564]	@ 0x234
 80033e8:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 80033ec:	4413      	add	r3, r2
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	2200      	movs	r2, #0
 80033f4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80033f8:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 80033fc:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	@ 0x108
 8003400:	461a      	mov	r2, r3
 8003402:	4302      	orrs	r2, r0
 8003404:	f8c7 2100 	str.w	r2, [r7, #256]	@ 0x100
 8003408:	4623      	mov	r3, r4
 800340a:	430b      	orrs	r3, r1
 800340c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003410:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	@ 0x100
 8003414:	e9c7 3486 	strd	r3, r4, [r7, #536]	@ 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003418:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
 800341c:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8003420:	1c5a      	adds	r2, r3, #1
 8003422:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8003426:	4413      	add	r3, r2
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	b2db      	uxtb	r3, r3
 800342c:	2200      	movs	r2, #0
 800342e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003432:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 8003436:	f04f 0200 	mov.w	r2, #0
 800343a:	f04f 0300 	mov.w	r3, #0
 800343e:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	@ 0xf8
 8003442:	464c      	mov	r4, r9
 8003444:	0223      	lsls	r3, r4, #8
 8003446:	46c4      	mov	ip, r8
 8003448:	ea43 631c 	orr.w	r3, r3, ip, lsr #24
 800344c:	4644      	mov	r4, r8
 800344e:	0222      	lsls	r2, r4, #8
 8003450:	ea40 0402 	orr.w	r4, r0, r2
 8003454:	f8c7 40f0 	str.w	r4, [r7, #240]	@ 0xf0
 8003458:	430b      	orrs	r3, r1
 800345a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800345e:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	@ 0xf0
 8003462:	e9c7 3486 	strd	r3, r4, [r7, #536]	@ 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003466:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
 800346a:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 800346e:	1c9a      	adds	r2, r3, #2
 8003470:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8003474:	4413      	add	r3, r2
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	b2db      	uxtb	r3, r3
 800347a:	2200      	movs	r2, #0
 800347c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003480:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003484:	f04f 0200 	mov.w	r2, #0
 8003488:	f04f 0300 	mov.w	r3, #0
 800348c:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8003490:	464c      	mov	r4, r9
 8003492:	0423      	lsls	r3, r4, #16
 8003494:	46c4      	mov	ip, r8
 8003496:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
 800349a:	4644      	mov	r4, r8
 800349c:	0422      	lsls	r2, r4, #16
 800349e:	ea40 0402 	orr.w	r4, r0, r2
 80034a2:	f8c7 40e0 	str.w	r4, [r7, #224]	@ 0xe0
 80034a6:	430b      	orrs	r3, r1
 80034a8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80034ac:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	@ 0xe0
 80034b0:	e9c7 3486 	strd	r3, r4, [r7, #536]	@ 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80034b4:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
 80034b8:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 80034bc:	1cda      	adds	r2, r3, #3
 80034be:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 80034c2:	4413      	add	r3, r2
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	2200      	movs	r2, #0
 80034ca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80034ce:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80034d2:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 80034d6:	4623      	mov	r3, r4
 80034d8:	0a1b      	lsrs	r3, r3, #8
 80034da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80034de:	4623      	mov	r3, r4
 80034e0:	061b      	lsls	r3, r3, #24
 80034e2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80034e6:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	@ 0xd0
 80034ea:	461a      	mov	r2, r3
 80034ec:	4302      	orrs	r2, r0
 80034ee:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 80034f2:	4623      	mov	r3, r4
 80034f4:	430b      	orrs	r3, r1
 80034f6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80034fa:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	@ 0xc8
 80034fe:	e9c7 3486 	strd	r3, r4, [r7, #536]	@ 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003502:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
 8003506:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 800350a:	1d1a      	adds	r2, r3, #4
 800350c:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8003510:	4413      	add	r3, r2
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	b2db      	uxtb	r3, r3
 8003516:	2200      	movs	r2, #0
 8003518:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800351c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003520:	f04f 0200 	mov.w	r2, #0
 8003524:	f04f 0300 	mov.w	r3, #0
 8003528:	f8d7 40c0 	ldr.w	r4, [r7, #192]	@ 0xc0
 800352c:	0023      	movs	r3, r4
 800352e:	2200      	movs	r2, #0
 8003530:	ea40 0402 	orr.w	r4, r0, r2
 8003534:	f8c7 40b8 	str.w	r4, [r7, #184]	@ 0xb8
 8003538:	430b      	orrs	r3, r1
 800353a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800353e:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	@ 0xb8
 8003542:	e9c7 3486 	strd	r3, r4, [r7, #536]	@ 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003546:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
 800354a:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 800354e:	1d5a      	adds	r2, r3, #5
 8003550:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8003554:	4413      	add	r3, r2
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	b2db      	uxtb	r3, r3
 800355a:	2200      	movs	r2, #0
 800355c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003560:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8003564:	f04f 0200 	mov.w	r2, #0
 8003568:	f04f 0300 	mov.w	r3, #0
 800356c:	f8d7 40b0 	ldr.w	r4, [r7, #176]	@ 0xb0
 8003570:	0223      	lsls	r3, r4, #8
 8003572:	2200      	movs	r2, #0
 8003574:	ea40 0402 	orr.w	r4, r0, r2
 8003578:	f8c7 40a8 	str.w	r4, [r7, #168]	@ 0xa8
 800357c:	430b      	orrs	r3, r1
 800357e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003582:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	@ 0xa8
 8003586:	e9c7 3486 	strd	r3, r4, [r7, #536]	@ 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800358a:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
 800358e:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8003592:	1d9a      	adds	r2, r3, #6
 8003594:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8003598:	4413      	add	r3, r2
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	b2db      	uxtb	r3, r3
 800359e:	2200      	movs	r2, #0
 80035a0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80035a4:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80035a8:	f04f 0200 	mov.w	r2, #0
 80035ac:	f04f 0300 	mov.w	r3, #0
 80035b0:	f8d7 40a0 	ldr.w	r4, [r7, #160]	@ 0xa0
 80035b4:	0423      	lsls	r3, r4, #16
 80035b6:	2200      	movs	r2, #0
 80035b8:	ea40 0402 	orr.w	r4, r0, r2
 80035bc:	f8c7 4098 	str.w	r4, [r7, #152]	@ 0x98
 80035c0:	430b      	orrs	r3, r1
 80035c2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80035c6:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	@ 0x98
 80035ca:	e9c7 3486 	strd	r3, r4, [r7, #536]	@ 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80035ce:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
 80035d2:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 80035d6:	1dda      	adds	r2, r3, #7
 80035d8:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 80035dc:	4413      	add	r3, r2
 80035de:	781b      	ldrb	r3, [r3, #0]
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	2200      	movs	r2, #0
 80035e4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80035e8:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80035ec:	f04f 0200 	mov.w	r2, #0
 80035f0:	f04f 0300 	mov.w	r3, #0
 80035f4:	f8d7 4090 	ldr.w	r4, [r7, #144]	@ 0x90
 80035f8:	0623      	lsls	r3, r4, #24
 80035fa:	2200      	movs	r2, #0
 80035fc:	ea40 0402 	orr.w	r4, r0, r2
 8003600:	f8c7 4088 	str.w	r4, [r7, #136]	@ 0x88
 8003604:	430b      	orrs	r3, r1
 8003606:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800360a:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	@ 0x88
 800360e:	e9c7 3486 	strd	r3, r4, [r7, #536]	@ 0x218
      this->z = u_z.real;
 8003612:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
 8003616:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 800361a:	e9c3 0106 	strd	r0, r1, [r3, #24]
      offset += sizeof(this->z);
 800361e:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8003622:	3308      	adds	r3, #8
 8003624:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
      union {
        double real;
        uint64_t base;
      } u_w;
      u_w.base = 0;
 8003628:	f04f 0200 	mov.w	r2, #0
 800362c:	f04f 0300 	mov.w	r3, #0
 8003630:	e9c7 2384 	strd	r2, r3, [r7, #528]	@ 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003634:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	@ 0x210
 8003638:	f8d7 2234 	ldr.w	r2, [r7, #564]	@ 0x234
 800363c:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8003640:	4413      	add	r3, r2
 8003642:	781b      	ldrb	r3, [r3, #0]
 8003644:	b2db      	uxtb	r3, r3
 8003646:	2200      	movs	r2, #0
 8003648:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800364c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003650:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	@ 0x80
 8003654:	461a      	mov	r2, r3
 8003656:	4302      	orrs	r2, r0
 8003658:	67ba      	str	r2, [r7, #120]	@ 0x78
 800365a:	4623      	mov	r3, r4
 800365c:	430b      	orrs	r3, r1
 800365e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003660:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	@ 0x78
 8003664:	e9c7 3484 	strd	r3, r4, [r7, #528]	@ 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003668:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	@ 0x210
 800366c:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8003670:	1c5a      	adds	r2, r3, #1
 8003672:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8003676:	4413      	add	r3, r2
 8003678:	781b      	ldrb	r3, [r3, #0]
 800367a:	b2db      	uxtb	r3, r3
 800367c:	2200      	movs	r2, #0
 800367e:	673b      	str	r3, [r7, #112]	@ 0x70
 8003680:	677a      	str	r2, [r7, #116]	@ 0x74
 8003682:	f04f 0200 	mov.w	r2, #0
 8003686:	f04f 0300 	mov.w	r3, #0
 800368a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800368e:	464c      	mov	r4, r9
 8003690:	0223      	lsls	r3, r4, #8
 8003692:	46c4      	mov	ip, r8
 8003694:	ea43 631c 	orr.w	r3, r3, ip, lsr #24
 8003698:	4644      	mov	r4, r8
 800369a:	0222      	lsls	r2, r4, #8
 800369c:	ea40 0402 	orr.w	r4, r0, r2
 80036a0:	66bc      	str	r4, [r7, #104]	@ 0x68
 80036a2:	430b      	orrs	r3, r1
 80036a4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80036a6:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	@ 0x68
 80036aa:	e9c7 3484 	strd	r3, r4, [r7, #528]	@ 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80036ae:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	@ 0x210
 80036b2:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 80036b6:	1c9a      	adds	r2, r3, #2
 80036b8:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 80036bc:	4413      	add	r3, r2
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	2200      	movs	r2, #0
 80036c4:	663b      	str	r3, [r7, #96]	@ 0x60
 80036c6:	667a      	str	r2, [r7, #100]	@ 0x64
 80036c8:	f04f 0200 	mov.w	r2, #0
 80036cc:	f04f 0300 	mov.w	r3, #0
 80036d0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80036d4:	464c      	mov	r4, r9
 80036d6:	0423      	lsls	r3, r4, #16
 80036d8:	46c4      	mov	ip, r8
 80036da:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
 80036de:	4644      	mov	r4, r8
 80036e0:	0422      	lsls	r2, r4, #16
 80036e2:	ea40 0402 	orr.w	r4, r0, r2
 80036e6:	65bc      	str	r4, [r7, #88]	@ 0x58
 80036e8:	430b      	orrs	r3, r1
 80036ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80036ec:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	@ 0x58
 80036f0:	e9c7 3484 	strd	r3, r4, [r7, #528]	@ 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80036f4:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	@ 0x210
 80036f8:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 80036fc:	1cda      	adds	r2, r3, #3
 80036fe:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8003702:	4413      	add	r3, r2
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	b2db      	uxtb	r3, r3
 8003708:	2200      	movs	r2, #0
 800370a:	653b      	str	r3, [r7, #80]	@ 0x50
 800370c:	657a      	str	r2, [r7, #84]	@ 0x54
 800370e:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8003712:	4623      	mov	r3, r4
 8003714:	0a1b      	lsrs	r3, r3, #8
 8003716:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003718:	4623      	mov	r3, r4
 800371a:	061b      	lsls	r3, r3, #24
 800371c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800371e:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 8003722:	461a      	mov	r2, r3
 8003724:	4302      	orrs	r2, r0
 8003726:	643a      	str	r2, [r7, #64]	@ 0x40
 8003728:	4623      	mov	r3, r4
 800372a:	430b      	orrs	r3, r1
 800372c:	647b      	str	r3, [r7, #68]	@ 0x44
 800372e:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8003732:	e9c7 3484 	strd	r3, r4, [r7, #528]	@ 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003736:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	@ 0x210
 800373a:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 800373e:	1d1a      	adds	r2, r3, #4
 8003740:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8003744:	4413      	add	r3, r2
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	b2db      	uxtb	r3, r3
 800374a:	2200      	movs	r2, #0
 800374c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800374e:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003750:	f04f 0200 	mov.w	r2, #0
 8003754:	f04f 0300 	mov.w	r3, #0
 8003758:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 800375a:	0023      	movs	r3, r4
 800375c:	2200      	movs	r2, #0
 800375e:	ea40 0402 	orr.w	r4, r0, r2
 8003762:	633c      	str	r4, [r7, #48]	@ 0x30
 8003764:	430b      	orrs	r3, r1
 8003766:	637b      	str	r3, [r7, #52]	@ 0x34
 8003768:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 800376c:	e9c7 3484 	strd	r3, r4, [r7, #528]	@ 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003770:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	@ 0x210
 8003774:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8003778:	1d5a      	adds	r2, r3, #5
 800377a:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 800377e:	4413      	add	r3, r2
 8003780:	781b      	ldrb	r3, [r3, #0]
 8003782:	b2db      	uxtb	r3, r3
 8003784:	2200      	movs	r2, #0
 8003786:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003788:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800378a:	f04f 0200 	mov.w	r2, #0
 800378e:	f04f 0300 	mov.w	r3, #0
 8003792:	6abc      	ldr	r4, [r7, #40]	@ 0x28
 8003794:	0223      	lsls	r3, r4, #8
 8003796:	2200      	movs	r2, #0
 8003798:	ea40 0402 	orr.w	r4, r0, r2
 800379c:	623c      	str	r4, [r7, #32]
 800379e:	430b      	orrs	r3, r1
 80037a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80037a2:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80037a6:	e9c7 3484 	strd	r3, r4, [r7, #528]	@ 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80037aa:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	@ 0x210
 80037ae:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 80037b2:	3306      	adds	r3, #6
 80037b4:	f8d7 2208 	ldr.w	r2, [r7, #520]	@ 0x208
 80037b8:	4413      	add	r3, r2
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	2200      	movs	r2, #0
 80037c0:	61bb      	str	r3, [r7, #24]
 80037c2:	61fa      	str	r2, [r7, #28]
 80037c4:	f04f 0200 	mov.w	r2, #0
 80037c8:	f04f 0300 	mov.w	r3, #0
 80037cc:	69bc      	ldr	r4, [r7, #24]
 80037ce:	0423      	lsls	r3, r4, #16
 80037d0:	2200      	movs	r2, #0
 80037d2:	ea40 0402 	orr.w	r4, r0, r2
 80037d6:	613c      	str	r4, [r7, #16]
 80037d8:	430b      	orrs	r3, r1
 80037da:	617b      	str	r3, [r7, #20]
 80037dc:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80037e0:	e9c7 3484 	strd	r3, r4, [r7, #528]	@ 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80037e4:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	@ 0x210
 80037e8:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 80037ec:	3307      	adds	r3, #7
 80037ee:	f8d7 2208 	ldr.w	r2, [r7, #520]	@ 0x208
 80037f2:	4413      	add	r3, r2
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	2200      	movs	r2, #0
 80037fa:	60bb      	str	r3, [r7, #8]
 80037fc:	60fa      	str	r2, [r7, #12]
 80037fe:	f04f 0200 	mov.w	r2, #0
 8003802:	f04f 0300 	mov.w	r3, #0
 8003806:	68bc      	ldr	r4, [r7, #8]
 8003808:	0623      	lsls	r3, r4, #24
 800380a:	2200      	movs	r2, #0
 800380c:	ea40 0402 	orr.w	r4, r0, r2
 8003810:	603c      	str	r4, [r7, #0]
 8003812:	430b      	orrs	r3, r1
 8003814:	607b      	str	r3, [r7, #4]
 8003816:	e9d7 3400 	ldrd	r3, r4, [r7]
 800381a:	e9c7 3484 	strd	r3, r4, [r7, #528]	@ 0x210
      this->w = u_w.real;
 800381e:	e9d7 2384 	ldrd	r2, r3, [r7, #528]	@ 0x210
 8003822:	f8d7 120c 	ldr.w	r1, [r7, #524]	@ 0x20c
 8003826:	e9c1 2308 	strd	r2, r3, [r1, #32]
      offset += sizeof(this->w);
 800382a:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 800382e:	3308      	adds	r3, #8
 8003830:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
     return offset;
 8003834:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
    }
 8003838:	4618      	mov	r0, r3
 800383a:	f507 770f 	add.w	r7, r7, #572	@ 0x23c
 800383e:	46bd      	mov	sp, r7
 8003840:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003844:	4770      	bx	lr
	...

08003848 <_ZN13geometry_msgs10Quaternion7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Quaternion"; };
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	4b02      	ldr	r3, [pc, #8]	@ (800385c <_ZN13geometry_msgs10Quaternion7getTypeEv+0x14>)
 8003852:	4618      	mov	r0, r3
 8003854:	370c      	adds	r7, #12
 8003856:	46bd      	mov	sp, r7
 8003858:	bc80      	pop	{r7}
 800385a:	4770      	bx	lr
 800385c:	0800cfac 	.word	0x0800cfac

08003860 <_ZN13geometry_msgs10Quaternion6getMD5Ev>:
    virtual const char * getMD5() override { return "a779879fadf0160734f906b8c19c7004"; };
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	4b02      	ldr	r3, [pc, #8]	@ (8003874 <_ZN13geometry_msgs10Quaternion6getMD5Ev+0x14>)
 800386a:	4618      	mov	r0, r3
 800386c:	370c      	adds	r7, #12
 800386e:	46bd      	mov	sp, r7
 8003870:	bc80      	pop	{r7}
 8003872:	4770      	bx	lr
 8003874:	0800cfc8 	.word	0x0800cfc8

08003878 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4618      	mov	r0, r3
 8003884:	f7fd ff40 	bl	8001708 <_ZN3ros3MsgC1Ev>
 8003888:	4a0e      	ldr	r2, [pc, #56]	@ (80038c4 <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	601a      	str	r2, [r3, #0]
      x(0),
 800388e:	6879      	ldr	r1, [r7, #4]
 8003890:	f04f 0200 	mov.w	r2, #0
 8003894:	f04f 0300 	mov.w	r3, #0
 8003898:	e9c1 2302 	strd	r2, r3, [r1, #8]
      y(0),
 800389c:	6879      	ldr	r1, [r7, #4]
 800389e:	f04f 0200 	mov.w	r2, #0
 80038a2:	f04f 0300 	mov.w	r3, #0
 80038a6:	e9c1 2304 	strd	r2, r3, [r1, #16]
      z(0)
 80038aa:	6879      	ldr	r1, [r7, #4]
 80038ac:	f04f 0200 	mov.w	r2, #0
 80038b0:	f04f 0300 	mov.w	r3, #0
 80038b4:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	4618      	mov	r0, r3
 80038bc:	3708      	adds	r7, #8
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	0800d4a0 	.word	0x0800d4a0

080038c8 <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80038c8:	b480      	push	{r7}
 80038ca:	b08b      	sub	sp, #44	@ 0x2c
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80038d2:	2300      	movs	r3, #0
 80038d4:	627b      	str	r3, [r7, #36]	@ 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80038dc:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 80038e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038e4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80038e6:	6838      	ldr	r0, [r7, #0]
 80038e8:	4401      	add	r1, r0
 80038ea:	b2d3      	uxtb	r3, r2
 80038ec:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 80038ee:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80038f2:	f04f 0200 	mov.w	r2, #0
 80038f6:	f04f 0300 	mov.w	r3, #0
 80038fa:	0a02      	lsrs	r2, r0, #8
 80038fc:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003900:	0a0b      	lsrs	r3, r1, #8
 8003902:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003904:	3101      	adds	r1, #1
 8003906:	6838      	ldr	r0, [r7, #0]
 8003908:	4401      	add	r1, r0
 800390a:	b2d3      	uxtb	r3, r2
 800390c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 800390e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003912:	f04f 0200 	mov.w	r2, #0
 8003916:	f04f 0300 	mov.w	r3, #0
 800391a:	0c02      	lsrs	r2, r0, #16
 800391c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003920:	0c0b      	lsrs	r3, r1, #16
 8003922:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003924:	3102      	adds	r1, #2
 8003926:	6838      	ldr	r0, [r7, #0]
 8003928:	4401      	add	r1, r0
 800392a:	b2d3      	uxtb	r3, r2
 800392c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 800392e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003932:	f04f 0200 	mov.w	r2, #0
 8003936:	f04f 0300 	mov.w	r3, #0
 800393a:	0e02      	lsrs	r2, r0, #24
 800393c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003940:	0e0b      	lsrs	r3, r1, #24
 8003942:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003944:	3103      	adds	r1, #3
 8003946:	6838      	ldr	r0, [r7, #0]
 8003948:	4401      	add	r1, r0
 800394a:	b2d3      	uxtb	r3, r2
 800394c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 800394e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003952:	f04f 0200 	mov.w	r2, #0
 8003956:	f04f 0300 	mov.w	r3, #0
 800395a:	000a      	movs	r2, r1
 800395c:	2300      	movs	r3, #0
 800395e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003960:	3104      	adds	r1, #4
 8003962:	6838      	ldr	r0, [r7, #0]
 8003964:	4401      	add	r1, r0
 8003966:	b2d3      	uxtb	r3, r2
 8003968:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 800396a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800396e:	f04f 0200 	mov.w	r2, #0
 8003972:	f04f 0300 	mov.w	r3, #0
 8003976:	0a0a      	lsrs	r2, r1, #8
 8003978:	2300      	movs	r3, #0
 800397a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800397c:	3105      	adds	r1, #5
 800397e:	6838      	ldr	r0, [r7, #0]
 8003980:	4401      	add	r1, r0
 8003982:	b2d3      	uxtb	r3, r2
 8003984:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8003986:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800398a:	f04f 0200 	mov.w	r2, #0
 800398e:	f04f 0300 	mov.w	r3, #0
 8003992:	0c0a      	lsrs	r2, r1, #16
 8003994:	2300      	movs	r3, #0
 8003996:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003998:	3106      	adds	r1, #6
 800399a:	6838      	ldr	r0, [r7, #0]
 800399c:	4401      	add	r1, r0
 800399e:	b2d3      	uxtb	r3, r2
 80039a0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 80039a2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80039a6:	f04f 0200 	mov.w	r2, #0
 80039aa:	f04f 0300 	mov.w	r3, #0
 80039ae:	0e0a      	lsrs	r2, r1, #24
 80039b0:	2300      	movs	r3, #0
 80039b2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80039b4:	3107      	adds	r1, #7
 80039b6:	6838      	ldr	r0, [r7, #0]
 80039b8:	4401      	add	r1, r0
 80039ba:	b2d3      	uxtb	r3, r2
 80039bc:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 80039be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039c0:	3308      	adds	r3, #8
 80039c2:	627b      	str	r3, [r7, #36]	@ 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80039ca:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 80039ce:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80039d2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80039d4:	6838      	ldr	r0, [r7, #0]
 80039d6:	4401      	add	r1, r0
 80039d8:	b2d3      	uxtb	r3, r2
 80039da:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 80039dc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80039e0:	f04f 0200 	mov.w	r2, #0
 80039e4:	f04f 0300 	mov.w	r3, #0
 80039e8:	0a02      	lsrs	r2, r0, #8
 80039ea:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80039ee:	0a0b      	lsrs	r3, r1, #8
 80039f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80039f2:	3101      	adds	r1, #1
 80039f4:	6838      	ldr	r0, [r7, #0]
 80039f6:	4401      	add	r1, r0
 80039f8:	b2d3      	uxtb	r3, r2
 80039fa:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 80039fc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003a00:	f04f 0200 	mov.w	r2, #0
 8003a04:	f04f 0300 	mov.w	r3, #0
 8003a08:	0c02      	lsrs	r2, r0, #16
 8003a0a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003a0e:	0c0b      	lsrs	r3, r1, #16
 8003a10:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003a12:	3102      	adds	r1, #2
 8003a14:	6838      	ldr	r0, [r7, #0]
 8003a16:	4401      	add	r1, r0
 8003a18:	b2d3      	uxtb	r3, r2
 8003a1a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8003a1c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003a20:	f04f 0200 	mov.w	r2, #0
 8003a24:	f04f 0300 	mov.w	r3, #0
 8003a28:	0e02      	lsrs	r2, r0, #24
 8003a2a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003a2e:	0e0b      	lsrs	r3, r1, #24
 8003a30:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003a32:	3103      	adds	r1, #3
 8003a34:	6838      	ldr	r0, [r7, #0]
 8003a36:	4401      	add	r1, r0
 8003a38:	b2d3      	uxtb	r3, r2
 8003a3a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8003a3c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003a40:	f04f 0200 	mov.w	r2, #0
 8003a44:	f04f 0300 	mov.w	r3, #0
 8003a48:	000a      	movs	r2, r1
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003a4e:	3104      	adds	r1, #4
 8003a50:	6838      	ldr	r0, [r7, #0]
 8003a52:	4401      	add	r1, r0
 8003a54:	b2d3      	uxtb	r3, r2
 8003a56:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8003a58:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003a5c:	f04f 0200 	mov.w	r2, #0
 8003a60:	f04f 0300 	mov.w	r3, #0
 8003a64:	0a0a      	lsrs	r2, r1, #8
 8003a66:	2300      	movs	r3, #0
 8003a68:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003a6a:	3105      	adds	r1, #5
 8003a6c:	6838      	ldr	r0, [r7, #0]
 8003a6e:	4401      	add	r1, r0
 8003a70:	b2d3      	uxtb	r3, r2
 8003a72:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8003a74:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003a78:	f04f 0200 	mov.w	r2, #0
 8003a7c:	f04f 0300 	mov.w	r3, #0
 8003a80:	0c0a      	lsrs	r2, r1, #16
 8003a82:	2300      	movs	r3, #0
 8003a84:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003a86:	3106      	adds	r1, #6
 8003a88:	6838      	ldr	r0, [r7, #0]
 8003a8a:	4401      	add	r1, r0
 8003a8c:	b2d3      	uxtb	r3, r2
 8003a8e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8003a90:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003a94:	f04f 0200 	mov.w	r2, #0
 8003a98:	f04f 0300 	mov.w	r3, #0
 8003a9c:	0e0a      	lsrs	r2, r1, #24
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003aa2:	3107      	adds	r1, #7
 8003aa4:	6838      	ldr	r0, [r7, #0]
 8003aa6:	4401      	add	r1, r0
 8003aa8:	b2d3      	uxtb	r3, r2
 8003aaa:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 8003aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aae:	3308      	adds	r3, #8
 8003ab0:	627b      	str	r3, [r7, #36]	@ 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003ab8:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8003abc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ac0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003ac2:	6838      	ldr	r0, [r7, #0]
 8003ac4:	4401      	add	r1, r0
 8003ac6:	b2d3      	uxtb	r3, r2
 8003ac8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8003aca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003ace:	f04f 0200 	mov.w	r2, #0
 8003ad2:	f04f 0300 	mov.w	r3, #0
 8003ad6:	0a02      	lsrs	r2, r0, #8
 8003ad8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003adc:	0a0b      	lsrs	r3, r1, #8
 8003ade:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003ae0:	3101      	adds	r1, #1
 8003ae2:	6838      	ldr	r0, [r7, #0]
 8003ae4:	4401      	add	r1, r0
 8003ae6:	b2d3      	uxtb	r3, r2
 8003ae8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8003aea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003aee:	f04f 0200 	mov.w	r2, #0
 8003af2:	f04f 0300 	mov.w	r3, #0
 8003af6:	0c02      	lsrs	r2, r0, #16
 8003af8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003afc:	0c0b      	lsrs	r3, r1, #16
 8003afe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003b00:	3102      	adds	r1, #2
 8003b02:	6838      	ldr	r0, [r7, #0]
 8003b04:	4401      	add	r1, r0
 8003b06:	b2d3      	uxtb	r3, r2
 8003b08:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8003b0a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003b0e:	f04f 0200 	mov.w	r2, #0
 8003b12:	f04f 0300 	mov.w	r3, #0
 8003b16:	0e02      	lsrs	r2, r0, #24
 8003b18:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003b1c:	0e0b      	lsrs	r3, r1, #24
 8003b1e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003b20:	3103      	adds	r1, #3
 8003b22:	6838      	ldr	r0, [r7, #0]
 8003b24:	4401      	add	r1, r0
 8003b26:	b2d3      	uxtb	r3, r2
 8003b28:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8003b2a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003b2e:	f04f 0200 	mov.w	r2, #0
 8003b32:	f04f 0300 	mov.w	r3, #0
 8003b36:	000a      	movs	r2, r1
 8003b38:	2300      	movs	r3, #0
 8003b3a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003b3c:	3104      	adds	r1, #4
 8003b3e:	6838      	ldr	r0, [r7, #0]
 8003b40:	4401      	add	r1, r0
 8003b42:	b2d3      	uxtb	r3, r2
 8003b44:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8003b46:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003b4a:	f04f 0200 	mov.w	r2, #0
 8003b4e:	f04f 0300 	mov.w	r3, #0
 8003b52:	0a0a      	lsrs	r2, r1, #8
 8003b54:	2300      	movs	r3, #0
 8003b56:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003b58:	3105      	adds	r1, #5
 8003b5a:	6838      	ldr	r0, [r7, #0]
 8003b5c:	4401      	add	r1, r0
 8003b5e:	b2d3      	uxtb	r3, r2
 8003b60:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8003b62:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003b66:	f04f 0200 	mov.w	r2, #0
 8003b6a:	f04f 0300 	mov.w	r3, #0
 8003b6e:	0c0a      	lsrs	r2, r1, #16
 8003b70:	2300      	movs	r3, #0
 8003b72:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003b74:	3106      	adds	r1, #6
 8003b76:	6838      	ldr	r0, [r7, #0]
 8003b78:	4401      	add	r1, r0
 8003b7a:	b2d3      	uxtb	r3, r2
 8003b7c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 8003b7e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003b82:	f04f 0200 	mov.w	r2, #0
 8003b86:	f04f 0300 	mov.w	r3, #0
 8003b8a:	0e0a      	lsrs	r2, r1, #24
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003b90:	3107      	adds	r1, #7
 8003b92:	6838      	ldr	r0, [r7, #0]
 8003b94:	4401      	add	r1, r0
 8003b96:	b2d3      	uxtb	r3, r2
 8003b98:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 8003b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b9c:	3308      	adds	r3, #8
 8003b9e:	627b      	str	r3, [r7, #36]	@ 0x24
      return offset;
 8003ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	372c      	adds	r7, #44	@ 0x2c
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bc80      	pop	{r7}
 8003baa:	4770      	bx	lr

08003bac <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8003bac:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003bb0:	b0eb      	sub	sp, #428	@ 0x1ac
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	f8c7 0184 	str.w	r0, [r7, #388]	@ 0x184
 8003bb8:	f8c7 1180 	str.w	r1, [r7, #384]	@ 0x180
    {
      int offset = 0;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 8003bc2:	f04f 0200 	mov.w	r2, #0
 8003bc6:	f04f 0300 	mov.w	r3, #0
 8003bca:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003bce:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8003bd2:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 8003bd6:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003bda:	4413      	add	r3, r2
 8003bdc:	781b      	ldrb	r3, [r3, #0]
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	2200      	movs	r2, #0
 8003be2:	461c      	mov	r4, r3
 8003be4:	4615      	mov	r5, r2
 8003be6:	ea40 0804 	orr.w	r8, r0, r4
 8003bea:	ea41 0905 	orr.w	r9, r1, r5
 8003bee:	e9c7 8966 	strd	r8, r9, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003bf2:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8003bf6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8003bfa:	1c5a      	adds	r2, r3, #1
 8003bfc:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003c00:	4413      	add	r3, r2
 8003c02:	781b      	ldrb	r3, [r3, #0]
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	2200      	movs	r2, #0
 8003c08:	469a      	mov	sl, r3
 8003c0a:	4693      	mov	fp, r2
 8003c0c:	f04f 0200 	mov.w	r2, #0
 8003c10:	f04f 0300 	mov.w	r3, #0
 8003c14:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8003c18:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8003c1c:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8003c20:	ea40 0402 	orr.w	r4, r0, r2
 8003c24:	f8c7 4178 	str.w	r4, [r7, #376]	@ 0x178
 8003c28:	430b      	orrs	r3, r1
 8003c2a:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8003c2e:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	@ 0x178
 8003c32:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003c36:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8003c3a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8003c3e:	1c9a      	adds	r2, r3, #2
 8003c40:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003c44:	4413      	add	r3, r2
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 8003c50:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
 8003c54:	f04f 0200 	mov.w	r2, #0
 8003c58:	f04f 0300 	mov.w	r3, #0
 8003c5c:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	@ 0x170
 8003c60:	464c      	mov	r4, r9
 8003c62:	0423      	lsls	r3, r4, #16
 8003c64:	46c4      	mov	ip, r8
 8003c66:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
 8003c6a:	4644      	mov	r4, r8
 8003c6c:	0422      	lsls	r2, r4, #16
 8003c6e:	ea40 0402 	orr.w	r4, r0, r2
 8003c72:	f8c7 4168 	str.w	r4, [r7, #360]	@ 0x168
 8003c76:	430b      	orrs	r3, r1
 8003c78:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 8003c7c:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	@ 0x168
 8003c80:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003c84:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8003c88:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8003c8c:	1cda      	adds	r2, r3, #3
 8003c8e:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003c92:	4413      	add	r3, r2
 8003c94:	781b      	ldrb	r3, [r3, #0]
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	2200      	movs	r2, #0
 8003c9a:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 8003c9e:	f8c7 2164 	str.w	r2, [r7, #356]	@ 0x164
 8003ca2:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	@ 0x160
 8003ca6:	4623      	mov	r3, r4
 8003ca8:	0a1b      	lsrs	r3, r3, #8
 8003caa:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8003cae:	4623      	mov	r3, r4
 8003cb0:	061b      	lsls	r3, r3, #24
 8003cb2:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8003cb6:	e9d7 3456 	ldrd	r3, r4, [r7, #344]	@ 0x158
 8003cba:	461a      	mov	r2, r3
 8003cbc:	4302      	orrs	r2, r0
 8003cbe:	f8c7 2150 	str.w	r2, [r7, #336]	@ 0x150
 8003cc2:	4623      	mov	r3, r4
 8003cc4:	430b      	orrs	r3, r1
 8003cc6:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8003cca:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	@ 0x150
 8003cce:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003cd2:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8003cd6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8003cda:	1d1a      	adds	r2, r3, #4
 8003cdc:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003ce0:	4413      	add	r3, r2
 8003ce2:	781b      	ldrb	r3, [r3, #0]
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 8003cec:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8003cf0:	f04f 0200 	mov.w	r2, #0
 8003cf4:	f04f 0300 	mov.w	r3, #0
 8003cf8:	f8d7 4148 	ldr.w	r4, [r7, #328]	@ 0x148
 8003cfc:	0023      	movs	r3, r4
 8003cfe:	2200      	movs	r2, #0
 8003d00:	ea40 0402 	orr.w	r4, r0, r2
 8003d04:	f8c7 4140 	str.w	r4, [r7, #320]	@ 0x140
 8003d08:	430b      	orrs	r3, r1
 8003d0a:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8003d0e:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	@ 0x140
 8003d12:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003d16:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8003d1a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8003d1e:	1d5a      	adds	r2, r3, #5
 8003d20:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003d24:	4413      	add	r3, r2
 8003d26:	781b      	ldrb	r3, [r3, #0]
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8003d30:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 8003d34:	f04f 0200 	mov.w	r2, #0
 8003d38:	f04f 0300 	mov.w	r3, #0
 8003d3c:	f8d7 4138 	ldr.w	r4, [r7, #312]	@ 0x138
 8003d40:	0223      	lsls	r3, r4, #8
 8003d42:	2200      	movs	r2, #0
 8003d44:	ea40 0402 	orr.w	r4, r0, r2
 8003d48:	f8c7 4130 	str.w	r4, [r7, #304]	@ 0x130
 8003d4c:	430b      	orrs	r3, r1
 8003d4e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8003d52:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	@ 0x130
 8003d56:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003d5a:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8003d5e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8003d62:	1d9a      	adds	r2, r3, #6
 8003d64:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003d68:	4413      	add	r3, r2
 8003d6a:	781b      	ldrb	r3, [r3, #0]
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	2200      	movs	r2, #0
 8003d70:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8003d74:	f8c7 212c 	str.w	r2, [r7, #300]	@ 0x12c
 8003d78:	f04f 0200 	mov.w	r2, #0
 8003d7c:	f04f 0300 	mov.w	r3, #0
 8003d80:	f8d7 4128 	ldr.w	r4, [r7, #296]	@ 0x128
 8003d84:	0423      	lsls	r3, r4, #16
 8003d86:	2200      	movs	r2, #0
 8003d88:	ea40 0402 	orr.w	r4, r0, r2
 8003d8c:	f8c7 4120 	str.w	r4, [r7, #288]	@ 0x120
 8003d90:	430b      	orrs	r3, r1
 8003d92:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8003d96:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	@ 0x120
 8003d9a:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003d9e:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8003da2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8003da6:	1dda      	adds	r2, r3, #7
 8003da8:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003dac:	4413      	add	r3, r2
 8003dae:	781b      	ldrb	r3, [r3, #0]
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	2200      	movs	r2, #0
 8003db4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8003db8:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8003dbc:	f04f 0200 	mov.w	r2, #0
 8003dc0:	f04f 0300 	mov.w	r3, #0
 8003dc4:	f8d7 4118 	ldr.w	r4, [r7, #280]	@ 0x118
 8003dc8:	0623      	lsls	r3, r4, #24
 8003dca:	2200      	movs	r2, #0
 8003dcc:	ea40 0402 	orr.w	r4, r0, r2
 8003dd0:	f8c7 4110 	str.w	r4, [r7, #272]	@ 0x110
 8003dd4:	430b      	orrs	r3, r1
 8003dd6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8003dda:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	@ 0x110
 8003dde:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      this->x = u_x.real;
 8003de2:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8003de6:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8003dea:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 8003dee:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8003df2:	3308      	adds	r3, #8
 8003df4:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8003df8:	f04f 0200 	mov.w	r2, #0
 8003dfc:	f04f 0300 	mov.w	r3, #0
 8003e00:	e9c7 2364 	strd	r2, r3, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003e04:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8003e08:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 8003e0c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003e10:	4413      	add	r3, r2
 8003e12:	781b      	ldrb	r3, [r3, #0]
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	2200      	movs	r2, #0
 8003e18:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003e1c:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 8003e20:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	@ 0x108
 8003e24:	461a      	mov	r2, r3
 8003e26:	4302      	orrs	r2, r0
 8003e28:	f8c7 2100 	str.w	r2, [r7, #256]	@ 0x100
 8003e2c:	4623      	mov	r3, r4
 8003e2e:	430b      	orrs	r3, r1
 8003e30:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003e34:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	@ 0x100
 8003e38:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003e3c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8003e40:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8003e44:	1c5a      	adds	r2, r3, #1
 8003e46:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003e4a:	4413      	add	r3, r2
 8003e4c:	781b      	ldrb	r3, [r3, #0]
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	2200      	movs	r2, #0
 8003e52:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003e56:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 8003e5a:	f04f 0200 	mov.w	r2, #0
 8003e5e:	f04f 0300 	mov.w	r3, #0
 8003e62:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	@ 0xf8
 8003e66:	464c      	mov	r4, r9
 8003e68:	0223      	lsls	r3, r4, #8
 8003e6a:	46c4      	mov	ip, r8
 8003e6c:	ea43 631c 	orr.w	r3, r3, ip, lsr #24
 8003e70:	4644      	mov	r4, r8
 8003e72:	0222      	lsls	r2, r4, #8
 8003e74:	ea40 0402 	orr.w	r4, r0, r2
 8003e78:	f8c7 40f0 	str.w	r4, [r7, #240]	@ 0xf0
 8003e7c:	430b      	orrs	r3, r1
 8003e7e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003e82:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	@ 0xf0
 8003e86:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003e8a:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8003e8e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8003e92:	1c9a      	adds	r2, r3, #2
 8003e94:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003e98:	4413      	add	r3, r2
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003ea4:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003ea8:	f04f 0200 	mov.w	r2, #0
 8003eac:	f04f 0300 	mov.w	r3, #0
 8003eb0:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8003eb4:	464c      	mov	r4, r9
 8003eb6:	0423      	lsls	r3, r4, #16
 8003eb8:	46c4      	mov	ip, r8
 8003eba:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
 8003ebe:	4644      	mov	r4, r8
 8003ec0:	0422      	lsls	r2, r4, #16
 8003ec2:	ea40 0402 	orr.w	r4, r0, r2
 8003ec6:	f8c7 40e0 	str.w	r4, [r7, #224]	@ 0xe0
 8003eca:	430b      	orrs	r3, r1
 8003ecc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003ed0:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	@ 0xe0
 8003ed4:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003ed8:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8003edc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8003ee0:	1cda      	adds	r2, r3, #3
 8003ee2:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003ee6:	4413      	add	r3, r2
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	2200      	movs	r2, #0
 8003eee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003ef2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003ef6:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8003efa:	4623      	mov	r3, r4
 8003efc:	0a1b      	lsrs	r3, r3, #8
 8003efe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003f02:	4623      	mov	r3, r4
 8003f04:	061b      	lsls	r3, r3, #24
 8003f06:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003f0a:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	@ 0xd0
 8003f0e:	461a      	mov	r2, r3
 8003f10:	4302      	orrs	r2, r0
 8003f12:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8003f16:	4623      	mov	r3, r4
 8003f18:	430b      	orrs	r3, r1
 8003f1a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003f1e:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	@ 0xc8
 8003f22:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003f26:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8003f2a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8003f2e:	1d1a      	adds	r2, r3, #4
 8003f30:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003f34:	4413      	add	r3, r2
 8003f36:	781b      	ldrb	r3, [r3, #0]
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003f40:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003f44:	f04f 0200 	mov.w	r2, #0
 8003f48:	f04f 0300 	mov.w	r3, #0
 8003f4c:	f8d7 40c0 	ldr.w	r4, [r7, #192]	@ 0xc0
 8003f50:	0023      	movs	r3, r4
 8003f52:	2200      	movs	r2, #0
 8003f54:	ea40 0402 	orr.w	r4, r0, r2
 8003f58:	f8c7 40b8 	str.w	r4, [r7, #184]	@ 0xb8
 8003f5c:	430b      	orrs	r3, r1
 8003f5e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003f62:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	@ 0xb8
 8003f66:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003f6a:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8003f6e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8003f72:	1d5a      	adds	r2, r3, #5
 8003f74:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003f78:	4413      	add	r3, r2
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003f84:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8003f88:	f04f 0200 	mov.w	r2, #0
 8003f8c:	f04f 0300 	mov.w	r3, #0
 8003f90:	f8d7 40b0 	ldr.w	r4, [r7, #176]	@ 0xb0
 8003f94:	0223      	lsls	r3, r4, #8
 8003f96:	2200      	movs	r2, #0
 8003f98:	ea40 0402 	orr.w	r4, r0, r2
 8003f9c:	f8c7 40a8 	str.w	r4, [r7, #168]	@ 0xa8
 8003fa0:	430b      	orrs	r3, r1
 8003fa2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003fa6:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	@ 0xa8
 8003faa:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003fae:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8003fb2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8003fb6:	1d9a      	adds	r2, r3, #6
 8003fb8:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003fbc:	4413      	add	r3, r2
 8003fbe:	781b      	ldrb	r3, [r3, #0]
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003fc8:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003fcc:	f04f 0200 	mov.w	r2, #0
 8003fd0:	f04f 0300 	mov.w	r3, #0
 8003fd4:	f8d7 40a0 	ldr.w	r4, [r7, #160]	@ 0xa0
 8003fd8:	0423      	lsls	r3, r4, #16
 8003fda:	2200      	movs	r2, #0
 8003fdc:	ea40 0402 	orr.w	r4, r0, r2
 8003fe0:	f8c7 4098 	str.w	r4, [r7, #152]	@ 0x98
 8003fe4:	430b      	orrs	r3, r1
 8003fe6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003fea:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	@ 0x98
 8003fee:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003ff2:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8003ff6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8003ffa:	1dda      	adds	r2, r3, #7
 8003ffc:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004000:	4413      	add	r3, r2
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	b2db      	uxtb	r3, r3
 8004006:	2200      	movs	r2, #0
 8004008:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800400c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004010:	f04f 0200 	mov.w	r2, #0
 8004014:	f04f 0300 	mov.w	r3, #0
 8004018:	f8d7 4090 	ldr.w	r4, [r7, #144]	@ 0x90
 800401c:	0623      	lsls	r3, r4, #24
 800401e:	2200      	movs	r2, #0
 8004020:	ea40 0402 	orr.w	r4, r0, r2
 8004024:	f8c7 4088 	str.w	r4, [r7, #136]	@ 0x88
 8004028:	430b      	orrs	r3, r1
 800402a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800402e:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	@ 0x88
 8004032:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      this->y = u_y.real;
 8004036:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 800403a:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800403e:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8004042:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8004046:	3308      	adds	r3, #8
 8004048:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 800404c:	f04f 0200 	mov.w	r2, #0
 8004050:	f04f 0300 	mov.w	r3, #0
 8004054:	e9c7 2362 	strd	r2, r3, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8004058:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 800405c:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 8004060:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004064:	4413      	add	r3, r2
 8004066:	781b      	ldrb	r3, [r3, #0]
 8004068:	b2db      	uxtb	r3, r3
 800406a:	2200      	movs	r2, #0
 800406c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004070:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004074:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	@ 0x80
 8004078:	461a      	mov	r2, r3
 800407a:	4302      	orrs	r2, r0
 800407c:	67ba      	str	r2, [r7, #120]	@ 0x78
 800407e:	4623      	mov	r3, r4
 8004080:	430b      	orrs	r3, r1
 8004082:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004084:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	@ 0x78
 8004088:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800408c:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8004090:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8004094:	1c5a      	adds	r2, r3, #1
 8004096:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800409a:	4413      	add	r3, r2
 800409c:	781b      	ldrb	r3, [r3, #0]
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	2200      	movs	r2, #0
 80040a2:	673b      	str	r3, [r7, #112]	@ 0x70
 80040a4:	677a      	str	r2, [r7, #116]	@ 0x74
 80040a6:	f04f 0200 	mov.w	r2, #0
 80040aa:	f04f 0300 	mov.w	r3, #0
 80040ae:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80040b2:	464c      	mov	r4, r9
 80040b4:	0223      	lsls	r3, r4, #8
 80040b6:	46c4      	mov	ip, r8
 80040b8:	ea43 631c 	orr.w	r3, r3, ip, lsr #24
 80040bc:	4644      	mov	r4, r8
 80040be:	0222      	lsls	r2, r4, #8
 80040c0:	ea40 0402 	orr.w	r4, r0, r2
 80040c4:	66bc      	str	r4, [r7, #104]	@ 0x68
 80040c6:	430b      	orrs	r3, r1
 80040c8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80040ca:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	@ 0x68
 80040ce:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80040d2:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 80040d6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80040da:	1c9a      	adds	r2, r3, #2
 80040dc:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80040e0:	4413      	add	r3, r2
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	2200      	movs	r2, #0
 80040e8:	663b      	str	r3, [r7, #96]	@ 0x60
 80040ea:	667a      	str	r2, [r7, #100]	@ 0x64
 80040ec:	f04f 0200 	mov.w	r2, #0
 80040f0:	f04f 0300 	mov.w	r3, #0
 80040f4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80040f8:	464c      	mov	r4, r9
 80040fa:	0423      	lsls	r3, r4, #16
 80040fc:	46c4      	mov	ip, r8
 80040fe:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
 8004102:	4644      	mov	r4, r8
 8004104:	0422      	lsls	r2, r4, #16
 8004106:	ea40 0402 	orr.w	r4, r0, r2
 800410a:	65bc      	str	r4, [r7, #88]	@ 0x58
 800410c:	430b      	orrs	r3, r1
 800410e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004110:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	@ 0x58
 8004114:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004118:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 800411c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8004120:	1cda      	adds	r2, r3, #3
 8004122:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004126:	4413      	add	r3, r2
 8004128:	781b      	ldrb	r3, [r3, #0]
 800412a:	b2db      	uxtb	r3, r3
 800412c:	2200      	movs	r2, #0
 800412e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004130:	657a      	str	r2, [r7, #84]	@ 0x54
 8004132:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8004136:	4623      	mov	r3, r4
 8004138:	0a1b      	lsrs	r3, r3, #8
 800413a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800413c:	4623      	mov	r3, r4
 800413e:	061b      	lsls	r3, r3, #24
 8004140:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004142:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 8004146:	461a      	mov	r2, r3
 8004148:	4302      	orrs	r2, r0
 800414a:	643a      	str	r2, [r7, #64]	@ 0x40
 800414c:	4623      	mov	r3, r4
 800414e:	430b      	orrs	r3, r1
 8004150:	647b      	str	r3, [r7, #68]	@ 0x44
 8004152:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8004156:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800415a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 800415e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8004162:	1d1a      	adds	r2, r3, #4
 8004164:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004168:	4413      	add	r3, r2
 800416a:	781b      	ldrb	r3, [r3, #0]
 800416c:	b2db      	uxtb	r3, r3
 800416e:	2200      	movs	r2, #0
 8004170:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004172:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004174:	f04f 0200 	mov.w	r2, #0
 8004178:	f04f 0300 	mov.w	r3, #0
 800417c:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 800417e:	0023      	movs	r3, r4
 8004180:	2200      	movs	r2, #0
 8004182:	ea40 0402 	orr.w	r4, r0, r2
 8004186:	633c      	str	r4, [r7, #48]	@ 0x30
 8004188:	430b      	orrs	r3, r1
 800418a:	637b      	str	r3, [r7, #52]	@ 0x34
 800418c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8004190:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8004194:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8004198:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 800419c:	1d5a      	adds	r2, r3, #5
 800419e:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80041a2:	4413      	add	r3, r2
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	2200      	movs	r2, #0
 80041aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80041ac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80041ae:	f04f 0200 	mov.w	r2, #0
 80041b2:	f04f 0300 	mov.w	r3, #0
 80041b6:	6abc      	ldr	r4, [r7, #40]	@ 0x28
 80041b8:	0223      	lsls	r3, r4, #8
 80041ba:	2200      	movs	r2, #0
 80041bc:	ea40 0402 	orr.w	r4, r0, r2
 80041c0:	623c      	str	r4, [r7, #32]
 80041c2:	430b      	orrs	r3, r1
 80041c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80041c6:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80041ca:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80041ce:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 80041d2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80041d6:	3306      	adds	r3, #6
 80041d8:	f8d7 2180 	ldr.w	r2, [r7, #384]	@ 0x180
 80041dc:	4413      	add	r3, r2
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	2200      	movs	r2, #0
 80041e4:	61bb      	str	r3, [r7, #24]
 80041e6:	61fa      	str	r2, [r7, #28]
 80041e8:	f04f 0200 	mov.w	r2, #0
 80041ec:	f04f 0300 	mov.w	r3, #0
 80041f0:	69bc      	ldr	r4, [r7, #24]
 80041f2:	0423      	lsls	r3, r4, #16
 80041f4:	2200      	movs	r2, #0
 80041f6:	ea40 0402 	orr.w	r4, r0, r2
 80041fa:	613c      	str	r4, [r7, #16]
 80041fc:	430b      	orrs	r3, r1
 80041fe:	617b      	str	r3, [r7, #20]
 8004200:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8004204:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8004208:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 800420c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8004210:	3307      	adds	r3, #7
 8004212:	f8d7 2180 	ldr.w	r2, [r7, #384]	@ 0x180
 8004216:	4413      	add	r3, r2
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	b2db      	uxtb	r3, r3
 800421c:	2200      	movs	r2, #0
 800421e:	60bb      	str	r3, [r7, #8]
 8004220:	60fa      	str	r2, [r7, #12]
 8004222:	f04f 0200 	mov.w	r2, #0
 8004226:	f04f 0300 	mov.w	r3, #0
 800422a:	68bc      	ldr	r4, [r7, #8]
 800422c:	0623      	lsls	r3, r4, #24
 800422e:	2200      	movs	r2, #0
 8004230:	ea40 0402 	orr.w	r4, r0, r2
 8004234:	603c      	str	r4, [r7, #0]
 8004236:	430b      	orrs	r3, r1
 8004238:	607b      	str	r3, [r7, #4]
 800423a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800423e:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      this->z = u_z.real;
 8004242:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 8004246:	f8d7 1184 	ldr.w	r1, [r7, #388]	@ 0x184
 800424a:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 800424e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8004252:	3308      	adds	r3, #8
 8004254:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
     return offset;
 8004258:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
    }
 800425c:	4618      	mov	r0, r3
 800425e:	f507 77d6 	add.w	r7, r7, #428	@ 0x1ac
 8004262:	46bd      	mov	sp, r7
 8004264:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8004268:	4770      	bx	lr
	...

0800426c <_ZN13geometry_msgs7Vector37getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Vector3"; };
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	4b02      	ldr	r3, [pc, #8]	@ (8004280 <_ZN13geometry_msgs7Vector37getTypeEv+0x14>)
 8004276:	4618      	mov	r0, r3
 8004278:	370c      	adds	r7, #12
 800427a:	46bd      	mov	sp, r7
 800427c:	bc80      	pop	{r7}
 800427e:	4770      	bx	lr
 8004280:	0800cfec 	.word	0x0800cfec

08004284 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    virtual const char * getMD5() override { return "4a842b65f413084dc2b10fb484ea7f17"; };
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	4b02      	ldr	r3, [pc, #8]	@ (8004298 <_ZN13geometry_msgs7Vector36getMD5Ev+0x14>)
 800428e:	4618      	mov	r0, r3
 8004290:	370c      	adds	r7, #12
 8004292:	46bd      	mov	sp, r7
 8004294:	bc80      	pop	{r7}
 8004296:	4770      	bx	lr
 8004298:	0800d004 	.word	0x0800d004

0800429c <_ZN11sensor_msgs3ImuC1Ev>:
      double angular_velocity_covariance[9];
      typedef geometry_msgs::Vector3 _linear_acceleration_type;
      _linear_acceleration_type linear_acceleration;
      double linear_acceleration_covariance[9];

    Imu():
 800429c:	b580      	push	{r7, lr}
 800429e:	b082      	sub	sp, #8
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
      orientation(),
      orientation_covariance(),
      angular_velocity(),
      angular_velocity_covariance(),
      linear_acceleration(),
      linear_acceleration_covariance()
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	4618      	mov	r0, r3
 80042a8:	f7fd fa2e 	bl	8001708 <_ZN3ros3MsgC1Ev>
 80042ac:	4a24      	ldr	r2, [pc, #144]	@ (8004340 <_ZN11sensor_msgs3ImuC1Ev+0xa4>)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	601a      	str	r2, [r3, #0]
      header(),
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	3304      	adds	r3, #4
 80042b6:	4618      	mov	r0, r3
 80042b8:	f7fe fa94 	bl	80027e4 <_ZN8std_msgs6HeaderC1Ev>
      orientation(),
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	3318      	adds	r3, #24
 80042c0:	4618      	mov	r0, r3
 80042c2:	f7fe fc1f 	bl	8002b04 <_ZN13geometry_msgs10QuaternionC1Ev>
      orientation_covariance(),
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 80042cc:	2308      	movs	r3, #8
 80042ce:	e007      	b.n	80042e0 <_ZN11sensor_msgs3ImuC1Ev+0x44>
 80042d0:	f04f 0000 	mov.w	r0, #0
 80042d4:	f04f 0100 	mov.w	r1, #0
 80042d8:	e9c2 0100 	strd	r0, r1, [r2]
 80042dc:	3b01      	subs	r3, #1
 80042de:	3208      	adds	r2, #8
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	daf5      	bge.n	80042d0 <_ZN11sensor_msgs3ImuC1Ev+0x34>
      angular_velocity(),
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	3388      	adds	r3, #136	@ 0x88
 80042e8:	4618      	mov	r0, r3
 80042ea:	f7ff fac5 	bl	8003878 <_ZN13geometry_msgs7Vector3C1Ev>
      angular_velocity_covariance(),
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f103 02a8 	add.w	r2, r3, #168	@ 0xa8
 80042f4:	2308      	movs	r3, #8
 80042f6:	e007      	b.n	8004308 <_ZN11sensor_msgs3ImuC1Ev+0x6c>
 80042f8:	f04f 0000 	mov.w	r0, #0
 80042fc:	f04f 0100 	mov.w	r1, #0
 8004300:	e9c2 0100 	strd	r0, r1, [r2]
 8004304:	3b01      	subs	r3, #1
 8004306:	3208      	adds	r2, #8
 8004308:	2b00      	cmp	r3, #0
 800430a:	daf5      	bge.n	80042f8 <_ZN11sensor_msgs3ImuC1Ev+0x5c>
      linear_acceleration(),
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	33f0      	adds	r3, #240	@ 0xf0
 8004310:	4618      	mov	r0, r3
 8004312:	f7ff fab1 	bl	8003878 <_ZN13geometry_msgs7Vector3C1Ev>
      linear_acceleration_covariance()
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f503 7288 	add.w	r2, r3, #272	@ 0x110
 800431c:	2308      	movs	r3, #8
 800431e:	e007      	b.n	8004330 <_ZN11sensor_msgs3ImuC1Ev+0x94>
 8004320:	f04f 0000 	mov.w	r0, #0
 8004324:	f04f 0100 	mov.w	r1, #0
 8004328:	e9c2 0100 	strd	r0, r1, [r2]
 800432c:	3b01      	subs	r3, #1
 800432e:	3208      	adds	r2, #8
 8004330:	2b00      	cmp	r3, #0
 8004332:	daf5      	bge.n	8004320 <_ZN11sensor_msgs3ImuC1Ev+0x84>
    {
    }
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	4618      	mov	r0, r3
 8004338:	3708      	adds	r7, #8
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	0800d488 	.word	0x0800d488

08004344 <_ZNK11sensor_msgs3Imu9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8004344:	b580      	push	{r7, lr}
 8004346:	b08c      	sub	sp, #48	@ 0x30
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
 800434c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800434e:	2300      	movs	r3, #0
 8004350:	62fb      	str	r3, [r7, #44]	@ 0x2c
      offset += this->header.serialize(outbuffer + offset);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	1d18      	adds	r0, r3, #4
 8004356:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004358:	683a      	ldr	r2, [r7, #0]
 800435a:	4413      	add	r3, r2
 800435c:	4619      	mov	r1, r3
 800435e:	f7fe fa61 	bl	8002824 <_ZNK8std_msgs6Header9serializeEPh>
 8004362:	4602      	mov	r2, r0
 8004364:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004366:	4413      	add	r3, r2
 8004368:	62fb      	str	r3, [r7, #44]	@ 0x2c
      offset += this->orientation.serialize(outbuffer + offset);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f103 0018 	add.w	r0, r3, #24
 8004370:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004372:	683a      	ldr	r2, [r7, #0]
 8004374:	4413      	add	r3, r2
 8004376:	4619      	mov	r1, r3
 8004378:	f7fe fbf2 	bl	8002b60 <_ZNK13geometry_msgs10Quaternion9serializeEPh>
 800437c:	4602      	mov	r2, r0
 800437e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004380:	4413      	add	r3, r2
 8004382:	62fb      	str	r3, [r7, #44]	@ 0x2c
      for( uint32_t i = 0; i < 9; i++){
 8004384:	2300      	movs	r3, #0
 8004386:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004388:	e07d      	b.n	8004486 <_ZNK11sensor_msgs3Imu9serializeEPh+0x142>
      union {
        double real;
        uint64_t base;
      } u_orientation_covariancei;
      u_orientation_covariancei.real = this->orientation_covariance[i];
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800438e:	3308      	adds	r3, #8
 8004390:	00db      	lsls	r3, r3, #3
 8004392:	4413      	add	r3, r2
 8004394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004398:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_orientation_covariancei.base >> (8 * 0)) & 0xFF;
 800439c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043a0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80043a2:	6838      	ldr	r0, [r7, #0]
 80043a4:	4401      	add	r1, r0
 80043a6:	b2d3      	uxtb	r3, r2
 80043a8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_orientation_covariancei.base >> (8 * 1)) & 0xFF;
 80043aa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80043ae:	f04f 0200 	mov.w	r2, #0
 80043b2:	f04f 0300 	mov.w	r3, #0
 80043b6:	0a02      	lsrs	r2, r0, #8
 80043b8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80043bc:	0a0b      	lsrs	r3, r1, #8
 80043be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80043c0:	3101      	adds	r1, #1
 80043c2:	6838      	ldr	r0, [r7, #0]
 80043c4:	4401      	add	r1, r0
 80043c6:	b2d3      	uxtb	r3, r2
 80043c8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_orientation_covariancei.base >> (8 * 2)) & 0xFF;
 80043ca:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80043ce:	f04f 0200 	mov.w	r2, #0
 80043d2:	f04f 0300 	mov.w	r3, #0
 80043d6:	0c02      	lsrs	r2, r0, #16
 80043d8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80043dc:	0c0b      	lsrs	r3, r1, #16
 80043de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80043e0:	3102      	adds	r1, #2
 80043e2:	6838      	ldr	r0, [r7, #0]
 80043e4:	4401      	add	r1, r0
 80043e6:	b2d3      	uxtb	r3, r2
 80043e8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_orientation_covariancei.base >> (8 * 3)) & 0xFF;
 80043ea:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80043ee:	f04f 0200 	mov.w	r2, #0
 80043f2:	f04f 0300 	mov.w	r3, #0
 80043f6:	0e02      	lsrs	r2, r0, #24
 80043f8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80043fc:	0e0b      	lsrs	r3, r1, #24
 80043fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004400:	3103      	adds	r1, #3
 8004402:	6838      	ldr	r0, [r7, #0]
 8004404:	4401      	add	r1, r0
 8004406:	b2d3      	uxtb	r3, r2
 8004408:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_orientation_covariancei.base >> (8 * 4)) & 0xFF;
 800440a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800440e:	f04f 0200 	mov.w	r2, #0
 8004412:	f04f 0300 	mov.w	r3, #0
 8004416:	000a      	movs	r2, r1
 8004418:	2300      	movs	r3, #0
 800441a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800441c:	3104      	adds	r1, #4
 800441e:	6838      	ldr	r0, [r7, #0]
 8004420:	4401      	add	r1, r0
 8004422:	b2d3      	uxtb	r3, r2
 8004424:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_orientation_covariancei.base >> (8 * 5)) & 0xFF;
 8004426:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800442a:	f04f 0200 	mov.w	r2, #0
 800442e:	f04f 0300 	mov.w	r3, #0
 8004432:	0a0a      	lsrs	r2, r1, #8
 8004434:	2300      	movs	r3, #0
 8004436:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004438:	3105      	adds	r1, #5
 800443a:	6838      	ldr	r0, [r7, #0]
 800443c:	4401      	add	r1, r0
 800443e:	b2d3      	uxtb	r3, r2
 8004440:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_orientation_covariancei.base >> (8 * 6)) & 0xFF;
 8004442:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004446:	f04f 0200 	mov.w	r2, #0
 800444a:	f04f 0300 	mov.w	r3, #0
 800444e:	0c0a      	lsrs	r2, r1, #16
 8004450:	2300      	movs	r3, #0
 8004452:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004454:	3106      	adds	r1, #6
 8004456:	6838      	ldr	r0, [r7, #0]
 8004458:	4401      	add	r1, r0
 800445a:	b2d3      	uxtb	r3, r2
 800445c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_orientation_covariancei.base >> (8 * 7)) & 0xFF;
 800445e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004462:	f04f 0200 	mov.w	r2, #0
 8004466:	f04f 0300 	mov.w	r3, #0
 800446a:	0e0a      	lsrs	r2, r1, #24
 800446c:	2300      	movs	r3, #0
 800446e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004470:	3107      	adds	r1, #7
 8004472:	6838      	ldr	r0, [r7, #0]
 8004474:	4401      	add	r1, r0
 8004476:	b2d3      	uxtb	r3, r2
 8004478:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->orientation_covariance[i]);
 800447a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800447c:	3308      	adds	r3, #8
 800447e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      for( uint32_t i = 0; i < 9; i++){
 8004480:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004482:	3301      	adds	r3, #1
 8004484:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004488:	2b08      	cmp	r3, #8
 800448a:	f67f af7e 	bls.w	800438a <_ZNK11sensor_msgs3Imu9serializeEPh+0x46>
      }
      offset += this->angular_velocity.serialize(outbuffer + offset);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f103 0088 	add.w	r0, r3, #136	@ 0x88
 8004494:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004496:	683a      	ldr	r2, [r7, #0]
 8004498:	4413      	add	r3, r2
 800449a:	4619      	mov	r1, r3
 800449c:	f7ff fa14 	bl	80038c8 <_ZNK13geometry_msgs7Vector39serializeEPh>
 80044a0:	4602      	mov	r2, r0
 80044a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044a4:	4413      	add	r3, r2
 80044a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      for( uint32_t i = 0; i < 9; i++){
 80044a8:	2300      	movs	r3, #0
 80044aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80044ac:	e07d      	b.n	80045aa <_ZNK11sensor_msgs3Imu9serializeEPh+0x266>
      union {
        double real;
        uint64_t base;
      } u_angular_velocity_covariancei;
      u_angular_velocity_covariancei.real = this->angular_velocity_covariance[i];
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044b2:	3315      	adds	r3, #21
 80044b4:	00db      	lsls	r3, r3, #3
 80044b6:	4413      	add	r3, r2
 80044b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044bc:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_angular_velocity_covariancei.base >> (8 * 0)) & 0xFF;
 80044c0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80044c4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80044c6:	6838      	ldr	r0, [r7, #0]
 80044c8:	4401      	add	r1, r0
 80044ca:	b2d3      	uxtb	r3, r2
 80044cc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_angular_velocity_covariancei.base >> (8 * 1)) & 0xFF;
 80044ce:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80044d2:	f04f 0200 	mov.w	r2, #0
 80044d6:	f04f 0300 	mov.w	r3, #0
 80044da:	0a02      	lsrs	r2, r0, #8
 80044dc:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80044e0:	0a0b      	lsrs	r3, r1, #8
 80044e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80044e4:	3101      	adds	r1, #1
 80044e6:	6838      	ldr	r0, [r7, #0]
 80044e8:	4401      	add	r1, r0
 80044ea:	b2d3      	uxtb	r3, r2
 80044ec:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_angular_velocity_covariancei.base >> (8 * 2)) & 0xFF;
 80044ee:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80044f2:	f04f 0200 	mov.w	r2, #0
 80044f6:	f04f 0300 	mov.w	r3, #0
 80044fa:	0c02      	lsrs	r2, r0, #16
 80044fc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004500:	0c0b      	lsrs	r3, r1, #16
 8004502:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004504:	3102      	adds	r1, #2
 8004506:	6838      	ldr	r0, [r7, #0]
 8004508:	4401      	add	r1, r0
 800450a:	b2d3      	uxtb	r3, r2
 800450c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_angular_velocity_covariancei.base >> (8 * 3)) & 0xFF;
 800450e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004512:	f04f 0200 	mov.w	r2, #0
 8004516:	f04f 0300 	mov.w	r3, #0
 800451a:	0e02      	lsrs	r2, r0, #24
 800451c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004520:	0e0b      	lsrs	r3, r1, #24
 8004522:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004524:	3103      	adds	r1, #3
 8004526:	6838      	ldr	r0, [r7, #0]
 8004528:	4401      	add	r1, r0
 800452a:	b2d3      	uxtb	r3, r2
 800452c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_angular_velocity_covariancei.base >> (8 * 4)) & 0xFF;
 800452e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004532:	f04f 0200 	mov.w	r2, #0
 8004536:	f04f 0300 	mov.w	r3, #0
 800453a:	000a      	movs	r2, r1
 800453c:	2300      	movs	r3, #0
 800453e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004540:	3104      	adds	r1, #4
 8004542:	6838      	ldr	r0, [r7, #0]
 8004544:	4401      	add	r1, r0
 8004546:	b2d3      	uxtb	r3, r2
 8004548:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_angular_velocity_covariancei.base >> (8 * 5)) & 0xFF;
 800454a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800454e:	f04f 0200 	mov.w	r2, #0
 8004552:	f04f 0300 	mov.w	r3, #0
 8004556:	0a0a      	lsrs	r2, r1, #8
 8004558:	2300      	movs	r3, #0
 800455a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800455c:	3105      	adds	r1, #5
 800455e:	6838      	ldr	r0, [r7, #0]
 8004560:	4401      	add	r1, r0
 8004562:	b2d3      	uxtb	r3, r2
 8004564:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_angular_velocity_covariancei.base >> (8 * 6)) & 0xFF;
 8004566:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800456a:	f04f 0200 	mov.w	r2, #0
 800456e:	f04f 0300 	mov.w	r3, #0
 8004572:	0c0a      	lsrs	r2, r1, #16
 8004574:	2300      	movs	r3, #0
 8004576:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004578:	3106      	adds	r1, #6
 800457a:	6838      	ldr	r0, [r7, #0]
 800457c:	4401      	add	r1, r0
 800457e:	b2d3      	uxtb	r3, r2
 8004580:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_angular_velocity_covariancei.base >> (8 * 7)) & 0xFF;
 8004582:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004586:	f04f 0200 	mov.w	r2, #0
 800458a:	f04f 0300 	mov.w	r3, #0
 800458e:	0e0a      	lsrs	r2, r1, #24
 8004590:	2300      	movs	r3, #0
 8004592:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004594:	3107      	adds	r1, #7
 8004596:	6838      	ldr	r0, [r7, #0]
 8004598:	4401      	add	r1, r0
 800459a:	b2d3      	uxtb	r3, r2
 800459c:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->angular_velocity_covariance[i]);
 800459e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045a0:	3308      	adds	r3, #8
 80045a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      for( uint32_t i = 0; i < 9; i++){
 80045a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045a6:	3301      	adds	r3, #1
 80045a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80045aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ac:	2b08      	cmp	r3, #8
 80045ae:	f67f af7e 	bls.w	80044ae <_ZNK11sensor_msgs3Imu9serializeEPh+0x16a>
      }
      offset += this->linear_acceleration.serialize(outbuffer + offset);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f103 00f0 	add.w	r0, r3, #240	@ 0xf0
 80045b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045ba:	683a      	ldr	r2, [r7, #0]
 80045bc:	4413      	add	r3, r2
 80045be:	4619      	mov	r1, r3
 80045c0:	f7ff f982 	bl	80038c8 <_ZNK13geometry_msgs7Vector39serializeEPh>
 80045c4:	4602      	mov	r2, r0
 80045c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045c8:	4413      	add	r3, r2
 80045ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
      for( uint32_t i = 0; i < 9; i++){
 80045cc:	2300      	movs	r3, #0
 80045ce:	623b      	str	r3, [r7, #32]
 80045d0:	e07d      	b.n	80046ce <_ZNK11sensor_msgs3Imu9serializeEPh+0x38a>
      union {
        double real;
        uint64_t base;
      } u_linear_acceleration_covariancei;
      u_linear_acceleration_covariancei.real = this->linear_acceleration_covariance[i];
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	6a3b      	ldr	r3, [r7, #32]
 80045d6:	3322      	adds	r3, #34	@ 0x22
 80045d8:	00db      	lsls	r3, r3, #3
 80045da:	4413      	add	r3, r2
 80045dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e0:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_linear_acceleration_covariancei.base >> (8 * 0)) & 0xFF;
 80045e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80045e8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80045ea:	6838      	ldr	r0, [r7, #0]
 80045ec:	4401      	add	r1, r0
 80045ee:	b2d3      	uxtb	r3, r2
 80045f0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_linear_acceleration_covariancei.base >> (8 * 1)) & 0xFF;
 80045f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80045f6:	f04f 0200 	mov.w	r2, #0
 80045fa:	f04f 0300 	mov.w	r3, #0
 80045fe:	0a02      	lsrs	r2, r0, #8
 8004600:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8004604:	0a0b      	lsrs	r3, r1, #8
 8004606:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004608:	3101      	adds	r1, #1
 800460a:	6838      	ldr	r0, [r7, #0]
 800460c:	4401      	add	r1, r0
 800460e:	b2d3      	uxtb	r3, r2
 8004610:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_linear_acceleration_covariancei.base >> (8 * 2)) & 0xFF;
 8004612:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004616:	f04f 0200 	mov.w	r2, #0
 800461a:	f04f 0300 	mov.w	r3, #0
 800461e:	0c02      	lsrs	r2, r0, #16
 8004620:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004624:	0c0b      	lsrs	r3, r1, #16
 8004626:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004628:	3102      	adds	r1, #2
 800462a:	6838      	ldr	r0, [r7, #0]
 800462c:	4401      	add	r1, r0
 800462e:	b2d3      	uxtb	r3, r2
 8004630:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_linear_acceleration_covariancei.base >> (8 * 3)) & 0xFF;
 8004632:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004636:	f04f 0200 	mov.w	r2, #0
 800463a:	f04f 0300 	mov.w	r3, #0
 800463e:	0e02      	lsrs	r2, r0, #24
 8004640:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004644:	0e0b      	lsrs	r3, r1, #24
 8004646:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004648:	3103      	adds	r1, #3
 800464a:	6838      	ldr	r0, [r7, #0]
 800464c:	4401      	add	r1, r0
 800464e:	b2d3      	uxtb	r3, r2
 8004650:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_linear_acceleration_covariancei.base >> (8 * 4)) & 0xFF;
 8004652:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004656:	f04f 0200 	mov.w	r2, #0
 800465a:	f04f 0300 	mov.w	r3, #0
 800465e:	000a      	movs	r2, r1
 8004660:	2300      	movs	r3, #0
 8004662:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004664:	3104      	adds	r1, #4
 8004666:	6838      	ldr	r0, [r7, #0]
 8004668:	4401      	add	r1, r0
 800466a:	b2d3      	uxtb	r3, r2
 800466c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_linear_acceleration_covariancei.base >> (8 * 5)) & 0xFF;
 800466e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004672:	f04f 0200 	mov.w	r2, #0
 8004676:	f04f 0300 	mov.w	r3, #0
 800467a:	0a0a      	lsrs	r2, r1, #8
 800467c:	2300      	movs	r3, #0
 800467e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004680:	3105      	adds	r1, #5
 8004682:	6838      	ldr	r0, [r7, #0]
 8004684:	4401      	add	r1, r0
 8004686:	b2d3      	uxtb	r3, r2
 8004688:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_linear_acceleration_covariancei.base >> (8 * 6)) & 0xFF;
 800468a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800468e:	f04f 0200 	mov.w	r2, #0
 8004692:	f04f 0300 	mov.w	r3, #0
 8004696:	0c0a      	lsrs	r2, r1, #16
 8004698:	2300      	movs	r3, #0
 800469a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800469c:	3106      	adds	r1, #6
 800469e:	6838      	ldr	r0, [r7, #0]
 80046a0:	4401      	add	r1, r0
 80046a2:	b2d3      	uxtb	r3, r2
 80046a4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_linear_acceleration_covariancei.base >> (8 * 7)) & 0xFF;
 80046a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80046aa:	f04f 0200 	mov.w	r2, #0
 80046ae:	f04f 0300 	mov.w	r3, #0
 80046b2:	0e0a      	lsrs	r2, r1, #24
 80046b4:	2300      	movs	r3, #0
 80046b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80046b8:	3107      	adds	r1, #7
 80046ba:	6838      	ldr	r0, [r7, #0]
 80046bc:	4401      	add	r1, r0
 80046be:	b2d3      	uxtb	r3, r2
 80046c0:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->linear_acceleration_covariance[i]);
 80046c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046c4:	3308      	adds	r3, #8
 80046c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      for( uint32_t i = 0; i < 9; i++){
 80046c8:	6a3b      	ldr	r3, [r7, #32]
 80046ca:	3301      	adds	r3, #1
 80046cc:	623b      	str	r3, [r7, #32]
 80046ce:	6a3b      	ldr	r3, [r7, #32]
 80046d0:	2b08      	cmp	r3, #8
 80046d2:	f67f af7e 	bls.w	80045d2 <_ZNK11sensor_msgs3Imu9serializeEPh+0x28e>
      }
      return offset;
 80046d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
 80046d8:	4618      	mov	r0, r3
 80046da:	3730      	adds	r7, #48	@ 0x30
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}

080046e0 <_ZN11sensor_msgs3Imu11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80046e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046e4:	b0ed      	sub	sp, #436	@ 0x1b4
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	f8c7 0184 	str.w	r0, [r7, #388]	@ 0x184
 80046ec:	f8c7 1180 	str.w	r1, [r7, #384]	@ 0x180
    {
      int offset = 0;
 80046f0:	2300      	movs	r3, #0
 80046f2:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
      offset += this->header.deserialize(inbuffer + offset);
 80046f6:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80046fa:	1d18      	adds	r0, r3, #4
 80046fc:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8004700:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004704:	4413      	add	r3, r2
 8004706:	4619      	mov	r1, r3
 8004708:	f7fe f924 	bl	8002954 <_ZN8std_msgs6Header11deserializeEPh>
 800470c:	4602      	mov	r2, r0
 800470e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8004712:	4413      	add	r3, r2
 8004714:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
      offset += this->orientation.deserialize(inbuffer + offset);
 8004718:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800471c:	f103 0018 	add.w	r0, r3, #24
 8004720:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8004724:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004728:	4413      	add	r3, r2
 800472a:	4619      	mov	r1, r3
 800472c:	f7fe fc01 	bl	8002f32 <_ZN13geometry_msgs10Quaternion11deserializeEPh>
 8004730:	4602      	mov	r2, r0
 8004732:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8004736:	4413      	add	r3, r2
 8004738:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
      for( uint32_t i = 0; i < 9; i++){
 800473c:	2300      	movs	r3, #0
 800473e:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8004742:	e122      	b.n	800498a <_ZN11sensor_msgs3Imu11deserializeEPh+0x2aa>
      union {
        double real;
        uint64_t base;
      } u_orientation_covariancei;
      u_orientation_covariancei.base = 0;
 8004744:	f04f 0200 	mov.w	r2, #0
 8004748:	f04f 0300 	mov.w	r3, #0
 800474c:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8004750:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8004754:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8004758:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800475c:	4413      	add	r3, r2
 800475e:	781b      	ldrb	r3, [r3, #0]
 8004760:	b2db      	uxtb	r3, r3
 8004762:	2200      	movs	r2, #0
 8004764:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 8004768:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
 800476c:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	@ 0x170
 8004770:	4616      	mov	r6, r2
 8004772:	4306      	orrs	r6, r0
 8004774:	f8c7 6168 	str.w	r6, [r7, #360]	@ 0x168
 8004778:	430b      	orrs	r3, r1
 800477a:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 800477e:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	@ 0x168
 8004782:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004786:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 800478a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 800478e:	1c5a      	adds	r2, r3, #1
 8004790:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004794:	4413      	add	r3, r2
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	b2db      	uxtb	r3, r3
 800479a:	2200      	movs	r2, #0
 800479c:	469a      	mov	sl, r3
 800479e:	4693      	mov	fp, r2
 80047a0:	f04f 0200 	mov.w	r2, #0
 80047a4:	f04f 0300 	mov.w	r3, #0
 80047a8:	ea4f 230b 	mov.w	r3, fp, lsl #8
 80047ac:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 80047b0:	ea4f 220a 	mov.w	r2, sl, lsl #8
 80047b4:	ea40 0602 	orr.w	r6, r0, r2
 80047b8:	f8c7 6160 	str.w	r6, [r7, #352]	@ 0x160
 80047bc:	430b      	orrs	r3, r1
 80047be:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 80047c2:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	@ 0x160
 80047c6:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80047ca:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 80047ce:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80047d2:	1c9a      	adds	r2, r3, #2
 80047d4:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80047d8:	4413      	add	r3, r2
 80047da:	781b      	ldrb	r3, [r3, #0]
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	2200      	movs	r2, #0
 80047e0:	4698      	mov	r8, r3
 80047e2:	4691      	mov	r9, r2
 80047e4:	f04f 0200 	mov.w	r2, #0
 80047e8:	f04f 0300 	mov.w	r3, #0
 80047ec:	ea4f 4309 	mov.w	r3, r9, lsl #16
 80047f0:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 80047f4:	ea4f 4208 	mov.w	r2, r8, lsl #16
 80047f8:	ea40 0602 	orr.w	r6, r0, r2
 80047fc:	f8c7 6158 	str.w	r6, [r7, #344]	@ 0x158
 8004800:	430b      	orrs	r3, r1
 8004802:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8004806:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	@ 0x158
 800480a:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800480e:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8004812:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8004816:	1cda      	adds	r2, r3, #3
 8004818:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800481c:	4413      	add	r3, r2
 800481e:	781b      	ldrb	r3, [r3, #0]
 8004820:	b2db      	uxtb	r3, r3
 8004822:	2200      	movs	r2, #0
 8004824:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 8004828:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 800482c:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8004830:	0a1d      	lsrs	r5, r3, #8
 8004832:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8004836:	061c      	lsls	r4, r3, #24
 8004838:	ea40 0304 	orr.w	r3, r0, r4
 800483c:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8004840:	ea41 0305 	orr.w	r3, r1, r5
 8004844:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8004848:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 800484c:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8004850:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8004854:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8004858:	1d1a      	adds	r2, r3, #4
 800485a:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800485e:	4413      	add	r3, r2
 8004860:	781b      	ldrb	r3, [r3, #0]
 8004862:	b2db      	uxtb	r3, r3
 8004864:	2200      	movs	r2, #0
 8004866:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 800486a:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 800486e:	f04f 0200 	mov.w	r2, #0
 8004872:	f04f 0300 	mov.w	r3, #0
 8004876:	f8d7 6148 	ldr.w	r6, [r7, #328]	@ 0x148
 800487a:	0033      	movs	r3, r6
 800487c:	2200      	movs	r2, #0
 800487e:	ea40 0602 	orr.w	r6, r0, r2
 8004882:	f8c7 6140 	str.w	r6, [r7, #320]	@ 0x140
 8004886:	430b      	orrs	r3, r1
 8004888:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 800488c:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 8004890:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8004894:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8004898:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 800489c:	1d5a      	adds	r2, r3, #5
 800489e:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80048a2:	4413      	add	r3, r2
 80048a4:	781b      	ldrb	r3, [r3, #0]
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	2200      	movs	r2, #0
 80048aa:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 80048ae:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 80048b2:	f04f 0200 	mov.w	r2, #0
 80048b6:	f04f 0300 	mov.w	r3, #0
 80048ba:	f8d7 6138 	ldr.w	r6, [r7, #312]	@ 0x138
 80048be:	0233      	lsls	r3, r6, #8
 80048c0:	2200      	movs	r2, #0
 80048c2:	ea40 0602 	orr.w	r6, r0, r2
 80048c6:	f8c7 6130 	str.w	r6, [r7, #304]	@ 0x130
 80048ca:	430b      	orrs	r3, r1
 80048cc:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 80048d0:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 80048d4:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80048d8:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 80048dc:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80048e0:	1d9a      	adds	r2, r3, #6
 80048e2:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80048e6:	4413      	add	r3, r2
 80048e8:	781b      	ldrb	r3, [r3, #0]
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	2200      	movs	r2, #0
 80048ee:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80048f2:	f8c7 212c 	str.w	r2, [r7, #300]	@ 0x12c
 80048f6:	f04f 0200 	mov.w	r2, #0
 80048fa:	f04f 0300 	mov.w	r3, #0
 80048fe:	f8d7 6128 	ldr.w	r6, [r7, #296]	@ 0x128
 8004902:	0433      	lsls	r3, r6, #16
 8004904:	2200      	movs	r2, #0
 8004906:	ea40 0602 	orr.w	r6, r0, r2
 800490a:	f8c7 6120 	str.w	r6, [r7, #288]	@ 0x120
 800490e:	430b      	orrs	r3, r1
 8004910:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8004914:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8004918:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800491c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8004920:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8004924:	1dda      	adds	r2, r3, #7
 8004926:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800492a:	4413      	add	r3, r2
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	b2db      	uxtb	r3, r3
 8004930:	2200      	movs	r2, #0
 8004932:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8004936:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 800493a:	f04f 0200 	mov.w	r2, #0
 800493e:	f04f 0300 	mov.w	r3, #0
 8004942:	f8d7 6118 	ldr.w	r6, [r7, #280]	@ 0x118
 8004946:	0633      	lsls	r3, r6, #24
 8004948:	2200      	movs	r2, #0
 800494a:	ea40 0602 	orr.w	r6, r0, r2
 800494e:	f8c7 6110 	str.w	r6, [r7, #272]	@ 0x110
 8004952:	430b      	orrs	r3, r1
 8004954:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8004958:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 800495c:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      this->orientation_covariance[i] = u_orientation_covariancei.real;
 8004960:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8004964:	f8d7 2184 	ldr.w	r2, [r7, #388]	@ 0x184
 8004968:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 800496c:	3308      	adds	r3, #8
 800496e:	00db      	lsls	r3, r3, #3
 8004970:	4413      	add	r3, r2
 8004972:	e9c3 0100 	strd	r0, r1, [r3]
      offset += sizeof(this->orientation_covariance[i]);
 8004976:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 800497a:	3308      	adds	r3, #8
 800497c:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
      for( uint32_t i = 0; i < 9; i++){
 8004980:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8004984:	3301      	adds	r3, #1
 8004986:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 800498a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 800498e:	2b08      	cmp	r3, #8
 8004990:	f67f aed8 	bls.w	8004744 <_ZN11sensor_msgs3Imu11deserializeEPh+0x64>
      }
      offset += this->angular_velocity.deserialize(inbuffer + offset);
 8004994:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8004998:	f103 0088 	add.w	r0, r3, #136	@ 0x88
 800499c:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 80049a0:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80049a4:	4413      	add	r3, r2
 80049a6:	4619      	mov	r1, r3
 80049a8:	f7ff f900 	bl	8003bac <_ZN13geometry_msgs7Vector311deserializeEPh>
 80049ac:	4602      	mov	r2, r0
 80049ae:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80049b2:	4413      	add	r3, r2
 80049b4:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
      for( uint32_t i = 0; i < 9; i++){
 80049b8:	2300      	movs	r3, #0
 80049ba:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80049be:	e135      	b.n	8004c2c <_ZN11sensor_msgs3Imu11deserializeEPh+0x54c>
      union {
        double real;
        uint64_t base;
      } u_angular_velocity_covariancei;
      u_angular_velocity_covariancei.base = 0;
 80049c0:	f04f 0200 	mov.w	r2, #0
 80049c4:	f04f 0300 	mov.w	r3, #0
 80049c8:	e9c7 2364 	strd	r2, r3, [r7, #400]	@ 0x190
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80049cc:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 80049d0:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 80049d4:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80049d8:	4413      	add	r3, r2
 80049da:	781b      	ldrb	r3, [r3, #0]
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	2200      	movs	r2, #0
 80049e0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80049e4:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 80049e8:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	@ 0x108
 80049ec:	461a      	mov	r2, r3
 80049ee:	4302      	orrs	r2, r0
 80049f0:	f8c7 2100 	str.w	r2, [r7, #256]	@ 0x100
 80049f4:	4623      	mov	r3, r4
 80049f6:	430b      	orrs	r3, r1
 80049f8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80049fc:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	@ 0x100
 8004a00:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004a04:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8004a08:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8004a0c:	1c5a      	adds	r2, r3, #1
 8004a0e:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004a12:	4413      	add	r3, r2
 8004a14:	781b      	ldrb	r3, [r3, #0]
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	2200      	movs	r2, #0
 8004a1a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004a1e:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 8004a22:	f04f 0200 	mov.w	r2, #0
 8004a26:	f04f 0300 	mov.w	r3, #0
 8004a2a:	e9d7 563e 	ldrd	r5, r6, [r7, #248]	@ 0xf8
 8004a2e:	4634      	mov	r4, r6
 8004a30:	0223      	lsls	r3, r4, #8
 8004a32:	462c      	mov	r4, r5
 8004a34:	4635      	mov	r5, r6
 8004a36:	4626      	mov	r6, r4
 8004a38:	ea43 6316 	orr.w	r3, r3, r6, lsr #24
 8004a3c:	0222      	lsls	r2, r4, #8
 8004a3e:	ea40 0402 	orr.w	r4, r0, r2
 8004a42:	f8c7 40f0 	str.w	r4, [r7, #240]	@ 0xf0
 8004a46:	430b      	orrs	r3, r1
 8004a48:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004a4c:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	@ 0xf0
 8004a50:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004a54:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8004a58:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8004a5c:	1c9a      	adds	r2, r3, #2
 8004a5e:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004a62:	4413      	add	r3, r2
 8004a64:	781b      	ldrb	r3, [r3, #0]
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	2200      	movs	r2, #0
 8004a6a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004a6e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004a72:	f04f 0200 	mov.w	r2, #0
 8004a76:	f04f 0300 	mov.w	r3, #0
 8004a7a:	e9d7 563a 	ldrd	r5, r6, [r7, #232]	@ 0xe8
 8004a7e:	4634      	mov	r4, r6
 8004a80:	0423      	lsls	r3, r4, #16
 8004a82:	462c      	mov	r4, r5
 8004a84:	4635      	mov	r5, r6
 8004a86:	4626      	mov	r6, r4
 8004a88:	ea43 4316 	orr.w	r3, r3, r6, lsr #16
 8004a8c:	0422      	lsls	r2, r4, #16
 8004a8e:	ea40 0402 	orr.w	r4, r0, r2
 8004a92:	f8c7 40e0 	str.w	r4, [r7, #224]	@ 0xe0
 8004a96:	430b      	orrs	r3, r1
 8004a98:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004a9c:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	@ 0xe0
 8004aa0:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004aa4:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8004aa8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8004aac:	1cda      	adds	r2, r3, #3
 8004aae:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004ab2:	4413      	add	r3, r2
 8004ab4:	781b      	ldrb	r3, [r3, #0]
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004abe:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004ac2:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8004ac6:	4623      	mov	r3, r4
 8004ac8:	0a1b      	lsrs	r3, r3, #8
 8004aca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004ace:	4623      	mov	r3, r4
 8004ad0:	061b      	lsls	r3, r3, #24
 8004ad2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004ad6:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	@ 0xd0
 8004ada:	461a      	mov	r2, r3
 8004adc:	4302      	orrs	r2, r0
 8004ade:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8004ae2:	4623      	mov	r3, r4
 8004ae4:	430b      	orrs	r3, r1
 8004ae6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004aea:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	@ 0xc8
 8004aee:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8004af2:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8004af6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8004afa:	1d1a      	adds	r2, r3, #4
 8004afc:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004b00:	4413      	add	r3, r2
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	2200      	movs	r2, #0
 8004b08:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004b0c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004b10:	f04f 0200 	mov.w	r2, #0
 8004b14:	f04f 0300 	mov.w	r3, #0
 8004b18:	f8d7 40c0 	ldr.w	r4, [r7, #192]	@ 0xc0
 8004b1c:	0023      	movs	r3, r4
 8004b1e:	2200      	movs	r2, #0
 8004b20:	ea40 0402 	orr.w	r4, r0, r2
 8004b24:	f8c7 40b8 	str.w	r4, [r7, #184]	@ 0xb8
 8004b28:	430b      	orrs	r3, r1
 8004b2a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004b2e:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	@ 0xb8
 8004b32:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8004b36:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8004b3a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8004b3e:	1d5a      	adds	r2, r3, #5
 8004b40:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004b44:	4413      	add	r3, r2
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004b50:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8004b54:	f04f 0200 	mov.w	r2, #0
 8004b58:	f04f 0300 	mov.w	r3, #0
 8004b5c:	f8d7 40b0 	ldr.w	r4, [r7, #176]	@ 0xb0
 8004b60:	0223      	lsls	r3, r4, #8
 8004b62:	2200      	movs	r2, #0
 8004b64:	ea40 0402 	orr.w	r4, r0, r2
 8004b68:	f8c7 40a8 	str.w	r4, [r7, #168]	@ 0xa8
 8004b6c:	430b      	orrs	r3, r1
 8004b6e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004b72:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	@ 0xa8
 8004b76:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8004b7a:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8004b7e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8004b82:	1d9a      	adds	r2, r3, #6
 8004b84:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004b88:	4413      	add	r3, r2
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	2200      	movs	r2, #0
 8004b90:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004b94:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004b98:	f04f 0200 	mov.w	r2, #0
 8004b9c:	f04f 0300 	mov.w	r3, #0
 8004ba0:	f8d7 40a0 	ldr.w	r4, [r7, #160]	@ 0xa0
 8004ba4:	0423      	lsls	r3, r4, #16
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	ea40 0402 	orr.w	r4, r0, r2
 8004bac:	f8c7 4098 	str.w	r4, [r7, #152]	@ 0x98
 8004bb0:	430b      	orrs	r3, r1
 8004bb2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004bb6:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	@ 0x98
 8004bba:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8004bbe:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8004bc2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8004bc6:	1dda      	adds	r2, r3, #7
 8004bc8:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004bcc:	4413      	add	r3, r2
 8004bce:	781b      	ldrb	r3, [r3, #0]
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004bd8:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004bdc:	f04f 0200 	mov.w	r2, #0
 8004be0:	f04f 0300 	mov.w	r3, #0
 8004be4:	f8d7 4090 	ldr.w	r4, [r7, #144]	@ 0x90
 8004be8:	0623      	lsls	r3, r4, #24
 8004bea:	2200      	movs	r2, #0
 8004bec:	ea40 0402 	orr.w	r4, r0, r2
 8004bf0:	f8c7 4088 	str.w	r4, [r7, #136]	@ 0x88
 8004bf4:	430b      	orrs	r3, r1
 8004bf6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004bfa:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	@ 0x88
 8004bfe:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      this->angular_velocity_covariance[i] = u_angular_velocity_covariancei.real;
 8004c02:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8004c06:	f8d7 2184 	ldr.w	r2, [r7, #388]	@ 0x184
 8004c0a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8004c0e:	3315      	adds	r3, #21
 8004c10:	00db      	lsls	r3, r3, #3
 8004c12:	4413      	add	r3, r2
 8004c14:	e9c3 0100 	strd	r0, r1, [r3]
      offset += sizeof(this->angular_velocity_covariance[i]);
 8004c18:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8004c1c:	3308      	adds	r3, #8
 8004c1e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
      for( uint32_t i = 0; i < 9; i++){
 8004c22:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8004c26:	3301      	adds	r3, #1
 8004c28:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8004c2c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8004c30:	2b08      	cmp	r3, #8
 8004c32:	f67f aec5 	bls.w	80049c0 <_ZN11sensor_msgs3Imu11deserializeEPh+0x2e0>
      }
      offset += this->linear_acceleration.deserialize(inbuffer + offset);
 8004c36:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8004c3a:	f103 00f0 	add.w	r0, r3, #240	@ 0xf0
 8004c3e:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8004c42:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004c46:	4413      	add	r3, r2
 8004c48:	4619      	mov	r1, r3
 8004c4a:	f7fe ffaf 	bl	8003bac <_ZN13geometry_msgs7Vector311deserializeEPh>
 8004c4e:	4602      	mov	r2, r0
 8004c50:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8004c54:	4413      	add	r3, r2
 8004c56:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
      for( uint32_t i = 0; i < 9; i++){
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8004c60:	e111      	b.n	8004e86 <_ZN11sensor_msgs3Imu11deserializeEPh+0x7a6>
      union {
        double real;
        uint64_t base;
      } u_linear_acceleration_covariancei;
      u_linear_acceleration_covariancei.base = 0;
 8004c62:	f04f 0200 	mov.w	r2, #0
 8004c66:	f04f 0300 	mov.w	r3, #0
 8004c6a:	e9c7 2362 	strd	r2, r3, [r7, #392]	@ 0x188
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8004c6e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8004c72:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8004c76:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004c7a:	4413      	add	r3, r2
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	2200      	movs	r2, #0
 8004c82:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004c86:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004c8a:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	@ 0x80
 8004c8e:	461a      	mov	r2, r3
 8004c90:	4302      	orrs	r2, r0
 8004c92:	67ba      	str	r2, [r7, #120]	@ 0x78
 8004c94:	4623      	mov	r3, r4
 8004c96:	430b      	orrs	r3, r1
 8004c98:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004c9a:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	@ 0x78
 8004c9e:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004ca2:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8004ca6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8004caa:	1c5a      	adds	r2, r3, #1
 8004cac:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004cb0:	4413      	add	r3, r2
 8004cb2:	781b      	ldrb	r3, [r3, #0]
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	673b      	str	r3, [r7, #112]	@ 0x70
 8004cba:	677a      	str	r2, [r7, #116]	@ 0x74
 8004cbc:	f04f 0200 	mov.w	r2, #0
 8004cc0:	f04f 0300 	mov.w	r3, #0
 8004cc4:	e9d7 561c 	ldrd	r5, r6, [r7, #112]	@ 0x70
 8004cc8:	4634      	mov	r4, r6
 8004cca:	0223      	lsls	r3, r4, #8
 8004ccc:	462c      	mov	r4, r5
 8004cce:	4635      	mov	r5, r6
 8004cd0:	4626      	mov	r6, r4
 8004cd2:	ea43 6316 	orr.w	r3, r3, r6, lsr #24
 8004cd6:	0222      	lsls	r2, r4, #8
 8004cd8:	ea40 0402 	orr.w	r4, r0, r2
 8004cdc:	66bc      	str	r4, [r7, #104]	@ 0x68
 8004cde:	430b      	orrs	r3, r1
 8004ce0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004ce2:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	@ 0x68
 8004ce6:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004cea:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8004cee:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8004cf2:	1c9a      	adds	r2, r3, #2
 8004cf4:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004cf8:	4413      	add	r3, r2
 8004cfa:	781b      	ldrb	r3, [r3, #0]
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	2200      	movs	r2, #0
 8004d00:	663b      	str	r3, [r7, #96]	@ 0x60
 8004d02:	667a      	str	r2, [r7, #100]	@ 0x64
 8004d04:	f04f 0200 	mov.w	r2, #0
 8004d08:	f04f 0300 	mov.w	r3, #0
 8004d0c:	e9d7 5618 	ldrd	r5, r6, [r7, #96]	@ 0x60
 8004d10:	4634      	mov	r4, r6
 8004d12:	0423      	lsls	r3, r4, #16
 8004d14:	462c      	mov	r4, r5
 8004d16:	4635      	mov	r5, r6
 8004d18:	4626      	mov	r6, r4
 8004d1a:	ea43 4316 	orr.w	r3, r3, r6, lsr #16
 8004d1e:	0422      	lsls	r2, r4, #16
 8004d20:	ea40 0402 	orr.w	r4, r0, r2
 8004d24:	65bc      	str	r4, [r7, #88]	@ 0x58
 8004d26:	430b      	orrs	r3, r1
 8004d28:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004d2a:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	@ 0x58
 8004d2e:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004d32:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8004d36:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8004d3a:	1cda      	adds	r2, r3, #3
 8004d3c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004d40:	4413      	add	r3, r2
 8004d42:	781b      	ldrb	r3, [r3, #0]
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	2200      	movs	r2, #0
 8004d48:	653b      	str	r3, [r7, #80]	@ 0x50
 8004d4a:	657a      	str	r2, [r7, #84]	@ 0x54
 8004d4c:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8004d50:	4623      	mov	r3, r4
 8004d52:	0a1b      	lsrs	r3, r3, #8
 8004d54:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d56:	4623      	mov	r3, r4
 8004d58:	061b      	lsls	r3, r3, #24
 8004d5a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d5c:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 8004d60:	461a      	mov	r2, r3
 8004d62:	4302      	orrs	r2, r0
 8004d64:	643a      	str	r2, [r7, #64]	@ 0x40
 8004d66:	4623      	mov	r3, r4
 8004d68:	430b      	orrs	r3, r1
 8004d6a:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d6c:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8004d70:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8004d74:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8004d78:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8004d7c:	1d1a      	adds	r2, r3, #4
 8004d7e:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004d82:	4413      	add	r3, r2
 8004d84:	781b      	ldrb	r3, [r3, #0]
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	2200      	movs	r2, #0
 8004d8a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004d8c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004d8e:	f04f 0200 	mov.w	r2, #0
 8004d92:	f04f 0300 	mov.w	r3, #0
 8004d96:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 8004d98:	0023      	movs	r3, r4
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	ea40 0402 	orr.w	r4, r0, r2
 8004da0:	633c      	str	r4, [r7, #48]	@ 0x30
 8004da2:	430b      	orrs	r3, r1
 8004da4:	637b      	str	r3, [r7, #52]	@ 0x34
 8004da6:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8004daa:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8004dae:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8004db2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8004db6:	1d5a      	adds	r2, r3, #5
 8004db8:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004dbc:	4413      	add	r3, r2
 8004dbe:	781b      	ldrb	r3, [r3, #0]
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004dc6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004dc8:	f04f 0200 	mov.w	r2, #0
 8004dcc:	f04f 0300 	mov.w	r3, #0
 8004dd0:	6abc      	ldr	r4, [r7, #40]	@ 0x28
 8004dd2:	0223      	lsls	r3, r4, #8
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	ea40 0402 	orr.w	r4, r0, r2
 8004dda:	623c      	str	r4, [r7, #32]
 8004ddc:	430b      	orrs	r3, r1
 8004dde:	627b      	str	r3, [r7, #36]	@ 0x24
 8004de0:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8004de4:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8004de8:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8004dec:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8004df0:	1d9a      	adds	r2, r3, #6
 8004df2:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004df6:	4413      	add	r3, r2
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	b2db      	uxtb	r3, r3
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	61bb      	str	r3, [r7, #24]
 8004e00:	61fa      	str	r2, [r7, #28]
 8004e02:	f04f 0200 	mov.w	r2, #0
 8004e06:	f04f 0300 	mov.w	r3, #0
 8004e0a:	69bc      	ldr	r4, [r7, #24]
 8004e0c:	0423      	lsls	r3, r4, #16
 8004e0e:	2200      	movs	r2, #0
 8004e10:	ea40 0402 	orr.w	r4, r0, r2
 8004e14:	613c      	str	r4, [r7, #16]
 8004e16:	430b      	orrs	r3, r1
 8004e18:	617b      	str	r3, [r7, #20]
 8004e1a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8004e1e:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8004e22:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8004e26:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8004e2a:	1dda      	adds	r2, r3, #7
 8004e2c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004e30:	4413      	add	r3, r2
 8004e32:	781b      	ldrb	r3, [r3, #0]
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	2200      	movs	r2, #0
 8004e38:	60bb      	str	r3, [r7, #8]
 8004e3a:	60fa      	str	r2, [r7, #12]
 8004e3c:	f04f 0200 	mov.w	r2, #0
 8004e40:	f04f 0300 	mov.w	r3, #0
 8004e44:	68bc      	ldr	r4, [r7, #8]
 8004e46:	0623      	lsls	r3, r4, #24
 8004e48:	2200      	movs	r2, #0
 8004e4a:	ea40 0402 	orr.w	r4, r0, r2
 8004e4e:	603c      	str	r4, [r7, #0]
 8004e50:	430b      	orrs	r3, r1
 8004e52:	607b      	str	r3, [r7, #4]
 8004e54:	e9d7 3400 	ldrd	r3, r4, [r7]
 8004e58:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      this->linear_acceleration_covariance[i] = u_linear_acceleration_covariancei.real;
 8004e5c:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8004e60:	f8d7 2184 	ldr.w	r2, [r7, #388]	@ 0x184
 8004e64:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8004e68:	3322      	adds	r3, #34	@ 0x22
 8004e6a:	00db      	lsls	r3, r3, #3
 8004e6c:	4413      	add	r3, r2
 8004e6e:	e9c3 0100 	strd	r0, r1, [r3]
      offset += sizeof(this->linear_acceleration_covariance[i]);
 8004e72:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8004e76:	3308      	adds	r3, #8
 8004e78:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
      for( uint32_t i = 0; i < 9; i++){
 8004e7c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8004e80:	3301      	adds	r3, #1
 8004e82:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8004e86:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8004e8a:	2b08      	cmp	r3, #8
 8004e8c:	f67f aee9 	bls.w	8004c62 <_ZN11sensor_msgs3Imu11deserializeEPh+0x582>
      }
     return offset;
 8004e90:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
    }
 8004e94:	4618      	mov	r0, r3
 8004e96:	f507 77da 	add.w	r7, r7, #436	@ 0x1b4
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004ea0 <_ZN11sensor_msgs3Imu7getTypeEv>:

    virtual const char * getType() override { return "sensor_msgs/Imu"; };
 8004ea0:	b480      	push	{r7}
 8004ea2:	b083      	sub	sp, #12
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	4b02      	ldr	r3, [pc, #8]	@ (8004eb4 <_ZN11sensor_msgs3Imu7getTypeEv+0x14>)
 8004eaa:	4618      	mov	r0, r3
 8004eac:	370c      	adds	r7, #12
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bc80      	pop	{r7}
 8004eb2:	4770      	bx	lr
 8004eb4:	0800d028 	.word	0x0800d028

08004eb8 <_ZN11sensor_msgs3Imu6getMD5Ev>:
    virtual const char * getMD5() override { return "6a62c6daae103f4ff57a132d6f95cec2"; };
 8004eb8:	b480      	push	{r7}
 8004eba:	b083      	sub	sp, #12
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	4b02      	ldr	r3, [pc, #8]	@ (8004ecc <_ZN11sensor_msgs3Imu6getMD5Ev+0x14>)
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	370c      	adds	r7, #12
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bc80      	pop	{r7}
 8004eca:	4770      	bx	lr
 8004ecc:	0800d038 	.word	0x0800d038

08004ed0 <_ZN11sensor_msgs10JointStateC1Ev>:
      uint32_t effort_length;
      typedef double _effort_type;
      _effort_type st_effort;
      _effort_type * effort;

    JointState():
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b082      	sub	sp, #8
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
      header(),
      name_length(0), st_name(), name(nullptr),
      position_length(0), st_position(), position(nullptr),
      velocity_length(0), st_velocity(), velocity(nullptr),
      effort_length(0), st_effort(), effort(nullptr)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	4618      	mov	r0, r3
 8004edc:	f7fc fc14 	bl	8001708 <_ZN3ros3MsgC1Ev>
 8004ee0:	4a1e      	ldr	r2, [pc, #120]	@ (8004f5c <_ZN11sensor_msgs10JointStateC1Ev+0x8c>)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	601a      	str	r2, [r3, #0]
      header(),
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	3304      	adds	r3, #4
 8004eea:	4618      	mov	r0, r3
 8004eec:	f7fd fc7a 	bl	80027e4 <_ZN8std_msgs6HeaderC1Ev>
      name_length(0), st_name(), name(nullptr),
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	619a      	str	r2, [r3, #24]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	61da      	str	r2, [r3, #28]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	621a      	str	r2, [r3, #32]
      position_length(0), st_position(), position(nullptr),
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	625a      	str	r2, [r3, #36]	@ 0x24
 8004f08:	6879      	ldr	r1, [r7, #4]
 8004f0a:	f04f 0200 	mov.w	r2, #0
 8004f0e:	f04f 0300 	mov.w	r3, #0
 8004f12:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	631a      	str	r2, [r3, #48]	@ 0x30
      velocity_length(0), st_velocity(), velocity(nullptr),
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	635a      	str	r2, [r3, #52]	@ 0x34
 8004f22:	6879      	ldr	r1, [r7, #4]
 8004f24:	f04f 0200 	mov.w	r2, #0
 8004f28:	f04f 0300 	mov.w	r3, #0
 8004f2c:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2200      	movs	r2, #0
 8004f34:	641a      	str	r2, [r3, #64]	@ 0x40
      effort_length(0), st_effort(), effort(nullptr)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	645a      	str	r2, [r3, #68]	@ 0x44
 8004f3c:	6879      	ldr	r1, [r7, #4]
 8004f3e:	f04f 0200 	mov.w	r2, #0
 8004f42:	f04f 0300 	mov.w	r3, #0
 8004f46:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	651a      	str	r2, [r3, #80]	@ 0x50
    {
    }
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	4618      	mov	r0, r3
 8004f54:	3708      	adds	r7, #8
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
 8004f5a:	bf00      	nop
 8004f5c:	0800d470 	.word	0x0800d470

08004f60 <_ZNK11sensor_msgs10JointState9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b08e      	sub	sp, #56	@ 0x38
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	637b      	str	r3, [r7, #52]	@ 0x34
      offset += this->header.serialize(outbuffer + offset);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	1d18      	adds	r0, r3, #4
 8004f72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f74:	683a      	ldr	r2, [r7, #0]
 8004f76:	4413      	add	r3, r2
 8004f78:	4619      	mov	r1, r3
 8004f7a:	f7fd fc53 	bl	8002824 <_ZNK8std_msgs6Header9serializeEPh>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f82:	4413      	add	r3, r2
 8004f84:	637b      	str	r3, [r7, #52]	@ 0x34
      *(outbuffer + offset + 0) = (this->name_length >> (8 * 0)) & 0xFF;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6999      	ldr	r1, [r3, #24]
 8004f8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f8c:	683a      	ldr	r2, [r7, #0]
 8004f8e:	4413      	add	r3, r2
 8004f90:	b2ca      	uxtb	r2, r1
 8004f92:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->name_length >> (8 * 1)) & 0xFF;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	699b      	ldr	r3, [r3, #24]
 8004f98:	0a19      	lsrs	r1, r3, #8
 8004f9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f9c:	3301      	adds	r3, #1
 8004f9e:	683a      	ldr	r2, [r7, #0]
 8004fa0:	4413      	add	r3, r2
 8004fa2:	b2ca      	uxtb	r2, r1
 8004fa4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->name_length >> (8 * 2)) & 0xFF;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	699b      	ldr	r3, [r3, #24]
 8004faa:	0c19      	lsrs	r1, r3, #16
 8004fac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fae:	3302      	adds	r3, #2
 8004fb0:	683a      	ldr	r2, [r7, #0]
 8004fb2:	4413      	add	r3, r2
 8004fb4:	b2ca      	uxtb	r2, r1
 8004fb6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->name_length >> (8 * 3)) & 0xFF;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	699b      	ldr	r3, [r3, #24]
 8004fbc:	0e19      	lsrs	r1, r3, #24
 8004fbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fc0:	3303      	adds	r3, #3
 8004fc2:	683a      	ldr	r2, [r7, #0]
 8004fc4:	4413      	add	r3, r2
 8004fc6:	b2ca      	uxtb	r2, r1
 8004fc8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->name_length);
 8004fca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fcc:	3304      	adds	r3, #4
 8004fce:	637b      	str	r3, [r7, #52]	@ 0x34
      for( uint32_t i = 0; i < name_length; i++){
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	633b      	str	r3, [r7, #48]	@ 0x30
 8004fd4:	e027      	b.n	8005026 <_ZNK11sensor_msgs10JointState9serializeEPh+0xc6>
      uint32_t length_namei = strlen(this->name[i]);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6a1a      	ldr	r2, [r3, #32]
 8004fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fdc:	009b      	lsls	r3, r3, #2
 8004fde:	4413      	add	r3, r2
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f7fb f8b4 	bl	8000150 <strlen>
 8004fe8:	6238      	str	r0, [r7, #32]
      varToArr(outbuffer + offset, length_namei);
 8004fea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fec:	683a      	ldr	r2, [r7, #0]
 8004fee:	4413      	add	r3, r2
 8004ff0:	6a39      	ldr	r1, [r7, #32]
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f002 ffe0 	bl	8007fb8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8004ff8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ffa:	3304      	adds	r3, #4
 8004ffc:	637b      	str	r3, [r7, #52]	@ 0x34
      memcpy(outbuffer + offset, this->name[i], length_namei);
 8004ffe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005000:	683a      	ldr	r2, [r7, #0]
 8005002:	18d0      	adds	r0, r2, r3
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6a1a      	ldr	r2, [r3, #32]
 8005008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	4413      	add	r3, r2
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	6a3a      	ldr	r2, [r7, #32]
 8005012:	4619      	mov	r1, r3
 8005014:	f007 fec2 	bl	800cd9c <memcpy>
      offset += length_namei;
 8005018:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800501a:	6a3b      	ldr	r3, [r7, #32]
 800501c:	4413      	add	r3, r2
 800501e:	637b      	str	r3, [r7, #52]	@ 0x34
      for( uint32_t i = 0; i < name_length; i++){
 8005020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005022:	3301      	adds	r3, #1
 8005024:	633b      	str	r3, [r7, #48]	@ 0x30
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	699b      	ldr	r3, [r3, #24]
 800502a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800502c:	429a      	cmp	r2, r3
 800502e:	d3d2      	bcc.n	8004fd6 <_ZNK11sensor_msgs10JointState9serializeEPh+0x76>
      }
      *(outbuffer + offset + 0) = (this->position_length >> (8 * 0)) & 0xFF;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005034:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005036:	683a      	ldr	r2, [r7, #0]
 8005038:	4413      	add	r3, r2
 800503a:	b2ca      	uxtb	r2, r1
 800503c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->position_length >> (8 * 1)) & 0xFF;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005042:	0a19      	lsrs	r1, r3, #8
 8005044:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005046:	3301      	adds	r3, #1
 8005048:	683a      	ldr	r2, [r7, #0]
 800504a:	4413      	add	r3, r2
 800504c:	b2ca      	uxtb	r2, r1
 800504e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->position_length >> (8 * 2)) & 0xFF;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005054:	0c19      	lsrs	r1, r3, #16
 8005056:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005058:	3302      	adds	r3, #2
 800505a:	683a      	ldr	r2, [r7, #0]
 800505c:	4413      	add	r3, r2
 800505e:	b2ca      	uxtb	r2, r1
 8005060:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->position_length >> (8 * 3)) & 0xFF;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005066:	0e19      	lsrs	r1, r3, #24
 8005068:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800506a:	3303      	adds	r3, #3
 800506c:	683a      	ldr	r2, [r7, #0]
 800506e:	4413      	add	r3, r2
 8005070:	b2ca      	uxtb	r2, r1
 8005072:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->position_length);
 8005074:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005076:	3304      	adds	r3, #4
 8005078:	637b      	str	r3, [r7, #52]	@ 0x34
      for( uint32_t i = 0; i < position_length; i++){
 800507a:	2300      	movs	r3, #0
 800507c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800507e:	e07d      	b.n	800517c <_ZNK11sensor_msgs10JointState9serializeEPh+0x21c>
      union {
        double real;
        uint64_t base;
      } u_positioni;
      u_positioni.real = this->position[i];
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005084:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005086:	00db      	lsls	r3, r3, #3
 8005088:	4413      	add	r3, r2
 800508a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800508e:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_positioni.base >> (8 * 0)) & 0xFF;
 8005092:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005096:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005098:	6838      	ldr	r0, [r7, #0]
 800509a:	4401      	add	r1, r0
 800509c:	b2d3      	uxtb	r3, r2
 800509e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_positioni.base >> (8 * 1)) & 0xFF;
 80050a0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80050a4:	f04f 0200 	mov.w	r2, #0
 80050a8:	f04f 0300 	mov.w	r3, #0
 80050ac:	0a02      	lsrs	r2, r0, #8
 80050ae:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80050b2:	0a0b      	lsrs	r3, r1, #8
 80050b4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80050b6:	3101      	adds	r1, #1
 80050b8:	6838      	ldr	r0, [r7, #0]
 80050ba:	4401      	add	r1, r0
 80050bc:	b2d3      	uxtb	r3, r2
 80050be:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_positioni.base >> (8 * 2)) & 0xFF;
 80050c0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80050c4:	f04f 0200 	mov.w	r2, #0
 80050c8:	f04f 0300 	mov.w	r3, #0
 80050cc:	0c02      	lsrs	r2, r0, #16
 80050ce:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80050d2:	0c0b      	lsrs	r3, r1, #16
 80050d4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80050d6:	3102      	adds	r1, #2
 80050d8:	6838      	ldr	r0, [r7, #0]
 80050da:	4401      	add	r1, r0
 80050dc:	b2d3      	uxtb	r3, r2
 80050de:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_positioni.base >> (8 * 3)) & 0xFF;
 80050e0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80050e4:	f04f 0200 	mov.w	r2, #0
 80050e8:	f04f 0300 	mov.w	r3, #0
 80050ec:	0e02      	lsrs	r2, r0, #24
 80050ee:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80050f2:	0e0b      	lsrs	r3, r1, #24
 80050f4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80050f6:	3103      	adds	r1, #3
 80050f8:	6838      	ldr	r0, [r7, #0]
 80050fa:	4401      	add	r1, r0
 80050fc:	b2d3      	uxtb	r3, r2
 80050fe:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_positioni.base >> (8 * 4)) & 0xFF;
 8005100:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005104:	f04f 0200 	mov.w	r2, #0
 8005108:	f04f 0300 	mov.w	r3, #0
 800510c:	000a      	movs	r2, r1
 800510e:	2300      	movs	r3, #0
 8005110:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005112:	3104      	adds	r1, #4
 8005114:	6838      	ldr	r0, [r7, #0]
 8005116:	4401      	add	r1, r0
 8005118:	b2d3      	uxtb	r3, r2
 800511a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_positioni.base >> (8 * 5)) & 0xFF;
 800511c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005120:	f04f 0200 	mov.w	r2, #0
 8005124:	f04f 0300 	mov.w	r3, #0
 8005128:	0a0a      	lsrs	r2, r1, #8
 800512a:	2300      	movs	r3, #0
 800512c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800512e:	3105      	adds	r1, #5
 8005130:	6838      	ldr	r0, [r7, #0]
 8005132:	4401      	add	r1, r0
 8005134:	b2d3      	uxtb	r3, r2
 8005136:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_positioni.base >> (8 * 6)) & 0xFF;
 8005138:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800513c:	f04f 0200 	mov.w	r2, #0
 8005140:	f04f 0300 	mov.w	r3, #0
 8005144:	0c0a      	lsrs	r2, r1, #16
 8005146:	2300      	movs	r3, #0
 8005148:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800514a:	3106      	adds	r1, #6
 800514c:	6838      	ldr	r0, [r7, #0]
 800514e:	4401      	add	r1, r0
 8005150:	b2d3      	uxtb	r3, r2
 8005152:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_positioni.base >> (8 * 7)) & 0xFF;
 8005154:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005158:	f04f 0200 	mov.w	r2, #0
 800515c:	f04f 0300 	mov.w	r3, #0
 8005160:	0e0a      	lsrs	r2, r1, #24
 8005162:	2300      	movs	r3, #0
 8005164:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005166:	3107      	adds	r1, #7
 8005168:	6838      	ldr	r0, [r7, #0]
 800516a:	4401      	add	r1, r0
 800516c:	b2d3      	uxtb	r3, r2
 800516e:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->position[i]);
 8005170:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005172:	3308      	adds	r3, #8
 8005174:	637b      	str	r3, [r7, #52]	@ 0x34
      for( uint32_t i = 0; i < position_length; i++){
 8005176:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005178:	3301      	adds	r3, #1
 800517a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005180:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005182:	429a      	cmp	r2, r3
 8005184:	f4ff af7c 	bcc.w	8005080 <_ZNK11sensor_msgs10JointState9serializeEPh+0x120>
      }
      *(outbuffer + offset + 0) = (this->velocity_length >> (8 * 0)) & 0xFF;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800518c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800518e:	683a      	ldr	r2, [r7, #0]
 8005190:	4413      	add	r3, r2
 8005192:	b2ca      	uxtb	r2, r1
 8005194:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->velocity_length >> (8 * 1)) & 0xFF;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800519a:	0a19      	lsrs	r1, r3, #8
 800519c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800519e:	3301      	adds	r3, #1
 80051a0:	683a      	ldr	r2, [r7, #0]
 80051a2:	4413      	add	r3, r2
 80051a4:	b2ca      	uxtb	r2, r1
 80051a6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->velocity_length >> (8 * 2)) & 0xFF;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051ac:	0c19      	lsrs	r1, r3, #16
 80051ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051b0:	3302      	adds	r3, #2
 80051b2:	683a      	ldr	r2, [r7, #0]
 80051b4:	4413      	add	r3, r2
 80051b6:	b2ca      	uxtb	r2, r1
 80051b8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->velocity_length >> (8 * 3)) & 0xFF;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051be:	0e19      	lsrs	r1, r3, #24
 80051c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051c2:	3303      	adds	r3, #3
 80051c4:	683a      	ldr	r2, [r7, #0]
 80051c6:	4413      	add	r3, r2
 80051c8:	b2ca      	uxtb	r2, r1
 80051ca:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->velocity_length);
 80051cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051ce:	3304      	adds	r3, #4
 80051d0:	637b      	str	r3, [r7, #52]	@ 0x34
      for( uint32_t i = 0; i < velocity_length; i++){
 80051d2:	2300      	movs	r3, #0
 80051d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80051d6:	e07d      	b.n	80052d4 <_ZNK11sensor_msgs10JointState9serializeEPh+0x374>
      union {
        double real;
        uint64_t base;
      } u_velocityi;
      u_velocityi.real = this->velocity[i];
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80051dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051de:	00db      	lsls	r3, r3, #3
 80051e0:	4413      	add	r3, r2
 80051e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051e6:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_velocityi.base >> (8 * 0)) & 0xFF;
 80051ea:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80051ee:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80051f0:	6838      	ldr	r0, [r7, #0]
 80051f2:	4401      	add	r1, r0
 80051f4:	b2d3      	uxtb	r3, r2
 80051f6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_velocityi.base >> (8 * 1)) & 0xFF;
 80051f8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80051fc:	f04f 0200 	mov.w	r2, #0
 8005200:	f04f 0300 	mov.w	r3, #0
 8005204:	0a02      	lsrs	r2, r0, #8
 8005206:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800520a:	0a0b      	lsrs	r3, r1, #8
 800520c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800520e:	3101      	adds	r1, #1
 8005210:	6838      	ldr	r0, [r7, #0]
 8005212:	4401      	add	r1, r0
 8005214:	b2d3      	uxtb	r3, r2
 8005216:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_velocityi.base >> (8 * 2)) & 0xFF;
 8005218:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800521c:	f04f 0200 	mov.w	r2, #0
 8005220:	f04f 0300 	mov.w	r3, #0
 8005224:	0c02      	lsrs	r2, r0, #16
 8005226:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800522a:	0c0b      	lsrs	r3, r1, #16
 800522c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800522e:	3102      	adds	r1, #2
 8005230:	6838      	ldr	r0, [r7, #0]
 8005232:	4401      	add	r1, r0
 8005234:	b2d3      	uxtb	r3, r2
 8005236:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_velocityi.base >> (8 * 3)) & 0xFF;
 8005238:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800523c:	f04f 0200 	mov.w	r2, #0
 8005240:	f04f 0300 	mov.w	r3, #0
 8005244:	0e02      	lsrs	r2, r0, #24
 8005246:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800524a:	0e0b      	lsrs	r3, r1, #24
 800524c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800524e:	3103      	adds	r1, #3
 8005250:	6838      	ldr	r0, [r7, #0]
 8005252:	4401      	add	r1, r0
 8005254:	b2d3      	uxtb	r3, r2
 8005256:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_velocityi.base >> (8 * 4)) & 0xFF;
 8005258:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800525c:	f04f 0200 	mov.w	r2, #0
 8005260:	f04f 0300 	mov.w	r3, #0
 8005264:	000a      	movs	r2, r1
 8005266:	2300      	movs	r3, #0
 8005268:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800526a:	3104      	adds	r1, #4
 800526c:	6838      	ldr	r0, [r7, #0]
 800526e:	4401      	add	r1, r0
 8005270:	b2d3      	uxtb	r3, r2
 8005272:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_velocityi.base >> (8 * 5)) & 0xFF;
 8005274:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005278:	f04f 0200 	mov.w	r2, #0
 800527c:	f04f 0300 	mov.w	r3, #0
 8005280:	0a0a      	lsrs	r2, r1, #8
 8005282:	2300      	movs	r3, #0
 8005284:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005286:	3105      	adds	r1, #5
 8005288:	6838      	ldr	r0, [r7, #0]
 800528a:	4401      	add	r1, r0
 800528c:	b2d3      	uxtb	r3, r2
 800528e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_velocityi.base >> (8 * 6)) & 0xFF;
 8005290:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005294:	f04f 0200 	mov.w	r2, #0
 8005298:	f04f 0300 	mov.w	r3, #0
 800529c:	0c0a      	lsrs	r2, r1, #16
 800529e:	2300      	movs	r3, #0
 80052a0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80052a2:	3106      	adds	r1, #6
 80052a4:	6838      	ldr	r0, [r7, #0]
 80052a6:	4401      	add	r1, r0
 80052a8:	b2d3      	uxtb	r3, r2
 80052aa:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_velocityi.base >> (8 * 7)) & 0xFF;
 80052ac:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80052b0:	f04f 0200 	mov.w	r2, #0
 80052b4:	f04f 0300 	mov.w	r3, #0
 80052b8:	0e0a      	lsrs	r2, r1, #24
 80052ba:	2300      	movs	r3, #0
 80052bc:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80052be:	3107      	adds	r1, #7
 80052c0:	6838      	ldr	r0, [r7, #0]
 80052c2:	4401      	add	r1, r0
 80052c4:	b2d3      	uxtb	r3, r2
 80052c6:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->velocity[i]);
 80052c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052ca:	3308      	adds	r3, #8
 80052cc:	637b      	str	r3, [r7, #52]	@ 0x34
      for( uint32_t i = 0; i < velocity_length; i++){
 80052ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052d0:	3301      	adds	r3, #1
 80052d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80052da:	429a      	cmp	r2, r3
 80052dc:	f4ff af7c 	bcc.w	80051d8 <_ZNK11sensor_msgs10JointState9serializeEPh+0x278>
      }
      *(outbuffer + offset + 0) = (this->effort_length >> (8 * 0)) & 0xFF;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80052e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052e6:	683a      	ldr	r2, [r7, #0]
 80052e8:	4413      	add	r3, r2
 80052ea:	b2ca      	uxtb	r2, r1
 80052ec:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->effort_length >> (8 * 1)) & 0xFF;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052f2:	0a19      	lsrs	r1, r3, #8
 80052f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052f6:	3301      	adds	r3, #1
 80052f8:	683a      	ldr	r2, [r7, #0]
 80052fa:	4413      	add	r3, r2
 80052fc:	b2ca      	uxtb	r2, r1
 80052fe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->effort_length >> (8 * 2)) & 0xFF;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005304:	0c19      	lsrs	r1, r3, #16
 8005306:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005308:	3302      	adds	r3, #2
 800530a:	683a      	ldr	r2, [r7, #0]
 800530c:	4413      	add	r3, r2
 800530e:	b2ca      	uxtb	r2, r1
 8005310:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->effort_length >> (8 * 3)) & 0xFF;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005316:	0e19      	lsrs	r1, r3, #24
 8005318:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800531a:	3303      	adds	r3, #3
 800531c:	683a      	ldr	r2, [r7, #0]
 800531e:	4413      	add	r3, r2
 8005320:	b2ca      	uxtb	r2, r1
 8005322:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->effort_length);
 8005324:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005326:	3304      	adds	r3, #4
 8005328:	637b      	str	r3, [r7, #52]	@ 0x34
      for( uint32_t i = 0; i < effort_length; i++){
 800532a:	2300      	movs	r3, #0
 800532c:	627b      	str	r3, [r7, #36]	@ 0x24
 800532e:	e07d      	b.n	800542c <_ZNK11sensor_msgs10JointState9serializeEPh+0x4cc>
      union {
        double real;
        uint64_t base;
      } u_efforti;
      u_efforti.real = this->effort[i];
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005336:	00db      	lsls	r3, r3, #3
 8005338:	4413      	add	r3, r2
 800533a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800533e:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_efforti.base >> (8 * 0)) & 0xFF;
 8005342:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005346:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005348:	6838      	ldr	r0, [r7, #0]
 800534a:	4401      	add	r1, r0
 800534c:	b2d3      	uxtb	r3, r2
 800534e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_efforti.base >> (8 * 1)) & 0xFF;
 8005350:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005354:	f04f 0200 	mov.w	r2, #0
 8005358:	f04f 0300 	mov.w	r3, #0
 800535c:	0a02      	lsrs	r2, r0, #8
 800535e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8005362:	0a0b      	lsrs	r3, r1, #8
 8005364:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005366:	3101      	adds	r1, #1
 8005368:	6838      	ldr	r0, [r7, #0]
 800536a:	4401      	add	r1, r0
 800536c:	b2d3      	uxtb	r3, r2
 800536e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_efforti.base >> (8 * 2)) & 0xFF;
 8005370:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005374:	f04f 0200 	mov.w	r2, #0
 8005378:	f04f 0300 	mov.w	r3, #0
 800537c:	0c02      	lsrs	r2, r0, #16
 800537e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8005382:	0c0b      	lsrs	r3, r1, #16
 8005384:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005386:	3102      	adds	r1, #2
 8005388:	6838      	ldr	r0, [r7, #0]
 800538a:	4401      	add	r1, r0
 800538c:	b2d3      	uxtb	r3, r2
 800538e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_efforti.base >> (8 * 3)) & 0xFF;
 8005390:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005394:	f04f 0200 	mov.w	r2, #0
 8005398:	f04f 0300 	mov.w	r3, #0
 800539c:	0e02      	lsrs	r2, r0, #24
 800539e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80053a2:	0e0b      	lsrs	r3, r1, #24
 80053a4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80053a6:	3103      	adds	r1, #3
 80053a8:	6838      	ldr	r0, [r7, #0]
 80053aa:	4401      	add	r1, r0
 80053ac:	b2d3      	uxtb	r3, r2
 80053ae:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_efforti.base >> (8 * 4)) & 0xFF;
 80053b0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80053b4:	f04f 0200 	mov.w	r2, #0
 80053b8:	f04f 0300 	mov.w	r3, #0
 80053bc:	000a      	movs	r2, r1
 80053be:	2300      	movs	r3, #0
 80053c0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80053c2:	3104      	adds	r1, #4
 80053c4:	6838      	ldr	r0, [r7, #0]
 80053c6:	4401      	add	r1, r0
 80053c8:	b2d3      	uxtb	r3, r2
 80053ca:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_efforti.base >> (8 * 5)) & 0xFF;
 80053cc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80053d0:	f04f 0200 	mov.w	r2, #0
 80053d4:	f04f 0300 	mov.w	r3, #0
 80053d8:	0a0a      	lsrs	r2, r1, #8
 80053da:	2300      	movs	r3, #0
 80053dc:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80053de:	3105      	adds	r1, #5
 80053e0:	6838      	ldr	r0, [r7, #0]
 80053e2:	4401      	add	r1, r0
 80053e4:	b2d3      	uxtb	r3, r2
 80053e6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_efforti.base >> (8 * 6)) & 0xFF;
 80053e8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80053ec:	f04f 0200 	mov.w	r2, #0
 80053f0:	f04f 0300 	mov.w	r3, #0
 80053f4:	0c0a      	lsrs	r2, r1, #16
 80053f6:	2300      	movs	r3, #0
 80053f8:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80053fa:	3106      	adds	r1, #6
 80053fc:	6838      	ldr	r0, [r7, #0]
 80053fe:	4401      	add	r1, r0
 8005400:	b2d3      	uxtb	r3, r2
 8005402:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_efforti.base >> (8 * 7)) & 0xFF;
 8005404:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005408:	f04f 0200 	mov.w	r2, #0
 800540c:	f04f 0300 	mov.w	r3, #0
 8005410:	0e0a      	lsrs	r2, r1, #24
 8005412:	2300      	movs	r3, #0
 8005414:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005416:	3107      	adds	r1, #7
 8005418:	6838      	ldr	r0, [r7, #0]
 800541a:	4401      	add	r1, r0
 800541c:	b2d3      	uxtb	r3, r2
 800541e:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->effort[i]);
 8005420:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005422:	3308      	adds	r3, #8
 8005424:	637b      	str	r3, [r7, #52]	@ 0x34
      for( uint32_t i = 0; i < effort_length; i++){
 8005426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005428:	3301      	adds	r3, #1
 800542a:	627b      	str	r3, [r7, #36]	@ 0x24
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005430:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005432:	429a      	cmp	r2, r3
 8005434:	f4ff af7c 	bcc.w	8005330 <_ZNK11sensor_msgs10JointState9serializeEPh+0x3d0>
      }
      return offset;
 8005438:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 800543a:	4618      	mov	r0, r3
 800543c:	3738      	adds	r7, #56	@ 0x38
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}

08005442 <_ZN11sensor_msgs10JointState11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8005442:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005446:	b0f5      	sub	sp, #468	@ 0x1d4
 8005448:	af00      	add	r7, sp, #0
 800544a:	f8c7 0184 	str.w	r0, [r7, #388]	@ 0x184
 800544e:	f8c7 1180 	str.w	r1, [r7, #384]	@ 0x180
    {
      int offset = 0;
 8005452:	2300      	movs	r3, #0
 8005454:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
      offset += this->header.deserialize(inbuffer + offset);
 8005458:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800545c:	1d18      	adds	r0, r3, #4
 800545e:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 8005462:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005466:	4413      	add	r3, r2
 8005468:	4619      	mov	r1, r3
 800546a:	f7fd fa73 	bl	8002954 <_ZN8std_msgs6Header11deserializeEPh>
 800546e:	4602      	mov	r2, r0
 8005470:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8005474:	4413      	add	r3, r2
 8005476:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
      uint32_t name_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800547a:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 800547e:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005482:	4413      	add	r3, r2
 8005484:	781b      	ldrb	r3, [r3, #0]
 8005486:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
      name_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800548a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 800548e:	1c5a      	adds	r2, r3, #1
 8005490:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005494:	4413      	add	r3, r2
 8005496:	781b      	ldrb	r3, [r3, #0]
 8005498:	021a      	lsls	r2, r3, #8
 800549a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 800549e:	4313      	orrs	r3, r2
 80054a0:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
      name_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80054a4:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80054a8:	1c9a      	adds	r2, r3, #2
 80054aa:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80054ae:	4413      	add	r3, r2
 80054b0:	781b      	ldrb	r3, [r3, #0]
 80054b2:	041a      	lsls	r2, r3, #16
 80054b4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80054b8:	4313      	orrs	r3, r2
 80054ba:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
      name_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80054be:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80054c2:	1cda      	adds	r2, r3, #3
 80054c4:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80054c8:	4413      	add	r3, r2
 80054ca:	781b      	ldrb	r3, [r3, #0]
 80054cc:	061a      	lsls	r2, r3, #24
 80054ce:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80054d2:	4313      	orrs	r3, r2
 80054d4:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
      offset += sizeof(this->name_length);
 80054d8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80054dc:	3304      	adds	r3, #4
 80054de:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
      if(name_lengthT > name_length)
 80054e2:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80054e6:	699a      	ldr	r2, [r3, #24]
 80054e8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d90d      	bls.n	800550c <_ZN11sensor_msgs10JointState11deserializeEPh+0xca>
        this->name = (char**)realloc(this->name, name_lengthT * sizeof(char*));
 80054f0:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80054f4:	6a1a      	ldr	r2, [r3, #32]
 80054f6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80054fa:	009b      	lsls	r3, r3, #2
 80054fc:	4619      	mov	r1, r3
 80054fe:	4610      	mov	r0, r2
 8005500:	f007 fbd2 	bl	800cca8 <realloc>
 8005504:	4602      	mov	r2, r0
 8005506:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800550a:	621a      	str	r2, [r3, #32]
      name_length = name_lengthT;
 800550c:	f8d7 2184 	ldr.w	r2, [r7, #388]	@ 0x184
 8005510:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8005514:	6193      	str	r3, [r2, #24]
      for( uint32_t i = 0; i < name_length; i++){
 8005516:	2300      	movs	r3, #0
 8005518:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 800551c:	e05b      	b.n	80055d6 <_ZN11sensor_msgs10JointState11deserializeEPh+0x194>
      uint32_t length_st_name;
      arrToVar(length_st_name, (inbuffer + offset));
 800551e:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 8005522:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005526:	441a      	add	r2, r3
 8005528:	f507 73d2 	add.w	r3, r7, #420	@ 0x1a4
 800552c:	4611      	mov	r1, r2
 800552e:	4618      	mov	r0, r3
 8005530:	f002 fd60 	bl	8007ff4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8005534:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8005538:	3304      	adds	r3, #4
 800553a:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
      for(unsigned int k= offset; k< offset+length_st_name; ++k){
 800553e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8005542:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8005546:	e011      	b.n	800556c <_ZN11sensor_msgs10JointState11deserializeEPh+0x12a>
          inbuffer[k-1]=inbuffer[k];
 8005548:	f8d7 2180 	ldr.w	r2, [r7, #384]	@ 0x180
 800554c:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8005550:	18d1      	adds	r1, r2, r3
 8005552:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8005556:	1e5a      	subs	r2, r3, #1
 8005558:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800555c:	441a      	add	r2, r3
 800555e:	780b      	ldrb	r3, [r1, #0]
 8005560:	7013      	strb	r3, [r2, #0]
      for(unsigned int k= offset; k< offset+length_st_name; ++k){
 8005562:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8005566:	3301      	adds	r3, #1
 8005568:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 800556c:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 8005570:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8005574:	441a      	add	r2, r3
 8005576:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 800557a:	4293      	cmp	r3, r2
 800557c:	d3e4      	bcc.n	8005548 <_ZN11sensor_msgs10JointState11deserializeEPh+0x106>
      }
      inbuffer[offset+length_st_name-1]=0;
 800557e:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 8005582:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8005586:	4413      	add	r3, r2
 8005588:	1e5a      	subs	r2, r3, #1
 800558a:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800558e:	441a      	add	r2, r3
 8005590:	2300      	movs	r3, #0
 8005592:	7013      	strb	r3, [r2, #0]
      this->st_name = (char *)(inbuffer + offset-1);
 8005594:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8005598:	1e5a      	subs	r2, r3, #1
 800559a:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800559e:	441a      	add	r2, r3
 80055a0:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80055a4:	61da      	str	r2, [r3, #28]
      offset += length_st_name;
 80055a6:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 80055aa:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80055ae:	4413      	add	r3, r2
 80055b0:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
        memcpy( &(this->name[i]), &(this->st_name), sizeof(char*));
 80055b4:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80055b8:	6a1a      	ldr	r2, [r3, #32]
 80055ba:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80055be:	009b      	lsls	r3, r3, #2
 80055c0:	441a      	add	r2, r3
 80055c2:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80055c6:	331c      	adds	r3, #28
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	6013      	str	r3, [r2, #0]
      for( uint32_t i = 0; i < name_length; i++){
 80055cc:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80055d0:	3301      	adds	r3, #1
 80055d2:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 80055d6:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80055da:	699a      	ldr	r2, [r3, #24]
 80055dc:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d39c      	bcc.n	800551e <_ZN11sensor_msgs10JointState11deserializeEPh+0xdc>
      }
      uint32_t position_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80055e4:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 80055e8:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80055ec:	4413      	add	r3, r2
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
      position_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80055f4:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80055f8:	1c5a      	adds	r2, r3, #1
 80055fa:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80055fe:	4413      	add	r3, r2
 8005600:	781b      	ldrb	r3, [r3, #0]
 8005602:	021a      	lsls	r2, r3, #8
 8005604:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8005608:	4313      	orrs	r3, r2
 800560a:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
      position_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800560e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8005612:	1c9a      	adds	r2, r3, #2
 8005614:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005618:	4413      	add	r3, r2
 800561a:	781b      	ldrb	r3, [r3, #0]
 800561c:	041a      	lsls	r2, r3, #16
 800561e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8005622:	4313      	orrs	r3, r2
 8005624:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
      position_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8005628:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 800562c:	1cda      	adds	r2, r3, #3
 800562e:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005632:	4413      	add	r3, r2
 8005634:	781b      	ldrb	r3, [r3, #0]
 8005636:	061a      	lsls	r2, r3, #24
 8005638:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800563c:	4313      	orrs	r3, r2
 800563e:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
      offset += sizeof(this->position_length);
 8005642:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8005646:	3304      	adds	r3, #4
 8005648:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
      if(position_lengthT > position_length)
 800564c:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8005650:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005652:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8005656:	4293      	cmp	r3, r2
 8005658:	d90d      	bls.n	8005676 <_ZN11sensor_msgs10JointState11deserializeEPh+0x234>
        this->position = (double*)realloc(this->position, position_lengthT * sizeof(double));
 800565a:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800565e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005660:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8005664:	00db      	lsls	r3, r3, #3
 8005666:	4619      	mov	r1, r3
 8005668:	4610      	mov	r0, r2
 800566a:	f007 fb1d 	bl	800cca8 <realloc>
 800566e:	4602      	mov	r2, r0
 8005670:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8005674:	631a      	str	r2, [r3, #48]	@ 0x30
      position_length = position_lengthT;
 8005676:	f8d7 2184 	ldr.w	r2, [r7, #388]	@ 0x184
 800567a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800567e:	6253      	str	r3, [r2, #36]	@ 0x24
      for( uint32_t i = 0; i < position_length; i++){
 8005680:	2300      	movs	r3, #0
 8005682:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8005686:	e12b      	b.n	80058e0 <_ZN11sensor_msgs10JointState11deserializeEPh+0x49e>
      union {
        double real;
        uint64_t base;
      } u_st_position;
      u_st_position.base = 0;
 8005688:	f04f 0200 	mov.w	r2, #0
 800568c:	f04f 0300 	mov.w	r3, #0
 8005690:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      u_st_position.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8005694:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8005698:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 800569c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80056a0:	4413      	add	r3, r2
 80056a2:	781b      	ldrb	r3, [r3, #0]
 80056a4:	b2db      	uxtb	r3, r3
 80056a6:	2200      	movs	r2, #0
 80056a8:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 80056ac:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
 80056b0:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	@ 0x170
 80056b4:	4616      	mov	r6, r2
 80056b6:	4306      	orrs	r6, r0
 80056b8:	f8c7 6168 	str.w	r6, [r7, #360]	@ 0x168
 80056bc:	430b      	orrs	r3, r1
 80056be:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 80056c2:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	@ 0x168
 80056c6:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      u_st_position.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80056ca:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 80056ce:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80056d2:	1c5a      	adds	r2, r3, #1
 80056d4:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80056d8:	4413      	add	r3, r2
 80056da:	781b      	ldrb	r3, [r3, #0]
 80056dc:	b2db      	uxtb	r3, r3
 80056de:	2200      	movs	r2, #0
 80056e0:	469a      	mov	sl, r3
 80056e2:	4693      	mov	fp, r2
 80056e4:	f04f 0200 	mov.w	r2, #0
 80056e8:	f04f 0300 	mov.w	r3, #0
 80056ec:	ea4f 230b 	mov.w	r3, fp, lsl #8
 80056f0:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 80056f4:	ea4f 220a 	mov.w	r2, sl, lsl #8
 80056f8:	ea40 0602 	orr.w	r6, r0, r2
 80056fc:	f8c7 6160 	str.w	r6, [r7, #352]	@ 0x160
 8005700:	430b      	orrs	r3, r1
 8005702:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8005706:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	@ 0x160
 800570a:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      u_st_position.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800570e:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8005712:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8005716:	1c9a      	adds	r2, r3, #2
 8005718:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800571c:	4413      	add	r3, r2
 800571e:	781b      	ldrb	r3, [r3, #0]
 8005720:	b2db      	uxtb	r3, r3
 8005722:	2200      	movs	r2, #0
 8005724:	4698      	mov	r8, r3
 8005726:	4691      	mov	r9, r2
 8005728:	f04f 0200 	mov.w	r2, #0
 800572c:	f04f 0300 	mov.w	r3, #0
 8005730:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8005734:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8005738:	ea4f 4208 	mov.w	r2, r8, lsl #16
 800573c:	ea40 0602 	orr.w	r6, r0, r2
 8005740:	f8c7 6158 	str.w	r6, [r7, #344]	@ 0x158
 8005744:	430b      	orrs	r3, r1
 8005746:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 800574a:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	@ 0x158
 800574e:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      u_st_position.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8005752:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8005756:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 800575a:	1cda      	adds	r2, r3, #3
 800575c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005760:	4413      	add	r3, r2
 8005762:	781b      	ldrb	r3, [r3, #0]
 8005764:	b2db      	uxtb	r3, r3
 8005766:	2200      	movs	r2, #0
 8005768:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 800576c:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8005770:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8005774:	0a1d      	lsrs	r5, r3, #8
 8005776:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 800577a:	061c      	lsls	r4, r3, #24
 800577c:	ea40 0304 	orr.w	r3, r0, r4
 8005780:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8005784:	ea41 0305 	orr.w	r3, r1, r5
 8005788:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800578c:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 8005790:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      u_st_position.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8005794:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8005798:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 800579c:	1d1a      	adds	r2, r3, #4
 800579e:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80057a2:	4413      	add	r3, r2
 80057a4:	781b      	ldrb	r3, [r3, #0]
 80057a6:	b2db      	uxtb	r3, r3
 80057a8:	2200      	movs	r2, #0
 80057aa:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 80057ae:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 80057b2:	f04f 0200 	mov.w	r2, #0
 80057b6:	f04f 0300 	mov.w	r3, #0
 80057ba:	f8d7 6148 	ldr.w	r6, [r7, #328]	@ 0x148
 80057be:	0033      	movs	r3, r6
 80057c0:	2200      	movs	r2, #0
 80057c2:	ea40 0602 	orr.w	r6, r0, r2
 80057c6:	f8c7 6140 	str.w	r6, [r7, #320]	@ 0x140
 80057ca:	430b      	orrs	r3, r1
 80057cc:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 80057d0:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 80057d4:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      u_st_position.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80057d8:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 80057dc:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80057e0:	1d5a      	adds	r2, r3, #5
 80057e2:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80057e6:	4413      	add	r3, r2
 80057e8:	781b      	ldrb	r3, [r3, #0]
 80057ea:	b2db      	uxtb	r3, r3
 80057ec:	2200      	movs	r2, #0
 80057ee:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 80057f2:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 80057f6:	f04f 0200 	mov.w	r2, #0
 80057fa:	f04f 0300 	mov.w	r3, #0
 80057fe:	f8d7 6138 	ldr.w	r6, [r7, #312]	@ 0x138
 8005802:	0233      	lsls	r3, r6, #8
 8005804:	2200      	movs	r2, #0
 8005806:	ea40 0602 	orr.w	r6, r0, r2
 800580a:	f8c7 6130 	str.w	r6, [r7, #304]	@ 0x130
 800580e:	430b      	orrs	r3, r1
 8005810:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8005814:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 8005818:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      u_st_position.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800581c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8005820:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8005824:	1d9a      	adds	r2, r3, #6
 8005826:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800582a:	4413      	add	r3, r2
 800582c:	781b      	ldrb	r3, [r3, #0]
 800582e:	b2db      	uxtb	r3, r3
 8005830:	2200      	movs	r2, #0
 8005832:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8005836:	f8c7 212c 	str.w	r2, [r7, #300]	@ 0x12c
 800583a:	f04f 0200 	mov.w	r2, #0
 800583e:	f04f 0300 	mov.w	r3, #0
 8005842:	f8d7 6128 	ldr.w	r6, [r7, #296]	@ 0x128
 8005846:	0433      	lsls	r3, r6, #16
 8005848:	2200      	movs	r2, #0
 800584a:	ea40 0602 	orr.w	r6, r0, r2
 800584e:	f8c7 6120 	str.w	r6, [r7, #288]	@ 0x120
 8005852:	430b      	orrs	r3, r1
 8005854:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8005858:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 800585c:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      u_st_position.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8005860:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8005864:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8005868:	1dda      	adds	r2, r3, #7
 800586a:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800586e:	4413      	add	r3, r2
 8005870:	781b      	ldrb	r3, [r3, #0]
 8005872:	b2db      	uxtb	r3, r3
 8005874:	2200      	movs	r2, #0
 8005876:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800587a:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 800587e:	f04f 0200 	mov.w	r2, #0
 8005882:	f04f 0300 	mov.w	r3, #0
 8005886:	f8d7 6118 	ldr.w	r6, [r7, #280]	@ 0x118
 800588a:	0633      	lsls	r3, r6, #24
 800588c:	2200      	movs	r2, #0
 800588e:	ea40 0602 	orr.w	r6, r0, r2
 8005892:	f8c7 6110 	str.w	r6, [r7, #272]	@ 0x110
 8005896:	430b      	orrs	r3, r1
 8005898:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 800589c:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 80058a0:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      this->st_position = u_st_position.real;
 80058a4:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 80058a8:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80058ac:	e9c3 010a 	strd	r0, r1, [r3, #40]	@ 0x28
      offset += sizeof(this->st_position);
 80058b0:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80058b4:	3308      	adds	r3, #8
 80058b6:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
        memcpy( &(this->position[i]), &(this->st_position), sizeof(double));
 80058ba:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80058be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80058c0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80058c4:	00db      	lsls	r3, r3, #3
 80058c6:	18d0      	adds	r0, r2, r3
 80058c8:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80058cc:	3328      	adds	r3, #40	@ 0x28
 80058ce:	2208      	movs	r2, #8
 80058d0:	4619      	mov	r1, r3
 80058d2:	f007 fa63 	bl	800cd9c <memcpy>
      for( uint32_t i = 0; i < position_length; i++){
 80058d6:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80058da:	3301      	adds	r3, #1
 80058dc:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80058e0:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80058e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80058e6:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80058ea:	4293      	cmp	r3, r2
 80058ec:	f4ff aecc 	bcc.w	8005688 <_ZN11sensor_msgs10JointState11deserializeEPh+0x246>
      }
      uint32_t velocity_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80058f0:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 80058f4:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80058f8:	4413      	add	r3, r2
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
      velocity_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8005900:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8005904:	1c5a      	adds	r2, r3, #1
 8005906:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800590a:	4413      	add	r3, r2
 800590c:	781b      	ldrb	r3, [r3, #0]
 800590e:	021a      	lsls	r2, r3, #8
 8005910:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8005914:	4313      	orrs	r3, r2
 8005916:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
      velocity_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800591a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 800591e:	1c9a      	adds	r2, r3, #2
 8005920:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005924:	4413      	add	r3, r2
 8005926:	781b      	ldrb	r3, [r3, #0]
 8005928:	041a      	lsls	r2, r3, #16
 800592a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 800592e:	4313      	orrs	r3, r2
 8005930:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
      velocity_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8005934:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8005938:	1cda      	adds	r2, r3, #3
 800593a:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800593e:	4413      	add	r3, r2
 8005940:	781b      	ldrb	r3, [r3, #0]
 8005942:	061a      	lsls	r2, r3, #24
 8005944:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8005948:	4313      	orrs	r3, r2
 800594a:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
      offset += sizeof(this->velocity_length);
 800594e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8005952:	3304      	adds	r3, #4
 8005954:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
      if(velocity_lengthT > velocity_length)
 8005958:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800595c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800595e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8005962:	4293      	cmp	r3, r2
 8005964:	d90d      	bls.n	8005982 <_ZN11sensor_msgs10JointState11deserializeEPh+0x540>
        this->velocity = (double*)realloc(this->velocity, velocity_lengthT * sizeof(double));
 8005966:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800596a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800596c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8005970:	00db      	lsls	r3, r3, #3
 8005972:	4619      	mov	r1, r3
 8005974:	4610      	mov	r0, r2
 8005976:	f007 f997 	bl	800cca8 <realloc>
 800597a:	4602      	mov	r2, r0
 800597c:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8005980:	641a      	str	r2, [r3, #64]	@ 0x40
      velocity_length = velocity_lengthT;
 8005982:	f8d7 2184 	ldr.w	r2, [r7, #388]	@ 0x184
 8005986:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 800598a:	6353      	str	r3, [r2, #52]	@ 0x34
      for( uint32_t i = 0; i < velocity_length; i++){
 800598c:	2300      	movs	r3, #0
 800598e:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8005992:	e13e      	b.n	8005c12 <_ZN11sensor_msgs10JointState11deserializeEPh+0x7d0>
      union {
        double real;
        uint64_t base;
      } u_st_velocity;
      u_st_velocity.base = 0;
 8005994:	f04f 0200 	mov.w	r2, #0
 8005998:	f04f 0300 	mov.w	r3, #0
 800599c:	e9c7 2364 	strd	r2, r3, [r7, #400]	@ 0x190
      u_st_velocity.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80059a0:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 80059a4:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 80059a8:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80059ac:	4413      	add	r3, r2
 80059ae:	781b      	ldrb	r3, [r3, #0]
 80059b0:	b2db      	uxtb	r3, r3
 80059b2:	2200      	movs	r2, #0
 80059b4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80059b8:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 80059bc:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	@ 0x108
 80059c0:	461a      	mov	r2, r3
 80059c2:	4302      	orrs	r2, r0
 80059c4:	f8c7 2100 	str.w	r2, [r7, #256]	@ 0x100
 80059c8:	4623      	mov	r3, r4
 80059ca:	430b      	orrs	r3, r1
 80059cc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80059d0:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	@ 0x100
 80059d4:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_st_velocity.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80059d8:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 80059dc:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80059e0:	1c5a      	adds	r2, r3, #1
 80059e2:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80059e6:	4413      	add	r3, r2
 80059e8:	781b      	ldrb	r3, [r3, #0]
 80059ea:	b2db      	uxtb	r3, r3
 80059ec:	2200      	movs	r2, #0
 80059ee:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80059f2:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 80059f6:	f04f 0200 	mov.w	r2, #0
 80059fa:	f04f 0300 	mov.w	r3, #0
 80059fe:	e9d7 563e 	ldrd	r5, r6, [r7, #248]	@ 0xf8
 8005a02:	4634      	mov	r4, r6
 8005a04:	0223      	lsls	r3, r4, #8
 8005a06:	462c      	mov	r4, r5
 8005a08:	4635      	mov	r5, r6
 8005a0a:	4626      	mov	r6, r4
 8005a0c:	ea43 6316 	orr.w	r3, r3, r6, lsr #24
 8005a10:	0222      	lsls	r2, r4, #8
 8005a12:	ea40 0402 	orr.w	r4, r0, r2
 8005a16:	f8c7 40f0 	str.w	r4, [r7, #240]	@ 0xf0
 8005a1a:	430b      	orrs	r3, r1
 8005a1c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005a20:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	@ 0xf0
 8005a24:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_st_velocity.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8005a28:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8005a2c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8005a30:	1c9a      	adds	r2, r3, #2
 8005a32:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005a36:	4413      	add	r3, r2
 8005a38:	781b      	ldrb	r3, [r3, #0]
 8005a3a:	b2db      	uxtb	r3, r3
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005a42:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005a46:	f04f 0200 	mov.w	r2, #0
 8005a4a:	f04f 0300 	mov.w	r3, #0
 8005a4e:	e9d7 563a 	ldrd	r5, r6, [r7, #232]	@ 0xe8
 8005a52:	4634      	mov	r4, r6
 8005a54:	0423      	lsls	r3, r4, #16
 8005a56:	462c      	mov	r4, r5
 8005a58:	4635      	mov	r5, r6
 8005a5a:	4626      	mov	r6, r4
 8005a5c:	ea43 4316 	orr.w	r3, r3, r6, lsr #16
 8005a60:	0422      	lsls	r2, r4, #16
 8005a62:	ea40 0402 	orr.w	r4, r0, r2
 8005a66:	f8c7 40e0 	str.w	r4, [r7, #224]	@ 0xe0
 8005a6a:	430b      	orrs	r3, r1
 8005a6c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005a70:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	@ 0xe0
 8005a74:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_st_velocity.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8005a78:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8005a7c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8005a80:	1cda      	adds	r2, r3, #3
 8005a82:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005a86:	4413      	add	r3, r2
 8005a88:	781b      	ldrb	r3, [r3, #0]
 8005a8a:	b2db      	uxtb	r3, r3
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005a92:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005a96:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8005a9a:	4623      	mov	r3, r4
 8005a9c:	0a1b      	lsrs	r3, r3, #8
 8005a9e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005aa2:	4623      	mov	r3, r4
 8005aa4:	061b      	lsls	r3, r3, #24
 8005aa6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005aaa:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	@ 0xd0
 8005aae:	461a      	mov	r2, r3
 8005ab0:	4302      	orrs	r2, r0
 8005ab2:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8005ab6:	4623      	mov	r3, r4
 8005ab8:	430b      	orrs	r3, r1
 8005aba:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005abe:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	@ 0xc8
 8005ac2:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_st_velocity.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8005ac6:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8005aca:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8005ace:	1d1a      	adds	r2, r3, #4
 8005ad0:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005ad4:	4413      	add	r3, r2
 8005ad6:	781b      	ldrb	r3, [r3, #0]
 8005ad8:	b2db      	uxtb	r3, r3
 8005ada:	2200      	movs	r2, #0
 8005adc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005ae0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005ae4:	f04f 0200 	mov.w	r2, #0
 8005ae8:	f04f 0300 	mov.w	r3, #0
 8005aec:	f8d7 40c0 	ldr.w	r4, [r7, #192]	@ 0xc0
 8005af0:	0023      	movs	r3, r4
 8005af2:	2200      	movs	r2, #0
 8005af4:	ea40 0402 	orr.w	r4, r0, r2
 8005af8:	f8c7 40b8 	str.w	r4, [r7, #184]	@ 0xb8
 8005afc:	430b      	orrs	r3, r1
 8005afe:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005b02:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	@ 0xb8
 8005b06:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_st_velocity.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8005b0a:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8005b0e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8005b12:	1d5a      	adds	r2, r3, #5
 8005b14:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005b18:	4413      	add	r3, r2
 8005b1a:	781b      	ldrb	r3, [r3, #0]
 8005b1c:	b2db      	uxtb	r3, r3
 8005b1e:	2200      	movs	r2, #0
 8005b20:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005b24:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8005b28:	f04f 0200 	mov.w	r2, #0
 8005b2c:	f04f 0300 	mov.w	r3, #0
 8005b30:	f8d7 40b0 	ldr.w	r4, [r7, #176]	@ 0xb0
 8005b34:	0223      	lsls	r3, r4, #8
 8005b36:	2200      	movs	r2, #0
 8005b38:	ea40 0402 	orr.w	r4, r0, r2
 8005b3c:	f8c7 40a8 	str.w	r4, [r7, #168]	@ 0xa8
 8005b40:	430b      	orrs	r3, r1
 8005b42:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005b46:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	@ 0xa8
 8005b4a:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_st_velocity.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8005b4e:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8005b52:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8005b56:	1d9a      	adds	r2, r3, #6
 8005b58:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005b5c:	4413      	add	r3, r2
 8005b5e:	781b      	ldrb	r3, [r3, #0]
 8005b60:	b2db      	uxtb	r3, r3
 8005b62:	2200      	movs	r2, #0
 8005b64:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005b68:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005b6c:	f04f 0200 	mov.w	r2, #0
 8005b70:	f04f 0300 	mov.w	r3, #0
 8005b74:	f8d7 40a0 	ldr.w	r4, [r7, #160]	@ 0xa0
 8005b78:	0423      	lsls	r3, r4, #16
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	ea40 0402 	orr.w	r4, r0, r2
 8005b80:	f8c7 4098 	str.w	r4, [r7, #152]	@ 0x98
 8005b84:	430b      	orrs	r3, r1
 8005b86:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005b8a:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	@ 0x98
 8005b8e:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_st_velocity.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8005b92:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8005b96:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8005b9a:	1dda      	adds	r2, r3, #7
 8005b9c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005ba0:	4413      	add	r3, r2
 8005ba2:	781b      	ldrb	r3, [r3, #0]
 8005ba4:	b2db      	uxtb	r3, r3
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005bac:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005bb0:	f04f 0200 	mov.w	r2, #0
 8005bb4:	f04f 0300 	mov.w	r3, #0
 8005bb8:	f8d7 4090 	ldr.w	r4, [r7, #144]	@ 0x90
 8005bbc:	0623      	lsls	r3, r4, #24
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	ea40 0402 	orr.w	r4, r0, r2
 8005bc4:	f8c7 4088 	str.w	r4, [r7, #136]	@ 0x88
 8005bc8:	430b      	orrs	r3, r1
 8005bca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005bce:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	@ 0x88
 8005bd2:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      this->st_velocity = u_st_velocity.real;
 8005bd6:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8005bda:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8005bde:	e9c3 010e 	strd	r0, r1, [r3, #56]	@ 0x38
      offset += sizeof(this->st_velocity);
 8005be2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8005be6:	3308      	adds	r3, #8
 8005be8:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
        memcpy( &(this->velocity[i]), &(this->st_velocity), sizeof(double));
 8005bec:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8005bf0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005bf2:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8005bf6:	00db      	lsls	r3, r3, #3
 8005bf8:	18d0      	adds	r0, r2, r3
 8005bfa:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8005bfe:	3338      	adds	r3, #56	@ 0x38
 8005c00:	2208      	movs	r2, #8
 8005c02:	4619      	mov	r1, r3
 8005c04:	f007 f8ca 	bl	800cd9c <memcpy>
      for( uint32_t i = 0; i < velocity_length; i++){
 8005c08:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8005c0c:	3301      	adds	r3, #1
 8005c0e:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8005c12:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8005c16:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005c18:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	f4ff aeb9 	bcc.w	8005994 <_ZN11sensor_msgs10JointState11deserializeEPh+0x552>
      }
      uint32_t effort_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8005c22:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 8005c26:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005c2a:	4413      	add	r3, r2
 8005c2c:	781b      	ldrb	r3, [r3, #0]
 8005c2e:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
      effort_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8005c32:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8005c36:	1c5a      	adds	r2, r3, #1
 8005c38:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005c3c:	4413      	add	r3, r2
 8005c3e:	781b      	ldrb	r3, [r3, #0]
 8005c40:	021a      	lsls	r2, r3, #8
 8005c42:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8005c46:	4313      	orrs	r3, r2
 8005c48:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
      effort_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8005c4c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8005c50:	1c9a      	adds	r2, r3, #2
 8005c52:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005c56:	4413      	add	r3, r2
 8005c58:	781b      	ldrb	r3, [r3, #0]
 8005c5a:	041a      	lsls	r2, r3, #16
 8005c5c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8005c60:	4313      	orrs	r3, r2
 8005c62:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
      effort_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8005c66:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8005c6a:	1cda      	adds	r2, r3, #3
 8005c6c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005c70:	4413      	add	r3, r2
 8005c72:	781b      	ldrb	r3, [r3, #0]
 8005c74:	061a      	lsls	r2, r3, #24
 8005c76:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
      offset += sizeof(this->effort_length);
 8005c80:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8005c84:	3304      	adds	r3, #4
 8005c86:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
      if(effort_lengthT > effort_length)
 8005c8a:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8005c8e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005c90:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d90d      	bls.n	8005cb4 <_ZN11sensor_msgs10JointState11deserializeEPh+0x872>
        this->effort = (double*)realloc(this->effort, effort_lengthT * sizeof(double));
 8005c98:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8005c9c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005c9e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8005ca2:	00db      	lsls	r3, r3, #3
 8005ca4:	4619      	mov	r1, r3
 8005ca6:	4610      	mov	r0, r2
 8005ca8:	f006 fffe 	bl	800cca8 <realloc>
 8005cac:	4602      	mov	r2, r0
 8005cae:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8005cb2:	651a      	str	r2, [r3, #80]	@ 0x50
      effort_length = effort_lengthT;
 8005cb4:	f8d7 2184 	ldr.w	r2, [r7, #388]	@ 0x184
 8005cb8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8005cbc:	6453      	str	r3, [r2, #68]	@ 0x44
      for( uint32_t i = 0; i < effort_length; i++){
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 8005cc4:	e11a      	b.n	8005efc <_ZN11sensor_msgs10JointState11deserializeEPh+0xaba>
      union {
        double real;
        uint64_t base;
      } u_st_effort;
      u_st_effort.base = 0;
 8005cc6:	f04f 0200 	mov.w	r2, #0
 8005cca:	f04f 0300 	mov.w	r3, #0
 8005cce:	e9c7 2362 	strd	r2, r3, [r7, #392]	@ 0x188
      u_st_effort.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8005cd2:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8005cd6:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 8005cda:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005cde:	4413      	add	r3, r2
 8005ce0:	781b      	ldrb	r3, [r3, #0]
 8005ce2:	b2db      	uxtb	r3, r3
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005cea:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8005cee:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	@ 0x80
 8005cf2:	461a      	mov	r2, r3
 8005cf4:	4302      	orrs	r2, r0
 8005cf6:	67ba      	str	r2, [r7, #120]	@ 0x78
 8005cf8:	4623      	mov	r3, r4
 8005cfa:	430b      	orrs	r3, r1
 8005cfc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005cfe:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	@ 0x78
 8005d02:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_st_effort.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8005d06:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8005d0a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8005d0e:	1c5a      	adds	r2, r3, #1
 8005d10:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005d14:	4413      	add	r3, r2
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	b2db      	uxtb	r3, r3
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	673b      	str	r3, [r7, #112]	@ 0x70
 8005d1e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005d20:	f04f 0200 	mov.w	r2, #0
 8005d24:	f04f 0300 	mov.w	r3, #0
 8005d28:	e9d7 561c 	ldrd	r5, r6, [r7, #112]	@ 0x70
 8005d2c:	4634      	mov	r4, r6
 8005d2e:	0223      	lsls	r3, r4, #8
 8005d30:	462c      	mov	r4, r5
 8005d32:	4635      	mov	r5, r6
 8005d34:	4626      	mov	r6, r4
 8005d36:	ea43 6316 	orr.w	r3, r3, r6, lsr #24
 8005d3a:	0222      	lsls	r2, r4, #8
 8005d3c:	ea40 0402 	orr.w	r4, r0, r2
 8005d40:	66bc      	str	r4, [r7, #104]	@ 0x68
 8005d42:	430b      	orrs	r3, r1
 8005d44:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005d46:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	@ 0x68
 8005d4a:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_st_effort.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8005d4e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8005d52:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8005d56:	1c9a      	adds	r2, r3, #2
 8005d58:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005d5c:	4413      	add	r3, r2
 8005d5e:	781b      	ldrb	r3, [r3, #0]
 8005d60:	b2db      	uxtb	r3, r3
 8005d62:	2200      	movs	r2, #0
 8005d64:	663b      	str	r3, [r7, #96]	@ 0x60
 8005d66:	667a      	str	r2, [r7, #100]	@ 0x64
 8005d68:	f04f 0200 	mov.w	r2, #0
 8005d6c:	f04f 0300 	mov.w	r3, #0
 8005d70:	e9d7 5618 	ldrd	r5, r6, [r7, #96]	@ 0x60
 8005d74:	4634      	mov	r4, r6
 8005d76:	0423      	lsls	r3, r4, #16
 8005d78:	462c      	mov	r4, r5
 8005d7a:	4635      	mov	r5, r6
 8005d7c:	4626      	mov	r6, r4
 8005d7e:	ea43 4316 	orr.w	r3, r3, r6, lsr #16
 8005d82:	0422      	lsls	r2, r4, #16
 8005d84:	ea40 0402 	orr.w	r4, r0, r2
 8005d88:	65bc      	str	r4, [r7, #88]	@ 0x58
 8005d8a:	430b      	orrs	r3, r1
 8005d8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005d8e:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	@ 0x58
 8005d92:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_st_effort.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8005d96:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8005d9a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8005d9e:	1cda      	adds	r2, r3, #3
 8005da0:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005da4:	4413      	add	r3, r2
 8005da6:	781b      	ldrb	r3, [r3, #0]
 8005da8:	b2db      	uxtb	r3, r3
 8005daa:	2200      	movs	r2, #0
 8005dac:	653b      	str	r3, [r7, #80]	@ 0x50
 8005dae:	657a      	str	r2, [r7, #84]	@ 0x54
 8005db0:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8005db4:	4623      	mov	r3, r4
 8005db6:	0a1b      	lsrs	r3, r3, #8
 8005db8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005dba:	4623      	mov	r3, r4
 8005dbc:	061b      	lsls	r3, r3, #24
 8005dbe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005dc0:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 8005dc4:	461a      	mov	r2, r3
 8005dc6:	4302      	orrs	r2, r0
 8005dc8:	643a      	str	r2, [r7, #64]	@ 0x40
 8005dca:	4623      	mov	r3, r4
 8005dcc:	430b      	orrs	r3, r1
 8005dce:	647b      	str	r3, [r7, #68]	@ 0x44
 8005dd0:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8005dd4:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_st_effort.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8005dd8:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8005ddc:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8005de0:	1d1a      	adds	r2, r3, #4
 8005de2:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005de6:	4413      	add	r3, r2
 8005de8:	781b      	ldrb	r3, [r3, #0]
 8005dea:	b2db      	uxtb	r3, r3
 8005dec:	2200      	movs	r2, #0
 8005dee:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005df0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005df2:	f04f 0200 	mov.w	r2, #0
 8005df6:	f04f 0300 	mov.w	r3, #0
 8005dfa:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 8005dfc:	0023      	movs	r3, r4
 8005dfe:	2200      	movs	r2, #0
 8005e00:	ea40 0402 	orr.w	r4, r0, r2
 8005e04:	633c      	str	r4, [r7, #48]	@ 0x30
 8005e06:	430b      	orrs	r3, r1
 8005e08:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e0a:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8005e0e:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_st_effort.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8005e12:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8005e16:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8005e1a:	1d5a      	adds	r2, r3, #5
 8005e1c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005e20:	4413      	add	r3, r2
 8005e22:	781b      	ldrb	r3, [r3, #0]
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	2200      	movs	r2, #0
 8005e28:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e2a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005e2c:	f04f 0200 	mov.w	r2, #0
 8005e30:	f04f 0300 	mov.w	r3, #0
 8005e34:	6abc      	ldr	r4, [r7, #40]	@ 0x28
 8005e36:	0223      	lsls	r3, r4, #8
 8005e38:	2200      	movs	r2, #0
 8005e3a:	ea40 0402 	orr.w	r4, r0, r2
 8005e3e:	623c      	str	r4, [r7, #32]
 8005e40:	430b      	orrs	r3, r1
 8005e42:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e44:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8005e48:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_st_effort.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8005e4c:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8005e50:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8005e54:	1d9a      	adds	r2, r3, #6
 8005e56:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005e5a:	4413      	add	r3, r2
 8005e5c:	781b      	ldrb	r3, [r3, #0]
 8005e5e:	b2db      	uxtb	r3, r3
 8005e60:	2200      	movs	r2, #0
 8005e62:	61bb      	str	r3, [r7, #24]
 8005e64:	61fa      	str	r2, [r7, #28]
 8005e66:	f04f 0200 	mov.w	r2, #0
 8005e6a:	f04f 0300 	mov.w	r3, #0
 8005e6e:	69bc      	ldr	r4, [r7, #24]
 8005e70:	0423      	lsls	r3, r4, #16
 8005e72:	2200      	movs	r2, #0
 8005e74:	ea40 0402 	orr.w	r4, r0, r2
 8005e78:	613c      	str	r4, [r7, #16]
 8005e7a:	430b      	orrs	r3, r1
 8005e7c:	617b      	str	r3, [r7, #20]
 8005e7e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8005e82:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_st_effort.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8005e86:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8005e8a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8005e8e:	1dda      	adds	r2, r3, #7
 8005e90:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005e94:	4413      	add	r3, r2
 8005e96:	781b      	ldrb	r3, [r3, #0]
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	60bb      	str	r3, [r7, #8]
 8005e9e:	60fa      	str	r2, [r7, #12]
 8005ea0:	f04f 0200 	mov.w	r2, #0
 8005ea4:	f04f 0300 	mov.w	r3, #0
 8005ea8:	68bc      	ldr	r4, [r7, #8]
 8005eaa:	0623      	lsls	r3, r4, #24
 8005eac:	2200      	movs	r2, #0
 8005eae:	ea40 0402 	orr.w	r4, r0, r2
 8005eb2:	603c      	str	r4, [r7, #0]
 8005eb4:	430b      	orrs	r3, r1
 8005eb6:	607b      	str	r3, [r7, #4]
 8005eb8:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005ebc:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      this->st_effort = u_st_effort.real;
 8005ec0:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8005ec4:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8005ec8:	e9c3 0112 	strd	r0, r1, [r3, #72]	@ 0x48
      offset += sizeof(this->st_effort);
 8005ecc:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8005ed0:	3308      	adds	r3, #8
 8005ed2:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
        memcpy( &(this->effort[i]), &(this->st_effort), sizeof(double));
 8005ed6:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8005eda:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005edc:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8005ee0:	00db      	lsls	r3, r3, #3
 8005ee2:	18d0      	adds	r0, r2, r3
 8005ee4:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8005ee8:	3348      	adds	r3, #72	@ 0x48
 8005eea:	2208      	movs	r2, #8
 8005eec:	4619      	mov	r1, r3
 8005eee:	f006 ff55 	bl	800cd9c <memcpy>
      for( uint32_t i = 0; i < effort_length; i++){
 8005ef2:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8005ef6:	3301      	adds	r3, #1
 8005ef8:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 8005efc:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8005f00:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005f02:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8005f06:	4293      	cmp	r3, r2
 8005f08:	f4ff aedd 	bcc.w	8005cc6 <_ZN11sensor_msgs10JointState11deserializeEPh+0x884>
      }
     return offset;
 8005f0c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
    }
 8005f10:	4618      	mov	r0, r3
 8005f12:	f507 77ea 	add.w	r7, r7, #468	@ 0x1d4
 8005f16:	46bd      	mov	sp, r7
 8005f18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005f1c <_ZN11sensor_msgs10JointState7getTypeEv>:

    virtual const char * getType() override { return "sensor_msgs/JointState"; };
 8005f1c:	b480      	push	{r7}
 8005f1e:	b083      	sub	sp, #12
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
 8005f24:	4b02      	ldr	r3, [pc, #8]	@ (8005f30 <_ZN11sensor_msgs10JointState7getTypeEv+0x14>)
 8005f26:	4618      	mov	r0, r3
 8005f28:	370c      	adds	r7, #12
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bc80      	pop	{r7}
 8005f2e:	4770      	bx	lr
 8005f30:	0800d05c 	.word	0x0800d05c

08005f34 <_ZN11sensor_msgs10JointState6getMD5Ev>:
    virtual const char * getMD5() override { return "3066dcd76a6cfaef579bd0f34173e9fd"; };
 8005f34:	b480      	push	{r7}
 8005f36:	b083      	sub	sp, #12
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	4b02      	ldr	r3, [pc, #8]	@ (8005f48 <_ZN11sensor_msgs10JointState6getMD5Ev+0x14>)
 8005f3e:	4618      	mov	r0, r3
 8005f40:	370c      	adds	r7, #12
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bc80      	pop	{r7}
 8005f46:	4770      	bx	lr
 8005f48:	0800d074 	.word	0x0800d074

08005f4c <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b082      	sub	sp, #8
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	4618      	mov	r0, r3
 8005f58:	f7fb fbd6 	bl	8001708 <_ZN3ros3MsgC1Ev>
 8005f5c:	4a08      	ldr	r2, [pc, #32]	@ (8005f80 <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	601a      	str	r2, [r3, #0]
      linear(),
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	3308      	adds	r3, #8
 8005f66:	4618      	mov	r0, r3
 8005f68:	f7fd fc86 	bl	8003878 <_ZN13geometry_msgs7Vector3C1Ev>
      angular()
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	3328      	adds	r3, #40	@ 0x28
 8005f70:	4618      	mov	r0, r3
 8005f72:	f7fd fc81 	bl	8003878 <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3708      	adds	r7, #8
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}
 8005f80:	0800d458 	.word	0x0800d458

08005f84 <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b084      	sub	sp, #16
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
 8005f8c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f103 0008 	add.w	r0, r3, #8
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	683a      	ldr	r2, [r7, #0]
 8005f9c:	4413      	add	r3, r2
 8005f9e:	4619      	mov	r1, r3
 8005fa0:	f7fd fc92 	bl	80038c8 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	4413      	add	r3, r2
 8005faa:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	683a      	ldr	r2, [r7, #0]
 8005fb6:	4413      	add	r3, r2
 8005fb8:	4619      	mov	r1, r3
 8005fba:	f7fd fc85 	bl	80038c8 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8005fbe:	4602      	mov	r2, r0
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	4413      	add	r3, r2
 8005fc4:	60fb      	str	r3, [r7, #12]
      return offset;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
    }
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3710      	adds	r7, #16
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}

08005fd0 <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b084      	sub	sp, #16
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	f103 0008 	add.w	r0, r3, #8
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	683a      	ldr	r2, [r7, #0]
 8005fe8:	4413      	add	r3, r2
 8005fea:	4619      	mov	r1, r3
 8005fec:	f7fd fdde 	bl	8003bac <_ZN13geometry_msgs7Vector311deserializeEPh>
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	4413      	add	r3, r2
 8005ff6:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	683a      	ldr	r2, [r7, #0]
 8006002:	4413      	add	r3, r2
 8006004:	4619      	mov	r1, r3
 8006006:	f7fd fdd1 	bl	8003bac <_ZN13geometry_msgs7Vector311deserializeEPh>
 800600a:	4602      	mov	r2, r0
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	4413      	add	r3, r2
 8006010:	60fb      	str	r3, [r7, #12]
     return offset;
 8006012:	68fb      	ldr	r3, [r7, #12]
    }
 8006014:	4618      	mov	r0, r3
 8006016:	3710      	adds	r7, #16
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}

0800601c <_ZN13geometry_msgs5Twist7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Twist"; };
 800601c:	b480      	push	{r7}
 800601e:	b083      	sub	sp, #12
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	4b02      	ldr	r3, [pc, #8]	@ (8006030 <_ZN13geometry_msgs5Twist7getTypeEv+0x14>)
 8006026:	4618      	mov	r0, r3
 8006028:	370c      	adds	r7, #12
 800602a:	46bd      	mov	sp, r7
 800602c:	bc80      	pop	{r7}
 800602e:	4770      	bx	lr
 8006030:	0800d098 	.word	0x0800d098

08006034 <_ZN13geometry_msgs5Twist6getMD5Ev>:
    virtual const char * getMD5() override { return "9f195f881246fdfa2798d1d3eebca84a"; };
 8006034:	b480      	push	{r7}
 8006036:	b083      	sub	sp, #12
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	4b02      	ldr	r3, [pc, #8]	@ (8006048 <_ZN13geometry_msgs5Twist6getMD5Ev+0x14>)
 800603e:	4618      	mov	r0, r3
 8006040:	370c      	adds	r7, #12
 8006042:	46bd      	mov	sp, r7
 8006044:	bc80      	pop	{r7}
 8006046:	4770      	bx	lr
 8006048:	0800d0ac 	.word	0x0800d0ac

0800604c <_ZN13geometry_msgs9TransformC1Ev>:
      typedef geometry_msgs::Vector3 _translation_type;
      _translation_type translation;
      typedef geometry_msgs::Quaternion _rotation_type;
      _rotation_type rotation;

    Transform():
 800604c:	b580      	push	{r7, lr}
 800604e:	b082      	sub	sp, #8
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
      translation(),
      rotation()
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	4618      	mov	r0, r3
 8006058:	f7fb fb56 	bl	8001708 <_ZN3ros3MsgC1Ev>
 800605c:	4a08      	ldr	r2, [pc, #32]	@ (8006080 <_ZN13geometry_msgs9TransformC1Ev+0x34>)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	601a      	str	r2, [r3, #0]
      translation(),
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	3308      	adds	r3, #8
 8006066:	4618      	mov	r0, r3
 8006068:	f7fd fc06 	bl	8003878 <_ZN13geometry_msgs7Vector3C1Ev>
      rotation()
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	3328      	adds	r3, #40	@ 0x28
 8006070:	4618      	mov	r0, r3
 8006072:	f7fc fd47 	bl	8002b04 <_ZN13geometry_msgs10QuaternionC1Ev>
    {
    }
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	4618      	mov	r0, r3
 800607a:	3708      	adds	r7, #8
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}
 8006080:	0800d440 	.word	0x0800d440

08006084 <_ZNK13geometry_msgs9Transform9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8006084:	b580      	push	{r7, lr}
 8006086:	b084      	sub	sp, #16
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
 800608c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800608e:	2300      	movs	r3, #0
 8006090:	60fb      	str	r3, [r7, #12]
      offset += this->translation.serialize(outbuffer + offset);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f103 0008 	add.w	r0, r3, #8
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	683a      	ldr	r2, [r7, #0]
 800609c:	4413      	add	r3, r2
 800609e:	4619      	mov	r1, r3
 80060a0:	f7fd fc12 	bl	80038c8 <_ZNK13geometry_msgs7Vector39serializeEPh>
 80060a4:	4602      	mov	r2, r0
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	4413      	add	r3, r2
 80060aa:	60fb      	str	r3, [r7, #12]
      offset += this->rotation.serialize(outbuffer + offset);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	683a      	ldr	r2, [r7, #0]
 80060b6:	4413      	add	r3, r2
 80060b8:	4619      	mov	r1, r3
 80060ba:	f7fc fd51 	bl	8002b60 <_ZNK13geometry_msgs10Quaternion9serializeEPh>
 80060be:	4602      	mov	r2, r0
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	4413      	add	r3, r2
 80060c4:	60fb      	str	r3, [r7, #12]
      return offset;
 80060c6:	68fb      	ldr	r3, [r7, #12]
    }
 80060c8:	4618      	mov	r0, r3
 80060ca:	3710      	adds	r7, #16
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}

080060d0 <_ZN13geometry_msgs9Transform11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b084      	sub	sp, #16
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80060da:	2300      	movs	r3, #0
 80060dc:	60fb      	str	r3, [r7, #12]
      offset += this->translation.deserialize(inbuffer + offset);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f103 0008 	add.w	r0, r3, #8
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	683a      	ldr	r2, [r7, #0]
 80060e8:	4413      	add	r3, r2
 80060ea:	4619      	mov	r1, r3
 80060ec:	f7fd fd5e 	bl	8003bac <_ZN13geometry_msgs7Vector311deserializeEPh>
 80060f0:	4602      	mov	r2, r0
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	4413      	add	r3, r2
 80060f6:	60fb      	str	r3, [r7, #12]
      offset += this->rotation.deserialize(inbuffer + offset);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	683a      	ldr	r2, [r7, #0]
 8006102:	4413      	add	r3, r2
 8006104:	4619      	mov	r1, r3
 8006106:	f7fc ff14 	bl	8002f32 <_ZN13geometry_msgs10Quaternion11deserializeEPh>
 800610a:	4602      	mov	r2, r0
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	4413      	add	r3, r2
 8006110:	60fb      	str	r3, [r7, #12]
     return offset;
 8006112:	68fb      	ldr	r3, [r7, #12]
    }
 8006114:	4618      	mov	r0, r3
 8006116:	3710      	adds	r7, #16
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}

0800611c <_ZN13geometry_msgs9Transform7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Transform"; };
 800611c:	b480      	push	{r7}
 800611e:	b083      	sub	sp, #12
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
 8006124:	4b02      	ldr	r3, [pc, #8]	@ (8006130 <_ZN13geometry_msgs9Transform7getTypeEv+0x14>)
 8006126:	4618      	mov	r0, r3
 8006128:	370c      	adds	r7, #12
 800612a:	46bd      	mov	sp, r7
 800612c:	bc80      	pop	{r7}
 800612e:	4770      	bx	lr
 8006130:	0800d0d0 	.word	0x0800d0d0

08006134 <_ZN13geometry_msgs9Transform6getMD5Ev>:
    virtual const char * getMD5() override { return "ac9eff44abf714214112b05d54a3cf9b"; };
 8006134:	b480      	push	{r7}
 8006136:	b083      	sub	sp, #12
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
 800613c:	4b02      	ldr	r3, [pc, #8]	@ (8006148 <_ZN13geometry_msgs9Transform6getMD5Ev+0x14>)
 800613e:	4618      	mov	r0, r3
 8006140:	370c      	adds	r7, #12
 8006142:	46bd      	mov	sp, r7
 8006144:	bc80      	pop	{r7}
 8006146:	4770      	bx	lr
 8006148:	0800d0e8 	.word	0x0800d0e8

0800614c <_ZN13geometry_msgs16TransformStampedC1Ev>:
      typedef const char* _child_frame_id_type;
      _child_frame_id_type child_frame_id;
      typedef geometry_msgs::Transform _transform_type;
      _transform_type transform;

    TransformStamped():
 800614c:	b580      	push	{r7, lr}
 800614e:	b082      	sub	sp, #8
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
      header(),
      child_frame_id(""),
      transform()
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	4618      	mov	r0, r3
 8006158:	f7fb fad6 	bl	8001708 <_ZN3ros3MsgC1Ev>
 800615c:	4a0a      	ldr	r2, [pc, #40]	@ (8006188 <_ZN13geometry_msgs16TransformStampedC1Ev+0x3c>)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	601a      	str	r2, [r3, #0]
      header(),
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	3304      	adds	r3, #4
 8006166:	4618      	mov	r0, r3
 8006168:	f7fc fb3c 	bl	80027e4 <_ZN8std_msgs6HeaderC1Ev>
      child_frame_id(""),
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	4a07      	ldr	r2, [pc, #28]	@ (800618c <_ZN13geometry_msgs16TransformStampedC1Ev+0x40>)
 8006170:	619a      	str	r2, [r3, #24]
      transform()
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	3320      	adds	r3, #32
 8006176:	4618      	mov	r0, r3
 8006178:	f7ff ff68 	bl	800604c <_ZN13geometry_msgs9TransformC1Ev>
    {
    }
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	4618      	mov	r0, r3
 8006180:	3708      	adds	r7, #8
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}
 8006186:	bf00      	nop
 8006188:	0800d428 	.word	0x0800d428
 800618c:	0800cea4 	.word	0x0800cea4

08006190 <_ZNK13geometry_msgs16TransformStamped9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8006190:	b580      	push	{r7, lr}
 8006192:	b084      	sub	sp, #16
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
 8006198:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800619a:	2300      	movs	r3, #0
 800619c:	60fb      	str	r3, [r7, #12]
      offset += this->header.serialize(outbuffer + offset);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	1d18      	adds	r0, r3, #4
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	683a      	ldr	r2, [r7, #0]
 80061a6:	4413      	add	r3, r2
 80061a8:	4619      	mov	r1, r3
 80061aa:	f7fc fb3b 	bl	8002824 <_ZNK8std_msgs6Header9serializeEPh>
 80061ae:	4602      	mov	r2, r0
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	4413      	add	r3, r2
 80061b4:	60fb      	str	r3, [r7, #12]
      uint32_t length_child_frame_id = strlen(this->child_frame_id);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	699b      	ldr	r3, [r3, #24]
 80061ba:	4618      	mov	r0, r3
 80061bc:	f7f9 ffc8 	bl	8000150 <strlen>
 80061c0:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_child_frame_id);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	683a      	ldr	r2, [r7, #0]
 80061c6:	4413      	add	r3, r2
 80061c8:	68b9      	ldr	r1, [r7, #8]
 80061ca:	4618      	mov	r0, r3
 80061cc:	f001 fef4 	bl	8007fb8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	3304      	adds	r3, #4
 80061d4:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->child_frame_id, length_child_frame_id);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	683a      	ldr	r2, [r7, #0]
 80061da:	18d0      	adds	r0, r2, r3
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	699b      	ldr	r3, [r3, #24]
 80061e0:	68ba      	ldr	r2, [r7, #8]
 80061e2:	4619      	mov	r1, r3
 80061e4:	f006 fdda 	bl	800cd9c <memcpy>
      offset += length_child_frame_id;
 80061e8:	68fa      	ldr	r2, [r7, #12]
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	4413      	add	r3, r2
 80061ee:	60fb      	str	r3, [r7, #12]
      offset += this->transform.serialize(outbuffer + offset);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f103 0020 	add.w	r0, r3, #32
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	683a      	ldr	r2, [r7, #0]
 80061fa:	4413      	add	r3, r2
 80061fc:	4619      	mov	r1, r3
 80061fe:	f7ff ff41 	bl	8006084 <_ZNK13geometry_msgs9Transform9serializeEPh>
 8006202:	4602      	mov	r2, r0
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	4413      	add	r3, r2
 8006208:	60fb      	str	r3, [r7, #12]
      return offset;
 800620a:	68fb      	ldr	r3, [r7, #12]
    }
 800620c:	4618      	mov	r0, r3
 800620e:	3710      	adds	r7, #16
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}

08006214 <_ZN13geometry_msgs16TransformStamped11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8006214:	b580      	push	{r7, lr}
 8006216:	b086      	sub	sp, #24
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800621e:	2300      	movs	r3, #0
 8006220:	613b      	str	r3, [r7, #16]
      offset += this->header.deserialize(inbuffer + offset);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	1d18      	adds	r0, r3, #4
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	683a      	ldr	r2, [r7, #0]
 800622a:	4413      	add	r3, r2
 800622c:	4619      	mov	r1, r3
 800622e:	f7fc fb91 	bl	8002954 <_ZN8std_msgs6Header11deserializeEPh>
 8006232:	4602      	mov	r2, r0
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	4413      	add	r3, r2
 8006238:	613b      	str	r3, [r7, #16]
      uint32_t length_child_frame_id;
      arrToVar(length_child_frame_id, (inbuffer + offset));
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	683a      	ldr	r2, [r7, #0]
 800623e:	441a      	add	r2, r3
 8006240:	f107 030c 	add.w	r3, r7, #12
 8006244:	4611      	mov	r1, r2
 8006246:	4618      	mov	r0, r3
 8006248:	f001 fed4 	bl	8007ff4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	3304      	adds	r3, #4
 8006250:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_child_frame_id; ++k){
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	617b      	str	r3, [r7, #20]
 8006256:	e00b      	b.n	8006270 <_ZN13geometry_msgs16TransformStamped11deserializeEPh+0x5c>
          inbuffer[k-1]=inbuffer[k];
 8006258:	683a      	ldr	r2, [r7, #0]
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	441a      	add	r2, r3
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	3b01      	subs	r3, #1
 8006262:	6839      	ldr	r1, [r7, #0]
 8006264:	440b      	add	r3, r1
 8006266:	7812      	ldrb	r2, [r2, #0]
 8006268:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_child_frame_id; ++k){
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	3301      	adds	r3, #1
 800626e:	617b      	str	r3, [r7, #20]
 8006270:	693a      	ldr	r2, [r7, #16]
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	4413      	add	r3, r2
 8006276:	697a      	ldr	r2, [r7, #20]
 8006278:	429a      	cmp	r2, r3
 800627a:	d3ed      	bcc.n	8006258 <_ZN13geometry_msgs16TransformStamped11deserializeEPh+0x44>
      }
      inbuffer[offset+length_child_frame_id-1]=0;
 800627c:	693a      	ldr	r2, [r7, #16]
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	4413      	add	r3, r2
 8006282:	3b01      	subs	r3, #1
 8006284:	683a      	ldr	r2, [r7, #0]
 8006286:	4413      	add	r3, r2
 8006288:	2200      	movs	r2, #0
 800628a:	701a      	strb	r2, [r3, #0]
      this->child_frame_id = (char *)(inbuffer + offset-1);
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	3b01      	subs	r3, #1
 8006290:	683a      	ldr	r2, [r7, #0]
 8006292:	441a      	add	r2, r3
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	619a      	str	r2, [r3, #24]
      offset += length_child_frame_id;
 8006298:	693a      	ldr	r2, [r7, #16]
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	4413      	add	r3, r2
 800629e:	613b      	str	r3, [r7, #16]
      offset += this->transform.deserialize(inbuffer + offset);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f103 0020 	add.w	r0, r3, #32
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	683a      	ldr	r2, [r7, #0]
 80062aa:	4413      	add	r3, r2
 80062ac:	4619      	mov	r1, r3
 80062ae:	f7ff ff0f 	bl	80060d0 <_ZN13geometry_msgs9Transform11deserializeEPh>
 80062b2:	4602      	mov	r2, r0
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	4413      	add	r3, r2
 80062b8:	613b      	str	r3, [r7, #16]
     return offset;
 80062ba:	693b      	ldr	r3, [r7, #16]
    }
 80062bc:	4618      	mov	r0, r3
 80062be:	3718      	adds	r7, #24
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}

080062c4 <_ZN13geometry_msgs16TransformStamped7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/TransformStamped"; };
 80062c4:	b480      	push	{r7}
 80062c6:	b083      	sub	sp, #12
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
 80062cc:	4b02      	ldr	r3, [pc, #8]	@ (80062d8 <_ZN13geometry_msgs16TransformStamped7getTypeEv+0x14>)
 80062ce:	4618      	mov	r0, r3
 80062d0:	370c      	adds	r7, #12
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bc80      	pop	{r7}
 80062d6:	4770      	bx	lr
 80062d8:	0800d10c 	.word	0x0800d10c

080062dc <_ZN13geometry_msgs16TransformStamped6getMD5Ev>:
    virtual const char * getMD5() override { return "b5764a33bfeb3588febc2682852579b0"; };
 80062dc:	b480      	push	{r7}
 80062de:	b083      	sub	sp, #12
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	4b02      	ldr	r3, [pc, #8]	@ (80062f0 <_ZN13geometry_msgs16TransformStamped6getMD5Ev+0x14>)
 80062e6:	4618      	mov	r0, r3
 80062e8:	370c      	adds	r7, #12
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bc80      	pop	{r7}
 80062ee:	4770      	bx	lr
 80062f0:	0800d12c 	.word	0x0800d12c

080062f4 <_ZN2tf9tfMessageC1Ev>:
      uint32_t transforms_length;
      typedef geometry_msgs::TransformStamped _transforms_type;
      _transforms_type st_transforms;
      _transforms_type * transforms;

    tfMessage():
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b082      	sub	sp, #8
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
      transforms_length(0), st_transforms(), transforms(nullptr)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	4618      	mov	r0, r3
 8006300:	f7fb fa02 	bl	8001708 <_ZN3ros3MsgC1Ev>
 8006304:	4a09      	ldr	r2, [pc, #36]	@ (800632c <_ZN2tf9tfMessageC1Ev+0x38>)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	601a      	str	r2, [r3, #0]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2200      	movs	r2, #0
 800630e:	605a      	str	r2, [r3, #4]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	3308      	adds	r3, #8
 8006314:	4618      	mov	r0, r3
 8006316:	f7ff ff19 	bl	800614c <_ZN13geometry_msgs16TransformStampedC1Ev>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2200      	movs	r2, #0
 800631e:	679a      	str	r2, [r3, #120]	@ 0x78
    {
    }
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	4618      	mov	r0, r3
 8006324:	3708      	adds	r7, #8
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}
 800632a:	bf00      	nop
 800632c:	0800d410 	.word	0x0800d410

08006330 <_ZNK2tf9tfMessage9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8006330:	b580      	push	{r7, lr}
 8006332:	b084      	sub	sp, #16
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800633a:	2300      	movs	r3, #0
 800633c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->transforms_length >> (8 * 0)) & 0xFF;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6859      	ldr	r1, [r3, #4]
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	683a      	ldr	r2, [r7, #0]
 8006346:	4413      	add	r3, r2
 8006348:	b2ca      	uxtb	r2, r1
 800634a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->transforms_length >> (8 * 1)) & 0xFF;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	0a19      	lsrs	r1, r3, #8
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	3301      	adds	r3, #1
 8006356:	683a      	ldr	r2, [r7, #0]
 8006358:	4413      	add	r3, r2
 800635a:	b2ca      	uxtb	r2, r1
 800635c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->transforms_length >> (8 * 2)) & 0xFF;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	0c19      	lsrs	r1, r3, #16
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	3302      	adds	r3, #2
 8006368:	683a      	ldr	r2, [r7, #0]
 800636a:	4413      	add	r3, r2
 800636c:	b2ca      	uxtb	r2, r1
 800636e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->transforms_length >> (8 * 3)) & 0xFF;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	0e19      	lsrs	r1, r3, #24
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	3303      	adds	r3, #3
 800637a:	683a      	ldr	r2, [r7, #0]
 800637c:	4413      	add	r3, r2
 800637e:	b2ca      	uxtb	r2, r1
 8006380:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->transforms_length);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	3304      	adds	r3, #4
 8006386:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < transforms_length; i++){
 8006388:	2300      	movs	r3, #0
 800638a:	60bb      	str	r3, [r7, #8]
 800638c:	e01d      	b.n	80063ca <_ZNK2tf9tfMessage9serializeEPh+0x9a>
      offset += this->transforms[i].serialize(outbuffer + offset);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6f99      	ldr	r1, [r3, #120]	@ 0x78
 8006392:	68ba      	ldr	r2, [r7, #8]
 8006394:	4613      	mov	r3, r2
 8006396:	00db      	lsls	r3, r3, #3
 8006398:	1a9b      	subs	r3, r3, r2
 800639a:	011b      	lsls	r3, r3, #4
 800639c:	18c8      	adds	r0, r1, r3
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6f99      	ldr	r1, [r3, #120]	@ 0x78
 80063a2:	68ba      	ldr	r2, [r7, #8]
 80063a4:	4613      	mov	r3, r2
 80063a6:	00db      	lsls	r3, r3, #3
 80063a8:	1a9b      	subs	r3, r3, r2
 80063aa:	011b      	lsls	r3, r3, #4
 80063ac:	440b      	add	r3, r1
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	68fa      	ldr	r2, [r7, #12]
 80063b4:	6839      	ldr	r1, [r7, #0]
 80063b6:	440a      	add	r2, r1
 80063b8:	4611      	mov	r1, r2
 80063ba:	4798      	blx	r3
 80063bc:	4602      	mov	r2, r0
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	4413      	add	r3, r2
 80063c2:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < transforms_length; i++){
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	3301      	adds	r3, #1
 80063c8:	60bb      	str	r3, [r7, #8]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	68ba      	ldr	r2, [r7, #8]
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d3dc      	bcc.n	800638e <_ZNK2tf9tfMessage9serializeEPh+0x5e>
      }
      return offset;
 80063d4:	68fb      	ldr	r3, [r7, #12]
    }
 80063d6:	4618      	mov	r0, r3
 80063d8:	3710      	adds	r7, #16
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}

080063de <_ZN2tf9tfMessage11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80063de:	b580      	push	{r7, lr}
 80063e0:	b086      	sub	sp, #24
 80063e2:	af00      	add	r7, sp, #0
 80063e4:	6078      	str	r0, [r7, #4]
 80063e6:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80063e8:	2300      	movs	r3, #0
 80063ea:	617b      	str	r3, [r7, #20]
      uint32_t transforms_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	683a      	ldr	r2, [r7, #0]
 80063f0:	4413      	add	r3, r2
 80063f2:	781b      	ldrb	r3, [r3, #0]
 80063f4:	60fb      	str	r3, [r7, #12]
      transforms_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	3301      	adds	r3, #1
 80063fa:	683a      	ldr	r2, [r7, #0]
 80063fc:	4413      	add	r3, r2
 80063fe:	781b      	ldrb	r3, [r3, #0]
 8006400:	021b      	lsls	r3, r3, #8
 8006402:	68fa      	ldr	r2, [r7, #12]
 8006404:	4313      	orrs	r3, r2
 8006406:	60fb      	str	r3, [r7, #12]
      transforms_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	3302      	adds	r3, #2
 800640c:	683a      	ldr	r2, [r7, #0]
 800640e:	4413      	add	r3, r2
 8006410:	781b      	ldrb	r3, [r3, #0]
 8006412:	041b      	lsls	r3, r3, #16
 8006414:	68fa      	ldr	r2, [r7, #12]
 8006416:	4313      	orrs	r3, r2
 8006418:	60fb      	str	r3, [r7, #12]
      transforms_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	3303      	adds	r3, #3
 800641e:	683a      	ldr	r2, [r7, #0]
 8006420:	4413      	add	r3, r2
 8006422:	781b      	ldrb	r3, [r3, #0]
 8006424:	061b      	lsls	r3, r3, #24
 8006426:	68fa      	ldr	r2, [r7, #12]
 8006428:	4313      	orrs	r3, r2
 800642a:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->transforms_length);
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	3304      	adds	r3, #4
 8006430:	617b      	str	r3, [r7, #20]
      if(transforms_lengthT > transforms_length)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	68fa      	ldr	r2, [r7, #12]
 8006438:	429a      	cmp	r2, r3
 800643a:	d90c      	bls.n	8006456 <_ZN2tf9tfMessage11deserializeEPh+0x78>
        this->transforms = (geometry_msgs::TransformStamped*)realloc(this->transforms, transforms_lengthT * sizeof(geometry_msgs::TransformStamped));
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 8006440:	68fa      	ldr	r2, [r7, #12]
 8006442:	4613      	mov	r3, r2
 8006444:	00db      	lsls	r3, r3, #3
 8006446:	1a9b      	subs	r3, r3, r2
 8006448:	011b      	lsls	r3, r3, #4
 800644a:	4619      	mov	r1, r3
 800644c:	f006 fc2c 	bl	800cca8 <realloc>
 8006450:	4602      	mov	r2, r0
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	679a      	str	r2, [r3, #120]	@ 0x78
      transforms_length = transforms_lengthT;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	68fa      	ldr	r2, [r7, #12]
 800645a:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < transforms_length; i++){
 800645c:	2300      	movs	r3, #0
 800645e:	613b      	str	r3, [r7, #16]
 8006460:	e01d      	b.n	800649e <_ZN2tf9tfMessage11deserializeEPh+0xc0>
      offset += this->st_transforms.deserialize(inbuffer + offset);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f103 0008 	add.w	r0, r3, #8
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	683a      	ldr	r2, [r7, #0]
 800646c:	4413      	add	r3, r2
 800646e:	4619      	mov	r1, r3
 8006470:	f7ff fed0 	bl	8006214 <_ZN13geometry_msgs16TransformStamped11deserializeEPh>
 8006474:	4602      	mov	r2, r0
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	4413      	add	r3, r2
 800647a:	617b      	str	r3, [r7, #20]
        memcpy( &(this->transforms[i]), &(this->st_transforms), sizeof(geometry_msgs::TransformStamped));
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6f99      	ldr	r1, [r3, #120]	@ 0x78
 8006480:	693a      	ldr	r2, [r7, #16]
 8006482:	4613      	mov	r3, r2
 8006484:	00db      	lsls	r3, r3, #3
 8006486:	1a9b      	subs	r3, r3, r2
 8006488:	011b      	lsls	r3, r3, #4
 800648a:	18c8      	adds	r0, r1, r3
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	3308      	adds	r3, #8
 8006490:	2270      	movs	r2, #112	@ 0x70
 8006492:	4619      	mov	r1, r3
 8006494:	f006 fc82 	bl	800cd9c <memcpy>
      for( uint32_t i = 0; i < transforms_length; i++){
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	3301      	adds	r3, #1
 800649c:	613b      	str	r3, [r7, #16]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	693a      	ldr	r2, [r7, #16]
 80064a4:	429a      	cmp	r2, r3
 80064a6:	d3dc      	bcc.n	8006462 <_ZN2tf9tfMessage11deserializeEPh+0x84>
      }
     return offset;
 80064a8:	697b      	ldr	r3, [r7, #20]
    }
 80064aa:	4618      	mov	r0, r3
 80064ac:	3718      	adds	r7, #24
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}
	...

080064b4 <_ZN2tf9tfMessage7getTypeEv>:

    virtual const char * getType() override { return "tf/tfMessage"; };
 80064b4:	b480      	push	{r7}
 80064b6:	b083      	sub	sp, #12
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
 80064bc:	4b02      	ldr	r3, [pc, #8]	@ (80064c8 <_ZN2tf9tfMessage7getTypeEv+0x14>)
 80064be:	4618      	mov	r0, r3
 80064c0:	370c      	adds	r7, #12
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bc80      	pop	{r7}
 80064c6:	4770      	bx	lr
 80064c8:	0800d150 	.word	0x0800d150

080064cc <_ZN2tf9tfMessage6getMD5Ev>:
    virtual const char * getMD5() override { return "94810edda583a504dfda3829e70d7eec"; };
 80064cc:	b480      	push	{r7}
 80064ce:	b083      	sub	sp, #12
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
 80064d4:	4b02      	ldr	r3, [pc, #8]	@ (80064e0 <_ZN2tf9tfMessage6getMD5Ev+0x14>)
 80064d6:	4618      	mov	r0, r3
 80064d8:	370c      	adds	r7, #12
 80064da:	46bd      	mov	sp, r7
 80064dc:	bc80      	pop	{r7}
 80064de:	4770      	bx	lr
 80064e0:	0800d160 	.word	0x0800d160

080064e4 <_ZN2tf20TransformBroadcasterC1Ev>:
{

class TransformBroadcaster
{
public:
  TransformBroadcaster() : publisher_("/tf", &internal_msg) {}
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b082      	sub	sp, #8
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	4618      	mov	r0, r3
 80064f0:	f7ff ff00 	bl	80062f4 <_ZN2tf9tfMessageC1Ev>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f103 0080 	add.w	r0, r3, #128	@ 0x80
 80064fa:	687a      	ldr	r2, [r7, #4]
 80064fc:	2300      	movs	r3, #0
 80064fe:	4904      	ldr	r1, [pc, #16]	@ (8006510 <_ZN2tf20TransformBroadcasterC1Ev+0x2c>)
 8006500:	f7fb ff30 	bl	8002364 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	4618      	mov	r0, r3
 8006508:	3708      	adds	r7, #8
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}
 800650e:	bf00      	nop
 8006510:	0800d184 	.word	0x0800d184

08006514 <_ZN13geometry_msgs5PointC1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Point():
 8006514:	b580      	push	{r7, lr}
 8006516:	b082      	sub	sp, #8
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	4618      	mov	r0, r3
 8006520:	f7fb f8f2 	bl	8001708 <_ZN3ros3MsgC1Ev>
 8006524:	4a0e      	ldr	r2, [pc, #56]	@ (8006560 <_ZN13geometry_msgs5PointC1Ev+0x4c>)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	601a      	str	r2, [r3, #0]
      x(0),
 800652a:	6879      	ldr	r1, [r7, #4]
 800652c:	f04f 0200 	mov.w	r2, #0
 8006530:	f04f 0300 	mov.w	r3, #0
 8006534:	e9c1 2302 	strd	r2, r3, [r1, #8]
      y(0),
 8006538:	6879      	ldr	r1, [r7, #4]
 800653a:	f04f 0200 	mov.w	r2, #0
 800653e:	f04f 0300 	mov.w	r3, #0
 8006542:	e9c1 2304 	strd	r2, r3, [r1, #16]
      z(0)
 8006546:	6879      	ldr	r1, [r7, #4]
 8006548:	f04f 0200 	mov.w	r2, #0
 800654c:	f04f 0300 	mov.w	r3, #0
 8006550:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	4618      	mov	r0, r3
 8006558:	3708      	adds	r7, #8
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}
 800655e:	bf00      	nop
 8006560:	0800d3e4 	.word	0x0800d3e4

08006564 <_ZNK13geometry_msgs5Point9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8006564:	b480      	push	{r7}
 8006566:	b08b      	sub	sp, #44	@ 0x2c
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800656e:	2300      	movs	r3, #0
 8006570:	627b      	str	r3, [r7, #36]	@ 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8006578:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 800657c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006580:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006582:	6838      	ldr	r0, [r7, #0]
 8006584:	4401      	add	r1, r0
 8006586:	b2d3      	uxtb	r3, r2
 8006588:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 800658a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800658e:	f04f 0200 	mov.w	r2, #0
 8006592:	f04f 0300 	mov.w	r3, #0
 8006596:	0a02      	lsrs	r2, r0, #8
 8006598:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800659c:	0a0b      	lsrs	r3, r1, #8
 800659e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80065a0:	3101      	adds	r1, #1
 80065a2:	6838      	ldr	r0, [r7, #0]
 80065a4:	4401      	add	r1, r0
 80065a6:	b2d3      	uxtb	r3, r2
 80065a8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 80065aa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80065ae:	f04f 0200 	mov.w	r2, #0
 80065b2:	f04f 0300 	mov.w	r3, #0
 80065b6:	0c02      	lsrs	r2, r0, #16
 80065b8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80065bc:	0c0b      	lsrs	r3, r1, #16
 80065be:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80065c0:	3102      	adds	r1, #2
 80065c2:	6838      	ldr	r0, [r7, #0]
 80065c4:	4401      	add	r1, r0
 80065c6:	b2d3      	uxtb	r3, r2
 80065c8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 80065ca:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80065ce:	f04f 0200 	mov.w	r2, #0
 80065d2:	f04f 0300 	mov.w	r3, #0
 80065d6:	0e02      	lsrs	r2, r0, #24
 80065d8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80065dc:	0e0b      	lsrs	r3, r1, #24
 80065de:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80065e0:	3103      	adds	r1, #3
 80065e2:	6838      	ldr	r0, [r7, #0]
 80065e4:	4401      	add	r1, r0
 80065e6:	b2d3      	uxtb	r3, r2
 80065e8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 80065ea:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80065ee:	f04f 0200 	mov.w	r2, #0
 80065f2:	f04f 0300 	mov.w	r3, #0
 80065f6:	000a      	movs	r2, r1
 80065f8:	2300      	movs	r3, #0
 80065fa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80065fc:	3104      	adds	r1, #4
 80065fe:	6838      	ldr	r0, [r7, #0]
 8006600:	4401      	add	r1, r0
 8006602:	b2d3      	uxtb	r3, r2
 8006604:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 8006606:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800660a:	f04f 0200 	mov.w	r2, #0
 800660e:	f04f 0300 	mov.w	r3, #0
 8006612:	0a0a      	lsrs	r2, r1, #8
 8006614:	2300      	movs	r3, #0
 8006616:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006618:	3105      	adds	r1, #5
 800661a:	6838      	ldr	r0, [r7, #0]
 800661c:	4401      	add	r1, r0
 800661e:	b2d3      	uxtb	r3, r2
 8006620:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8006622:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006626:	f04f 0200 	mov.w	r2, #0
 800662a:	f04f 0300 	mov.w	r3, #0
 800662e:	0c0a      	lsrs	r2, r1, #16
 8006630:	2300      	movs	r3, #0
 8006632:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006634:	3106      	adds	r1, #6
 8006636:	6838      	ldr	r0, [r7, #0]
 8006638:	4401      	add	r1, r0
 800663a:	b2d3      	uxtb	r3, r2
 800663c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 800663e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006642:	f04f 0200 	mov.w	r2, #0
 8006646:	f04f 0300 	mov.w	r3, #0
 800664a:	0e0a      	lsrs	r2, r1, #24
 800664c:	2300      	movs	r3, #0
 800664e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006650:	3107      	adds	r1, #7
 8006652:	6838      	ldr	r0, [r7, #0]
 8006654:	4401      	add	r1, r0
 8006656:	b2d3      	uxtb	r3, r2
 8006658:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 800665a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800665c:	3308      	adds	r3, #8
 800665e:	627b      	str	r3, [r7, #36]	@ 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8006666:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 800666a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800666e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006670:	6838      	ldr	r0, [r7, #0]
 8006672:	4401      	add	r1, r0
 8006674:	b2d3      	uxtb	r3, r2
 8006676:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8006678:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800667c:	f04f 0200 	mov.w	r2, #0
 8006680:	f04f 0300 	mov.w	r3, #0
 8006684:	0a02      	lsrs	r2, r0, #8
 8006686:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800668a:	0a0b      	lsrs	r3, r1, #8
 800668c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800668e:	3101      	adds	r1, #1
 8006690:	6838      	ldr	r0, [r7, #0]
 8006692:	4401      	add	r1, r0
 8006694:	b2d3      	uxtb	r3, r2
 8006696:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8006698:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800669c:	f04f 0200 	mov.w	r2, #0
 80066a0:	f04f 0300 	mov.w	r3, #0
 80066a4:	0c02      	lsrs	r2, r0, #16
 80066a6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80066aa:	0c0b      	lsrs	r3, r1, #16
 80066ac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80066ae:	3102      	adds	r1, #2
 80066b0:	6838      	ldr	r0, [r7, #0]
 80066b2:	4401      	add	r1, r0
 80066b4:	b2d3      	uxtb	r3, r2
 80066b6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 80066b8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80066bc:	f04f 0200 	mov.w	r2, #0
 80066c0:	f04f 0300 	mov.w	r3, #0
 80066c4:	0e02      	lsrs	r2, r0, #24
 80066c6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80066ca:	0e0b      	lsrs	r3, r1, #24
 80066cc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80066ce:	3103      	adds	r1, #3
 80066d0:	6838      	ldr	r0, [r7, #0]
 80066d2:	4401      	add	r1, r0
 80066d4:	b2d3      	uxtb	r3, r2
 80066d6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 80066d8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80066dc:	f04f 0200 	mov.w	r2, #0
 80066e0:	f04f 0300 	mov.w	r3, #0
 80066e4:	000a      	movs	r2, r1
 80066e6:	2300      	movs	r3, #0
 80066e8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80066ea:	3104      	adds	r1, #4
 80066ec:	6838      	ldr	r0, [r7, #0]
 80066ee:	4401      	add	r1, r0
 80066f0:	b2d3      	uxtb	r3, r2
 80066f2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 80066f4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80066f8:	f04f 0200 	mov.w	r2, #0
 80066fc:	f04f 0300 	mov.w	r3, #0
 8006700:	0a0a      	lsrs	r2, r1, #8
 8006702:	2300      	movs	r3, #0
 8006704:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006706:	3105      	adds	r1, #5
 8006708:	6838      	ldr	r0, [r7, #0]
 800670a:	4401      	add	r1, r0
 800670c:	b2d3      	uxtb	r3, r2
 800670e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8006710:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006714:	f04f 0200 	mov.w	r2, #0
 8006718:	f04f 0300 	mov.w	r3, #0
 800671c:	0c0a      	lsrs	r2, r1, #16
 800671e:	2300      	movs	r3, #0
 8006720:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006722:	3106      	adds	r1, #6
 8006724:	6838      	ldr	r0, [r7, #0]
 8006726:	4401      	add	r1, r0
 8006728:	b2d3      	uxtb	r3, r2
 800672a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 800672c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006730:	f04f 0200 	mov.w	r2, #0
 8006734:	f04f 0300 	mov.w	r3, #0
 8006738:	0e0a      	lsrs	r2, r1, #24
 800673a:	2300      	movs	r3, #0
 800673c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800673e:	3107      	adds	r1, #7
 8006740:	6838      	ldr	r0, [r7, #0]
 8006742:	4401      	add	r1, r0
 8006744:	b2d3      	uxtb	r3, r2
 8006746:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 8006748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800674a:	3308      	adds	r3, #8
 800674c:	627b      	str	r3, [r7, #36]	@ 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8006754:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8006758:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800675c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800675e:	6838      	ldr	r0, [r7, #0]
 8006760:	4401      	add	r1, r0
 8006762:	b2d3      	uxtb	r3, r2
 8006764:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8006766:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800676a:	f04f 0200 	mov.w	r2, #0
 800676e:	f04f 0300 	mov.w	r3, #0
 8006772:	0a02      	lsrs	r2, r0, #8
 8006774:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8006778:	0a0b      	lsrs	r3, r1, #8
 800677a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800677c:	3101      	adds	r1, #1
 800677e:	6838      	ldr	r0, [r7, #0]
 8006780:	4401      	add	r1, r0
 8006782:	b2d3      	uxtb	r3, r2
 8006784:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8006786:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800678a:	f04f 0200 	mov.w	r2, #0
 800678e:	f04f 0300 	mov.w	r3, #0
 8006792:	0c02      	lsrs	r2, r0, #16
 8006794:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8006798:	0c0b      	lsrs	r3, r1, #16
 800679a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800679c:	3102      	adds	r1, #2
 800679e:	6838      	ldr	r0, [r7, #0]
 80067a0:	4401      	add	r1, r0
 80067a2:	b2d3      	uxtb	r3, r2
 80067a4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 80067a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80067aa:	f04f 0200 	mov.w	r2, #0
 80067ae:	f04f 0300 	mov.w	r3, #0
 80067b2:	0e02      	lsrs	r2, r0, #24
 80067b4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80067b8:	0e0b      	lsrs	r3, r1, #24
 80067ba:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80067bc:	3103      	adds	r1, #3
 80067be:	6838      	ldr	r0, [r7, #0]
 80067c0:	4401      	add	r1, r0
 80067c2:	b2d3      	uxtb	r3, r2
 80067c4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 80067c6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80067ca:	f04f 0200 	mov.w	r2, #0
 80067ce:	f04f 0300 	mov.w	r3, #0
 80067d2:	000a      	movs	r2, r1
 80067d4:	2300      	movs	r3, #0
 80067d6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80067d8:	3104      	adds	r1, #4
 80067da:	6838      	ldr	r0, [r7, #0]
 80067dc:	4401      	add	r1, r0
 80067de:	b2d3      	uxtb	r3, r2
 80067e0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 80067e2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80067e6:	f04f 0200 	mov.w	r2, #0
 80067ea:	f04f 0300 	mov.w	r3, #0
 80067ee:	0a0a      	lsrs	r2, r1, #8
 80067f0:	2300      	movs	r3, #0
 80067f2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80067f4:	3105      	adds	r1, #5
 80067f6:	6838      	ldr	r0, [r7, #0]
 80067f8:	4401      	add	r1, r0
 80067fa:	b2d3      	uxtb	r3, r2
 80067fc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 80067fe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006802:	f04f 0200 	mov.w	r2, #0
 8006806:	f04f 0300 	mov.w	r3, #0
 800680a:	0c0a      	lsrs	r2, r1, #16
 800680c:	2300      	movs	r3, #0
 800680e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006810:	3106      	adds	r1, #6
 8006812:	6838      	ldr	r0, [r7, #0]
 8006814:	4401      	add	r1, r0
 8006816:	b2d3      	uxtb	r3, r2
 8006818:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 800681a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800681e:	f04f 0200 	mov.w	r2, #0
 8006822:	f04f 0300 	mov.w	r3, #0
 8006826:	0e0a      	lsrs	r2, r1, #24
 8006828:	2300      	movs	r3, #0
 800682a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800682c:	3107      	adds	r1, #7
 800682e:	6838      	ldr	r0, [r7, #0]
 8006830:	4401      	add	r1, r0
 8006832:	b2d3      	uxtb	r3, r2
 8006834:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 8006836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006838:	3308      	adds	r3, #8
 800683a:	627b      	str	r3, [r7, #36]	@ 0x24
      return offset;
 800683c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 800683e:	4618      	mov	r0, r3
 8006840:	372c      	adds	r7, #44	@ 0x2c
 8006842:	46bd      	mov	sp, r7
 8006844:	bc80      	pop	{r7}
 8006846:	4770      	bx	lr

08006848 <_ZN13geometry_msgs5Point11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8006848:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800684c:	b0eb      	sub	sp, #428	@ 0x1ac
 800684e:	af00      	add	r7, sp, #0
 8006850:	f8c7 0184 	str.w	r0, [r7, #388]	@ 0x184
 8006854:	f8c7 1180 	str.w	r1, [r7, #384]	@ 0x180
    {
      int offset = 0;
 8006858:	2300      	movs	r3, #0
 800685a:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 800685e:	f04f 0200 	mov.w	r2, #0
 8006862:	f04f 0300 	mov.w	r3, #0
 8006866:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800686a:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 800686e:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 8006872:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8006876:	4413      	add	r3, r2
 8006878:	781b      	ldrb	r3, [r3, #0]
 800687a:	b2db      	uxtb	r3, r3
 800687c:	2200      	movs	r2, #0
 800687e:	461c      	mov	r4, r3
 8006880:	4615      	mov	r5, r2
 8006882:	ea40 0804 	orr.w	r8, r0, r4
 8006886:	ea41 0905 	orr.w	r9, r1, r5
 800688a:	e9c7 8966 	strd	r8, r9, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800688e:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8006892:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8006896:	1c5a      	adds	r2, r3, #1
 8006898:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800689c:	4413      	add	r3, r2
 800689e:	781b      	ldrb	r3, [r3, #0]
 80068a0:	b2db      	uxtb	r3, r3
 80068a2:	2200      	movs	r2, #0
 80068a4:	469a      	mov	sl, r3
 80068a6:	4693      	mov	fp, r2
 80068a8:	f04f 0200 	mov.w	r2, #0
 80068ac:	f04f 0300 	mov.w	r3, #0
 80068b0:	ea4f 230b 	mov.w	r3, fp, lsl #8
 80068b4:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 80068b8:	ea4f 220a 	mov.w	r2, sl, lsl #8
 80068bc:	ea40 0402 	orr.w	r4, r0, r2
 80068c0:	f8c7 4178 	str.w	r4, [r7, #376]	@ 0x178
 80068c4:	430b      	orrs	r3, r1
 80068c6:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80068ca:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	@ 0x178
 80068ce:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80068d2:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 80068d6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80068da:	1c9a      	adds	r2, r3, #2
 80068dc:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80068e0:	4413      	add	r3, r2
 80068e2:	781b      	ldrb	r3, [r3, #0]
 80068e4:	b2db      	uxtb	r3, r3
 80068e6:	2200      	movs	r2, #0
 80068e8:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 80068ec:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
 80068f0:	f04f 0200 	mov.w	r2, #0
 80068f4:	f04f 0300 	mov.w	r3, #0
 80068f8:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	@ 0x170
 80068fc:	464c      	mov	r4, r9
 80068fe:	0423      	lsls	r3, r4, #16
 8006900:	46c4      	mov	ip, r8
 8006902:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
 8006906:	4644      	mov	r4, r8
 8006908:	0422      	lsls	r2, r4, #16
 800690a:	ea40 0402 	orr.w	r4, r0, r2
 800690e:	f8c7 4168 	str.w	r4, [r7, #360]	@ 0x168
 8006912:	430b      	orrs	r3, r1
 8006914:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 8006918:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	@ 0x168
 800691c:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8006920:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8006924:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8006928:	1cda      	adds	r2, r3, #3
 800692a:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800692e:	4413      	add	r3, r2
 8006930:	781b      	ldrb	r3, [r3, #0]
 8006932:	b2db      	uxtb	r3, r3
 8006934:	2200      	movs	r2, #0
 8006936:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 800693a:	f8c7 2164 	str.w	r2, [r7, #356]	@ 0x164
 800693e:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	@ 0x160
 8006942:	4623      	mov	r3, r4
 8006944:	0a1b      	lsrs	r3, r3, #8
 8006946:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 800694a:	4623      	mov	r3, r4
 800694c:	061b      	lsls	r3, r3, #24
 800694e:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8006952:	e9d7 3456 	ldrd	r3, r4, [r7, #344]	@ 0x158
 8006956:	461a      	mov	r2, r3
 8006958:	4302      	orrs	r2, r0
 800695a:	f8c7 2150 	str.w	r2, [r7, #336]	@ 0x150
 800695e:	4623      	mov	r3, r4
 8006960:	430b      	orrs	r3, r1
 8006962:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8006966:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	@ 0x150
 800696a:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800696e:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8006972:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8006976:	1d1a      	adds	r2, r3, #4
 8006978:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800697c:	4413      	add	r3, r2
 800697e:	781b      	ldrb	r3, [r3, #0]
 8006980:	b2db      	uxtb	r3, r3
 8006982:	2200      	movs	r2, #0
 8006984:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 8006988:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 800698c:	f04f 0200 	mov.w	r2, #0
 8006990:	f04f 0300 	mov.w	r3, #0
 8006994:	f8d7 4148 	ldr.w	r4, [r7, #328]	@ 0x148
 8006998:	0023      	movs	r3, r4
 800699a:	2200      	movs	r2, #0
 800699c:	ea40 0402 	orr.w	r4, r0, r2
 80069a0:	f8c7 4140 	str.w	r4, [r7, #320]	@ 0x140
 80069a4:	430b      	orrs	r3, r1
 80069a6:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 80069aa:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	@ 0x140
 80069ae:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80069b2:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 80069b6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80069ba:	1d5a      	adds	r2, r3, #5
 80069bc:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80069c0:	4413      	add	r3, r2
 80069c2:	781b      	ldrb	r3, [r3, #0]
 80069c4:	b2db      	uxtb	r3, r3
 80069c6:	2200      	movs	r2, #0
 80069c8:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 80069cc:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 80069d0:	f04f 0200 	mov.w	r2, #0
 80069d4:	f04f 0300 	mov.w	r3, #0
 80069d8:	f8d7 4138 	ldr.w	r4, [r7, #312]	@ 0x138
 80069dc:	0223      	lsls	r3, r4, #8
 80069de:	2200      	movs	r2, #0
 80069e0:	ea40 0402 	orr.w	r4, r0, r2
 80069e4:	f8c7 4130 	str.w	r4, [r7, #304]	@ 0x130
 80069e8:	430b      	orrs	r3, r1
 80069ea:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 80069ee:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	@ 0x130
 80069f2:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80069f6:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 80069fa:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80069fe:	1d9a      	adds	r2, r3, #6
 8006a00:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8006a04:	4413      	add	r3, r2
 8006a06:	781b      	ldrb	r3, [r3, #0]
 8006a08:	b2db      	uxtb	r3, r3
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8006a10:	f8c7 212c 	str.w	r2, [r7, #300]	@ 0x12c
 8006a14:	f04f 0200 	mov.w	r2, #0
 8006a18:	f04f 0300 	mov.w	r3, #0
 8006a1c:	f8d7 4128 	ldr.w	r4, [r7, #296]	@ 0x128
 8006a20:	0423      	lsls	r3, r4, #16
 8006a22:	2200      	movs	r2, #0
 8006a24:	ea40 0402 	orr.w	r4, r0, r2
 8006a28:	f8c7 4120 	str.w	r4, [r7, #288]	@ 0x120
 8006a2c:	430b      	orrs	r3, r1
 8006a2e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8006a32:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	@ 0x120
 8006a36:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8006a3a:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8006a3e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8006a42:	1dda      	adds	r2, r3, #7
 8006a44:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8006a48:	4413      	add	r3, r2
 8006a4a:	781b      	ldrb	r3, [r3, #0]
 8006a4c:	b2db      	uxtb	r3, r3
 8006a4e:	2200      	movs	r2, #0
 8006a50:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8006a54:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8006a58:	f04f 0200 	mov.w	r2, #0
 8006a5c:	f04f 0300 	mov.w	r3, #0
 8006a60:	f8d7 4118 	ldr.w	r4, [r7, #280]	@ 0x118
 8006a64:	0623      	lsls	r3, r4, #24
 8006a66:	2200      	movs	r2, #0
 8006a68:	ea40 0402 	orr.w	r4, r0, r2
 8006a6c:	f8c7 4110 	str.w	r4, [r7, #272]	@ 0x110
 8006a70:	430b      	orrs	r3, r1
 8006a72:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8006a76:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	@ 0x110
 8006a7a:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      this->x = u_x.real;
 8006a7e:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8006a82:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8006a86:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 8006a8a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8006a8e:	3308      	adds	r3, #8
 8006a90:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8006a94:	f04f 0200 	mov.w	r2, #0
 8006a98:	f04f 0300 	mov.w	r3, #0
 8006a9c:	e9c7 2364 	strd	r2, r3, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8006aa0:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8006aa4:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 8006aa8:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8006aac:	4413      	add	r3, r2
 8006aae:	781b      	ldrb	r3, [r3, #0]
 8006ab0:	b2db      	uxtb	r3, r3
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8006ab8:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 8006abc:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	@ 0x108
 8006ac0:	461a      	mov	r2, r3
 8006ac2:	4302      	orrs	r2, r0
 8006ac4:	f8c7 2100 	str.w	r2, [r7, #256]	@ 0x100
 8006ac8:	4623      	mov	r3, r4
 8006aca:	430b      	orrs	r3, r1
 8006acc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006ad0:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	@ 0x100
 8006ad4:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8006ad8:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8006adc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8006ae0:	1c5a      	adds	r2, r3, #1
 8006ae2:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8006ae6:	4413      	add	r3, r2
 8006ae8:	781b      	ldrb	r3, [r3, #0]
 8006aea:	b2db      	uxtb	r3, r3
 8006aec:	2200      	movs	r2, #0
 8006aee:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006af2:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 8006af6:	f04f 0200 	mov.w	r2, #0
 8006afa:	f04f 0300 	mov.w	r3, #0
 8006afe:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	@ 0xf8
 8006b02:	464c      	mov	r4, r9
 8006b04:	0223      	lsls	r3, r4, #8
 8006b06:	46c4      	mov	ip, r8
 8006b08:	ea43 631c 	orr.w	r3, r3, ip, lsr #24
 8006b0c:	4644      	mov	r4, r8
 8006b0e:	0222      	lsls	r2, r4, #8
 8006b10:	ea40 0402 	orr.w	r4, r0, r2
 8006b14:	f8c7 40f0 	str.w	r4, [r7, #240]	@ 0xf0
 8006b18:	430b      	orrs	r3, r1
 8006b1a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006b1e:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	@ 0xf0
 8006b22:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8006b26:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8006b2a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8006b2e:	1c9a      	adds	r2, r3, #2
 8006b30:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8006b34:	4413      	add	r3, r2
 8006b36:	781b      	ldrb	r3, [r3, #0]
 8006b38:	b2db      	uxtb	r3, r3
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006b40:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006b44:	f04f 0200 	mov.w	r2, #0
 8006b48:	f04f 0300 	mov.w	r3, #0
 8006b4c:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8006b50:	464c      	mov	r4, r9
 8006b52:	0423      	lsls	r3, r4, #16
 8006b54:	46c4      	mov	ip, r8
 8006b56:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
 8006b5a:	4644      	mov	r4, r8
 8006b5c:	0422      	lsls	r2, r4, #16
 8006b5e:	ea40 0402 	orr.w	r4, r0, r2
 8006b62:	f8c7 40e0 	str.w	r4, [r7, #224]	@ 0xe0
 8006b66:	430b      	orrs	r3, r1
 8006b68:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006b6c:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	@ 0xe0
 8006b70:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8006b74:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8006b78:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8006b7c:	1cda      	adds	r2, r3, #3
 8006b7e:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8006b82:	4413      	add	r3, r2
 8006b84:	781b      	ldrb	r3, [r3, #0]
 8006b86:	b2db      	uxtb	r3, r3
 8006b88:	2200      	movs	r2, #0
 8006b8a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006b8e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006b92:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8006b96:	4623      	mov	r3, r4
 8006b98:	0a1b      	lsrs	r3, r3, #8
 8006b9a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006b9e:	4623      	mov	r3, r4
 8006ba0:	061b      	lsls	r3, r3, #24
 8006ba2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006ba6:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	@ 0xd0
 8006baa:	461a      	mov	r2, r3
 8006bac:	4302      	orrs	r2, r0
 8006bae:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8006bb2:	4623      	mov	r3, r4
 8006bb4:	430b      	orrs	r3, r1
 8006bb6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006bba:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	@ 0xc8
 8006bbe:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8006bc2:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8006bc6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8006bca:	1d1a      	adds	r2, r3, #4
 8006bcc:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8006bd0:	4413      	add	r3, r2
 8006bd2:	781b      	ldrb	r3, [r3, #0]
 8006bd4:	b2db      	uxtb	r3, r3
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006bdc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006be0:	f04f 0200 	mov.w	r2, #0
 8006be4:	f04f 0300 	mov.w	r3, #0
 8006be8:	f8d7 40c0 	ldr.w	r4, [r7, #192]	@ 0xc0
 8006bec:	0023      	movs	r3, r4
 8006bee:	2200      	movs	r2, #0
 8006bf0:	ea40 0402 	orr.w	r4, r0, r2
 8006bf4:	f8c7 40b8 	str.w	r4, [r7, #184]	@ 0xb8
 8006bf8:	430b      	orrs	r3, r1
 8006bfa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006bfe:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	@ 0xb8
 8006c02:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8006c06:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8006c0a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8006c0e:	1d5a      	adds	r2, r3, #5
 8006c10:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8006c14:	4413      	add	r3, r2
 8006c16:	781b      	ldrb	r3, [r3, #0]
 8006c18:	b2db      	uxtb	r3, r3
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006c20:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8006c24:	f04f 0200 	mov.w	r2, #0
 8006c28:	f04f 0300 	mov.w	r3, #0
 8006c2c:	f8d7 40b0 	ldr.w	r4, [r7, #176]	@ 0xb0
 8006c30:	0223      	lsls	r3, r4, #8
 8006c32:	2200      	movs	r2, #0
 8006c34:	ea40 0402 	orr.w	r4, r0, r2
 8006c38:	f8c7 40a8 	str.w	r4, [r7, #168]	@ 0xa8
 8006c3c:	430b      	orrs	r3, r1
 8006c3e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006c42:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	@ 0xa8
 8006c46:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8006c4a:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8006c4e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8006c52:	1d9a      	adds	r2, r3, #6
 8006c54:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8006c58:	4413      	add	r3, r2
 8006c5a:	781b      	ldrb	r3, [r3, #0]
 8006c5c:	b2db      	uxtb	r3, r3
 8006c5e:	2200      	movs	r2, #0
 8006c60:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006c64:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006c68:	f04f 0200 	mov.w	r2, #0
 8006c6c:	f04f 0300 	mov.w	r3, #0
 8006c70:	f8d7 40a0 	ldr.w	r4, [r7, #160]	@ 0xa0
 8006c74:	0423      	lsls	r3, r4, #16
 8006c76:	2200      	movs	r2, #0
 8006c78:	ea40 0402 	orr.w	r4, r0, r2
 8006c7c:	f8c7 4098 	str.w	r4, [r7, #152]	@ 0x98
 8006c80:	430b      	orrs	r3, r1
 8006c82:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006c86:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	@ 0x98
 8006c8a:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8006c8e:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8006c92:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8006c96:	1dda      	adds	r2, r3, #7
 8006c98:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8006c9c:	4413      	add	r3, r2
 8006c9e:	781b      	ldrb	r3, [r3, #0]
 8006ca0:	b2db      	uxtb	r3, r3
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006ca8:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006cac:	f04f 0200 	mov.w	r2, #0
 8006cb0:	f04f 0300 	mov.w	r3, #0
 8006cb4:	f8d7 4090 	ldr.w	r4, [r7, #144]	@ 0x90
 8006cb8:	0623      	lsls	r3, r4, #24
 8006cba:	2200      	movs	r2, #0
 8006cbc:	ea40 0402 	orr.w	r4, r0, r2
 8006cc0:	f8c7 4088 	str.w	r4, [r7, #136]	@ 0x88
 8006cc4:	430b      	orrs	r3, r1
 8006cc6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006cca:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	@ 0x88
 8006cce:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      this->y = u_y.real;
 8006cd2:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8006cd6:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8006cda:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8006cde:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8006ce2:	3308      	adds	r3, #8
 8006ce4:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8006ce8:	f04f 0200 	mov.w	r2, #0
 8006cec:	f04f 0300 	mov.w	r3, #0
 8006cf0:	e9c7 2362 	strd	r2, r3, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8006cf4:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8006cf8:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 8006cfc:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8006d00:	4413      	add	r3, r2
 8006d02:	781b      	ldrb	r3, [r3, #0]
 8006d04:	b2db      	uxtb	r3, r3
 8006d06:	2200      	movs	r2, #0
 8006d08:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006d0c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8006d10:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	@ 0x80
 8006d14:	461a      	mov	r2, r3
 8006d16:	4302      	orrs	r2, r0
 8006d18:	67ba      	str	r2, [r7, #120]	@ 0x78
 8006d1a:	4623      	mov	r3, r4
 8006d1c:	430b      	orrs	r3, r1
 8006d1e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006d20:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	@ 0x78
 8006d24:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8006d28:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8006d2c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8006d30:	1c5a      	adds	r2, r3, #1
 8006d32:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8006d36:	4413      	add	r3, r2
 8006d38:	781b      	ldrb	r3, [r3, #0]
 8006d3a:	b2db      	uxtb	r3, r3
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	673b      	str	r3, [r7, #112]	@ 0x70
 8006d40:	677a      	str	r2, [r7, #116]	@ 0x74
 8006d42:	f04f 0200 	mov.w	r2, #0
 8006d46:	f04f 0300 	mov.w	r3, #0
 8006d4a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006d4e:	464c      	mov	r4, r9
 8006d50:	0223      	lsls	r3, r4, #8
 8006d52:	46c4      	mov	ip, r8
 8006d54:	ea43 631c 	orr.w	r3, r3, ip, lsr #24
 8006d58:	4644      	mov	r4, r8
 8006d5a:	0222      	lsls	r2, r4, #8
 8006d5c:	ea40 0402 	orr.w	r4, r0, r2
 8006d60:	66bc      	str	r4, [r7, #104]	@ 0x68
 8006d62:	430b      	orrs	r3, r1
 8006d64:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006d66:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	@ 0x68
 8006d6a:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8006d6e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8006d72:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8006d76:	1c9a      	adds	r2, r3, #2
 8006d78:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8006d7c:	4413      	add	r3, r2
 8006d7e:	781b      	ldrb	r3, [r3, #0]
 8006d80:	b2db      	uxtb	r3, r3
 8006d82:	2200      	movs	r2, #0
 8006d84:	663b      	str	r3, [r7, #96]	@ 0x60
 8006d86:	667a      	str	r2, [r7, #100]	@ 0x64
 8006d88:	f04f 0200 	mov.w	r2, #0
 8006d8c:	f04f 0300 	mov.w	r3, #0
 8006d90:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006d94:	464c      	mov	r4, r9
 8006d96:	0423      	lsls	r3, r4, #16
 8006d98:	46c4      	mov	ip, r8
 8006d9a:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
 8006d9e:	4644      	mov	r4, r8
 8006da0:	0422      	lsls	r2, r4, #16
 8006da2:	ea40 0402 	orr.w	r4, r0, r2
 8006da6:	65bc      	str	r4, [r7, #88]	@ 0x58
 8006da8:	430b      	orrs	r3, r1
 8006daa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006dac:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	@ 0x58
 8006db0:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8006db4:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8006db8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8006dbc:	1cda      	adds	r2, r3, #3
 8006dbe:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8006dc2:	4413      	add	r3, r2
 8006dc4:	781b      	ldrb	r3, [r3, #0]
 8006dc6:	b2db      	uxtb	r3, r3
 8006dc8:	2200      	movs	r2, #0
 8006dca:	653b      	str	r3, [r7, #80]	@ 0x50
 8006dcc:	657a      	str	r2, [r7, #84]	@ 0x54
 8006dce:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8006dd2:	4623      	mov	r3, r4
 8006dd4:	0a1b      	lsrs	r3, r3, #8
 8006dd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006dd8:	4623      	mov	r3, r4
 8006dda:	061b      	lsls	r3, r3, #24
 8006ddc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006dde:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 8006de2:	461a      	mov	r2, r3
 8006de4:	4302      	orrs	r2, r0
 8006de6:	643a      	str	r2, [r7, #64]	@ 0x40
 8006de8:	4623      	mov	r3, r4
 8006dea:	430b      	orrs	r3, r1
 8006dec:	647b      	str	r3, [r7, #68]	@ 0x44
 8006dee:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8006df2:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8006df6:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8006dfa:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8006dfe:	1d1a      	adds	r2, r3, #4
 8006e00:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8006e04:	4413      	add	r3, r2
 8006e06:	781b      	ldrb	r3, [r3, #0]
 8006e08:	b2db      	uxtb	r3, r3
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006e0e:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006e10:	f04f 0200 	mov.w	r2, #0
 8006e14:	f04f 0300 	mov.w	r3, #0
 8006e18:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 8006e1a:	0023      	movs	r3, r4
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	ea40 0402 	orr.w	r4, r0, r2
 8006e22:	633c      	str	r4, [r7, #48]	@ 0x30
 8006e24:	430b      	orrs	r3, r1
 8006e26:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e28:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8006e2c:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8006e30:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8006e34:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8006e38:	1d5a      	adds	r2, r3, #5
 8006e3a:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8006e3e:	4413      	add	r3, r2
 8006e40:	781b      	ldrb	r3, [r3, #0]
 8006e42:	b2db      	uxtb	r3, r3
 8006e44:	2200      	movs	r2, #0
 8006e46:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006e48:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006e4a:	f04f 0200 	mov.w	r2, #0
 8006e4e:	f04f 0300 	mov.w	r3, #0
 8006e52:	6abc      	ldr	r4, [r7, #40]	@ 0x28
 8006e54:	0223      	lsls	r3, r4, #8
 8006e56:	2200      	movs	r2, #0
 8006e58:	ea40 0402 	orr.w	r4, r0, r2
 8006e5c:	623c      	str	r4, [r7, #32]
 8006e5e:	430b      	orrs	r3, r1
 8006e60:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e62:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8006e66:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8006e6a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8006e6e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8006e72:	3306      	adds	r3, #6
 8006e74:	f8d7 2180 	ldr.w	r2, [r7, #384]	@ 0x180
 8006e78:	4413      	add	r3, r2
 8006e7a:	781b      	ldrb	r3, [r3, #0]
 8006e7c:	b2db      	uxtb	r3, r3
 8006e7e:	2200      	movs	r2, #0
 8006e80:	61bb      	str	r3, [r7, #24]
 8006e82:	61fa      	str	r2, [r7, #28]
 8006e84:	f04f 0200 	mov.w	r2, #0
 8006e88:	f04f 0300 	mov.w	r3, #0
 8006e8c:	69bc      	ldr	r4, [r7, #24]
 8006e8e:	0423      	lsls	r3, r4, #16
 8006e90:	2200      	movs	r2, #0
 8006e92:	ea40 0402 	orr.w	r4, r0, r2
 8006e96:	613c      	str	r4, [r7, #16]
 8006e98:	430b      	orrs	r3, r1
 8006e9a:	617b      	str	r3, [r7, #20]
 8006e9c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8006ea0:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8006ea4:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8006ea8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8006eac:	3307      	adds	r3, #7
 8006eae:	f8d7 2180 	ldr.w	r2, [r7, #384]	@ 0x180
 8006eb2:	4413      	add	r3, r2
 8006eb4:	781b      	ldrb	r3, [r3, #0]
 8006eb6:	b2db      	uxtb	r3, r3
 8006eb8:	2200      	movs	r2, #0
 8006eba:	60bb      	str	r3, [r7, #8]
 8006ebc:	60fa      	str	r2, [r7, #12]
 8006ebe:	f04f 0200 	mov.w	r2, #0
 8006ec2:	f04f 0300 	mov.w	r3, #0
 8006ec6:	68bc      	ldr	r4, [r7, #8]
 8006ec8:	0623      	lsls	r3, r4, #24
 8006eca:	2200      	movs	r2, #0
 8006ecc:	ea40 0402 	orr.w	r4, r0, r2
 8006ed0:	603c      	str	r4, [r7, #0]
 8006ed2:	430b      	orrs	r3, r1
 8006ed4:	607b      	str	r3, [r7, #4]
 8006ed6:	e9d7 3400 	ldrd	r3, r4, [r7]
 8006eda:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      this->z = u_z.real;
 8006ede:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 8006ee2:	f8d7 1184 	ldr.w	r1, [r7, #388]	@ 0x184
 8006ee6:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 8006eea:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8006eee:	3308      	adds	r3, #8
 8006ef0:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
     return offset;
 8006ef4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
    }
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f507 77d6 	add.w	r7, r7, #428	@ 0x1ac
 8006efe:	46bd      	mov	sp, r7
 8006f00:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8006f04:	4770      	bx	lr
	...

08006f08 <_ZN13geometry_msgs5Point7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Point"; };
 8006f08:	b480      	push	{r7}
 8006f0a:	b083      	sub	sp, #12
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
 8006f10:	4b02      	ldr	r3, [pc, #8]	@ (8006f1c <_ZN13geometry_msgs5Point7getTypeEv+0x14>)
 8006f12:	4618      	mov	r0, r3
 8006f14:	370c      	adds	r7, #12
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bc80      	pop	{r7}
 8006f1a:	4770      	bx	lr
 8006f1c:	0800d188 	.word	0x0800d188

08006f20 <_ZN13geometry_msgs5Point6getMD5Ev>:
    virtual const char * getMD5() override { return "4a842b65f413084dc2b10fb484ea7f17"; };
 8006f20:	b480      	push	{r7}
 8006f22:	b083      	sub	sp, #12
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
 8006f28:	4b02      	ldr	r3, [pc, #8]	@ (8006f34 <_ZN13geometry_msgs5Point6getMD5Ev+0x14>)
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	370c      	adds	r7, #12
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bc80      	pop	{r7}
 8006f32:	4770      	bx	lr
 8006f34:	0800d004 	.word	0x0800d004

08006f38 <_ZN13geometry_msgs4PoseC1Ev>:
      typedef geometry_msgs::Point _position_type;
      _position_type position;
      typedef geometry_msgs::Quaternion _orientation_type;
      _orientation_type orientation;

    Pose():
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b082      	sub	sp, #8
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
      position(),
      orientation()
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	4618      	mov	r0, r3
 8006f44:	f7fa fbe0 	bl	8001708 <_ZN3ros3MsgC1Ev>
 8006f48:	4a08      	ldr	r2, [pc, #32]	@ (8006f6c <_ZN13geometry_msgs4PoseC1Ev+0x34>)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	601a      	str	r2, [r3, #0]
      position(),
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	3308      	adds	r3, #8
 8006f52:	4618      	mov	r0, r3
 8006f54:	f7ff fade 	bl	8006514 <_ZN13geometry_msgs5PointC1Ev>
      orientation()
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	3328      	adds	r3, #40	@ 0x28
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	f7fb fdd1 	bl	8002b04 <_ZN13geometry_msgs10QuaternionC1Ev>
    {
    }
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	4618      	mov	r0, r3
 8006f66:	3708      	adds	r7, #8
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bd80      	pop	{r7, pc}
 8006f6c:	0800d3cc 	.word	0x0800d3cc

08006f70 <_ZNK13geometry_msgs4Pose9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b084      	sub	sp, #16
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	60fb      	str	r3, [r7, #12]
      offset += this->position.serialize(outbuffer + offset);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f103 0008 	add.w	r0, r3, #8
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	683a      	ldr	r2, [r7, #0]
 8006f88:	4413      	add	r3, r2
 8006f8a:	4619      	mov	r1, r3
 8006f8c:	f7ff faea 	bl	8006564 <_ZNK13geometry_msgs5Point9serializeEPh>
 8006f90:	4602      	mov	r2, r0
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	4413      	add	r3, r2
 8006f96:	60fb      	str	r3, [r7, #12]
      offset += this->orientation.serialize(outbuffer + offset);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	683a      	ldr	r2, [r7, #0]
 8006fa2:	4413      	add	r3, r2
 8006fa4:	4619      	mov	r1, r3
 8006fa6:	f7fb fddb 	bl	8002b60 <_ZNK13geometry_msgs10Quaternion9serializeEPh>
 8006faa:	4602      	mov	r2, r0
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	4413      	add	r3, r2
 8006fb0:	60fb      	str	r3, [r7, #12]
      return offset;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
    }
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3710      	adds	r7, #16
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}

08006fbc <_ZN13geometry_msgs4Pose11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b084      	sub	sp, #16
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
 8006fc4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	60fb      	str	r3, [r7, #12]
      offset += this->position.deserialize(inbuffer + offset);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f103 0008 	add.w	r0, r3, #8
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	683a      	ldr	r2, [r7, #0]
 8006fd4:	4413      	add	r3, r2
 8006fd6:	4619      	mov	r1, r3
 8006fd8:	f7ff fc36 	bl	8006848 <_ZN13geometry_msgs5Point11deserializeEPh>
 8006fdc:	4602      	mov	r2, r0
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	4413      	add	r3, r2
 8006fe2:	60fb      	str	r3, [r7, #12]
      offset += this->orientation.deserialize(inbuffer + offset);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	683a      	ldr	r2, [r7, #0]
 8006fee:	4413      	add	r3, r2
 8006ff0:	4619      	mov	r1, r3
 8006ff2:	f7fb ff9e 	bl	8002f32 <_ZN13geometry_msgs10Quaternion11deserializeEPh>
 8006ff6:	4602      	mov	r2, r0
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	4413      	add	r3, r2
 8006ffc:	60fb      	str	r3, [r7, #12]
     return offset;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
    }
 8007000:	4618      	mov	r0, r3
 8007002:	3710      	adds	r7, #16
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}

08007008 <_ZN13geometry_msgs4Pose7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Pose"; };
 8007008:	b480      	push	{r7}
 800700a:	b083      	sub	sp, #12
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
 8007010:	4b02      	ldr	r3, [pc, #8]	@ (800701c <_ZN13geometry_msgs4Pose7getTypeEv+0x14>)
 8007012:	4618      	mov	r0, r3
 8007014:	370c      	adds	r7, #12
 8007016:	46bd      	mov	sp, r7
 8007018:	bc80      	pop	{r7}
 800701a:	4770      	bx	lr
 800701c:	0800d19c 	.word	0x0800d19c

08007020 <_ZN13geometry_msgs4Pose6getMD5Ev>:
    virtual const char * getMD5() override { return "e45d45a5a1ce597b249e23fb30fc871f"; };
 8007020:	b480      	push	{r7}
 8007022:	b083      	sub	sp, #12
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
 8007028:	4b02      	ldr	r3, [pc, #8]	@ (8007034 <_ZN13geometry_msgs4Pose6getMD5Ev+0x14>)
 800702a:	4618      	mov	r0, r3
 800702c:	370c      	adds	r7, #12
 800702e:	46bd      	mov	sp, r7
 8007030:	bc80      	pop	{r7}
 8007032:	4770      	bx	lr
 8007034:	0800d1b0 	.word	0x0800d1b0

08007038 <_ZN13geometry_msgs18PoseWithCovarianceC1Ev>:
    public:
      typedef geometry_msgs::Pose _pose_type;
      _pose_type pose;
      double covariance[36];

    PoseWithCovariance():
 8007038:	b580      	push	{r7, lr}
 800703a:	b082      	sub	sp, #8
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
      pose(),
      covariance()
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	4618      	mov	r0, r3
 8007044:	f7fa fb60 	bl	8001708 <_ZN3ros3MsgC1Ev>
 8007048:	4a0d      	ldr	r2, [pc, #52]	@ (8007080 <_ZN13geometry_msgs18PoseWithCovarianceC1Ev+0x48>)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	601a      	str	r2, [r3, #0]
      pose(),
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	3308      	adds	r3, #8
 8007052:	4618      	mov	r0, r3
 8007054:	f7ff ff70 	bl	8006f38 <_ZN13geometry_msgs4PoseC1Ev>
      covariance()
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f103 0258 	add.w	r2, r3, #88	@ 0x58
 800705e:	2323      	movs	r3, #35	@ 0x23
 8007060:	e007      	b.n	8007072 <_ZN13geometry_msgs18PoseWithCovarianceC1Ev+0x3a>
 8007062:	f04f 0000 	mov.w	r0, #0
 8007066:	f04f 0100 	mov.w	r1, #0
 800706a:	e9c2 0100 	strd	r0, r1, [r2]
 800706e:	3b01      	subs	r3, #1
 8007070:	3208      	adds	r2, #8
 8007072:	2b00      	cmp	r3, #0
 8007074:	daf5      	bge.n	8007062 <_ZN13geometry_msgs18PoseWithCovarianceC1Ev+0x2a>
    {
    }
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	4618      	mov	r0, r3
 800707a:	3708      	adds	r7, #8
 800707c:	46bd      	mov	sp, r7
 800707e:	bd80      	pop	{r7, pc}
 8007080:	0800d3b4 	.word	0x0800d3b4

08007084 <_ZNK13geometry_msgs18PoseWithCovariance9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8007084:	b580      	push	{r7, lr}
 8007086:	b086      	sub	sp, #24
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
 800708c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800708e:	2300      	movs	r3, #0
 8007090:	617b      	str	r3, [r7, #20]
      offset += this->pose.serialize(outbuffer + offset);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f103 0008 	add.w	r0, r3, #8
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	683a      	ldr	r2, [r7, #0]
 800709c:	4413      	add	r3, r2
 800709e:	4619      	mov	r1, r3
 80070a0:	f7ff ff66 	bl	8006f70 <_ZNK13geometry_msgs4Pose9serializeEPh>
 80070a4:	4602      	mov	r2, r0
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	4413      	add	r3, r2
 80070aa:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 36; i++){
 80070ac:	2300      	movs	r3, #0
 80070ae:	613b      	str	r3, [r7, #16]
 80070b0:	e07d      	b.n	80071ae <_ZNK13geometry_msgs18PoseWithCovariance9serializeEPh+0x12a>
      union {
        double real;
        uint64_t base;
      } u_covariancei;
      u_covariancei.real = this->covariance[i];
 80070b2:	687a      	ldr	r2, [r7, #4]
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	330b      	adds	r3, #11
 80070b8:	00db      	lsls	r3, r3, #3
 80070ba:	4413      	add	r3, r2
 80070bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070c0:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_covariancei.base >> (8 * 0)) & 0xFF;
 80070c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80070c8:	6979      	ldr	r1, [r7, #20]
 80070ca:	6838      	ldr	r0, [r7, #0]
 80070cc:	4401      	add	r1, r0
 80070ce:	b2d3      	uxtb	r3, r2
 80070d0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_covariancei.base >> (8 * 1)) & 0xFF;
 80070d2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80070d6:	f04f 0200 	mov.w	r2, #0
 80070da:	f04f 0300 	mov.w	r3, #0
 80070de:	0a02      	lsrs	r2, r0, #8
 80070e0:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80070e4:	0a0b      	lsrs	r3, r1, #8
 80070e6:	6979      	ldr	r1, [r7, #20]
 80070e8:	3101      	adds	r1, #1
 80070ea:	6838      	ldr	r0, [r7, #0]
 80070ec:	4401      	add	r1, r0
 80070ee:	b2d3      	uxtb	r3, r2
 80070f0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_covariancei.base >> (8 * 2)) & 0xFF;
 80070f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80070f6:	f04f 0200 	mov.w	r2, #0
 80070fa:	f04f 0300 	mov.w	r3, #0
 80070fe:	0c02      	lsrs	r2, r0, #16
 8007100:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8007104:	0c0b      	lsrs	r3, r1, #16
 8007106:	6979      	ldr	r1, [r7, #20]
 8007108:	3102      	adds	r1, #2
 800710a:	6838      	ldr	r0, [r7, #0]
 800710c:	4401      	add	r1, r0
 800710e:	b2d3      	uxtb	r3, r2
 8007110:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_covariancei.base >> (8 * 3)) & 0xFF;
 8007112:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007116:	f04f 0200 	mov.w	r2, #0
 800711a:	f04f 0300 	mov.w	r3, #0
 800711e:	0e02      	lsrs	r2, r0, #24
 8007120:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8007124:	0e0b      	lsrs	r3, r1, #24
 8007126:	6979      	ldr	r1, [r7, #20]
 8007128:	3103      	adds	r1, #3
 800712a:	6838      	ldr	r0, [r7, #0]
 800712c:	4401      	add	r1, r0
 800712e:	b2d3      	uxtb	r3, r2
 8007130:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_covariancei.base >> (8 * 4)) & 0xFF;
 8007132:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007136:	f04f 0200 	mov.w	r2, #0
 800713a:	f04f 0300 	mov.w	r3, #0
 800713e:	000a      	movs	r2, r1
 8007140:	2300      	movs	r3, #0
 8007142:	6979      	ldr	r1, [r7, #20]
 8007144:	3104      	adds	r1, #4
 8007146:	6838      	ldr	r0, [r7, #0]
 8007148:	4401      	add	r1, r0
 800714a:	b2d3      	uxtb	r3, r2
 800714c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_covariancei.base >> (8 * 5)) & 0xFF;
 800714e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007152:	f04f 0200 	mov.w	r2, #0
 8007156:	f04f 0300 	mov.w	r3, #0
 800715a:	0a0a      	lsrs	r2, r1, #8
 800715c:	2300      	movs	r3, #0
 800715e:	6979      	ldr	r1, [r7, #20]
 8007160:	3105      	adds	r1, #5
 8007162:	6838      	ldr	r0, [r7, #0]
 8007164:	4401      	add	r1, r0
 8007166:	b2d3      	uxtb	r3, r2
 8007168:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_covariancei.base >> (8 * 6)) & 0xFF;
 800716a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800716e:	f04f 0200 	mov.w	r2, #0
 8007172:	f04f 0300 	mov.w	r3, #0
 8007176:	0c0a      	lsrs	r2, r1, #16
 8007178:	2300      	movs	r3, #0
 800717a:	6979      	ldr	r1, [r7, #20]
 800717c:	3106      	adds	r1, #6
 800717e:	6838      	ldr	r0, [r7, #0]
 8007180:	4401      	add	r1, r0
 8007182:	b2d3      	uxtb	r3, r2
 8007184:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_covariancei.base >> (8 * 7)) & 0xFF;
 8007186:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800718a:	f04f 0200 	mov.w	r2, #0
 800718e:	f04f 0300 	mov.w	r3, #0
 8007192:	0e0a      	lsrs	r2, r1, #24
 8007194:	2300      	movs	r3, #0
 8007196:	6979      	ldr	r1, [r7, #20]
 8007198:	3107      	adds	r1, #7
 800719a:	6838      	ldr	r0, [r7, #0]
 800719c:	4401      	add	r1, r0
 800719e:	b2d3      	uxtb	r3, r2
 80071a0:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->covariance[i]);
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	3308      	adds	r3, #8
 80071a6:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 36; i++){
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	3301      	adds	r3, #1
 80071ac:	613b      	str	r3, [r7, #16]
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	2b23      	cmp	r3, #35	@ 0x23
 80071b2:	f67f af7e 	bls.w	80070b2 <_ZNK13geometry_msgs18PoseWithCovariance9serializeEPh+0x2e>
      }
      return offset;
 80071b6:	697b      	ldr	r3, [r7, #20]
    }
 80071b8:	4618      	mov	r0, r3
 80071ba:	3718      	adds	r7, #24
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}

080071c0 <_ZN13geometry_msgs18PoseWithCovariance11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80071c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071c4:	b0a3      	sub	sp, #140	@ 0x8c
 80071c6:	af00      	add	r7, sp, #0
 80071c8:	6778      	str	r0, [r7, #116]	@ 0x74
 80071ca:	6739      	str	r1, [r7, #112]	@ 0x70
    {
      int offset = 0;
 80071cc:	2300      	movs	r3, #0
 80071ce:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      offset += this->pose.deserialize(inbuffer + offset);
 80071d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80071d4:	f103 0008 	add.w	r0, r3, #8
 80071d8:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80071dc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80071de:	4413      	add	r3, r2
 80071e0:	4619      	mov	r1, r3
 80071e2:	f7ff feeb 	bl	8006fbc <_ZN13geometry_msgs4Pose11deserializeEPh>
 80071e6:	4602      	mov	r2, r0
 80071e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80071ec:	4413      	add	r3, r2
 80071ee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      for( uint32_t i = 0; i < 36; i++){
 80071f2:	2300      	movs	r3, #0
 80071f4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80071f8:	e0f7      	b.n	80073ea <_ZN13geometry_msgs18PoseWithCovariance11deserializeEPh+0x22a>
      union {
        double real;
        uint64_t base;
      } u_covariancei;
      u_covariancei.base = 0;
 80071fa:	f04f 0200 	mov.w	r2, #0
 80071fe:	f04f 0300 	mov.w	r3, #0
 8007202:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8007206:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800720a:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800720e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007210:	4413      	add	r3, r2
 8007212:	781b      	ldrb	r3, [r3, #0]
 8007214:	b2db      	uxtb	r3, r3
 8007216:	2200      	movs	r2, #0
 8007218:	663b      	str	r3, [r7, #96]	@ 0x60
 800721a:	667a      	str	r2, [r7, #100]	@ 0x64
 800721c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8007220:	4616      	mov	r6, r2
 8007222:	4306      	orrs	r6, r0
 8007224:	65be      	str	r6, [r7, #88]	@ 0x58
 8007226:	430b      	orrs	r3, r1
 8007228:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800722a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800722e:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8007232:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8007236:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800723a:	1c5a      	adds	r2, r3, #1
 800723c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800723e:	4413      	add	r3, r2
 8007240:	781b      	ldrb	r3, [r3, #0]
 8007242:	b2db      	uxtb	r3, r3
 8007244:	2200      	movs	r2, #0
 8007246:	469a      	mov	sl, r3
 8007248:	4693      	mov	fp, r2
 800724a:	f04f 0200 	mov.w	r2, #0
 800724e:	f04f 0300 	mov.w	r3, #0
 8007252:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8007256:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 800725a:	ea4f 220a 	mov.w	r2, sl, lsl #8
 800725e:	ea40 0602 	orr.w	r6, r0, r2
 8007262:	653e      	str	r6, [r7, #80]	@ 0x50
 8007264:	430b      	orrs	r3, r1
 8007266:	657b      	str	r3, [r7, #84]	@ 0x54
 8007268:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800726c:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8007270:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8007274:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007278:	1c9a      	adds	r2, r3, #2
 800727a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800727c:	4413      	add	r3, r2
 800727e:	781b      	ldrb	r3, [r3, #0]
 8007280:	b2db      	uxtb	r3, r3
 8007282:	2200      	movs	r2, #0
 8007284:	4698      	mov	r8, r3
 8007286:	4691      	mov	r9, r2
 8007288:	f04f 0200 	mov.w	r2, #0
 800728c:	f04f 0300 	mov.w	r3, #0
 8007290:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8007294:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8007298:	ea4f 4208 	mov.w	r2, r8, lsl #16
 800729c:	ea40 0602 	orr.w	r6, r0, r2
 80072a0:	64be      	str	r6, [r7, #72]	@ 0x48
 80072a2:	430b      	orrs	r3, r1
 80072a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80072a6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80072aa:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80072ae:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80072b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80072b6:	1cda      	adds	r2, r3, #3
 80072b8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80072ba:	4413      	add	r3, r2
 80072bc:	781b      	ldrb	r3, [r3, #0]
 80072be:	b2db      	uxtb	r3, r3
 80072c0:	2200      	movs	r2, #0
 80072c2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80072c4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80072c6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80072c8:	0a1d      	lsrs	r5, r3, #8
 80072ca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80072cc:	061c      	lsls	r4, r3, #24
 80072ce:	ea40 0304 	orr.w	r3, r0, r4
 80072d2:	643b      	str	r3, [r7, #64]	@ 0x40
 80072d4:	ea41 0305 	orr.w	r3, r1, r5
 80072d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80072da:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80072de:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80072e2:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80072e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80072ea:	1d1a      	adds	r2, r3, #4
 80072ec:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80072ee:	4413      	add	r3, r2
 80072f0:	781b      	ldrb	r3, [r3, #0]
 80072f2:	b2db      	uxtb	r3, r3
 80072f4:	2200      	movs	r2, #0
 80072f6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80072f8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80072fa:	f04f 0200 	mov.w	r2, #0
 80072fe:	f04f 0300 	mov.w	r3, #0
 8007302:	6bbe      	ldr	r6, [r7, #56]	@ 0x38
 8007304:	0033      	movs	r3, r6
 8007306:	2200      	movs	r2, #0
 8007308:	ea40 0602 	orr.w	r6, r0, r2
 800730c:	633e      	str	r6, [r7, #48]	@ 0x30
 800730e:	430b      	orrs	r3, r1
 8007310:	637b      	str	r3, [r7, #52]	@ 0x34
 8007312:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8007316:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800731a:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800731e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007322:	1d5a      	adds	r2, r3, #5
 8007324:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007326:	4413      	add	r3, r2
 8007328:	781b      	ldrb	r3, [r3, #0]
 800732a:	b2db      	uxtb	r3, r3
 800732c:	2200      	movs	r2, #0
 800732e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007330:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007332:	f04f 0200 	mov.w	r2, #0
 8007336:	f04f 0300 	mov.w	r3, #0
 800733a:	6abe      	ldr	r6, [r7, #40]	@ 0x28
 800733c:	0233      	lsls	r3, r6, #8
 800733e:	2200      	movs	r2, #0
 8007340:	ea40 0602 	orr.w	r6, r0, r2
 8007344:	623e      	str	r6, [r7, #32]
 8007346:	430b      	orrs	r3, r1
 8007348:	627b      	str	r3, [r7, #36]	@ 0x24
 800734a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800734e:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8007352:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8007356:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800735a:	1d9a      	adds	r2, r3, #6
 800735c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800735e:	4413      	add	r3, r2
 8007360:	781b      	ldrb	r3, [r3, #0]
 8007362:	b2db      	uxtb	r3, r3
 8007364:	2200      	movs	r2, #0
 8007366:	61bb      	str	r3, [r7, #24]
 8007368:	61fa      	str	r2, [r7, #28]
 800736a:	f04f 0200 	mov.w	r2, #0
 800736e:	f04f 0300 	mov.w	r3, #0
 8007372:	69be      	ldr	r6, [r7, #24]
 8007374:	0433      	lsls	r3, r6, #16
 8007376:	2200      	movs	r2, #0
 8007378:	ea40 0602 	orr.w	r6, r0, r2
 800737c:	613e      	str	r6, [r7, #16]
 800737e:	430b      	orrs	r3, r1
 8007380:	617b      	str	r3, [r7, #20]
 8007382:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007386:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800738a:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800738e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007392:	1dda      	adds	r2, r3, #7
 8007394:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007396:	4413      	add	r3, r2
 8007398:	781b      	ldrb	r3, [r3, #0]
 800739a:	b2db      	uxtb	r3, r3
 800739c:	2200      	movs	r2, #0
 800739e:	60bb      	str	r3, [r7, #8]
 80073a0:	60fa      	str	r2, [r7, #12]
 80073a2:	f04f 0200 	mov.w	r2, #0
 80073a6:	f04f 0300 	mov.w	r3, #0
 80073aa:	68be      	ldr	r6, [r7, #8]
 80073ac:	0633      	lsls	r3, r6, #24
 80073ae:	2200      	movs	r2, #0
 80073b0:	ea40 0602 	orr.w	r6, r0, r2
 80073b4:	603e      	str	r6, [r7, #0]
 80073b6:	430b      	orrs	r3, r1
 80073b8:	607b      	str	r3, [r7, #4]
 80073ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073be:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
      this->covariance[i] = u_covariancei.real;
 80073c2:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80073c6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80073c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80073cc:	330b      	adds	r3, #11
 80073ce:	00db      	lsls	r3, r3, #3
 80073d0:	4413      	add	r3, r2
 80073d2:	e9c3 0100 	strd	r0, r1, [r3]
      offset += sizeof(this->covariance[i]);
 80073d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80073da:	3308      	adds	r3, #8
 80073dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      for( uint32_t i = 0; i < 36; i++){
 80073e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80073e4:	3301      	adds	r3, #1
 80073e6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80073ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80073ee:	2b23      	cmp	r3, #35	@ 0x23
 80073f0:	f67f af03 	bls.w	80071fa <_ZN13geometry_msgs18PoseWithCovariance11deserializeEPh+0x3a>
      }
     return offset;
 80073f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
    }
 80073f8:	4618      	mov	r0, r3
 80073fa:	378c      	adds	r7, #140	@ 0x8c
 80073fc:	46bd      	mov	sp, r7
 80073fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08007404 <_ZN13geometry_msgs18PoseWithCovariance7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/PoseWithCovariance"; };
 8007404:	b480      	push	{r7}
 8007406:	b083      	sub	sp, #12
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
 800740c:	4b02      	ldr	r3, [pc, #8]	@ (8007418 <_ZN13geometry_msgs18PoseWithCovariance7getTypeEv+0x14>)
 800740e:	4618      	mov	r0, r3
 8007410:	370c      	adds	r7, #12
 8007412:	46bd      	mov	sp, r7
 8007414:	bc80      	pop	{r7}
 8007416:	4770      	bx	lr
 8007418:	0800d1d4 	.word	0x0800d1d4

0800741c <_ZN13geometry_msgs18PoseWithCovariance6getMD5Ev>:
    virtual const char * getMD5() override { return "c23e848cf1b7533a8d7c259073a97e6f"; };
 800741c:	b480      	push	{r7}
 800741e:	b083      	sub	sp, #12
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
 8007424:	4b02      	ldr	r3, [pc, #8]	@ (8007430 <_ZN13geometry_msgs18PoseWithCovariance6getMD5Ev+0x14>)
 8007426:	4618      	mov	r0, r3
 8007428:	370c      	adds	r7, #12
 800742a:	46bd      	mov	sp, r7
 800742c:	bc80      	pop	{r7}
 800742e:	4770      	bx	lr
 8007430:	0800d1f8 	.word	0x0800d1f8

08007434 <_ZN13geometry_msgs19TwistWithCovarianceC1Ev>:
    public:
      typedef geometry_msgs::Twist _twist_type;
      _twist_type twist;
      double covariance[36];

    TwistWithCovariance():
 8007434:	b580      	push	{r7, lr}
 8007436:	b082      	sub	sp, #8
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
      twist(),
      covariance()
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	4618      	mov	r0, r3
 8007440:	f7fa f962 	bl	8001708 <_ZN3ros3MsgC1Ev>
 8007444:	4a0d      	ldr	r2, [pc, #52]	@ (800747c <_ZN13geometry_msgs19TwistWithCovarianceC1Ev+0x48>)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	601a      	str	r2, [r3, #0]
      twist(),
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	3308      	adds	r3, #8
 800744e:	4618      	mov	r0, r3
 8007450:	f7fe fd7c 	bl	8005f4c <_ZN13geometry_msgs5TwistC1Ev>
      covariance()
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f103 0250 	add.w	r2, r3, #80	@ 0x50
 800745a:	2323      	movs	r3, #35	@ 0x23
 800745c:	e007      	b.n	800746e <_ZN13geometry_msgs19TwistWithCovarianceC1Ev+0x3a>
 800745e:	f04f 0000 	mov.w	r0, #0
 8007462:	f04f 0100 	mov.w	r1, #0
 8007466:	e9c2 0100 	strd	r0, r1, [r2]
 800746a:	3b01      	subs	r3, #1
 800746c:	3208      	adds	r2, #8
 800746e:	2b00      	cmp	r3, #0
 8007470:	daf5      	bge.n	800745e <_ZN13geometry_msgs19TwistWithCovarianceC1Ev+0x2a>
    {
    }
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	4618      	mov	r0, r3
 8007476:	3708      	adds	r7, #8
 8007478:	46bd      	mov	sp, r7
 800747a:	bd80      	pop	{r7, pc}
 800747c:	0800d39c 	.word	0x0800d39c

08007480 <_ZNK13geometry_msgs19TwistWithCovariance9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8007480:	b580      	push	{r7, lr}
 8007482:	b086      	sub	sp, #24
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
 8007488:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800748a:	2300      	movs	r3, #0
 800748c:	617b      	str	r3, [r7, #20]
      offset += this->twist.serialize(outbuffer + offset);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f103 0008 	add.w	r0, r3, #8
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	683a      	ldr	r2, [r7, #0]
 8007498:	4413      	add	r3, r2
 800749a:	4619      	mov	r1, r3
 800749c:	f7fe fd72 	bl	8005f84 <_ZNK13geometry_msgs5Twist9serializeEPh>
 80074a0:	4602      	mov	r2, r0
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	4413      	add	r3, r2
 80074a6:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 36; i++){
 80074a8:	2300      	movs	r3, #0
 80074aa:	613b      	str	r3, [r7, #16]
 80074ac:	e07d      	b.n	80075aa <_ZNK13geometry_msgs19TwistWithCovariance9serializeEPh+0x12a>
      union {
        double real;
        uint64_t base;
      } u_covariancei;
      u_covariancei.real = this->covariance[i];
 80074ae:	687a      	ldr	r2, [r7, #4]
 80074b0:	693b      	ldr	r3, [r7, #16]
 80074b2:	330a      	adds	r3, #10
 80074b4:	00db      	lsls	r3, r3, #3
 80074b6:	4413      	add	r3, r2
 80074b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074bc:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_covariancei.base >> (8 * 0)) & 0xFF;
 80074c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80074c4:	6979      	ldr	r1, [r7, #20]
 80074c6:	6838      	ldr	r0, [r7, #0]
 80074c8:	4401      	add	r1, r0
 80074ca:	b2d3      	uxtb	r3, r2
 80074cc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_covariancei.base >> (8 * 1)) & 0xFF;
 80074ce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80074d2:	f04f 0200 	mov.w	r2, #0
 80074d6:	f04f 0300 	mov.w	r3, #0
 80074da:	0a02      	lsrs	r2, r0, #8
 80074dc:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80074e0:	0a0b      	lsrs	r3, r1, #8
 80074e2:	6979      	ldr	r1, [r7, #20]
 80074e4:	3101      	adds	r1, #1
 80074e6:	6838      	ldr	r0, [r7, #0]
 80074e8:	4401      	add	r1, r0
 80074ea:	b2d3      	uxtb	r3, r2
 80074ec:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_covariancei.base >> (8 * 2)) & 0xFF;
 80074ee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80074f2:	f04f 0200 	mov.w	r2, #0
 80074f6:	f04f 0300 	mov.w	r3, #0
 80074fa:	0c02      	lsrs	r2, r0, #16
 80074fc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8007500:	0c0b      	lsrs	r3, r1, #16
 8007502:	6979      	ldr	r1, [r7, #20]
 8007504:	3102      	adds	r1, #2
 8007506:	6838      	ldr	r0, [r7, #0]
 8007508:	4401      	add	r1, r0
 800750a:	b2d3      	uxtb	r3, r2
 800750c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_covariancei.base >> (8 * 3)) & 0xFF;
 800750e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007512:	f04f 0200 	mov.w	r2, #0
 8007516:	f04f 0300 	mov.w	r3, #0
 800751a:	0e02      	lsrs	r2, r0, #24
 800751c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8007520:	0e0b      	lsrs	r3, r1, #24
 8007522:	6979      	ldr	r1, [r7, #20]
 8007524:	3103      	adds	r1, #3
 8007526:	6838      	ldr	r0, [r7, #0]
 8007528:	4401      	add	r1, r0
 800752a:	b2d3      	uxtb	r3, r2
 800752c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_covariancei.base >> (8 * 4)) & 0xFF;
 800752e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007532:	f04f 0200 	mov.w	r2, #0
 8007536:	f04f 0300 	mov.w	r3, #0
 800753a:	000a      	movs	r2, r1
 800753c:	2300      	movs	r3, #0
 800753e:	6979      	ldr	r1, [r7, #20]
 8007540:	3104      	adds	r1, #4
 8007542:	6838      	ldr	r0, [r7, #0]
 8007544:	4401      	add	r1, r0
 8007546:	b2d3      	uxtb	r3, r2
 8007548:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_covariancei.base >> (8 * 5)) & 0xFF;
 800754a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800754e:	f04f 0200 	mov.w	r2, #0
 8007552:	f04f 0300 	mov.w	r3, #0
 8007556:	0a0a      	lsrs	r2, r1, #8
 8007558:	2300      	movs	r3, #0
 800755a:	6979      	ldr	r1, [r7, #20]
 800755c:	3105      	adds	r1, #5
 800755e:	6838      	ldr	r0, [r7, #0]
 8007560:	4401      	add	r1, r0
 8007562:	b2d3      	uxtb	r3, r2
 8007564:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_covariancei.base >> (8 * 6)) & 0xFF;
 8007566:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800756a:	f04f 0200 	mov.w	r2, #0
 800756e:	f04f 0300 	mov.w	r3, #0
 8007572:	0c0a      	lsrs	r2, r1, #16
 8007574:	2300      	movs	r3, #0
 8007576:	6979      	ldr	r1, [r7, #20]
 8007578:	3106      	adds	r1, #6
 800757a:	6838      	ldr	r0, [r7, #0]
 800757c:	4401      	add	r1, r0
 800757e:	b2d3      	uxtb	r3, r2
 8007580:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_covariancei.base >> (8 * 7)) & 0xFF;
 8007582:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007586:	f04f 0200 	mov.w	r2, #0
 800758a:	f04f 0300 	mov.w	r3, #0
 800758e:	0e0a      	lsrs	r2, r1, #24
 8007590:	2300      	movs	r3, #0
 8007592:	6979      	ldr	r1, [r7, #20]
 8007594:	3107      	adds	r1, #7
 8007596:	6838      	ldr	r0, [r7, #0]
 8007598:	4401      	add	r1, r0
 800759a:	b2d3      	uxtb	r3, r2
 800759c:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->covariance[i]);
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	3308      	adds	r3, #8
 80075a2:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 36; i++){
 80075a4:	693b      	ldr	r3, [r7, #16]
 80075a6:	3301      	adds	r3, #1
 80075a8:	613b      	str	r3, [r7, #16]
 80075aa:	693b      	ldr	r3, [r7, #16]
 80075ac:	2b23      	cmp	r3, #35	@ 0x23
 80075ae:	f67f af7e 	bls.w	80074ae <_ZNK13geometry_msgs19TwistWithCovariance9serializeEPh+0x2e>
      }
      return offset;
 80075b2:	697b      	ldr	r3, [r7, #20]
    }
 80075b4:	4618      	mov	r0, r3
 80075b6:	3718      	adds	r7, #24
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd80      	pop	{r7, pc}

080075bc <_ZN13geometry_msgs19TwistWithCovariance11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80075bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075c0:	b0a3      	sub	sp, #140	@ 0x8c
 80075c2:	af00      	add	r7, sp, #0
 80075c4:	6778      	str	r0, [r7, #116]	@ 0x74
 80075c6:	6739      	str	r1, [r7, #112]	@ 0x70
    {
      int offset = 0;
 80075c8:	2300      	movs	r3, #0
 80075ca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      offset += this->twist.deserialize(inbuffer + offset);
 80075ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80075d0:	f103 0008 	add.w	r0, r3, #8
 80075d4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80075d8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80075da:	4413      	add	r3, r2
 80075dc:	4619      	mov	r1, r3
 80075de:	f7fe fcf7 	bl	8005fd0 <_ZN13geometry_msgs5Twist11deserializeEPh>
 80075e2:	4602      	mov	r2, r0
 80075e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80075e8:	4413      	add	r3, r2
 80075ea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      for( uint32_t i = 0; i < 36; i++){
 80075ee:	2300      	movs	r3, #0
 80075f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80075f4:	e0f7      	b.n	80077e6 <_ZN13geometry_msgs19TwistWithCovariance11deserializeEPh+0x22a>
      union {
        double real;
        uint64_t base;
      } u_covariancei;
      u_covariancei.base = 0;
 80075f6:	f04f 0200 	mov.w	r2, #0
 80075fa:	f04f 0300 	mov.w	r3, #0
 80075fe:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8007602:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8007606:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800760a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800760c:	4413      	add	r3, r2
 800760e:	781b      	ldrb	r3, [r3, #0]
 8007610:	b2db      	uxtb	r3, r3
 8007612:	2200      	movs	r2, #0
 8007614:	663b      	str	r3, [r7, #96]	@ 0x60
 8007616:	667a      	str	r2, [r7, #100]	@ 0x64
 8007618:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800761c:	4616      	mov	r6, r2
 800761e:	4306      	orrs	r6, r0
 8007620:	65be      	str	r6, [r7, #88]	@ 0x58
 8007622:	430b      	orrs	r3, r1
 8007624:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007626:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800762a:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800762e:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8007632:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007636:	1c5a      	adds	r2, r3, #1
 8007638:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800763a:	4413      	add	r3, r2
 800763c:	781b      	ldrb	r3, [r3, #0]
 800763e:	b2db      	uxtb	r3, r3
 8007640:	2200      	movs	r2, #0
 8007642:	469a      	mov	sl, r3
 8007644:	4693      	mov	fp, r2
 8007646:	f04f 0200 	mov.w	r2, #0
 800764a:	f04f 0300 	mov.w	r3, #0
 800764e:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8007652:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8007656:	ea4f 220a 	mov.w	r2, sl, lsl #8
 800765a:	ea40 0602 	orr.w	r6, r0, r2
 800765e:	653e      	str	r6, [r7, #80]	@ 0x50
 8007660:	430b      	orrs	r3, r1
 8007662:	657b      	str	r3, [r7, #84]	@ 0x54
 8007664:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007668:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800766c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8007670:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007674:	1c9a      	adds	r2, r3, #2
 8007676:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007678:	4413      	add	r3, r2
 800767a:	781b      	ldrb	r3, [r3, #0]
 800767c:	b2db      	uxtb	r3, r3
 800767e:	2200      	movs	r2, #0
 8007680:	4698      	mov	r8, r3
 8007682:	4691      	mov	r9, r2
 8007684:	f04f 0200 	mov.w	r2, #0
 8007688:	f04f 0300 	mov.w	r3, #0
 800768c:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8007690:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8007694:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8007698:	ea40 0602 	orr.w	r6, r0, r2
 800769c:	64be      	str	r6, [r7, #72]	@ 0x48
 800769e:	430b      	orrs	r3, r1
 80076a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80076a2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80076a6:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80076aa:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80076ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80076b2:	1cda      	adds	r2, r3, #3
 80076b4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80076b6:	4413      	add	r3, r2
 80076b8:	781b      	ldrb	r3, [r3, #0]
 80076ba:	b2db      	uxtb	r3, r3
 80076bc:	2200      	movs	r2, #0
 80076be:	66bb      	str	r3, [r7, #104]	@ 0x68
 80076c0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80076c2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80076c4:	0a1d      	lsrs	r5, r3, #8
 80076c6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80076c8:	061c      	lsls	r4, r3, #24
 80076ca:	ea40 0304 	orr.w	r3, r0, r4
 80076ce:	643b      	str	r3, [r7, #64]	@ 0x40
 80076d0:	ea41 0305 	orr.w	r3, r1, r5
 80076d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80076d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80076da:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80076de:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80076e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80076e6:	1d1a      	adds	r2, r3, #4
 80076e8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80076ea:	4413      	add	r3, r2
 80076ec:	781b      	ldrb	r3, [r3, #0]
 80076ee:	b2db      	uxtb	r3, r3
 80076f0:	2200      	movs	r2, #0
 80076f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80076f4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80076f6:	f04f 0200 	mov.w	r2, #0
 80076fa:	f04f 0300 	mov.w	r3, #0
 80076fe:	6bbe      	ldr	r6, [r7, #56]	@ 0x38
 8007700:	0033      	movs	r3, r6
 8007702:	2200      	movs	r2, #0
 8007704:	ea40 0602 	orr.w	r6, r0, r2
 8007708:	633e      	str	r6, [r7, #48]	@ 0x30
 800770a:	430b      	orrs	r3, r1
 800770c:	637b      	str	r3, [r7, #52]	@ 0x34
 800770e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8007712:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8007716:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800771a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800771e:	1d5a      	adds	r2, r3, #5
 8007720:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007722:	4413      	add	r3, r2
 8007724:	781b      	ldrb	r3, [r3, #0]
 8007726:	b2db      	uxtb	r3, r3
 8007728:	2200      	movs	r2, #0
 800772a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800772c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800772e:	f04f 0200 	mov.w	r2, #0
 8007732:	f04f 0300 	mov.w	r3, #0
 8007736:	6abe      	ldr	r6, [r7, #40]	@ 0x28
 8007738:	0233      	lsls	r3, r6, #8
 800773a:	2200      	movs	r2, #0
 800773c:	ea40 0602 	orr.w	r6, r0, r2
 8007740:	623e      	str	r6, [r7, #32]
 8007742:	430b      	orrs	r3, r1
 8007744:	627b      	str	r3, [r7, #36]	@ 0x24
 8007746:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800774a:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800774e:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8007752:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007756:	1d9a      	adds	r2, r3, #6
 8007758:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800775a:	4413      	add	r3, r2
 800775c:	781b      	ldrb	r3, [r3, #0]
 800775e:	b2db      	uxtb	r3, r3
 8007760:	2200      	movs	r2, #0
 8007762:	61bb      	str	r3, [r7, #24]
 8007764:	61fa      	str	r2, [r7, #28]
 8007766:	f04f 0200 	mov.w	r2, #0
 800776a:	f04f 0300 	mov.w	r3, #0
 800776e:	69be      	ldr	r6, [r7, #24]
 8007770:	0433      	lsls	r3, r6, #16
 8007772:	2200      	movs	r2, #0
 8007774:	ea40 0602 	orr.w	r6, r0, r2
 8007778:	613e      	str	r6, [r7, #16]
 800777a:	430b      	orrs	r3, r1
 800777c:	617b      	str	r3, [r7, #20]
 800777e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007782:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8007786:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800778a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800778e:	1dda      	adds	r2, r3, #7
 8007790:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007792:	4413      	add	r3, r2
 8007794:	781b      	ldrb	r3, [r3, #0]
 8007796:	b2db      	uxtb	r3, r3
 8007798:	2200      	movs	r2, #0
 800779a:	60bb      	str	r3, [r7, #8]
 800779c:	60fa      	str	r2, [r7, #12]
 800779e:	f04f 0200 	mov.w	r2, #0
 80077a2:	f04f 0300 	mov.w	r3, #0
 80077a6:	68be      	ldr	r6, [r7, #8]
 80077a8:	0633      	lsls	r3, r6, #24
 80077aa:	2200      	movs	r2, #0
 80077ac:	ea40 0602 	orr.w	r6, r0, r2
 80077b0:	603e      	str	r6, [r7, #0]
 80077b2:	430b      	orrs	r3, r1
 80077b4:	607b      	str	r3, [r7, #4]
 80077b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077ba:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
      this->covariance[i] = u_covariancei.real;
 80077be:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80077c2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80077c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80077c8:	330a      	adds	r3, #10
 80077ca:	00db      	lsls	r3, r3, #3
 80077cc:	4413      	add	r3, r2
 80077ce:	e9c3 0100 	strd	r0, r1, [r3]
      offset += sizeof(this->covariance[i]);
 80077d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80077d6:	3308      	adds	r3, #8
 80077d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      for( uint32_t i = 0; i < 36; i++){
 80077dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80077e0:	3301      	adds	r3, #1
 80077e2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80077e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80077ea:	2b23      	cmp	r3, #35	@ 0x23
 80077ec:	f67f af03 	bls.w	80075f6 <_ZN13geometry_msgs19TwistWithCovariance11deserializeEPh+0x3a>
      }
     return offset;
 80077f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
    }
 80077f4:	4618      	mov	r0, r3
 80077f6:	378c      	adds	r7, #140	@ 0x8c
 80077f8:	46bd      	mov	sp, r7
 80077fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08007800 <_ZN13geometry_msgs19TwistWithCovariance7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/TwistWithCovariance"; };
 8007800:	b480      	push	{r7}
 8007802:	b083      	sub	sp, #12
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
 8007808:	4b02      	ldr	r3, [pc, #8]	@ (8007814 <_ZN13geometry_msgs19TwistWithCovariance7getTypeEv+0x14>)
 800780a:	4618      	mov	r0, r3
 800780c:	370c      	adds	r7, #12
 800780e:	46bd      	mov	sp, r7
 8007810:	bc80      	pop	{r7}
 8007812:	4770      	bx	lr
 8007814:	0800d21c 	.word	0x0800d21c

08007818 <_ZN13geometry_msgs19TwistWithCovariance6getMD5Ev>:
    virtual const char * getMD5() override { return "1fe8a28e6890a4cc3ae4c3ca5c7d82e6"; };
 8007818:	b480      	push	{r7}
 800781a:	b083      	sub	sp, #12
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
 8007820:	4b02      	ldr	r3, [pc, #8]	@ (800782c <_ZN13geometry_msgs19TwistWithCovariance6getMD5Ev+0x14>)
 8007822:	4618      	mov	r0, r3
 8007824:	370c      	adds	r7, #12
 8007826:	46bd      	mov	sp, r7
 8007828:	bc80      	pop	{r7}
 800782a:	4770      	bx	lr
 800782c:	0800d240 	.word	0x0800d240

08007830 <_ZN8nav_msgs8OdometryC1Ev>:
      typedef geometry_msgs::PoseWithCovariance _pose_type;
      _pose_type pose;
      typedef geometry_msgs::TwistWithCovariance _twist_type;
      _twist_type twist;

    Odometry():
 8007830:	b580      	push	{r7, lr}
 8007832:	b082      	sub	sp, #8
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
      header(),
      child_frame_id(""),
      pose(),
      twist()
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	4618      	mov	r0, r3
 800783c:	f7f9 ff64 	bl	8001708 <_ZN3ros3MsgC1Ev>
 8007840:	4a0d      	ldr	r2, [pc, #52]	@ (8007878 <_ZN8nav_msgs8OdometryC1Ev+0x48>)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	601a      	str	r2, [r3, #0]
      header(),
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	3304      	adds	r3, #4
 800784a:	4618      	mov	r0, r3
 800784c:	f7fa ffca 	bl	80027e4 <_ZN8std_msgs6HeaderC1Ev>
      child_frame_id(""),
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	4a0a      	ldr	r2, [pc, #40]	@ (800787c <_ZN8nav_msgs8OdometryC1Ev+0x4c>)
 8007854:	619a      	str	r2, [r3, #24]
      pose(),
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	3320      	adds	r3, #32
 800785a:	4618      	mov	r0, r3
 800785c:	f7ff fbec 	bl	8007038 <_ZN13geometry_msgs18PoseWithCovarianceC1Ev>
      twist()
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 8007866:	4618      	mov	r0, r3
 8007868:	f7ff fde4 	bl	8007434 <_ZN13geometry_msgs19TwistWithCovarianceC1Ev>
    {
    }
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	4618      	mov	r0, r3
 8007870:	3708      	adds	r7, #8
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}
 8007876:	bf00      	nop
 8007878:	0800d384 	.word	0x0800d384
 800787c:	0800cea4 	.word	0x0800cea4

08007880 <_ZNK8nav_msgs8Odometry9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8007880:	b580      	push	{r7, lr}
 8007882:	b084      	sub	sp, #16
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
 8007888:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800788a:	2300      	movs	r3, #0
 800788c:	60fb      	str	r3, [r7, #12]
      offset += this->header.serialize(outbuffer + offset);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	1d18      	adds	r0, r3, #4
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	683a      	ldr	r2, [r7, #0]
 8007896:	4413      	add	r3, r2
 8007898:	4619      	mov	r1, r3
 800789a:	f7fa ffc3 	bl	8002824 <_ZNK8std_msgs6Header9serializeEPh>
 800789e:	4602      	mov	r2, r0
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	4413      	add	r3, r2
 80078a4:	60fb      	str	r3, [r7, #12]
      uint32_t length_child_frame_id = strlen(this->child_frame_id);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	699b      	ldr	r3, [r3, #24]
 80078aa:	4618      	mov	r0, r3
 80078ac:	f7f8 fc50 	bl	8000150 <strlen>
 80078b0:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_child_frame_id);
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	683a      	ldr	r2, [r7, #0]
 80078b6:	4413      	add	r3, r2
 80078b8:	68b9      	ldr	r1, [r7, #8]
 80078ba:	4618      	mov	r0, r3
 80078bc:	f000 fb7c 	bl	8007fb8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	3304      	adds	r3, #4
 80078c4:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->child_frame_id, length_child_frame_id);
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	683a      	ldr	r2, [r7, #0]
 80078ca:	18d0      	adds	r0, r2, r3
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	699b      	ldr	r3, [r3, #24]
 80078d0:	68ba      	ldr	r2, [r7, #8]
 80078d2:	4619      	mov	r1, r3
 80078d4:	f005 fa62 	bl	800cd9c <memcpy>
      offset += length_child_frame_id;
 80078d8:	68fa      	ldr	r2, [r7, #12]
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	4413      	add	r3, r2
 80078de:	60fb      	str	r3, [r7, #12]
      offset += this->pose.serialize(outbuffer + offset);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f103 0020 	add.w	r0, r3, #32
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	683a      	ldr	r2, [r7, #0]
 80078ea:	4413      	add	r3, r2
 80078ec:	4619      	mov	r1, r3
 80078ee:	f7ff fbc9 	bl	8007084 <_ZNK13geometry_msgs18PoseWithCovariance9serializeEPh>
 80078f2:	4602      	mov	r2, r0
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	4413      	add	r3, r2
 80078f8:	60fb      	str	r3, [r7, #12]
      offset += this->twist.serialize(outbuffer + offset);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f503 70cc 	add.w	r0, r3, #408	@ 0x198
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	683a      	ldr	r2, [r7, #0]
 8007904:	4413      	add	r3, r2
 8007906:	4619      	mov	r1, r3
 8007908:	f7ff fdba 	bl	8007480 <_ZNK13geometry_msgs19TwistWithCovariance9serializeEPh>
 800790c:	4602      	mov	r2, r0
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	4413      	add	r3, r2
 8007912:	60fb      	str	r3, [r7, #12]
      return offset;
 8007914:	68fb      	ldr	r3, [r7, #12]
    }
 8007916:	4618      	mov	r0, r3
 8007918:	3710      	adds	r7, #16
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}

0800791e <_ZN8nav_msgs8Odometry11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800791e:	b580      	push	{r7, lr}
 8007920:	b086      	sub	sp, #24
 8007922:	af00      	add	r7, sp, #0
 8007924:	6078      	str	r0, [r7, #4]
 8007926:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8007928:	2300      	movs	r3, #0
 800792a:	613b      	str	r3, [r7, #16]
      offset += this->header.deserialize(inbuffer + offset);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	1d18      	adds	r0, r3, #4
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	683a      	ldr	r2, [r7, #0]
 8007934:	4413      	add	r3, r2
 8007936:	4619      	mov	r1, r3
 8007938:	f7fb f80c 	bl	8002954 <_ZN8std_msgs6Header11deserializeEPh>
 800793c:	4602      	mov	r2, r0
 800793e:	693b      	ldr	r3, [r7, #16]
 8007940:	4413      	add	r3, r2
 8007942:	613b      	str	r3, [r7, #16]
      uint32_t length_child_frame_id;
      arrToVar(length_child_frame_id, (inbuffer + offset));
 8007944:	693b      	ldr	r3, [r7, #16]
 8007946:	683a      	ldr	r2, [r7, #0]
 8007948:	441a      	add	r2, r3
 800794a:	f107 030c 	add.w	r3, r7, #12
 800794e:	4611      	mov	r1, r2
 8007950:	4618      	mov	r0, r3
 8007952:	f000 fb4f 	bl	8007ff4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8007956:	693b      	ldr	r3, [r7, #16]
 8007958:	3304      	adds	r3, #4
 800795a:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_child_frame_id; ++k){
 800795c:	693b      	ldr	r3, [r7, #16]
 800795e:	617b      	str	r3, [r7, #20]
 8007960:	e00b      	b.n	800797a <_ZN8nav_msgs8Odometry11deserializeEPh+0x5c>
          inbuffer[k-1]=inbuffer[k];
 8007962:	683a      	ldr	r2, [r7, #0]
 8007964:	697b      	ldr	r3, [r7, #20]
 8007966:	441a      	add	r2, r3
 8007968:	697b      	ldr	r3, [r7, #20]
 800796a:	3b01      	subs	r3, #1
 800796c:	6839      	ldr	r1, [r7, #0]
 800796e:	440b      	add	r3, r1
 8007970:	7812      	ldrb	r2, [r2, #0]
 8007972:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_child_frame_id; ++k){
 8007974:	697b      	ldr	r3, [r7, #20]
 8007976:	3301      	adds	r3, #1
 8007978:	617b      	str	r3, [r7, #20]
 800797a:	693a      	ldr	r2, [r7, #16]
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	4413      	add	r3, r2
 8007980:	697a      	ldr	r2, [r7, #20]
 8007982:	429a      	cmp	r2, r3
 8007984:	d3ed      	bcc.n	8007962 <_ZN8nav_msgs8Odometry11deserializeEPh+0x44>
      }
      inbuffer[offset+length_child_frame_id-1]=0;
 8007986:	693a      	ldr	r2, [r7, #16]
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	4413      	add	r3, r2
 800798c:	3b01      	subs	r3, #1
 800798e:	683a      	ldr	r2, [r7, #0]
 8007990:	4413      	add	r3, r2
 8007992:	2200      	movs	r2, #0
 8007994:	701a      	strb	r2, [r3, #0]
      this->child_frame_id = (char *)(inbuffer + offset-1);
 8007996:	693b      	ldr	r3, [r7, #16]
 8007998:	3b01      	subs	r3, #1
 800799a:	683a      	ldr	r2, [r7, #0]
 800799c:	441a      	add	r2, r3
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	619a      	str	r2, [r3, #24]
      offset += length_child_frame_id;
 80079a2:	693a      	ldr	r2, [r7, #16]
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	4413      	add	r3, r2
 80079a8:	613b      	str	r3, [r7, #16]
      offset += this->pose.deserialize(inbuffer + offset);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f103 0020 	add.w	r0, r3, #32
 80079b0:	693b      	ldr	r3, [r7, #16]
 80079b2:	683a      	ldr	r2, [r7, #0]
 80079b4:	4413      	add	r3, r2
 80079b6:	4619      	mov	r1, r3
 80079b8:	f7ff fc02 	bl	80071c0 <_ZN13geometry_msgs18PoseWithCovariance11deserializeEPh>
 80079bc:	4602      	mov	r2, r0
 80079be:	693b      	ldr	r3, [r7, #16]
 80079c0:	4413      	add	r3, r2
 80079c2:	613b      	str	r3, [r7, #16]
      offset += this->twist.deserialize(inbuffer + offset);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f503 70cc 	add.w	r0, r3, #408	@ 0x198
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	683a      	ldr	r2, [r7, #0]
 80079ce:	4413      	add	r3, r2
 80079d0:	4619      	mov	r1, r3
 80079d2:	f7ff fdf3 	bl	80075bc <_ZN13geometry_msgs19TwistWithCovariance11deserializeEPh>
 80079d6:	4602      	mov	r2, r0
 80079d8:	693b      	ldr	r3, [r7, #16]
 80079da:	4413      	add	r3, r2
 80079dc:	613b      	str	r3, [r7, #16]
     return offset;
 80079de:	693b      	ldr	r3, [r7, #16]
    }
 80079e0:	4618      	mov	r0, r3
 80079e2:	3718      	adds	r7, #24
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}

080079e8 <_ZN8nav_msgs8Odometry7getTypeEv>:

    virtual const char * getType() override { return "nav_msgs/Odometry"; };
 80079e8:	b480      	push	{r7}
 80079ea:	b083      	sub	sp, #12
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
 80079f0:	4b02      	ldr	r3, [pc, #8]	@ (80079fc <_ZN8nav_msgs8Odometry7getTypeEv+0x14>)
 80079f2:	4618      	mov	r0, r3
 80079f4:	370c      	adds	r7, #12
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bc80      	pop	{r7}
 80079fa:	4770      	bx	lr
 80079fc:	0800d264 	.word	0x0800d264

08007a00 <_ZN8nav_msgs8Odometry6getMD5Ev>:
    virtual const char * getMD5() override { return "cd5e73d190d741a2f92e81eda573aca7"; };
 8007a00:	b480      	push	{r7}
 8007a02:	b083      	sub	sp, #12
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
 8007a08:	4b02      	ldr	r3, [pc, #8]	@ (8007a14 <_ZN8nav_msgs8Odometry6getMD5Ev+0x14>)
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	370c      	adds	r7, #12
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bc80      	pop	{r7}
 8007a12:	4770      	bx	lr
 8007a14:	0800d278 	.word	0x0800d278

08007a18 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8007a18:	b480      	push	{r7}
 8007a1a:	b083      	sub	sp, #12
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
 8007a20:	4a04      	ldr	r2, [pc, #16]	@ (8007a34 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	601a      	str	r2, [r3, #0]
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	4618      	mov	r0, r3
 8007a2a:	370c      	adds	r7, #12
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bc80      	pop	{r7}
 8007a30:	4770      	bx	lr
 8007a32:	bf00      	nop
 8007a34:	0800d518 	.word	0x0800d518

08007a38 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi1024ELi1024EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b082      	sub	sp, #8
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	4618      	mov	r0, r3
 8007a44:	f7ff ffe8 	bl	8007a18 <_ZN3ros15NodeHandleBase_C1Ev>
 8007a48:	4a33      	ldr	r2, [pc, #204]	@ (8007b18 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi1024ELi1024EEC1Ev+0xe0>)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	601a      	str	r2, [r3, #0]
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	3304      	adds	r3, #4
 8007a52:	4618      	mov	r0, r3
 8007a54:	f7fa fde6 	bl	8002624 <_ZN13STM32HardwareC1Ev>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	609a      	str	r2, [r3, #8]
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2200      	movs	r2, #0
 8007a62:	60da      	str	r2, [r3, #12]
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2200      	movs	r2, #0
 8007a68:	611a      	str	r2, [r3, #16]
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	615a      	str	r2, [r3, #20]
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	3318      	adds	r3, #24
 8007a74:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007a78:	2100      	movs	r1, #0
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f005 f94a 	bl	800cd14 <memset>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f503 6383 	add.w	r3, r3, #1048	@ 0x418
 8007a86:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007a8a:	2100      	movs	r1, #0
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	f005 f941 	bl	800cd14 <memset>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f603 0318 	addw	r3, r3, #2072	@ 0x818
 8007a98:	223c      	movs	r2, #60	@ 0x3c
 8007a9a:	2100      	movs	r1, #0
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	f005 f939 	bl	800cd14 <memset>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f603 0354 	addw	r3, r3, #2132	@ 0x854
 8007aa8:	223c      	movs	r2, #60	@ 0x3c
 8007aaa:	2100      	movs	r1, #0
 8007aac:	4618      	mov	r0, r3
 8007aae:	f005 f931 	bl	800cd14 <memset>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	f8c3 2890 	str.w	r2, [r3, #2192]	@ 0x890
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2200      	movs	r2, #0
 8007abe:	f8c3 2894 	str.w	r2, [r3, #2196]	@ 0x894
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	f8c3 2898 	str.w	r2, [r3, #2200]	@ 0x898
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2200      	movs	r2, #0
 8007ace:	f8c3 289c 	str.w	r2, [r3, #2204]	@ 0x89c
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	f8c3 28a0 	str.w	r2, [r3, #2208]	@ 0x8a0
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2200      	movs	r2, #0
 8007ade:	f883 28a4 	strb.w	r2, [r3, #2212]	@ 0x8a4
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	f8c3 28a8 	str.w	r2, [r3, #2216]	@ 0x8a8
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2200      	movs	r2, #0
 8007aee:	f8c3 28ac 	str.w	r2, [r3, #2220]	@ 0x8ac
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2200      	movs	r2, #0
 8007af6:	f8c3 28b0 	str.w	r2, [r3, #2224]	@ 0x8b0
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2200      	movs	r2, #0
 8007afe:	f883 28b4 	strb.w	r2, [r3, #2228]	@ 0x8b4
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f603 03b8 	addw	r3, r3, #2232	@ 0x8b8
 8007b08:	4618      	mov	r0, r3
 8007b0a:	f7fa f963 	bl	8001dd4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	4618      	mov	r0, r3
 8007b12:	3708      	adds	r7, #8
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}
 8007b18:	0800d3fc 	.word	0x0800d3fc

08007b1c <_Z10constraintfff>:

#define MAX(x, y) (((x) > (y)) ? (x) : (y))
#define MIN(x, y) (((x) < (y)) ? (x) : (y))

float constraint(float var, float min, float max)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b084      	sub	sp, #16
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	60f8      	str	r0, [r7, #12]
 8007b24:	60b9      	str	r1, [r7, #8]
 8007b26:	607a      	str	r2, [r7, #4]
	if (var < min)	return min;
 8007b28:	68b9      	ldr	r1, [r7, #8]
 8007b2a:	68f8      	ldr	r0, [r7, #12]
 8007b2c:	f7f9 fa02 	bl	8000f34 <__aeabi_fcmplt>
 8007b30:	4603      	mov	r3, r0
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d001      	beq.n	8007b3a <_Z10constraintfff+0x1e>
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	e009      	b.n	8007b4e <_Z10constraintfff+0x32>
	if (var > max) 	return max;
 8007b3a:	6879      	ldr	r1, [r7, #4]
 8007b3c:	68f8      	ldr	r0, [r7, #12]
 8007b3e:	f7f9 fa17 	bl	8000f70 <__aeabi_fcmpgt>
 8007b42:	4603      	mov	r3, r0
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d001      	beq.n	8007b4c <_Z10constraintfff+0x30>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	e000      	b.n	8007b4e <_Z10constraintfff+0x32>
	else 			return var;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	3710      	adds	r7, #16
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}
	...

08007b58 <HAL_UART_TxCpltCallback>:

extern Motor motor[NUM_OF_MOTOR];
extern Encoder encoder[NUM_OF_MOTOR];

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b082      	sub	sp, #8
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
	comm_rosserial.set_tx_cplt();
 8007b60:	4803      	ldr	r0, [pc, #12]	@ (8007b70 <HAL_UART_TxCpltCallback+0x18>)
 8007b62:	f7fa fd3f 	bl	80025e4 <_ZN10SerialComm11set_tx_cpltEv>
}
 8007b66:	bf00      	nop
 8007b68:	3708      	adds	r7, #8
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bd80      	pop	{r7, pc}
 8007b6e:	bf00      	nop
 8007b70:	2000023c 	.word	0x2000023c

08007b74 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b082      	sub	sp, #8
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
	comm_rosserial.reset_rbuf();
 8007b7c:	4803      	ldr	r0, [pc, #12]	@ (8007b8c <HAL_UART_RxCpltCallback+0x18>)
 8007b7e:	f7fa fd3e 	bl	80025fe <_ZN10SerialComm10reset_rbufEv>
}
 8007b82:	bf00      	nop
 8007b84:	3708      	adds	r7, #8
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd80      	pop	{r7, pc}
 8007b8a:	bf00      	nop
 8007b8c:	2000023c 	.word	0x2000023c

08007b90 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007b90:	b480      	push	{r7}
 8007b92:	b083      	sub	sp, #12
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
	switch (htim->Channel)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	7f1b      	ldrb	r3, [r3, #28]
 8007b9c:	3b01      	subs	r3, #1
 8007b9e:	2b07      	cmp	r3, #7
 8007ba0:	d82d      	bhi.n	8007bfe <HAL_TIM_IC_CaptureCallback+0x6e>
 8007ba2:	a201      	add	r2, pc, #4	@ (adr r2, 8007ba8 <HAL_TIM_IC_CaptureCallback+0x18>)
 8007ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ba8:	08007bc9 	.word	0x08007bc9
 8007bac:	08007bd7 	.word	0x08007bd7
 8007bb0:	08007bff 	.word	0x08007bff
 8007bb4:	08007be5 	.word	0x08007be5
 8007bb8:	08007bff 	.word	0x08007bff
 8007bbc:	08007bff 	.word	0x08007bff
 8007bc0:	08007bff 	.word	0x08007bff
 8007bc4:	08007bf3 	.word	0x08007bf3
	{
	case HAL_TIM_ACTIVE_CHANNEL_1:
		encoder[front_left]->tick++;
 8007bc8:	4b10      	ldr	r3, [pc, #64]	@ (8007c0c <HAL_TIM_IC_CaptureCallback+0x7c>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	881a      	ldrh	r2, [r3, #0]
 8007bce:	3201      	adds	r2, #1
 8007bd0:	b292      	uxth	r2, r2
 8007bd2:	801a      	strh	r2, [r3, #0]
		break;
 8007bd4:	e014      	b.n	8007c00 <HAL_TIM_IC_CaptureCallback+0x70>
	case HAL_TIM_ACTIVE_CHANNEL_2:
		encoder[front_right]->tick++;
 8007bd6:	4b0d      	ldr	r3, [pc, #52]	@ (8007c0c <HAL_TIM_IC_CaptureCallback+0x7c>)
 8007bd8:	685b      	ldr	r3, [r3, #4]
 8007bda:	881a      	ldrh	r2, [r3, #0]
 8007bdc:	3201      	adds	r2, #1
 8007bde:	b292      	uxth	r2, r2
 8007be0:	801a      	strh	r2, [r3, #0]
		break;
 8007be2:	e00d      	b.n	8007c00 <HAL_TIM_IC_CaptureCallback+0x70>
	case HAL_TIM_ACTIVE_CHANNEL_3:
		encoder[back_left]->tick++;
 8007be4:	4b09      	ldr	r3, [pc, #36]	@ (8007c0c <HAL_TIM_IC_CaptureCallback+0x7c>)
 8007be6:	689b      	ldr	r3, [r3, #8]
 8007be8:	881a      	ldrh	r2, [r3, #0]
 8007bea:	3201      	adds	r2, #1
 8007bec:	b292      	uxth	r2, r2
 8007bee:	801a      	strh	r2, [r3, #0]
		break;
 8007bf0:	e006      	b.n	8007c00 <HAL_TIM_IC_CaptureCallback+0x70>
	case HAL_TIM_ACTIVE_CHANNEL_4:
		encoder[back_right]->tick++;
 8007bf2:	4b06      	ldr	r3, [pc, #24]	@ (8007c0c <HAL_TIM_IC_CaptureCallback+0x7c>)
 8007bf4:	68db      	ldr	r3, [r3, #12]
 8007bf6:	881a      	ldrh	r2, [r3, #0]
 8007bf8:	3201      	adds	r2, #1
 8007bfa:	b292      	uxth	r2, r2
 8007bfc:	801a      	strh	r2, [r3, #0]
	default:
		break;
 8007bfe:	bf00      	nop
	}
}
 8007c00:	bf00      	nop
 8007c02:	370c      	adds	r7, #12
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bc80      	pop	{r7}
 8007c08:	4770      	bx	lr
 8007c0a:	bf00      	nop
 8007c0c:	20001a08 	.word	0x20001a08

08007c10 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE>:
void motorSpeedCallback(const std_msgs::UInt8& motor_speed_msg)
{
}

void commandVelocityCallback(const geometry_msgs::Twist& cmd_vel_msg)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b082      	sub	sp, #8
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
	goal_vel[0] = cmd_vel_msg.linear.x;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8007c1e:	4610      	mov	r0, r2
 8007c20:	4619      	mov	r1, r3
 8007c22:	f7f8 fe8b 	bl	800093c <__aeabi_d2f>
 8007c26:	4603      	mov	r3, r0
 8007c28:	4a0c      	ldr	r2, [pc, #48]	@ (8007c5c <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x4c>)
 8007c2a:	6013      	str	r3, [r2, #0]
	goal_vel[1] = cmd_vel_msg.linear.y;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8007c32:	4610      	mov	r0, r2
 8007c34:	4619      	mov	r1, r3
 8007c36:	f7f8 fe81 	bl	800093c <__aeabi_d2f>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	4a07      	ldr	r2, [pc, #28]	@ (8007c5c <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x4c>)
 8007c3e:	6053      	str	r3, [r2, #4]
	goal_vel[2] = cmd_vel_msg.angular.z;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8007c46:	4610      	mov	r0, r2
 8007c48:	4619      	mov	r1, r3
 8007c4a:	f7f8 fe77 	bl	800093c <__aeabi_d2f>
 8007c4e:	4603      	mov	r3, r0
 8007c50:	4a02      	ldr	r2, [pc, #8]	@ (8007c5c <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x4c>)
 8007c52:	6093      	str	r3, [r2, #8]
}
 8007c54:	bf00      	nop
 8007c56:	3708      	adds	r7, #8
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}
 8007c5c:	200019d0 	.word	0x200019d0

08007c60 <_Z9ros_setupv>:

void ros_setup()
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	af00      	add	r7, sp, #0
	nh.initNode();
 8007c64:	4808      	ldr	r0, [pc, #32]	@ (8007c88 <_Z9ros_setupv+0x28>)
 8007c66:	f000 fa4b 	bl	8008100 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi1024ELi1024EE8initNodeEv>

	nh.subscribe(sub_cmd_vel);
 8007c6a:	4908      	ldr	r1, [pc, #32]	@ (8007c8c <_Z9ros_setupv+0x2c>)
 8007c6c:	4806      	ldr	r0, [pc, #24]	@ (8007c88 <_Z9ros_setupv+0x28>)
 8007c6e:	f000 fa64 	bl	800813a <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi1024ELi1024EE9subscribeERNS_11Subscriber_E>
	nh.advertise(pub_left_motor_rpm);
 8007c72:	4907      	ldr	r1, [pc, #28]	@ (8007c90 <_Z9ros_setupv+0x30>)
 8007c74:	4804      	ldr	r0, [pc, #16]	@ (8007c88 <_Z9ros_setupv+0x28>)
 8007c76:	f000 f9e2 	bl	800803e <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi1024ELi1024EE9advertiseERNS_9PublisherE>
	nh.advertise(pub_right_motor_rpm);
 8007c7a:	4906      	ldr	r1, [pc, #24]	@ (8007c94 <_Z9ros_setupv+0x34>)
 8007c7c:	4802      	ldr	r0, [pc, #8]	@ (8007c88 <_Z9ros_setupv+0x28>)
 8007c7e:	f000 f9de 	bl	800803e <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi1024ELi1024EE9advertiseERNS_9PublisherE>
}
 8007c82:	bf00      	nop
 8007c84:	bd80      	pop	{r7, pc}
 8007c86:	bf00      	nop
 8007c88:	20000a48 	.word	0x20000a48
 8007c8c:	20001330 	.word	0x20001330
 8007c90:	200013a0 	.word	0x200013a0
 8007c94:	200013b4 	.word	0x200013b4

08007c98 <_Z6millisv>:

uint32_t millis()
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8007c9c:	f001 fb2c 	bl	80092f8 <HAL_GetTick>
 8007ca0:	4603      	mov	r3, r0
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	bd80      	pop	{r7, pc}
	...

08007ca8 <setup>:

void setup()
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	af00      	add	r7, sp, #0
	ros_setup();
 8007cac:	f7ff ffd8 	bl	8007c60 <_Z9ros_setupv>

	mecabot_encoder_init();
 8007cb0:	f000 ff88 	bl	8008bc4 <mecabot_encoder_init>

	mecabot_motor_init();
 8007cb4:	f000 ff5e 	bl	8008b74 <mecabot_motor_init>
	for (int i=0; i<NUM_OF_MOTOR; i++)
	{
		mecabot_motor_start(motor[i]);
	}
	*/
	Motor_SetDirection(motor[front_left], motor[front_left]->direction);
 8007cb8:	4b14      	ldr	r3, [pc, #80]	@ (8007d0c <setup+0x64>)
 8007cba:	681a      	ldr	r2, [r3, #0]
 8007cbc:	4b13      	ldr	r3, [pc, #76]	@ (8007d0c <setup+0x64>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f993 3000 	ldrsb.w	r3, [r3]
 8007cc4:	4619      	mov	r1, r3
 8007cc6:	4610      	mov	r0, r2
 8007cc8:	f7f9 fa34 	bl	8001134 <Motor_SetDirection>
	Motor_SetDirection(motor[front_right], motor[front_right]->direction);
 8007ccc:	4b0f      	ldr	r3, [pc, #60]	@ (8007d0c <setup+0x64>)
 8007cce:	685a      	ldr	r2, [r3, #4]
 8007cd0:	4b0e      	ldr	r3, [pc, #56]	@ (8007d0c <setup+0x64>)
 8007cd2:	685b      	ldr	r3, [r3, #4]
 8007cd4:	f993 3000 	ldrsb.w	r3, [r3]
 8007cd8:	4619      	mov	r1, r3
 8007cda:	4610      	mov	r0, r2
 8007cdc:	f7f9 fa2a 	bl	8001134 <Motor_SetDirection>
	HAL_TIM_PWM_Start(&htim_motor, motor[front_left]->pwm_channel);
 8007ce0:	4b0a      	ldr	r3, [pc, #40]	@ (8007d0c <setup+0x64>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	685b      	ldr	r3, [r3, #4]
 8007ce6:	4619      	mov	r1, r3
 8007ce8:	4809      	ldr	r0, [pc, #36]	@ (8007d10 <setup+0x68>)
 8007cea:	f002 fe71 	bl	800a9d0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim_motor, motor[front_right]->pwm_channel);
 8007cee:	4b07      	ldr	r3, [pc, #28]	@ (8007d0c <setup+0x64>)
 8007cf0:	685b      	ldr	r3, [r3, #4]
 8007cf2:	685b      	ldr	r3, [r3, #4]
 8007cf4:	4619      	mov	r1, r3
 8007cf6:	4806      	ldr	r0, [pc, #24]	@ (8007d10 <setup+0x68>)
 8007cf8:	f002 fe6a 	bl	800a9d0 <HAL_TIM_PWM_Start>

	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8007cfc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8007d00:	4804      	ldr	r0, [pc, #16]	@ (8007d14 <setup+0x6c>)
 8007d02:	f002 f84f 	bl	8009da4 <HAL_GPIO_TogglePin>
}
 8007d06:	bf00      	nop
 8007d08:	bd80      	pop	{r7, pc}
 8007d0a:	bf00      	nop
 8007d0c:	200019f8 	.word	0x200019f8
 8007d10:	200000dc 	.word	0x200000dc
 8007d14:	40011000 	.word	0x40011000

08007d18 <loop>:

void loop()
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	af00      	add	r7, sp, #0
	t = millis();
 8007d1c:	f7ff ffbc 	bl	8007c98 <_Z6millisv>
 8007d20:	4603      	mov	r3, r0
 8007d22:	4a13      	ldr	r2, [pc, #76]	@ (8007d70 <loop+0x58>)
 8007d24:	6013      	str	r3, [r2, #0]

	/* Motor control */
	if ((t - t_previous[MOTOR_CONTROL_ID]) >= dt[MOTOR_CONTROL_ID])
 8007d26:	4b12      	ldr	r3, [pc, #72]	@ (8007d70 <loop+0x58>)
 8007d28:	681a      	ldr	r2, [r3, #0]
 8007d2a:	4b12      	ldr	r3, [pc, #72]	@ (8007d74 <loop+0x5c>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	1ad2      	subs	r2, r2, r3
 8007d30:	4b11      	ldr	r3, [pc, #68]	@ (8007d78 <loop+0x60>)
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	429a      	cmp	r2, r3
 8007d36:	d305      	bcc.n	8007d44 <loop+0x2c>
	{
		calculateMotorSpeed();
 8007d38:	f000 f8c2 	bl	8007ec0 <_Z19calculateMotorSpeedv>
		t_previous[MOTOR_CONTROL_ID] = t;
 8007d3c:	4b0c      	ldr	r3, [pc, #48]	@ (8007d70 <loop+0x58>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	4a0c      	ldr	r2, [pc, #48]	@ (8007d74 <loop+0x5c>)
 8007d42:	6013      	str	r3, [r2, #0]
	}
	/* RPM publish */
	if ((t - t_previous[RPM_PUBLISH_ID]) >= dt[RPM_PUBLISH_ID])
 8007d44:	4b0a      	ldr	r3, [pc, #40]	@ (8007d70 <loop+0x58>)
 8007d46:	681a      	ldr	r2, [r3, #0]
 8007d48:	4b0a      	ldr	r3, [pc, #40]	@ (8007d74 <loop+0x5c>)
 8007d4a:	685b      	ldr	r3, [r3, #4]
 8007d4c:	1ad2      	subs	r2, r2, r3
 8007d4e:	4b0a      	ldr	r3, [pc, #40]	@ (8007d78 <loop+0x60>)
 8007d50:	685b      	ldr	r3, [r3, #4]
 8007d52:	429a      	cmp	r2, r3
 8007d54:	d307      	bcc.n	8007d66 <loop+0x4e>
	{
		updateRpm();
 8007d56:	f000 f813 	bl	8007d80 <_Z9updateRpmv>
		publishRpmMsg();
 8007d5a:	f000 f89d 	bl	8007e98 <_Z13publishRpmMsgv>
		t_previous[RPM_PUBLISH_ID] = t;
 8007d5e:	4b04      	ldr	r3, [pc, #16]	@ (8007d70 <loop+0x58>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	4a04      	ldr	r2, [pc, #16]	@ (8007d74 <loop+0x5c>)
 8007d64:	6053      	str	r3, [r2, #4]
	}
	/* Odometry publish */

	nh.spinOnce();
 8007d66:	4805      	ldr	r0, [pc, #20]	@ (8007d7c <loop+0x64>)
 8007d68:	f000 fa13 	bl	8008192 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi1024ELi1024EE8spinOnceEv>
}
 8007d6c:	bf00      	nop
 8007d6e:	bd80      	pop	{r7, pc}
 8007d70:	200019e8 	.word	0x200019e8
 8007d74:	200019dc 	.word	0x200019dc
 8007d78:	20000000 	.word	0x20000000
 8007d7c:	20000a48 	.word	0x20000a48

08007d80 <_Z9updateRpmv>:

uint16_t d_tick = 0;
float data = 0;

void updateRpm()
{
 8007d80:	b590      	push	{r4, r7, lr}
 8007d82:	b083      	sub	sp, #12
 8007d84:	af00      	add	r7, sp, #0
	for (int i=0; i<NUM_OF_MOTOR; i++)
 8007d86:	2300      	movs	r3, #0
 8007d88:	607b      	str	r3, [r7, #4]
 8007d8a:	e06a      	b.n	8007e62 <_Z9updateRpmv+0xe2>
	{
		d_tick = 0;
 8007d8c:	4b39      	ldr	r3, [pc, #228]	@ (8007e74 <_Z9updateRpmv+0xf4>)
 8007d8e:	2200      	movs	r2, #0
 8007d90:	801a      	strh	r2, [r3, #0]
		// Encoder_UpdateTick(my_encoder);

		if (encoder[i]->tick < last_tick[i])
 8007d92:	4a39      	ldr	r2, [pc, #228]	@ (8007e78 <_Z9updateRpmv+0xf8>)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d9a:	881a      	ldrh	r2, [r3, #0]
 8007d9c:	4937      	ldr	r1, [pc, #220]	@ (8007e7c <_Z9updateRpmv+0xfc>)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8007da4:	429a      	cmp	r2, r3
 8007da6:	d20f      	bcs.n	8007dc8 <_Z9updateRpmv+0x48>
		{
			d_tick = encoder[i]->tick + (0xFFFF - last_tick[i]);
 8007da8:	4a33      	ldr	r2, [pc, #204]	@ (8007e78 <_Z9updateRpmv+0xf8>)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007db0:	881a      	ldrh	r2, [r3, #0]
 8007db2:	4932      	ldr	r1, [pc, #200]	@ (8007e7c <_Z9updateRpmv+0xfc>)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8007dba:	1ad3      	subs	r3, r2, r3
 8007dbc:	b29b      	uxth	r3, r3
 8007dbe:	3b01      	subs	r3, #1
 8007dc0:	b29a      	uxth	r2, r3
 8007dc2:	4b2c      	ldr	r3, [pc, #176]	@ (8007e74 <_Z9updateRpmv+0xf4>)
 8007dc4:	801a      	strh	r2, [r3, #0]
 8007dc6:	e00c      	b.n	8007de2 <_Z9updateRpmv+0x62>
		}
		else
		{
			d_tick = encoder[i]->tick - last_tick[i];
 8007dc8:	4a2b      	ldr	r2, [pc, #172]	@ (8007e78 <_Z9updateRpmv+0xf8>)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007dd0:	881a      	ldrh	r2, [r3, #0]
 8007dd2:	492a      	ldr	r1, [pc, #168]	@ (8007e7c <_Z9updateRpmv+0xfc>)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8007dda:	1ad3      	subs	r3, r2, r3
 8007ddc:	b29a      	uxth	r2, r3
 8007dde:	4b25      	ldr	r3, [pc, #148]	@ (8007e74 <_Z9updateRpmv+0xf4>)
 8007de0:	801a      	strh	r2, [r3, #0]
		}
		last_tick[i] = encoder[i]->tick;
 8007de2:	4a25      	ldr	r2, [pc, #148]	@ (8007e78 <_Z9updateRpmv+0xf8>)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007dea:	8819      	ldrh	r1, [r3, #0]
 8007dec:	4a23      	ldr	r2, [pc, #140]	@ (8007e7c <_Z9updateRpmv+0xfc>)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		// Get the number of rotation
		data = (float)d_tick / ENCODER_RESOLUTION;
 8007df4:	4b1f      	ldr	r3, [pc, #124]	@ (8007e74 <_Z9updateRpmv+0xf4>)
 8007df6:	881b      	ldrh	r3, [r3, #0]
 8007df8:	4618      	mov	r0, r3
 8007dfa:	f7f8 fea5 	bl	8000b48 <__aeabi_ui2f>
 8007dfe:	4603      	mov	r3, r0
 8007e00:	491f      	ldr	r1, [pc, #124]	@ (8007e80 <_Z9updateRpmv+0x100>)
 8007e02:	4618      	mov	r0, r3
 8007e04:	f7f8 ffac 	bl	8000d60 <__aeabi_fdiv>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	461a      	mov	r2, r3
 8007e0c:	4b1d      	ldr	r3, [pc, #116]	@ (8007e84 <_Z9updateRpmv+0x104>)
 8007e0e:	601a      	str	r2, [r3, #0]
		// Get the rotation per second
		data = (data * 1000) / dt[RPM_PUBLISH_ID];
 8007e10:	4b1c      	ldr	r3, [pc, #112]	@ (8007e84 <_Z9updateRpmv+0x104>)
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	491c      	ldr	r1, [pc, #112]	@ (8007e88 <_Z9updateRpmv+0x108>)
 8007e16:	4618      	mov	r0, r3
 8007e18:	f7f8 feee 	bl	8000bf8 <__aeabi_fmul>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	461c      	mov	r4, r3
 8007e20:	4b1a      	ldr	r3, [pc, #104]	@ (8007e8c <_Z9updateRpmv+0x10c>)
 8007e22:	685b      	ldr	r3, [r3, #4]
 8007e24:	4618      	mov	r0, r3
 8007e26:	f7f8 fe8f 	bl	8000b48 <__aeabi_ui2f>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	4619      	mov	r1, r3
 8007e2e:	4620      	mov	r0, r4
 8007e30:	f7f8 ff96 	bl	8000d60 <__aeabi_fdiv>
 8007e34:	4603      	mov	r3, r0
 8007e36:	461a      	mov	r2, r3
 8007e38:	4b12      	ldr	r3, [pc, #72]	@ (8007e84 <_Z9updateRpmv+0x104>)
 8007e3a:	601a      	str	r2, [r3, #0]
		// Get the rotation per minute
		//data *= 60;

		rpm_msg[i].data = (uint32_t)(data*60);
 8007e3c:	4b11      	ldr	r3, [pc, #68]	@ (8007e84 <_Z9updateRpmv+0x104>)
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	4913      	ldr	r1, [pc, #76]	@ (8007e90 <_Z9updateRpmv+0x110>)
 8007e42:	4618      	mov	r0, r3
 8007e44:	f7f8 fed8 	bl	8000bf8 <__aeabi_fmul>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f7f9 f89a 	bl	8000f84 <__aeabi_f2uiz>
 8007e50:	4602      	mov	r2, r0
 8007e52:	4910      	ldr	r1, [pc, #64]	@ (8007e94 <_Z9updateRpmv+0x114>)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	00db      	lsls	r3, r3, #3
 8007e58:	440b      	add	r3, r1
 8007e5a:	605a      	str	r2, [r3, #4]
	for (int i=0; i<NUM_OF_MOTOR; i++)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	3301      	adds	r3, #1
 8007e60:	607b      	str	r3, [r7, #4]
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2b01      	cmp	r3, #1
 8007e66:	dd91      	ble.n	8007d8c <_Z9updateRpmv+0xc>
	}
}
 8007e68:	bf00      	nop
 8007e6a:	bf00      	nop
 8007e6c:	370c      	adds	r7, #12
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd90      	pop	{r4, r7, pc}
 8007e72:	bf00      	nop
 8007e74:	200019f0 	.word	0x200019f0
 8007e78:	20001a08 	.word	0x20001a08
 8007e7c:	200019ec 	.word	0x200019ec
 8007e80:	41a00000 	.word	0x41a00000
 8007e84:	200019f4 	.word	0x200019f4
 8007e88:	447a0000 	.word	0x447a0000
 8007e8c:	20000000 	.word	0x20000000
 8007e90:	42700000 	.word	0x42700000
 8007e94:	20001390 	.word	0x20001390

08007e98 <_Z13publishRpmMsgv>:

void publishRpmMsg()
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	af00      	add	r7, sp, #0
	pub_left_motor_rpm.publish(&rpm_msg[front_left]);
 8007e9c:	4904      	ldr	r1, [pc, #16]	@ (8007eb0 <_Z13publishRpmMsgv+0x18>)
 8007e9e:	4805      	ldr	r0, [pc, #20]	@ (8007eb4 <_Z13publishRpmMsgv+0x1c>)
 8007ea0:	f7fa fa76 	bl	8002390 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
	pub_right_motor_rpm.publish(&rpm_msg[front_right]);
 8007ea4:	4904      	ldr	r1, [pc, #16]	@ (8007eb8 <_Z13publishRpmMsgv+0x20>)
 8007ea6:	4805      	ldr	r0, [pc, #20]	@ (8007ebc <_Z13publishRpmMsgv+0x24>)
 8007ea8:	f7fa fa72 	bl	8002390 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
}
 8007eac:	bf00      	nop
 8007eae:	bd80      	pop	{r7, pc}
 8007eb0:	20001390 	.word	0x20001390
 8007eb4:	200013a0 	.word	0x200013a0
 8007eb8:	20001398 	.word	0x20001398
 8007ebc:	200013b4 	.word	0x200013b4

08007ec0 <_Z19calculateMotorSpeedv>:

void calculateMotorSpeed()
{
 8007ec0:	b5b0      	push	{r4, r5, r7, lr}
 8007ec2:	b084      	sub	sp, #16
 8007ec4:	af00      	add	r7, sp, #0
	float linear_vel = goal_vel[0];
 8007ec6:	4b38      	ldr	r3, [pc, #224]	@ (8007fa8 <_Z19calculateMotorSpeedv+0xe8>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	60fb      	str	r3, [r7, #12]
	float angular_vel = goal_vel[2];
 8007ecc:	4b36      	ldr	r3, [pc, #216]	@ (8007fa8 <_Z19calculateMotorSpeedv+0xe8>)
 8007ece:	689b      	ldr	r3, [r3, #8]
 8007ed0:	60bb      	str	r3, [r7, #8]

	float left_motor_vel = linear_vel - (angular_vel * WHEEL_SEPARATION_Y / 2);
 8007ed2:	68f8      	ldr	r0, [r7, #12]
 8007ed4:	f7f8 faa8 	bl	8000428 <__aeabi_f2d>
 8007ed8:	4604      	mov	r4, r0
 8007eda:	460d      	mov	r5, r1
 8007edc:	68b8      	ldr	r0, [r7, #8]
 8007ede:	f7f8 faa3 	bl	8000428 <__aeabi_f2d>
 8007ee2:	a32f      	add	r3, pc, #188	@ (adr r3, 8007fa0 <_Z19calculateMotorSpeedv+0xe0>)
 8007ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ee8:	f7f8 faf6 	bl	80004d8 <__aeabi_dmul>
 8007eec:	4602      	mov	r2, r0
 8007eee:	460b      	mov	r3, r1
 8007ef0:	4610      	mov	r0, r2
 8007ef2:	4619      	mov	r1, r3
 8007ef4:	f04f 0200 	mov.w	r2, #0
 8007ef8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007efc:	f7f8 fc16 	bl	800072c <__aeabi_ddiv>
 8007f00:	4602      	mov	r2, r0
 8007f02:	460b      	mov	r3, r1
 8007f04:	4620      	mov	r0, r4
 8007f06:	4629      	mov	r1, r5
 8007f08:	f7f8 f92e 	bl	8000168 <__aeabi_dsub>
 8007f0c:	4602      	mov	r2, r0
 8007f0e:	460b      	mov	r3, r1
 8007f10:	4610      	mov	r0, r2
 8007f12:	4619      	mov	r1, r3
 8007f14:	f7f8 fd12 	bl	800093c <__aeabi_d2f>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	607b      	str	r3, [r7, #4]
	float right_motor_vel = linear_vel + (angular_vel * WHEEL_SEPARATION_Y / 2);
 8007f1c:	68f8      	ldr	r0, [r7, #12]
 8007f1e:	f7f8 fa83 	bl	8000428 <__aeabi_f2d>
 8007f22:	4604      	mov	r4, r0
 8007f24:	460d      	mov	r5, r1
 8007f26:	68b8      	ldr	r0, [r7, #8]
 8007f28:	f7f8 fa7e 	bl	8000428 <__aeabi_f2d>
 8007f2c:	a31c      	add	r3, pc, #112	@ (adr r3, 8007fa0 <_Z19calculateMotorSpeedv+0xe0>)
 8007f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f32:	f7f8 fad1 	bl	80004d8 <__aeabi_dmul>
 8007f36:	4602      	mov	r2, r0
 8007f38:	460b      	mov	r3, r1
 8007f3a:	4610      	mov	r0, r2
 8007f3c:	4619      	mov	r1, r3
 8007f3e:	f04f 0200 	mov.w	r2, #0
 8007f42:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007f46:	f7f8 fbf1 	bl	800072c <__aeabi_ddiv>
 8007f4a:	4602      	mov	r2, r0
 8007f4c:	460b      	mov	r3, r1
 8007f4e:	4620      	mov	r0, r4
 8007f50:	4629      	mov	r1, r5
 8007f52:	f7f8 f90b 	bl	800016c <__adddf3>
 8007f56:	4602      	mov	r2, r0
 8007f58:	460b      	mov	r3, r1
 8007f5a:	4610      	mov	r0, r2
 8007f5c:	4619      	mov	r1, r3
 8007f5e:	f7f8 fced 	bl	800093c <__aeabi_d2f>
 8007f62:	4603      	mov	r3, r0
 8007f64:	603b      	str	r3, [r7, #0]

	left_motor_vel = constraint(left_motor_vel, -WHEEL_MAX_VELOCITY, WHEEL_MAX_VELOCITY);
 8007f66:	4a11      	ldr	r2, [pc, #68]	@ (8007fac <_Z19calculateMotorSpeedv+0xec>)
 8007f68:	4911      	ldr	r1, [pc, #68]	@ (8007fb0 <_Z19calculateMotorSpeedv+0xf0>)
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f7ff fdd6 	bl	8007b1c <_Z10constraintfff>
 8007f70:	6078      	str	r0, [r7, #4]
	right_motor_vel = constraint(right_motor_vel, -WHEEL_MAX_VELOCITY, WHEEL_MAX_VELOCITY);
 8007f72:	4a0e      	ldr	r2, [pc, #56]	@ (8007fac <_Z19calculateMotorSpeedv+0xec>)
 8007f74:	490e      	ldr	r1, [pc, #56]	@ (8007fb0 <_Z19calculateMotorSpeedv+0xf0>)
 8007f76:	6838      	ldr	r0, [r7, #0]
 8007f78:	f7ff fdd0 	bl	8007b1c <_Z10constraintfff>
 8007f7c:	6038      	str	r0, [r7, #0]

	mecabot_motor_set_velocity(motor[front_left], left_motor_vel);
 8007f7e:	4b0d      	ldr	r3, [pc, #52]	@ (8007fb4 <_Z19calculateMotorSpeedv+0xf4>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	6879      	ldr	r1, [r7, #4]
 8007f84:	4618      	mov	r0, r3
 8007f86:	f000 fe3f 	bl	8008c08 <mecabot_motor_set_velocity>
	mecabot_motor_set_velocity(motor[front_right], right_motor_vel);
 8007f8a:	4b0a      	ldr	r3, [pc, #40]	@ (8007fb4 <_Z19calculateMotorSpeedv+0xf4>)
 8007f8c:	685b      	ldr	r3, [r3, #4]
 8007f8e:	6839      	ldr	r1, [r7, #0]
 8007f90:	4618      	mov	r0, r3
 8007f92:	f000 fe39 	bl	8008c08 <mecabot_motor_set_velocity>
}
 8007f96:	bf00      	nop
 8007f98:	3710      	adds	r7, #16
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	bdb0      	pop	{r4, r5, r7, pc}
 8007f9e:	bf00      	nop
 8007fa0:	53f7ced9 	.word	0x53f7ced9
 8007fa4:	3f8ba5e3 	.word	0x3f8ba5e3
 8007fa8:	200019d0 	.word	0x200019d0
 8007fac:	3e4104fb 	.word	0x3e4104fb
 8007fb0:	be4104fb 	.word	0xbe4104fb
 8007fb4:	200019f8 	.word	0x200019f8

08007fb8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8007fb8:	b480      	push	{r7}
 8007fba:	b085      	sub	sp, #20
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
 8007fc0:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	60fb      	str	r3, [r7, #12]
 8007fc6:	e00c      	b.n	8007fe2 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x2a>
      arr[i] = (var >> (8 * i));
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	00db      	lsls	r3, r3, #3
 8007fcc:	683a      	ldr	r2, [r7, #0]
 8007fce:	fa22 f103 	lsr.w	r1, r2, r3
 8007fd2:	687a      	ldr	r2, [r7, #4]
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	4413      	add	r3, r2
 8007fd8:	b2ca      	uxtb	r2, r1
 8007fda:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	3301      	adds	r3, #1
 8007fe0:	60fb      	str	r3, [r7, #12]
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	2b03      	cmp	r3, #3
 8007fe6:	d9ef      	bls.n	8007fc8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x10>
  }
 8007fe8:	bf00      	nop
 8007fea:	bf00      	nop
 8007fec:	3714      	adds	r7, #20
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bc80      	pop	{r7}
 8007ff2:	4770      	bx	lr

08007ff4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8007ff4:	b480      	push	{r7}
 8007ff6:	b085      	sub	sp, #20
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
 8007ffc:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2200      	movs	r2, #0
 8008002:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8008004:	2300      	movs	r3, #0
 8008006:	60fb      	str	r3, [r7, #12]
 8008008:	e010      	b.n	800802c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x38>
      var |= (arr[i] << (8 * i));
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	6839      	ldr	r1, [r7, #0]
 8008010:	68fa      	ldr	r2, [r7, #12]
 8008012:	440a      	add	r2, r1
 8008014:	7812      	ldrb	r2, [r2, #0]
 8008016:	4611      	mov	r1, r2
 8008018:	68fa      	ldr	r2, [r7, #12]
 800801a:	00d2      	lsls	r2, r2, #3
 800801c:	fa01 f202 	lsl.w	r2, r1, r2
 8008020:	431a      	orrs	r2, r3
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	3301      	adds	r3, #1
 800802a:	60fb      	str	r3, [r7, #12]
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	2b03      	cmp	r3, #3
 8008030:	d9eb      	bls.n	800800a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x16>
  }
 8008032:	bf00      	nop
 8008034:	bf00      	nop
 8008036:	3714      	adds	r7, #20
 8008038:	46bd      	mov	sp, r7
 800803a:	bc80      	pop	{r7}
 800803c:	4770      	bx	lr

0800803e <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi1024ELi1024EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 800803e:	b480      	push	{r7}
 8008040:	b085      	sub	sp, #20
 8008042:	af00      	add	r7, sp, #0
 8008044:	6078      	str	r0, [r7, #4]
 8008046:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8008048:	2300      	movs	r3, #0
 800804a:	60fb      	str	r3, [r7, #12]
 800804c:	e01b      	b.n	8008086 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi1024ELi1024EE9advertiseERNS_9PublisherE+0x48>
    {
      if (publishers[i] == 0) // empty slot
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	68fa      	ldr	r2, [r7, #12]
 8008052:	f202 2206 	addw	r2, r2, #518	@ 0x206
 8008056:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d110      	bne.n	8008080 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi1024ELi1024EE9advertiseERNS_9PublisherE+0x42>
      {
        publishers[i] = &p;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	68fa      	ldr	r2, [r7, #12]
 8008062:	f202 2206 	addw	r2, r2, #518	@ 0x206
 8008066:	6839      	ldr	r1, [r7, #0]
 8008068:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	f103 0273 	add.w	r2, r3, #115	@ 0x73
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8008076:	687a      	ldr	r2, [r7, #4]
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	60da      	str	r2, [r3, #12]
        return true;
 800807c:	2301      	movs	r3, #1
 800807e:	e006      	b.n	800808e <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi1024ELi1024EE9advertiseERNS_9PublisherE+0x50>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	3301      	adds	r3, #1
 8008084:	60fb      	str	r3, [r7, #12]
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	2b0e      	cmp	r3, #14
 800808a:	dde0      	ble.n	800804e <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi1024ELi1024EE9advertiseERNS_9PublisherE+0x10>
      }
    }
    return false;
 800808c:	2300      	movs	r3, #0
  }
 800808e:	4618      	mov	r0, r3
 8008090:	3714      	adds	r7, #20
 8008092:	46bd      	mov	sp, r7
 8008094:	bc80      	pop	{r7}
 8008096:	4770      	bx	lr

08008098 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8008098:	b480      	push	{r7}
 800809a:	b083      	sub	sp, #12
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
 80080a0:	4a04      	ldr	r2, [pc, #16]	@ (80080b4 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	601a      	str	r2, [r3, #0]
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	4618      	mov	r0, r3
 80080aa:	370c      	adds	r7, #12
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bc80      	pop	{r7}
 80080b0:	4770      	bx	lr
 80080b2:	bf00      	nop
 80080b4:	0800d500 	.word	0x0800d500

080080b8 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b084      	sub	sp, #16
 80080bc:	af00      	add	r7, sp, #0
 80080be:	60f8      	str	r0, [r7, #12]
 80080c0:	60b9      	str	r1, [r7, #8]
 80080c2:	607a      	str	r2, [r7, #4]
 80080c4:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	4618      	mov	r0, r3
 80080ca:	f7ff ffe5 	bl	8008098 <_ZN3ros11Subscriber_C1Ev>
 80080ce:	4a0b      	ldr	r2, [pc, #44]	@ (80080fc <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei+0x44>)
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	601a      	str	r2, [r3, #0]
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	3310      	adds	r3, #16
 80080d8:	4618      	mov	r0, r3
 80080da:	f7fd ff37 	bl	8005f4c <_ZN13geometry_msgs5TwistC1Ev>
    cb_(cb),
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	687a      	ldr	r2, [r7, #4]
 80080e2:	659a      	str	r2, [r3, #88]	@ 0x58
    endpoint_(endpoint)
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	683a      	ldr	r2, [r7, #0]
 80080e8:	65da      	str	r2, [r3, #92]	@ 0x5c
  {
    topic_ = topic_name;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	68ba      	ldr	r2, [r7, #8]
 80080ee:	609a      	str	r2, [r3, #8]
  };
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	4618      	mov	r0, r3
 80080f4:	3710      	adds	r7, #16
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}
 80080fa:	bf00      	nop
 80080fc:	0800d36c 	.word	0x0800d36c

08008100 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi1024ELi1024EE8initNodeEv>:
  void initNode()
 8008100:	b580      	push	{r7, lr}
 8008102:	b082      	sub	sp, #8
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
    hardware_.init();
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	3304      	adds	r3, #4
 800810c:	4618      	mov	r0, r3
 800810e:	f7fa fa99 	bl	8002644 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2200      	movs	r2, #0
 8008116:	f8c3 2890 	str.w	r2, [r3, #2192]	@ 0x890
    bytes_ = 0;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2200      	movs	r2, #0
 800811e:	f8c3 2894 	str.w	r2, [r3, #2196]	@ 0x894
    index_ = 0;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2200      	movs	r2, #0
 8008126:	f8c3 289c 	str.w	r2, [r3, #2204]	@ 0x89c
    topic_ = 0;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2200      	movs	r2, #0
 800812e:	f8c3 2898 	str.w	r2, [r3, #2200]	@ 0x898
  };
 8008132:	bf00      	nop
 8008134:	3708      	adds	r7, #8
 8008136:	46bd      	mov	sp, r7
 8008138:	bd80      	pop	{r7, pc}

0800813a <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi1024ELi1024EE9subscribeERNS_11Subscriber_E>:

  /* Register a new subscriber */
  bool subscribe(Subscriber_& s)
 800813a:	b480      	push	{r7}
 800813c:	b085      	sub	sp, #20
 800813e:	af00      	add	r7, sp, #0
 8008140:	6078      	str	r0, [r7, #4]
 8008142:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8008144:	2300      	movs	r3, #0
 8008146:	60fb      	str	r3, [r7, #12]
 8008148:	e01a      	b.n	8008180 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi1024ELi1024EE9subscribeERNS_11Subscriber_E+0x46>
    {
      if (subscribers[i] == 0) // empty slot
 800814a:	687a      	ldr	r2, [r7, #4]
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 8008152:	009b      	lsls	r3, r3, #2
 8008154:	4413      	add	r3, r2
 8008156:	685b      	ldr	r3, [r3, #4]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d10e      	bne.n	800817a <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi1024ELi1024EE9subscribeERNS_11Subscriber_E+0x40>
      {
        subscribers[i] = &s;
 800815c:	687a      	ldr	r2, [r7, #4]
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 8008164:	009b      	lsls	r3, r3, #2
 8008166:	4413      	add	r3, r2
 8008168:	683a      	ldr	r2, [r7, #0]
 800816a:	605a      	str	r2, [r3, #4]
        s.id_ = i + 100;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	605a      	str	r2, [r3, #4]
        return true;
 8008176:	2301      	movs	r3, #1
 8008178:	e006      	b.n	8008188 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi1024ELi1024EE9subscribeERNS_11Subscriber_E+0x4e>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	3301      	adds	r3, #1
 800817e:	60fb      	str	r3, [r7, #12]
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	2b0e      	cmp	r3, #14
 8008184:	dde1      	ble.n	800814a <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi1024ELi1024EE9subscribeERNS_11Subscriber_E+0x10>
      }
    }
    return false;
 8008186:	2300      	movs	r3, #0
  }
 8008188:	4618      	mov	r0, r3
 800818a:	3714      	adds	r7, #20
 800818c:	46bd      	mov	sp, r7
 800818e:	bc80      	pop	{r7}
 8008190:	4770      	bx	lr

08008192 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi1024ELi1024EE8spinOnceEv>:
  virtual int spinOnce() override
 8008192:	b580      	push	{r7, lr}
 8008194:	b084      	sub	sp, #16
 8008196:	af00      	add	r7, sp, #0
 8008198:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	3304      	adds	r3, #4
 800819e:	4618      	mov	r0, r3
 80081a0:	f7fa fa7c 	bl	800269c <_ZN13STM32Hardware4timeEv>
 80081a4:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	f8d3 38ac 	ldr.w	r3, [r3, #2220]	@ 0x8ac
 80081ac:	68fa      	ldr	r2, [r7, #12]
 80081ae:	1ad3      	subs	r3, r2, r3
 80081b0:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d903      	bls.n	80081c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi1024ELi1024EE8spinOnceEv+0x2e>
      configured_ = false;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2200      	movs	r2, #0
 80081bc:	f883 28a4 	strb.w	r2, [r3, #2212]	@ 0x8a4
    if (mode_ != MODE_FIRST_FF)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f8d3 3890 	ldr.w	r3, [r3, #2192]	@ 0x890
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d009      	beq.n	80081de <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi1024ELi1024EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	f8d3 38b0 	ldr.w	r3, [r3, #2224]	@ 0x8b0
 80081d0:	68fa      	ldr	r2, [r7, #12]
 80081d2:	429a      	cmp	r2, r3
 80081d4:	d903      	bls.n	80081de <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi1024ELi1024EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2200      	movs	r2, #0
 80081da:	f8c3 2890 	str.w	r2, [r3, #2192]	@ 0x890
      if (spin_timeout_ > 0)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	695b      	ldr	r3, [r3, #20]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d013      	beq.n	800820e <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi1024ELi1024EE8spinOnceEv+0x7c>
        if ((hardware_.time() - c_time) > spin_timeout_)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	3304      	adds	r3, #4
 80081ea:	4618      	mov	r0, r3
 80081ec:	f7fa fa56 	bl	800269c <_ZN13STM32Hardware4timeEv>
 80081f0:	4602      	mov	r2, r0
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	1ad2      	subs	r2, r2, r3
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	695b      	ldr	r3, [r3, #20]
 80081fa:	429a      	cmp	r2, r3
 80081fc:	bf8c      	ite	hi
 80081fe:	2301      	movhi	r3, #1
 8008200:	2300      	movls	r3, #0
 8008202:	b2db      	uxtb	r3, r3
 8008204:	2b00      	cmp	r3, #0
 8008206:	d002      	beq.n	800820e <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi1024ELi1024EE8spinOnceEv+0x7c>
          return SPIN_TIMEOUT;
 8008208:	f06f 0301 	mvn.w	r3, #1
 800820c:	e190      	b.n	8008530 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi1024ELi1024EE8spinOnceEv+0x39e>
      int data = hardware_.read();
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	3304      	adds	r3, #4
 8008212:	4618      	mov	r0, r3
 8008214:	f7fa fa23 	bl	800265e <_ZN13STM32Hardware4readEv>
 8008218:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	2b00      	cmp	r3, #0
 800821e:	f2c0 8170 	blt.w	8008502 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi1024ELi1024EE8spinOnceEv+0x370>
      checksum_ += data;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f8d3 28a0 	ldr.w	r2, [r3, #2208]	@ 0x8a0
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	441a      	add	r2, r3
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f8c3 28a0 	str.w	r2, [r3, #2208]	@ 0x8a0
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f8d3 3890 	ldr.w	r3, [r3, #2192]	@ 0x890
 8008238:	2b07      	cmp	r3, #7
 800823a:	d11d      	bne.n	8008278 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi1024ELi1024EE8spinOnceEv+0xe6>
        message_in[index_++] = data;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	f8d3 389c 	ldr.w	r3, [r3, #2204]	@ 0x89c
 8008242:	1c59      	adds	r1, r3, #1
 8008244:	687a      	ldr	r2, [r7, #4]
 8008246:	f8c2 189c 	str.w	r1, [r2, #2204]	@ 0x89c
 800824a:	68ba      	ldr	r2, [r7, #8]
 800824c:	b2d1      	uxtb	r1, r2
 800824e:	687a      	ldr	r2, [r7, #4]
 8008250:	4413      	add	r3, r2
 8008252:	460a      	mov	r2, r1
 8008254:	761a      	strb	r2, [r3, #24]
        bytes_--;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
 800825c:	1e5a      	subs	r2, r3, #1
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	f8c3 2894 	str.w	r2, [r3, #2196]	@ 0x894
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
 800826a:	2b00      	cmp	r3, #0
 800826c:	d1b7      	bne.n	80081de <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi1024ELi1024EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2208      	movs	r2, #8
 8008272:	f8c3 2890 	str.w	r2, [r3, #2192]	@ 0x890
 8008276:	e7b2      	b.n	80081de <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi1024ELi1024EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f8d3 3890 	ldr.w	r3, [r3, #2192]	@ 0x890
 800827e:	2b00      	cmp	r3, #0
 8008280:	d128      	bne.n	80082d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi1024ELi1024EE8spinOnceEv+0x142>
        if (data == 0xff)
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	2bff      	cmp	r3, #255	@ 0xff
 8008286:	d10d      	bne.n	80082a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi1024ELi1024EE8spinOnceEv+0x112>
          mode_++;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f8d3 3890 	ldr.w	r3, [r3, #2192]	@ 0x890
 800828e:	1c5a      	adds	r2, r3, #1
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f8c3 2890 	str.w	r2, [r3, #2192]	@ 0x890
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	f103 0214 	add.w	r2, r3, #20
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f8c3 28b0 	str.w	r2, [r3, #2224]	@ 0x8b0
 80082a2:	e79c      	b.n	80081de <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi1024ELi1024EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	3304      	adds	r3, #4
 80082a8:	4618      	mov	r0, r3
 80082aa:	f7fa f9f7 	bl	800269c <_ZN13STM32Hardware4timeEv>
 80082ae:	4602      	mov	r2, r0
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	1ad3      	subs	r3, r2, r3
 80082b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80082b8:	4293      	cmp	r3, r2
 80082ba:	bf8c      	ite	hi
 80082bc:	2301      	movhi	r3, #1
 80082be:	2300      	movls	r3, #0
 80082c0:	b2db      	uxtb	r3, r3
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d08b      	beq.n	80081de <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi1024ELi1024EE8spinOnceEv+0x4c>
          configured_ = false;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2200      	movs	r2, #0
 80082ca:	f883 28a4 	strb.w	r2, [r3, #2212]	@ 0x8a4
          return SPIN_TIMEOUT;
 80082ce:	f06f 0301 	mvn.w	r3, #1
 80082d2:	e12d      	b.n	8008530 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi1024ELi1024EE8spinOnceEv+0x39e>
      else if (mode_ == MODE_PROTOCOL_VER)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f8d3 3890 	ldr.w	r3, [r3, #2192]	@ 0x890
 80082da:	2b01      	cmp	r3, #1
 80082dc:	d118      	bne.n	8008310 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi1024ELi1024EE8spinOnceEv+0x17e>
        if (data == PROTOCOL_VER)
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	2bfe      	cmp	r3, #254	@ 0xfe
 80082e2:	d107      	bne.n	80082f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi1024ELi1024EE8spinOnceEv+0x162>
          mode_++;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f8d3 3890 	ldr.w	r3, [r3, #2192]	@ 0x890
 80082ea:	1c5a      	adds	r2, r3, #1
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f8c3 2890 	str.w	r2, [r3, #2192]	@ 0x890
 80082f2:	e774      	b.n	80081de <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi1024ELi1024EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2200      	movs	r2, #0
 80082f8:	f8c3 2890 	str.w	r2, [r3, #2192]	@ 0x890
          if (configured_ == false)
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f893 38a4 	ldrb.w	r3, [r3, #2212]	@ 0x8a4
 8008302:	2b00      	cmp	r3, #0
 8008304:	f47f af6b 	bne.w	80081de <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi1024ELi1024EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	f000 f915 	bl	8008538 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi1024ELi1024EE15requestSyncTimeEv>
 800830e:	e766      	b.n	80081de <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi1024ELi1024EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f8d3 3890 	ldr.w	r3, [r3, #2192]	@ 0x890
 8008316:	2b02      	cmp	r3, #2
 8008318:	d113      	bne.n	8008342 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi1024ELi1024EE8spinOnceEv+0x1b0>
        bytes_ = data;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	68ba      	ldr	r2, [r7, #8]
 800831e:	f8c3 2894 	str.w	r2, [r3, #2196]	@ 0x894
        index_ = 0;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2200      	movs	r2, #0
 8008326:	f8c3 289c 	str.w	r2, [r3, #2204]	@ 0x89c
        mode_++;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	f8d3 3890 	ldr.w	r3, [r3, #2192]	@ 0x890
 8008330:	1c5a      	adds	r2, r3, #1
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	f8c3 2890 	str.w	r2, [r3, #2192]	@ 0x890
        checksum_ = data;               /* first byte for calculating size checksum */
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	68ba      	ldr	r2, [r7, #8]
 800833c:	f8c3 28a0 	str.w	r2, [r3, #2208]	@ 0x8a0
 8008340:	e74d      	b.n	80081de <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi1024ELi1024EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	f8d3 3890 	ldr.w	r3, [r3, #2192]	@ 0x890
 8008348:	2b03      	cmp	r3, #3
 800834a:	d110      	bne.n	800836e <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi1024ELi1024EE8spinOnceEv+0x1dc>
        bytes_ += data << 8;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f8d3 2894 	ldr.w	r2, [r3, #2196]	@ 0x894
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	021b      	lsls	r3, r3, #8
 8008356:	441a      	add	r2, r3
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f8c3 2894 	str.w	r2, [r3, #2196]	@ 0x894
        mode_++;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f8d3 3890 	ldr.w	r3, [r3, #2192]	@ 0x890
 8008364:	1c5a      	adds	r2, r3, #1
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f8c3 2890 	str.w	r2, [r3, #2192]	@ 0x890
 800836c:	e737      	b.n	80081de <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi1024ELi1024EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	f8d3 3890 	ldr.w	r3, [r3, #2192]	@ 0x890
 8008374:	2b04      	cmp	r3, #4
 8008376:	d116      	bne.n	80083a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi1024ELi1024EE8spinOnceEv+0x214>
        if ((checksum_ % 256) == 255)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	@ 0x8a0
 800837e:	425a      	negs	r2, r3
 8008380:	b2db      	uxtb	r3, r3
 8008382:	b2d2      	uxtb	r2, r2
 8008384:	bf58      	it	pl
 8008386:	4253      	negpl	r3, r2
 8008388:	2bff      	cmp	r3, #255	@ 0xff
 800838a:	d107      	bne.n	800839c <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi1024ELi1024EE8spinOnceEv+0x20a>
          mode_++;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f8d3 3890 	ldr.w	r3, [r3, #2192]	@ 0x890
 8008392:	1c5a      	adds	r2, r3, #1
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f8c3 2890 	str.w	r2, [r3, #2192]	@ 0x890
 800839a:	e720      	b.n	80081de <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi1024ELi1024EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2200      	movs	r2, #0
 80083a0:	f8c3 2890 	str.w	r2, [r3, #2192]	@ 0x890
 80083a4:	e71b      	b.n	80081de <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi1024ELi1024EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	f8d3 3890 	ldr.w	r3, [r3, #2192]	@ 0x890
 80083ac:	2b05      	cmp	r3, #5
 80083ae:	d10f      	bne.n	80083d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi1024ELi1024EE8spinOnceEv+0x23e>
        topic_ = data;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	68ba      	ldr	r2, [r7, #8]
 80083b4:	f8c3 2898 	str.w	r2, [r3, #2200]	@ 0x898
        mode_++;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f8d3 3890 	ldr.w	r3, [r3, #2192]	@ 0x890
 80083be:	1c5a      	adds	r2, r3, #1
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	f8c3 2890 	str.w	r2, [r3, #2192]	@ 0x890
        checksum_ = data;               /* first byte included in checksum */
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	68ba      	ldr	r2, [r7, #8]
 80083ca:	f8c3 28a0 	str.w	r2, [r3, #2208]	@ 0x8a0
 80083ce:	e706      	b.n	80081de <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi1024ELi1024EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f8d3 3890 	ldr.w	r3, [r3, #2192]	@ 0x890
 80083d6:	2b06      	cmp	r3, #6
 80083d8:	d117      	bne.n	800840a <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi1024ELi1024EE8spinOnceEv+0x278>
        topic_ += data << 8;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f8d3 2898 	ldr.w	r2, [r3, #2200]	@ 0x898
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	021b      	lsls	r3, r3, #8
 80083e4:	441a      	add	r2, r3
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f8c3 2898 	str.w	r2, [r3, #2200]	@ 0x898
        mode_ = MODE_MESSAGE;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2207      	movs	r2, #7
 80083f0:	f8c3 2890 	str.w	r2, [r3, #2192]	@ 0x890
        if (bytes_ == 0)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	f47f aeef 	bne.w	80081de <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi1024ELi1024EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2208      	movs	r2, #8
 8008404:	f8c3 2890 	str.w	r2, [r3, #2192]	@ 0x890
 8008408:	e6e9      	b.n	80081de <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi1024ELi1024EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	f8d3 3890 	ldr.w	r3, [r3, #2192]	@ 0x890
 8008410:	2b08      	cmp	r3, #8
 8008412:	f47f aee4 	bne.w	80081de <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi1024ELi1024EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2200      	movs	r2, #0
 800841a:	f8c3 2890 	str.w	r2, [r3, #2192]	@ 0x890
        if ((checksum_ % 256) == 255)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	@ 0x8a0
 8008424:	425a      	negs	r2, r3
 8008426:	b2db      	uxtb	r3, r3
 8008428:	b2d2      	uxtb	r2, r2
 800842a:	bf58      	it	pl
 800842c:	4253      	negpl	r3, r2
 800842e:	2bff      	cmp	r3, #255	@ 0xff
 8008430:	f47f aed5 	bne.w	80081de <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi1024ELi1024EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f8d3 3898 	ldr.w	r3, [r3, #2200]	@ 0x898
 800843a:	2b00      	cmp	r3, #0
 800843c:	d110      	bne.n	8008460 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi1024ELi1024EE8spinOnceEv+0x2ce>
            requestSyncTime();
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f000 f87a 	bl	8008538 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi1024ELi1024EE15requestSyncTimeEv>
            negotiateTopics();
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f000 f894 	bl	8008572 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi1024ELi1024EE15negotiateTopicsEv>
            last_sync_time = c_time;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	68fa      	ldr	r2, [r7, #12]
 800844e:	f8c3 28a8 	str.w	r2, [r3, #2216]	@ 0x8a8
            last_sync_receive_time = c_time;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	68fa      	ldr	r2, [r7, #12]
 8008456:	f8c3 28ac 	str.w	r2, [r3, #2220]	@ 0x8ac
            return SPIN_ERR;
 800845a:	f04f 33ff 	mov.w	r3, #4294967295
 800845e:	e067      	b.n	8008530 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi1024ELi1024EE8spinOnceEv+0x39e>
          else if (topic_ == TopicInfo::ID_TIME)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f8d3 3898 	ldr.w	r3, [r3, #2200]	@ 0x898
 8008466:	2b0a      	cmp	r3, #10
 8008468:	d106      	bne.n	8008478 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi1024ELi1024EE8spinOnceEv+0x2e6>
            syncTime(message_in);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	3318      	adds	r3, #24
 800846e:	4619      	mov	r1, r3
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	f000 f95f 	bl	8008734 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi1024ELi1024EE8syncTimeEPh>
 8008476:	e6b2      	b.n	80081de <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi1024ELi1024EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f8d3 3898 	ldr.w	r3, [r3, #2200]	@ 0x898
 800847e:	2b06      	cmp	r3, #6
 8008480:	d10d      	bne.n	800849e <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi1024ELi1024EE8spinOnceEv+0x30c>
            req_param_resp.deserialize(message_in);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f603 02b8 	addw	r2, r3, #2232	@ 0x8b8
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	3318      	adds	r3, #24
 800848c:	4619      	mov	r1, r3
 800848e:	4610      	mov	r0, r2
 8008490:	f7f9 fddf 	bl	8002052 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2201      	movs	r2, #1
 8008498:	f883 28b4 	strb.w	r2, [r3, #2228]	@ 0x8b4
 800849c:	e69f      	b.n	80081de <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi1024ELi1024EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	f8d3 3898 	ldr.w	r3, [r3, #2200]	@ 0x898
 80084a4:	2b0b      	cmp	r3, #11
 80084a6:	d104      	bne.n	80084b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi1024ELi1024EE8spinOnceEv+0x320>
            configured_ = false;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2200      	movs	r2, #0
 80084ac:	f883 28a4 	strb.w	r2, [r3, #2212]	@ 0x8a4
 80084b0:	e695      	b.n	80081de <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi1024ELi1024EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	f8d3 3898 	ldr.w	r3, [r3, #2200]	@ 0x898
 80084b8:	3b64      	subs	r3, #100	@ 0x64
 80084ba:	687a      	ldr	r2, [r7, #4]
 80084bc:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 80084c0:	009b      	lsls	r3, r3, #2
 80084c2:	4413      	add	r3, r2
 80084c4:	685b      	ldr	r3, [r3, #4]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	f43f ae89 	beq.w	80081de <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi1024ELi1024EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f8d3 3898 	ldr.w	r3, [r3, #2200]	@ 0x898
 80084d2:	3b64      	subs	r3, #100	@ 0x64
 80084d4:	687a      	ldr	r2, [r7, #4]
 80084d6:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 80084da:	009b      	lsls	r3, r3, #2
 80084dc:	4413      	add	r3, r2
 80084de:	6858      	ldr	r0, [r3, #4]
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f8d3 3898 	ldr.w	r3, [r3, #2200]	@ 0x898
 80084e6:	3b64      	subs	r3, #100	@ 0x64
 80084e8:	687a      	ldr	r2, [r7, #4]
 80084ea:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 80084ee:	009b      	lsls	r3, r3, #2
 80084f0:	4413      	add	r3, r2
 80084f2:	685b      	ldr	r3, [r3, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	687a      	ldr	r2, [r7, #4]
 80084fa:	3218      	adds	r2, #24
 80084fc:	4611      	mov	r1, r2
 80084fe:	4798      	blx	r3
    while (true)
 8008500:	e66d      	b.n	80081de <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi1024ELi1024EE8spinOnceEv+0x4c>
        break;
 8008502:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f893 38a4 	ldrb.w	r3, [r3, #2212]	@ 0x8a4
 800850a:	2b00      	cmp	r3, #0
 800850c:	d00f      	beq.n	800852e <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi1024ELi1024EE8spinOnceEv+0x39c>
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f8d3 38a8 	ldr.w	r3, [r3, #2216]	@ 0x8a8
 8008514:	68fa      	ldr	r2, [r7, #12]
 8008516:	1ad3      	subs	r3, r2, r3
 8008518:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 800851c:	4293      	cmp	r3, r2
 800851e:	d906      	bls.n	800852e <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi1024ELi1024EE8spinOnceEv+0x39c>
      requestSyncTime();
 8008520:	6878      	ldr	r0, [r7, #4]
 8008522:	f000 f809 	bl	8008538 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi1024ELi1024EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	68fa      	ldr	r2, [r7, #12]
 800852a:	f8c3 28a8 	str.w	r2, [r3, #2216]	@ 0x8a8
    return SPIN_OK;
 800852e:	2300      	movs	r3, #0
  }
 8008530:	4618      	mov	r0, r3
 8008532:	3710      	adds	r7, #16
 8008534:	46bd      	mov	sp, r7
 8008536:	bd80      	pop	{r7, pc}

08008538 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi1024ELi1024EE15requestSyncTimeEv>:
  void requestSyncTime()
 8008538:	b580      	push	{r7, lr}
 800853a:	b086      	sub	sp, #24
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8008540:	f107 030c 	add.w	r3, r7, #12
 8008544:	4618      	mov	r0, r3
 8008546:	f7f9 f8ef 	bl	8001728 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f107 020c 	add.w	r2, r7, #12
 8008554:	210a      	movs	r1, #10
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	4798      	blx	r3
    rt_time = hardware_.time();
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	3304      	adds	r3, #4
 800855e:	4618      	mov	r0, r3
 8008560:	f7fa f89c 	bl	800269c <_ZN13STM32Hardware4timeEv>
 8008564:	4602      	mov	r2, r0
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	609a      	str	r2, [r3, #8]
  }
 800856a:	bf00      	nop
 800856c:	3718      	adds	r7, #24
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}

08008572 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi1024ELi1024EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 8008572:	b590      	push	{r4, r7, lr}
 8008574:	b08b      	sub	sp, #44	@ 0x2c
 8008576:	af00      	add	r7, sp, #0
 8008578:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 800857a:	f107 030c 	add.w	r3, r7, #12
 800857e:	4618      	mov	r0, r3
 8008580:	f7f9 f9bc 	bl	80018fc <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8008584:	2300      	movs	r3, #0
 8008586:	627b      	str	r3, [r7, #36]	@ 0x24
 8008588:	e05a      	b.n	8008640 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi1024ELi1024EE15negotiateTopicsEv+0xce>
    {
      if (publishers[i] != 0) // non-empty slot
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800858e:	f202 2206 	addw	r2, r2, #518	@ 0x206
 8008592:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d04f      	beq.n	800863a <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi1024ELi1024EE15negotiateTopicsEv+0xc8>
      {
        ti.topic_id = publishers[i]->id_;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800859e:	f202 2206 	addw	r2, r2, #518	@ 0x206
 80085a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085a6:	689b      	ldr	r3, [r3, #8]
 80085a8:	b29b      	uxth	r3, r3
 80085aa:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80085b0:	f202 2206 	addw	r2, r2, #518	@ 0x206
 80085b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80085c0:	f202 2206 	addw	r2, r2, #518	@ 0x206
 80085c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085c8:	6859      	ldr	r1, [r3, #4]
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80085ce:	f202 2206 	addw	r2, r2, #518	@ 0x206
 80085d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085d6:	685b      	ldr	r3, [r3, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	3308      	adds	r3, #8
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	4608      	mov	r0, r1
 80085e0:	4798      	blx	r3
 80085e2:	4603      	mov	r3, r0
 80085e4:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80085ea:	f202 2206 	addw	r2, r2, #518	@ 0x206
 80085ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085f2:	6859      	ldr	r1, [r3, #4]
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80085f8:	f202 2206 	addw	r2, r2, #518	@ 0x206
 80085fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008600:	685b      	ldr	r3, [r3, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	330c      	adds	r3, #12
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	4608      	mov	r0, r1
 800860a:	4798      	blx	r3
 800860c:	4603      	mov	r3, r0
 800860e:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8008610:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008614:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	681c      	ldr	r4, [r3, #0]
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008620:	f202 2206 	addw	r2, r2, #518	@ 0x206
 8008624:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008628:	4618      	mov	r0, r3
 800862a:	f7f9 fec5 	bl	80023b8 <_ZN3ros9Publisher15getEndpointTypeEv>
 800862e:	4601      	mov	r1, r0
 8008630:	f107 030c 	add.w	r3, r7, #12
 8008634:	461a      	mov	r2, r3
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 800863a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800863c:	3301      	adds	r3, #1
 800863e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008642:	2b0e      	cmp	r3, #14
 8008644:	dda1      	ble.n	800858a <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi1024ELi1024EE15negotiateTopicsEv+0x18>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8008646:	2300      	movs	r3, #0
 8008648:	627b      	str	r3, [r7, #36]	@ 0x24
 800864a:	e067      	b.n	800871c <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi1024ELi1024EE15negotiateTopicsEv+0x1aa>
    {
      if (subscribers[i] != 0) // non-empty slot
 800864c:	687a      	ldr	r2, [r7, #4]
 800864e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008650:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 8008654:	009b      	lsls	r3, r3, #2
 8008656:	4413      	add	r3, r2
 8008658:	685b      	ldr	r3, [r3, #4]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d05b      	beq.n	8008716 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi1024ELi1024EE15negotiateTopicsEv+0x1a4>
      {
        ti.topic_id = subscribers[i]->id_;
 800865e:	687a      	ldr	r2, [r7, #4]
 8008660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008662:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 8008666:	009b      	lsls	r3, r3, #2
 8008668:	4413      	add	r3, r2
 800866a:	685b      	ldr	r3, [r3, #4]
 800866c:	685b      	ldr	r3, [r3, #4]
 800866e:	b29b      	uxth	r3, r3
 8008670:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8008672:	687a      	ldr	r2, [r7, #4]
 8008674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008676:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 800867a:	009b      	lsls	r3, r3, #2
 800867c:	4413      	add	r3, r2
 800867e:	685b      	ldr	r3, [r3, #4]
 8008680:	689b      	ldr	r3, [r3, #8]
 8008682:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8008684:	687a      	ldr	r2, [r7, #4]
 8008686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008688:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 800868c:	009b      	lsls	r3, r3, #2
 800868e:	4413      	add	r3, r2
 8008690:	6859      	ldr	r1, [r3, #4]
 8008692:	687a      	ldr	r2, [r7, #4]
 8008694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008696:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 800869a:	009b      	lsls	r3, r3, #2
 800869c:	4413      	add	r3, r2
 800869e:	685b      	ldr	r3, [r3, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	3308      	adds	r3, #8
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	4608      	mov	r0, r1
 80086a8:	4798      	blx	r3
 80086aa:	4603      	mov	r3, r0
 80086ac:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 80086ae:	687a      	ldr	r2, [r7, #4]
 80086b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086b2:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 80086b6:	009b      	lsls	r3, r3, #2
 80086b8:	4413      	add	r3, r2
 80086ba:	6859      	ldr	r1, [r3, #4]
 80086bc:	687a      	ldr	r2, [r7, #4]
 80086be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086c0:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 80086c4:	009b      	lsls	r3, r3, #2
 80086c6:	4413      	add	r3, r2
 80086c8:	685b      	ldr	r3, [r3, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	330c      	adds	r3, #12
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	4608      	mov	r0, r1
 80086d2:	4798      	blx	r3
 80086d4:	4603      	mov	r3, r0
 80086d6:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 80086d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80086dc:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	681c      	ldr	r4, [r3, #0]
 80086e4:	687a      	ldr	r2, [r7, #4]
 80086e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086e8:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 80086ec:	009b      	lsls	r3, r3, #2
 80086ee:	4413      	add	r3, r2
 80086f0:	6859      	ldr	r1, [r3, #4]
 80086f2:	687a      	ldr	r2, [r7, #4]
 80086f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086f6:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 80086fa:	009b      	lsls	r3, r3, #2
 80086fc:	4413      	add	r3, r2
 80086fe:	685b      	ldr	r3, [r3, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	3304      	adds	r3, #4
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	4608      	mov	r0, r1
 8008708:	4798      	blx	r3
 800870a:	4601      	mov	r1, r0
 800870c:	f107 030c 	add.w	r3, r7, #12
 8008710:	461a      	mov	r2, r3
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8008716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008718:	3301      	adds	r3, #1
 800871a:	627b      	str	r3, [r7, #36]	@ 0x24
 800871c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800871e:	2b0e      	cmp	r3, #14
 8008720:	dd94      	ble.n	800864c <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi1024ELi1024EE15negotiateTopicsEv+0xda>
      }
    }
    configured_ = true;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2201      	movs	r2, #1
 8008726:	f883 28a4 	strb.w	r2, [r3, #2212]	@ 0x8a4
  }
 800872a:	bf00      	nop
 800872c:	372c      	adds	r7, #44	@ 0x2c
 800872e:	46bd      	mov	sp, r7
 8008730:	bd90      	pop	{r4, r7, pc}
	...

08008734 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi1024ELi1024EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8008734:	b580      	push	{r7, lr}
 8008736:	b086      	sub	sp, #24
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
 800873c:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 800873e:	f107 0308 	add.w	r3, r7, #8
 8008742:	4618      	mov	r0, r3
 8008744:	f7f8 fff0 	bl	8001728 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	3304      	adds	r3, #4
 800874c:	4618      	mov	r0, r3
 800874e:	f7f9 ffa5 	bl	800269c <_ZN13STM32Hardware4timeEv>
 8008752:	4602      	mov	r2, r0
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	689b      	ldr	r3, [r3, #8]
 8008758:	1ad3      	subs	r3, r2, r3
 800875a:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 800875c:	f107 0308 	add.w	r3, r7, #8
 8008760:	6839      	ldr	r1, [r7, #0]
 8008762:	4618      	mov	r0, r3
 8008764:	f7f9 f84f 	bl	8001806 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8008768:	68fa      	ldr	r2, [r7, #12]
 800876a:	697b      	ldr	r3, [r7, #20]
 800876c:	4914      	ldr	r1, [pc, #80]	@ (80087c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi1024ELi1024EE8syncTimeEPh+0x8c>)
 800876e:	fba1 1303 	umull	r1, r3, r1, r3
 8008772:	099b      	lsrs	r3, r3, #6
 8008774:	4413      	add	r3, r2
 8008776:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8008778:	6939      	ldr	r1, [r7, #16]
 800877a:	697a      	ldr	r2, [r7, #20]
 800877c:	4b10      	ldr	r3, [pc, #64]	@ (80087c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi1024ELi1024EE8syncTimeEPh+0x8c>)
 800877e:	fba3 0302 	umull	r0, r3, r3, r2
 8008782:	099b      	lsrs	r3, r3, #6
 8008784:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8008788:	fb00 f303 	mul.w	r3, r0, r3
 800878c:	1ad3      	subs	r3, r2, r3
 800878e:	4a0d      	ldr	r2, [pc, #52]	@ (80087c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi1024ELi1024EE8syncTimeEPh+0x90>)
 8008790:	fb02 f303 	mul.w	r3, r2, r3
 8008794:	440b      	add	r3, r1
 8008796:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8008798:	f107 0308 	add.w	r3, r7, #8
 800879c:	3304      	adds	r3, #4
 800879e:	4619      	mov	r1, r3
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	f000 f8a5 	bl	80088f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi1024ELi1024EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	3304      	adds	r3, #4
 80087aa:	4618      	mov	r0, r3
 80087ac:	f7f9 ff76 	bl	800269c <_ZN13STM32Hardware4timeEv>
 80087b0:	4602      	mov	r2, r0
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	f8c3 28ac 	str.w	r2, [r3, #2220]	@ 0x8ac
  }
 80087b8:	bf00      	nop
 80087ba:	3718      	adds	r7, #24
 80087bc:	46bd      	mov	sp, r7
 80087be:	bd80      	pop	{r7, pc}
 80087c0:	10624dd3 	.word	0x10624dd3
 80087c4:	000f4240 	.word	0x000f4240

080087c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi1024ELi1024EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b088      	sub	sp, #32
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	60f8      	str	r0, [r7, #12]
 80087d0:	60b9      	str	r1, [r7, #8]
 80087d2:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 80087d4:	68bb      	ldr	r3, [r7, #8]
 80087d6:	2b63      	cmp	r3, #99	@ 0x63
 80087d8:	dd09      	ble.n	80087ee <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x26>
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	f893 38a4 	ldrb.w	r3, [r3, #2212]	@ 0x8a4
 80087e0:	f083 0301 	eor.w	r3, r3, #1
 80087e4:	b2db      	uxtb	r3, r3
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d001      	beq.n	80087ee <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 80087ea:	2300      	movs	r3, #0
 80087ec:	e079      	b.n	80088e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	68fa      	ldr	r2, [r7, #12]
 80087f6:	f502 6283 	add.w	r2, r2, #1048	@ 0x418
 80087fa:	3207      	adds	r2, #7
 80087fc:	4611      	mov	r1, r2
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	4798      	blx	r3
 8008802:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	22ff      	movs	r2, #255	@ 0xff
 8008808:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    message_out[1] = PROTOCOL_VER;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	22fe      	movs	r2, #254	@ 0xfe
 8008810:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8008814:	697b      	ldr	r3, [r7, #20]
 8008816:	b2da      	uxtb	r2, r3
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 800881e:	697b      	ldr	r3, [r7, #20]
 8008820:	b29b      	uxth	r3, r3
 8008822:	0a1b      	lsrs	r3, r3, #8
 8008824:	b29b      	uxth	r3, r3
 8008826:	b2da      	uxtb	r2, r3
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	f883 241b 	strb.w	r2, [r3, #1051]	@ 0x41b
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	f893 241a 	ldrb.w	r2, [r3, #1050]	@ 0x41a
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	f893 341b 	ldrb.w	r3, [r3, #1051]	@ 0x41b
 800883a:	4413      	add	r3, r2
 800883c:	b2db      	uxtb	r3, r3
 800883e:	43db      	mvns	r3, r3
 8008840:	b2da      	uxtb	r2, r3
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8008848:	68bb      	ldr	r3, [r7, #8]
 800884a:	b2da      	uxtb	r2, r3
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	b21b      	sxth	r3, r3
 8008856:	121b      	asrs	r3, r3, #8
 8008858:	b21b      	sxth	r3, r3
 800885a:	b2da      	uxtb	r2, r3
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	f883 241e 	strb.w	r2, [r3, #1054]	@ 0x41e

    /* calculate checksum */
    int chk = 0;
 8008862:	2300      	movs	r3, #0
 8008864:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8008866:	2305      	movs	r3, #5
 8008868:	61bb      	str	r3, [r7, #24]
 800886a:	e00c      	b.n	8008886 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi1024ELi1024EE7publishEiPKNS_3MsgE+0xbe>
      chk += message_out[i];
 800886c:	68fa      	ldr	r2, [r7, #12]
 800886e:	69bb      	ldr	r3, [r7, #24]
 8008870:	4413      	add	r3, r2
 8008872:	f503 6383 	add.w	r3, r3, #1048	@ 0x418
 8008876:	781b      	ldrb	r3, [r3, #0]
 8008878:	461a      	mov	r2, r3
 800887a:	69fb      	ldr	r3, [r7, #28]
 800887c:	4413      	add	r3, r2
 800887e:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8008880:	69bb      	ldr	r3, [r7, #24]
 8008882:	3301      	adds	r3, #1
 8008884:	61bb      	str	r3, [r7, #24]
 8008886:	697b      	ldr	r3, [r7, #20]
 8008888:	3306      	adds	r3, #6
 800888a:	69ba      	ldr	r2, [r7, #24]
 800888c:	429a      	cmp	r2, r3
 800888e:	dded      	ble.n	800886c <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi1024ELi1024EE7publishEiPKNS_3MsgE+0xa4>
    l += 7;
 8008890:	697b      	ldr	r3, [r7, #20]
 8008892:	3307      	adds	r3, #7
 8008894:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8008896:	69fb      	ldr	r3, [r7, #28]
 8008898:	425a      	negs	r2, r3
 800889a:	b2db      	uxtb	r3, r3
 800889c:	b2d2      	uxtb	r2, r2
 800889e:	bf58      	it	pl
 80088a0:	4253      	negpl	r3, r2
 80088a2:	b2da      	uxtb	r2, r3
 80088a4:	697b      	ldr	r3, [r7, #20]
 80088a6:	1c59      	adds	r1, r3, #1
 80088a8:	6179      	str	r1, [r7, #20]
 80088aa:	43d2      	mvns	r2, r2
 80088ac:	b2d1      	uxtb	r1, r2
 80088ae:	68fa      	ldr	r2, [r7, #12]
 80088b0:	4413      	add	r3, r2
 80088b2:	460a      	mov	r2, r1
 80088b4:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

    if (l <= OUTPUT_SIZE)
 80088b8:	697b      	ldr	r3, [r7, #20]
 80088ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80088be:	dc0a      	bgt.n	80088d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	1d18      	adds	r0, r3, #4
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	f503 6383 	add.w	r3, r3, #1048	@ 0x418
 80088ca:	697a      	ldr	r2, [r7, #20]
 80088cc:	4619      	mov	r1, r3
 80088ce:	f7f9 fed4 	bl	800267a <_ZN13STM32Hardware5writeEPhi>
      return l;
 80088d2:	697b      	ldr	r3, [r7, #20]
 80088d4:	e005      	b.n	80088e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 80088d6:	4905      	ldr	r1, [pc, #20]	@ (80088ec <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x124>)
 80088d8:	68f8      	ldr	r0, [r7, #12]
 80088da:	f000 f847 	bl	800896c <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi1024ELi1024EE8logerrorEPKc>
      return -1;
 80088de:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 80088e2:	4618      	mov	r0, r3
 80088e4:	3720      	adds	r7, #32
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bd80      	pop	{r7, pc}
 80088ea:	bf00      	nop
 80088ec:	0800d29c 	.word	0x0800d29c

080088f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi1024ELi1024EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b084      	sub	sp, #16
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
 80088f8:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	3304      	adds	r3, #4
 80088fe:	4618      	mov	r0, r3
 8008900:	f7f9 fecc 	bl	800269c <_ZN13STM32Hardware4timeEv>
 8008904:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	681a      	ldr	r2, [r3, #0]
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	4914      	ldr	r1, [pc, #80]	@ (8008960 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi1024ELi1024EE6setNowERKNS_4TimeE+0x70>)
 800890e:	fba1 1303 	umull	r1, r3, r1, r3
 8008912:	099b      	lsrs	r3, r3, #6
 8008914:	1ad3      	subs	r3, r2, r3
 8008916:	1e5a      	subs	r2, r3, #1
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	60da      	str	r2, [r3, #12]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	6859      	ldr	r1, [r3, #4]
 8008920:	68fa      	ldr	r2, [r7, #12]
 8008922:	4b0f      	ldr	r3, [pc, #60]	@ (8008960 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi1024ELi1024EE6setNowERKNS_4TimeE+0x70>)
 8008924:	fba3 0302 	umull	r0, r3, r3, r2
 8008928:	099b      	lsrs	r3, r3, #6
 800892a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800892e:	fb00 f303 	mul.w	r3, r0, r3
 8008932:	1ad3      	subs	r3, r2, r3
 8008934:	4a0b      	ldr	r2, [pc, #44]	@ (8008964 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi1024ELi1024EE6setNowERKNS_4TimeE+0x74>)
 8008936:	fb02 f303 	mul.w	r3, r2, r3
 800893a:	1aca      	subs	r2, r1, r3
 800893c:	4b0a      	ldr	r3, [pc, #40]	@ (8008968 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi1024ELi1024EE6setNowERKNS_4TimeE+0x78>)
 800893e:	4413      	add	r3, r2
 8008940:	687a      	ldr	r2, [r7, #4]
 8008942:	6113      	str	r3, [r2, #16]
    normalizeSecNSec(sec_offset, nsec_offset);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	f103 020c 	add.w	r2, r3, #12
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	3310      	adds	r3, #16
 800894e:	4619      	mov	r1, r3
 8008950:	4610      	mov	r0, r2
 8008952:	f000 fc27 	bl	80091a4 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8008956:	bf00      	nop
 8008958:	3710      	adds	r7, #16
 800895a:	46bd      	mov	sp, r7
 800895c:	bd80      	pop	{r7, pc}
 800895e:	bf00      	nop
 8008960:	10624dd3 	.word	0x10624dd3
 8008964:	000f4240 	.word	0x000f4240
 8008968:	3b9aca00 	.word	0x3b9aca00

0800896c <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi1024ELi1024EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 800896c:	b580      	push	{r7, lr}
 800896e:	b082      	sub	sp, #8
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
 8008974:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8008976:	683a      	ldr	r2, [r7, #0]
 8008978:	2103      	movs	r1, #3
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f000 f804 	bl	8008988 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi1024ELi1024EE3logEcPKc>
  }
 8008980:	bf00      	nop
 8008982:	3708      	adds	r7, #8
 8008984:	46bd      	mov	sp, r7
 8008986:	bd80      	pop	{r7, pc}

08008988 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi1024ELi1024EE3logEcPKc>:
  void log(char byte, const char * msg)
 8008988:	b580      	push	{r7, lr}
 800898a:	b088      	sub	sp, #32
 800898c:	af00      	add	r7, sp, #0
 800898e:	60f8      	str	r0, [r7, #12]
 8008990:	460b      	mov	r3, r1
 8008992:	607a      	str	r2, [r7, #4]
 8008994:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8008996:	f107 0314 	add.w	r3, r7, #20
 800899a:	4618      	mov	r0, r3
 800899c:	f7f9 f96e 	bl	8001c7c <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 80089a0:	7afb      	ldrb	r3, [r7, #11]
 80089a2:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f107 0214 	add.w	r2, r7, #20
 80089b2:	2107      	movs	r1, #7
 80089b4:	68f8      	ldr	r0, [r7, #12]
 80089b6:	4798      	blx	r3
  }
 80089b8:	bf00      	nop
 80089ba:	3720      	adds	r7, #32
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd80      	pop	{r7, pc}

080089c0 <_Z41__static_initialization_and_destruction_0ii>:
 80089c0:	b5b0      	push	{r4, r5, r7, lr}
 80089c2:	b082      	sub	sp, #8
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
 80089c8:	6039      	str	r1, [r7, #0]
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2b01      	cmp	r3, #1
 80089ce:	d14c      	bne.n	8008a6a <_Z41__static_initialization_and_destruction_0ii+0xaa>
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80089d6:	4293      	cmp	r3, r2
 80089d8:	d147      	bne.n	8008a6a <_Z41__static_initialization_and_destruction_0ii+0xaa>
};

SerialComm comm_rosserial(huart_rosserial);
 80089da:	4926      	ldr	r1, [pc, #152]	@ (8008a74 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 80089dc:	4826      	ldr	r0, [pc, #152]	@ (8008a78 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 80089de:	f7f9 fcf6 	bl	80023ce <_ZN10SerialCommC1ER20__UART_HandleTypeDef>
/* GLOBAL VARIABLES START */

/*
 * ROS NodeHandle
 */
ros::NodeHandle nh;
 80089e2:	4826      	ldr	r0, [pc, #152]	@ (8008a7c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 80089e4:	f7ff f828 	bl	8007a38 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi1024ELi1024EEC1Ev>
ros::Time current_time;
 80089e8:	4825      	ldr	r0, [pc, #148]	@ (8008a80 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 80089ea:	f7f8 fe7d 	bl	80016e8 <_ZN3ros4TimeC1Ev>
const char joint_state_header_frame_id[] = "/joint_states";

/*
 * Subscribers
 */
ros::Subscriber<geometry_msgs::Twist> sub_cmd_vel("/cmd_vel", &commandVelocityCallback);
 80089ee:	2301      	movs	r3, #1
 80089f0:	4a24      	ldr	r2, [pc, #144]	@ (8008a84 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 80089f2:	4925      	ldr	r1, [pc, #148]	@ (8008a88 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 80089f4:	4825      	ldr	r0, [pc, #148]	@ (8008a8c <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 80089f6:	f7ff fb5f 	bl	80080b8 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>

/*
 * Publishers
 */
std_msgs::UInt32 rpm_msg[2];
 80089fa:	4b25      	ldr	r3, [pc, #148]	@ (8008a90 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 80089fc:	2401      	movs	r4, #1
 80089fe:	461d      	mov	r5, r3
 8008a00:	e004      	b.n	8008a0c <_Z41__static_initialization_and_destruction_0ii+0x4c>
 8008a02:	4628      	mov	r0, r5
 8008a04:	f7f9 fe56 	bl	80026b4 <_ZN8std_msgs6UInt32C1Ev>
 8008a08:	3c01      	subs	r4, #1
 8008a0a:	3508      	adds	r5, #8
 8008a0c:	2c00      	cmp	r4, #0
 8008a0e:	daf8      	bge.n	8008a02 <_Z41__static_initialization_and_destruction_0ii+0x42>
ros::Publisher pub_left_motor_rpm("/left_motor_rpm", &rpm_msg[front_left]);
 8008a10:	2300      	movs	r3, #0
 8008a12:	4a1f      	ldr	r2, [pc, #124]	@ (8008a90 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8008a14:	491f      	ldr	r1, [pc, #124]	@ (8008a94 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8008a16:	4820      	ldr	r0, [pc, #128]	@ (8008a98 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 8008a18:	f7f9 fca4 	bl	8002364 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher pub_right_motor_rpm("/right_motor_rpm", &rpm_msg[front_right]);
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	4a1f      	ldr	r2, [pc, #124]	@ (8008a9c <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 8008a20:	491f      	ldr	r1, [pc, #124]	@ (8008aa0 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 8008a22:	4820      	ldr	r0, [pc, #128]	@ (8008aa4 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 8008a24:	f7f9 fc9e 	bl	8002364 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
sensor_msgs::Imu imu_msg;
 8008a28:	481f      	ldr	r0, [pc, #124]	@ (8008aa8 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 8008a2a:	f7fb fc37 	bl	800429c <_ZN11sensor_msgs3ImuC1Ev>
ros::Publisher pub_imu("/imu", &imu_msg);
 8008a2e:	2300      	movs	r3, #0
 8008a30:	4a1d      	ldr	r2, [pc, #116]	@ (8008aa8 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 8008a32:	491e      	ldr	r1, [pc, #120]	@ (8008aac <_Z41__static_initialization_and_destruction_0ii+0xec>)
 8008a34:	481e      	ldr	r0, [pc, #120]	@ (8008ab0 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
 8008a36:	f7f9 fc95 	bl	8002364 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
sensor_msgs::JointState joint_states_msg;
 8008a3a:	481e      	ldr	r0, [pc, #120]	@ (8008ab4 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 8008a3c:	f7fc fa48 	bl	8004ed0 <_ZN11sensor_msgs10JointStateC1Ev>
ros::Publisher pub_joint_state("/joint_states", &joint_states_msg);
 8008a40:	2300      	movs	r3, #0
 8008a42:	4a1c      	ldr	r2, [pc, #112]	@ (8008ab4 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 8008a44:	491c      	ldr	r1, [pc, #112]	@ (8008ab8 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
 8008a46:	481d      	ldr	r0, [pc, #116]	@ (8008abc <_Z41__static_initialization_and_destruction_0ii+0xfc>)
 8008a48:	f7f9 fc8c 	bl	8002364 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
nav_msgs::Odometry odom_msg;
 8008a4c:	481c      	ldr	r0, [pc, #112]	@ (8008ac0 <_Z41__static_initialization_and_destruction_0ii+0x100>)
 8008a4e:	f7fe feef 	bl	8007830 <_ZN8nav_msgs8OdometryC1Ev>
ros::Publisher pub_odom("/odom", &odom_msg);
 8008a52:	2300      	movs	r3, #0
 8008a54:	4a1a      	ldr	r2, [pc, #104]	@ (8008ac0 <_Z41__static_initialization_and_destruction_0ii+0x100>)
 8008a56:	491b      	ldr	r1, [pc, #108]	@ (8008ac4 <_Z41__static_initialization_and_destruction_0ii+0x104>)
 8008a58:	481b      	ldr	r0, [pc, #108]	@ (8008ac8 <_Z41__static_initialization_and_destruction_0ii+0x108>)
 8008a5a:	f7f9 fc83 	bl	8002364 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>

/*
* TF broadcaster
*/
geometry_msgs::TransformStamped tf_msg; // tf information between "/odom" and "/baselink"
 8008a5e:	481b      	ldr	r0, [pc, #108]	@ (8008acc <_Z41__static_initialization_and_destruction_0ii+0x10c>)
 8008a60:	f7fd fb74 	bl	800614c <_ZN13geometry_msgs16TransformStampedC1Ev>
tf::TransformBroadcaster tf_broadcaster;
 8008a64:	481a      	ldr	r0, [pc, #104]	@ (8008ad0 <_Z41__static_initialization_and_destruction_0ii+0x110>)
 8008a66:	f7fd fd3d 	bl	80064e4 <_ZN2tf20TransformBroadcasterC1Ev>
 8008a6a:	bf00      	nop
 8008a6c:	3708      	adds	r7, #8
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bdb0      	pop	{r4, r5, r7, pc}
 8008a72:	bf00      	nop
 8008a74:	2000016c 	.word	0x2000016c
 8008a78:	2000023c 	.word	0x2000023c
 8008a7c:	20000a48 	.word	0x20000a48
 8008a80:	20001328 	.word	0x20001328
 8008a84:	08007c11 	.word	0x08007c11
 8008a88:	0800d2d8 	.word	0x0800d2d8
 8008a8c:	20001330 	.word	0x20001330
 8008a90:	20001390 	.word	0x20001390
 8008a94:	0800d2e4 	.word	0x0800d2e4
 8008a98:	200013a0 	.word	0x200013a0
 8008a9c:	20001398 	.word	0x20001398
 8008aa0:	0800d2f4 	.word	0x0800d2f4
 8008aa4:	200013b4 	.word	0x200013b4
 8008aa8:	200013c8 	.word	0x200013c8
 8008aac:	0800d308 	.word	0x0800d308
 8008ab0:	20001520 	.word	0x20001520
 8008ab4:	20001538 	.word	0x20001538
 8008ab8:	0800d310 	.word	0x0800d310
 8008abc:	20001590 	.word	0x20001590
 8008ac0:	200015a8 	.word	0x200015a8
 8008ac4:	0800d320 	.word	0x0800d320
 8008ac8:	200018b0 	.word	0x200018b0
 8008acc:	200018c8 	.word	0x200018c8
 8008ad0:	20001938 	.word	0x20001938

08008ad4 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:

  virtual void callback(unsigned char* data) override
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b082      	sub	sp, #8
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
 8008adc:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	3310      	adds	r3, #16
 8008ae2:	6839      	ldr	r1, [r7, #0]
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	f7fd fa73 	bl	8005fd0 <_ZN13geometry_msgs5Twist11deserializeEPh>
    this->cb_(msg);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008aee:	687a      	ldr	r2, [r7, #4]
 8008af0:	3210      	adds	r2, #16
 8008af2:	4610      	mov	r0, r2
 8008af4:	4798      	blx	r3
  }
 8008af6:	bf00      	nop
 8008af8:	3708      	adds	r7, #8
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bd80      	pop	{r7, pc}

08008afe <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5() override
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType() override
 8008afe:	b480      	push	{r7}
 8008b00:	b083      	sub	sp, #12
 8008b02:	af00      	add	r7, sp, #0
 8008b04:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
  }
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	370c      	adds	r7, #12
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bc80      	pop	{r7}
 8008b12:	4770      	bx	lr

08008b14 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b082      	sub	sp, #8
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	3310      	adds	r3, #16
 8008b20:	4618      	mov	r0, r3
 8008b22:	f7fd fa7b 	bl	800601c <_ZN13geometry_msgs5Twist7getTypeEv>
 8008b26:	4603      	mov	r3, r0
  }
 8008b28:	4618      	mov	r0, r3
 8008b2a:	3708      	adds	r7, #8
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bd80      	pop	{r7, pc}

08008b30 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b082      	sub	sp, #8
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	3310      	adds	r3, #16
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f7fd fa79 	bl	8006034 <_ZN13geometry_msgs5Twist6getMD5Ev>
 8008b42:	4603      	mov	r3, r0
  }
 8008b44:	4618      	mov	r0, r3
 8008b46:	3708      	adds	r7, #8
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bd80      	pop	{r7, pc}

08008b4c <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi1024ELi1024EE9connectedEv>:
  virtual bool connected() override
 8008b4c:	b480      	push	{r7}
 8008b4e:	b083      	sub	sp, #12
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
    return configured_;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f893 38a4 	ldrb.w	r3, [r3, #2212]	@ 0x8a4
  };
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	370c      	adds	r7, #12
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bc80      	pop	{r7}
 8008b62:	4770      	bx	lr

08008b64 <_GLOBAL__sub_I_comm_rosserial>:
 8008b64:	b580      	push	{r7, lr}
 8008b66:	af00      	add	r7, sp, #0
 8008b68:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8008b6c:	2001      	movs	r0, #1
 8008b6e:	f7ff ff27 	bl	80089c0 <_Z41__static_initialization_and_destruction_0ii>
 8008b72:	bd80      	pop	{r7, pc}

08008b74 <mecabot_motor_init>:

Motor motor[NUM_OF_MOTOR];
Encoder encoder[NUM_OF_MOTOR];

status_t mecabot_motor_init(void)
{
 8008b74:	b590      	push	{r4, r7, lr}
 8008b76:	b089      	sub	sp, #36	@ 0x24
 8008b78:	af00      	add	r7, sp, #0
    Motor_Handle_t handle_FL = {
 8008b7a:	4b0f      	ldr	r3, [pc, #60]	@ (8008bb8 <mecabot_motor_init+0x44>)
 8008b7c:	f107 0410 	add.w	r4, r7, #16
 8008b80:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008b82:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  .direction_port = GPIOB,
	  .direction_pin_A = GPIO_PIN_12,
	  .direction_pin_B = GPIO_PIN_12,
	  .pwm_frequency = 1000
    };
    motor[front_left] = Motor_Init(handle_FL);
 8008b86:	f107 0310 	add.w	r3, r7, #16
 8008b8a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008b8c:	f7f8 fa1a 	bl	8000fc4 <Motor_Init>
 8008b90:	4603      	mov	r3, r0
 8008b92:	4a0a      	ldr	r2, [pc, #40]	@ (8008bbc <mecabot_motor_init+0x48>)
 8008b94:	6013      	str	r3, [r2, #0]

    Motor_Handle_t handle_FR = {
 8008b96:	4b0a      	ldr	r3, [pc, #40]	@ (8008bc0 <mecabot_motor_init+0x4c>)
 8008b98:	463c      	mov	r4, r7
 8008b9a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008b9c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  .direction_port = GPIOB,
	  .direction_pin_A = GPIO_PIN_13,
	  .direction_pin_B = GPIO_PIN_13,
	  .pwm_frequency = 1000
    };
    motor[front_right] = Motor_Init(handle_FR);
 8008ba0:	463b      	mov	r3, r7
 8008ba2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008ba4:	f7f8 fa0e 	bl	8000fc4 <Motor_Init>
 8008ba8:	4603      	mov	r3, r0
 8008baa:	4a04      	ldr	r2, [pc, #16]	@ (8008bbc <mecabot_motor_init+0x48>)
 8008bac:	6053      	str	r3, [r2, #4]
	  .pwm_frequency = 1000
    };
    motor[back_right] = Motor_Init(handle_BR);
    */

    return STATUS_OK;
 8008bae:	2300      	movs	r3, #0
}
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	3724      	adds	r7, #36	@ 0x24
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bd90      	pop	{r4, r7, pc}
 8008bb8:	0800d328 	.word	0x0800d328
 8008bbc:	200019f8 	.word	0x200019f8
 8008bc0:	0800d338 	.word	0x0800d338

08008bc4 <mecabot_encoder_init>:

status_t mecabot_encoder_init(void)
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b082      	sub	sp, #8
 8008bc8:	af00      	add	r7, sp, #0
    Encoder_Handle_t handle_encoder = {
 8008bca:	f04f 33ff 	mov.w	r3, #4294967295
 8008bce:	603b      	str	r3, [r7, #0]
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	80bb      	strh	r3, [r7, #4]
        .max_count = 0xFFFFFFFF,
        .tick_read_channel = TIM_CHANNEL_1
    };
    encoder[front_left] = Encoder_Init(handle_encoder);
 8008bd4:	463b      	mov	r3, r7
 8008bd6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008bda:	f7f8 facf 	bl	800117c <Encoder_Init>
 8008bde:	4603      	mov	r3, r0
 8008be0:	4a08      	ldr	r2, [pc, #32]	@ (8008c04 <mecabot_encoder_init+0x40>)
 8008be2:	6013      	str	r3, [r2, #0]

    handle_encoder.tick_read_channel = TIM_CHANNEL_2;
 8008be4:	2304      	movs	r3, #4
 8008be6:	80bb      	strh	r3, [r7, #4]
    encoder[front_right] = Encoder_Init(handle_encoder);
 8008be8:	463b      	mov	r3, r7
 8008bea:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008bee:	f7f8 fac5 	bl	800117c <Encoder_Init>
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	4a03      	ldr	r2, [pc, #12]	@ (8008c04 <mecabot_encoder_init+0x40>)
 8008bf6:	6053      	str	r3, [r2, #4]
        
    handle_encoder.tick_read_channel = TIM_CHANNEL_4;
	encoder[back_right] = Encoder_Init(handle_encoder);
	*/

	return STATUS_OK;
 8008bf8:	2300      	movs	r3, #0
}
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	3708      	adds	r7, #8
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bd80      	pop	{r7, pc}
 8008c02:	bf00      	nop
 8008c04:	20001a08 	.word	0x20001a08

08008c08 <mecabot_motor_set_velocity>:
}

int8_t direction;
float velocity_debug;
status_t mecabot_motor_set_velocity(Motor motor, float velocity)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b084      	sub	sp, #16
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
 8008c10:	6039      	str	r1, [r7, #0]
	direction = (velocity >= 0) ? DIRECTION_FORWARD : DIRECTION_BACKWARD;
 8008c12:	f04f 0100 	mov.w	r1, #0
 8008c16:	6838      	ldr	r0, [r7, #0]
 8008c18:	f7f8 f9a0 	bl	8000f5c <__aeabi_fcmpge>
 8008c1c:	4603      	mov	r3, r0
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d001      	beq.n	8008c26 <mecabot_motor_set_velocity+0x1e>
 8008c22:	2201      	movs	r2, #1
 8008c24:	e001      	b.n	8008c2a <mecabot_motor_set_velocity+0x22>
 8008c26:	f04f 32ff 	mov.w	r2, #4294967295
 8008c2a:	4b23      	ldr	r3, [pc, #140]	@ (8008cb8 <mecabot_motor_set_velocity+0xb0>)
 8008c2c:	701a      	strb	r2, [r3, #0]
	velocity_debug = velocity;
 8008c2e:	4a23      	ldr	r2, [pc, #140]	@ (8008cbc <mecabot_motor_set_velocity+0xb4>)
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	6013      	str	r3, [r2, #0]
	if (direction != motor->direction)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f993 2000 	ldrsb.w	r2, [r3]
 8008c3a:	4b1f      	ldr	r3, [pc, #124]	@ (8008cb8 <mecabot_motor_set_velocity+0xb0>)
 8008c3c:	f993 3000 	ldrsb.w	r3, [r3]
 8008c40:	429a      	cmp	r2, r3
 8008c42:	d00b      	beq.n	8008c5c <mecabot_motor_set_velocity+0x54>
	{
		motor->direction = direction;
 8008c44:	4b1c      	ldr	r3, [pc, #112]	@ (8008cb8 <mecabot_motor_set_velocity+0xb0>)
 8008c46:	f993 2000 	ldrsb.w	r2, [r3]
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	701a      	strb	r2, [r3, #0]
		Motor_SetDirection(motor, direction);
 8008c4e:	4b1a      	ldr	r3, [pc, #104]	@ (8008cb8 <mecabot_motor_set_velocity+0xb0>)
 8008c50:	f993 3000 	ldrsb.w	r3, [r3]
 8008c54:	4619      	mov	r1, r3
 8008c56:	6878      	ldr	r0, [r7, #4]
 8008c58:	f7f8 fa6c 	bl	8001134 <Motor_SetDirection>
	}

	uint8_t duty = (uint8_t)(255 * fabs(velocity) / WHEEL_MAX_VELOCITY);
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008c62:	4618      	mov	r0, r3
 8008c64:	f7f7 fbe0 	bl	8000428 <__aeabi_f2d>
 8008c68:	a30f      	add	r3, pc, #60	@ (adr r3, 8008ca8 <mecabot_motor_set_velocity+0xa0>)
 8008c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c6e:	f7f7 fc33 	bl	80004d8 <__aeabi_dmul>
 8008c72:	4602      	mov	r2, r0
 8008c74:	460b      	mov	r3, r1
 8008c76:	4610      	mov	r0, r2
 8008c78:	4619      	mov	r1, r3
 8008c7a:	a30d      	add	r3, pc, #52	@ (adr r3, 8008cb0 <mecabot_motor_set_velocity+0xa8>)
 8008c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c80:	f7f7 fd54 	bl	800072c <__aeabi_ddiv>
 8008c84:	4602      	mov	r2, r0
 8008c86:	460b      	mov	r3, r1
 8008c88:	4610      	mov	r0, r2
 8008c8a:	4619      	mov	r1, r3
 8008c8c:	f7f7 fe36 	bl	80008fc <__aeabi_d2uiz>
 8008c90:	4603      	mov	r3, r0
 8008c92:	73fb      	strb	r3, [r7, #15]
	Motor_Set_PWM_Duty(motor, duty);
 8008c94:	7bfb      	ldrb	r3, [r7, #15]
 8008c96:	4619      	mov	r1, r3
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f7f8 f9eb 	bl	8001074 <Motor_Set_PWM_Duty>

	return STATUS_OK;
 8008c9e:	2300      	movs	r3, #0
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	3710      	adds	r7, #16
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd80      	pop	{r7, pc}
 8008ca8:	00000000 	.word	0x00000000
 8008cac:	406fe000 	.word	0x406fe000
 8008cb0:	5b22bc66 	.word	0x5b22bc66
 8008cb4:	3fc8209f 	.word	0x3fc8209f
 8008cb8:	20001a18 	.word	0x20001a18
 8008cbc:	20001a1c 	.word	0x20001a1c

08008cc0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	b085      	sub	sp, #20
 8008cc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8008cc6:	4b15      	ldr	r3, [pc, #84]	@ (8008d1c <HAL_MspInit+0x5c>)
 8008cc8:	699b      	ldr	r3, [r3, #24]
 8008cca:	4a14      	ldr	r2, [pc, #80]	@ (8008d1c <HAL_MspInit+0x5c>)
 8008ccc:	f043 0301 	orr.w	r3, r3, #1
 8008cd0:	6193      	str	r3, [r2, #24]
 8008cd2:	4b12      	ldr	r3, [pc, #72]	@ (8008d1c <HAL_MspInit+0x5c>)
 8008cd4:	699b      	ldr	r3, [r3, #24]
 8008cd6:	f003 0301 	and.w	r3, r3, #1
 8008cda:	60bb      	str	r3, [r7, #8]
 8008cdc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008cde:	4b0f      	ldr	r3, [pc, #60]	@ (8008d1c <HAL_MspInit+0x5c>)
 8008ce0:	69db      	ldr	r3, [r3, #28]
 8008ce2:	4a0e      	ldr	r2, [pc, #56]	@ (8008d1c <HAL_MspInit+0x5c>)
 8008ce4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008ce8:	61d3      	str	r3, [r2, #28]
 8008cea:	4b0c      	ldr	r3, [pc, #48]	@ (8008d1c <HAL_MspInit+0x5c>)
 8008cec:	69db      	ldr	r3, [r3, #28]
 8008cee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008cf2:	607b      	str	r3, [r7, #4]
 8008cf4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8008cf6:	4b0a      	ldr	r3, [pc, #40]	@ (8008d20 <HAL_MspInit+0x60>)
 8008cf8:	685b      	ldr	r3, [r3, #4]
 8008cfa:	60fb      	str	r3, [r7, #12]
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8008d02:	60fb      	str	r3, [r7, #12]
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8008d0a:	60fb      	str	r3, [r7, #12]
 8008d0c:	4a04      	ldr	r2, [pc, #16]	@ (8008d20 <HAL_MspInit+0x60>)
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008d12:	bf00      	nop
 8008d14:	3714      	adds	r7, #20
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bc80      	pop	{r7}
 8008d1a:	4770      	bx	lr
 8008d1c:	40021000 	.word	0x40021000
 8008d20:	40010000 	.word	0x40010000

08008d24 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b08a      	sub	sp, #40	@ 0x28
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008d2c:	f107 0314 	add.w	r3, r7, #20
 8008d30:	2200      	movs	r2, #0
 8008d32:	601a      	str	r2, [r3, #0]
 8008d34:	605a      	str	r2, [r3, #4]
 8008d36:	609a      	str	r2, [r3, #8]
 8008d38:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	4a1d      	ldr	r2, [pc, #116]	@ (8008db4 <HAL_I2C_MspInit+0x90>)
 8008d40:	4293      	cmp	r3, r2
 8008d42:	d132      	bne.n	8008daa <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008d44:	4b1c      	ldr	r3, [pc, #112]	@ (8008db8 <HAL_I2C_MspInit+0x94>)
 8008d46:	699b      	ldr	r3, [r3, #24]
 8008d48:	4a1b      	ldr	r2, [pc, #108]	@ (8008db8 <HAL_I2C_MspInit+0x94>)
 8008d4a:	f043 0308 	orr.w	r3, r3, #8
 8008d4e:	6193      	str	r3, [r2, #24]
 8008d50:	4b19      	ldr	r3, [pc, #100]	@ (8008db8 <HAL_I2C_MspInit+0x94>)
 8008d52:	699b      	ldr	r3, [r3, #24]
 8008d54:	f003 0308 	and.w	r3, r3, #8
 8008d58:	613b      	str	r3, [r7, #16]
 8008d5a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8008d5c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8008d60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008d62:	2312      	movs	r3, #18
 8008d64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008d66:	2303      	movs	r3, #3
 8008d68:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008d6a:	f107 0314 	add.w	r3, r7, #20
 8008d6e:	4619      	mov	r1, r3
 8008d70:	4812      	ldr	r0, [pc, #72]	@ (8008dbc <HAL_I2C_MspInit+0x98>)
 8008d72:	f000 fe7b 	bl	8009a6c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8008d76:	4b12      	ldr	r3, [pc, #72]	@ (8008dc0 <HAL_I2C_MspInit+0x9c>)
 8008d78:	685b      	ldr	r3, [r3, #4]
 8008d7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8008d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d7e:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8008d82:	627b      	str	r3, [r7, #36]	@ 0x24
 8008d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d86:	f043 0302 	orr.w	r3, r3, #2
 8008d8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8008d8c:	4a0c      	ldr	r2, [pc, #48]	@ (8008dc0 <HAL_I2C_MspInit+0x9c>)
 8008d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d90:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008d92:	4b09      	ldr	r3, [pc, #36]	@ (8008db8 <HAL_I2C_MspInit+0x94>)
 8008d94:	69db      	ldr	r3, [r3, #28]
 8008d96:	4a08      	ldr	r2, [pc, #32]	@ (8008db8 <HAL_I2C_MspInit+0x94>)
 8008d98:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008d9c:	61d3      	str	r3, [r2, #28]
 8008d9e:	4b06      	ldr	r3, [pc, #24]	@ (8008db8 <HAL_I2C_MspInit+0x94>)
 8008da0:	69db      	ldr	r3, [r3, #28]
 8008da2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008da6:	60fb      	str	r3, [r7, #12]
 8008da8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8008daa:	bf00      	nop
 8008dac:	3728      	adds	r7, #40	@ 0x28
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}
 8008db2:	bf00      	nop
 8008db4:	40005400 	.word	0x40005400
 8008db8:	40021000 	.word	0x40021000
 8008dbc:	40010c00 	.word	0x40010c00
 8008dc0:	40010000 	.word	0x40010000

08008dc4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b08a      	sub	sp, #40	@ 0x28
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008dcc:	f107 0318 	add.w	r3, r7, #24
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	601a      	str	r2, [r3, #0]
 8008dd4:	605a      	str	r2, [r3, #4]
 8008dd6:	609a      	str	r2, [r3, #8]
 8008dd8:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	4a2e      	ldr	r2, [pc, #184]	@ (8008e98 <HAL_TIM_Base_MspInit+0xd4>)
 8008de0:	4293      	cmp	r3, r2
 8008de2:	d10c      	bne.n	8008dfe <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8008de4:	4b2d      	ldr	r3, [pc, #180]	@ (8008e9c <HAL_TIM_Base_MspInit+0xd8>)
 8008de6:	699b      	ldr	r3, [r3, #24]
 8008de8:	4a2c      	ldr	r2, [pc, #176]	@ (8008e9c <HAL_TIM_Base_MspInit+0xd8>)
 8008dea:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8008dee:	6193      	str	r3, [r2, #24]
 8008df0:	4b2a      	ldr	r3, [pc, #168]	@ (8008e9c <HAL_TIM_Base_MspInit+0xd8>)
 8008df2:	699b      	ldr	r3, [r3, #24]
 8008df4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008df8:	617b      	str	r3, [r7, #20]
 8008dfa:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8008dfc:	e048      	b.n	8008e90 <HAL_TIM_Base_MspInit+0xcc>
  else if(htim_base->Instance==TIM3)
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	4a27      	ldr	r2, [pc, #156]	@ (8008ea0 <HAL_TIM_Base_MspInit+0xdc>)
 8008e04:	4293      	cmp	r3, r2
 8008e06:	d143      	bne.n	8008e90 <HAL_TIM_Base_MspInit+0xcc>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8008e08:	4b24      	ldr	r3, [pc, #144]	@ (8008e9c <HAL_TIM_Base_MspInit+0xd8>)
 8008e0a:	69db      	ldr	r3, [r3, #28]
 8008e0c:	4a23      	ldr	r2, [pc, #140]	@ (8008e9c <HAL_TIM_Base_MspInit+0xd8>)
 8008e0e:	f043 0302 	orr.w	r3, r3, #2
 8008e12:	61d3      	str	r3, [r2, #28]
 8008e14:	4b21      	ldr	r3, [pc, #132]	@ (8008e9c <HAL_TIM_Base_MspInit+0xd8>)
 8008e16:	69db      	ldr	r3, [r3, #28]
 8008e18:	f003 0302 	and.w	r3, r3, #2
 8008e1c:	613b      	str	r3, [r7, #16]
 8008e1e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008e20:	4b1e      	ldr	r3, [pc, #120]	@ (8008e9c <HAL_TIM_Base_MspInit+0xd8>)
 8008e22:	699b      	ldr	r3, [r3, #24]
 8008e24:	4a1d      	ldr	r2, [pc, #116]	@ (8008e9c <HAL_TIM_Base_MspInit+0xd8>)
 8008e26:	f043 0304 	orr.w	r3, r3, #4
 8008e2a:	6193      	str	r3, [r2, #24]
 8008e2c:	4b1b      	ldr	r3, [pc, #108]	@ (8008e9c <HAL_TIM_Base_MspInit+0xd8>)
 8008e2e:	699b      	ldr	r3, [r3, #24]
 8008e30:	f003 0304 	and.w	r3, r3, #4
 8008e34:	60fb      	str	r3, [r7, #12]
 8008e36:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008e38:	4b18      	ldr	r3, [pc, #96]	@ (8008e9c <HAL_TIM_Base_MspInit+0xd8>)
 8008e3a:	699b      	ldr	r3, [r3, #24]
 8008e3c:	4a17      	ldr	r2, [pc, #92]	@ (8008e9c <HAL_TIM_Base_MspInit+0xd8>)
 8008e3e:	f043 0308 	orr.w	r3, r3, #8
 8008e42:	6193      	str	r3, [r2, #24]
 8008e44:	4b15      	ldr	r3, [pc, #84]	@ (8008e9c <HAL_TIM_Base_MspInit+0xd8>)
 8008e46:	699b      	ldr	r3, [r3, #24]
 8008e48:	f003 0308 	and.w	r3, r3, #8
 8008e4c:	60bb      	str	r3, [r7, #8]
 8008e4e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENCODER_FL_Pin|ENCODER_FR_Pin;
 8008e50:	23c0      	movs	r3, #192	@ 0xc0
 8008e52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008e54:	2300      	movs	r3, #0
 8008e56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e58:	2300      	movs	r3, #0
 8008e5a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008e5c:	f107 0318 	add.w	r3, r7, #24
 8008e60:	4619      	mov	r1, r3
 8008e62:	4810      	ldr	r0, [pc, #64]	@ (8008ea4 <HAL_TIM_Base_MspInit+0xe0>)
 8008e64:	f000 fe02 	bl	8009a6c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ENCODER_BL_Pin|ENCODER_BR_Pin;
 8008e68:	2303      	movs	r3, #3
 8008e6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e70:	2300      	movs	r3, #0
 8008e72:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008e74:	f107 0318 	add.w	r3, r7, #24
 8008e78:	4619      	mov	r1, r3
 8008e7a:	480b      	ldr	r0, [pc, #44]	@ (8008ea8 <HAL_TIM_Base_MspInit+0xe4>)
 8008e7c:	f000 fdf6 	bl	8009a6c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8008e80:	2200      	movs	r2, #0
 8008e82:	2100      	movs	r1, #0
 8008e84:	201d      	movs	r0, #29
 8008e86:	f000 fb18 	bl	80094ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8008e8a:	201d      	movs	r0, #29
 8008e8c:	f000 fb31 	bl	80094f2 <HAL_NVIC_EnableIRQ>
}
 8008e90:	bf00      	nop
 8008e92:	3728      	adds	r7, #40	@ 0x28
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}
 8008e98:	40012c00 	.word	0x40012c00
 8008e9c:	40021000 	.word	0x40021000
 8008ea0:	40000400 	.word	0x40000400
 8008ea4:	40010800 	.word	0x40010800
 8008ea8:	40010c00 	.word	0x40010c00

08008eac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b088      	sub	sp, #32
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008eb4:	f107 0310 	add.w	r3, r7, #16
 8008eb8:	2200      	movs	r2, #0
 8008eba:	601a      	str	r2, [r3, #0]
 8008ebc:	605a      	str	r2, [r3, #4]
 8008ebe:	609a      	str	r2, [r3, #8]
 8008ec0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	4a10      	ldr	r2, [pc, #64]	@ (8008f08 <HAL_TIM_MspPostInit+0x5c>)
 8008ec8:	4293      	cmp	r3, r2
 8008eca:	d118      	bne.n	8008efe <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008ecc:	4b0f      	ldr	r3, [pc, #60]	@ (8008f0c <HAL_TIM_MspPostInit+0x60>)
 8008ece:	699b      	ldr	r3, [r3, #24]
 8008ed0:	4a0e      	ldr	r2, [pc, #56]	@ (8008f0c <HAL_TIM_MspPostInit+0x60>)
 8008ed2:	f043 0304 	orr.w	r3, r3, #4
 8008ed6:	6193      	str	r3, [r2, #24]
 8008ed8:	4b0c      	ldr	r3, [pc, #48]	@ (8008f0c <HAL_TIM_MspPostInit+0x60>)
 8008eda:	699b      	ldr	r3, [r3, #24]
 8008edc:	f003 0304 	and.w	r3, r3, #4
 8008ee0:	60fb      	str	r3, [r7, #12]
 8008ee2:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = MOTOR_FL_PWM_Pin|MOTOR_FR_PWM_Pin|MOTOR_BL_PWM_Pin|MOTOR_BR_PWM_Pin;
 8008ee4:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8008ee8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008eea:	2302      	movs	r3, #2
 8008eec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008eee:	2302      	movs	r3, #2
 8008ef0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008ef2:	f107 0310 	add.w	r3, r7, #16
 8008ef6:	4619      	mov	r1, r3
 8008ef8:	4805      	ldr	r0, [pc, #20]	@ (8008f10 <HAL_TIM_MspPostInit+0x64>)
 8008efa:	f000 fdb7 	bl	8009a6c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8008efe:	bf00      	nop
 8008f00:	3720      	adds	r7, #32
 8008f02:	46bd      	mov	sp, r7
 8008f04:	bd80      	pop	{r7, pc}
 8008f06:	bf00      	nop
 8008f08:	40012c00 	.word	0x40012c00
 8008f0c:	40021000 	.word	0x40021000
 8008f10:	40010800 	.word	0x40010800

08008f14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b08a      	sub	sp, #40	@ 0x28
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008f1c:	f107 0314 	add.w	r3, r7, #20
 8008f20:	2200      	movs	r2, #0
 8008f22:	601a      	str	r2, [r3, #0]
 8008f24:	605a      	str	r2, [r3, #4]
 8008f26:	609a      	str	r2, [r3, #8]
 8008f28:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	4a4d      	ldr	r2, [pc, #308]	@ (8009064 <HAL_UART_MspInit+0x150>)
 8008f30:	4293      	cmp	r3, r2
 8008f32:	f040 8092 	bne.w	800905a <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008f36:	4b4c      	ldr	r3, [pc, #304]	@ (8009068 <HAL_UART_MspInit+0x154>)
 8008f38:	699b      	ldr	r3, [r3, #24]
 8008f3a:	4a4b      	ldr	r2, [pc, #300]	@ (8009068 <HAL_UART_MspInit+0x154>)
 8008f3c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008f40:	6193      	str	r3, [r2, #24]
 8008f42:	4b49      	ldr	r3, [pc, #292]	@ (8009068 <HAL_UART_MspInit+0x154>)
 8008f44:	699b      	ldr	r3, [r3, #24]
 8008f46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008f4a:	613b      	str	r3, [r7, #16]
 8008f4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008f4e:	4b46      	ldr	r3, [pc, #280]	@ (8009068 <HAL_UART_MspInit+0x154>)
 8008f50:	699b      	ldr	r3, [r3, #24]
 8008f52:	4a45      	ldr	r2, [pc, #276]	@ (8009068 <HAL_UART_MspInit+0x154>)
 8008f54:	f043 0308 	orr.w	r3, r3, #8
 8008f58:	6193      	str	r3, [r2, #24]
 8008f5a:	4b43      	ldr	r3, [pc, #268]	@ (8009068 <HAL_UART_MspInit+0x154>)
 8008f5c:	699b      	ldr	r3, [r3, #24]
 8008f5e:	f003 0308 	and.w	r3, r3, #8
 8008f62:	60fb      	str	r3, [r7, #12]
 8008f64:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8008f66:	2340      	movs	r3, #64	@ 0x40
 8008f68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f6a:	2302      	movs	r3, #2
 8008f6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008f6e:	2303      	movs	r3, #3
 8008f70:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008f72:	f107 0314 	add.w	r3, r7, #20
 8008f76:	4619      	mov	r1, r3
 8008f78:	483c      	ldr	r0, [pc, #240]	@ (800906c <HAL_UART_MspInit+0x158>)
 8008f7a:	f000 fd77 	bl	8009a6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8008f7e:	2380      	movs	r3, #128	@ 0x80
 8008f80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008f82:	2300      	movs	r3, #0
 8008f84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f86:	2300      	movs	r3, #0
 8008f88:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008f8a:	f107 0314 	add.w	r3, r7, #20
 8008f8e:	4619      	mov	r1, r3
 8008f90:	4836      	ldr	r0, [pc, #216]	@ (800906c <HAL_UART_MspInit+0x158>)
 8008f92:	f000 fd6b 	bl	8009a6c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8008f96:	4b36      	ldr	r3, [pc, #216]	@ (8009070 <HAL_UART_MspInit+0x15c>)
 8008f98:	685b      	ldr	r3, [r3, #4]
 8008f9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8008f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f9e:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8008fa2:	627b      	str	r3, [r7, #36]	@ 0x24
 8008fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fa6:	f043 0304 	orr.w	r3, r3, #4
 8008faa:	627b      	str	r3, [r7, #36]	@ 0x24
 8008fac:	4a30      	ldr	r2, [pc, #192]	@ (8009070 <HAL_UART_MspInit+0x15c>)
 8008fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fb0:	6053      	str	r3, [r2, #4]

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8008fb2:	4b30      	ldr	r3, [pc, #192]	@ (8009074 <HAL_UART_MspInit+0x160>)
 8008fb4:	4a30      	ldr	r2, [pc, #192]	@ (8009078 <HAL_UART_MspInit+0x164>)
 8008fb6:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008fb8:	4b2e      	ldr	r3, [pc, #184]	@ (8009074 <HAL_UART_MspInit+0x160>)
 8008fba:	2210      	movs	r2, #16
 8008fbc:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008fbe:	4b2d      	ldr	r3, [pc, #180]	@ (8009074 <HAL_UART_MspInit+0x160>)
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008fc4:	4b2b      	ldr	r3, [pc, #172]	@ (8009074 <HAL_UART_MspInit+0x160>)
 8008fc6:	2280      	movs	r2, #128	@ 0x80
 8008fc8:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008fca:	4b2a      	ldr	r3, [pc, #168]	@ (8009074 <HAL_UART_MspInit+0x160>)
 8008fcc:	2200      	movs	r2, #0
 8008fce:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008fd0:	4b28      	ldr	r3, [pc, #160]	@ (8009074 <HAL_UART_MspInit+0x160>)
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8008fd6:	4b27      	ldr	r3, [pc, #156]	@ (8009074 <HAL_UART_MspInit+0x160>)
 8008fd8:	2200      	movs	r2, #0
 8008fda:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8008fdc:	4b25      	ldr	r3, [pc, #148]	@ (8009074 <HAL_UART_MspInit+0x160>)
 8008fde:	2200      	movs	r2, #0
 8008fe0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8008fe2:	4824      	ldr	r0, [pc, #144]	@ (8009074 <HAL_UART_MspInit+0x160>)
 8008fe4:	f000 faa0 	bl	8009528 <HAL_DMA_Init>
 8008fe8:	4603      	mov	r3, r0
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d001      	beq.n	8008ff2 <HAL_UART_MspInit+0xde>
    {
      Error_Handler();
 8008fee:	f7f8 fb75 	bl	80016dc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	4a1f      	ldr	r2, [pc, #124]	@ (8009074 <HAL_UART_MspInit+0x160>)
 8008ff6:	639a      	str	r2, [r3, #56]	@ 0x38
 8008ff8:	4a1e      	ldr	r2, [pc, #120]	@ (8009074 <HAL_UART_MspInit+0x160>)
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8008ffe:	4b1f      	ldr	r3, [pc, #124]	@ (800907c <HAL_UART_MspInit+0x168>)
 8009000:	4a1f      	ldr	r2, [pc, #124]	@ (8009080 <HAL_UART_MspInit+0x16c>)
 8009002:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009004:	4b1d      	ldr	r3, [pc, #116]	@ (800907c <HAL_UART_MspInit+0x168>)
 8009006:	2200      	movs	r2, #0
 8009008:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800900a:	4b1c      	ldr	r3, [pc, #112]	@ (800907c <HAL_UART_MspInit+0x168>)
 800900c:	2200      	movs	r2, #0
 800900e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8009010:	4b1a      	ldr	r3, [pc, #104]	@ (800907c <HAL_UART_MspInit+0x168>)
 8009012:	2280      	movs	r2, #128	@ 0x80
 8009014:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009016:	4b19      	ldr	r3, [pc, #100]	@ (800907c <HAL_UART_MspInit+0x168>)
 8009018:	2200      	movs	r2, #0
 800901a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800901c:	4b17      	ldr	r3, [pc, #92]	@ (800907c <HAL_UART_MspInit+0x168>)
 800901e:	2200      	movs	r2, #0
 8009020:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8009022:	4b16      	ldr	r3, [pc, #88]	@ (800907c <HAL_UART_MspInit+0x168>)
 8009024:	2200      	movs	r2, #0
 8009026:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8009028:	4b14      	ldr	r3, [pc, #80]	@ (800907c <HAL_UART_MspInit+0x168>)
 800902a:	2200      	movs	r2, #0
 800902c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800902e:	4813      	ldr	r0, [pc, #76]	@ (800907c <HAL_UART_MspInit+0x168>)
 8009030:	f000 fa7a 	bl	8009528 <HAL_DMA_Init>
 8009034:	4603      	mov	r3, r0
 8009036:	2b00      	cmp	r3, #0
 8009038:	d001      	beq.n	800903e <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 800903a:	f7f8 fb4f 	bl	80016dc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	4a0e      	ldr	r2, [pc, #56]	@ (800907c <HAL_UART_MspInit+0x168>)
 8009042:	63da      	str	r2, [r3, #60]	@ 0x3c
 8009044:	4a0d      	ldr	r2, [pc, #52]	@ (800907c <HAL_UART_MspInit+0x168>)
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800904a:	2200      	movs	r2, #0
 800904c:	2100      	movs	r1, #0
 800904e:	2025      	movs	r0, #37	@ 0x25
 8009050:	f000 fa33 	bl	80094ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8009054:	2025      	movs	r0, #37	@ 0x25
 8009056:	f000 fa4c 	bl	80094f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800905a:	bf00      	nop
 800905c:	3728      	adds	r7, #40	@ 0x28
 800905e:	46bd      	mov	sp, r7
 8009060:	bd80      	pop	{r7, pc}
 8009062:	bf00      	nop
 8009064:	40013800 	.word	0x40013800
 8009068:	40021000 	.word	0x40021000
 800906c:	40010c00 	.word	0x40010c00
 8009070:	40010000 	.word	0x40010000
 8009074:	200001b4 	.word	0x200001b4
 8009078:	40020044 	.word	0x40020044
 800907c:	200001f8 	.word	0x200001f8
 8009080:	40020058 	.word	0x40020058

08009084 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009084:	b480      	push	{r7}
 8009086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8009088:	bf00      	nop
 800908a:	e7fd      	b.n	8009088 <NMI_Handler+0x4>

0800908c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800908c:	b480      	push	{r7}
 800908e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009090:	bf00      	nop
 8009092:	e7fd      	b.n	8009090 <HardFault_Handler+0x4>

08009094 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009094:	b480      	push	{r7}
 8009096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009098:	bf00      	nop
 800909a:	e7fd      	b.n	8009098 <MemManage_Handler+0x4>

0800909c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800909c:	b480      	push	{r7}
 800909e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80090a0:	bf00      	nop
 80090a2:	e7fd      	b.n	80090a0 <BusFault_Handler+0x4>

080090a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80090a4:	b480      	push	{r7}
 80090a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80090a8:	bf00      	nop
 80090aa:	e7fd      	b.n	80090a8 <UsageFault_Handler+0x4>

080090ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80090ac:	b480      	push	{r7}
 80090ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80090b0:	bf00      	nop
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bc80      	pop	{r7}
 80090b6:	4770      	bx	lr

080090b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80090b8:	b480      	push	{r7}
 80090ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80090bc:	bf00      	nop
 80090be:	46bd      	mov	sp, r7
 80090c0:	bc80      	pop	{r7}
 80090c2:	4770      	bx	lr

080090c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80090c4:	b480      	push	{r7}
 80090c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80090c8:	bf00      	nop
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bc80      	pop	{r7}
 80090ce:	4770      	bx	lr

080090d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80090d4:	f000 f8fe 	bl	80092d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80090d8:	bf00      	nop
 80090da:	bd80      	pop	{r7, pc}

080090dc <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80090e0:	4802      	ldr	r0, [pc, #8]	@ (80090ec <DMA1_Channel4_IRQHandler+0x10>)
 80090e2:	f000 fb8f 	bl	8009804 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80090e6:	bf00      	nop
 80090e8:	bd80      	pop	{r7, pc}
 80090ea:	bf00      	nop
 80090ec:	200001b4 	.word	0x200001b4

080090f0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80090f4:	4802      	ldr	r0, [pc, #8]	@ (8009100 <DMA1_Channel5_IRQHandler+0x10>)
 80090f6:	f000 fb85 	bl	8009804 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80090fa:	bf00      	nop
 80090fc:	bd80      	pop	{r7, pc}
 80090fe:	bf00      	nop
 8009100:	200001f8 	.word	0x200001f8

08009104 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim_encoder);
 8009108:	4802      	ldr	r0, [pc, #8]	@ (8009114 <TIM3_IRQHandler+0x10>)
 800910a:	f001 fd5b 	bl	800abc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800910e:	bf00      	nop
 8009110:	bd80      	pop	{r7, pc}
 8009112:	bf00      	nop
 8009114:	20000124 	.word	0x20000124

08009118 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart_rosserial);
 800911c:	4802      	ldr	r0, [pc, #8]	@ (8009128 <USART1_IRQHandler+0x10>)
 800911e:	f002 fdfd 	bl	800bd1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8009122:	bf00      	nop
 8009124:	bd80      	pop	{r7, pc}
 8009126:	bf00      	nop
 8009128:	2000016c 	.word	0x2000016c

0800912c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b086      	sub	sp, #24
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8009134:	4a14      	ldr	r2, [pc, #80]	@ (8009188 <_sbrk+0x5c>)
 8009136:	4b15      	ldr	r3, [pc, #84]	@ (800918c <_sbrk+0x60>)
 8009138:	1ad3      	subs	r3, r2, r3
 800913a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800913c:	697b      	ldr	r3, [r7, #20]
 800913e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8009140:	4b13      	ldr	r3, [pc, #76]	@ (8009190 <_sbrk+0x64>)
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d102      	bne.n	800914e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8009148:	4b11      	ldr	r3, [pc, #68]	@ (8009190 <_sbrk+0x64>)
 800914a:	4a12      	ldr	r2, [pc, #72]	@ (8009194 <_sbrk+0x68>)
 800914c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800914e:	4b10      	ldr	r3, [pc, #64]	@ (8009190 <_sbrk+0x64>)
 8009150:	681a      	ldr	r2, [r3, #0]
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	4413      	add	r3, r2
 8009156:	693a      	ldr	r2, [r7, #16]
 8009158:	429a      	cmp	r2, r3
 800915a:	d207      	bcs.n	800916c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800915c:	f003 fdf2 	bl	800cd44 <__errno>
 8009160:	4603      	mov	r3, r0
 8009162:	220c      	movs	r2, #12
 8009164:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8009166:	f04f 33ff 	mov.w	r3, #4294967295
 800916a:	e009      	b.n	8009180 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800916c:	4b08      	ldr	r3, [pc, #32]	@ (8009190 <_sbrk+0x64>)
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8009172:	4b07      	ldr	r3, [pc, #28]	@ (8009190 <_sbrk+0x64>)
 8009174:	681a      	ldr	r2, [r3, #0]
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	4413      	add	r3, r2
 800917a:	4a05      	ldr	r2, [pc, #20]	@ (8009190 <_sbrk+0x64>)
 800917c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800917e:	68fb      	ldr	r3, [r7, #12]
}
 8009180:	4618      	mov	r0, r3
 8009182:	3718      	adds	r7, #24
 8009184:	46bd      	mov	sp, r7
 8009186:	bd80      	pop	{r7, pc}
 8009188:	20005000 	.word	0x20005000
 800918c:	00000400 	.word	0x00000400
 8009190:	20001a20 	.word	0x20001a20
 8009194:	20001b70 	.word	0x20001b70

08009198 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8009198:	b480      	push	{r7}
 800919a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800919c:	bf00      	nop
 800919e:	46bd      	mov	sp, r7
 80091a0:	bc80      	pop	{r7}
 80091a2:	4770      	bx	lr

080091a4 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 80091a4:	b480      	push	{r7}
 80091a6:	b085      	sub	sp, #20
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
 80091ac:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	0a5a      	lsrs	r2, r3, #9
 80091b4:	490f      	ldr	r1, [pc, #60]	@ (80091f4 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 80091b6:	fba1 1202 	umull	r1, r2, r1, r2
 80091ba:	09d2      	lsrs	r2, r2, #7
 80091bc:	490e      	ldr	r1, [pc, #56]	@ (80091f8 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 80091be:	fb01 f202 	mul.w	r2, r1, r2
 80091c2:	1a9b      	subs	r3, r3, r2
 80091c4:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	0a5b      	lsrs	r3, r3, #9
 80091cc:	4a09      	ldr	r2, [pc, #36]	@ (80091f4 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 80091ce:	fba2 2303 	umull	r2, r3, r2, r3
 80091d2:	09db      	lsrs	r3, r3, #7
 80091d4:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681a      	ldr	r2, [r3, #0]
 80091da:	68bb      	ldr	r3, [r7, #8]
 80091dc:	441a      	add	r2, r3
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	68fa      	ldr	r2, [r7, #12]
 80091e6:	601a      	str	r2, [r3, #0]
}
 80091e8:	bf00      	nop
 80091ea:	3714      	adds	r7, #20
 80091ec:	46bd      	mov	sp, r7
 80091ee:	bc80      	pop	{r7}
 80091f0:	4770      	bx	lr
 80091f2:	bf00      	nop
 80091f4:	00044b83 	.word	0x00044b83
 80091f8:	3b9aca00 	.word	0x3b9aca00

080091fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80091fc:	f7ff ffcc 	bl	8009198 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8009200:	480b      	ldr	r0, [pc, #44]	@ (8009230 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8009202:	490c      	ldr	r1, [pc, #48]	@ (8009234 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8009204:	4a0c      	ldr	r2, [pc, #48]	@ (8009238 <LoopFillZerobss+0x16>)
  movs r3, #0
 8009206:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009208:	e002      	b.n	8009210 <LoopCopyDataInit>

0800920a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800920a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800920c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800920e:	3304      	adds	r3, #4

08009210 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009210:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009212:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009214:	d3f9      	bcc.n	800920a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009216:	4a09      	ldr	r2, [pc, #36]	@ (800923c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8009218:	4c09      	ldr	r4, [pc, #36]	@ (8009240 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800921a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800921c:	e001      	b.n	8009222 <LoopFillZerobss>

0800921e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800921e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009220:	3204      	adds	r2, #4

08009222 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8009222:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009224:	d3fb      	bcc.n	800921e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8009226:	f003 fd93 	bl	800cd50 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800922a:	f7f7 ffc2 	bl	80011b2 <main>
  bx lr
 800922e:	4770      	bx	lr
  ldr r0, =_sdata
 8009230:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009234:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8009238:	0800d5dc 	.word	0x0800d5dc
  ldr r2, =_sbss
 800923c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8009240:	20001b70 	.word	0x20001b70

08009244 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8009244:	e7fe      	b.n	8009244 <ADC1_2_IRQHandler>
	...

08009248 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800924c:	4b08      	ldr	r3, [pc, #32]	@ (8009270 <HAL_Init+0x28>)
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	4a07      	ldr	r2, [pc, #28]	@ (8009270 <HAL_Init+0x28>)
 8009252:	f043 0310 	orr.w	r3, r3, #16
 8009256:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009258:	2003      	movs	r0, #3
 800925a:	f000 f923 	bl	80094a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800925e:	200f      	movs	r0, #15
 8009260:	f000 f808 	bl	8009274 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009264:	f7ff fd2c 	bl	8008cc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009268:	2300      	movs	r3, #0
}
 800926a:	4618      	mov	r0, r3
 800926c:	bd80      	pop	{r7, pc}
 800926e:	bf00      	nop
 8009270:	40022000 	.word	0x40022000

08009274 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b082      	sub	sp, #8
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800927c:	4b12      	ldr	r3, [pc, #72]	@ (80092c8 <HAL_InitTick+0x54>)
 800927e:	681a      	ldr	r2, [r3, #0]
 8009280:	4b12      	ldr	r3, [pc, #72]	@ (80092cc <HAL_InitTick+0x58>)
 8009282:	781b      	ldrb	r3, [r3, #0]
 8009284:	4619      	mov	r1, r3
 8009286:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800928a:	fbb3 f3f1 	udiv	r3, r3, r1
 800928e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009292:	4618      	mov	r0, r3
 8009294:	f000 f93b 	bl	800950e <HAL_SYSTICK_Config>
 8009298:	4603      	mov	r3, r0
 800929a:	2b00      	cmp	r3, #0
 800929c:	d001      	beq.n	80092a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800929e:	2301      	movs	r3, #1
 80092a0:	e00e      	b.n	80092c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2b0f      	cmp	r3, #15
 80092a6:	d80a      	bhi.n	80092be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80092a8:	2200      	movs	r2, #0
 80092aa:	6879      	ldr	r1, [r7, #4]
 80092ac:	f04f 30ff 	mov.w	r0, #4294967295
 80092b0:	f000 f903 	bl	80094ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80092b4:	4a06      	ldr	r2, [pc, #24]	@ (80092d0 <HAL_InitTick+0x5c>)
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80092ba:	2300      	movs	r3, #0
 80092bc:	e000      	b.n	80092c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80092be:	2301      	movs	r3, #1
}
 80092c0:	4618      	mov	r0, r3
 80092c2:	3708      	adds	r7, #8
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bd80      	pop	{r7, pc}
 80092c8:	2000000c 	.word	0x2000000c
 80092cc:	20000014 	.word	0x20000014
 80092d0:	20000010 	.word	0x20000010

080092d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80092d4:	b480      	push	{r7}
 80092d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80092d8:	4b05      	ldr	r3, [pc, #20]	@ (80092f0 <HAL_IncTick+0x1c>)
 80092da:	781b      	ldrb	r3, [r3, #0]
 80092dc:	461a      	mov	r2, r3
 80092de:	4b05      	ldr	r3, [pc, #20]	@ (80092f4 <HAL_IncTick+0x20>)
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	4413      	add	r3, r2
 80092e4:	4a03      	ldr	r2, [pc, #12]	@ (80092f4 <HAL_IncTick+0x20>)
 80092e6:	6013      	str	r3, [r2, #0]
}
 80092e8:	bf00      	nop
 80092ea:	46bd      	mov	sp, r7
 80092ec:	bc80      	pop	{r7}
 80092ee:	4770      	bx	lr
 80092f0:	20000014 	.word	0x20000014
 80092f4:	20001a24 	.word	0x20001a24

080092f8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80092f8:	b480      	push	{r7}
 80092fa:	af00      	add	r7, sp, #0
  return uwTick;
 80092fc:	4b02      	ldr	r3, [pc, #8]	@ (8009308 <HAL_GetTick+0x10>)
 80092fe:	681b      	ldr	r3, [r3, #0]
}
 8009300:	4618      	mov	r0, r3
 8009302:	46bd      	mov	sp, r7
 8009304:	bc80      	pop	{r7}
 8009306:	4770      	bx	lr
 8009308:	20001a24 	.word	0x20001a24

0800930c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800930c:	b480      	push	{r7}
 800930e:	b085      	sub	sp, #20
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f003 0307 	and.w	r3, r3, #7
 800931a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800931c:	4b0c      	ldr	r3, [pc, #48]	@ (8009350 <__NVIC_SetPriorityGrouping+0x44>)
 800931e:	68db      	ldr	r3, [r3, #12]
 8009320:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009322:	68ba      	ldr	r2, [r7, #8]
 8009324:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8009328:	4013      	ands	r3, r2
 800932a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009330:	68bb      	ldr	r3, [r7, #8]
 8009332:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009334:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8009338:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800933c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800933e:	4a04      	ldr	r2, [pc, #16]	@ (8009350 <__NVIC_SetPriorityGrouping+0x44>)
 8009340:	68bb      	ldr	r3, [r7, #8]
 8009342:	60d3      	str	r3, [r2, #12]
}
 8009344:	bf00      	nop
 8009346:	3714      	adds	r7, #20
 8009348:	46bd      	mov	sp, r7
 800934a:	bc80      	pop	{r7}
 800934c:	4770      	bx	lr
 800934e:	bf00      	nop
 8009350:	e000ed00 	.word	0xe000ed00

08009354 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009354:	b480      	push	{r7}
 8009356:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009358:	4b04      	ldr	r3, [pc, #16]	@ (800936c <__NVIC_GetPriorityGrouping+0x18>)
 800935a:	68db      	ldr	r3, [r3, #12]
 800935c:	0a1b      	lsrs	r3, r3, #8
 800935e:	f003 0307 	and.w	r3, r3, #7
}
 8009362:	4618      	mov	r0, r3
 8009364:	46bd      	mov	sp, r7
 8009366:	bc80      	pop	{r7}
 8009368:	4770      	bx	lr
 800936a:	bf00      	nop
 800936c:	e000ed00 	.word	0xe000ed00

08009370 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009370:	b480      	push	{r7}
 8009372:	b083      	sub	sp, #12
 8009374:	af00      	add	r7, sp, #0
 8009376:	4603      	mov	r3, r0
 8009378:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800937a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800937e:	2b00      	cmp	r3, #0
 8009380:	db0b      	blt.n	800939a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009382:	79fb      	ldrb	r3, [r7, #7]
 8009384:	f003 021f 	and.w	r2, r3, #31
 8009388:	4906      	ldr	r1, [pc, #24]	@ (80093a4 <__NVIC_EnableIRQ+0x34>)
 800938a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800938e:	095b      	lsrs	r3, r3, #5
 8009390:	2001      	movs	r0, #1
 8009392:	fa00 f202 	lsl.w	r2, r0, r2
 8009396:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800939a:	bf00      	nop
 800939c:	370c      	adds	r7, #12
 800939e:	46bd      	mov	sp, r7
 80093a0:	bc80      	pop	{r7}
 80093a2:	4770      	bx	lr
 80093a4:	e000e100 	.word	0xe000e100

080093a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80093a8:	b480      	push	{r7}
 80093aa:	b083      	sub	sp, #12
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	4603      	mov	r3, r0
 80093b0:	6039      	str	r1, [r7, #0]
 80093b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80093b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	db0a      	blt.n	80093d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	b2da      	uxtb	r2, r3
 80093c0:	490c      	ldr	r1, [pc, #48]	@ (80093f4 <__NVIC_SetPriority+0x4c>)
 80093c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80093c6:	0112      	lsls	r2, r2, #4
 80093c8:	b2d2      	uxtb	r2, r2
 80093ca:	440b      	add	r3, r1
 80093cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80093d0:	e00a      	b.n	80093e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	b2da      	uxtb	r2, r3
 80093d6:	4908      	ldr	r1, [pc, #32]	@ (80093f8 <__NVIC_SetPriority+0x50>)
 80093d8:	79fb      	ldrb	r3, [r7, #7]
 80093da:	f003 030f 	and.w	r3, r3, #15
 80093de:	3b04      	subs	r3, #4
 80093e0:	0112      	lsls	r2, r2, #4
 80093e2:	b2d2      	uxtb	r2, r2
 80093e4:	440b      	add	r3, r1
 80093e6:	761a      	strb	r2, [r3, #24]
}
 80093e8:	bf00      	nop
 80093ea:	370c      	adds	r7, #12
 80093ec:	46bd      	mov	sp, r7
 80093ee:	bc80      	pop	{r7}
 80093f0:	4770      	bx	lr
 80093f2:	bf00      	nop
 80093f4:	e000e100 	.word	0xe000e100
 80093f8:	e000ed00 	.word	0xe000ed00

080093fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80093fc:	b480      	push	{r7}
 80093fe:	b089      	sub	sp, #36	@ 0x24
 8009400:	af00      	add	r7, sp, #0
 8009402:	60f8      	str	r0, [r7, #12]
 8009404:	60b9      	str	r1, [r7, #8]
 8009406:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	f003 0307 	and.w	r3, r3, #7
 800940e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009410:	69fb      	ldr	r3, [r7, #28]
 8009412:	f1c3 0307 	rsb	r3, r3, #7
 8009416:	2b04      	cmp	r3, #4
 8009418:	bf28      	it	cs
 800941a:	2304      	movcs	r3, #4
 800941c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800941e:	69fb      	ldr	r3, [r7, #28]
 8009420:	3304      	adds	r3, #4
 8009422:	2b06      	cmp	r3, #6
 8009424:	d902      	bls.n	800942c <NVIC_EncodePriority+0x30>
 8009426:	69fb      	ldr	r3, [r7, #28]
 8009428:	3b03      	subs	r3, #3
 800942a:	e000      	b.n	800942e <NVIC_EncodePriority+0x32>
 800942c:	2300      	movs	r3, #0
 800942e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009430:	f04f 32ff 	mov.w	r2, #4294967295
 8009434:	69bb      	ldr	r3, [r7, #24]
 8009436:	fa02 f303 	lsl.w	r3, r2, r3
 800943a:	43da      	mvns	r2, r3
 800943c:	68bb      	ldr	r3, [r7, #8]
 800943e:	401a      	ands	r2, r3
 8009440:	697b      	ldr	r3, [r7, #20]
 8009442:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009444:	f04f 31ff 	mov.w	r1, #4294967295
 8009448:	697b      	ldr	r3, [r7, #20]
 800944a:	fa01 f303 	lsl.w	r3, r1, r3
 800944e:	43d9      	mvns	r1, r3
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009454:	4313      	orrs	r3, r2
         );
}
 8009456:	4618      	mov	r0, r3
 8009458:	3724      	adds	r7, #36	@ 0x24
 800945a:	46bd      	mov	sp, r7
 800945c:	bc80      	pop	{r7}
 800945e:	4770      	bx	lr

08009460 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b082      	sub	sp, #8
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	3b01      	subs	r3, #1
 800946c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009470:	d301      	bcc.n	8009476 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009472:	2301      	movs	r3, #1
 8009474:	e00f      	b.n	8009496 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009476:	4a0a      	ldr	r2, [pc, #40]	@ (80094a0 <SysTick_Config+0x40>)
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	3b01      	subs	r3, #1
 800947c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800947e:	210f      	movs	r1, #15
 8009480:	f04f 30ff 	mov.w	r0, #4294967295
 8009484:	f7ff ff90 	bl	80093a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009488:	4b05      	ldr	r3, [pc, #20]	@ (80094a0 <SysTick_Config+0x40>)
 800948a:	2200      	movs	r2, #0
 800948c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800948e:	4b04      	ldr	r3, [pc, #16]	@ (80094a0 <SysTick_Config+0x40>)
 8009490:	2207      	movs	r2, #7
 8009492:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009494:	2300      	movs	r3, #0
}
 8009496:	4618      	mov	r0, r3
 8009498:	3708      	adds	r7, #8
 800949a:	46bd      	mov	sp, r7
 800949c:	bd80      	pop	{r7, pc}
 800949e:	bf00      	nop
 80094a0:	e000e010 	.word	0xe000e010

080094a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b082      	sub	sp, #8
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80094ac:	6878      	ldr	r0, [r7, #4]
 80094ae:	f7ff ff2d 	bl	800930c <__NVIC_SetPriorityGrouping>
}
 80094b2:	bf00      	nop
 80094b4:	3708      	adds	r7, #8
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bd80      	pop	{r7, pc}

080094ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80094ba:	b580      	push	{r7, lr}
 80094bc:	b086      	sub	sp, #24
 80094be:	af00      	add	r7, sp, #0
 80094c0:	4603      	mov	r3, r0
 80094c2:	60b9      	str	r1, [r7, #8]
 80094c4:	607a      	str	r2, [r7, #4]
 80094c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80094c8:	2300      	movs	r3, #0
 80094ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80094cc:	f7ff ff42 	bl	8009354 <__NVIC_GetPriorityGrouping>
 80094d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80094d2:	687a      	ldr	r2, [r7, #4]
 80094d4:	68b9      	ldr	r1, [r7, #8]
 80094d6:	6978      	ldr	r0, [r7, #20]
 80094d8:	f7ff ff90 	bl	80093fc <NVIC_EncodePriority>
 80094dc:	4602      	mov	r2, r0
 80094de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80094e2:	4611      	mov	r1, r2
 80094e4:	4618      	mov	r0, r3
 80094e6:	f7ff ff5f 	bl	80093a8 <__NVIC_SetPriority>
}
 80094ea:	bf00      	nop
 80094ec:	3718      	adds	r7, #24
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bd80      	pop	{r7, pc}

080094f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80094f2:	b580      	push	{r7, lr}
 80094f4:	b082      	sub	sp, #8
 80094f6:	af00      	add	r7, sp, #0
 80094f8:	4603      	mov	r3, r0
 80094fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80094fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009500:	4618      	mov	r0, r3
 8009502:	f7ff ff35 	bl	8009370 <__NVIC_EnableIRQ>
}
 8009506:	bf00      	nop
 8009508:	3708      	adds	r7, #8
 800950a:	46bd      	mov	sp, r7
 800950c:	bd80      	pop	{r7, pc}

0800950e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800950e:	b580      	push	{r7, lr}
 8009510:	b082      	sub	sp, #8
 8009512:	af00      	add	r7, sp, #0
 8009514:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f7ff ffa2 	bl	8009460 <SysTick_Config>
 800951c:	4603      	mov	r3, r0
}
 800951e:	4618      	mov	r0, r3
 8009520:	3708      	adds	r7, #8
 8009522:	46bd      	mov	sp, r7
 8009524:	bd80      	pop	{r7, pc}
	...

08009528 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009528:	b480      	push	{r7}
 800952a:	b085      	sub	sp, #20
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8009530:	2300      	movs	r3, #0
 8009532:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d101      	bne.n	800953e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800953a:	2301      	movs	r3, #1
 800953c:	e043      	b.n	80095c6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	461a      	mov	r2, r3
 8009544:	4b22      	ldr	r3, [pc, #136]	@ (80095d0 <HAL_DMA_Init+0xa8>)
 8009546:	4413      	add	r3, r2
 8009548:	4a22      	ldr	r2, [pc, #136]	@ (80095d4 <HAL_DMA_Init+0xac>)
 800954a:	fba2 2303 	umull	r2, r3, r2, r3
 800954e:	091b      	lsrs	r3, r3, #4
 8009550:	009a      	lsls	r2, r3, #2
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	4a1f      	ldr	r2, [pc, #124]	@ (80095d8 <HAL_DMA_Init+0xb0>)
 800955a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2202      	movs	r2, #2
 8009560:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8009572:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8009576:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8009580:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	68db      	ldr	r3, [r3, #12]
 8009586:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800958c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	695b      	ldr	r3, [r3, #20]
 8009592:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009598:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	69db      	ldr	r3, [r3, #28]
 800959e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80095a0:	68fa      	ldr	r2, [r7, #12]
 80095a2:	4313      	orrs	r3, r2
 80095a4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	68fa      	ldr	r2, [r7, #12]
 80095ac:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2200      	movs	r2, #0
 80095b2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2201      	movs	r2, #1
 80095b8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2200      	movs	r2, #0
 80095c0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80095c4:	2300      	movs	r3, #0
}
 80095c6:	4618      	mov	r0, r3
 80095c8:	3714      	adds	r7, #20
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bc80      	pop	{r7}
 80095ce:	4770      	bx	lr
 80095d0:	bffdfff8 	.word	0xbffdfff8
 80095d4:	cccccccd 	.word	0xcccccccd
 80095d8:	40020000 	.word	0x40020000

080095dc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b086      	sub	sp, #24
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	60f8      	str	r0, [r7, #12]
 80095e4:	60b9      	str	r1, [r7, #8]
 80095e6:	607a      	str	r2, [r7, #4]
 80095e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80095ea:	2300      	movs	r3, #0
 80095ec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80095f4:	2b01      	cmp	r3, #1
 80095f6:	d101      	bne.n	80095fc <HAL_DMA_Start_IT+0x20>
 80095f8:	2302      	movs	r3, #2
 80095fa:	e04b      	b.n	8009694 <HAL_DMA_Start_IT+0xb8>
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	2201      	movs	r2, #1
 8009600:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800960a:	b2db      	uxtb	r3, r3
 800960c:	2b01      	cmp	r3, #1
 800960e:	d13a      	bne.n	8009686 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	2202      	movs	r2, #2
 8009614:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	2200      	movs	r2, #0
 800961c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	681a      	ldr	r2, [r3, #0]
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	f022 0201 	bic.w	r2, r2, #1
 800962c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	687a      	ldr	r2, [r7, #4]
 8009632:	68b9      	ldr	r1, [r7, #8]
 8009634:	68f8      	ldr	r0, [r7, #12]
 8009636:	f000 f9eb 	bl	8009a10 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800963e:	2b00      	cmp	r3, #0
 8009640:	d008      	beq.n	8009654 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	681a      	ldr	r2, [r3, #0]
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	f042 020e 	orr.w	r2, r2, #14
 8009650:	601a      	str	r2, [r3, #0]
 8009652:	e00f      	b.n	8009674 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	681a      	ldr	r2, [r3, #0]
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	f022 0204 	bic.w	r2, r2, #4
 8009662:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	681a      	ldr	r2, [r3, #0]
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f042 020a 	orr.w	r2, r2, #10
 8009672:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	681a      	ldr	r2, [r3, #0]
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	f042 0201 	orr.w	r2, r2, #1
 8009682:	601a      	str	r2, [r3, #0]
 8009684:	e005      	b.n	8009692 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	2200      	movs	r2, #0
 800968a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800968e:	2302      	movs	r3, #2
 8009690:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8009692:	7dfb      	ldrb	r3, [r7, #23]
}
 8009694:	4618      	mov	r0, r3
 8009696:	3718      	adds	r7, #24
 8009698:	46bd      	mov	sp, r7
 800969a:	bd80      	pop	{r7, pc}

0800969c <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800969c:	b480      	push	{r7}
 800969e:	b085      	sub	sp, #20
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80096a4:	2300      	movs	r3, #0
 80096a6:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80096ae:	b2db      	uxtb	r3, r3
 80096b0:	2b02      	cmp	r3, #2
 80096b2:	d008      	beq.n	80096c6 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2204      	movs	r2, #4
 80096b8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	2200      	movs	r2, #0
 80096be:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80096c2:	2301      	movs	r3, #1
 80096c4:	e020      	b.n	8009708 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	681a      	ldr	r2, [r3, #0]
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f022 020e 	bic.w	r2, r2, #14
 80096d4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	681a      	ldr	r2, [r3, #0]
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	f022 0201 	bic.w	r2, r2, #1
 80096e4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096ee:	2101      	movs	r1, #1
 80096f0:	fa01 f202 	lsl.w	r2, r1, r2
 80096f4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	2201      	movs	r2, #1
 80096fa:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	2200      	movs	r2, #0
 8009702:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8009706:	7bfb      	ldrb	r3, [r7, #15]
}
 8009708:	4618      	mov	r0, r3
 800970a:	3714      	adds	r7, #20
 800970c:	46bd      	mov	sp, r7
 800970e:	bc80      	pop	{r7}
 8009710:	4770      	bx	lr
	...

08009714 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8009714:	b580      	push	{r7, lr}
 8009716:	b084      	sub	sp, #16
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800971c:	2300      	movs	r3, #0
 800971e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8009726:	b2db      	uxtb	r3, r3
 8009728:	2b02      	cmp	r3, #2
 800972a:	d005      	beq.n	8009738 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2204      	movs	r2, #4
 8009730:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8009732:	2301      	movs	r3, #1
 8009734:	73fb      	strb	r3, [r7, #15]
 8009736:	e051      	b.n	80097dc <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	681a      	ldr	r2, [r3, #0]
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	f022 020e 	bic.w	r2, r2, #14
 8009746:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	681a      	ldr	r2, [r3, #0]
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	f022 0201 	bic.w	r2, r2, #1
 8009756:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	4a22      	ldr	r2, [pc, #136]	@ (80097e8 <HAL_DMA_Abort_IT+0xd4>)
 800975e:	4293      	cmp	r3, r2
 8009760:	d029      	beq.n	80097b6 <HAL_DMA_Abort_IT+0xa2>
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	4a21      	ldr	r2, [pc, #132]	@ (80097ec <HAL_DMA_Abort_IT+0xd8>)
 8009768:	4293      	cmp	r3, r2
 800976a:	d022      	beq.n	80097b2 <HAL_DMA_Abort_IT+0x9e>
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	4a1f      	ldr	r2, [pc, #124]	@ (80097f0 <HAL_DMA_Abort_IT+0xdc>)
 8009772:	4293      	cmp	r3, r2
 8009774:	d01a      	beq.n	80097ac <HAL_DMA_Abort_IT+0x98>
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	4a1e      	ldr	r2, [pc, #120]	@ (80097f4 <HAL_DMA_Abort_IT+0xe0>)
 800977c:	4293      	cmp	r3, r2
 800977e:	d012      	beq.n	80097a6 <HAL_DMA_Abort_IT+0x92>
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	4a1c      	ldr	r2, [pc, #112]	@ (80097f8 <HAL_DMA_Abort_IT+0xe4>)
 8009786:	4293      	cmp	r3, r2
 8009788:	d00a      	beq.n	80097a0 <HAL_DMA_Abort_IT+0x8c>
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	4a1b      	ldr	r2, [pc, #108]	@ (80097fc <HAL_DMA_Abort_IT+0xe8>)
 8009790:	4293      	cmp	r3, r2
 8009792:	d102      	bne.n	800979a <HAL_DMA_Abort_IT+0x86>
 8009794:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8009798:	e00e      	b.n	80097b8 <HAL_DMA_Abort_IT+0xa4>
 800979a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800979e:	e00b      	b.n	80097b8 <HAL_DMA_Abort_IT+0xa4>
 80097a0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80097a4:	e008      	b.n	80097b8 <HAL_DMA_Abort_IT+0xa4>
 80097a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80097aa:	e005      	b.n	80097b8 <HAL_DMA_Abort_IT+0xa4>
 80097ac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80097b0:	e002      	b.n	80097b8 <HAL_DMA_Abort_IT+0xa4>
 80097b2:	2310      	movs	r3, #16
 80097b4:	e000      	b.n	80097b8 <HAL_DMA_Abort_IT+0xa4>
 80097b6:	2301      	movs	r3, #1
 80097b8:	4a11      	ldr	r2, [pc, #68]	@ (8009800 <HAL_DMA_Abort_IT+0xec>)
 80097ba:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2201      	movs	r2, #1
 80097c0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2200      	movs	r2, #0
 80097c8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d003      	beq.n	80097dc <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80097d8:	6878      	ldr	r0, [r7, #4]
 80097da:	4798      	blx	r3
    } 
  }
  return status;
 80097dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80097de:	4618      	mov	r0, r3
 80097e0:	3710      	adds	r7, #16
 80097e2:	46bd      	mov	sp, r7
 80097e4:	bd80      	pop	{r7, pc}
 80097e6:	bf00      	nop
 80097e8:	40020008 	.word	0x40020008
 80097ec:	4002001c 	.word	0x4002001c
 80097f0:	40020030 	.word	0x40020030
 80097f4:	40020044 	.word	0x40020044
 80097f8:	40020058 	.word	0x40020058
 80097fc:	4002006c 	.word	0x4002006c
 8009800:	40020000 	.word	0x40020000

08009804 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b084      	sub	sp, #16
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009820:	2204      	movs	r2, #4
 8009822:	409a      	lsls	r2, r3
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	4013      	ands	r3, r2
 8009828:	2b00      	cmp	r3, #0
 800982a:	d04f      	beq.n	80098cc <HAL_DMA_IRQHandler+0xc8>
 800982c:	68bb      	ldr	r3, [r7, #8]
 800982e:	f003 0304 	and.w	r3, r3, #4
 8009832:	2b00      	cmp	r3, #0
 8009834:	d04a      	beq.n	80098cc <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	f003 0320 	and.w	r3, r3, #32
 8009840:	2b00      	cmp	r3, #0
 8009842:	d107      	bne.n	8009854 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	681a      	ldr	r2, [r3, #0]
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	f022 0204 	bic.w	r2, r2, #4
 8009852:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	4a66      	ldr	r2, [pc, #408]	@ (80099f4 <HAL_DMA_IRQHandler+0x1f0>)
 800985a:	4293      	cmp	r3, r2
 800985c:	d029      	beq.n	80098b2 <HAL_DMA_IRQHandler+0xae>
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	4a65      	ldr	r2, [pc, #404]	@ (80099f8 <HAL_DMA_IRQHandler+0x1f4>)
 8009864:	4293      	cmp	r3, r2
 8009866:	d022      	beq.n	80098ae <HAL_DMA_IRQHandler+0xaa>
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	4a63      	ldr	r2, [pc, #396]	@ (80099fc <HAL_DMA_IRQHandler+0x1f8>)
 800986e:	4293      	cmp	r3, r2
 8009870:	d01a      	beq.n	80098a8 <HAL_DMA_IRQHandler+0xa4>
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	4a62      	ldr	r2, [pc, #392]	@ (8009a00 <HAL_DMA_IRQHandler+0x1fc>)
 8009878:	4293      	cmp	r3, r2
 800987a:	d012      	beq.n	80098a2 <HAL_DMA_IRQHandler+0x9e>
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	4a60      	ldr	r2, [pc, #384]	@ (8009a04 <HAL_DMA_IRQHandler+0x200>)
 8009882:	4293      	cmp	r3, r2
 8009884:	d00a      	beq.n	800989c <HAL_DMA_IRQHandler+0x98>
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	4a5f      	ldr	r2, [pc, #380]	@ (8009a08 <HAL_DMA_IRQHandler+0x204>)
 800988c:	4293      	cmp	r3, r2
 800988e:	d102      	bne.n	8009896 <HAL_DMA_IRQHandler+0x92>
 8009890:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8009894:	e00e      	b.n	80098b4 <HAL_DMA_IRQHandler+0xb0>
 8009896:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800989a:	e00b      	b.n	80098b4 <HAL_DMA_IRQHandler+0xb0>
 800989c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80098a0:	e008      	b.n	80098b4 <HAL_DMA_IRQHandler+0xb0>
 80098a2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80098a6:	e005      	b.n	80098b4 <HAL_DMA_IRQHandler+0xb0>
 80098a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80098ac:	e002      	b.n	80098b4 <HAL_DMA_IRQHandler+0xb0>
 80098ae:	2340      	movs	r3, #64	@ 0x40
 80098b0:	e000      	b.n	80098b4 <HAL_DMA_IRQHandler+0xb0>
 80098b2:	2304      	movs	r3, #4
 80098b4:	4a55      	ldr	r2, [pc, #340]	@ (8009a0c <HAL_DMA_IRQHandler+0x208>)
 80098b6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098bc:	2b00      	cmp	r3, #0
 80098be:	f000 8094 	beq.w	80099ea <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80098ca:	e08e      	b.n	80099ea <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098d0:	2202      	movs	r2, #2
 80098d2:	409a      	lsls	r2, r3
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	4013      	ands	r3, r2
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d056      	beq.n	800998a <HAL_DMA_IRQHandler+0x186>
 80098dc:	68bb      	ldr	r3, [r7, #8]
 80098de:	f003 0302 	and.w	r3, r3, #2
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d051      	beq.n	800998a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	f003 0320 	and.w	r3, r3, #32
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d10b      	bne.n	800990c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	681a      	ldr	r2, [r3, #0]
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	f022 020a 	bic.w	r2, r2, #10
 8009902:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2201      	movs	r2, #1
 8009908:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	4a38      	ldr	r2, [pc, #224]	@ (80099f4 <HAL_DMA_IRQHandler+0x1f0>)
 8009912:	4293      	cmp	r3, r2
 8009914:	d029      	beq.n	800996a <HAL_DMA_IRQHandler+0x166>
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	4a37      	ldr	r2, [pc, #220]	@ (80099f8 <HAL_DMA_IRQHandler+0x1f4>)
 800991c:	4293      	cmp	r3, r2
 800991e:	d022      	beq.n	8009966 <HAL_DMA_IRQHandler+0x162>
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	4a35      	ldr	r2, [pc, #212]	@ (80099fc <HAL_DMA_IRQHandler+0x1f8>)
 8009926:	4293      	cmp	r3, r2
 8009928:	d01a      	beq.n	8009960 <HAL_DMA_IRQHandler+0x15c>
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	4a34      	ldr	r2, [pc, #208]	@ (8009a00 <HAL_DMA_IRQHandler+0x1fc>)
 8009930:	4293      	cmp	r3, r2
 8009932:	d012      	beq.n	800995a <HAL_DMA_IRQHandler+0x156>
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	4a32      	ldr	r2, [pc, #200]	@ (8009a04 <HAL_DMA_IRQHandler+0x200>)
 800993a:	4293      	cmp	r3, r2
 800993c:	d00a      	beq.n	8009954 <HAL_DMA_IRQHandler+0x150>
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	4a31      	ldr	r2, [pc, #196]	@ (8009a08 <HAL_DMA_IRQHandler+0x204>)
 8009944:	4293      	cmp	r3, r2
 8009946:	d102      	bne.n	800994e <HAL_DMA_IRQHandler+0x14a>
 8009948:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800994c:	e00e      	b.n	800996c <HAL_DMA_IRQHandler+0x168>
 800994e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009952:	e00b      	b.n	800996c <HAL_DMA_IRQHandler+0x168>
 8009954:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8009958:	e008      	b.n	800996c <HAL_DMA_IRQHandler+0x168>
 800995a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800995e:	e005      	b.n	800996c <HAL_DMA_IRQHandler+0x168>
 8009960:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009964:	e002      	b.n	800996c <HAL_DMA_IRQHandler+0x168>
 8009966:	2320      	movs	r3, #32
 8009968:	e000      	b.n	800996c <HAL_DMA_IRQHandler+0x168>
 800996a:	2302      	movs	r3, #2
 800996c:	4a27      	ldr	r2, [pc, #156]	@ (8009a0c <HAL_DMA_IRQHandler+0x208>)
 800996e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2200      	movs	r2, #0
 8009974:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800997c:	2b00      	cmp	r3, #0
 800997e:	d034      	beq.n	80099ea <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009984:	6878      	ldr	r0, [r7, #4]
 8009986:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8009988:	e02f      	b.n	80099ea <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800998e:	2208      	movs	r2, #8
 8009990:	409a      	lsls	r2, r3
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	4013      	ands	r3, r2
 8009996:	2b00      	cmp	r3, #0
 8009998:	d028      	beq.n	80099ec <HAL_DMA_IRQHandler+0x1e8>
 800999a:	68bb      	ldr	r3, [r7, #8]
 800999c:	f003 0308 	and.w	r3, r3, #8
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d023      	beq.n	80099ec <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	681a      	ldr	r2, [r3, #0]
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	f022 020e 	bic.w	r2, r2, #14
 80099b2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099bc:	2101      	movs	r1, #1
 80099be:	fa01 f202 	lsl.w	r2, r1, r2
 80099c2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2201      	movs	r2, #1
 80099c8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	2201      	movs	r2, #1
 80099ce:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	2200      	movs	r2, #0
 80099d6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d004      	beq.n	80099ec <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099e6:	6878      	ldr	r0, [r7, #4]
 80099e8:	4798      	blx	r3
    }
  }
  return;
 80099ea:	bf00      	nop
 80099ec:	bf00      	nop
}
 80099ee:	3710      	adds	r7, #16
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bd80      	pop	{r7, pc}
 80099f4:	40020008 	.word	0x40020008
 80099f8:	4002001c 	.word	0x4002001c
 80099fc:	40020030 	.word	0x40020030
 8009a00:	40020044 	.word	0x40020044
 8009a04:	40020058 	.word	0x40020058
 8009a08:	4002006c 	.word	0x4002006c
 8009a0c:	40020000 	.word	0x40020000

08009a10 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009a10:	b480      	push	{r7}
 8009a12:	b085      	sub	sp, #20
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	60f8      	str	r0, [r7, #12]
 8009a18:	60b9      	str	r1, [r7, #8]
 8009a1a:	607a      	str	r2, [r7, #4]
 8009a1c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a26:	2101      	movs	r1, #1
 8009a28:	fa01 f202 	lsl.w	r2, r1, r2
 8009a2c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	683a      	ldr	r2, [r7, #0]
 8009a34:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	685b      	ldr	r3, [r3, #4]
 8009a3a:	2b10      	cmp	r3, #16
 8009a3c:	d108      	bne.n	8009a50 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	687a      	ldr	r2, [r7, #4]
 8009a44:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	68ba      	ldr	r2, [r7, #8]
 8009a4c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8009a4e:	e007      	b.n	8009a60 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	68ba      	ldr	r2, [r7, #8]
 8009a56:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	687a      	ldr	r2, [r7, #4]
 8009a5e:	60da      	str	r2, [r3, #12]
}
 8009a60:	bf00      	nop
 8009a62:	3714      	adds	r7, #20
 8009a64:	46bd      	mov	sp, r7
 8009a66:	bc80      	pop	{r7}
 8009a68:	4770      	bx	lr
	...

08009a6c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009a6c:	b480      	push	{r7}
 8009a6e:	b08b      	sub	sp, #44	@ 0x2c
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
 8009a74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009a76:	2300      	movs	r3, #0
 8009a78:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009a7e:	e169      	b.n	8009d54 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8009a80:	2201      	movs	r2, #1
 8009a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a84:	fa02 f303 	lsl.w	r3, r2, r3
 8009a88:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009a8a:	683b      	ldr	r3, [r7, #0]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	69fa      	ldr	r2, [r7, #28]
 8009a90:	4013      	ands	r3, r2
 8009a92:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8009a94:	69ba      	ldr	r2, [r7, #24]
 8009a96:	69fb      	ldr	r3, [r7, #28]
 8009a98:	429a      	cmp	r2, r3
 8009a9a:	f040 8158 	bne.w	8009d4e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	685b      	ldr	r3, [r3, #4]
 8009aa2:	4a9a      	ldr	r2, [pc, #616]	@ (8009d0c <HAL_GPIO_Init+0x2a0>)
 8009aa4:	4293      	cmp	r3, r2
 8009aa6:	d05e      	beq.n	8009b66 <HAL_GPIO_Init+0xfa>
 8009aa8:	4a98      	ldr	r2, [pc, #608]	@ (8009d0c <HAL_GPIO_Init+0x2a0>)
 8009aaa:	4293      	cmp	r3, r2
 8009aac:	d875      	bhi.n	8009b9a <HAL_GPIO_Init+0x12e>
 8009aae:	4a98      	ldr	r2, [pc, #608]	@ (8009d10 <HAL_GPIO_Init+0x2a4>)
 8009ab0:	4293      	cmp	r3, r2
 8009ab2:	d058      	beq.n	8009b66 <HAL_GPIO_Init+0xfa>
 8009ab4:	4a96      	ldr	r2, [pc, #600]	@ (8009d10 <HAL_GPIO_Init+0x2a4>)
 8009ab6:	4293      	cmp	r3, r2
 8009ab8:	d86f      	bhi.n	8009b9a <HAL_GPIO_Init+0x12e>
 8009aba:	4a96      	ldr	r2, [pc, #600]	@ (8009d14 <HAL_GPIO_Init+0x2a8>)
 8009abc:	4293      	cmp	r3, r2
 8009abe:	d052      	beq.n	8009b66 <HAL_GPIO_Init+0xfa>
 8009ac0:	4a94      	ldr	r2, [pc, #592]	@ (8009d14 <HAL_GPIO_Init+0x2a8>)
 8009ac2:	4293      	cmp	r3, r2
 8009ac4:	d869      	bhi.n	8009b9a <HAL_GPIO_Init+0x12e>
 8009ac6:	4a94      	ldr	r2, [pc, #592]	@ (8009d18 <HAL_GPIO_Init+0x2ac>)
 8009ac8:	4293      	cmp	r3, r2
 8009aca:	d04c      	beq.n	8009b66 <HAL_GPIO_Init+0xfa>
 8009acc:	4a92      	ldr	r2, [pc, #584]	@ (8009d18 <HAL_GPIO_Init+0x2ac>)
 8009ace:	4293      	cmp	r3, r2
 8009ad0:	d863      	bhi.n	8009b9a <HAL_GPIO_Init+0x12e>
 8009ad2:	4a92      	ldr	r2, [pc, #584]	@ (8009d1c <HAL_GPIO_Init+0x2b0>)
 8009ad4:	4293      	cmp	r3, r2
 8009ad6:	d046      	beq.n	8009b66 <HAL_GPIO_Init+0xfa>
 8009ad8:	4a90      	ldr	r2, [pc, #576]	@ (8009d1c <HAL_GPIO_Init+0x2b0>)
 8009ada:	4293      	cmp	r3, r2
 8009adc:	d85d      	bhi.n	8009b9a <HAL_GPIO_Init+0x12e>
 8009ade:	2b12      	cmp	r3, #18
 8009ae0:	d82a      	bhi.n	8009b38 <HAL_GPIO_Init+0xcc>
 8009ae2:	2b12      	cmp	r3, #18
 8009ae4:	d859      	bhi.n	8009b9a <HAL_GPIO_Init+0x12e>
 8009ae6:	a201      	add	r2, pc, #4	@ (adr r2, 8009aec <HAL_GPIO_Init+0x80>)
 8009ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aec:	08009b67 	.word	0x08009b67
 8009af0:	08009b41 	.word	0x08009b41
 8009af4:	08009b53 	.word	0x08009b53
 8009af8:	08009b95 	.word	0x08009b95
 8009afc:	08009b9b 	.word	0x08009b9b
 8009b00:	08009b9b 	.word	0x08009b9b
 8009b04:	08009b9b 	.word	0x08009b9b
 8009b08:	08009b9b 	.word	0x08009b9b
 8009b0c:	08009b9b 	.word	0x08009b9b
 8009b10:	08009b9b 	.word	0x08009b9b
 8009b14:	08009b9b 	.word	0x08009b9b
 8009b18:	08009b9b 	.word	0x08009b9b
 8009b1c:	08009b9b 	.word	0x08009b9b
 8009b20:	08009b9b 	.word	0x08009b9b
 8009b24:	08009b9b 	.word	0x08009b9b
 8009b28:	08009b9b 	.word	0x08009b9b
 8009b2c:	08009b9b 	.word	0x08009b9b
 8009b30:	08009b49 	.word	0x08009b49
 8009b34:	08009b5d 	.word	0x08009b5d
 8009b38:	4a79      	ldr	r2, [pc, #484]	@ (8009d20 <HAL_GPIO_Init+0x2b4>)
 8009b3a:	4293      	cmp	r3, r2
 8009b3c:	d013      	beq.n	8009b66 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8009b3e:	e02c      	b.n	8009b9a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	68db      	ldr	r3, [r3, #12]
 8009b44:	623b      	str	r3, [r7, #32]
          break;
 8009b46:	e029      	b.n	8009b9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	68db      	ldr	r3, [r3, #12]
 8009b4c:	3304      	adds	r3, #4
 8009b4e:	623b      	str	r3, [r7, #32]
          break;
 8009b50:	e024      	b.n	8009b9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8009b52:	683b      	ldr	r3, [r7, #0]
 8009b54:	68db      	ldr	r3, [r3, #12]
 8009b56:	3308      	adds	r3, #8
 8009b58:	623b      	str	r3, [r7, #32]
          break;
 8009b5a:	e01f      	b.n	8009b9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	68db      	ldr	r3, [r3, #12]
 8009b60:	330c      	adds	r3, #12
 8009b62:	623b      	str	r3, [r7, #32]
          break;
 8009b64:	e01a      	b.n	8009b9c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	689b      	ldr	r3, [r3, #8]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d102      	bne.n	8009b74 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8009b6e:	2304      	movs	r3, #4
 8009b70:	623b      	str	r3, [r7, #32]
          break;
 8009b72:	e013      	b.n	8009b9c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	689b      	ldr	r3, [r3, #8]
 8009b78:	2b01      	cmp	r3, #1
 8009b7a:	d105      	bne.n	8009b88 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009b7c:	2308      	movs	r3, #8
 8009b7e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	69fa      	ldr	r2, [r7, #28]
 8009b84:	611a      	str	r2, [r3, #16]
          break;
 8009b86:	e009      	b.n	8009b9c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009b88:	2308      	movs	r3, #8
 8009b8a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	69fa      	ldr	r2, [r7, #28]
 8009b90:	615a      	str	r2, [r3, #20]
          break;
 8009b92:	e003      	b.n	8009b9c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8009b94:	2300      	movs	r3, #0
 8009b96:	623b      	str	r3, [r7, #32]
          break;
 8009b98:	e000      	b.n	8009b9c <HAL_GPIO_Init+0x130>
          break;
 8009b9a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009b9c:	69bb      	ldr	r3, [r7, #24]
 8009b9e:	2bff      	cmp	r3, #255	@ 0xff
 8009ba0:	d801      	bhi.n	8009ba6 <HAL_GPIO_Init+0x13a>
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	e001      	b.n	8009baa <HAL_GPIO_Init+0x13e>
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	3304      	adds	r3, #4
 8009baa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8009bac:	69bb      	ldr	r3, [r7, #24]
 8009bae:	2bff      	cmp	r3, #255	@ 0xff
 8009bb0:	d802      	bhi.n	8009bb8 <HAL_GPIO_Init+0x14c>
 8009bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bb4:	009b      	lsls	r3, r3, #2
 8009bb6:	e002      	b.n	8009bbe <HAL_GPIO_Init+0x152>
 8009bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bba:	3b08      	subs	r3, #8
 8009bbc:	009b      	lsls	r3, r3, #2
 8009bbe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8009bc0:	697b      	ldr	r3, [r7, #20]
 8009bc2:	681a      	ldr	r2, [r3, #0]
 8009bc4:	210f      	movs	r1, #15
 8009bc6:	693b      	ldr	r3, [r7, #16]
 8009bc8:	fa01 f303 	lsl.w	r3, r1, r3
 8009bcc:	43db      	mvns	r3, r3
 8009bce:	401a      	ands	r2, r3
 8009bd0:	6a39      	ldr	r1, [r7, #32]
 8009bd2:	693b      	ldr	r3, [r7, #16]
 8009bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8009bd8:	431a      	orrs	r2, r3
 8009bda:	697b      	ldr	r3, [r7, #20]
 8009bdc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	685b      	ldr	r3, [r3, #4]
 8009be2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	f000 80b1 	beq.w	8009d4e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8009bec:	4b4d      	ldr	r3, [pc, #308]	@ (8009d24 <HAL_GPIO_Init+0x2b8>)
 8009bee:	699b      	ldr	r3, [r3, #24]
 8009bf0:	4a4c      	ldr	r2, [pc, #304]	@ (8009d24 <HAL_GPIO_Init+0x2b8>)
 8009bf2:	f043 0301 	orr.w	r3, r3, #1
 8009bf6:	6193      	str	r3, [r2, #24]
 8009bf8:	4b4a      	ldr	r3, [pc, #296]	@ (8009d24 <HAL_GPIO_Init+0x2b8>)
 8009bfa:	699b      	ldr	r3, [r3, #24]
 8009bfc:	f003 0301 	and.w	r3, r3, #1
 8009c00:	60bb      	str	r3, [r7, #8]
 8009c02:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8009c04:	4a48      	ldr	r2, [pc, #288]	@ (8009d28 <HAL_GPIO_Init+0x2bc>)
 8009c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c08:	089b      	lsrs	r3, r3, #2
 8009c0a:	3302      	adds	r3, #2
 8009c0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c10:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8009c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c14:	f003 0303 	and.w	r3, r3, #3
 8009c18:	009b      	lsls	r3, r3, #2
 8009c1a:	220f      	movs	r2, #15
 8009c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8009c20:	43db      	mvns	r3, r3
 8009c22:	68fa      	ldr	r2, [r7, #12]
 8009c24:	4013      	ands	r3, r2
 8009c26:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	4a40      	ldr	r2, [pc, #256]	@ (8009d2c <HAL_GPIO_Init+0x2c0>)
 8009c2c:	4293      	cmp	r3, r2
 8009c2e:	d013      	beq.n	8009c58 <HAL_GPIO_Init+0x1ec>
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	4a3f      	ldr	r2, [pc, #252]	@ (8009d30 <HAL_GPIO_Init+0x2c4>)
 8009c34:	4293      	cmp	r3, r2
 8009c36:	d00d      	beq.n	8009c54 <HAL_GPIO_Init+0x1e8>
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	4a3e      	ldr	r2, [pc, #248]	@ (8009d34 <HAL_GPIO_Init+0x2c8>)
 8009c3c:	4293      	cmp	r3, r2
 8009c3e:	d007      	beq.n	8009c50 <HAL_GPIO_Init+0x1e4>
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	4a3d      	ldr	r2, [pc, #244]	@ (8009d38 <HAL_GPIO_Init+0x2cc>)
 8009c44:	4293      	cmp	r3, r2
 8009c46:	d101      	bne.n	8009c4c <HAL_GPIO_Init+0x1e0>
 8009c48:	2303      	movs	r3, #3
 8009c4a:	e006      	b.n	8009c5a <HAL_GPIO_Init+0x1ee>
 8009c4c:	2304      	movs	r3, #4
 8009c4e:	e004      	b.n	8009c5a <HAL_GPIO_Init+0x1ee>
 8009c50:	2302      	movs	r3, #2
 8009c52:	e002      	b.n	8009c5a <HAL_GPIO_Init+0x1ee>
 8009c54:	2301      	movs	r3, #1
 8009c56:	e000      	b.n	8009c5a <HAL_GPIO_Init+0x1ee>
 8009c58:	2300      	movs	r3, #0
 8009c5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009c5c:	f002 0203 	and.w	r2, r2, #3
 8009c60:	0092      	lsls	r2, r2, #2
 8009c62:	4093      	lsls	r3, r2
 8009c64:	68fa      	ldr	r2, [r7, #12]
 8009c66:	4313      	orrs	r3, r2
 8009c68:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8009c6a:	492f      	ldr	r1, [pc, #188]	@ (8009d28 <HAL_GPIO_Init+0x2bc>)
 8009c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c6e:	089b      	lsrs	r3, r3, #2
 8009c70:	3302      	adds	r3, #2
 8009c72:	68fa      	ldr	r2, [r7, #12]
 8009c74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	685b      	ldr	r3, [r3, #4]
 8009c7c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d006      	beq.n	8009c92 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8009c84:	4b2d      	ldr	r3, [pc, #180]	@ (8009d3c <HAL_GPIO_Init+0x2d0>)
 8009c86:	689a      	ldr	r2, [r3, #8]
 8009c88:	492c      	ldr	r1, [pc, #176]	@ (8009d3c <HAL_GPIO_Init+0x2d0>)
 8009c8a:	69bb      	ldr	r3, [r7, #24]
 8009c8c:	4313      	orrs	r3, r2
 8009c8e:	608b      	str	r3, [r1, #8]
 8009c90:	e006      	b.n	8009ca0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8009c92:	4b2a      	ldr	r3, [pc, #168]	@ (8009d3c <HAL_GPIO_Init+0x2d0>)
 8009c94:	689a      	ldr	r2, [r3, #8]
 8009c96:	69bb      	ldr	r3, [r7, #24]
 8009c98:	43db      	mvns	r3, r3
 8009c9a:	4928      	ldr	r1, [pc, #160]	@ (8009d3c <HAL_GPIO_Init+0x2d0>)
 8009c9c:	4013      	ands	r3, r2
 8009c9e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	685b      	ldr	r3, [r3, #4]
 8009ca4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d006      	beq.n	8009cba <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8009cac:	4b23      	ldr	r3, [pc, #140]	@ (8009d3c <HAL_GPIO_Init+0x2d0>)
 8009cae:	68da      	ldr	r2, [r3, #12]
 8009cb0:	4922      	ldr	r1, [pc, #136]	@ (8009d3c <HAL_GPIO_Init+0x2d0>)
 8009cb2:	69bb      	ldr	r3, [r7, #24]
 8009cb4:	4313      	orrs	r3, r2
 8009cb6:	60cb      	str	r3, [r1, #12]
 8009cb8:	e006      	b.n	8009cc8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8009cba:	4b20      	ldr	r3, [pc, #128]	@ (8009d3c <HAL_GPIO_Init+0x2d0>)
 8009cbc:	68da      	ldr	r2, [r3, #12]
 8009cbe:	69bb      	ldr	r3, [r7, #24]
 8009cc0:	43db      	mvns	r3, r3
 8009cc2:	491e      	ldr	r1, [pc, #120]	@ (8009d3c <HAL_GPIO_Init+0x2d0>)
 8009cc4:	4013      	ands	r3, r2
 8009cc6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009cc8:	683b      	ldr	r3, [r7, #0]
 8009cca:	685b      	ldr	r3, [r3, #4]
 8009ccc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d006      	beq.n	8009ce2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8009cd4:	4b19      	ldr	r3, [pc, #100]	@ (8009d3c <HAL_GPIO_Init+0x2d0>)
 8009cd6:	685a      	ldr	r2, [r3, #4]
 8009cd8:	4918      	ldr	r1, [pc, #96]	@ (8009d3c <HAL_GPIO_Init+0x2d0>)
 8009cda:	69bb      	ldr	r3, [r7, #24]
 8009cdc:	4313      	orrs	r3, r2
 8009cde:	604b      	str	r3, [r1, #4]
 8009ce0:	e006      	b.n	8009cf0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8009ce2:	4b16      	ldr	r3, [pc, #88]	@ (8009d3c <HAL_GPIO_Init+0x2d0>)
 8009ce4:	685a      	ldr	r2, [r3, #4]
 8009ce6:	69bb      	ldr	r3, [r7, #24]
 8009ce8:	43db      	mvns	r3, r3
 8009cea:	4914      	ldr	r1, [pc, #80]	@ (8009d3c <HAL_GPIO_Init+0x2d0>)
 8009cec:	4013      	ands	r3, r2
 8009cee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009cf0:	683b      	ldr	r3, [r7, #0]
 8009cf2:	685b      	ldr	r3, [r3, #4]
 8009cf4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d021      	beq.n	8009d40 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8009cfc:	4b0f      	ldr	r3, [pc, #60]	@ (8009d3c <HAL_GPIO_Init+0x2d0>)
 8009cfe:	681a      	ldr	r2, [r3, #0]
 8009d00:	490e      	ldr	r1, [pc, #56]	@ (8009d3c <HAL_GPIO_Init+0x2d0>)
 8009d02:	69bb      	ldr	r3, [r7, #24]
 8009d04:	4313      	orrs	r3, r2
 8009d06:	600b      	str	r3, [r1, #0]
 8009d08:	e021      	b.n	8009d4e <HAL_GPIO_Init+0x2e2>
 8009d0a:	bf00      	nop
 8009d0c:	10320000 	.word	0x10320000
 8009d10:	10310000 	.word	0x10310000
 8009d14:	10220000 	.word	0x10220000
 8009d18:	10210000 	.word	0x10210000
 8009d1c:	10120000 	.word	0x10120000
 8009d20:	10110000 	.word	0x10110000
 8009d24:	40021000 	.word	0x40021000
 8009d28:	40010000 	.word	0x40010000
 8009d2c:	40010800 	.word	0x40010800
 8009d30:	40010c00 	.word	0x40010c00
 8009d34:	40011000 	.word	0x40011000
 8009d38:	40011400 	.word	0x40011400
 8009d3c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8009d40:	4b0b      	ldr	r3, [pc, #44]	@ (8009d70 <HAL_GPIO_Init+0x304>)
 8009d42:	681a      	ldr	r2, [r3, #0]
 8009d44:	69bb      	ldr	r3, [r7, #24]
 8009d46:	43db      	mvns	r3, r3
 8009d48:	4909      	ldr	r1, [pc, #36]	@ (8009d70 <HAL_GPIO_Init+0x304>)
 8009d4a:	4013      	ands	r3, r2
 8009d4c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8009d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d50:	3301      	adds	r3, #1
 8009d52:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	681a      	ldr	r2, [r3, #0]
 8009d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d5a:	fa22 f303 	lsr.w	r3, r2, r3
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	f47f ae8e 	bne.w	8009a80 <HAL_GPIO_Init+0x14>
  }
}
 8009d64:	bf00      	nop
 8009d66:	bf00      	nop
 8009d68:	372c      	adds	r7, #44	@ 0x2c
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	bc80      	pop	{r7}
 8009d6e:	4770      	bx	lr
 8009d70:	40010400 	.word	0x40010400

08009d74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009d74:	b480      	push	{r7}
 8009d76:	b083      	sub	sp, #12
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
 8009d7c:	460b      	mov	r3, r1
 8009d7e:	807b      	strh	r3, [r7, #2]
 8009d80:	4613      	mov	r3, r2
 8009d82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009d84:	787b      	ldrb	r3, [r7, #1]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d003      	beq.n	8009d92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009d8a:	887a      	ldrh	r2, [r7, #2]
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8009d90:	e003      	b.n	8009d9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8009d92:	887b      	ldrh	r3, [r7, #2]
 8009d94:	041a      	lsls	r2, r3, #16
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	611a      	str	r2, [r3, #16]
}
 8009d9a:	bf00      	nop
 8009d9c:	370c      	adds	r7, #12
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	bc80      	pop	{r7}
 8009da2:	4770      	bx	lr

08009da4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009da4:	b480      	push	{r7}
 8009da6:	b085      	sub	sp, #20
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
 8009dac:	460b      	mov	r3, r1
 8009dae:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	68db      	ldr	r3, [r3, #12]
 8009db4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009db6:	887a      	ldrh	r2, [r7, #2]
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	4013      	ands	r3, r2
 8009dbc:	041a      	lsls	r2, r3, #16
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	43d9      	mvns	r1, r3
 8009dc2:	887b      	ldrh	r3, [r7, #2]
 8009dc4:	400b      	ands	r3, r1
 8009dc6:	431a      	orrs	r2, r3
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	611a      	str	r2, [r3, #16]
}
 8009dcc:	bf00      	nop
 8009dce:	3714      	adds	r7, #20
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	bc80      	pop	{r7}
 8009dd4:	4770      	bx	lr
	...

08009dd8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b084      	sub	sp, #16
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d101      	bne.n	8009dea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009de6:	2301      	movs	r3, #1
 8009de8:	e12b      	b.n	800a042 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009df0:	b2db      	uxtb	r3, r3
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d106      	bne.n	8009e04 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	2200      	movs	r2, #0
 8009dfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8009dfe:	6878      	ldr	r0, [r7, #4]
 8009e00:	f7fe ff90 	bl	8008d24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2224      	movs	r2, #36	@ 0x24
 8009e08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	681a      	ldr	r2, [r3, #0]
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	f022 0201 	bic.w	r2, r2, #1
 8009e1a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	681a      	ldr	r2, [r3, #0]
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009e2a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	681a      	ldr	r2, [r3, #0]
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009e3a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009e3c:	f000 fcda 	bl	800a7f4 <HAL_RCC_GetPCLK1Freq>
 8009e40:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	685b      	ldr	r3, [r3, #4]
 8009e46:	4a81      	ldr	r2, [pc, #516]	@ (800a04c <HAL_I2C_Init+0x274>)
 8009e48:	4293      	cmp	r3, r2
 8009e4a:	d807      	bhi.n	8009e5c <HAL_I2C_Init+0x84>
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	4a80      	ldr	r2, [pc, #512]	@ (800a050 <HAL_I2C_Init+0x278>)
 8009e50:	4293      	cmp	r3, r2
 8009e52:	bf94      	ite	ls
 8009e54:	2301      	movls	r3, #1
 8009e56:	2300      	movhi	r3, #0
 8009e58:	b2db      	uxtb	r3, r3
 8009e5a:	e006      	b.n	8009e6a <HAL_I2C_Init+0x92>
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	4a7d      	ldr	r2, [pc, #500]	@ (800a054 <HAL_I2C_Init+0x27c>)
 8009e60:	4293      	cmp	r3, r2
 8009e62:	bf94      	ite	ls
 8009e64:	2301      	movls	r3, #1
 8009e66:	2300      	movhi	r3, #0
 8009e68:	b2db      	uxtb	r3, r3
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d001      	beq.n	8009e72 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8009e6e:	2301      	movs	r3, #1
 8009e70:	e0e7      	b.n	800a042 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	4a78      	ldr	r2, [pc, #480]	@ (800a058 <HAL_I2C_Init+0x280>)
 8009e76:	fba2 2303 	umull	r2, r3, r2, r3
 8009e7a:	0c9b      	lsrs	r3, r3, #18
 8009e7c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	685b      	ldr	r3, [r3, #4]
 8009e84:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	68ba      	ldr	r2, [r7, #8]
 8009e8e:	430a      	orrs	r2, r1
 8009e90:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	6a1b      	ldr	r3, [r3, #32]
 8009e98:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	685b      	ldr	r3, [r3, #4]
 8009ea0:	4a6a      	ldr	r2, [pc, #424]	@ (800a04c <HAL_I2C_Init+0x274>)
 8009ea2:	4293      	cmp	r3, r2
 8009ea4:	d802      	bhi.n	8009eac <HAL_I2C_Init+0xd4>
 8009ea6:	68bb      	ldr	r3, [r7, #8]
 8009ea8:	3301      	adds	r3, #1
 8009eaa:	e009      	b.n	8009ec0 <HAL_I2C_Init+0xe8>
 8009eac:	68bb      	ldr	r3, [r7, #8]
 8009eae:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8009eb2:	fb02 f303 	mul.w	r3, r2, r3
 8009eb6:	4a69      	ldr	r2, [pc, #420]	@ (800a05c <HAL_I2C_Init+0x284>)
 8009eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8009ebc:	099b      	lsrs	r3, r3, #6
 8009ebe:	3301      	adds	r3, #1
 8009ec0:	687a      	ldr	r2, [r7, #4]
 8009ec2:	6812      	ldr	r2, [r2, #0]
 8009ec4:	430b      	orrs	r3, r1
 8009ec6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	69db      	ldr	r3, [r3, #28]
 8009ece:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8009ed2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	685b      	ldr	r3, [r3, #4]
 8009eda:	495c      	ldr	r1, [pc, #368]	@ (800a04c <HAL_I2C_Init+0x274>)
 8009edc:	428b      	cmp	r3, r1
 8009ede:	d819      	bhi.n	8009f14 <HAL_I2C_Init+0x13c>
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	1e59      	subs	r1, r3, #1
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	685b      	ldr	r3, [r3, #4]
 8009ee8:	005b      	lsls	r3, r3, #1
 8009eea:	fbb1 f3f3 	udiv	r3, r1, r3
 8009eee:	1c59      	adds	r1, r3, #1
 8009ef0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8009ef4:	400b      	ands	r3, r1
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d00a      	beq.n	8009f10 <HAL_I2C_Init+0x138>
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	1e59      	subs	r1, r3, #1
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	685b      	ldr	r3, [r3, #4]
 8009f02:	005b      	lsls	r3, r3, #1
 8009f04:	fbb1 f3f3 	udiv	r3, r1, r3
 8009f08:	3301      	adds	r3, #1
 8009f0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009f0e:	e051      	b.n	8009fb4 <HAL_I2C_Init+0x1dc>
 8009f10:	2304      	movs	r3, #4
 8009f12:	e04f      	b.n	8009fb4 <HAL_I2C_Init+0x1dc>
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	689b      	ldr	r3, [r3, #8]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d111      	bne.n	8009f40 <HAL_I2C_Init+0x168>
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	1e58      	subs	r0, r3, #1
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	6859      	ldr	r1, [r3, #4]
 8009f24:	460b      	mov	r3, r1
 8009f26:	005b      	lsls	r3, r3, #1
 8009f28:	440b      	add	r3, r1
 8009f2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8009f2e:	3301      	adds	r3, #1
 8009f30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	bf0c      	ite	eq
 8009f38:	2301      	moveq	r3, #1
 8009f3a:	2300      	movne	r3, #0
 8009f3c:	b2db      	uxtb	r3, r3
 8009f3e:	e012      	b.n	8009f66 <HAL_I2C_Init+0x18e>
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	1e58      	subs	r0, r3, #1
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	6859      	ldr	r1, [r3, #4]
 8009f48:	460b      	mov	r3, r1
 8009f4a:	009b      	lsls	r3, r3, #2
 8009f4c:	440b      	add	r3, r1
 8009f4e:	0099      	lsls	r1, r3, #2
 8009f50:	440b      	add	r3, r1
 8009f52:	fbb0 f3f3 	udiv	r3, r0, r3
 8009f56:	3301      	adds	r3, #1
 8009f58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	bf0c      	ite	eq
 8009f60:	2301      	moveq	r3, #1
 8009f62:	2300      	movne	r3, #0
 8009f64:	b2db      	uxtb	r3, r3
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d001      	beq.n	8009f6e <HAL_I2C_Init+0x196>
 8009f6a:	2301      	movs	r3, #1
 8009f6c:	e022      	b.n	8009fb4 <HAL_I2C_Init+0x1dc>
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	689b      	ldr	r3, [r3, #8]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d10e      	bne.n	8009f94 <HAL_I2C_Init+0x1bc>
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	1e58      	subs	r0, r3, #1
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	6859      	ldr	r1, [r3, #4]
 8009f7e:	460b      	mov	r3, r1
 8009f80:	005b      	lsls	r3, r3, #1
 8009f82:	440b      	add	r3, r1
 8009f84:	fbb0 f3f3 	udiv	r3, r0, r3
 8009f88:	3301      	adds	r3, #1
 8009f8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009f8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009f92:	e00f      	b.n	8009fb4 <HAL_I2C_Init+0x1dc>
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	1e58      	subs	r0, r3, #1
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	6859      	ldr	r1, [r3, #4]
 8009f9c:	460b      	mov	r3, r1
 8009f9e:	009b      	lsls	r3, r3, #2
 8009fa0:	440b      	add	r3, r1
 8009fa2:	0099      	lsls	r1, r3, #2
 8009fa4:	440b      	add	r3, r1
 8009fa6:	fbb0 f3f3 	udiv	r3, r0, r3
 8009faa:	3301      	adds	r3, #1
 8009fac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009fb0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009fb4:	6879      	ldr	r1, [r7, #4]
 8009fb6:	6809      	ldr	r1, [r1, #0]
 8009fb8:	4313      	orrs	r3, r2
 8009fba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	69da      	ldr	r2, [r3, #28]
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	6a1b      	ldr	r3, [r3, #32]
 8009fce:	431a      	orrs	r2, r3
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	430a      	orrs	r2, r1
 8009fd6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	689b      	ldr	r3, [r3, #8]
 8009fde:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8009fe2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8009fe6:	687a      	ldr	r2, [r7, #4]
 8009fe8:	6911      	ldr	r1, [r2, #16]
 8009fea:	687a      	ldr	r2, [r7, #4]
 8009fec:	68d2      	ldr	r2, [r2, #12]
 8009fee:	4311      	orrs	r1, r2
 8009ff0:	687a      	ldr	r2, [r7, #4]
 8009ff2:	6812      	ldr	r2, [r2, #0]
 8009ff4:	430b      	orrs	r3, r1
 8009ff6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	68db      	ldr	r3, [r3, #12]
 8009ffe:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	695a      	ldr	r2, [r3, #20]
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	699b      	ldr	r3, [r3, #24]
 800a00a:	431a      	orrs	r2, r3
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	430a      	orrs	r2, r1
 800a012:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	681a      	ldr	r2, [r3, #0]
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	f042 0201 	orr.w	r2, r2, #1
 800a022:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	2200      	movs	r2, #0
 800a028:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2220      	movs	r2, #32
 800a02e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2200      	movs	r2, #0
 800a036:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2200      	movs	r2, #0
 800a03c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800a040:	2300      	movs	r3, #0
}
 800a042:	4618      	mov	r0, r3
 800a044:	3710      	adds	r7, #16
 800a046:	46bd      	mov	sp, r7
 800a048:	bd80      	pop	{r7, pc}
 800a04a:	bf00      	nop
 800a04c:	000186a0 	.word	0x000186a0
 800a050:	001e847f 	.word	0x001e847f
 800a054:	003d08ff 	.word	0x003d08ff
 800a058:	431bde83 	.word	0x431bde83
 800a05c:	10624dd3 	.word	0x10624dd3

0800a060 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a060:	b580      	push	{r7, lr}
 800a062:	b086      	sub	sp, #24
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d101      	bne.n	800a072 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a06e:	2301      	movs	r3, #1
 800a070:	e272      	b.n	800a558 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	f003 0301 	and.w	r3, r3, #1
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	f000 8087 	beq.w	800a18e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a080:	4b92      	ldr	r3, [pc, #584]	@ (800a2cc <HAL_RCC_OscConfig+0x26c>)
 800a082:	685b      	ldr	r3, [r3, #4]
 800a084:	f003 030c 	and.w	r3, r3, #12
 800a088:	2b04      	cmp	r3, #4
 800a08a:	d00c      	beq.n	800a0a6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800a08c:	4b8f      	ldr	r3, [pc, #572]	@ (800a2cc <HAL_RCC_OscConfig+0x26c>)
 800a08e:	685b      	ldr	r3, [r3, #4]
 800a090:	f003 030c 	and.w	r3, r3, #12
 800a094:	2b08      	cmp	r3, #8
 800a096:	d112      	bne.n	800a0be <HAL_RCC_OscConfig+0x5e>
 800a098:	4b8c      	ldr	r3, [pc, #560]	@ (800a2cc <HAL_RCC_OscConfig+0x26c>)
 800a09a:	685b      	ldr	r3, [r3, #4]
 800a09c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a0a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a0a4:	d10b      	bne.n	800a0be <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a0a6:	4b89      	ldr	r3, [pc, #548]	@ (800a2cc <HAL_RCC_OscConfig+0x26c>)
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d06c      	beq.n	800a18c <HAL_RCC_OscConfig+0x12c>
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	685b      	ldr	r3, [r3, #4]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d168      	bne.n	800a18c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a0ba:	2301      	movs	r3, #1
 800a0bc:	e24c      	b.n	800a558 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	685b      	ldr	r3, [r3, #4]
 800a0c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a0c6:	d106      	bne.n	800a0d6 <HAL_RCC_OscConfig+0x76>
 800a0c8:	4b80      	ldr	r3, [pc, #512]	@ (800a2cc <HAL_RCC_OscConfig+0x26c>)
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	4a7f      	ldr	r2, [pc, #508]	@ (800a2cc <HAL_RCC_OscConfig+0x26c>)
 800a0ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a0d2:	6013      	str	r3, [r2, #0]
 800a0d4:	e02e      	b.n	800a134 <HAL_RCC_OscConfig+0xd4>
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	685b      	ldr	r3, [r3, #4]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d10c      	bne.n	800a0f8 <HAL_RCC_OscConfig+0x98>
 800a0de:	4b7b      	ldr	r3, [pc, #492]	@ (800a2cc <HAL_RCC_OscConfig+0x26c>)
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	4a7a      	ldr	r2, [pc, #488]	@ (800a2cc <HAL_RCC_OscConfig+0x26c>)
 800a0e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a0e8:	6013      	str	r3, [r2, #0]
 800a0ea:	4b78      	ldr	r3, [pc, #480]	@ (800a2cc <HAL_RCC_OscConfig+0x26c>)
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	4a77      	ldr	r2, [pc, #476]	@ (800a2cc <HAL_RCC_OscConfig+0x26c>)
 800a0f0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a0f4:	6013      	str	r3, [r2, #0]
 800a0f6:	e01d      	b.n	800a134 <HAL_RCC_OscConfig+0xd4>
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	685b      	ldr	r3, [r3, #4]
 800a0fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a100:	d10c      	bne.n	800a11c <HAL_RCC_OscConfig+0xbc>
 800a102:	4b72      	ldr	r3, [pc, #456]	@ (800a2cc <HAL_RCC_OscConfig+0x26c>)
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	4a71      	ldr	r2, [pc, #452]	@ (800a2cc <HAL_RCC_OscConfig+0x26c>)
 800a108:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a10c:	6013      	str	r3, [r2, #0]
 800a10e:	4b6f      	ldr	r3, [pc, #444]	@ (800a2cc <HAL_RCC_OscConfig+0x26c>)
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	4a6e      	ldr	r2, [pc, #440]	@ (800a2cc <HAL_RCC_OscConfig+0x26c>)
 800a114:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a118:	6013      	str	r3, [r2, #0]
 800a11a:	e00b      	b.n	800a134 <HAL_RCC_OscConfig+0xd4>
 800a11c:	4b6b      	ldr	r3, [pc, #428]	@ (800a2cc <HAL_RCC_OscConfig+0x26c>)
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	4a6a      	ldr	r2, [pc, #424]	@ (800a2cc <HAL_RCC_OscConfig+0x26c>)
 800a122:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a126:	6013      	str	r3, [r2, #0]
 800a128:	4b68      	ldr	r3, [pc, #416]	@ (800a2cc <HAL_RCC_OscConfig+0x26c>)
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	4a67      	ldr	r2, [pc, #412]	@ (800a2cc <HAL_RCC_OscConfig+0x26c>)
 800a12e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a132:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	685b      	ldr	r3, [r3, #4]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d013      	beq.n	800a164 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a13c:	f7ff f8dc 	bl	80092f8 <HAL_GetTick>
 800a140:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a142:	e008      	b.n	800a156 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a144:	f7ff f8d8 	bl	80092f8 <HAL_GetTick>
 800a148:	4602      	mov	r2, r0
 800a14a:	693b      	ldr	r3, [r7, #16]
 800a14c:	1ad3      	subs	r3, r2, r3
 800a14e:	2b64      	cmp	r3, #100	@ 0x64
 800a150:	d901      	bls.n	800a156 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a152:	2303      	movs	r3, #3
 800a154:	e200      	b.n	800a558 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a156:	4b5d      	ldr	r3, [pc, #372]	@ (800a2cc <HAL_RCC_OscConfig+0x26c>)
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d0f0      	beq.n	800a144 <HAL_RCC_OscConfig+0xe4>
 800a162:	e014      	b.n	800a18e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a164:	f7ff f8c8 	bl	80092f8 <HAL_GetTick>
 800a168:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a16a:	e008      	b.n	800a17e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a16c:	f7ff f8c4 	bl	80092f8 <HAL_GetTick>
 800a170:	4602      	mov	r2, r0
 800a172:	693b      	ldr	r3, [r7, #16]
 800a174:	1ad3      	subs	r3, r2, r3
 800a176:	2b64      	cmp	r3, #100	@ 0x64
 800a178:	d901      	bls.n	800a17e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a17a:	2303      	movs	r3, #3
 800a17c:	e1ec      	b.n	800a558 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a17e:	4b53      	ldr	r3, [pc, #332]	@ (800a2cc <HAL_RCC_OscConfig+0x26c>)
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a186:	2b00      	cmp	r3, #0
 800a188:	d1f0      	bne.n	800a16c <HAL_RCC_OscConfig+0x10c>
 800a18a:	e000      	b.n	800a18e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a18c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	f003 0302 	and.w	r3, r3, #2
 800a196:	2b00      	cmp	r3, #0
 800a198:	d063      	beq.n	800a262 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a19a:	4b4c      	ldr	r3, [pc, #304]	@ (800a2cc <HAL_RCC_OscConfig+0x26c>)
 800a19c:	685b      	ldr	r3, [r3, #4]
 800a19e:	f003 030c 	and.w	r3, r3, #12
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d00b      	beq.n	800a1be <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800a1a6:	4b49      	ldr	r3, [pc, #292]	@ (800a2cc <HAL_RCC_OscConfig+0x26c>)
 800a1a8:	685b      	ldr	r3, [r3, #4]
 800a1aa:	f003 030c 	and.w	r3, r3, #12
 800a1ae:	2b08      	cmp	r3, #8
 800a1b0:	d11c      	bne.n	800a1ec <HAL_RCC_OscConfig+0x18c>
 800a1b2:	4b46      	ldr	r3, [pc, #280]	@ (800a2cc <HAL_RCC_OscConfig+0x26c>)
 800a1b4:	685b      	ldr	r3, [r3, #4]
 800a1b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d116      	bne.n	800a1ec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a1be:	4b43      	ldr	r3, [pc, #268]	@ (800a2cc <HAL_RCC_OscConfig+0x26c>)
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	f003 0302 	and.w	r3, r3, #2
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d005      	beq.n	800a1d6 <HAL_RCC_OscConfig+0x176>
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	691b      	ldr	r3, [r3, #16]
 800a1ce:	2b01      	cmp	r3, #1
 800a1d0:	d001      	beq.n	800a1d6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800a1d2:	2301      	movs	r3, #1
 800a1d4:	e1c0      	b.n	800a558 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a1d6:	4b3d      	ldr	r3, [pc, #244]	@ (800a2cc <HAL_RCC_OscConfig+0x26c>)
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	695b      	ldr	r3, [r3, #20]
 800a1e2:	00db      	lsls	r3, r3, #3
 800a1e4:	4939      	ldr	r1, [pc, #228]	@ (800a2cc <HAL_RCC_OscConfig+0x26c>)
 800a1e6:	4313      	orrs	r3, r2
 800a1e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a1ea:	e03a      	b.n	800a262 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	691b      	ldr	r3, [r3, #16]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d020      	beq.n	800a236 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a1f4:	4b36      	ldr	r3, [pc, #216]	@ (800a2d0 <HAL_RCC_OscConfig+0x270>)
 800a1f6:	2201      	movs	r2, #1
 800a1f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a1fa:	f7ff f87d 	bl	80092f8 <HAL_GetTick>
 800a1fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a200:	e008      	b.n	800a214 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a202:	f7ff f879 	bl	80092f8 <HAL_GetTick>
 800a206:	4602      	mov	r2, r0
 800a208:	693b      	ldr	r3, [r7, #16]
 800a20a:	1ad3      	subs	r3, r2, r3
 800a20c:	2b02      	cmp	r3, #2
 800a20e:	d901      	bls.n	800a214 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800a210:	2303      	movs	r3, #3
 800a212:	e1a1      	b.n	800a558 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a214:	4b2d      	ldr	r3, [pc, #180]	@ (800a2cc <HAL_RCC_OscConfig+0x26c>)
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	f003 0302 	and.w	r3, r3, #2
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d0f0      	beq.n	800a202 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a220:	4b2a      	ldr	r3, [pc, #168]	@ (800a2cc <HAL_RCC_OscConfig+0x26c>)
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	695b      	ldr	r3, [r3, #20]
 800a22c:	00db      	lsls	r3, r3, #3
 800a22e:	4927      	ldr	r1, [pc, #156]	@ (800a2cc <HAL_RCC_OscConfig+0x26c>)
 800a230:	4313      	orrs	r3, r2
 800a232:	600b      	str	r3, [r1, #0]
 800a234:	e015      	b.n	800a262 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a236:	4b26      	ldr	r3, [pc, #152]	@ (800a2d0 <HAL_RCC_OscConfig+0x270>)
 800a238:	2200      	movs	r2, #0
 800a23a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a23c:	f7ff f85c 	bl	80092f8 <HAL_GetTick>
 800a240:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a242:	e008      	b.n	800a256 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a244:	f7ff f858 	bl	80092f8 <HAL_GetTick>
 800a248:	4602      	mov	r2, r0
 800a24a:	693b      	ldr	r3, [r7, #16]
 800a24c:	1ad3      	subs	r3, r2, r3
 800a24e:	2b02      	cmp	r3, #2
 800a250:	d901      	bls.n	800a256 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800a252:	2303      	movs	r3, #3
 800a254:	e180      	b.n	800a558 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a256:	4b1d      	ldr	r3, [pc, #116]	@ (800a2cc <HAL_RCC_OscConfig+0x26c>)
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	f003 0302 	and.w	r3, r3, #2
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d1f0      	bne.n	800a244 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	f003 0308 	and.w	r3, r3, #8
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d03a      	beq.n	800a2e4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	699b      	ldr	r3, [r3, #24]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d019      	beq.n	800a2aa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a276:	4b17      	ldr	r3, [pc, #92]	@ (800a2d4 <HAL_RCC_OscConfig+0x274>)
 800a278:	2201      	movs	r2, #1
 800a27a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a27c:	f7ff f83c 	bl	80092f8 <HAL_GetTick>
 800a280:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a282:	e008      	b.n	800a296 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a284:	f7ff f838 	bl	80092f8 <HAL_GetTick>
 800a288:	4602      	mov	r2, r0
 800a28a:	693b      	ldr	r3, [r7, #16]
 800a28c:	1ad3      	subs	r3, r2, r3
 800a28e:	2b02      	cmp	r3, #2
 800a290:	d901      	bls.n	800a296 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800a292:	2303      	movs	r3, #3
 800a294:	e160      	b.n	800a558 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a296:	4b0d      	ldr	r3, [pc, #52]	@ (800a2cc <HAL_RCC_OscConfig+0x26c>)
 800a298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a29a:	f003 0302 	and.w	r3, r3, #2
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d0f0      	beq.n	800a284 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800a2a2:	2001      	movs	r0, #1
 800a2a4:	f000 face 	bl	800a844 <RCC_Delay>
 800a2a8:	e01c      	b.n	800a2e4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a2aa:	4b0a      	ldr	r3, [pc, #40]	@ (800a2d4 <HAL_RCC_OscConfig+0x274>)
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a2b0:	f7ff f822 	bl	80092f8 <HAL_GetTick>
 800a2b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a2b6:	e00f      	b.n	800a2d8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a2b8:	f7ff f81e 	bl	80092f8 <HAL_GetTick>
 800a2bc:	4602      	mov	r2, r0
 800a2be:	693b      	ldr	r3, [r7, #16]
 800a2c0:	1ad3      	subs	r3, r2, r3
 800a2c2:	2b02      	cmp	r3, #2
 800a2c4:	d908      	bls.n	800a2d8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800a2c6:	2303      	movs	r3, #3
 800a2c8:	e146      	b.n	800a558 <HAL_RCC_OscConfig+0x4f8>
 800a2ca:	bf00      	nop
 800a2cc:	40021000 	.word	0x40021000
 800a2d0:	42420000 	.word	0x42420000
 800a2d4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a2d8:	4b92      	ldr	r3, [pc, #584]	@ (800a524 <HAL_RCC_OscConfig+0x4c4>)
 800a2da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2dc:	f003 0302 	and.w	r3, r3, #2
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d1e9      	bne.n	800a2b8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	f003 0304 	and.w	r3, r3, #4
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	f000 80a6 	beq.w	800a43e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a2f6:	4b8b      	ldr	r3, [pc, #556]	@ (800a524 <HAL_RCC_OscConfig+0x4c4>)
 800a2f8:	69db      	ldr	r3, [r3, #28]
 800a2fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d10d      	bne.n	800a31e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a302:	4b88      	ldr	r3, [pc, #544]	@ (800a524 <HAL_RCC_OscConfig+0x4c4>)
 800a304:	69db      	ldr	r3, [r3, #28]
 800a306:	4a87      	ldr	r2, [pc, #540]	@ (800a524 <HAL_RCC_OscConfig+0x4c4>)
 800a308:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a30c:	61d3      	str	r3, [r2, #28]
 800a30e:	4b85      	ldr	r3, [pc, #532]	@ (800a524 <HAL_RCC_OscConfig+0x4c4>)
 800a310:	69db      	ldr	r3, [r3, #28]
 800a312:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a316:	60bb      	str	r3, [r7, #8]
 800a318:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a31a:	2301      	movs	r3, #1
 800a31c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a31e:	4b82      	ldr	r3, [pc, #520]	@ (800a528 <HAL_RCC_OscConfig+0x4c8>)
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a326:	2b00      	cmp	r3, #0
 800a328:	d118      	bne.n	800a35c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a32a:	4b7f      	ldr	r3, [pc, #508]	@ (800a528 <HAL_RCC_OscConfig+0x4c8>)
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	4a7e      	ldr	r2, [pc, #504]	@ (800a528 <HAL_RCC_OscConfig+0x4c8>)
 800a330:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a334:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a336:	f7fe ffdf 	bl	80092f8 <HAL_GetTick>
 800a33a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a33c:	e008      	b.n	800a350 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a33e:	f7fe ffdb 	bl	80092f8 <HAL_GetTick>
 800a342:	4602      	mov	r2, r0
 800a344:	693b      	ldr	r3, [r7, #16]
 800a346:	1ad3      	subs	r3, r2, r3
 800a348:	2b64      	cmp	r3, #100	@ 0x64
 800a34a:	d901      	bls.n	800a350 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800a34c:	2303      	movs	r3, #3
 800a34e:	e103      	b.n	800a558 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a350:	4b75      	ldr	r3, [pc, #468]	@ (800a528 <HAL_RCC_OscConfig+0x4c8>)
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d0f0      	beq.n	800a33e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	68db      	ldr	r3, [r3, #12]
 800a360:	2b01      	cmp	r3, #1
 800a362:	d106      	bne.n	800a372 <HAL_RCC_OscConfig+0x312>
 800a364:	4b6f      	ldr	r3, [pc, #444]	@ (800a524 <HAL_RCC_OscConfig+0x4c4>)
 800a366:	6a1b      	ldr	r3, [r3, #32]
 800a368:	4a6e      	ldr	r2, [pc, #440]	@ (800a524 <HAL_RCC_OscConfig+0x4c4>)
 800a36a:	f043 0301 	orr.w	r3, r3, #1
 800a36e:	6213      	str	r3, [r2, #32]
 800a370:	e02d      	b.n	800a3ce <HAL_RCC_OscConfig+0x36e>
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	68db      	ldr	r3, [r3, #12]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d10c      	bne.n	800a394 <HAL_RCC_OscConfig+0x334>
 800a37a:	4b6a      	ldr	r3, [pc, #424]	@ (800a524 <HAL_RCC_OscConfig+0x4c4>)
 800a37c:	6a1b      	ldr	r3, [r3, #32]
 800a37e:	4a69      	ldr	r2, [pc, #420]	@ (800a524 <HAL_RCC_OscConfig+0x4c4>)
 800a380:	f023 0301 	bic.w	r3, r3, #1
 800a384:	6213      	str	r3, [r2, #32]
 800a386:	4b67      	ldr	r3, [pc, #412]	@ (800a524 <HAL_RCC_OscConfig+0x4c4>)
 800a388:	6a1b      	ldr	r3, [r3, #32]
 800a38a:	4a66      	ldr	r2, [pc, #408]	@ (800a524 <HAL_RCC_OscConfig+0x4c4>)
 800a38c:	f023 0304 	bic.w	r3, r3, #4
 800a390:	6213      	str	r3, [r2, #32]
 800a392:	e01c      	b.n	800a3ce <HAL_RCC_OscConfig+0x36e>
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	68db      	ldr	r3, [r3, #12]
 800a398:	2b05      	cmp	r3, #5
 800a39a:	d10c      	bne.n	800a3b6 <HAL_RCC_OscConfig+0x356>
 800a39c:	4b61      	ldr	r3, [pc, #388]	@ (800a524 <HAL_RCC_OscConfig+0x4c4>)
 800a39e:	6a1b      	ldr	r3, [r3, #32]
 800a3a0:	4a60      	ldr	r2, [pc, #384]	@ (800a524 <HAL_RCC_OscConfig+0x4c4>)
 800a3a2:	f043 0304 	orr.w	r3, r3, #4
 800a3a6:	6213      	str	r3, [r2, #32]
 800a3a8:	4b5e      	ldr	r3, [pc, #376]	@ (800a524 <HAL_RCC_OscConfig+0x4c4>)
 800a3aa:	6a1b      	ldr	r3, [r3, #32]
 800a3ac:	4a5d      	ldr	r2, [pc, #372]	@ (800a524 <HAL_RCC_OscConfig+0x4c4>)
 800a3ae:	f043 0301 	orr.w	r3, r3, #1
 800a3b2:	6213      	str	r3, [r2, #32]
 800a3b4:	e00b      	b.n	800a3ce <HAL_RCC_OscConfig+0x36e>
 800a3b6:	4b5b      	ldr	r3, [pc, #364]	@ (800a524 <HAL_RCC_OscConfig+0x4c4>)
 800a3b8:	6a1b      	ldr	r3, [r3, #32]
 800a3ba:	4a5a      	ldr	r2, [pc, #360]	@ (800a524 <HAL_RCC_OscConfig+0x4c4>)
 800a3bc:	f023 0301 	bic.w	r3, r3, #1
 800a3c0:	6213      	str	r3, [r2, #32]
 800a3c2:	4b58      	ldr	r3, [pc, #352]	@ (800a524 <HAL_RCC_OscConfig+0x4c4>)
 800a3c4:	6a1b      	ldr	r3, [r3, #32]
 800a3c6:	4a57      	ldr	r2, [pc, #348]	@ (800a524 <HAL_RCC_OscConfig+0x4c4>)
 800a3c8:	f023 0304 	bic.w	r3, r3, #4
 800a3cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	68db      	ldr	r3, [r3, #12]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d015      	beq.n	800a402 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a3d6:	f7fe ff8f 	bl	80092f8 <HAL_GetTick>
 800a3da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a3dc:	e00a      	b.n	800a3f4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a3de:	f7fe ff8b 	bl	80092f8 <HAL_GetTick>
 800a3e2:	4602      	mov	r2, r0
 800a3e4:	693b      	ldr	r3, [r7, #16]
 800a3e6:	1ad3      	subs	r3, r2, r3
 800a3e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a3ec:	4293      	cmp	r3, r2
 800a3ee:	d901      	bls.n	800a3f4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800a3f0:	2303      	movs	r3, #3
 800a3f2:	e0b1      	b.n	800a558 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a3f4:	4b4b      	ldr	r3, [pc, #300]	@ (800a524 <HAL_RCC_OscConfig+0x4c4>)
 800a3f6:	6a1b      	ldr	r3, [r3, #32]
 800a3f8:	f003 0302 	and.w	r3, r3, #2
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d0ee      	beq.n	800a3de <HAL_RCC_OscConfig+0x37e>
 800a400:	e014      	b.n	800a42c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a402:	f7fe ff79 	bl	80092f8 <HAL_GetTick>
 800a406:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a408:	e00a      	b.n	800a420 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a40a:	f7fe ff75 	bl	80092f8 <HAL_GetTick>
 800a40e:	4602      	mov	r2, r0
 800a410:	693b      	ldr	r3, [r7, #16]
 800a412:	1ad3      	subs	r3, r2, r3
 800a414:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a418:	4293      	cmp	r3, r2
 800a41a:	d901      	bls.n	800a420 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800a41c:	2303      	movs	r3, #3
 800a41e:	e09b      	b.n	800a558 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a420:	4b40      	ldr	r3, [pc, #256]	@ (800a524 <HAL_RCC_OscConfig+0x4c4>)
 800a422:	6a1b      	ldr	r3, [r3, #32]
 800a424:	f003 0302 	and.w	r3, r3, #2
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d1ee      	bne.n	800a40a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800a42c:	7dfb      	ldrb	r3, [r7, #23]
 800a42e:	2b01      	cmp	r3, #1
 800a430:	d105      	bne.n	800a43e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a432:	4b3c      	ldr	r3, [pc, #240]	@ (800a524 <HAL_RCC_OscConfig+0x4c4>)
 800a434:	69db      	ldr	r3, [r3, #28]
 800a436:	4a3b      	ldr	r2, [pc, #236]	@ (800a524 <HAL_RCC_OscConfig+0x4c4>)
 800a438:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a43c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	69db      	ldr	r3, [r3, #28]
 800a442:	2b00      	cmp	r3, #0
 800a444:	f000 8087 	beq.w	800a556 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a448:	4b36      	ldr	r3, [pc, #216]	@ (800a524 <HAL_RCC_OscConfig+0x4c4>)
 800a44a:	685b      	ldr	r3, [r3, #4]
 800a44c:	f003 030c 	and.w	r3, r3, #12
 800a450:	2b08      	cmp	r3, #8
 800a452:	d061      	beq.n	800a518 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	69db      	ldr	r3, [r3, #28]
 800a458:	2b02      	cmp	r3, #2
 800a45a:	d146      	bne.n	800a4ea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a45c:	4b33      	ldr	r3, [pc, #204]	@ (800a52c <HAL_RCC_OscConfig+0x4cc>)
 800a45e:	2200      	movs	r2, #0
 800a460:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a462:	f7fe ff49 	bl	80092f8 <HAL_GetTick>
 800a466:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a468:	e008      	b.n	800a47c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a46a:	f7fe ff45 	bl	80092f8 <HAL_GetTick>
 800a46e:	4602      	mov	r2, r0
 800a470:	693b      	ldr	r3, [r7, #16]
 800a472:	1ad3      	subs	r3, r2, r3
 800a474:	2b02      	cmp	r3, #2
 800a476:	d901      	bls.n	800a47c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800a478:	2303      	movs	r3, #3
 800a47a:	e06d      	b.n	800a558 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a47c:	4b29      	ldr	r3, [pc, #164]	@ (800a524 <HAL_RCC_OscConfig+0x4c4>)
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a484:	2b00      	cmp	r3, #0
 800a486:	d1f0      	bne.n	800a46a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	6a1b      	ldr	r3, [r3, #32]
 800a48c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a490:	d108      	bne.n	800a4a4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800a492:	4b24      	ldr	r3, [pc, #144]	@ (800a524 <HAL_RCC_OscConfig+0x4c4>)
 800a494:	685b      	ldr	r3, [r3, #4]
 800a496:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	689b      	ldr	r3, [r3, #8]
 800a49e:	4921      	ldr	r1, [pc, #132]	@ (800a524 <HAL_RCC_OscConfig+0x4c4>)
 800a4a0:	4313      	orrs	r3, r2
 800a4a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a4a4:	4b1f      	ldr	r3, [pc, #124]	@ (800a524 <HAL_RCC_OscConfig+0x4c4>)
 800a4a6:	685b      	ldr	r3, [r3, #4]
 800a4a8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	6a19      	ldr	r1, [r3, #32]
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4b4:	430b      	orrs	r3, r1
 800a4b6:	491b      	ldr	r1, [pc, #108]	@ (800a524 <HAL_RCC_OscConfig+0x4c4>)
 800a4b8:	4313      	orrs	r3, r2
 800a4ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a4bc:	4b1b      	ldr	r3, [pc, #108]	@ (800a52c <HAL_RCC_OscConfig+0x4cc>)
 800a4be:	2201      	movs	r2, #1
 800a4c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a4c2:	f7fe ff19 	bl	80092f8 <HAL_GetTick>
 800a4c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800a4c8:	e008      	b.n	800a4dc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a4ca:	f7fe ff15 	bl	80092f8 <HAL_GetTick>
 800a4ce:	4602      	mov	r2, r0
 800a4d0:	693b      	ldr	r3, [r7, #16]
 800a4d2:	1ad3      	subs	r3, r2, r3
 800a4d4:	2b02      	cmp	r3, #2
 800a4d6:	d901      	bls.n	800a4dc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800a4d8:	2303      	movs	r3, #3
 800a4da:	e03d      	b.n	800a558 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800a4dc:	4b11      	ldr	r3, [pc, #68]	@ (800a524 <HAL_RCC_OscConfig+0x4c4>)
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d0f0      	beq.n	800a4ca <HAL_RCC_OscConfig+0x46a>
 800a4e8:	e035      	b.n	800a556 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a4ea:	4b10      	ldr	r3, [pc, #64]	@ (800a52c <HAL_RCC_OscConfig+0x4cc>)
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a4f0:	f7fe ff02 	bl	80092f8 <HAL_GetTick>
 800a4f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a4f6:	e008      	b.n	800a50a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a4f8:	f7fe fefe 	bl	80092f8 <HAL_GetTick>
 800a4fc:	4602      	mov	r2, r0
 800a4fe:	693b      	ldr	r3, [r7, #16]
 800a500:	1ad3      	subs	r3, r2, r3
 800a502:	2b02      	cmp	r3, #2
 800a504:	d901      	bls.n	800a50a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800a506:	2303      	movs	r3, #3
 800a508:	e026      	b.n	800a558 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a50a:	4b06      	ldr	r3, [pc, #24]	@ (800a524 <HAL_RCC_OscConfig+0x4c4>)
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a512:	2b00      	cmp	r3, #0
 800a514:	d1f0      	bne.n	800a4f8 <HAL_RCC_OscConfig+0x498>
 800a516:	e01e      	b.n	800a556 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	69db      	ldr	r3, [r3, #28]
 800a51c:	2b01      	cmp	r3, #1
 800a51e:	d107      	bne.n	800a530 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800a520:	2301      	movs	r3, #1
 800a522:	e019      	b.n	800a558 <HAL_RCC_OscConfig+0x4f8>
 800a524:	40021000 	.word	0x40021000
 800a528:	40007000 	.word	0x40007000
 800a52c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800a530:	4b0b      	ldr	r3, [pc, #44]	@ (800a560 <HAL_RCC_OscConfig+0x500>)
 800a532:	685b      	ldr	r3, [r3, #4]
 800a534:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	6a1b      	ldr	r3, [r3, #32]
 800a540:	429a      	cmp	r2, r3
 800a542:	d106      	bne.n	800a552 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a54e:	429a      	cmp	r2, r3
 800a550:	d001      	beq.n	800a556 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800a552:	2301      	movs	r3, #1
 800a554:	e000      	b.n	800a558 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800a556:	2300      	movs	r3, #0
}
 800a558:	4618      	mov	r0, r3
 800a55a:	3718      	adds	r7, #24
 800a55c:	46bd      	mov	sp, r7
 800a55e:	bd80      	pop	{r7, pc}
 800a560:	40021000 	.word	0x40021000

0800a564 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b084      	sub	sp, #16
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
 800a56c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	2b00      	cmp	r3, #0
 800a572:	d101      	bne.n	800a578 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a574:	2301      	movs	r3, #1
 800a576:	e0d0      	b.n	800a71a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a578:	4b6a      	ldr	r3, [pc, #424]	@ (800a724 <HAL_RCC_ClockConfig+0x1c0>)
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	f003 0307 	and.w	r3, r3, #7
 800a580:	683a      	ldr	r2, [r7, #0]
 800a582:	429a      	cmp	r2, r3
 800a584:	d910      	bls.n	800a5a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a586:	4b67      	ldr	r3, [pc, #412]	@ (800a724 <HAL_RCC_ClockConfig+0x1c0>)
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	f023 0207 	bic.w	r2, r3, #7
 800a58e:	4965      	ldr	r1, [pc, #404]	@ (800a724 <HAL_RCC_ClockConfig+0x1c0>)
 800a590:	683b      	ldr	r3, [r7, #0]
 800a592:	4313      	orrs	r3, r2
 800a594:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a596:	4b63      	ldr	r3, [pc, #396]	@ (800a724 <HAL_RCC_ClockConfig+0x1c0>)
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	f003 0307 	and.w	r3, r3, #7
 800a59e:	683a      	ldr	r2, [r7, #0]
 800a5a0:	429a      	cmp	r2, r3
 800a5a2:	d001      	beq.n	800a5a8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800a5a4:	2301      	movs	r3, #1
 800a5a6:	e0b8      	b.n	800a71a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	f003 0302 	and.w	r3, r3, #2
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d020      	beq.n	800a5f6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	f003 0304 	and.w	r3, r3, #4
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d005      	beq.n	800a5cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a5c0:	4b59      	ldr	r3, [pc, #356]	@ (800a728 <HAL_RCC_ClockConfig+0x1c4>)
 800a5c2:	685b      	ldr	r3, [r3, #4]
 800a5c4:	4a58      	ldr	r2, [pc, #352]	@ (800a728 <HAL_RCC_ClockConfig+0x1c4>)
 800a5c6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800a5ca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	f003 0308 	and.w	r3, r3, #8
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d005      	beq.n	800a5e4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a5d8:	4b53      	ldr	r3, [pc, #332]	@ (800a728 <HAL_RCC_ClockConfig+0x1c4>)
 800a5da:	685b      	ldr	r3, [r3, #4]
 800a5dc:	4a52      	ldr	r2, [pc, #328]	@ (800a728 <HAL_RCC_ClockConfig+0x1c4>)
 800a5de:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800a5e2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a5e4:	4b50      	ldr	r3, [pc, #320]	@ (800a728 <HAL_RCC_ClockConfig+0x1c4>)
 800a5e6:	685b      	ldr	r3, [r3, #4]
 800a5e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	689b      	ldr	r3, [r3, #8]
 800a5f0:	494d      	ldr	r1, [pc, #308]	@ (800a728 <HAL_RCC_ClockConfig+0x1c4>)
 800a5f2:	4313      	orrs	r3, r2
 800a5f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	f003 0301 	and.w	r3, r3, #1
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d040      	beq.n	800a684 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	685b      	ldr	r3, [r3, #4]
 800a606:	2b01      	cmp	r3, #1
 800a608:	d107      	bne.n	800a61a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a60a:	4b47      	ldr	r3, [pc, #284]	@ (800a728 <HAL_RCC_ClockConfig+0x1c4>)
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a612:	2b00      	cmp	r3, #0
 800a614:	d115      	bne.n	800a642 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a616:	2301      	movs	r3, #1
 800a618:	e07f      	b.n	800a71a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	685b      	ldr	r3, [r3, #4]
 800a61e:	2b02      	cmp	r3, #2
 800a620:	d107      	bne.n	800a632 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a622:	4b41      	ldr	r3, [pc, #260]	@ (800a728 <HAL_RCC_ClockConfig+0x1c4>)
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d109      	bne.n	800a642 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a62e:	2301      	movs	r3, #1
 800a630:	e073      	b.n	800a71a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a632:	4b3d      	ldr	r3, [pc, #244]	@ (800a728 <HAL_RCC_ClockConfig+0x1c4>)
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	f003 0302 	and.w	r3, r3, #2
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d101      	bne.n	800a642 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a63e:	2301      	movs	r3, #1
 800a640:	e06b      	b.n	800a71a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a642:	4b39      	ldr	r3, [pc, #228]	@ (800a728 <HAL_RCC_ClockConfig+0x1c4>)
 800a644:	685b      	ldr	r3, [r3, #4]
 800a646:	f023 0203 	bic.w	r2, r3, #3
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	685b      	ldr	r3, [r3, #4]
 800a64e:	4936      	ldr	r1, [pc, #216]	@ (800a728 <HAL_RCC_ClockConfig+0x1c4>)
 800a650:	4313      	orrs	r3, r2
 800a652:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a654:	f7fe fe50 	bl	80092f8 <HAL_GetTick>
 800a658:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a65a:	e00a      	b.n	800a672 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a65c:	f7fe fe4c 	bl	80092f8 <HAL_GetTick>
 800a660:	4602      	mov	r2, r0
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	1ad3      	subs	r3, r2, r3
 800a666:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a66a:	4293      	cmp	r3, r2
 800a66c:	d901      	bls.n	800a672 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a66e:	2303      	movs	r3, #3
 800a670:	e053      	b.n	800a71a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a672:	4b2d      	ldr	r3, [pc, #180]	@ (800a728 <HAL_RCC_ClockConfig+0x1c4>)
 800a674:	685b      	ldr	r3, [r3, #4]
 800a676:	f003 020c 	and.w	r2, r3, #12
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	685b      	ldr	r3, [r3, #4]
 800a67e:	009b      	lsls	r3, r3, #2
 800a680:	429a      	cmp	r2, r3
 800a682:	d1eb      	bne.n	800a65c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a684:	4b27      	ldr	r3, [pc, #156]	@ (800a724 <HAL_RCC_ClockConfig+0x1c0>)
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	f003 0307 	and.w	r3, r3, #7
 800a68c:	683a      	ldr	r2, [r7, #0]
 800a68e:	429a      	cmp	r2, r3
 800a690:	d210      	bcs.n	800a6b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a692:	4b24      	ldr	r3, [pc, #144]	@ (800a724 <HAL_RCC_ClockConfig+0x1c0>)
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	f023 0207 	bic.w	r2, r3, #7
 800a69a:	4922      	ldr	r1, [pc, #136]	@ (800a724 <HAL_RCC_ClockConfig+0x1c0>)
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	4313      	orrs	r3, r2
 800a6a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a6a2:	4b20      	ldr	r3, [pc, #128]	@ (800a724 <HAL_RCC_ClockConfig+0x1c0>)
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	f003 0307 	and.w	r3, r3, #7
 800a6aa:	683a      	ldr	r2, [r7, #0]
 800a6ac:	429a      	cmp	r2, r3
 800a6ae:	d001      	beq.n	800a6b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800a6b0:	2301      	movs	r3, #1
 800a6b2:	e032      	b.n	800a71a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	f003 0304 	and.w	r3, r3, #4
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d008      	beq.n	800a6d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a6c0:	4b19      	ldr	r3, [pc, #100]	@ (800a728 <HAL_RCC_ClockConfig+0x1c4>)
 800a6c2:	685b      	ldr	r3, [r3, #4]
 800a6c4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	68db      	ldr	r3, [r3, #12]
 800a6cc:	4916      	ldr	r1, [pc, #88]	@ (800a728 <HAL_RCC_ClockConfig+0x1c4>)
 800a6ce:	4313      	orrs	r3, r2
 800a6d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	f003 0308 	and.w	r3, r3, #8
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d009      	beq.n	800a6f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800a6de:	4b12      	ldr	r3, [pc, #72]	@ (800a728 <HAL_RCC_ClockConfig+0x1c4>)
 800a6e0:	685b      	ldr	r3, [r3, #4]
 800a6e2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	691b      	ldr	r3, [r3, #16]
 800a6ea:	00db      	lsls	r3, r3, #3
 800a6ec:	490e      	ldr	r1, [pc, #56]	@ (800a728 <HAL_RCC_ClockConfig+0x1c4>)
 800a6ee:	4313      	orrs	r3, r2
 800a6f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a6f2:	f000 f821 	bl	800a738 <HAL_RCC_GetSysClockFreq>
 800a6f6:	4602      	mov	r2, r0
 800a6f8:	4b0b      	ldr	r3, [pc, #44]	@ (800a728 <HAL_RCC_ClockConfig+0x1c4>)
 800a6fa:	685b      	ldr	r3, [r3, #4]
 800a6fc:	091b      	lsrs	r3, r3, #4
 800a6fe:	f003 030f 	and.w	r3, r3, #15
 800a702:	490a      	ldr	r1, [pc, #40]	@ (800a72c <HAL_RCC_ClockConfig+0x1c8>)
 800a704:	5ccb      	ldrb	r3, [r1, r3]
 800a706:	fa22 f303 	lsr.w	r3, r2, r3
 800a70a:	4a09      	ldr	r2, [pc, #36]	@ (800a730 <HAL_RCC_ClockConfig+0x1cc>)
 800a70c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800a70e:	4b09      	ldr	r3, [pc, #36]	@ (800a734 <HAL_RCC_ClockConfig+0x1d0>)
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	4618      	mov	r0, r3
 800a714:	f7fe fdae 	bl	8009274 <HAL_InitTick>

  return HAL_OK;
 800a718:	2300      	movs	r3, #0
}
 800a71a:	4618      	mov	r0, r3
 800a71c:	3710      	adds	r7, #16
 800a71e:	46bd      	mov	sp, r7
 800a720:	bd80      	pop	{r7, pc}
 800a722:	bf00      	nop
 800a724:	40022000 	.word	0x40022000
 800a728:	40021000 	.word	0x40021000
 800a72c:	0800d59c 	.word	0x0800d59c
 800a730:	2000000c 	.word	0x2000000c
 800a734:	20000010 	.word	0x20000010

0800a738 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a738:	b480      	push	{r7}
 800a73a:	b087      	sub	sp, #28
 800a73c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800a73e:	2300      	movs	r3, #0
 800a740:	60fb      	str	r3, [r7, #12]
 800a742:	2300      	movs	r3, #0
 800a744:	60bb      	str	r3, [r7, #8]
 800a746:	2300      	movs	r3, #0
 800a748:	617b      	str	r3, [r7, #20]
 800a74a:	2300      	movs	r3, #0
 800a74c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800a74e:	2300      	movs	r3, #0
 800a750:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800a752:	4b1e      	ldr	r3, [pc, #120]	@ (800a7cc <HAL_RCC_GetSysClockFreq+0x94>)
 800a754:	685b      	ldr	r3, [r3, #4]
 800a756:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	f003 030c 	and.w	r3, r3, #12
 800a75e:	2b04      	cmp	r3, #4
 800a760:	d002      	beq.n	800a768 <HAL_RCC_GetSysClockFreq+0x30>
 800a762:	2b08      	cmp	r3, #8
 800a764:	d003      	beq.n	800a76e <HAL_RCC_GetSysClockFreq+0x36>
 800a766:	e027      	b.n	800a7b8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800a768:	4b19      	ldr	r3, [pc, #100]	@ (800a7d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800a76a:	613b      	str	r3, [r7, #16]
      break;
 800a76c:	e027      	b.n	800a7be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	0c9b      	lsrs	r3, r3, #18
 800a772:	f003 030f 	and.w	r3, r3, #15
 800a776:	4a17      	ldr	r2, [pc, #92]	@ (800a7d4 <HAL_RCC_GetSysClockFreq+0x9c>)
 800a778:	5cd3      	ldrb	r3, [r2, r3]
 800a77a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a782:	2b00      	cmp	r3, #0
 800a784:	d010      	beq.n	800a7a8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800a786:	4b11      	ldr	r3, [pc, #68]	@ (800a7cc <HAL_RCC_GetSysClockFreq+0x94>)
 800a788:	685b      	ldr	r3, [r3, #4]
 800a78a:	0c5b      	lsrs	r3, r3, #17
 800a78c:	f003 0301 	and.w	r3, r3, #1
 800a790:	4a11      	ldr	r2, [pc, #68]	@ (800a7d8 <HAL_RCC_GetSysClockFreq+0xa0>)
 800a792:	5cd3      	ldrb	r3, [r2, r3]
 800a794:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	4a0d      	ldr	r2, [pc, #52]	@ (800a7d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800a79a:	fb03 f202 	mul.w	r2, r3, r2
 800a79e:	68bb      	ldr	r3, [r7, #8]
 800a7a0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7a4:	617b      	str	r3, [r7, #20]
 800a7a6:	e004      	b.n	800a7b2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	4a0c      	ldr	r2, [pc, #48]	@ (800a7dc <HAL_RCC_GetSysClockFreq+0xa4>)
 800a7ac:	fb02 f303 	mul.w	r3, r2, r3
 800a7b0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800a7b2:	697b      	ldr	r3, [r7, #20]
 800a7b4:	613b      	str	r3, [r7, #16]
      break;
 800a7b6:	e002      	b.n	800a7be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800a7b8:	4b05      	ldr	r3, [pc, #20]	@ (800a7d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800a7ba:	613b      	str	r3, [r7, #16]
      break;
 800a7bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a7be:	693b      	ldr	r3, [r7, #16]
}
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	371c      	adds	r7, #28
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	bc80      	pop	{r7}
 800a7c8:	4770      	bx	lr
 800a7ca:	bf00      	nop
 800a7cc:	40021000 	.word	0x40021000
 800a7d0:	007a1200 	.word	0x007a1200
 800a7d4:	0800d5b4 	.word	0x0800d5b4
 800a7d8:	0800d5c4 	.word	0x0800d5c4
 800a7dc:	003d0900 	.word	0x003d0900

0800a7e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a7e0:	b480      	push	{r7}
 800a7e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a7e4:	4b02      	ldr	r3, [pc, #8]	@ (800a7f0 <HAL_RCC_GetHCLKFreq+0x10>)
 800a7e6:	681b      	ldr	r3, [r3, #0]
}
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	bc80      	pop	{r7}
 800a7ee:	4770      	bx	lr
 800a7f0:	2000000c 	.word	0x2000000c

0800a7f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a7f8:	f7ff fff2 	bl	800a7e0 <HAL_RCC_GetHCLKFreq>
 800a7fc:	4602      	mov	r2, r0
 800a7fe:	4b05      	ldr	r3, [pc, #20]	@ (800a814 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a800:	685b      	ldr	r3, [r3, #4]
 800a802:	0a1b      	lsrs	r3, r3, #8
 800a804:	f003 0307 	and.w	r3, r3, #7
 800a808:	4903      	ldr	r1, [pc, #12]	@ (800a818 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a80a:	5ccb      	ldrb	r3, [r1, r3]
 800a80c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a810:	4618      	mov	r0, r3
 800a812:	bd80      	pop	{r7, pc}
 800a814:	40021000 	.word	0x40021000
 800a818:	0800d5ac 	.word	0x0800d5ac

0800a81c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800a820:	f7ff ffde 	bl	800a7e0 <HAL_RCC_GetHCLKFreq>
 800a824:	4602      	mov	r2, r0
 800a826:	4b05      	ldr	r3, [pc, #20]	@ (800a83c <HAL_RCC_GetPCLK2Freq+0x20>)
 800a828:	685b      	ldr	r3, [r3, #4]
 800a82a:	0adb      	lsrs	r3, r3, #11
 800a82c:	f003 0307 	and.w	r3, r3, #7
 800a830:	4903      	ldr	r1, [pc, #12]	@ (800a840 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a832:	5ccb      	ldrb	r3, [r1, r3]
 800a834:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a838:	4618      	mov	r0, r3
 800a83a:	bd80      	pop	{r7, pc}
 800a83c:	40021000 	.word	0x40021000
 800a840:	0800d5ac 	.word	0x0800d5ac

0800a844 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800a844:	b480      	push	{r7}
 800a846:	b085      	sub	sp, #20
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800a84c:	4b0a      	ldr	r3, [pc, #40]	@ (800a878 <RCC_Delay+0x34>)
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	4a0a      	ldr	r2, [pc, #40]	@ (800a87c <RCC_Delay+0x38>)
 800a852:	fba2 2303 	umull	r2, r3, r2, r3
 800a856:	0a5b      	lsrs	r3, r3, #9
 800a858:	687a      	ldr	r2, [r7, #4]
 800a85a:	fb02 f303 	mul.w	r3, r2, r3
 800a85e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800a860:	bf00      	nop
  }
  while (Delay --);
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	1e5a      	subs	r2, r3, #1
 800a866:	60fa      	str	r2, [r7, #12]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d1f9      	bne.n	800a860 <RCC_Delay+0x1c>
}
 800a86c:	bf00      	nop
 800a86e:	bf00      	nop
 800a870:	3714      	adds	r7, #20
 800a872:	46bd      	mov	sp, r7
 800a874:	bc80      	pop	{r7}
 800a876:	4770      	bx	lr
 800a878:	2000000c 	.word	0x2000000c
 800a87c:	10624dd3 	.word	0x10624dd3

0800a880 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b082      	sub	sp, #8
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d101      	bne.n	800a892 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a88e:	2301      	movs	r3, #1
 800a890:	e041      	b.n	800a916 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a898:	b2db      	uxtb	r3, r3
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d106      	bne.n	800a8ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a8a6:	6878      	ldr	r0, [r7, #4]
 800a8a8:	f7fe fa8c 	bl	8008dc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2202      	movs	r2, #2
 800a8b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681a      	ldr	r2, [r3, #0]
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	3304      	adds	r3, #4
 800a8bc:	4619      	mov	r1, r3
 800a8be:	4610      	mov	r0, r2
 800a8c0:	f000 fcd2 	bl	800b268 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	2201      	movs	r2, #1
 800a8c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2201      	movs	r2, #1
 800a8d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2201      	movs	r2, #1
 800a8d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2201      	movs	r2, #1
 800a8e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2201      	movs	r2, #1
 800a8e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2201      	movs	r2, #1
 800a8f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2201      	movs	r2, #1
 800a8f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	2201      	movs	r2, #1
 800a900:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	2201      	movs	r2, #1
 800a908:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	2201      	movs	r2, #1
 800a910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a914:	2300      	movs	r3, #0
}
 800a916:	4618      	mov	r0, r3
 800a918:	3708      	adds	r7, #8
 800a91a:	46bd      	mov	sp, r7
 800a91c:	bd80      	pop	{r7, pc}

0800a91e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a91e:	b580      	push	{r7, lr}
 800a920:	b082      	sub	sp, #8
 800a922:	af00      	add	r7, sp, #0
 800a924:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d101      	bne.n	800a930 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a92c:	2301      	movs	r3, #1
 800a92e:	e041      	b.n	800a9b4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a936:	b2db      	uxtb	r3, r3
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d106      	bne.n	800a94a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	2200      	movs	r2, #0
 800a940:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a944:	6878      	ldr	r0, [r7, #4]
 800a946:	f000 f839 	bl	800a9bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	2202      	movs	r2, #2
 800a94e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681a      	ldr	r2, [r3, #0]
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	3304      	adds	r3, #4
 800a95a:	4619      	mov	r1, r3
 800a95c:	4610      	mov	r0, r2
 800a95e:	f000 fc83 	bl	800b268 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	2201      	movs	r2, #1
 800a966:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	2201      	movs	r2, #1
 800a96e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	2201      	movs	r2, #1
 800a976:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	2201      	movs	r2, #1
 800a97e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	2201      	movs	r2, #1
 800a986:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	2201      	movs	r2, #1
 800a98e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	2201      	movs	r2, #1
 800a996:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	2201      	movs	r2, #1
 800a99e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	2201      	movs	r2, #1
 800a9a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	2201      	movs	r2, #1
 800a9ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a9b2:	2300      	movs	r3, #0
}
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	3708      	adds	r7, #8
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	bd80      	pop	{r7, pc}

0800a9bc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a9bc:	b480      	push	{r7}
 800a9be:	b083      	sub	sp, #12
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a9c4:	bf00      	nop
 800a9c6:	370c      	adds	r7, #12
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	bc80      	pop	{r7}
 800a9cc:	4770      	bx	lr
	...

0800a9d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b084      	sub	sp, #16
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
 800a9d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a9da:	683b      	ldr	r3, [r7, #0]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d109      	bne.n	800a9f4 <HAL_TIM_PWM_Start+0x24>
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a9e6:	b2db      	uxtb	r3, r3
 800a9e8:	2b01      	cmp	r3, #1
 800a9ea:	bf14      	ite	ne
 800a9ec:	2301      	movne	r3, #1
 800a9ee:	2300      	moveq	r3, #0
 800a9f0:	b2db      	uxtb	r3, r3
 800a9f2:	e022      	b.n	800aa3a <HAL_TIM_PWM_Start+0x6a>
 800a9f4:	683b      	ldr	r3, [r7, #0]
 800a9f6:	2b04      	cmp	r3, #4
 800a9f8:	d109      	bne.n	800aa0e <HAL_TIM_PWM_Start+0x3e>
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800aa00:	b2db      	uxtb	r3, r3
 800aa02:	2b01      	cmp	r3, #1
 800aa04:	bf14      	ite	ne
 800aa06:	2301      	movne	r3, #1
 800aa08:	2300      	moveq	r3, #0
 800aa0a:	b2db      	uxtb	r3, r3
 800aa0c:	e015      	b.n	800aa3a <HAL_TIM_PWM_Start+0x6a>
 800aa0e:	683b      	ldr	r3, [r7, #0]
 800aa10:	2b08      	cmp	r3, #8
 800aa12:	d109      	bne.n	800aa28 <HAL_TIM_PWM_Start+0x58>
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800aa1a:	b2db      	uxtb	r3, r3
 800aa1c:	2b01      	cmp	r3, #1
 800aa1e:	bf14      	ite	ne
 800aa20:	2301      	movne	r3, #1
 800aa22:	2300      	moveq	r3, #0
 800aa24:	b2db      	uxtb	r3, r3
 800aa26:	e008      	b.n	800aa3a <HAL_TIM_PWM_Start+0x6a>
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800aa2e:	b2db      	uxtb	r3, r3
 800aa30:	2b01      	cmp	r3, #1
 800aa32:	bf14      	ite	ne
 800aa34:	2301      	movne	r3, #1
 800aa36:	2300      	moveq	r3, #0
 800aa38:	b2db      	uxtb	r3, r3
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d001      	beq.n	800aa42 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800aa3e:	2301      	movs	r3, #1
 800aa40:	e05e      	b.n	800ab00 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800aa42:	683b      	ldr	r3, [r7, #0]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d104      	bne.n	800aa52 <HAL_TIM_PWM_Start+0x82>
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	2202      	movs	r2, #2
 800aa4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800aa50:	e013      	b.n	800aa7a <HAL_TIM_PWM_Start+0xaa>
 800aa52:	683b      	ldr	r3, [r7, #0]
 800aa54:	2b04      	cmp	r3, #4
 800aa56:	d104      	bne.n	800aa62 <HAL_TIM_PWM_Start+0x92>
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2202      	movs	r2, #2
 800aa5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800aa60:	e00b      	b.n	800aa7a <HAL_TIM_PWM_Start+0xaa>
 800aa62:	683b      	ldr	r3, [r7, #0]
 800aa64:	2b08      	cmp	r3, #8
 800aa66:	d104      	bne.n	800aa72 <HAL_TIM_PWM_Start+0xa2>
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	2202      	movs	r2, #2
 800aa6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800aa70:	e003      	b.n	800aa7a <HAL_TIM_PWM_Start+0xaa>
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	2202      	movs	r2, #2
 800aa76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	2201      	movs	r2, #1
 800aa80:	6839      	ldr	r1, [r7, #0]
 800aa82:	4618      	mov	r0, r3
 800aa84:	f000 ff7d 	bl	800b982 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	4a1e      	ldr	r2, [pc, #120]	@ (800ab08 <HAL_TIM_PWM_Start+0x138>)
 800aa8e:	4293      	cmp	r3, r2
 800aa90:	d107      	bne.n	800aaa2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800aaa0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	4a18      	ldr	r2, [pc, #96]	@ (800ab08 <HAL_TIM_PWM_Start+0x138>)
 800aaa8:	4293      	cmp	r3, r2
 800aaaa:	d00e      	beq.n	800aaca <HAL_TIM_PWM_Start+0xfa>
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aab4:	d009      	beq.n	800aaca <HAL_TIM_PWM_Start+0xfa>
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	4a14      	ldr	r2, [pc, #80]	@ (800ab0c <HAL_TIM_PWM_Start+0x13c>)
 800aabc:	4293      	cmp	r3, r2
 800aabe:	d004      	beq.n	800aaca <HAL_TIM_PWM_Start+0xfa>
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	4a12      	ldr	r2, [pc, #72]	@ (800ab10 <HAL_TIM_PWM_Start+0x140>)
 800aac6:	4293      	cmp	r3, r2
 800aac8:	d111      	bne.n	800aaee <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	689b      	ldr	r3, [r3, #8]
 800aad0:	f003 0307 	and.w	r3, r3, #7
 800aad4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	2b06      	cmp	r3, #6
 800aada:	d010      	beq.n	800aafe <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	681a      	ldr	r2, [r3, #0]
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	f042 0201 	orr.w	r2, r2, #1
 800aaea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aaec:	e007      	b.n	800aafe <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	681a      	ldr	r2, [r3, #0]
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	f042 0201 	orr.w	r2, r2, #1
 800aafc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800aafe:	2300      	movs	r3, #0
}
 800ab00:	4618      	mov	r0, r3
 800ab02:	3710      	adds	r7, #16
 800ab04:	46bd      	mov	sp, r7
 800ab06:	bd80      	pop	{r7, pc}
 800ab08:	40012c00 	.word	0x40012c00
 800ab0c:	40000400 	.word	0x40000400
 800ab10:	40000800 	.word	0x40000800

0800ab14 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b082      	sub	sp, #8
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d101      	bne.n	800ab26 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800ab22:	2301      	movs	r3, #1
 800ab24:	e041      	b.n	800abaa <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ab2c:	b2db      	uxtb	r3, r3
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d106      	bne.n	800ab40 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	2200      	movs	r2, #0
 800ab36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800ab3a:	6878      	ldr	r0, [r7, #4]
 800ab3c:	f000 f839 	bl	800abb2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	2202      	movs	r2, #2
 800ab44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681a      	ldr	r2, [r3, #0]
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	3304      	adds	r3, #4
 800ab50:	4619      	mov	r1, r3
 800ab52:	4610      	mov	r0, r2
 800ab54:	f000 fb88 	bl	800b268 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	2201      	movs	r2, #1
 800ab5c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	2201      	movs	r2, #1
 800ab64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	2201      	movs	r2, #1
 800ab6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	2201      	movs	r2, #1
 800ab74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	2201      	movs	r2, #1
 800ab7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	2201      	movs	r2, #1
 800ab84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	2201      	movs	r2, #1
 800ab8c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	2201      	movs	r2, #1
 800ab94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	2201      	movs	r2, #1
 800ab9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	2201      	movs	r2, #1
 800aba4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800aba8:	2300      	movs	r3, #0
}
 800abaa:	4618      	mov	r0, r3
 800abac:	3708      	adds	r7, #8
 800abae:	46bd      	mov	sp, r7
 800abb0:	bd80      	pop	{r7, pc}

0800abb2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800abb2:	b480      	push	{r7}
 800abb4:	b083      	sub	sp, #12
 800abb6:	af00      	add	r7, sp, #0
 800abb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800abba:	bf00      	nop
 800abbc:	370c      	adds	r7, #12
 800abbe:	46bd      	mov	sp, r7
 800abc0:	bc80      	pop	{r7}
 800abc2:	4770      	bx	lr

0800abc4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b082      	sub	sp, #8
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	691b      	ldr	r3, [r3, #16]
 800abd2:	f003 0302 	and.w	r3, r3, #2
 800abd6:	2b02      	cmp	r3, #2
 800abd8:	d122      	bne.n	800ac20 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	68db      	ldr	r3, [r3, #12]
 800abe0:	f003 0302 	and.w	r3, r3, #2
 800abe4:	2b02      	cmp	r3, #2
 800abe6:	d11b      	bne.n	800ac20 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	f06f 0202 	mvn.w	r2, #2
 800abf0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	2201      	movs	r2, #1
 800abf6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	699b      	ldr	r3, [r3, #24]
 800abfe:	f003 0303 	and.w	r3, r3, #3
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d003      	beq.n	800ac0e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ac06:	6878      	ldr	r0, [r7, #4]
 800ac08:	f7fc ffc2 	bl	8007b90 <HAL_TIM_IC_CaptureCallback>
 800ac0c:	e005      	b.n	800ac1a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac0e:	6878      	ldr	r0, [r7, #4]
 800ac10:	f000 fb0e 	bl	800b230 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac14:	6878      	ldr	r0, [r7, #4]
 800ac16:	f000 fb14 	bl	800b242 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	691b      	ldr	r3, [r3, #16]
 800ac26:	f003 0304 	and.w	r3, r3, #4
 800ac2a:	2b04      	cmp	r3, #4
 800ac2c:	d122      	bne.n	800ac74 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	68db      	ldr	r3, [r3, #12]
 800ac34:	f003 0304 	and.w	r3, r3, #4
 800ac38:	2b04      	cmp	r3, #4
 800ac3a:	d11b      	bne.n	800ac74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	f06f 0204 	mvn.w	r2, #4
 800ac44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	2202      	movs	r2, #2
 800ac4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	699b      	ldr	r3, [r3, #24]
 800ac52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d003      	beq.n	800ac62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ac5a:	6878      	ldr	r0, [r7, #4]
 800ac5c:	f7fc ff98 	bl	8007b90 <HAL_TIM_IC_CaptureCallback>
 800ac60:	e005      	b.n	800ac6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac62:	6878      	ldr	r0, [r7, #4]
 800ac64:	f000 fae4 	bl	800b230 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac68:	6878      	ldr	r0, [r7, #4]
 800ac6a:	f000 faea 	bl	800b242 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	2200      	movs	r2, #0
 800ac72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	691b      	ldr	r3, [r3, #16]
 800ac7a:	f003 0308 	and.w	r3, r3, #8
 800ac7e:	2b08      	cmp	r3, #8
 800ac80:	d122      	bne.n	800acc8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	68db      	ldr	r3, [r3, #12]
 800ac88:	f003 0308 	and.w	r3, r3, #8
 800ac8c:	2b08      	cmp	r3, #8
 800ac8e:	d11b      	bne.n	800acc8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	f06f 0208 	mvn.w	r2, #8
 800ac98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	2204      	movs	r2, #4
 800ac9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	69db      	ldr	r3, [r3, #28]
 800aca6:	f003 0303 	and.w	r3, r3, #3
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d003      	beq.n	800acb6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800acae:	6878      	ldr	r0, [r7, #4]
 800acb0:	f7fc ff6e 	bl	8007b90 <HAL_TIM_IC_CaptureCallback>
 800acb4:	e005      	b.n	800acc2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800acb6:	6878      	ldr	r0, [r7, #4]
 800acb8:	f000 faba 	bl	800b230 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800acbc:	6878      	ldr	r0, [r7, #4]
 800acbe:	f000 fac0 	bl	800b242 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	2200      	movs	r2, #0
 800acc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	691b      	ldr	r3, [r3, #16]
 800acce:	f003 0310 	and.w	r3, r3, #16
 800acd2:	2b10      	cmp	r3, #16
 800acd4:	d122      	bne.n	800ad1c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	68db      	ldr	r3, [r3, #12]
 800acdc:	f003 0310 	and.w	r3, r3, #16
 800ace0:	2b10      	cmp	r3, #16
 800ace2:	d11b      	bne.n	800ad1c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	f06f 0210 	mvn.w	r2, #16
 800acec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	2208      	movs	r2, #8
 800acf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	69db      	ldr	r3, [r3, #28]
 800acfa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d003      	beq.n	800ad0a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ad02:	6878      	ldr	r0, [r7, #4]
 800ad04:	f7fc ff44 	bl	8007b90 <HAL_TIM_IC_CaptureCallback>
 800ad08:	e005      	b.n	800ad16 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad0a:	6878      	ldr	r0, [r7, #4]
 800ad0c:	f000 fa90 	bl	800b230 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad10:	6878      	ldr	r0, [r7, #4]
 800ad12:	f000 fa96 	bl	800b242 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	2200      	movs	r2, #0
 800ad1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	691b      	ldr	r3, [r3, #16]
 800ad22:	f003 0301 	and.w	r3, r3, #1
 800ad26:	2b01      	cmp	r3, #1
 800ad28:	d10e      	bne.n	800ad48 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	68db      	ldr	r3, [r3, #12]
 800ad30:	f003 0301 	and.w	r3, r3, #1
 800ad34:	2b01      	cmp	r3, #1
 800ad36:	d107      	bne.n	800ad48 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	f06f 0201 	mvn.w	r2, #1
 800ad40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ad42:	6878      	ldr	r0, [r7, #4]
 800ad44:	f000 fa6b 	bl	800b21e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	691b      	ldr	r3, [r3, #16]
 800ad4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ad52:	2b80      	cmp	r3, #128	@ 0x80
 800ad54:	d10e      	bne.n	800ad74 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	68db      	ldr	r3, [r3, #12]
 800ad5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ad60:	2b80      	cmp	r3, #128	@ 0x80
 800ad62:	d107      	bne.n	800ad74 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800ad6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ad6e:	6878      	ldr	r0, [r7, #4]
 800ad70:	f000 fee4 	bl	800bb3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	691b      	ldr	r3, [r3, #16]
 800ad7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad7e:	2b40      	cmp	r3, #64	@ 0x40
 800ad80:	d10e      	bne.n	800ada0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	68db      	ldr	r3, [r3, #12]
 800ad88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad8c:	2b40      	cmp	r3, #64	@ 0x40
 800ad8e:	d107      	bne.n	800ada0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800ad98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ad9a:	6878      	ldr	r0, [r7, #4]
 800ad9c:	f000 fa5a 	bl	800b254 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	691b      	ldr	r3, [r3, #16]
 800ada6:	f003 0320 	and.w	r3, r3, #32
 800adaa:	2b20      	cmp	r3, #32
 800adac:	d10e      	bne.n	800adcc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	68db      	ldr	r3, [r3, #12]
 800adb4:	f003 0320 	and.w	r3, r3, #32
 800adb8:	2b20      	cmp	r3, #32
 800adba:	d107      	bne.n	800adcc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	f06f 0220 	mvn.w	r2, #32
 800adc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800adc6:	6878      	ldr	r0, [r7, #4]
 800adc8:	f000 feaf 	bl	800bb2a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800adcc:	bf00      	nop
 800adce:	3708      	adds	r7, #8
 800add0:	46bd      	mov	sp, r7
 800add2:	bd80      	pop	{r7, pc}

0800add4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800add4:	b580      	push	{r7, lr}
 800add6:	b086      	sub	sp, #24
 800add8:	af00      	add	r7, sp, #0
 800adda:	60f8      	str	r0, [r7, #12]
 800addc:	60b9      	str	r1, [r7, #8]
 800adde:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ade0:	2300      	movs	r3, #0
 800ade2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800adea:	2b01      	cmp	r3, #1
 800adec:	d101      	bne.n	800adf2 <HAL_TIM_IC_ConfigChannel+0x1e>
 800adee:	2302      	movs	r3, #2
 800adf0:	e088      	b.n	800af04 <HAL_TIM_IC_ConfigChannel+0x130>
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	2201      	movs	r2, #1
 800adf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d11b      	bne.n	800ae38 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800ae04:	68bb      	ldr	r3, [r7, #8]
 800ae06:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800ae08:	68bb      	ldr	r3, [r7, #8]
 800ae0a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800ae0c:	68bb      	ldr	r3, [r7, #8]
 800ae0e:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800ae10:	f000 fc14 	bl	800b63c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	699a      	ldr	r2, [r3, #24]
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	f022 020c 	bic.w	r2, r2, #12
 800ae22:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	6999      	ldr	r1, [r3, #24]
 800ae2a:	68bb      	ldr	r3, [r7, #8]
 800ae2c:	689a      	ldr	r2, [r3, #8]
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	430a      	orrs	r2, r1
 800ae34:	619a      	str	r2, [r3, #24]
 800ae36:	e060      	b.n	800aefa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	2b04      	cmp	r3, #4
 800ae3c:	d11c      	bne.n	800ae78 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800ae42:	68bb      	ldr	r3, [r7, #8]
 800ae44:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800ae46:	68bb      	ldr	r3, [r7, #8]
 800ae48:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800ae4a:	68bb      	ldr	r3, [r7, #8]
 800ae4c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800ae4e:	f000 fc7d 	bl	800b74c <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	699a      	ldr	r2, [r3, #24]
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800ae60:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	6999      	ldr	r1, [r3, #24]
 800ae68:	68bb      	ldr	r3, [r7, #8]
 800ae6a:	689b      	ldr	r3, [r3, #8]
 800ae6c:	021a      	lsls	r2, r3, #8
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	430a      	orrs	r2, r1
 800ae74:	619a      	str	r2, [r3, #24]
 800ae76:	e040      	b.n	800aefa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	2b08      	cmp	r3, #8
 800ae7c:	d11b      	bne.n	800aeb6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800ae82:	68bb      	ldr	r3, [r7, #8]
 800ae84:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800ae86:	68bb      	ldr	r3, [r7, #8]
 800ae88:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800ae8a:	68bb      	ldr	r3, [r7, #8]
 800ae8c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800ae8e:	f000 fcc8 	bl	800b822 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	69da      	ldr	r2, [r3, #28]
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	f022 020c 	bic.w	r2, r2, #12
 800aea0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	69d9      	ldr	r1, [r3, #28]
 800aea8:	68bb      	ldr	r3, [r7, #8]
 800aeaa:	689a      	ldr	r2, [r3, #8]
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	430a      	orrs	r2, r1
 800aeb2:	61da      	str	r2, [r3, #28]
 800aeb4:	e021      	b.n	800aefa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	2b0c      	cmp	r3, #12
 800aeba:	d11c      	bne.n	800aef6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800aec0:	68bb      	ldr	r3, [r7, #8]
 800aec2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800aec4:	68bb      	ldr	r3, [r7, #8]
 800aec6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800aec8:	68bb      	ldr	r3, [r7, #8]
 800aeca:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800aecc:	f000 fce4 	bl	800b898 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	69da      	ldr	r2, [r3, #28]
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800aede:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	69d9      	ldr	r1, [r3, #28]
 800aee6:	68bb      	ldr	r3, [r7, #8]
 800aee8:	689b      	ldr	r3, [r3, #8]
 800aeea:	021a      	lsls	r2, r3, #8
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	430a      	orrs	r2, r1
 800aef2:	61da      	str	r2, [r3, #28]
 800aef4:	e001      	b.n	800aefa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800aef6:	2301      	movs	r3, #1
 800aef8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	2200      	movs	r2, #0
 800aefe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800af02:	7dfb      	ldrb	r3, [r7, #23]
}
 800af04:	4618      	mov	r0, r3
 800af06:	3718      	adds	r7, #24
 800af08:	46bd      	mov	sp, r7
 800af0a:	bd80      	pop	{r7, pc}

0800af0c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b086      	sub	sp, #24
 800af10:	af00      	add	r7, sp, #0
 800af12:	60f8      	str	r0, [r7, #12]
 800af14:	60b9      	str	r1, [r7, #8]
 800af16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800af18:	2300      	movs	r3, #0
 800af1a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800af22:	2b01      	cmp	r3, #1
 800af24:	d101      	bne.n	800af2a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800af26:	2302      	movs	r3, #2
 800af28:	e0ae      	b.n	800b088 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	2201      	movs	r2, #1
 800af2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	2b0c      	cmp	r3, #12
 800af36:	f200 809f 	bhi.w	800b078 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800af3a:	a201      	add	r2, pc, #4	@ (adr r2, 800af40 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800af3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af40:	0800af75 	.word	0x0800af75
 800af44:	0800b079 	.word	0x0800b079
 800af48:	0800b079 	.word	0x0800b079
 800af4c:	0800b079 	.word	0x0800b079
 800af50:	0800afb5 	.word	0x0800afb5
 800af54:	0800b079 	.word	0x0800b079
 800af58:	0800b079 	.word	0x0800b079
 800af5c:	0800b079 	.word	0x0800b079
 800af60:	0800aff7 	.word	0x0800aff7
 800af64:	0800b079 	.word	0x0800b079
 800af68:	0800b079 	.word	0x0800b079
 800af6c:	0800b079 	.word	0x0800b079
 800af70:	0800b037 	.word	0x0800b037
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	68b9      	ldr	r1, [r7, #8]
 800af7a:	4618      	mov	r0, r3
 800af7c:	f000 f9d6 	bl	800b32c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	699a      	ldr	r2, [r3, #24]
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	f042 0208 	orr.w	r2, r2, #8
 800af8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	699a      	ldr	r2, [r3, #24]
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	f022 0204 	bic.w	r2, r2, #4
 800af9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	6999      	ldr	r1, [r3, #24]
 800afa6:	68bb      	ldr	r3, [r7, #8]
 800afa8:	691a      	ldr	r2, [r3, #16]
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	430a      	orrs	r2, r1
 800afb0:	619a      	str	r2, [r3, #24]
      break;
 800afb2:	e064      	b.n	800b07e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	68b9      	ldr	r1, [r7, #8]
 800afba:	4618      	mov	r0, r3
 800afbc:	f000 fa1c 	bl	800b3f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	699a      	ldr	r2, [r3, #24]
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800afce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	699a      	ldr	r2, [r3, #24]
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800afde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	6999      	ldr	r1, [r3, #24]
 800afe6:	68bb      	ldr	r3, [r7, #8]
 800afe8:	691b      	ldr	r3, [r3, #16]
 800afea:	021a      	lsls	r2, r3, #8
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	430a      	orrs	r2, r1
 800aff2:	619a      	str	r2, [r3, #24]
      break;
 800aff4:	e043      	b.n	800b07e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	68b9      	ldr	r1, [r7, #8]
 800affc:	4618      	mov	r0, r3
 800affe:	f000 fa65 	bl	800b4cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	69da      	ldr	r2, [r3, #28]
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	f042 0208 	orr.w	r2, r2, #8
 800b010:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	69da      	ldr	r2, [r3, #28]
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	f022 0204 	bic.w	r2, r2, #4
 800b020:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	69d9      	ldr	r1, [r3, #28]
 800b028:	68bb      	ldr	r3, [r7, #8]
 800b02a:	691a      	ldr	r2, [r3, #16]
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	430a      	orrs	r2, r1
 800b032:	61da      	str	r2, [r3, #28]
      break;
 800b034:	e023      	b.n	800b07e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	68b9      	ldr	r1, [r7, #8]
 800b03c:	4618      	mov	r0, r3
 800b03e:	f000 faaf 	bl	800b5a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	69da      	ldr	r2, [r3, #28]
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b050:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	69da      	ldr	r2, [r3, #28]
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b060:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	69d9      	ldr	r1, [r3, #28]
 800b068:	68bb      	ldr	r3, [r7, #8]
 800b06a:	691b      	ldr	r3, [r3, #16]
 800b06c:	021a      	lsls	r2, r3, #8
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	430a      	orrs	r2, r1
 800b074:	61da      	str	r2, [r3, #28]
      break;
 800b076:	e002      	b.n	800b07e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800b078:	2301      	movs	r3, #1
 800b07a:	75fb      	strb	r3, [r7, #23]
      break;
 800b07c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	2200      	movs	r2, #0
 800b082:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b086:	7dfb      	ldrb	r3, [r7, #23]
}
 800b088:	4618      	mov	r0, r3
 800b08a:	3718      	adds	r7, #24
 800b08c:	46bd      	mov	sp, r7
 800b08e:	bd80      	pop	{r7, pc}

0800b090 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b084      	sub	sp, #16
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
 800b098:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b09a:	2300      	movs	r3, #0
 800b09c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b0a4:	2b01      	cmp	r3, #1
 800b0a6:	d101      	bne.n	800b0ac <HAL_TIM_ConfigClockSource+0x1c>
 800b0a8:	2302      	movs	r3, #2
 800b0aa:	e0b4      	b.n	800b216 <HAL_TIM_ConfigClockSource+0x186>
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	2201      	movs	r2, #1
 800b0b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	2202      	movs	r2, #2
 800b0b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	689b      	ldr	r3, [r3, #8]
 800b0c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b0c4:	68bb      	ldr	r3, [r7, #8]
 800b0c6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800b0ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b0cc:	68bb      	ldr	r3, [r7, #8]
 800b0ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b0d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	68ba      	ldr	r2, [r7, #8]
 800b0da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b0dc:	683b      	ldr	r3, [r7, #0]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b0e4:	d03e      	beq.n	800b164 <HAL_TIM_ConfigClockSource+0xd4>
 800b0e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b0ea:	f200 8087 	bhi.w	800b1fc <HAL_TIM_ConfigClockSource+0x16c>
 800b0ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b0f2:	f000 8086 	beq.w	800b202 <HAL_TIM_ConfigClockSource+0x172>
 800b0f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b0fa:	d87f      	bhi.n	800b1fc <HAL_TIM_ConfigClockSource+0x16c>
 800b0fc:	2b70      	cmp	r3, #112	@ 0x70
 800b0fe:	d01a      	beq.n	800b136 <HAL_TIM_ConfigClockSource+0xa6>
 800b100:	2b70      	cmp	r3, #112	@ 0x70
 800b102:	d87b      	bhi.n	800b1fc <HAL_TIM_ConfigClockSource+0x16c>
 800b104:	2b60      	cmp	r3, #96	@ 0x60
 800b106:	d050      	beq.n	800b1aa <HAL_TIM_ConfigClockSource+0x11a>
 800b108:	2b60      	cmp	r3, #96	@ 0x60
 800b10a:	d877      	bhi.n	800b1fc <HAL_TIM_ConfigClockSource+0x16c>
 800b10c:	2b50      	cmp	r3, #80	@ 0x50
 800b10e:	d03c      	beq.n	800b18a <HAL_TIM_ConfigClockSource+0xfa>
 800b110:	2b50      	cmp	r3, #80	@ 0x50
 800b112:	d873      	bhi.n	800b1fc <HAL_TIM_ConfigClockSource+0x16c>
 800b114:	2b40      	cmp	r3, #64	@ 0x40
 800b116:	d058      	beq.n	800b1ca <HAL_TIM_ConfigClockSource+0x13a>
 800b118:	2b40      	cmp	r3, #64	@ 0x40
 800b11a:	d86f      	bhi.n	800b1fc <HAL_TIM_ConfigClockSource+0x16c>
 800b11c:	2b30      	cmp	r3, #48	@ 0x30
 800b11e:	d064      	beq.n	800b1ea <HAL_TIM_ConfigClockSource+0x15a>
 800b120:	2b30      	cmp	r3, #48	@ 0x30
 800b122:	d86b      	bhi.n	800b1fc <HAL_TIM_ConfigClockSource+0x16c>
 800b124:	2b20      	cmp	r3, #32
 800b126:	d060      	beq.n	800b1ea <HAL_TIM_ConfigClockSource+0x15a>
 800b128:	2b20      	cmp	r3, #32
 800b12a:	d867      	bhi.n	800b1fc <HAL_TIM_ConfigClockSource+0x16c>
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d05c      	beq.n	800b1ea <HAL_TIM_ConfigClockSource+0x15a>
 800b130:	2b10      	cmp	r3, #16
 800b132:	d05a      	beq.n	800b1ea <HAL_TIM_ConfigClockSource+0x15a>
 800b134:	e062      	b.n	800b1fc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b13a:	683b      	ldr	r3, [r7, #0]
 800b13c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b13e:	683b      	ldr	r3, [r7, #0]
 800b140:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b142:	683b      	ldr	r3, [r7, #0]
 800b144:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b146:	f000 fbfd 	bl	800b944 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	689b      	ldr	r3, [r3, #8]
 800b150:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b152:	68bb      	ldr	r3, [r7, #8]
 800b154:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800b158:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	68ba      	ldr	r2, [r7, #8]
 800b160:	609a      	str	r2, [r3, #8]
      break;
 800b162:	e04f      	b.n	800b204 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b168:	683b      	ldr	r3, [r7, #0]
 800b16a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b16c:	683b      	ldr	r3, [r7, #0]
 800b16e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b170:	683b      	ldr	r3, [r7, #0]
 800b172:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b174:	f000 fbe6 	bl	800b944 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	689a      	ldr	r2, [r3, #8]
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b186:	609a      	str	r2, [r3, #8]
      break;
 800b188:	e03c      	b.n	800b204 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b18e:	683b      	ldr	r3, [r7, #0]
 800b190:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b192:	683b      	ldr	r3, [r7, #0]
 800b194:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b196:	461a      	mov	r2, r3
 800b198:	f000 faaa 	bl	800b6f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	2150      	movs	r1, #80	@ 0x50
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	f000 fbb4 	bl	800b910 <TIM_ITRx_SetConfig>
      break;
 800b1a8:	e02c      	b.n	800b204 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b1ae:	683b      	ldr	r3, [r7, #0]
 800b1b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b1b2:	683b      	ldr	r3, [r7, #0]
 800b1b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b1b6:	461a      	mov	r2, r3
 800b1b8:	f000 fb04 	bl	800b7c4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	2160      	movs	r1, #96	@ 0x60
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	f000 fba4 	bl	800b910 <TIM_ITRx_SetConfig>
      break;
 800b1c8:	e01c      	b.n	800b204 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b1ce:	683b      	ldr	r3, [r7, #0]
 800b1d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b1d2:	683b      	ldr	r3, [r7, #0]
 800b1d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b1d6:	461a      	mov	r2, r3
 800b1d8:	f000 fa8a 	bl	800b6f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	2140      	movs	r1, #64	@ 0x40
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	f000 fb94 	bl	800b910 <TIM_ITRx_SetConfig>
      break;
 800b1e8:	e00c      	b.n	800b204 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681a      	ldr	r2, [r3, #0]
 800b1ee:	683b      	ldr	r3, [r7, #0]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	4619      	mov	r1, r3
 800b1f4:	4610      	mov	r0, r2
 800b1f6:	f000 fb8b 	bl	800b910 <TIM_ITRx_SetConfig>
      break;
 800b1fa:	e003      	b.n	800b204 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b1fc:	2301      	movs	r3, #1
 800b1fe:	73fb      	strb	r3, [r7, #15]
      break;
 800b200:	e000      	b.n	800b204 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b202:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	2201      	movs	r2, #1
 800b208:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	2200      	movs	r2, #0
 800b210:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b214:	7bfb      	ldrb	r3, [r7, #15]
}
 800b216:	4618      	mov	r0, r3
 800b218:	3710      	adds	r7, #16
 800b21a:	46bd      	mov	sp, r7
 800b21c:	bd80      	pop	{r7, pc}

0800b21e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b21e:	b480      	push	{r7}
 800b220:	b083      	sub	sp, #12
 800b222:	af00      	add	r7, sp, #0
 800b224:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800b226:	bf00      	nop
 800b228:	370c      	adds	r7, #12
 800b22a:	46bd      	mov	sp, r7
 800b22c:	bc80      	pop	{r7}
 800b22e:	4770      	bx	lr

0800b230 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b230:	b480      	push	{r7}
 800b232:	b083      	sub	sp, #12
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b238:	bf00      	nop
 800b23a:	370c      	adds	r7, #12
 800b23c:	46bd      	mov	sp, r7
 800b23e:	bc80      	pop	{r7}
 800b240:	4770      	bx	lr

0800b242 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b242:	b480      	push	{r7}
 800b244:	b083      	sub	sp, #12
 800b246:	af00      	add	r7, sp, #0
 800b248:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b24a:	bf00      	nop
 800b24c:	370c      	adds	r7, #12
 800b24e:	46bd      	mov	sp, r7
 800b250:	bc80      	pop	{r7}
 800b252:	4770      	bx	lr

0800b254 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b254:	b480      	push	{r7}
 800b256:	b083      	sub	sp, #12
 800b258:	af00      	add	r7, sp, #0
 800b25a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b25c:	bf00      	nop
 800b25e:	370c      	adds	r7, #12
 800b260:	46bd      	mov	sp, r7
 800b262:	bc80      	pop	{r7}
 800b264:	4770      	bx	lr
	...

0800b268 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b268:	b480      	push	{r7}
 800b26a:	b085      	sub	sp, #20
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
 800b270:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	4a29      	ldr	r2, [pc, #164]	@ (800b320 <TIM_Base_SetConfig+0xb8>)
 800b27c:	4293      	cmp	r3, r2
 800b27e:	d00b      	beq.n	800b298 <TIM_Base_SetConfig+0x30>
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b286:	d007      	beq.n	800b298 <TIM_Base_SetConfig+0x30>
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	4a26      	ldr	r2, [pc, #152]	@ (800b324 <TIM_Base_SetConfig+0xbc>)
 800b28c:	4293      	cmp	r3, r2
 800b28e:	d003      	beq.n	800b298 <TIM_Base_SetConfig+0x30>
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	4a25      	ldr	r2, [pc, #148]	@ (800b328 <TIM_Base_SetConfig+0xc0>)
 800b294:	4293      	cmp	r3, r2
 800b296:	d108      	bne.n	800b2aa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b29e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b2a0:	683b      	ldr	r3, [r7, #0]
 800b2a2:	685b      	ldr	r3, [r3, #4]
 800b2a4:	68fa      	ldr	r2, [r7, #12]
 800b2a6:	4313      	orrs	r3, r2
 800b2a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	4a1c      	ldr	r2, [pc, #112]	@ (800b320 <TIM_Base_SetConfig+0xb8>)
 800b2ae:	4293      	cmp	r3, r2
 800b2b0:	d00b      	beq.n	800b2ca <TIM_Base_SetConfig+0x62>
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b2b8:	d007      	beq.n	800b2ca <TIM_Base_SetConfig+0x62>
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	4a19      	ldr	r2, [pc, #100]	@ (800b324 <TIM_Base_SetConfig+0xbc>)
 800b2be:	4293      	cmp	r3, r2
 800b2c0:	d003      	beq.n	800b2ca <TIM_Base_SetConfig+0x62>
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	4a18      	ldr	r2, [pc, #96]	@ (800b328 <TIM_Base_SetConfig+0xc0>)
 800b2c6:	4293      	cmp	r3, r2
 800b2c8:	d108      	bne.n	800b2dc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b2d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b2d2:	683b      	ldr	r3, [r7, #0]
 800b2d4:	68db      	ldr	r3, [r3, #12]
 800b2d6:	68fa      	ldr	r2, [r7, #12]
 800b2d8:	4313      	orrs	r3, r2
 800b2da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b2e2:	683b      	ldr	r3, [r7, #0]
 800b2e4:	695b      	ldr	r3, [r3, #20]
 800b2e6:	4313      	orrs	r3, r2
 800b2e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	68fa      	ldr	r2, [r7, #12]
 800b2ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b2f0:	683b      	ldr	r3, [r7, #0]
 800b2f2:	689a      	ldr	r2, [r3, #8]
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b2f8:	683b      	ldr	r3, [r7, #0]
 800b2fa:	681a      	ldr	r2, [r3, #0]
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	4a07      	ldr	r2, [pc, #28]	@ (800b320 <TIM_Base_SetConfig+0xb8>)
 800b304:	4293      	cmp	r3, r2
 800b306:	d103      	bne.n	800b310 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b308:	683b      	ldr	r3, [r7, #0]
 800b30a:	691a      	ldr	r2, [r3, #16]
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	2201      	movs	r2, #1
 800b314:	615a      	str	r2, [r3, #20]
}
 800b316:	bf00      	nop
 800b318:	3714      	adds	r7, #20
 800b31a:	46bd      	mov	sp, r7
 800b31c:	bc80      	pop	{r7}
 800b31e:	4770      	bx	lr
 800b320:	40012c00 	.word	0x40012c00
 800b324:	40000400 	.word	0x40000400
 800b328:	40000800 	.word	0x40000800

0800b32c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b32c:	b480      	push	{r7}
 800b32e:	b087      	sub	sp, #28
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
 800b334:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	6a1b      	ldr	r3, [r3, #32]
 800b33a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	6a1b      	ldr	r3, [r3, #32]
 800b340:	f023 0201 	bic.w	r2, r3, #1
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	685b      	ldr	r3, [r3, #4]
 800b34c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	699b      	ldr	r3, [r3, #24]
 800b352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b35a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	f023 0303 	bic.w	r3, r3, #3
 800b362:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b364:	683b      	ldr	r3, [r7, #0]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	68fa      	ldr	r2, [r7, #12]
 800b36a:	4313      	orrs	r3, r2
 800b36c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b36e:	697b      	ldr	r3, [r7, #20]
 800b370:	f023 0302 	bic.w	r3, r3, #2
 800b374:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b376:	683b      	ldr	r3, [r7, #0]
 800b378:	689b      	ldr	r3, [r3, #8]
 800b37a:	697a      	ldr	r2, [r7, #20]
 800b37c:	4313      	orrs	r3, r2
 800b37e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	4a1c      	ldr	r2, [pc, #112]	@ (800b3f4 <TIM_OC1_SetConfig+0xc8>)
 800b384:	4293      	cmp	r3, r2
 800b386:	d10c      	bne.n	800b3a2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b388:	697b      	ldr	r3, [r7, #20]
 800b38a:	f023 0308 	bic.w	r3, r3, #8
 800b38e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b390:	683b      	ldr	r3, [r7, #0]
 800b392:	68db      	ldr	r3, [r3, #12]
 800b394:	697a      	ldr	r2, [r7, #20]
 800b396:	4313      	orrs	r3, r2
 800b398:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b39a:	697b      	ldr	r3, [r7, #20]
 800b39c:	f023 0304 	bic.w	r3, r3, #4
 800b3a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	4a13      	ldr	r2, [pc, #76]	@ (800b3f4 <TIM_OC1_SetConfig+0xc8>)
 800b3a6:	4293      	cmp	r3, r2
 800b3a8:	d111      	bne.n	800b3ce <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b3aa:	693b      	ldr	r3, [r7, #16]
 800b3ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b3b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b3b2:	693b      	ldr	r3, [r7, #16]
 800b3b4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b3b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b3ba:	683b      	ldr	r3, [r7, #0]
 800b3bc:	695b      	ldr	r3, [r3, #20]
 800b3be:	693a      	ldr	r2, [r7, #16]
 800b3c0:	4313      	orrs	r3, r2
 800b3c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b3c4:	683b      	ldr	r3, [r7, #0]
 800b3c6:	699b      	ldr	r3, [r3, #24]
 800b3c8:	693a      	ldr	r2, [r7, #16]
 800b3ca:	4313      	orrs	r3, r2
 800b3cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	693a      	ldr	r2, [r7, #16]
 800b3d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	68fa      	ldr	r2, [r7, #12]
 800b3d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b3da:	683b      	ldr	r3, [r7, #0]
 800b3dc:	685a      	ldr	r2, [r3, #4]
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	697a      	ldr	r2, [r7, #20]
 800b3e6:	621a      	str	r2, [r3, #32]
}
 800b3e8:	bf00      	nop
 800b3ea:	371c      	adds	r7, #28
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	bc80      	pop	{r7}
 800b3f0:	4770      	bx	lr
 800b3f2:	bf00      	nop
 800b3f4:	40012c00 	.word	0x40012c00

0800b3f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b3f8:	b480      	push	{r7}
 800b3fa:	b087      	sub	sp, #28
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
 800b400:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	6a1b      	ldr	r3, [r3, #32]
 800b406:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	6a1b      	ldr	r3, [r3, #32]
 800b40c:	f023 0210 	bic.w	r2, r3, #16
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	685b      	ldr	r3, [r3, #4]
 800b418:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	699b      	ldr	r3, [r3, #24]
 800b41e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b426:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b42e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b430:	683b      	ldr	r3, [r7, #0]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	021b      	lsls	r3, r3, #8
 800b436:	68fa      	ldr	r2, [r7, #12]
 800b438:	4313      	orrs	r3, r2
 800b43a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b43c:	697b      	ldr	r3, [r7, #20]
 800b43e:	f023 0320 	bic.w	r3, r3, #32
 800b442:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b444:	683b      	ldr	r3, [r7, #0]
 800b446:	689b      	ldr	r3, [r3, #8]
 800b448:	011b      	lsls	r3, r3, #4
 800b44a:	697a      	ldr	r2, [r7, #20]
 800b44c:	4313      	orrs	r3, r2
 800b44e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	4a1d      	ldr	r2, [pc, #116]	@ (800b4c8 <TIM_OC2_SetConfig+0xd0>)
 800b454:	4293      	cmp	r3, r2
 800b456:	d10d      	bne.n	800b474 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b458:	697b      	ldr	r3, [r7, #20]
 800b45a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b45e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b460:	683b      	ldr	r3, [r7, #0]
 800b462:	68db      	ldr	r3, [r3, #12]
 800b464:	011b      	lsls	r3, r3, #4
 800b466:	697a      	ldr	r2, [r7, #20]
 800b468:	4313      	orrs	r3, r2
 800b46a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b46c:	697b      	ldr	r3, [r7, #20]
 800b46e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b472:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	4a14      	ldr	r2, [pc, #80]	@ (800b4c8 <TIM_OC2_SetConfig+0xd0>)
 800b478:	4293      	cmp	r3, r2
 800b47a:	d113      	bne.n	800b4a4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b47c:	693b      	ldr	r3, [r7, #16]
 800b47e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b482:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b484:	693b      	ldr	r3, [r7, #16]
 800b486:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b48a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b48c:	683b      	ldr	r3, [r7, #0]
 800b48e:	695b      	ldr	r3, [r3, #20]
 800b490:	009b      	lsls	r3, r3, #2
 800b492:	693a      	ldr	r2, [r7, #16]
 800b494:	4313      	orrs	r3, r2
 800b496:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b498:	683b      	ldr	r3, [r7, #0]
 800b49a:	699b      	ldr	r3, [r3, #24]
 800b49c:	009b      	lsls	r3, r3, #2
 800b49e:	693a      	ldr	r2, [r7, #16]
 800b4a0:	4313      	orrs	r3, r2
 800b4a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	693a      	ldr	r2, [r7, #16]
 800b4a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	68fa      	ldr	r2, [r7, #12]
 800b4ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b4b0:	683b      	ldr	r3, [r7, #0]
 800b4b2:	685a      	ldr	r2, [r3, #4]
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	697a      	ldr	r2, [r7, #20]
 800b4bc:	621a      	str	r2, [r3, #32]
}
 800b4be:	bf00      	nop
 800b4c0:	371c      	adds	r7, #28
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	bc80      	pop	{r7}
 800b4c6:	4770      	bx	lr
 800b4c8:	40012c00 	.word	0x40012c00

0800b4cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b4cc:	b480      	push	{r7}
 800b4ce:	b087      	sub	sp, #28
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6078      	str	r0, [r7, #4]
 800b4d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	6a1b      	ldr	r3, [r3, #32]
 800b4da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	6a1b      	ldr	r3, [r3, #32]
 800b4e0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	685b      	ldr	r3, [r3, #4]
 800b4ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	69db      	ldr	r3, [r3, #28]
 800b4f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b4fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	f023 0303 	bic.w	r3, r3, #3
 800b502:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b504:	683b      	ldr	r3, [r7, #0]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	68fa      	ldr	r2, [r7, #12]
 800b50a:	4313      	orrs	r3, r2
 800b50c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b50e:	697b      	ldr	r3, [r7, #20]
 800b510:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b514:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b516:	683b      	ldr	r3, [r7, #0]
 800b518:	689b      	ldr	r3, [r3, #8]
 800b51a:	021b      	lsls	r3, r3, #8
 800b51c:	697a      	ldr	r2, [r7, #20]
 800b51e:	4313      	orrs	r3, r2
 800b520:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	4a1d      	ldr	r2, [pc, #116]	@ (800b59c <TIM_OC3_SetConfig+0xd0>)
 800b526:	4293      	cmp	r3, r2
 800b528:	d10d      	bne.n	800b546 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b52a:	697b      	ldr	r3, [r7, #20]
 800b52c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b530:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b532:	683b      	ldr	r3, [r7, #0]
 800b534:	68db      	ldr	r3, [r3, #12]
 800b536:	021b      	lsls	r3, r3, #8
 800b538:	697a      	ldr	r2, [r7, #20]
 800b53a:	4313      	orrs	r3, r2
 800b53c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b53e:	697b      	ldr	r3, [r7, #20]
 800b540:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b544:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	4a14      	ldr	r2, [pc, #80]	@ (800b59c <TIM_OC3_SetConfig+0xd0>)
 800b54a:	4293      	cmp	r3, r2
 800b54c:	d113      	bne.n	800b576 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b54e:	693b      	ldr	r3, [r7, #16]
 800b550:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b554:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b556:	693b      	ldr	r3, [r7, #16]
 800b558:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b55c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b55e:	683b      	ldr	r3, [r7, #0]
 800b560:	695b      	ldr	r3, [r3, #20]
 800b562:	011b      	lsls	r3, r3, #4
 800b564:	693a      	ldr	r2, [r7, #16]
 800b566:	4313      	orrs	r3, r2
 800b568:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b56a:	683b      	ldr	r3, [r7, #0]
 800b56c:	699b      	ldr	r3, [r3, #24]
 800b56e:	011b      	lsls	r3, r3, #4
 800b570:	693a      	ldr	r2, [r7, #16]
 800b572:	4313      	orrs	r3, r2
 800b574:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	693a      	ldr	r2, [r7, #16]
 800b57a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	68fa      	ldr	r2, [r7, #12]
 800b580:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b582:	683b      	ldr	r3, [r7, #0]
 800b584:	685a      	ldr	r2, [r3, #4]
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	697a      	ldr	r2, [r7, #20]
 800b58e:	621a      	str	r2, [r3, #32]
}
 800b590:	bf00      	nop
 800b592:	371c      	adds	r7, #28
 800b594:	46bd      	mov	sp, r7
 800b596:	bc80      	pop	{r7}
 800b598:	4770      	bx	lr
 800b59a:	bf00      	nop
 800b59c:	40012c00 	.word	0x40012c00

0800b5a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b5a0:	b480      	push	{r7}
 800b5a2:	b087      	sub	sp, #28
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	6078      	str	r0, [r7, #4]
 800b5a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	6a1b      	ldr	r3, [r3, #32]
 800b5ae:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	6a1b      	ldr	r3, [r3, #32]
 800b5b4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	685b      	ldr	r3, [r3, #4]
 800b5c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	69db      	ldr	r3, [r3, #28]
 800b5c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b5ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b5d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b5d8:	683b      	ldr	r3, [r7, #0]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	021b      	lsls	r3, r3, #8
 800b5de:	68fa      	ldr	r2, [r7, #12]
 800b5e0:	4313      	orrs	r3, r2
 800b5e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b5e4:	693b      	ldr	r3, [r7, #16]
 800b5e6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b5ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b5ec:	683b      	ldr	r3, [r7, #0]
 800b5ee:	689b      	ldr	r3, [r3, #8]
 800b5f0:	031b      	lsls	r3, r3, #12
 800b5f2:	693a      	ldr	r2, [r7, #16]
 800b5f4:	4313      	orrs	r3, r2
 800b5f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	4a0f      	ldr	r2, [pc, #60]	@ (800b638 <TIM_OC4_SetConfig+0x98>)
 800b5fc:	4293      	cmp	r3, r2
 800b5fe:	d109      	bne.n	800b614 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b600:	697b      	ldr	r3, [r7, #20]
 800b602:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b606:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b608:	683b      	ldr	r3, [r7, #0]
 800b60a:	695b      	ldr	r3, [r3, #20]
 800b60c:	019b      	lsls	r3, r3, #6
 800b60e:	697a      	ldr	r2, [r7, #20]
 800b610:	4313      	orrs	r3, r2
 800b612:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	697a      	ldr	r2, [r7, #20]
 800b618:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	68fa      	ldr	r2, [r7, #12]
 800b61e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b620:	683b      	ldr	r3, [r7, #0]
 800b622:	685a      	ldr	r2, [r3, #4]
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	693a      	ldr	r2, [r7, #16]
 800b62c:	621a      	str	r2, [r3, #32]
}
 800b62e:	bf00      	nop
 800b630:	371c      	adds	r7, #28
 800b632:	46bd      	mov	sp, r7
 800b634:	bc80      	pop	{r7}
 800b636:	4770      	bx	lr
 800b638:	40012c00 	.word	0x40012c00

0800b63c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800b63c:	b480      	push	{r7}
 800b63e:	b087      	sub	sp, #28
 800b640:	af00      	add	r7, sp, #0
 800b642:	60f8      	str	r0, [r7, #12]
 800b644:	60b9      	str	r1, [r7, #8]
 800b646:	607a      	str	r2, [r7, #4]
 800b648:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	6a1b      	ldr	r3, [r3, #32]
 800b64e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	6a1b      	ldr	r3, [r3, #32]
 800b654:	f023 0201 	bic.w	r2, r3, #1
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	699b      	ldr	r3, [r3, #24]
 800b660:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	4a1f      	ldr	r2, [pc, #124]	@ (800b6e4 <TIM_TI1_SetConfig+0xa8>)
 800b666:	4293      	cmp	r3, r2
 800b668:	d00b      	beq.n	800b682 <TIM_TI1_SetConfig+0x46>
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b670:	d007      	beq.n	800b682 <TIM_TI1_SetConfig+0x46>
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	4a1c      	ldr	r2, [pc, #112]	@ (800b6e8 <TIM_TI1_SetConfig+0xac>)
 800b676:	4293      	cmp	r3, r2
 800b678:	d003      	beq.n	800b682 <TIM_TI1_SetConfig+0x46>
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	4a1b      	ldr	r2, [pc, #108]	@ (800b6ec <TIM_TI1_SetConfig+0xb0>)
 800b67e:	4293      	cmp	r3, r2
 800b680:	d101      	bne.n	800b686 <TIM_TI1_SetConfig+0x4a>
 800b682:	2301      	movs	r3, #1
 800b684:	e000      	b.n	800b688 <TIM_TI1_SetConfig+0x4c>
 800b686:	2300      	movs	r3, #0
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d008      	beq.n	800b69e <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800b68c:	697b      	ldr	r3, [r7, #20]
 800b68e:	f023 0303 	bic.w	r3, r3, #3
 800b692:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800b694:	697a      	ldr	r2, [r7, #20]
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	4313      	orrs	r3, r2
 800b69a:	617b      	str	r3, [r7, #20]
 800b69c:	e003      	b.n	800b6a6 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800b69e:	697b      	ldr	r3, [r7, #20]
 800b6a0:	f043 0301 	orr.w	r3, r3, #1
 800b6a4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b6a6:	697b      	ldr	r3, [r7, #20]
 800b6a8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b6ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800b6ae:	683b      	ldr	r3, [r7, #0]
 800b6b0:	011b      	lsls	r3, r3, #4
 800b6b2:	b2db      	uxtb	r3, r3
 800b6b4:	697a      	ldr	r2, [r7, #20]
 800b6b6:	4313      	orrs	r3, r2
 800b6b8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b6ba:	693b      	ldr	r3, [r7, #16]
 800b6bc:	f023 030a 	bic.w	r3, r3, #10
 800b6c0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800b6c2:	68bb      	ldr	r3, [r7, #8]
 800b6c4:	f003 030a 	and.w	r3, r3, #10
 800b6c8:	693a      	ldr	r2, [r7, #16]
 800b6ca:	4313      	orrs	r3, r2
 800b6cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	697a      	ldr	r2, [r7, #20]
 800b6d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	693a      	ldr	r2, [r7, #16]
 800b6d8:	621a      	str	r2, [r3, #32]
}
 800b6da:	bf00      	nop
 800b6dc:	371c      	adds	r7, #28
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	bc80      	pop	{r7}
 800b6e2:	4770      	bx	lr
 800b6e4:	40012c00 	.word	0x40012c00
 800b6e8:	40000400 	.word	0x40000400
 800b6ec:	40000800 	.word	0x40000800

0800b6f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b6f0:	b480      	push	{r7}
 800b6f2:	b087      	sub	sp, #28
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	60f8      	str	r0, [r7, #12]
 800b6f8:	60b9      	str	r1, [r7, #8]
 800b6fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	6a1b      	ldr	r3, [r3, #32]
 800b700:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	6a1b      	ldr	r3, [r3, #32]
 800b706:	f023 0201 	bic.w	r2, r3, #1
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	699b      	ldr	r3, [r3, #24]
 800b712:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b714:	693b      	ldr	r3, [r7, #16]
 800b716:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b71a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	011b      	lsls	r3, r3, #4
 800b720:	693a      	ldr	r2, [r7, #16]
 800b722:	4313      	orrs	r3, r2
 800b724:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b726:	697b      	ldr	r3, [r7, #20]
 800b728:	f023 030a 	bic.w	r3, r3, #10
 800b72c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b72e:	697a      	ldr	r2, [r7, #20]
 800b730:	68bb      	ldr	r3, [r7, #8]
 800b732:	4313      	orrs	r3, r2
 800b734:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	693a      	ldr	r2, [r7, #16]
 800b73a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	697a      	ldr	r2, [r7, #20]
 800b740:	621a      	str	r2, [r3, #32]
}
 800b742:	bf00      	nop
 800b744:	371c      	adds	r7, #28
 800b746:	46bd      	mov	sp, r7
 800b748:	bc80      	pop	{r7}
 800b74a:	4770      	bx	lr

0800b74c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b74c:	b480      	push	{r7}
 800b74e:	b087      	sub	sp, #28
 800b750:	af00      	add	r7, sp, #0
 800b752:	60f8      	str	r0, [r7, #12]
 800b754:	60b9      	str	r1, [r7, #8]
 800b756:	607a      	str	r2, [r7, #4]
 800b758:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	6a1b      	ldr	r3, [r3, #32]
 800b75e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	6a1b      	ldr	r3, [r3, #32]
 800b764:	f023 0210 	bic.w	r2, r3, #16
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	699b      	ldr	r3, [r3, #24]
 800b770:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800b772:	693b      	ldr	r3, [r7, #16]
 800b774:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b778:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	021b      	lsls	r3, r3, #8
 800b77e:	693a      	ldr	r2, [r7, #16]
 800b780:	4313      	orrs	r3, r2
 800b782:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b784:	693b      	ldr	r3, [r7, #16]
 800b786:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b78a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800b78c:	683b      	ldr	r3, [r7, #0]
 800b78e:	031b      	lsls	r3, r3, #12
 800b790:	b29b      	uxth	r3, r3
 800b792:	693a      	ldr	r2, [r7, #16]
 800b794:	4313      	orrs	r3, r2
 800b796:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b798:	697b      	ldr	r3, [r7, #20]
 800b79a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b79e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800b7a0:	68bb      	ldr	r3, [r7, #8]
 800b7a2:	011b      	lsls	r3, r3, #4
 800b7a4:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800b7a8:	697a      	ldr	r2, [r7, #20]
 800b7aa:	4313      	orrs	r3, r2
 800b7ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	693a      	ldr	r2, [r7, #16]
 800b7b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	697a      	ldr	r2, [r7, #20]
 800b7b8:	621a      	str	r2, [r3, #32]
}
 800b7ba:	bf00      	nop
 800b7bc:	371c      	adds	r7, #28
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	bc80      	pop	{r7}
 800b7c2:	4770      	bx	lr

0800b7c4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b7c4:	b480      	push	{r7}
 800b7c6:	b087      	sub	sp, #28
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	60f8      	str	r0, [r7, #12]
 800b7cc:	60b9      	str	r1, [r7, #8]
 800b7ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	6a1b      	ldr	r3, [r3, #32]
 800b7d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	6a1b      	ldr	r3, [r3, #32]
 800b7da:	f023 0210 	bic.w	r2, r3, #16
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	699b      	ldr	r3, [r3, #24]
 800b7e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b7e8:	693b      	ldr	r3, [r7, #16]
 800b7ea:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b7ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	031b      	lsls	r3, r3, #12
 800b7f4:	693a      	ldr	r2, [r7, #16]
 800b7f6:	4313      	orrs	r3, r2
 800b7f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b7fa:	697b      	ldr	r3, [r7, #20]
 800b7fc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b800:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b802:	68bb      	ldr	r3, [r7, #8]
 800b804:	011b      	lsls	r3, r3, #4
 800b806:	697a      	ldr	r2, [r7, #20]
 800b808:	4313      	orrs	r3, r2
 800b80a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	693a      	ldr	r2, [r7, #16]
 800b810:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	697a      	ldr	r2, [r7, #20]
 800b816:	621a      	str	r2, [r3, #32]
}
 800b818:	bf00      	nop
 800b81a:	371c      	adds	r7, #28
 800b81c:	46bd      	mov	sp, r7
 800b81e:	bc80      	pop	{r7}
 800b820:	4770      	bx	lr

0800b822 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b822:	b480      	push	{r7}
 800b824:	b087      	sub	sp, #28
 800b826:	af00      	add	r7, sp, #0
 800b828:	60f8      	str	r0, [r7, #12]
 800b82a:	60b9      	str	r1, [r7, #8]
 800b82c:	607a      	str	r2, [r7, #4]
 800b82e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	6a1b      	ldr	r3, [r3, #32]
 800b834:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	6a1b      	ldr	r3, [r3, #32]
 800b83a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	69db      	ldr	r3, [r3, #28]
 800b846:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800b848:	693b      	ldr	r3, [r7, #16]
 800b84a:	f023 0303 	bic.w	r3, r3, #3
 800b84e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800b850:	693a      	ldr	r2, [r7, #16]
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	4313      	orrs	r3, r2
 800b856:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800b858:	693b      	ldr	r3, [r7, #16]
 800b85a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b85e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800b860:	683b      	ldr	r3, [r7, #0]
 800b862:	011b      	lsls	r3, r3, #4
 800b864:	b2db      	uxtb	r3, r3
 800b866:	693a      	ldr	r2, [r7, #16]
 800b868:	4313      	orrs	r3, r2
 800b86a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 800b86c:	697b      	ldr	r3, [r7, #20]
 800b86e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b872:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 800b874:	68bb      	ldr	r3, [r7, #8]
 800b876:	021b      	lsls	r3, r3, #8
 800b878:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b87c:	697a      	ldr	r2, [r7, #20]
 800b87e:	4313      	orrs	r3, r2
 800b880:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	693a      	ldr	r2, [r7, #16]
 800b886:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	697a      	ldr	r2, [r7, #20]
 800b88c:	621a      	str	r2, [r3, #32]
}
 800b88e:	bf00      	nop
 800b890:	371c      	adds	r7, #28
 800b892:	46bd      	mov	sp, r7
 800b894:	bc80      	pop	{r7}
 800b896:	4770      	bx	lr

0800b898 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b898:	b480      	push	{r7}
 800b89a:	b087      	sub	sp, #28
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	60f8      	str	r0, [r7, #12]
 800b8a0:	60b9      	str	r1, [r7, #8]
 800b8a2:	607a      	str	r2, [r7, #4]
 800b8a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	6a1b      	ldr	r3, [r3, #32]
 800b8aa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	6a1b      	ldr	r3, [r3, #32]
 800b8b0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	69db      	ldr	r3, [r3, #28]
 800b8bc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800b8be:	693b      	ldr	r3, [r7, #16]
 800b8c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b8c4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	021b      	lsls	r3, r3, #8
 800b8ca:	693a      	ldr	r2, [r7, #16]
 800b8cc:	4313      	orrs	r3, r2
 800b8ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800b8d0:	693b      	ldr	r3, [r7, #16]
 800b8d2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b8d6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800b8d8:	683b      	ldr	r3, [r7, #0]
 800b8da:	031b      	lsls	r3, r3, #12
 800b8dc:	b29b      	uxth	r3, r3
 800b8de:	693a      	ldr	r2, [r7, #16]
 800b8e0:	4313      	orrs	r3, r2
 800b8e2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 800b8e4:	697b      	ldr	r3, [r7, #20]
 800b8e6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b8ea:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 800b8ec:	68bb      	ldr	r3, [r7, #8]
 800b8ee:	031b      	lsls	r3, r3, #12
 800b8f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b8f4:	697a      	ldr	r2, [r7, #20]
 800b8f6:	4313      	orrs	r3, r2
 800b8f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	693a      	ldr	r2, [r7, #16]
 800b8fe:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	697a      	ldr	r2, [r7, #20]
 800b904:	621a      	str	r2, [r3, #32]
}
 800b906:	bf00      	nop
 800b908:	371c      	adds	r7, #28
 800b90a:	46bd      	mov	sp, r7
 800b90c:	bc80      	pop	{r7}
 800b90e:	4770      	bx	lr

0800b910 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b910:	b480      	push	{r7}
 800b912:	b085      	sub	sp, #20
 800b914:	af00      	add	r7, sp, #0
 800b916:	6078      	str	r0, [r7, #4]
 800b918:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	689b      	ldr	r3, [r3, #8]
 800b91e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b926:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b928:	683a      	ldr	r2, [r7, #0]
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	4313      	orrs	r3, r2
 800b92e:	f043 0307 	orr.w	r3, r3, #7
 800b932:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	68fa      	ldr	r2, [r7, #12]
 800b938:	609a      	str	r2, [r3, #8]
}
 800b93a:	bf00      	nop
 800b93c:	3714      	adds	r7, #20
 800b93e:	46bd      	mov	sp, r7
 800b940:	bc80      	pop	{r7}
 800b942:	4770      	bx	lr

0800b944 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b944:	b480      	push	{r7}
 800b946:	b087      	sub	sp, #28
 800b948:	af00      	add	r7, sp, #0
 800b94a:	60f8      	str	r0, [r7, #12]
 800b94c:	60b9      	str	r1, [r7, #8]
 800b94e:	607a      	str	r2, [r7, #4]
 800b950:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	689b      	ldr	r3, [r3, #8]
 800b956:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b958:	697b      	ldr	r3, [r7, #20]
 800b95a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b95e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b960:	683b      	ldr	r3, [r7, #0]
 800b962:	021a      	lsls	r2, r3, #8
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	431a      	orrs	r2, r3
 800b968:	68bb      	ldr	r3, [r7, #8]
 800b96a:	4313      	orrs	r3, r2
 800b96c:	697a      	ldr	r2, [r7, #20]
 800b96e:	4313      	orrs	r3, r2
 800b970:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	697a      	ldr	r2, [r7, #20]
 800b976:	609a      	str	r2, [r3, #8]
}
 800b978:	bf00      	nop
 800b97a:	371c      	adds	r7, #28
 800b97c:	46bd      	mov	sp, r7
 800b97e:	bc80      	pop	{r7}
 800b980:	4770      	bx	lr

0800b982 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b982:	b480      	push	{r7}
 800b984:	b087      	sub	sp, #28
 800b986:	af00      	add	r7, sp, #0
 800b988:	60f8      	str	r0, [r7, #12]
 800b98a:	60b9      	str	r1, [r7, #8]
 800b98c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b98e:	68bb      	ldr	r3, [r7, #8]
 800b990:	f003 031f 	and.w	r3, r3, #31
 800b994:	2201      	movs	r2, #1
 800b996:	fa02 f303 	lsl.w	r3, r2, r3
 800b99a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	6a1a      	ldr	r2, [r3, #32]
 800b9a0:	697b      	ldr	r3, [r7, #20]
 800b9a2:	43db      	mvns	r3, r3
 800b9a4:	401a      	ands	r2, r3
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	6a1a      	ldr	r2, [r3, #32]
 800b9ae:	68bb      	ldr	r3, [r7, #8]
 800b9b0:	f003 031f 	and.w	r3, r3, #31
 800b9b4:	6879      	ldr	r1, [r7, #4]
 800b9b6:	fa01 f303 	lsl.w	r3, r1, r3
 800b9ba:	431a      	orrs	r2, r3
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	621a      	str	r2, [r3, #32]
}
 800b9c0:	bf00      	nop
 800b9c2:	371c      	adds	r7, #28
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	bc80      	pop	{r7}
 800b9c8:	4770      	bx	lr
	...

0800b9cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b9cc:	b480      	push	{r7}
 800b9ce:	b085      	sub	sp, #20
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	6078      	str	r0, [r7, #4]
 800b9d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b9dc:	2b01      	cmp	r3, #1
 800b9de:	d101      	bne.n	800b9e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b9e0:	2302      	movs	r3, #2
 800b9e2:	e046      	b.n	800ba72 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	2201      	movs	r2, #1
 800b9e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	2202      	movs	r2, #2
 800b9f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	685b      	ldr	r3, [r3, #4]
 800b9fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	689b      	ldr	r3, [r3, #8]
 800ba02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ba0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ba0c:	683b      	ldr	r3, [r7, #0]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	68fa      	ldr	r2, [r7, #12]
 800ba12:	4313      	orrs	r3, r2
 800ba14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	68fa      	ldr	r2, [r7, #12]
 800ba1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	4a16      	ldr	r2, [pc, #88]	@ (800ba7c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800ba24:	4293      	cmp	r3, r2
 800ba26:	d00e      	beq.n	800ba46 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ba30:	d009      	beq.n	800ba46 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	4a12      	ldr	r2, [pc, #72]	@ (800ba80 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800ba38:	4293      	cmp	r3, r2
 800ba3a:	d004      	beq.n	800ba46 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	4a10      	ldr	r2, [pc, #64]	@ (800ba84 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800ba42:	4293      	cmp	r3, r2
 800ba44:	d10c      	bne.n	800ba60 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ba46:	68bb      	ldr	r3, [r7, #8]
 800ba48:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ba4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ba4e:	683b      	ldr	r3, [r7, #0]
 800ba50:	685b      	ldr	r3, [r3, #4]
 800ba52:	68ba      	ldr	r2, [r7, #8]
 800ba54:	4313      	orrs	r3, r2
 800ba56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	68ba      	ldr	r2, [r7, #8]
 800ba5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	2201      	movs	r2, #1
 800ba64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ba70:	2300      	movs	r3, #0
}
 800ba72:	4618      	mov	r0, r3
 800ba74:	3714      	adds	r7, #20
 800ba76:	46bd      	mov	sp, r7
 800ba78:	bc80      	pop	{r7}
 800ba7a:	4770      	bx	lr
 800ba7c:	40012c00 	.word	0x40012c00
 800ba80:	40000400 	.word	0x40000400
 800ba84:	40000800 	.word	0x40000800

0800ba88 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ba88:	b480      	push	{r7}
 800ba8a:	b085      	sub	sp, #20
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	6078      	str	r0, [r7, #4]
 800ba90:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ba92:	2300      	movs	r3, #0
 800ba94:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ba9c:	2b01      	cmp	r3, #1
 800ba9e:	d101      	bne.n	800baa4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800baa0:	2302      	movs	r3, #2
 800baa2:	e03d      	b.n	800bb20 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	2201      	movs	r2, #1
 800baa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800bab2:	683b      	ldr	r3, [r7, #0]
 800bab4:	68db      	ldr	r3, [r3, #12]
 800bab6:	4313      	orrs	r3, r2
 800bab8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800bac0:	683b      	ldr	r3, [r7, #0]
 800bac2:	689b      	ldr	r3, [r3, #8]
 800bac4:	4313      	orrs	r3, r2
 800bac6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800bace:	683b      	ldr	r3, [r7, #0]
 800bad0:	685b      	ldr	r3, [r3, #4]
 800bad2:	4313      	orrs	r3, r2
 800bad4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800badc:	683b      	ldr	r3, [r7, #0]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	4313      	orrs	r3, r2
 800bae2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800baea:	683b      	ldr	r3, [r7, #0]
 800baec:	691b      	ldr	r3, [r3, #16]
 800baee:	4313      	orrs	r3, r2
 800baf0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800baf8:	683b      	ldr	r3, [r7, #0]
 800bafa:	695b      	ldr	r3, [r3, #20]
 800bafc:	4313      	orrs	r3, r2
 800bafe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800bb06:	683b      	ldr	r3, [r7, #0]
 800bb08:	69db      	ldr	r3, [r3, #28]
 800bb0a:	4313      	orrs	r3, r2
 800bb0c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	68fa      	ldr	r2, [r7, #12]
 800bb14:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	2200      	movs	r2, #0
 800bb1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800bb1e:	2300      	movs	r3, #0
}
 800bb20:	4618      	mov	r0, r3
 800bb22:	3714      	adds	r7, #20
 800bb24:	46bd      	mov	sp, r7
 800bb26:	bc80      	pop	{r7}
 800bb28:	4770      	bx	lr

0800bb2a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bb2a:	b480      	push	{r7}
 800bb2c:	b083      	sub	sp, #12
 800bb2e:	af00      	add	r7, sp, #0
 800bb30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bb32:	bf00      	nop
 800bb34:	370c      	adds	r7, #12
 800bb36:	46bd      	mov	sp, r7
 800bb38:	bc80      	pop	{r7}
 800bb3a:	4770      	bx	lr

0800bb3c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bb3c:	b480      	push	{r7}
 800bb3e:	b083      	sub	sp, #12
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bb44:	bf00      	nop
 800bb46:	370c      	adds	r7, #12
 800bb48:	46bd      	mov	sp, r7
 800bb4a:	bc80      	pop	{r7}
 800bb4c:	4770      	bx	lr

0800bb4e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bb4e:	b580      	push	{r7, lr}
 800bb50:	b082      	sub	sp, #8
 800bb52:	af00      	add	r7, sp, #0
 800bb54:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d101      	bne.n	800bb60 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bb5c:	2301      	movs	r3, #1
 800bb5e:	e042      	b.n	800bbe6 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bb66:	b2db      	uxtb	r3, r3
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d106      	bne.n	800bb7a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	2200      	movs	r2, #0
 800bb70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bb74:	6878      	ldr	r0, [r7, #4]
 800bb76:	f7fd f9cd 	bl	8008f14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	2224      	movs	r2, #36	@ 0x24
 800bb7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	68da      	ldr	r2, [r3, #12]
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800bb90:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800bb92:	6878      	ldr	r0, [r7, #4]
 800bb94:	f000 ff30 	bl	800c9f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	691a      	ldr	r2, [r3, #16]
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800bba6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	695a      	ldr	r2, [r3, #20]
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800bbb6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	68da      	ldr	r2, [r3, #12]
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800bbc6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	2200      	movs	r2, #0
 800bbcc:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	2220      	movs	r2, #32
 800bbd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	2220      	movs	r2, #32
 800bbda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	2200      	movs	r2, #0
 800bbe2:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800bbe4:	2300      	movs	r3, #0
}
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	3708      	adds	r7, #8
 800bbea:	46bd      	mov	sp, r7
 800bbec:	bd80      	pop	{r7, pc}
	...

0800bbf0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b08c      	sub	sp, #48	@ 0x30
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	60f8      	str	r0, [r7, #12]
 800bbf8:	60b9      	str	r1, [r7, #8]
 800bbfa:	4613      	mov	r3, r2
 800bbfc:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bc04:	b2db      	uxtb	r3, r3
 800bc06:	2b20      	cmp	r3, #32
 800bc08:	d156      	bne.n	800bcb8 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800bc0a:	68bb      	ldr	r3, [r7, #8]
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d002      	beq.n	800bc16 <HAL_UART_Transmit_DMA+0x26>
 800bc10:	88fb      	ldrh	r3, [r7, #6]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d101      	bne.n	800bc1a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800bc16:	2301      	movs	r3, #1
 800bc18:	e04f      	b.n	800bcba <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800bc1a:	68ba      	ldr	r2, [r7, #8]
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	88fa      	ldrh	r2, [r7, #6]
 800bc24:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	88fa      	ldrh	r2, [r7, #6]
 800bc2a:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	2200      	movs	r2, #0
 800bc30:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	2221      	movs	r2, #33	@ 0x21
 800bc36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc3e:	4a21      	ldr	r2, [pc, #132]	@ (800bcc4 <HAL_UART_Transmit_DMA+0xd4>)
 800bc40:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc46:	4a20      	ldr	r2, [pc, #128]	@ (800bcc8 <HAL_UART_Transmit_DMA+0xd8>)
 800bc48:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc4e:	4a1f      	ldr	r2, [pc, #124]	@ (800bccc <HAL_UART_Transmit_DMA+0xdc>)
 800bc50:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc56:	2200      	movs	r2, #0
 800bc58:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 800bc5a:	f107 0308 	add.w	r3, r7, #8
 800bc5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800bc64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc66:	6819      	ldr	r1, [r3, #0]
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	3304      	adds	r3, #4
 800bc6e:	461a      	mov	r2, r3
 800bc70:	88fb      	ldrh	r3, [r7, #6]
 800bc72:	f7fd fcb3 	bl	80095dc <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800bc7e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	3314      	adds	r3, #20
 800bc86:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc88:	69bb      	ldr	r3, [r7, #24]
 800bc8a:	e853 3f00 	ldrex	r3, [r3]
 800bc8e:	617b      	str	r3, [r7, #20]
   return(result);
 800bc90:	697b      	ldr	r3, [r7, #20]
 800bc92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bc96:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	3314      	adds	r3, #20
 800bc9e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bca0:	627a      	str	r2, [r7, #36]	@ 0x24
 800bca2:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bca4:	6a39      	ldr	r1, [r7, #32]
 800bca6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bca8:	e841 2300 	strex	r3, r2, [r1]
 800bcac:	61fb      	str	r3, [r7, #28]
   return(result);
 800bcae:	69fb      	ldr	r3, [r7, #28]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d1e5      	bne.n	800bc80 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	e000      	b.n	800bcba <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 800bcb8:	2302      	movs	r3, #2
  }
}
 800bcba:	4618      	mov	r0, r3
 800bcbc:	3730      	adds	r7, #48	@ 0x30
 800bcbe:	46bd      	mov	sp, r7
 800bcc0:	bd80      	pop	{r7, pc}
 800bcc2:	bf00      	nop
 800bcc4:	0800c28d 	.word	0x0800c28d
 800bcc8:	0800c327 	.word	0x0800c327
 800bccc:	0800c4ab 	.word	0x0800c4ab

0800bcd0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	b084      	sub	sp, #16
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	60f8      	str	r0, [r7, #12]
 800bcd8:	60b9      	str	r1, [r7, #8]
 800bcda:	4613      	mov	r3, r2
 800bcdc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800bce4:	b2db      	uxtb	r3, r3
 800bce6:	2b20      	cmp	r3, #32
 800bce8:	d112      	bne.n	800bd10 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800bcea:	68bb      	ldr	r3, [r7, #8]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d002      	beq.n	800bcf6 <HAL_UART_Receive_DMA+0x26>
 800bcf0:	88fb      	ldrh	r3, [r7, #6]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d101      	bne.n	800bcfa <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800bcf6:	2301      	movs	r3, #1
 800bcf8:	e00b      	b.n	800bd12 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	2200      	movs	r2, #0
 800bcfe:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800bd00:	88fb      	ldrh	r3, [r7, #6]
 800bd02:	461a      	mov	r2, r3
 800bd04:	68b9      	ldr	r1, [r7, #8]
 800bd06:	68f8      	ldr	r0, [r7, #12]
 800bd08:	f000 fc1a 	bl	800c540 <UART_Start_Receive_DMA>
 800bd0c:	4603      	mov	r3, r0
 800bd0e:	e000      	b.n	800bd12 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800bd10:	2302      	movs	r3, #2
  }
}
 800bd12:	4618      	mov	r0, r3
 800bd14:	3710      	adds	r7, #16
 800bd16:	46bd      	mov	sp, r7
 800bd18:	bd80      	pop	{r7, pc}
	...

0800bd1c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	b0ba      	sub	sp, #232	@ 0xe8
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	68db      	ldr	r3, [r3, #12]
 800bd34:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	695b      	ldr	r3, [r3, #20]
 800bd3e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800bd42:	2300      	movs	r3, #0
 800bd44:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800bd48:	2300      	movs	r3, #0
 800bd4a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800bd4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bd52:	f003 030f 	and.w	r3, r3, #15
 800bd56:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800bd5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d10f      	bne.n	800bd82 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bd62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bd66:	f003 0320 	and.w	r3, r3, #32
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d009      	beq.n	800bd82 <HAL_UART_IRQHandler+0x66>
 800bd6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bd72:	f003 0320 	and.w	r3, r3, #32
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d003      	beq.n	800bd82 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800bd7a:	6878      	ldr	r0, [r7, #4]
 800bd7c:	f000 fd7e 	bl	800c87c <UART_Receive_IT>
      return;
 800bd80:	e25b      	b.n	800c23a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800bd82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	f000 80de 	beq.w	800bf48 <HAL_UART_IRQHandler+0x22c>
 800bd8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bd90:	f003 0301 	and.w	r3, r3, #1
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d106      	bne.n	800bda6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800bd98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bd9c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	f000 80d1 	beq.w	800bf48 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800bda6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bdaa:	f003 0301 	and.w	r3, r3, #1
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d00b      	beq.n	800bdca <HAL_UART_IRQHandler+0xae>
 800bdb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bdb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d005      	beq.n	800bdca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bdc2:	f043 0201 	orr.w	r2, r3, #1
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bdca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bdce:	f003 0304 	and.w	r3, r3, #4
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d00b      	beq.n	800bdee <HAL_UART_IRQHandler+0xd2>
 800bdd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bdda:	f003 0301 	and.w	r3, r3, #1
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d005      	beq.n	800bdee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bde6:	f043 0202 	orr.w	r2, r3, #2
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bdee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bdf2:	f003 0302 	and.w	r3, r3, #2
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d00b      	beq.n	800be12 <HAL_UART_IRQHandler+0xf6>
 800bdfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bdfe:	f003 0301 	and.w	r3, r3, #1
 800be02:	2b00      	cmp	r3, #0
 800be04:	d005      	beq.n	800be12 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800be0a:	f043 0204 	orr.w	r2, r3, #4
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800be12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800be16:	f003 0308 	and.w	r3, r3, #8
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d011      	beq.n	800be42 <HAL_UART_IRQHandler+0x126>
 800be1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800be22:	f003 0320 	and.w	r3, r3, #32
 800be26:	2b00      	cmp	r3, #0
 800be28:	d105      	bne.n	800be36 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800be2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800be2e:	f003 0301 	and.w	r3, r3, #1
 800be32:	2b00      	cmp	r3, #0
 800be34:	d005      	beq.n	800be42 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800be3a:	f043 0208 	orr.w	r2, r3, #8
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800be46:	2b00      	cmp	r3, #0
 800be48:	f000 81f2 	beq.w	800c230 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800be4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800be50:	f003 0320 	and.w	r3, r3, #32
 800be54:	2b00      	cmp	r3, #0
 800be56:	d008      	beq.n	800be6a <HAL_UART_IRQHandler+0x14e>
 800be58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800be5c:	f003 0320 	and.w	r3, r3, #32
 800be60:	2b00      	cmp	r3, #0
 800be62:	d002      	beq.n	800be6a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800be64:	6878      	ldr	r0, [r7, #4]
 800be66:	f000 fd09 	bl	800c87c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	695b      	ldr	r3, [r3, #20]
 800be70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800be74:	2b00      	cmp	r3, #0
 800be76:	bf14      	ite	ne
 800be78:	2301      	movne	r3, #1
 800be7a:	2300      	moveq	r3, #0
 800be7c:	b2db      	uxtb	r3, r3
 800be7e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800be86:	f003 0308 	and.w	r3, r3, #8
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d103      	bne.n	800be96 <HAL_UART_IRQHandler+0x17a>
 800be8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800be92:	2b00      	cmp	r3, #0
 800be94:	d04f      	beq.n	800bf36 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800be96:	6878      	ldr	r0, [r7, #4]
 800be98:	f000 fc13 	bl	800c6c2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	695b      	ldr	r3, [r3, #20]
 800bea2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d041      	beq.n	800bf2e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	3314      	adds	r3, #20
 800beb0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800beb4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800beb8:	e853 3f00 	ldrex	r3, [r3]
 800bebc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800bec0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bec4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bec8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	3314      	adds	r3, #20
 800bed2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800bed6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800beda:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bede:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800bee2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800bee6:	e841 2300 	strex	r3, r2, [r1]
 800beea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800beee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d1d9      	bne.n	800beaa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800befa:	2b00      	cmp	r3, #0
 800befc:	d013      	beq.n	800bf26 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bf02:	4a7e      	ldr	r2, [pc, #504]	@ (800c0fc <HAL_UART_IRQHandler+0x3e0>)
 800bf04:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	f7fd fc02 	bl	8009714 <HAL_DMA_Abort_IT>
 800bf10:	4603      	mov	r3, r0
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d016      	beq.n	800bf44 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bf1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bf1c:	687a      	ldr	r2, [r7, #4]
 800bf1e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800bf20:	4610      	mov	r0, r2
 800bf22:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bf24:	e00e      	b.n	800bf44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bf26:	6878      	ldr	r0, [r7, #4]
 800bf28:	f000 f99c 	bl	800c264 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bf2c:	e00a      	b.n	800bf44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bf2e:	6878      	ldr	r0, [r7, #4]
 800bf30:	f000 f998 	bl	800c264 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bf34:	e006      	b.n	800bf44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bf36:	6878      	ldr	r0, [r7, #4]
 800bf38:	f000 f994 	bl	800c264 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	2200      	movs	r2, #0
 800bf40:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800bf42:	e175      	b.n	800c230 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bf44:	bf00      	nop
    return;
 800bf46:	e173      	b.n	800c230 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf4c:	2b01      	cmp	r3, #1
 800bf4e:	f040 814f 	bne.w	800c1f0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800bf52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bf56:	f003 0310 	and.w	r3, r3, #16
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	f000 8148 	beq.w	800c1f0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800bf60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bf64:	f003 0310 	and.w	r3, r3, #16
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	f000 8141 	beq.w	800c1f0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bf6e:	2300      	movs	r3, #0
 800bf70:	60bb      	str	r3, [r7, #8]
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	60bb      	str	r3, [r7, #8]
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	685b      	ldr	r3, [r3, #4]
 800bf80:	60bb      	str	r3, [r7, #8]
 800bf82:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	695b      	ldr	r3, [r3, #20]
 800bf8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	f000 80b6 	beq.w	800c100 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	685b      	ldr	r3, [r3, #4]
 800bf9c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bfa0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	f000 8145 	beq.w	800c234 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800bfae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800bfb2:	429a      	cmp	r2, r3
 800bfb4:	f080 813e 	bcs.w	800c234 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800bfbe:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bfc4:	699b      	ldr	r3, [r3, #24]
 800bfc6:	2b20      	cmp	r3, #32
 800bfc8:	f000 8088 	beq.w	800c0dc <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	330c      	adds	r3, #12
 800bfd2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfd6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800bfda:	e853 3f00 	ldrex	r3, [r3]
 800bfde:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800bfe2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800bfe6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bfea:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	330c      	adds	r3, #12
 800bff4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800bff8:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800bffc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c000:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800c004:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c008:	e841 2300 	strex	r3, r2, [r1]
 800c00c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800c010:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c014:	2b00      	cmp	r3, #0
 800c016:	d1d9      	bne.n	800bfcc <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	3314      	adds	r3, #20
 800c01e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c020:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c022:	e853 3f00 	ldrex	r3, [r3]
 800c026:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c028:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c02a:	f023 0301 	bic.w	r3, r3, #1
 800c02e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	3314      	adds	r3, #20
 800c038:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c03c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800c040:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c042:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c044:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c048:	e841 2300 	strex	r3, r2, [r1]
 800c04c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c04e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c050:	2b00      	cmp	r3, #0
 800c052:	d1e1      	bne.n	800c018 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	3314      	adds	r3, #20
 800c05a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c05c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c05e:	e853 3f00 	ldrex	r3, [r3]
 800c062:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c064:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c066:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c06a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	3314      	adds	r3, #20
 800c074:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800c078:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c07a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c07c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c07e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c080:	e841 2300 	strex	r3, r2, [r1]
 800c084:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c086:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d1e3      	bne.n	800c054 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	2220      	movs	r2, #32
 800c090:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	2200      	movs	r2, #0
 800c098:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	330c      	adds	r3, #12
 800c0a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c0a4:	e853 3f00 	ldrex	r3, [r3]
 800c0a8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c0aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c0ac:	f023 0310 	bic.w	r3, r3, #16
 800c0b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	330c      	adds	r3, #12
 800c0ba:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800c0be:	65ba      	str	r2, [r7, #88]	@ 0x58
 800c0c0:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0c2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c0c4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c0c6:	e841 2300 	strex	r3, r2, [r1]
 800c0ca:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c0cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d1e3      	bne.n	800c09a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	f7fd fae0 	bl	800969c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	2202      	movs	r2, #2
 800c0e0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c0ea:	b29b      	uxth	r3, r3
 800c0ec:	1ad3      	subs	r3, r2, r3
 800c0ee:	b29b      	uxth	r3, r3
 800c0f0:	4619      	mov	r1, r3
 800c0f2:	6878      	ldr	r0, [r7, #4]
 800c0f4:	f000 f8bf 	bl	800c276 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c0f8:	e09c      	b.n	800c234 <HAL_UART_IRQHandler+0x518>
 800c0fa:	bf00      	nop
 800c0fc:	0800c787 	.word	0x0800c787
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c108:	b29b      	uxth	r3, r3
 800c10a:	1ad3      	subs	r3, r2, r3
 800c10c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c114:	b29b      	uxth	r3, r3
 800c116:	2b00      	cmp	r3, #0
 800c118:	f000 808e 	beq.w	800c238 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800c11c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c120:	2b00      	cmp	r3, #0
 800c122:	f000 8089 	beq.w	800c238 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	330c      	adds	r3, #12
 800c12c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c12e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c130:	e853 3f00 	ldrex	r3, [r3]
 800c134:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c136:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c138:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c13c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	330c      	adds	r3, #12
 800c146:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800c14a:	647a      	str	r2, [r7, #68]	@ 0x44
 800c14c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c14e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c150:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c152:	e841 2300 	strex	r3, r2, [r1]
 800c156:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c158:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d1e3      	bne.n	800c126 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	3314      	adds	r3, #20
 800c164:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c168:	e853 3f00 	ldrex	r3, [r3]
 800c16c:	623b      	str	r3, [r7, #32]
   return(result);
 800c16e:	6a3b      	ldr	r3, [r7, #32]
 800c170:	f023 0301 	bic.w	r3, r3, #1
 800c174:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	3314      	adds	r3, #20
 800c17e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800c182:	633a      	str	r2, [r7, #48]	@ 0x30
 800c184:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c186:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c188:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c18a:	e841 2300 	strex	r3, r2, [r1]
 800c18e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c190:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c192:	2b00      	cmp	r3, #0
 800c194:	d1e3      	bne.n	800c15e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	2220      	movs	r2, #32
 800c19a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	2200      	movs	r2, #0
 800c1a2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	330c      	adds	r3, #12
 800c1aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1ac:	693b      	ldr	r3, [r7, #16]
 800c1ae:	e853 3f00 	ldrex	r3, [r3]
 800c1b2:	60fb      	str	r3, [r7, #12]
   return(result);
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	f023 0310 	bic.w	r3, r3, #16
 800c1ba:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	330c      	adds	r3, #12
 800c1c4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800c1c8:	61fa      	str	r2, [r7, #28]
 800c1ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1cc:	69b9      	ldr	r1, [r7, #24]
 800c1ce:	69fa      	ldr	r2, [r7, #28]
 800c1d0:	e841 2300 	strex	r3, r2, [r1]
 800c1d4:	617b      	str	r3, [r7, #20]
   return(result);
 800c1d6:	697b      	ldr	r3, [r7, #20]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d1e3      	bne.n	800c1a4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	2202      	movs	r2, #2
 800c1e0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c1e2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c1e6:	4619      	mov	r1, r3
 800c1e8:	6878      	ldr	r0, [r7, #4]
 800c1ea:	f000 f844 	bl	800c276 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c1ee:	e023      	b.n	800c238 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c1f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c1f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d009      	beq.n	800c210 <HAL_UART_IRQHandler+0x4f4>
 800c1fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c200:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c204:	2b00      	cmp	r3, #0
 800c206:	d003      	beq.n	800c210 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800c208:	6878      	ldr	r0, [r7, #4]
 800c20a:	f000 fad0 	bl	800c7ae <UART_Transmit_IT>
    return;
 800c20e:	e014      	b.n	800c23a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c210:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c214:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d00e      	beq.n	800c23a <HAL_UART_IRQHandler+0x51e>
 800c21c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c220:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c224:	2b00      	cmp	r3, #0
 800c226:	d008      	beq.n	800c23a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800c228:	6878      	ldr	r0, [r7, #4]
 800c22a:	f000 fb0f 	bl	800c84c <UART_EndTransmit_IT>
    return;
 800c22e:	e004      	b.n	800c23a <HAL_UART_IRQHandler+0x51e>
    return;
 800c230:	bf00      	nop
 800c232:	e002      	b.n	800c23a <HAL_UART_IRQHandler+0x51e>
      return;
 800c234:	bf00      	nop
 800c236:	e000      	b.n	800c23a <HAL_UART_IRQHandler+0x51e>
      return;
 800c238:	bf00      	nop
  }
}
 800c23a:	37e8      	adds	r7, #232	@ 0xe8
 800c23c:	46bd      	mov	sp, r7
 800c23e:	bd80      	pop	{r7, pc}

0800c240 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c240:	b480      	push	{r7}
 800c242:	b083      	sub	sp, #12
 800c244:	af00      	add	r7, sp, #0
 800c246:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800c248:	bf00      	nop
 800c24a:	370c      	adds	r7, #12
 800c24c:	46bd      	mov	sp, r7
 800c24e:	bc80      	pop	{r7}
 800c250:	4770      	bx	lr

0800c252 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c252:	b480      	push	{r7}
 800c254:	b083      	sub	sp, #12
 800c256:	af00      	add	r7, sp, #0
 800c258:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800c25a:	bf00      	nop
 800c25c:	370c      	adds	r7, #12
 800c25e:	46bd      	mov	sp, r7
 800c260:	bc80      	pop	{r7}
 800c262:	4770      	bx	lr

0800c264 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c264:	b480      	push	{r7}
 800c266:	b083      	sub	sp, #12
 800c268:	af00      	add	r7, sp, #0
 800c26a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800c26c:	bf00      	nop
 800c26e:	370c      	adds	r7, #12
 800c270:	46bd      	mov	sp, r7
 800c272:	bc80      	pop	{r7}
 800c274:	4770      	bx	lr

0800c276 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c276:	b480      	push	{r7}
 800c278:	b083      	sub	sp, #12
 800c27a:	af00      	add	r7, sp, #0
 800c27c:	6078      	str	r0, [r7, #4]
 800c27e:	460b      	mov	r3, r1
 800c280:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c282:	bf00      	nop
 800c284:	370c      	adds	r7, #12
 800c286:	46bd      	mov	sp, r7
 800c288:	bc80      	pop	{r7}
 800c28a:	4770      	bx	lr

0800c28c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c28c:	b580      	push	{r7, lr}
 800c28e:	b090      	sub	sp, #64	@ 0x40
 800c290:	af00      	add	r7, sp, #0
 800c292:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c298:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	f003 0320 	and.w	r3, r3, #32
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d137      	bne.n	800c318 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800c2a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c2aa:	2200      	movs	r2, #0
 800c2ac:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c2ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	3314      	adds	r3, #20
 800c2b4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2b8:	e853 3f00 	ldrex	r3, [r3]
 800c2bc:	623b      	str	r3, [r7, #32]
   return(result);
 800c2be:	6a3b      	ldr	r3, [r7, #32]
 800c2c0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c2c4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c2c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	3314      	adds	r3, #20
 800c2cc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c2ce:	633a      	str	r2, [r7, #48]	@ 0x30
 800c2d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c2d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c2d6:	e841 2300 	strex	r3, r2, [r1]
 800c2da:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c2dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d1e5      	bne.n	800c2ae <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c2e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	330c      	adds	r3, #12
 800c2e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2ea:	693b      	ldr	r3, [r7, #16]
 800c2ec:	e853 3f00 	ldrex	r3, [r3]
 800c2f0:	60fb      	str	r3, [r7, #12]
   return(result);
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c2f8:	637b      	str	r3, [r7, #52]	@ 0x34
 800c2fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	330c      	adds	r3, #12
 800c300:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c302:	61fa      	str	r2, [r7, #28]
 800c304:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c306:	69b9      	ldr	r1, [r7, #24]
 800c308:	69fa      	ldr	r2, [r7, #28]
 800c30a:	e841 2300 	strex	r3, r2, [r1]
 800c30e:	617b      	str	r3, [r7, #20]
   return(result);
 800c310:	697b      	ldr	r3, [r7, #20]
 800c312:	2b00      	cmp	r3, #0
 800c314:	d1e5      	bne.n	800c2e2 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c316:	e002      	b.n	800c31e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800c318:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800c31a:	f7fb fc1d 	bl	8007b58 <HAL_UART_TxCpltCallback>
}
 800c31e:	bf00      	nop
 800c320:	3740      	adds	r7, #64	@ 0x40
 800c322:	46bd      	mov	sp, r7
 800c324:	bd80      	pop	{r7, pc}

0800c326 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c326:	b580      	push	{r7, lr}
 800c328:	b084      	sub	sp, #16
 800c32a:	af00      	add	r7, sp, #0
 800c32c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c332:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800c334:	68f8      	ldr	r0, [r7, #12]
 800c336:	f7ff ff83 	bl	800c240 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c33a:	bf00      	nop
 800c33c:	3710      	adds	r7, #16
 800c33e:	46bd      	mov	sp, r7
 800c340:	bd80      	pop	{r7, pc}

0800c342 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c342:	b580      	push	{r7, lr}
 800c344:	b09c      	sub	sp, #112	@ 0x70
 800c346:	af00      	add	r7, sp, #0
 800c348:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c34e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	f003 0320 	and.w	r3, r3, #32
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d172      	bne.n	800c444 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800c35e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c360:	2200      	movs	r2, #0
 800c362:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c364:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	330c      	adds	r3, #12
 800c36a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c36c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c36e:	e853 3f00 	ldrex	r3, [r3]
 800c372:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c374:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c376:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c37a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c37c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	330c      	adds	r3, #12
 800c382:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800c384:	65ba      	str	r2, [r7, #88]	@ 0x58
 800c386:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c388:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c38a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c38c:	e841 2300 	strex	r3, r2, [r1]
 800c390:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c392:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c394:	2b00      	cmp	r3, #0
 800c396:	d1e5      	bne.n	800c364 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c398:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	3314      	adds	r3, #20
 800c39e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3a2:	e853 3f00 	ldrex	r3, [r3]
 800c3a6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c3a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c3aa:	f023 0301 	bic.w	r3, r3, #1
 800c3ae:	667b      	str	r3, [r7, #100]	@ 0x64
 800c3b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	3314      	adds	r3, #20
 800c3b6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c3b8:	647a      	str	r2, [r7, #68]	@ 0x44
 800c3ba:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3bc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c3be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c3c0:	e841 2300 	strex	r3, r2, [r1]
 800c3c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c3c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d1e5      	bne.n	800c398 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c3cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	3314      	adds	r3, #20
 800c3d2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3d6:	e853 3f00 	ldrex	r3, [r3]
 800c3da:	623b      	str	r3, [r7, #32]
   return(result);
 800c3dc:	6a3b      	ldr	r3, [r7, #32]
 800c3de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c3e2:	663b      	str	r3, [r7, #96]	@ 0x60
 800c3e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	3314      	adds	r3, #20
 800c3ea:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c3ec:	633a      	str	r2, [r7, #48]	@ 0x30
 800c3ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3f0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c3f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c3f4:	e841 2300 	strex	r3, r2, [r1]
 800c3f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c3fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d1e5      	bne.n	800c3cc <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c400:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c402:	2220      	movs	r2, #32
 800c404:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c408:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c40a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c40c:	2b01      	cmp	r3, #1
 800c40e:	d119      	bne.n	800c444 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c410:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	330c      	adds	r3, #12
 800c416:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c418:	693b      	ldr	r3, [r7, #16]
 800c41a:	e853 3f00 	ldrex	r3, [r3]
 800c41e:	60fb      	str	r3, [r7, #12]
   return(result);
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	f023 0310 	bic.w	r3, r3, #16
 800c426:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c428:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	330c      	adds	r3, #12
 800c42e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800c430:	61fa      	str	r2, [r7, #28]
 800c432:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c434:	69b9      	ldr	r1, [r7, #24]
 800c436:	69fa      	ldr	r2, [r7, #28]
 800c438:	e841 2300 	strex	r3, r2, [r1]
 800c43c:	617b      	str	r3, [r7, #20]
   return(result);
 800c43e:	697b      	ldr	r3, [r7, #20]
 800c440:	2b00      	cmp	r3, #0
 800c442:	d1e5      	bne.n	800c410 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c444:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c446:	2200      	movs	r2, #0
 800c448:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c44a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c44c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c44e:	2b01      	cmp	r3, #1
 800c450:	d106      	bne.n	800c460 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c452:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c454:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800c456:	4619      	mov	r1, r3
 800c458:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c45a:	f7ff ff0c 	bl	800c276 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c45e:	e002      	b.n	800c466 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800c460:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c462:	f7fb fb87 	bl	8007b74 <HAL_UART_RxCpltCallback>
}
 800c466:	bf00      	nop
 800c468:	3770      	adds	r7, #112	@ 0x70
 800c46a:	46bd      	mov	sp, r7
 800c46c:	bd80      	pop	{r7, pc}

0800c46e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c46e:	b580      	push	{r7, lr}
 800c470:	b084      	sub	sp, #16
 800c472:	af00      	add	r7, sp, #0
 800c474:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c47a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	2201      	movs	r2, #1
 800c480:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c486:	2b01      	cmp	r3, #1
 800c488:	d108      	bne.n	800c49c <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800c48e:	085b      	lsrs	r3, r3, #1
 800c490:	b29b      	uxth	r3, r3
 800c492:	4619      	mov	r1, r3
 800c494:	68f8      	ldr	r0, [r7, #12]
 800c496:	f7ff feee 	bl	800c276 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c49a:	e002      	b.n	800c4a2 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800c49c:	68f8      	ldr	r0, [r7, #12]
 800c49e:	f7ff fed8 	bl	800c252 <HAL_UART_RxHalfCpltCallback>
}
 800c4a2:	bf00      	nop
 800c4a4:	3710      	adds	r7, #16
 800c4a6:	46bd      	mov	sp, r7
 800c4a8:	bd80      	pop	{r7, pc}

0800c4aa <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c4aa:	b580      	push	{r7, lr}
 800c4ac:	b084      	sub	sp, #16
 800c4ae:	af00      	add	r7, sp, #0
 800c4b0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800c4b2:	2300      	movs	r3, #0
 800c4b4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c4ba:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800c4bc:	68bb      	ldr	r3, [r7, #8]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	695b      	ldr	r3, [r3, #20]
 800c4c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	bf14      	ite	ne
 800c4ca:	2301      	movne	r3, #1
 800c4cc:	2300      	moveq	r3, #0
 800c4ce:	b2db      	uxtb	r3, r3
 800c4d0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800c4d2:	68bb      	ldr	r3, [r7, #8]
 800c4d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c4d8:	b2db      	uxtb	r3, r3
 800c4da:	2b21      	cmp	r3, #33	@ 0x21
 800c4dc:	d108      	bne.n	800c4f0 <UART_DMAError+0x46>
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d005      	beq.n	800c4f0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800c4e4:	68bb      	ldr	r3, [r7, #8]
 800c4e6:	2200      	movs	r2, #0
 800c4e8:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800c4ea:	68b8      	ldr	r0, [r7, #8]
 800c4ec:	f000 f8c2 	bl	800c674 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c4f0:	68bb      	ldr	r3, [r7, #8]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	695b      	ldr	r3, [r3, #20]
 800c4f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	bf14      	ite	ne
 800c4fe:	2301      	movne	r3, #1
 800c500:	2300      	moveq	r3, #0
 800c502:	b2db      	uxtb	r3, r3
 800c504:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800c506:	68bb      	ldr	r3, [r7, #8]
 800c508:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c50c:	b2db      	uxtb	r3, r3
 800c50e:	2b22      	cmp	r3, #34	@ 0x22
 800c510:	d108      	bne.n	800c524 <UART_DMAError+0x7a>
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d005      	beq.n	800c524 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800c518:	68bb      	ldr	r3, [r7, #8]
 800c51a:	2200      	movs	r2, #0
 800c51c:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800c51e:	68b8      	ldr	r0, [r7, #8]
 800c520:	f000 f8cf 	bl	800c6c2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c524:	68bb      	ldr	r3, [r7, #8]
 800c526:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c528:	f043 0210 	orr.w	r2, r3, #16
 800c52c:	68bb      	ldr	r3, [r7, #8]
 800c52e:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c530:	68b8      	ldr	r0, [r7, #8]
 800c532:	f7ff fe97 	bl	800c264 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c536:	bf00      	nop
 800c538:	3710      	adds	r7, #16
 800c53a:	46bd      	mov	sp, r7
 800c53c:	bd80      	pop	{r7, pc}
	...

0800c540 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c540:	b580      	push	{r7, lr}
 800c542:	b098      	sub	sp, #96	@ 0x60
 800c544:	af00      	add	r7, sp, #0
 800c546:	60f8      	str	r0, [r7, #12]
 800c548:	60b9      	str	r1, [r7, #8]
 800c54a:	4613      	mov	r3, r2
 800c54c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800c54e:	68ba      	ldr	r2, [r7, #8]
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	88fa      	ldrh	r2, [r7, #6]
 800c558:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	2200      	movs	r2, #0
 800c55e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	2222      	movs	r2, #34	@ 0x22
 800c564:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c56c:	4a3e      	ldr	r2, [pc, #248]	@ (800c668 <UART_Start_Receive_DMA+0x128>)
 800c56e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c574:	4a3d      	ldr	r2, [pc, #244]	@ (800c66c <UART_Start_Receive_DMA+0x12c>)
 800c576:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c57c:	4a3c      	ldr	r2, [pc, #240]	@ (800c670 <UART_Start_Receive_DMA+0x130>)
 800c57e:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c584:	2200      	movs	r2, #0
 800c586:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800c588:	f107 0308 	add.w	r3, r7, #8
 800c58c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	3304      	adds	r3, #4
 800c598:	4619      	mov	r1, r3
 800c59a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c59c:	681a      	ldr	r2, [r3, #0]
 800c59e:	88fb      	ldrh	r3, [r7, #6]
 800c5a0:	f7fd f81c 	bl	80095dc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800c5a4:	2300      	movs	r3, #0
 800c5a6:	613b      	str	r3, [r7, #16]
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	613b      	str	r3, [r7, #16]
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	685b      	ldr	r3, [r3, #4]
 800c5b6:	613b      	str	r3, [r7, #16]
 800c5b8:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	691b      	ldr	r3, [r3, #16]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d019      	beq.n	800c5f6 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	330c      	adds	r3, #12
 800c5c8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c5cc:	e853 3f00 	ldrex	r3, [r3]
 800c5d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c5d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c5d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c5d8:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	330c      	adds	r3, #12
 800c5e0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c5e2:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800c5e4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5e6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800c5e8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c5ea:	e841 2300 	strex	r3, r2, [r1]
 800c5ee:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800c5f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d1e5      	bne.n	800c5c2 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	3314      	adds	r3, #20
 800c5fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c600:	e853 3f00 	ldrex	r3, [r3]
 800c604:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c608:	f043 0301 	orr.w	r3, r3, #1
 800c60c:	657b      	str	r3, [r7, #84]	@ 0x54
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	3314      	adds	r3, #20
 800c614:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c616:	63ba      	str	r2, [r7, #56]	@ 0x38
 800c618:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c61a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800c61c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c61e:	e841 2300 	strex	r3, r2, [r1]
 800c622:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c624:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c626:	2b00      	cmp	r3, #0
 800c628:	d1e5      	bne.n	800c5f6 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	3314      	adds	r3, #20
 800c630:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c632:	69bb      	ldr	r3, [r7, #24]
 800c634:	e853 3f00 	ldrex	r3, [r3]
 800c638:	617b      	str	r3, [r7, #20]
   return(result);
 800c63a:	697b      	ldr	r3, [r7, #20]
 800c63c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c640:	653b      	str	r3, [r7, #80]	@ 0x50
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	3314      	adds	r3, #20
 800c648:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c64a:	627a      	str	r2, [r7, #36]	@ 0x24
 800c64c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c64e:	6a39      	ldr	r1, [r7, #32]
 800c650:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c652:	e841 2300 	strex	r3, r2, [r1]
 800c656:	61fb      	str	r3, [r7, #28]
   return(result);
 800c658:	69fb      	ldr	r3, [r7, #28]
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d1e5      	bne.n	800c62a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800c65e:	2300      	movs	r3, #0
}
 800c660:	4618      	mov	r0, r3
 800c662:	3760      	adds	r7, #96	@ 0x60
 800c664:	46bd      	mov	sp, r7
 800c666:	bd80      	pop	{r7, pc}
 800c668:	0800c343 	.word	0x0800c343
 800c66c:	0800c46f 	.word	0x0800c46f
 800c670:	0800c4ab 	.word	0x0800c4ab

0800c674 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c674:	b480      	push	{r7}
 800c676:	b089      	sub	sp, #36	@ 0x24
 800c678:	af00      	add	r7, sp, #0
 800c67a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	330c      	adds	r3, #12
 800c682:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	e853 3f00 	ldrex	r3, [r3]
 800c68a:	60bb      	str	r3, [r7, #8]
   return(result);
 800c68c:	68bb      	ldr	r3, [r7, #8]
 800c68e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800c692:	61fb      	str	r3, [r7, #28]
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	330c      	adds	r3, #12
 800c69a:	69fa      	ldr	r2, [r7, #28]
 800c69c:	61ba      	str	r2, [r7, #24]
 800c69e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6a0:	6979      	ldr	r1, [r7, #20]
 800c6a2:	69ba      	ldr	r2, [r7, #24]
 800c6a4:	e841 2300 	strex	r3, r2, [r1]
 800c6a8:	613b      	str	r3, [r7, #16]
   return(result);
 800c6aa:	693b      	ldr	r3, [r7, #16]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d1e5      	bne.n	800c67c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	2220      	movs	r2, #32
 800c6b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800c6b8:	bf00      	nop
 800c6ba:	3724      	adds	r7, #36	@ 0x24
 800c6bc:	46bd      	mov	sp, r7
 800c6be:	bc80      	pop	{r7}
 800c6c0:	4770      	bx	lr

0800c6c2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c6c2:	b480      	push	{r7}
 800c6c4:	b095      	sub	sp, #84	@ 0x54
 800c6c6:	af00      	add	r7, sp, #0
 800c6c8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	330c      	adds	r3, #12
 800c6d0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c6d4:	e853 3f00 	ldrex	r3, [r3]
 800c6d8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c6da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c6e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	330c      	adds	r3, #12
 800c6e8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c6ea:	643a      	str	r2, [r7, #64]	@ 0x40
 800c6ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6ee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c6f0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c6f2:	e841 2300 	strex	r3, r2, [r1]
 800c6f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c6f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d1e5      	bne.n	800c6ca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	3314      	adds	r3, #20
 800c704:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c706:	6a3b      	ldr	r3, [r7, #32]
 800c708:	e853 3f00 	ldrex	r3, [r3]
 800c70c:	61fb      	str	r3, [r7, #28]
   return(result);
 800c70e:	69fb      	ldr	r3, [r7, #28]
 800c710:	f023 0301 	bic.w	r3, r3, #1
 800c714:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	3314      	adds	r3, #20
 800c71c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c71e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c720:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c722:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c724:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c726:	e841 2300 	strex	r3, r2, [r1]
 800c72a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c72c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d1e5      	bne.n	800c6fe <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c736:	2b01      	cmp	r3, #1
 800c738:	d119      	bne.n	800c76e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	330c      	adds	r3, #12
 800c740:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	e853 3f00 	ldrex	r3, [r3]
 800c748:	60bb      	str	r3, [r7, #8]
   return(result);
 800c74a:	68bb      	ldr	r3, [r7, #8]
 800c74c:	f023 0310 	bic.w	r3, r3, #16
 800c750:	647b      	str	r3, [r7, #68]	@ 0x44
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	330c      	adds	r3, #12
 800c758:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c75a:	61ba      	str	r2, [r7, #24]
 800c75c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c75e:	6979      	ldr	r1, [r7, #20]
 800c760:	69ba      	ldr	r2, [r7, #24]
 800c762:	e841 2300 	strex	r3, r2, [r1]
 800c766:	613b      	str	r3, [r7, #16]
   return(result);
 800c768:	693b      	ldr	r3, [r7, #16]
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d1e5      	bne.n	800c73a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	2220      	movs	r2, #32
 800c772:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	2200      	movs	r2, #0
 800c77a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800c77c:	bf00      	nop
 800c77e:	3754      	adds	r7, #84	@ 0x54
 800c780:	46bd      	mov	sp, r7
 800c782:	bc80      	pop	{r7}
 800c784:	4770      	bx	lr

0800c786 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c786:	b580      	push	{r7, lr}
 800c788:	b084      	sub	sp, #16
 800c78a:	af00      	add	r7, sp, #0
 800c78c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c792:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	2200      	movs	r2, #0
 800c798:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	2200      	movs	r2, #0
 800c79e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c7a0:	68f8      	ldr	r0, [r7, #12]
 800c7a2:	f7ff fd5f 	bl	800c264 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c7a6:	bf00      	nop
 800c7a8:	3710      	adds	r7, #16
 800c7aa:	46bd      	mov	sp, r7
 800c7ac:	bd80      	pop	{r7, pc}

0800c7ae <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c7ae:	b480      	push	{r7}
 800c7b0:	b085      	sub	sp, #20
 800c7b2:	af00      	add	r7, sp, #0
 800c7b4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c7bc:	b2db      	uxtb	r3, r3
 800c7be:	2b21      	cmp	r3, #33	@ 0x21
 800c7c0:	d13e      	bne.n	800c840 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	689b      	ldr	r3, [r3, #8]
 800c7c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c7ca:	d114      	bne.n	800c7f6 <UART_Transmit_IT+0x48>
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	691b      	ldr	r3, [r3, #16]
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d110      	bne.n	800c7f6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	6a1b      	ldr	r3, [r3, #32]
 800c7d8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	881b      	ldrh	r3, [r3, #0]
 800c7de:	461a      	mov	r2, r3
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c7e8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	6a1b      	ldr	r3, [r3, #32]
 800c7ee:	1c9a      	adds	r2, r3, #2
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	621a      	str	r2, [r3, #32]
 800c7f4:	e008      	b.n	800c808 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	6a1b      	ldr	r3, [r3, #32]
 800c7fa:	1c59      	adds	r1, r3, #1
 800c7fc:	687a      	ldr	r2, [r7, #4]
 800c7fe:	6211      	str	r1, [r2, #32]
 800c800:	781a      	ldrb	r2, [r3, #0]
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800c80c:	b29b      	uxth	r3, r3
 800c80e:	3b01      	subs	r3, #1
 800c810:	b29b      	uxth	r3, r3
 800c812:	687a      	ldr	r2, [r7, #4]
 800c814:	4619      	mov	r1, r3
 800c816:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d10f      	bne.n	800c83c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	68da      	ldr	r2, [r3, #12]
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c82a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	68da      	ldr	r2, [r3, #12]
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c83a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c83c:	2300      	movs	r3, #0
 800c83e:	e000      	b.n	800c842 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c840:	2302      	movs	r3, #2
  }
}
 800c842:	4618      	mov	r0, r3
 800c844:	3714      	adds	r7, #20
 800c846:	46bd      	mov	sp, r7
 800c848:	bc80      	pop	{r7}
 800c84a:	4770      	bx	lr

0800c84c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c84c:	b580      	push	{r7, lr}
 800c84e:	b082      	sub	sp, #8
 800c850:	af00      	add	r7, sp, #0
 800c852:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	68da      	ldr	r2, [r3, #12]
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c862:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	2220      	movs	r2, #32
 800c868:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c86c:	6878      	ldr	r0, [r7, #4]
 800c86e:	f7fb f973 	bl	8007b58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c872:	2300      	movs	r3, #0
}
 800c874:	4618      	mov	r0, r3
 800c876:	3708      	adds	r7, #8
 800c878:	46bd      	mov	sp, r7
 800c87a:	bd80      	pop	{r7, pc}

0800c87c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c87c:	b580      	push	{r7, lr}
 800c87e:	b08c      	sub	sp, #48	@ 0x30
 800c880:	af00      	add	r7, sp, #0
 800c882:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c88a:	b2db      	uxtb	r3, r3
 800c88c:	2b22      	cmp	r3, #34	@ 0x22
 800c88e:	f040 80ae 	bne.w	800c9ee <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	689b      	ldr	r3, [r3, #8]
 800c896:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c89a:	d117      	bne.n	800c8cc <UART_Receive_IT+0x50>
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	691b      	ldr	r3, [r3, #16]
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d113      	bne.n	800c8cc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c8a4:	2300      	movs	r3, #0
 800c8a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c8ac:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	685b      	ldr	r3, [r3, #4]
 800c8b4:	b29b      	uxth	r3, r3
 800c8b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8ba:	b29a      	uxth	r2, r3
 800c8bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8be:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c8c4:	1c9a      	adds	r2, r3, #2
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	629a      	str	r2, [r3, #40]	@ 0x28
 800c8ca:	e026      	b.n	800c91a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c8d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800c8d2:	2300      	movs	r3, #0
 800c8d4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	689b      	ldr	r3, [r3, #8]
 800c8da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c8de:	d007      	beq.n	800c8f0 <UART_Receive_IT+0x74>
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	689b      	ldr	r3, [r3, #8]
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d10a      	bne.n	800c8fe <UART_Receive_IT+0x82>
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	691b      	ldr	r3, [r3, #16]
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d106      	bne.n	800c8fe <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	685b      	ldr	r3, [r3, #4]
 800c8f6:	b2da      	uxtb	r2, r3
 800c8f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8fa:	701a      	strb	r2, [r3, #0]
 800c8fc:	e008      	b.n	800c910 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	685b      	ldr	r3, [r3, #4]
 800c904:	b2db      	uxtb	r3, r3
 800c906:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c90a:	b2da      	uxtb	r2, r3
 800c90c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c90e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c914:	1c5a      	adds	r2, r3, #1
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c91e:	b29b      	uxth	r3, r3
 800c920:	3b01      	subs	r3, #1
 800c922:	b29b      	uxth	r3, r3
 800c924:	687a      	ldr	r2, [r7, #4]
 800c926:	4619      	mov	r1, r3
 800c928:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d15d      	bne.n	800c9ea <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	68da      	ldr	r2, [r3, #12]
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	f022 0220 	bic.w	r2, r2, #32
 800c93c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	68da      	ldr	r2, [r3, #12]
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c94c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	695a      	ldr	r2, [r3, #20]
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	f022 0201 	bic.w	r2, r2, #1
 800c95c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	2220      	movs	r2, #32
 800c962:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	2200      	movs	r2, #0
 800c96a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c970:	2b01      	cmp	r3, #1
 800c972:	d135      	bne.n	800c9e0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	2200      	movs	r2, #0
 800c978:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	330c      	adds	r3, #12
 800c980:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c982:	697b      	ldr	r3, [r7, #20]
 800c984:	e853 3f00 	ldrex	r3, [r3]
 800c988:	613b      	str	r3, [r7, #16]
   return(result);
 800c98a:	693b      	ldr	r3, [r7, #16]
 800c98c:	f023 0310 	bic.w	r3, r3, #16
 800c990:	627b      	str	r3, [r7, #36]	@ 0x24
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	330c      	adds	r3, #12
 800c998:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c99a:	623a      	str	r2, [r7, #32]
 800c99c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c99e:	69f9      	ldr	r1, [r7, #28]
 800c9a0:	6a3a      	ldr	r2, [r7, #32]
 800c9a2:	e841 2300 	strex	r3, r2, [r1]
 800c9a6:	61bb      	str	r3, [r7, #24]
   return(result);
 800c9a8:	69bb      	ldr	r3, [r7, #24]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d1e5      	bne.n	800c97a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	f003 0310 	and.w	r3, r3, #16
 800c9b8:	2b10      	cmp	r3, #16
 800c9ba:	d10a      	bne.n	800c9d2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c9bc:	2300      	movs	r3, #0
 800c9be:	60fb      	str	r3, [r7, #12]
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	60fb      	str	r3, [r7, #12]
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	685b      	ldr	r3, [r3, #4]
 800c9ce:	60fb      	str	r3, [r7, #12]
 800c9d0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800c9d6:	4619      	mov	r1, r3
 800c9d8:	6878      	ldr	r0, [r7, #4]
 800c9da:	f7ff fc4c 	bl	800c276 <HAL_UARTEx_RxEventCallback>
 800c9de:	e002      	b.n	800c9e6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c9e0:	6878      	ldr	r0, [r7, #4]
 800c9e2:	f7fb f8c7 	bl	8007b74 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c9e6:	2300      	movs	r3, #0
 800c9e8:	e002      	b.n	800c9f0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800c9ea:	2300      	movs	r3, #0
 800c9ec:	e000      	b.n	800c9f0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800c9ee:	2302      	movs	r3, #2
  }
}
 800c9f0:	4618      	mov	r0, r3
 800c9f2:	3730      	adds	r7, #48	@ 0x30
 800c9f4:	46bd      	mov	sp, r7
 800c9f6:	bd80      	pop	{r7, pc}

0800c9f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c9f8:	b580      	push	{r7, lr}
 800c9fa:	b084      	sub	sp, #16
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	691b      	ldr	r3, [r3, #16]
 800ca06:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	68da      	ldr	r2, [r3, #12]
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	430a      	orrs	r2, r1
 800ca14:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	689a      	ldr	r2, [r3, #8]
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	691b      	ldr	r3, [r3, #16]
 800ca1e:	431a      	orrs	r2, r3
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	695b      	ldr	r3, [r3, #20]
 800ca24:	4313      	orrs	r3, r2
 800ca26:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	68db      	ldr	r3, [r3, #12]
 800ca2e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800ca32:	f023 030c 	bic.w	r3, r3, #12
 800ca36:	687a      	ldr	r2, [r7, #4]
 800ca38:	6812      	ldr	r2, [r2, #0]
 800ca3a:	68b9      	ldr	r1, [r7, #8]
 800ca3c:	430b      	orrs	r3, r1
 800ca3e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	695b      	ldr	r3, [r3, #20]
 800ca46:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	699a      	ldr	r2, [r3, #24]
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	430a      	orrs	r2, r1
 800ca54:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	4a2c      	ldr	r2, [pc, #176]	@ (800cb0c <UART_SetConfig+0x114>)
 800ca5c:	4293      	cmp	r3, r2
 800ca5e:	d103      	bne.n	800ca68 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800ca60:	f7fd fedc 	bl	800a81c <HAL_RCC_GetPCLK2Freq>
 800ca64:	60f8      	str	r0, [r7, #12]
 800ca66:	e002      	b.n	800ca6e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800ca68:	f7fd fec4 	bl	800a7f4 <HAL_RCC_GetPCLK1Freq>
 800ca6c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ca6e:	68fa      	ldr	r2, [r7, #12]
 800ca70:	4613      	mov	r3, r2
 800ca72:	009b      	lsls	r3, r3, #2
 800ca74:	4413      	add	r3, r2
 800ca76:	009a      	lsls	r2, r3, #2
 800ca78:	441a      	add	r2, r3
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	685b      	ldr	r3, [r3, #4]
 800ca7e:	009b      	lsls	r3, r3, #2
 800ca80:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca84:	4a22      	ldr	r2, [pc, #136]	@ (800cb10 <UART_SetConfig+0x118>)
 800ca86:	fba2 2303 	umull	r2, r3, r2, r3
 800ca8a:	095b      	lsrs	r3, r3, #5
 800ca8c:	0119      	lsls	r1, r3, #4
 800ca8e:	68fa      	ldr	r2, [r7, #12]
 800ca90:	4613      	mov	r3, r2
 800ca92:	009b      	lsls	r3, r3, #2
 800ca94:	4413      	add	r3, r2
 800ca96:	009a      	lsls	r2, r3, #2
 800ca98:	441a      	add	r2, r3
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	685b      	ldr	r3, [r3, #4]
 800ca9e:	009b      	lsls	r3, r3, #2
 800caa0:	fbb2 f2f3 	udiv	r2, r2, r3
 800caa4:	4b1a      	ldr	r3, [pc, #104]	@ (800cb10 <UART_SetConfig+0x118>)
 800caa6:	fba3 0302 	umull	r0, r3, r3, r2
 800caaa:	095b      	lsrs	r3, r3, #5
 800caac:	2064      	movs	r0, #100	@ 0x64
 800caae:	fb00 f303 	mul.w	r3, r0, r3
 800cab2:	1ad3      	subs	r3, r2, r3
 800cab4:	011b      	lsls	r3, r3, #4
 800cab6:	3332      	adds	r3, #50	@ 0x32
 800cab8:	4a15      	ldr	r2, [pc, #84]	@ (800cb10 <UART_SetConfig+0x118>)
 800caba:	fba2 2303 	umull	r2, r3, r2, r3
 800cabe:	095b      	lsrs	r3, r3, #5
 800cac0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800cac4:	4419      	add	r1, r3
 800cac6:	68fa      	ldr	r2, [r7, #12]
 800cac8:	4613      	mov	r3, r2
 800caca:	009b      	lsls	r3, r3, #2
 800cacc:	4413      	add	r3, r2
 800cace:	009a      	lsls	r2, r3, #2
 800cad0:	441a      	add	r2, r3
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	685b      	ldr	r3, [r3, #4]
 800cad6:	009b      	lsls	r3, r3, #2
 800cad8:	fbb2 f2f3 	udiv	r2, r2, r3
 800cadc:	4b0c      	ldr	r3, [pc, #48]	@ (800cb10 <UART_SetConfig+0x118>)
 800cade:	fba3 0302 	umull	r0, r3, r3, r2
 800cae2:	095b      	lsrs	r3, r3, #5
 800cae4:	2064      	movs	r0, #100	@ 0x64
 800cae6:	fb00 f303 	mul.w	r3, r0, r3
 800caea:	1ad3      	subs	r3, r2, r3
 800caec:	011b      	lsls	r3, r3, #4
 800caee:	3332      	adds	r3, #50	@ 0x32
 800caf0:	4a07      	ldr	r2, [pc, #28]	@ (800cb10 <UART_SetConfig+0x118>)
 800caf2:	fba2 2303 	umull	r2, r3, r2, r3
 800caf6:	095b      	lsrs	r3, r3, #5
 800caf8:	f003 020f 	and.w	r2, r3, #15
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	440a      	add	r2, r1
 800cb02:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800cb04:	bf00      	nop
 800cb06:	3710      	adds	r7, #16
 800cb08:	46bd      	mov	sp, r7
 800cb0a:	bd80      	pop	{r7, pc}
 800cb0c:	40013800 	.word	0x40013800
 800cb10:	51eb851f 	.word	0x51eb851f

0800cb14 <calloc>:
 800cb14:	4b02      	ldr	r3, [pc, #8]	@ (800cb20 <calloc+0xc>)
 800cb16:	460a      	mov	r2, r1
 800cb18:	4601      	mov	r1, r0
 800cb1a:	6818      	ldr	r0, [r3, #0]
 800cb1c:	f000 b802 	b.w	800cb24 <_calloc_r>
 800cb20:	20000018 	.word	0x20000018

0800cb24 <_calloc_r>:
 800cb24:	b570      	push	{r4, r5, r6, lr}
 800cb26:	fba1 5402 	umull	r5, r4, r1, r2
 800cb2a:	b93c      	cbnz	r4, 800cb3c <_calloc_r+0x18>
 800cb2c:	4629      	mov	r1, r5
 800cb2e:	f000 f82f 	bl	800cb90 <_malloc_r>
 800cb32:	4606      	mov	r6, r0
 800cb34:	b928      	cbnz	r0, 800cb42 <_calloc_r+0x1e>
 800cb36:	2600      	movs	r6, #0
 800cb38:	4630      	mov	r0, r6
 800cb3a:	bd70      	pop	{r4, r5, r6, pc}
 800cb3c:	220c      	movs	r2, #12
 800cb3e:	6002      	str	r2, [r0, #0]
 800cb40:	e7f9      	b.n	800cb36 <_calloc_r+0x12>
 800cb42:	462a      	mov	r2, r5
 800cb44:	4621      	mov	r1, r4
 800cb46:	f000 f8e5 	bl	800cd14 <memset>
 800cb4a:	e7f5      	b.n	800cb38 <_calloc_r+0x14>

0800cb4c <sbrk_aligned>:
 800cb4c:	b570      	push	{r4, r5, r6, lr}
 800cb4e:	4e0f      	ldr	r6, [pc, #60]	@ (800cb8c <sbrk_aligned+0x40>)
 800cb50:	460c      	mov	r4, r1
 800cb52:	6831      	ldr	r1, [r6, #0]
 800cb54:	4605      	mov	r5, r0
 800cb56:	b911      	cbnz	r1, 800cb5e <sbrk_aligned+0x12>
 800cb58:	f000 f8e4 	bl	800cd24 <_sbrk_r>
 800cb5c:	6030      	str	r0, [r6, #0]
 800cb5e:	4621      	mov	r1, r4
 800cb60:	4628      	mov	r0, r5
 800cb62:	f000 f8df 	bl	800cd24 <_sbrk_r>
 800cb66:	1c43      	adds	r3, r0, #1
 800cb68:	d103      	bne.n	800cb72 <sbrk_aligned+0x26>
 800cb6a:	f04f 34ff 	mov.w	r4, #4294967295
 800cb6e:	4620      	mov	r0, r4
 800cb70:	bd70      	pop	{r4, r5, r6, pc}
 800cb72:	1cc4      	adds	r4, r0, #3
 800cb74:	f024 0403 	bic.w	r4, r4, #3
 800cb78:	42a0      	cmp	r0, r4
 800cb7a:	d0f8      	beq.n	800cb6e <sbrk_aligned+0x22>
 800cb7c:	1a21      	subs	r1, r4, r0
 800cb7e:	4628      	mov	r0, r5
 800cb80:	f000 f8d0 	bl	800cd24 <_sbrk_r>
 800cb84:	3001      	adds	r0, #1
 800cb86:	d1f2      	bne.n	800cb6e <sbrk_aligned+0x22>
 800cb88:	e7ef      	b.n	800cb6a <sbrk_aligned+0x1e>
 800cb8a:	bf00      	nop
 800cb8c:	20001a28 	.word	0x20001a28

0800cb90 <_malloc_r>:
 800cb90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb94:	1ccd      	adds	r5, r1, #3
 800cb96:	f025 0503 	bic.w	r5, r5, #3
 800cb9a:	3508      	adds	r5, #8
 800cb9c:	2d0c      	cmp	r5, #12
 800cb9e:	bf38      	it	cc
 800cba0:	250c      	movcc	r5, #12
 800cba2:	2d00      	cmp	r5, #0
 800cba4:	4606      	mov	r6, r0
 800cba6:	db01      	blt.n	800cbac <_malloc_r+0x1c>
 800cba8:	42a9      	cmp	r1, r5
 800cbaa:	d904      	bls.n	800cbb6 <_malloc_r+0x26>
 800cbac:	230c      	movs	r3, #12
 800cbae:	6033      	str	r3, [r6, #0]
 800cbb0:	2000      	movs	r0, #0
 800cbb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cbb6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cc8c <_malloc_r+0xfc>
 800cbba:	f000 f869 	bl	800cc90 <__malloc_lock>
 800cbbe:	f8d8 3000 	ldr.w	r3, [r8]
 800cbc2:	461c      	mov	r4, r3
 800cbc4:	bb44      	cbnz	r4, 800cc18 <_malloc_r+0x88>
 800cbc6:	4629      	mov	r1, r5
 800cbc8:	4630      	mov	r0, r6
 800cbca:	f7ff ffbf 	bl	800cb4c <sbrk_aligned>
 800cbce:	1c43      	adds	r3, r0, #1
 800cbd0:	4604      	mov	r4, r0
 800cbd2:	d158      	bne.n	800cc86 <_malloc_r+0xf6>
 800cbd4:	f8d8 4000 	ldr.w	r4, [r8]
 800cbd8:	4627      	mov	r7, r4
 800cbda:	2f00      	cmp	r7, #0
 800cbdc:	d143      	bne.n	800cc66 <_malloc_r+0xd6>
 800cbde:	2c00      	cmp	r4, #0
 800cbe0:	d04b      	beq.n	800cc7a <_malloc_r+0xea>
 800cbe2:	6823      	ldr	r3, [r4, #0]
 800cbe4:	4639      	mov	r1, r7
 800cbe6:	4630      	mov	r0, r6
 800cbe8:	eb04 0903 	add.w	r9, r4, r3
 800cbec:	f000 f89a 	bl	800cd24 <_sbrk_r>
 800cbf0:	4581      	cmp	r9, r0
 800cbf2:	d142      	bne.n	800cc7a <_malloc_r+0xea>
 800cbf4:	6821      	ldr	r1, [r4, #0]
 800cbf6:	4630      	mov	r0, r6
 800cbf8:	1a6d      	subs	r5, r5, r1
 800cbfa:	4629      	mov	r1, r5
 800cbfc:	f7ff ffa6 	bl	800cb4c <sbrk_aligned>
 800cc00:	3001      	adds	r0, #1
 800cc02:	d03a      	beq.n	800cc7a <_malloc_r+0xea>
 800cc04:	6823      	ldr	r3, [r4, #0]
 800cc06:	442b      	add	r3, r5
 800cc08:	6023      	str	r3, [r4, #0]
 800cc0a:	f8d8 3000 	ldr.w	r3, [r8]
 800cc0e:	685a      	ldr	r2, [r3, #4]
 800cc10:	bb62      	cbnz	r2, 800cc6c <_malloc_r+0xdc>
 800cc12:	f8c8 7000 	str.w	r7, [r8]
 800cc16:	e00f      	b.n	800cc38 <_malloc_r+0xa8>
 800cc18:	6822      	ldr	r2, [r4, #0]
 800cc1a:	1b52      	subs	r2, r2, r5
 800cc1c:	d420      	bmi.n	800cc60 <_malloc_r+0xd0>
 800cc1e:	2a0b      	cmp	r2, #11
 800cc20:	d917      	bls.n	800cc52 <_malloc_r+0xc2>
 800cc22:	1961      	adds	r1, r4, r5
 800cc24:	42a3      	cmp	r3, r4
 800cc26:	6025      	str	r5, [r4, #0]
 800cc28:	bf18      	it	ne
 800cc2a:	6059      	strne	r1, [r3, #4]
 800cc2c:	6863      	ldr	r3, [r4, #4]
 800cc2e:	bf08      	it	eq
 800cc30:	f8c8 1000 	streq.w	r1, [r8]
 800cc34:	5162      	str	r2, [r4, r5]
 800cc36:	604b      	str	r3, [r1, #4]
 800cc38:	4630      	mov	r0, r6
 800cc3a:	f000 f82f 	bl	800cc9c <__malloc_unlock>
 800cc3e:	f104 000b 	add.w	r0, r4, #11
 800cc42:	1d23      	adds	r3, r4, #4
 800cc44:	f020 0007 	bic.w	r0, r0, #7
 800cc48:	1ac2      	subs	r2, r0, r3
 800cc4a:	bf1c      	itt	ne
 800cc4c:	1a1b      	subne	r3, r3, r0
 800cc4e:	50a3      	strne	r3, [r4, r2]
 800cc50:	e7af      	b.n	800cbb2 <_malloc_r+0x22>
 800cc52:	6862      	ldr	r2, [r4, #4]
 800cc54:	42a3      	cmp	r3, r4
 800cc56:	bf0c      	ite	eq
 800cc58:	f8c8 2000 	streq.w	r2, [r8]
 800cc5c:	605a      	strne	r2, [r3, #4]
 800cc5e:	e7eb      	b.n	800cc38 <_malloc_r+0xa8>
 800cc60:	4623      	mov	r3, r4
 800cc62:	6864      	ldr	r4, [r4, #4]
 800cc64:	e7ae      	b.n	800cbc4 <_malloc_r+0x34>
 800cc66:	463c      	mov	r4, r7
 800cc68:	687f      	ldr	r7, [r7, #4]
 800cc6a:	e7b6      	b.n	800cbda <_malloc_r+0x4a>
 800cc6c:	461a      	mov	r2, r3
 800cc6e:	685b      	ldr	r3, [r3, #4]
 800cc70:	42a3      	cmp	r3, r4
 800cc72:	d1fb      	bne.n	800cc6c <_malloc_r+0xdc>
 800cc74:	2300      	movs	r3, #0
 800cc76:	6053      	str	r3, [r2, #4]
 800cc78:	e7de      	b.n	800cc38 <_malloc_r+0xa8>
 800cc7a:	230c      	movs	r3, #12
 800cc7c:	4630      	mov	r0, r6
 800cc7e:	6033      	str	r3, [r6, #0]
 800cc80:	f000 f80c 	bl	800cc9c <__malloc_unlock>
 800cc84:	e794      	b.n	800cbb0 <_malloc_r+0x20>
 800cc86:	6005      	str	r5, [r0, #0]
 800cc88:	e7d6      	b.n	800cc38 <_malloc_r+0xa8>
 800cc8a:	bf00      	nop
 800cc8c:	20001a2c 	.word	0x20001a2c

0800cc90 <__malloc_lock>:
 800cc90:	4801      	ldr	r0, [pc, #4]	@ (800cc98 <__malloc_lock+0x8>)
 800cc92:	f000 b881 	b.w	800cd98 <__retarget_lock_acquire_recursive>
 800cc96:	bf00      	nop
 800cc98:	20001b6c 	.word	0x20001b6c

0800cc9c <__malloc_unlock>:
 800cc9c:	4801      	ldr	r0, [pc, #4]	@ (800cca4 <__malloc_unlock+0x8>)
 800cc9e:	f000 b87c 	b.w	800cd9a <__retarget_lock_release_recursive>
 800cca2:	bf00      	nop
 800cca4:	20001b6c 	.word	0x20001b6c

0800cca8 <realloc>:
 800cca8:	4b02      	ldr	r3, [pc, #8]	@ (800ccb4 <realloc+0xc>)
 800ccaa:	460a      	mov	r2, r1
 800ccac:	4601      	mov	r1, r0
 800ccae:	6818      	ldr	r0, [r3, #0]
 800ccb0:	f000 b802 	b.w	800ccb8 <_realloc_r>
 800ccb4:	20000018 	.word	0x20000018

0800ccb8 <_realloc_r>:
 800ccb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccbc:	4680      	mov	r8, r0
 800ccbe:	4615      	mov	r5, r2
 800ccc0:	460c      	mov	r4, r1
 800ccc2:	b921      	cbnz	r1, 800ccce <_realloc_r+0x16>
 800ccc4:	4611      	mov	r1, r2
 800ccc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ccca:	f7ff bf61 	b.w	800cb90 <_malloc_r>
 800ccce:	b92a      	cbnz	r2, 800ccdc <_realloc_r+0x24>
 800ccd0:	f000 f872 	bl	800cdb8 <_free_r>
 800ccd4:	2400      	movs	r4, #0
 800ccd6:	4620      	mov	r0, r4
 800ccd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccdc:	f000 f8b4 	bl	800ce48 <_malloc_usable_size_r>
 800cce0:	4285      	cmp	r5, r0
 800cce2:	4606      	mov	r6, r0
 800cce4:	d802      	bhi.n	800ccec <_realloc_r+0x34>
 800cce6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ccea:	d8f4      	bhi.n	800ccd6 <_realloc_r+0x1e>
 800ccec:	4629      	mov	r1, r5
 800ccee:	4640      	mov	r0, r8
 800ccf0:	f7ff ff4e 	bl	800cb90 <_malloc_r>
 800ccf4:	4607      	mov	r7, r0
 800ccf6:	2800      	cmp	r0, #0
 800ccf8:	d0ec      	beq.n	800ccd4 <_realloc_r+0x1c>
 800ccfa:	42b5      	cmp	r5, r6
 800ccfc:	462a      	mov	r2, r5
 800ccfe:	4621      	mov	r1, r4
 800cd00:	bf28      	it	cs
 800cd02:	4632      	movcs	r2, r6
 800cd04:	f000 f84a 	bl	800cd9c <memcpy>
 800cd08:	4621      	mov	r1, r4
 800cd0a:	4640      	mov	r0, r8
 800cd0c:	f000 f854 	bl	800cdb8 <_free_r>
 800cd10:	463c      	mov	r4, r7
 800cd12:	e7e0      	b.n	800ccd6 <_realloc_r+0x1e>

0800cd14 <memset>:
 800cd14:	4603      	mov	r3, r0
 800cd16:	4402      	add	r2, r0
 800cd18:	4293      	cmp	r3, r2
 800cd1a:	d100      	bne.n	800cd1e <memset+0xa>
 800cd1c:	4770      	bx	lr
 800cd1e:	f803 1b01 	strb.w	r1, [r3], #1
 800cd22:	e7f9      	b.n	800cd18 <memset+0x4>

0800cd24 <_sbrk_r>:
 800cd24:	b538      	push	{r3, r4, r5, lr}
 800cd26:	2300      	movs	r3, #0
 800cd28:	4d05      	ldr	r5, [pc, #20]	@ (800cd40 <_sbrk_r+0x1c>)
 800cd2a:	4604      	mov	r4, r0
 800cd2c:	4608      	mov	r0, r1
 800cd2e:	602b      	str	r3, [r5, #0]
 800cd30:	f7fc f9fc 	bl	800912c <_sbrk>
 800cd34:	1c43      	adds	r3, r0, #1
 800cd36:	d102      	bne.n	800cd3e <_sbrk_r+0x1a>
 800cd38:	682b      	ldr	r3, [r5, #0]
 800cd3a:	b103      	cbz	r3, 800cd3e <_sbrk_r+0x1a>
 800cd3c:	6023      	str	r3, [r4, #0]
 800cd3e:	bd38      	pop	{r3, r4, r5, pc}
 800cd40:	20001b68 	.word	0x20001b68

0800cd44 <__errno>:
 800cd44:	4b01      	ldr	r3, [pc, #4]	@ (800cd4c <__errno+0x8>)
 800cd46:	6818      	ldr	r0, [r3, #0]
 800cd48:	4770      	bx	lr
 800cd4a:	bf00      	nop
 800cd4c:	20000018 	.word	0x20000018

0800cd50 <__libc_init_array>:
 800cd50:	b570      	push	{r4, r5, r6, lr}
 800cd52:	2600      	movs	r6, #0
 800cd54:	4d0c      	ldr	r5, [pc, #48]	@ (800cd88 <__libc_init_array+0x38>)
 800cd56:	4c0d      	ldr	r4, [pc, #52]	@ (800cd8c <__libc_init_array+0x3c>)
 800cd58:	1b64      	subs	r4, r4, r5
 800cd5a:	10a4      	asrs	r4, r4, #2
 800cd5c:	42a6      	cmp	r6, r4
 800cd5e:	d109      	bne.n	800cd74 <__libc_init_array+0x24>
 800cd60:	f000 f87a 	bl	800ce58 <_init>
 800cd64:	2600      	movs	r6, #0
 800cd66:	4d0a      	ldr	r5, [pc, #40]	@ (800cd90 <__libc_init_array+0x40>)
 800cd68:	4c0a      	ldr	r4, [pc, #40]	@ (800cd94 <__libc_init_array+0x44>)
 800cd6a:	1b64      	subs	r4, r4, r5
 800cd6c:	10a4      	asrs	r4, r4, #2
 800cd6e:	42a6      	cmp	r6, r4
 800cd70:	d105      	bne.n	800cd7e <__libc_init_array+0x2e>
 800cd72:	bd70      	pop	{r4, r5, r6, pc}
 800cd74:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd78:	4798      	blx	r3
 800cd7a:	3601      	adds	r6, #1
 800cd7c:	e7ee      	b.n	800cd5c <__libc_init_array+0xc>
 800cd7e:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd82:	4798      	blx	r3
 800cd84:	3601      	adds	r6, #1
 800cd86:	e7f2      	b.n	800cd6e <__libc_init_array+0x1e>
 800cd88:	0800d5d0 	.word	0x0800d5d0
 800cd8c:	0800d5d0 	.word	0x0800d5d0
 800cd90:	0800d5d0 	.word	0x0800d5d0
 800cd94:	0800d5d8 	.word	0x0800d5d8

0800cd98 <__retarget_lock_acquire_recursive>:
 800cd98:	4770      	bx	lr

0800cd9a <__retarget_lock_release_recursive>:
 800cd9a:	4770      	bx	lr

0800cd9c <memcpy>:
 800cd9c:	440a      	add	r2, r1
 800cd9e:	4291      	cmp	r1, r2
 800cda0:	f100 33ff 	add.w	r3, r0, #4294967295
 800cda4:	d100      	bne.n	800cda8 <memcpy+0xc>
 800cda6:	4770      	bx	lr
 800cda8:	b510      	push	{r4, lr}
 800cdaa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cdae:	4291      	cmp	r1, r2
 800cdb0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cdb4:	d1f9      	bne.n	800cdaa <memcpy+0xe>
 800cdb6:	bd10      	pop	{r4, pc}

0800cdb8 <_free_r>:
 800cdb8:	b538      	push	{r3, r4, r5, lr}
 800cdba:	4605      	mov	r5, r0
 800cdbc:	2900      	cmp	r1, #0
 800cdbe:	d040      	beq.n	800ce42 <_free_r+0x8a>
 800cdc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cdc4:	1f0c      	subs	r4, r1, #4
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	bfb8      	it	lt
 800cdca:	18e4      	addlt	r4, r4, r3
 800cdcc:	f7ff ff60 	bl	800cc90 <__malloc_lock>
 800cdd0:	4a1c      	ldr	r2, [pc, #112]	@ (800ce44 <_free_r+0x8c>)
 800cdd2:	6813      	ldr	r3, [r2, #0]
 800cdd4:	b933      	cbnz	r3, 800cde4 <_free_r+0x2c>
 800cdd6:	6063      	str	r3, [r4, #4]
 800cdd8:	6014      	str	r4, [r2, #0]
 800cdda:	4628      	mov	r0, r5
 800cddc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cde0:	f7ff bf5c 	b.w	800cc9c <__malloc_unlock>
 800cde4:	42a3      	cmp	r3, r4
 800cde6:	d908      	bls.n	800cdfa <_free_r+0x42>
 800cde8:	6820      	ldr	r0, [r4, #0]
 800cdea:	1821      	adds	r1, r4, r0
 800cdec:	428b      	cmp	r3, r1
 800cdee:	bf01      	itttt	eq
 800cdf0:	6819      	ldreq	r1, [r3, #0]
 800cdf2:	685b      	ldreq	r3, [r3, #4]
 800cdf4:	1809      	addeq	r1, r1, r0
 800cdf6:	6021      	streq	r1, [r4, #0]
 800cdf8:	e7ed      	b.n	800cdd6 <_free_r+0x1e>
 800cdfa:	461a      	mov	r2, r3
 800cdfc:	685b      	ldr	r3, [r3, #4]
 800cdfe:	b10b      	cbz	r3, 800ce04 <_free_r+0x4c>
 800ce00:	42a3      	cmp	r3, r4
 800ce02:	d9fa      	bls.n	800cdfa <_free_r+0x42>
 800ce04:	6811      	ldr	r1, [r2, #0]
 800ce06:	1850      	adds	r0, r2, r1
 800ce08:	42a0      	cmp	r0, r4
 800ce0a:	d10b      	bne.n	800ce24 <_free_r+0x6c>
 800ce0c:	6820      	ldr	r0, [r4, #0]
 800ce0e:	4401      	add	r1, r0
 800ce10:	1850      	adds	r0, r2, r1
 800ce12:	4283      	cmp	r3, r0
 800ce14:	6011      	str	r1, [r2, #0]
 800ce16:	d1e0      	bne.n	800cdda <_free_r+0x22>
 800ce18:	6818      	ldr	r0, [r3, #0]
 800ce1a:	685b      	ldr	r3, [r3, #4]
 800ce1c:	4408      	add	r0, r1
 800ce1e:	6010      	str	r0, [r2, #0]
 800ce20:	6053      	str	r3, [r2, #4]
 800ce22:	e7da      	b.n	800cdda <_free_r+0x22>
 800ce24:	d902      	bls.n	800ce2c <_free_r+0x74>
 800ce26:	230c      	movs	r3, #12
 800ce28:	602b      	str	r3, [r5, #0]
 800ce2a:	e7d6      	b.n	800cdda <_free_r+0x22>
 800ce2c:	6820      	ldr	r0, [r4, #0]
 800ce2e:	1821      	adds	r1, r4, r0
 800ce30:	428b      	cmp	r3, r1
 800ce32:	bf01      	itttt	eq
 800ce34:	6819      	ldreq	r1, [r3, #0]
 800ce36:	685b      	ldreq	r3, [r3, #4]
 800ce38:	1809      	addeq	r1, r1, r0
 800ce3a:	6021      	streq	r1, [r4, #0]
 800ce3c:	6063      	str	r3, [r4, #4]
 800ce3e:	6054      	str	r4, [r2, #4]
 800ce40:	e7cb      	b.n	800cdda <_free_r+0x22>
 800ce42:	bd38      	pop	{r3, r4, r5, pc}
 800ce44:	20001a2c 	.word	0x20001a2c

0800ce48 <_malloc_usable_size_r>:
 800ce48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ce4c:	1f18      	subs	r0, r3, #4
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	bfbc      	itt	lt
 800ce52:	580b      	ldrlt	r3, [r1, r0]
 800ce54:	18c0      	addlt	r0, r0, r3
 800ce56:	4770      	bx	lr

0800ce58 <_init>:
 800ce58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce5a:	bf00      	nop
 800ce5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce5e:	bc08      	pop	{r3}
 800ce60:	469e      	mov	lr, r3
 800ce62:	4770      	bx	lr

0800ce64 <_fini>:
 800ce64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce66:	bf00      	nop
 800ce68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce6a:	bc08      	pop	{r3}
 800ce6c:	469e      	mov	lr, r3
 800ce6e:	4770      	bx	lr
