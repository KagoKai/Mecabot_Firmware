
motor_control_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006df4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f4  08006f00  08006f00  00007f00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080071f4  080071f4  00009060  2**0
                  CONTENTS
  4 .ARM          00000008  080071f4  080071f4  000081f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080071fc  080071fc  00009060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080071fc  080071fc  000081fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007204  08007204  00008204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08007208  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004414  20000060  08007268  00009060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004474  08007268  00009474  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00009060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014ee9  00000000  00000000  00009089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cfd  00000000  00000000  0001df72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fa8  00000000  00000000  00020c70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c33  00000000  00000000  00021c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019e8c  00000000  00000000  0002284b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001247a  00000000  00000000  0003c6d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000910f9  00000000  00000000  0004eb51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dfc4a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004640  00000000  00000000  000dfc90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  000e42d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000060 	.word	0x20000060
 8000128:	00000000 	.word	0x00000000
 800012c:	08006ee8 	.word	0x08006ee8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000064 	.word	0x20000064
 8000148:	08006ee8 	.word	0x08006ee8

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_frsub>:
 800015c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000160:	e002      	b.n	8000168 <__addsf3>
 8000162:	bf00      	nop

08000164 <__aeabi_fsub>:
 8000164:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000168 <__addsf3>:
 8000168:	0042      	lsls	r2, r0, #1
 800016a:	bf1f      	itttt	ne
 800016c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000170:	ea92 0f03 	teqne	r2, r3
 8000174:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000178:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800017c:	d06a      	beq.n	8000254 <__addsf3+0xec>
 800017e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000182:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000186:	bfc1      	itttt	gt
 8000188:	18d2      	addgt	r2, r2, r3
 800018a:	4041      	eorgt	r1, r0
 800018c:	4048      	eorgt	r0, r1
 800018e:	4041      	eorgt	r1, r0
 8000190:	bfb8      	it	lt
 8000192:	425b      	neglt	r3, r3
 8000194:	2b19      	cmp	r3, #25
 8000196:	bf88      	it	hi
 8000198:	4770      	bxhi	lr
 800019a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800019e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001a2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4240      	negne	r0, r0
 80001aa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001ae:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001b2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001b6:	bf18      	it	ne
 80001b8:	4249      	negne	r1, r1
 80001ba:	ea92 0f03 	teq	r2, r3
 80001be:	d03f      	beq.n	8000240 <__addsf3+0xd8>
 80001c0:	f1a2 0201 	sub.w	r2, r2, #1
 80001c4:	fa41 fc03 	asr.w	ip, r1, r3
 80001c8:	eb10 000c 	adds.w	r0, r0, ip
 80001cc:	f1c3 0320 	rsb	r3, r3, #32
 80001d0:	fa01 f103 	lsl.w	r1, r1, r3
 80001d4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001d8:	d502      	bpl.n	80001e0 <__addsf3+0x78>
 80001da:	4249      	negs	r1, r1
 80001dc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001e0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001e4:	d313      	bcc.n	800020e <__addsf3+0xa6>
 80001e6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001ea:	d306      	bcc.n	80001fa <__addsf3+0x92>
 80001ec:	0840      	lsrs	r0, r0, #1
 80001ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80001f2:	f102 0201 	add.w	r2, r2, #1
 80001f6:	2afe      	cmp	r2, #254	@ 0xfe
 80001f8:	d251      	bcs.n	800029e <__addsf3+0x136>
 80001fa:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001fe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000202:	bf08      	it	eq
 8000204:	f020 0001 	biceq.w	r0, r0, #1
 8000208:	ea40 0003 	orr.w	r0, r0, r3
 800020c:	4770      	bx	lr
 800020e:	0049      	lsls	r1, r1, #1
 8000210:	eb40 0000 	adc.w	r0, r0, r0
 8000214:	3a01      	subs	r2, #1
 8000216:	bf28      	it	cs
 8000218:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800021c:	d2ed      	bcs.n	80001fa <__addsf3+0x92>
 800021e:	fab0 fc80 	clz	ip, r0
 8000222:	f1ac 0c08 	sub.w	ip, ip, #8
 8000226:	ebb2 020c 	subs.w	r2, r2, ip
 800022a:	fa00 f00c 	lsl.w	r0, r0, ip
 800022e:	bfaa      	itet	ge
 8000230:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000234:	4252      	neglt	r2, r2
 8000236:	4318      	orrge	r0, r3
 8000238:	bfbc      	itt	lt
 800023a:	40d0      	lsrlt	r0, r2
 800023c:	4318      	orrlt	r0, r3
 800023e:	4770      	bx	lr
 8000240:	f092 0f00 	teq	r2, #0
 8000244:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000248:	bf06      	itte	eq
 800024a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800024e:	3201      	addeq	r2, #1
 8000250:	3b01      	subne	r3, #1
 8000252:	e7b5      	b.n	80001c0 <__addsf3+0x58>
 8000254:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000258:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800025c:	bf18      	it	ne
 800025e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000262:	d021      	beq.n	80002a8 <__addsf3+0x140>
 8000264:	ea92 0f03 	teq	r2, r3
 8000268:	d004      	beq.n	8000274 <__addsf3+0x10c>
 800026a:	f092 0f00 	teq	r2, #0
 800026e:	bf08      	it	eq
 8000270:	4608      	moveq	r0, r1
 8000272:	4770      	bx	lr
 8000274:	ea90 0f01 	teq	r0, r1
 8000278:	bf1c      	itt	ne
 800027a:	2000      	movne	r0, #0
 800027c:	4770      	bxne	lr
 800027e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000282:	d104      	bne.n	800028e <__addsf3+0x126>
 8000284:	0040      	lsls	r0, r0, #1
 8000286:	bf28      	it	cs
 8000288:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800028c:	4770      	bx	lr
 800028e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000292:	bf3c      	itt	cc
 8000294:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000298:	4770      	bxcc	lr
 800029a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800029e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80002a2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002a6:	4770      	bx	lr
 80002a8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002ac:	bf16      	itet	ne
 80002ae:	4608      	movne	r0, r1
 80002b0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002b4:	4601      	movne	r1, r0
 80002b6:	0242      	lsls	r2, r0, #9
 80002b8:	bf06      	itte	eq
 80002ba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002be:	ea90 0f01 	teqeq	r0, r1
 80002c2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_ui2f>:
 80002c8:	f04f 0300 	mov.w	r3, #0
 80002cc:	e004      	b.n	80002d8 <__aeabi_i2f+0x8>
 80002ce:	bf00      	nop

080002d0 <__aeabi_i2f>:
 80002d0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002d4:	bf48      	it	mi
 80002d6:	4240      	negmi	r0, r0
 80002d8:	ea5f 0c00 	movs.w	ip, r0
 80002dc:	bf08      	it	eq
 80002de:	4770      	bxeq	lr
 80002e0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002e4:	4601      	mov	r1, r0
 80002e6:	f04f 0000 	mov.w	r0, #0
 80002ea:	e01c      	b.n	8000326 <__aeabi_l2f+0x2a>

080002ec <__aeabi_ul2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f04f 0300 	mov.w	r3, #0
 80002f8:	e00a      	b.n	8000310 <__aeabi_l2f+0x14>
 80002fa:	bf00      	nop

080002fc <__aeabi_l2f>:
 80002fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000300:	bf08      	it	eq
 8000302:	4770      	bxeq	lr
 8000304:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000308:	d502      	bpl.n	8000310 <__aeabi_l2f+0x14>
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	ea5f 0c01 	movs.w	ip, r1
 8000314:	bf02      	ittt	eq
 8000316:	4684      	moveq	ip, r0
 8000318:	4601      	moveq	r1, r0
 800031a:	2000      	moveq	r0, #0
 800031c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000320:	bf08      	it	eq
 8000322:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000326:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800032a:	fabc f28c 	clz	r2, ip
 800032e:	3a08      	subs	r2, #8
 8000330:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000334:	db10      	blt.n	8000358 <__aeabi_l2f+0x5c>
 8000336:	fa01 fc02 	lsl.w	ip, r1, r2
 800033a:	4463      	add	r3, ip
 800033c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000340:	f1c2 0220 	rsb	r2, r2, #32
 8000344:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000348:	fa20 f202 	lsr.w	r2, r0, r2
 800034c:	eb43 0002 	adc.w	r0, r3, r2
 8000350:	bf08      	it	eq
 8000352:	f020 0001 	biceq.w	r0, r0, #1
 8000356:	4770      	bx	lr
 8000358:	f102 0220 	add.w	r2, r2, #32
 800035c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000360:	f1c2 0220 	rsb	r2, r2, #32
 8000364:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000368:	fa21 f202 	lsr.w	r2, r1, r2
 800036c:	eb43 0002 	adc.w	r0, r3, r2
 8000370:	bf08      	it	eq
 8000372:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000376:	4770      	bx	lr

08000378 <__aeabi_fmul>:
 8000378:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800037c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000380:	bf1e      	ittt	ne
 8000382:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000386:	ea92 0f0c 	teqne	r2, ip
 800038a:	ea93 0f0c 	teqne	r3, ip
 800038e:	d06f      	beq.n	8000470 <__aeabi_fmul+0xf8>
 8000390:	441a      	add	r2, r3
 8000392:	ea80 0c01 	eor.w	ip, r0, r1
 8000396:	0240      	lsls	r0, r0, #9
 8000398:	bf18      	it	ne
 800039a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800039e:	d01e      	beq.n	80003de <__aeabi_fmul+0x66>
 80003a0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80003a4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003a8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003ac:	fba0 3101 	umull	r3, r1, r0, r1
 80003b0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003b4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003b8:	bf3e      	ittt	cc
 80003ba:	0049      	lslcc	r1, r1, #1
 80003bc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003c0:	005b      	lslcc	r3, r3, #1
 80003c2:	ea40 0001 	orr.w	r0, r0, r1
 80003c6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003ca:	2afd      	cmp	r2, #253	@ 0xfd
 80003cc:	d81d      	bhi.n	800040a <__aeabi_fmul+0x92>
 80003ce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003d2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003d6:	bf08      	it	eq
 80003d8:	f020 0001 	biceq.w	r0, r0, #1
 80003dc:	4770      	bx	lr
 80003de:	f090 0f00 	teq	r0, #0
 80003e2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003e6:	bf08      	it	eq
 80003e8:	0249      	lsleq	r1, r1, #9
 80003ea:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003ee:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003f2:	3a7f      	subs	r2, #127	@ 0x7f
 80003f4:	bfc2      	ittt	gt
 80003f6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003fa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003fe:	4770      	bxgt	lr
 8000400:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000404:	f04f 0300 	mov.w	r3, #0
 8000408:	3a01      	subs	r2, #1
 800040a:	dc5d      	bgt.n	80004c8 <__aeabi_fmul+0x150>
 800040c:	f112 0f19 	cmn.w	r2, #25
 8000410:	bfdc      	itt	le
 8000412:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000416:	4770      	bxle	lr
 8000418:	f1c2 0200 	rsb	r2, r2, #0
 800041c:	0041      	lsls	r1, r0, #1
 800041e:	fa21 f102 	lsr.w	r1, r1, r2
 8000422:	f1c2 0220 	rsb	r2, r2, #32
 8000426:	fa00 fc02 	lsl.w	ip, r0, r2
 800042a:	ea5f 0031 	movs.w	r0, r1, rrx
 800042e:	f140 0000 	adc.w	r0, r0, #0
 8000432:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000436:	bf08      	it	eq
 8000438:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800043c:	4770      	bx	lr
 800043e:	f092 0f00 	teq	r2, #0
 8000442:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000446:	bf02      	ittt	eq
 8000448:	0040      	lsleq	r0, r0, #1
 800044a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800044e:	3a01      	subeq	r2, #1
 8000450:	d0f9      	beq.n	8000446 <__aeabi_fmul+0xce>
 8000452:	ea40 000c 	orr.w	r0, r0, ip
 8000456:	f093 0f00 	teq	r3, #0
 800045a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800045e:	bf02      	ittt	eq
 8000460:	0049      	lsleq	r1, r1, #1
 8000462:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000466:	3b01      	subeq	r3, #1
 8000468:	d0f9      	beq.n	800045e <__aeabi_fmul+0xe6>
 800046a:	ea41 010c 	orr.w	r1, r1, ip
 800046e:	e78f      	b.n	8000390 <__aeabi_fmul+0x18>
 8000470:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000474:	ea92 0f0c 	teq	r2, ip
 8000478:	bf18      	it	ne
 800047a:	ea93 0f0c 	teqne	r3, ip
 800047e:	d00a      	beq.n	8000496 <__aeabi_fmul+0x11e>
 8000480:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000484:	bf18      	it	ne
 8000486:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800048a:	d1d8      	bne.n	800043e <__aeabi_fmul+0xc6>
 800048c:	ea80 0001 	eor.w	r0, r0, r1
 8000490:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000494:	4770      	bx	lr
 8000496:	f090 0f00 	teq	r0, #0
 800049a:	bf17      	itett	ne
 800049c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80004a0:	4608      	moveq	r0, r1
 80004a2:	f091 0f00 	teqne	r1, #0
 80004a6:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80004aa:	d014      	beq.n	80004d6 <__aeabi_fmul+0x15e>
 80004ac:	ea92 0f0c 	teq	r2, ip
 80004b0:	d101      	bne.n	80004b6 <__aeabi_fmul+0x13e>
 80004b2:	0242      	lsls	r2, r0, #9
 80004b4:	d10f      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004b6:	ea93 0f0c 	teq	r3, ip
 80004ba:	d103      	bne.n	80004c4 <__aeabi_fmul+0x14c>
 80004bc:	024b      	lsls	r3, r1, #9
 80004be:	bf18      	it	ne
 80004c0:	4608      	movne	r0, r1
 80004c2:	d108      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004c4:	ea80 0001 	eor.w	r0, r0, r1
 80004c8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004cc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004d0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004d4:	4770      	bx	lr
 80004d6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004da:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004de:	4770      	bx	lr

080004e0 <__aeabi_fdiv>:
 80004e0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004e4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004e8:	bf1e      	ittt	ne
 80004ea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004ee:	ea92 0f0c 	teqne	r2, ip
 80004f2:	ea93 0f0c 	teqne	r3, ip
 80004f6:	d069      	beq.n	80005cc <__aeabi_fdiv+0xec>
 80004f8:	eba2 0203 	sub.w	r2, r2, r3
 80004fc:	ea80 0c01 	eor.w	ip, r0, r1
 8000500:	0249      	lsls	r1, r1, #9
 8000502:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000506:	d037      	beq.n	8000578 <__aeabi_fdiv+0x98>
 8000508:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800050c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000510:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000514:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000518:	428b      	cmp	r3, r1
 800051a:	bf38      	it	cc
 800051c:	005b      	lslcc	r3, r3, #1
 800051e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000522:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000526:	428b      	cmp	r3, r1
 8000528:	bf24      	itt	cs
 800052a:	1a5b      	subcs	r3, r3, r1
 800052c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000530:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000534:	bf24      	itt	cs
 8000536:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800053a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800053e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000542:	bf24      	itt	cs
 8000544:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000548:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800054c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000550:	bf24      	itt	cs
 8000552:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000556:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800055a:	011b      	lsls	r3, r3, #4
 800055c:	bf18      	it	ne
 800055e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000562:	d1e0      	bne.n	8000526 <__aeabi_fdiv+0x46>
 8000564:	2afd      	cmp	r2, #253	@ 0xfd
 8000566:	f63f af50 	bhi.w	800040a <__aeabi_fmul+0x92>
 800056a:	428b      	cmp	r3, r1
 800056c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000570:	bf08      	it	eq
 8000572:	f020 0001 	biceq.w	r0, r0, #1
 8000576:	4770      	bx	lr
 8000578:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800057c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000580:	327f      	adds	r2, #127	@ 0x7f
 8000582:	bfc2      	ittt	gt
 8000584:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000588:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800058c:	4770      	bxgt	lr
 800058e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000592:	f04f 0300 	mov.w	r3, #0
 8000596:	3a01      	subs	r2, #1
 8000598:	e737      	b.n	800040a <__aeabi_fmul+0x92>
 800059a:	f092 0f00 	teq	r2, #0
 800059e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80005a2:	bf02      	ittt	eq
 80005a4:	0040      	lsleq	r0, r0, #1
 80005a6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80005aa:	3a01      	subeq	r2, #1
 80005ac:	d0f9      	beq.n	80005a2 <__aeabi_fdiv+0xc2>
 80005ae:	ea40 000c 	orr.w	r0, r0, ip
 80005b2:	f093 0f00 	teq	r3, #0
 80005b6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005ba:	bf02      	ittt	eq
 80005bc:	0049      	lsleq	r1, r1, #1
 80005be:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005c2:	3b01      	subeq	r3, #1
 80005c4:	d0f9      	beq.n	80005ba <__aeabi_fdiv+0xda>
 80005c6:	ea41 010c 	orr.w	r1, r1, ip
 80005ca:	e795      	b.n	80004f8 <__aeabi_fdiv+0x18>
 80005cc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005d0:	ea92 0f0c 	teq	r2, ip
 80005d4:	d108      	bne.n	80005e8 <__aeabi_fdiv+0x108>
 80005d6:	0242      	lsls	r2, r0, #9
 80005d8:	f47f af7d 	bne.w	80004d6 <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	f47f af70 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e776      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005e8:	ea93 0f0c 	teq	r3, ip
 80005ec:	d104      	bne.n	80005f8 <__aeabi_fdiv+0x118>
 80005ee:	024b      	lsls	r3, r1, #9
 80005f0:	f43f af4c 	beq.w	800048c <__aeabi_fmul+0x114>
 80005f4:	4608      	mov	r0, r1
 80005f6:	e76e      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005f8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005fc:	bf18      	it	ne
 80005fe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000602:	d1ca      	bne.n	800059a <__aeabi_fdiv+0xba>
 8000604:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000608:	f47f af5c 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 800060c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000610:	f47f af3c 	bne.w	800048c <__aeabi_fmul+0x114>
 8000614:	e75f      	b.n	80004d6 <__aeabi_fmul+0x15e>
 8000616:	bf00      	nop

08000618 <__aeabi_f2uiz>:
 8000618:	0042      	lsls	r2, r0, #1
 800061a:	d20e      	bcs.n	800063a <__aeabi_f2uiz+0x22>
 800061c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000620:	d30b      	bcc.n	800063a <__aeabi_f2uiz+0x22>
 8000622:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000626:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800062a:	d409      	bmi.n	8000640 <__aeabi_f2uiz+0x28>
 800062c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000630:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000634:	fa23 f002 	lsr.w	r0, r3, r2
 8000638:	4770      	bx	lr
 800063a:	f04f 0000 	mov.w	r0, #0
 800063e:	4770      	bx	lr
 8000640:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000644:	d101      	bne.n	800064a <__aeabi_f2uiz+0x32>
 8000646:	0242      	lsls	r2, r0, #9
 8000648:	d102      	bne.n	8000650 <__aeabi_f2uiz+0x38>
 800064a:	f04f 30ff 	mov.w	r0, #4294967295
 800064e:	4770      	bx	lr
 8000650:	f04f 0000 	mov.w	r0, #0
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop

08000658 <Motor_Init>:
#include "dc_motor.h"

uint32_t pwm_freq;

Motor_t* Motor_Init(Motor_Handle_t handle)
{
 8000658:	b590      	push	{r4, r7, lr}
 800065a:	b087      	sub	sp, #28
 800065c:	af00      	add	r7, sp, #0
 800065e:	463c      	mov	r4, r7
 8000660:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    Motor_t *object = calloc(1, sizeof(Motor_t));
 8000664:	2110      	movs	r1, #16
 8000666:	2001      	movs	r0, #1
 8000668:	f006 fa9c 	bl	8006ba4 <calloc>
 800066c:	4603      	mov	r3, r0
 800066e:	617b      	str	r3, [r7, #20]

    object->direction = DIRECTION_FORWARD;
 8000670:	697b      	ldr	r3, [r7, #20]
 8000672:	2201      	movs	r2, #1
 8000674:	701a      	strb	r2, [r3, #0]
    object->pwm_duty = 0;
 8000676:	697b      	ldr	r3, [r7, #20]
 8000678:	2200      	movs	r2, #0
 800067a:	705a      	strb	r2, [r3, #1]

    object->pwm_channel = handle.pwm_channel;
 800067c:	683a      	ldr	r2, [r7, #0]
 800067e:	697b      	ldr	r3, [r7, #20]
 8000680:	605a      	str	r2, [r3, #4]
    object->direction_port = handle.direction_port;
 8000682:	687a      	ldr	r2, [r7, #4]
 8000684:	697b      	ldr	r3, [r7, #20]
 8000686:	609a      	str	r2, [r3, #8]
    object->direction_pin_A = handle.direction_pin_A;
 8000688:	893a      	ldrh	r2, [r7, #8]
 800068a:	697b      	ldr	r3, [r7, #20]
 800068c:	819a      	strh	r2, [r3, #12]
    object->direction_pin_B = handle.direction_pin_B;
 800068e:	897a      	ldrh	r2, [r7, #10]
 8000690:	697b      	ldr	r3, [r7, #20]
 8000692:	81da      	strh	r2, [r3, #14]

    pwm_freq = handle.pwm_frequency;
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	4a08      	ldr	r2, [pc, #32]	@ (80006b8 <Motor_Init+0x60>)
 8000698:	6013      	str	r3, [r2, #0]

    // Duty cycle Setting
    Motor_Set_PWM_Duty(object, 0);
 800069a:	2100      	movs	r1, #0
 800069c:	6978      	ldr	r0, [r7, #20]
 800069e:	f000 f833 	bl	8000708 <Motor_Set_PWM_Duty>
    // Frequency Setting
    Motor_Set_PWM_Frequency(pwm_freq);
 80006a2:	4b05      	ldr	r3, [pc, #20]	@ (80006b8 <Motor_Init+0x60>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	4618      	mov	r0, r3
 80006a8:	f000 f808 	bl	80006bc <Motor_Set_PWM_Frequency>

    return object;
 80006ac:	697b      	ldr	r3, [r7, #20]
}
 80006ae:	4618      	mov	r0, r3
 80006b0:	371c      	adds	r7, #28
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd90      	pop	{r4, r7, pc}
 80006b6:	bf00      	nop
 80006b8:	2000007c 	.word	0x2000007c

080006bc <Motor_Set_PWM_Frequency>:

status_t Motor_Set_PWM_Frequency(uint32_t freq)
{
 80006bc:	b480      	push	{r7}
 80006be:	b085      	sub	sp, #20
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
    // The PWM frequency depends on: The clock frequency, the ARR value, the PSC value. 
    //              PWM frequency = Clock frequency / [ (ARR + 1) * (PSC + 1) ]
    pwm_freq = freq;
 80006c4:	4a0d      	ldr	r2, [pc, #52]	@ (80006fc <Motor_Set_PWM_Frequency+0x40>)
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	6013      	str	r3, [r2, #0]

    uint32_t tim_arr_val = __HAL_TIM_GET_AUTORELOAD(&htim_motor);
 80006ca:	4b0d      	ldr	r3, [pc, #52]	@ (8000700 <Motor_Set_PWM_Frequency+0x44>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006d0:	60fb      	str	r3, [r7, #12]
    uint32_t tim_psc_val = (uint32_t)(DEFAULT_CLOCK_FREQ / (pwm_freq * (tim_arr_val + 1)) - 1);
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	3301      	adds	r3, #1
 80006d6:	4a09      	ldr	r2, [pc, #36]	@ (80006fc <Motor_Set_PWM_Frequency+0x40>)
 80006d8:	6812      	ldr	r2, [r2, #0]
 80006da:	fb02 f303 	mul.w	r3, r2, r3
 80006de:	4a09      	ldr	r2, [pc, #36]	@ (8000704 <Motor_Set_PWM_Frequency+0x48>)
 80006e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80006e4:	3b01      	subs	r3, #1
 80006e6:	60bb      	str	r3, [r7, #8]

    __HAL_TIM_SET_PRESCALER(&htim_motor, tim_psc_val);
 80006e8:	4b05      	ldr	r3, [pc, #20]	@ (8000700 <Motor_Set_PWM_Frequency+0x44>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	68ba      	ldr	r2, [r7, #8]
 80006ee:	629a      	str	r2, [r3, #40]	@ 0x28
    
    return STATUS_OK;
 80006f0:	2300      	movs	r3, #0
}
 80006f2:	4618      	mov	r0, r3
 80006f4:	3714      	adds	r7, #20
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bc80      	pop	{r7}
 80006fa:	4770      	bx	lr
 80006fc:	2000007c 	.word	0x2000007c
 8000700:	20000080 	.word	0x20000080
 8000704:	007a1200 	.word	0x007a1200

08000708 <Motor_Set_PWM_Duty>:

status_t Motor_Set_PWM_Duty(Motor_t *motor, uint8_t duty)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b086      	sub	sp, #24
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
 8000710:	460b      	mov	r3, r1
 8000712:	70fb      	strb	r3, [r7, #3]
    motor->pwm_duty = duty;
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	78fa      	ldrb	r2, [r7, #3]
 8000718:	705a      	strb	r2, [r3, #1]

    float duty_percentage = duty / 255.0f;
 800071a:	78fb      	ldrb	r3, [r7, #3]
 800071c:	4618      	mov	r0, r3
 800071e:	f7ff fdd7 	bl	80002d0 <__aeabi_i2f>
 8000722:	4603      	mov	r3, r0
 8000724:	491d      	ldr	r1, [pc, #116]	@ (800079c <Motor_Set_PWM_Duty+0x94>)
 8000726:	4618      	mov	r0, r3
 8000728:	f7ff feda 	bl	80004e0 <__aeabi_fdiv>
 800072c:	4603      	mov	r3, r0
 800072e:	617b      	str	r3, [r7, #20]

    uint32_t tim_arr_val = __HAL_TIM_GET_AUTORELOAD(&htim_motor);
 8000730:	4b1b      	ldr	r3, [pc, #108]	@ (80007a0 <Motor_Set_PWM_Duty+0x98>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000736:	613b      	str	r3, [r7, #16]
    uint32_t tim_ccr_val = (uint32_t)(duty_percentage * tim_arr_val);
 8000738:	6938      	ldr	r0, [r7, #16]
 800073a:	f7ff fdc5 	bl	80002c8 <__aeabi_ui2f>
 800073e:	4603      	mov	r3, r0
 8000740:	6979      	ldr	r1, [r7, #20]
 8000742:	4618      	mov	r0, r3
 8000744:	f7ff fe18 	bl	8000378 <__aeabi_fmul>
 8000748:	4603      	mov	r3, r0
 800074a:	4618      	mov	r0, r3
 800074c:	f7ff ff64 	bl	8000618 <__aeabi_f2uiz>
 8000750:	4603      	mov	r3, r0
 8000752:	60fb      	str	r3, [r7, #12]

    __HAL_TIM_SET_COMPARE(&htim_motor, motor->pwm_channel, tim_ccr_val);
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	685b      	ldr	r3, [r3, #4]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d104      	bne.n	8000766 <Motor_Set_PWM_Duty+0x5e>
 800075c:	4b10      	ldr	r3, [pc, #64]	@ (80007a0 <Motor_Set_PWM_Duty+0x98>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	68fa      	ldr	r2, [r7, #12]
 8000762:	635a      	str	r2, [r3, #52]	@ 0x34
 8000764:	e015      	b.n	8000792 <Motor_Set_PWM_Duty+0x8a>
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	685b      	ldr	r3, [r3, #4]
 800076a:	2b04      	cmp	r3, #4
 800076c:	d104      	bne.n	8000778 <Motor_Set_PWM_Duty+0x70>
 800076e:	4b0c      	ldr	r3, [pc, #48]	@ (80007a0 <Motor_Set_PWM_Duty+0x98>)
 8000770:	681a      	ldr	r2, [r3, #0]
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	6393      	str	r3, [r2, #56]	@ 0x38
 8000776:	e00c      	b.n	8000792 <Motor_Set_PWM_Duty+0x8a>
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	685b      	ldr	r3, [r3, #4]
 800077c:	2b08      	cmp	r3, #8
 800077e:	d104      	bne.n	800078a <Motor_Set_PWM_Duty+0x82>
 8000780:	4b07      	ldr	r3, [pc, #28]	@ (80007a0 <Motor_Set_PWM_Duty+0x98>)
 8000782:	681a      	ldr	r2, [r3, #0]
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000788:	e003      	b.n	8000792 <Motor_Set_PWM_Duty+0x8a>
 800078a:	4b05      	ldr	r3, [pc, #20]	@ (80007a0 <Motor_Set_PWM_Duty+0x98>)
 800078c:	681a      	ldr	r2, [r3, #0]
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	6413      	str	r3, [r2, #64]	@ 0x40

    return STATUS_OK;
 8000792:	2300      	movs	r3, #0
}
 8000794:	4618      	mov	r0, r3
 8000796:	3718      	adds	r7, #24
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	437f0000 	.word	0x437f0000
 80007a0:	20000080 	.word	0x20000080

080007a4 <Motor_Start>:

status_t Motor_Start(Motor_t *motor)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b084      	sub	sp, #16
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
    Motor_SetDirection(motor, motor->direction);
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	f993 3000 	ldrsb.w	r3, [r3]
 80007b2:	4619      	mov	r1, r3
 80007b4:	6878      	ldr	r0, [r7, #4]
 80007b6:	f000 f815 	bl	80007e4 <Motor_SetDirection>
    HAL_StatusTypeDef ret = HAL_TIM_PWM_Start(&htim_motor, motor->pwm_channel);
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	685b      	ldr	r3, [r3, #4]
 80007be:	4619      	mov	r1, r3
 80007c0:	4807      	ldr	r0, [pc, #28]	@ (80007e0 <Motor_Start+0x3c>)
 80007c2:	f004 f849 	bl	8004858 <HAL_TIM_PWM_Start>
 80007c6:	4603      	mov	r3, r0
 80007c8:	73fb      	strb	r3, [r7, #15]

    if (ret != HAL_OK) return STATUS_FAIL;
 80007ca:	7bfb      	ldrb	r3, [r7, #15]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d002      	beq.n	80007d6 <Motor_Start+0x32>
 80007d0:	f04f 33ff 	mov.w	r3, #4294967295
 80007d4:	e000      	b.n	80007d8 <Motor_Start+0x34>

    return STATUS_OK;
 80007d6:	2300      	movs	r3, #0
}
 80007d8:	4618      	mov	r0, r3
 80007da:	3710      	adds	r7, #16
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	20000080 	.word	0x20000080

080007e4 <Motor_SetDirection>:

    return STATUS_OK;
}

status_t Motor_SetDirection(Motor_t *motor, int8_t direction)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
 80007ec:	460b      	mov	r3, r1
 80007ee:	70fb      	strb	r3, [r7, #3]
    if (direction == DIRECTION_FORWARD)
 80007f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80007f4:	2b01      	cmp	r3, #1
 80007f6:	d10f      	bne.n	8000818 <Motor_SetDirection+0x34>
    {
        HAL_GPIO_WritePin(motor->direction_port, motor->direction_pin_A, GPIO_PIN_SET);
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	6898      	ldr	r0, [r3, #8]
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	899b      	ldrh	r3, [r3, #12]
 8000800:	2201      	movs	r2, #1
 8000802:	4619      	mov	r1, r3
 8000804:	f003 fb58 	bl	8003eb8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(motor->direction_port, motor->direction_pin_B, GPIO_PIN_RESET);
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	6898      	ldr	r0, [r3, #8]
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	89db      	ldrh	r3, [r3, #14]
 8000810:	2200      	movs	r2, #0
 8000812:	4619      	mov	r1, r3
 8000814:	f003 fb50 	bl	8003eb8 <HAL_GPIO_WritePin>
    }
    if (direction == DIRECTION_BACKWARD)
 8000818:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800081c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000820:	d10f      	bne.n	8000842 <Motor_SetDirection+0x5e>
    {
        HAL_GPIO_WritePin(motor->direction_port, motor->direction_pin_A, GPIO_PIN_RESET);
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	6898      	ldr	r0, [r3, #8]
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	899b      	ldrh	r3, [r3, #12]
 800082a:	2200      	movs	r2, #0
 800082c:	4619      	mov	r1, r3
 800082e:	f003 fb43 	bl	8003eb8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(motor->direction_port, motor->direction_pin_B, GPIO_PIN_SET);
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	6898      	ldr	r0, [r3, #8]
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	89db      	ldrh	r3, [r3, #14]
 800083a:	2201      	movs	r2, #1
 800083c:	4619      	mov	r1, r3
 800083e:	f003 fb3b 	bl	8003eb8 <HAL_GPIO_WritePin>
    }

    return STATUS_OK;
 8000842:	2300      	movs	r3, #0
}
 8000844:	4618      	mov	r0, r3
 8000846:	3708      	adds	r7, #8
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}

0800084c <Encoder_Init>:
#include "encoder.h"

Encoder_t* Encoder_Init(Encoder_Handle_t handle)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b084      	sub	sp, #16
 8000850:	af00      	add	r7, sp, #0
 8000852:	463b      	mov	r3, r7
 8000854:	e883 0003 	stmia.w	r3, {r0, r1}
    Encoder_t* object = calloc(1, sizeof(Encoder_t));
 8000858:	210c      	movs	r1, #12
 800085a:	2001      	movs	r0, #1
 800085c:	f006 f9a2 	bl	8006ba4 <calloc>
 8000860:	4603      	mov	r3, r0
 8000862:	60fb      	str	r3, [r7, #12]

    object->tick = 0;
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	2200      	movs	r2, #0
 8000868:	801a      	strh	r2, [r3, #0]
    object->max_count = handle.max_count;
 800086a:	683a      	ldr	r2, [r7, #0]
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	605a      	str	r2, [r3, #4]
    object->tick_read_channel = handle.tick_read_channel;
 8000870:	88bb      	ldrh	r3, [r7, #4]
 8000872:	461a      	mov	r2, r3
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	609a      	str	r2, [r3, #8]

    return object;
 8000878:	68fb      	ldr	r3, [r7, #12]
}
 800087a:	4618      	mov	r0, r3
 800087c:	3710      	adds	r7, #16
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
	...

08000884 <Encoder_Start>:

status_t Encoder_Start(Encoder_t *encoder)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef ret = HAL_TIM_IC_Start_IT(&htim_encoder, encoder->tick_read_channel);
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	689b      	ldr	r3, [r3, #8]
 8000890:	4619      	mov	r1, r3
 8000892:	4808      	ldr	r0, [pc, #32]	@ (80008b4 <Encoder_Start+0x30>)
 8000894:	f004 f8d2 	bl	8004a3c <HAL_TIM_IC_Start_IT>
 8000898:	4603      	mov	r3, r0
 800089a:	73fb      	strb	r3, [r7, #15]

    if (ret != HAL_OK) return STATUS_FAIL;
 800089c:	7bfb      	ldrb	r3, [r7, #15]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d002      	beq.n	80008a8 <Encoder_Start+0x24>
 80008a2:	f04f 33ff 	mov.w	r3, #4294967295
 80008a6:	e000      	b.n	80008aa <Encoder_Start+0x26>

    return STATUS_OK;
 80008a8:	2300      	movs	r3, #0
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	3710      	adds	r7, #16
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	200000c8 	.word	0x200000c8

080008b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008bc:	f002 fd66 	bl	800338c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008c0:	f000 f810 	bl	80008e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008c4:	f000 f98c 	bl	8000be0 <MX_GPIO_Init>
  MX_DMA_Init();
 80008c8:	f000 f964 	bl	8000b94 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80008cc:	f000 f938 	bl	8000b40 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 80008d0:	f000 f844 	bl	800095c <MX_TIM1_Init>
  MX_TIM2_Init();
 80008d4:	f000 f8e2 	bl	8000a9c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  setup();
 80008d8:	f001 fbe4 	bl	80020a4 <setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	loop();
 80008dc:	f001 fc1a 	bl	8002114 <loop>
  {
 80008e0:	bf00      	nop
 80008e2:	e7fb      	b.n	80008dc <main+0x24>

080008e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b090      	sub	sp, #64	@ 0x40
 80008e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ea:	f107 0318 	add.w	r3, r7, #24
 80008ee:	2228      	movs	r2, #40	@ 0x28
 80008f0:	2100      	movs	r1, #0
 80008f2:	4618      	mov	r0, r3
 80008f4:	f006 fa56 	bl	8006da4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008f8:	1d3b      	adds	r3, r7, #4
 80008fa:	2200      	movs	r2, #0
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	605a      	str	r2, [r3, #4]
 8000900:	609a      	str	r2, [r3, #8]
 8000902:	60da      	str	r2, [r3, #12]
 8000904:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000906:	2302      	movs	r3, #2
 8000908:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800090a:	2301      	movs	r3, #1
 800090c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800090e:	2310      	movs	r3, #16
 8000910:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000912:	2300      	movs	r3, #0
 8000914:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000916:	f107 0318 	add.w	r3, r7, #24
 800091a:	4618      	mov	r0, r3
 800091c:	f003 fae4 	bl	8003ee8 <HAL_RCC_OscConfig>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000926:	f000 f9bd 	bl	8000ca4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800092a:	230f      	movs	r3, #15
 800092c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800092e:	2300      	movs	r3, #0
 8000930:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000932:	2300      	movs	r3, #0
 8000934:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000936:	2300      	movs	r3, #0
 8000938:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800093a:	2300      	movs	r3, #0
 800093c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800093e:	1d3b      	adds	r3, r7, #4
 8000940:	2100      	movs	r1, #0
 8000942:	4618      	mov	r0, r3
 8000944:	f003 fd52 	bl	80043ec <HAL_RCC_ClockConfig>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800094e:	f000 f9a9 	bl	8000ca4 <Error_Handler>
  }
}
 8000952:	bf00      	nop
 8000954:	3740      	adds	r7, #64	@ 0x40
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
	...

0800095c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b096      	sub	sp, #88	@ 0x58
 8000960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000962:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]
 800096a:	605a      	str	r2, [r3, #4]
 800096c:	609a      	str	r2, [r3, #8]
 800096e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000970:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800097a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800097e:	2200      	movs	r2, #0
 8000980:	601a      	str	r2, [r3, #0]
 8000982:	605a      	str	r2, [r3, #4]
 8000984:	609a      	str	r2, [r3, #8]
 8000986:	60da      	str	r2, [r3, #12]
 8000988:	611a      	str	r2, [r3, #16]
 800098a:	615a      	str	r2, [r3, #20]
 800098c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800098e:	1d3b      	adds	r3, r7, #4
 8000990:	2220      	movs	r2, #32
 8000992:	2100      	movs	r1, #0
 8000994:	4618      	mov	r0, r3
 8000996:	f006 fa05 	bl	8006da4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim_motor.Instance = TIM1;
 800099a:	4b3e      	ldr	r3, [pc, #248]	@ (8000a94 <MX_TIM1_Init+0x138>)
 800099c:	4a3e      	ldr	r2, [pc, #248]	@ (8000a98 <MX_TIM1_Init+0x13c>)
 800099e:	601a      	str	r2, [r3, #0]
  htim_motor.Init.Prescaler = 8 - 1;
 80009a0:	4b3c      	ldr	r3, [pc, #240]	@ (8000a94 <MX_TIM1_Init+0x138>)
 80009a2:	2207      	movs	r2, #7
 80009a4:	605a      	str	r2, [r3, #4]
  htim_motor.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009a6:	4b3b      	ldr	r3, [pc, #236]	@ (8000a94 <MX_TIM1_Init+0x138>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	609a      	str	r2, [r3, #8]
  htim_motor.Init.Period = 1000 - 1;
 80009ac:	4b39      	ldr	r3, [pc, #228]	@ (8000a94 <MX_TIM1_Init+0x138>)
 80009ae:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80009b2:	60da      	str	r2, [r3, #12]
  htim_motor.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009b4:	4b37      	ldr	r3, [pc, #220]	@ (8000a94 <MX_TIM1_Init+0x138>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	611a      	str	r2, [r3, #16]
  htim_motor.Init.RepetitionCounter = 0;
 80009ba:	4b36      	ldr	r3, [pc, #216]	@ (8000a94 <MX_TIM1_Init+0x138>)
 80009bc:	2200      	movs	r2, #0
 80009be:	615a      	str	r2, [r3, #20]
  htim_motor.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009c0:	4b34      	ldr	r3, [pc, #208]	@ (8000a94 <MX_TIM1_Init+0x138>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim_motor) != HAL_OK)
 80009c6:	4833      	ldr	r0, [pc, #204]	@ (8000a94 <MX_TIM1_Init+0x138>)
 80009c8:	f003 fe9e 	bl	8004708 <HAL_TIM_Base_Init>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80009d2:	f000 f967 	bl	8000ca4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009da:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim_motor, &sClockSourceConfig) != HAL_OK)
 80009dc:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80009e0:	4619      	mov	r1, r3
 80009e2:	482c      	ldr	r0, [pc, #176]	@ (8000a94 <MX_TIM1_Init+0x138>)
 80009e4:	f004 fb9c 	bl	8005120 <HAL_TIM_ConfigClockSource>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80009ee:	f000 f959 	bl	8000ca4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim_motor) != HAL_OK)
 80009f2:	4828      	ldr	r0, [pc, #160]	@ (8000a94 <MX_TIM1_Init+0x138>)
 80009f4:	f003 fed7 	bl	80047a6 <HAL_TIM_PWM_Init>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80009fe:	f000 f951 	bl	8000ca4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a02:	2300      	movs	r3, #0
 8000a04:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a06:	2300      	movs	r3, #0
 8000a08:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim_motor, &sMasterConfig) != HAL_OK)
 8000a0a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4820      	ldr	r0, [pc, #128]	@ (8000a94 <MX_TIM1_Init+0x138>)
 8000a12:	f005 f823 	bl	8005a5c <HAL_TIMEx_MasterConfigSynchronization>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000a1c:	f000 f942 	bl	8000ca4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a20:	2360      	movs	r3, #96	@ 0x60
 8000a22:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000a24:	2300      	movs	r3, #0
 8000a26:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a30:	2300      	movs	r3, #0
 8000a32:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a34:	2300      	movs	r3, #0
 8000a36:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim_motor, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a40:	2200      	movs	r2, #0
 8000a42:	4619      	mov	r1, r3
 8000a44:	4813      	ldr	r0, [pc, #76]	@ (8000a94 <MX_TIM1_Init+0x138>)
 8000a46:	f004 faa9 	bl	8004f9c <HAL_TIM_PWM_ConfigChannel>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000a50:	f000 f928 	bl	8000ca4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a54:	2300      	movs	r3, #0
 8000a56:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a60:	2300      	movs	r3, #0
 8000a62:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a64:	2300      	movs	r3, #0
 8000a66:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a68:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a6c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim_motor, &sBreakDeadTimeConfig) != HAL_OK)
 8000a72:	1d3b      	adds	r3, r7, #4
 8000a74:	4619      	mov	r1, r3
 8000a76:	4807      	ldr	r0, [pc, #28]	@ (8000a94 <MX_TIM1_Init+0x138>)
 8000a78:	f005 f84e 	bl	8005b18 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000a82:	f000 f90f 	bl	8000ca4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim_motor);
 8000a86:	4803      	ldr	r0, [pc, #12]	@ (8000a94 <MX_TIM1_Init+0x138>)
 8000a88:	f002 fac0 	bl	800300c <HAL_TIM_MspPostInit>

}
 8000a8c:	bf00      	nop
 8000a8e:	3758      	adds	r7, #88	@ 0x58
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	20000080 	.word	0x20000080
 8000a98:	40012c00 	.word	0x40012c00

08000a9c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b086      	sub	sp, #24
 8000aa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aa2:	f107 0310 	add.w	r3, r7, #16
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
 8000aaa:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000aac:	463b      	mov	r3, r7
 8000aae:	2200      	movs	r2, #0
 8000ab0:	601a      	str	r2, [r3, #0]
 8000ab2:	605a      	str	r2, [r3, #4]
 8000ab4:	609a      	str	r2, [r3, #8]
 8000ab6:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim_encoder.Instance = TIM2;
 8000ab8:	4b20      	ldr	r3, [pc, #128]	@ (8000b3c <MX_TIM2_Init+0xa0>)
 8000aba:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000abe:	601a      	str	r2, [r3, #0]
  htim_encoder.Init.Prescaler = 0;
 8000ac0:	4b1e      	ldr	r3, [pc, #120]	@ (8000b3c <MX_TIM2_Init+0xa0>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	605a      	str	r2, [r3, #4]
  htim_encoder.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ac6:	4b1d      	ldr	r3, [pc, #116]	@ (8000b3c <MX_TIM2_Init+0xa0>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	609a      	str	r2, [r3, #8]
  htim_encoder.Init.Period = 65535;
 8000acc:	4b1b      	ldr	r3, [pc, #108]	@ (8000b3c <MX_TIM2_Init+0xa0>)
 8000ace:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ad2:	60da      	str	r2, [r3, #12]
  htim_encoder.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ad4:	4b19      	ldr	r3, [pc, #100]	@ (8000b3c <MX_TIM2_Init+0xa0>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	611a      	str	r2, [r3, #16]
  htim_encoder.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ada:	4b18      	ldr	r3, [pc, #96]	@ (8000b3c <MX_TIM2_Init+0xa0>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim_encoder) != HAL_OK)
 8000ae0:	4816      	ldr	r0, [pc, #88]	@ (8000b3c <MX_TIM2_Init+0xa0>)
 8000ae2:	f003 ff5b 	bl	800499c <HAL_TIM_IC_Init>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000aec:	f000 f8da 	bl	8000ca4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000af0:	2300      	movs	r3, #0
 8000af2:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000af4:	2300      	movs	r3, #0
 8000af6:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim_encoder, &sMasterConfig) != HAL_OK)
 8000af8:	f107 0310 	add.w	r3, r7, #16
 8000afc:	4619      	mov	r1, r3
 8000afe:	480f      	ldr	r0, [pc, #60]	@ (8000b3c <MX_TIM2_Init+0xa0>)
 8000b00:	f004 ffac 	bl	8005a5c <HAL_TIMEx_MasterConfigSynchronization>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000b0a:	f000 f8cb 	bl	8000ca4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000b12:	2301      	movs	r3, #1
 8000b14:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000b16:	2300      	movs	r3, #0
 8000b18:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim_encoder, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000b1e:	463b      	mov	r3, r7
 8000b20:	2204      	movs	r2, #4
 8000b22:	4619      	mov	r1, r3
 8000b24:	4805      	ldr	r0, [pc, #20]	@ (8000b3c <MX_TIM2_Init+0xa0>)
 8000b26:	f004 f99d 	bl	8004e64 <HAL_TIM_IC_ConfigChannel>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000b30:	f000 f8b8 	bl	8000ca4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b34:	bf00      	nop
 8000b36:	3718      	adds	r7, #24
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	200000c8 	.word	0x200000c8

08000b40 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart_rosserial.Instance = USART1;
 8000b44:	4b11      	ldr	r3, [pc, #68]	@ (8000b8c <MX_USART1_UART_Init+0x4c>)
 8000b46:	4a12      	ldr	r2, [pc, #72]	@ (8000b90 <MX_USART1_UART_Init+0x50>)
 8000b48:	601a      	str	r2, [r3, #0]
  huart_rosserial.Init.BaudRate = 57600;
 8000b4a:	4b10      	ldr	r3, [pc, #64]	@ (8000b8c <MX_USART1_UART_Init+0x4c>)
 8000b4c:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 8000b50:	605a      	str	r2, [r3, #4]
  huart_rosserial.Init.WordLength = UART_WORDLENGTH_8B;
 8000b52:	4b0e      	ldr	r3, [pc, #56]	@ (8000b8c <MX_USART1_UART_Init+0x4c>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	609a      	str	r2, [r3, #8]
  huart_rosserial.Init.StopBits = UART_STOPBITS_1;
 8000b58:	4b0c      	ldr	r3, [pc, #48]	@ (8000b8c <MX_USART1_UART_Init+0x4c>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	60da      	str	r2, [r3, #12]
  huart_rosserial.Init.Parity = UART_PARITY_NONE;
 8000b5e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b8c <MX_USART1_UART_Init+0x4c>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	611a      	str	r2, [r3, #16]
  huart_rosserial.Init.Mode = UART_MODE_TX_RX;
 8000b64:	4b09      	ldr	r3, [pc, #36]	@ (8000b8c <MX_USART1_UART_Init+0x4c>)
 8000b66:	220c      	movs	r2, #12
 8000b68:	615a      	str	r2, [r3, #20]
  huart_rosserial.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b6a:	4b08      	ldr	r3, [pc, #32]	@ (8000b8c <MX_USART1_UART_Init+0x4c>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	619a      	str	r2, [r3, #24]
  huart_rosserial.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b70:	4b06      	ldr	r3, [pc, #24]	@ (8000b8c <MX_USART1_UART_Init+0x4c>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart_rosserial) != HAL_OK)
 8000b76:	4805      	ldr	r0, [pc, #20]	@ (8000b8c <MX_USART1_UART_Init+0x4c>)
 8000b78:	f005 f831 	bl	8005bde <HAL_UART_Init>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000b82:	f000 f88f 	bl	8000ca4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	20000110 	.word	0x20000110
 8000b90:	40013800 	.word	0x40013800

08000b94 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b9a:	4b10      	ldr	r3, [pc, #64]	@ (8000bdc <MX_DMA_Init+0x48>)
 8000b9c:	695b      	ldr	r3, [r3, #20]
 8000b9e:	4a0f      	ldr	r2, [pc, #60]	@ (8000bdc <MX_DMA_Init+0x48>)
 8000ba0:	f043 0301 	orr.w	r3, r3, #1
 8000ba4:	6153      	str	r3, [r2, #20]
 8000ba6:	4b0d      	ldr	r3, [pc, #52]	@ (8000bdc <MX_DMA_Init+0x48>)
 8000ba8:	695b      	ldr	r3, [r3, #20]
 8000baa:	f003 0301 	and.w	r3, r3, #1
 8000bae:	607b      	str	r3, [r7, #4]
 8000bb0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	200e      	movs	r0, #14
 8000bb8:	f002 fd21 	bl	80035fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000bbc:	200e      	movs	r0, #14
 8000bbe:	f002 fd3a 	bl	8003636 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	200f      	movs	r0, #15
 8000bc8:	f002 fd19 	bl	80035fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000bcc:	200f      	movs	r0, #15
 8000bce:	f002 fd32 	bl	8003636 <HAL_NVIC_EnableIRQ>

}
 8000bd2:	bf00      	nop
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	40021000 	.word	0x40021000

08000be0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b088      	sub	sp, #32
 8000be4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be6:	f107 0310 	add.w	r3, r7, #16
 8000bea:	2200      	movs	r2, #0
 8000bec:	601a      	str	r2, [r3, #0]
 8000bee:	605a      	str	r2, [r3, #4]
 8000bf0:	609a      	str	r2, [r3, #8]
 8000bf2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bf4:	4b28      	ldr	r3, [pc, #160]	@ (8000c98 <MX_GPIO_Init+0xb8>)
 8000bf6:	699b      	ldr	r3, [r3, #24]
 8000bf8:	4a27      	ldr	r2, [pc, #156]	@ (8000c98 <MX_GPIO_Init+0xb8>)
 8000bfa:	f043 0310 	orr.w	r3, r3, #16
 8000bfe:	6193      	str	r3, [r2, #24]
 8000c00:	4b25      	ldr	r3, [pc, #148]	@ (8000c98 <MX_GPIO_Init+0xb8>)
 8000c02:	699b      	ldr	r3, [r3, #24]
 8000c04:	f003 0310 	and.w	r3, r3, #16
 8000c08:	60fb      	str	r3, [r7, #12]
 8000c0a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c0c:	4b22      	ldr	r3, [pc, #136]	@ (8000c98 <MX_GPIO_Init+0xb8>)
 8000c0e:	699b      	ldr	r3, [r3, #24]
 8000c10:	4a21      	ldr	r2, [pc, #132]	@ (8000c98 <MX_GPIO_Init+0xb8>)
 8000c12:	f043 0320 	orr.w	r3, r3, #32
 8000c16:	6193      	str	r3, [r2, #24]
 8000c18:	4b1f      	ldr	r3, [pc, #124]	@ (8000c98 <MX_GPIO_Init+0xb8>)
 8000c1a:	699b      	ldr	r3, [r3, #24]
 8000c1c:	f003 0320 	and.w	r3, r3, #32
 8000c20:	60bb      	str	r3, [r7, #8]
 8000c22:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c24:	4b1c      	ldr	r3, [pc, #112]	@ (8000c98 <MX_GPIO_Init+0xb8>)
 8000c26:	699b      	ldr	r3, [r3, #24]
 8000c28:	4a1b      	ldr	r2, [pc, #108]	@ (8000c98 <MX_GPIO_Init+0xb8>)
 8000c2a:	f043 0304 	orr.w	r3, r3, #4
 8000c2e:	6193      	str	r3, [r2, #24]
 8000c30:	4b19      	ldr	r3, [pc, #100]	@ (8000c98 <MX_GPIO_Init+0xb8>)
 8000c32:	699b      	ldr	r3, [r3, #24]
 8000c34:	f003 0304 	and.w	r3, r3, #4
 8000c38:	607b      	str	r3, [r7, #4]
 8000c3a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLUEPILL_LED_GPIO_Port, BLUEPILL_LED_Pin, GPIO_PIN_RESET);
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c42:	4816      	ldr	r0, [pc, #88]	@ (8000c9c <MX_GPIO_Init+0xbc>)
 8000c44:	f003 f938 	bl	8003eb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOTOR_DIR_A_Pin|MOTOR_DIR_B_Pin, GPIO_PIN_RESET);
 8000c48:	2200      	movs	r2, #0
 8000c4a:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8000c4e:	4814      	ldr	r0, [pc, #80]	@ (8000ca0 <MX_GPIO_Init+0xc0>)
 8000c50:	f003 f932 	bl	8003eb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUEPILL_LED_Pin */
  GPIO_InitStruct.Pin = BLUEPILL_LED_Pin;
 8000c54:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c58:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c62:	2302      	movs	r3, #2
 8000c64:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLUEPILL_LED_GPIO_Port, &GPIO_InitStruct);
 8000c66:	f107 0310 	add.w	r3, r7, #16
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	480b      	ldr	r0, [pc, #44]	@ (8000c9c <MX_GPIO_Init+0xbc>)
 8000c6e:	f002 ff9f 	bl	8003bb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_DIR_A_Pin MOTOR_DIR_B_Pin */
  GPIO_InitStruct.Pin = MOTOR_DIR_A_Pin|MOTOR_DIR_B_Pin;
 8000c72:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000c76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c80:	2302      	movs	r3, #2
 8000c82:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c84:	f107 0310 	add.w	r3, r7, #16
 8000c88:	4619      	mov	r1, r3
 8000c8a:	4805      	ldr	r0, [pc, #20]	@ (8000ca0 <MX_GPIO_Init+0xc0>)
 8000c8c:	f002 ff90 	bl	8003bb0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c90:	bf00      	nop
 8000c92:	3720      	adds	r7, #32
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	40021000 	.word	0x40021000
 8000c9c:	40011000 	.word	0x40011000
 8000ca0:	40010800 	.word	0x40010800

08000ca4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ca8:	b672      	cpsid	i
}
 8000caa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cac:	bf00      	nop
 8000cae:	e7fd      	b.n	8000cac <Error_Handler+0x8>

08000cb0 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	2200      	movs	r2, #0
 8000cbc:	601a      	str	r2, [r3, #0]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	605a      	str	r2, [r3, #4]
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	370c      	adds	r7, #12
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bc80      	pop	{r7}
 8000cce:	4770      	bx	lr

08000cd0 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
 8000cd8:	4a04      	ldr	r2, [pc, #16]	@ (8000cec <_ZN3ros3MsgC1Ev+0x1c>)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	601a      	str	r2, [r3, #0]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	370c      	adds	r7, #12
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bc80      	pop	{r7}
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	080071b8 	.word	0x080071b8

08000cf0 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
      data()
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f7ff ffe8 	bl	8000cd0 <_ZN3ros3MsgC1Ev>
 8000d00:	4a06      	ldr	r2, [pc, #24]	@ (8000d1c <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	601a      	str	r2, [r3, #0]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	3304      	adds	r3, #4
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f7ff ffd0 	bl	8000cb0 <_ZN3ros4TimeC1Ev>
    {
    }
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	4618      	mov	r0, r3
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	080071a0 	.word	0x080071a0

08000d20 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000d20:	b480      	push	{r7}
 8000d22:	b085      	sub	sp, #20
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
 8000d28:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	6859      	ldr	r1, [r3, #4]
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	683a      	ldr	r2, [r7, #0]
 8000d36:	4413      	add	r3, r2
 8000d38:	b2ca      	uxtb	r2, r1
 8000d3a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	0a19      	lsrs	r1, r3, #8
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	3301      	adds	r3, #1
 8000d46:	683a      	ldr	r2, [r7, #0]
 8000d48:	4413      	add	r3, r2
 8000d4a:	b2ca      	uxtb	r2, r1
 8000d4c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	0c19      	lsrs	r1, r3, #16
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	3302      	adds	r3, #2
 8000d58:	683a      	ldr	r2, [r7, #0]
 8000d5a:	4413      	add	r3, r2
 8000d5c:	b2ca      	uxtb	r2, r1
 8000d5e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	0e19      	lsrs	r1, r3, #24
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	3303      	adds	r3, #3
 8000d6a:	683a      	ldr	r2, [r7, #0]
 8000d6c:	4413      	add	r3, r2
 8000d6e:	b2ca      	uxtb	r2, r1
 8000d70:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	3304      	adds	r3, #4
 8000d76:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	6899      	ldr	r1, [r3, #8]
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	683a      	ldr	r2, [r7, #0]
 8000d80:	4413      	add	r3, r2
 8000d82:	b2ca      	uxtb	r2, r1
 8000d84:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	689b      	ldr	r3, [r3, #8]
 8000d8a:	0a19      	lsrs	r1, r3, #8
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	3301      	adds	r3, #1
 8000d90:	683a      	ldr	r2, [r7, #0]
 8000d92:	4413      	add	r3, r2
 8000d94:	b2ca      	uxtb	r2, r1
 8000d96:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	689b      	ldr	r3, [r3, #8]
 8000d9c:	0c19      	lsrs	r1, r3, #16
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	3302      	adds	r3, #2
 8000da2:	683a      	ldr	r2, [r7, #0]
 8000da4:	4413      	add	r3, r2
 8000da6:	b2ca      	uxtb	r2, r1
 8000da8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	689b      	ldr	r3, [r3, #8]
 8000dae:	0e19      	lsrs	r1, r3, #24
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	3303      	adds	r3, #3
 8000db4:	683a      	ldr	r2, [r7, #0]
 8000db6:	4413      	add	r3, r2
 8000db8:	b2ca      	uxtb	r2, r1
 8000dba:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	3304      	adds	r3, #4
 8000dc0:	60fb      	str	r3, [r7, #12]
      return offset;
 8000dc2:	68fb      	ldr	r3, [r7, #12]
    }
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	3714      	adds	r7, #20
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bc80      	pop	{r7}
 8000dcc:	4770      	bx	lr

08000dce <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8000dce:	b480      	push	{r7}
 8000dd0:	b085      	sub	sp, #20
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	6078      	str	r0, [r7, #4]
 8000dd6:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	683a      	ldr	r2, [r7, #0]
 8000de0:	4413      	add	r3, r2
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	461a      	mov	r2, r3
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	685a      	ldr	r2, [r3, #4]
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	3301      	adds	r3, #1
 8000df2:	6839      	ldr	r1, [r7, #0]
 8000df4:	440b      	add	r3, r1
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	021b      	lsls	r3, r3, #8
 8000dfa:	431a      	orrs	r2, r3
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	685a      	ldr	r2, [r3, #4]
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	3302      	adds	r3, #2
 8000e08:	6839      	ldr	r1, [r7, #0]
 8000e0a:	440b      	add	r3, r1
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	041b      	lsls	r3, r3, #16
 8000e10:	431a      	orrs	r2, r3
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	685a      	ldr	r2, [r3, #4]
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	3303      	adds	r3, #3
 8000e1e:	6839      	ldr	r1, [r7, #0]
 8000e20:	440b      	add	r3, r1
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	061b      	lsls	r3, r3, #24
 8000e26:	431a      	orrs	r2, r3
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	3304      	adds	r3, #4
 8000e30:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	683a      	ldr	r2, [r7, #0]
 8000e36:	4413      	add	r3, r2
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	689a      	ldr	r2, [r3, #8]
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	3301      	adds	r3, #1
 8000e48:	6839      	ldr	r1, [r7, #0]
 8000e4a:	440b      	add	r3, r1
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	021b      	lsls	r3, r3, #8
 8000e50:	431a      	orrs	r2, r3
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	689a      	ldr	r2, [r3, #8]
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	3302      	adds	r3, #2
 8000e5e:	6839      	ldr	r1, [r7, #0]
 8000e60:	440b      	add	r3, r1
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	041b      	lsls	r3, r3, #16
 8000e66:	431a      	orrs	r2, r3
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	689a      	ldr	r2, [r3, #8]
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	3303      	adds	r3, #3
 8000e74:	6839      	ldr	r1, [r7, #0]
 8000e76:	440b      	add	r3, r1
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	061b      	lsls	r3, r3, #24
 8000e7c:	431a      	orrs	r2, r3
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	3304      	adds	r3, #4
 8000e86:	60fb      	str	r3, [r7, #12]
     return offset;
 8000e88:	68fb      	ldr	r3, [r7, #12]
    }
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3714      	adds	r7, #20
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bc80      	pop	{r7}
 8000e92:	4770      	bx	lr

08000e94 <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
 8000e9c:	4b02      	ldr	r3, [pc, #8]	@ (8000ea8 <_ZN8std_msgs4Time7getTypeEv+0x14>)
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	370c      	adds	r7, #12
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bc80      	pop	{r7}
 8000ea6:	4770      	bx	lr
 8000ea8:	08006f00 	.word	0x08006f00

08000eac <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	4b02      	ldr	r3, [pc, #8]	@ (8000ec0 <_ZN8std_msgs4Time6getMD5Ev+0x14>)
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bc80      	pop	{r7}
 8000ebe:	4770      	bx	lr
 8000ec0:	08006f10 	.word	0x08006f10

08000ec4 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff fefe 	bl	8000cd0 <_ZN3ros3MsgC1Ev>
 8000ed4:	4a0b      	ldr	r2, [pc, #44]	@ (8000f04 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	601a      	str	r2, [r3, #0]
      topic_id(0),
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2200      	movs	r2, #0
 8000ede:	809a      	strh	r2, [r3, #4]
      topic_name(""),
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	4a09      	ldr	r2, [pc, #36]	@ (8000f08 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000ee4:	609a      	str	r2, [r3, #8]
      message_type(""),
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4a07      	ldr	r2, [pc, #28]	@ (8000f08 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000eea:	60da      	str	r2, [r3, #12]
      md5sum(""),
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	4a06      	ldr	r2, [pc, #24]	@ (8000f08 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000ef0:	611a      	str	r2, [r3, #16]
      buffer_size(0)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	615a      	str	r2, [r3, #20]
    {
    }
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	4618      	mov	r0, r3
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	08007188 	.word	0x08007188
 8000f08:	08006f34 	.word	0x08006f34

08000f0c <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b088      	sub	sp, #32
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000f16:	2300      	movs	r3, #0
 8000f18:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	8899      	ldrh	r1, [r3, #4]
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	683a      	ldr	r2, [r7, #0]
 8000f22:	4413      	add	r3, r2
 8000f24:	b2ca      	uxtb	r2, r1
 8000f26:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	889b      	ldrh	r3, [r3, #4]
 8000f2c:	0a1b      	lsrs	r3, r3, #8
 8000f2e:	b299      	uxth	r1, r3
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	3301      	adds	r3, #1
 8000f34:	683a      	ldr	r2, [r7, #0]
 8000f36:	4413      	add	r3, r2
 8000f38:	b2ca      	uxtb	r2, r1
 8000f3a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	3302      	adds	r3, #2
 8000f40:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	689b      	ldr	r3, [r3, #8]
 8000f46:	4618      	mov	r0, r3
 8000f48:	f7ff f900 	bl	800014c <strlen>
 8000f4c:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	683a      	ldr	r2, [r7, #0]
 8000f52:	4413      	add	r3, r2
 8000f54:	69b9      	ldr	r1, [r7, #24]
 8000f56:	4618      	mov	r0, r3
 8000f58:	f001 f978 	bl	800224c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	3304      	adds	r3, #4
 8000f60:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	683a      	ldr	r2, [r7, #0]
 8000f66:	18d0      	adds	r0, r2, r3
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	689b      	ldr	r3, [r3, #8]
 8000f6c:	69ba      	ldr	r2, [r7, #24]
 8000f6e:	4619      	mov	r1, r3
 8000f70:	f005 ff5c 	bl	8006e2c <memcpy>
      offset += length_topic_name;
 8000f74:	69fa      	ldr	r2, [r7, #28]
 8000f76:	69bb      	ldr	r3, [r7, #24]
 8000f78:	4413      	add	r3, r2
 8000f7a:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff f8e3 	bl	800014c <strlen>
 8000f86:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	683a      	ldr	r2, [r7, #0]
 8000f8c:	4413      	add	r3, r2
 8000f8e:	6979      	ldr	r1, [r7, #20]
 8000f90:	4618      	mov	r0, r3
 8000f92:	f001 f95b 	bl	800224c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	3304      	adds	r3, #4
 8000f9a:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	683a      	ldr	r2, [r7, #0]
 8000fa0:	18d0      	adds	r0, r2, r3
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	68db      	ldr	r3, [r3, #12]
 8000fa6:	697a      	ldr	r2, [r7, #20]
 8000fa8:	4619      	mov	r1, r3
 8000faa:	f005 ff3f 	bl	8006e2c <memcpy>
      offset += length_message_type;
 8000fae:	69fa      	ldr	r2, [r7, #28]
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	4413      	add	r3, r2
 8000fb4:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	691b      	ldr	r3, [r3, #16]
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f7ff f8c6 	bl	800014c <strlen>
 8000fc0:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	683a      	ldr	r2, [r7, #0]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	6939      	ldr	r1, [r7, #16]
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f001 f93e 	bl	800224c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	3304      	adds	r3, #4
 8000fd4:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	683a      	ldr	r2, [r7, #0]
 8000fda:	18d0      	adds	r0, r2, r3
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	691b      	ldr	r3, [r3, #16]
 8000fe0:	693a      	ldr	r2, [r7, #16]
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	f005 ff22 	bl	8006e2c <memcpy>
      offset += length_md5sum;
 8000fe8:	69fa      	ldr	r2, [r7, #28]
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	4413      	add	r3, r2
 8000fee:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	695b      	ldr	r3, [r3, #20]
 8000ff4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8000ff6:	68f9      	ldr	r1, [r7, #12]
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	683a      	ldr	r2, [r7, #0]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	b2ca      	uxtb	r2, r1
 8001000:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	0a19      	lsrs	r1, r3, #8
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	3301      	adds	r3, #1
 800100a:	683a      	ldr	r2, [r7, #0]
 800100c:	4413      	add	r3, r2
 800100e:	b2ca      	uxtb	r2, r1
 8001010:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	0c19      	lsrs	r1, r3, #16
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	3302      	adds	r3, #2
 800101a:	683a      	ldr	r2, [r7, #0]
 800101c:	4413      	add	r3, r2
 800101e:	b2ca      	uxtb	r2, r1
 8001020:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	0e19      	lsrs	r1, r3, #24
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	3303      	adds	r3, #3
 800102a:	683a      	ldr	r2, [r7, #0]
 800102c:	4413      	add	r3, r2
 800102e:	b2ca      	uxtb	r2, r1
 8001030:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	3304      	adds	r3, #4
 8001036:	61fb      	str	r3, [r7, #28]
      return offset;
 8001038:	69fb      	ldr	r3, [r7, #28]
    }
 800103a:	4618      	mov	r0, r3
 800103c:	3720      	adds	r7, #32
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}

08001042 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001042:	b580      	push	{r7, lr}
 8001044:	b08a      	sub	sp, #40	@ 0x28
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
 800104a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800104c:	2300      	movs	r3, #0
 800104e:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	683a      	ldr	r2, [r7, #0]
 8001054:	4413      	add	r3, r2
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	461a      	mov	r2, r3
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	889b      	ldrh	r3, [r3, #4]
 8001062:	b21a      	sxth	r2, r3
 8001064:	69bb      	ldr	r3, [r7, #24]
 8001066:	3301      	adds	r3, #1
 8001068:	6839      	ldr	r1, [r7, #0]
 800106a:	440b      	add	r3, r1
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	021b      	lsls	r3, r3, #8
 8001070:	b21b      	sxth	r3, r3
 8001072:	4313      	orrs	r3, r2
 8001074:	b21b      	sxth	r3, r3
 8001076:	b29a      	uxth	r2, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 800107c:	69bb      	ldr	r3, [r7, #24]
 800107e:	3302      	adds	r3, #2
 8001080:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8001082:	69bb      	ldr	r3, [r7, #24]
 8001084:	683a      	ldr	r2, [r7, #0]
 8001086:	441a      	add	r2, r3
 8001088:	f107 0314 	add.w	r3, r7, #20
 800108c:	4611      	mov	r1, r2
 800108e:	4618      	mov	r0, r3
 8001090:	f001 f8fa 	bl	8002288 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001094:	69bb      	ldr	r3, [r7, #24]
 8001096:	3304      	adds	r3, #4
 8001098:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800109a:	69bb      	ldr	r3, [r7, #24]
 800109c:	627b      	str	r3, [r7, #36]	@ 0x24
 800109e:	e00b      	b.n	80010b8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x76>
          inbuffer[k-1]=inbuffer[k];
 80010a0:	683a      	ldr	r2, [r7, #0]
 80010a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010a4:	441a      	add	r2, r3
 80010a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010a8:	3b01      	subs	r3, #1
 80010aa:	6839      	ldr	r1, [r7, #0]
 80010ac:	440b      	add	r3, r1
 80010ae:	7812      	ldrb	r2, [r2, #0]
 80010b0:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80010b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010b4:	3301      	adds	r3, #1
 80010b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	4413      	add	r3, r2
 80010be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d3ed      	bcc.n	80010a0 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5e>
      }
      inbuffer[offset+length_topic_name-1]=0;
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	4413      	add	r3, r2
 80010ca:	3b01      	subs	r3, #1
 80010cc:	683a      	ldr	r2, [r7, #0]
 80010ce:	4413      	add	r3, r2
 80010d0:	2200      	movs	r2, #0
 80010d2:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 80010d4:	69bb      	ldr	r3, [r7, #24]
 80010d6:	3b01      	subs	r3, #1
 80010d8:	683a      	ldr	r2, [r7, #0]
 80010da:	441a      	add	r2, r3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	4413      	add	r3, r2
 80010e6:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 80010e8:	69bb      	ldr	r3, [r7, #24]
 80010ea:	683a      	ldr	r2, [r7, #0]
 80010ec:	441a      	add	r2, r3
 80010ee:	f107 0310 	add.w	r3, r7, #16
 80010f2:	4611      	mov	r1, r2
 80010f4:	4618      	mov	r0, r3
 80010f6:	f001 f8c7 	bl	8002288 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80010fa:	69bb      	ldr	r3, [r7, #24]
 80010fc:	3304      	adds	r3, #4
 80010fe:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001100:	69bb      	ldr	r3, [r7, #24]
 8001102:	623b      	str	r3, [r7, #32]
 8001104:	e00b      	b.n	800111e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xdc>
          inbuffer[k-1]=inbuffer[k];
 8001106:	683a      	ldr	r2, [r7, #0]
 8001108:	6a3b      	ldr	r3, [r7, #32]
 800110a:	441a      	add	r2, r3
 800110c:	6a3b      	ldr	r3, [r7, #32]
 800110e:	3b01      	subs	r3, #1
 8001110:	6839      	ldr	r1, [r7, #0]
 8001112:	440b      	add	r3, r1
 8001114:	7812      	ldrb	r2, [r2, #0]
 8001116:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001118:	6a3b      	ldr	r3, [r7, #32]
 800111a:	3301      	adds	r3, #1
 800111c:	623b      	str	r3, [r7, #32]
 800111e:	69ba      	ldr	r2, [r7, #24]
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	4413      	add	r3, r2
 8001124:	6a3a      	ldr	r2, [r7, #32]
 8001126:	429a      	cmp	r2, r3
 8001128:	d3ed      	bcc.n	8001106 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc4>
      }
      inbuffer[offset+length_message_type-1]=0;
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	4413      	add	r3, r2
 8001130:	3b01      	subs	r3, #1
 8001132:	683a      	ldr	r2, [r7, #0]
 8001134:	4413      	add	r3, r2
 8001136:	2200      	movs	r2, #0
 8001138:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 800113a:	69bb      	ldr	r3, [r7, #24]
 800113c:	3b01      	subs	r3, #1
 800113e:	683a      	ldr	r2, [r7, #0]
 8001140:	441a      	add	r2, r3
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	4413      	add	r3, r2
 800114c:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 800114e:	69bb      	ldr	r3, [r7, #24]
 8001150:	683a      	ldr	r2, [r7, #0]
 8001152:	441a      	add	r2, r3
 8001154:	f107 030c 	add.w	r3, r7, #12
 8001158:	4611      	mov	r1, r2
 800115a:	4618      	mov	r0, r3
 800115c:	f001 f894 	bl	8002288 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001160:	69bb      	ldr	r3, [r7, #24]
 8001162:	3304      	adds	r3, #4
 8001164:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001166:	69bb      	ldr	r3, [r7, #24]
 8001168:	61fb      	str	r3, [r7, #28]
 800116a:	e00b      	b.n	8001184 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x142>
          inbuffer[k-1]=inbuffer[k];
 800116c:	683a      	ldr	r2, [r7, #0]
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	441a      	add	r2, r3
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	3b01      	subs	r3, #1
 8001176:	6839      	ldr	r1, [r7, #0]
 8001178:	440b      	add	r3, r1
 800117a:	7812      	ldrb	r2, [r2, #0]
 800117c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	3301      	adds	r3, #1
 8001182:	61fb      	str	r3, [r7, #28]
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	4413      	add	r3, r2
 800118a:	69fa      	ldr	r2, [r7, #28]
 800118c:	429a      	cmp	r2, r3
 800118e:	d3ed      	bcc.n	800116c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x12a>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	4413      	add	r3, r2
 8001196:	3b01      	subs	r3, #1
 8001198:	683a      	ldr	r2, [r7, #0]
 800119a:	4413      	add	r3, r2
 800119c:	2200      	movs	r2, #0
 800119e:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 80011a0:	69bb      	ldr	r3, [r7, #24]
 80011a2:	3b01      	subs	r3, #1
 80011a4:	683a      	ldr	r2, [r7, #0]
 80011a6:	441a      	add	r2, r3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	4413      	add	r3, r2
 80011b2:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 80011b4:	2300      	movs	r3, #0
 80011b6:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	6839      	ldr	r1, [r7, #0]
 80011be:	440a      	add	r2, r1
 80011c0:	7812      	ldrb	r2, [r2, #0]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80011c6:	68ba      	ldr	r2, [r7, #8]
 80011c8:	69bb      	ldr	r3, [r7, #24]
 80011ca:	3301      	adds	r3, #1
 80011cc:	6839      	ldr	r1, [r7, #0]
 80011ce:	440b      	add	r3, r1
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	021b      	lsls	r3, r3, #8
 80011d4:	4313      	orrs	r3, r2
 80011d6:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80011d8:	68ba      	ldr	r2, [r7, #8]
 80011da:	69bb      	ldr	r3, [r7, #24]
 80011dc:	3302      	adds	r3, #2
 80011de:	6839      	ldr	r1, [r7, #0]
 80011e0:	440b      	add	r3, r1
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	041b      	lsls	r3, r3, #16
 80011e6:	4313      	orrs	r3, r2
 80011e8:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80011ea:	68ba      	ldr	r2, [r7, #8]
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	3303      	adds	r3, #3
 80011f0:	6839      	ldr	r1, [r7, #0]
 80011f2:	440b      	add	r3, r1
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	061b      	lsls	r3, r3, #24
 80011f8:	4313      	orrs	r3, r2
 80011fa:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 80011fc:	68ba      	ldr	r2, [r7, #8]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8001202:	69bb      	ldr	r3, [r7, #24]
 8001204:	3304      	adds	r3, #4
 8001206:	61bb      	str	r3, [r7, #24]
     return offset;
 8001208:	69bb      	ldr	r3, [r7, #24]
    }
 800120a:	4618      	mov	r0, r3
 800120c:	3728      	adds	r7, #40	@ 0x28
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
	...

08001214 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	4b02      	ldr	r3, [pc, #8]	@ (8001228 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x14>)
 800121e:	4618      	mov	r0, r3
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	bc80      	pop	{r7}
 8001226:	4770      	bx	lr
 8001228:	08006f38 	.word	0x08006f38

0800122c <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	4b02      	ldr	r3, [pc, #8]	@ (8001240 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x14>)
 8001236:	4618      	mov	r0, r3
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	bc80      	pop	{r7}
 800123e:	4770      	bx	lr
 8001240:	08006f54 	.word	0x08006f54

08001244 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff fd3e 	bl	8000cd0 <_ZN3ros3MsgC1Ev>
 8001254:	4a06      	ldr	r2, [pc, #24]	@ (8001270 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	601a      	str	r2, [r3, #0]
      level(0),
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2200      	movs	r2, #0
 800125e:	711a      	strb	r2, [r3, #4]
      msg("")
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	4a04      	ldr	r2, [pc, #16]	@ (8001274 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8001264:	609a      	str	r2, [r3, #8]
    {
    }
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4618      	mov	r0, r3
 800126a:	3708      	adds	r7, #8
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	08007170 	.word	0x08007170
 8001274:	08006f34 	.word	0x08006f34

08001278 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001282:	2300      	movs	r3, #0
 8001284:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	683a      	ldr	r2, [r7, #0]
 800128a:	4413      	add	r3, r2
 800128c:	687a      	ldr	r2, [r7, #4]
 800128e:	7912      	ldrb	r2, [r2, #4]
 8001290:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	3301      	adds	r3, #1
 8001296:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	4618      	mov	r0, r3
 800129e:	f7fe ff55 	bl	800014c <strlen>
 80012a2:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	683a      	ldr	r2, [r7, #0]
 80012a8:	4413      	add	r3, r2
 80012aa:	68b9      	ldr	r1, [r7, #8]
 80012ac:	4618      	mov	r0, r3
 80012ae:	f000 ffcd 	bl	800224c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	3304      	adds	r3, #4
 80012b6:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	683a      	ldr	r2, [r7, #0]
 80012bc:	18d0      	adds	r0, r2, r3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	68ba      	ldr	r2, [r7, #8]
 80012c4:	4619      	mov	r1, r3
 80012c6:	f005 fdb1 	bl	8006e2c <memcpy>
      offset += length_msg;
 80012ca:	68fa      	ldr	r2, [r7, #12]
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	4413      	add	r3, r2
 80012d0:	60fb      	str	r3, [r7, #12]
      return offset;
 80012d2:	68fb      	ldr	r3, [r7, #12]
    }
 80012d4:	4618      	mov	r0, r3
 80012d6:	3710      	adds	r7, #16
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}

080012dc <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80012dc:	b580      	push	{r7, lr}
 80012de:	b086      	sub	sp, #24
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80012e6:	2300      	movs	r3, #0
 80012e8:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	683a      	ldr	r2, [r7, #0]
 80012ee:	4413      	add	r3, r2
 80012f0:	781a      	ldrb	r2, [r3, #0]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	3301      	adds	r3, #1
 80012fa:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	683a      	ldr	r2, [r7, #0]
 8001300:	441a      	add	r2, r3
 8001302:	f107 030c 	add.w	r3, r7, #12
 8001306:	4611      	mov	r1, r2
 8001308:	4618      	mov	r0, r3
 800130a:	f000 ffbd 	bl	8002288 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	3304      	adds	r3, #4
 8001312:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	617b      	str	r3, [r7, #20]
 8001318:	e00b      	b.n	8001332 <_ZN14rosserial_msgs3Log11deserializeEPh+0x56>
          inbuffer[k-1]=inbuffer[k];
 800131a:	683a      	ldr	r2, [r7, #0]
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	441a      	add	r2, r3
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	3b01      	subs	r3, #1
 8001324:	6839      	ldr	r1, [r7, #0]
 8001326:	440b      	add	r3, r1
 8001328:	7812      	ldrb	r2, [r2, #0]
 800132a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	3301      	adds	r3, #1
 8001330:	617b      	str	r3, [r7, #20]
 8001332:	693a      	ldr	r2, [r7, #16]
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	4413      	add	r3, r2
 8001338:	697a      	ldr	r2, [r7, #20]
 800133a:	429a      	cmp	r2, r3
 800133c:	d3ed      	bcc.n	800131a <_ZN14rosserial_msgs3Log11deserializeEPh+0x3e>
      }
      inbuffer[offset+length_msg-1]=0;
 800133e:	693a      	ldr	r2, [r7, #16]
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	4413      	add	r3, r2
 8001344:	3b01      	subs	r3, #1
 8001346:	683a      	ldr	r2, [r7, #0]
 8001348:	4413      	add	r3, r2
 800134a:	2200      	movs	r2, #0
 800134c:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	3b01      	subs	r3, #1
 8001352:	683a      	ldr	r2, [r7, #0]
 8001354:	441a      	add	r2, r3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	4413      	add	r3, r2
 8001360:	613b      	str	r3, [r7, #16]
     return offset;
 8001362:	693b      	ldr	r3, [r7, #16]
    }
 8001364:	4618      	mov	r0, r3
 8001366:	3718      	adds	r7, #24
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}

0800136c <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	4b02      	ldr	r3, [pc, #8]	@ (8001380 <_ZN14rosserial_msgs3Log7getTypeEv+0x14>)
 8001376:	4618      	mov	r0, r3
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	bc80      	pop	{r7}
 800137e:	4770      	bx	lr
 8001380:	08006f78 	.word	0x08006f78

08001384 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	4b02      	ldr	r3, [pc, #8]	@ (8001398 <_ZN14rosserial_msgs3Log6getMD5Ev+0x14>)
 800138e:	4618      	mov	r0, r3
 8001390:	370c      	adds	r7, #12
 8001392:	46bd      	mov	sp, r7
 8001394:	bc80      	pop	{r7}
 8001396:	4770      	bx	lr
 8001398:	08006f8c 	.word	0x08006f8c

0800139c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7ff fc92 	bl	8000cd0 <_ZN3ros3MsgC1Ev>
 80013ac:	4a11      	ldr	r2, [pc, #68]	@ (80013f4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	601a      	str	r2, [r3, #0]
      ints_length(0), st_ints(), ints(nullptr),
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2200      	movs	r2, #0
 80013b6:	605a      	str	r2, [r3, #4]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2200      	movs	r2, #0
 80013bc:	609a      	str	r2, [r3, #8]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2200      	movs	r2, #0
 80013c2:	60da      	str	r2, [r3, #12]
      floats_length(0), st_floats(), floats(nullptr),
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2200      	movs	r2, #0
 80013c8:	611a      	str	r2, [r3, #16]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	f04f 0200 	mov.w	r2, #0
 80013d0:	615a      	str	r2, [r3, #20]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2200      	movs	r2, #0
 80013d6:	619a      	str	r2, [r3, #24]
      strings_length(0), st_strings(), strings(nullptr)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2200      	movs	r2, #0
 80013dc:	61da      	str	r2, [r3, #28]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2200      	movs	r2, #0
 80013e2:	621a      	str	r2, [r3, #32]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2200      	movs	r2, #0
 80013e8:	625a      	str	r2, [r3, #36]	@ 0x24
    {
    }
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4618      	mov	r0, r3
 80013ee:	3708      	adds	r7, #8
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	08007158 	.word	0x08007158

080013f8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b08a      	sub	sp, #40	@ 0x28
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001402:	2300      	movs	r3, #0
 8001404:	627b      	str	r3, [r7, #36]	@ 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6859      	ldr	r1, [r3, #4]
 800140a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800140c:	683a      	ldr	r2, [r7, #0]
 800140e:	4413      	add	r3, r2
 8001410:	b2ca      	uxtb	r2, r1
 8001412:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	0a19      	lsrs	r1, r3, #8
 800141a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800141c:	3301      	adds	r3, #1
 800141e:	683a      	ldr	r2, [r7, #0]
 8001420:	4413      	add	r3, r2
 8001422:	b2ca      	uxtb	r2, r1
 8001424:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	0c19      	lsrs	r1, r3, #16
 800142c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800142e:	3302      	adds	r3, #2
 8001430:	683a      	ldr	r2, [r7, #0]
 8001432:	4413      	add	r3, r2
 8001434:	b2ca      	uxtb	r2, r1
 8001436:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	0e19      	lsrs	r1, r3, #24
 800143e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001440:	3303      	adds	r3, #3
 8001442:	683a      	ldr	r2, [r7, #0]
 8001444:	4413      	add	r3, r2
 8001446:	b2ca      	uxtb	r2, r1
 8001448:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 800144a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800144c:	3304      	adds	r3, #4
 800144e:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001450:	2300      	movs	r3, #0
 8001452:	623b      	str	r3, [r7, #32]
 8001454:	e02a      	b.n	80014ac <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xb4>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	68da      	ldr	r2, [r3, #12]
 800145a:	6a3b      	ldr	r3, [r7, #32]
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	4413      	add	r3, r2
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8001464:	6939      	ldr	r1, [r7, #16]
 8001466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001468:	683a      	ldr	r2, [r7, #0]
 800146a:	4413      	add	r3, r2
 800146c:	b2ca      	uxtb	r2, r1
 800146e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	0a19      	lsrs	r1, r3, #8
 8001474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001476:	3301      	adds	r3, #1
 8001478:	683a      	ldr	r2, [r7, #0]
 800147a:	4413      	add	r3, r2
 800147c:	b2ca      	uxtb	r2, r1
 800147e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	0c19      	lsrs	r1, r3, #16
 8001484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001486:	3302      	adds	r3, #2
 8001488:	683a      	ldr	r2, [r7, #0]
 800148a:	4413      	add	r3, r2
 800148c:	b2ca      	uxtb	r2, r1
 800148e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	0e19      	lsrs	r1, r3, #24
 8001494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001496:	3303      	adds	r3, #3
 8001498:	683a      	ldr	r2, [r7, #0]
 800149a:	4413      	add	r3, r2
 800149c:	b2ca      	uxtb	r2, r1
 800149e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 80014a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014a2:	3304      	adds	r3, #4
 80014a4:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80014a6:	6a3b      	ldr	r3, [r7, #32]
 80014a8:	3301      	adds	r3, #1
 80014aa:	623b      	str	r3, [r7, #32]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	6a3a      	ldr	r2, [r7, #32]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d3cf      	bcc.n	8001456 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6919      	ldr	r1, [r3, #16]
 80014ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014bc:	683a      	ldr	r2, [r7, #0]
 80014be:	4413      	add	r3, r2
 80014c0:	b2ca      	uxtb	r2, r1
 80014c2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	691b      	ldr	r3, [r3, #16]
 80014c8:	0a19      	lsrs	r1, r3, #8
 80014ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014cc:	3301      	adds	r3, #1
 80014ce:	683a      	ldr	r2, [r7, #0]
 80014d0:	4413      	add	r3, r2
 80014d2:	b2ca      	uxtb	r2, r1
 80014d4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	691b      	ldr	r3, [r3, #16]
 80014da:	0c19      	lsrs	r1, r3, #16
 80014dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014de:	3302      	adds	r3, #2
 80014e0:	683a      	ldr	r2, [r7, #0]
 80014e2:	4413      	add	r3, r2
 80014e4:	b2ca      	uxtb	r2, r1
 80014e6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	691b      	ldr	r3, [r3, #16]
 80014ec:	0e19      	lsrs	r1, r3, #24
 80014ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014f0:	3303      	adds	r3, #3
 80014f2:	683a      	ldr	r2, [r7, #0]
 80014f4:	4413      	add	r3, r2
 80014f6:	b2ca      	uxtb	r2, r1
 80014f8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 80014fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014fc:	3304      	adds	r3, #4
 80014fe:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001500:	2300      	movs	r3, #0
 8001502:	61fb      	str	r3, [r7, #28]
 8001504:	e02a      	b.n	800155c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x164>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	699a      	ldr	r2, [r3, #24]
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	4413      	add	r3, r2
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8001514:	68f9      	ldr	r1, [r7, #12]
 8001516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001518:	683a      	ldr	r2, [r7, #0]
 800151a:	4413      	add	r3, r2
 800151c:	b2ca      	uxtb	r2, r1
 800151e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	0a19      	lsrs	r1, r3, #8
 8001524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001526:	3301      	adds	r3, #1
 8001528:	683a      	ldr	r2, [r7, #0]
 800152a:	4413      	add	r3, r2
 800152c:	b2ca      	uxtb	r2, r1
 800152e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	0c19      	lsrs	r1, r3, #16
 8001534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001536:	3302      	adds	r3, #2
 8001538:	683a      	ldr	r2, [r7, #0]
 800153a:	4413      	add	r3, r2
 800153c:	b2ca      	uxtb	r2, r1
 800153e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	0e19      	lsrs	r1, r3, #24
 8001544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001546:	3303      	adds	r3, #3
 8001548:	683a      	ldr	r2, [r7, #0]
 800154a:	4413      	add	r3, r2
 800154c:	b2ca      	uxtb	r2, r1
 800154e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8001550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001552:	3304      	adds	r3, #4
 8001554:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	3301      	adds	r3, #1
 800155a:	61fb      	str	r3, [r7, #28]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	691b      	ldr	r3, [r3, #16]
 8001560:	69fa      	ldr	r2, [r7, #28]
 8001562:	429a      	cmp	r2, r3
 8001564:	d3cf      	bcc.n	8001506 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10e>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	69d9      	ldr	r1, [r3, #28]
 800156a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800156c:	683a      	ldr	r2, [r7, #0]
 800156e:	4413      	add	r3, r2
 8001570:	b2ca      	uxtb	r2, r1
 8001572:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	69db      	ldr	r3, [r3, #28]
 8001578:	0a19      	lsrs	r1, r3, #8
 800157a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800157c:	3301      	adds	r3, #1
 800157e:	683a      	ldr	r2, [r7, #0]
 8001580:	4413      	add	r3, r2
 8001582:	b2ca      	uxtb	r2, r1
 8001584:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	69db      	ldr	r3, [r3, #28]
 800158a:	0c19      	lsrs	r1, r3, #16
 800158c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800158e:	3302      	adds	r3, #2
 8001590:	683a      	ldr	r2, [r7, #0]
 8001592:	4413      	add	r3, r2
 8001594:	b2ca      	uxtb	r2, r1
 8001596:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	69db      	ldr	r3, [r3, #28]
 800159c:	0e19      	lsrs	r1, r3, #24
 800159e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015a0:	3303      	adds	r3, #3
 80015a2:	683a      	ldr	r2, [r7, #0]
 80015a4:	4413      	add	r3, r2
 80015a6:	b2ca      	uxtb	r2, r1
 80015a8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 80015aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ac:	3304      	adds	r3, #4
 80015ae:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80015b0:	2300      	movs	r3, #0
 80015b2:	61bb      	str	r3, [r7, #24]
 80015b4:	e027      	b.n	8001606 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x20e>
      uint32_t length_stringsi = strlen(this->strings[i]);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80015ba:	69bb      	ldr	r3, [r7, #24]
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	4413      	add	r3, r2
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7fe fdc2 	bl	800014c <strlen>
 80015c8:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 80015ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015cc:	683a      	ldr	r2, [r7, #0]
 80015ce:	4413      	add	r3, r2
 80015d0:	6979      	ldr	r1, [r7, #20]
 80015d2:	4618      	mov	r0, r3
 80015d4:	f000 fe3a 	bl	800224c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80015d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015da:	3304      	adds	r3, #4
 80015dc:	627b      	str	r3, [r7, #36]	@ 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 80015de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015e0:	683a      	ldr	r2, [r7, #0]
 80015e2:	18d0      	adds	r0, r2, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80015e8:	69bb      	ldr	r3, [r7, #24]
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	4413      	add	r3, r2
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	697a      	ldr	r2, [r7, #20]
 80015f2:	4619      	mov	r1, r3
 80015f4:	f005 fc1a 	bl	8006e2c <memcpy>
      offset += length_stringsi;
 80015f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	4413      	add	r3, r2
 80015fe:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001600:	69bb      	ldr	r3, [r7, #24]
 8001602:	3301      	adds	r3, #1
 8001604:	61bb      	str	r3, [r7, #24]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	69db      	ldr	r3, [r3, #28]
 800160a:	69ba      	ldr	r2, [r7, #24]
 800160c:	429a      	cmp	r2, r3
 800160e:	d3d2      	bcc.n	80015b6 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1be>
      }
      return offset;
 8001610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8001612:	4618      	mov	r0, r3
 8001614:	3728      	adds	r7, #40	@ 0x28
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}

0800161a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800161a:	b580      	push	{r7, lr}
 800161c:	b08e      	sub	sp, #56	@ 0x38
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]
 8001622:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001624:	2300      	movs	r3, #0
 8001626:	637b      	str	r3, [r7, #52]	@ 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001628:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800162a:	683a      	ldr	r2, [r7, #0]
 800162c:	4413      	add	r3, r2
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001632:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001634:	3301      	adds	r3, #1
 8001636:	683a      	ldr	r2, [r7, #0]
 8001638:	4413      	add	r3, r2
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	021b      	lsls	r3, r3, #8
 800163e:	6a3a      	ldr	r2, [r7, #32]
 8001640:	4313      	orrs	r3, r2
 8001642:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001644:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001646:	3302      	adds	r3, #2
 8001648:	683a      	ldr	r2, [r7, #0]
 800164a:	4413      	add	r3, r2
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	041b      	lsls	r3, r3, #16
 8001650:	6a3a      	ldr	r2, [r7, #32]
 8001652:	4313      	orrs	r3, r2
 8001654:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001656:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001658:	3303      	adds	r3, #3
 800165a:	683a      	ldr	r2, [r7, #0]
 800165c:	4413      	add	r3, r2
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	061b      	lsls	r3, r3, #24
 8001662:	6a3a      	ldr	r2, [r7, #32]
 8001664:	4313      	orrs	r3, r2
 8001666:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8001668:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800166a:	3304      	adds	r3, #4
 800166c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(ints_lengthT > ints_length)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	6a3a      	ldr	r2, [r7, #32]
 8001674:	429a      	cmp	r2, r3
 8001676:	d90a      	bls.n	800168e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	68da      	ldr	r2, [r3, #12]
 800167c:	6a3b      	ldr	r3, [r7, #32]
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	4619      	mov	r1, r3
 8001682:	4610      	mov	r0, r2
 8001684:	f005 fb58 	bl	8006d38 <realloc>
 8001688:	4602      	mov	r2, r0
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6a3a      	ldr	r2, [r7, #32]
 8001692:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8001694:	2300      	movs	r3, #0
 8001696:	633b      	str	r3, [r7, #48]	@ 0x30
 8001698:	e035      	b.n	8001706 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xec>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 800169a:	2300      	movs	r3, #0
 800169c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80016a2:	6839      	ldr	r1, [r7, #0]
 80016a4:	440a      	add	r2, r1
 80016a6:	7812      	ldrb	r2, [r2, #0]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80016ac:	697a      	ldr	r2, [r7, #20]
 80016ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80016b0:	3301      	adds	r3, #1
 80016b2:	6839      	ldr	r1, [r7, #0]
 80016b4:	440b      	add	r3, r1
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	021b      	lsls	r3, r3, #8
 80016ba:	4313      	orrs	r3, r2
 80016bc:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80016be:	697a      	ldr	r2, [r7, #20]
 80016c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80016c2:	3302      	adds	r3, #2
 80016c4:	6839      	ldr	r1, [r7, #0]
 80016c6:	440b      	add	r3, r1
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	041b      	lsls	r3, r3, #16
 80016cc:	4313      	orrs	r3, r2
 80016ce:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80016d0:	697a      	ldr	r2, [r7, #20]
 80016d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80016d4:	3303      	adds	r3, #3
 80016d6:	6839      	ldr	r1, [r7, #0]
 80016d8:	440b      	add	r3, r1
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	061b      	lsls	r3, r3, #24
 80016de:	4313      	orrs	r3, r2
 80016e0:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 80016e2:	697a      	ldr	r2, [r7, #20]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 80016e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80016ea:	3304      	adds	r3, #4
 80016ec:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	68da      	ldr	r2, [r3, #12]
 80016f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	4413      	add	r3, r2
 80016f8:	687a      	ldr	r2, [r7, #4]
 80016fa:	3208      	adds	r2, #8
 80016fc:	6812      	ldr	r2, [r2, #0]
 80016fe:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8001700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001702:	3301      	adds	r3, #1
 8001704:	633b      	str	r3, [r7, #48]	@ 0x30
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800170c:	429a      	cmp	r2, r3
 800170e:	d3c4      	bcc.n	800169a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x80>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001710:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001712:	683a      	ldr	r2, [r7, #0]
 8001714:	4413      	add	r3, r2
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800171a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800171c:	3301      	adds	r3, #1
 800171e:	683a      	ldr	r2, [r7, #0]
 8001720:	4413      	add	r3, r2
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	021b      	lsls	r3, r3, #8
 8001726:	69fa      	ldr	r2, [r7, #28]
 8001728:	4313      	orrs	r3, r2
 800172a:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800172c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800172e:	3302      	adds	r3, #2
 8001730:	683a      	ldr	r2, [r7, #0]
 8001732:	4413      	add	r3, r2
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	041b      	lsls	r3, r3, #16
 8001738:	69fa      	ldr	r2, [r7, #28]
 800173a:	4313      	orrs	r3, r2
 800173c:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800173e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001740:	3303      	adds	r3, #3
 8001742:	683a      	ldr	r2, [r7, #0]
 8001744:	4413      	add	r3, r2
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	061b      	lsls	r3, r3, #24
 800174a:	69fa      	ldr	r2, [r7, #28]
 800174c:	4313      	orrs	r3, r2
 800174e:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8001750:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001752:	3304      	adds	r3, #4
 8001754:	637b      	str	r3, [r7, #52]	@ 0x34
      if(floats_lengthT > floats_length)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	691b      	ldr	r3, [r3, #16]
 800175a:	69fa      	ldr	r2, [r7, #28]
 800175c:	429a      	cmp	r2, r3
 800175e:	d90a      	bls.n	8001776 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	699a      	ldr	r2, [r3, #24]
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	4619      	mov	r1, r3
 800176a:	4610      	mov	r0, r2
 800176c:	f005 fae4 	bl	8006d38 <realloc>
 8001770:	4602      	mov	r2, r0
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	69fa      	ldr	r2, [r7, #28]
 800177a:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 800177c:	2300      	movs	r3, #0
 800177e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001780:	e035      	b.n	80017ee <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1d4>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8001782:	2300      	movs	r3, #0
 8001784:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800178a:	6839      	ldr	r1, [r7, #0]
 800178c:	440a      	add	r2, r1
 800178e:	7812      	ldrb	r2, [r2, #0]
 8001790:	4313      	orrs	r3, r2
 8001792:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001794:	693a      	ldr	r2, [r7, #16]
 8001796:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001798:	3301      	adds	r3, #1
 800179a:	6839      	ldr	r1, [r7, #0]
 800179c:	440b      	add	r3, r1
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	021b      	lsls	r3, r3, #8
 80017a2:	4313      	orrs	r3, r2
 80017a4:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80017a6:	693a      	ldr	r2, [r7, #16]
 80017a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017aa:	3302      	adds	r3, #2
 80017ac:	6839      	ldr	r1, [r7, #0]
 80017ae:	440b      	add	r3, r1
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	041b      	lsls	r3, r3, #16
 80017b4:	4313      	orrs	r3, r2
 80017b6:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80017b8:	693a      	ldr	r2, [r7, #16]
 80017ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017bc:	3303      	adds	r3, #3
 80017be:	6839      	ldr	r1, [r7, #0]
 80017c0:	440b      	add	r3, r1
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	061b      	lsls	r3, r3, #24
 80017c6:	4313      	orrs	r3, r2
 80017c8:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 80017ca:	693a      	ldr	r2, [r7, #16]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 80017d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017d2:	3304      	adds	r3, #4
 80017d4:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	699a      	ldr	r2, [r3, #24]
 80017da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	4413      	add	r3, r2
 80017e0:	687a      	ldr	r2, [r7, #4]
 80017e2:	3214      	adds	r2, #20
 80017e4:	6812      	ldr	r2, [r2, #0]
 80017e6:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 80017e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017ea:	3301      	adds	r3, #1
 80017ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	691b      	ldr	r3, [r3, #16]
 80017f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d3c4      	bcc.n	8001782 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x168>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80017f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017fa:	683a      	ldr	r2, [r7, #0]
 80017fc:	4413      	add	r3, r2
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001802:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001804:	3301      	adds	r3, #1
 8001806:	683a      	ldr	r2, [r7, #0]
 8001808:	4413      	add	r3, r2
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	021b      	lsls	r3, r3, #8
 800180e:	69ba      	ldr	r2, [r7, #24]
 8001810:	4313      	orrs	r3, r2
 8001812:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001814:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001816:	3302      	adds	r3, #2
 8001818:	683a      	ldr	r2, [r7, #0]
 800181a:	4413      	add	r3, r2
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	041b      	lsls	r3, r3, #16
 8001820:	69ba      	ldr	r2, [r7, #24]
 8001822:	4313      	orrs	r3, r2
 8001824:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001826:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001828:	3303      	adds	r3, #3
 800182a:	683a      	ldr	r2, [r7, #0]
 800182c:	4413      	add	r3, r2
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	061b      	lsls	r3, r3, #24
 8001832:	69ba      	ldr	r2, [r7, #24]
 8001834:	4313      	orrs	r3, r2
 8001836:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8001838:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800183a:	3304      	adds	r3, #4
 800183c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(strings_lengthT > strings_length)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	69db      	ldr	r3, [r3, #28]
 8001842:	69ba      	ldr	r2, [r7, #24]
 8001844:	429a      	cmp	r2, r3
 8001846:	d90a      	bls.n	800185e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800184c:	69bb      	ldr	r3, [r7, #24]
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	4619      	mov	r1, r3
 8001852:	4610      	mov	r0, r2
 8001854:	f005 fa70 	bl	8006d38 <realloc>
 8001858:	4602      	mov	r2, r0
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	625a      	str	r2, [r3, #36]	@ 0x24
      strings_length = strings_lengthT;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8001864:	2300      	movs	r3, #0
 8001866:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001868:	e03e      	b.n	80018e8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2ce>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 800186a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800186c:	683a      	ldr	r2, [r7, #0]
 800186e:	441a      	add	r2, r3
 8001870:	f107 030c 	add.w	r3, r7, #12
 8001874:	4611      	mov	r1, r2
 8001876:	4618      	mov	r0, r3
 8001878:	f000 fd06 	bl	8002288 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800187c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800187e:	3304      	adds	r3, #4
 8001880:	637b      	str	r3, [r7, #52]	@ 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001882:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001884:	627b      	str	r3, [r7, #36]	@ 0x24
 8001886:	e00b      	b.n	80018a0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x286>
          inbuffer[k-1]=inbuffer[k];
 8001888:	683a      	ldr	r2, [r7, #0]
 800188a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800188c:	441a      	add	r2, r3
 800188e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001890:	3b01      	subs	r3, #1
 8001892:	6839      	ldr	r1, [r7, #0]
 8001894:	440b      	add	r3, r1
 8001896:	7812      	ldrb	r2, [r2, #0]
 8001898:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800189a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800189c:	3301      	adds	r3, #1
 800189e:	627b      	str	r3, [r7, #36]	@ 0x24
 80018a0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	4413      	add	r3, r2
 80018a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d3ed      	bcc.n	8001888 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26e>
      }
      inbuffer[offset+length_st_strings-1]=0;
 80018ac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	4413      	add	r3, r2
 80018b2:	3b01      	subs	r3, #1
 80018b4:	683a      	ldr	r2, [r7, #0]
 80018b6:	4413      	add	r3, r2
 80018b8:	2200      	movs	r2, #0
 80018ba:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 80018bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018be:	3b01      	subs	r3, #1
 80018c0:	683a      	ldr	r2, [r7, #0]
 80018c2:	441a      	add	r2, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 80018c8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	4413      	add	r3, r2
 80018ce:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80018d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	4413      	add	r3, r2
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	3220      	adds	r2, #32
 80018de:	6812      	ldr	r2, [r2, #0]
 80018e0:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 80018e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018e4:	3301      	adds	r3, #1
 80018e6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	69db      	ldr	r3, [r3, #28]
 80018ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d3bb      	bcc.n	800186a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x250>
      }
     return offset;
 80018f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 80018f4:	4618      	mov	r0, r3
 80018f6:	3738      	adds	r7, #56	@ 0x38
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}

080018fc <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	4b02      	ldr	r3, [pc, #8]	@ (8001910 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x14>)
 8001906:	4618      	mov	r0, r3
 8001908:	370c      	adds	r7, #12
 800190a:	46bd      	mov	sp, r7
 800190c:	bc80      	pop	{r7}
 800190e:	4770      	bx	lr
 8001910:	080070ac 	.word	0x080070ac

08001914 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	4b02      	ldr	r3, [pc, #8]	@ (8001928 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x14>)
 800191e:	4618      	mov	r0, r3
 8001920:	370c      	adds	r7, #12
 8001922:	46bd      	mov	sp, r7
 8001924:	bc80      	pop	{r7}
 8001926:	4770      	bx	lr
 8001928:	08006fb0 	.word	0x08006fb0

0800192c <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 800192c:	b480      	push	{r7}
 800192e:	b085      	sub	sp, #20
 8001930:	af00      	add	r7, sp, #0
 8001932:	60f8      	str	r0, [r7, #12]
 8001934:	60b9      	str	r1, [r7, #8]
 8001936:	607a      	str	r2, [r7, #4]
 8001938:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	68ba      	ldr	r2, [r7, #8]
 800193e:	601a      	str	r2, [r3, #0]
    msg_(msg),
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	605a      	str	r2, [r3, #4]
    endpoint_(endpoint) {};
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	683a      	ldr	r2, [r7, #0]
 800194a:	611a      	str	r2, [r3, #16]
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	4618      	mov	r0, r3
 8001950:	3714      	adds	r7, #20
 8001952:	46bd      	mov	sp, r7
 8001954:	bc80      	pop	{r7}
 8001956:	4770      	bx	lr

08001958 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	68d8      	ldr	r0, [r3, #12]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	68db      	ldr	r3, [r3, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	687a      	ldr	r2, [r7, #4]
 8001970:	6891      	ldr	r1, [r2, #8]
 8001972:	683a      	ldr	r2, [r7, #0]
 8001974:	4798      	blx	r3
 8001976:	4603      	mov	r3, r0
  };
 8001978:	4618      	mov	r0, r3
 800197a:	3708      	adds	r7, #8
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}

08001980 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	691b      	ldr	r3, [r3, #16]
  }
 800198c:	4618      	mov	r0, r3
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	bc80      	pop	{r7}
 8001994:	4770      	bx	lr

08001996 <_ZN10SerialCommC1ER20__UART_HandleTypeDef>:
    uint16_t tx_tail = 0;
    uint16_t rx_tail = 0;
    static constexpr uint16_t buf_mask = buffer_size - 1;

public:
    SerialComm(UART_HandleTypeDef &huart) : huart(huart)
 8001996:	b480      	push	{r7}
 8001998:	b083      	sub	sp, #12
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
 800199e:	6039      	str	r1, [r7, #0]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	683a      	ldr	r2, [r7, #0]
 80019a4:	601a      	str	r2, [r3, #0]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80019ac:	2201      	movs	r2, #1
 80019ae:	711a      	strb	r2, [r3, #4]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80019b6:	2200      	movs	r2, #0
 80019b8:	80da      	strh	r2, [r3, #6]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80019c0:	2200      	movs	r2, #0
 80019c2:	811a      	strh	r2, [r3, #8]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80019ca:	2200      	movs	r2, #0
 80019cc:	815a      	strh	r2, [r3, #10]
    {
        // Other initialization code
    }
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4618      	mov	r0, r3
 80019d2:	370c      	adds	r7, #12
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bc80      	pop	{r7}
 80019d8:	4770      	bx	lr

080019da <_ZN10SerialComm4initEv>:

    void init(void)
 80019da:	b580      	push	{r7, lr}
 80019dc:	b082      	sub	sp, #8
 80019de:	af00      	add	r7, sp, #0
 80019e0:	6078      	str	r0, [r7, #4]
    {
        reset_rbuf();
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f000 f90e 	bl	8001c04 <_ZN10SerialComm10reset_rbufEv>
    }
 80019e8:	bf00      	nop
 80019ea:	3708      	adds	r7, #8
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}

080019f0 <_ZN10SerialComm4readEv>:

    /** @brief Read a character from the Rx buffer using the FIFO method.
     * 
     * @return The read character.
    */
    int read(void)
 80019f0:	b480      	push	{r7}
 80019f2:	b085      	sub	sp, #20
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
    {
       uint16_t rx_head = (buffer_size - huart.hdmarx->Instance->CNDTR) & buf_mask;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	b29b      	uxth	r3, r3
 8001a04:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8001a08:	b29b      	uxth	r3, r3
 8001a0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a0e:	81fb      	strh	r3, [r7, #14]

        // Check for overlapping (which is bad, data will be overwritten)
        if (rx_tail == rx_head)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001a16:	895b      	ldrh	r3, [r3, #10]
 8001a18:	89fa      	ldrh	r2, [r7, #14]
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d102      	bne.n	8001a24 <_ZN10SerialComm4readEv+0x34>
        {
            return -1;
 8001a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a22:	e01d      	b.n	8001a60 <_ZN10SerialComm4readEv+0x70>
        }

        // Read a value and increment the read pointer (TAIL).
        int c = (int) rx_buf[rx_tail++];
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001a2a:	895b      	ldrh	r3, [r3, #10]
 8001a2c:	1c5a      	adds	r2, r3, #1
 8001a2e:	b291      	uxth	r1, r2
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8001a36:	8151      	strh	r1, [r2, #10]
 8001a38:	461a      	mov	r2, r3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4413      	add	r3, r2
 8001a3e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a42:	3304      	adds	r3, #4
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	60bb      	str	r3, [r7, #8]
        rx_tail &= buf_mask;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001a4e:	895b      	ldrh	r3, [r3, #10]
 8001a50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a54:	b29a      	uxth	r2, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001a5c:	815a      	strh	r2, [r3, #10]

        return c;
 8001a5e:	68bb      	ldr	r3, [r7, #8]
    }
 8001a60:	4618      	mov	r0, r3
 8001a62:	3714      	adds	r7, #20
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bc80      	pop	{r7}
 8001a68:	4770      	bx	lr

08001a6a <_ZN10SerialComm5writeEPKhi>:
     * @param data The pointer to the data string.
     * @param length The length of the data string.
     * 
     * @return Void. 
    */
    void write(const uint8_t* const data, const int length)
 8001a6a:	b580      	push	{r7, lr}
 8001a6c:	b086      	sub	sp, #24
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	60f8      	str	r0, [r7, #12]
 8001a72:	60b9      	str	r1, [r7, #8]
 8001a74:	607a      	str	r2, [r7, #4]
    {
        // Faulty data guard.
        if (length > buffer_size || length < 1)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001a7c:	dc46      	bgt.n	8001b0c <_ZN10SerialComm5writeEPKhi+0xa2>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	dd43      	ble.n	8001b0c <_ZN10SerialComm5writeEPKhi+0xa2>
        {
            return;
        }

        // Wait for the completion of the previous Tx transfer.
        while (!is_tx_cplt);
 8001a84:	bf00      	nop
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001a8c:	791b      	ldrb	r3, [r3, #4]
 8001a8e:	f083 0301 	eor.w	r3, r3, #1
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d1f6      	bne.n	8001a86 <_ZN10SerialComm5writeEPKhi+0x1c>

        // Check if the data is bigger than the remaining storage
        int w_len = (length <= (buffer_size - tx_head)) ? length : (buffer_size - tx_head);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001a9e:	88db      	ldrh	r3, [r3, #6]
 8001aa0:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8001aa4:	687a      	ldr	r2, [r7, #4]
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	bfa8      	it	ge
 8001aaa:	4613      	movge	r3, r2
 8001aac:	617b      	str	r3, [r7, #20]

        // Write the data and increment the write pointer (TX_HEAD)
        memcpy(&tx_buf[tx_head], data, w_len);
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001ab4:	88db      	ldrh	r3, [r3, #6]
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	4413      	add	r3, r2
 8001abc:	3304      	adds	r3, #4
 8001abe:	697a      	ldr	r2, [r7, #20]
 8001ac0:	68b9      	ldr	r1, [r7, #8]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f005 f9b2 	bl	8006e2c <memcpy>
        tx_head = (tx_head + length) & buf_mask;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001ace:	88da      	ldrh	r2, [r3, #6]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	4413      	add	r3, r2
 8001ad6:	b29b      	uxth	r3, r3
 8001ad8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001adc:	b29a      	uxth	r2, r3
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001ae4:	80da      	strh	r2, [r3, #6]

        // Reset the TX_HEAD pointer and write the remaining data
        // (If data is bigger than the previous remaining data)
        if (length != w_len)
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d00a      	beq.n	8001b04 <_ZN10SerialComm5writeEPKhi+0x9a>
        {
            memcpy(tx_buf, &data[w_len], length - w_len);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	1d18      	adds	r0, r3, #4
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	68ba      	ldr	r2, [r7, #8]
 8001af6:	18d1      	adds	r1, r2, r3
 8001af8:	687a      	ldr	r2, [r7, #4]
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	461a      	mov	r2, r3
 8001b00:	f005 f994 	bl	8006e2c <memcpy>
        }

        // TODO: Start transfering
        flush();
 8001b04:	68f8      	ldr	r0, [r7, #12]
 8001b06:	f000 f805 	bl	8001b14 <_ZN10SerialComm5flushEv>
 8001b0a:	e000      	b.n	8001b0e <_ZN10SerialComm5writeEPKhi+0xa4>
            return;
 8001b0c:	bf00      	nop
    }
 8001b0e:	3718      	adds	r7, #24
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <_ZN10SerialComm5flushEv>:

    /** @brief Transmit the just written data in the Tx buffer
     * 
     * @return void.
    */
    void flush()
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
    {
        if (is_tx_cplt)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001b22:	791b      	ldrb	r3, [r3, #4]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d05b      	beq.n	8001be0 <_ZN10SerialComm5flushEv+0xcc>
        {
            // if HEAD == TAIL => The buffer is empty => Nothing to send.
            if (tx_head != tx_tail)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001b2e:	88da      	ldrh	r2, [r3, #6]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001b36:	891b      	ldrh	r3, [r3, #8]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d04c      	beq.n	8001bd6 <_ZN10SerialComm5flushEv+0xc2>
            {
                uint16_t len = 0;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	81fb      	strh	r3, [r7, #14]

                if (tx_tail < tx_head)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001b46:	891a      	ldrh	r2, [r3, #8]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001b4e:	88db      	ldrh	r3, [r3, #6]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d218      	bcs.n	8001b86 <_ZN10SerialComm5flushEv+0x72>
                {
                    len = tx_head - tx_tail;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001b5a:	88da      	ldrh	r2, [r3, #6]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001b62:	891b      	ldrh	r3, [r3, #8]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	81fb      	strh	r3, [r7, #14]
                    HAL_UART_Transmit_DMA(&huart, &tx_buf[tx_tail], len);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6818      	ldr	r0, [r3, #0]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001b72:	891b      	ldrh	r3, [r3, #8]
 8001b74:	461a      	mov	r2, r3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4413      	add	r3, r2
 8001b7a:	3304      	adds	r3, #4
 8001b7c:	89fa      	ldrh	r2, [r7, #14]
 8001b7e:	4619      	mov	r1, r3
 8001b80:	f004 f87e 	bl	8005c80 <HAL_UART_Transmit_DMA>
 8001b84:	e01f      	b.n	8001bc6 <_ZN10SerialComm5flushEv+0xb2>
                }
                else
                {
                    len = buffer_size - tx_tail;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001b8c:	891b      	ldrh	r3, [r3, #8]
 8001b8e:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8001b92:	81fb      	strh	r3, [r7, #14]
                    HAL_UART_Transmit_DMA(&huart, &tx_buf[tx_tail], len);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6818      	ldr	r0, [r3, #0]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001b9e:	891b      	ldrh	r3, [r3, #8]
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	3304      	adds	r3, #4
 8001ba8:	89fa      	ldrh	r2, [r7, #14]
 8001baa:	4619      	mov	r1, r3
 8001bac:	f004 f868 	bl	8005c80 <HAL_UART_Transmit_DMA>
                    HAL_UART_Transmit_DMA(&huart, tx_buf, tx_head);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6818      	ldr	r0, [r3, #0]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	1d19      	adds	r1, r3, #4
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001bbe:	88db      	ldrh	r3, [r3, #6]
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	f004 f85d 	bl	8005c80 <HAL_UART_Transmit_DMA>
                }
                
                tx_tail = tx_head;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001bcc:	88da      	ldrh	r2, [r3, #6]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001bd4:	811a      	strh	r2, [r3, #8]
            }
            
            is_tx_cplt = false;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001bdc:	2200      	movs	r2, #0
 8001bde:	711a      	strb	r2, [r3, #4]
        }
    }
 8001be0:	bf00      	nop
 8001be2:	3710      	adds	r7, #16
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <_ZN10SerialComm11set_tx_cpltEv>:

    void set_tx_cplt(void)
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
    {
        is_tx_cplt = true;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	711a      	strb	r2, [r3, #4]
    }
 8001bfa:	bf00      	nop
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bc80      	pop	{r7}
 8001c02:	4770      	bx	lr

08001c04 <_ZN10SerialComm10reset_rbufEv>:

    void reset_rbuf(void)
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
    {
        HAL_UART_Receive_DMA(&huart, (uint8_t *)rx_buf, buffer_size);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6818      	ldr	r0, [r3, #0]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c16:	3304      	adds	r3, #4
 8001c18:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	f004 f89f 	bl	8005d60 <HAL_UART_Receive_DMA>
    }
 8001c22:	bf00      	nop
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
	...

08001c2c <_ZN13STM32HardwareC1Ev>:
class STM32Hardware {
  protected:
    SerialComm &comm;

  public:
    STM32Hardware() : comm(comm_rosserial)
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	4a04      	ldr	r2, [pc, #16]	@ (8001c48 <_ZN13STM32HardwareC1Ev+0x1c>)
 8001c38:	601a      	str	r2, [r3, #0]
    {
        // TODO:
    }
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bc80      	pop	{r7}
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	200001e0 	.word	0x200001e0

08001c4c <_ZN13STM32Hardware4initEv>:
    STM32Hardware(SerialComm &comm) : comm(comm)
    {
        // TODO: 
    }
  
    void init()
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
    {
        comm.init();
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff febe 	bl	80019da <_ZN10SerialComm4initEv>
    }
 8001c5e:	bf00      	nop
 8001c60:	3708      	adds	r7, #8
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}

08001c66 <_ZN13STM32Hardware4readEv>:

    int read()  
 8001c66:	b580      	push	{r7, lr}
 8001c68:	b082      	sub	sp, #8
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
    {
        return comm.read();
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7ff febc 	bl	80019f0 <_ZN10SerialComm4readEv>
 8001c78:	4603      	mov	r3, r0
    }
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length)
 8001c82:	b580      	push	{r7, lr}
 8001c84:	b084      	sub	sp, #16
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	60f8      	str	r0, [r7, #12]
 8001c8a:	60b9      	str	r1, [r7, #8]
 8001c8c:	607a      	str	r2, [r7, #4]
    {
        comm.write(data, length);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	68b9      	ldr	r1, [r7, #8]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7ff fee7 	bl	8001a6a <_ZN10SerialComm5writeEPKhi>
    }
 8001c9c:	bf00      	nop
 8001c9e:	3710      	adds	r7, #16
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <_ZN13STM32Hardware4timeEv>:

    unsigned long time()
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
    { 
        return HAL_GetTick(); 
 8001cac:	f001 fbc6 	bl	800343c <HAL_GetTick>
 8001cb0:	4603      	mov	r3, r0
    }
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3708      	adds	r7, #8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
	...

08001cbc <_ZN8std_msgs5UInt8C1Ev>:
  {
    public:
      typedef uint8_t _data_type;
      _data_type data;

    UInt8():
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
      data(0)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7ff f802 	bl	8000cd0 <_ZN3ros3MsgC1Ev>
 8001ccc:	4a05      	ldr	r2, [pc, #20]	@ (8001ce4 <_ZN8std_msgs5UInt8C1Ev+0x28>)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	601a      	str	r2, [r3, #0]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	711a      	strb	r2, [r3, #4]
    {
    }
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	08007114 	.word	0x08007114

08001ce8 <_ZNK8std_msgs5UInt89serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001ce8:	b480      	push	{r7}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data >> (8 * 0)) & 0xFF;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	683a      	ldr	r2, [r7, #0]
 8001cfa:	4413      	add	r3, r2
 8001cfc:	687a      	ldr	r2, [r7, #4]
 8001cfe:	7912      	ldrb	r2, [r2, #4]
 8001d00:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	3301      	adds	r3, #1
 8001d06:	60fb      	str	r3, [r7, #12]
      return offset;
 8001d08:	68fb      	ldr	r3, [r7, #12]
    }
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3714      	adds	r7, #20
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bc80      	pop	{r7}
 8001d12:	4770      	bx	lr

08001d14 <_ZN8std_msgs5UInt811deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001d14:	b480      	push	{r7}
 8001d16:	b085      	sub	sp, #20
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	60fb      	str	r3, [r7, #12]
      this->data =  ((uint8_t) (*(inbuffer + offset)));
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	683a      	ldr	r2, [r7, #0]
 8001d26:	4413      	add	r3, r2
 8001d28:	781a      	ldrb	r2, [r3, #0]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->data);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	3301      	adds	r3, #1
 8001d32:	60fb      	str	r3, [r7, #12]
     return offset;
 8001d34:	68fb      	ldr	r3, [r7, #12]
    }
 8001d36:	4618      	mov	r0, r3
 8001d38:	3714      	adds	r7, #20
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bc80      	pop	{r7}
 8001d3e:	4770      	bx	lr

08001d40 <_ZN8std_msgs5UInt87getTypeEv>:

    virtual const char * getType() override { return "std_msgs/UInt8"; };
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	4b02      	ldr	r3, [pc, #8]	@ (8001d54 <_ZN8std_msgs5UInt87getTypeEv+0x14>)
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	370c      	adds	r7, #12
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bc80      	pop	{r7}
 8001d52:	4770      	bx	lr
 8001d54:	08006fd4 	.word	0x08006fd4

08001d58 <_ZN8std_msgs5UInt86getMD5Ev>:
    virtual const char * getMD5() override { return "7c8164229e7d2c17eb95e9231617fdee"; };
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	4b02      	ldr	r3, [pc, #8]	@ (8001d6c <_ZN8std_msgs5UInt86getMD5Ev+0x14>)
 8001d62:	4618      	mov	r0, r3
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bc80      	pop	{r7}
 8001d6a:	4770      	bx	lr
 8001d6c:	08006fe4 	.word	0x08006fe4

08001d70 <_ZN8std_msgs6UInt32C1Ev>:
  {
    public:
      typedef uint32_t _data_type;
      _data_type data;

    UInt32():
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
      data(0)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7fe ffa8 	bl	8000cd0 <_ZN3ros3MsgC1Ev>
 8001d80:	4a05      	ldr	r2, [pc, #20]	@ (8001d98 <_ZN8std_msgs6UInt32C1Ev+0x28>)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	601a      	str	r2, [r3, #0]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	605a      	str	r2, [r3, #4]
    {
    }
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	080070fc 	.word	0x080070fc

08001d9c <_ZNK8std_msgs6UInt329serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001d9c:	b480      	push	{r7}
 8001d9e:	b085      	sub	sp, #20
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001da6:	2300      	movs	r3, #0
 8001da8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data >> (8 * 0)) & 0xFF;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6859      	ldr	r1, [r3, #4]
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	683a      	ldr	r2, [r7, #0]
 8001db2:	4413      	add	r3, r2
 8001db4:	b2ca      	uxtb	r2, r1
 8001db6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data >> (8 * 1)) & 0xFF;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	0a19      	lsrs	r1, r3, #8
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	683a      	ldr	r2, [r7, #0]
 8001dc4:	4413      	add	r3, r2
 8001dc6:	b2ca      	uxtb	r2, r1
 8001dc8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data >> (8 * 2)) & 0xFF;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	0c19      	lsrs	r1, r3, #16
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	3302      	adds	r3, #2
 8001dd4:	683a      	ldr	r2, [r7, #0]
 8001dd6:	4413      	add	r3, r2
 8001dd8:	b2ca      	uxtb	r2, r1
 8001dda:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data >> (8 * 3)) & 0xFF;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	0e19      	lsrs	r1, r3, #24
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	3303      	adds	r3, #3
 8001de6:	683a      	ldr	r2, [r7, #0]
 8001de8:	4413      	add	r3, r2
 8001dea:	b2ca      	uxtb	r2, r1
 8001dec:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	3304      	adds	r3, #4
 8001df2:	60fb      	str	r3, [r7, #12]
      return offset;
 8001df4:	68fb      	ldr	r3, [r7, #12]
    }
 8001df6:	4618      	mov	r0, r3
 8001df8:	3714      	adds	r7, #20
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bc80      	pop	{r7}
 8001dfe:	4770      	bx	lr

08001e00 <_ZN8std_msgs6UInt3211deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001e00:	b480      	push	{r7}
 8001e02:	b085      	sub	sp, #20
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	60fb      	str	r3, [r7, #12]
      this->data =  ((uint32_t) (*(inbuffer + offset)));
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	683a      	ldr	r2, [r7, #0]
 8001e12:	4413      	add	r3, r2
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	461a      	mov	r2, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	605a      	str	r2, [r3, #4]
      this->data |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685a      	ldr	r2, [r3, #4]
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	3301      	adds	r3, #1
 8001e24:	6839      	ldr	r1, [r7, #0]
 8001e26:	440b      	add	r3, r1
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	021b      	lsls	r3, r3, #8
 8001e2c:	431a      	orrs	r2, r3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	605a      	str	r2, [r3, #4]
      this->data |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	685a      	ldr	r2, [r3, #4]
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	3302      	adds	r3, #2
 8001e3a:	6839      	ldr	r1, [r7, #0]
 8001e3c:	440b      	add	r3, r1
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	041b      	lsls	r3, r3, #16
 8001e42:	431a      	orrs	r2, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	605a      	str	r2, [r3, #4]
      this->data |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	685a      	ldr	r2, [r3, #4]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	3303      	adds	r3, #3
 8001e50:	6839      	ldr	r1, [r7, #0]
 8001e52:	440b      	add	r3, r1
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	061b      	lsls	r3, r3, #24
 8001e58:	431a      	orrs	r2, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data);
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	3304      	adds	r3, #4
 8001e62:	60fb      	str	r3, [r7, #12]
     return offset;
 8001e64:	68fb      	ldr	r3, [r7, #12]
    }
 8001e66:	4618      	mov	r0, r3
 8001e68:	3714      	adds	r7, #20
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bc80      	pop	{r7}
 8001e6e:	4770      	bx	lr

08001e70 <_ZN8std_msgs6UInt327getTypeEv>:

    virtual const char * getType() override { return "std_msgs/UInt32"; };
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	4b02      	ldr	r3, [pc, #8]	@ (8001e84 <_ZN8std_msgs6UInt327getTypeEv+0x14>)
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bc80      	pop	{r7}
 8001e82:	4770      	bx	lr
 8001e84:	08007008 	.word	0x08007008

08001e88 <_ZN8std_msgs6UInt326getMD5Ev>:
    virtual const char * getMD5() override { return "304a39449588c7f8ce2df6e8001c5fce"; };
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	4b02      	ldr	r3, [pc, #8]	@ (8001e9c <_ZN8std_msgs6UInt326getMD5Ev+0x14>)
 8001e92:	4618      	mov	r0, r3
 8001e94:	370c      	adds	r7, #12
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bc80      	pop	{r7}
 8001e9a:	4770      	bx	lr
 8001e9c:	08007018 	.word	0x08007018

08001ea0 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	4a04      	ldr	r2, [pc, #16]	@ (8001ebc <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	601a      	str	r2, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bc80      	pop	{r7}
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	08007144 	.word	0x08007144

08001ec0 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f7ff ffe8 	bl	8001ea0 <_ZN3ros15NodeHandleBase_C1Ev>
 8001ed0:	4a43      	ldr	r2, [pc, #268]	@ (8001fe0 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EEC1Ev+0x120>)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	601a      	str	r2, [r3, #0]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	3304      	adds	r3, #4
 8001eda:	4618      	mov	r0, r3
 8001edc:	f7ff fea6 	bl	8001c2c <_ZN13STM32HardwareC1Ev>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	609a      	str	r2, [r3, #8]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	60da      	str	r2, [r3, #12]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	611a      	str	r2, [r3, #16]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	615a      	str	r2, [r3, #20]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	3318      	adds	r3, #24
 8001efc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001f00:	2100      	movs	r1, #0
 8001f02:	4618      	mov	r0, r3
 8001f04:	f004 ff4e 	bl	8006da4 <memset>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f0e:	3318      	adds	r3, #24
 8001f10:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001f14:	2100      	movs	r1, #0
 8001f16:	4618      	mov	r0, r3
 8001f18:	f004 ff44 	bl	8006da4 <memset>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001f22:	3318      	adds	r3, #24
 8001f24:	223c      	movs	r2, #60	@ 0x3c
 8001f26:	2100      	movs	r1, #0
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f004 ff3b 	bl	8006da4 <memset>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001f34:	3354      	adds	r3, #84	@ 0x54
 8001f36:	223c      	movs	r2, #60	@ 0x3c
 8001f38:	2100      	movs	r1, #0
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f004 ff32 	bl	8006da4 <memset>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001f46:	461a      	mov	r2, r3
 8001f48:	2300      	movs	r3, #0
 8001f4a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001f54:	461a      	mov	r2, r3
 8001f56:	2300      	movs	r3, #0
 8001f58:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001f62:	461a      	mov	r2, r3
 8001f64:	2300      	movs	r3, #0
 8001f66:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001f70:	461a      	mov	r2, r3
 8001f72:	2300      	movs	r3, #0
 8001f74:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001f7e:	461a      	mov	r2, r3
 8001f80:	2300      	movs	r3, #0
 8001f82:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001f98:	461a      	mov	r2, r3
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	2300      	movs	r3, #0
 8001faa:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	f503 5302 	add.w	r3, r3, #8320	@ 0x2080
 8001fce:	3338      	adds	r3, #56	@ 0x38
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7ff f9e3 	bl	800139c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3708      	adds	r7, #8
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	080070e8 	.word	0x080070e8

08001fe4 <HAL_UART_TxCpltCallback>:

uint32_t t = 0, t_motor_control_prev = 0, t_motor_rpm_prev = 0;
uint16_t last_tick = 0;

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
	comm_rosserial.set_tx_cplt();
 8001fec:	4803      	ldr	r0, [pc, #12]	@ (8001ffc <HAL_UART_TxCpltCallback+0x18>)
 8001fee:	f7ff fdfb 	bl	8001be8 <_ZN10SerialComm11set_tx_cpltEv>
}
 8001ff2:	bf00      	nop
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	200001e0 	.word	0x200001e0

08002000 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
	comm_rosserial.reset_rbuf();
 8002008:	4803      	ldr	r0, [pc, #12]	@ (8002018 <HAL_UART_RxCpltCallback+0x18>)
 800200a:	f7ff fdfb 	bl	8001c04 <_ZN10SerialComm10reset_rbufEv>
}
 800200e:	bf00      	nop
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	200001e0 	.word	0x200001e0

0800201c <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
	my_encoder->tick++;
 8002024:	4b05      	ldr	r3, [pc, #20]	@ (800203c <HAL_TIM_IC_CaptureCallback+0x20>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	881a      	ldrh	r2, [r3, #0]
 800202a:	3201      	adds	r2, #1
 800202c:	b292      	uxth	r2, r2
 800202e:	801a      	strh	r2, [r3, #0]
}
 8002030:	bf00      	nop
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	bc80      	pop	{r7}
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	2000430c 	.word	0x2000430c

08002040 <_Z18motorSpeedCallbackRKN8std_msgs5UInt8E>:

void motorSpeedCallback(const std_msgs::UInt8& motor_speed_msg)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
	uint8_t duty_val = motor_speed_msg.data;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	791b      	ldrb	r3, [r3, #4]
 800204c:	73fb      	strb	r3, [r7, #15]
	Motor_Set_PWM_Duty(my_motor, duty_val);
 800204e:	4b05      	ldr	r3, [pc, #20]	@ (8002064 <_Z18motorSpeedCallbackRKN8std_msgs5UInt8E+0x24>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	7bfa      	ldrb	r2, [r7, #15]
 8002054:	4611      	mov	r1, r2
 8002056:	4618      	mov	r0, r3
 8002058:	f7fe fb56 	bl	8000708 <Motor_Set_PWM_Duty>
}
 800205c:	bf00      	nop
 800205e:	3710      	adds	r7, #16
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	20004310 	.word	0x20004310

08002068 <_Z9ros_setupv>:

void ros_setup()
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
	nh.initNode();
 800206c:	4806      	ldr	r0, [pc, #24]	@ (8002088 <_Z9ros_setupv+0x20>)
 800206e:	f000 f965 	bl	800233c <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8initNodeEv>

	nh.subscribe(sub_motor_speed);
 8002072:	4906      	ldr	r1, [pc, #24]	@ (800208c <_Z9ros_setupv+0x24>)
 8002074:	4804      	ldr	r0, [pc, #16]	@ (8002088 <_Z9ros_setupv+0x20>)
 8002076:	f000 f98a 	bl	800238e <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE9subscribeERNS_11Subscriber_E>
	nh.advertise(pub_motor_rpm);
 800207a:	4905      	ldr	r1, [pc, #20]	@ (8002090 <_Z9ros_setupv+0x28>)
 800207c:	4802      	ldr	r0, [pc, #8]	@ (8002088 <_Z9ros_setupv+0x20>)
 800207e:	f000 f9b2 	bl	80023e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE9advertiseERNS_9PublisherE>
}
 8002082:	bf00      	nop
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	200021ec 	.word	0x200021ec
 800208c:	200042d4 	.word	0x200042d4
 8002090:	200042f8 	.word	0x200042f8

08002094 <_Z6millisv>:

uint32_t millis()
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8002098:	f001 f9d0 	bl	800343c <HAL_GetTick>
 800209c:	4603      	mov	r3, r0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	bd80      	pop	{r7, pc}
	...

080020a4 <setup>:

void setup()
{
 80020a4:	b590      	push	{r4, r7, lr}
 80020a6:	b087      	sub	sp, #28
 80020a8:	af00      	add	r7, sp, #0
	ros_setup();
 80020aa:	f7ff ffdd 	bl	8002068 <_Z9ros_setupv>

	Encoder_Handle_t encoder_handle =
 80020ae:	4a15      	ldr	r2, [pc, #84]	@ (8002104 <setup+0x60>)
 80020b0:	f107 0310 	add.w	r3, r7, #16
 80020b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80020b8:	e883 0003 	stmia.w	r3, {r0, r1}
	{
			.max_count = 0xFFFFFFFF,
			.tick_read_channel = TIM_CHANNEL_2
	};
	my_encoder = Encoder_Init(encoder_handle);
 80020bc:	f107 0310 	add.w	r3, r7, #16
 80020c0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80020c4:	f7fe fbc2 	bl	800084c <Encoder_Init>
 80020c8:	4603      	mov	r3, r0
 80020ca:	4a0f      	ldr	r2, [pc, #60]	@ (8002108 <setup+0x64>)
 80020cc:	6013      	str	r3, [r2, #0]
	Encoder_Start(my_encoder);
 80020ce:	4b0e      	ldr	r3, [pc, #56]	@ (8002108 <setup+0x64>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7fe fbd6 	bl	8000884 <Encoder_Start>

	Motor_Handle_t motor_handle =
 80020d8:	4b0c      	ldr	r3, [pc, #48]	@ (800210c <setup+0x68>)
 80020da:	463c      	mov	r4, r7
 80020dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			.direction_port = GPIOA,
			.direction_pin_A = GPIO_PIN_11,
			.direction_pin_B = GPIO_PIN_12,
			.pwm_frequency = 1000
	};
	my_motor = Motor_Init(motor_handle);
 80020e2:	463b      	mov	r3, r7
 80020e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020e6:	f7fe fab7 	bl	8000658 <Motor_Init>
 80020ea:	4603      	mov	r3, r0
 80020ec:	4a08      	ldr	r2, [pc, #32]	@ (8002110 <setup+0x6c>)
 80020ee:	6013      	str	r3, [r2, #0]
	Motor_Start(my_motor);
 80020f0:	4b07      	ldr	r3, [pc, #28]	@ (8002110 <setup+0x6c>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7fe fb55 	bl	80007a4 <Motor_Start>
}
 80020fa:	bf00      	nop
 80020fc:	371c      	adds	r7, #28
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd90      	pop	{r4, r7, pc}
 8002102:	bf00      	nop
 8002104:	0800703c 	.word	0x0800703c
 8002108:	2000430c 	.word	0x2000430c
 800210c:	08007044 	.word	0x08007044
 8002110:	20004310 	.word	0x20004310

08002114 <loop>:

void loop()
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
	t = millis();
 8002118:	f7ff ffbc 	bl	8002094 <_Z6millisv>
 800211c:	4603      	mov	r3, r0
 800211e:	4a0c      	ldr	r2, [pc, #48]	@ (8002150 <loop+0x3c>)
 8002120:	6013      	str	r3, [r2, #0]

	if ((t - t_motor_rpm_prev) >= dt)
 8002122:	4b0b      	ldr	r3, [pc, #44]	@ (8002150 <loop+0x3c>)
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	4b0b      	ldr	r3, [pc, #44]	@ (8002154 <loop+0x40>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	1ad2      	subs	r2, r2, r3
 800212c:	4b0a      	ldr	r3, [pc, #40]	@ (8002158 <loop+0x44>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	429a      	cmp	r2, r3
 8002132:	d307      	bcc.n	8002144 <loop+0x30>
	{
		updateRpm();
 8002134:	f000 f814 	bl	8002160 <_Z9updateRpmv>
		publishRpmMsg();
 8002138:	f000 f87c 	bl	8002234 <_Z13publishRpmMsgv>

		t_motor_rpm_prev = t;
 800213c:	4b04      	ldr	r3, [pc, #16]	@ (8002150 <loop+0x3c>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a04      	ldr	r2, [pc, #16]	@ (8002154 <loop+0x40>)
 8002142:	6013      	str	r3, [r2, #0]
	}

	nh.spinOnce();
 8002144:	4805      	ldr	r0, [pc, #20]	@ (800215c <loop+0x48>)
 8002146:	f000 f97b 	bl	8002440 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv>
}
 800214a:	bf00      	nop
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	20004314 	.word	0x20004314
 8002154:	20004318 	.word	0x20004318
 8002158:	20000000 	.word	0x20000000
 800215c:	200021ec 	.word	0x200021ec

08002160 <_Z9updateRpmv>:

uint16_t d_tick = 0;
float data = 0;

void updateRpm()
{
 8002160:	b598      	push	{r3, r4, r7, lr}
 8002162:	af00      	add	r7, sp, #0
	d_tick = 0;
 8002164:	4b2b      	ldr	r3, [pc, #172]	@ (8002214 <_Z9updateRpmv+0xb4>)
 8002166:	2200      	movs	r2, #0
 8002168:	801a      	strh	r2, [r3, #0]

	// Encoder_UpdateTick(my_encoder);

	if (my_encoder->tick < last_tick)
 800216a:	4b2b      	ldr	r3, [pc, #172]	@ (8002218 <_Z9updateRpmv+0xb8>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	881a      	ldrh	r2, [r3, #0]
 8002170:	4b2a      	ldr	r3, [pc, #168]	@ (800221c <_Z9updateRpmv+0xbc>)
 8002172:	881b      	ldrh	r3, [r3, #0]
 8002174:	429a      	cmp	r2, r3
 8002176:	d20b      	bcs.n	8002190 <_Z9updateRpmv+0x30>
	{
		d_tick = my_encoder->tick + (0xFFFF - last_tick);
 8002178:	4b27      	ldr	r3, [pc, #156]	@ (8002218 <_Z9updateRpmv+0xb8>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	881a      	ldrh	r2, [r3, #0]
 800217e:	4b27      	ldr	r3, [pc, #156]	@ (800221c <_Z9updateRpmv+0xbc>)
 8002180:	881b      	ldrh	r3, [r3, #0]
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	b29b      	uxth	r3, r3
 8002186:	3b01      	subs	r3, #1
 8002188:	b29a      	uxth	r2, r3
 800218a:	4b22      	ldr	r3, [pc, #136]	@ (8002214 <_Z9updateRpmv+0xb4>)
 800218c:	801a      	strh	r2, [r3, #0]
 800218e:	e008      	b.n	80021a2 <_Z9updateRpmv+0x42>
	}
	else
	{
		d_tick = my_encoder->tick - last_tick;
 8002190:	4b21      	ldr	r3, [pc, #132]	@ (8002218 <_Z9updateRpmv+0xb8>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	881a      	ldrh	r2, [r3, #0]
 8002196:	4b21      	ldr	r3, [pc, #132]	@ (800221c <_Z9updateRpmv+0xbc>)
 8002198:	881b      	ldrh	r3, [r3, #0]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	b29a      	uxth	r2, r3
 800219e:	4b1d      	ldr	r3, [pc, #116]	@ (8002214 <_Z9updateRpmv+0xb4>)
 80021a0:	801a      	strh	r2, [r3, #0]
	}
	last_tick = my_encoder->tick;
 80021a2:	4b1d      	ldr	r3, [pc, #116]	@ (8002218 <_Z9updateRpmv+0xb8>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	881a      	ldrh	r2, [r3, #0]
 80021a8:	4b1c      	ldr	r3, [pc, #112]	@ (800221c <_Z9updateRpmv+0xbc>)
 80021aa:	801a      	strh	r2, [r3, #0]

	// Get the number of rotation
	data = (float)d_tick / ENCODER_RESOLUTION;
 80021ac:	4b19      	ldr	r3, [pc, #100]	@ (8002214 <_Z9updateRpmv+0xb4>)
 80021ae:	881b      	ldrh	r3, [r3, #0]
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7fe f889 	bl	80002c8 <__aeabi_ui2f>
 80021b6:	4603      	mov	r3, r0
 80021b8:	4919      	ldr	r1, [pc, #100]	@ (8002220 <_Z9updateRpmv+0xc0>)
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7fe f990 	bl	80004e0 <__aeabi_fdiv>
 80021c0:	4603      	mov	r3, r0
 80021c2:	461a      	mov	r2, r3
 80021c4:	4b17      	ldr	r3, [pc, #92]	@ (8002224 <_Z9updateRpmv+0xc4>)
 80021c6:	601a      	str	r2, [r3, #0]
	// Get the rotation per second
	data = (data * 1000) / dt;
 80021c8:	4b16      	ldr	r3, [pc, #88]	@ (8002224 <_Z9updateRpmv+0xc4>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4916      	ldr	r1, [pc, #88]	@ (8002228 <_Z9updateRpmv+0xc8>)
 80021ce:	4618      	mov	r0, r3
 80021d0:	f7fe f8d2 	bl	8000378 <__aeabi_fmul>
 80021d4:	4603      	mov	r3, r0
 80021d6:	461c      	mov	r4, r3
 80021d8:	4b14      	ldr	r3, [pc, #80]	@ (800222c <_Z9updateRpmv+0xcc>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4618      	mov	r0, r3
 80021de:	f7fe f873 	bl	80002c8 <__aeabi_ui2f>
 80021e2:	4603      	mov	r3, r0
 80021e4:	4619      	mov	r1, r3
 80021e6:	4620      	mov	r0, r4
 80021e8:	f7fe f97a 	bl	80004e0 <__aeabi_fdiv>
 80021ec:	4603      	mov	r3, r0
 80021ee:	461a      	mov	r2, r3
 80021f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002224 <_Z9updateRpmv+0xc4>)
 80021f2:	601a      	str	r2, [r3, #0]
	// Get the rotation per minute
	//data *= 60;

	rpm_msg.data = (uint32_t)data*60;
 80021f4:	4b0b      	ldr	r3, [pc, #44]	@ (8002224 <_Z9updateRpmv+0xc4>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7fe fa0d 	bl	8000618 <__aeabi_f2uiz>
 80021fe:	4602      	mov	r2, r0
 8002200:	4613      	mov	r3, r2
 8002202:	011b      	lsls	r3, r3, #4
 8002204:	1a9b      	subs	r3, r3, r2
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	461a      	mov	r2, r3
 800220a:	4b09      	ldr	r3, [pc, #36]	@ (8002230 <_Z9updateRpmv+0xd0>)
 800220c:	605a      	str	r2, [r3, #4]
}
 800220e:	bf00      	nop
 8002210:	bd98      	pop	{r3, r4, r7, pc}
 8002212:	bf00      	nop
 8002214:	2000431e 	.word	0x2000431e
 8002218:	2000430c 	.word	0x2000430c
 800221c:	2000431c 	.word	0x2000431c
 8002220:	41a00000 	.word	0x41a00000
 8002224:	20004320 	.word	0x20004320
 8002228:	447a0000 	.word	0x447a0000
 800222c:	20000000 	.word	0x20000000
 8002230:	200042f0 	.word	0x200042f0

08002234 <_Z13publishRpmMsgv>:

void publishRpmMsg()
{
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
	pub_motor_rpm.publish(&rpm_msg);
 8002238:	4902      	ldr	r1, [pc, #8]	@ (8002244 <_Z13publishRpmMsgv+0x10>)
 800223a:	4803      	ldr	r0, [pc, #12]	@ (8002248 <_Z13publishRpmMsgv+0x14>)
 800223c:	f7ff fb8c 	bl	8001958 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
}
 8002240:	bf00      	nop
 8002242:	bd80      	pop	{r7, pc}
 8002244:	200042f0 	.word	0x200042f0
 8002248:	200042f8 	.word	0x200042f8

0800224c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 800224c:	b480      	push	{r7}
 800224e:	b085      	sub	sp, #20
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8002256:	2300      	movs	r3, #0
 8002258:	60fb      	str	r3, [r7, #12]
 800225a:	e00c      	b.n	8002276 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x2a>
      arr[i] = (var >> (8 * i));
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	00db      	lsls	r3, r3, #3
 8002260:	683a      	ldr	r2, [r7, #0]
 8002262:	fa22 f103 	lsr.w	r1, r2, r3
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	4413      	add	r3, r2
 800226c:	b2ca      	uxtb	r2, r1
 800226e:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	3301      	adds	r3, #1
 8002274:	60fb      	str	r3, [r7, #12]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2b03      	cmp	r3, #3
 800227a:	d9ef      	bls.n	800225c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x10>
  }
 800227c:	bf00      	nop
 800227e:	bf00      	nop
 8002280:	3714      	adds	r7, #20
 8002282:	46bd      	mov	sp, r7
 8002284:	bc80      	pop	{r7}
 8002286:	4770      	bx	lr

08002288 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8002288:	b480      	push	{r7}
 800228a:	b085      	sub	sp, #20
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002298:	2300      	movs	r3, #0
 800229a:	60fb      	str	r3, [r7, #12]
 800229c:	e010      	b.n	80022c0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x38>
      var |= (arr[i] << (8 * i));
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	6839      	ldr	r1, [r7, #0]
 80022a4:	68fa      	ldr	r2, [r7, #12]
 80022a6:	440a      	add	r2, r1
 80022a8:	7812      	ldrb	r2, [r2, #0]
 80022aa:	4611      	mov	r1, r2
 80022ac:	68fa      	ldr	r2, [r7, #12]
 80022ae:	00d2      	lsls	r2, r2, #3
 80022b0:	fa01 f202 	lsl.w	r2, r1, r2
 80022b4:	431a      	orrs	r2, r3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	3301      	adds	r3, #1
 80022be:	60fb      	str	r3, [r7, #12]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2b03      	cmp	r3, #3
 80022c4:	d9eb      	bls.n	800229e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x16>
  }
 80022c6:	bf00      	nop
 80022c8:	bf00      	nop
 80022ca:	3714      	adds	r7, #20
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bc80      	pop	{r7}
 80022d0:	4770      	bx	lr
	...

080022d4 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	4a04      	ldr	r2, [pc, #16]	@ (80022f0 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	601a      	str	r2, [r3, #0]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4618      	mov	r0, r3
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bc80      	pop	{r7}
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	0800712c 	.word	0x0800712c

080022f4 <_ZN3ros10SubscriberIN8std_msgs5UInt8EvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	60f8      	str	r0, [r7, #12]
 80022fc:	60b9      	str	r1, [r7, #8]
 80022fe:	607a      	str	r2, [r7, #4]
 8002300:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	4618      	mov	r0, r3
 8002306:	f7ff ffe5 	bl	80022d4 <_ZN3ros11Subscriber_C1Ev>
 800230a:	4a0b      	ldr	r2, [pc, #44]	@ (8002338 <_ZN3ros10SubscriberIN8std_msgs5UInt8EvEC1EPKcPFvRKS2_Ei+0x44>)
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	601a      	str	r2, [r3, #0]
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	330c      	adds	r3, #12
 8002314:	4618      	mov	r0, r3
 8002316:	f7ff fcd1 	bl	8001cbc <_ZN8std_msgs5UInt8C1Ev>
    cb_(cb),
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	615a      	str	r2, [r3, #20]
    endpoint_(endpoint)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	683a      	ldr	r2, [r7, #0]
 8002324:	619a      	str	r2, [r3, #24]
  {
    topic_ = topic_name;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	68ba      	ldr	r2, [r7, #8]
 800232a:	609a      	str	r2, [r3, #8]
  };
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	4618      	mov	r0, r3
 8002330:	3710      	adds	r7, #16
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	080070d0 	.word	0x080070d0

0800233c <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8initNodeEv>:
  {
    return &hardware_;
  }

  /* Start serial, initialize buffers */
  void initNode()
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	3304      	adds	r3, #4
 8002348:	4618      	mov	r0, r3
 800234a:	f7ff fc7f 	bl	8001c4c <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002354:	461a      	mov	r2, r3
 8002356:	2300      	movs	r3, #0
 8002358:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    bytes_ = 0;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002362:	461a      	mov	r2, r3
 8002364:	2300      	movs	r3, #0
 8002366:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    index_ = 0;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002370:	461a      	mov	r2, r3
 8002372:	2300      	movs	r3, #0
 8002374:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
    topic_ = 0;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800237e:	461a      	mov	r2, r3
 8002380:	2300      	movs	r3, #0
 8002382:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
  };
 8002386:	bf00      	nop
 8002388:	3708      	adds	r7, #8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}

0800238e <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE9subscribeERNS_11Subscriber_E>:
    }
    return false;
  }

  /* Register a new subscriber */
  bool subscribe(Subscriber_& s)
 800238e:	b480      	push	{r7}
 8002390:	b085      	sub	sp, #20
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
 8002396:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002398:	2300      	movs	r3, #0
 800239a:	60fb      	str	r3, [r7, #12]
 800239c:	e01a      	b.n	80023d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE9subscribeERNS_11Subscriber_E+0x46>
    {
      if (subscribers[i] == 0) // empty slot
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	f603 0314 	addw	r3, r3, #2068	@ 0x814
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	4413      	add	r3, r2
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d10e      	bne.n	80023ce <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE9subscribeERNS_11Subscriber_E+0x40>
      {
        subscribers[i] = &s;
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	f603 0314 	addw	r3, r3, #2068	@ 0x814
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	4413      	add	r3, r2
 80023bc:	683a      	ldr	r2, [r7, #0]
 80023be:	605a      	str	r2, [r3, #4]
        s.id_ = i + 100;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	605a      	str	r2, [r3, #4]
        return true;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e006      	b.n	80023dc <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE9subscribeERNS_11Subscriber_E+0x4e>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	3301      	adds	r3, #1
 80023d2:	60fb      	str	r3, [r7, #12]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2b0e      	cmp	r3, #14
 80023d8:	dde1      	ble.n	800239e <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE9subscribeERNS_11Subscriber_E+0x10>
      }
    }
    return false;
 80023da:	2300      	movs	r3, #0
  }
 80023dc:	4618      	mov	r0, r3
 80023de:	3714      	adds	r7, #20
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bc80      	pop	{r7}
 80023e4:	4770      	bx	lr

080023e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE9advertiseERNS_9PublisherE>:
  bool advertise(Publisher & p)
 80023e6:	b480      	push	{r7}
 80023e8:	b085      	sub	sp, #20
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	6078      	str	r0, [r7, #4]
 80023ee:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80023f0:	2300      	movs	r3, #0
 80023f2:	60fb      	str	r3, [r7, #12]
 80023f4:	e01b      	b.n	800242e <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE9advertiseERNS_9PublisherE+0x48>
      if (publishers[i] == 0) // empty slot
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	68fa      	ldr	r2, [r7, #12]
 80023fa:	f602 0206 	addw	r2, r2, #2054	@ 0x806
 80023fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d110      	bne.n	8002428 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE9advertiseERNS_9PublisherE+0x42>
        publishers[i] = &p;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	68fa      	ldr	r2, [r7, #12]
 800240a:	f602 0206 	addw	r2, r2, #2054	@ 0x806
 800240e:	6839      	ldr	r1, [r7, #0]
 8002410:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	f103 0273 	add.w	r2, r3, #115	@ 0x73
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	60da      	str	r2, [r3, #12]
        return true;
 8002424:	2301      	movs	r3, #1
 8002426:	e006      	b.n	8002436 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE9advertiseERNS_9PublisherE+0x50>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	3301      	adds	r3, #1
 800242c:	60fb      	str	r3, [r7, #12]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2b0e      	cmp	r3, #14
 8002432:	dde0      	ble.n	80023f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE9advertiseERNS_9PublisherE+0x10>
    return false;
 8002434:	2300      	movs	r3, #0
  }
 8002436:	4618      	mov	r0, r3
 8002438:	3714      	adds	r7, #20
 800243a:	46bd      	mov	sp, r7
 800243c:	bc80      	pop	{r7}
 800243e:	4770      	bx	lr

08002440 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv>:
  virtual int spinOnce() override
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	3304      	adds	r3, #4
 800244c:	4618      	mov	r0, r3
 800244e:	f7ff fc29 	bl	8001ca4 <_ZN13STM32Hardware4timeEv>
 8002452:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800245a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800245e:	68fa      	ldr	r2, [r7, #12]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 8002466:	4293      	cmp	r3, r2
 8002468:	d905      	bls.n	8002476 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x36>
      configured_ = false;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002470:	2200      	movs	r2, #0
 8002472:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
    if (mode_ != MODE_FIRST_FF)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800247c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002480:	2b00      	cmp	r3, #0
 8002482:	d00e      	beq.n	80024a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x62>
      if (c_time > last_msg_timeout_time)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800248a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800248e:	68fa      	ldr	r2, [r7, #12]
 8002490:	429a      	cmp	r2, r3
 8002492:	d906      	bls.n	80024a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800249a:	461a      	mov	r2, r3
 800249c:	2300      	movs	r3, #0
 800249e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      if (spin_timeout_ > 0)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	695b      	ldr	r3, [r3, #20]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d013      	beq.n	80024d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x92>
        if ((hardware_.time() - c_time) > spin_timeout_)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	3304      	adds	r3, #4
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7ff fbf8 	bl	8001ca4 <_ZN13STM32Hardware4timeEv>
 80024b4:	4602      	mov	r2, r0
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	1ad2      	subs	r2, r2, r3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	695b      	ldr	r3, [r3, #20]
 80024be:	429a      	cmp	r2, r3
 80024c0:	bf8c      	ite	hi
 80024c2:	2301      	movhi	r3, #1
 80024c4:	2300      	movls	r3, #0
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d002      	beq.n	80024d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x92>
          return SPIN_TIMEOUT;
 80024cc:	f06f 0301 	mvn.w	r3, #1
 80024d0:	e21d      	b.n	800290e <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x4ce>
      int data = hardware_.read();
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	3304      	adds	r3, #4
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7ff fbc5 	bl	8001c66 <_ZN13STM32Hardware4readEv>
 80024dc:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	f2c0 81f6 	blt.w	80028d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x492>
      checksum_ += data;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80024ec:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	4413      	add	r3, r2
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 80024fa:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002504:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002508:	2b07      	cmp	r3, #7
 800250a:	d12a      	bne.n	8002562 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x122>
        message_in[index_++] = data;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002512:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002516:	1c5a      	adds	r2, r3, #1
 8002518:	6879      	ldr	r1, [r7, #4]
 800251a:	f501 5100 	add.w	r1, r1, #8192	@ 0x2000
 800251e:	f8c1 209c 	str.w	r2, [r1, #156]	@ 0x9c
 8002522:	68ba      	ldr	r2, [r7, #8]
 8002524:	b2d1      	uxtb	r1, r2
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	4413      	add	r3, r2
 800252a:	460a      	mov	r2, r1
 800252c:	761a      	strb	r2, [r3, #24]
        bytes_--;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002534:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002538:	3b01      	subs	r3, #1
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8002540:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800254a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800254e:	2b00      	cmp	r3, #0
 8002550:	d1a7      	bne.n	80024a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002558:	461a      	mov	r2, r3
 800255a:	2308      	movs	r3, #8
 800255c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002560:	e79f      	b.n	80024a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x62>
      else if (mode_ == MODE_FIRST_FF)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002568:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800256c:	2b00      	cmp	r3, #0
 800256e:	d130      	bne.n	80025d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x192>
        if (data == 0xff)
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	2bff      	cmp	r3, #255	@ 0xff
 8002574:	d112      	bne.n	800259c <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x15c>
          mode_++;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800257c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002580:	3301      	adds	r3, #1
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8002588:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	3314      	adds	r3, #20
 8002590:	687a      	ldr	r2, [r7, #4]
 8002592:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8002596:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0
 800259a:	e782      	b.n	80024a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x62>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	3304      	adds	r3, #4
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7ff fb7f 	bl	8001ca4 <_ZN13STM32Hardware4timeEv>
 80025a6:	4602      	mov	r2, r0
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025b0:	4293      	cmp	r3, r2
 80025b2:	bf8c      	ite	hi
 80025b4:	2301      	movhi	r3, #1
 80025b6:	2300      	movls	r3, #0
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	f43f af71 	beq.w	80024a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x62>
          configured_ = false;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80025c6:	2200      	movs	r2, #0
 80025c8:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
          return SPIN_TIMEOUT;
 80025cc:	f06f 0301 	mvn.w	r3, #1
 80025d0:	e19d      	b.n	800290e <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x4ce>
      else if (mode_ == MODE_PROTOCOL_VER)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80025d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d121      	bne.n	8002624 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x1e4>
        if (data == PROTOCOL_VER)
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	2bfe      	cmp	r3, #254	@ 0xfe
 80025e4:	d10b      	bne.n	80025fe <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x1be>
          mode_++;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80025ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025f0:	3301      	adds	r3, #1
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 80025f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80025fc:	e751      	b.n	80024a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002604:	461a      	mov	r2, r3
 8002606:	2300      	movs	r3, #0
 8002608:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
          if (configured_ == false)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002612:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8002616:	2b00      	cmp	r3, #0
 8002618:	f47f af43 	bne.w	80024a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x62>
            requestSyncTime();  /* send a msg back showing our protocol version */
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f000 f97a 	bl	8002916 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE15requestSyncTimeEv>
 8002622:	e73e      	b.n	80024a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800262a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800262e:	2b02      	cmp	r3, #2
 8002630:	d120      	bne.n	8002674 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x234>
        bytes_ = data;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002638:	461a      	mov	r2, r3
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        index_ = 0;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002646:	461a      	mov	r2, r3
 8002648:	2300      	movs	r3, #0
 800264a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
        mode_++;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002654:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002658:	3301      	adds	r3, #1
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8002660:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        checksum_ = data;               /* first byte for calculating size checksum */
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800266a:	461a      	mov	r2, r3
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
 8002672:	e716      	b.n	80024a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800267a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800267e:	2b03      	cmp	r3, #3
 8002680:	d118      	bne.n	80026b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x274>
        bytes_ += data << 8;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002688:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	021b      	lsls	r3, r3, #8
 8002690:	4413      	add	r3, r2
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8002698:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        mode_++;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80026a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026a6:	3301      	adds	r3, #1
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 80026ae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80026b2:	e6f6      	b.n	80024a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80026ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026be:	2b04      	cmp	r3, #4
 80026c0:	d11f      	bne.n	8002702 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x2c2>
        if ((checksum_ % 256) == 255)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80026c8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80026cc:	425a      	negs	r2, r3
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	b2d2      	uxtb	r2, r2
 80026d2:	bf58      	it	pl
 80026d4:	4253      	negpl	r3, r2
 80026d6:	2bff      	cmp	r3, #255	@ 0xff
 80026d8:	d10b      	bne.n	80026f2 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x2b2>
          mode_++;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80026e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026e4:	3301      	adds	r3, #1
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 80026ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80026f0:	e6d7      	b.n	80024a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80026f8:	461a      	mov	r2, r3
 80026fa:	2300      	movs	r3, #0
 80026fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002700:	e6cf      	b.n	80024a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002708:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800270c:	2b05      	cmp	r3, #5
 800270e:	d119      	bne.n	8002744 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x304>
        topic_ = data;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002716:	461a      	mov	r2, r3
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
        mode_++;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002724:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002728:	3301      	adds	r3, #1
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8002730:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        checksum_ = data;               /* first byte included in checksum */
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800273a:	461a      	mov	r2, r3
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
 8002742:	e6ae      	b.n	80024a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800274a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800274e:	2b06      	cmp	r3, #6
 8002750:	d123      	bne.n	800279a <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x35a>
        topic_ += data << 8;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002758:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	021b      	lsls	r3, r3, #8
 8002760:	4413      	add	r3, r2
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8002768:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
        mode_ = MODE_MESSAGE;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002772:	461a      	mov	r2, r3
 8002774:	2307      	movs	r3, #7
 8002776:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        if (bytes_ == 0)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002780:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002784:	2b00      	cmp	r3, #0
 8002786:	f47f ae8c 	bne.w	80024a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002790:	461a      	mov	r2, r3
 8002792:	2308      	movs	r3, #8
 8002794:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002798:	e683      	b.n	80024a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x62>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80027a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027a4:	2b08      	cmp	r3, #8
 80027a6:	f47f ae7c 	bne.w	80024a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80027b0:	461a      	mov	r2, r3
 80027b2:	2300      	movs	r3, #0
 80027b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        if ((checksum_ % 256) == 255)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80027be:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80027c2:	425a      	negs	r2, r3
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	b2d2      	uxtb	r2, r2
 80027c8:	bf58      	it	pl
 80027ca:	4253      	negpl	r3, r2
 80027cc:	2bff      	cmp	r3, #255	@ 0xff
 80027ce:	f47f ae68 	bne.w	80024a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x62>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80027d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d116      	bne.n	800280e <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x3ce>
            requestSyncTime();
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f000 f898 	bl	8002916 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE15requestSyncTimeEv>
            negotiateTopics();
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f000 f8b2 	bl	8002950 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE15negotiateTopicsEv>
            last_sync_time = c_time;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80027f2:	461a      	mov	r2, r3
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
            last_sync_receive_time = c_time;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002800:	461a      	mov	r2, r3
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac
            return SPIN_ERR;
 8002808:	f04f 33ff 	mov.w	r3, #4294967295
 800280c:	e07f      	b.n	800290e <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x4ce>
          else if (topic_ == TopicInfo::ID_TIME)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002814:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002818:	2b0a      	cmp	r3, #10
 800281a:	d106      	bne.n	800282a <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x3ea>
            syncTime(message_in);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	3318      	adds	r3, #24
 8002820:	4619      	mov	r1, r3
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f000 f976 	bl	8002b14 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8syncTimeEPh>
 8002828:	e63b      	b.n	80024a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002830:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002834:	2b06      	cmp	r3, #6
 8002836:	d110      	bne.n	800285a <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x41a>
            req_param_resp.deserialize(message_in);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f503 5302 	add.w	r3, r3, #8320	@ 0x2080
 800283e:	3338      	adds	r3, #56	@ 0x38
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	3218      	adds	r2, #24
 8002844:	4611      	mov	r1, r2
 8002846:	4618      	mov	r0, r3
 8002848:	f7fe fee7 	bl	800161a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002852:	2201      	movs	r2, #1
 8002854:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4
 8002858:	e623      	b.n	80024a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002860:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002864:	2b0b      	cmp	r3, #11
 8002866:	d106      	bne.n	8002876 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x436>
            configured_ = false;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800286e:	2200      	movs	r2, #0
 8002870:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
 8002874:	e615      	b.n	80024a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x62>
            if (subscribers[topic_ - 100])
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800287c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002880:	3b64      	subs	r3, #100	@ 0x64
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	f603 0314 	addw	r3, r3, #2068	@ 0x814
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	4413      	add	r3, r2
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	2b00      	cmp	r3, #0
 8002890:	f43f ae07 	beq.w	80024a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x62>
              subscribers[topic_ - 100]->callback(message_in);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800289a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800289e:	3b64      	subs	r3, #100	@ 0x64
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	f603 0314 	addw	r3, r3, #2068	@ 0x814
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	4413      	add	r3, r2
 80028aa:	6858      	ldr	r0, [r3, #4]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80028b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80028b6:	3b64      	subs	r3, #100	@ 0x64
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	f603 0314 	addw	r3, r3, #2068	@ 0x814
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	4413      	add	r3, r2
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	3218      	adds	r2, #24
 80028cc:	4611      	mov	r1, r2
 80028ce:	4798      	blx	r3
    while (true)
 80028d0:	e5e7      	b.n	80024a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x62>
        break;
 80028d2:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80028da:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d014      	beq.n	800290c <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x4cc>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80028e8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80028ec:	68fa      	ldr	r2, [r7, #12]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d909      	bls.n	800290c <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8spinOnceEv+0x4cc>
      requestSyncTime();
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f000 f80c 	bl	8002916 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE15requestSyncTimeEv>
      last_sync_time = c_time;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002904:	461a      	mov	r2, r3
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
    return SPIN_OK;
 800290c:	2300      	movs	r3, #0
  }
 800290e:	4618      	mov	r0, r3
 8002910:	3710      	adds	r7, #16
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}

08002916 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE15requestSyncTimeEv>:
  void requestSyncTime()
 8002916:	b580      	push	{r7, lr}
 8002918:	b086      	sub	sp, #24
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 800291e:	f107 030c 	add.w	r3, r7, #12
 8002922:	4618      	mov	r0, r3
 8002924:	f7fe f9e4 	bl	8000cf0 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f107 020c 	add.w	r2, r7, #12
 8002932:	210a      	movs	r1, #10
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	4798      	blx	r3
    rt_time = hardware_.time();
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	3304      	adds	r3, #4
 800293c:	4618      	mov	r0, r3
 800293e:	f7ff f9b1 	bl	8001ca4 <_ZN13STM32Hardware4timeEv>
 8002942:	4602      	mov	r2, r0
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	609a      	str	r2, [r3, #8]
  }
 8002948:	bf00      	nop
 800294a:	3718      	adds	r7, #24
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}

08002950 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 8002950:	b590      	push	{r4, r7, lr}
 8002952:	b08b      	sub	sp, #44	@ 0x2c
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8002958:	f107 030c 	add.w	r3, r7, #12
 800295c:	4618      	mov	r0, r3
 800295e:	f7fe fab1 	bl	8000ec4 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8002962:	2300      	movs	r3, #0
 8002964:	627b      	str	r3, [r7, #36]	@ 0x24
 8002966:	e05a      	b.n	8002a1e <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE15negotiateTopicsEv+0xce>
    {
      if (publishers[i] != 0) // non-empty slot
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800296c:	f602 0206 	addw	r2, r2, #2054	@ 0x806
 8002970:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d04f      	beq.n	8002a18 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE15negotiateTopicsEv+0xc8>
      {
        ti.topic_id = publishers[i]->id_;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800297c:	f602 0206 	addw	r2, r2, #2054	@ 0x806
 8002980:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	b29b      	uxth	r3, r3
 8002988:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800298e:	f602 0206 	addw	r2, r2, #2054	@ 0x806
 8002992:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800299e:	f602 0206 	addw	r2, r2, #2054	@ 0x806
 80029a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029a6:	6859      	ldr	r1, [r3, #4]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029ac:	f602 0206 	addw	r2, r2, #2054	@ 0x806
 80029b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	3308      	adds	r3, #8
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4608      	mov	r0, r1
 80029be:	4798      	blx	r3
 80029c0:	4603      	mov	r3, r0
 80029c2:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029c8:	f602 0206 	addw	r2, r2, #2054	@ 0x806
 80029cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029d0:	6859      	ldr	r1, [r3, #4]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029d6:	f602 0206 	addw	r2, r2, #2054	@ 0x806
 80029da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	330c      	adds	r3, #12
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4608      	mov	r0, r1
 80029e8:	4798      	blx	r3
 80029ea:	4603      	mov	r3, r0
 80029ec:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 80029ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80029f2:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681c      	ldr	r4, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029fe:	f602 0206 	addw	r2, r2, #2054	@ 0x806
 8002a02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a06:	4618      	mov	r0, r3
 8002a08:	f7fe ffba 	bl	8001980 <_ZN3ros9Publisher15getEndpointTypeEv>
 8002a0c:	4601      	mov	r1, r0
 8002a0e:	f107 030c 	add.w	r3, r7, #12
 8002a12:	461a      	mov	r2, r3
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8002a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a20:	2b0e      	cmp	r3, #14
 8002a22:	dda1      	ble.n	8002968 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE15negotiateTopicsEv+0x18>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8002a24:	2300      	movs	r3, #0
 8002a26:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a28:	e067      	b.n	8002afa <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE15negotiateTopicsEv+0x1aa>
    {
      if (subscribers[i] != 0) // non-empty slot
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a2e:	f603 0314 	addw	r3, r3, #2068	@ 0x814
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	4413      	add	r3, r2
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d05b      	beq.n	8002af4 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE15negotiateTopicsEv+0x1a4>
      {
        ti.topic_id = subscribers[i]->id_;
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a40:	f603 0314 	addw	r3, r3, #2068	@ 0x814
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	4413      	add	r3, r2
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a54:	f603 0314 	addw	r3, r3, #2068	@ 0x814
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	4413      	add	r3, r2
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a66:	f603 0314 	addw	r3, r3, #2068	@ 0x814
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	4413      	add	r3, r2
 8002a6e:	6859      	ldr	r1, [r3, #4]
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a74:	f603 0314 	addw	r3, r3, #2068	@ 0x814
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	4413      	add	r3, r2
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	3308      	adds	r3, #8
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4608      	mov	r0, r1
 8002a86:	4798      	blx	r3
 8002a88:	4603      	mov	r3, r0
 8002a8a:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a90:	f603 0314 	addw	r3, r3, #2068	@ 0x814
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	4413      	add	r3, r2
 8002a98:	6859      	ldr	r1, [r3, #4]
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a9e:	f603 0314 	addw	r3, r3, #2068	@ 0x814
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	4413      	add	r3, r2
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	330c      	adds	r3, #12
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4608      	mov	r0, r1
 8002ab0:	4798      	blx	r3
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8002ab6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002aba:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681c      	ldr	r4, [r3, #0]
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac6:	f603 0314 	addw	r3, r3, #2068	@ 0x814
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	4413      	add	r3, r2
 8002ace:	6859      	ldr	r1, [r3, #4]
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad4:	f603 0314 	addw	r3, r3, #2068	@ 0x814
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	4413      	add	r3, r2
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	3304      	adds	r3, #4
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4608      	mov	r0, r1
 8002ae6:	4798      	blx	r3
 8002ae8:	4601      	mov	r1, r0
 8002aea:	f107 030c 	add.w	r3, r7, #12
 8002aee:	461a      	mov	r2, r3
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8002af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002af6:	3301      	adds	r3, #1
 8002af8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002afc:	2b0e      	cmp	r3, #14
 8002afe:	dd94      	ble.n	8002a2a <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE15negotiateTopicsEv+0xda>
      }
    }
    configured_ = true;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
  }
 8002b0c:	bf00      	nop
 8002b0e:	372c      	adds	r7, #44	@ 0x2c
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd90      	pop	{r4, r7, pc}

08002b14 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b086      	sub	sp, #24
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8002b1e:	f107 0308 	add.w	r3, r7, #8
 8002b22:	4618      	mov	r0, r3
 8002b24:	f7fe f8e4 	bl	8000cf0 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	3304      	adds	r3, #4
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7ff f8b9 	bl	8001ca4 <_ZN13STM32Hardware4timeEv>
 8002b32:	4602      	mov	r2, r0
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8002b3c:	f107 0308 	add.w	r3, r7, #8
 8002b40:	6839      	ldr	r1, [r7, #0]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7fe f943 	bl	8000dce <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8002b48:	68fa      	ldr	r2, [r7, #12]
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	4915      	ldr	r1, [pc, #84]	@ (8002ba4 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8syncTimeEPh+0x90>)
 8002b4e:	fba1 1303 	umull	r1, r3, r1, r3
 8002b52:	099b      	lsrs	r3, r3, #6
 8002b54:	4413      	add	r3, r2
 8002b56:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8002b58:	6939      	ldr	r1, [r7, #16]
 8002b5a:	697a      	ldr	r2, [r7, #20]
 8002b5c:	4b11      	ldr	r3, [pc, #68]	@ (8002ba4 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8syncTimeEPh+0x90>)
 8002b5e:	fba3 0302 	umull	r0, r3, r3, r2
 8002b62:	099b      	lsrs	r3, r3, #6
 8002b64:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002b68:	fb00 f303 	mul.w	r3, r0, r3
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	4a0e      	ldr	r2, [pc, #56]	@ (8002ba8 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8syncTimeEPh+0x94>)
 8002b70:	fb02 f303 	mul.w	r3, r2, r3
 8002b74:	440b      	add	r3, r1
 8002b76:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8002b78:	f107 0308 	add.w	r3, r7, #8
 8002b7c:	3304      	adds	r3, #4
 8002b7e:	4619      	mov	r1, r3
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f000 f8b7 	bl	8002cf4 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	3304      	adds	r3, #4
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f7ff f88a 	bl	8001ca4 <_ZN13STM32Hardware4timeEv>
 8002b90:	4602      	mov	r2, r0
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002b98:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  }
 8002b9c:	bf00      	nop
 8002b9e:	3718      	adds	r7, #24
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	10624dd3 	.word	0x10624dd3
 8002ba8:	000f4240 	.word	0x000f4240

08002bac <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b088      	sub	sp, #32
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	2b63      	cmp	r3, #99	@ 0x63
 8002bbc:	dd0b      	ble.n	8002bd6 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE7publishEiPKNS_3MsgE+0x2a>
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002bc4:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8002bc8:	f083 0301 	eor.w	r3, r3, #1
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d001      	beq.n	8002bd6 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE7publishEiPKNS_3MsgE+0x2a>
      return 0;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	e087      	b.n	8002ce6 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE7publishEiPKNS_3MsgE+0x13a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002be2:	3318      	adds	r3, #24
 8002be4:	3307      	adds	r3, #7
 8002be6:	4619      	mov	r1, r3
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	4790      	blx	r2
 8002bec:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002bf4:	22ff      	movs	r2, #255	@ 0xff
 8002bf6:	761a      	strb	r2, [r3, #24]
    message_out[1] = PROTOCOL_VER;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002bfe:	22fe      	movs	r2, #254	@ 0xfe
 8002c00:	765a      	strb	r2, [r3, #25]
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	b2da      	uxtb	r2, r3
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c0c:	769a      	strb	r2, [r3, #26]
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	0a1b      	lsrs	r3, r3, #8
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	b2da      	uxtb	r2, r3
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c1e:	76da      	strb	r2, [r3, #27]
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c26:	7e9a      	ldrb	r2, [r3, #26]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c2e:	7edb      	ldrb	r3, [r3, #27]
 8002c30:	4413      	add	r3, r2
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	43db      	mvns	r3, r3
 8002c36:	b2da      	uxtb	r2, r3
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c3e:	771a      	strb	r2, [r3, #28]
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	b2da      	uxtb	r2, r3
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c4a:	775a      	strb	r2, [r3, #29]
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	b21b      	sxth	r3, r3
 8002c50:	121b      	asrs	r3, r3, #8
 8002c52:	b21b      	sxth	r3, r3
 8002c54:	b2da      	uxtb	r2, r3
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c5c:	779a      	strb	r2, [r3, #30]

    /* calculate checksum */
    int chk = 0;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8002c62:	2305      	movs	r3, #5
 8002c64:	61bb      	str	r3, [r7, #24]
 8002c66:	e00d      	b.n	8002c84 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE7publishEiPKNS_3MsgE+0xd8>
      chk += message_out[i];
 8002c68:	68fa      	ldr	r2, [r7, #12]
 8002c6a:	69bb      	ldr	r3, [r7, #24]
 8002c6c:	4413      	add	r3, r2
 8002c6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c72:	3318      	adds	r3, #24
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	461a      	mov	r2, r3
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	4413      	add	r3, r2
 8002c7c:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8002c7e:	69bb      	ldr	r3, [r7, #24]
 8002c80:	3301      	adds	r3, #1
 8002c82:	61bb      	str	r3, [r7, #24]
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	3306      	adds	r3, #6
 8002c88:	69ba      	ldr	r2, [r7, #24]
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	ddec      	ble.n	8002c68 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE7publishEiPKNS_3MsgE+0xbc>
    l += 7;
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	3307      	adds	r3, #7
 8002c92:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	425a      	negs	r2, r3
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	b2d2      	uxtb	r2, r2
 8002c9c:	bf58      	it	pl
 8002c9e:	4253      	negpl	r3, r2
 8002ca0:	b2da      	uxtb	r2, r3
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	1c59      	adds	r1, r3, #1
 8002ca6:	6179      	str	r1, [r7, #20]
 8002ca8:	43d2      	mvns	r2, r2
 8002caa:	b2d1      	uxtb	r1, r2
 8002cac:	68fa      	ldr	r2, [r7, #12]
 8002cae:	4413      	add	r3, r2
 8002cb0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002cb4:	3318      	adds	r3, #24
 8002cb6:	460a      	mov	r2, r1
 8002cb8:	701a      	strb	r2, [r3, #0]

    if (l <= OUTPUT_SIZE)
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002cc0:	dc0b      	bgt.n	8002cda <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE7publishEiPKNS_3MsgE+0x12e>
    {
      hardware_.write(message_out, l);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	1d18      	adds	r0, r3, #4
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ccc:	3318      	adds	r3, #24
 8002cce:	697a      	ldr	r2, [r7, #20]
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	f7fe ffd6 	bl	8001c82 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	e005      	b.n	8002ce6 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE7publishEiPKNS_3MsgE+0x13a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8002cda:	4905      	ldr	r1, [pc, #20]	@ (8002cf0 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE7publishEiPKNS_3MsgE+0x144>)
 8002cdc:	68f8      	ldr	r0, [r7, #12]
 8002cde:	f000 f847 	bl	8002d70 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8logerrorEPKc>
      return -1;
 8002ce2:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3720      	adds	r7, #32
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	08007054 	.word	0x08007054

08002cf4 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	3304      	adds	r3, #4
 8002d02:	4618      	mov	r0, r3
 8002d04:	f7fe ffce 	bl	8001ca4 <_ZN13STM32Hardware4timeEv>
 8002d08:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	4914      	ldr	r1, [pc, #80]	@ (8002d64 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE6setNowERKNS_4TimeE+0x70>)
 8002d12:	fba1 1303 	umull	r1, r3, r1, r3
 8002d16:	099b      	lsrs	r3, r3, #6
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	1e5a      	subs	r2, r3, #1
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	60da      	str	r2, [r3, #12]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	6859      	ldr	r1, [r3, #4]
 8002d24:	68fa      	ldr	r2, [r7, #12]
 8002d26:	4b0f      	ldr	r3, [pc, #60]	@ (8002d64 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE6setNowERKNS_4TimeE+0x70>)
 8002d28:	fba3 0302 	umull	r0, r3, r3, r2
 8002d2c:	099b      	lsrs	r3, r3, #6
 8002d2e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002d32:	fb00 f303 	mul.w	r3, r0, r3
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	4a0b      	ldr	r2, [pc, #44]	@ (8002d68 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE6setNowERKNS_4TimeE+0x74>)
 8002d3a:	fb02 f303 	mul.w	r3, r2, r3
 8002d3e:	1aca      	subs	r2, r1, r3
 8002d40:	4b0a      	ldr	r3, [pc, #40]	@ (8002d6c <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE6setNowERKNS_4TimeE+0x78>)
 8002d42:	4413      	add	r3, r2
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	6113      	str	r3, [r2, #16]
    normalizeSecNSec(sec_offset, nsec_offset);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f103 020c 	add.w	r2, r3, #12
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	3310      	adds	r3, #16
 8002d52:	4619      	mov	r1, r3
 8002d54:	4610      	mov	r0, r2
 8002d56:	f000 fac7 	bl	80032e8 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8002d5a:	bf00      	nop
 8002d5c:	3710      	adds	r7, #16
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	10624dd3 	.word	0x10624dd3
 8002d68:	000f4240 	.word	0x000f4240
 8002d6c:	3b9aca00 	.word	0x3b9aca00

08002d70 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8002d7a:	683a      	ldr	r2, [r7, #0]
 8002d7c:	2103      	movs	r1, #3
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f000 f804 	bl	8002d8c <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE3logEcPKc>
  }
 8002d84:	bf00      	nop
 8002d86:	3708      	adds	r7, #8
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE3logEcPKc>:
  void log(char byte, const char * msg)
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b088      	sub	sp, #32
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	460b      	mov	r3, r1
 8002d96:	607a      	str	r2, [r7, #4]
 8002d98:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8002d9a:	f107 0314 	add.w	r3, r7, #20
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7fe fa50 	bl	8001244 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8002da4:	7afb      	ldrb	r3, [r7, #11]
 8002da6:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f107 0214 	add.w	r2, r7, #20
 8002db6:	2107      	movs	r1, #7
 8002db8:	68f8      	ldr	r0, [r7, #12]
 8002dba:	4798      	blx	r3
  }
 8002dbc:	bf00      	nop
 8002dbe:	3720      	adds	r7, #32
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <_Z41__static_initialization_and_destruction_0ii>:
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	6039      	str	r1, [r7, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d11d      	bne.n	8002e10 <_Z41__static_initialization_and_destruction_0ii+0x4c>
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d118      	bne.n	8002e10 <_Z41__static_initialization_and_destruction_0ii+0x4c>
};

SerialComm comm_rosserial(huart_rosserial);
 8002dde:	490e      	ldr	r1, [pc, #56]	@ (8002e18 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8002de0:	480e      	ldr	r0, [pc, #56]	@ (8002e1c <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8002de2:	f7fe fdd8 	bl	8001996 <_ZN10SerialCommC1ER20__UART_HandleTypeDef>
/* GLOBAL VARIABLES START */

/*
 * ROS NodeHandle
 */
ros::NodeHandle nh;
 8002de6:	480e      	ldr	r0, [pc, #56]	@ (8002e20 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8002de8:	f7ff f86a 	bl	8001ec0 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EEC1Ev>
ros::Time current_time;
 8002dec:	480d      	ldr	r0, [pc, #52]	@ (8002e24 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8002dee:	f7fd ff5f 	bl	8000cb0 <_ZN3ros4TimeC1Ev>
 */

/*
 * Subscribers
 */
ros::Subscriber<std_msgs::UInt8> sub_motor_speed("/motor_speed", &motorSpeedCallback);
 8002df2:	2301      	movs	r3, #1
 8002df4:	4a0c      	ldr	r2, [pc, #48]	@ (8002e28 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8002df6:	490d      	ldr	r1, [pc, #52]	@ (8002e2c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8002df8:	480d      	ldr	r0, [pc, #52]	@ (8002e30 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8002dfa:	f7ff fa7b 	bl	80022f4 <_ZN3ros10SubscriberIN8std_msgs5UInt8EvEC1EPKcPFvRKS2_Ei>

/*
 * Publishers
 */
std_msgs::UInt32 rpm_msg;
 8002dfe:	480d      	ldr	r0, [pc, #52]	@ (8002e34 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8002e00:	f7fe ffb6 	bl	8001d70 <_ZN8std_msgs6UInt32C1Ev>
ros::Publisher pub_motor_rpm("/motor_rpm", &rpm_msg);
 8002e04:	2300      	movs	r3, #0
 8002e06:	4a0b      	ldr	r2, [pc, #44]	@ (8002e34 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8002e08:	490b      	ldr	r1, [pc, #44]	@ (8002e38 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8002e0a:	480c      	ldr	r0, [pc, #48]	@ (8002e3c <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8002e0c:	f7fe fd8e 	bl	800192c <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
 8002e10:	bf00      	nop
 8002e12:	3708      	adds	r7, #8
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	20000110 	.word	0x20000110
 8002e1c:	200001e0 	.word	0x200001e0
 8002e20:	200021ec 	.word	0x200021ec
 8002e24:	200042cc 	.word	0x200042cc
 8002e28:	08002041 	.word	0x08002041
 8002e2c:	08007090 	.word	0x08007090
 8002e30:	200042d4 	.word	0x200042d4
 8002e34:	200042f0 	.word	0x200042f0
 8002e38:	080070a0 	.word	0x080070a0
 8002e3c:	200042f8 	.word	0x200042f8

08002e40 <_ZN3ros10SubscriberIN8std_msgs5UInt8EvE8callbackEPh>:

  virtual void callback(unsigned char* data) override
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	330c      	adds	r3, #12
 8002e4e:	6839      	ldr	r1, [r7, #0]
 8002e50:	4618      	mov	r0, r3
 8002e52:	f7fe ff5f 	bl	8001d14 <_ZN8std_msgs5UInt811deserializeEPh>
    this->cb_(msg);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	695b      	ldr	r3, [r3, #20]
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	320c      	adds	r2, #12
 8002e5e:	4610      	mov	r0, r2
 8002e60:	4798      	blx	r3
  }
 8002e62:	bf00      	nop
 8002e64:	3708      	adds	r7, #8
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}

08002e6a <_ZN3ros10SubscriberIN8std_msgs5UInt8EvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5() override
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType() override
 8002e6a:	b480      	push	{r7}
 8002e6c:	b083      	sub	sp, #12
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	699b      	ldr	r3, [r3, #24]
  }
 8002e76:	4618      	mov	r0, r3
 8002e78:	370c      	adds	r7, #12
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bc80      	pop	{r7}
 8002e7e:	4770      	bx	lr

08002e80 <_ZN3ros10SubscriberIN8std_msgs5UInt8EvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	330c      	adds	r3, #12
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7fe ff57 	bl	8001d40 <_ZN8std_msgs5UInt87getTypeEv>
 8002e92:	4603      	mov	r3, r0
  }
 8002e94:	4618      	mov	r0, r3
 8002e96:	3708      	adds	r7, #8
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}

08002e9c <_ZN3ros10SubscriberIN8std_msgs5UInt8EvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	330c      	adds	r3, #12
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7fe ff55 	bl	8001d58 <_ZN8std_msgs5UInt86getMD5Ev>
 8002eae:	4603      	mov	r3, r0
  }
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3708      	adds	r7, #8
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <_ZN3ros11NodeHandle_I13STM32HardwareLi15ELi15ELi4096ELi4096EE9connectedEv>:
  virtual bool connected() override
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
    return configured_;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002ec6:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
  };
 8002eca:	4618      	mov	r0, r3
 8002ecc:	370c      	adds	r7, #12
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bc80      	pop	{r7}
 8002ed2:	4770      	bx	lr

08002ed4 <_GLOBAL__sub_I_comm_rosserial>:
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002edc:	2001      	movs	r0, #1
 8002ede:	f7ff ff71 	bl	8002dc4 <_Z41__static_initialization_and_destruction_0ii>
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b085      	sub	sp, #20
 8002ee8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002eea:	4b15      	ldr	r3, [pc, #84]	@ (8002f40 <HAL_MspInit+0x5c>)
 8002eec:	699b      	ldr	r3, [r3, #24]
 8002eee:	4a14      	ldr	r2, [pc, #80]	@ (8002f40 <HAL_MspInit+0x5c>)
 8002ef0:	f043 0301 	orr.w	r3, r3, #1
 8002ef4:	6193      	str	r3, [r2, #24]
 8002ef6:	4b12      	ldr	r3, [pc, #72]	@ (8002f40 <HAL_MspInit+0x5c>)
 8002ef8:	699b      	ldr	r3, [r3, #24]
 8002efa:	f003 0301 	and.w	r3, r3, #1
 8002efe:	60bb      	str	r3, [r7, #8]
 8002f00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f02:	4b0f      	ldr	r3, [pc, #60]	@ (8002f40 <HAL_MspInit+0x5c>)
 8002f04:	69db      	ldr	r3, [r3, #28]
 8002f06:	4a0e      	ldr	r2, [pc, #56]	@ (8002f40 <HAL_MspInit+0x5c>)
 8002f08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f0c:	61d3      	str	r3, [r2, #28]
 8002f0e:	4b0c      	ldr	r3, [pc, #48]	@ (8002f40 <HAL_MspInit+0x5c>)
 8002f10:	69db      	ldr	r3, [r3, #28]
 8002f12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f16:	607b      	str	r3, [r7, #4]
 8002f18:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002f1a:	4b0a      	ldr	r3, [pc, #40]	@ (8002f44 <HAL_MspInit+0x60>)
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	60fb      	str	r3, [r7, #12]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002f26:	60fb      	str	r3, [r7, #12]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002f2e:	60fb      	str	r3, [r7, #12]
 8002f30:	4a04      	ldr	r2, [pc, #16]	@ (8002f44 <HAL_MspInit+0x60>)
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f36:	bf00      	nop
 8002f38:	3714      	adds	r7, #20
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bc80      	pop	{r7}
 8002f3e:	4770      	bx	lr
 8002f40:	40021000 	.word	0x40021000
 8002f44:	40010000 	.word	0x40010000

08002f48 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b085      	sub	sp, #20
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a09      	ldr	r2, [pc, #36]	@ (8002f7c <HAL_TIM_Base_MspInit+0x34>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d10b      	bne.n	8002f72 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002f5a:	4b09      	ldr	r3, [pc, #36]	@ (8002f80 <HAL_TIM_Base_MspInit+0x38>)
 8002f5c:	699b      	ldr	r3, [r3, #24]
 8002f5e:	4a08      	ldr	r2, [pc, #32]	@ (8002f80 <HAL_TIM_Base_MspInit+0x38>)
 8002f60:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002f64:	6193      	str	r3, [r2, #24]
 8002f66:	4b06      	ldr	r3, [pc, #24]	@ (8002f80 <HAL_TIM_Base_MspInit+0x38>)
 8002f68:	699b      	ldr	r3, [r3, #24]
 8002f6a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f6e:	60fb      	str	r3, [r7, #12]
 8002f70:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002f72:	bf00      	nop
 8002f74:	3714      	adds	r7, #20
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bc80      	pop	{r7}
 8002f7a:	4770      	bx	lr
 8002f7c:	40012c00 	.word	0x40012c00
 8002f80:	40021000 	.word	0x40021000

08002f84 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b088      	sub	sp, #32
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f8c:	f107 0310 	add.w	r3, r7, #16
 8002f90:	2200      	movs	r2, #0
 8002f92:	601a      	str	r2, [r3, #0]
 8002f94:	605a      	str	r2, [r3, #4]
 8002f96:	609a      	str	r2, [r3, #8]
 8002f98:	60da      	str	r2, [r3, #12]
  if(htim_ic->Instance==TIM2)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fa2:	d12b      	bne.n	8002ffc <HAL_TIM_IC_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002fa4:	4b17      	ldr	r3, [pc, #92]	@ (8003004 <HAL_TIM_IC_MspInit+0x80>)
 8002fa6:	69db      	ldr	r3, [r3, #28]
 8002fa8:	4a16      	ldr	r2, [pc, #88]	@ (8003004 <HAL_TIM_IC_MspInit+0x80>)
 8002faa:	f043 0301 	orr.w	r3, r3, #1
 8002fae:	61d3      	str	r3, [r2, #28]
 8002fb0:	4b14      	ldr	r3, [pc, #80]	@ (8003004 <HAL_TIM_IC_MspInit+0x80>)
 8002fb2:	69db      	ldr	r3, [r3, #28]
 8002fb4:	f003 0301 	and.w	r3, r3, #1
 8002fb8:	60fb      	str	r3, [r7, #12]
 8002fba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fbc:	4b11      	ldr	r3, [pc, #68]	@ (8003004 <HAL_TIM_IC_MspInit+0x80>)
 8002fbe:	699b      	ldr	r3, [r3, #24]
 8002fc0:	4a10      	ldr	r2, [pc, #64]	@ (8003004 <HAL_TIM_IC_MspInit+0x80>)
 8002fc2:	f043 0304 	orr.w	r3, r3, #4
 8002fc6:	6193      	str	r3, [r2, #24]
 8002fc8:	4b0e      	ldr	r3, [pc, #56]	@ (8003004 <HAL_TIM_IC_MspInit+0x80>)
 8002fca:	699b      	ldr	r3, [r3, #24]
 8002fcc:	f003 0304 	and.w	r3, r3, #4
 8002fd0:	60bb      	str	r3, [r7, #8]
 8002fd2:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002fd4:	2302      	movs	r3, #2
 8002fd6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fe0:	f107 0310 	add.w	r3, r7, #16
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	4808      	ldr	r0, [pc, #32]	@ (8003008 <HAL_TIM_IC_MspInit+0x84>)
 8002fe8:	f000 fde2 	bl	8003bb0 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002fec:	2200      	movs	r2, #0
 8002fee:	2100      	movs	r1, #0
 8002ff0:	201c      	movs	r0, #28
 8002ff2:	f000 fb04 	bl	80035fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002ff6:	201c      	movs	r0, #28
 8002ff8:	f000 fb1d 	bl	8003636 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002ffc:	bf00      	nop
 8002ffe:	3720      	adds	r7, #32
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}
 8003004:	40021000 	.word	0x40021000
 8003008:	40010800 	.word	0x40010800

0800300c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b088      	sub	sp, #32
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003014:	f107 0310 	add.w	r3, r7, #16
 8003018:	2200      	movs	r2, #0
 800301a:	601a      	str	r2, [r3, #0]
 800301c:	605a      	str	r2, [r3, #4]
 800301e:	609a      	str	r2, [r3, #8]
 8003020:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a10      	ldr	r2, [pc, #64]	@ (8003068 <HAL_TIM_MspPostInit+0x5c>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d118      	bne.n	800305e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800302c:	4b0f      	ldr	r3, [pc, #60]	@ (800306c <HAL_TIM_MspPostInit+0x60>)
 800302e:	699b      	ldr	r3, [r3, #24]
 8003030:	4a0e      	ldr	r2, [pc, #56]	@ (800306c <HAL_TIM_MspPostInit+0x60>)
 8003032:	f043 0304 	orr.w	r3, r3, #4
 8003036:	6193      	str	r3, [r2, #24]
 8003038:	4b0c      	ldr	r3, [pc, #48]	@ (800306c <HAL_TIM_MspPostInit+0x60>)
 800303a:	699b      	ldr	r3, [r3, #24]
 800303c:	f003 0304 	and.w	r3, r3, #4
 8003040:	60fb      	str	r3, [r7, #12]
 8003042:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = MOTOR_PWM_CH1_Pin;
 8003044:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003048:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800304a:	2302      	movs	r3, #2
 800304c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800304e:	2302      	movs	r3, #2
 8003050:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MOTOR_PWM_CH1_GPIO_Port, &GPIO_InitStruct);
 8003052:	f107 0310 	add.w	r3, r7, #16
 8003056:	4619      	mov	r1, r3
 8003058:	4805      	ldr	r0, [pc, #20]	@ (8003070 <HAL_TIM_MspPostInit+0x64>)
 800305a:	f000 fda9 	bl	8003bb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800305e:	bf00      	nop
 8003060:	3720      	adds	r7, #32
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	40012c00 	.word	0x40012c00
 800306c:	40021000 	.word	0x40021000
 8003070:	40010800 	.word	0x40010800

08003074 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b088      	sub	sp, #32
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800307c:	f107 0310 	add.w	r3, r7, #16
 8003080:	2200      	movs	r2, #0
 8003082:	601a      	str	r2, [r3, #0]
 8003084:	605a      	str	r2, [r3, #4]
 8003086:	609a      	str	r2, [r3, #8]
 8003088:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a47      	ldr	r2, [pc, #284]	@ (80031ac <HAL_UART_MspInit+0x138>)
 8003090:	4293      	cmp	r3, r2
 8003092:	f040 8086 	bne.w	80031a2 <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003096:	4b46      	ldr	r3, [pc, #280]	@ (80031b0 <HAL_UART_MspInit+0x13c>)
 8003098:	699b      	ldr	r3, [r3, #24]
 800309a:	4a45      	ldr	r2, [pc, #276]	@ (80031b0 <HAL_UART_MspInit+0x13c>)
 800309c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80030a0:	6193      	str	r3, [r2, #24]
 80030a2:	4b43      	ldr	r3, [pc, #268]	@ (80031b0 <HAL_UART_MspInit+0x13c>)
 80030a4:	699b      	ldr	r3, [r3, #24]
 80030a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030aa:	60fb      	str	r3, [r7, #12]
 80030ac:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030ae:	4b40      	ldr	r3, [pc, #256]	@ (80031b0 <HAL_UART_MspInit+0x13c>)
 80030b0:	699b      	ldr	r3, [r3, #24]
 80030b2:	4a3f      	ldr	r2, [pc, #252]	@ (80031b0 <HAL_UART_MspInit+0x13c>)
 80030b4:	f043 0304 	orr.w	r3, r3, #4
 80030b8:	6193      	str	r3, [r2, #24]
 80030ba:	4b3d      	ldr	r3, [pc, #244]	@ (80031b0 <HAL_UART_MspInit+0x13c>)
 80030bc:	699b      	ldr	r3, [r3, #24]
 80030be:	f003 0304 	and.w	r3, r3, #4
 80030c2:	60bb      	str	r3, [r7, #8]
 80030c4:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80030c6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80030ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030cc:	2302      	movs	r3, #2
 80030ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80030d0:	2303      	movs	r3, #3
 80030d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030d4:	f107 0310 	add.w	r3, r7, #16
 80030d8:	4619      	mov	r1, r3
 80030da:	4836      	ldr	r0, [pc, #216]	@ (80031b4 <HAL_UART_MspInit+0x140>)
 80030dc:	f000 fd68 	bl	8003bb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80030e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80030e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030e6:	2300      	movs	r3, #0
 80030e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ea:	2300      	movs	r3, #0
 80030ec:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030ee:	f107 0310 	add.w	r3, r7, #16
 80030f2:	4619      	mov	r1, r3
 80030f4:	482f      	ldr	r0, [pc, #188]	@ (80031b4 <HAL_UART_MspInit+0x140>)
 80030f6:	f000 fd5b 	bl	8003bb0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80030fa:	4b2f      	ldr	r3, [pc, #188]	@ (80031b8 <HAL_UART_MspInit+0x144>)
 80030fc:	4a2f      	ldr	r2, [pc, #188]	@ (80031bc <HAL_UART_MspInit+0x148>)
 80030fe:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003100:	4b2d      	ldr	r3, [pc, #180]	@ (80031b8 <HAL_UART_MspInit+0x144>)
 8003102:	2210      	movs	r2, #16
 8003104:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003106:	4b2c      	ldr	r3, [pc, #176]	@ (80031b8 <HAL_UART_MspInit+0x144>)
 8003108:	2200      	movs	r2, #0
 800310a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800310c:	4b2a      	ldr	r3, [pc, #168]	@ (80031b8 <HAL_UART_MspInit+0x144>)
 800310e:	2280      	movs	r2, #128	@ 0x80
 8003110:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003112:	4b29      	ldr	r3, [pc, #164]	@ (80031b8 <HAL_UART_MspInit+0x144>)
 8003114:	2200      	movs	r2, #0
 8003116:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003118:	4b27      	ldr	r3, [pc, #156]	@ (80031b8 <HAL_UART_MspInit+0x144>)
 800311a:	2200      	movs	r2, #0
 800311c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800311e:	4b26      	ldr	r3, [pc, #152]	@ (80031b8 <HAL_UART_MspInit+0x144>)
 8003120:	2200      	movs	r2, #0
 8003122:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003124:	4b24      	ldr	r3, [pc, #144]	@ (80031b8 <HAL_UART_MspInit+0x144>)
 8003126:	2200      	movs	r2, #0
 8003128:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800312a:	4823      	ldr	r0, [pc, #140]	@ (80031b8 <HAL_UART_MspInit+0x144>)
 800312c:	f000 fa9e 	bl	800366c <HAL_DMA_Init>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d001      	beq.n	800313a <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8003136:	f7fd fdb5 	bl	8000ca4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a1e      	ldr	r2, [pc, #120]	@ (80031b8 <HAL_UART_MspInit+0x144>)
 800313e:	639a      	str	r2, [r3, #56]	@ 0x38
 8003140:	4a1d      	ldr	r2, [pc, #116]	@ (80031b8 <HAL_UART_MspInit+0x144>)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8003146:	4b1e      	ldr	r3, [pc, #120]	@ (80031c0 <HAL_UART_MspInit+0x14c>)
 8003148:	4a1e      	ldr	r2, [pc, #120]	@ (80031c4 <HAL_UART_MspInit+0x150>)
 800314a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800314c:	4b1c      	ldr	r3, [pc, #112]	@ (80031c0 <HAL_UART_MspInit+0x14c>)
 800314e:	2200      	movs	r2, #0
 8003150:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003152:	4b1b      	ldr	r3, [pc, #108]	@ (80031c0 <HAL_UART_MspInit+0x14c>)
 8003154:	2200      	movs	r2, #0
 8003156:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003158:	4b19      	ldr	r3, [pc, #100]	@ (80031c0 <HAL_UART_MspInit+0x14c>)
 800315a:	2280      	movs	r2, #128	@ 0x80
 800315c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800315e:	4b18      	ldr	r3, [pc, #96]	@ (80031c0 <HAL_UART_MspInit+0x14c>)
 8003160:	2200      	movs	r2, #0
 8003162:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003164:	4b16      	ldr	r3, [pc, #88]	@ (80031c0 <HAL_UART_MspInit+0x14c>)
 8003166:	2200      	movs	r2, #0
 8003168:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800316a:	4b15      	ldr	r3, [pc, #84]	@ (80031c0 <HAL_UART_MspInit+0x14c>)
 800316c:	2200      	movs	r2, #0
 800316e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003170:	4b13      	ldr	r3, [pc, #76]	@ (80031c0 <HAL_UART_MspInit+0x14c>)
 8003172:	2200      	movs	r2, #0
 8003174:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003176:	4812      	ldr	r0, [pc, #72]	@ (80031c0 <HAL_UART_MspInit+0x14c>)
 8003178:	f000 fa78 	bl	800366c <HAL_DMA_Init>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d001      	beq.n	8003186 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 8003182:	f7fd fd8f 	bl	8000ca4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a0d      	ldr	r2, [pc, #52]	@ (80031c0 <HAL_UART_MspInit+0x14c>)
 800318a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800318c:	4a0c      	ldr	r2, [pc, #48]	@ (80031c0 <HAL_UART_MspInit+0x14c>)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003192:	2200      	movs	r2, #0
 8003194:	2100      	movs	r1, #0
 8003196:	2025      	movs	r0, #37	@ 0x25
 8003198:	f000 fa31 	bl	80035fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800319c:	2025      	movs	r0, #37	@ 0x25
 800319e:	f000 fa4a 	bl	8003636 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80031a2:	bf00      	nop
 80031a4:	3720      	adds	r7, #32
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	40013800 	.word	0x40013800
 80031b0:	40021000 	.word	0x40021000
 80031b4:	40010800 	.word	0x40010800
 80031b8:	20000158 	.word	0x20000158
 80031bc:	40020044 	.word	0x40020044
 80031c0:	2000019c 	.word	0x2000019c
 80031c4:	40020058 	.word	0x40020058

080031c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031c8:	b480      	push	{r7}
 80031ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80031cc:	bf00      	nop
 80031ce:	e7fd      	b.n	80031cc <NMI_Handler+0x4>

080031d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031d0:	b480      	push	{r7}
 80031d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031d4:	bf00      	nop
 80031d6:	e7fd      	b.n	80031d4 <HardFault_Handler+0x4>

080031d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031d8:	b480      	push	{r7}
 80031da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031dc:	bf00      	nop
 80031de:	e7fd      	b.n	80031dc <MemManage_Handler+0x4>

080031e0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031e0:	b480      	push	{r7}
 80031e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031e4:	bf00      	nop
 80031e6:	e7fd      	b.n	80031e4 <BusFault_Handler+0x4>

080031e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031e8:	b480      	push	{r7}
 80031ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031ec:	bf00      	nop
 80031ee:	e7fd      	b.n	80031ec <UsageFault_Handler+0x4>

080031f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80031f0:	b480      	push	{r7}
 80031f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80031f4:	bf00      	nop
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bc80      	pop	{r7}
 80031fa:	4770      	bx	lr

080031fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80031fc:	b480      	push	{r7}
 80031fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003200:	bf00      	nop
 8003202:	46bd      	mov	sp, r7
 8003204:	bc80      	pop	{r7}
 8003206:	4770      	bx	lr

08003208 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003208:	b480      	push	{r7}
 800320a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800320c:	bf00      	nop
 800320e:	46bd      	mov	sp, r7
 8003210:	bc80      	pop	{r7}
 8003212:	4770      	bx	lr

08003214 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003218:	f000 f8fe 	bl	8003418 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800321c:	bf00      	nop
 800321e:	bd80      	pop	{r7, pc}

08003220 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003224:	4802      	ldr	r0, [pc, #8]	@ (8003230 <DMA1_Channel4_IRQHandler+0x10>)
 8003226:	f000 fb8f 	bl	8003948 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800322a:	bf00      	nop
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	20000158 	.word	0x20000158

08003234 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003238:	4802      	ldr	r0, [pc, #8]	@ (8003244 <DMA1_Channel5_IRQHandler+0x10>)
 800323a:	f000 fb85 	bl	8003948 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800323e:	bf00      	nop
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	2000019c 	.word	0x2000019c

08003248 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim_encoder);
 800324c:	4802      	ldr	r0, [pc, #8]	@ (8003258 <TIM2_IRQHandler+0x10>)
 800324e:	f001 fd01 	bl	8004c54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003252:	bf00      	nop
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	200000c8 	.word	0x200000c8

0800325c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart_rosserial);
 8003260:	4802      	ldr	r0, [pc, #8]	@ (800326c <USART1_IRQHandler+0x10>)
 8003262:	f002 fda3 	bl	8005dac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003266:	bf00      	nop
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	20000110 	.word	0x20000110

08003270 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b086      	sub	sp, #24
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003278:	4a14      	ldr	r2, [pc, #80]	@ (80032cc <_sbrk+0x5c>)
 800327a:	4b15      	ldr	r3, [pc, #84]	@ (80032d0 <_sbrk+0x60>)
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003284:	4b13      	ldr	r3, [pc, #76]	@ (80032d4 <_sbrk+0x64>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d102      	bne.n	8003292 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800328c:	4b11      	ldr	r3, [pc, #68]	@ (80032d4 <_sbrk+0x64>)
 800328e:	4a12      	ldr	r2, [pc, #72]	@ (80032d8 <_sbrk+0x68>)
 8003290:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003292:	4b10      	ldr	r3, [pc, #64]	@ (80032d4 <_sbrk+0x64>)
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4413      	add	r3, r2
 800329a:	693a      	ldr	r2, [r7, #16]
 800329c:	429a      	cmp	r2, r3
 800329e:	d207      	bcs.n	80032b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80032a0:	f003 fd98 	bl	8006dd4 <__errno>
 80032a4:	4603      	mov	r3, r0
 80032a6:	220c      	movs	r2, #12
 80032a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80032aa:	f04f 33ff 	mov.w	r3, #4294967295
 80032ae:	e009      	b.n	80032c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80032b0:	4b08      	ldr	r3, [pc, #32]	@ (80032d4 <_sbrk+0x64>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80032b6:	4b07      	ldr	r3, [pc, #28]	@ (80032d4 <_sbrk+0x64>)
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4413      	add	r3, r2
 80032be:	4a05      	ldr	r2, [pc, #20]	@ (80032d4 <_sbrk+0x64>)
 80032c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80032c2:	68fb      	ldr	r3, [r7, #12]
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3718      	adds	r7, #24
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	20005000 	.word	0x20005000
 80032d0:	00000400 	.word	0x00000400
 80032d4:	20004324 	.word	0x20004324
 80032d8:	20004478 	.word	0x20004478

080032dc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80032dc:	b480      	push	{r7}
 80032de:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80032e0:	bf00      	nop
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bc80      	pop	{r7}
 80032e6:	4770      	bx	lr

080032e8 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b085      	sub	sp, #20
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	0a5a      	lsrs	r2, r3, #9
 80032f8:	490f      	ldr	r1, [pc, #60]	@ (8003338 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 80032fa:	fba1 1202 	umull	r1, r2, r1, r2
 80032fe:	09d2      	lsrs	r2, r2, #7
 8003300:	490e      	ldr	r1, [pc, #56]	@ (800333c <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8003302:	fb01 f202 	mul.w	r2, r1, r2
 8003306:	1a9b      	subs	r3, r3, r2
 8003308:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	0a5b      	lsrs	r3, r3, #9
 8003310:	4a09      	ldr	r2, [pc, #36]	@ (8003338 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8003312:	fba2 2303 	umull	r2, r3, r2, r3
 8003316:	09db      	lsrs	r3, r3, #7
 8003318:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	441a      	add	r2, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	68fa      	ldr	r2, [r7, #12]
 800332a:	601a      	str	r2, [r3, #0]
}
 800332c:	bf00      	nop
 800332e:	3714      	adds	r7, #20
 8003330:	46bd      	mov	sp, r7
 8003332:	bc80      	pop	{r7}
 8003334:	4770      	bx	lr
 8003336:	bf00      	nop
 8003338:	00044b83 	.word	0x00044b83
 800333c:	3b9aca00 	.word	0x3b9aca00

08003340 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003340:	f7ff ffcc 	bl	80032dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003344:	480b      	ldr	r0, [pc, #44]	@ (8003374 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003346:	490c      	ldr	r1, [pc, #48]	@ (8003378 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003348:	4a0c      	ldr	r2, [pc, #48]	@ (800337c <LoopFillZerobss+0x16>)
  movs r3, #0
 800334a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800334c:	e002      	b.n	8003354 <LoopCopyDataInit>

0800334e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800334e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003350:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003352:	3304      	adds	r3, #4

08003354 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003354:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003356:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003358:	d3f9      	bcc.n	800334e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800335a:	4a09      	ldr	r2, [pc, #36]	@ (8003380 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800335c:	4c09      	ldr	r4, [pc, #36]	@ (8003384 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800335e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003360:	e001      	b.n	8003366 <LoopFillZerobss>

08003362 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003362:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003364:	3204      	adds	r2, #4

08003366 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003366:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003368:	d3fb      	bcc.n	8003362 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800336a:	f003 fd39 	bl	8006de0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800336e:	f7fd faa3 	bl	80008b8 <main>
  bx lr
 8003372:	4770      	bx	lr
  ldr r0, =_sdata
 8003374:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003378:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800337c:	08007208 	.word	0x08007208
  ldr r2, =_sbss
 8003380:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8003384:	20004474 	.word	0x20004474

08003388 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003388:	e7fe      	b.n	8003388 <ADC1_2_IRQHandler>
	...

0800338c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003390:	4b08      	ldr	r3, [pc, #32]	@ (80033b4 <HAL_Init+0x28>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a07      	ldr	r2, [pc, #28]	@ (80033b4 <HAL_Init+0x28>)
 8003396:	f043 0310 	orr.w	r3, r3, #16
 800339a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800339c:	2003      	movs	r0, #3
 800339e:	f000 f923 	bl	80035e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80033a2:	200f      	movs	r0, #15
 80033a4:	f000 f808 	bl	80033b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80033a8:	f7ff fd9c 	bl	8002ee4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80033ac:	2300      	movs	r3, #0
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	40022000 	.word	0x40022000

080033b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80033c0:	4b12      	ldr	r3, [pc, #72]	@ (800340c <HAL_InitTick+0x54>)
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	4b12      	ldr	r3, [pc, #72]	@ (8003410 <HAL_InitTick+0x58>)
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	4619      	mov	r1, r3
 80033ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80033ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80033d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80033d6:	4618      	mov	r0, r3
 80033d8:	f000 f93b 	bl	8003652 <HAL_SYSTICK_Config>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d001      	beq.n	80033e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e00e      	b.n	8003404 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2b0f      	cmp	r3, #15
 80033ea:	d80a      	bhi.n	8003402 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80033ec:	2200      	movs	r2, #0
 80033ee:	6879      	ldr	r1, [r7, #4]
 80033f0:	f04f 30ff 	mov.w	r0, #4294967295
 80033f4:	f000 f903 	bl	80035fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80033f8:	4a06      	ldr	r2, [pc, #24]	@ (8003414 <HAL_InitTick+0x5c>)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80033fe:	2300      	movs	r3, #0
 8003400:	e000      	b.n	8003404 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
}
 8003404:	4618      	mov	r0, r3
 8003406:	3708      	adds	r7, #8
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}
 800340c:	20000004 	.word	0x20000004
 8003410:	2000000c 	.word	0x2000000c
 8003414:	20000008 	.word	0x20000008

08003418 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003418:	b480      	push	{r7}
 800341a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800341c:	4b05      	ldr	r3, [pc, #20]	@ (8003434 <HAL_IncTick+0x1c>)
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	461a      	mov	r2, r3
 8003422:	4b05      	ldr	r3, [pc, #20]	@ (8003438 <HAL_IncTick+0x20>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4413      	add	r3, r2
 8003428:	4a03      	ldr	r2, [pc, #12]	@ (8003438 <HAL_IncTick+0x20>)
 800342a:	6013      	str	r3, [r2, #0]
}
 800342c:	bf00      	nop
 800342e:	46bd      	mov	sp, r7
 8003430:	bc80      	pop	{r7}
 8003432:	4770      	bx	lr
 8003434:	2000000c 	.word	0x2000000c
 8003438:	20004328 	.word	0x20004328

0800343c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800343c:	b480      	push	{r7}
 800343e:	af00      	add	r7, sp, #0
  return uwTick;
 8003440:	4b02      	ldr	r3, [pc, #8]	@ (800344c <HAL_GetTick+0x10>)
 8003442:	681b      	ldr	r3, [r3, #0]
}
 8003444:	4618      	mov	r0, r3
 8003446:	46bd      	mov	sp, r7
 8003448:	bc80      	pop	{r7}
 800344a:	4770      	bx	lr
 800344c:	20004328 	.word	0x20004328

08003450 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003450:	b480      	push	{r7}
 8003452:	b085      	sub	sp, #20
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f003 0307 	and.w	r3, r3, #7
 800345e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003460:	4b0c      	ldr	r3, [pc, #48]	@ (8003494 <__NVIC_SetPriorityGrouping+0x44>)
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003466:	68ba      	ldr	r2, [r7, #8]
 8003468:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800346c:	4013      	ands	r3, r2
 800346e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003478:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800347c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003480:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003482:	4a04      	ldr	r2, [pc, #16]	@ (8003494 <__NVIC_SetPriorityGrouping+0x44>)
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	60d3      	str	r3, [r2, #12]
}
 8003488:	bf00      	nop
 800348a:	3714      	adds	r7, #20
 800348c:	46bd      	mov	sp, r7
 800348e:	bc80      	pop	{r7}
 8003490:	4770      	bx	lr
 8003492:	bf00      	nop
 8003494:	e000ed00 	.word	0xe000ed00

08003498 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003498:	b480      	push	{r7}
 800349a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800349c:	4b04      	ldr	r3, [pc, #16]	@ (80034b0 <__NVIC_GetPriorityGrouping+0x18>)
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	0a1b      	lsrs	r3, r3, #8
 80034a2:	f003 0307 	and.w	r3, r3, #7
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bc80      	pop	{r7}
 80034ac:	4770      	bx	lr
 80034ae:	bf00      	nop
 80034b0:	e000ed00 	.word	0xe000ed00

080034b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	4603      	mov	r3, r0
 80034bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	db0b      	blt.n	80034de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034c6:	79fb      	ldrb	r3, [r7, #7]
 80034c8:	f003 021f 	and.w	r2, r3, #31
 80034cc:	4906      	ldr	r1, [pc, #24]	@ (80034e8 <__NVIC_EnableIRQ+0x34>)
 80034ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034d2:	095b      	lsrs	r3, r3, #5
 80034d4:	2001      	movs	r0, #1
 80034d6:	fa00 f202 	lsl.w	r2, r0, r2
 80034da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80034de:	bf00      	nop
 80034e0:	370c      	adds	r7, #12
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bc80      	pop	{r7}
 80034e6:	4770      	bx	lr
 80034e8:	e000e100 	.word	0xe000e100

080034ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	4603      	mov	r3, r0
 80034f4:	6039      	str	r1, [r7, #0]
 80034f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	db0a      	blt.n	8003516 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	b2da      	uxtb	r2, r3
 8003504:	490c      	ldr	r1, [pc, #48]	@ (8003538 <__NVIC_SetPriority+0x4c>)
 8003506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800350a:	0112      	lsls	r2, r2, #4
 800350c:	b2d2      	uxtb	r2, r2
 800350e:	440b      	add	r3, r1
 8003510:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003514:	e00a      	b.n	800352c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	b2da      	uxtb	r2, r3
 800351a:	4908      	ldr	r1, [pc, #32]	@ (800353c <__NVIC_SetPriority+0x50>)
 800351c:	79fb      	ldrb	r3, [r7, #7]
 800351e:	f003 030f 	and.w	r3, r3, #15
 8003522:	3b04      	subs	r3, #4
 8003524:	0112      	lsls	r2, r2, #4
 8003526:	b2d2      	uxtb	r2, r2
 8003528:	440b      	add	r3, r1
 800352a:	761a      	strb	r2, [r3, #24]
}
 800352c:	bf00      	nop
 800352e:	370c      	adds	r7, #12
 8003530:	46bd      	mov	sp, r7
 8003532:	bc80      	pop	{r7}
 8003534:	4770      	bx	lr
 8003536:	bf00      	nop
 8003538:	e000e100 	.word	0xe000e100
 800353c:	e000ed00 	.word	0xe000ed00

08003540 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003540:	b480      	push	{r7}
 8003542:	b089      	sub	sp, #36	@ 0x24
 8003544:	af00      	add	r7, sp, #0
 8003546:	60f8      	str	r0, [r7, #12]
 8003548:	60b9      	str	r1, [r7, #8]
 800354a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f003 0307 	and.w	r3, r3, #7
 8003552:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	f1c3 0307 	rsb	r3, r3, #7
 800355a:	2b04      	cmp	r3, #4
 800355c:	bf28      	it	cs
 800355e:	2304      	movcs	r3, #4
 8003560:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	3304      	adds	r3, #4
 8003566:	2b06      	cmp	r3, #6
 8003568:	d902      	bls.n	8003570 <NVIC_EncodePriority+0x30>
 800356a:	69fb      	ldr	r3, [r7, #28]
 800356c:	3b03      	subs	r3, #3
 800356e:	e000      	b.n	8003572 <NVIC_EncodePriority+0x32>
 8003570:	2300      	movs	r3, #0
 8003572:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003574:	f04f 32ff 	mov.w	r2, #4294967295
 8003578:	69bb      	ldr	r3, [r7, #24]
 800357a:	fa02 f303 	lsl.w	r3, r2, r3
 800357e:	43da      	mvns	r2, r3
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	401a      	ands	r2, r3
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003588:	f04f 31ff 	mov.w	r1, #4294967295
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	fa01 f303 	lsl.w	r3, r1, r3
 8003592:	43d9      	mvns	r1, r3
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003598:	4313      	orrs	r3, r2
         );
}
 800359a:	4618      	mov	r0, r3
 800359c:	3724      	adds	r7, #36	@ 0x24
 800359e:	46bd      	mov	sp, r7
 80035a0:	bc80      	pop	{r7}
 80035a2:	4770      	bx	lr

080035a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b082      	sub	sp, #8
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	3b01      	subs	r3, #1
 80035b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80035b4:	d301      	bcc.n	80035ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035b6:	2301      	movs	r3, #1
 80035b8:	e00f      	b.n	80035da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035ba:	4a0a      	ldr	r2, [pc, #40]	@ (80035e4 <SysTick_Config+0x40>)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	3b01      	subs	r3, #1
 80035c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035c2:	210f      	movs	r1, #15
 80035c4:	f04f 30ff 	mov.w	r0, #4294967295
 80035c8:	f7ff ff90 	bl	80034ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035cc:	4b05      	ldr	r3, [pc, #20]	@ (80035e4 <SysTick_Config+0x40>)
 80035ce:	2200      	movs	r2, #0
 80035d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035d2:	4b04      	ldr	r3, [pc, #16]	@ (80035e4 <SysTick_Config+0x40>)
 80035d4:	2207      	movs	r2, #7
 80035d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035d8:	2300      	movs	r3, #0
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3708      	adds	r7, #8
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop
 80035e4:	e000e010 	.word	0xe000e010

080035e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b082      	sub	sp, #8
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f7ff ff2d 	bl	8003450 <__NVIC_SetPriorityGrouping>
}
 80035f6:	bf00      	nop
 80035f8:	3708      	adds	r7, #8
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}

080035fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80035fe:	b580      	push	{r7, lr}
 8003600:	b086      	sub	sp, #24
 8003602:	af00      	add	r7, sp, #0
 8003604:	4603      	mov	r3, r0
 8003606:	60b9      	str	r1, [r7, #8]
 8003608:	607a      	str	r2, [r7, #4]
 800360a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800360c:	2300      	movs	r3, #0
 800360e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003610:	f7ff ff42 	bl	8003498 <__NVIC_GetPriorityGrouping>
 8003614:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	68b9      	ldr	r1, [r7, #8]
 800361a:	6978      	ldr	r0, [r7, #20]
 800361c:	f7ff ff90 	bl	8003540 <NVIC_EncodePriority>
 8003620:	4602      	mov	r2, r0
 8003622:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003626:	4611      	mov	r1, r2
 8003628:	4618      	mov	r0, r3
 800362a:	f7ff ff5f 	bl	80034ec <__NVIC_SetPriority>
}
 800362e:	bf00      	nop
 8003630:	3718      	adds	r7, #24
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}

08003636 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003636:	b580      	push	{r7, lr}
 8003638:	b082      	sub	sp, #8
 800363a:	af00      	add	r7, sp, #0
 800363c:	4603      	mov	r3, r0
 800363e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003640:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003644:	4618      	mov	r0, r3
 8003646:	f7ff ff35 	bl	80034b4 <__NVIC_EnableIRQ>
}
 800364a:	bf00      	nop
 800364c:	3708      	adds	r7, #8
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}

08003652 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003652:	b580      	push	{r7, lr}
 8003654:	b082      	sub	sp, #8
 8003656:	af00      	add	r7, sp, #0
 8003658:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f7ff ffa2 	bl	80035a4 <SysTick_Config>
 8003660:	4603      	mov	r3, r0
}
 8003662:	4618      	mov	r0, r3
 8003664:	3708      	adds	r7, #8
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
	...

0800366c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800366c:	b480      	push	{r7}
 800366e:	b085      	sub	sp, #20
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003674:	2300      	movs	r3, #0
 8003676:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d101      	bne.n	8003682 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e043      	b.n	800370a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	461a      	mov	r2, r3
 8003688:	4b22      	ldr	r3, [pc, #136]	@ (8003714 <HAL_DMA_Init+0xa8>)
 800368a:	4413      	add	r3, r2
 800368c:	4a22      	ldr	r2, [pc, #136]	@ (8003718 <HAL_DMA_Init+0xac>)
 800368e:	fba2 2303 	umull	r2, r3, r2, r3
 8003692:	091b      	lsrs	r3, r3, #4
 8003694:	009a      	lsls	r2, r3, #2
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4a1f      	ldr	r2, [pc, #124]	@ (800371c <HAL_DMA_Init+0xb0>)
 800369e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2202      	movs	r2, #2
 80036a4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80036b6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80036ba:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80036c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	695b      	ldr	r3, [r3, #20]
 80036d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	69db      	ldr	r3, [r3, #28]
 80036e2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80036e4:	68fa      	ldr	r2, [r7, #12]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	68fa      	ldr	r2, [r7, #12]
 80036f0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003708:	2300      	movs	r3, #0
}
 800370a:	4618      	mov	r0, r3
 800370c:	3714      	adds	r7, #20
 800370e:	46bd      	mov	sp, r7
 8003710:	bc80      	pop	{r7}
 8003712:	4770      	bx	lr
 8003714:	bffdfff8 	.word	0xbffdfff8
 8003718:	cccccccd 	.word	0xcccccccd
 800371c:	40020000 	.word	0x40020000

08003720 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b086      	sub	sp, #24
 8003724:	af00      	add	r7, sp, #0
 8003726:	60f8      	str	r0, [r7, #12]
 8003728:	60b9      	str	r1, [r7, #8]
 800372a:	607a      	str	r2, [r7, #4]
 800372c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800372e:	2300      	movs	r3, #0
 8003730:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003738:	2b01      	cmp	r3, #1
 800373a:	d101      	bne.n	8003740 <HAL_DMA_Start_IT+0x20>
 800373c:	2302      	movs	r3, #2
 800373e:	e04b      	b.n	80037d8 <HAL_DMA_Start_IT+0xb8>
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800374e:	b2db      	uxtb	r3, r3
 8003750:	2b01      	cmp	r3, #1
 8003752:	d13a      	bne.n	80037ca <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2202      	movs	r2, #2
 8003758:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2200      	movs	r2, #0
 8003760:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f022 0201 	bic.w	r2, r2, #1
 8003770:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	68b9      	ldr	r1, [r7, #8]
 8003778:	68f8      	ldr	r0, [r7, #12]
 800377a:	f000 f9eb 	bl	8003b54 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003782:	2b00      	cmp	r3, #0
 8003784:	d008      	beq.n	8003798 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f042 020e 	orr.w	r2, r2, #14
 8003794:	601a      	str	r2, [r3, #0]
 8003796:	e00f      	b.n	80037b8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f022 0204 	bic.w	r2, r2, #4
 80037a6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f042 020a 	orr.w	r2, r2, #10
 80037b6:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f042 0201 	orr.w	r2, r2, #1
 80037c6:	601a      	str	r2, [r3, #0]
 80037c8:	e005      	b.n	80037d6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80037d2:	2302      	movs	r3, #2
 80037d4:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80037d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3718      	adds	r7, #24
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}

080037e0 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b085      	sub	sp, #20
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037e8:	2300      	movs	r3, #0
 80037ea:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	d008      	beq.n	800380a <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2204      	movs	r2, #4
 80037fc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e020      	b.n	800384c <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f022 020e 	bic.w	r2, r2, #14
 8003818:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f022 0201 	bic.w	r2, r2, #1
 8003828:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003832:	2101      	movs	r1, #1
 8003834:	fa01 f202 	lsl.w	r2, r1, r2
 8003838:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2201      	movs	r2, #1
 800383e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800384a:	7bfb      	ldrb	r3, [r7, #15]
}
 800384c:	4618      	mov	r0, r3
 800384e:	3714      	adds	r7, #20
 8003850:	46bd      	mov	sp, r7
 8003852:	bc80      	pop	{r7}
 8003854:	4770      	bx	lr
	...

08003858 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003858:	b580      	push	{r7, lr}
 800385a:	b084      	sub	sp, #16
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003860:	2300      	movs	r3, #0
 8003862:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800386a:	b2db      	uxtb	r3, r3
 800386c:	2b02      	cmp	r3, #2
 800386e:	d005      	beq.n	800387c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2204      	movs	r2, #4
 8003874:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	73fb      	strb	r3, [r7, #15]
 800387a:	e051      	b.n	8003920 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f022 020e 	bic.w	r2, r2, #14
 800388a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f022 0201 	bic.w	r2, r2, #1
 800389a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a22      	ldr	r2, [pc, #136]	@ (800392c <HAL_DMA_Abort_IT+0xd4>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d029      	beq.n	80038fa <HAL_DMA_Abort_IT+0xa2>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a21      	ldr	r2, [pc, #132]	@ (8003930 <HAL_DMA_Abort_IT+0xd8>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d022      	beq.n	80038f6 <HAL_DMA_Abort_IT+0x9e>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a1f      	ldr	r2, [pc, #124]	@ (8003934 <HAL_DMA_Abort_IT+0xdc>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d01a      	beq.n	80038f0 <HAL_DMA_Abort_IT+0x98>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a1e      	ldr	r2, [pc, #120]	@ (8003938 <HAL_DMA_Abort_IT+0xe0>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d012      	beq.n	80038ea <HAL_DMA_Abort_IT+0x92>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a1c      	ldr	r2, [pc, #112]	@ (800393c <HAL_DMA_Abort_IT+0xe4>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d00a      	beq.n	80038e4 <HAL_DMA_Abort_IT+0x8c>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a1b      	ldr	r2, [pc, #108]	@ (8003940 <HAL_DMA_Abort_IT+0xe8>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d102      	bne.n	80038de <HAL_DMA_Abort_IT+0x86>
 80038d8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80038dc:	e00e      	b.n	80038fc <HAL_DMA_Abort_IT+0xa4>
 80038de:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80038e2:	e00b      	b.n	80038fc <HAL_DMA_Abort_IT+0xa4>
 80038e4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80038e8:	e008      	b.n	80038fc <HAL_DMA_Abort_IT+0xa4>
 80038ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80038ee:	e005      	b.n	80038fc <HAL_DMA_Abort_IT+0xa4>
 80038f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80038f4:	e002      	b.n	80038fc <HAL_DMA_Abort_IT+0xa4>
 80038f6:	2310      	movs	r3, #16
 80038f8:	e000      	b.n	80038fc <HAL_DMA_Abort_IT+0xa4>
 80038fa:	2301      	movs	r3, #1
 80038fc:	4a11      	ldr	r2, [pc, #68]	@ (8003944 <HAL_DMA_Abort_IT+0xec>)
 80038fe:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2201      	movs	r2, #1
 8003904:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003914:	2b00      	cmp	r3, #0
 8003916:	d003      	beq.n	8003920 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	4798      	blx	r3
    } 
  }
  return status;
 8003920:	7bfb      	ldrb	r3, [r7, #15]
}
 8003922:	4618      	mov	r0, r3
 8003924:	3710      	adds	r7, #16
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	40020008 	.word	0x40020008
 8003930:	4002001c 	.word	0x4002001c
 8003934:	40020030 	.word	0x40020030
 8003938:	40020044 	.word	0x40020044
 800393c:	40020058 	.word	0x40020058
 8003940:	4002006c 	.word	0x4002006c
 8003944:	40020000 	.word	0x40020000

08003948 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003964:	2204      	movs	r2, #4
 8003966:	409a      	lsls	r2, r3
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	4013      	ands	r3, r2
 800396c:	2b00      	cmp	r3, #0
 800396e:	d04f      	beq.n	8003a10 <HAL_DMA_IRQHandler+0xc8>
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	f003 0304 	and.w	r3, r3, #4
 8003976:	2b00      	cmp	r3, #0
 8003978:	d04a      	beq.n	8003a10 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0320 	and.w	r3, r3, #32
 8003984:	2b00      	cmp	r3, #0
 8003986:	d107      	bne.n	8003998 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f022 0204 	bic.w	r2, r2, #4
 8003996:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a66      	ldr	r2, [pc, #408]	@ (8003b38 <HAL_DMA_IRQHandler+0x1f0>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d029      	beq.n	80039f6 <HAL_DMA_IRQHandler+0xae>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a65      	ldr	r2, [pc, #404]	@ (8003b3c <HAL_DMA_IRQHandler+0x1f4>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d022      	beq.n	80039f2 <HAL_DMA_IRQHandler+0xaa>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a63      	ldr	r2, [pc, #396]	@ (8003b40 <HAL_DMA_IRQHandler+0x1f8>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d01a      	beq.n	80039ec <HAL_DMA_IRQHandler+0xa4>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a62      	ldr	r2, [pc, #392]	@ (8003b44 <HAL_DMA_IRQHandler+0x1fc>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d012      	beq.n	80039e6 <HAL_DMA_IRQHandler+0x9e>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a60      	ldr	r2, [pc, #384]	@ (8003b48 <HAL_DMA_IRQHandler+0x200>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d00a      	beq.n	80039e0 <HAL_DMA_IRQHandler+0x98>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a5f      	ldr	r2, [pc, #380]	@ (8003b4c <HAL_DMA_IRQHandler+0x204>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d102      	bne.n	80039da <HAL_DMA_IRQHandler+0x92>
 80039d4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80039d8:	e00e      	b.n	80039f8 <HAL_DMA_IRQHandler+0xb0>
 80039da:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80039de:	e00b      	b.n	80039f8 <HAL_DMA_IRQHandler+0xb0>
 80039e0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80039e4:	e008      	b.n	80039f8 <HAL_DMA_IRQHandler+0xb0>
 80039e6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80039ea:	e005      	b.n	80039f8 <HAL_DMA_IRQHandler+0xb0>
 80039ec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80039f0:	e002      	b.n	80039f8 <HAL_DMA_IRQHandler+0xb0>
 80039f2:	2340      	movs	r3, #64	@ 0x40
 80039f4:	e000      	b.n	80039f8 <HAL_DMA_IRQHandler+0xb0>
 80039f6:	2304      	movs	r3, #4
 80039f8:	4a55      	ldr	r2, [pc, #340]	@ (8003b50 <HAL_DMA_IRQHandler+0x208>)
 80039fa:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	f000 8094 	beq.w	8003b2e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003a0e:	e08e      	b.n	8003b2e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a14:	2202      	movs	r2, #2
 8003a16:	409a      	lsls	r2, r3
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d056      	beq.n	8003ace <HAL_DMA_IRQHandler+0x186>
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	f003 0302 	and.w	r3, r3, #2
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d051      	beq.n	8003ace <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0320 	and.w	r3, r3, #32
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d10b      	bne.n	8003a50 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f022 020a 	bic.w	r2, r2, #10
 8003a46:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a38      	ldr	r2, [pc, #224]	@ (8003b38 <HAL_DMA_IRQHandler+0x1f0>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d029      	beq.n	8003aae <HAL_DMA_IRQHandler+0x166>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a37      	ldr	r2, [pc, #220]	@ (8003b3c <HAL_DMA_IRQHandler+0x1f4>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d022      	beq.n	8003aaa <HAL_DMA_IRQHandler+0x162>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a35      	ldr	r2, [pc, #212]	@ (8003b40 <HAL_DMA_IRQHandler+0x1f8>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d01a      	beq.n	8003aa4 <HAL_DMA_IRQHandler+0x15c>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a34      	ldr	r2, [pc, #208]	@ (8003b44 <HAL_DMA_IRQHandler+0x1fc>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d012      	beq.n	8003a9e <HAL_DMA_IRQHandler+0x156>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a32      	ldr	r2, [pc, #200]	@ (8003b48 <HAL_DMA_IRQHandler+0x200>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d00a      	beq.n	8003a98 <HAL_DMA_IRQHandler+0x150>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a31      	ldr	r2, [pc, #196]	@ (8003b4c <HAL_DMA_IRQHandler+0x204>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d102      	bne.n	8003a92 <HAL_DMA_IRQHandler+0x14a>
 8003a8c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003a90:	e00e      	b.n	8003ab0 <HAL_DMA_IRQHandler+0x168>
 8003a92:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003a96:	e00b      	b.n	8003ab0 <HAL_DMA_IRQHandler+0x168>
 8003a98:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003a9c:	e008      	b.n	8003ab0 <HAL_DMA_IRQHandler+0x168>
 8003a9e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003aa2:	e005      	b.n	8003ab0 <HAL_DMA_IRQHandler+0x168>
 8003aa4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003aa8:	e002      	b.n	8003ab0 <HAL_DMA_IRQHandler+0x168>
 8003aaa:	2320      	movs	r3, #32
 8003aac:	e000      	b.n	8003ab0 <HAL_DMA_IRQHandler+0x168>
 8003aae:	2302      	movs	r3, #2
 8003ab0:	4a27      	ldr	r2, [pc, #156]	@ (8003b50 <HAL_DMA_IRQHandler+0x208>)
 8003ab2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d034      	beq.n	8003b2e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003acc:	e02f      	b.n	8003b2e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ad2:	2208      	movs	r2, #8
 8003ad4:	409a      	lsls	r2, r3
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	4013      	ands	r3, r2
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d028      	beq.n	8003b30 <HAL_DMA_IRQHandler+0x1e8>
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	f003 0308 	and.w	r3, r3, #8
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d023      	beq.n	8003b30 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f022 020e 	bic.w	r2, r2, #14
 8003af6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b00:	2101      	movs	r1, #1
 8003b02:	fa01 f202 	lsl.w	r2, r1, r2
 8003b06:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2201      	movs	r2, #1
 8003b12:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d004      	beq.n	8003b30 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	4798      	blx	r3
    }
  }
  return;
 8003b2e:	bf00      	nop
 8003b30:	bf00      	nop
}
 8003b32:	3710      	adds	r7, #16
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	40020008 	.word	0x40020008
 8003b3c:	4002001c 	.word	0x4002001c
 8003b40:	40020030 	.word	0x40020030
 8003b44:	40020044 	.word	0x40020044
 8003b48:	40020058 	.word	0x40020058
 8003b4c:	4002006c 	.word	0x4002006c
 8003b50:	40020000 	.word	0x40020000

08003b54 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b085      	sub	sp, #20
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	60f8      	str	r0, [r7, #12]
 8003b5c:	60b9      	str	r1, [r7, #8]
 8003b5e:	607a      	str	r2, [r7, #4]
 8003b60:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b6a:	2101      	movs	r1, #1
 8003b6c:	fa01 f202 	lsl.w	r2, r1, r2
 8003b70:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	683a      	ldr	r2, [r7, #0]
 8003b78:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	2b10      	cmp	r3, #16
 8003b80:	d108      	bne.n	8003b94 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	68ba      	ldr	r2, [r7, #8]
 8003b90:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003b92:	e007      	b.n	8003ba4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	68ba      	ldr	r2, [r7, #8]
 8003b9a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	60da      	str	r2, [r3, #12]
}
 8003ba4:	bf00      	nop
 8003ba6:	3714      	adds	r7, #20
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bc80      	pop	{r7}
 8003bac:	4770      	bx	lr
	...

08003bb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b08b      	sub	sp, #44	@ 0x2c
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003bc2:	e169      	b.n	8003e98 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bcc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	69fa      	ldr	r2, [r7, #28]
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003bd8:	69ba      	ldr	r2, [r7, #24]
 8003bda:	69fb      	ldr	r3, [r7, #28]
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	f040 8158 	bne.w	8003e92 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	4a9a      	ldr	r2, [pc, #616]	@ (8003e50 <HAL_GPIO_Init+0x2a0>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d05e      	beq.n	8003caa <HAL_GPIO_Init+0xfa>
 8003bec:	4a98      	ldr	r2, [pc, #608]	@ (8003e50 <HAL_GPIO_Init+0x2a0>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d875      	bhi.n	8003cde <HAL_GPIO_Init+0x12e>
 8003bf2:	4a98      	ldr	r2, [pc, #608]	@ (8003e54 <HAL_GPIO_Init+0x2a4>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d058      	beq.n	8003caa <HAL_GPIO_Init+0xfa>
 8003bf8:	4a96      	ldr	r2, [pc, #600]	@ (8003e54 <HAL_GPIO_Init+0x2a4>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d86f      	bhi.n	8003cde <HAL_GPIO_Init+0x12e>
 8003bfe:	4a96      	ldr	r2, [pc, #600]	@ (8003e58 <HAL_GPIO_Init+0x2a8>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d052      	beq.n	8003caa <HAL_GPIO_Init+0xfa>
 8003c04:	4a94      	ldr	r2, [pc, #592]	@ (8003e58 <HAL_GPIO_Init+0x2a8>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d869      	bhi.n	8003cde <HAL_GPIO_Init+0x12e>
 8003c0a:	4a94      	ldr	r2, [pc, #592]	@ (8003e5c <HAL_GPIO_Init+0x2ac>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d04c      	beq.n	8003caa <HAL_GPIO_Init+0xfa>
 8003c10:	4a92      	ldr	r2, [pc, #584]	@ (8003e5c <HAL_GPIO_Init+0x2ac>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d863      	bhi.n	8003cde <HAL_GPIO_Init+0x12e>
 8003c16:	4a92      	ldr	r2, [pc, #584]	@ (8003e60 <HAL_GPIO_Init+0x2b0>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d046      	beq.n	8003caa <HAL_GPIO_Init+0xfa>
 8003c1c:	4a90      	ldr	r2, [pc, #576]	@ (8003e60 <HAL_GPIO_Init+0x2b0>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d85d      	bhi.n	8003cde <HAL_GPIO_Init+0x12e>
 8003c22:	2b12      	cmp	r3, #18
 8003c24:	d82a      	bhi.n	8003c7c <HAL_GPIO_Init+0xcc>
 8003c26:	2b12      	cmp	r3, #18
 8003c28:	d859      	bhi.n	8003cde <HAL_GPIO_Init+0x12e>
 8003c2a:	a201      	add	r2, pc, #4	@ (adr r2, 8003c30 <HAL_GPIO_Init+0x80>)
 8003c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c30:	08003cab 	.word	0x08003cab
 8003c34:	08003c85 	.word	0x08003c85
 8003c38:	08003c97 	.word	0x08003c97
 8003c3c:	08003cd9 	.word	0x08003cd9
 8003c40:	08003cdf 	.word	0x08003cdf
 8003c44:	08003cdf 	.word	0x08003cdf
 8003c48:	08003cdf 	.word	0x08003cdf
 8003c4c:	08003cdf 	.word	0x08003cdf
 8003c50:	08003cdf 	.word	0x08003cdf
 8003c54:	08003cdf 	.word	0x08003cdf
 8003c58:	08003cdf 	.word	0x08003cdf
 8003c5c:	08003cdf 	.word	0x08003cdf
 8003c60:	08003cdf 	.word	0x08003cdf
 8003c64:	08003cdf 	.word	0x08003cdf
 8003c68:	08003cdf 	.word	0x08003cdf
 8003c6c:	08003cdf 	.word	0x08003cdf
 8003c70:	08003cdf 	.word	0x08003cdf
 8003c74:	08003c8d 	.word	0x08003c8d
 8003c78:	08003ca1 	.word	0x08003ca1
 8003c7c:	4a79      	ldr	r2, [pc, #484]	@ (8003e64 <HAL_GPIO_Init+0x2b4>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d013      	beq.n	8003caa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003c82:	e02c      	b.n	8003cde <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	623b      	str	r3, [r7, #32]
          break;
 8003c8a:	e029      	b.n	8003ce0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	3304      	adds	r3, #4
 8003c92:	623b      	str	r3, [r7, #32]
          break;
 8003c94:	e024      	b.n	8003ce0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	3308      	adds	r3, #8
 8003c9c:	623b      	str	r3, [r7, #32]
          break;
 8003c9e:	e01f      	b.n	8003ce0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	330c      	adds	r3, #12
 8003ca6:	623b      	str	r3, [r7, #32]
          break;
 8003ca8:	e01a      	b.n	8003ce0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d102      	bne.n	8003cb8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003cb2:	2304      	movs	r3, #4
 8003cb4:	623b      	str	r3, [r7, #32]
          break;
 8003cb6:	e013      	b.n	8003ce0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d105      	bne.n	8003ccc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003cc0:	2308      	movs	r3, #8
 8003cc2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	69fa      	ldr	r2, [r7, #28]
 8003cc8:	611a      	str	r2, [r3, #16]
          break;
 8003cca:	e009      	b.n	8003ce0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003ccc:	2308      	movs	r3, #8
 8003cce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	69fa      	ldr	r2, [r7, #28]
 8003cd4:	615a      	str	r2, [r3, #20]
          break;
 8003cd6:	e003      	b.n	8003ce0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	623b      	str	r3, [r7, #32]
          break;
 8003cdc:	e000      	b.n	8003ce0 <HAL_GPIO_Init+0x130>
          break;
 8003cde:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003ce0:	69bb      	ldr	r3, [r7, #24]
 8003ce2:	2bff      	cmp	r3, #255	@ 0xff
 8003ce4:	d801      	bhi.n	8003cea <HAL_GPIO_Init+0x13a>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	e001      	b.n	8003cee <HAL_GPIO_Init+0x13e>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	3304      	adds	r3, #4
 8003cee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003cf0:	69bb      	ldr	r3, [r7, #24]
 8003cf2:	2bff      	cmp	r3, #255	@ 0xff
 8003cf4:	d802      	bhi.n	8003cfc <HAL_GPIO_Init+0x14c>
 8003cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf8:	009b      	lsls	r3, r3, #2
 8003cfa:	e002      	b.n	8003d02 <HAL_GPIO_Init+0x152>
 8003cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cfe:	3b08      	subs	r3, #8
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	210f      	movs	r1, #15
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d10:	43db      	mvns	r3, r3
 8003d12:	401a      	ands	r2, r3
 8003d14:	6a39      	ldr	r1, [r7, #32]
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	fa01 f303 	lsl.w	r3, r1, r3
 8003d1c:	431a      	orrs	r2, r3
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	f000 80b1 	beq.w	8003e92 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003d30:	4b4d      	ldr	r3, [pc, #308]	@ (8003e68 <HAL_GPIO_Init+0x2b8>)
 8003d32:	699b      	ldr	r3, [r3, #24]
 8003d34:	4a4c      	ldr	r2, [pc, #304]	@ (8003e68 <HAL_GPIO_Init+0x2b8>)
 8003d36:	f043 0301 	orr.w	r3, r3, #1
 8003d3a:	6193      	str	r3, [r2, #24]
 8003d3c:	4b4a      	ldr	r3, [pc, #296]	@ (8003e68 <HAL_GPIO_Init+0x2b8>)
 8003d3e:	699b      	ldr	r3, [r3, #24]
 8003d40:	f003 0301 	and.w	r3, r3, #1
 8003d44:	60bb      	str	r3, [r7, #8]
 8003d46:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003d48:	4a48      	ldr	r2, [pc, #288]	@ (8003e6c <HAL_GPIO_Init+0x2bc>)
 8003d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d4c:	089b      	lsrs	r3, r3, #2
 8003d4e:	3302      	adds	r3, #2
 8003d50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d54:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d58:	f003 0303 	and.w	r3, r3, #3
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	220f      	movs	r2, #15
 8003d60:	fa02 f303 	lsl.w	r3, r2, r3
 8003d64:	43db      	mvns	r3, r3
 8003d66:	68fa      	ldr	r2, [r7, #12]
 8003d68:	4013      	ands	r3, r2
 8003d6a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	4a40      	ldr	r2, [pc, #256]	@ (8003e70 <HAL_GPIO_Init+0x2c0>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d013      	beq.n	8003d9c <HAL_GPIO_Init+0x1ec>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	4a3f      	ldr	r2, [pc, #252]	@ (8003e74 <HAL_GPIO_Init+0x2c4>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d00d      	beq.n	8003d98 <HAL_GPIO_Init+0x1e8>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	4a3e      	ldr	r2, [pc, #248]	@ (8003e78 <HAL_GPIO_Init+0x2c8>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d007      	beq.n	8003d94 <HAL_GPIO_Init+0x1e4>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	4a3d      	ldr	r2, [pc, #244]	@ (8003e7c <HAL_GPIO_Init+0x2cc>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d101      	bne.n	8003d90 <HAL_GPIO_Init+0x1e0>
 8003d8c:	2303      	movs	r3, #3
 8003d8e:	e006      	b.n	8003d9e <HAL_GPIO_Init+0x1ee>
 8003d90:	2304      	movs	r3, #4
 8003d92:	e004      	b.n	8003d9e <HAL_GPIO_Init+0x1ee>
 8003d94:	2302      	movs	r3, #2
 8003d96:	e002      	b.n	8003d9e <HAL_GPIO_Init+0x1ee>
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e000      	b.n	8003d9e <HAL_GPIO_Init+0x1ee>
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003da0:	f002 0203 	and.w	r2, r2, #3
 8003da4:	0092      	lsls	r2, r2, #2
 8003da6:	4093      	lsls	r3, r2
 8003da8:	68fa      	ldr	r2, [r7, #12]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003dae:	492f      	ldr	r1, [pc, #188]	@ (8003e6c <HAL_GPIO_Init+0x2bc>)
 8003db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003db2:	089b      	lsrs	r3, r3, #2
 8003db4:	3302      	adds	r3, #2
 8003db6:	68fa      	ldr	r2, [r7, #12]
 8003db8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d006      	beq.n	8003dd6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003dc8:	4b2d      	ldr	r3, [pc, #180]	@ (8003e80 <HAL_GPIO_Init+0x2d0>)
 8003dca:	689a      	ldr	r2, [r3, #8]
 8003dcc:	492c      	ldr	r1, [pc, #176]	@ (8003e80 <HAL_GPIO_Init+0x2d0>)
 8003dce:	69bb      	ldr	r3, [r7, #24]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	608b      	str	r3, [r1, #8]
 8003dd4:	e006      	b.n	8003de4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003dd6:	4b2a      	ldr	r3, [pc, #168]	@ (8003e80 <HAL_GPIO_Init+0x2d0>)
 8003dd8:	689a      	ldr	r2, [r3, #8]
 8003dda:	69bb      	ldr	r3, [r7, #24]
 8003ddc:	43db      	mvns	r3, r3
 8003dde:	4928      	ldr	r1, [pc, #160]	@ (8003e80 <HAL_GPIO_Init+0x2d0>)
 8003de0:	4013      	ands	r3, r2
 8003de2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d006      	beq.n	8003dfe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003df0:	4b23      	ldr	r3, [pc, #140]	@ (8003e80 <HAL_GPIO_Init+0x2d0>)
 8003df2:	68da      	ldr	r2, [r3, #12]
 8003df4:	4922      	ldr	r1, [pc, #136]	@ (8003e80 <HAL_GPIO_Init+0x2d0>)
 8003df6:	69bb      	ldr	r3, [r7, #24]
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	60cb      	str	r3, [r1, #12]
 8003dfc:	e006      	b.n	8003e0c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003dfe:	4b20      	ldr	r3, [pc, #128]	@ (8003e80 <HAL_GPIO_Init+0x2d0>)
 8003e00:	68da      	ldr	r2, [r3, #12]
 8003e02:	69bb      	ldr	r3, [r7, #24]
 8003e04:	43db      	mvns	r3, r3
 8003e06:	491e      	ldr	r1, [pc, #120]	@ (8003e80 <HAL_GPIO_Init+0x2d0>)
 8003e08:	4013      	ands	r3, r2
 8003e0a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d006      	beq.n	8003e26 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003e18:	4b19      	ldr	r3, [pc, #100]	@ (8003e80 <HAL_GPIO_Init+0x2d0>)
 8003e1a:	685a      	ldr	r2, [r3, #4]
 8003e1c:	4918      	ldr	r1, [pc, #96]	@ (8003e80 <HAL_GPIO_Init+0x2d0>)
 8003e1e:	69bb      	ldr	r3, [r7, #24]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	604b      	str	r3, [r1, #4]
 8003e24:	e006      	b.n	8003e34 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003e26:	4b16      	ldr	r3, [pc, #88]	@ (8003e80 <HAL_GPIO_Init+0x2d0>)
 8003e28:	685a      	ldr	r2, [r3, #4]
 8003e2a:	69bb      	ldr	r3, [r7, #24]
 8003e2c:	43db      	mvns	r3, r3
 8003e2e:	4914      	ldr	r1, [pc, #80]	@ (8003e80 <HAL_GPIO_Init+0x2d0>)
 8003e30:	4013      	ands	r3, r2
 8003e32:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d021      	beq.n	8003e84 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003e40:	4b0f      	ldr	r3, [pc, #60]	@ (8003e80 <HAL_GPIO_Init+0x2d0>)
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	490e      	ldr	r1, [pc, #56]	@ (8003e80 <HAL_GPIO_Init+0x2d0>)
 8003e46:	69bb      	ldr	r3, [r7, #24]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	600b      	str	r3, [r1, #0]
 8003e4c:	e021      	b.n	8003e92 <HAL_GPIO_Init+0x2e2>
 8003e4e:	bf00      	nop
 8003e50:	10320000 	.word	0x10320000
 8003e54:	10310000 	.word	0x10310000
 8003e58:	10220000 	.word	0x10220000
 8003e5c:	10210000 	.word	0x10210000
 8003e60:	10120000 	.word	0x10120000
 8003e64:	10110000 	.word	0x10110000
 8003e68:	40021000 	.word	0x40021000
 8003e6c:	40010000 	.word	0x40010000
 8003e70:	40010800 	.word	0x40010800
 8003e74:	40010c00 	.word	0x40010c00
 8003e78:	40011000 	.word	0x40011000
 8003e7c:	40011400 	.word	0x40011400
 8003e80:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003e84:	4b0b      	ldr	r3, [pc, #44]	@ (8003eb4 <HAL_GPIO_Init+0x304>)
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	69bb      	ldr	r3, [r7, #24]
 8003e8a:	43db      	mvns	r3, r3
 8003e8c:	4909      	ldr	r1, [pc, #36]	@ (8003eb4 <HAL_GPIO_Init+0x304>)
 8003e8e:	4013      	ands	r3, r2
 8003e90:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e94:	3301      	adds	r3, #1
 8003e96:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e9e:	fa22 f303 	lsr.w	r3, r2, r3
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	f47f ae8e 	bne.w	8003bc4 <HAL_GPIO_Init+0x14>
  }
}
 8003ea8:	bf00      	nop
 8003eaa:	bf00      	nop
 8003eac:	372c      	adds	r7, #44	@ 0x2c
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bc80      	pop	{r7}
 8003eb2:	4770      	bx	lr
 8003eb4:	40010400 	.word	0x40010400

08003eb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	460b      	mov	r3, r1
 8003ec2:	807b      	strh	r3, [r7, #2]
 8003ec4:	4613      	mov	r3, r2
 8003ec6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003ec8:	787b      	ldrb	r3, [r7, #1]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d003      	beq.n	8003ed6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ece:	887a      	ldrh	r2, [r7, #2]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003ed4:	e003      	b.n	8003ede <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003ed6:	887b      	ldrh	r3, [r7, #2]
 8003ed8:	041a      	lsls	r2, r3, #16
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	611a      	str	r2, [r3, #16]
}
 8003ede:	bf00      	nop
 8003ee0:	370c      	adds	r7, #12
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bc80      	pop	{r7}
 8003ee6:	4770      	bx	lr

08003ee8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b086      	sub	sp, #24
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d101      	bne.n	8003efa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e272      	b.n	80043e0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0301 	and.w	r3, r3, #1
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	f000 8087 	beq.w	8004016 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f08:	4b92      	ldr	r3, [pc, #584]	@ (8004154 <HAL_RCC_OscConfig+0x26c>)
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	f003 030c 	and.w	r3, r3, #12
 8003f10:	2b04      	cmp	r3, #4
 8003f12:	d00c      	beq.n	8003f2e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003f14:	4b8f      	ldr	r3, [pc, #572]	@ (8004154 <HAL_RCC_OscConfig+0x26c>)
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	f003 030c 	and.w	r3, r3, #12
 8003f1c:	2b08      	cmp	r3, #8
 8003f1e:	d112      	bne.n	8003f46 <HAL_RCC_OscConfig+0x5e>
 8003f20:	4b8c      	ldr	r3, [pc, #560]	@ (8004154 <HAL_RCC_OscConfig+0x26c>)
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f2c:	d10b      	bne.n	8003f46 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f2e:	4b89      	ldr	r3, [pc, #548]	@ (8004154 <HAL_RCC_OscConfig+0x26c>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d06c      	beq.n	8004014 <HAL_RCC_OscConfig+0x12c>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d168      	bne.n	8004014 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e24c      	b.n	80043e0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f4e:	d106      	bne.n	8003f5e <HAL_RCC_OscConfig+0x76>
 8003f50:	4b80      	ldr	r3, [pc, #512]	@ (8004154 <HAL_RCC_OscConfig+0x26c>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a7f      	ldr	r2, [pc, #508]	@ (8004154 <HAL_RCC_OscConfig+0x26c>)
 8003f56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f5a:	6013      	str	r3, [r2, #0]
 8003f5c:	e02e      	b.n	8003fbc <HAL_RCC_OscConfig+0xd4>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d10c      	bne.n	8003f80 <HAL_RCC_OscConfig+0x98>
 8003f66:	4b7b      	ldr	r3, [pc, #492]	@ (8004154 <HAL_RCC_OscConfig+0x26c>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a7a      	ldr	r2, [pc, #488]	@ (8004154 <HAL_RCC_OscConfig+0x26c>)
 8003f6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f70:	6013      	str	r3, [r2, #0]
 8003f72:	4b78      	ldr	r3, [pc, #480]	@ (8004154 <HAL_RCC_OscConfig+0x26c>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a77      	ldr	r2, [pc, #476]	@ (8004154 <HAL_RCC_OscConfig+0x26c>)
 8003f78:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f7c:	6013      	str	r3, [r2, #0]
 8003f7e:	e01d      	b.n	8003fbc <HAL_RCC_OscConfig+0xd4>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003f88:	d10c      	bne.n	8003fa4 <HAL_RCC_OscConfig+0xbc>
 8003f8a:	4b72      	ldr	r3, [pc, #456]	@ (8004154 <HAL_RCC_OscConfig+0x26c>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a71      	ldr	r2, [pc, #452]	@ (8004154 <HAL_RCC_OscConfig+0x26c>)
 8003f90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f94:	6013      	str	r3, [r2, #0]
 8003f96:	4b6f      	ldr	r3, [pc, #444]	@ (8004154 <HAL_RCC_OscConfig+0x26c>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a6e      	ldr	r2, [pc, #440]	@ (8004154 <HAL_RCC_OscConfig+0x26c>)
 8003f9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fa0:	6013      	str	r3, [r2, #0]
 8003fa2:	e00b      	b.n	8003fbc <HAL_RCC_OscConfig+0xd4>
 8003fa4:	4b6b      	ldr	r3, [pc, #428]	@ (8004154 <HAL_RCC_OscConfig+0x26c>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a6a      	ldr	r2, [pc, #424]	@ (8004154 <HAL_RCC_OscConfig+0x26c>)
 8003faa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003fae:	6013      	str	r3, [r2, #0]
 8003fb0:	4b68      	ldr	r3, [pc, #416]	@ (8004154 <HAL_RCC_OscConfig+0x26c>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a67      	ldr	r2, [pc, #412]	@ (8004154 <HAL_RCC_OscConfig+0x26c>)
 8003fb6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003fba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d013      	beq.n	8003fec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fc4:	f7ff fa3a 	bl	800343c <HAL_GetTick>
 8003fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fca:	e008      	b.n	8003fde <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fcc:	f7ff fa36 	bl	800343c <HAL_GetTick>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	2b64      	cmp	r3, #100	@ 0x64
 8003fd8:	d901      	bls.n	8003fde <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	e200      	b.n	80043e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fde:	4b5d      	ldr	r3, [pc, #372]	@ (8004154 <HAL_RCC_OscConfig+0x26c>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d0f0      	beq.n	8003fcc <HAL_RCC_OscConfig+0xe4>
 8003fea:	e014      	b.n	8004016 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fec:	f7ff fa26 	bl	800343c <HAL_GetTick>
 8003ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ff2:	e008      	b.n	8004006 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ff4:	f7ff fa22 	bl	800343c <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	2b64      	cmp	r3, #100	@ 0x64
 8004000:	d901      	bls.n	8004006 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e1ec      	b.n	80043e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004006:	4b53      	ldr	r3, [pc, #332]	@ (8004154 <HAL_RCC_OscConfig+0x26c>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800400e:	2b00      	cmp	r3, #0
 8004010:	d1f0      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x10c>
 8004012:	e000      	b.n	8004016 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004014:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0302 	and.w	r3, r3, #2
 800401e:	2b00      	cmp	r3, #0
 8004020:	d063      	beq.n	80040ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004022:	4b4c      	ldr	r3, [pc, #304]	@ (8004154 <HAL_RCC_OscConfig+0x26c>)
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	f003 030c 	and.w	r3, r3, #12
 800402a:	2b00      	cmp	r3, #0
 800402c:	d00b      	beq.n	8004046 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800402e:	4b49      	ldr	r3, [pc, #292]	@ (8004154 <HAL_RCC_OscConfig+0x26c>)
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	f003 030c 	and.w	r3, r3, #12
 8004036:	2b08      	cmp	r3, #8
 8004038:	d11c      	bne.n	8004074 <HAL_RCC_OscConfig+0x18c>
 800403a:	4b46      	ldr	r3, [pc, #280]	@ (8004154 <HAL_RCC_OscConfig+0x26c>)
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d116      	bne.n	8004074 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004046:	4b43      	ldr	r3, [pc, #268]	@ (8004154 <HAL_RCC_OscConfig+0x26c>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 0302 	and.w	r3, r3, #2
 800404e:	2b00      	cmp	r3, #0
 8004050:	d005      	beq.n	800405e <HAL_RCC_OscConfig+0x176>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	691b      	ldr	r3, [r3, #16]
 8004056:	2b01      	cmp	r3, #1
 8004058:	d001      	beq.n	800405e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e1c0      	b.n	80043e0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800405e:	4b3d      	ldr	r3, [pc, #244]	@ (8004154 <HAL_RCC_OscConfig+0x26c>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	695b      	ldr	r3, [r3, #20]
 800406a:	00db      	lsls	r3, r3, #3
 800406c:	4939      	ldr	r1, [pc, #228]	@ (8004154 <HAL_RCC_OscConfig+0x26c>)
 800406e:	4313      	orrs	r3, r2
 8004070:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004072:	e03a      	b.n	80040ea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	691b      	ldr	r3, [r3, #16]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d020      	beq.n	80040be <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800407c:	4b36      	ldr	r3, [pc, #216]	@ (8004158 <HAL_RCC_OscConfig+0x270>)
 800407e:	2201      	movs	r2, #1
 8004080:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004082:	f7ff f9db 	bl	800343c <HAL_GetTick>
 8004086:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004088:	e008      	b.n	800409c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800408a:	f7ff f9d7 	bl	800343c <HAL_GetTick>
 800408e:	4602      	mov	r2, r0
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	1ad3      	subs	r3, r2, r3
 8004094:	2b02      	cmp	r3, #2
 8004096:	d901      	bls.n	800409c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004098:	2303      	movs	r3, #3
 800409a:	e1a1      	b.n	80043e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800409c:	4b2d      	ldr	r3, [pc, #180]	@ (8004154 <HAL_RCC_OscConfig+0x26c>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 0302 	and.w	r3, r3, #2
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d0f0      	beq.n	800408a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040a8:	4b2a      	ldr	r3, [pc, #168]	@ (8004154 <HAL_RCC_OscConfig+0x26c>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	695b      	ldr	r3, [r3, #20]
 80040b4:	00db      	lsls	r3, r3, #3
 80040b6:	4927      	ldr	r1, [pc, #156]	@ (8004154 <HAL_RCC_OscConfig+0x26c>)
 80040b8:	4313      	orrs	r3, r2
 80040ba:	600b      	str	r3, [r1, #0]
 80040bc:	e015      	b.n	80040ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040be:	4b26      	ldr	r3, [pc, #152]	@ (8004158 <HAL_RCC_OscConfig+0x270>)
 80040c0:	2200      	movs	r2, #0
 80040c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040c4:	f7ff f9ba 	bl	800343c <HAL_GetTick>
 80040c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040ca:	e008      	b.n	80040de <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040cc:	f7ff f9b6 	bl	800343c <HAL_GetTick>
 80040d0:	4602      	mov	r2, r0
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	2b02      	cmp	r3, #2
 80040d8:	d901      	bls.n	80040de <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e180      	b.n	80043e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040de:	4b1d      	ldr	r3, [pc, #116]	@ (8004154 <HAL_RCC_OscConfig+0x26c>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 0302 	and.w	r3, r3, #2
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d1f0      	bne.n	80040cc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 0308 	and.w	r3, r3, #8
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d03a      	beq.n	800416c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	699b      	ldr	r3, [r3, #24]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d019      	beq.n	8004132 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040fe:	4b17      	ldr	r3, [pc, #92]	@ (800415c <HAL_RCC_OscConfig+0x274>)
 8004100:	2201      	movs	r2, #1
 8004102:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004104:	f7ff f99a 	bl	800343c <HAL_GetTick>
 8004108:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800410a:	e008      	b.n	800411e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800410c:	f7ff f996 	bl	800343c <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	2b02      	cmp	r3, #2
 8004118:	d901      	bls.n	800411e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	e160      	b.n	80043e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800411e:	4b0d      	ldr	r3, [pc, #52]	@ (8004154 <HAL_RCC_OscConfig+0x26c>)
 8004120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004122:	f003 0302 	and.w	r3, r3, #2
 8004126:	2b00      	cmp	r3, #0
 8004128:	d0f0      	beq.n	800410c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800412a:	2001      	movs	r0, #1
 800412c:	f000 face 	bl	80046cc <RCC_Delay>
 8004130:	e01c      	b.n	800416c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004132:	4b0a      	ldr	r3, [pc, #40]	@ (800415c <HAL_RCC_OscConfig+0x274>)
 8004134:	2200      	movs	r2, #0
 8004136:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004138:	f7ff f980 	bl	800343c <HAL_GetTick>
 800413c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800413e:	e00f      	b.n	8004160 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004140:	f7ff f97c 	bl	800343c <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	2b02      	cmp	r3, #2
 800414c:	d908      	bls.n	8004160 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e146      	b.n	80043e0 <HAL_RCC_OscConfig+0x4f8>
 8004152:	bf00      	nop
 8004154:	40021000 	.word	0x40021000
 8004158:	42420000 	.word	0x42420000
 800415c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004160:	4b92      	ldr	r3, [pc, #584]	@ (80043ac <HAL_RCC_OscConfig+0x4c4>)
 8004162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004164:	f003 0302 	and.w	r3, r3, #2
 8004168:	2b00      	cmp	r3, #0
 800416a:	d1e9      	bne.n	8004140 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0304 	and.w	r3, r3, #4
 8004174:	2b00      	cmp	r3, #0
 8004176:	f000 80a6 	beq.w	80042c6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800417a:	2300      	movs	r3, #0
 800417c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800417e:	4b8b      	ldr	r3, [pc, #556]	@ (80043ac <HAL_RCC_OscConfig+0x4c4>)
 8004180:	69db      	ldr	r3, [r3, #28]
 8004182:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d10d      	bne.n	80041a6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800418a:	4b88      	ldr	r3, [pc, #544]	@ (80043ac <HAL_RCC_OscConfig+0x4c4>)
 800418c:	69db      	ldr	r3, [r3, #28]
 800418e:	4a87      	ldr	r2, [pc, #540]	@ (80043ac <HAL_RCC_OscConfig+0x4c4>)
 8004190:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004194:	61d3      	str	r3, [r2, #28]
 8004196:	4b85      	ldr	r3, [pc, #532]	@ (80043ac <HAL_RCC_OscConfig+0x4c4>)
 8004198:	69db      	ldr	r3, [r3, #28]
 800419a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800419e:	60bb      	str	r3, [r7, #8]
 80041a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041a2:	2301      	movs	r3, #1
 80041a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041a6:	4b82      	ldr	r3, [pc, #520]	@ (80043b0 <HAL_RCC_OscConfig+0x4c8>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d118      	bne.n	80041e4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041b2:	4b7f      	ldr	r3, [pc, #508]	@ (80043b0 <HAL_RCC_OscConfig+0x4c8>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a7e      	ldr	r2, [pc, #504]	@ (80043b0 <HAL_RCC_OscConfig+0x4c8>)
 80041b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041be:	f7ff f93d 	bl	800343c <HAL_GetTick>
 80041c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041c4:	e008      	b.n	80041d8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041c6:	f7ff f939 	bl	800343c <HAL_GetTick>
 80041ca:	4602      	mov	r2, r0
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	1ad3      	subs	r3, r2, r3
 80041d0:	2b64      	cmp	r3, #100	@ 0x64
 80041d2:	d901      	bls.n	80041d8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	e103      	b.n	80043e0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041d8:	4b75      	ldr	r3, [pc, #468]	@ (80043b0 <HAL_RCC_OscConfig+0x4c8>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d0f0      	beq.n	80041c6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	68db      	ldr	r3, [r3, #12]
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d106      	bne.n	80041fa <HAL_RCC_OscConfig+0x312>
 80041ec:	4b6f      	ldr	r3, [pc, #444]	@ (80043ac <HAL_RCC_OscConfig+0x4c4>)
 80041ee:	6a1b      	ldr	r3, [r3, #32]
 80041f0:	4a6e      	ldr	r2, [pc, #440]	@ (80043ac <HAL_RCC_OscConfig+0x4c4>)
 80041f2:	f043 0301 	orr.w	r3, r3, #1
 80041f6:	6213      	str	r3, [r2, #32]
 80041f8:	e02d      	b.n	8004256 <HAL_RCC_OscConfig+0x36e>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d10c      	bne.n	800421c <HAL_RCC_OscConfig+0x334>
 8004202:	4b6a      	ldr	r3, [pc, #424]	@ (80043ac <HAL_RCC_OscConfig+0x4c4>)
 8004204:	6a1b      	ldr	r3, [r3, #32]
 8004206:	4a69      	ldr	r2, [pc, #420]	@ (80043ac <HAL_RCC_OscConfig+0x4c4>)
 8004208:	f023 0301 	bic.w	r3, r3, #1
 800420c:	6213      	str	r3, [r2, #32]
 800420e:	4b67      	ldr	r3, [pc, #412]	@ (80043ac <HAL_RCC_OscConfig+0x4c4>)
 8004210:	6a1b      	ldr	r3, [r3, #32]
 8004212:	4a66      	ldr	r2, [pc, #408]	@ (80043ac <HAL_RCC_OscConfig+0x4c4>)
 8004214:	f023 0304 	bic.w	r3, r3, #4
 8004218:	6213      	str	r3, [r2, #32]
 800421a:	e01c      	b.n	8004256 <HAL_RCC_OscConfig+0x36e>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	2b05      	cmp	r3, #5
 8004222:	d10c      	bne.n	800423e <HAL_RCC_OscConfig+0x356>
 8004224:	4b61      	ldr	r3, [pc, #388]	@ (80043ac <HAL_RCC_OscConfig+0x4c4>)
 8004226:	6a1b      	ldr	r3, [r3, #32]
 8004228:	4a60      	ldr	r2, [pc, #384]	@ (80043ac <HAL_RCC_OscConfig+0x4c4>)
 800422a:	f043 0304 	orr.w	r3, r3, #4
 800422e:	6213      	str	r3, [r2, #32]
 8004230:	4b5e      	ldr	r3, [pc, #376]	@ (80043ac <HAL_RCC_OscConfig+0x4c4>)
 8004232:	6a1b      	ldr	r3, [r3, #32]
 8004234:	4a5d      	ldr	r2, [pc, #372]	@ (80043ac <HAL_RCC_OscConfig+0x4c4>)
 8004236:	f043 0301 	orr.w	r3, r3, #1
 800423a:	6213      	str	r3, [r2, #32]
 800423c:	e00b      	b.n	8004256 <HAL_RCC_OscConfig+0x36e>
 800423e:	4b5b      	ldr	r3, [pc, #364]	@ (80043ac <HAL_RCC_OscConfig+0x4c4>)
 8004240:	6a1b      	ldr	r3, [r3, #32]
 8004242:	4a5a      	ldr	r2, [pc, #360]	@ (80043ac <HAL_RCC_OscConfig+0x4c4>)
 8004244:	f023 0301 	bic.w	r3, r3, #1
 8004248:	6213      	str	r3, [r2, #32]
 800424a:	4b58      	ldr	r3, [pc, #352]	@ (80043ac <HAL_RCC_OscConfig+0x4c4>)
 800424c:	6a1b      	ldr	r3, [r3, #32]
 800424e:	4a57      	ldr	r2, [pc, #348]	@ (80043ac <HAL_RCC_OscConfig+0x4c4>)
 8004250:	f023 0304 	bic.w	r3, r3, #4
 8004254:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d015      	beq.n	800428a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800425e:	f7ff f8ed 	bl	800343c <HAL_GetTick>
 8004262:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004264:	e00a      	b.n	800427c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004266:	f7ff f8e9 	bl	800343c <HAL_GetTick>
 800426a:	4602      	mov	r2, r0
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004274:	4293      	cmp	r3, r2
 8004276:	d901      	bls.n	800427c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004278:	2303      	movs	r3, #3
 800427a:	e0b1      	b.n	80043e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800427c:	4b4b      	ldr	r3, [pc, #300]	@ (80043ac <HAL_RCC_OscConfig+0x4c4>)
 800427e:	6a1b      	ldr	r3, [r3, #32]
 8004280:	f003 0302 	and.w	r3, r3, #2
 8004284:	2b00      	cmp	r3, #0
 8004286:	d0ee      	beq.n	8004266 <HAL_RCC_OscConfig+0x37e>
 8004288:	e014      	b.n	80042b4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800428a:	f7ff f8d7 	bl	800343c <HAL_GetTick>
 800428e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004290:	e00a      	b.n	80042a8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004292:	f7ff f8d3 	bl	800343c <HAL_GetTick>
 8004296:	4602      	mov	r2, r0
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d901      	bls.n	80042a8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80042a4:	2303      	movs	r3, #3
 80042a6:	e09b      	b.n	80043e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042a8:	4b40      	ldr	r3, [pc, #256]	@ (80043ac <HAL_RCC_OscConfig+0x4c4>)
 80042aa:	6a1b      	ldr	r3, [r3, #32]
 80042ac:	f003 0302 	and.w	r3, r3, #2
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d1ee      	bne.n	8004292 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80042b4:	7dfb      	ldrb	r3, [r7, #23]
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d105      	bne.n	80042c6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042ba:	4b3c      	ldr	r3, [pc, #240]	@ (80043ac <HAL_RCC_OscConfig+0x4c4>)
 80042bc:	69db      	ldr	r3, [r3, #28]
 80042be:	4a3b      	ldr	r2, [pc, #236]	@ (80043ac <HAL_RCC_OscConfig+0x4c4>)
 80042c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80042c4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	69db      	ldr	r3, [r3, #28]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	f000 8087 	beq.w	80043de <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80042d0:	4b36      	ldr	r3, [pc, #216]	@ (80043ac <HAL_RCC_OscConfig+0x4c4>)
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	f003 030c 	and.w	r3, r3, #12
 80042d8:	2b08      	cmp	r3, #8
 80042da:	d061      	beq.n	80043a0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	69db      	ldr	r3, [r3, #28]
 80042e0:	2b02      	cmp	r3, #2
 80042e2:	d146      	bne.n	8004372 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042e4:	4b33      	ldr	r3, [pc, #204]	@ (80043b4 <HAL_RCC_OscConfig+0x4cc>)
 80042e6:	2200      	movs	r2, #0
 80042e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042ea:	f7ff f8a7 	bl	800343c <HAL_GetTick>
 80042ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042f0:	e008      	b.n	8004304 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042f2:	f7ff f8a3 	bl	800343c <HAL_GetTick>
 80042f6:	4602      	mov	r2, r0
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	1ad3      	subs	r3, r2, r3
 80042fc:	2b02      	cmp	r3, #2
 80042fe:	d901      	bls.n	8004304 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004300:	2303      	movs	r3, #3
 8004302:	e06d      	b.n	80043e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004304:	4b29      	ldr	r3, [pc, #164]	@ (80043ac <HAL_RCC_OscConfig+0x4c4>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800430c:	2b00      	cmp	r3, #0
 800430e:	d1f0      	bne.n	80042f2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6a1b      	ldr	r3, [r3, #32]
 8004314:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004318:	d108      	bne.n	800432c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800431a:	4b24      	ldr	r3, [pc, #144]	@ (80043ac <HAL_RCC_OscConfig+0x4c4>)
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	4921      	ldr	r1, [pc, #132]	@ (80043ac <HAL_RCC_OscConfig+0x4c4>)
 8004328:	4313      	orrs	r3, r2
 800432a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800432c:	4b1f      	ldr	r3, [pc, #124]	@ (80043ac <HAL_RCC_OscConfig+0x4c4>)
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6a19      	ldr	r1, [r3, #32]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800433c:	430b      	orrs	r3, r1
 800433e:	491b      	ldr	r1, [pc, #108]	@ (80043ac <HAL_RCC_OscConfig+0x4c4>)
 8004340:	4313      	orrs	r3, r2
 8004342:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004344:	4b1b      	ldr	r3, [pc, #108]	@ (80043b4 <HAL_RCC_OscConfig+0x4cc>)
 8004346:	2201      	movs	r2, #1
 8004348:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800434a:	f7ff f877 	bl	800343c <HAL_GetTick>
 800434e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004350:	e008      	b.n	8004364 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004352:	f7ff f873 	bl	800343c <HAL_GetTick>
 8004356:	4602      	mov	r2, r0
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	1ad3      	subs	r3, r2, r3
 800435c:	2b02      	cmp	r3, #2
 800435e:	d901      	bls.n	8004364 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004360:	2303      	movs	r3, #3
 8004362:	e03d      	b.n	80043e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004364:	4b11      	ldr	r3, [pc, #68]	@ (80043ac <HAL_RCC_OscConfig+0x4c4>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800436c:	2b00      	cmp	r3, #0
 800436e:	d0f0      	beq.n	8004352 <HAL_RCC_OscConfig+0x46a>
 8004370:	e035      	b.n	80043de <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004372:	4b10      	ldr	r3, [pc, #64]	@ (80043b4 <HAL_RCC_OscConfig+0x4cc>)
 8004374:	2200      	movs	r2, #0
 8004376:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004378:	f7ff f860 	bl	800343c <HAL_GetTick>
 800437c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800437e:	e008      	b.n	8004392 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004380:	f7ff f85c 	bl	800343c <HAL_GetTick>
 8004384:	4602      	mov	r2, r0
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	2b02      	cmp	r3, #2
 800438c:	d901      	bls.n	8004392 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e026      	b.n	80043e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004392:	4b06      	ldr	r3, [pc, #24]	@ (80043ac <HAL_RCC_OscConfig+0x4c4>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d1f0      	bne.n	8004380 <HAL_RCC_OscConfig+0x498>
 800439e:	e01e      	b.n	80043de <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	69db      	ldr	r3, [r3, #28]
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d107      	bne.n	80043b8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	e019      	b.n	80043e0 <HAL_RCC_OscConfig+0x4f8>
 80043ac:	40021000 	.word	0x40021000
 80043b0:	40007000 	.word	0x40007000
 80043b4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80043b8:	4b0b      	ldr	r3, [pc, #44]	@ (80043e8 <HAL_RCC_OscConfig+0x500>)
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6a1b      	ldr	r3, [r3, #32]
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d106      	bne.n	80043da <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d001      	beq.n	80043de <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e000      	b.n	80043e0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80043de:	2300      	movs	r3, #0
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3718      	adds	r7, #24
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	40021000 	.word	0x40021000

080043ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b084      	sub	sp, #16
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d101      	bne.n	8004400 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e0d0      	b.n	80045a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004400:	4b6a      	ldr	r3, [pc, #424]	@ (80045ac <HAL_RCC_ClockConfig+0x1c0>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 0307 	and.w	r3, r3, #7
 8004408:	683a      	ldr	r2, [r7, #0]
 800440a:	429a      	cmp	r2, r3
 800440c:	d910      	bls.n	8004430 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800440e:	4b67      	ldr	r3, [pc, #412]	@ (80045ac <HAL_RCC_ClockConfig+0x1c0>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f023 0207 	bic.w	r2, r3, #7
 8004416:	4965      	ldr	r1, [pc, #404]	@ (80045ac <HAL_RCC_ClockConfig+0x1c0>)
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	4313      	orrs	r3, r2
 800441c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800441e:	4b63      	ldr	r3, [pc, #396]	@ (80045ac <HAL_RCC_ClockConfig+0x1c0>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0307 	and.w	r3, r3, #7
 8004426:	683a      	ldr	r2, [r7, #0]
 8004428:	429a      	cmp	r2, r3
 800442a:	d001      	beq.n	8004430 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	e0b8      	b.n	80045a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 0302 	and.w	r3, r3, #2
 8004438:	2b00      	cmp	r3, #0
 800443a:	d020      	beq.n	800447e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 0304 	and.w	r3, r3, #4
 8004444:	2b00      	cmp	r3, #0
 8004446:	d005      	beq.n	8004454 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004448:	4b59      	ldr	r3, [pc, #356]	@ (80045b0 <HAL_RCC_ClockConfig+0x1c4>)
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	4a58      	ldr	r2, [pc, #352]	@ (80045b0 <HAL_RCC_ClockConfig+0x1c4>)
 800444e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004452:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 0308 	and.w	r3, r3, #8
 800445c:	2b00      	cmp	r3, #0
 800445e:	d005      	beq.n	800446c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004460:	4b53      	ldr	r3, [pc, #332]	@ (80045b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	4a52      	ldr	r2, [pc, #328]	@ (80045b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004466:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800446a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800446c:	4b50      	ldr	r3, [pc, #320]	@ (80045b0 <HAL_RCC_ClockConfig+0x1c4>)
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	494d      	ldr	r1, [pc, #308]	@ (80045b0 <HAL_RCC_ClockConfig+0x1c4>)
 800447a:	4313      	orrs	r3, r2
 800447c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0301 	and.w	r3, r3, #1
 8004486:	2b00      	cmp	r3, #0
 8004488:	d040      	beq.n	800450c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	2b01      	cmp	r3, #1
 8004490:	d107      	bne.n	80044a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004492:	4b47      	ldr	r3, [pc, #284]	@ (80045b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800449a:	2b00      	cmp	r3, #0
 800449c:	d115      	bne.n	80044ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e07f      	b.n	80045a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	2b02      	cmp	r3, #2
 80044a8:	d107      	bne.n	80044ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044aa:	4b41      	ldr	r3, [pc, #260]	@ (80045b0 <HAL_RCC_ClockConfig+0x1c4>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d109      	bne.n	80044ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e073      	b.n	80045a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044ba:	4b3d      	ldr	r3, [pc, #244]	@ (80045b0 <HAL_RCC_ClockConfig+0x1c4>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 0302 	and.w	r3, r3, #2
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d101      	bne.n	80044ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e06b      	b.n	80045a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044ca:	4b39      	ldr	r3, [pc, #228]	@ (80045b0 <HAL_RCC_ClockConfig+0x1c4>)
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	f023 0203 	bic.w	r2, r3, #3
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	4936      	ldr	r1, [pc, #216]	@ (80045b0 <HAL_RCC_ClockConfig+0x1c4>)
 80044d8:	4313      	orrs	r3, r2
 80044da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044dc:	f7fe ffae 	bl	800343c <HAL_GetTick>
 80044e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044e2:	e00a      	b.n	80044fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044e4:	f7fe ffaa 	bl	800343c <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d901      	bls.n	80044fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80044f6:	2303      	movs	r3, #3
 80044f8:	e053      	b.n	80045a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044fa:	4b2d      	ldr	r3, [pc, #180]	@ (80045b0 <HAL_RCC_ClockConfig+0x1c4>)
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	f003 020c 	and.w	r2, r3, #12
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	429a      	cmp	r2, r3
 800450a:	d1eb      	bne.n	80044e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800450c:	4b27      	ldr	r3, [pc, #156]	@ (80045ac <HAL_RCC_ClockConfig+0x1c0>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 0307 	and.w	r3, r3, #7
 8004514:	683a      	ldr	r2, [r7, #0]
 8004516:	429a      	cmp	r2, r3
 8004518:	d210      	bcs.n	800453c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800451a:	4b24      	ldr	r3, [pc, #144]	@ (80045ac <HAL_RCC_ClockConfig+0x1c0>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f023 0207 	bic.w	r2, r3, #7
 8004522:	4922      	ldr	r1, [pc, #136]	@ (80045ac <HAL_RCC_ClockConfig+0x1c0>)
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	4313      	orrs	r3, r2
 8004528:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800452a:	4b20      	ldr	r3, [pc, #128]	@ (80045ac <HAL_RCC_ClockConfig+0x1c0>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0307 	and.w	r3, r3, #7
 8004532:	683a      	ldr	r2, [r7, #0]
 8004534:	429a      	cmp	r2, r3
 8004536:	d001      	beq.n	800453c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	e032      	b.n	80045a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 0304 	and.w	r3, r3, #4
 8004544:	2b00      	cmp	r3, #0
 8004546:	d008      	beq.n	800455a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004548:	4b19      	ldr	r3, [pc, #100]	@ (80045b0 <HAL_RCC_ClockConfig+0x1c4>)
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	4916      	ldr	r1, [pc, #88]	@ (80045b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004556:	4313      	orrs	r3, r2
 8004558:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 0308 	and.w	r3, r3, #8
 8004562:	2b00      	cmp	r3, #0
 8004564:	d009      	beq.n	800457a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004566:	4b12      	ldr	r3, [pc, #72]	@ (80045b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	691b      	ldr	r3, [r3, #16]
 8004572:	00db      	lsls	r3, r3, #3
 8004574:	490e      	ldr	r1, [pc, #56]	@ (80045b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004576:	4313      	orrs	r3, r2
 8004578:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800457a:	f000 f821 	bl	80045c0 <HAL_RCC_GetSysClockFreq>
 800457e:	4602      	mov	r2, r0
 8004580:	4b0b      	ldr	r3, [pc, #44]	@ (80045b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	091b      	lsrs	r3, r3, #4
 8004586:	f003 030f 	and.w	r3, r3, #15
 800458a:	490a      	ldr	r1, [pc, #40]	@ (80045b4 <HAL_RCC_ClockConfig+0x1c8>)
 800458c:	5ccb      	ldrb	r3, [r1, r3]
 800458e:	fa22 f303 	lsr.w	r3, r2, r3
 8004592:	4a09      	ldr	r2, [pc, #36]	@ (80045b8 <HAL_RCC_ClockConfig+0x1cc>)
 8004594:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004596:	4b09      	ldr	r3, [pc, #36]	@ (80045bc <HAL_RCC_ClockConfig+0x1d0>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4618      	mov	r0, r3
 800459c:	f7fe ff0c 	bl	80033b8 <HAL_InitTick>

  return HAL_OK;
 80045a0:	2300      	movs	r3, #0
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3710      	adds	r7, #16
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	bf00      	nop
 80045ac:	40022000 	.word	0x40022000
 80045b0:	40021000 	.word	0x40021000
 80045b4:	080071c8 	.word	0x080071c8
 80045b8:	20000004 	.word	0x20000004
 80045bc:	20000008 	.word	0x20000008

080045c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b087      	sub	sp, #28
 80045c4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80045c6:	2300      	movs	r3, #0
 80045c8:	60fb      	str	r3, [r7, #12]
 80045ca:	2300      	movs	r3, #0
 80045cc:	60bb      	str	r3, [r7, #8]
 80045ce:	2300      	movs	r3, #0
 80045d0:	617b      	str	r3, [r7, #20]
 80045d2:	2300      	movs	r3, #0
 80045d4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80045d6:	2300      	movs	r3, #0
 80045d8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80045da:	4b1e      	ldr	r3, [pc, #120]	@ (8004654 <HAL_RCC_GetSysClockFreq+0x94>)
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f003 030c 	and.w	r3, r3, #12
 80045e6:	2b04      	cmp	r3, #4
 80045e8:	d002      	beq.n	80045f0 <HAL_RCC_GetSysClockFreq+0x30>
 80045ea:	2b08      	cmp	r3, #8
 80045ec:	d003      	beq.n	80045f6 <HAL_RCC_GetSysClockFreq+0x36>
 80045ee:	e027      	b.n	8004640 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80045f0:	4b19      	ldr	r3, [pc, #100]	@ (8004658 <HAL_RCC_GetSysClockFreq+0x98>)
 80045f2:	613b      	str	r3, [r7, #16]
      break;
 80045f4:	e027      	b.n	8004646 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	0c9b      	lsrs	r3, r3, #18
 80045fa:	f003 030f 	and.w	r3, r3, #15
 80045fe:	4a17      	ldr	r2, [pc, #92]	@ (800465c <HAL_RCC_GetSysClockFreq+0x9c>)
 8004600:	5cd3      	ldrb	r3, [r2, r3]
 8004602:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800460a:	2b00      	cmp	r3, #0
 800460c:	d010      	beq.n	8004630 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800460e:	4b11      	ldr	r3, [pc, #68]	@ (8004654 <HAL_RCC_GetSysClockFreq+0x94>)
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	0c5b      	lsrs	r3, r3, #17
 8004614:	f003 0301 	and.w	r3, r3, #1
 8004618:	4a11      	ldr	r2, [pc, #68]	@ (8004660 <HAL_RCC_GetSysClockFreq+0xa0>)
 800461a:	5cd3      	ldrb	r3, [r2, r3]
 800461c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	4a0d      	ldr	r2, [pc, #52]	@ (8004658 <HAL_RCC_GetSysClockFreq+0x98>)
 8004622:	fb03 f202 	mul.w	r2, r3, r2
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	fbb2 f3f3 	udiv	r3, r2, r3
 800462c:	617b      	str	r3, [r7, #20]
 800462e:	e004      	b.n	800463a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	4a0c      	ldr	r2, [pc, #48]	@ (8004664 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004634:	fb02 f303 	mul.w	r3, r2, r3
 8004638:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	613b      	str	r3, [r7, #16]
      break;
 800463e:	e002      	b.n	8004646 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004640:	4b05      	ldr	r3, [pc, #20]	@ (8004658 <HAL_RCC_GetSysClockFreq+0x98>)
 8004642:	613b      	str	r3, [r7, #16]
      break;
 8004644:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004646:	693b      	ldr	r3, [r7, #16]
}
 8004648:	4618      	mov	r0, r3
 800464a:	371c      	adds	r7, #28
 800464c:	46bd      	mov	sp, r7
 800464e:	bc80      	pop	{r7}
 8004650:	4770      	bx	lr
 8004652:	bf00      	nop
 8004654:	40021000 	.word	0x40021000
 8004658:	007a1200 	.word	0x007a1200
 800465c:	080071e0 	.word	0x080071e0
 8004660:	080071f0 	.word	0x080071f0
 8004664:	003d0900 	.word	0x003d0900

08004668 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004668:	b480      	push	{r7}
 800466a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800466c:	4b02      	ldr	r3, [pc, #8]	@ (8004678 <HAL_RCC_GetHCLKFreq+0x10>)
 800466e:	681b      	ldr	r3, [r3, #0]
}
 8004670:	4618      	mov	r0, r3
 8004672:	46bd      	mov	sp, r7
 8004674:	bc80      	pop	{r7}
 8004676:	4770      	bx	lr
 8004678:	20000004 	.word	0x20000004

0800467c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004680:	f7ff fff2 	bl	8004668 <HAL_RCC_GetHCLKFreq>
 8004684:	4602      	mov	r2, r0
 8004686:	4b05      	ldr	r3, [pc, #20]	@ (800469c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	0a1b      	lsrs	r3, r3, #8
 800468c:	f003 0307 	and.w	r3, r3, #7
 8004690:	4903      	ldr	r1, [pc, #12]	@ (80046a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004692:	5ccb      	ldrb	r3, [r1, r3]
 8004694:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004698:	4618      	mov	r0, r3
 800469a:	bd80      	pop	{r7, pc}
 800469c:	40021000 	.word	0x40021000
 80046a0:	080071d8 	.word	0x080071d8

080046a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80046a8:	f7ff ffde 	bl	8004668 <HAL_RCC_GetHCLKFreq>
 80046ac:	4602      	mov	r2, r0
 80046ae:	4b05      	ldr	r3, [pc, #20]	@ (80046c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	0adb      	lsrs	r3, r3, #11
 80046b4:	f003 0307 	and.w	r3, r3, #7
 80046b8:	4903      	ldr	r1, [pc, #12]	@ (80046c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80046ba:	5ccb      	ldrb	r3, [r1, r3]
 80046bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	bd80      	pop	{r7, pc}
 80046c4:	40021000 	.word	0x40021000
 80046c8:	080071d8 	.word	0x080071d8

080046cc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b085      	sub	sp, #20
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80046d4:	4b0a      	ldr	r3, [pc, #40]	@ (8004700 <RCC_Delay+0x34>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a0a      	ldr	r2, [pc, #40]	@ (8004704 <RCC_Delay+0x38>)
 80046da:	fba2 2303 	umull	r2, r3, r2, r3
 80046de:	0a5b      	lsrs	r3, r3, #9
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	fb02 f303 	mul.w	r3, r2, r3
 80046e6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80046e8:	bf00      	nop
  }
  while (Delay --);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	1e5a      	subs	r2, r3, #1
 80046ee:	60fa      	str	r2, [r7, #12]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d1f9      	bne.n	80046e8 <RCC_Delay+0x1c>
}
 80046f4:	bf00      	nop
 80046f6:	bf00      	nop
 80046f8:	3714      	adds	r7, #20
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bc80      	pop	{r7}
 80046fe:	4770      	bx	lr
 8004700:	20000004 	.word	0x20000004
 8004704:	10624dd3 	.word	0x10624dd3

08004708 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b082      	sub	sp, #8
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d101      	bne.n	800471a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	e041      	b.n	800479e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004720:	b2db      	uxtb	r3, r3
 8004722:	2b00      	cmp	r3, #0
 8004724:	d106      	bne.n	8004734 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f7fe fc0a 	bl	8002f48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2202      	movs	r2, #2
 8004738:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	3304      	adds	r3, #4
 8004744:	4619      	mov	r1, r3
 8004746:	4610      	mov	r0, r2
 8004748:	f000 fdd6 	bl	80052f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2201      	movs	r2, #1
 8004750:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2201      	movs	r2, #1
 8004768:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2201      	movs	r2, #1
 8004780:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800479c:	2300      	movs	r3, #0
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3708      	adds	r7, #8
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}

080047a6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80047a6:	b580      	push	{r7, lr}
 80047a8:	b082      	sub	sp, #8
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d101      	bne.n	80047b8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e041      	b.n	800483c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d106      	bne.n	80047d2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f000 f839 	bl	8004844 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2202      	movs	r2, #2
 80047d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	3304      	adds	r3, #4
 80047e2:	4619      	mov	r1, r3
 80047e4:	4610      	mov	r0, r2
 80047e6:	f000 fd87 	bl	80052f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2201      	movs	r2, #1
 80047ee:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2201      	movs	r2, #1
 80047f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2201      	movs	r2, #1
 80047fe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2201      	movs	r2, #1
 8004806:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2201      	movs	r2, #1
 800480e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2201      	movs	r2, #1
 8004816:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2201      	movs	r2, #1
 800481e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2201      	movs	r2, #1
 8004826:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2201      	movs	r2, #1
 800482e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2201      	movs	r2, #1
 8004836:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800483a:	2300      	movs	r3, #0
}
 800483c:	4618      	mov	r0, r3
 800483e:	3708      	adds	r7, #8
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}

08004844 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004844:	b480      	push	{r7}
 8004846:	b083      	sub	sp, #12
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800484c:	bf00      	nop
 800484e:	370c      	adds	r7, #12
 8004850:	46bd      	mov	sp, r7
 8004852:	bc80      	pop	{r7}
 8004854:	4770      	bx	lr
	...

08004858 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d109      	bne.n	800487c <HAL_TIM_PWM_Start+0x24>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800486e:	b2db      	uxtb	r3, r3
 8004870:	2b01      	cmp	r3, #1
 8004872:	bf14      	ite	ne
 8004874:	2301      	movne	r3, #1
 8004876:	2300      	moveq	r3, #0
 8004878:	b2db      	uxtb	r3, r3
 800487a:	e022      	b.n	80048c2 <HAL_TIM_PWM_Start+0x6a>
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	2b04      	cmp	r3, #4
 8004880:	d109      	bne.n	8004896 <HAL_TIM_PWM_Start+0x3e>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004888:	b2db      	uxtb	r3, r3
 800488a:	2b01      	cmp	r3, #1
 800488c:	bf14      	ite	ne
 800488e:	2301      	movne	r3, #1
 8004890:	2300      	moveq	r3, #0
 8004892:	b2db      	uxtb	r3, r3
 8004894:	e015      	b.n	80048c2 <HAL_TIM_PWM_Start+0x6a>
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	2b08      	cmp	r3, #8
 800489a:	d109      	bne.n	80048b0 <HAL_TIM_PWM_Start+0x58>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	bf14      	ite	ne
 80048a8:	2301      	movne	r3, #1
 80048aa:	2300      	moveq	r3, #0
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	e008      	b.n	80048c2 <HAL_TIM_PWM_Start+0x6a>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	bf14      	ite	ne
 80048bc:	2301      	movne	r3, #1
 80048be:	2300      	moveq	r3, #0
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d001      	beq.n	80048ca <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e05e      	b.n	8004988 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d104      	bne.n	80048da <HAL_TIM_PWM_Start+0x82>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2202      	movs	r2, #2
 80048d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80048d8:	e013      	b.n	8004902 <HAL_TIM_PWM_Start+0xaa>
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	2b04      	cmp	r3, #4
 80048de:	d104      	bne.n	80048ea <HAL_TIM_PWM_Start+0x92>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2202      	movs	r2, #2
 80048e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80048e8:	e00b      	b.n	8004902 <HAL_TIM_PWM_Start+0xaa>
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	2b08      	cmp	r3, #8
 80048ee:	d104      	bne.n	80048fa <HAL_TIM_PWM_Start+0xa2>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2202      	movs	r2, #2
 80048f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80048f8:	e003      	b.n	8004902 <HAL_TIM_PWM_Start+0xaa>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2202      	movs	r2, #2
 80048fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	2201      	movs	r2, #1
 8004908:	6839      	ldr	r1, [r7, #0]
 800490a:	4618      	mov	r0, r3
 800490c:	f001 f881 	bl	8005a12 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a1e      	ldr	r2, [pc, #120]	@ (8004990 <HAL_TIM_PWM_Start+0x138>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d107      	bne.n	800492a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004928:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a18      	ldr	r2, [pc, #96]	@ (8004990 <HAL_TIM_PWM_Start+0x138>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d00e      	beq.n	8004952 <HAL_TIM_PWM_Start+0xfa>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800493c:	d009      	beq.n	8004952 <HAL_TIM_PWM_Start+0xfa>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a14      	ldr	r2, [pc, #80]	@ (8004994 <HAL_TIM_PWM_Start+0x13c>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d004      	beq.n	8004952 <HAL_TIM_PWM_Start+0xfa>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a12      	ldr	r2, [pc, #72]	@ (8004998 <HAL_TIM_PWM_Start+0x140>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d111      	bne.n	8004976 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	f003 0307 	and.w	r3, r3, #7
 800495c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2b06      	cmp	r3, #6
 8004962:	d010      	beq.n	8004986 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f042 0201 	orr.w	r2, r2, #1
 8004972:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004974:	e007      	b.n	8004986 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f042 0201 	orr.w	r2, r2, #1
 8004984:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004986:	2300      	movs	r3, #0
}
 8004988:	4618      	mov	r0, r3
 800498a:	3710      	adds	r7, #16
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}
 8004990:	40012c00 	.word	0x40012c00
 8004994:	40000400 	.word	0x40000400
 8004998:	40000800 	.word	0x40000800

0800499c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b082      	sub	sp, #8
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d101      	bne.n	80049ae <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e041      	b.n	8004a32 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d106      	bne.n	80049c8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f7fe fade 	bl	8002f84 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2202      	movs	r2, #2
 80049cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	3304      	adds	r3, #4
 80049d8:	4619      	mov	r1, r3
 80049da:	4610      	mov	r0, r2
 80049dc:	f000 fc8c 	bl	80052f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2201      	movs	r2, #1
 80049ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2201      	movs	r2, #1
 80049fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2201      	movs	r2, #1
 8004a04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2201      	movs	r2, #1
 8004a14:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2201      	movs	r2, #1
 8004a24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004a30:	2300      	movs	r3, #0
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3708      	adds	r7, #8
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
	...

08004a3c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b084      	sub	sp, #16
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a46:	2300      	movs	r3, #0
 8004a48:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d104      	bne.n	8004a5a <HAL_TIM_IC_Start_IT+0x1e>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	e013      	b.n	8004a82 <HAL_TIM_IC_Start_IT+0x46>
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	2b04      	cmp	r3, #4
 8004a5e:	d104      	bne.n	8004a6a <HAL_TIM_IC_Start_IT+0x2e>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	e00b      	b.n	8004a82 <HAL_TIM_IC_Start_IT+0x46>
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	2b08      	cmp	r3, #8
 8004a6e:	d104      	bne.n	8004a7a <HAL_TIM_IC_Start_IT+0x3e>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	e003      	b.n	8004a82 <HAL_TIM_IC_Start_IT+0x46>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d104      	bne.n	8004a94 <HAL_TIM_IC_Start_IT+0x58>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	e013      	b.n	8004abc <HAL_TIM_IC_Start_IT+0x80>
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	2b04      	cmp	r3, #4
 8004a98:	d104      	bne.n	8004aa4 <HAL_TIM_IC_Start_IT+0x68>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	e00b      	b.n	8004abc <HAL_TIM_IC_Start_IT+0x80>
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	2b08      	cmp	r3, #8
 8004aa8:	d104      	bne.n	8004ab4 <HAL_TIM_IC_Start_IT+0x78>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	e003      	b.n	8004abc <HAL_TIM_IC_Start_IT+0x80>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004abe:	7bbb      	ldrb	r3, [r7, #14]
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d102      	bne.n	8004aca <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004ac4:	7b7b      	ldrb	r3, [r7, #13]
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d001      	beq.n	8004ace <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e0b8      	b.n	8004c40 <HAL_TIM_IC_Start_IT+0x204>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d104      	bne.n	8004ade <HAL_TIM_IC_Start_IT+0xa2>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2202      	movs	r2, #2
 8004ad8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004adc:	e013      	b.n	8004b06 <HAL_TIM_IC_Start_IT+0xca>
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	2b04      	cmp	r3, #4
 8004ae2:	d104      	bne.n	8004aee <HAL_TIM_IC_Start_IT+0xb2>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2202      	movs	r2, #2
 8004ae8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004aec:	e00b      	b.n	8004b06 <HAL_TIM_IC_Start_IT+0xca>
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	2b08      	cmp	r3, #8
 8004af2:	d104      	bne.n	8004afe <HAL_TIM_IC_Start_IT+0xc2>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2202      	movs	r2, #2
 8004af8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004afc:	e003      	b.n	8004b06 <HAL_TIM_IC_Start_IT+0xca>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2202      	movs	r2, #2
 8004b02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d104      	bne.n	8004b16 <HAL_TIM_IC_Start_IT+0xda>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2202      	movs	r2, #2
 8004b10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004b14:	e013      	b.n	8004b3e <HAL_TIM_IC_Start_IT+0x102>
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	2b04      	cmp	r3, #4
 8004b1a:	d104      	bne.n	8004b26 <HAL_TIM_IC_Start_IT+0xea>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2202      	movs	r2, #2
 8004b20:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004b24:	e00b      	b.n	8004b3e <HAL_TIM_IC_Start_IT+0x102>
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	2b08      	cmp	r3, #8
 8004b2a:	d104      	bne.n	8004b36 <HAL_TIM_IC_Start_IT+0xfa>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2202      	movs	r2, #2
 8004b30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b34:	e003      	b.n	8004b3e <HAL_TIM_IC_Start_IT+0x102>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2202      	movs	r2, #2
 8004b3a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	2b0c      	cmp	r3, #12
 8004b42:	d841      	bhi.n	8004bc8 <HAL_TIM_IC_Start_IT+0x18c>
 8004b44:	a201      	add	r2, pc, #4	@ (adr r2, 8004b4c <HAL_TIM_IC_Start_IT+0x110>)
 8004b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b4a:	bf00      	nop
 8004b4c:	08004b81 	.word	0x08004b81
 8004b50:	08004bc9 	.word	0x08004bc9
 8004b54:	08004bc9 	.word	0x08004bc9
 8004b58:	08004bc9 	.word	0x08004bc9
 8004b5c:	08004b93 	.word	0x08004b93
 8004b60:	08004bc9 	.word	0x08004bc9
 8004b64:	08004bc9 	.word	0x08004bc9
 8004b68:	08004bc9 	.word	0x08004bc9
 8004b6c:	08004ba5 	.word	0x08004ba5
 8004b70:	08004bc9 	.word	0x08004bc9
 8004b74:	08004bc9 	.word	0x08004bc9
 8004b78:	08004bc9 	.word	0x08004bc9
 8004b7c:	08004bb7 	.word	0x08004bb7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	68da      	ldr	r2, [r3, #12]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f042 0202 	orr.w	r2, r2, #2
 8004b8e:	60da      	str	r2, [r3, #12]
      break;
 8004b90:	e01d      	b.n	8004bce <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	68da      	ldr	r2, [r3, #12]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f042 0204 	orr.w	r2, r2, #4
 8004ba0:	60da      	str	r2, [r3, #12]
      break;
 8004ba2:	e014      	b.n	8004bce <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	68da      	ldr	r2, [r3, #12]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f042 0208 	orr.w	r2, r2, #8
 8004bb2:	60da      	str	r2, [r3, #12]
      break;
 8004bb4:	e00b      	b.n	8004bce <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	68da      	ldr	r2, [r3, #12]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f042 0210 	orr.w	r2, r2, #16
 8004bc4:	60da      	str	r2, [r3, #12]
      break;
 8004bc6:	e002      	b.n	8004bce <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	73fb      	strb	r3, [r7, #15]
      break;
 8004bcc:	bf00      	nop
  }

  if (status == HAL_OK)
 8004bce:	7bfb      	ldrb	r3, [r7, #15]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d134      	bne.n	8004c3e <HAL_TIM_IC_Start_IT+0x202>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	2201      	movs	r2, #1
 8004bda:	6839      	ldr	r1, [r7, #0]
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f000 ff18 	bl	8005a12 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a18      	ldr	r2, [pc, #96]	@ (8004c48 <HAL_TIM_IC_Start_IT+0x20c>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d00e      	beq.n	8004c0a <HAL_TIM_IC_Start_IT+0x1ce>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bf4:	d009      	beq.n	8004c0a <HAL_TIM_IC_Start_IT+0x1ce>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a14      	ldr	r2, [pc, #80]	@ (8004c4c <HAL_TIM_IC_Start_IT+0x210>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d004      	beq.n	8004c0a <HAL_TIM_IC_Start_IT+0x1ce>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a12      	ldr	r2, [pc, #72]	@ (8004c50 <HAL_TIM_IC_Start_IT+0x214>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d111      	bne.n	8004c2e <HAL_TIM_IC_Start_IT+0x1f2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	f003 0307 	and.w	r3, r3, #7
 8004c14:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	2b06      	cmp	r3, #6
 8004c1a:	d010      	beq.n	8004c3e <HAL_TIM_IC_Start_IT+0x202>
      {
        __HAL_TIM_ENABLE(htim);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f042 0201 	orr.w	r2, r2, #1
 8004c2a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c2c:	e007      	b.n	8004c3e <HAL_TIM_IC_Start_IT+0x202>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f042 0201 	orr.w	r2, r2, #1
 8004c3c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004c3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3710      	adds	r7, #16
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}
 8004c48:	40012c00 	.word	0x40012c00
 8004c4c:	40000400 	.word	0x40000400
 8004c50:	40000800 	.word	0x40000800

08004c54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b082      	sub	sp, #8
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	691b      	ldr	r3, [r3, #16]
 8004c62:	f003 0302 	and.w	r3, r3, #2
 8004c66:	2b02      	cmp	r3, #2
 8004c68:	d122      	bne.n	8004cb0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	f003 0302 	and.w	r3, r3, #2
 8004c74:	2b02      	cmp	r3, #2
 8004c76:	d11b      	bne.n	8004cb0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f06f 0202 	mvn.w	r2, #2
 8004c80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2201      	movs	r2, #1
 8004c86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	699b      	ldr	r3, [r3, #24]
 8004c8e:	f003 0303 	and.w	r3, r3, #3
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d003      	beq.n	8004c9e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f7fd f9c0 	bl	800201c <HAL_TIM_IC_CaptureCallback>
 8004c9c:	e005      	b.n	8004caa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 fb0e 	bl	80052c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f000 fb14 	bl	80052d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	691b      	ldr	r3, [r3, #16]
 8004cb6:	f003 0304 	and.w	r3, r3, #4
 8004cba:	2b04      	cmp	r3, #4
 8004cbc:	d122      	bne.n	8004d04 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	f003 0304 	and.w	r3, r3, #4
 8004cc8:	2b04      	cmp	r3, #4
 8004cca:	d11b      	bne.n	8004d04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f06f 0204 	mvn.w	r2, #4
 8004cd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2202      	movs	r2, #2
 8004cda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	699b      	ldr	r3, [r3, #24]
 8004ce2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d003      	beq.n	8004cf2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f7fd f996 	bl	800201c <HAL_TIM_IC_CaptureCallback>
 8004cf0:	e005      	b.n	8004cfe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f000 fae4 	bl	80052c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	f000 faea 	bl	80052d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2200      	movs	r2, #0
 8004d02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	691b      	ldr	r3, [r3, #16]
 8004d0a:	f003 0308 	and.w	r3, r3, #8
 8004d0e:	2b08      	cmp	r3, #8
 8004d10:	d122      	bne.n	8004d58 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	68db      	ldr	r3, [r3, #12]
 8004d18:	f003 0308 	and.w	r3, r3, #8
 8004d1c:	2b08      	cmp	r3, #8
 8004d1e:	d11b      	bne.n	8004d58 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f06f 0208 	mvn.w	r2, #8
 8004d28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2204      	movs	r2, #4
 8004d2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	69db      	ldr	r3, [r3, #28]
 8004d36:	f003 0303 	and.w	r3, r3, #3
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d003      	beq.n	8004d46 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f7fd f96c 	bl	800201c <HAL_TIM_IC_CaptureCallback>
 8004d44:	e005      	b.n	8004d52 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f000 faba 	bl	80052c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f000 fac0 	bl	80052d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	691b      	ldr	r3, [r3, #16]
 8004d5e:	f003 0310 	and.w	r3, r3, #16
 8004d62:	2b10      	cmp	r3, #16
 8004d64:	d122      	bne.n	8004dac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	f003 0310 	and.w	r3, r3, #16
 8004d70:	2b10      	cmp	r3, #16
 8004d72:	d11b      	bne.n	8004dac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f06f 0210 	mvn.w	r2, #16
 8004d7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2208      	movs	r2, #8
 8004d82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	69db      	ldr	r3, [r3, #28]
 8004d8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d003      	beq.n	8004d9a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f7fd f942 	bl	800201c <HAL_TIM_IC_CaptureCallback>
 8004d98:	e005      	b.n	8004da6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f000 fa90 	bl	80052c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f000 fa96 	bl	80052d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2200      	movs	r2, #0
 8004daa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	691b      	ldr	r3, [r3, #16]
 8004db2:	f003 0301 	and.w	r3, r3, #1
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d10e      	bne.n	8004dd8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	68db      	ldr	r3, [r3, #12]
 8004dc0:	f003 0301 	and.w	r3, r3, #1
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d107      	bne.n	8004dd8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f06f 0201 	mvn.w	r2, #1
 8004dd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f000 fa6b 	bl	80052ae <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	691b      	ldr	r3, [r3, #16]
 8004dde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004de2:	2b80      	cmp	r3, #128	@ 0x80
 8004de4:	d10e      	bne.n	8004e04 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	68db      	ldr	r3, [r3, #12]
 8004dec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004df0:	2b80      	cmp	r3, #128	@ 0x80
 8004df2:	d107      	bne.n	8004e04 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004dfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f000 fee4 	bl	8005bcc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	691b      	ldr	r3, [r3, #16]
 8004e0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e0e:	2b40      	cmp	r3, #64	@ 0x40
 8004e10:	d10e      	bne.n	8004e30 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e1c:	2b40      	cmp	r3, #64	@ 0x40
 8004e1e:	d107      	bne.n	8004e30 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004e28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f000 fa5a 	bl	80052e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	691b      	ldr	r3, [r3, #16]
 8004e36:	f003 0320 	and.w	r3, r3, #32
 8004e3a:	2b20      	cmp	r3, #32
 8004e3c:	d10e      	bne.n	8004e5c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	f003 0320 	and.w	r3, r3, #32
 8004e48:	2b20      	cmp	r3, #32
 8004e4a:	d107      	bne.n	8004e5c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f06f 0220 	mvn.w	r2, #32
 8004e54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f000 feaf 	bl	8005bba <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e5c:	bf00      	nop
 8004e5e:	3708      	adds	r7, #8
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}

08004e64 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b086      	sub	sp, #24
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	60f8      	str	r0, [r7, #12]
 8004e6c:	60b9      	str	r1, [r7, #8]
 8004e6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e70:	2300      	movs	r3, #0
 8004e72:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d101      	bne.n	8004e82 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004e7e:	2302      	movs	r3, #2
 8004e80:	e088      	b.n	8004f94 <HAL_TIM_IC_ConfigChannel+0x130>
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2201      	movs	r2, #1
 8004e86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d11b      	bne.n	8004ec8 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8004ea0:	f000 fc14 	bl	80056cc <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	699a      	ldr	r2, [r3, #24]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f022 020c 	bic.w	r2, r2, #12
 8004eb2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	6999      	ldr	r1, [r3, #24]
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	689a      	ldr	r2, [r3, #8]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	430a      	orrs	r2, r1
 8004ec4:	619a      	str	r2, [r3, #24]
 8004ec6:	e060      	b.n	8004f8a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2b04      	cmp	r3, #4
 8004ecc:	d11c      	bne.n	8004f08 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8004ede:	f000 fc7d 	bl	80057dc <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	699a      	ldr	r2, [r3, #24]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004ef0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	6999      	ldr	r1, [r3, #24]
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	021a      	lsls	r2, r3, #8
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	430a      	orrs	r2, r1
 8004f04:	619a      	str	r2, [r3, #24]
 8004f06:	e040      	b.n	8004f8a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2b08      	cmp	r3, #8
 8004f0c:	d11b      	bne.n	8004f46 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8004f1e:	f000 fcc8 	bl	80058b2 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	69da      	ldr	r2, [r3, #28]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f022 020c 	bic.w	r2, r2, #12
 8004f30:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	69d9      	ldr	r1, [r3, #28]
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	689a      	ldr	r2, [r3, #8]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	430a      	orrs	r2, r1
 8004f42:	61da      	str	r2, [r3, #28]
 8004f44:	e021      	b.n	8004f8a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2b0c      	cmp	r3, #12
 8004f4a:	d11c      	bne.n	8004f86 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8004f5c:	f000 fce4 	bl	8005928 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	69da      	ldr	r2, [r3, #28]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004f6e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	69d9      	ldr	r1, [r3, #28]
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	021a      	lsls	r2, r3, #8
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	430a      	orrs	r2, r1
 8004f82:	61da      	str	r2, [r3, #28]
 8004f84:	e001      	b.n	8004f8a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004f92:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3718      	adds	r7, #24
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}

08004f9c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b086      	sub	sp, #24
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	60f8      	str	r0, [r7, #12]
 8004fa4:	60b9      	str	r1, [r7, #8]
 8004fa6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004fb2:	2b01      	cmp	r3, #1
 8004fb4:	d101      	bne.n	8004fba <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004fb6:	2302      	movs	r3, #2
 8004fb8:	e0ae      	b.n	8005118 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2b0c      	cmp	r3, #12
 8004fc6:	f200 809f 	bhi.w	8005108 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004fca:	a201      	add	r2, pc, #4	@ (adr r2, 8004fd0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fd0:	08005005 	.word	0x08005005
 8004fd4:	08005109 	.word	0x08005109
 8004fd8:	08005109 	.word	0x08005109
 8004fdc:	08005109 	.word	0x08005109
 8004fe0:	08005045 	.word	0x08005045
 8004fe4:	08005109 	.word	0x08005109
 8004fe8:	08005109 	.word	0x08005109
 8004fec:	08005109 	.word	0x08005109
 8004ff0:	08005087 	.word	0x08005087
 8004ff4:	08005109 	.word	0x08005109
 8004ff8:	08005109 	.word	0x08005109
 8004ffc:	08005109 	.word	0x08005109
 8005000:	080050c7 	.word	0x080050c7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	68b9      	ldr	r1, [r7, #8]
 800500a:	4618      	mov	r0, r3
 800500c:	f000 f9d6 	bl	80053bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	699a      	ldr	r2, [r3, #24]
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f042 0208 	orr.w	r2, r2, #8
 800501e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	699a      	ldr	r2, [r3, #24]
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f022 0204 	bic.w	r2, r2, #4
 800502e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	6999      	ldr	r1, [r3, #24]
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	691a      	ldr	r2, [r3, #16]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	430a      	orrs	r2, r1
 8005040:	619a      	str	r2, [r3, #24]
      break;
 8005042:	e064      	b.n	800510e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	68b9      	ldr	r1, [r7, #8]
 800504a:	4618      	mov	r0, r3
 800504c:	f000 fa1c 	bl	8005488 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	699a      	ldr	r2, [r3, #24]
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800505e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	699a      	ldr	r2, [r3, #24]
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800506e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	6999      	ldr	r1, [r3, #24]
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	691b      	ldr	r3, [r3, #16]
 800507a:	021a      	lsls	r2, r3, #8
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	430a      	orrs	r2, r1
 8005082:	619a      	str	r2, [r3, #24]
      break;
 8005084:	e043      	b.n	800510e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	68b9      	ldr	r1, [r7, #8]
 800508c:	4618      	mov	r0, r3
 800508e:	f000 fa65 	bl	800555c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	69da      	ldr	r2, [r3, #28]
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f042 0208 	orr.w	r2, r2, #8
 80050a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	69da      	ldr	r2, [r3, #28]
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f022 0204 	bic.w	r2, r2, #4
 80050b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	69d9      	ldr	r1, [r3, #28]
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	691a      	ldr	r2, [r3, #16]
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	430a      	orrs	r2, r1
 80050c2:	61da      	str	r2, [r3, #28]
      break;
 80050c4:	e023      	b.n	800510e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	68b9      	ldr	r1, [r7, #8]
 80050cc:	4618      	mov	r0, r3
 80050ce:	f000 faaf 	bl	8005630 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	69da      	ldr	r2, [r3, #28]
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80050e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	69da      	ldr	r2, [r3, #28]
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80050f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	69d9      	ldr	r1, [r3, #28]
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	691b      	ldr	r3, [r3, #16]
 80050fc:	021a      	lsls	r2, r3, #8
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	430a      	orrs	r2, r1
 8005104:	61da      	str	r2, [r3, #28]
      break;
 8005106:	e002      	b.n	800510e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	75fb      	strb	r3, [r7, #23]
      break;
 800510c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2200      	movs	r2, #0
 8005112:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005116:	7dfb      	ldrb	r3, [r7, #23]
}
 8005118:	4618      	mov	r0, r3
 800511a:	3718      	adds	r7, #24
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}

08005120 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b084      	sub	sp, #16
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800512a:	2300      	movs	r3, #0
 800512c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005134:	2b01      	cmp	r3, #1
 8005136:	d101      	bne.n	800513c <HAL_TIM_ConfigClockSource+0x1c>
 8005138:	2302      	movs	r3, #2
 800513a:	e0b4      	b.n	80052a6 <HAL_TIM_ConfigClockSource+0x186>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2201      	movs	r2, #1
 8005140:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2202      	movs	r2, #2
 8005148:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800515a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005162:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	68ba      	ldr	r2, [r7, #8]
 800516a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005174:	d03e      	beq.n	80051f4 <HAL_TIM_ConfigClockSource+0xd4>
 8005176:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800517a:	f200 8087 	bhi.w	800528c <HAL_TIM_ConfigClockSource+0x16c>
 800517e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005182:	f000 8086 	beq.w	8005292 <HAL_TIM_ConfigClockSource+0x172>
 8005186:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800518a:	d87f      	bhi.n	800528c <HAL_TIM_ConfigClockSource+0x16c>
 800518c:	2b70      	cmp	r3, #112	@ 0x70
 800518e:	d01a      	beq.n	80051c6 <HAL_TIM_ConfigClockSource+0xa6>
 8005190:	2b70      	cmp	r3, #112	@ 0x70
 8005192:	d87b      	bhi.n	800528c <HAL_TIM_ConfigClockSource+0x16c>
 8005194:	2b60      	cmp	r3, #96	@ 0x60
 8005196:	d050      	beq.n	800523a <HAL_TIM_ConfigClockSource+0x11a>
 8005198:	2b60      	cmp	r3, #96	@ 0x60
 800519a:	d877      	bhi.n	800528c <HAL_TIM_ConfigClockSource+0x16c>
 800519c:	2b50      	cmp	r3, #80	@ 0x50
 800519e:	d03c      	beq.n	800521a <HAL_TIM_ConfigClockSource+0xfa>
 80051a0:	2b50      	cmp	r3, #80	@ 0x50
 80051a2:	d873      	bhi.n	800528c <HAL_TIM_ConfigClockSource+0x16c>
 80051a4:	2b40      	cmp	r3, #64	@ 0x40
 80051a6:	d058      	beq.n	800525a <HAL_TIM_ConfigClockSource+0x13a>
 80051a8:	2b40      	cmp	r3, #64	@ 0x40
 80051aa:	d86f      	bhi.n	800528c <HAL_TIM_ConfigClockSource+0x16c>
 80051ac:	2b30      	cmp	r3, #48	@ 0x30
 80051ae:	d064      	beq.n	800527a <HAL_TIM_ConfigClockSource+0x15a>
 80051b0:	2b30      	cmp	r3, #48	@ 0x30
 80051b2:	d86b      	bhi.n	800528c <HAL_TIM_ConfigClockSource+0x16c>
 80051b4:	2b20      	cmp	r3, #32
 80051b6:	d060      	beq.n	800527a <HAL_TIM_ConfigClockSource+0x15a>
 80051b8:	2b20      	cmp	r3, #32
 80051ba:	d867      	bhi.n	800528c <HAL_TIM_ConfigClockSource+0x16c>
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d05c      	beq.n	800527a <HAL_TIM_ConfigClockSource+0x15a>
 80051c0:	2b10      	cmp	r3, #16
 80051c2:	d05a      	beq.n	800527a <HAL_TIM_ConfigClockSource+0x15a>
 80051c4:	e062      	b.n	800528c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80051d6:	f000 fbfd 	bl	80059d4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80051e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	68ba      	ldr	r2, [r7, #8]
 80051f0:	609a      	str	r2, [r3, #8]
      break;
 80051f2:	e04f      	b.n	8005294 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005204:	f000 fbe6 	bl	80059d4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	689a      	ldr	r2, [r3, #8]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005216:	609a      	str	r2, [r3, #8]
      break;
 8005218:	e03c      	b.n	8005294 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005226:	461a      	mov	r2, r3
 8005228:	f000 faaa 	bl	8005780 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	2150      	movs	r1, #80	@ 0x50
 8005232:	4618      	mov	r0, r3
 8005234:	f000 fbb4 	bl	80059a0 <TIM_ITRx_SetConfig>
      break;
 8005238:	e02c      	b.n	8005294 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005246:	461a      	mov	r2, r3
 8005248:	f000 fb04 	bl	8005854 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	2160      	movs	r1, #96	@ 0x60
 8005252:	4618      	mov	r0, r3
 8005254:	f000 fba4 	bl	80059a0 <TIM_ITRx_SetConfig>
      break;
 8005258:	e01c      	b.n	8005294 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005266:	461a      	mov	r2, r3
 8005268:	f000 fa8a 	bl	8005780 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	2140      	movs	r1, #64	@ 0x40
 8005272:	4618      	mov	r0, r3
 8005274:	f000 fb94 	bl	80059a0 <TIM_ITRx_SetConfig>
      break;
 8005278:	e00c      	b.n	8005294 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4619      	mov	r1, r3
 8005284:	4610      	mov	r0, r2
 8005286:	f000 fb8b 	bl	80059a0 <TIM_ITRx_SetConfig>
      break;
 800528a:	e003      	b.n	8005294 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	73fb      	strb	r3, [r7, #15]
      break;
 8005290:	e000      	b.n	8005294 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005292:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2201      	movs	r2, #1
 8005298:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2200      	movs	r2, #0
 80052a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80052a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3710      	adds	r7, #16
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}

080052ae <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052ae:	b480      	push	{r7}
 80052b0:	b083      	sub	sp, #12
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80052b6:	bf00      	nop
 80052b8:	370c      	adds	r7, #12
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bc80      	pop	{r7}
 80052be:	4770      	bx	lr

080052c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b083      	sub	sp, #12
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80052c8:	bf00      	nop
 80052ca:	370c      	adds	r7, #12
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bc80      	pop	{r7}
 80052d0:	4770      	bx	lr

080052d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80052d2:	b480      	push	{r7}
 80052d4:	b083      	sub	sp, #12
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80052da:	bf00      	nop
 80052dc:	370c      	adds	r7, #12
 80052de:	46bd      	mov	sp, r7
 80052e0:	bc80      	pop	{r7}
 80052e2:	4770      	bx	lr

080052e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b083      	sub	sp, #12
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80052ec:	bf00      	nop
 80052ee:	370c      	adds	r7, #12
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bc80      	pop	{r7}
 80052f4:	4770      	bx	lr
	...

080052f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b085      	sub	sp, #20
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	4a29      	ldr	r2, [pc, #164]	@ (80053b0 <TIM_Base_SetConfig+0xb8>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d00b      	beq.n	8005328 <TIM_Base_SetConfig+0x30>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005316:	d007      	beq.n	8005328 <TIM_Base_SetConfig+0x30>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	4a26      	ldr	r2, [pc, #152]	@ (80053b4 <TIM_Base_SetConfig+0xbc>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d003      	beq.n	8005328 <TIM_Base_SetConfig+0x30>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	4a25      	ldr	r2, [pc, #148]	@ (80053b8 <TIM_Base_SetConfig+0xc0>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d108      	bne.n	800533a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800532e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	68fa      	ldr	r2, [r7, #12]
 8005336:	4313      	orrs	r3, r2
 8005338:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	4a1c      	ldr	r2, [pc, #112]	@ (80053b0 <TIM_Base_SetConfig+0xb8>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d00b      	beq.n	800535a <TIM_Base_SetConfig+0x62>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005348:	d007      	beq.n	800535a <TIM_Base_SetConfig+0x62>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	4a19      	ldr	r2, [pc, #100]	@ (80053b4 <TIM_Base_SetConfig+0xbc>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d003      	beq.n	800535a <TIM_Base_SetConfig+0x62>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	4a18      	ldr	r2, [pc, #96]	@ (80053b8 <TIM_Base_SetConfig+0xc0>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d108      	bne.n	800536c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005360:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	68db      	ldr	r3, [r3, #12]
 8005366:	68fa      	ldr	r2, [r7, #12]
 8005368:	4313      	orrs	r3, r2
 800536a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	695b      	ldr	r3, [r3, #20]
 8005376:	4313      	orrs	r3, r2
 8005378:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	68fa      	ldr	r2, [r7, #12]
 800537e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	689a      	ldr	r2, [r3, #8]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	4a07      	ldr	r2, [pc, #28]	@ (80053b0 <TIM_Base_SetConfig+0xb8>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d103      	bne.n	80053a0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	691a      	ldr	r2, [r3, #16]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	615a      	str	r2, [r3, #20]
}
 80053a6:	bf00      	nop
 80053a8:	3714      	adds	r7, #20
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bc80      	pop	{r7}
 80053ae:	4770      	bx	lr
 80053b0:	40012c00 	.word	0x40012c00
 80053b4:	40000400 	.word	0x40000400
 80053b8:	40000800 	.word	0x40000800

080053bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053bc:	b480      	push	{r7}
 80053be:	b087      	sub	sp, #28
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6a1b      	ldr	r3, [r3, #32]
 80053ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6a1b      	ldr	r3, [r3, #32]
 80053d0:	f023 0201 	bic.w	r2, r3, #1
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	699b      	ldr	r3, [r3, #24]
 80053e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f023 0303 	bic.w	r3, r3, #3
 80053f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	68fa      	ldr	r2, [r7, #12]
 80053fa:	4313      	orrs	r3, r2
 80053fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	f023 0302 	bic.w	r3, r3, #2
 8005404:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	697a      	ldr	r2, [r7, #20]
 800540c:	4313      	orrs	r3, r2
 800540e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	4a1c      	ldr	r2, [pc, #112]	@ (8005484 <TIM_OC1_SetConfig+0xc8>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d10c      	bne.n	8005432 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	f023 0308 	bic.w	r3, r3, #8
 800541e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	68db      	ldr	r3, [r3, #12]
 8005424:	697a      	ldr	r2, [r7, #20]
 8005426:	4313      	orrs	r3, r2
 8005428:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	f023 0304 	bic.w	r3, r3, #4
 8005430:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	4a13      	ldr	r2, [pc, #76]	@ (8005484 <TIM_OC1_SetConfig+0xc8>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d111      	bne.n	800545e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005440:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005448:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	695b      	ldr	r3, [r3, #20]
 800544e:	693a      	ldr	r2, [r7, #16]
 8005450:	4313      	orrs	r3, r2
 8005452:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	699b      	ldr	r3, [r3, #24]
 8005458:	693a      	ldr	r2, [r7, #16]
 800545a:	4313      	orrs	r3, r2
 800545c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	693a      	ldr	r2, [r7, #16]
 8005462:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	68fa      	ldr	r2, [r7, #12]
 8005468:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	685a      	ldr	r2, [r3, #4]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	697a      	ldr	r2, [r7, #20]
 8005476:	621a      	str	r2, [r3, #32]
}
 8005478:	bf00      	nop
 800547a:	371c      	adds	r7, #28
 800547c:	46bd      	mov	sp, r7
 800547e:	bc80      	pop	{r7}
 8005480:	4770      	bx	lr
 8005482:	bf00      	nop
 8005484:	40012c00 	.word	0x40012c00

08005488 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005488:	b480      	push	{r7}
 800548a:	b087      	sub	sp, #28
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
 8005490:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6a1b      	ldr	r3, [r3, #32]
 8005496:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6a1b      	ldr	r3, [r3, #32]
 800549c:	f023 0210 	bic.w	r2, r3, #16
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	699b      	ldr	r3, [r3, #24]
 80054ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80054b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	021b      	lsls	r3, r3, #8
 80054c6:	68fa      	ldr	r2, [r7, #12]
 80054c8:	4313      	orrs	r3, r2
 80054ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	f023 0320 	bic.w	r3, r3, #32
 80054d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	011b      	lsls	r3, r3, #4
 80054da:	697a      	ldr	r2, [r7, #20]
 80054dc:	4313      	orrs	r3, r2
 80054de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	4a1d      	ldr	r2, [pc, #116]	@ (8005558 <TIM_OC2_SetConfig+0xd0>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d10d      	bne.n	8005504 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80054ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	011b      	lsls	r3, r3, #4
 80054f6:	697a      	ldr	r2, [r7, #20]
 80054f8:	4313      	orrs	r3, r2
 80054fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005502:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	4a14      	ldr	r2, [pc, #80]	@ (8005558 <TIM_OC2_SetConfig+0xd0>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d113      	bne.n	8005534 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005512:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800551a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	695b      	ldr	r3, [r3, #20]
 8005520:	009b      	lsls	r3, r3, #2
 8005522:	693a      	ldr	r2, [r7, #16]
 8005524:	4313      	orrs	r3, r2
 8005526:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	699b      	ldr	r3, [r3, #24]
 800552c:	009b      	lsls	r3, r3, #2
 800552e:	693a      	ldr	r2, [r7, #16]
 8005530:	4313      	orrs	r3, r2
 8005532:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	693a      	ldr	r2, [r7, #16]
 8005538:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	68fa      	ldr	r2, [r7, #12]
 800553e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	685a      	ldr	r2, [r3, #4]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	697a      	ldr	r2, [r7, #20]
 800554c:	621a      	str	r2, [r3, #32]
}
 800554e:	bf00      	nop
 8005550:	371c      	adds	r7, #28
 8005552:	46bd      	mov	sp, r7
 8005554:	bc80      	pop	{r7}
 8005556:	4770      	bx	lr
 8005558:	40012c00 	.word	0x40012c00

0800555c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800555c:	b480      	push	{r7}
 800555e:	b087      	sub	sp, #28
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6a1b      	ldr	r3, [r3, #32]
 800556a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6a1b      	ldr	r3, [r3, #32]
 8005570:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	69db      	ldr	r3, [r3, #28]
 8005582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800558a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f023 0303 	bic.w	r3, r3, #3
 8005592:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	68fa      	ldr	r2, [r7, #12]
 800559a:	4313      	orrs	r3, r2
 800559c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80055a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	021b      	lsls	r3, r3, #8
 80055ac:	697a      	ldr	r2, [r7, #20]
 80055ae:	4313      	orrs	r3, r2
 80055b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	4a1d      	ldr	r2, [pc, #116]	@ (800562c <TIM_OC3_SetConfig+0xd0>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d10d      	bne.n	80055d6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80055c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	021b      	lsls	r3, r3, #8
 80055c8:	697a      	ldr	r2, [r7, #20]
 80055ca:	4313      	orrs	r3, r2
 80055cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80055d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	4a14      	ldr	r2, [pc, #80]	@ (800562c <TIM_OC3_SetConfig+0xd0>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d113      	bne.n	8005606 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80055e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80055ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	695b      	ldr	r3, [r3, #20]
 80055f2:	011b      	lsls	r3, r3, #4
 80055f4:	693a      	ldr	r2, [r7, #16]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	699b      	ldr	r3, [r3, #24]
 80055fe:	011b      	lsls	r3, r3, #4
 8005600:	693a      	ldr	r2, [r7, #16]
 8005602:	4313      	orrs	r3, r2
 8005604:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	693a      	ldr	r2, [r7, #16]
 800560a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	68fa      	ldr	r2, [r7, #12]
 8005610:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	685a      	ldr	r2, [r3, #4]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	697a      	ldr	r2, [r7, #20]
 800561e:	621a      	str	r2, [r3, #32]
}
 8005620:	bf00      	nop
 8005622:	371c      	adds	r7, #28
 8005624:	46bd      	mov	sp, r7
 8005626:	bc80      	pop	{r7}
 8005628:	4770      	bx	lr
 800562a:	bf00      	nop
 800562c:	40012c00 	.word	0x40012c00

08005630 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005630:	b480      	push	{r7}
 8005632:	b087      	sub	sp, #28
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
 8005638:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6a1b      	ldr	r3, [r3, #32]
 800563e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6a1b      	ldr	r3, [r3, #32]
 8005644:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	69db      	ldr	r3, [r3, #28]
 8005656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800565e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005666:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	021b      	lsls	r3, r3, #8
 800566e:	68fa      	ldr	r2, [r7, #12]
 8005670:	4313      	orrs	r3, r2
 8005672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800567a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	031b      	lsls	r3, r3, #12
 8005682:	693a      	ldr	r2, [r7, #16]
 8005684:	4313      	orrs	r3, r2
 8005686:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	4a0f      	ldr	r2, [pc, #60]	@ (80056c8 <TIM_OC4_SetConfig+0x98>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d109      	bne.n	80056a4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005696:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	695b      	ldr	r3, [r3, #20]
 800569c:	019b      	lsls	r3, r3, #6
 800569e:	697a      	ldr	r2, [r7, #20]
 80056a0:	4313      	orrs	r3, r2
 80056a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	697a      	ldr	r2, [r7, #20]
 80056a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	68fa      	ldr	r2, [r7, #12]
 80056ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	685a      	ldr	r2, [r3, #4]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	693a      	ldr	r2, [r7, #16]
 80056bc:	621a      	str	r2, [r3, #32]
}
 80056be:	bf00      	nop
 80056c0:	371c      	adds	r7, #28
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bc80      	pop	{r7}
 80056c6:	4770      	bx	lr
 80056c8:	40012c00 	.word	0x40012c00

080056cc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b087      	sub	sp, #28
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	60f8      	str	r0, [r7, #12]
 80056d4:	60b9      	str	r1, [r7, #8]
 80056d6:	607a      	str	r2, [r7, #4]
 80056d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	6a1b      	ldr	r3, [r3, #32]
 80056de:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	6a1b      	ldr	r3, [r3, #32]
 80056e4:	f023 0201 	bic.w	r2, r3, #1
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	699b      	ldr	r3, [r3, #24]
 80056f0:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	4a1f      	ldr	r2, [pc, #124]	@ (8005774 <TIM_TI1_SetConfig+0xa8>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d00b      	beq.n	8005712 <TIM_TI1_SetConfig+0x46>
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005700:	d007      	beq.n	8005712 <TIM_TI1_SetConfig+0x46>
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	4a1c      	ldr	r2, [pc, #112]	@ (8005778 <TIM_TI1_SetConfig+0xac>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d003      	beq.n	8005712 <TIM_TI1_SetConfig+0x46>
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	4a1b      	ldr	r2, [pc, #108]	@ (800577c <TIM_TI1_SetConfig+0xb0>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d101      	bne.n	8005716 <TIM_TI1_SetConfig+0x4a>
 8005712:	2301      	movs	r3, #1
 8005714:	e000      	b.n	8005718 <TIM_TI1_SetConfig+0x4c>
 8005716:	2300      	movs	r3, #0
 8005718:	2b00      	cmp	r3, #0
 800571a:	d008      	beq.n	800572e <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	f023 0303 	bic.w	r3, r3, #3
 8005722:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005724:	697a      	ldr	r2, [r7, #20]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4313      	orrs	r3, r2
 800572a:	617b      	str	r3, [r7, #20]
 800572c:	e003      	b.n	8005736 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	f043 0301 	orr.w	r3, r3, #1
 8005734:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800573c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	011b      	lsls	r3, r3, #4
 8005742:	b2db      	uxtb	r3, r3
 8005744:	697a      	ldr	r2, [r7, #20]
 8005746:	4313      	orrs	r3, r2
 8005748:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	f023 030a 	bic.w	r3, r3, #10
 8005750:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	f003 030a 	and.w	r3, r3, #10
 8005758:	693a      	ldr	r2, [r7, #16]
 800575a:	4313      	orrs	r3, r2
 800575c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	697a      	ldr	r2, [r7, #20]
 8005762:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	693a      	ldr	r2, [r7, #16]
 8005768:	621a      	str	r2, [r3, #32]
}
 800576a:	bf00      	nop
 800576c:	371c      	adds	r7, #28
 800576e:	46bd      	mov	sp, r7
 8005770:	bc80      	pop	{r7}
 8005772:	4770      	bx	lr
 8005774:	40012c00 	.word	0x40012c00
 8005778:	40000400 	.word	0x40000400
 800577c:	40000800 	.word	0x40000800

08005780 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005780:	b480      	push	{r7}
 8005782:	b087      	sub	sp, #28
 8005784:	af00      	add	r7, sp, #0
 8005786:	60f8      	str	r0, [r7, #12]
 8005788:	60b9      	str	r1, [r7, #8]
 800578a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	6a1b      	ldr	r3, [r3, #32]
 8005790:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	6a1b      	ldr	r3, [r3, #32]
 8005796:	f023 0201 	bic.w	r2, r3, #1
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	699b      	ldr	r3, [r3, #24]
 80057a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80057aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	011b      	lsls	r3, r3, #4
 80057b0:	693a      	ldr	r2, [r7, #16]
 80057b2:	4313      	orrs	r3, r2
 80057b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	f023 030a 	bic.w	r3, r3, #10
 80057bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80057be:	697a      	ldr	r2, [r7, #20]
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	4313      	orrs	r3, r2
 80057c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	693a      	ldr	r2, [r7, #16]
 80057ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	697a      	ldr	r2, [r7, #20]
 80057d0:	621a      	str	r2, [r3, #32]
}
 80057d2:	bf00      	nop
 80057d4:	371c      	adds	r7, #28
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bc80      	pop	{r7}
 80057da:	4770      	bx	lr

080057dc <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80057dc:	b480      	push	{r7}
 80057de:	b087      	sub	sp, #28
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	60f8      	str	r0, [r7, #12]
 80057e4:	60b9      	str	r1, [r7, #8]
 80057e6:	607a      	str	r2, [r7, #4]
 80057e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	6a1b      	ldr	r3, [r3, #32]
 80057ee:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	6a1b      	ldr	r3, [r3, #32]
 80057f4:	f023 0210 	bic.w	r2, r3, #16
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	699b      	ldr	r3, [r3, #24]
 8005800:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005808:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	021b      	lsls	r3, r3, #8
 800580e:	693a      	ldr	r2, [r7, #16]
 8005810:	4313      	orrs	r3, r2
 8005812:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800581a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	031b      	lsls	r3, r3, #12
 8005820:	b29b      	uxth	r3, r3
 8005822:	693a      	ldr	r2, [r7, #16]
 8005824:	4313      	orrs	r3, r2
 8005826:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800582e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	011b      	lsls	r3, r3, #4
 8005834:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8005838:	697a      	ldr	r2, [r7, #20]
 800583a:	4313      	orrs	r3, r2
 800583c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	693a      	ldr	r2, [r7, #16]
 8005842:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	697a      	ldr	r2, [r7, #20]
 8005848:	621a      	str	r2, [r3, #32]
}
 800584a:	bf00      	nop
 800584c:	371c      	adds	r7, #28
 800584e:	46bd      	mov	sp, r7
 8005850:	bc80      	pop	{r7}
 8005852:	4770      	bx	lr

08005854 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005854:	b480      	push	{r7}
 8005856:	b087      	sub	sp, #28
 8005858:	af00      	add	r7, sp, #0
 800585a:	60f8      	str	r0, [r7, #12]
 800585c:	60b9      	str	r1, [r7, #8]
 800585e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	6a1b      	ldr	r3, [r3, #32]
 8005864:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	6a1b      	ldr	r3, [r3, #32]
 800586a:	f023 0210 	bic.w	r2, r3, #16
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	699b      	ldr	r3, [r3, #24]
 8005876:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800587e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	031b      	lsls	r3, r3, #12
 8005884:	693a      	ldr	r2, [r7, #16]
 8005886:	4313      	orrs	r3, r2
 8005888:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005890:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	011b      	lsls	r3, r3, #4
 8005896:	697a      	ldr	r2, [r7, #20]
 8005898:	4313      	orrs	r3, r2
 800589a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	693a      	ldr	r2, [r7, #16]
 80058a0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	697a      	ldr	r2, [r7, #20]
 80058a6:	621a      	str	r2, [r3, #32]
}
 80058a8:	bf00      	nop
 80058aa:	371c      	adds	r7, #28
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bc80      	pop	{r7}
 80058b0:	4770      	bx	lr

080058b2 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80058b2:	b480      	push	{r7}
 80058b4:	b087      	sub	sp, #28
 80058b6:	af00      	add	r7, sp, #0
 80058b8:	60f8      	str	r0, [r7, #12]
 80058ba:	60b9      	str	r1, [r7, #8]
 80058bc:	607a      	str	r2, [r7, #4]
 80058be:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	6a1b      	ldr	r3, [r3, #32]
 80058c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	6a1b      	ldr	r3, [r3, #32]
 80058ca:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	69db      	ldr	r3, [r3, #28]
 80058d6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	f023 0303 	bic.w	r3, r3, #3
 80058de:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80058e0:	693a      	ldr	r2, [r7, #16]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	4313      	orrs	r3, r2
 80058e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80058ee:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	011b      	lsls	r3, r3, #4
 80058f4:	b2db      	uxtb	r3, r3
 80058f6:	693a      	ldr	r2, [r7, #16]
 80058f8:	4313      	orrs	r3, r2
 80058fa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005902:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	021b      	lsls	r3, r3, #8
 8005908:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800590c:	697a      	ldr	r2, [r7, #20]
 800590e:	4313      	orrs	r3, r2
 8005910:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	693a      	ldr	r2, [r7, #16]
 8005916:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	697a      	ldr	r2, [r7, #20]
 800591c:	621a      	str	r2, [r3, #32]
}
 800591e:	bf00      	nop
 8005920:	371c      	adds	r7, #28
 8005922:	46bd      	mov	sp, r7
 8005924:	bc80      	pop	{r7}
 8005926:	4770      	bx	lr

08005928 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005928:	b480      	push	{r7}
 800592a:	b087      	sub	sp, #28
 800592c:	af00      	add	r7, sp, #0
 800592e:	60f8      	str	r0, [r7, #12]
 8005930:	60b9      	str	r1, [r7, #8]
 8005932:	607a      	str	r2, [r7, #4]
 8005934:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	6a1b      	ldr	r3, [r3, #32]
 800593a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	6a1b      	ldr	r3, [r3, #32]
 8005940:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	69db      	ldr	r3, [r3, #28]
 800594c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005954:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	021b      	lsls	r3, r3, #8
 800595a:	693a      	ldr	r2, [r7, #16]
 800595c:	4313      	orrs	r3, r2
 800595e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005966:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	031b      	lsls	r3, r3, #12
 800596c:	b29b      	uxth	r3, r3
 800596e:	693a      	ldr	r2, [r7, #16]
 8005970:	4313      	orrs	r3, r2
 8005972:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800597a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	031b      	lsls	r3, r3, #12
 8005980:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005984:	697a      	ldr	r2, [r7, #20]
 8005986:	4313      	orrs	r3, r2
 8005988:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	693a      	ldr	r2, [r7, #16]
 800598e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	697a      	ldr	r2, [r7, #20]
 8005994:	621a      	str	r2, [r3, #32]
}
 8005996:	bf00      	nop
 8005998:	371c      	adds	r7, #28
 800599a:	46bd      	mov	sp, r7
 800599c:	bc80      	pop	{r7}
 800599e:	4770      	bx	lr

080059a0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b085      	sub	sp, #20
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059b6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80059b8:	683a      	ldr	r2, [r7, #0]
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	4313      	orrs	r3, r2
 80059be:	f043 0307 	orr.w	r3, r3, #7
 80059c2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	68fa      	ldr	r2, [r7, #12]
 80059c8:	609a      	str	r2, [r3, #8]
}
 80059ca:	bf00      	nop
 80059cc:	3714      	adds	r7, #20
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bc80      	pop	{r7}
 80059d2:	4770      	bx	lr

080059d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b087      	sub	sp, #28
 80059d8:	af00      	add	r7, sp, #0
 80059da:	60f8      	str	r0, [r7, #12]
 80059dc:	60b9      	str	r1, [r7, #8]
 80059de:	607a      	str	r2, [r7, #4]
 80059e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80059ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	021a      	lsls	r2, r3, #8
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	431a      	orrs	r2, r3
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	4313      	orrs	r3, r2
 80059fc:	697a      	ldr	r2, [r7, #20]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	697a      	ldr	r2, [r7, #20]
 8005a06:	609a      	str	r2, [r3, #8]
}
 8005a08:	bf00      	nop
 8005a0a:	371c      	adds	r7, #28
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bc80      	pop	{r7}
 8005a10:	4770      	bx	lr

08005a12 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005a12:	b480      	push	{r7}
 8005a14:	b087      	sub	sp, #28
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	60f8      	str	r0, [r7, #12]
 8005a1a:	60b9      	str	r1, [r7, #8]
 8005a1c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	f003 031f 	and.w	r3, r3, #31
 8005a24:	2201      	movs	r2, #1
 8005a26:	fa02 f303 	lsl.w	r3, r2, r3
 8005a2a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	6a1a      	ldr	r2, [r3, #32]
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	43db      	mvns	r3, r3
 8005a34:	401a      	ands	r2, r3
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	6a1a      	ldr	r2, [r3, #32]
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	f003 031f 	and.w	r3, r3, #31
 8005a44:	6879      	ldr	r1, [r7, #4]
 8005a46:	fa01 f303 	lsl.w	r3, r1, r3
 8005a4a:	431a      	orrs	r2, r3
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	621a      	str	r2, [r3, #32]
}
 8005a50:	bf00      	nop
 8005a52:	371c      	adds	r7, #28
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bc80      	pop	{r7}
 8005a58:	4770      	bx	lr
	...

08005a5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b085      	sub	sp, #20
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
 8005a64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d101      	bne.n	8005a74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a70:	2302      	movs	r3, #2
 8005a72:	e046      	b.n	8005b02 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2201      	movs	r2, #1
 8005a78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2202      	movs	r2, #2
 8005a80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a9a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	68fa      	ldr	r2, [r7, #12]
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	68fa      	ldr	r2, [r7, #12]
 8005aac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a16      	ldr	r2, [pc, #88]	@ (8005b0c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d00e      	beq.n	8005ad6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ac0:	d009      	beq.n	8005ad6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a12      	ldr	r2, [pc, #72]	@ (8005b10 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d004      	beq.n	8005ad6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a10      	ldr	r2, [pc, #64]	@ (8005b14 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d10c      	bne.n	8005af0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005adc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	68ba      	ldr	r2, [r7, #8]
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	68ba      	ldr	r2, [r7, #8]
 8005aee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2201      	movs	r2, #1
 8005af4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2200      	movs	r2, #0
 8005afc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005b00:	2300      	movs	r3, #0
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3714      	adds	r7, #20
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bc80      	pop	{r7}
 8005b0a:	4770      	bx	lr
 8005b0c:	40012c00 	.word	0x40012c00
 8005b10:	40000400 	.word	0x40000400
 8005b14:	40000800 	.word	0x40000800

08005b18 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b085      	sub	sp, #20
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
 8005b20:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005b22:	2300      	movs	r3, #0
 8005b24:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d101      	bne.n	8005b34 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005b30:	2302      	movs	r3, #2
 8005b32:	e03d      	b.n	8005bb0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2201      	movs	r2, #1
 8005b38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	68db      	ldr	r3, [r3, #12]
 8005b46:	4313      	orrs	r3, r2
 8005b48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	4313      	orrs	r3, r2
 8005b56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	4313      	orrs	r3, r2
 8005b64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4313      	orrs	r3, r2
 8005b72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	691b      	ldr	r3, [r3, #16]
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	695b      	ldr	r3, [r3, #20]
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	69db      	ldr	r3, [r3, #28]
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	68fa      	ldr	r2, [r7, #12]
 8005ba4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005bae:	2300      	movs	r3, #0
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	3714      	adds	r7, #20
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bc80      	pop	{r7}
 8005bb8:	4770      	bx	lr

08005bba <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005bba:	b480      	push	{r7}
 8005bbc:	b083      	sub	sp, #12
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005bc2:	bf00      	nop
 8005bc4:	370c      	adds	r7, #12
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bc80      	pop	{r7}
 8005bca:	4770      	bx	lr

08005bcc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b083      	sub	sp, #12
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005bd4:	bf00      	nop
 8005bd6:	370c      	adds	r7, #12
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bc80      	pop	{r7}
 8005bdc:	4770      	bx	lr

08005bde <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005bde:	b580      	push	{r7, lr}
 8005be0:	b082      	sub	sp, #8
 8005be2:	af00      	add	r7, sp, #0
 8005be4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d101      	bne.n	8005bf0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	e042      	b.n	8005c76 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005bf6:	b2db      	uxtb	r3, r3
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d106      	bne.n	8005c0a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f7fd fa35 	bl	8003074 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2224      	movs	r2, #36	@ 0x24
 8005c0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	68da      	ldr	r2, [r3, #12]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005c20:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f000 ff30 	bl	8006a88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	691a      	ldr	r2, [r3, #16]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005c36:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	695a      	ldr	r2, [r3, #20]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005c46:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	68da      	ldr	r2, [r3, #12]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005c56:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2220      	movs	r2, #32
 8005c62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2220      	movs	r2, #32
 8005c6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2200      	movs	r2, #0
 8005c72:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005c74:	2300      	movs	r3, #0
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3708      	adds	r7, #8
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}
	...

08005c80 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b08c      	sub	sp, #48	@ 0x30
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	60f8      	str	r0, [r7, #12]
 8005c88:	60b9      	str	r1, [r7, #8]
 8005c8a:	4613      	mov	r3, r2
 8005c8c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c94:	b2db      	uxtb	r3, r3
 8005c96:	2b20      	cmp	r3, #32
 8005c98:	d156      	bne.n	8005d48 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d002      	beq.n	8005ca6 <HAL_UART_Transmit_DMA+0x26>
 8005ca0:	88fb      	ldrh	r3, [r7, #6]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d101      	bne.n	8005caa <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e04f      	b.n	8005d4a <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8005caa:	68ba      	ldr	r2, [r7, #8]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	88fa      	ldrh	r2, [r7, #6]
 8005cb4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	88fa      	ldrh	r2, [r7, #6]
 8005cba:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2221      	movs	r2, #33	@ 0x21
 8005cc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cce:	4a21      	ldr	r2, [pc, #132]	@ (8005d54 <HAL_UART_Transmit_DMA+0xd4>)
 8005cd0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cd6:	4a20      	ldr	r2, [pc, #128]	@ (8005d58 <HAL_UART_Transmit_DMA+0xd8>)
 8005cd8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cde:	4a1f      	ldr	r2, [pc, #124]	@ (8005d5c <HAL_UART_Transmit_DMA+0xdc>)
 8005ce0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 8005cea:	f107 0308 	add.w	r3, r7, #8
 8005cee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8005cf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cf6:	6819      	ldr	r1, [r3, #0]
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	3304      	adds	r3, #4
 8005cfe:	461a      	mov	r2, r3
 8005d00:	88fb      	ldrh	r3, [r7, #6]
 8005d02:	f7fd fd0d 	bl	8003720 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005d0e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	3314      	adds	r3, #20
 8005d16:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d18:	69bb      	ldr	r3, [r7, #24]
 8005d1a:	e853 3f00 	ldrex	r3, [r3]
 8005d1e:	617b      	str	r3, [r7, #20]
   return(result);
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d26:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	3314      	adds	r3, #20
 8005d2e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005d30:	627a      	str	r2, [r7, #36]	@ 0x24
 8005d32:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d34:	6a39      	ldr	r1, [r7, #32]
 8005d36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d38:	e841 2300 	strex	r3, r2, [r1]
 8005d3c:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d3e:	69fb      	ldr	r3, [r7, #28]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d1e5      	bne.n	8005d10 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8005d44:	2300      	movs	r3, #0
 8005d46:	e000      	b.n	8005d4a <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8005d48:	2302      	movs	r3, #2
  }
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3730      	adds	r7, #48	@ 0x30
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}
 8005d52:	bf00      	nop
 8005d54:	0800631d 	.word	0x0800631d
 8005d58:	080063b7 	.word	0x080063b7
 8005d5c:	0800653b 	.word	0x0800653b

08005d60 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b084      	sub	sp, #16
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	60f8      	str	r0, [r7, #12]
 8005d68:	60b9      	str	r1, [r7, #8]
 8005d6a:	4613      	mov	r3, r2
 8005d6c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005d74:	b2db      	uxtb	r3, r3
 8005d76:	2b20      	cmp	r3, #32
 8005d78:	d112      	bne.n	8005da0 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d002      	beq.n	8005d86 <HAL_UART_Receive_DMA+0x26>
 8005d80:	88fb      	ldrh	r3, [r7, #6]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d101      	bne.n	8005d8a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	e00b      	b.n	8005da2 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005d90:	88fb      	ldrh	r3, [r7, #6]
 8005d92:	461a      	mov	r2, r3
 8005d94:	68b9      	ldr	r1, [r7, #8]
 8005d96:	68f8      	ldr	r0, [r7, #12]
 8005d98:	f000 fc1a 	bl	80065d0 <UART_Start_Receive_DMA>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	e000      	b.n	8005da2 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005da0:	2302      	movs	r3, #2
  }
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3710      	adds	r7, #16
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}
	...

08005dac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b0ba      	sub	sp, #232	@ 0xe8
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	68db      	ldr	r3, [r3, #12]
 8005dc4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	695b      	ldr	r3, [r3, #20]
 8005dce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005dde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005de2:	f003 030f 	and.w	r3, r3, #15
 8005de6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005dea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d10f      	bne.n	8005e12 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005df2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005df6:	f003 0320 	and.w	r3, r3, #32
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d009      	beq.n	8005e12 <HAL_UART_IRQHandler+0x66>
 8005dfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e02:	f003 0320 	and.w	r3, r3, #32
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d003      	beq.n	8005e12 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f000 fd7e 	bl	800690c <UART_Receive_IT>
      return;
 8005e10:	e25b      	b.n	80062ca <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005e12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	f000 80de 	beq.w	8005fd8 <HAL_UART_IRQHandler+0x22c>
 8005e1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e20:	f003 0301 	and.w	r3, r3, #1
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d106      	bne.n	8005e36 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005e28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e2c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	f000 80d1 	beq.w	8005fd8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005e36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e3a:	f003 0301 	and.w	r3, r3, #1
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d00b      	beq.n	8005e5a <HAL_UART_IRQHandler+0xae>
 8005e42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d005      	beq.n	8005e5a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e52:	f043 0201 	orr.w	r2, r3, #1
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e5e:	f003 0304 	and.w	r3, r3, #4
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d00b      	beq.n	8005e7e <HAL_UART_IRQHandler+0xd2>
 8005e66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e6a:	f003 0301 	and.w	r3, r3, #1
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d005      	beq.n	8005e7e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e76:	f043 0202 	orr.w	r2, r3, #2
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e82:	f003 0302 	and.w	r3, r3, #2
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d00b      	beq.n	8005ea2 <HAL_UART_IRQHandler+0xf6>
 8005e8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e8e:	f003 0301 	and.w	r3, r3, #1
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d005      	beq.n	8005ea2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e9a:	f043 0204 	orr.w	r2, r3, #4
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005ea2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ea6:	f003 0308 	and.w	r3, r3, #8
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d011      	beq.n	8005ed2 <HAL_UART_IRQHandler+0x126>
 8005eae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005eb2:	f003 0320 	and.w	r3, r3, #32
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d105      	bne.n	8005ec6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005eba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ebe:	f003 0301 	and.w	r3, r3, #1
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d005      	beq.n	8005ed2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005eca:	f043 0208 	orr.w	r2, r3, #8
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	f000 81f2 	beq.w	80062c0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005edc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ee0:	f003 0320 	and.w	r3, r3, #32
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d008      	beq.n	8005efa <HAL_UART_IRQHandler+0x14e>
 8005ee8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005eec:	f003 0320 	and.w	r3, r3, #32
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d002      	beq.n	8005efa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f000 fd09 	bl	800690c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	695b      	ldr	r3, [r3, #20]
 8005f00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	bf14      	ite	ne
 8005f08:	2301      	movne	r3, #1
 8005f0a:	2300      	moveq	r3, #0
 8005f0c:	b2db      	uxtb	r3, r3
 8005f0e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f16:	f003 0308 	and.w	r3, r3, #8
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d103      	bne.n	8005f26 <HAL_UART_IRQHandler+0x17a>
 8005f1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d04f      	beq.n	8005fc6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f000 fc13 	bl	8006752 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	695b      	ldr	r3, [r3, #20]
 8005f32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d041      	beq.n	8005fbe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	3314      	adds	r3, #20
 8005f40:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f44:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005f48:	e853 3f00 	ldrex	r3, [r3]
 8005f4c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005f50:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005f54:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f58:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	3314      	adds	r3, #20
 8005f62:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005f66:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005f6a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f6e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005f72:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005f76:	e841 2300 	strex	r3, r2, [r1]
 8005f7a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005f7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d1d9      	bne.n	8005f3a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d013      	beq.n	8005fb6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f92:	4a7e      	ldr	r2, [pc, #504]	@ (800618c <HAL_UART_IRQHandler+0x3e0>)
 8005f94:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f7fd fc5c 	bl	8003858 <HAL_DMA_Abort_IT>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d016      	beq.n	8005fd4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005faa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fac:	687a      	ldr	r2, [r7, #4]
 8005fae:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005fb0:	4610      	mov	r0, r2
 8005fb2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fb4:	e00e      	b.n	8005fd4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f000 f99c 	bl	80062f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fbc:	e00a      	b.n	8005fd4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f000 f998 	bl	80062f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fc4:	e006      	b.n	8005fd4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f000 f994 	bl	80062f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005fd2:	e175      	b.n	80062c0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fd4:	bf00      	nop
    return;
 8005fd6:	e173      	b.n	80062c0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	f040 814f 	bne.w	8006280 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005fe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005fe6:	f003 0310 	and.w	r3, r3, #16
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	f000 8148 	beq.w	8006280 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005ff0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ff4:	f003 0310 	and.w	r3, r3, #16
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	f000 8141 	beq.w	8006280 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005ffe:	2300      	movs	r3, #0
 8006000:	60bb      	str	r3, [r7, #8]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	60bb      	str	r3, [r7, #8]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	60bb      	str	r3, [r7, #8]
 8006012:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	695b      	ldr	r3, [r3, #20]
 800601a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800601e:	2b00      	cmp	r3, #0
 8006020:	f000 80b6 	beq.w	8006190 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006030:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006034:	2b00      	cmp	r3, #0
 8006036:	f000 8145 	beq.w	80062c4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800603e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006042:	429a      	cmp	r2, r3
 8006044:	f080 813e 	bcs.w	80062c4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800604e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006054:	699b      	ldr	r3, [r3, #24]
 8006056:	2b20      	cmp	r3, #32
 8006058:	f000 8088 	beq.w	800616c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	330c      	adds	r3, #12
 8006062:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006066:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800606a:	e853 3f00 	ldrex	r3, [r3]
 800606e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006072:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006076:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800607a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	330c      	adds	r3, #12
 8006084:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006088:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800608c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006090:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006094:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006098:	e841 2300 	strex	r3, r2, [r1]
 800609c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80060a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d1d9      	bne.n	800605c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	3314      	adds	r3, #20
 80060ae:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80060b2:	e853 3f00 	ldrex	r3, [r3]
 80060b6:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80060b8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80060ba:	f023 0301 	bic.w	r3, r3, #1
 80060be:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	3314      	adds	r3, #20
 80060c8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80060cc:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80060d0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060d2:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80060d4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80060d8:	e841 2300 	strex	r3, r2, [r1]
 80060dc:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80060de:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d1e1      	bne.n	80060a8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	3314      	adds	r3, #20
 80060ea:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80060ee:	e853 3f00 	ldrex	r3, [r3]
 80060f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80060f4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80060f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80060fa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	3314      	adds	r3, #20
 8006104:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006108:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800610a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800610c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800610e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006110:	e841 2300 	strex	r3, r2, [r1]
 8006114:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006116:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006118:	2b00      	cmp	r3, #0
 800611a:	d1e3      	bne.n	80060e4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2220      	movs	r2, #32
 8006120:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2200      	movs	r2, #0
 8006128:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	330c      	adds	r3, #12
 8006130:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006132:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006134:	e853 3f00 	ldrex	r3, [r3]
 8006138:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800613a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800613c:	f023 0310 	bic.w	r3, r3, #16
 8006140:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	330c      	adds	r3, #12
 800614a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800614e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006150:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006152:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006154:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006156:	e841 2300 	strex	r3, r2, [r1]
 800615a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800615c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800615e:	2b00      	cmp	r3, #0
 8006160:	d1e3      	bne.n	800612a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006166:	4618      	mov	r0, r3
 8006168:	f7fd fb3a 	bl	80037e0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2202      	movs	r2, #2
 8006170:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800617a:	b29b      	uxth	r3, r3
 800617c:	1ad3      	subs	r3, r2, r3
 800617e:	b29b      	uxth	r3, r3
 8006180:	4619      	mov	r1, r3
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f000 f8bf 	bl	8006306 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006188:	e09c      	b.n	80062c4 <HAL_UART_IRQHandler+0x518>
 800618a:	bf00      	nop
 800618c:	08006817 	.word	0x08006817
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006198:	b29b      	uxth	r3, r3
 800619a:	1ad3      	subs	r3, r2, r3
 800619c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	f000 808e 	beq.w	80062c8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80061ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	f000 8089 	beq.w	80062c8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	330c      	adds	r3, #12
 80061bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061c0:	e853 3f00 	ldrex	r3, [r3]
 80061c4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80061c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80061cc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	330c      	adds	r3, #12
 80061d6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80061da:	647a      	str	r2, [r7, #68]	@ 0x44
 80061dc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061de:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80061e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80061e2:	e841 2300 	strex	r3, r2, [r1]
 80061e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80061e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d1e3      	bne.n	80061b6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	3314      	adds	r3, #20
 80061f4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061f8:	e853 3f00 	ldrex	r3, [r3]
 80061fc:	623b      	str	r3, [r7, #32]
   return(result);
 80061fe:	6a3b      	ldr	r3, [r7, #32]
 8006200:	f023 0301 	bic.w	r3, r3, #1
 8006204:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	3314      	adds	r3, #20
 800620e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006212:	633a      	str	r2, [r7, #48]	@ 0x30
 8006214:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006216:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006218:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800621a:	e841 2300 	strex	r3, r2, [r1]
 800621e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006220:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006222:	2b00      	cmp	r3, #0
 8006224:	d1e3      	bne.n	80061ee <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2220      	movs	r2, #32
 800622a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2200      	movs	r2, #0
 8006232:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	330c      	adds	r3, #12
 800623a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	e853 3f00 	ldrex	r3, [r3]
 8006242:	60fb      	str	r3, [r7, #12]
   return(result);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f023 0310 	bic.w	r3, r3, #16
 800624a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	330c      	adds	r3, #12
 8006254:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006258:	61fa      	str	r2, [r7, #28]
 800625a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800625c:	69b9      	ldr	r1, [r7, #24]
 800625e:	69fa      	ldr	r2, [r7, #28]
 8006260:	e841 2300 	strex	r3, r2, [r1]
 8006264:	617b      	str	r3, [r7, #20]
   return(result);
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d1e3      	bne.n	8006234 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2202      	movs	r2, #2
 8006270:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006272:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006276:	4619      	mov	r1, r3
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f000 f844 	bl	8006306 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800627e:	e023      	b.n	80062c8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006280:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006284:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006288:	2b00      	cmp	r3, #0
 800628a:	d009      	beq.n	80062a0 <HAL_UART_IRQHandler+0x4f4>
 800628c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006290:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006294:	2b00      	cmp	r3, #0
 8006296:	d003      	beq.n	80062a0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f000 fad0 	bl	800683e <UART_Transmit_IT>
    return;
 800629e:	e014      	b.n	80062ca <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80062a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d00e      	beq.n	80062ca <HAL_UART_IRQHandler+0x51e>
 80062ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d008      	beq.n	80062ca <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f000 fb0f 	bl	80068dc <UART_EndTransmit_IT>
    return;
 80062be:	e004      	b.n	80062ca <HAL_UART_IRQHandler+0x51e>
    return;
 80062c0:	bf00      	nop
 80062c2:	e002      	b.n	80062ca <HAL_UART_IRQHandler+0x51e>
      return;
 80062c4:	bf00      	nop
 80062c6:	e000      	b.n	80062ca <HAL_UART_IRQHandler+0x51e>
      return;
 80062c8:	bf00      	nop
  }
}
 80062ca:	37e8      	adds	r7, #232	@ 0xe8
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}

080062d0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b083      	sub	sp, #12
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80062d8:	bf00      	nop
 80062da:	370c      	adds	r7, #12
 80062dc:	46bd      	mov	sp, r7
 80062de:	bc80      	pop	{r7}
 80062e0:	4770      	bx	lr

080062e2 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80062e2:	b480      	push	{r7}
 80062e4:	b083      	sub	sp, #12
 80062e6:	af00      	add	r7, sp, #0
 80062e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80062ea:	bf00      	nop
 80062ec:	370c      	adds	r7, #12
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bc80      	pop	{r7}
 80062f2:	4770      	bx	lr

080062f4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80062f4:	b480      	push	{r7}
 80062f6:	b083      	sub	sp, #12
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80062fc:	bf00      	nop
 80062fe:	370c      	adds	r7, #12
 8006300:	46bd      	mov	sp, r7
 8006302:	bc80      	pop	{r7}
 8006304:	4770      	bx	lr

08006306 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006306:	b480      	push	{r7}
 8006308:	b083      	sub	sp, #12
 800630a:	af00      	add	r7, sp, #0
 800630c:	6078      	str	r0, [r7, #4]
 800630e:	460b      	mov	r3, r1
 8006310:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006312:	bf00      	nop
 8006314:	370c      	adds	r7, #12
 8006316:	46bd      	mov	sp, r7
 8006318:	bc80      	pop	{r7}
 800631a:	4770      	bx	lr

0800631c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b090      	sub	sp, #64	@ 0x40
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006328:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f003 0320 	and.w	r3, r3, #32
 8006334:	2b00      	cmp	r3, #0
 8006336:	d137      	bne.n	80063a8 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8006338:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800633a:	2200      	movs	r2, #0
 800633c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800633e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	3314      	adds	r3, #20
 8006344:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006348:	e853 3f00 	ldrex	r3, [r3]
 800634c:	623b      	str	r3, [r7, #32]
   return(result);
 800634e:	6a3b      	ldr	r3, [r7, #32]
 8006350:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006354:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006356:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	3314      	adds	r3, #20
 800635c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800635e:	633a      	str	r2, [r7, #48]	@ 0x30
 8006360:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006362:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006364:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006366:	e841 2300 	strex	r3, r2, [r1]
 800636a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800636c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800636e:	2b00      	cmp	r3, #0
 8006370:	d1e5      	bne.n	800633e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006372:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	330c      	adds	r3, #12
 8006378:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	e853 3f00 	ldrex	r3, [r3]
 8006380:	60fb      	str	r3, [r7, #12]
   return(result);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006388:	637b      	str	r3, [r7, #52]	@ 0x34
 800638a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	330c      	adds	r3, #12
 8006390:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006392:	61fa      	str	r2, [r7, #28]
 8006394:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006396:	69b9      	ldr	r1, [r7, #24]
 8006398:	69fa      	ldr	r2, [r7, #28]
 800639a:	e841 2300 	strex	r3, r2, [r1]
 800639e:	617b      	str	r3, [r7, #20]
   return(result);
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d1e5      	bne.n	8006372 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80063a6:	e002      	b.n	80063ae <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80063a8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80063aa:	f7fb fe1b 	bl	8001fe4 <HAL_UART_TxCpltCallback>
}
 80063ae:	bf00      	nop
 80063b0:	3740      	adds	r7, #64	@ 0x40
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}

080063b6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80063b6:	b580      	push	{r7, lr}
 80063b8:	b084      	sub	sp, #16
 80063ba:	af00      	add	r7, sp, #0
 80063bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063c2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80063c4:	68f8      	ldr	r0, [r7, #12]
 80063c6:	f7ff ff83 	bl	80062d0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80063ca:	bf00      	nop
 80063cc:	3710      	adds	r7, #16
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}

080063d2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80063d2:	b580      	push	{r7, lr}
 80063d4:	b09c      	sub	sp, #112	@ 0x70
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063de:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f003 0320 	and.w	r3, r3, #32
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d172      	bne.n	80064d4 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80063ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80063f0:	2200      	movs	r2, #0
 80063f2:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80063f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	330c      	adds	r3, #12
 80063fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80063fe:	e853 3f00 	ldrex	r3, [r3]
 8006402:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006404:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006406:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800640a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800640c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	330c      	adds	r3, #12
 8006412:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006414:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006416:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006418:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800641a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800641c:	e841 2300 	strex	r3, r2, [r1]
 8006420:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006422:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006424:	2b00      	cmp	r3, #0
 8006426:	d1e5      	bne.n	80063f4 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006428:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	3314      	adds	r3, #20
 800642e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006430:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006432:	e853 3f00 	ldrex	r3, [r3]
 8006436:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006438:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800643a:	f023 0301 	bic.w	r3, r3, #1
 800643e:	667b      	str	r3, [r7, #100]	@ 0x64
 8006440:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	3314      	adds	r3, #20
 8006446:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006448:	647a      	str	r2, [r7, #68]	@ 0x44
 800644a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800644c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800644e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006450:	e841 2300 	strex	r3, r2, [r1]
 8006454:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006456:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006458:	2b00      	cmp	r3, #0
 800645a:	d1e5      	bne.n	8006428 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800645c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	3314      	adds	r3, #20
 8006462:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006466:	e853 3f00 	ldrex	r3, [r3]
 800646a:	623b      	str	r3, [r7, #32]
   return(result);
 800646c:	6a3b      	ldr	r3, [r7, #32]
 800646e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006472:	663b      	str	r3, [r7, #96]	@ 0x60
 8006474:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	3314      	adds	r3, #20
 800647a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800647c:	633a      	str	r2, [r7, #48]	@ 0x30
 800647e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006480:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006482:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006484:	e841 2300 	strex	r3, r2, [r1]
 8006488:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800648a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800648c:	2b00      	cmp	r3, #0
 800648e:	d1e5      	bne.n	800645c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006490:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006492:	2220      	movs	r2, #32
 8006494:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006498:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800649a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800649c:	2b01      	cmp	r3, #1
 800649e:	d119      	bne.n	80064d4 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	330c      	adds	r3, #12
 80064a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064a8:	693b      	ldr	r3, [r7, #16]
 80064aa:	e853 3f00 	ldrex	r3, [r3]
 80064ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f023 0310 	bic.w	r3, r3, #16
 80064b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80064b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	330c      	adds	r3, #12
 80064be:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80064c0:	61fa      	str	r2, [r7, #28]
 80064c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064c4:	69b9      	ldr	r1, [r7, #24]
 80064c6:	69fa      	ldr	r2, [r7, #28]
 80064c8:	e841 2300 	strex	r3, r2, [r1]
 80064cc:	617b      	str	r3, [r7, #20]
   return(result);
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d1e5      	bne.n	80064a0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80064d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80064d6:	2200      	movs	r2, #0
 80064d8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80064dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064de:	2b01      	cmp	r3, #1
 80064e0:	d106      	bne.n	80064f0 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80064e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80064e4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80064e6:	4619      	mov	r1, r3
 80064e8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80064ea:	f7ff ff0c 	bl	8006306 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80064ee:	e002      	b.n	80064f6 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80064f0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80064f2:	f7fb fd85 	bl	8002000 <HAL_UART_RxCpltCallback>
}
 80064f6:	bf00      	nop
 80064f8:	3770      	adds	r7, #112	@ 0x70
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}

080064fe <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80064fe:	b580      	push	{r7, lr}
 8006500:	b084      	sub	sp, #16
 8006502:	af00      	add	r7, sp, #0
 8006504:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800650a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	2201      	movs	r2, #1
 8006510:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006516:	2b01      	cmp	r3, #1
 8006518:	d108      	bne.n	800652c <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800651e:	085b      	lsrs	r3, r3, #1
 8006520:	b29b      	uxth	r3, r3
 8006522:	4619      	mov	r1, r3
 8006524:	68f8      	ldr	r0, [r7, #12]
 8006526:	f7ff feee 	bl	8006306 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800652a:	e002      	b.n	8006532 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800652c:	68f8      	ldr	r0, [r7, #12]
 800652e:	f7ff fed8 	bl	80062e2 <HAL_UART_RxHalfCpltCallback>
}
 8006532:	bf00      	nop
 8006534:	3710      	adds	r7, #16
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}

0800653a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800653a:	b580      	push	{r7, lr}
 800653c:	b084      	sub	sp, #16
 800653e:	af00      	add	r7, sp, #0
 8006540:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006542:	2300      	movs	r3, #0
 8006544:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800654a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	695b      	ldr	r3, [r3, #20]
 8006552:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006556:	2b00      	cmp	r3, #0
 8006558:	bf14      	ite	ne
 800655a:	2301      	movne	r3, #1
 800655c:	2300      	moveq	r3, #0
 800655e:	b2db      	uxtb	r3, r3
 8006560:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006568:	b2db      	uxtb	r3, r3
 800656a:	2b21      	cmp	r3, #33	@ 0x21
 800656c:	d108      	bne.n	8006580 <UART_DMAError+0x46>
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d005      	beq.n	8006580 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	2200      	movs	r2, #0
 8006578:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800657a:	68b8      	ldr	r0, [r7, #8]
 800657c:	f000 f8c2 	bl	8006704 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	695b      	ldr	r3, [r3, #20]
 8006586:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800658a:	2b00      	cmp	r3, #0
 800658c:	bf14      	ite	ne
 800658e:	2301      	movne	r3, #1
 8006590:	2300      	moveq	r3, #0
 8006592:	b2db      	uxtb	r3, r3
 8006594:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800659c:	b2db      	uxtb	r3, r3
 800659e:	2b22      	cmp	r3, #34	@ 0x22
 80065a0:	d108      	bne.n	80065b4 <UART_DMAError+0x7a>
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d005      	beq.n	80065b4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	2200      	movs	r2, #0
 80065ac:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80065ae:	68b8      	ldr	r0, [r7, #8]
 80065b0:	f000 f8cf 	bl	8006752 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065b8:	f043 0210 	orr.w	r2, r3, #16
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80065c0:	68b8      	ldr	r0, [r7, #8]
 80065c2:	f7ff fe97 	bl	80062f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80065c6:	bf00      	nop
 80065c8:	3710      	adds	r7, #16
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}
	...

080065d0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b098      	sub	sp, #96	@ 0x60
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	60f8      	str	r0, [r7, #12]
 80065d8:	60b9      	str	r1, [r7, #8]
 80065da:	4613      	mov	r3, r2
 80065dc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80065de:	68ba      	ldr	r2, [r7, #8]
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	88fa      	ldrh	r2, [r7, #6]
 80065e8:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2200      	movs	r2, #0
 80065ee:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2222      	movs	r2, #34	@ 0x22
 80065f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065fc:	4a3e      	ldr	r2, [pc, #248]	@ (80066f8 <UART_Start_Receive_DMA+0x128>)
 80065fe:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006604:	4a3d      	ldr	r2, [pc, #244]	@ (80066fc <UART_Start_Receive_DMA+0x12c>)
 8006606:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800660c:	4a3c      	ldr	r2, [pc, #240]	@ (8006700 <UART_Start_Receive_DMA+0x130>)
 800660e:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006614:	2200      	movs	r2, #0
 8006616:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006618:	f107 0308 	add.w	r3, r7, #8
 800661c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	3304      	adds	r3, #4
 8006628:	4619      	mov	r1, r3
 800662a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800662c:	681a      	ldr	r2, [r3, #0]
 800662e:	88fb      	ldrh	r3, [r7, #6]
 8006630:	f7fd f876 	bl	8003720 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006634:	2300      	movs	r3, #0
 8006636:	613b      	str	r3, [r7, #16]
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	613b      	str	r3, [r7, #16]
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	613b      	str	r3, [r7, #16]
 8006648:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	691b      	ldr	r3, [r3, #16]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d019      	beq.n	8006686 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	330c      	adds	r3, #12
 8006658:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800665a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800665c:	e853 3f00 	ldrex	r3, [r3]
 8006660:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006662:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006664:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006668:	65bb      	str	r3, [r7, #88]	@ 0x58
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	330c      	adds	r3, #12
 8006670:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006672:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8006674:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006676:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8006678:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800667a:	e841 2300 	strex	r3, r2, [r1]
 800667e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006680:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006682:	2b00      	cmp	r3, #0
 8006684:	d1e5      	bne.n	8006652 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	3314      	adds	r3, #20
 800668c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800668e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006690:	e853 3f00 	ldrex	r3, [r3]
 8006694:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006698:	f043 0301 	orr.w	r3, r3, #1
 800669c:	657b      	str	r3, [r7, #84]	@ 0x54
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	3314      	adds	r3, #20
 80066a4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80066a6:	63ba      	str	r2, [r7, #56]	@ 0x38
 80066a8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066aa:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80066ac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80066ae:	e841 2300 	strex	r3, r2, [r1]
 80066b2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80066b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d1e5      	bne.n	8006686 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	3314      	adds	r3, #20
 80066c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066c2:	69bb      	ldr	r3, [r7, #24]
 80066c4:	e853 3f00 	ldrex	r3, [r3]
 80066c8:	617b      	str	r3, [r7, #20]
   return(result);
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80066d0:	653b      	str	r3, [r7, #80]	@ 0x50
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	3314      	adds	r3, #20
 80066d8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80066da:	627a      	str	r2, [r7, #36]	@ 0x24
 80066dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066de:	6a39      	ldr	r1, [r7, #32]
 80066e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066e2:	e841 2300 	strex	r3, r2, [r1]
 80066e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80066e8:	69fb      	ldr	r3, [r7, #28]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d1e5      	bne.n	80066ba <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80066ee:	2300      	movs	r3, #0
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	3760      	adds	r7, #96	@ 0x60
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}
 80066f8:	080063d3 	.word	0x080063d3
 80066fc:	080064ff 	.word	0x080064ff
 8006700:	0800653b 	.word	0x0800653b

08006704 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006704:	b480      	push	{r7}
 8006706:	b089      	sub	sp, #36	@ 0x24
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	330c      	adds	r3, #12
 8006712:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	e853 3f00 	ldrex	r3, [r3]
 800671a:	60bb      	str	r3, [r7, #8]
   return(result);
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006722:	61fb      	str	r3, [r7, #28]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	330c      	adds	r3, #12
 800672a:	69fa      	ldr	r2, [r7, #28]
 800672c:	61ba      	str	r2, [r7, #24]
 800672e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006730:	6979      	ldr	r1, [r7, #20]
 8006732:	69ba      	ldr	r2, [r7, #24]
 8006734:	e841 2300 	strex	r3, r2, [r1]
 8006738:	613b      	str	r3, [r7, #16]
   return(result);
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d1e5      	bne.n	800670c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2220      	movs	r2, #32
 8006744:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8006748:	bf00      	nop
 800674a:	3724      	adds	r7, #36	@ 0x24
 800674c:	46bd      	mov	sp, r7
 800674e:	bc80      	pop	{r7}
 8006750:	4770      	bx	lr

08006752 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006752:	b480      	push	{r7}
 8006754:	b095      	sub	sp, #84	@ 0x54
 8006756:	af00      	add	r7, sp, #0
 8006758:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	330c      	adds	r3, #12
 8006760:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006762:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006764:	e853 3f00 	ldrex	r3, [r3]
 8006768:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800676a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800676c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006770:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	330c      	adds	r3, #12
 8006778:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800677a:	643a      	str	r2, [r7, #64]	@ 0x40
 800677c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800677e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006780:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006782:	e841 2300 	strex	r3, r2, [r1]
 8006786:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006788:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800678a:	2b00      	cmp	r3, #0
 800678c:	d1e5      	bne.n	800675a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	3314      	adds	r3, #20
 8006794:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006796:	6a3b      	ldr	r3, [r7, #32]
 8006798:	e853 3f00 	ldrex	r3, [r3]
 800679c:	61fb      	str	r3, [r7, #28]
   return(result);
 800679e:	69fb      	ldr	r3, [r7, #28]
 80067a0:	f023 0301 	bic.w	r3, r3, #1
 80067a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	3314      	adds	r3, #20
 80067ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80067ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80067b0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067b2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80067b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80067b6:	e841 2300 	strex	r3, r2, [r1]
 80067ba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80067bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d1e5      	bne.n	800678e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067c6:	2b01      	cmp	r3, #1
 80067c8:	d119      	bne.n	80067fe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	330c      	adds	r3, #12
 80067d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	e853 3f00 	ldrex	r3, [r3]
 80067d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	f023 0310 	bic.w	r3, r3, #16
 80067e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	330c      	adds	r3, #12
 80067e8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80067ea:	61ba      	str	r2, [r7, #24]
 80067ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ee:	6979      	ldr	r1, [r7, #20]
 80067f0:	69ba      	ldr	r2, [r7, #24]
 80067f2:	e841 2300 	strex	r3, r2, [r1]
 80067f6:	613b      	str	r3, [r7, #16]
   return(result);
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d1e5      	bne.n	80067ca <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2220      	movs	r2, #32
 8006802:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2200      	movs	r2, #0
 800680a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800680c:	bf00      	nop
 800680e:	3754      	adds	r7, #84	@ 0x54
 8006810:	46bd      	mov	sp, r7
 8006812:	bc80      	pop	{r7}
 8006814:	4770      	bx	lr

08006816 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006816:	b580      	push	{r7, lr}
 8006818:	b084      	sub	sp, #16
 800681a:	af00      	add	r7, sp, #0
 800681c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006822:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2200      	movs	r2, #0
 8006828:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2200      	movs	r2, #0
 800682e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006830:	68f8      	ldr	r0, [r7, #12]
 8006832:	f7ff fd5f 	bl	80062f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006836:	bf00      	nop
 8006838:	3710      	adds	r7, #16
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}

0800683e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800683e:	b480      	push	{r7}
 8006840:	b085      	sub	sp, #20
 8006842:	af00      	add	r7, sp, #0
 8006844:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800684c:	b2db      	uxtb	r3, r3
 800684e:	2b21      	cmp	r3, #33	@ 0x21
 8006850:	d13e      	bne.n	80068d0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	689b      	ldr	r3, [r3, #8]
 8006856:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800685a:	d114      	bne.n	8006886 <UART_Transmit_IT+0x48>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	691b      	ldr	r3, [r3, #16]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d110      	bne.n	8006886 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6a1b      	ldr	r3, [r3, #32]
 8006868:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	881b      	ldrh	r3, [r3, #0]
 800686e:	461a      	mov	r2, r3
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006878:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6a1b      	ldr	r3, [r3, #32]
 800687e:	1c9a      	adds	r2, r3, #2
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	621a      	str	r2, [r3, #32]
 8006884:	e008      	b.n	8006898 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6a1b      	ldr	r3, [r3, #32]
 800688a:	1c59      	adds	r1, r3, #1
 800688c:	687a      	ldr	r2, [r7, #4]
 800688e:	6211      	str	r1, [r2, #32]
 8006890:	781a      	ldrb	r2, [r3, #0]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800689c:	b29b      	uxth	r3, r3
 800689e:	3b01      	subs	r3, #1
 80068a0:	b29b      	uxth	r3, r3
 80068a2:	687a      	ldr	r2, [r7, #4]
 80068a4:	4619      	mov	r1, r3
 80068a6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d10f      	bne.n	80068cc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	68da      	ldr	r2, [r3, #12]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80068ba:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	68da      	ldr	r2, [r3, #12]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80068ca:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80068cc:	2300      	movs	r3, #0
 80068ce:	e000      	b.n	80068d2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80068d0:	2302      	movs	r3, #2
  }
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3714      	adds	r7, #20
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bc80      	pop	{r7}
 80068da:	4770      	bx	lr

080068dc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b082      	sub	sp, #8
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	68da      	ldr	r2, [r3, #12]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80068f2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2220      	movs	r2, #32
 80068f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f7fb fb71 	bl	8001fe4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006902:	2300      	movs	r3, #0
}
 8006904:	4618      	mov	r0, r3
 8006906:	3708      	adds	r7, #8
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}

0800690c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b08c      	sub	sp, #48	@ 0x30
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800691a:	b2db      	uxtb	r3, r3
 800691c:	2b22      	cmp	r3, #34	@ 0x22
 800691e:	f040 80ae 	bne.w	8006a7e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	689b      	ldr	r3, [r3, #8]
 8006926:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800692a:	d117      	bne.n	800695c <UART_Receive_IT+0x50>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	691b      	ldr	r3, [r3, #16]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d113      	bne.n	800695c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006934:	2300      	movs	r3, #0
 8006936:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800693c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	b29b      	uxth	r3, r3
 8006946:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800694a:	b29a      	uxth	r2, r3
 800694c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800694e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006954:	1c9a      	adds	r2, r3, #2
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	629a      	str	r2, [r3, #40]	@ 0x28
 800695a:	e026      	b.n	80069aa <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006960:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006962:	2300      	movs	r3, #0
 8006964:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	689b      	ldr	r3, [r3, #8]
 800696a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800696e:	d007      	beq.n	8006980 <UART_Receive_IT+0x74>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	689b      	ldr	r3, [r3, #8]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d10a      	bne.n	800698e <UART_Receive_IT+0x82>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	691b      	ldr	r3, [r3, #16]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d106      	bne.n	800698e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	b2da      	uxtb	r2, r3
 8006988:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800698a:	701a      	strb	r2, [r3, #0]
 800698c:	e008      	b.n	80069a0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	b2db      	uxtb	r3, r3
 8006996:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800699a:	b2da      	uxtb	r2, r3
 800699c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800699e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069a4:	1c5a      	adds	r2, r3, #1
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80069ae:	b29b      	uxth	r3, r3
 80069b0:	3b01      	subs	r3, #1
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	687a      	ldr	r2, [r7, #4]
 80069b6:	4619      	mov	r1, r3
 80069b8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d15d      	bne.n	8006a7a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	68da      	ldr	r2, [r3, #12]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f022 0220 	bic.w	r2, r2, #32
 80069cc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	68da      	ldr	r2, [r3, #12]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80069dc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	695a      	ldr	r2, [r3, #20]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f022 0201 	bic.w	r2, r2, #1
 80069ec:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2220      	movs	r2, #32
 80069f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2200      	movs	r2, #0
 80069fa:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a00:	2b01      	cmp	r3, #1
 8006a02:	d135      	bne.n	8006a70 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2200      	movs	r2, #0
 8006a08:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	330c      	adds	r3, #12
 8006a10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	e853 3f00 	ldrex	r3, [r3]
 8006a18:	613b      	str	r3, [r7, #16]
   return(result);
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	f023 0310 	bic.w	r3, r3, #16
 8006a20:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	330c      	adds	r3, #12
 8006a28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a2a:	623a      	str	r2, [r7, #32]
 8006a2c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a2e:	69f9      	ldr	r1, [r7, #28]
 8006a30:	6a3a      	ldr	r2, [r7, #32]
 8006a32:	e841 2300 	strex	r3, r2, [r1]
 8006a36:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a38:	69bb      	ldr	r3, [r7, #24]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d1e5      	bne.n	8006a0a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f003 0310 	and.w	r3, r3, #16
 8006a48:	2b10      	cmp	r3, #16
 8006a4a:	d10a      	bne.n	8006a62 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	60fb      	str	r3, [r7, #12]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	60fb      	str	r3, [r7, #12]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	60fb      	str	r3, [r7, #12]
 8006a60:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006a66:	4619      	mov	r1, r3
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f7ff fc4c 	bl	8006306 <HAL_UARTEx_RxEventCallback>
 8006a6e:	e002      	b.n	8006a76 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f7fb fac5 	bl	8002000 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006a76:	2300      	movs	r3, #0
 8006a78:	e002      	b.n	8006a80 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	e000      	b.n	8006a80 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006a7e:	2302      	movs	r3, #2
  }
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	3730      	adds	r7, #48	@ 0x30
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}

08006a88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b084      	sub	sp, #16
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	691b      	ldr	r3, [r3, #16]
 8006a96:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	68da      	ldr	r2, [r3, #12]
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	430a      	orrs	r2, r1
 8006aa4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	689a      	ldr	r2, [r3, #8]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	691b      	ldr	r3, [r3, #16]
 8006aae:	431a      	orrs	r2, r3
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	695b      	ldr	r3, [r3, #20]
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	68db      	ldr	r3, [r3, #12]
 8006abe:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8006ac2:	f023 030c 	bic.w	r3, r3, #12
 8006ac6:	687a      	ldr	r2, [r7, #4]
 8006ac8:	6812      	ldr	r2, [r2, #0]
 8006aca:	68b9      	ldr	r1, [r7, #8]
 8006acc:	430b      	orrs	r3, r1
 8006ace:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	695b      	ldr	r3, [r3, #20]
 8006ad6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	699a      	ldr	r2, [r3, #24]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	430a      	orrs	r2, r1
 8006ae4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a2c      	ldr	r2, [pc, #176]	@ (8006b9c <UART_SetConfig+0x114>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d103      	bne.n	8006af8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006af0:	f7fd fdd8 	bl	80046a4 <HAL_RCC_GetPCLK2Freq>
 8006af4:	60f8      	str	r0, [r7, #12]
 8006af6:	e002      	b.n	8006afe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006af8:	f7fd fdc0 	bl	800467c <HAL_RCC_GetPCLK1Freq>
 8006afc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006afe:	68fa      	ldr	r2, [r7, #12]
 8006b00:	4613      	mov	r3, r2
 8006b02:	009b      	lsls	r3, r3, #2
 8006b04:	4413      	add	r3, r2
 8006b06:	009a      	lsls	r2, r3, #2
 8006b08:	441a      	add	r2, r3
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	009b      	lsls	r3, r3, #2
 8006b10:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b14:	4a22      	ldr	r2, [pc, #136]	@ (8006ba0 <UART_SetConfig+0x118>)
 8006b16:	fba2 2303 	umull	r2, r3, r2, r3
 8006b1a:	095b      	lsrs	r3, r3, #5
 8006b1c:	0119      	lsls	r1, r3, #4
 8006b1e:	68fa      	ldr	r2, [r7, #12]
 8006b20:	4613      	mov	r3, r2
 8006b22:	009b      	lsls	r3, r3, #2
 8006b24:	4413      	add	r3, r2
 8006b26:	009a      	lsls	r2, r3, #2
 8006b28:	441a      	add	r2, r3
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	009b      	lsls	r3, r3, #2
 8006b30:	fbb2 f2f3 	udiv	r2, r2, r3
 8006b34:	4b1a      	ldr	r3, [pc, #104]	@ (8006ba0 <UART_SetConfig+0x118>)
 8006b36:	fba3 0302 	umull	r0, r3, r3, r2
 8006b3a:	095b      	lsrs	r3, r3, #5
 8006b3c:	2064      	movs	r0, #100	@ 0x64
 8006b3e:	fb00 f303 	mul.w	r3, r0, r3
 8006b42:	1ad3      	subs	r3, r2, r3
 8006b44:	011b      	lsls	r3, r3, #4
 8006b46:	3332      	adds	r3, #50	@ 0x32
 8006b48:	4a15      	ldr	r2, [pc, #84]	@ (8006ba0 <UART_SetConfig+0x118>)
 8006b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8006b4e:	095b      	lsrs	r3, r3, #5
 8006b50:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006b54:	4419      	add	r1, r3
 8006b56:	68fa      	ldr	r2, [r7, #12]
 8006b58:	4613      	mov	r3, r2
 8006b5a:	009b      	lsls	r3, r3, #2
 8006b5c:	4413      	add	r3, r2
 8006b5e:	009a      	lsls	r2, r3, #2
 8006b60:	441a      	add	r2, r3
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	009b      	lsls	r3, r3, #2
 8006b68:	fbb2 f2f3 	udiv	r2, r2, r3
 8006b6c:	4b0c      	ldr	r3, [pc, #48]	@ (8006ba0 <UART_SetConfig+0x118>)
 8006b6e:	fba3 0302 	umull	r0, r3, r3, r2
 8006b72:	095b      	lsrs	r3, r3, #5
 8006b74:	2064      	movs	r0, #100	@ 0x64
 8006b76:	fb00 f303 	mul.w	r3, r0, r3
 8006b7a:	1ad3      	subs	r3, r2, r3
 8006b7c:	011b      	lsls	r3, r3, #4
 8006b7e:	3332      	adds	r3, #50	@ 0x32
 8006b80:	4a07      	ldr	r2, [pc, #28]	@ (8006ba0 <UART_SetConfig+0x118>)
 8006b82:	fba2 2303 	umull	r2, r3, r2, r3
 8006b86:	095b      	lsrs	r3, r3, #5
 8006b88:	f003 020f 	and.w	r2, r3, #15
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	440a      	add	r2, r1
 8006b92:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006b94:	bf00      	nop
 8006b96:	3710      	adds	r7, #16
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}
 8006b9c:	40013800 	.word	0x40013800
 8006ba0:	51eb851f 	.word	0x51eb851f

08006ba4 <calloc>:
 8006ba4:	4b02      	ldr	r3, [pc, #8]	@ (8006bb0 <calloc+0xc>)
 8006ba6:	460a      	mov	r2, r1
 8006ba8:	4601      	mov	r1, r0
 8006baa:	6818      	ldr	r0, [r3, #0]
 8006bac:	f000 b802 	b.w	8006bb4 <_calloc_r>
 8006bb0:	20000010 	.word	0x20000010

08006bb4 <_calloc_r>:
 8006bb4:	b570      	push	{r4, r5, r6, lr}
 8006bb6:	fba1 5402 	umull	r5, r4, r1, r2
 8006bba:	b93c      	cbnz	r4, 8006bcc <_calloc_r+0x18>
 8006bbc:	4629      	mov	r1, r5
 8006bbe:	f000 f82f 	bl	8006c20 <_malloc_r>
 8006bc2:	4606      	mov	r6, r0
 8006bc4:	b928      	cbnz	r0, 8006bd2 <_calloc_r+0x1e>
 8006bc6:	2600      	movs	r6, #0
 8006bc8:	4630      	mov	r0, r6
 8006bca:	bd70      	pop	{r4, r5, r6, pc}
 8006bcc:	220c      	movs	r2, #12
 8006bce:	6002      	str	r2, [r0, #0]
 8006bd0:	e7f9      	b.n	8006bc6 <_calloc_r+0x12>
 8006bd2:	462a      	mov	r2, r5
 8006bd4:	4621      	mov	r1, r4
 8006bd6:	f000 f8e5 	bl	8006da4 <memset>
 8006bda:	e7f5      	b.n	8006bc8 <_calloc_r+0x14>

08006bdc <sbrk_aligned>:
 8006bdc:	b570      	push	{r4, r5, r6, lr}
 8006bde:	4e0f      	ldr	r6, [pc, #60]	@ (8006c1c <sbrk_aligned+0x40>)
 8006be0:	460c      	mov	r4, r1
 8006be2:	6831      	ldr	r1, [r6, #0]
 8006be4:	4605      	mov	r5, r0
 8006be6:	b911      	cbnz	r1, 8006bee <sbrk_aligned+0x12>
 8006be8:	f000 f8e4 	bl	8006db4 <_sbrk_r>
 8006bec:	6030      	str	r0, [r6, #0]
 8006bee:	4621      	mov	r1, r4
 8006bf0:	4628      	mov	r0, r5
 8006bf2:	f000 f8df 	bl	8006db4 <_sbrk_r>
 8006bf6:	1c43      	adds	r3, r0, #1
 8006bf8:	d103      	bne.n	8006c02 <sbrk_aligned+0x26>
 8006bfa:	f04f 34ff 	mov.w	r4, #4294967295
 8006bfe:	4620      	mov	r0, r4
 8006c00:	bd70      	pop	{r4, r5, r6, pc}
 8006c02:	1cc4      	adds	r4, r0, #3
 8006c04:	f024 0403 	bic.w	r4, r4, #3
 8006c08:	42a0      	cmp	r0, r4
 8006c0a:	d0f8      	beq.n	8006bfe <sbrk_aligned+0x22>
 8006c0c:	1a21      	subs	r1, r4, r0
 8006c0e:	4628      	mov	r0, r5
 8006c10:	f000 f8d0 	bl	8006db4 <_sbrk_r>
 8006c14:	3001      	adds	r0, #1
 8006c16:	d1f2      	bne.n	8006bfe <sbrk_aligned+0x22>
 8006c18:	e7ef      	b.n	8006bfa <sbrk_aligned+0x1e>
 8006c1a:	bf00      	nop
 8006c1c:	2000432c 	.word	0x2000432c

08006c20 <_malloc_r>:
 8006c20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c24:	1ccd      	adds	r5, r1, #3
 8006c26:	f025 0503 	bic.w	r5, r5, #3
 8006c2a:	3508      	adds	r5, #8
 8006c2c:	2d0c      	cmp	r5, #12
 8006c2e:	bf38      	it	cc
 8006c30:	250c      	movcc	r5, #12
 8006c32:	2d00      	cmp	r5, #0
 8006c34:	4606      	mov	r6, r0
 8006c36:	db01      	blt.n	8006c3c <_malloc_r+0x1c>
 8006c38:	42a9      	cmp	r1, r5
 8006c3a:	d904      	bls.n	8006c46 <_malloc_r+0x26>
 8006c3c:	230c      	movs	r3, #12
 8006c3e:	6033      	str	r3, [r6, #0]
 8006c40:	2000      	movs	r0, #0
 8006c42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c46:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006d1c <_malloc_r+0xfc>
 8006c4a:	f000 f869 	bl	8006d20 <__malloc_lock>
 8006c4e:	f8d8 3000 	ldr.w	r3, [r8]
 8006c52:	461c      	mov	r4, r3
 8006c54:	bb44      	cbnz	r4, 8006ca8 <_malloc_r+0x88>
 8006c56:	4629      	mov	r1, r5
 8006c58:	4630      	mov	r0, r6
 8006c5a:	f7ff ffbf 	bl	8006bdc <sbrk_aligned>
 8006c5e:	1c43      	adds	r3, r0, #1
 8006c60:	4604      	mov	r4, r0
 8006c62:	d158      	bne.n	8006d16 <_malloc_r+0xf6>
 8006c64:	f8d8 4000 	ldr.w	r4, [r8]
 8006c68:	4627      	mov	r7, r4
 8006c6a:	2f00      	cmp	r7, #0
 8006c6c:	d143      	bne.n	8006cf6 <_malloc_r+0xd6>
 8006c6e:	2c00      	cmp	r4, #0
 8006c70:	d04b      	beq.n	8006d0a <_malloc_r+0xea>
 8006c72:	6823      	ldr	r3, [r4, #0]
 8006c74:	4639      	mov	r1, r7
 8006c76:	4630      	mov	r0, r6
 8006c78:	eb04 0903 	add.w	r9, r4, r3
 8006c7c:	f000 f89a 	bl	8006db4 <_sbrk_r>
 8006c80:	4581      	cmp	r9, r0
 8006c82:	d142      	bne.n	8006d0a <_malloc_r+0xea>
 8006c84:	6821      	ldr	r1, [r4, #0]
 8006c86:	4630      	mov	r0, r6
 8006c88:	1a6d      	subs	r5, r5, r1
 8006c8a:	4629      	mov	r1, r5
 8006c8c:	f7ff ffa6 	bl	8006bdc <sbrk_aligned>
 8006c90:	3001      	adds	r0, #1
 8006c92:	d03a      	beq.n	8006d0a <_malloc_r+0xea>
 8006c94:	6823      	ldr	r3, [r4, #0]
 8006c96:	442b      	add	r3, r5
 8006c98:	6023      	str	r3, [r4, #0]
 8006c9a:	f8d8 3000 	ldr.w	r3, [r8]
 8006c9e:	685a      	ldr	r2, [r3, #4]
 8006ca0:	bb62      	cbnz	r2, 8006cfc <_malloc_r+0xdc>
 8006ca2:	f8c8 7000 	str.w	r7, [r8]
 8006ca6:	e00f      	b.n	8006cc8 <_malloc_r+0xa8>
 8006ca8:	6822      	ldr	r2, [r4, #0]
 8006caa:	1b52      	subs	r2, r2, r5
 8006cac:	d420      	bmi.n	8006cf0 <_malloc_r+0xd0>
 8006cae:	2a0b      	cmp	r2, #11
 8006cb0:	d917      	bls.n	8006ce2 <_malloc_r+0xc2>
 8006cb2:	1961      	adds	r1, r4, r5
 8006cb4:	42a3      	cmp	r3, r4
 8006cb6:	6025      	str	r5, [r4, #0]
 8006cb8:	bf18      	it	ne
 8006cba:	6059      	strne	r1, [r3, #4]
 8006cbc:	6863      	ldr	r3, [r4, #4]
 8006cbe:	bf08      	it	eq
 8006cc0:	f8c8 1000 	streq.w	r1, [r8]
 8006cc4:	5162      	str	r2, [r4, r5]
 8006cc6:	604b      	str	r3, [r1, #4]
 8006cc8:	4630      	mov	r0, r6
 8006cca:	f000 f82f 	bl	8006d2c <__malloc_unlock>
 8006cce:	f104 000b 	add.w	r0, r4, #11
 8006cd2:	1d23      	adds	r3, r4, #4
 8006cd4:	f020 0007 	bic.w	r0, r0, #7
 8006cd8:	1ac2      	subs	r2, r0, r3
 8006cda:	bf1c      	itt	ne
 8006cdc:	1a1b      	subne	r3, r3, r0
 8006cde:	50a3      	strne	r3, [r4, r2]
 8006ce0:	e7af      	b.n	8006c42 <_malloc_r+0x22>
 8006ce2:	6862      	ldr	r2, [r4, #4]
 8006ce4:	42a3      	cmp	r3, r4
 8006ce6:	bf0c      	ite	eq
 8006ce8:	f8c8 2000 	streq.w	r2, [r8]
 8006cec:	605a      	strne	r2, [r3, #4]
 8006cee:	e7eb      	b.n	8006cc8 <_malloc_r+0xa8>
 8006cf0:	4623      	mov	r3, r4
 8006cf2:	6864      	ldr	r4, [r4, #4]
 8006cf4:	e7ae      	b.n	8006c54 <_malloc_r+0x34>
 8006cf6:	463c      	mov	r4, r7
 8006cf8:	687f      	ldr	r7, [r7, #4]
 8006cfa:	e7b6      	b.n	8006c6a <_malloc_r+0x4a>
 8006cfc:	461a      	mov	r2, r3
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	42a3      	cmp	r3, r4
 8006d02:	d1fb      	bne.n	8006cfc <_malloc_r+0xdc>
 8006d04:	2300      	movs	r3, #0
 8006d06:	6053      	str	r3, [r2, #4]
 8006d08:	e7de      	b.n	8006cc8 <_malloc_r+0xa8>
 8006d0a:	230c      	movs	r3, #12
 8006d0c:	4630      	mov	r0, r6
 8006d0e:	6033      	str	r3, [r6, #0]
 8006d10:	f000 f80c 	bl	8006d2c <__malloc_unlock>
 8006d14:	e794      	b.n	8006c40 <_malloc_r+0x20>
 8006d16:	6005      	str	r5, [r0, #0]
 8006d18:	e7d6      	b.n	8006cc8 <_malloc_r+0xa8>
 8006d1a:	bf00      	nop
 8006d1c:	20004330 	.word	0x20004330

08006d20 <__malloc_lock>:
 8006d20:	4801      	ldr	r0, [pc, #4]	@ (8006d28 <__malloc_lock+0x8>)
 8006d22:	f000 b881 	b.w	8006e28 <__retarget_lock_acquire_recursive>
 8006d26:	bf00      	nop
 8006d28:	20004470 	.word	0x20004470

08006d2c <__malloc_unlock>:
 8006d2c:	4801      	ldr	r0, [pc, #4]	@ (8006d34 <__malloc_unlock+0x8>)
 8006d2e:	f000 b87c 	b.w	8006e2a <__retarget_lock_release_recursive>
 8006d32:	bf00      	nop
 8006d34:	20004470 	.word	0x20004470

08006d38 <realloc>:
 8006d38:	4b02      	ldr	r3, [pc, #8]	@ (8006d44 <realloc+0xc>)
 8006d3a:	460a      	mov	r2, r1
 8006d3c:	4601      	mov	r1, r0
 8006d3e:	6818      	ldr	r0, [r3, #0]
 8006d40:	f000 b802 	b.w	8006d48 <_realloc_r>
 8006d44:	20000010 	.word	0x20000010

08006d48 <_realloc_r>:
 8006d48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d4c:	4680      	mov	r8, r0
 8006d4e:	4615      	mov	r5, r2
 8006d50:	460c      	mov	r4, r1
 8006d52:	b921      	cbnz	r1, 8006d5e <_realloc_r+0x16>
 8006d54:	4611      	mov	r1, r2
 8006d56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d5a:	f7ff bf61 	b.w	8006c20 <_malloc_r>
 8006d5e:	b92a      	cbnz	r2, 8006d6c <_realloc_r+0x24>
 8006d60:	f000 f872 	bl	8006e48 <_free_r>
 8006d64:	2400      	movs	r4, #0
 8006d66:	4620      	mov	r0, r4
 8006d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d6c:	f000 f8b4 	bl	8006ed8 <_malloc_usable_size_r>
 8006d70:	4285      	cmp	r5, r0
 8006d72:	4606      	mov	r6, r0
 8006d74:	d802      	bhi.n	8006d7c <_realloc_r+0x34>
 8006d76:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006d7a:	d8f4      	bhi.n	8006d66 <_realloc_r+0x1e>
 8006d7c:	4629      	mov	r1, r5
 8006d7e:	4640      	mov	r0, r8
 8006d80:	f7ff ff4e 	bl	8006c20 <_malloc_r>
 8006d84:	4607      	mov	r7, r0
 8006d86:	2800      	cmp	r0, #0
 8006d88:	d0ec      	beq.n	8006d64 <_realloc_r+0x1c>
 8006d8a:	42b5      	cmp	r5, r6
 8006d8c:	462a      	mov	r2, r5
 8006d8e:	4621      	mov	r1, r4
 8006d90:	bf28      	it	cs
 8006d92:	4632      	movcs	r2, r6
 8006d94:	f000 f84a 	bl	8006e2c <memcpy>
 8006d98:	4621      	mov	r1, r4
 8006d9a:	4640      	mov	r0, r8
 8006d9c:	f000 f854 	bl	8006e48 <_free_r>
 8006da0:	463c      	mov	r4, r7
 8006da2:	e7e0      	b.n	8006d66 <_realloc_r+0x1e>

08006da4 <memset>:
 8006da4:	4603      	mov	r3, r0
 8006da6:	4402      	add	r2, r0
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d100      	bne.n	8006dae <memset+0xa>
 8006dac:	4770      	bx	lr
 8006dae:	f803 1b01 	strb.w	r1, [r3], #1
 8006db2:	e7f9      	b.n	8006da8 <memset+0x4>

08006db4 <_sbrk_r>:
 8006db4:	b538      	push	{r3, r4, r5, lr}
 8006db6:	2300      	movs	r3, #0
 8006db8:	4d05      	ldr	r5, [pc, #20]	@ (8006dd0 <_sbrk_r+0x1c>)
 8006dba:	4604      	mov	r4, r0
 8006dbc:	4608      	mov	r0, r1
 8006dbe:	602b      	str	r3, [r5, #0]
 8006dc0:	f7fc fa56 	bl	8003270 <_sbrk>
 8006dc4:	1c43      	adds	r3, r0, #1
 8006dc6:	d102      	bne.n	8006dce <_sbrk_r+0x1a>
 8006dc8:	682b      	ldr	r3, [r5, #0]
 8006dca:	b103      	cbz	r3, 8006dce <_sbrk_r+0x1a>
 8006dcc:	6023      	str	r3, [r4, #0]
 8006dce:	bd38      	pop	{r3, r4, r5, pc}
 8006dd0:	2000446c 	.word	0x2000446c

08006dd4 <__errno>:
 8006dd4:	4b01      	ldr	r3, [pc, #4]	@ (8006ddc <__errno+0x8>)
 8006dd6:	6818      	ldr	r0, [r3, #0]
 8006dd8:	4770      	bx	lr
 8006dda:	bf00      	nop
 8006ddc:	20000010 	.word	0x20000010

08006de0 <__libc_init_array>:
 8006de0:	b570      	push	{r4, r5, r6, lr}
 8006de2:	2600      	movs	r6, #0
 8006de4:	4d0c      	ldr	r5, [pc, #48]	@ (8006e18 <__libc_init_array+0x38>)
 8006de6:	4c0d      	ldr	r4, [pc, #52]	@ (8006e1c <__libc_init_array+0x3c>)
 8006de8:	1b64      	subs	r4, r4, r5
 8006dea:	10a4      	asrs	r4, r4, #2
 8006dec:	42a6      	cmp	r6, r4
 8006dee:	d109      	bne.n	8006e04 <__libc_init_array+0x24>
 8006df0:	f000 f87a 	bl	8006ee8 <_init>
 8006df4:	2600      	movs	r6, #0
 8006df6:	4d0a      	ldr	r5, [pc, #40]	@ (8006e20 <__libc_init_array+0x40>)
 8006df8:	4c0a      	ldr	r4, [pc, #40]	@ (8006e24 <__libc_init_array+0x44>)
 8006dfa:	1b64      	subs	r4, r4, r5
 8006dfc:	10a4      	asrs	r4, r4, #2
 8006dfe:	42a6      	cmp	r6, r4
 8006e00:	d105      	bne.n	8006e0e <__libc_init_array+0x2e>
 8006e02:	bd70      	pop	{r4, r5, r6, pc}
 8006e04:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e08:	4798      	blx	r3
 8006e0a:	3601      	adds	r6, #1
 8006e0c:	e7ee      	b.n	8006dec <__libc_init_array+0xc>
 8006e0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e12:	4798      	blx	r3
 8006e14:	3601      	adds	r6, #1
 8006e16:	e7f2      	b.n	8006dfe <__libc_init_array+0x1e>
 8006e18:	080071fc 	.word	0x080071fc
 8006e1c:	080071fc 	.word	0x080071fc
 8006e20:	080071fc 	.word	0x080071fc
 8006e24:	08007204 	.word	0x08007204

08006e28 <__retarget_lock_acquire_recursive>:
 8006e28:	4770      	bx	lr

08006e2a <__retarget_lock_release_recursive>:
 8006e2a:	4770      	bx	lr

08006e2c <memcpy>:
 8006e2c:	440a      	add	r2, r1
 8006e2e:	4291      	cmp	r1, r2
 8006e30:	f100 33ff 	add.w	r3, r0, #4294967295
 8006e34:	d100      	bne.n	8006e38 <memcpy+0xc>
 8006e36:	4770      	bx	lr
 8006e38:	b510      	push	{r4, lr}
 8006e3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e3e:	4291      	cmp	r1, r2
 8006e40:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006e44:	d1f9      	bne.n	8006e3a <memcpy+0xe>
 8006e46:	bd10      	pop	{r4, pc}

08006e48 <_free_r>:
 8006e48:	b538      	push	{r3, r4, r5, lr}
 8006e4a:	4605      	mov	r5, r0
 8006e4c:	2900      	cmp	r1, #0
 8006e4e:	d040      	beq.n	8006ed2 <_free_r+0x8a>
 8006e50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e54:	1f0c      	subs	r4, r1, #4
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	bfb8      	it	lt
 8006e5a:	18e4      	addlt	r4, r4, r3
 8006e5c:	f7ff ff60 	bl	8006d20 <__malloc_lock>
 8006e60:	4a1c      	ldr	r2, [pc, #112]	@ (8006ed4 <_free_r+0x8c>)
 8006e62:	6813      	ldr	r3, [r2, #0]
 8006e64:	b933      	cbnz	r3, 8006e74 <_free_r+0x2c>
 8006e66:	6063      	str	r3, [r4, #4]
 8006e68:	6014      	str	r4, [r2, #0]
 8006e6a:	4628      	mov	r0, r5
 8006e6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e70:	f7ff bf5c 	b.w	8006d2c <__malloc_unlock>
 8006e74:	42a3      	cmp	r3, r4
 8006e76:	d908      	bls.n	8006e8a <_free_r+0x42>
 8006e78:	6820      	ldr	r0, [r4, #0]
 8006e7a:	1821      	adds	r1, r4, r0
 8006e7c:	428b      	cmp	r3, r1
 8006e7e:	bf01      	itttt	eq
 8006e80:	6819      	ldreq	r1, [r3, #0]
 8006e82:	685b      	ldreq	r3, [r3, #4]
 8006e84:	1809      	addeq	r1, r1, r0
 8006e86:	6021      	streq	r1, [r4, #0]
 8006e88:	e7ed      	b.n	8006e66 <_free_r+0x1e>
 8006e8a:	461a      	mov	r2, r3
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	b10b      	cbz	r3, 8006e94 <_free_r+0x4c>
 8006e90:	42a3      	cmp	r3, r4
 8006e92:	d9fa      	bls.n	8006e8a <_free_r+0x42>
 8006e94:	6811      	ldr	r1, [r2, #0]
 8006e96:	1850      	adds	r0, r2, r1
 8006e98:	42a0      	cmp	r0, r4
 8006e9a:	d10b      	bne.n	8006eb4 <_free_r+0x6c>
 8006e9c:	6820      	ldr	r0, [r4, #0]
 8006e9e:	4401      	add	r1, r0
 8006ea0:	1850      	adds	r0, r2, r1
 8006ea2:	4283      	cmp	r3, r0
 8006ea4:	6011      	str	r1, [r2, #0]
 8006ea6:	d1e0      	bne.n	8006e6a <_free_r+0x22>
 8006ea8:	6818      	ldr	r0, [r3, #0]
 8006eaa:	685b      	ldr	r3, [r3, #4]
 8006eac:	4408      	add	r0, r1
 8006eae:	6010      	str	r0, [r2, #0]
 8006eb0:	6053      	str	r3, [r2, #4]
 8006eb2:	e7da      	b.n	8006e6a <_free_r+0x22>
 8006eb4:	d902      	bls.n	8006ebc <_free_r+0x74>
 8006eb6:	230c      	movs	r3, #12
 8006eb8:	602b      	str	r3, [r5, #0]
 8006eba:	e7d6      	b.n	8006e6a <_free_r+0x22>
 8006ebc:	6820      	ldr	r0, [r4, #0]
 8006ebe:	1821      	adds	r1, r4, r0
 8006ec0:	428b      	cmp	r3, r1
 8006ec2:	bf01      	itttt	eq
 8006ec4:	6819      	ldreq	r1, [r3, #0]
 8006ec6:	685b      	ldreq	r3, [r3, #4]
 8006ec8:	1809      	addeq	r1, r1, r0
 8006eca:	6021      	streq	r1, [r4, #0]
 8006ecc:	6063      	str	r3, [r4, #4]
 8006ece:	6054      	str	r4, [r2, #4]
 8006ed0:	e7cb      	b.n	8006e6a <_free_r+0x22>
 8006ed2:	bd38      	pop	{r3, r4, r5, pc}
 8006ed4:	20004330 	.word	0x20004330

08006ed8 <_malloc_usable_size_r>:
 8006ed8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006edc:	1f18      	subs	r0, r3, #4
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	bfbc      	itt	lt
 8006ee2:	580b      	ldrlt	r3, [r1, r0]
 8006ee4:	18c0      	addlt	r0, r0, r3
 8006ee6:	4770      	bx	lr

08006ee8 <_init>:
 8006ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eea:	bf00      	nop
 8006eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006eee:	bc08      	pop	{r3}
 8006ef0:	469e      	mov	lr, r3
 8006ef2:	4770      	bx	lr

08006ef4 <_fini>:
 8006ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ef6:	bf00      	nop
 8006ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006efa:	bc08      	pop	{r3}
 8006efc:	469e      	mov	lr, r3
 8006efe:	4770      	bx	lr
